{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013126000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3409588, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 66, "INMDSNAM": "CBT.V500.FILE861.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3409588, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3409588, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE861.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00;\\x03'", "DS1TRBAL": "b'\\xdb$'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07K\\x00\\x06\\x07O\\x00\\x05\\x00<'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00V\\x01\\x191\\x7f\\x01\\x191\\x7f\\x11\\x18\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-11-13T00:00:00", "modifydate": "2019-11-13T11:18:56", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  861\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE861\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 401 MEMBERS COUNTED; CUMULATIVE SIZE IS 30,111 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/13/19    11:18:56    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$COESP": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\t\\x19\\x1f\\x01\\t\\x19/\\x19\\x03\\x00.\\x00+\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2009-07-10T00:00:00", "modifydate": "2009-07-11T19:03:00", "lines": 46, "newlines": 43, "modlines": 0, "user": "GERHARD"}, "text": "//* COPYRIGHT (C) 1979 - 1994  EXPERT SYSTEM PROGRAMMING, INC.\n//* COPYRIGHT (C) 1995 - 2000  GERHARD POSTPISCHIL\n//* COPYRIGHT (C) 2001 -       EXPERT SYSTEM PROGRAMMING\n//* ALL RIGHTS RESERVED.\n//* NOTE TO U.S. GOVERNMENT USERS .. DOCUMENTATION RELATED TO\n//* RESTRICTED RIGHTS .. USE, DUPLICATION OR DISCLOSURE IS SUBJECT\n//* TO RESTRICTIONS SET FORTH IN GSA ADP SCHEDULE CONTRACT\n//*\n//* THE MATERIAL IN THIS FILE IS COPYRIGHTED.\n//*\n//* *  UNLESS MARKED OTHERWISE WITHIN THE PROGRAM CODE, THE\n//*    MATERIAL IS COPYRIGHTED BY EXPERT SYSTEM PROGRAMMING\n//*\n//* *  SOME MEMBERS MAY BE THE PROPERTY OF OTHER COPYRIGHT HOLDERS,\n//*    AND ARE IDENTIFIED AS SUCH IN THEIR TEXT.\n//*\n//* PERMISSION IS GRANTED TO:\n//*\n//* *  MEMBERS WITH EXH IN THEIR NAMES ARE RESTRICTED TO LICENSED\n//*    USERS OF THE EXHIBIT PACKAGE.\n//*\n//* *  MEMBERS NOT OTHERWISE RESTRICTED BY THEIR OWNERS ARE FREE-\n//*    WARE, AND MAY BE USED FREELY FOR NOT-FOR-PROFIT USE. THEY\n//*    MAY NOT BE SOLD, LICENSED, OR USED IN COMMERCIAL PRODUCTS.\n//*\n//* *  STORE THE COPYRIGHTED MATERIAL IN YOUR SYSTEM AND DISPLAY\n//*    IT ON TERMINALS.\n//*\n//* *  PRINT ONLY THE NUMBER OF COPIES REQUIRED FOR USE BY THOSE\n//*    PERSONS RESPONSIBLE FOR INSTALLING THE ESP PROGRAMMING AND\n//*    LICENSED PROGRAMS FOR WHICH THIS MATERIAL HAS BEEN PROVIDED.\n//*\n//* *  MODIFY THE MATERIAL TO MEET SPECIFIC INSTALLATION REQUIREMENTS.\n//*\n//* THE ESP COPYRIGHT NOTICE MUST APPEAR ON ALL PRINTED VERSIONS OF\n//* THIS MATERIAL OR EXTRACTS THEREOF AND ON THE DISPLAY MEDIUM WHEN\n//* IT IS BEING DISPLAYED.  PERMISSION IS NOT GRANTED TO FURTHER\n//* REPRODUCE OR DISTRIBUTE THE MATERIAL, EXCEPT BY WRITTEN AGREEMENT.\n//*\n//* UNLESS PERMISSION IS RESCINDED, THE MATERIAL MAY BE STORED AND\n//* DISTRIBUTED BY THE HERCULES MVS PROJECTS, AND THE CBTTAPE.ORG SITE.\n//*\n//* LIB: $$$COESP\n//* GDE: NONE\n//* DOC: THIS MEMBER CONTAINS COPYRIGHT INFORMATION.\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$INDEX": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x07\\x00\\x00\\x01\\x13#\\x0f\\x01\\x13#_\\x15\\x13\\x024\\x00.\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.07", "flags": 0, "createdate": "2013-08-18T00:00:00", "modifydate": "2013-08-23T15:13:00", "lines": 564, "newlines": 46, "modlines": 0, "user": "GERHARD"}, "text": "This library contains macros required for programs in CBT file 860.\nUse and distribution is limited as stated in member $$RIGHTS.\nBefore assembling any programs, please configure the options in member\nSYSPARM to match your environment.\n\n$FCB2    Builds 3211 FCB definitions for SYS1.IMAGELIB\n$FCB3    Builds 3800 FCB definitions for SYS1.IMAGELIB\n$HEAD    MIM#3 macro to generate ASM headers, by C.J. Goelz\n$TCKCONV Replaces STCKCONV for MVS; slightly different keywords.\n#CNVRT   String functions (deblank, etc.) and date/time (ext @FORMATS)\n#FMT     Data conversion and formatting (external routine @FORMATS)\n#FOOT    Debug macro; sets footprint in a work area\n#OPMSG   Produces a string, with text insertions, with RDW, and issues\n           WTOs (by default). Or use to just format text.\n#PRT     Simple printer macro, uses SUBPRT routine\n#PRTWRK  Defines work area for #PRT\n#RDR     Simple input read macro, uses SUBRDR routine\n#RDRWRK  Defines work area for #RDR\n#SORT    Bubble sort for simple table; by GPW ?\n#TGET    Interface to SUBTGET routine; either GETLINE or WTOR issued.\n#TPUT    Interface to SUBTPUT routine; either PUTLINE or WTO issued.\n#TRACE   Interface to instruction trace routine PGMTRACE\n#TRAP    Interface to @SPIEDER to print PSW, registers, and storage.\n#TRC     Interface to PGMTRACE instruction tracing.\n#TRCCLC  sample for using #TRC to trigger and stop tracing\n@OBTAIN  Interface to @OBTAINS rutine for authorized programs. Reads\n           VTOC by tracks, and stages when memory is availble.\n@PROTECT Interface for PROTECT SVC, with local mods.\n@VOLRESB Alternative to @VOLREAD for unauthorized programs\n@VOLREST Work area for @VOLRESB\nAMODE    Dummy to allow assembly on MVS and older systems\nAM24     Sets AM24 on 31-bit; NoOp on older systems (replaced by SAM24)\nAM31     Sets AM31 on 31-bit; NoOp on older systems (replaced by SAM31)\nARM      Sets Access Register Mode on or off; optionally saves or loads\n           the registers.\nARMODE   Different ARM\nAUTHBCDE Builds a CDE for arbitrary storage area; renamed from Gilbert\n           Saint-Flour's BUILDCDE macro.\nA64D     Add 64-bit integer to 64-bit integer\nA64F     Add 32-bit integer to 64-bit integer\nBAKR     Very poor substitute for real BAKR; registers into save are\nBALS     Generates BAL or BAS depending on options.\nBALSR    Generates BALR or BASR depending on options.\nBANDAID  Invokes GSF's SYSDEBUG (as @BANDAID) or @SPIEDER debugging.\nBASS     Generates BAL or BAS depending on options.\nBASCALL  Simple subroutine call with AMODE setting.\nBASEND   PGMTRACE macro to end subroutine code.\nBASHEAD  PGMTRACE macro to begin a subroutine.\nBASR     Expands a BASR instruction for ASM X/F (use under Hercules)\nBASRETD  PGMTRACE macro to return from a subroutine.\nBASSM    Generates BASSM or BAS depending on options.\nBCON     Builds text preceded by 1-byte length. May have intervening\n           DCs if the END option is used.\nBIGBEN   Prints current time on @PRINTER file 1 (if open).\nBIX      Branches to a list of up to 256 addresses depending on a\n           one-byte branch value (may be in register, gets masked,\n           and shifted, as specified).\nBLANKOUT Clears are to spaces with MVC or MVCL, depending on options.\nBLOOK    Generates in-line subroutine to perform a simple table (BTAB)\n           lookup, and branches on match. Spaces over leading blanks.\nBSM      Generates a BALR unless &MVSXA flag is set.\nBTAB     Generates a look-up table or BLOOK and VLOOK routines.\nBUILDCDE Builds CDE for arbitrary storage (by GSF); fixed for MVS 3.8\nCATCALL  Invokes SUBCAT or SUBICF for catalog lookup (name or generic)\nCATSCAT  Expands user's work area for catalog functions.\nCATSPARM Expands SUBCAT/SUBICF calling parameters.\nCATSWORK Expands SUBCAT/SUBICF work area.\nCLRL     Clear storage to specified character; default is hex zero.\nCMASK    Generates code to compare a mask to a string; returns with\n           condition code set.\nCNVA     Converts a register address (24-bit) for display.  (INSECT)\nCNVD     Converts an integer for display (needs INSECT macro).\nCNVR     Converts a register value to hex display.          (INSECT)\nCNVX     Converts storage to hex display (limit 7 bytes in) (INSECT)\nCPOOL    Simple Cellpool substitute (see SUBCPOOL)\nCRMEND   Cross-memory service end of relocated code.\nCRMEXIT  Cross-memory service return code.\nCRMHEAD  Cross-memory service start of relocated code.\nCRMS     Cross-memory service invocation.\nCRMSPIE  Cross-memory service error recovery.\nCSADD    Add using Compare and Swap.\nCSDEC    Subtract using Compare and Swap.\nCSIRWORK Maps IGGCSI00 return area.\nCSREP    Replace a word using Compare and Swap.\nCSTART   Start of Exhibit conversational module (private)\nCVH      Converts register to integer mode display.         (INSECT)\nCVI      Converts integer register value to display.        (INSECT)\nDASDTYPE In-line code to provide DASD information from UCB.\nDBO      Very old debug macro; OS/360 & 370 only. See DEBTROLD program.\n           Superceded by #TRAP and @SPIEDER.\nDBT      Debug macro for OS/390, using DEBTRACE program.\nDCBEXITD Generates DCB exit list entries for optional services in\n           Shmuel Metz's @DCBEXIT program.\nDCIN     Makes a DC with the label defined on the last byte for MVCIN.\nDCLC     IBM macro generate mixed case text from upper-case only.\n           Use / to upper-case next word; < to upper-case next letter,\n           or define your own.\nDCON     Builds text preceded by 1-byte length-1. May have intervening\n           DCs if the END option is used.\nDCS      Bill Godfrey's 3270 screen definition macro (fixed sizes only)\nDEBCNT   0C1 after n invocations.\nDEBDO    Skips to DEBEND unless debug mode is on (&BUGBEAR).\nDEBEND   Target for DEBDO.\nDEBEX    Causes 0C3.\nDEBINLIN Obsolete DEBTRACE code that expanded in-line.\nDEBPRT   Toggles debug printing on/off (in DEBTROLD and DEBTRACE).\nDEBSTOMP Sets one-byte progress indicator in user byte.\nDEBTRACE Old DEBTROLD/DEBTRACE invocation macro.\nDEBTRACY Inner macro for DBO/DBT.\nDELETEST Checks whether a 3/4-byte address is non-zero, and issues a\n           DELETE SVC for the same name.\nDIAG     Expands a Diagnose instruction in R1,R3,code format.\nDISPLAY  (private) define 2260/3270 display areas.\nDSTART   (private) beginning of a display module.\nDSUBSECT (private) code for display modules'\nDSUBSPAC (private) code for display modules.\nDUMP     (private) old code for variable formatting to display.\nDYNSPACE Inner macro for ALLOC and FREE.\nEBCDIG   Converts an absolute value, variable, or expression into an\n           integer EBCDIC assembly value. Typically used to have\n           assembler generated SORT control cards.\nEBCHEX   Converts an absolute value, variable, or expression into a\n           hexadecimal EBCDIC assembly value.\nENDM     Program return macro by Shmuel Metz. Also see SAVEM.\nESPCVT   (local CVT extension other than CVTUSER)\nESPHEAD  Program entry macro\nESPIE    Expands as SPIE in older systems.\nESPPDS   Defines IHAPDS bits not in the MS mapping.\nEXHM@ZAP (private)\nEXHMADVN (private)\nEXHMADVS (private)\nEXHMCAML (private)\nEXHMDIO  (private)\nEXHMDUMP (private)\nEXHMFSED (private)\nEXHMFSUP (private)\nEXHMGTFI (private)\nEXHMGTFX (private)\nEXHMKALA (private)\nEXHMLINE (private)\nEXHMSTAR (private)\nEXHMSTAS (private)\nEXHMTAPE (private)\nEXHMUPDC (private)\nEXHMUPDS (private)\nFD       Field Definition for @PRINTER and @SCREENS.\nFDBAR    FD for percentage bar.\nFDBR     FD to branch on condition in list of FDs.\nFDBUMP   Increments registers in FD list.\nFDCLC    Compares two strings and branches on condition in FD list.\nFDCLI    Compares byte to value and branches on condition in FD list.\nFDDUMP   Simple storage formatting (hex + EBCDIC) with offset.\nFDEXEC   Execute another FD sequence and return. May not nest.\nFDFD     Defines a field label and value; may expand based on system.\nFDFLAG   Prints text (defined by FLGTAB) matching flag bits.\nFDGOTO   Transfers control to another FD (no return).\nFDIN     Define a 3270 input field.\nFDINP    Define a privileged 3270 input field.\nFDLINE   Define a complete 3270 line (SCLINE service).\nFDLITEM  Define fields in an FDLINE.\nFDLSET   Set an attribute in an FDLINE.\nFDLVAL   Inner macro for FDL macros.\nFDMODE   Switches address resolution in an FD list (24 or 31).\nFDOPT    Sets non-field options (e.g., new line, indent, carriage\n           control, field address {SBA}).\nFDPRT    Same as FD but for printer (no color or high-lighting).\nFDREPT   Repeat a character.\nFDROOM   Start new line unless there is enough room on current line.\nFDSCAN   Combines several FD function - label, input field, options.\nFDSECT   Maps FD entry expansion.\nFDSNAP   Produces configurable storage displays.\nFDSPACE  Inserts specified number of spaces on current line.\nFDTM     Test flags in a byte and branch in FD list.\nFDUEX    Request a user exit to be taken.\nFDUEXEND Define end of user exit code.\nFDUEXHED Define start of user exit code.\nFDUEXRET Return from user exit.\nFETWORK  Map request and work area for SUBFETCH (replaces LOAD SVC).\nFIXD     Convert floating point to integer (no checking).\nFLD      Shmuel Metz's 3270 field definition macro.\nFLGTAB   Define a table of text strings vs. flags. Used by FDFLAG.\nFLOATD   Convert register integer to floating point.\nFSAWORK  Mapping of common portion of dynamic work area storage used\n           by @-routine services.\nGETCC    Place condition code bits into high byte of register.\nGETJESID (private) routine to get id for a JES2 job.\nGETREG   Load a register from caller's save area, or from BAKR stack.\nHAREAD   (private) read blocks from hasp/JES2 spool packs.\nHASPQSCN (private) scan hasp/JES2 job queues.\nHASPTEST (private) test that HASP/JES2 is up; initialize local stuff.\nHCON     Generate a string preceded by half-word length.\nHQUE     (private) define HASP/JES2 queue names for display.\nIAC      dummy for MVS; sets flags to zero.\nINC      Increment or decrement a register or full-word value.\nINCH     Increment or decrement a register or half-word value.\nINDEC    Convert 1-4 byte integer in storage to display.\nINDSN    Convert input DSN with prefixing, etc. (local code).\nINEDIT   Convert packed to display              (local code).\nINHEX    Convert storage to hex display         (local code).\nINITDAP  (private)\nINITIOWK (private)\nINPCLOSE Close one or more input files in @INPREAD.\nINPCOM   Inner macro for input functions.\nINPFEOV  Force End Of Volume on input file.\nINPFIND  Position to start of PDS member on input file.\nINPGET   Get a record from @INPREAD.\nINPKEEP  Keep this for one subsequent INPGET.\nINPKEEPM Keep current member.\nINPOPEN  Open one @INPREAD file (1-8).\nINPQMEM  Get member information (directory info).\nINPREAD  Get a block from @INPREAD.\nINPWORK  Define an @INPREAD work area (one per file).\nINSECT   Expands code for CV convert functions.\nINSETS   Inner macro for INSECT/Conversion.\nIPM      Loads program mask.\nJOBSEPLN Maps the job separator line of the MVS Tur(n)key system.\nLADJ     Left justifies a string that's followed by a space.\nLAE      Generates an LA under MVS.\nLAM      Generates a label, if any, under MVS.\nLAT      Loads a 3/4 byte address and branches on zero or non-zero.\nLCSTR    Convert character string to lower case DC; no escapes.\nLDSUB    (private)\nLIX      Operates similar to BIX, but returns resolved addresses on\n           indices; branches on missing or excessive values.\nLJIT     Locates the JIT on a HASP system.\nLMVC     OS/360 equivalent of MVCL.\nLNE      Shmuel Metz's 3270 code - request a line.\nLNKSTK   Map of linkage stack entry (for OS/390 and z/OS)\nLOCBYTE  Wrapper for SRST instruction, or expands code on OS/370.\nLOCLEN   Find length of a string with arbitrary ending character.\n           Suggested by an e-mail from Clement Clarke (author of JOL)\nLPALOOK  Locates a module in LPA, or loads it; returns address.\nLTCB     Loads current TCB; optionally with USING.\nLTJID    Loads TJID of current task.\nLTJP     Loads JQE address for HASP.\nLTJQEP   Loads JQE point for HASP.\nLTP      Loads and tests nth parameter in a calling list.\nMACAD    Expands A-constant in CSECT/RSECT, or A(0) in DSECT.\nMACBDDDL Combines address and length: A,5 -> A(5)   dd(b),4 -> dd(4,b)\nMACBL    Expands a branch in CSECT/RSECT, or A(0) in DSECT.\nMACDC    Expands DC with or without label depending on global.\nMACDEFXT Kludgy alternative for D' attribute for ASM/XF.\nMACLIST  Converts macro list into 1-10 global values.\nMACMAPHD Header macro to generate CSECT, DSECT, or 0D.\nMACPARM  Generates instructions for macro operands, compensating for\n           register vs. address forms, strings, etc.\nMACPLOP  Stores value in parameter list (ST for register; LA/ST other).\nMACQOLIT Analyzes string operand (unquoted, quoted, literal).\nMACQOTER Adds quotes to unquoted string, or removes quotes.\nMACSRVLD Inner macro to check whether a module was loaded by @SERVICE\n           (SERVLOAD macro); if not, loads address with =V(name).\nMAPAUTO  Maps AUTOCMD/AUTORDR request block.\nMAPCMPR  Maps COMP3270 buffer compression routine parameter area.\nMAPCMPRT Maps common printer option area for debug routines DEBTRACE,\n           PGMTRACE, and others.\nMAPCOMM  (private) communications area mapping and code.\nMAPDEFMT Maps parameter and return area for SUBDEFMT (PDS directory).\nMAPDSCHK Maps parameter and return area for SUBDSCHK (DS validation).\nMAPEXK   (private) CSA area map.\nMAPEXR   (private) CSA area map.\nMAPEXTNT Maps extent entry as found in DSCB1 and DSCB3.\nMAPFD    Maps FD and FDPRT expansions.\nMAPFDL   Maps FDLINE expansion.\nMAPFDS   Maps entry for @SCREENS (old TSO full-screen I/O).\nMAPFDW   Maps work area for 3270 full-screen functions (SC----).\nMAPFIW   Maps input field for 3270 full-screen functions (SC----).\nMAPINDEX Maps index entries in (local) IBM module data base.\nMAPINP   Maps expansion of INPWORK macro.\nMAPINPWK Maps @INPREAD work area.\nMAPIOWK  (private) I/O work area and code.\nMAPJOBDY (private) JES2 I/O area mapping.\nMAPJOBWK (private) JES2 job display area mapping.\nMAPLODCB (private) JES2 load module/DCB area mapping.\nMAPMTS   (private) user data area mapping.\nMAPMTV   (private) multi-user common vector table.\nMAPPARSE Maps request area for @PARSER routine.\nMAPPARST Maps @PARSER results, one entry for keyword or positional.\nMAPPDS   Maps PDS directory entries (usually placed after IHAPDS) for\n           SPF and IEBUPDTX entries.\nMAPPINGS Old GBLC tables for system mapping macro versus USING label.\nMAPPRT   Maps expansion of PRTWORK/PUNWORK macros.\nMAPPRTWK Maps @PRINTER work area.\nMAPRDC   Maps return from Read Device Configuration CCWs (x'64', x'E4')\nMAPRES   (private) maps CSA communication area.\nMAPSBALL Maps request parameters for SUBALLOC routine.\nMAPSBAWK Maps SUBALLOC return area (code, reason, mesages).\nMAPSBP2W Maps SUBP2W return area (day, month, year, day of week).\nMAPSCR   Maps expansion of SCRWORK area.\nMAPSCRWK Maps work area used by @SCREENS.\nMAPSQSP  (private) maps CSA data area.\nMAPTSA   Maps common area for @SERVICE functions.\nMAPVOLRD Maps @VOLREAD return area.\nMAPVTOCS (private) maps VTOC work area.\nMAPWORK  (private) common functions, pointers, and data.\nMAPXOPTS (private) maps option records.\nMAPXWORK (private) maps debugging work area.\nMASKEQU  Defines mask bits using I and O rather than 0 and 1. E.g.,\n           ICM r0,IIOO,data to load high half-word.\nMAX      Compares register to storage, and loads larger value. Use\n           with TYPE= for H, E, D, A, or F. A/F is the default.\nMAXH     Compares register with storage halfword; loads larger.\nMDEF     Defines a message (in MDEFHEAD/MDEFEND range).\nMDEFDICT Builds a dictionary entry from MDEF text.\nMDEFEND  Ends a message table.\nMDEFGBL  Defines globals for message processing.\nMDEFHEAD Begins a mesage module (one per message range or language).\nMDEFPARM Message processing parameter area mapping (see XMSG).\nMIN      Compares register to storage, and loads smaller value. Use\n           with TYPE= for H, E, D, A, or F. A/F is the default.\nMINH     Compares register with storage halfword; loads smaller.\nMOTE     Shmuel Metz's MNOTE in open code.\nMSECT    Expands macros requested by NEED or USE (also see MAPPINGS)\nMSORT    Expands code for shell sort.\nMTITL    Shmuel Metz's TITLE facility - define fixed part (see STITL)\nMVCLIT   Moves a literal to storage using literal's length.\nMVC2     Move data to storage using second operand's length.\nMVICC    Set a one-byte return code and optional one-byte reason code.\nMVSDSAB  Invokes GETDSAB or local SUBDSAB depending on options.\nMVSQUERY MVS substitute for CVSQUERY; calls SUBQUERY.\nMVSSVCUP MVS substitute for SVCUPDTE; calls SUBSVCUP.\nMVST     MVS substitute for MVST instruction.\nMYLVL    Generates a global integer corresponding to the system level.\nNEED     Names a control block to be expanded by MSECT.\nNUSE     Names a control bock to be expanded, and a USING register.\nOICCC    OR a one-byte return code and optional one-byte reason code.\nONEXIT   (private) names a recovery exit.\nONSPIE   (private) sets/resets a SPIE recovery exit.\nOPTIONGB Defines assembly option global variables (also see SYSPARM).\nPARFGSET Sets/resets parsed flags after @PARSER, using SUBVERB lookup.\nPARKEYAD Builds branch address tables, using SUBVERB lookup.\nPARKEYBX Builds BXLE words for table lookup (name, name2, ..., nameZ)\nPARKEYFG Builds flag off and on settings for text string (PARFGSET)\nPARMLOAD Loads PARM address/length in batch and TSO CP.\nPARSE    Invokes @PARSER to examine a string, with options.\nPATCH    Creates a patch area (64 SL2(*) by default).\nPFKEYS   Defines assembler globals with PFK names and AID value.\nPGMBAKR  Program header; uses PGMHEAD for MVS, or BAKR.\nPGMBAND  Returns in PGMBAKR headed code. R15-R1 preloaded.\nPGMEXIT  Returns from a program entered via PGMHEAD.\nPGMHEAD  Standard program entry; gets storage for save and work areas,\n           clears dynamic storage, sets base(s) and issues USINGS.\nPGMPATCH Creates a patch area of 129S(*).\nPIT      (old) HASP PIT entry mapping.\nPRTBIG   Using @PRINTER files, produces big letters; up to three sizes.\nPRTCLOSE Closes one or more print/punch files.\nPRTCOM   Inner macro to produce @PRINTER calling parameters.\nPRTDATA  Prints multiple items, each a valid FD operand.\nPRTF     Prints string given address and length and carriage control.\nPRTITEM  Prints a single FD item.\nPRTL     Prints a literal string.\nPRTLIST  Prints a list of FD items.\nPRTOPEN  Opens a single print file, with primary or alternate DD name.\n           Output may also be a TSO terminal or via WTO.\nPRTROOM  Schedules page eject unless specified number of lines fit.\nPRTS     Prints a null terminated string.\nPRTSNAP  Prints memory in dump format.\nPRTSPACE Produces blank lines on current page.\nPRTV     Print text preceded by an RDW, e.g., WTO text.\nPRTWORK  Defines printer file: DDname(s), lines/page, width, # titles.\nPSWSECT  (local) maps our MVT password records.\nPUNWORK  Defines punch file.\nQUE      (private) HASP queue name table.\nRANDOM   Expands a pseudo-random number routine.\nREADFDR  Calls @FDRREAD to get tracks and blocks from an FDR dump tape.\nREADTMC  Calls @TMSREAD to get data from UCC-1/CA-1 tape library.\nREGEQU   Symbolic register definitions.\nRESCALL  (private) calls CSA resident code.\nRESCODE  (private) expands CSA code and data.\nRESTRICT (private) test permissions.\nRET31    Return macro for TSX call.\nRMODE    Allow assembly under MVS of newer modules.\nRP       Generates RP expansion for assembler XF.\nRSECT    Allow assembly under MVS of newer modules; builds CSECT.\nSAC      Defines label, if any, under MVS, else ignored.\nSAVEM    Shmuel Metz's program entry macro (replaced by PGMHEAD).\nSAVEX    Inner macro for SAVEM and PGMHEAD. Supports non-standard\n           register saves, and setting AMODE.\nSCANAL   (private) routine to analyze 3270 input.\nSCBILD   (private) routine to build address and data list for SCLINE.\nSCINIT   (private) initialize 3270 I/O.\nSCITEM   (private) routine to format one display item (FD entry)\nSCLINE   (private) routine to display FDLINE data and read input.\nSCLIST   (private) routine to format an FD list.\nSCLOOP   (private) routine to take user exits in an FD list.\nSCMOVE   (private) routine to move input data to storage, after SCANAL.\nSCPAGE   (private) routine to display a page and read input.\nSCRANAL  routine to analyze 3270 input.\nSCRCLOSE close @SCREENS processing.\nSCRCOM   Inner macro to generate parms for @SCREENS.\nSCREDIT  removes backspaces, unprintables, and leading/trailing blanks.\nSCRINIT  initialize 3270 I/O.\nSCRITEM  routine to format one display item (FD entry)\nSCRLIST  routine to format an FD list.\nSCRLOOP  routine to take user exits in an FD list.\nSCRMARK  checks for errors and incomplete fields.\nSCRMOVE  routine to move input data to storage, after SCANAL.\nSCRN     Shmuel Metz's 3270 definition macro.\nSCROPEN  opens 3270 for processing in @SCREENS.\nSCRPAGE  routine to display a page and read input.\nSCRSCAN  scans input from line mode terminal.\nSCRWORK  defines work area for @SCREENS.\nSERVCALC replacement for TRKCALC; supports DASD not in sysgen.\nSERVCALL function call to the @SERVICE routine.\nSERVCOMP Expand WYLBUR line compression work area.\nSERVDEFS Expands fields (address and data) for preceding @SERVICEs.\nSERVFLAG Maps @SERVICE function name to request values/flags.\nSERVICE  Invokes @SERVICE as an SVC if in LPA; uses SERVCALL otherwise.\nSERVINIT Initializes @SERVICE functions.\nSERVJES  Calls @SERVICE for JES2 related functions.\nSERVLOAD Loads named modules, and has SERVDEFS build address DCs.\nSERVPDS  Formats PDS directory entry for display.\nSERVSORT Expands area for @SERVICE sorting and binary lookup functions.\nSERVTERM Closes files, calls termination entries for loaded modules,\n           releases storage, and deletes loaded modules in @SERVICE.\nSERVTREE Defines work area for SUBTREE (balanced tree builder).\nSERVWORK Acquires or frees work areas on save area chain for @SERVICEs.\nSETAM    Another SAM24/SAM31 substitute.\nSETCC    Sets condition if higher than current one.\nSHOWHELP (private) displays DC array.\nSIZER    Cause assembly error when module exceeds specified size.\nSMFSEAC  (local) mapping for NCR/Comten 369n written accounting data.\nSMI      (private) expands prompt message.\nSMPIOWK  (private) mapping of work area for SMP reader (V1 and V2).\nSPFITS   (private) test if items fits on line.\nSPINDENT (private) indent lines.\nSPINIT   (private) initialize 3270 screen builder in INSECT/DSUBSECT.\nSPLEVEL  backward compatibility macro MVS assemblies.\nSPLINE   (private) conditionally start a new line.\nSPLINEUP (private) unconditionally start a new line.\nSPMOVE   (private) move data to screen line.\nSRST     functional replacement for SRST instruction.\nST@      store register in 3 or 4 byte field, with optional high byte.\nSTAM     generates a label, if needed, under MVS.\nSTITL    Shmuel Metz's title function, part 2. Replaces right size.\nSTMAX    Compare register to storage and store the larger value.\nSTMIN    Compare register to storage and store the smaller value.\nSTOMP    Debug macro to record a program milestone.\nSTORAGE  MVS version; invokes GETMAIN or FREEMAAIN.\nSTORQ    Removes framing quotes and halves doubled ones.\nSUBCALL  Calls subroutine without using a V constant; accepts literal\n           string as argument (passes address).\nSUBENT   (local) subroutine entry in program with stack.\nSUBEX    (local) vectored return.\nSUBHEAD  (local) subroutine entry in program with stack.\nSUBRET   (local) return from SUBHEADed routine.\nSVCJFCB  calls SVCMJFCB to modify a JFCB (OS/360).\nSWAP     exchanges two areas.\nSWAPR    exchanges two registers.\nSWATCH   Provides stopwatch functions using TIMEUSED or local code (MVS)\nSYSPARM  ---===>>> SET LOCAL ENVIRONMENT AND ASSEMBLY OPTIONS <<<===---\nSYSPOLD  older SYSPARM.\nSYSPOUT  older SYSPARM.\nS64D     Subtract 64-bit value from 64-bit number.\nS64F     Subtract 32-bit value from 64-bit number.\nS99FAIL  Invokes DAIRFAIL/IKJEFT18 for SVC 99 error messages.\nTIC      Shortcut for Transfer-In-Channel CCW.\nTMONSECT (old MVT) mapping record for CICS monitor.\nTMSREC   Mapping for local UCC-1/CA-1 tape library record.\nTRACEPGM For tracing PGMTRACE problems (needs work).\nTRANHEAD (private) translation table header.\nTRENT    Generates DC and ORG for TR and TRT tables.\nTRINV    Translate table that reverses bits (Kenneth Wilkerson).\nTRTAB    Expands tables for TR and TRT. Predefined are PN, TN, 2260,\n           3270, 3278, Upper case, and Lower case.\nTRTSMF   (local) table of SMF record types with coded disposition.\nTSX      Calls subroutine with BASSM or BALR, and sets AMODE.\nTTYDEFIN (local) defines control strings for Wylbur devices.\nTTYFLAGS (local) defines indices for terminals defined by TTYDEFIN.\nTTYSEQ   (local) retrieves a control string entry from TTYDEFIN table.\nUCBDEVN  Converts either UCBNAME or device number to 3 or 4 byte entry.\nUNFRAG   (private) unfragments MVT region.\nUNITSKIP (private) during UCB lookup, skip specially defined units.\nUNITY    Build table of UCBTBYT3/4 with device name.\nUSE      (local) request control block expansion by MSECT.\nUSERHMT  (local) maps control area for Unisys An system sending action\n           messages to the mainframe.\nVCON     Builds text preceded by RDW field. May have intervening\n           DCs if the END option is used.\nVERBTAB  Builds (short) string lookup table for BLOOK and VLOOK.\nVFORM    (private) storage formatting interface.\nVLOOK    Similar to BLOOK, but accepts abbreviations (DEL for DELETE).\nVNENTRY  (private) XCTL support.\nVNEXITY  (private) XCTL support.\nVOLREAD  Interface to @VOLREAD routine; read and writes VTOC and data.\nVTAB     (local) build interface table for display routine.\nVTOBYTE  prints string with text corresponding to bits on in a flag.\nVTOCHAR  prints string with text corresponding to bits on in storage.\nVTOTAB   builds table with flag and matching text for VTOBYTE/VTOCHAR.\nWTBLD    builds WTO text with various options (single line, multi-line)\nWTCLR    WTO facility by Shmuel Metz. Initializes WTO interface.\nWTERM    writes message to terminal.\nWTLST    defines text, with descriptor codes.\nWTLTP    sets line type flags for multi-line WTO.\nWTPVT    defines common WTO prefix and resets display area.\nWTU      Write-To-User - issues WTO or TPUT depending on console id.\nWTWRK    Defines work area for Shmuel's WTO facility.\n         (private)\nXATTACH  (private) issues ATTACH or DETACH.\nXCALL    (private) calls subroutine in non-zero key (usually TBPKF).\nXCURCON  (private) converts current cursor address to line/indent #s.\nXCURSE   (private) sets cursor display address in FDW area for SCLINE.\nXCURSOR  (private) sets cursor display address in FDW area.\nXDBT     (private) conditional debug expansion; also see XTRAP.\nXDEFAID  (private) defines table of key names per AID byte.\nXDEFCMD  (private) builds lookup table of AID vs. command.\nXDELETE  (private) deletes a module.\nXDEVOPT  (private) defines display options for a 3270 group or device.\nXDEVPFK  (private) defines AID vs. command prior to XDEVOPT.\nXDEVSKIP (private) skips specially defined units form UCB lops.\nXDROP    (private) debug mode - drops register use.\nXDSN     (private) treats input as DSN; prefixes; separates mmeber name.\nXECHO    (private) clears screen buffer; echos input; sets up registers.\nXFIND    (private)\nXFORMAT  (private) inner macro to expand display conversion code.\nXFREE    (private) frees specific or function storage.\nXGET     (private) obtains storage.\nXHEX     (private) converts (short) storage to hex display.\nXJESRD   (private) reads JES2 spool blocks by MTTR.\nXLINE    (private) places data into display buffer; skips to new line;\n           converts data to hex display; sets title; etc.\nXLOAD    (private) loads a module.\nXLOOK    (private) table lookup (also see BLOOK).\nXMASK    (private) compares a mask to a string.\nXMSG     (private) formats a canned message, with optional parameter\n            conversion and insertion. See MDEF macros for tables.\nXOPT     (private) manipulate options control block.\nXPAGE    (private) display a 3270 page with prompt and get input.\nXPARM    (private) invoke (mini) parser to get and examine next operand.\nXPATCH   (private) another patch generator - rounds module to 2K size.\nXPDCHECK (private) test string for a valid packed decimal number.\nXPOUT    (private) similar to XPAGE, but with default MORE prompt.\nXPRINT   (private) debugger - print a line.\nXPUTGET  (private) display page, get response, and check common commands\nXQUEUE   (private) manipulate entries on a queue.\nXRAND    (private) call or initialize (pseudo) random number generator.\nXREAD    (private) issue read to 3270.\nXRENT    (private) initializes pre-allocated 4K work area.\nXREQUIRE (private) checks authorization and environmental prerequisites.\nXRITE    (private) writes 3270 buffer.\nXROOM    (private) for debug printing reserves room on current page.\nXSCLINE  (private) writes page defined by XLINEs, and reads response.\nXSDELETE (private) deletes modules brought in by XSLOAD.\nXSLOAD   (private) loads subroutines.\nXSNAP    (private) debug printer of PSW, registers, and storage.\nXSPACE   (private) spaces lines on debug print.\nXTAB     (private) AID lookup table that defines XCTL suffices.\nXTHINK   (private) sets and resets wait time from current to maximum.\nXTRANS   (private) translates text for input or output, data or control.\nXTRAP    (private) debug interface to display PSW, registers, storage.\nXUCBLOOP (private) loops through all system UCBs.\nXUSE     (private) debug - declare using register and matching DSECT.\nXWAIT    (private) wait for 3270 attention.\nXXCTL    (private) XCTL to another module; specify trailing name bytes.\nXXHEAD   (private) generates header code for FD user exit.\nXXHEND   (private) generates exit code for FD exit, and sets cursor.\nXXHHEX   (private) checks input field for valid hexadecimal.\nXXHINT   (private) checks input field for valid integer.\nXXTRKEY  (private) generates AID vs. command entry tables.\nX4CMD    (local) generates command tables for Xerox 4050.\nX4050    (local) generates Xerox 4050 DJDEs and work area.\nYCON     Builds text preceded by 2-byte length. May have intervening\n           DCs if the END option is used.\nYREGS    another mnemonic register definition (R1-R15)\nZI       reset flag bits (ZI ,value instead of NI ,255-value).\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$RIGHTS": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\t\\x00\\x97 /\\x01\\x03#\\x0f\\x199\\x00~\\x00~\\x00~\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1997-07-21T00:00:00", "modifydate": "2003-08-18T19:39:09", "lines": 126, "newlines": 126, "modlines": 126, "user": "GERHARD"}, "text": "***********************************************************************\n*                                                                     *\n*                                                                     *\n*          COPYRIGHT 1978, 1981 BY SHMUEL (SEYMOUR J.) METZ           *\n*                                                                     *\n*                   ALL RIGHTS RESERVED.                              *\n*                                                                     *\n*                                                                     *\n* MATERIAL IN THIS LIBRARY IS MADE AVAILABLE SUBJECT TO THE           *\n* FOLLOWING CONDITIONS:                                               *\n*                                                                     *\n*                                                                     *\n* 1.)  ALL COPYRIGHT NOTICES MUST BE RETAINED, AS WELL AS ALL CODE    *\n*      INTENDED TO GENERATE A COPYRIGHT NOTICE IN LISTINGS,           *\n*      IN OBJECT CODE, OR IN FORMATTED DUMPS.  ALL GRANTS OF          *\n*      PERMISSION TO COPY AND/OR USE THIS MATERIAL ARE CONTINGENT ON  *\n*      ADHERANCE TO THIS REQUIREMENT.                                 *\n*                                                                     *\n*                                                                     *\n* 2.)  NO MEMBERS MAY BE DISTRIBUTED WITHOUT EXPLICIT PERMISSION      *\n*      FROM ME, EXCEPT AS SPECIFIED BELOW.                            *\n*                                                                     *\n*                                                                     *\n* 3.)  MATERIAL SUBMITTED BY ME TO PROJECTS OF SHARE, INC.  MAY BE    *\n*      FURTHER DISTRIBUTED ONLY IN ACCORDANCE WITH THE BYLAWS OF      *\n*      SHARE, INC. AND THE RELEVANT PROJECT, AS AUGMENTED BY ANY      *\n*      TERMS AND CONDITIONS ON THE SUBMITTAL FORM.                    *\n*                                                                     *\n*                                                                     *\n* 4.) PERMISSION IS GRANTED FOR BOTH USE AND MARKETING OF THIS        *\n*     MATERIAL TO:                                                    *\n*        EXPERT SYSTEM PROGRAMMING                                    *\n*        176 OLD STAGE COACH ROAD                                     *\n*        BRADFORD, VERMONT  05033-8844                                *\n*        802-222-5117                                                 *\n*                                                                     *\n*        PINKERTON COMPUTER CONSULTANTS, INC.                         *\n*        1900 N BEAUREGARD ST                                         *\n*        FALLS CHURCH, VIRGINIA   22041                               *\n*        703-820-5571                                                 *\n*                                                                     *\n*                                                                     *\n* 5.)  PERMISSION IS GIVEN TO BOTH USE THIS MATERIAL AND TO           *\n*      DISTRIBUTE IT IN CONJUNCTION WITH SCRIPT OR OTHER UOW SOFTWARE *\n*      TO:                                                            *\n*        COMPUTING CENTRE                                             *\n*        UNIVERSITY OF WATERLOO                                       *\n*        WATERLOO, ONTARIO, CANADA                                    *\n*                                                                     *\n*                                                                     *\n* 6.) USE AND DISTRIBUTION PERMISSION IS GIVEN TO THE FOLLOWING       *\n*     SPECIFIC INDIVIDUALS:                                           *\n*        THOMAS A. LITTLE                                             *\n*        MITRE CORPORATION                                            *\n*        BEDFORD, MASSACHUSSETTS                                      *\n*                                                                     *\n*        BRUCE UTTLEY                                                 *\n*        COMPUTING CENTRE                                             *\n*        UNIVERSITY OF WATERLOO                                       *\n*                                                                     *\n*        GERHARD POSTPISCHIL                                          *\n*        ESP, INC.                                                    *\n*                                                                     *\n*                                                                     *\n* 7.)  USE AND DISTRIBUTION PERMISSION IS GIVEN TO THE FOLLOWING:     *\n*        COMPUTER CENTER                                              *\n*        TECHNION, ISRAEL INSTITUTE OF TECHNOLOGY                     *\n*        TECHNION CITY                                                *\n*        HAIFA, ISRAEL                                                *\n*                                                                     *\n*                                                                     *\n* 8.)  PERMISSION TO BOTH USE AND TO MAKE AVAILABLE FOR CUSTOMER USE  *\n*      IS GIVEN TO THE FOLLOWING:                                     *\n*      COMPUTER NETWORK CORPORATION / CONSUMERS COMPUTER SERVICES, INC.\n*      5185 MACARTHUR BOULEVARD                                       *\n*      WASHINGTON, D.C.  20016                                        *\n*                                                                     *\n*                                                                     *\n* 9.)  WHILE IT IS NOT A REQUIREMENT OF DISTRIBUTION, RECIPIENTS OF   *\n*      THIS MATERIAL ARE REQUESTED TO FORWARD TO ME ANY CORRECTIONS   *\n*      OR ENHANCEMENTS WHICH THEY FEEL MAY BE OF GENERAL INTEREST, OR *\n*      WHICH THEY WOULD LIKE TO SEE INCORPORATED IN FUTURE VERSIONS.  *\n*      WHERE IT APPEARS REASONABLE, I WILL ENDEAVOR TO INCORPORATE    *\n*      ANY SUCH ENHANCEMENTS, ALTHOUGH I MAY ELECT TO ISOLATE THEM    *\n*      WITH AN AIF.  MAJOR CHANGES WILL BE IDENTIFIED WITH THE NAME   *\n*      AND INSTALLATION OF THE AUTHOR, UNLESS ANONIMITY IS REQUESTED. *\n*                                                                     *\n*                                                                     *\n*10.)  NO REPRESENTATIONS ARE MADE AS TO THE USABILITY OR CORRECTNESS *\n*      OF ANY OF THIS MATERIAL; HOWEVER, IF YOU REPORT ANY ERRORS I   *\n*      WILL ATTEMPT TO CORRECT THEM.                                  *\n*                                                                     *\n*                                                                     *\n*11.)  MATERIAL IN THESE LIBRARIES MARKED WITH A COPYRIGHT NOTICE     *\n*      FOR EXPERT SYSTEM PROGRAMMING, INC. MAY BE USED IN ACCORDANCE  *\n*      WITH THE ABOVE RULES.                                          *\n*                                                                     *\n*                                                                     *\n*12.)  MATERIAL MARKED IN ANY FASHION AS COPYRIGHTED BY OR            *\n*      PROPRIETARY TO ANYONE OTHER THAN G. POSTPISCHIL, S. METZ,      *\n*      OR ESP, INC. SHOULD NOT BE IN THIS LIBRARY.  PLEASE DELETE     *\n*      ANY SUCH MEMBERS AND INFORM S. METZ OR G. POSTPISCHIL (CARE OF *\n*      EXPERT SYSTEM PROGRAMMING) OF THE ERROR.                       *\n*                                                                     *\n*                                                                     *\n*13.)  MATERIAL NOT MARKED AS PROPRIETARY OR COPYRIGHTED IS BELIEVED  *\n*      TO BE IN THE PUBLIC DOMAIN; MUCH OF IT HAS BEEN ACQUIRED FROM  *\n*      SHARE, INC. AND SIMILAR SOURCES.  THE MEMBERS DERIVING FROM    *\n*      CBT, JES2, AND MVS MODS TAPES MAY BE BACK-LEVEL OR             *\n*      SIGNIFICANTLY CHANGED FROM THE VERSIONS AVAILABLE FROM SHARE:  *\n*      USE YOUR OWN JUDGEMENT.                                        *\n*                                                                     *\n*                                                                     *\n*14.)  ALL IBM MAPPING MACROS ARE BELIEVED TO BE FROM PUBLIC-DOMAIN   *\n*      SOURCES; HOWEVER, THEY ARE ALSO BELIEVED TO BE VALID ONLY FOR  *\n*      THE SYSTEM AND PTF LEVEL I AM CURRENTLY RUNNING FROM.  IN      *\n*      PARTICULAR, SOME OF THEM MAY BE HIT BY MULTIPLE PROGRAM        *\n*      PRODUCTS AT YOUR INSTALLATION, AND SHOULD BE REPLACED FROM     *\n*      THE APPROPRIATE OPTIONAL SOURCE PVTMAC OR AMODGEN.             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      REVIEW OF MEMBERS OPTIONDF, OPTIONGB, AND SYSPARM IN ASM.MAC   *\n*      IS SUGGESTED PRIOR TO ASSEMBLING ANY OF THIS MATERIAL.         *\n*                                                                     *\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$FCB2": {"ttr": 775, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO -- $FCB2 -- GENERATE 3211 FORMS CONTROL BLOCK IMAGE\n&LABEL   $FCB2 &LPI,&DEFAULT=YES,&INDEX=LEFT,&INDENT=0  ADDED ON 85350\n.*\n.*       AUTHOR UNKNOWN - OBTAINED FROM OLD SHARE OR CBT TAPE\n.*         RENAMED $FCB2 (FROM $FCB) TO ALLOW FOR $FCB3 FOR 3800 93006\n.*\n         LCLA  &A(180),&LP,&N,&WK,&CC,&LAST,&K,&K1,&LI\n         LCLB  &Q,&C,&PASS,&CCH(12),&DFI\n         LCLC  &CH,&BLANK,&B,&B1,&IX\n&LAST    SETA  N'&SYSLIST          GET NR OF OPERANDS\n         AIF   (&LAST LT 3).MACBAD ERROR IF LT 3\n.*\n.*             STEP 1 - VERIFY LINES-PER-INCH OPERAND\n.*\n.OP1     AIF   (T'&SYSLIST(1) NE 'N').OP1BAD  OP1 MUST BE NUMERIC\n&LI      SETA  6                   ASSUME OP1 SAYS 6 LINES/INCH\n         AIF   (&SYSLIST(1) EQ 6).OP2  B IF OP1 IS 6\n         AIF   (&SYSLIST(1) NE 8).OP1BAD  ERR IF NOT 6 OR 8\n&LI      SETA  8                   SHOW 8 LINES/INCH\n.*\n.*             STEP 2 - VERIFY LINES-PER-PAGE OPERAND\n.*\n.OP2     AIF   (T'&SYSLIST(2) NE 'N').OP2BAD  OP2 MUST BE NUMERIC\n         AIF   (&SYSLIST(2) LT 2 OR &SYSLIST(2) GT 180).OP2BAD\n&LP      SETA  &SYSLIST(2)         SET NR OF LINES PER PAGE\n.*\n.*             STEP 3 - PROCESS OPERANDS\n.*\n.OP3     ANOP\n&N       SETA  2                   SET OPERAND CTR TO 2\n.OPN     ANOP                      START LOOP\n&N       SETA  &N+1                ADD 1 TO OPERAND CTR\n         AIF   (&N GT &LAST).ENDSCAN  B IF NO MORE OPERANDS\n         AIF   (T'&SYSLIST(&N) NE 'N').OPH  B IF NOT NUMERIC OPD\n         AIF   (&N EQ 3).OP3BAD    ERROR IF OP3 NOT HYPHENATED\n         AIF   (NOT &C).OPN        IGNORE OP IF INVALID &CC\n&WK      SETA  &SYSLIST(&N)        SET WORK TO OPERAND VALUE\n.OPN1    AIF   (&WK LT 1 OR &WK GT &LP).OPLBAD  B IF BAD LINE NR\n         AIF   (&A(&WK) NE 0 AND &A(&WK) NE &CC).DUPBAD  B IF DUP\n&A(&WK)  SETA  &CC                 SET &WK-TH LINE TO &CC\n         AGO   .OPN                LOOP\n.*\n.*             STEP 3A - DECODE HYPHENATED OPERAND\n.*\n.OPH     ANOP                      NON-NUMERIC OPERAND\n&K       SETA  K'&SYSLIST(&N)      SET OPERAND CHARACTER COUNT\n&K1      SETA  0                   SET CHAR CT TO ZERO\n&WK      SETA  0                   SET WORK TO ZERO\n&PASS    SETB  0                   SHOW FIRST PASS\n.*\n.*             1ST PASS - FIND CARRIAGE CHANNEL NUMBER\n.*             2ND PASS - FIND FIRST LINE NUMBER\n.*\n.OPH1    ANOP                      START LOOP\n&K1      SETA  &K1+1               ADD 1 TO CHAR CTR\n         AIF   (&K1 GT &K).OPH3    B IF END OF STRING\n&CH      SETC  '&SYSLIST(&N)'(&K1,1)  GET A CHARACTER\n         AIF   ('&CH' LT '0' OR '&CH' GT '9').OPH2  B IF NON-NUM\n&WK      SETA  &WK*10+&CH          COMPILE DECIMAL NUMBER\n         AGO   .OPH1               LOOP\n.*\n.*             NON-NUMERIC CHARACTER FOUND.\n.*             IF FIRST PASS, EXPECT HYPHEN.\n.*             IF SECOND PASS, ERROR.\n.*\n.OPH2    AIF   (&PASS OR '&CH' NE '-').HYPBAD  B IF ERROR\n&CC      SETA  &WK                 SET CARRIAGE CHANNEL\n&WK      SETA  0                   ZERO WORK\n&PASS    SETB  1                   SHOW SECOND PASS\n         AGO   .OPH1               RETURN TO LOOP\n.*\n.*             END OF CHARACTER STRING.\n.*             IF FIRST PASS, LOGIC ERROR.\n.*             IF SECOND PASS, VALIDIFY &CC.\n.*\n.OPH3    AIF   (NOT &PASS).LOGBAD  ERROR IF FIRST PASS\n         AIF   (&CC LT 1 OR &CC GT 12).OPCBAD  B IF CC BAD\n&CCH(&CC) SETB 1                   SHOW CARRIAGE CHANNEL USED\n&C       SETB  1                   SHOW VALID &CC\n         AGO   .OPN1               GO CHECK VALID LINE NR\n.*\n.*             OPERAND SCAN IS ENDED.  TEST ITS SUCCESS.\n.*\n.ENDSCAN AIF   (&Q).QUITBAD        EXIT IF QUIT SWITCH\n         AIF   (K'&LABEL LE 4).LABBAD  B IF LABEL NOT SPECIFIED\n         AIF   ('&LABEL'(1,4) NE 'FCB2').LABBAD\n&N       SETA  5\n&K       SETA  K'&LABEL\n.LABLOOP AIF   (&N GT &K).END6\n&CH      SETC  '&LABEL'(&N,1)  GET A CHARACTER OF LABEL\n&N       SETA  &N+1          SET FOR NEXT TIME\n&C       SETB  0\n&C       SETB  (&C OR ('&CH' GE '0' AND '&CH' LE '9'))\n&C       SETB  (&C OR ('&CH' GE 'A' AND '&CH' LE 'I'))\n&C       SETB  (&C OR ('&CH' GE 'J' AND '&CH' LE 'R'))\n&C       SETB  (&C OR ('&CH' GE 'S' AND '&CH' LE 'Z'))\n         AIF   (NOT &C).LABBAD     B IF NOT NUM OR ALPHA\n         AGO   .LABLOOP\n.END6    ANOP\n&DFI     SETB  1             PROVISIONALLY SET DEFAULT IMAGE\n         AIF   ('&DEFAULT' EQ '' OR '&DEFAULT' EQ 'YES').END7\n&DFI     SETB  0             SET NO DEFAULT IMAGE AS DEFAULT\n         AIF   ('&DEFAULT' NE 'NO').DEFBAD\n.END7    ANOP  ,\n.*\n.*             ENSURE ALL CHANNELS ARE PUNCHED TO PREVENT RUNAWAY\n.*\n&N       SETA  0                   ZERO CHANNEL COUNTER\n&C       SETB  0                   ZERO FIRST-TIME MSG SWITCH\n&K       SETA  0                   ZERO TOP-DOWN LINE COUNTER\n&K1      SETA  &LP+1               SET BOTTOM-UP LINE CTR TO MAX+1\n.END11   ANOP                      START LOOP\n&N       SETA  &N+1                ADD ONE TO CHANNEL COUNTER\n         AIF   (&N GT 12).END19    B IF DONE WITH ALL CHANNELS\n         AIF   (&CCH(&N)).END11    B IF CHANNEL IS ASSIGNED\n         AIF   (&C).END12          B IF NOT FIRST TIME\n         SPACE 1\n         MNOTE *,'THE FOLLOWING ASSIGNMENTS OF UNSPECIFIED '\n         MNOTE *,'CARRIAGE CHANNELS PREVENT RUN-AWAY FORMS ---'\n&C       SETB  1                   SHOW FIRST-TIME MSG WRITTEN\n.END12   AIF   (&N EQ 9 OR &N EQ 12).END14  B IF CH 9 OR 12\n.END13   ANOP                      UNASSIGNED CHANNEL FOUND\n&K       SETA  &K+1                ADD ONE TO LINE COUNTER\n         AIF   (&K GT &LP).END17   B IF ALL LINES HAVE CHANNELS\n         AIF   (&A(&K) NE 0).END13 B IF THIS LINE HAS A CHANNEL\n&WK      SETA  &K                  SET LINE NUMBER AND\n         AGO   .END15              GO ASSIGN CHANNEL TO IT\n.END14   ANOP                      UNASSIGNED CHANNEL 9 OR 12\n&K1      SETA  &K1-1               LOWER LINE COUNTER BY ONE\n         AIF   (&K1 LT 1).END17    B IF ALL LINES HAVE CHANNELS\n         AIF   (&A(&K1) NE 0).END14  B IF THIS LINE HAS A CHANNEL\n&WK      SETA  &K1                 SET LINE NUMBER\n.END15   ANOP                      ASSIGN CHANNEL TO LINE\n&BLANK   SETC  ''                  ASSUME CHANNEL 10 OR GREATER\n         AIF   (&N GT 9).END16     B IF SO\n&BLANK   SETC  ' '                 ADD A BLANK FOR CHAN 9 OR LESS\n.END16   MNOTE *,'   CARRIAGE CHANNEL &BLANK.&N IN LINE &WK'\n&A(&WK)  SETA  &N                  ASSIGN CHANNEL TO LINE\n&CCH(&N) SETB  1                   SHOW CHANNEL ASSIGNED\n         AGO   .END11              B TO START OF LOOP\n.END17   AIF   (&CCH(1)).END18     GO IF CHANNEL 1 IS ASSIGNED\n         MNOTE 4,'ERROR - CARRIAGE CHANNEL 1 IS NOT SPECIFIED AND'\n         MNOTE *,'CANNOT BE INSERTED.  CHANNEL 1 PUNCH IS'\n         MNOTE *,'REQUIRED FOR 3211 CARRIAGE-RESTORE FUNCTION.'\n         AGO   .QUITBAD\n.END18   MNOTE 0,'WARNING - UNSPECIFIED CARRIAGE CHANNELS'\n         MNOTE 0,'STARTING WITH CHANNEL &N CAN CAUSE'\n         MNOTE 0,'RUN-AWAY FORMS.'\n.END19   ANOP  ,\n&IX      SETC  ''            NO INDEX\n         AIF   (T'&INDENT EQ 'O' OR '&INDENT' EQ '0').SKIPIX\n         AIF   (T'&INDENT EQ 'N').TESTIND\n.BADIND  MNOTE 4,'INDENT MUST BE NUMERIC (0 TO 31)'\n         AGO   .QUITBAD\n.TESTIND AIF   (&INDENT GT 31).BADIND\n&IX      SETC  '10'          SET DEFAULT (LEFT) INDENT\n         AIF   (T'&INDEX EQ 'O' OR '&INDEX' EQ 'LEFT').SKIPIX\n&IX      SETC  '01'          SET RIGHT\n         AIF   ('&INDEX' EQ 'RIGHT').SKIPIX\n         MNOTE 4,'INVALID INDEX - SHOULD BE LEFT OR RIGHT'\n         AGO   .QUITBAD\n.SKIPIX  ANOP  ,\n.*\n.*             CREATE FORMS CONTROL BUFFER OVERLAY\n.*\n******************************************************************\n*                                                                *\n         MNOTE *,'3211 FORMS CONTROL BUFFER LOAD FOR &LABEL'\n*                                                                *\n******************************************************************\n*                                                                *\n         SPACE 1\n&LABEL   CSECT ,\n         SPACE 1\n         DC    BL1'&DFI.0000000'  IMAGE TYPE (80=DEFAULT)\n         AIF   ('&IX' EQ '').NOIX\n         DC    AL1(&LP+1)    LINES PER FORM/IMAGE + INDEX\n         DC    BL.2'&IX',BL.1'0',AL.5(&INDENT)    INDENTATION\n         AGO   .COMIX\n.NOIX    DC    AL1(&LP)      LINES PER FORM/IMAGE\n.COMIX   SPACE 1\n*                             GENERATE FORMS CONTROL BUFFER\n&PASS    SETB  (&LI EQ 8)          &PASS=1 FOR 8 LINES/INCH\n&A(1)    SETA  &A(1)+16*&PASS      SET UP FIRST BYTE\n&A(&LP)  SETA  &A(&LP)+16          SET UP LAST BYTE\n&N       SETA  0                   SET CUR BYTE PTR TO ZERO\n&K       SETA  0                   SET PREV NON-0 BYTE PTR TO 0\n.DO      ANOP                      BUILD THE FCB\n&N       SETA  &N+1                POINT TO THE NEXT BYTE\n         AIF   (&A(&N) EQ 0).DO    IF IT'S ZERO, LOOP.\n&K       SETA  &N-&K-1             COMPUTE NR OF ZERO BYTES\n         AIF   (&K EQ 0).DO1       SKIP DOING THEM IF NONE\n         DC    &K.AL1(0)\n.DO1     ANOP\n.*\n.*             SELECT PROPERLY-COMMENTED DC STATEMENT\n.*\n&WK      SETA  &A(&N)              SET WORK TO BYTE'S VALUE\n         AIF   (&WK EQ 16).DO3     B IF ZERO-DIGIT ENTRY\n&B       SETC  ''                  SET TWO LCLC VARIABLES\n&B1      SETC  ''                  TO NULL STRINGS\n         AIF   (&WK GT 9).DO2      B IF ADCON IS TWO DIGITS\n&B       SETC  ' '                 ELSE ADD BLANK TO COMMENT\n.DO2     ANOP\n&WK      SETA  &WK-&WK/16*16       GET CHANNEL NUMBER\n         AIF   (&WK GT 9).DO2A     B IF CHANNEL NR IS 2 DIGITS\n&B1      SETC  ' '                 ELSE ADD BLANK TO COMMENT\n.* ONE- OR TWO-DIGIT ENTRY\n.DO2A    DC    AL1(&A(&N)),0C'         &B.CHAN &B1.&WK IS AT LINE &N'\n         AGO   .DO4\n.* NO-DIGIT ENTRY\n.DO3     DC    AL1(&A(&N))\n.DO4     AIF   (&N EQ &LP).END     B IF LAST BYTE PROCESSED\n&K       SETA  &N                  SET K TO LAST NON-ZERO BYTE\n         AGO   .DO                 GO LOOP\n.*\n.*\n.*\n.*\n.*             DIAGNOSTIC ERROR MESSAGES\n.*\n.OP1BAD  MNOTE 4,'INVALID OPERAND 1 - &SYSLIST(1) -'\n         MNOTE *,'FIRST OPERAND MUST BE EITHER 6 OR 8.'\n&Q       SETB  1\n         AGO   .OP2\n.*\n.OP2BAD  MNOTE 4,'INVALID OPERAND 2 - &SYSLIST(2) -'\n         MNOTE *,'SECOND OPERAND MUST BE A NUMBER GREATER THAN 1'\n         MNOTE *,'AND NOT GREATER THAN 180.'\n&Q       SETB  1\n         AGO   .OP3\n.*\n.OP3BAD  MNOTE 4,'INVALID OPERAND 3 - &SYSLIST(3) -'\n         MNOTE *,'THIRD OPERAND MUST HAVE A CARRIAGE CHANNEL'\n         MNOTE *,'NUMBER, A HYPHEN, AND A LINE NUMBER.'\n&Q       SETB  1\n         AGO   .OPN\n.*\n.OPLBAD  AIF   (T'&SYSLIST(&N) NE 'N').OPLBADA\n         MNOTE 4,'INVALID OPERAND &N - &SYSLIST(&N) -'\n         AGO   .OPLBADB\n.OPLBADA MNOTE 4,'INVALID SUBOPERAND &WK OF OPERAND &N - &SYSLIST(&N) -X\n               '\n.OPLBADB MNOTE *,'LINE NUMBER MUST BE GREATER THAN 1 AND '\n         MNOTE *,'NOT GREATER THAN &LP..'\n&Q       SETB  1\n         AGO   .OPN\n.*\n.DUPBAD  MNOTE 4,'DUPLICATE SPECIFICATION - OPERAND &N ASSIGNS'\n         MNOTE *,'CARRIAGE CHANNEL &CC TO LINE &WK, WHICH WAS'\n         MNOTE *,'PREVIOUSLY ASSIGNED CHANNEL &A(&WK)..'\n&Q       SETB  1\n         AGO   .OPN\n.*\n.HYPBAD  MNOTE 4,'INVALID OPERAND &N - &SYSLIST(&N) -'\n         AIF   (&PASS).HYPBADA\n         MNOTE *,'UNRECOGNIZABLE CHARACTER ''&CH'''\n         AGO   .HYPBADB\n.HYPBADA MNOTE *,'UNRECOGNIZABLE CHARACTER ''&CH'' IN LINE NUMBER.'\n.HYPBADB ANOP\n&Q       SETB  1\n         AGO   .OPN\n.*\n.OPCBAD  MNOTE 4,'INVALID OPERAND &N - &SYSLIST(&N) -'\n         MNOTE *,'CARRIAGE CHANNEL MUST BE GREATER THAN 0'\n         MNOTE *,'AND NOT GREATER THAN 12.'\n&C       SETB  0                   SHOW INVALID &CC\n&Q       SETB  1\n         AGO   .OPN\n.*\n.LOGBAD  MNOTE 4,'INTERNAL LOGIC ERROR AT OPERAND &N'\n         AGO   .QUITBAD\n.*\n.MACBAD  MNOTE 4,'TOO FEW OPERANDS SPECIFIED.  AT LEAST LINES PER'\n         MNOTE *,'INCH, LINES PER PAGE, AND ONE CARRIAGE CONTROL'\n         MNOTE *,'PUNCH MUST BE SPECIFIED.'\n         AIF   (N'&SYSLIST EQ 2).OP1\n         AGO   .QUITBAD\n.*\n.QUITBAD MNOTE *,'FCB WILL NOT BE GENERATED'\n         MEXIT\n.*\n.LABBAD  MNOTE 8,'ERROR - LABEL MISSING OR INCORRECT'\n         AGO   .QUITBAD\n.*\n.DEFBAD  MNOTE 8,'ERROR - DEFAULT OPTION MUST BE ''YES'' OR ''NO'''\n         AGO   .QUITBAD\n.*\n.END     ANOP\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$FCB3": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x03$_\\x01\\x03$_\\x13E\\x01s\\x01s\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-02T00:00:00", "modifydate": "2003-09-02T13:45:35", "lines": 371, "newlines": 371, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO -- $FCB3 -- GENERATE 3800 FORMS CONTROL BLOCK IMAGE\n&LABEL   $FCB3 &LDN,&LPP,&DEFAULT=YES,&INDEX=LEFT,&INDENT=0,           *\n               &SKIP=NO,&LPI=                                    93036\n.*\n.*       AUTHOR UNKNOWN - OBTAINED FROM OLD SHARE OR CBT TAPE\n.*         $FCB RENAMED TO $FCB2; THIS VERSION ADAPTED FOR IBM 3800\n.*         AND STC 6100. NOTE THAT THE STC 6100 DOES NOT HAVE THE HALF-\n.*         INCH MULTIPLE PAPER LENGTH RESTRICTION THE 3800 HAS, AND\n.*         THAT IT ACCEPTS FORMS LONGER THAN 11 INCHES, HENCE THERE\n.*         ARE NO CHECKS FOR EITHER CONDITION.                   93006\n.*       THE 6100 SUPPORTS (HARDWARE FEATURE) PERFORATION OVERPRINTING.\n.*         THIS IS SET WITH SKIP=NO. CHANGE TO SKIP=YES FOR 3800S.\n.*         SKIP=NO PRODUCES A \"SIGNATURE FRAME\" OF 0B0000 AND 000000\n.*         AROUND THE ACTUAL FCB TEXT (LINE COUNT INCREASED TO MATCH).\n.*         ADDITIONALLY, IN THIS MODE A LINE DENSITY OF 24/INCH IS\n.*         SUPPORTED, AND FORMS LENGTH MAY BE MULTIPLE OF 1/6 INCH.\n.*                                                               93036\n.*         NOTE THAT CHANNEL ONE MAY APPEAR ONLY ONCE, ON LINE 1.\n.*       THE DEFAULT, INDEX AND INDENT OPTIONS WERE KEPT TO ALLOW $FCB2\n.*         DECKS TO BE USED AS IS (WITH FCB2 => FCB3)            93006\n.*\n.**********************************************************************\n.*                                                                    *\n.*   NOTE: $FCB3 IS COPIED TO MACLIB AFTER UPDATES FOR USER IMAGELIB  *\n.*                                                                    *\n.**********************************************************************\n         LCLA  &A(336),&LP,&N,&WK,&CC,&LAST,&K,&K1,&LI,&NP,&I,&J,&MAX\n         LCLA  &O1,&O2                                          GP03245\n         LCLB  &Q,&C,&PASS,&CCH(12),&DFI,&POF                    93036\n         LCLC  &V(336),&CH,&BLANK,&B,&B1,&IX,&NAM,&CD,&DV        93036\n&POF     SETB  ('&SKIP' EQ 'NO')   PERFORATION SKIP              93036\n&LAST    SETA  N'&SYSLIST          GET NR OF OPERANDS\n&DV      SETC  '3800'                                            93036\n&MAX     SETA  336                                               93036\n         AIF   (NOT &POF).DV3800                                 93036\n&MAX     SETA  330                                               93036\n&DV      SETC  '6100'                                            93036\n.DV3800  AIF   (&LAST LT 3).MACBAD ERROR IF LT 3\n.*\n.*             STEP 1 - VERIFY LINES-PER-INCH OPERAND\n.*\n.OP1     AIF   (T'&LDN NE 'N').OP1BAD  OP1 MUST BE NUMERIC       93006\n         AIF   (&LDN EQ 6 OR &LDN EQ 8).OP1GUD                   93036\n         AIF   (&LDN NE 10 AND &LDN NE 12 AND &LDN NE 24).OP1BAD 93036\n.OP1GUD  ANOP  ,                                                 93036\n&LI      SETA  &LDN          SET LINES PER INCH                  93006\n&NP      SETA  &LI/2         NON-PRINTING MARGIN                 93006\n&CD      SETC  '.....0.1.2.3...........5'(&LI,1)  SET LPI FLAG VALUE\n.*\n.*             STEP 2 - VERIFY LINES-PER-PAGE OPERAND\n.*\n.OP2     AIF   (T'&SYSLIST(2) NE 'N').OP2BAD  OP2 MUST BE NUMERIC\n         AIF   (&SYSLIST(2) LE &LI OR &SYSLIST(2) GT &MAX).OP2BAD\n&LP      SETA  &SYSLIST(2)         SET NR OF LINES PER PAGE\n&N       SETA  1             SET LOOP INDEX                      93036\n         AIF   (&POF).OP2I   PRINT OVER FOLD - KEEP LENGTH       93036\n&LP      SETA  &LP-&LI       ALLOW FOR TOP AND BOTTOM MARGIN     93006\n.OP2I    ANOP  ,                                                 93036\n&V(&N)   SETC  '&CD'         PRESET ALL LINES FOR BASIC DENSITY  93036\n&N       SETA  &N+1                                              93036\n         AIF   (&N LE &LP).OP2I                                  93036\n.*                                                               93036\n.*   LOOK FOR LINE DENSITY OVERRIDES:                            93036\n.*     LPI=((LPI),(LPI,N),(,N)...)                               93036\n.*   WHERE (LPI) DOES ONE LINE AT 'LPI' DENSITY                  93036\n.*       (LPI,N) DOES 'N' LINES AT DENSITY 'LPI'                 93036\n.*     AND  (,N) DOES 'N' LINES AT DEFAULT DENSITY               93036\n.*                                                               93036\n         AIF   (T'&LPI EQ 'O').OP4   NO OVERRIDES                93036\n&N       SETA  N'&LPI        NUMBER OF SUBOPERANDS               93036\n&K       SETA  0                                                 93036\n&I       SETA  1             ARRAY INDEX                         93036\n.OP3LUP  AIF   (&K GE &N).OP4  ALL DONE                          93036\n&K       SETA  &K+1                                              93036\n         AIF   (N'&LPI(&K) LT 1).OP3LUP                          93036\n&O1      SETA  &LDN          SET DEFAULT LINES PER INCH          93036\n&O2      SETA  1             SET DEFAULT LINE COUNT              93036\n         AIF   (N'&LPI(&K) LT 2).OP3S                            93036\n         AIF   (N'&LPI(&K) GT 2).OP3BAD                          93036\n         AIF   ('&LPI(&K,1)' EQ '').OP31D                        93036\n&B       SETC  '&LPI(&K,1)'                                      93036\n         AIF   (T'&B NE 'N').OP3BAD                              93036\n&O1      SETA  &B                                                93036\n.OP31D   AIF   (T'&LPI(&K,2) NE 'N').OP3BAD                      93036\n&O2      SETA  &LPI(&K,2)                                        93036\n         AGO   .OP3MAKE                                          93036\n.OP3S    AIF   (T'&LPI(&K,1) NE 'N').OP3BAD                      93036\n&O1      SETA  &LPI(&K,1)                                        93036\n.OP3MAKE AIF   (&O1 EQ 6 OR &O1 EQ 8).OP3GUD                     93036\n         AIF   (&O1 NE 10 AND &O1 NE 12 AND &O1 NE 24).OP3BAD    93036\n.OP3GUD  ANOP  ,                                                 93036\n&B       SETC  '.....0.1.2.3...........5'(&O1,1)  SET LPI FLAG VALUE\n&J       SETA  &I+&O2                                            93036\n         AIF   (&J LE &LP+1).OP3FILL                             93036\n MNOTE 8,'LPI OPERAND &K &LPI(&K) EXCEEDS NUMBER OF LINES SPECIFIED'\n         AGO   .OP4                                              93036\n.OP3FILL ANOP  ,                                                 93036\n&V(&I)   SETC  '&B'                                              93036\n&I       SETA  &I+1                                              93036\n         AIF   (&I LT &J).OP3FILL                                93036\n         AGO   .OP3LUP                                           93036\n.OP3BAD  MNOTE 8,'INVALID LPI OPERAND &K : &LPI(&K) '            93036\n         AGO   .OP3LUP                                           93036\n.*\n.*             STEP 4 - PROCESS OPERANDS\n.*\n.OP4     ANOP  ,\n&N       SETA  2                   SET OPERAND CTR TO 2\n.OPN     ANOP                      START LOOP\n&N       SETA  &N+1                ADD 1 TO OPERAND CTR\n         AIF   (&N GT &LAST).ENDSCAN  B IF NO MORE OPERANDS\n         AIF   (T'&SYSLIST(&N) NE 'N').OPH  B IF NOT NUMERIC OPD\n         AIF   (&N EQ 3).OP3BAD    ERROR IF OP3 NOT HYPHENATED\n         AIF   (NOT &C).OPN        IGNORE OP IF INVALID &CC\n&WK      SETA  &SYSLIST(&N)        SET WORK TO OPERAND VALUE\n.OPN1    AIF   (&WK LT 1 OR &WK GT &LP).OPLBAD  B IF BAD LINE NR\n         AIF   (&A(&WK) NE 0 AND &A(&WK) NE &CC).DUPBAD  B IF DUP\n&A(&WK)  SETA  &CC                 SET &WK-TH LINE TO &CC\n         AGO   .OPN                LOOP\n.*\n.*             STEP 3A - DECODE HYPHENATED OPERAND\n.*\n.OPH     ANOP                      NON-NUMERIC OPERAND\n&K       SETA  K'&SYSLIST(&N)      SET OPERAND CHARACTER COUNT\n&K1      SETA  0                   SET CHAR CT TO ZERO\n&WK      SETA  0                   SET WORK TO ZERO\n&PASS    SETB  0                   SHOW FIRST PASS\n.*\n.*             1ST PASS - FIND CARRIAGE CHANNEL NUMBER\n.*             2ND PASS - FIND FIRST LINE NUMBER\n.*\n.OPH1    ANOP                      START LOOP\n&K1      SETA  &K1+1               ADD 1 TO CHAR CTR\n         AIF   (&K1 GT &K).OPH3    B IF END OF STRING\n&CH      SETC  '&SYSLIST(&N)'(&K1,1)  GET A CHARACTER\n         AIF   ('&CH' LT '0' OR '&CH' GT '9').OPH2  B IF NON-NUM\n&WK      SETA  &WK*10+&CH          COMPILE DECIMAL NUMBER\n         AGO   .OPH1               LOOP\n.*\n.*             NON-NUMERIC CHARACTER FOUND.\n.*             IF FIRST PASS, EXPECT HYPHEN.\n.*             IF SECOND PASS, ERROR.\n.*\n.OPH2    AIF   (&PASS OR '&CH' NE '-').HYPBAD  B IF ERROR\n&CC      SETA  &WK                 SET CARRIAGE CHANNEL\n&WK      SETA  0                   ZERO WORK\n&PASS    SETB  1                   SHOW SECOND PASS\n         AGO   .OPH1               RETURN TO LOOP\n.*\n.*             END OF CHARACTER STRING.\n.*             IF FIRST PASS, LOGIC ERROR.\n.*             IF SECOND PASS, VERIFY &CC.\n.*\n.OPH3    AIF   (NOT &PASS).LOGBAD  ERROR IF FIRST PASS\n         AIF   (&CC LT 1 OR &CC GT 12).OPCBAD  B IF CC BAD\n&CCH(&CC) SETB 1                   SHOW CARRIAGE CHANNEL USED\n&C       SETB  1                   SHOW VALID &CC\n         AGO   .OPN1               GO CHECK VALID LINE NR\n.*\n.*             OPERAND SCAN IS ENDED.  TEST ITS SUCCESS.\n.*\n.ENDSCAN AIF   (&Q).QUITBAD        EXIT IF QUIT SWITCH\n         AIF   (K'&LABEL LE 4).LABBAD  B IF LABEL NOT SPECIFIED\n         AIF   ('&LABEL'(1,4) NE 'FCB3').LABBAD\n&N       SETA  5\n&K       SETA  K'&LABEL\n&NAM     SETC  '&LABEL'(5,&K-4)  MAKE FCB NAME                   93006\n.LABLOOP AIF   (&N GT &K).END6\n&CH      SETC  '&LABEL'(&N,1)  GET A CHARACTER OF LABEL\n&N       SETA  &N+1          SET FOR NEXT TIME\n&C       SETB  0\n&C       SETB  (&C OR ('&CH' GE '0' AND '&CH' LE '9'))\n&C       SETB  (&C OR ('&CH' GE 'A' AND '&CH' LE 'I'))\n&C       SETB  (&C OR ('&CH' GE 'J' AND '&CH' LE 'R'))\n&C       SETB  (&C OR ('&CH' GE 'S' AND '&CH' LE 'Z'))\n         AIF   (NOT &C).LABBAD     B IF NOT NUM OR ALPHA\n         AGO   .LABLOOP\n.END6    ANOP\n&DFI     SETB  1             PROVISIONALLY SET DEFAULT IMAGE\n         AIF   ('&DEFAULT' EQ '' OR '&DEFAULT' EQ 'YES').END7\n&DFI     SETB  0             SET NO DEFAULT IMAGE AS DEFAULT\n         AIF   ('&DEFAULT' NE 'NO').DEFBAD\n.END7    ANOP  ,\n.*\n.*             ENSURE ALL CHANNELS ARE PUNCHED TO PREVENT RUNAWAY\n.*\n&N       SETA  0                   ZERO CHANNEL COUNTER\n&C       SETB  0                   ZERO FIRST-TIME MSG SWITCH\n&K       SETA  0                   ZERO TOP-DOWN LINE COUNTER\n&K1      SETA  &LP+1               SET BOTTOM-UP LINE CTR TO MAX+1\n.END11   ANOP                      START LOOP\n&N       SETA  &N+1                ADD ONE TO CHANNEL COUNTER\n         AIF   (&N GT 12).END19    B IF DONE WITH ALL CHANNELS\n         AIF   (&CCH(&N)).END11    B IF CHANNEL IS ASSIGNED\n         AIF   (&C).END12          B IF NOT FIRST TIME\n         SPACE 1\n         MNOTE *,'THE FOLLOWING ASSIGNMENTS OF UNSPECIFIED '\n         MNOTE *,'CARRIAGE CHANNELS PREVENT RUN-AWAY FORMS ---'\n&C       SETB  1                   SHOW FIRST-TIME MSG WRITTEN\n.END12   AIF   (&N EQ 9 OR &N EQ 12).END14  B IF CH 9 OR 12\n.END13   ANOP                      UNASSIGNED CHANNEL FOUND\n&K       SETA  &K+1                ADD ONE TO LINE COUNTER\n         AIF   (&K GT &LP).END17   B IF ALL LINES HAVE CHANNELS\n         AIF   (&A(&K) NE 0).END13 B IF THIS LINE HAS A CHANNEL\n&WK      SETA  &K                  SET LINE NUMBER AND\n         AGO   .END15              GO ASSIGN CHANNEL TO IT\n.END14   ANOP                      UNASSIGNED CHANNEL 9 OR 12\n&K1      SETA  &K1-1               LOWER LINE COUNTER BY ONE\n         AIF   (&K1 LT 1).END17    B IF ALL LINES HAVE CHANNELS\n         AIF   (&A(&K1) NE 0).END14  B IF THIS LINE HAS A CHANNEL\n&WK      SETA  &K1                 SET LINE NUMBER\n.END15   ANOP                      ASSIGN CHANNEL TO LINE\n&BLANK   SETC  ''                  ASSUME CHANNEL 10 OR GREATER\n         AIF   (&N GT 9).END16     B IF SO\n&BLANK   SETC  ' '                 ADD A BLANK FOR CHAN 9 OR LESS\n.END16   MNOTE *,'   CARRIAGE CHANNEL &BLANK.&N IN LINE &WK'\n&A(&WK)  SETA  &N                  ASSIGN CHANNEL TO LINE\n&CCH(&N) SETB  1                   SHOW CHANNEL ASSIGNED\n         AGO   .END11              B TO START OF LOOP\n.END17   AIF   (&CCH(1)).END18     GO IF CHANNEL 1 IS ASSIGNED\n         MNOTE 4,'ERROR - CARRIAGE CHANNEL 1 IS NOT SPECIFIED AND'\n         MNOTE *,'CANNOT BE INSERTED.  CHANNEL 1 PUNCH IS'\n         MNOTE *,'REQUIRED FOR 3800 CARRIAGE-RESTORE FUNCTION.'  93006\n         AGO   .QUITBAD\n.END18   MNOTE 0,'WARNING - UNSPECIFIED CARRIAGE CHANNELS'\n         MNOTE 0,'STARTING WITH CHANNEL &N CAN CAUSE'\n         MNOTE 0,'DATA CHECKS.'                                  93036\n.END19   ANOP  ,\n&IX      SETC  ''            NO INDEX\n         AIF   (T'&INDENT EQ 'O' OR '&INDENT' EQ '0').SKIPIX\n         AIF   (T'&INDENT EQ 'N').TESTIND\n.BADIND  MNOTE 4,'INDENT MUST BE NUMERIC (0 TO 31)'\n         AGO   .QUITBAD\n.TESTIND AIF   (&INDENT GT 31).BADIND\n&IX      SETC  '10'          SET DEFAULT (LEFT) INDENT\n         AIF   (T'&INDEX EQ 'O' OR '&INDEX' EQ 'LEFT').SKIPIX\n&IX      SETC  '01'          SET RIGHT\n         AIF   ('&INDEX' EQ 'RIGHT').SKIPIX\n         MNOTE 4,'INVALID INDEX - SHOULD BE LEFT OR RIGHT'\n         AGO   .QUITBAD\n.SKIPIX  ANOP  ,\n.*\n.*             CREATE FORMS CONTROL BUFFER OVERLAY\n.*\n******************************************************************\n*                                                                *\n         MNOTE *,' &DV FORMS CONTROL BUFFER LOAD FOR &LABEL'     93006\n*                                                                *\n******************************************************************\n*                                                                *\n         SPACE 1\n&LABEL   CSECT ,\n         SPACE 1\n         DC    CL4'&NAM '    FCB3 NAME\n         AIF   (NOT &POF).SKPFLD  SKIP OVER FOLD                 93036\n         DC    A(&LPP+6)     LINES PER PAGE + SIGNATURE          93036\n         DC    X'0B0000'     NON-SKIP REQUEST                    93036\n         AGO   .PROVFD       SKIP SKIP CODE                      93036\n.SKPFLD  DC    A(&LPP)       LINES PER PAGE                      93006\n         DC    &NP.AL.4(&CD,0)  NON-PRINTING TOP MARGIN          93006\n.PROVFD  SPACE 1\n*                             GENERATE FORMS CONTROL BUFFER\n&N       SETA  0                   SET CUR BYTE PTR TO ZERO\n.DOLP    ANOP  ,                   BUILD THE FCB\n&N       SETA  &N+1                POINT TO THE NEXT BYTE\n&K       SETA  &N            REMEMBER THE STARTING POINT         93036\n         AIF   (&A(&N) NE 0 OR &N GE &LP).DO1                    93036\n.DOMR    AIF   (&N GE &LP).DOXP                                  93036\n         AIF   (&A(&N) NE &A(&N+1) OR &V(&N) NE &V(&N+1)).DOXP   93036\n&N       SETA  &N+1                                              93036\n         AGO   .DOMR                                             93036\n.DOXP    ANOP  ,                                                 93036\n&I       SETA  &N-&K+1       SET NUMBER OF EQUAL LINES           93036\n         AIF   (&I LT 2).DO1       SKIP DOING THEM IF NONE\n         DC    &I.AL.4(&V(&N),&A(&N))                            93036\n         AGO   .DO4          SET FOR NEXT                        93036\n.DO1     ANOP  ,\n.*\n.*             SELECT PROPERLY-COMMENTED DC STATEMENT\n.*\n&WK      SETA  &A(&N)              SET WORK TO BYTE'S VALUE\n         AIF   (&WK EQ 0).DO3      B IF ZERO-DIGIT ENTRY         93036\n&B       SETC  ''                  SET TWO LCLC VARIABLES\n         AIF   (&WK GT 9).DO2      B IF ADCON IS TWO DIGITS\n&B       SETC  ' '                 ELSE ADD BLANK TO COMMENT\n.* ONE- OR TWO-DIGIT ENTRY\n.DO2     DC AL.4(&V(&N),&A(&N)),0C'      &B.CHAN &B.&WK IS AT LINE &N'\n         AGO   .DO4\n.* NO-DIGIT ENTRY\n.DO3     DC    AL.4(&V(&N),&A(&N))                               93036\n.DO4     AIF   (&N EQ &LP).END     B IF LAST BYTE PROCESSED\n         AGO   .DOLP               GO LOOP\n.*\n.*\n.*\n.*\n.*             DIAGNOSTIC ERROR MESSAGES\n.*\n.OP1BAD  MNOTE 4,'INVALID OPERAND 1 - &SYSLIST(1) -'\n         MNOTE *,'FIRST OPERAND MUST BE EITHER 6 OR 8.'\n&Q       SETB  1\n         AGO   .OP2\n.*\n.OP2BAD  MNOTE 4,'INVALID OPERAND 2 - &SYSLIST(2) -'\n         MNOTE *,'SECOND OPERAND MUST BE A NUMBER GREATER THAN 1'\n         MNOTE *,'AND NOT GREATER THAN &MAX.'                    93036\n&Q       SETB  1\n         AGO   .OP4\n.*\n.OP4BAD  MNOTE 4,'INVALID OPERAND 3 - &SYSLIST(3) -'\n         MNOTE *,'THIRD OPERAND MUST HAVE A CARRIAGE CHANNEL'\n         MNOTE *,'NUMBER, A HYPHEN, AND A LINE NUMBER.'\n&Q       SETB  1\n         AGO   .OPN\n.*\n.OPLBAD  AIF   (T'&SYSLIST(&N) NE 'N').OPLBADA\n         MNOTE 4,'INVALID OPERAND &N - &SYSLIST(&N) -'\n         AGO   .OPLBADB\n.OPLBADA MNOTE 4,'INVALID SUBOPERAND &WK OF OPERAND &N - &SYSLIST(&N) -X\n               '\n.OPLBADB MNOTE *,'LINE NUMBER MUST BE GREATER THAN 1 AND '\n         MNOTE *,'NOT GREATER THAN &LP..'\n&Q       SETB  1\n         AGO   .OPN\n.*\n.DUPBAD  MNOTE 4,'DUPLICATE SPECIFICATION - OPERAND &N ASSIGNS'\n         MNOTE *,'CARRIAGE CHANNEL &CC TO LINE &WK, WHICH WAS'\n         MNOTE *,'PREVIOUSLY ASSIGNED CHANNEL &A(&WK)..'\n&Q       SETB  1\n         AGO   .OPN\n.*\n.HYPBAD  MNOTE 4,'INVALID OPERAND &N - &SYSLIST(&N) -'\n         AIF   (&PASS).HYPBADA\n         MNOTE *,'UNRECOGNIZABLE CHARACTER ''&CH'''\n         AGO   .HYPBADB\n.HYPBADA MNOTE *,'UNRECOGNIZABLE CHARACTER ''&CH'' IN LINE NUMBER.'\n.HYPBADB ANOP\n&Q       SETB  1\n         AGO   .OPN\n.*\n.OPCBAD  MNOTE 4,'INVALID OPERAND &N - &SYSLIST(&N) -'\n         MNOTE *,'CARRIAGE CHANNEL MUST BE GREATER THAN 0'\n         MNOTE *,'AND NOT GREATER THAN 12.'\n&C       SETB  0                   SHOW INVALID &CC\n&Q       SETB  1\n         AGO   .OPN\n.*\n.LOGBAD  MNOTE 4,'INTERNAL LOGIC ERROR AT OPERAND &N'\n         AGO   .QUITBAD\n.*\n.MACBAD  MNOTE 4,'TOO FEW OPERANDS SPECIFIED.  AT LEAST LINES PER'\n         MNOTE *,'INCH, LINES PER PAGE, AND ONE CARRIAGE CONTROL'\n         MNOTE *,'PUNCH MUST BE SPECIFIED.'\n         AIF   (N'&SYSLIST EQ 2).OP1\n         AGO   .QUITBAD\n.*\n.QUITBAD MNOTE *,'FCB WILL NOT BE GENERATED'\n         MEXIT\n.*\n.LABBAD  MNOTE 8,'ERROR - LABEL MISSING OR INCORRECT (NOT FCB3XXXX)'\n         AGO   .QUITBAD\n.*\n.DEFBAD  MNOTE 8,'ERROR - DEFAULT OPTION MUST BE ''YES'' OR ''NO'''\n         AGO   .QUITBAD\n.*\n.END     AIF   (NOT &POF).ENDSKP                                 93036\n         DC    X'000000'     FAKE BOTTOM MARGIN                  93036\n         MEXIT ,                                                 93036\n.ENDSKP  DC    &NP.AL.4(&CD,0)   NON-PRINTING BOTTOM MARGIN      93006\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$HEAD": {"ttr": 1031, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n        $HEAD  &STRING,           STRING IS EXPANDED                   *\n               &BLOCK=YES,        STRING IS TO BE BLOCKED              *\n               &PRINT=GEN,        OPTIONAL OUTPUT SUPPRESSION          *\n               &TITLE=            (A,'B') -GEN TITLE STATEMENT WITH    *\n                                  NAME FIELD A, AND TITLE 'B'\n.*\n.*  THIS MACRO COPIED & ALTERED FROM 'MIM#3' WRITTEN BY C. J. GOELZ\n.*\n         LCLB  &HEADB\n         LCLC  &HEADC(497)\n         LCLA  &I\n         LCLA  &J\n         LCLA  &K\n         LCLA  &L\n         LCLA  &M\n         LCLA  &N\n         LCLC  &F(64)\n         LCLC  &STR(64)\n         LCLC  &B\n         LCLC  &W\n.*\n.*\n         AIF   (&HEADB).PROC\n&HEADB   SETB  (1)\n&HEADC(1)    SETC  ' '\n&HEADC(2)    SETC  '        '\n&HEADC(3)    SETC  '        '\n&HEADC(4)    SETC  '        '\n&HEADC(5)    SETC  '        '\n&HEADC(6)    SETC  '        '\n&HEADC(7)    SETC  '        '\n&HEADC(8)    SETC  '        '\n&HEADC(9)    SETC  '        '\n&HEADC(10)   SETC  'A'\n&HEADC(11)   SETC  '    A   '\n&HEADC(12)   SETC  '   AAA  '\n&HEADC(13)   SETC  '  AA AA '\n&HEADC(14)   SETC  ' AA   AA'\n&HEADC(15)   SETC  ' AA   AA'\n&HEADC(16)   SETC  ' AAAAAAA'\n&HEADC(17)   SETC  ' AA   AA'\n&HEADC(18)   SETC  ' AA   AA'\n&HEADC(19)   SETC  'B'\n&HEADC(20)   SETC  ' BBBBBB '\n&HEADC(21)   SETC  ' BB   BB'\n&HEADC(22)   SETC  ' BB   BB'\n&HEADC(23)   SETC  ' BBBBBB '\n&HEADC(24)   SETC  ' BB   BB'\n&HEADC(25)   SETC  ' BB   BB'\n&HEADC(26)   SETC  ' BB   BB'\n&HEADC(27)   SETC  ' BBBBBB '\n&HEADC(28)   SETC  'C'\n&HEADC(29)   SETC  '  CCCCC '\n&HEADC(30)   SETC  ' CC   CC'\n&HEADC(31)   SETC  ' CC   CC'\n&HEADC(32)   SETC  ' CC     '\n&HEADC(33)   SETC  ' CC     '\n&HEADC(34)   SETC  ' CC   CC'\n&HEADC(35)   SETC  ' CC   CC'\n&HEADC(36)   SETC  '  CCCCC '\n&HEADC(37)   SETC  'D'\n&HEADC(38)   SETC  ' DDDDDD '\n&HEADC(39)   SETC  ' DD   DD'\n&HEADC(40)   SETC  ' DD   DD'\n&HEADC(41)   SETC  ' DD   DD'\n&HEADC(42)   SETC  ' DD   DD'\n&HEADC(43)   SETC  ' DD   DD'\n&HEADC(44)   SETC  ' DD   DD'\n&HEADC(45)   SETC  ' DDDDDD '\n&HEADC(46)   SETC  'E'\n&HEADC(47)   SETC  ' EEEEEE '\n&HEADC(48)   SETC  ' EE     '\n&HEADC(49)   SETC  ' EE     '\n&HEADC(50)   SETC  ' EEEE   '\n&HEADC(51)   SETC  ' EE     '\n&HEADC(52)   SETC  ' EE     '\n&HEADC(53)   SETC  ' EE     '\n&HEADC(54)   SETC  ' EEEEEEE'\n&HEADC(55)   SETC  'F'\n&HEADC(56)   SETC  ' FFFFFFF'\n&HEADC(57)   SETC  ' FF     '\n&HEADC(58)   SETC  ' FF     '\n&HEADC(59)   SETC  ' FFFFF  '\n&HEADC(60)   SETC  ' FF     '\n&HEADC(61)   SETC  ' FF     '\n&HEADC(62)   SETC  ' FF     '\n&HEADC(63)   SETC  ' FF     '\n&HEADC(64)   SETC  'G'\n&HEADC(65)   SETC  '  GGGGG '\n&HEADC(66)   SETC  ' GG   GG'\n&HEADC(67)   SETC  ' GG   GG'\n&HEADC(68)   SETC  ' GG     '\n&HEADC(69)   SETC  ' GG  GGG'\n&HEADC(70)   SETC  ' GG   GG'\n&HEADC(71)   SETC  ' GG   GG'\n&HEADC(72)   SETC  '  GGGGG '\n&HEADC(73)   SETC  'H'\n&HEADC(74)   SETC  ' HH   HH'\n&HEADC(75)   SETC  ' HH   HH'\n&HEADC(76)   SETC  ' HH   HH'\n&HEADC(77)   SETC  ' HHHHHHH'\n&HEADC(78)   SETC  ' HH   HH'\n&HEADC(79)   SETC  ' HH   HH'\n&HEADC(80)   SETC  ' HH   HH'\n&HEADC(81)   SETC  ' HH   HH'\n&HEADC(82)   SETC  'I'\n&HEADC(83)   SETC  '  IIII  '\n&HEADC(84)   SETC  '   II   '\n&HEADC(85)   SETC  '   II   '\n&HEADC(86)   SETC  '   II   '\n&HEADC(87)   SETC  '   II   '\n&HEADC(88)   SETC  '   II   '\n&HEADC(89)   SETC  '   II   '\n&HEADC(90)   SETC  '  IIII  '\n&HEADC(91)   SETC  'J'\n&HEADC(92)   SETC  '      JJ'\n&HEADC(93)   SETC  '      JJ'\n&HEADC(94)   SETC  '      JJ'\n&HEADC(95)   SETC  '      JJ'\n&HEADC(96)   SETC  '      JJ'\n&HEADC(97)   SETC  ' JJ   JJ'\n&HEADC(98)   SETC  ' JJ   JJ'\n&HEADC(99)   SETC  '  JJJJJ '\n&HEADC(100)  SETC  'K'\n&HEADC(101)  SETC  ' KK   KK'\n&HEADC(102)  SETC  ' KK  KK '\n&HEADC(103)  SETC  ' KK KK  '\n&HEADC(104)  SETC  ' KKKK   '\n&HEADC(105)  SETC  ' KKKK   '\n&HEADC(106)  SETC  ' KK KK  '\n&HEADC(107)  SETC  ' KK  KK '\n&HEADC(108)  SETC  ' KK   KK'\n&HEADC(109)  SETC  'L'\n&HEADC(110)  SETC  ' LL     '\n&HEADC(111)  SETC  ' LL     '\n&HEADC(112)  SETC  ' LL     '\n&HEADC(113)  SETC  ' LL     '\n&HEADC(114)  SETC  ' LL     '\n&HEADC(115)  SETC  ' LL     '\n&HEADC(116)  SETC  ' LL     '\n&HEADC(117)  SETC  ' LLLLLLL'\n&HEADC(118)  SETC  'M'\n&HEADC(119)  SETC  ' M     M'\n&HEADC(120)  SETC  ' MM   MM'\n&HEADC(121)  SETC  ' MMM MMM'\n&HEADC(122)  SETC  ' MMMMMMM'\n&HEADC(123)  SETC  ' MM M MM'\n&HEADC(124)  SETC  ' MM   MM'\n&HEADC(125)  SETC  ' MM   MM'\n&HEADC(126)  SETC  ' MM   MM'\n&HEADC(127)  SETC  'N'\n&HEADC(128)  SETC  ' NN   NN'\n&HEADC(129)  SETC  ' NNN  NN'\n&HEADC(130)  SETC  ' NNN  NN'\n&HEADC(131)  SETC  ' NNNN NN'\n&HEADC(132)  SETC  ' NN NNNN'\n&HEADC(133)  SETC  ' NN  NNN'\n&HEADC(134)  SETC  ' NN  NNN'\n&HEADC(135)  SETC  ' NN   NN'\n&HEADC(136)  SETC  'O'\n&HEADC(137)  SETC  '  OOOOO '\n&HEADC(138)  SETC  ' OO   OO'\n&HEADC(139)  SETC  ' OO   OO'\n&HEADC(140)  SETC  ' OO   OO'\n&HEADC(141)  SETC  ' OO   OO'\n&HEADC(142)  SETC  ' OO   OO'\n&HEADC(143)  SETC  ' OO   OO'\n&HEADC(144)  SETC  '  OOOOO '\n&HEADC(145)  SETC  'P'\n&HEADC(146)  SETC  ' PPPPPP '\n&HEADC(147)  SETC  ' PP   PP'\n&HEADC(148)  SETC  ' PP   PP'\n&HEADC(149)  SETC  ' PP   PP'\n&HEADC(150)  SETC  ' PPPPPP '\n&HEADC(151)  SETC  ' PP     '\n&HEADC(152)  SETC  ' PP     '\n&HEADC(153)  SETC  ' PP     '\n&HEADC(154)  SETC  'Q'\n&HEADC(155)  SETC  '  QQQQQ '\n&HEADC(156)  SETC  ' QQ   QQ'\n&HEADC(157)  SETC  ' QQ   QQ'\n&HEADC(158)  SETC  ' QQ   QQ'\n&HEADC(159)  SETC  ' QQ Q QQ'\n&HEADC(160)  SETC  ' QQ  QQQ'\n&HEADC(161)  SETC  ' QQ   QQ'\n&HEADC(162)  SETC  '  QQQQQQ'\n&HEADC(163)  SETC  'R'\n&HEADC(164)  SETC  ' RRRRRR '\n&HEADC(165)  SETC  ' RR   RR'\n&HEADC(166)  SETC  ' RR   RR'\n&HEADC(167)  SETC  ' RR   RR'\n&HEADC(168)  SETC  ' RRRRRR '\n&HEADC(169)  SETC  ' RR RR  '\n&HEADC(170)  SETC  ' RR  RR '\n&HEADC(171)  SETC  ' RR   RR'\n&HEADC(172)  SETC  'S'\n&HEADC(173)  SETC  '  SSSSS '\n&HEADC(174)  SETC  ' SS   SS'\n&HEADC(175)  SETC  ' SS     '\n&HEADC(176)  SETC  '  SSSSS '\n&HEADC(177)  SETC  '      SS'\n&HEADC(178)  SETC  ' SS   SS'\n&HEADC(179)  SETC  ' SS   SS'\n&HEADC(180)  SETC  '  SSSSS '\n&HEADC(181)  SETC  'T'\n&HEADC(182)  SETC  'TTTTTTTT'\n&HEADC(183)  SETC  '   TT   '\n&HEADC(184)  SETC  '   TT   '\n&HEADC(185)  SETC  '   TT   '\n&HEADC(186)  SETC  '   TT   '\n&HEADC(187)  SETC  '   TT   '\n&HEADC(188)  SETC  '   TT   '\n&HEADC(189)  SETC  '   TT   '\n&HEADC(190)  SETC  'U'\n&HEADC(191)  SETC  ' UU   UU'\n&HEADC(192)  SETC  ' UU   UU'\n&HEADC(193)  SETC  ' UU   UU'\n&HEADC(194)  SETC  ' UU   UU'\n&HEADC(195)  SETC  ' UU   UU'\n&HEADC(196)  SETC  ' UU   UU'\n&HEADC(197)  SETC  ' UU   UU'\n&HEADC(198)  SETC  '  UUUUU '\n&HEADC(199)  SETC  'V'\n&HEADC(200)  SETC  ' VV   VV'\n&HEADC(201)  SETC  ' VV   VV'\n&HEADC(202)  SETC  ' VV   VV'\n&HEADC(203)  SETC  ' VV   VV'\n&HEADC(204)  SETC  ' VV   VV'\n&HEADC(205)  SETC  '  VV VV '\n&HEADC(206)  SETC  '   VVV  '\n&HEADC(207)  SETC  '    V   '\n&HEADC(208)  SETC  'W'\n&HEADC(209)  SETC  ' WW   WW'\n&HEADC(210)  SETC  ' WW   WW'\n&HEADC(211)  SETC  ' WW   WW'\n&HEADC(212)  SETC  ' WW   WW'\n&HEADC(213)  SETC  ' WW W WW'\n&HEADC(214)  SETC  ' WWWWWWW'\n&HEADC(215)  SETC  ' WWW WWW'\n&HEADC(216)  SETC  '  W   W '\n&HEADC(217)  SETC  'X'\n&HEADC(218)  SETC  ' XX   XX'\n&HEADC(219)  SETC  ' XX   XX'\n&HEADC(220)  SETC  '  XX XX '\n&HEADC(221)  SETC  '   XXX  '\n&HEADC(222)  SETC  '   XXX  '\n&HEADC(223)  SETC  '  XX XX '\n&HEADC(224)  SETC  ' XX   XX'\n&HEADC(225)  SETC  ' XX   XX'\n&HEADC(226)  SETC  'Y'\n&HEADC(227)  SETC  ' YY   YY'\n&HEADC(228)  SETC  ' YY   YY'\n&HEADC(229)  SETC  ' YY   YY'\n&HEADC(230)  SETC  '  YY YY '\n&HEADC(231)  SETC  '   YYY  '\n&HEADC(232)  SETC  '   YY   '\n&HEADC(233)  SETC  '   YY   '\n&HEADC(234)  SETC  '   YY   '\n&HEADC(235)  SETC  'Z'\n&HEADC(236)  SETC  ' ZZZZZZZ'\n&HEADC(237)  SETC  '      ZZ'\n&HEADC(238)  SETC  '     ZZ '\n&HEADC(239)  SETC  '    ZZ  '\n&HEADC(240)  SETC  '   ZZ   '\n&HEADC(241)  SETC  '  ZZ    '\n&HEADC(242)  SETC  ' ZZ     '\n&HEADC(243)  SETC  ' ZZZZZZZ'\n&HEADC(244)  SETC  '1'\n&HEADC(245)  SETC  '    1   '\n&HEADC(246)  SETC  '   11   '\n&HEADC(247)  SETC  '    1   '\n&HEADC(248)  SETC  '    1   '\n&HEADC(249)  SETC  '    1   '\n&HEADC(250)  SETC  '    1   '\n&HEADC(251)  SETC  '    1   '\n&HEADC(252)  SETC  '   111  '\n&HEADC(253)  SETC  '2'\n&HEADC(254)  SETC  '   222  '\n&HEADC(255)  SETC  '  2   2 '\n&HEADC(256)  SETC  '      2 '\n&HEADC(257)  SETC  '      2 '\n&HEADC(258)  SETC  '   222  '\n&HEADC(259)  SETC  '  2     '\n&HEADC(260)  SETC  '  2     '\n&HEADC(261)  SETC  '  22222 '\n&HEADC(262)  SETC  '3'\n&HEADC(263)  SETC  '   333  '\n&HEADC(264)  SETC  '  3   3 '\n&HEADC(265)  SETC  '      3 '\n&HEADC(266)  SETC  '    33  '\n&HEADC(267)  SETC  '      3 '\n&HEADC(268)  SETC  '  3   3 '\n&HEADC(269)  SETC  '  3   3 '\n&HEADC(270)  SETC  '   333  '\n&HEADC(271)  SETC  '4'\n&HEADC(272)  SETC  '     4  '\n&HEADC(273)  SETC  '    44  '\n&HEADC(274)  SETC  '   4 4  '\n&HEADC(275)  SETC  '  4  4  '\n&HEADC(276)  SETC  ' 444444 '\n&HEADC(277)  SETC  '     4  '\n&HEADC(278)  SETC  '     4  '\n&HEADC(279)  SETC  '     4  '\n&HEADC(280)  SETC  '5'\n&HEADC(281)  SETC  '  55555 '\n&HEADC(282)  SETC  '  5     '\n&HEADC(283)  SETC  '  5     '\n&HEADC(284)  SETC  '  5555  '\n&HEADC(285)  SETC  '      5 '\n&HEADC(286)  SETC  '  5   5 '\n&HEADC(287)  SETC  '  5   5 '\n&HEADC(288)  SETC  '   555  '\n&HEADC(289)  SETC  '6'\n&HEADC(290)  SETC  '   666  '\n&HEADC(291)  SETC  '  6   6 '\n&HEADC(292)  SETC  '  6     '\n&HEADC(293)  SETC  '  6666  '\n&HEADC(294)  SETC  '  6   6 '\n&HEADC(295)  SETC  '  6   6 '\n&HEADC(296)  SETC  '  6   6 '\n&HEADC(297)  SETC  '   666  '\n&HEADC(298)  SETC  '7'\n&HEADC(299)  SETC  '  77777 '\n&HEADC(300)  SETC  '      7 '\n&HEADC(301)  SETC  '      7 '\n&HEADC(302)  SETC  '     7  '\n&HEADC(303)  SETC  '    7   '\n&HEADC(304)  SETC  '   7    '\n&HEADC(305)  SETC  '   7    '\n&HEADC(306)  SETC  '   7    '\n&HEADC(307)  SETC  '8'\n&HEADC(308)  SETC  '   888  '\n&HEADC(309)  SETC  '  8   8 '\n&HEADC(310)  SETC  '  8   8 '\n&HEADC(311)  SETC  '   888  '\n&HEADC(312)  SETC  '  8   8 '\n&HEADC(313)  SETC  '  8   8 '\n&HEADC(314)  SETC  '  8   8 '\n&HEADC(315)  SETC  '   888  '\n&HEADC(316)  SETC  '9'\n&HEADC(317)  SETC  '   999  '\n&HEADC(318)  SETC  '  9   9 '\n&HEADC(319)  SETC  '  9   9 '\n&HEADC(320)  SETC  '  9   9 '\n&HEADC(321)  SETC  '   9999 '\n&HEADC(322)  SETC  '      9 '\n&HEADC(323)  SETC  '  9   9 '\n&HEADC(324)  SETC  '   999  '\n&HEADC(325)  SETC  '0'\n&HEADC(326)  SETC  '   000  '\n&HEADC(327)  SETC  '  0   0 '\n&HEADC(328)  SETC  '  0   0 '\n&HEADC(329)  SETC  '  0   0 '\n&HEADC(330)  SETC  '  0   0 '\n&HEADC(331)  SETC  '  0   0 '\n&HEADC(332)  SETC  '  0   0 '\n&HEADC(333)  SETC  '   000  '\n&HEADC(334)  SETC  '$'\n&HEADC(335)  SETC  '    $   '\n&HEADC(336)  SETC  '  $$$$$ '\n&HEADC(337)  SETC  ' $$ $ $$'\n&HEADC(338)  SETC  ' $$ $   '\n&HEADC(339)  SETC  '  $$$$$ '\n&HEADC(340)  SETC  '    $ $$'\n&HEADC(341)  SETC  ' $$ $ $$'\n&HEADC(342)  SETC  '  $$$$$ '\n&HEADC(343)  SETC  '#'\n&HEADC(344)  SETC  '  ## ## '\n&HEADC(345)  SETC  '  ## ## '\n&HEADC(346)  SETC  ' #######'\n&HEADC(347)  SETC  '  ## ## '\n&HEADC(348)  SETC  '  ## ## '\n&HEADC(349)  SETC  ' #######'\n&HEADC(350)  SETC  '  ## ## '\n&HEADC(351)  SETC  '  ## ## '\n&HEADC(352)  SETC  '@'\n&HEADC(353)  SETC  '  @@@@@ '\n&HEADC(354)  SETC  ' @     @'\n&HEADC(355)  SETC  ' @  @@ @'\n&HEADC(356)  SETC  ' @ @ @ @'\n&HEADC(357)  SETC  '  @  @ @'\n&HEADC(358)  SETC  ' @   @ @'\n&HEADC(359)  SETC  ' @   @ @'\n&HEADC(360)  SETC  '  @@@ @ '\n&HEADC(361)  SETC  ','\n&HEADC(362)  SETC  '        '\n&HEADC(363)  SETC  '        '\n&HEADC(364)  SETC  '        '\n&HEADC(365)  SETC  '        '\n&HEADC(366)  SETC  '   ,,   '\n&HEADC(367)  SETC  '   ,,   '\n&HEADC(368)  SETC  '    ,   '\n&HEADC(369)  SETC  '   ,    '\n&HEADC(370)  SETC  '.'\n&HEADC(371)  SETC  '        '\n&HEADC(372)  SETC  '        '\n&HEADC(373)  SETC  '        '\n&HEADC(374)  SETC  '        '\n&HEADC(375)  SETC  '        '\n&HEADC(376)  SETC  '   ..   '\n&HEADC(377)  SETC  '   ..   '\n&HEADC(378)  SETC  '        '\n&HEADC(379)  SETC  '('\n&HEADC(380)  SETC  '    (   '\n&HEADC(381)  SETC  '   (    '\n&HEADC(382)  SETC  '  (     '\n&HEADC(383)  SETC  '  (     '\n&HEADC(384)  SETC  '  (     '\n&HEADC(385)  SETC  '  (     '\n&HEADC(386)  SETC  '   (    '\n&HEADC(387)  SETC  '    (   '\n&HEADC(388)  SETC  ')'\n&HEADC(389)  SETC  '   )    '\n&HEADC(390)  SETC  '    )   '\n&HEADC(391)  SETC  '     )  '\n&HEADC(392)  SETC  '     )  '\n&HEADC(393)  SETC  '     )  '\n&HEADC(394)  SETC  '     )  '\n&HEADC(395)  SETC  '    )   '\n&HEADC(396)  SETC  '   )    '\n&HEADC(397)  SETC  '+'\n&HEADC(398)  SETC  '        '\n&HEADC(399)  SETC  '    +   '\n&HEADC(400)  SETC  '    +   '\n&HEADC(401)  SETC  '    +   '\n&HEADC(402)  SETC  ' +++++++'\n&HEADC(403)  SETC  '    +   '\n&HEADC(404)  SETC  '    +   '\n&HEADC(405)  SETC  '    +   '\n&HEADC(406)  SETC  '/'\n&HEADC(407)  SETC  '       /'\n&HEADC(408)  SETC  '      / '\n&HEADC(409)  SETC  '     /  '\n&HEADC(410)  SETC  '    /   '\n&HEADC(411)  SETC  '   /    '\n&HEADC(412)  SETC  '  /     '\n&HEADC(413)  SETC  ' /      '\n&HEADC(414)  SETC  '/       '\n&HEADC(415)  SETC  '\"'\n&HEADC(416)  SETC  '   \"\"   '\n&HEADC(417)  SETC  '   \"\"   '\n&HEADC(418)  SETC  '    \"   '\n&HEADC(419)  SETC  '   \"    '\n&HEADC(420)  SETC  '        '\n&HEADC(421)  SETC  '        '\n&HEADC(422)  SETC  '        '\n&HEADC(423)  SETC  '        '\n&HEADC(424)  SETC  '-'\n&HEADC(425)  SETC  '        '\n&HEADC(426)  SETC  '        '\n&HEADC(427)  SETC  '        '\n&HEADC(428)  SETC  '        '\n&HEADC(429)  SETC  ' -------'\n&HEADC(430)  SETC  '        '\n&HEADC(431)  SETC  '        '\n&HEADC(432)  SETC  '        '\n&HEADC(433)  SETC  '*'\n&HEADC(434)  SETC  '        '\n&HEADC(435)  SETC  '  *   * '\n&HEADC(436)  SETC  '   * *  '\n&HEADC(437)  SETC  ' *******'\n&HEADC(438)  SETC  '   * *  '\n&HEADC(439)  SETC  '  *   * '\n&HEADC(440)  SETC  '        '\n&HEADC(441)  SETC  '        '\n&HEADC(442)  SETC  'END'           MARKS END OF THE CHARACTER LIST\n.PROC    AIF   ('&PRINT' EQ 'NOGEN' OR '&PRINT' EQ 'NODATA').MEND\n.*\n.*\n         AIF   (K'&TITLE LE 0).NTITL\n.*\n         AIF   ('&TITLE' NE 'EJECT').NEJEC\n         EJECT\n         AGO   .NTITL\n.*\n.NEJEC   ANOP\n&TITLE(1) TITLE &TITLE(2)\n.*\n.*\n.NTITL   ANOP\n.*\n.*\n&K       SETA  K'&STRING\n         AIF   ((&K EQ 0) OR (&K GT 64)).DONE\n.*\n.*\n         AIF   ('&BLOCK' EQ 'NO').NBLK1\n MNOTE   '**************************************************************\n               **********'\n&B       SETC  '*'\n.NBLK1   ANOP  ,\n.*\n.*\n.*\n&M       SETA  1\n.COPY2   ANOP  ,\n&STR(&M) SETC  '&STRING'(&M,1)\n&M       SETA  &M+1\n         AIF   (&M LE &K).COPY2\n.*\n&J       SETA  0\n&M       SETA  0\n.*\n.*\n.EDIT    AIF   (&M EQ &K).AGIN\n&M       SETA  &M+1\n&I       SETA  &M\n         AIF   ('&STR(&M)' NE '''').EDIT\n.*\n         AIF   (&J GT 0).QTCK\n.*\n&J       SETA  1\n         AGO   .COMP\n.*\n.*\n.QTCK    AIF   ('&STR(&M+1)' NE '''').COMP\n.*\n&STR(&M) SETC  '\"'\n&J       SETA  0\n&M       SETA  &M+1\n&I       SETA  &M\n.*\n.*\n.COMP    ANOP\n&STR(&I) SETC  '&STR(&I+1)'\n&I       SETA  &I+1\n         AIF   (&I LT &K).COMP\n.*\n&STR(&K) SETC  ' '\n&K       SETA  &K-1\n&M       SETA  &M-1\n         AGO   .EDIT\n.*\n.*\n.AGIN    ANOP\n&I       SETA  1\n&L       SETA  &K-&N\n         AIF   (&L LE 0).ENDOFF\n.*\n         AIF   (&L LE 8).CK4\n.*\n&L       SETA  8\n.*\n.*\n.CK4     ANOP\n&J       SETA  (8-&L)/2*8\n.*\n.*\n.FILT    AIF   (&I GT &J).SETL\n.*\n&F(&I)   SETC  '        '\n&F(&I+1) SETC  '        '\n&F(&I+2) SETC  '        '\n&F(&I+3) SETC  '        '\n&F(&I+4) SETC  '        '\n&F(&I+5) SETC  '        '\n&F(&I+6) SETC  '        '\n&F(&I+7) SETC  '        '\n&I       SETA  &I+8\n         AGO   .FILT\n.*\n.*\n.SETL    ANOP\n&L       SETA  &L+&N\n.*\n.*\n.LOOP    AIF   (&N EQ &L).FINI\n.*\n&N       SETA  &N+1\n&J       SETA  1\n&W       SETC  '&STR(&N)'\n.*\n.*\n.MTCH    AIF   ('&W' EQ '&HEADC(&J)').GO\n.*\n&J       SETA  &J+9\n         AIF   ('&HEADC(&J)' NE 'END').MTCH\n&J       SETA  &J-9\n.*\n.*\n.GO      ANOP\n.*\n&F(&I)   SETC  '&HEADC(&J+1)'\n&F(&I+1) SETC  '&HEADC(&J+2)'\n&F(&I+2) SETC  '&HEADC(&J+3)'\n&F(&I+3) SETC  '&HEADC(&J+4)'\n&F(&I+4) SETC  '&HEADC(&J+5)'\n&F(&I+5) SETC  '&HEADC(&J+6)'\n&F(&I+6) SETC  '&HEADC(&J+7)'\n&F(&I+7) SETC  '&HEADC(&J+8)'\n&I       SETA  &I+8\n         AGO   .LOOP\n.*\n.*\n.FINI    AIF   (&I GT 64).DOIT\n.*\n&F(&I)   SETC  '        '\n&F(&I+1) SETC  '        '\n&F(&I+2) SETC  '        '\n&F(&I+3) SETC  '        '\n&F(&I+4) SETC  '        '\n&F(&I+5) SETC  '        '\n&F(&I+6) SETC  '        '\n&F(&I+7) SETC  '        '\n&I       SETA  &I+8\n         AGO   .FINI\n.*\n.*\n.DOIT    AIF   ('&BLOCK' EQ 'NO').SPACE\n MNOTE   '*                                                            *\n                        *'\n MNOTE   '*                                                            *\n                        *'\n         AGO   .DOIT2\n.SPACE   ANOP   ,\n         SPACE 2\n.DOIT2   ANOP  ,\n MNOTE   '&B  &F(1)&F(9)&F(17)&F(25)&F(33)&F(41)&F(49)&F(57)   &B'\n MNOTE   '&B  &F(2)&F(10)&F(18)&F(26)&F(34)&F(42)&F(50)&F(58)   &B'\n MNOTE   '&B  &F(3)&F(11)&F(19)&F(27)&F(35)&F(43)&F(51)&F(59)   &B'\n MNOTE   '&B  &F(4)&F(12)&F(20)&F(28)&F(36)&F(44)&F(52)&F(60)   &B'\n MNOTE   '&B  &F(5)&F(13)&F(21)&F(29)&F(37)&F(45)&F(53)&F(61)   &B'\n MNOTE   '&B  &F(6)&F(14)&F(22)&F(30)&F(38)&F(46)&F(54)&F(62)   &B'\n MNOTE   '&B  &F(7)&F(15)&F(23)&F(31)&F(39)&F(47)&F(55)&F(63)   &B'\n MNOTE   '&B  &F(8)&F(16)&F(24)&F(32)&F(40)&F(48)&F(56)&F(64)   &B'\n         AGO   .AGIN\n.*\n.*\n.ENDOFF  AIF   ('&BLOCK' EQ 'NO').DONE\n MNOTE   '*                                                            *\n                        *'\n MNOTE   '*                                                            *\n                        *'\n MNOTE   '**************************************************************\n               **********'\n.*\n.*\n.DONE    ANOP\n         SPACE 3\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$TCKCONV": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x056/\\x01\\x056/\\x012\\x00N\\x01\\x98\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2005-12-28T00:00:00", "modifydate": "2005-12-28T01:32:00", "lines": 78, "newlines": 408, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      $TCKCONV &STCKVAL=,&CONVVAL=,&TIMETYP=,&DATETYP=,&MF=S,&ZONE=G*\n               MT\n.**********************************************************************\n.*   THIS MACRO INVOKES LOCAL SUBROUTINE SUBSTCK TO PRODUCE OUTPUT    *\n.*   COMPATIBLE WITH THE STCKCONV MACRO IN ESA AND LATER SYSTEMS.     *\n.*   FOR USE UNDER THE XF ASSEMBLER, 8-BYTE KEYWORDS WERE SHORTENED   *\n.*   TO 7 BYTES. THE ZONE=GMT|LT OPTION WAS ADDED AS IN TIME MACRO.   *\n.*   STCKVAL=0 REQUESTS CURRENT TOD CLOCK VALUE.                      *\n.**********************************************************************\n         GBLC  &MACPLAB\n         LCLB  &TB(8),&DB(9)  TIME & DATE FLAG BITS\n         LCLC  &TV,&DV,&ERP\n&TB(8)   SETB  ('&TIMETYP' EQ 'BIN' OR '&TIMETYP' EQ 'MIC')\n&TB(7)   SETB  ('&TIMETYP' EQ 'DEC' OR '&TIMETYP' EQ 'MIC')\n&TB(3)   SETB  1             STCKCONV FLAG\n&DB(8)   SETB  ('&DATETYP' EQ 'MMDDYYYY' OR '&DATETYP' EQ 'YYYYMMDD')\n&DB(7)   SETB  ('&DATETYP' EQ 'DDMMYYYY' OR '&DATETYP' EQ 'YYYYMMDD')\n&DB(2)   SETB  ('&ZONE' EQ 'LT')\n&DB(9)   SETB  ('&DATETYP' EQ 'YYYYDDD')\n         AIF   ('&MF(1)' EQ 'L').LIST\n&MACPLAB SETC  '&NM'         DEFERRED INSTRUCTION LABEL\n&ERP     SETC  'STCKVAL'\n         AIF   ('&STCKVAL' EQ '').MISSING\n&ERP     SETC  'CONVVAL'\n         AIF   ('&CONVVAL' EQ '').MISSING\n&ERP     SETC  'TIMETYP'\n         AIF   ('&TIMETYP' EQ '').MISSING\n&ERP     SETC  'DATETYP'\n         AIF   ('&DATETYP' EQ '').MISSING\n         AIF   ('&MF(1)' EQ 'S').INLINE\n         AIF   ('&MF(1)' EQ 'E').EXEC\n&ERP     SETC  'MF'\n.MISSING MNOTE 8,'KEYWORD &ERP MISSING OR INVALID'\n         MEXIT ,\n.*\n.EXEC    MACPARM R1,&MF(2)\n         AIF   ('&STCKVAL' NE '0').EXECU\n         MACPARM R14,4(,R1)  AVOID ALIGNMENT ERROR ASM MSG\n         STCK  0(R14)        GET CURRENT TIME\n         AGO   .EXECC\n.EXECU   MACPARM R14,&STCKVAL     GET TOD POINTER\n         MVC   4(8,R1),0(R14)     COPY USER'S VALUE\n.EXECC   XC    12(16,R1),12(R1)   CLEAR RETURN VALUE\n&TV      SETC  '32*&TB(3)+2*&TB(7)+&TB(8)'\n&DV      SETC  '64*&DB(2)+2*&DB(7)+&DB(8)'\n         AIF   ('&DATETYP' EQ '').EXECND\n         MVI   2(R1),&DV     SET DATE TYPE FLAGS\n.EXECND  AIF   ('&TIMETYP' EQ '').EXECNT\n         MVI   3(R1),&TV     SET TIME TYPE FLAGS\n.EXECNT  AGO   .COMRET\n.*\n.INLINE  CNOP  0,4\n         MACPARM R1,*+4+28,OP=BAL\n         DC    7A(0)\n         XC    12(16,R1),12(R1)   CLEAR RETURN VALUE\n         AIF   ('&STCKVAL' NE '0').LINEU\n         MACPARM R14,4(,R1)  AVOID ALIGNMENT ERROR ASM MSG\n         STCK  0(R14)        GET CURRENT TIME\n         AGO   .LINEC\n.LINEU   MACPARM R14,&STCKVAL     GET TOD POINTER\n         MVC   4(8,R1),0(R14)     COPY USER'S VALUE\n.LINEC   ANOP  ,\n&TV      SETC  '32*&TB(3)+2*&TB(7)+&TB(8)'\n&DV      SETC  '64*&DB(2)+2*&DB(7)+&DB(8)'\n         MVI   2(R1),&DV     SET DATE TYPE FLAGS\n         MVI   3(R1),&TV     SET TIME TYPE FLAGS\n.COMRET  L     R15,=V(SUBSTCK)  GET SUBROUTINE ADDRESS\n         BALR  R14,R15       CALL SUBROUTINE\n         MACPARM R14,&CONVVAL  GET OUTPUT ADDRESS\n         MVC   0(16,R14),12(R1)  RETURN RESULT\n         MEXIT ,\n.*\n.LIST    ANOP  ,\n&TV      SETC  '32*&TB(3)+2*&TB(7)+&TB(8)'\n&DV      SETC  '64*&DB(2)+2*&DB(7)+&DB(8)'\n&NM      DC    0A(0),AL1(0,0,&TV,&DV),2A(0),2XL8'0'\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#CNVRT": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x031O\\x01\\x05\\x03?\\x19D\\x00K\\x00:\\x00\\x14\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-11-10T00:00:00", "modifydate": "2005-02-02T19:44:00", "lines": 75, "newlines": 58, "modlines": 20, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #CNVRT &FUN,&ADR,&LEN,&OPF,&OPT=,&BZ=,&BNZ=,&BM=,&BP=  GP03122\n         GBLC  &ZZCFXNM(32)\n         GBLC  &ZZCFXF@                                         GP04055\n         GBLC  &ZZCFXFC                                         GP04055\n         GBLC  &MACPLAB\n         GBLB  &ZZCFXFG\n         GBLA  &ZZCFXFM\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  MACRO #CNVRT IS USED BY FUNCTIONS @PRINTER, @SCREENS, AND EXHIBIT *\n.*  MODULE EXHASCRN TO INVOKE COMMON DATA CONVERSION ROUTINES IN      *\n.*  MODULE @FORMATS                                                   *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         LCLA  &I\n&MACPLAB SETC  '&NM'\n         AIF   ('&OPT' EQ 'TABLE' OR '&OPT' EQ 'EXPAND').LOCOPT GP04055\n         AIF   ('&OPT' EQ '').KEEPOPT                           GP04055\n&ZZCFXFC SETC  '&OPT'                                           GP04055\n.KEEPOPT AIF   ('&ZZCFXFC' NE '').LOCOPT                        GP04055\n&ZZCFXFC SETC  'CALL'        DEFAULT INVOKATION MODE            GP04055\n.LOCOPT  AIF   ('&ZZCFXF@' NE '').HAVEPT                        GP04055\n&ZZCFXF@ SETC  '@FORMATS'    DEFAULT ADDRESS OF @FORMATS        GP04055\n     AIF   ('&SYSECT' NE 'EXHASCRN' AND '&SYSECT' NE '@SCREENS').HAVEPT\n&ZZCFXF@ SETC  'ADFORMAT'    ADDRESS OF @FORMATS                GP04055\n.HAVEPT  AIF   (&ZZCFXFG).DEFINED                               GP04055\n&ZZCFXFG SETB  1\n&ZZCFXNM(01) SETC 'DBK'      DEBLANK (STRIP \"B\")\n&ZZCFXNM(02) SETC 'DBKL'     DEBLANK (STRIP \"H\")\n&ZZCFXNM(03) SETC 'DBKR'     DEBLANK (STRIP \"T\")\n&ZZCFXNM(04) SETC 'DBKZ'     REMOVE LEADING HEX AND CHAR ZEROES\n&ZZCFXNM(05) SETC 'CENTER'   DEBLANK, THEN CENTER\n&ZZCFXNM(06) SETC 'DATE'     8-CHAR DATE MM/DD/YY\n&ZZCFXNM(07) SETC 'TIME'     8-CHAR TIME; 24-HOUR\n&ZZCFXNM(08) SETC 'CONVERT'  NUMERIC (FD BASED) CONVERSION (INT->EXT)\n&ZZCFXNM(09) SETC 'TREVNOC'  CONVERSION FROM EXTERNAL TO INTERNAL\n&ZZCFXFM SETA  9\n.DEFINED AIF   ('&OPT' EQ 'TABLE').EXPAND                       GP04055\n         AIF   ('&OPT' EQ 'EXPAND').EXPAND                      GP04055\n.LOOKUP  AIF   (&I GE &ZZCFXFM).NOMATCH\n&I       SETA  &I+1\n         AIF   ('&ZZCFXNM(&I)' EQ '&FUN').MATCH\n         AGO   .LOOKUP\n.NOMATCH MNOTE 8,'#CNVRT: FUNCTION &FUN NOT DEFINED'\n&I       SETA  8             SET FOR CONVERT (?)\n.MATCH   MACPARM R0,&LEN,NULL=SKIP   LOAD OPTIONS/LENGTH\n         MACPARM R15,&OPF,NULL=SKIP  LOAD OPTIONS/OUTLEN\n         MACPARM R1,&ADR,NULL=SKIP   LOAD ITEM ADDRESS\n         AIF   ('&ZZCFXFC' EQ 'CALL').LOAD@                     GP03287\n         AIF   ('&ZZCFXFC' EQ 'CALLA').LOADA                    GP03287\n         AIF   ('&ZZCFXFC' EQ 'CALLV').LOADV                    GP03287\n         MNOTE 4,'#CNVRT: UNRECOGNIZED OPT=&ZZCFXFC '           GP03287\n.LOADV   MACPARM R14,=V(@FORMATS),OP=L                          GP03287\n         AGO   .LOADCOM                                         GP03287\n.LOADA   MACPARM R14,=A(@FORMATS),OP=L                          GP03287\n         AGO   .LOADCOM                                         GP03287\n.LOAD@   MACPARM R14,&ZZCFXF@,OP=L   LOAD CONVERSION ROUTINE ADDRESS\n.LOADCOM ANOP  ,                                                GP03287\n&I       SETA  &I-1\n         AH    R14,32+&I*2(,R14)  GET FUNCTION ENTRY ADDRESS\n         BASR  R14,R14       INVOKE FUNCTION\n AIF ('&BZ' EQ '' AND '&BNZ' EQ '' AND '&BM' EQ '' AND '&BP' EQ '').MND\n.*OOPS   LTR   R0,R0         SET CONDITION CODE                 GP05032\n         MACPARM &BZ,MODE=ONE,NULL=SKIP,OP=BZ,OPR=BZR           GP05032\n         MACPARM &BM,MODE=ONE,NULL=SKIP,OP=BM,OPR=BMR           GP05032\n         MACPARM &BP,MODE=ONE,NULL=SKIP,OP=BP,OPR=BPR           GP05032\n         MACPARM &BNZ,MODE=ONE,NULL=SKIP,OP=BNZ,OPR=BNZR        GP05032\n.MND     MEXIT ,\n.EXPAND  AIF   (&I GE &ZZCFXFM).MEND\n&I       SETA  &I+1\n&MACPLAB DC    AL2(&ZZCFXNM(&I)-&SYSECT)\n&MACPLAB SETC  ' '\n         AGO   .EXPAND\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#FMT": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x031O\\x01\\x121\\x9f!\\x08\\x00\\x8b\\x00O\\x00}\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-11-10T00:00:00", "modifydate": "2012-11-14T21:08:00", "lines": 139, "newlines": 79, "modlines": 125, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #FMT  &VALUE,&OLN,&SIGN=,&CENT=N,&GROUP=N,                    *\n               &FILL=N,&LJUST=N,&SPACE=N,&TRUNC=N,&TYPE=DEC,           *\n               &OPT=,&CALL=CALL,&MF=S                           GP04118\n.*--------------------------------------------------------------------*\n.*  THIS MACRO INVOKES NUMERIC FORMATTING SERVICES (VIA @FORMATS)     *\n.*                                                                    *\n.*  FIRST POSITIONAL IS ADDRESS/NAME OF VALUE                         *\n.*  SECOND POSITIONAL USED TO SPECIFY (FORCED) OUTPUT LENGTH          *\n.*                                                                    *\n.*  OTHER SERVICES:    SIGN=Y - NEGATIVE # PREFIXED BY MINUS(DEFAULT) *\n.*     CENT=Y  - FORMAT A DECIMAL NUMBER WITH TWO PLACES WWW.PP       *\n.*     GROUP=Y - FORMAT IN GROUPS OF THREE 123,456                    *\n.*     FILL=Y  - FILL WITH LEADING ZEROES  00012300                   *\n.*     LJUST=Y - LEFT JUSTIFY THE NUMBER, THEN ABUT TEXT              *\n.*     SPACE=Y - ONE SPACE BETWEEN NUMBER AND TEXT                    *\n.*     TRUNC=N - OVERFLOW (***) WHEN SIGNIFICANT DIGITS LOST (CC=4)   *\n.*                                                                    *\n.*  TYPE=TEXT ADDED. WHEN INPUT=OUTPUT LENGTH, MOVED AND TRANSLATED   *\n.*     OTHERWISE RIGHT JUSTIFIED EXCEPT WHEN LJUST=Y OR CENT=Y        *\n.*  FOR MF NOT =L, VALUE MAY NOW BE A LITERAL                         *\n.*                                                                    *\n.*     CLOSE=YES - FREE THEE DYNAMICALLY ACQUIRED WORK AREA           *\n.*                                                                    *\n.*  EXCEPT FOR LJUST=Y, ALL OUTPUT FIELDS WILL BE THE MAXIMUM LENGTH  *\n.*  POSSIBLE (TO MAINTAIN COMMON ALIGNMENT) DEPENDING ON THE INPUT    *\n.*  LENGTH.  OUTPUT LENGTH INCLUDES SIGN (UNLESS SIGN=N) AND COMMAS   *\n.*  AND PERIODS.  OR SPECIFY EXPLICIT OUTPUT LENGTH (NUM,LEN)         *\n.*  LJUST=Y WITH SHORT LENGTH TRUNCATES ON RIGHT, ELSE LEFT.          *\n.*                                                                    *\n.* INVOCATION WITH #FMT *END OR #FMT OPT=CLOSE RELEASES THE WORK AREA *\n.*                                                                    *\n.* MF=L EXPANDS A FOUR BYTE DEFINITION; REQUIRES ABSOLUTE OR SELF-    *\n.*  DEFINING TERMS FOR THE LENGTHS (USED WITH #OPMSG/SUBWTO)          *\n.*--------------------------------------------------------------------*\n.*  MAINTENANCE  2012-11-15  CHANGED DEFAULTS FOR SIGN TO DEPEND ON   *\n.*                           TYPE (N FOR ABS, HEX, AND TEXT; Y OTHER) *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         GBLC  &MACPLAB\n&MACPLAB SETC  '&NM'\n         LCLA  &EPYT,&OPTS\n         LCLA  &K,&I,&J,&N                                      GP04118\n         LCLB  &O01,&O02,&O04,&O08,&O10,&O20,&O40,&O80\n         LCLC  &L,&LOL,&LIN,&LON                                GP04118\n&L       SETC  'L'''\n         AIF   ('&VALUE' EQ '*END').QUIT\n&N       SETA  N'&VALUE                                         GP04118\n         AIF   ('&OPT' EQ 'CLOSE' OR '&OPT' EQ 'END').QUIT\n&O80     SETB  ('&SIGN' EQ 'Y' OR '&SIGN' EQ 'YES')\n&O40     SETB  ('&LJUST' EQ 'Y' OR '&LJUST' EQ 'YES')\n&O20     SETB  ('&SPACE' EQ 'Y' OR '&SPACE' EQ 'YES')\n&O10     SETB  ('&FILL' EQ 'Y' OR '&FILL' EQ 'YES')\n&O08     SETB  ('&TRUNC' EQ 'Y' OR '&TRUNC' EQ 'YES')\n.*&O04     SETB  ('&O04' EQ 'Y' OR '&O04' EQ 'YES')\n&O02     SETB  ('&GROUP' EQ 'Y' OR '&GROUP' EQ 'YES')\n&O01     SETB  ('&CENT' EQ 'Y' OR '&CENT' EQ 'YES')\n&EPYT    SETA  1                                                GP04118\n         AIF   ('&VALUE'(1,1) EQ '''').LITT                     GP12319\n         AIF   ('&TYPE' EQ 'TXT' OR '&TYPE' EQ 'TEXT').LADD     GP04118\n&EPYT    SETA  2\n         AIF   ('&TYPE' EQ 'DEC' OR '&TYPE' EQ 'PACKED').LADD\n&EPYT    SETA  3\n         AIF   ('&TYPE' EQ 'ADEC' OR '&TYPE' EQ 'ABSDEC').LADD\n&EPYT    SETA  4\n         AIF   ('&TYPE' EQ 'INT' OR '&TYPE' EQ 'INTEGER').LADD\n&EPYT    SETA  5\n         AIF   ('&TYPE' EQ 'AINT' OR '&TYPE' EQ 'ABSINT').LADD\n&EPYT    SETA  6\n         AIF   ('&TYPE' EQ 'SHEX').LADD\n&EPYT    SETA  7\n         AIF   ('&TYPE' EQ 'HEX' OR '&TYPE' EQ 'X').LADD        GP12319\n&EPYT    SETA  8\n         AIF   ('&TYPE' EQ 'SBIN' OR '&TYPE' EQ 'SBIT').LADD\n&EPYT    SETA  9\n         AIF   ('&TYPE' EQ 'BIN' OR '&TYPE' EQ 'BINARY').LADD\n         MNOTE 8,'#FMT: INVALID DATA TYPE &TYPE '               GP12319\n&EPYT    SETA  7             DO AS HEX\n         AGO   .LADD                                            GP12319\n.LITT    AIF   ('&TYPE' EQ '' OR '&TYPE' EQ 'TEXT' OR '&TYPE' EQ 'TXT')*\n               .LADD\n         MNOTE 4,'#FMT: QUOTED STRING INVALID WITH TYPE &TYPE'  GP12319\n.LADD    AIF   (T'&SIGN NE 'O').LADDLE   HAVE SIGN PREFERENCE   GP12319\n&O80     SETB  (&O80 OR ('010101010'(1,&EPYT) EQ '1'))          GP12319\n.LADDLE  ANOP  ,                                                GP12319\n&OPTS    SETA  &O80*128+&O40*64+&O20*32+&O10*16\n&OPTS    SETA  &OPTS+&O08*8+&O04*4+&O02*2+&O01\n         AIF   ('&MF' EQ 'L').DCONLY                            GP04118\n         AIF   ('&VALUE'(1,1) NE '''').NOLIT                    GP04118\n&EPYT    SETA  K'&VALUE-2    BORROW VARIABLE                    GP04118\n&LIN     SETC  '&EPYT'       SET INPUT LENGTH DEFAULT           GP04118\n&EPYT    SETA  1             FORCE TEXT MODE FOR LITERAL        GP04118\n         AIF   (&N LT 2).LITLEN                                 GP04118\n&LIN     SETC  '&VALUE(2)'                                      GP04118\n.LITLEN  MACPARM R0,=AL1(&OLN,&LIN,&EPYT,&OPTS),OP=L            GP04118\n         MACPARM R1,=C&VALUE(1)                                 GP04118\n         AGO   .CMNUML                                          GP04118\n.NOLIT   AIF   ('&OLN' EQ '').NOLOAD                            GP04118\n         MACPARM R0,12,=Y(&OLN*256),OP=ICM,MODE=THREE USER'S LENGTH\n         MACPARM R0,3,=Y(&EPYT*256+&OPTS),OP=ICM,MODE=THREE TYPE\n         AGO   .TESTCC\n.NOLOAD  MACPARM R0,&EPYT*256+&OPTS,OP=LA   LOAD FORMATTING SELECTION\n.TESTCC  AIF   (&N LT 2).NONUML                                 GP04118\n         MACPARM R1,&VALUE(1),OP=LA LOAD ADDRESS OF PACKED COUNTER\n         MACPARM R0,4,=AL1(&VALUE(2)),OP=ICM,MODE=THREE\n         AGO   .CMNUML\n.NONUML  MACPARM R1,&VALUE,OP=LA LOAD ADDRESS OF PACKED COUNTER\n         MACPARM R0,4,=AL1(&L&VALUE),OP=ICM,MODE=THREE\n         AGO   .CMNUML\n.QUIT    MACPARM R0,(R0),OP=SR,OPR=SR,MODE=EVEN SET THE SHUTDOWN SIGNAL\n         MACPARM R1,(R1),OP=SR,OPR=SR,MODE=EVEN   R0=R1=0       GP03122\n.CMNUML  AIF   ('&CALL' EQ 'CALL').LOAD@                        GP03287\n         AIF   ('&CALL' EQ 'CALLA').LOADA                       GP03287\n         AIF   ('&CALL' EQ 'CALLV').LOADV                       GP03287\n         MNOTE 4,'#CNVRT: UNRECOGNIZED CALL=&CALL '             GP03287\n.LOADV   MACPARM R15,=V(@FORMATS),OP=L                          GP03287\n         AGO   .LOADCOM                                         GP03287\n.LOADA   MACPARM R15,=A(@FORMATS),OP=L                          GP03287\n         AGO   .LOADCOM                                         GP03287\n.LOAD@   MACPARM R15,@FORMATS,OP=L   LOAD CONVERSION ROUTINE ADDRESS\n.LOADCOM ANOP  ,                                                GP03287\n         BASR  R14,R15       CALL FORMATTING SERVICES\n         MEXIT ,\n.DCONLY  AIF   (&N LT 2).DCNUML                                 GP04118\n&LIN     SETC  '&VALUE(2)'                                      GP04118\n         AGO   .QUOUT                                           GP04118\n.DCNUML  ANOP  ,                                                GP04118\n&LIN     SETC  '&L'.'&VALUE'                                    GP04118\n.QUOUT   AIF   ('&OLN' EQ '').QUODEF                            GP04118\n&LON     SETC  '&OLN'                                           GP04118\n         AGO   .DCDC                                            GP04118\n.QUODEF  ANOP  ,                                                GP04118\n&LON     SETC  '0'                                              GP04118\n.*                                                              GP04118\n.DCDC    MACPARM AL1(&LON,&LIN,&EPYT,&OPTS),MODE=ONE,OP=DC      GP04118\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#FOOT": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x05\\x05\\x7f\\x01\\x05\\x05\\x7f\"W\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2005-02-26T00:00:00", "modifydate": "2005-02-26T22:57:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      FOOT  &VAL,&LEN,&ID=\n&NM      STM   R14,R1,12(R13)     SAVE A LOT\n         L     R14,EXW@RENT+8     NEW WORK AREA #2\n         L     R15,0(,R14)        GET CURRENT OFFSET\n         LA    R1,4(R15,R14)      NEW INSERTION ADDRESS\n         AIF   ('&ID' EQ '').NOID\n         MVC   0(8,R1),=CL8'&ID '\n         LA    R15,8(,R15)        INCREMENT\n         LA    R1,8(,R1)\n.NOID    MVC   0(&LEN,R1),&VAL    PRESERVE TEXT\n         LA    R15,&LEN.(,R15)\n         ST    R15,0(,R14)\n         LM    R14,R1,12(R13)     RESTORE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#OPMSG": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x996?\\x01\\x121\\x9f\\x18I\\x00\\xb8\\x00*\\x00\\x06\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-12-29T00:00:00", "modifydate": "2012-11-14T18:49:00", "lines": 184, "newlines": 42, "modlines": 6, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #OPMSG &ADDR,&LEN,&TYPE=MSG,  WRITE A MESSAGE (WTO)           *\n               &LIST=,&PARM=CALLPARM   MESSAGE WITH TEXT INSERTION\n         GBLC  &MACPLAB\n         LCLA  &K,&I,&J,&N,&M,&O\n         LCLB  &TF\n         LCLC  &RA,&RL,&L    DEFINE ADDRESS AND LENGTH REGISTERS\n         LCLC  &TEXT         USER SPECIFIED ADDRESS             GP12319\n&RA      SETC  'R1'          SET NORMAL USE\n&RL      SETC  'R0'\n&L       SETC  'L'''\n&TEXT    SETC  '&ADDR'                                          GP12319\n&MACPLAB SETC  '&NM'         SET NAME FIELD\n&N       SETA  N'&LIST\n&TF      SETB  ('&TYPE' EQ 'MSG')                               GP12319\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  #OPMSG GENERATES A CALL TO THE WTO SUBROUTINE SUBWTO              *\n.*                                                                    *\n.*  TEXT  SPECIFIES TEXT DATA NOT EXCEEDING 100 BYTES IN LENGTH,      *\n.*    A) AS A QUOTED STRING                                           *\n.*    B) ADDRESS OF A BCON VARIABLE AL1(LEN-1),C(LEN)'TEXT'           *\n.*    C) ADDRESS OF A HCON VARIALBE AL2(LEN),C(LEN)'TEXT'             *\n.*    D) ADDRESS OF A VCON VARIALBE AL2(LEN+4,0),C(LEN)'TEXT'         *\n.*    E) ADDRESS OF TEXT STRING TERMINATED BY A NULL (X'00')          *\n.*    F) ADDRESS OF A TEXT STRING; WITH AN EXPLICIT LENGTH            *\n.*         SPECIFIED AS THE NEXT PARAMETER                            *\n.*                                                                    *\n.*  TYPE=INIT OR TYPE=NAME DEFINES THE TEXT (UP TO 32 BYTES)          *\n.*    AS A PREFIX TO SUBSEQUENT MESSAGES                              *\n.*                                                                    *\n.*  TYPE=END (OR A TEXT SPECIFICATION OF *END) REQUESTS SUBWTO        *\n.*    TO CLEAN UP AND RELEASE STORAGE                                 *\n.*                                                                    *\n.*  TYPE=MSG (DEFAULT) SPECIFIES A MESSAGE TO BE WRITTEN TO THE       *\n.*    OPERATOR                                                        *\n.*                                                                    *\n.*  TYPE=MSG WITH LIST=(A,L,A,L...) SPECIFIES A MESSAGE WITH TEXT     *\n.*    INSERTION (THE FIRST OPERAND IS PARSED FOR | SEPARATORS THAT    *\n.*    ARE REPLACED BY THE CORRESPONDING A,L VARIABLES.                *\n.*    A) THE FIRST OPERAND IS IN THE LIST, UNLESS EXPLICIT TEXT       *\n.*       IS SPECIFIED AS THE FIRST POSITIONAL PARAMETER               *\n.*    B) \"L\" MUST BE A SELF-DEFINING OR ABSOLUTE TERM < 256  OR       *\n.*       \"L\" MAY BE THE ADDRESS OF A #FMT MF=L MACRO DEFINING THE     *\n.*       INPUT DATA TYPE, LEN, AND CONVERSION/FORMATTING OPTIONS.     *\n.*                                                                    *\n.*  PARM=CALLPARM DEFINES A REMOTE PARAMETER LIST TO BE USED (NEEDS   *\n.*    TWO WORDS PER TEXT AND INSERTION VARIABLE                       *\n.*                                                                    *\n.*  TYPE=TEXT WITH LIST= BYPASSES THE WTO, BUT RETURNS THE MESSAGE    *\n.*    ADDRESS IN R1: H'LEN',CL(LEN)'TEXT'                             *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         AIF   ('&TEXT' EQ '*END').CLOSE\n         AIF   ('&TYPE' EQ 'CLOSE' OR '&TYPE' EQ 'END').CLOSE\n         AIF   ('&TYPE' NE 'INIT' AND '&TYPE' NE 'NAME').DOMSG\n&RA      SETC  'R0'          EXCHANGE ASSIGNMENTS\n&RL      SETC  'R1'\n         AIF   (T'&ADDR NE 'O').DOMSG                           GP12319\n         MACPARM &RL,2+&TF   SIGNAL NO TEXT PARAMETER           GP12319\n         MACPARM &RA,257     MUST BE NON-ZERO; > 255            GP12319\n         AGO   .COMBAS                                          GP12319\n.DOMSG   AIF   (&N EQ 0).GOMSG\n.*--------------------------------------------------------------------*\n.*  PROCESS A MESSAGE LIST (TEXT/LEN OPTIONAL IF N'&LIST>2)           *\n.*--------------------------------------------------------------------*\n&M       SETA    1           OFFSET IN LIST=\n         MACPARM R1,&PARM    LOAD PARAMETER LIST\n         MACPARM R1,=X'80000000',OP=O  MAKE LIST FLAG\n         MACPARM R0,&TF      SET FLAG (0-WTO; 1-NO WTO,RETURN MSG ADD)\n.*--------------------------------------------------------------------*\n.*  CASE 1A - EXPLICIT TEXT/LEN SUPPLIED - STASH FIRST                *\n.*--------------------------------------------------------------------*\n         AIF   ('&TEXT' EQ '').LSTADD\n         AIF   ('&TEXT'(1,1) EQ '''').LSTRNG\n         MACPARM R15,&TEXT,OP=LA LOAD ADDRESS OF NAME OR REGISTER\n         MACPARM R15,0(,R1),OP=ST STORE ADDRESS IN CALL LIST\n         MACPARM R15,&LEN,NULL=0  SET EXPLICIT LENGTH OR 0\n         MACPARM R15,4(,R1),OP=ST STORE LENGTH IN CALL LIST\n&O       SETA   &O+8         NEXT AVAILABLE LIST OFFSET\n         AGO   .LSTADD\n.*--------------------------------------------------------------------*\n.*  CASE 1B - EXPLICIT QUOTED TEXT SUPPLIED                           *\n.*--------------------------------------------------------------------*\n.LSTRNG  ANOP  ,\n&K       SETA  K'&TEXT-2     LENGTH OF QUOTED STRING (EXC AMPSND/QOT)\n&I       SETA  2             FIRST BYTE TO EXAMINE\n&J       SETA  &K            LAST BYTE (PAIR) TO EXAMINE\n.LSTLOOP AIF   (&I GT &J).LSTEXP\n         AIF   ('&TEXT'(&I,2) EQ '''''' OR '&TEXT'(&I,2) EQ '&&').LSTPR\n&I       SETA  &I+1          TRY AGAIN\n         AGO   .LSTLOOP\n.LSTPR   ANOP  ,\n&I       SETA  &I+2          SKIP THE PAIR\n&K       SETA  &K-1          AND CORRECT THE LENGTH\n         AGO   .LSTLOOP\n.LSTEXP  LA    R15,=C&TEXT   LOAD THE STRING ADDRESS\n         MACPARM R15,0(,R1),OP=ST STORE ADDRESS IN CALL LIST\n         MACPARM R15,&K,OP=LA LOAD THE LENGTH OF THE STRING\n         MACPARM R15,4(,R1),OP=ST STORE LENGTH IN CALL LIST\n&O       SETA   &O+8         NEXT AVAILABLE LIST OFFSET\n.*--------------------------------------------------------------------*\n.*  CASE 2  - LOOP THROUGH SUPPLIED ADDRESS/LEN PAIRS AND STASH       *\n.*--------------------------------------------------------------------*\n.LSTADD  AIF   (&M GT &N).LSTEND  DONE - SET VL BIT IN LIST\n&RA      SETC  '&LIST(&M)'\n&RL      SETC  '&LIST(&M+1)'\n         AIF   ('&RA' NE '').HAVERA\n&RA      SETC  '0'           NULL ADDRESS - NO SUBSTITUTION\n.HAVERA  AIF   ('&RL' NE '').HAVERL\n&RL      SETC  '0'           NULL ADDRESS - NO SUBSTITUTION\n.*--------------------------------------------------------------------*\n.*  CASE 2A - EXPLICIT TEXT/LEN SUPPLIED                              *\n.*--------------------------------------------------------------------*\n.HAVERL  AIF   ('&RA'(1,1) EQ '''').ENTRNG\n         MACPARM R15,&RA,OP=LA LOAD ADDRESS OF NAME OR REGISTER\n         MACPARM R15,&O.(,R1),OP=ST STORE ADDRESS IN CALL LIST\n         MACPARM R15,&RL,NULL=0   SET EXPLICIT LENGTH OR 0\n         MACPARM R15,&O+4(,R1),OP=ST STORE LENGTH IN CALL LIST\n&O       SETA   &O+8         NEXT AVAILABLE LIST OFFSET\n&M       SETA   &M+2\n         AGO   .LSTADD\n.*--------------------------------------------------------------------*\n.*  CASE 2B - EXPLICIT QUOTED TEXT SUPPLIED                           *\n.*--------------------------------------------------------------------*\n.ENTRNG  ANOP  ,\n&K       SETA  K'&RA-2       LENGTH OF QUOTED STRING (EXC AMPSND/QOT)\n&I       SETA  2             FIRST BYTE TO EXAMINE\n&J       SETA  &K            LAST BYTE (PAIR) TO EXAMINE\n.ENTLOOP AIF   (&I GT &J).ENTEXP\n         AIF   ('&RA'(&I,2) EQ '''''' OR '&RA'(&I,2) EQ '&&').ENDPR\n&I       SETA  &I+1          TRY AGAIN\n         AGO   .ENTLOOP\n.ENDPR   ANOP  ,\n&I       SETA  &I+2          SKIP THE PAIR\n&K       SETA  &K-1          AND CORRECT THE LENGTH\n         AGO   .ENTLOOP\n.ENTEXP  LA    R15,=C&RA     LOAD THE STRING ADDRESS\n         MACPARM R15,&O.(,R1),OP=ST STORE ADDRESS IN CALL LIST\n         MACPARM R15,&K,OP=LA LOAD THE LENGTH OF THE STRING\n         MACPARM R15,&O+4(,R1),OP=ST STORE LENGTH IN CALL LIST\n&O       SETA   &O+8         NEXT AVAILABLE LIST OFFSET\n&M       SETA   &M+2\n         AGO   .LSTADD\n.LSTEND  ANOP  ,\n&O       SETA  &O-4          POSITION TO LAST WORD IN LIST\n         MACPARM &O.(R1),X'80',OP=OI\n         AGO   .COMBAS  DONE - INVOKE SUBWTO\n.*--------------------------------------------------------------------*\n.*  PROCESS A NORMAL MESSAGE                                          *\n.*--------------------------------------------------------------------*\n.GOMSG   AIF   ('&TEXT'(1,1) EQ '''').MSGSTR\n         MACPARM &RA,&TEXT,OP=LA LOAD ADDRESS OF NAME OR REGISTER\n         AIF   ('&LEN' EQ '').NOLEN\n         MACPARM &RL,&LEN    LOAD TEXT LENGTH\n         AGO   .COMBAS\n.NOLEN   MACPARM &RL,&RL,OP=SLR,OPR=SLR,MODE=EVEN  SIGNAL INIT CALL\n         AGO   .COMBAS\n.MSGSTR  ANOP  ,\n&K       SETA  K'&TEXT-2     LENGTH OF QUOTED STRING (EXC AMPSND/QOT)\n&I       SETA  2             FIRST BYTE TO EXAMINE\n&J       SETA  &K            LAST BYTE (PAIR) TO EXAMINE\n.MSGLOOP AIF   (&I GT &J).MSGEXP\n         AIF   ('&TEXT'(&I,2) EQ '''''' OR '&TEXT'(&I,2) EQ '&&').MSGPR\n&I       SETA  &I+1          TRY AGAIN\n         AGO   .MSGLOOP\n.MSGPR   ANOP  ,\n&I       SETA  &I+2          SKIP THE PAIR\n&K       SETA  &K-1          AND CORRECT THE LENGTH\n         AGO   .MSGLOOP\n.*--------------------------------------------------------------------*\n.*  SET R0=R1=0 TO SIGNAL TERMINATION                                 *\n.*--------------------------------------------------------------------*\n.CLOSE   MACPARM R0,0        CLEAR R0\n         MACPARM R1,0        AND R1\n         AGO   .COMBAS       TO SIGNAL END\n.*--------------------------------------------------------------------*\n.*  LOAD R0 AND R1 APPROPRIATELY; CALL SUBWTO FOR SERVICE             *\n.*--------------------------------------------------------------------*\n.MSGEXP  MACPARM &RL,&K,OP=LA LOAD THE LENGTH OF THE STRING\n         LA    &RA,=C&TEXT   LOAD THE STRING ADDRESS\n.COMBAS  MACPARM R15,=V(SUBWTO),OP=L\n         BASR  R14,R15       INVOKE IT\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#PRT": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x04\\x00\\x00\\x01\\x06(\\x9f\\x01\\t'_!\\x07\\x00e\\x00[\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.04", "flags": 0, "createdate": "2006-10-16T00:00:00", "modifydate": "2009-10-02T21:07:00", "lines": 101, "newlines": 91, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #PRT  &AD,&LN,&TYPE=VCON,&DEV=0,&CC=YES\n         GBLB  &ZZ#PRTF\n         GBLC  &MACPLAB,&ZZ#PRTN(10),&ZZ#PRTI(10)\n.**********************************************************************\n.*                                                                    *\n.*   #PRT GENERATES CALLS TO SUBROUTINE SUBPRT FOR PRINTING ON UP TO  *\n.*   EIGHT OPEN PRINT STREAMS (DEV=1 OR DEV=(3,7)...                  *\n.*     MULTIPLE PRINTERS ARE VALID EXCEPT WITH TYPE=OPEN              *\n.*   PRINT DDs ARE ASSOCIATED WITH #PRTWRK MACROS                     *\n.*                                                                    *\n.**********************************************************************\n         LCLA  &I,&J,&K,&N\n         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7\n         LCLC  &PT,&PD,&OP1,&L,&M,&DV,&FN\n&MACPLAB SETC  '&NM'\n&L       SETC  'L'''\n&M       SETC  '&SYSNDX'\n&DV      SETC  '&DEV'\n&OP1     SETC  '&AD'\n&FN      SETC  '0'\n         AIF   ('&CC' NE 'NO').YESCC\n&FN      SETC  '128'\n.YESCC   AIF   (T'&DEV EQ 'N').DEVASIS\n         AIF   (N'&DEV EQ 1).DEVASIS\n.DEVLOOP AIF   (&J GE N'&DEV).DEVDONE\n&J       SETA  &J+1\n         AIF   ('&DEV(&J)' GE '1' OR '&DEV(&J)' LE '8').DEVOK\n         MNOTE 8,'#PRT: DEV=&DEV(&J) UNACCEPTABLE'\n.DEVOK   ANOP  ,\n&B0      SETB  (&B0 OR ('&DEV(&J)' EQ '8'))\n&B1      SETB  (&B1 OR ('&DEV(&J)' EQ '7'))\n&B2      SETB  (&B2 OR ('&DEV(&J)' EQ '6'))\n&B3      SETB  (&B3 OR ('&DEV(&J)' EQ '5'))\n&B4      SETB  (&B4 OR ('&DEV(&J)' EQ '4'))\n&B5      SETB  (&B5 OR ('&DEV(&J)' EQ '3'))\n&B6      SETB  (&B6 OR ('&DEV(&J)' EQ '2'))\n&B7      SETB  (&B7 OR ('&DEV(&J)' EQ '1'))\n         AGO   .DEVLOOP\n.*\n.DEVDONE ANOP  ,\n&DV      SETC  '128*&B0+64*&B1+32*&B2+16*&B3+8*&B4+4*&B5+2*&B6+&B7'\n.DEVASIS AIF   (&ZZ#PRTF).NOT1ST\n&ZZ#PRTN(01) SETC 'VCON'\n&ZZ#PRTI(01) SETC '0'\n&ZZ#PRTN(02) SETC 'SPACE'\n&ZZ#PRTI(02) SETC '1'\n&ZZ#PRTN(03) SETC 'SKIP'\n&ZZ#PRTI(03) SETC '1'\n&ZZ#PRTN(04) SETC 'KEEP'\n&ZZ#PRTI(04) SETC '2'\n&ZZ#PRTN(05) SETC 'RESERVE'\n&ZZ#PRTI(05) SETC '2'\n&ZZ#PRTN(06) SETC 'OPEN'\n&ZZ#PRTI(06) SETC '3'\n&ZZ#PRTN(07) SETC 'CLOSE'\n&ZZ#PRTI(07) SETC '4'\n&ZZ#PRTN(08) SETC 'TEXT'\n&ZZ#PRTI(08) SETC '5'\n&ZZ#PRTN(09) SETC 'PRINTF'\n&ZZ#PRTI(09) SETC '5'\n&ZZ#PRTN(10) SETC 'BCON'\n&ZZ#PRTI(10) SETC '6'\n&ZZ#PRTF SETB  1             FIRST TIME STUFF DONE\n.NOT1ST  AIF   (T'&AD NE 'O').HAVEAD\n         AIF   ('&TYPE' EQ 'CLOSE').HAVEAD\n         MNOTE 8,'#PRT: FIRST OPERAND REQUIRED (ADDR/TEXT/PRTWRK)'\n         MEXIT ,\n.HAVEAD  AIF   (&I GE 10).BADTYPE\n&I       SETA  &I+1\n         AIF   ('&TYPE' NE '&ZZ#PRTN(&I)').HAVEAD\n&PT      SETC  '&ZZ#PRTI(&I)'\n         AIF   ('&TYPE' EQ 'CLOSE').HAVTYPE\n         AIF   ('&AD'(1,1) NE '''').HAVTYPE\n         AIF   ('&PT' EQ '0' OR '&PT' EQ '5' OR '&PT' EQ '6').DEFTEXT\n         MNOTE 4,'#PRT: TYPE=&TYPE INVALID WITH LITERAL STRING'\n&PT      SETC  '6'           DO LITERAL AS BCON\n.BADTYPE AIF   ('&AD'(1,1) EQ '''').DEFTEXT\n         MNOTE 8,'#PRT: TYPE=&TYPE INVALID'\n         MEXIT ,\n.*\n.DEFTEXT ANOP  ,\n&PT      SETC  '6'           DO LITERAL AS BCON\n         MACPARM ZZZ&M.C,OP=B,MODE=ONE\nZZZ&M.L  BCON  &AD           DEFINE LITERAL WITH LENGTH\n&MACPLAB SETC  'ZZZ'.'&M'.'C'\n&OP1     SETC  'ZZZ'.'&M'.'L'\n.*\n.HAVTYPE AIF   ('&PT' NE '5').NOTLEN\n         MACPARM R0,&LN,NULL=&L&AD     GET TEXT LENGTH\n         MACPARM R0,16,OP=SLL          LEFT JUSTIFY\n         MACPARM R0,3,=AL1(&PT,&DV),OP=ICM,MODE=THREE  SET FUNC/DEV\n         AGO   .SETADD\n.*\n.NOTLEN  MACPARM R0,=AL1(0,0,&PT,&DV),OP=L\n.SETADD  AIF   ('&FN' EQ '' OR '&FN' EQ '0').SETFUN             GP09275\n         MACPARM R0,8,=AL1(&FN),OP=ICM,MODE=THREE  SET FUNCTION CODE\n.SETFUN  MACPARM R1,&OP1,NULL=SKIP     GET STORAGE ADDRESS\n         MACPARM R15,=V(SUBPRT),OP=L    GET SUBROUTINE ADDRESS\n         MACPARM R14,R15,OP=BALR,OPR=BALR  CALL SUBROUTINE\n.MEND    MEND ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PRTWRK": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x06(\\x8f\\x01\\x06(\\x8f#E\\x00.\\x00.\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2006-10-15T00:00:00", "modifydate": "2006-10-15T23:45:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM    #PRTWRK  &DDNAME=SYSPRINT,&MAXLPP=60,&PFX=PR1,&@TITLE=@HEADERS, *\n               &FLAGS=0,&WIDTH=132,&REPCH=0\n.*  This macro defines work space for one print file. The definition\n.*     is used with the #PRT macro and the SUBPRT subroutine.\n.*  A unique DDNAME is required, and a unique prefix. Only eight\n.*   concurrent print files are supported, and it is suggested to use\n.*   prefixes of PR1 to PR8 for convenience.  The name of this work\n.*   area (invocation name field) must be placed into the @PRTWORK\n.*   list at this printer number's offset using a #PRT TYPE=OPEN call.\n.*  Title specifies the name of a variable length list of words. The\n.*   first word specifies the address where the 4 byte page number\n.*   will be updated; the next words the first, second, etc. header\n.*   lines (first of these must have a page eject); the list is\n.*   terminated by a word of zeroes.\n.*  MAXLPP should be set to the desired lines per page, but not less\n.*   than 15 and not more than 200\n.*  FLAGS should be set (with the appropriate prefix):\n.*     =pr1FGPUN   punch file (no translation) - not tested\n.*     =pr1FGTRN   inhibit translation of unprintable characters\n.*     =pr1FGPRT   MCC ION printers only - use portrait mode\n.*  WIDTH=132 - provided for future expansion (ibm 3800 = 204)\n.*  REPCH= self-defining character - sets the replacement character\n.*     for unprintable characters for all open files (only one table\n.*     is defined for all files. defaults to reverse slash \\\n&NM      DS    0D            WORK AREA FOR PRINTER &PFX (PRT#)\n&PFX.@HEAD DC  A(&@TITLE)    ADDRESS OF TITLE LIST\n         DC    3A(0)           RESERVED FOR FUTURE EXPANSION\n         SPACE 1\n&PFX.DCB DCB   DDNAME=&DDNAME,DSORG=PS,MACRF=PM EXLST=PRTEXLST\n&PFX.MAXTX DC  Y(&WIDTH)     MAXIMUM TEXT WIDTH\n&PFX.MAXLN DC  Y(&MAXLPP)    MAXIMUM LINES PER PAGE\n&PFX.CURLN DC  Y(1+&MAXLPP)  CURRENT LINE POSITION\n&PFX.PAGE  DC  Y(0)          PAGE NUMBER\n&PFX.FORCC DC  X'00'         FORCED CC OVERRIDE ON NEXT PRINT\n&PFX.FLAGS DC  AL1(&FLAGS)   PROCESSING FLAGS\n&PFX.FGPUN EQU X'80'           PUNCH FILE; NO CC\n&PFX.FGTRN EQU X'40'           PRINT; INHIBIT TRANSLATE\n&PFX.FGPRT EQU X'20'  IRS MCC SPECIFIC - SET ION PRT PORTRAIT MODE\n&PFX.REPCH DC  AL1(&REPCH)   UNPRINTABLE CHARACTER REPLACEMENT\n&PFX.RDW   DC  Y(5,0)        RECORD DESCRIPTOR FOR RECFM=V\n&PFX.CC    DC  X'8B'         CARRIAGE CONTROL\n.*FX.TRL   DC  C'1'          3800 OPTCD=J TABLE REFERENCE CHARACTER\n&PFX.TEXT  DC  CL(&WIDTH)' ' DATA RECORD\n         DC    3X'00'          RESERVED\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#RDR": {"ttr": 1550, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x06)\\x1f\\x01\\x06)\\x1f#X\\x00g\\x02\\xf4\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2006-10-18T00:00:00", "modifydate": "2006-10-18T23:58:00", "lines": 103, "newlines": 756, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #RDR  &AD,&TYPE=GET,&DEV=0,&OPT=\n         GBLB  &ZZ#RDRF\n         GBLC  &MACPLAB,&ZZ#RDRN(10),&ZZ#RDRI(10)\n.**********************************************************************\n.*                                                                    *\n.*   #RDR GENERATES CALLS TO SUBROUTINE SUBRDR FOR READING UP TO      *\n.*   EIGHT OPEN INPUT STREAMS (DEV=1 OR DEV=(3,7)...                  *\n.*                                                                    *\n.*   INPUT DDs ARE ASSOCIATED WITH #RDRWRK MACROS                     *\n.*                                                                    *\n.**********************************************************************\n         LCLA  &I,&J,&K,&N\n         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7\n         LCLB  &F0,&F1,&F2,&F3,&F4,&F5,&F6,&F7\n         LCLC  &PT,&PD,&M,&DV,&FN,&C\n&MACPLAB SETC  '&NM'\n&M       SETC  '&SYSNDX'\n&DV      SETC  '&DEV'\n&FN      SETC  '0'\n         AIF   (T'&DEV NE 'O').DEVNUMT\n         AIF   ('&TYPE' NE 'CLOSE').DEVNUMT\n&DV      SETC  '255'         CLOSE ALL\n         AGO   .DEVASIS\n.DEVNUMT AIF   (T'&DEV EQ 'N').DEVASIS\n         AIF   (N'&DEV EQ 1).DEVASIS\n&N       SETA  0\n.DEVLOOP AIF   (&J GE N'&DEV).DEVDONE\n&J       SETA  &J+1\n&C       SETC  '&DEV(&J)'\n         AIF   ('&C' EQ '').DEVLOOP\n         AIF   ('&C' GE '1' OR '&C' LE '8').DEVOK\n         MNOTE 8,'#RDR: DEV=&C UNACCEPTABLE'\n         AGO   .DEVLOOP\n.DEVOK   ANOP  ,\n&N       SETA  &N+1\n&B0      SETB  (&B0 OR ('&C' EQ '8'))\n&B1      SETB  (&B1 OR ('&C' EQ '7'))\n&B2      SETB  (&B2 OR ('&C' EQ '6'))\n&B3      SETB  (&B3 OR ('&C' EQ '5'))\n&B4      SETB  (&B4 OR ('&C' EQ '4'))\n&B5      SETB  (&B5 OR ('&C' EQ '3'))\n&B6      SETB  (&B6 OR ('&C' EQ '2'))\n&B7      SETB  (&B7 OR ('&C' EQ '1'))\n         AGO   .DEVLOOP\n.*\n.DEVDONE AIF   (&N EQ (&B0+&B1+&B2+&B3+&B4+&B5+&B6+&B7)).DOVDON\n         MNOTE 4,'#RDR: ERROR IN DEV= PARAMETER'\n.DOVDON  ANOP  ,\n&N       SETA  (128*&B0+64*&B1+32*&B2+16*&B3+8*&B4+4*&B5+2*&B6+&B7)\n&DV      SETC  '&N'\n.DEVASIS AIF   (&ZZ#RDRF).NOT1ST\n&ZZ#RDRN(01) SETC 'GET'\n&ZZ#RDRI(01) SETC '0'\n&ZZ#RDRN(02) SETC 'READ'\n&ZZ#RDRI(02) SETC '0'\n&ZZ#RDRN(03) SETC 'KEEP'\n&ZZ#RDRI(03) SETC '1'\n&ZZ#RDRN(04) SETC 'OPEN'\n&ZZ#RDRI(04) SETC '2'\n&ZZ#RDRN(05) SETC 'CLOSE'\n&ZZ#RDRI(05) SETC '3'\n&ZZ#RDRN(06) SETC 'REREAD'\n&ZZ#RDRI(06) SETC '1'\n&ZZ#RDRF SETB  1             FIRST TIME STUFF DONE\n.NOT1ST  AIF   (T'&OPT EQ 'O').DONEFUN\n&J       SETA  0\n&N       SETA  0\n.LOOPFUN AIF   (&J GE N'&OPT).SETFUN\n&J       SETA  &J+1\n&C       SETC  '&OPT(&J)'\n         AIF   ('&C' EQ '').LOOPFUN\n&N       SETA  &N+1\n&F1      SETB  (&F0 OR ('&C' EQ 'DUMP'))\n&F0      SETB  (&F0 OR ('&C' EQ 'NOCC'))\n&F1      SETB  (&F0 OR ('&C' EQ 'ABEND'))\n&F7      SETB  (&F7 OR ('&C' EQ 'NOWTO'))\n         AGO   .LOOPFUN\n.SETFUN  AIF   (&N EQ (&F0+&F1+&F2+&F3+&F4+&F5+&F6+&F7)).SATFUN\n         MNOTE 4,'#RDR: ERROR IN OPT= PARAMETER'\n.SATFUN  ANOP  ,\n&N       SETA  (128*&F0+64*&F1+32*&F2+16*&F3+8*&F4+4*&F5+2*&F6+&F7)\n&FN      SETC  '&N'\n.DONEFUN AIF   (T'&AD NE 'O').HAVEAD\n         AIF   ('&TYPE' NE 'OPEN').HAVEAD\n         MNOTE 8,'#RDR: FIRST OPERAND REQUIRED (ADDR/TEXT/RDRWRK)'\n         MEXIT ,\n.HAVEAD  AIF   (&I GE 6).BADTYPE\n&I       SETA  &I+1\n         AIF   ('&TYPE' NE '&ZZ#RDRN(&I)').HAVEAD\n&PT      SETC  '&ZZ#RDRI(&I)'\n         AGO   .HAVTYPE\n.BADTYPE MNOTE 8,'#RDR: TYPE=&TYPE INVALID'\n         MEXIT ,\n.*\n.HAVTYPE AIF   ('&FN' NE '0').HAVTYPF\n         MACPARM R0,256*&PT+&DV\n         AGO   .HAVTYPA\n.HAVTYPF MACPARM R0,=AL1(&FN,0,&PT,&DV),OP=L\n.HAVTYPA MACPARM R1,&AD,NULL=SKIP     GET STORAGE ADDRESS\n         MACPARM R15,=V(SUBRDR),OP=L    GET SUBROUTINE ADDRESS\n         MACPARM R14,R15,OP=BALR,OPR=BALR  CALL SUBROUTINE\n.MEND    MEND ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#RDRWRK": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x06)\\x0f\\x01\\x06)\\x0f\\x15\\x00\\x00$\\x00.\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2006-10-17T00:00:00", "modifydate": "2006-10-17T15:00:00", "lines": 36, "newlines": 46, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #RDRWRK  &DDNAME=SYSIN,&PFX=RD1,&FLAGS=0,&EODAD=0,            *\n               &WIDTH=0,&FILL=C' '\n.*  This macro defines work space for one input file. The definition\n.*     is used with the #RDR macro and the SUBRDR subroutine.\n.*\n.*  A unique DDNAME is required, and a unique prefix. Only eight\n.*   concurrent input files are supported, and it is suggested to use\n.*   prefixes of RD1 to RD8 for convenience.  The name of this work\n.*   area (invocation name field) must be placed into the @RDRWORK\n.*   list at this file number's offset using a #RDR TYPE=OPEN call.\n.*\n.*  FLAGS should be set (with the appropriate prefix):\n.*     =pr1xxxxx - none as yet\n.*  WIDTH=0    requests locate mode. TYPE=GET will return the address\n.*              (R1) and length (R0) of the input record.\n.*  WIDTH>0    will truncate/expand the record in rd1REC DEFInED IN\n.*              this macRo.\n.*\n.*  FILL=   self-defining character - sets the fill character for short\n.*     records copied in move mode (WIDTH>0)\n.*\n&NM      DS    0D            WORK AREA FOR PRINTER &PFX (PRT#)\n&PFX.EODAD DC  A(&EODAD)     OPTIONAL END FILE BRANCH ADDRESS\n&PFX.REC@  DC  A(0)          ADDRESS OF INPUT RECORD\n&PFX.REC#  DC  F'0'          LENGTH OF INPUT RECORD\n         DC    3A(0)           RESERVED FOR FUTURE EXPANSION\n         SPACE 1\n&PFX.DCB DCB   DDNAME=&DDNAME,DSORG=PS,MACRF=GL RDREXLST RDREODAD\n&PFX.WIDTH DC  Y(&WIDTH)     MAXIMUM TEXT WIDTH\n&PFX.FLAGS DC  AL1(&FLAGS)   PROCESSING FLAGS\n&PFX.FILL  DC  AL1(&FILL)    PADDING CHARACTER\n&PFX.RDW   DC  Y(5,0)        RECORD DESCRIPTOR FOR RECFM=V\n&PFX.TEXT  DC  CL(1+&WIDTH)' ' DATA RECORD\n         DC    4X'00'          RESERVED\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#SORT": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x080?\\x01\\x080?\\x16\\x02\\x00\\x9f\\x00\\x9f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2008-10-29T00:00:00", "modifydate": "2008-10-29T16:02:00", "lines": 159, "newlines": 159, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NAME    #SORT &FIELDS=(1,1,CH,A),&FIRST=,&LAST=,&LENGTH=\n         MNOTE *,'       #SORT     VERSION 001 04/29/76  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #SORT                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODING TO SORT A TABLE IN ASCENDING OR     *\n.*                DESCENDING ORDER BASED ON A KEY FIELD IN EACH       *\n.*                ENTRY.                                              *\n.*                                                                    *\n.* DESCRIPTION    A BUBBLE SORT IS PERFORMED.  THE KEYS               *\n.*                OF CONSECUTIVE ITEMS ARE COMPARED.  THE ITEMS       *\n.*                ARE SWITCHED IF NECESSARY.  PROCESSING PROCEEDS     *\n.*                TO THE NEXT PAIR OF ENTRIES.  AT THE END OF ONE     *\n.*                PASS, AT LEAST THE HIGHEST KEY IS IN THE PROPER     *\n.*                POSITION.  THE LIST IS REDUCED TO A SUBLIST         *\n.*                FROM THE FIRST ENTRY TO THE LAST ENTRY WHICH        *\n.*                WAS SWITCHED AND THE SUBLIST IS THEN PROCESSED      *\n.*                AS WAS THE ORIGINAL LIST.  THIS CONTINUES UNTIL     *\n.*                THE ENTIRE LIST HAS BEEN SORTED.  IF AT ANY POINT,  *\n.*                PROCESSING THE LIST RESULTS IN NO ENTRIES BEING     *\n.*                SWITCHED, THE LIST IS IN ORDER AND PROCESSING       *\n.*                IS TERMINATED.                                      *\n.*                                                                    *\n.*                REGISTERS 0, 1, 14, AND 15 ARE USED BY THE          *\n.*                SORT AND MUST NOT BE SPECIFIED AS FIRST OR          *\n.*                LAST VALUES.                                        *\n.*                                                                    *\n.* SYNTAX         NAME     #SORT FIELDS=(KEYPOS,KEYLEN,FMT,ORDER),    *\n.*                               FIRST=SYMBOL1,                       *\n.*                               LAST=SYMBOL2,                        *\n.*                               LENGTH=NUM                           *\n.*                                                                    *\n.*                NAME   - SPECIFIES THE SYMBOLIC TAG TO BE           *\n.*                         ASSIGNED TO THE FIRST INSTRUCTION          *\n.*                         GENERATED.  THIS OPERAND IS OPTIONAL.      *\n.*                                                                    *\n.*                FIELDS - SPECIFIES THE SORT PARAMETERS.             *\n.*                         KEYPOS - SPECIFIES THE RELATIVE KEY        *\n.*                                  POSITION IN THE RECORD.           *\n.*                         KEYLEN - SPECIFIES THE LENGTH OF THE KEY.  *\n.*                         FMT    - SPECIFIES THE FORMAT OF THE       *\n.*                                  DATA TO BE SORTED.  THE ONLY      *\n.*                                  VALID FORMAT IS CHARACTER (CH).   *\n.*                         ORDER  - SPECIFIES IF THE LIST IS TO BE    *\n.*                                  SORTED IN ASCENDING ORDER (A),    *\n.*                                  OR DESCENDING ORDER (D).  THE     *\n.*                                  DEFAULT IS A.                     *\n.*                                                                    *\n.*                FIRST  - SPECIFIES THE SYMBOLIC NAME OF THE FIRST   *\n.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *\n.*                         CONTAINS THE ADDRESS OF THE FIRST ENTRY.   *\n.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *\n.*                         BE ADDRESSABLE.  IF A REGISTER IS          *\n.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *\n.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *\n.*                                                                    *\n.*                LAST   - SPECIFIES THE SYMBOLIC NAME OF THE LAST    *\n.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *\n.*                         CONTAINS THE ADDRESS OF THE LAST ENTRY.    *\n.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *\n.*                         BE ADDRESSABLE.  IF A REGISTER IS          *\n.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *\n.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *\n.*                                                                    *\n.*                LENGTH - SPECIFIES THE LENGTH OF THE ENTRIES IN     *\n.*                         THE TABLE.  THIS PARAMETER IS REQUIRED.    *\n.*                                                                    *\n.*       MINOR CHANGES TO ALLOW SYMBOLIC VALUES FOR ALL FIELDS  G.P.  *\n.*                                                                    *\n.* ERRORS         INVALID NUMBER OF ENTRIES IN FIELDS PARAMETER - 8   *\n.*                FORMAT TYPE NOT SUPPORTED                     - 8   *\n.*                FIRST VALUE NOT SPECIFIED                     - 8   *\n.*                LAST  VALUE NOT SPECIFIED                     - 8   *\n.*                LENGTH VALUE NOT SPECIFIED                    - 8   *\n.*                                                                    *\n.* EXAMPLE        SORT A TABLE OF ENTRIES WHERE THE FIRST 8 BYTES     *\n.*                ARE THE KEYS.  THE LENGTH OF EACH ENTRY IS 50       *\n.*                BYTES.                                              *\n.*                                                                    *\n.*                         #SORT FIELDS=(1,8,CH,A),LENGTH=50,         *\n.*                               FIRST=BEGIN,LAST=END                 *\n.*                                                                    *\n.*                BEGIN    DC    CL8'A',CL42'ENTRY 1'                 *\n.*                         DC    CL8'D',CL42'ENTRY 2'                 *\n.*                         DC    CL8'X',CL42'ENTRY 3'                 *\n.*                         DC    CL8'$',CL42'ENTRY 4'                 *\n.*                         DC    CL8'Q',CL42'ENTRY 5'                 *\n.*                END      DC    CL8'M',CL42'ENTRY 6'                 *\n.*                                                                    *\n.* GLOBALS                                                            *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLC  &X,&Y,&Z,&LEN,&HI,&I                             GP08303\n         LCLA  &N                                               GP08303\n.*\n&I       SETC  '#SOR'.'&SYSNDX'(2,3)\n&N       SETA  N'&FIELDS\n&HI      SETC  'H'\n         AIF   (&N LT 3 OR &N GT 4).ERR1                        GP08303\n         AIF   ('&FIELDS(3)' NE 'CH').ERR2\n         AIF   (&N EQ 3).SETREGS                                GP08303\n         AIF   ('&FIELDS(&N)' NE 'D').TESTA\n&HI      SETC  'L'\n         AGO   .SETREGS\n.TESTA   AIF   ('&FIELDS(&N)' EQ 'A').SETREGS\n         MNOTE *,'*** SORT TYPE NOT A OR D - A ASSUMED'\n.SETREGS ANOP\n&LEN     SETC  '&LENGTH'                                        GP08303\n&X       SETC  '&FIELDS(1)'.'-1'       OFFSET WITHIN RECORD     GP08303\n&Y       SETC  '&FIELDS(2)'            LENGTH OF SORT-KEY       GP08303\n&Z       SETC  '&X'.'+'.'&LEN'         OFFSET WITHIN NEXT REC.  GP08303\n         AIF   ('&FIRST'  EQ '').ERR3\n         AIF   ('&LAST'   EQ '').ERR4\n         AIF   ('&LENGTH' EQ '').ERR5\n.*\n&NAME    LA    R0,&LENGTH              LOAD LENGTH OF AN ENTRY\n         AIF   ('&LAST'(1,1) EQ '(').RFORM1\n         LA    R1,&LAST                LOAD LAST ENTRY ADDRESS\n         AGO   .CONT1\n.RFORM1  LR    R1,&LAST                LOAD LAST ENTRY ADDRESS\n.CONT1   ANOP\n&I.A     SR    R14,R14                 CLEAR LAST SWITCH ADDRESS\n         AIF   ('&FIRST'(1,1) EQ '(').RFORM2\n         LA    R15,&FIRST              LOAD FIRST ENTRY ADDRESS\n         AGO   .CONT2\n.RFORM2  LR    R15,&FIRST              LOAD FIRST ENTRY ADDRESS\n.CONT2   SR    R1,R0                   POINT TO PENULTIMATE\n         CR    R15,R1                  TEST AGAINST FIRST ENTRY\n         BH    &I.D                    IF HIGH, LIST SORTED\n&I.B     CLC   &X.(&Y,R15),&Z.(R15)    COMPARE KEYS\n         BN&HI &I.C\n         XC    0(&LEN,R15),&LEN.(R15)  SWITCH ENTRIES\n         XC    &LEN.(&LEN,R15),0(R15)\n         XC    0(&LEN,R15),&LEN.(R15)\n         LR    R14,R15                 SAVE ADDRESS OF SWITCHED ENTRY\n&I.C     BXLE  R15,R0,&I.B             POINT TO NEXT ENTRY\n         LTR   R1,R14                  COPY AND TEST LAST SWITCHED ADDR\n         BNZ   &I.A\n&I.D     EQU   *\n         MEXIT\n.ERR1    MNOTE 8,'INVALID NO. OF ENTRIES IN FIELDS PARAMETER'\n         MEXIT\n.ERR2    MNOTE 8,'FORMAT TYPE IS NOT SUPPORTED'\n         MEXIT\n.ERR3    MNOTE 8,'FIRST ENTRY ADDRESS NOT SPECIFIED.'\n         MEXIT\n.ERR4    MNOTE 8,'LAST  ENTRY ADDRESS NOT SPECIFIED.'\n         MEXIT\n.ERR5    MNOTE 8,'LENGTH NOT SPECIFIED.'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#TGET": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x121?\\x01\\x121?\\x16U\\x00#\\x00#\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2012-11-08T00:00:00", "modifydate": "2012-11-08T16:55:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #TGET &ADDR,&LEN,&NOTSO=WTOR                    NEW ON GP12313\n         GBLC  &MACPLAB\n.*--------------------------------------------------------------------*\n.*   #TGET IS A SIMPLE TGET REPLACEMENT. IT INVOKES SUBTGET TO ISSUE  *\n.*     EITHER A GETLINE (FOR A TSO CALLER) OR A WTOR (BATCH).         *\n.*                                                                    *\n.*   USER PASSES BUFFER ADDRESS IN R1, AND MAX LENGTH IN R0           *\n.*   NOTSO= ACTION WHEN NOT UNDER TSO: WTOR or SKIP                   *\n.*--------------------------------------------------------------------*\n         LCLA  &I,&NOTS\n         LCLC  &L,&C\n&MACPLAB SETC  '&NM'\n&L       SETC  'L'''\n         AIF   (T'&ADDR NE 'O').HAVEAD\n         MNOTE 8,'#TGET: ADDRESS OPERAND REQUIRED'\n         MEXIT ,\n.HAVEAD  AIF   (T'&NOTSO EQ 'O').SKIPACT\n&C       SETC  '&NOTSO'.'    '\n&C       SETC  '&C'(1,4)\n.LOOPACT AIF   ('&C' EQ 'WTORSKIP'(&I*4+1,4)).HAVEACT\n&I       SETA  &I+1\n         AIF   (&I LT 2).LOOPACT\n         MNOTE 4,'#TGET: UNSUPPORTED NOTSO &NOTSO'\n         AGO   .SKIPACT\n.HAVEACT ANOP  ,\n&NOTS    SETA  &I\n.*\n.SKIPACT MACPARM R0,&LEN,NULL=&L&LEN\n         MACPARM R1,&ADDR    LOAD ADDRESS REGISTER\n.SUBCALL AIF   (&NOTS EQ 0).TGET\n         MACPARM R0,8,=AL1(&NOTS),OP=ICM,MODE=THREE   SET ACTION\n.TGET    ANOP  ,                                                GP12162\n         SUBCALL /SUBTGET                                       GP12162\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#TPUT": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x04\\x08\\x0f\\x01\\x121?\\x17 \\x00J\\x00I\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-03-20T00:00:00", "modifydate": "2012-11-08T17:20:00", "lines": 74, "newlines": 73, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #TPUT &ADDR,&LEN,&TYPE=,&NOTSO=WTO,&MF=\n         GBLC  &MACPLAB\n.*--------------------------------------------------------------------*\n.*   #TPUT IS A SIMPLE TPUT REPLACEMENT. IT INVOKES SUBTPUT TO ISSUE  *\n.*     EITHER A PUTLINE (FOR A TSO CALLER) OR A WTO (BATCH).          *\n.*                                                                    *\n.*   TYPE=  CON, BCON, HCON, VCON, DCS - LEN NOT REQUIRED, BECAUSE    *\n.*     ADDR POINTS TO A SELF-DEFINING OBJECT (L/TEXT OR TEXT/X'0')    *\n.*                                                                    *\n.*   NOTSO= ACTION WHEN NOT UNDER TSO: WTO, WTL, SKIP {PRT}           *\n.*--------------------------------------------------------------------*\n         LCLA  &I,&NOTS\n         LCLB  &SDO\n         LCLC  &L\n         LCLC  &R0\n         LCLC  &C\n&MACPLAB SETC  '&NM'\n&R0      SETC  '&LEN'\n&L       SETC  'L'''\n         AIF   (T'&ADDR NE 'O').HAVEAD\n         MNOTE 8,'#TPUT: ADDRESS OPERAND REQUIRED'\n         MEXIT ,\n.HAVEAD  ANOP  ,\n&SDO     SETB  ('&TYPE' EQ 'CON')\n&SDO     SETB  (('&TYPE' EQ 'DCS') OR &SDO)\n&SDO     SETB  (('&TYPE' EQ 'BCON') OR &SDO)\n&SDO     SETB  (('&TYPE' EQ 'HCON') OR &SDO)\n&SDO     SETB  (('&TYPE' EQ 'VCON') OR &SDO)\n         AIF   (NOT &SDO).NEEDLEN\n         AIF   (T'&LEN EQ 'O').SKIPLN\n       MNOTE 4,'#TPUT:  LENGTH &LEN AND TYPE &TYPE MUTUALLY EXCLUSIVE'\n&SDO     SETB  0\n.SKIPLN  AIF   ('&ADDR'(1,1) NE '''' AND '&ADDR'(1,1) NE '(').ZEROR0\n         MNOTE 4,'#TPUT: TYPE &TYPE INVALID WITH LITERAL TEXT'\n&SDO     SETB  0\n.ZEROR0  ANOP  ,\n&R0      SETC  '0'\n.NEEDLEN AIF   (T'&NOTSO EQ 'O').SKIPACT\n&C       SETC  '&NOTSO'.'    '\n&C       SETC  '&C'(1,4)\n.LOOPACT AIF   ('&C' EQ 'WTO WTL PRT SKIP'(&I*4+1,4)).HAVEACT\n&I       SETA  &I+1\n         AIF   (&I LT 4).LOOPACT\n         MNOTE 4,'#TPUT: UNSUPPORTED NOTSO &NOTSO'\n         AGO   .SKIPACT\n.HAVEACT ANOP  ,\n&NOTS    SETA  &I\n.SKIPACT AIF   ('&ADDR'(1,1) EQ '=').LIT\n         AIF   ('&ADDR'(1,1) NE '''').EXPLIC\n&I       SETA  K'&ADDR-2\n         MACPARM R0,&I\n         MACPARM R1,=CL(&I)&ADDR\n         AGO   .SUBCALL\n.*\n.LIT     AIF   ('&ADDR'(2,2) EQ 'C''').CLIT\n         MNOTE 8,'#TPUT: ADDRESS OPERAND NOT SUPPORTED'\n.*\n.CLIT    ANOP  ,\n&I       SETA  K'&ADDR-4\n&R0      SETC   '&I'\n.*\n.EXPLIC  AIF   ('&R0' NE '').HAVELEN\n&R0      SETC  '&L'.'&ADDR'\n         AIF   ('&ADDR'(1,1) NE '(').HAVELEN\n         MNOTE 8,'#TPUT: LENGTH OPERAND REQUIRED'\n.*\n.HAVELEN MACPARM R0,&R0      LOAD LENGTH REGISTER\n         MACPARM R1,&ADDR    LOAD ADDRESS REGISTER\n.SUBCALL AIF   (&NOTS EQ 0).TPUT\n         MACPARM R0,8,=AL1(&NOTS),OP=ICM,MODE=THREE   SET ACTION\n.TPUT    AIF   ('&MF' EQ 'B').MEND                              GP12313\n         SUBCALL /SUBTPUT                                       GP12162\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#TRACE": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x10\\x10\\x1f\\x01\\x11$?\"Q\\x00\\x06\\x00\\xaa\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2010-04-11T00:00:00", "modifydate": "2011-08-31T22:51:00", "lines": 6, "newlines": 170, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #TRACE &MODE,&REGSAVE=                             NEW GP10101\n.*   THIS IS A QUICK AND DIRTY FRONT END FOR #TRC TO SAVE ME FROM\n.*   ENTERING LOTS OF OPERANDS\n&NM      #TRC  &MODE,ADCON=YES,RENT=NO,REGSAVE=&REGSAVE         GP11243\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#TRAP": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x08\\x00\\x00\\x01\\t'\\x7f\\x01\\x123o\\x03\\x00\\x00\\xe5\\x00\\xae\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.08", "flags": 0, "createdate": "2009-10-04T00:00:00", "modifydate": "2012-12-01T03:00:00", "lines": 229, "newlines": 174, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #TRAP &LIST,&OPT=(PSW),&ID=,&REGS=YES,&MF=A   ADDED ON GP09277\n.*                                                                    *\n.*  THIS MACRO INVOKES EXTERNAL LOAD MODULE @SPIEDER TO PRODUCE       *\n.*  TRACING, REGISTER CONTENTS, AND VARIABLES. PRIOR TO USE, @SPIEDER *\n.*  MUST BE INITIALIZED WITH '  BANDAID SPIE ' OR ' #TRACE INIT '     *\n.*                                                                    *\n.*  ALTERNATIVELY, IT MAY BE USED IN ANY SECTION OF                   *\n.*  CODE THAT HAS THE PGMTRACE FACILITY ACTIVE (SEE #TRC AND #TRACE   *\n.*  MACROS).                                                          *\n.*                                                                    *\n.*    PRINT REQUIRES A SYSDEBUG DD CARD.                              *\n.*                                                                    *\n.*                                                                    *\n.*  OPTIONAL:  ID=name   IDENTIFIES THE DEBUG PACKET                  *\n.*                                                                    *\n.*                REGS= (DEFAULT) | REGS=NO - NO REGISTERS            *\n.*                REGS=YES  -  REGISTERS R0 THROUGH R15               *\n.*                REGS=(R1,R2) - REGISTERS R1 THROUGH R2              *\n.*                REGS=SHORT   - R14 THROUGH R1                       *\n.*                                                                    *\n.*             OPT=      LIST OF OPTIONAL FORMATTING ITEMS:           *\n.*                PSW, GPR, FPR, CTL                                  *\n.*                later (PGM, BUF, MAP) mini-dump information         *\n.*                                                                    *\n.*             MF=A      POINTER TO ITEM LIST IS ADDRESS CONSTANT     *\n.*             MF=S      POINTER TO ITEM LIST IS BASE/DISPLACEMENT    *\n.*                       (NEEDED FOR WYLBUR OVERLAYS)                 *\n.*             MF=L      PRODUCES ID AND VARIABLE LIST ONLY           *\n.*             MF=(E,list)  USES S CONSTANT TO PROCESS REMOTE LIST    *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.*       Positional operands (0 to nnn):                              *\n.*           (OP1,LN1,FM1),(OP2,LN2,FM2), ...                         *\n.*                                                                    *\n.*                OP - ADDRESS EXPRESSION VALID IN S CONSTANT         *\n.*                LN - LENGTH EXPRESSION; DEFAULT IS L'OP             *\n.*                FM - TEXT | CTEXT | HEX | PACK - DEFAULT IS HEX     *\n.*                     OR ABBREVIATED   T | CT | H | P                *\n.*                                                                    *\n.*    EACH TRAP WILL EXPAND 8 BYTES IN THE CALLER'S SECTION, AND A    *\n.*    REQUEST LIST IN RSECT TRPnnnnn: B2FF0000/AL4(traplist)          *\n.*                 OR          B2FF0000,FFFF /SL2(traplist)           *\n.*                                                                    *\n.*                                                                    *\n.*  ALLOW *var AS INDIRECT LOOKUP REQUEST - 24-BIT ADDRESS IN WORD    *\n.*  ALLOW /var AS INDIRECT INDIRECT LOOKUP                            *\n.*                2008-04-18  GYP                                     *\n.*  ALLOW REGISTER (ONLY) AS A LENGTH FIELD OPERAND - CODE AS 800r    *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*  MAINTENANCE:                                                      *\n.*  2011-12-1n  GYP  ADDED MF= SUPPORT (ALSO IN @SPIEDER & PGMTRACE)  *\n.**********************************************************************\n         GBLA  &MACP#        NUMBER OF SUBLIST PARAMETERS       GP04234\n         GBLB  &BUGBEAR                                         GP09301\n         GBLC  &MACP1,&MACP2,&MACP3,&MACP4,&MACP5,&LOCAL        GP09301\n         GBLC  &MACP6,&MACP7,&MACP8,&MACP9,&MACP10              GP04234\n         GBLC  &V\n         LCLA  &LN,&I,&EN,&EM,&EO,&J,&NL                        GP95235\n         LCLB  &B80,&B40,&B20,&B10,&B08,&B04,&B02,&B01,&EXEC    GP11352\n         LCLC  &L,&ET,&EL,&EK,&CURSECT,&TRPSECT,&TAG,&NMLST     GP11352\n&L       SETC  'L'''                                            GP95235\n&V       SETC  'ZZT'.'&SYSNDX'\n&NMLST   SETC  'XTL'.'&SYSNDX'                                  GP11352\n         AIF   (&BUGBEAR).DOSOME                                GP09301\n         AIF   ('&LOCAL' EQ '').DOSOME  NON-ESP ENVIRONMENT     GP09301\n         AIF   ('&NM' EQ '').MEND\n&NM      DS    0H            DEBUG SWITCH NOT ON\n         AGO   .MEND\n.DOSOME  ANOP  ,                                                 95067\n&CURSECT SETC  '&SYSECT'                                        GP09301\n&TRPSECT SETC  '&SYSECT'.'ZZZZZZZZ'                             GP09301\n&TRPSECT SETC  'TRP'.'&TRPSECT'(4,5)                            GP09301\n&TAG     SETC  '&ID'         USE OVERRIDE LABEL\n         AIF   ('&TAG' NE '').HVTAG\n&TAG     SETC  '&NM'         ELSE USE NAME FIELD\n.HVTAG   ANOP  ,\n&B80     SETB  ('&TAG' NE '' OR &B80)\n.*       B01 RESERVED FOR FULL MEMORY DUMP\n&I       SETA  N'&OPT\n         AIF   (&I GT 0).OPTLOOP\n*DEFER*  MNOTE 0,'OPTIONS OMITTED - PSW DEFAULTED'\n&B40     SETB  1\n         AGO   .OPTDONE\n.OPTLOOP AIF   (&J GE &I).OPTDONE\n&J       SETA  &J+1\n&B40     SETB  ('&OPT(&J)' EQ 'PSW' OR &B40)\n&B20     SETB  ('&OPT(&J)' EQ 'REGS' OR &B20)\n&B20     SETB  ('&OPT(&J)' EQ 'GPR' OR &B20)                    GP10092\n&B10     SETB  ('&OPT(&J)' EQ 'FPR' OR &B10)                    GP10092\n&B08     SETB  ('&OPT(&J)' EQ 'CTL' OR &B08)   AUTH ONLY        GP10092\n&B04     SETB  ('&OPT(&J)' EQ 'PGM' OR &B04)\n&B02     SETB  ('&OPT(&J)' EQ 'MAP' OR &B02)\n&B01     SETB  ('&OPT(&J)' EQ 'BUF' OR &B01)\n         AGO   .OPTLOOP\n.OPTDONE AIF   ((&B40+&B20+&B10+&B08+&B04+&B02+&B01) GE &I).OPTOK\n         MNOTE 4,'UNRECOGNIZED OPTION SPECIFIED'\n.OPTOK   AIF   ('&REGS' EQ 'YES').FGREGS                        GP12336\n         AIF   (N'&REGS NE 2).BGREGS                            GP12336\n         AIF   ('&REGS(1)' NE 'R0' OR '&REGS(1)' NE '0').BGREGS GP12336\n         AIF ('&REGS(2)' NE 'R15' OR '&REGS(2)' NE '15').BGREGS GP12336\n.FGREGS  ANOP  ,                                                GP12336\n&B20     SETB  1                                                GP12336\n.BGREGS  ANOP  ,                                                GP12336\n&I       SETA  N'&SYSLIST\n&J       SETA  0\n         AIF   ('&REGS' EQ '' OR '&REGS' EQ 'NO').COUNTER\n         AIF   (&B20).COUNTER                                   GP12336\n&NL      SETA  1\n.COUNTER AIF   (&J GE &I).COUNTED\n&J       SETA  &J+1\n         AIF   ('&SYSLIST(&J)' EQ '').COUNTER\n&NL      SETA  &NL+1\n         AGO   .COUNTER\n.COUNTED ANOP  ,\n&J    SETA  128*&B80+64*&B40+32*&B20+16*&B10+8*&B08+4*&B04+2*&B02+&B01\n         AIF   (N'&MF NE 2).MFONE                               GP11352\n         AIF   ('&MF(1)' NE 'E').MFONE                          GP11352\n&EXEC    SETB  1                                                GP11352\n&NMLST   SETC  '&MF(2)'                                         GP11352\n         AGO   .POINTS                                          GP11352\n.MFONE   AIF   ('&MF' EQ 'A').POINTA                            GP11346\n         AIF   ('&MF' EQ 'S').POINTS                            GP11346\n         AIF   ('&MF' EQ 'L').POINTL                            GP11352\n         MNOTE 4,'MF= NOT RECOGNIZED; MF=A ASSUMED'             GP11346\n.POINTA  ANOP  ,                                                GP11346\n&NM      DC    0H'0',X'B2FF0000',AL4(&NMLST)                    GP11352\n         AGO   .CPOINT                                          GP11346\n.POINTS  ANOP  ,                                                GP11346\n&NM      DC    0H'0',X'B2FF0000,FFFF',SL2(&NMLST)               GP11352\n.CPOINT  AIF   (&EXEC).MEND                                     GP11352\n&TRPSECT RSECT ,                                                GP09301\n         AGO   .POINTCM                                         GP11352\n.POINTL  ANOP  ,                                                GP11352\n&NMLST   SETC  '&NM'                                            GP11352\n.POINTCM ANOP  ,                                                GP11352\n&NMLST   DC    0H'0',AL1(&J,&NL)  TRAP LIST                     GP11352\n         AIF   (NOT &B80).EXPAND\n         DC    CL8'&TAG '\n.EXPAND  AIF   ('&REGS' EQ '' OR '&REGS' EQ 'NO').NOREGS         95079\n         AIF   (&B20).NOREGS      ALREADY REQUESTED             GP12336\n         AIF   ('&REGS' EQ 'R15' OR '&REGS' EQ 'SHORT'                 *\n               OR '&REGS' EQ 'RET').RETREG                      GP97225\n         AIF   ('&REGS' EQ 'YES' OR '&REGS' EQ 'ALL').REGSALL   GP02246\n         AIF   (N'&REGS EQ 2).REGS2                             GP97225\n         DC    AL1(0,128),SL2(&REGS(1),&REGS(1))                GP09301\n         AGO   .NOREGS                                          GP97225\n.REGS2   DC    AL1(0,128),SL2(&REGS(1),&REGS(2))                GP09301\n         AGO   .NOREGS                                          GP97225\n.REGSALL DC    AL1(0,128),SL2(0,15)                             GP09301\n         AGO   .NOREGS                                          GP97225\n.RETREG  DC    SL2(128,14,1)    R15-R1 ONLY                     GP09301\n.NOREGS  ANOP  ,                                                GP09301\n&I       SETA  0                                                GP09301\n&LN      SETA  N'&SYSLIST                                       GP95235\n.DOLIST  AIF   (&I GE &LN).LISTDON  DONE WITH LIST              GP95235\n&I       SETA  &I+1          BUMP LOOP INDEX                    GP95235\n&EN      SETA  K'&EK         GET LENGTH                         GP04234\n&EN      SETA  N'&SYSLIST(&I)\n&MACP1   SETC  '&SYSLIST(&I,1)'\n&MACP2   SETC  '&SYSLIST(&I,2)'\n&MACP3   SETC  '&SYSLIST(&I,3)'\n         AIF   (&EN LT 1).DOLIST  USER IN COMA?                 GP95235\n         AIF   (&EN LT 4).TOOLIST WARN                          GP95235\n         MNOTE 4,'MORE THAN 3 SUBPARMS IN &SYSLIST(&I) '        GP95235\n.TOOLIST ANOP  ,                                                GP95235\n&EK      SETC  '&MACP1'                                         GP04234\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n&EO      SETA  0             PRESET FOR NORMAL ADDRESSING MODE\n&ET      SETC  '03'          PRESET FOR HEX DEFAULT             GP95235\n         AIF   (&EM GT 0).TPFX                                  GP04234\n&EK      SETC  '0'           ALLOW EXPANSION WITHOUT ERROR      GP04234\n&EM      SETA  1                                                GP04234\n         MNOTE 4,'TRAP: PARAMETER &I REQUIRES AN ADDRESS'       GP09301\n.TPFX    AIF   (&EM LT 2).NOTA31                                GP04234\n         AIF   ('&EK'(1,1) NE '/').NOTIND\n&EO      SETA  &EO+1         REQUEST INDIRECT ADDRESSING\n&EK      SETC  '&EK'(2,&EM-1)  DELETE LEADING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTIND  AIF   ('&EK'(&EM,1) NE '%').NOTA24\n&EO      SETA  &EO+2         REQUEST FORCED 24-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA24  AIF   ('&EK'(&EM,1) NE '?').NOTA31\n&EO      SETA  &EO+4         REQUEST FORCED 31-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA31  AIF   (&EN LT 3 OR '&MACP3' EQ 'HEX').HTYPE            GP95235\n         AIF   ('&MACP3' EQ 'X').HTYPE                          GP97225\n         AIF   ('&MACP3' EQ 'HEX').HTYPE\n         AIF   ('&MACP3' EQ 'T').TTYPE                          GP98189\n         AIF   ('&MACP3' EQ 'TEXT').TTYPE                       GP95235\n         AIF   ('&MACP3' EQ 'TXT').TTYPE\n         AIF   ('&MACP3' EQ 'C').CTYPE                          GP97225\n         AIF   ('&MACP3' EQ 'CT').CTYPE\n         AIF   ('&MACP3' EQ 'CTEXT').CTYPE                      GP97225\n         AIF   ('&MACP3' EQ 'PACK').PTYPE                       GP97225\n         AIF   ('&MACP3' EQ 'PACKED').PTYPE                     GP97225\n         AIF   ('&MACP3' EQ 'P').PTYPE                          GP97225\n         AIF   ('&MACP3' EQ 'PD').PTYPE\n         AIF   ('&MACP3' EQ 'D').PTYPE                          GP97225\n MNOTE 4,'TYPE MUST BE TEXT, CTEXT, HEX, OR PACKED, NOT &MACP3'\n         AGO   .HTYPE                                           GP95235\n.TTYPE   ANOP  ,                                                GP95235\n&ET      SETC  '01'          SET FOR TEXT                       GP95235\n         AGO   .HTYPE                                           GP95235\n.CTYPE   ANOP  ,                                                GP97225\n&ET      SETC  '02'          SET FOR CONDITIONAL TEXT, ELSE HEX GP97225\n         AGO   .HTYPE                                           GP97225\n.PTYPE   ANOP  ,                                                GP97225\n&ET      SETC  '04'          SET FOR PACKED                     GP97225\n.HTYPE   ANOP  ,                                                GP97225\n&EL      SETC  '&MACP2'                                         GP95235\n         AIF   ('&EL' NE '').HLEN                               GP95235\n&EL      SETC  '&L'.'&EK'\n         AGO   .BDLEN                                           GP10160\n.HLEN    AIF   ('&EL'(1,1) NE '(' OR '&EL'(K'&EL,1) NE ')').BDLEN 10160\n         AIF   (K'&EL LT 3).BDLEN                               GP10160\n         AIF   ('&EL'(2,1) EQ '(' OR '&EL'(K'&EL-1,1) EQ ')').BDLEN\n         DC    AL1(&ET,&EO),SL2(&EK),X'80',AL1(&EL),CL8'&MACP1' GP10160\n         AGO   .DOLIST                                          GP95235\n.BDLEN   DC    AL1(&ET,&EO),SL2(&EK,&EL),CL8'&MACP1 '\n         AGO   .DOLIST                                          GP95235\n.LISTDON ANOP  ,                                                GP09301\n&CURSECT CSECT ,                                                GP09301\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#TRC": {"ttr": 1809, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x980\\x0f\\x01\\x13\"/\\x01\\x05\\x00\\xb9\\x00\\x1c\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1998-10-27T00:00:00", "modifydate": "2013-08-10T01:05:00", "lines": 185, "newlines": 28, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      #TRC  &MODE,&FAST,&ARG,&LOAD=YES,&ADDR=@TRACE,     NEW GP98300*\n               &RENT=YES,&PFX=PGT,&DSECT=NO,&ADCON=NO,          GP08157*\n               &REGSAVE=                                        GP11243\n         GBLB  &ZZ$TRFG,&ZZ$TDFG                                GP00192\n         GBLB  &ZZ$TRNT                                         GP99364\n         GBLC  &ZZ$TRAD\n         GBLC  &MACPLAB                                         GP99364\n.**********************************************************************\n.*                                                                   **\n.*   #TRC CONTROLS THE INVOCATION OF THE PROGRAM TRACE ROUTINE;      **\n.*                                                                   **\n.*   REQUIRES TRACEIN AND TRACEOUT DD CARDS. SEE PGMTRACE SOURCE.    **\n.*                                                                   **\n.**********************************************************************\n         LCLC  &EPNAME,&PTR,&P\n         LCLB  &DYN\n         LCLA  &OFF,&I,&RQC\n&I       SETA  &SYSNDX\n&DYN     SETB  ('&LOAD' EQ 'YES' OR '&MODE' EQ 'DYN')\n&PTR     SETC  '&ADDR'\n&MACPLAB SETC  '&NM'                                            GP99364\n&ZZ$TRNT SETB  (&ZZ$TRNT OR ('&RENT' EQ 'YES'))                 GP99364\n&EPNAME  SETC  'TRACEON'\n&OFF     SETA  8\n&RQC     SETA  1             TRACE ON FLAG\n         AIF   ('&MODE' EQ 'DATA').DODATA                       GP00192\n         AIF   ('&REGSAVE' NE 'YES').NOSAVE                     GP11243\n&MACPLAB STM   R14,R1,ZZ&I.V      SAVE USER'S REGISTERS         GP13222\n&MACPLAB SETC  ''                                               GP11243\n.NOSAVE  AIF   (NOT &DYN).HAVBAS\n         AIF   ('&ADDR' EQ '').DEFBAS\n&ZZ$TRAD SETC  '&ADDR'\n.DEFBAS  ANOP  ,\n&PTR     SETC  '&ZZ$TRAD'\n         AIF   ('&PTR' NE '').HAVBAS\n&PTR     SETC  '=A(PGMTRACE)'\n&ZZ$TRAD SETC  '=A(PGMTRACE)'\n.HAVBAS  AIF   (&ZZ$TRFG).LATER\n&ZZ$TRFG SETB  1\n         WXTRN TRACE,TRACEON,TRACEOFF,TRACKILL\n.LATER   AIF   ('&MODE' EQ 'ON' OR '&MODE' EQ 'TRACEON').SPEED\n&RQC     SETA  0             TRACE OFF FLAG\n&OFF     SETA  12\n&EPNAME  SETC  'TRACEOFF'\n         AIF   ('&MODE' EQ 'OFF' OR '&MODE' EQ 'TRACEOFF').SPEED\n&OFF     SETA  4\n&EPNAME  SETC  'TRACKILL'\n         AIF   ('&MODE' EQ 'END' OR '&MODE' EQ 'TRACKILL').EXPAND\n         AIF   ('&MODE' EQ 'QUIT' OR '&MODE' EQ 'EXIT').EXPAND\n         AIF   ('&MODE' EQ 'KILL' OR '&MODE' EQ 'DONE').EXPAND\n&OFF     SETA  24                                               \\\n&EPNAME  SETC  'TRACSUSP'                                       \\\n         AIF   ('&MODE' EQ 'SUS' OR '&MODE' EQ 'TRACSUSP').EXPAND\n         AIF   ('&MODE' EQ 'SUSP' OR '&MODE' EQ 'SUSPEND').EXPAND\n&OFF     SETA  0\n&EPNAME  SETC  'TRACE'\n         AIF   ('&MODE' EQ 'INIT' OR '&MODE' EQ 'TRACE').SPECIAL\n         MNOTE 8,'#TRC - UNRECOGNIZED OPERAND : &MODE'\n         MEXIT ,\n.SPECIAL AIF   ('&ADCON' NE 'YES').NOADCON                      GP08157\n         AIF   (&ZZ$TRNT).NOADZER                               GP99364\n&MACPLAB B     4+&PTR                                           GP08255\n&PTR     DC    A(0)                                             GP08157\n&MACPLAB SETC  ''                                               GP99364\n         AGO   .NOADCON\n.NOADZER ANOP  ,                                                GP08157\n&MACPLAB B     4+&ZZ$TRAD                                       GP08157\n&ZZ$TRAD DC    V(PGMTRACE)                                      GP08157\n&MACPLAB SETC  ''                                               GP99364\n&DYN     SETB  0             CANCEL DYNAMIC OPTION              GP99364\n.NOADCON AIF   (&ZZ$TRNT).NOMOD                                 GP99364\n&MACPLAB NOP   ZZ&I.B\n&MACPLAB SETC  ''                                               GP99364\n         OI    *-4+1,X'F0'\n.NOMOD   AIF   (&DYN).DYNLOAD                                   GP99364\n         MACPARM R1,&FAST,NULL=0  SET API OPTION ADDRESS OR 0\n         ICM   R15,15,&PTR\n         BZ    ZZ&I.Z\n         BASR  R14,R15\n&EPNAME  SETC  'TRACEON'\n&OFF     SETA  8\nZZ&I.B   DS    0H\n         AGO   .EXPAND\n.DYNLOAD ANOP  ,                                                GP10164\n&MACPLAB ICM   R15,15,&PTR  LOADED BEFORE?\n&MACPLAB SETC  ''                                               GP10164\n         BNZ   ZZ&I.A        YES?\n         LOAD  EP=PGMTRACE,ERRET=ZZ&I.Z\n         LA    R15,&PTR\n         ST    R0,0(,R15)    NON-KOSHER\nZZ&I.A   DS    0H\n         AIF   ('&FAST' EQ 'ON').PRM3ON\n         AIF   ('&FAST' NE 'OFF').PRM2\n&OFF     SETA  12            INITIALIZE WITHOUT TRACE PRINTING\n&EPNAME  SETC  'TRACEOFF'\n         AGO   .PRM3\n.PRM3ON  ANOP  ,             ALREADY SET FOR NORMAL TRACE?\n.PRM3    MACPARM R1,&ARG,NULL=0   SET API OPTION ADDRESS OR 0\n         AGO   .PRM2N3\n.PRM2    MACPARM R1,&FAST,NULL=0  SET API OPTION ADDRESS OR 0\n.PRM2N3  L     R15,&PTR\n         L     R15,&OFF+64(,R15)\n         BASR  R14,R15\n         B     ZZ&I.Z\n         AIF   ('&REGSAVE' NE 'YES').NOS14R1                    GP13222\nZZ&I.V   DC    4A(0)                                            GP13222\n.NOS14R1 AIF   (&OFF NE 0).PRMOFF\n&EPNAME  SETC  'TRACEON'\n&OFF     SETA  8\n.PRMOFF  ANOP  ,\nZZ&I.B   DS    0H\n.EXPAND  AIF   (NOT &DYN).EXPANDS\n         MACPARM  R15,15,&PTR,OP=ICM,MODE=THREE                 GP02242\n         BZ    ZZ&I.Z\n         L     R15,&OFF+64(,R15)\n         BASR  R14,R15\n         AGO   .REGREST\n.EXPANDS ANOP  ,\n         MACPARM  R15,15,=A(&EPNAME),OP=ICM,MODE=THREE          GP02242\n         BZ    ZZ&I.Z\n         BASR  R14,R15\n.REGREST AIF   ('&REGSAVE' NE 'YES').GOAWAY                     GP11243\nZZ&I.Z   LM    R14,R1,ZZ&I.V                                    GP13222\n         MEXIT ,\n.GOAWAY  ANOP  ,\nZZ&I.Z   DS    0H\n         MEXIT ,\n.SPEED   AIF   ('&FAST' NE 'FAST').EXPAND\n         AIF   ('&ARG' EQ '').NOARG\n&MACPLAB DC    0H'0',X'83',AL1(X'C0'+&RQC),SL2(&ARG)\n         MEXIT ,\n.NOARG   ANOP  ,\n&MACPLAB DC    0H'0',X'83',AL1(X'C0'+&RQC),AL2(0)\n         MEXIT ,                                                GP00192\n.DODATA  ANOP  ,                                                GP00192\n&P       SETC  '&PFX'                                           GP00192\n         AIF   ('&DSECT' EQ 'NO').NODADSC                       GP00192\n         AIF   ('&NM' EQ '').NFDADS                             GP00203\n&MACPLAB DSECT ,             PGMTRADA PARAMETER LIST            GP00203\n         AGO   .NODADS                                          GP00203\n.NFDADS  ANOP  ,                                                GP00203\n&P.SECT  DSECT ,             CALLER'S PARM DSECT                GP00192\n         AGO   .NODADS                                          GP00203\n.NODADSC AIF   ('&NM' EQ '').NODADS                             GP00203\n&MACPLAB DS    0D            PGMTRADA PARAMETER LIST            GP00203\n.NODADS  ANOP  ,                                                GP00192\n&P.FUN   DS    X             FUNCTION (L - LOOK-UP; M-MEMBER BUILD)\n         AIF   (&ZZ$TDFG).HAVEMAP                               GP00192\nCFLOOK   EQU   C'L'            LOCATE MEMBER/OFFSET - PRINT DATA\nCFPOINT  EQU   C'M'            LOCATE MEMBER; BUILD SOURCE CHAIN\nCFCLOSE  EQU   C'C'            CLOSE AND FREE EVERYTHING        GP00192\n.HAVEMAP ANOP  ,                                                GP00192\n&P.FLG1  DC    AL1(0)        PRINT OPTIONS                      GP00192\n         AIF   (&ZZ$TDFG).HAVEFG1                               GP00192\nCFDIR    EQU   X'80'           PRINT DIRECTORY ENTRY DATA       GP00192\nCFESD    EQU   X'40'           PRINT CESD LISTING               GP00192\nCFRLD    EQU   X'20'           PRINT RLD LISTING                GP00192\nCFSYM    EQU   X'10'           PRINT SYM LISTING                GP00192\nCFDAT    EQU   X'08'           PRINT SYSADATA INFO (LATER)      GP00192\nCFLBL    EQU   X'02'           PRINT LABELS                     GP00192\nCFTRC    EQU   X'01'           PRINT THE TRACE TABLE ON ABNORMAL END\n.HAVEFG1 ANOP  ,                                                GP00192\n&P.FLG2  DC    AL1(0)        PRINT OPTIONS                      GP00192\n         AIF   (&ZZ$TDFG).HAVEFG2                               GP00192\nCFHEX    EQU   X'80'           PRINT THE CSECT HEX DUMP         GP00192\nCFLST    EQU   X'40'           PRINT THE ASSEMBLY LISTING       GP00192\nCFXRF    EQU   X'20'           PRINT A LABEL CROSS-REFERENCE    GP00192\nCFPUN    EQU   X'10'           PUNCH OUTPUT (?)                 GP00192\nCFBUG    EQU   X'01'           PRINT ADDITIONAL DEBUG INFO      GP00192\n.HAVEFG2 ANOP  ,                                                GP00192\n&P.FLG3  DC    X'00'         PROCESSING FLAG                    GP00192\n         AIF   (&ZZ$TDFG).HAVEFG3                               GP00192\nCFMAC    EQU   X'80'           INCLUDE MACRO EXPANDED CODE (SYSADATA)\nCFIMAC   EQU   X'40'           INCLUDE INLINE MACRO CODE   (SYSADATA)\nCFCMT    EQU   X'20'           INCLUDE COMMENTS            (SYSADATA)\nCFASM    EQU   X'10'           INCLUDE ASSEMBLER PSEUDO-OPS(SYSADATA)\n&ZZ$TDFG SETB  1                                                GP00192\n.HAVEFG3 ANOP  ,                                                GP00192\n&P.MEM   DC    CL8' '        MEMBER NAME                        GP00192\n&P.ESD   DC    CL8' '        CSECT NAME (NOT USED AT PRESENT)   GP00192\n&P.OFF   DC    AL4(0)        OFFSET FROM LOAD POINT             GP00192\n&P.WORK  DC    A(0)          WORK AREA (BUILT/FREED HERE)       GP00192\n&P.@PRT  DC    A(0)          CALLER'S PRINT ROUTINE (R1 - BUFFER)\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#TRCCLC": {"ttr": 2052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\t\\x12_\\x01\\t\\x12_\\x13C\\x00\\x07\\x00\\x07\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2009-05-05T00:00:00", "modifydate": "2009-05-05T13:43:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "GERHARD"}, "text": " CLC =C'GERHARD.AMS.SRC',1(R7)   *******DEBUG***********\n BL TBEF\n BH TAFT\n #TRC INIT,RENT=NO,ADCON=YES\n B TBEF\nTAFT #TRC KILL\nTBEF DS 0H                       *******DEBUG***********\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE861": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00I\\x01\\x191\\x7f\\x01\\x191\\x7f\\x11\\x18\\x00I\\x00I\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-11-13T00:00:00", "modifydate": "2019-11-13T11:18:49", "lines": 73, "newlines": 73, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 861 is from Gerhard Postpischil and contains his macro    *   FILE 861\n//*           library.  This file is intended to be used for        *   FILE 861\n//*           assembling Gerhard's source code in File 860 and      *   FILE 861\n//*           File 862.                                             *   FILE 861\n//*                                                                 *   FILE 861\n//*       My dear friend, and programmer par excellence, Gerhard    *   FILE 861\n//*       Postpischil, has passed away.  Please send support        *   FILE 861\n//*       requests to:   Sam Golob  email: sbgolob@cbttape.org      *   FILE 861\n//*                                                                 *   FILE 861\n//*     - - - - - - - - - - - - - - - - - - - - - - - - - - - -     *   FILE 861\n//*                                                                 *   FILE 861\n//*     Description and Notes for use:                              *   FILE 861\n//*                                                                 *   FILE 861\n//*     Files 860, 861, and 862 should really be looked at          *   FILE 861\n//*     together.                                                   *   FILE 861\n//*                                                                 *   FILE 861\n//*     This file (860) contains (mostly) assembler programs        *   FILE 861\n//*     without JCL.                                                *   FILE 861\n//*                                                                 *   FILE 861\n//*     File 861 contains most macros required for proper           *   FILE 861\n//*     assembly.                                                   *   FILE 861\n//*                                                                 *   FILE 861\n//*     File 862 contains additional files with procedures,         *   FILE 861\n//*     parmlib data, and other supporting material. It also        *   FILE 861\n//*     contains auxiliary macros, as PVTMACS, once available       *   FILE 861\n//*     from IBM on optional source material tapes. Some            *   FILE 861\n//*     macros not available have been concocted from dumps         *   FILE 861\n//*     or IBM documentation.                                       *   FILE 861\n//*                                                                 *   FILE 861\n//*     The programs all ran in production at some point, but       *   FILE 861\n//*     some were used under OS/360 only, and some only under       *   FILE 861\n//*     MVS/ESA and later. A few members came straight from the     *   FILE 861\n//*     CBT for me to look at, but haven't been used yet (e.g.,     *   FILE 861\n//*     the HASPX exits, DSAT9).                                    *   FILE 861\n//*                                                                 *   FILE 861\n//*     Before assembling anything, look at members OPTIONGB and    *   FILE 861\n//*     SYSPARM in the macro file. If you have any of the SVCs      *   FILE 861\n//*     installed, set their SVC numbers correctly (OS/360,         *   FILE 861\n//*     pre-XA only - not used in later systems).  The exception    *   FILE 861\n//*     is @SERVICE, described later. Note that the options have    *   FILE 861\n//*     provision for ESA and later systems, but only a few         *   FILE 861\n//*     members will function correctly. Note that large 3390s      *   FILE 861\n//*     were never used nor tested.  If you wish to start from      *   FILE 861\n//*     scratch and assemble/link everything, run the SUBnnnnn      *   FILE 861\n//*     modules first, then the @nnnnnnn modules (only one of       *   FILE 861\n//*     the @SRVJnnn module, matching your JES2 release; this       *   FILE 861\n//*     module needs the alias @SRVJES2). Then do individual        *   FILE 861\n//*     programs as desired.                                        *   FILE 861\n//*                                                                 *   FILE 861\n//*     Some modules will not assemble because the macros they      *   FILE 861\n//*     reference (USERCVT, USERVOLT, A$GDA, ...) are parts of      *   FILE 861\n//*     a proprietary security and accounting system. However,      *   FILE 861\n//*     the code may still be useful as groundwork for your own     *   FILE 861\n//*     adaptations.                                                *   FILE 861\n//*                                                                 *   FILE 861\n//*     - - - - - - - - - - - - - - - - - - - - - - - - - - - -     *   FILE 861\n//*       At any given MVS system level, the users of the           *   FILE 861\n//*       various programs here, may have to do some coding         *   FILE 861\n//*       work to fit the programs to their current system.         *   FILE 861\n//*       These programs are being presented as-is, for their       *   FILE 861\n//*       intrinsic utility value.                                  *   FILE 861\n//*                                                                 *   FILE 861\n//*       Please see our explanation of the source code in          *   FILE 861\n//*       File 860 to better understand what this collection        *   FILE 861\n//*       is about.                                                 *   FILE 861\n//*                                                                 *   FILE 861\n//*       If you have any question about any specific macros        *   FILE 861\n//*       mentioned here, please email Gerhard or call him,         *   FILE 861\n//*       for further information.                                  *   FILE 861\n//*                                                                 *   FILE 861\n//*       If Gerhard has time in the future, he may write           *   FILE 861\n//*       some more doc.  See also, member DOC in File 862.         *   FILE 861\n//*                                                                 *   FILE 861\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@OBTAIN": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x08)o\\x14\\x07\\x00-\\x00)\\x00\\x02\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2008-10-22T14:07:00", "lines": 45, "newlines": 41, "modlines": 2, "user": "GERHARD"}, "text": "         MACRO\n&NM      @OBTAIN &PARM,&OPT=                                     81152\n         GBLB  &WX@OBT\n         GBLC  &MACPLAB\n.**********************************************************************\n.*                                                                   **\n.*   REPLACEMENT FOR IBM OBTAIN MACRO/SVC. SEE MY @OBTAINS ROUTINE   **\n.*     FOR DETAILS.                                                  **\n.*                                                                   **\n.**********************************************************************\n         LCLC  &NDX                                              82005\n&NDX     SETC  'OBT'.'&SYSNDX'                                   82005\n&MACPLAB SETC  '&NM'\n         AIF   ('&OPT' EQ '').OPTDEF                             81152\n         AIF   ('&OPT' EQ 'CLOSE').CLOSE                         81342\n         AIF   ('&OPT' EQ 'LOADED' OR '&OPT' EQ 'LOAD').OPTEXT   81342\n         AIF   ('&OPT' EQ 'SIZE' OR '&OPT' EQ 'RESERVE').CLOSE   81342\n         MNOTE 8,'INVALID OPT=&OPT '                             81152\n         AGO   .OPTDEF       BUT KEEP EXPANDING                  81342\n.OPTEXT  ANOP  ,                                                 81342\n&WX@OBT  SETB  1             MODULE WAS LOADED BY USER           81342\n.OPTDEF  MACPARM R1,&PARM                                        81152\n         MACPARM R14,&NDX.S+2  SET EXIT ADDRESS     GP08296\n         ICM   R15,15,@OBTAIN   LOAD ADDRESS                    GP99033\n         BNZR  R15 .         CALL OBTAIN SUBROUTINE\n         AIF   (&WX@OBT).SECOND\n         B     &NDX.S        ELSE DO SVC                         82005\n@OBTAIN  DC    V(@OBTAINS)   ADDRESS OF OBTAIN ROUTINE           81152\n         WXTRN @OBTAINS\n&WX@OBT  SETB  1\n.SECOND  ANOP  ,\n&NDX.S   SVC   27            INVOKE OBTAIN SVC                   82005\n         AGO   .MEND                                             81152\n.CLOSE   MACPARM R15,15,@OBTAIN,MODE=3,OP=ICM  EVER LOADED?     GP08296\n         BZ    &NDX.X            NO                              82005\n         AIF   ('&OPT' EQ 'CLOSE').CLOSCAL                       81342\n         MACPARM R0,&PARM,OP=L   LOAD RESERVE SIZE               81342\n         L     R15,28(,R15)  GET @OBSERVE ADDRESS                81342\n         ST    R0,0(,R15)    SET STORAGE RESERVE SIZE            81342\n         AGO   .CLOSOUT                                          81342\n.CLOSCAL L     R15,24(,R15)  LOAD @OBCLOSE ADDRESS               81342\n         BALSR R14,R15       CLOSE IT                            81152\n.CLOSOUT ANOP  ,                                                 81342\n&NDX.X   DS    0H                                                82005\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@PROTECT": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x08'\\x7f#B\\x00\\x15\\x00\\x10\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2008-10-03T23:42:00", "lines": 21, "newlines": 16, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      @PROTECT &PARM\n         GBLB  &WX@PRO\n         GBLC  &MACPLAB\n.**********************************************************************\n.*                                                                   **\n.*   REPLACEMENT FOR IBM PROTECT MACRO/SERVICE. SEE MY SOURCE FOR    **\n.*     @PROTECS FOR DETAILS.                                         **\n.*                                                                   **\n.**********************************************************************\n&NM      MACPARM R1,&PARM\n         MACPARM R14,7,PRO0001A+1,MODE=3\n         BZ    PRO&SYSNDX.S   NOT LINKED; ISSUE SVC\n         AIF   (&WX@PRO).SECOND\n         B     PRO&SYSNDX.S-2 .  ELSE USE QUICKY\nPRO0001A DC    V(@PROTECT)   ADDRESS OF @PROTECT ROUTINE\n         WXTRN @PROTECT\n&WX@PRO  SETB  1\n.SECOND  BALR  R14,R14 .     INVOKE @PROTECT\nPRO&SYSNDX.S SVC 98 .        INVOKE PROTECT SVC\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@VOLRESB": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x10\\x19\\x7f\\x01\\x10\\x19\\x7f\\x00)\\x01\\x17\\x01\\x17\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2010-07-16T00:00:00", "modifydate": "2010-07-16T00:29:00", "lines": 279, "newlines": 279, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                                GP10187\n         @VOLRESB ,                                             GP10187\n         COPY  OPTIONGB                                         GP10187\n*    THIS CODE ACTS AS A @VOLREAD SUBSTITUTE.                    90260\n*    IT IS INVOKED WHEN CALLER IS NOT AUTHORIZED, OR WHEN       GP10187\n*        INVOKED WITH THE 'UNAUTHORIZED' OPTION (USED WHEN CHANGES\n*        ARE TO BE MADE IN OUTPUT ONLY, NOT IN SOURCE).          90260\n*    IT IS INVOKED FOR UNSUPPORTED ACCESS METHODS (E.G., VSAM),  90260\n*        AND FOR @VOLREAD UNSUPPORTED DEVICES (E.G., TAPE).      90260\n*                                                                90260\nVOLFAKE  PGMHEAD SAVE=FAKESAVE,BASE=R12,PARM=R1                  90260\n         USING FAKESAVE,R13  DECLARE NEW START OF WORK AREA      90260\n         XC    VFRET,VFRET   CLEAR RETURN CODES                  90260\n         STM   R0,R1,VFREG0  SAVE ENTRY PARMS                    90260\n         ST    R1,VFRET1     ALSO SAVE FOR RETURN                90260\n         ICM   R0,15,@INPREAD  INPUT READER AVAILABLE ?          90260\n         BNZ   VOLFAKEL      YES                                 90260\n         SERVCALL LPALD,=CL8'@INPREAD'  LOAD IT NOW              90260\n         ST    R0,@INPREAD                                       90260\nVOLFAKEL LM    R0,R1,VFREG0  RELOAD ENTRY REGISTERS              90260\n         LA    R7,0(,R1)     CLEAR PARM                          90260\n         BIX   ERR=VFEXIT16,PFX=VF,BASE=VOLFAKE,                       *\n               LOC=(CLOSE,CLOSE,OPEN,DSCB,DSC3,SERCH,SEEK,FIND,GETDE,  *\n               READ,NOTE,POINT,GET,UPDAT)                        90260\nVFUPDAT  DS    0H                                                90260\nVFFIND   DS    0H                                                90260\nVFGET    DS    0H                                                90260\nVFEXIT16 MVI   VFRETCC,16    SET MAJOR ERROR                     90260\n         B     VFEXIT        AND GET OUT                         90260\n         SPACE 1                                                 90260\nVFEXIT12 MVI   VFRETCC,12    SET SEVERE ERROR                    90260\n         B     VFEXIT                                            90260\n         SPACE 1                                                 90260\nVFEXIT8  MVI   VFRETCC,8     SET ERROR                           90260\n         B     VFEXIT                                            90260\n         SPACE 1                                                 90260\nVFEXIT4  MVI   VFRETCC,4     SET MINOR PROBLEM                   90260\n         SPACE 1                                                 90260\nVFEXIT   LM    R15,R1,VFRET  LOAD RETURN VALUES                  90260\n         L     R13,4(,R13)   GET OLD SAVE                        90260\n         L     R14,12(,R13)  GET RETURN                          90260\n         LM    R2,R12,28(R13)  RETORE USER'S REGS                90260\n         BR    R14           RETURN                              90260\n         SPACE 1                                                 90260\nVFCLOSE  INPCLOSE DEV=6      CLOSE THE FILE (DON'T CARE IF ANY)  90260\n         ST    R15,VFRET     PROPAGATE RETURN CODE               90260\n         MVI   VFFLAG,0      RESET FLAGS                         90260\n         B     VFEXIT        RETURN WITH CC SET                  90260\n         SPACE 1                                                 90260\nVFOPEN   LTR   R7,R7         VOL-SER PASSED ?                    90260\n         BZ    VFEXIT16      NO; MAJOR BOO-BOO                   90260\n         MVC   VOLSER,0(R7)  SAVE IT                            GP99033\n         TM    VFFLAG,VFGOPEN+VFGDSN  CURRENTLY OPEN ?           90260\n         BO    VFEXIT12      YES; ERROR                          90260\n         CLI   CURTYPE+2,UCB3DACC  DASD INPUT ?                  90260\n         BNE   VFOPEN2       NO; DON'T NEED @OBTAINS             90260\n         ICM   R0,15,@OBTAIN  LOADED BEFORE ?                    90260\n         BNZ   VFOPEN0       YES                                GP99035\n         SERVCALL LPALD,=CL8'@OBTAINS'  GET OLD CODE             90260\n         ST    R0,@OBTAIN    SAVE ADDRESS                        90260\n         LTR   R0,R0         FOUND IT ?                          90260\n         BZ    VFOPEN2       NO; WILL DEFAULT TO OS OBTAIN SVC   90260\n         SLR   R0,R0                                             90260\n         ICM   R0,3,VFREG0   ANY SIZE ?                         GP99035\n*?       BZ    VFOPEN0       NO                                 GP99035\n         @OBTAIN (R0),OPT=SIZE  SET SIZE                         90260\n         ST    R15,VFRET     SAVE RETURN                        GP99033\nVFOPEN0  L     R14,PATFMT1   BUILD CAMLISTS                      81340\n         LA    R15,CCHHR                                         81340\n         LA    R0,VOLSER                                         81340\n         LA    R1,DS1DSNAM   OUTPUT AND WORK AREA                81340\n         STM   R14,R1,GTDSCB1  SEEK LIST                         81340\n         LA    R15,CCHHR3    POINT TO DSCB1 LINKED DSCB         GP99034\n         LA    R1,IECSDSL3   POINT TO SEEK ENTRY                GP99034\n         STM   R14,R1,GTDSCB3  OTHER SEEK LIST                  GP99034\n         L     R14,PATFMT4                                       81340\n         LA    R15,DS1DSNAM  SET TO 44X'04'                      81340\n*        LA    R0,VOLSER                                         81340\n         LA    R1,DS4IDFMT                                       81340\n         STM   R14,R1,GTDSCB4  SEARCH FOR FORMAT 4               81340\n         MVI   DS1DSNAM,X'04'    MAKE FORMAT 4 DSCB DSNAME       81340\n         MVC   DS1DSNAM+1(L'DS1DSNAM-1),DS1DSNAM                 81340\n         @OBTAIN GTDSCB4,OPT=LOADED   LOOK FOR FMT4/SET LOAD FG  81357\n         LA    R0,DS4IDFMT   RETURN DATA (NO KEY)               GP99033\n         STM   R15,R0,VFRET  SET RETURN R15 AND R0              GP99033\n         B     *+4(R15)      CHECK RETURN                       GP99033\n         B     VFOPEN1       OK - BUT TAKEN FOR DSCB 1 ONLY     GP99033\n         B     VFEXIT        NOT MOUNTED                        GP99033\n         B     VFOPEN1   SAYS DSCB 4 NOT FOUND; BUT FOUND IT ANYWAY !\n         NOP   0             I/O ERROR ?                        GP99033\n         NOP   0             INVALID WORK-AREA ? COME ON ?      GP99033\nVFOPEN1  MVC   CCHHR(4),DS4VTOCE+2  GET VTOC LOW EXTENT ( CCHH ) 81340\n*SORT OPTION RETURNS 1ST FMT1 TWICE - FIX                       GP10187\n*DEBUG*  MVI   DS1FMTID,X'A2'  PRESET FOR SORT ON NEXT CALL     GP99033\n         SR    R15,R15                                          GP99035\n         ST    R15,VFRET     SET GOOD RETURN                    GP99035\n         STC   R15,R         SET TO READ RECORD 1 IN VFDSCB     GP99035\nVFOPEN2  MVC   VFWORK(VFPATWN-VFPATWK),VFPATWK  @INPREAD REQUEST 90260\n         MVC   VFWORK(L'DCBDDNAM),CURDDNM  PROPAGATE DD          90260\n         LA    R0,INFMJFCB   GET JFCB                            90260\n         ST    R0,VFWORK+32  SET JFCB ADDRESS                    90260\n         LA    R0,DEBXLE     GET MEMBER RETURN AREA              90260\n         ST    R0,VFWORK+20  SET PDE REQUEST                     90260\n         OI    VFFLAG,VFGOPEN  SET VOLUME OPEN                   90260\n         B     VFEXIT        RETURN OK                           90260\n         SPACE 1                                                 90260\nVFSERCH  LTR   R7,R7         ANY ?                               90260\n         BZ    VFEXIT16      NO PARM, NO GLORY                   90260\n         MVC   DS1DSNAM,0(R7)  SAVE DATASET NAME                 90260\n         CLI   CURTYPE+2,UCB3DACC  DASD INPUT ?                  90260\n         BNE   VFSERF        NO; FAKE IT                         90260\n         SERVCALL DSDJ1,(R7)  GET DSCB FOR DESIRED DS            90260\n         MVC   DS1FMTID(LENDSCB1-L'DS1DSNAM),0(R1)  COPY DATA    90260\n         MVC   CCHHR3,DS1PTRDS  PRESET SEEK FUNCTION ADDRESS    GP99034\n         LA    R0,DS1DSNAM   POINT TO USER'S AREA                90260\n         STM   R15,R0,VFRET  RETURN CODE AND ADDRESS             90260\n         TM    VFFLAG,VFGDSN      DS OPEN                       GP10196\n         BZ    VFEXIT             NO                            GP10196\n         INPCLOSE DEV=6           CLOSE IT                      GP10196\n         ZI    VFFLAG,VFGDSN      SHOW CLOSED                   GP10196\n         B     VFEXIT        RETURN DSCB                        GP99033\n         SPACE 1                                                 90260\nVFSERF   BAS   R9,VFOPNCK    OPEN THE DATASET                   GP99033\n         XC    DS1FMTID(LENDSCB1-L'DS1DSNAM),DS1FMTID  CLEAR     90260\n         L     R7,VF@WORK    GET WORK AREA ADDRESS               90260\n         USING RDRMAP,R7     DECLARE MAPPING                     90260\n         L     R2,RDDCB@     GET DCB ADDRESS                     90260\n         MVC   DS1RECFM,DCBRECFM-IHADCB(R2)                      90260\n         MVC   DS1LRECL,DCBLRECL-IHADCB(R2)                      90260\n         MVC   DS1BLKL,DCBBLKSI-IHADCB(R2)                       90260\n         MVI   DS1DSORG,JFCORGPS                                 90260\n         MVI   DS1NOEPV,1 ONE EXTENT                             90260\n         MVI   DS1LSTAR+L'DS1LSTAR-1,1 ONE BLOCK                GP99033\n         MVI   DS1FMTID,C'1' FAKE ID                            GP99033\n         LA    R0,DS1DSNAM   SET FAKE RETURN                     90260\n         ST    R0,VFRET0     AND GIVE BACK TO USER               90260\n         B     VFEXIT                                            90260\n         DROP  R7                                                90260\n         SPACE 1                                                 90260\nVFNOTE   INC   CURTTR,INC=256,WORK=R15                           90260\n         ST    R15,VFRET0                                        90260\n         B     VFEXIT        QUIT                                90260\n         SPACE 1                                                 90260\nVFGETDE  BAS   R9,VFOPTST    SEE IF OPEN(ABLE)                  GP99033\nVFGETDEG INPREAD DEV=6       GET ANOTHER BLOCK  (./ ADD CARD)    90262\n         BXH   R15,R15,VFEODAD  GET OUT IF NO MORE               90260\n         MVC   VFRET0,PDNEXT  SET NEXT MEMBER ADDRESS            90260\n         OI    VFRET0,X'80'  SET 'LIST DONE' SIGNAL              90262\n         B     VFEXIT        RETURN                              90260\n         SPACE 1                                                 90260\n*        IN PUNK, POINT IS CALLED ONLY TO REPOSITION TO THE      90260\n*        START OF A MEMBER OR DATASET AFTER AT LEAST ONE READ.   90260\n*          THEREFORE, THE TTR IS IGNORED, AND THE DS RE-OPENED.  90260\n*        NOTE THAT VOLREAD POINT ALSO READS THE DESIRED BLOCK    90262\nVFPOINT  TM    DS1DSORG,JFCORGPO PARTITIONED ? 90260            GP99033\n         BNZ   VFPOINT2                                          90260\n         INPCLOSE DEV=6      CLOSE CURRENT DATASET               90260\n         NI    VFFLAG,255-VFGDSN  RESET DCB OPEN                 90260\n         B     VFREAD        AND OPEN AND READ                   90262\nVFPOINT2 INPKEEPM DEV=6      RE-OPEN THE CURRENT MEMBER          90262\n*        B     VFREAD        READ THE FIRST BLOCK                90262\n         SPACE 1                                                 90260\nVFREAD   BAS   R9,VFOPNCK    SEE IF OPEN(ABLE)                  GP99033\n         INPREAD DEV=6       GET NEXT BLOCK                      90260\n         BXH   R15,R15,VFEODAD  I/O ERROR ?                      90260\n         STM   R0,R1,VFRET0  RETURN LENGTH/ADDRESS               90260\n         L     R7,VF@WORK    GET WORK AREA ADDRESS               90260\n         USING RDRMAP,R7     DECLARE MAPPING                     90260\n*PUNK*   TM    RDFLAG,RDFACB VSAM ?                              90260\n*PUNK*   BNZ   VFREAD2       YES; RECORD LENGTH IS SET           90260\n*PUNK*   L     R2,RDDCB@     GET DCB ADDRESS                     90260\n*PUNK*   LH    R0,DS1LRECL GET ORIGINAL SIZE                     90260\n*PUNK*   TM    DS1RECFM,DCBRECU F OR V ?                         90260\n*PUNK*   BM    VFREAD2       YES                                 90260\n*PUNK*   LH    R0,DCBLRECL-IHADCB(R2)  ELSE USE CURRENT          90260\nVFREAD2  ST    R0,CURRECLN   FAKE FIXED LOGIC                    90260\n         LTR   R1,R1         IS THIS A NEW MEMBER ?              90260\n         BNM   VFEXIT        NO; RETURN                          90260\n         INPKEEP DEV=6       SET TO REREAD                       90260\n         B     VFEXIT4       AND RETURN END-FILE                 90260\n         DROP  R7                                                90260\n         SPACE 1                                                 90260\nVFEODAD  INPCLOSE DEV=6      END-FILE READ; CLOSE INPUT          90260\n         NI    VFFLAG,255-VFGDSN  SHOW CLOSED                   GP10196\n         B     VFEXIT4       SET EOF RETURN CODE                 90260\n         SPACE 1                                                 90260\nVFOPTST  LTR   R7,R7         ANY PARM ?                          90260\n         BZ    VFEXIT16      NO; GET OUT                         90260\nVFOPNCK  TM    VFFLAG,VFGOPEN+VFGDSN   WAS OPEN CALLED/OPENED ?  90260\n         BOR   R9            YES; RETURN TO CALLER               90260\n         BZ    VFEXIT16      NO; FAIL                            90260\n         OI    JFCBTSDM,JFCNWRIT+JFCNDSCB+JFCNDCB  NO MERGES     82053\n         MVI   JFCRECFM,X'C0'  FAKE AS RECFM=U FOR INPREAD      GP99035\n         MVC   JFCLRECL,=H'100'  AND SET DIRECTORY BLOCK SIZE   GP99035\n         AIF   (&SVCJFCB EQ 0).KILLMSK  NO MASK PROCESSING       90260\n         TM    DS1DSORG,JFCORGPO PARTITIONED ?                   90260\n         BZ    VFOPNOM       NO; DON'T MESS WITH SWA             90260\n         LA    R14,VFWORK                                        90260\n         LA    R15,ZEROES    NO MEMBER NAME                      90260\n         STM   R14,R15,VFDB    MAKE SKELETON                     90260\n         MVI   VFDB,X'01'      SET DDNAME ENTRY                  90260\n         MVI   VFDB+4,X'84'    SET MEMBER/END-LIST               90260\n         LA    R1,VFDB                                           90260\n         SVC   &SVCJFCB      REQUEST JFCB MODIFICATION           90260\nVFOPNOM  DS    0H                                                90260\n.KILLMSK INPOPEN VFWORK,OPT=(JFCB),DEV=6  OPEN THE DATASET       90260\nVFOPCOM  CH    R15,=H'4'     DID IT WORK ?                       90260\n         BH    VFEXIT8       NO                                  90260\n         ST    R0,VF@WORK    SAVE WORK AREA ADDRESS              90260\n         MVI   VFFLAG,VFGDSN+VFGOPEN  SHOW DSN OPEN              90260\n         BR    R9            ELSE RETURN                         90260\n         SPACE 1                                                GP99033\nVFDSCB   XR    R2,R2                                            GP99033\n         IC    R2,R          GET PREVIOUS RECORD NUMBER         GP99033\n         LA    R2,1(,R2)     BUMP BY ONE                        GP99033\n         STC   R2,R                                             GP99033\n         CLM   R2,1,DS4DEVDT  IS IT HIGHER THAN FITS ON TRACK ?  81340\n         BNH   FIND1         NO, CHECK AGAINST LAST DSCB 1      GP99033\n         MVI   R,1           YES, RESET RECORD NO. TO 1         GP99033\n         LH    R2,HH         GET TRACK NUMBER                   GP99033\n         LA    R2,1(,R2)     AND BUMP BY ONE                    GP99033\n         STH   R2,HH                                            GP99033\n         CH    R2,DS4DEVSZ+2  STILL IN SAME CYLINDER ?           81340\n         BL    FIND1         YES, CHECK FOR VALID ADDRESS       GP99033\n         STCM  R2,12,HH      NO, RESET TRACK TO 0                81340\n         LH    R2,CC         AND BUMP CYLINDER                  GP99033\n         LA    R2,1(,R2)     NUMBER BY 1                        GP99033\n         STH   R2,CC                                            GP99033\nFIND1    CLC   CCHHR,DS4HPCHR   BEYOND LAST FORMAT 1 ?           81340\n         BH    VFDSCBX       YES (MAY FAIL IF SORTED?)          GP99033\n         @OBTAIN GTDSCB1     LOOK FOR FMT1                      GP99033\n         ST    R15,VFRET     SET RETURN R15                     GP99033\n         B     *+4(R15)      CHECK RETURN                       GP99033\n         B     VFDSCB1       OK - BUT TAKEN FOR DSCB 1 ONLY     GP99033\n         B     VFEXIT        NOT MOUNTED                        GP99033\n         B     VFDSCB4   SAYS DSCB 4 NOT FOUND; BUT FOUND IT ANYWAY !\n         NOP   0             I/O ERROR ?                        GP99033\n         NOP   0             INVALID WORK-AREA ? COME ON ?      GP99033\n         B     VFDSCBX                                          GP99033\nIOERR    B     VFEXIT        SET FOR FORMAT 4 ERROR              81340\n         SPACE 1                                                GP99033\nVFDSCB1  CLI   DS1FMTID,X'FF'  END OF SORTED VTOC?              GP99033\n         BE    VFDSCBX                                          GP99033\n         CLI   DS1FMTID,C'1'    IS IT TYPE 1 DSCB ANYWAY ?      GP99033\n         BNE   VFDSCB        IF NOT TYPE 1 IT'S A VALID 'NOT FOUND'\n         MVC   CCHHR3,DS1PTRDS  PRESET SEEK FUNCTION ADDRESS    GP99034\nVFDSCB4  LA    R0,DS1DSNAM   POINT TO START                     GP99033\n         SR    R15,R15       FAKE GOOD RETURN                   GP99035\n         STM   R15,R0,VFRET  RETURN IN R0                       GP99035\n         TM    VFFLAG,VFGDSN      DS OPEN                       GP10196\n         BZ    VFEXIT             NO                            GP10196\n         INPCLOSE DEV=6           CLOSE IT                      GP10196\n         ZI    VFFLAG,VFGDSN      SHOW CLOSED                   GP10196\n         B     VFEXIT        RETURN FORMAT 4                    GP99033\nVFDSCBX  LA    R15,8                                            GP99033\n         SR    R0,R0                                            GP99033\n         STM   R15,R0,VFRET  RETURN END OF VOLUME               GP99033\n         B     VFEXIT                                           GP99033\n         SPACE 1                                                 81340\nVFSEEK   MVC   CCHHR3,VFREG1  SET CALLER'S CCHHR ADDRESS        GP99034\nVFDSC3   OBTAIN GTDSCB3      READ USER'S ADDRESS                GP99034\n         BXH   R15,R15,VFDSCBX  TAKE BAD EXIT                   GP99034\n         LA    R0,IECSDSL3   POINT TO RETURN                    GP99034\n         ST    R0,VFRET0                                        GP99034\n         MVC   CCHHR3,DS3PTRDS  PRESET SEEK FUNCTION ADDRESS    GP99034\n         B     VFEXIT                                           GP99034\n         SPACE 1                                                 81340\n*        LISTS FOR OBTAIN AND SCRATCH                           GP99033\n*                                                               GP99033\nPATFMT4  CAMLST SEARCH,1,2,3   DSN4,VOLSER,DS4IDFMT              81340\n         ORG   PATFMT4+4                                         81340\nPATFMT1  CAMLST SEEK,1,2,3  CCHHR,VOLSER,DS1DSNAM                81340\n         ORG   PATFMT1+4                                         81340\n         SPACE 2                                                 90260\nVFPATWK  INPWORK DDNAME,WIDTH=0,JFCB=1,PDE=3, ODAD=VFEODAD,            *\n               PDS=(DIR)     READ DIRECTORY ONLY                GP99035\nVFPATWN  EQU   *                                                 90260\n         LTORG ,\n         MEND  ,                                                GP10187\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@VOLREST": {"ttr": 2066, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x10\\x19\\x7f\\x01\\x10\\x19\\x7f\\x000\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2010-07-16T00:00:00", "modifydate": "2010-07-16T00:30:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                                GP10187\n         @VOLREST ,                                             GP10187\n.*  DATA AREAS FOR VOLFAKE ROUTINE (MACRO @VOLRESB)             GP10187\nFAKESAVE DS    18F           VOLFAKE SAVE AREA                   90260\nVFDB     DS    D                                                GP10187\n@OBTAIN  DC    A(0)          OPTIONAL @OBTAINS ROUTINE           90260\n@INPREAD DC    A(0)          NON-OPTIONAL INPUT READER           90260\nVFREG0   DC    A(0)    1/2                                       90260\nVFREG1   DC    A(0)    2/2                                       90260\nVFRET    DC    A(0)    1/3                                       90260\nVFRETCC  EQU   VFRET+3,1,C'X'  RETURN CODE                       90260\nVFRET0   DC    A(0)    2/3                                       90260\nVFRET1   DC    A(0)    3/3                                       90260\nVFWORK   DS    XL(VFPATWN-VFPATWK)  @INPREAD WORK AREA           90260\nVF@WORK  DS    A             ADDRESS OF @INPREAD DSECT           90260\nGTDSCB4  CAMLST SEARCH,DS1DSNAM,VOLSER,DS4IDFMT                  81340\nGTDSCB1  CAMLST SEEK,CCHHR,VOLSER,DS1DSNAM                       81340\nGTDSCB3  CAMLST SEEK,3,VOLSER,IECSDSL3                          GP99034\nCCHHR    DS    CL5' '        CCHHR OF THIS/NEXT DSCB             81340\nCC       EQU   CCHHR,2         CYLINDER                         GP99033\nHH       EQU   CCHHR+2,2         TRACK                          GP99033\nR        EQU   CCHHR+4,1            RECORD                       81340\nVFFLAG   DC    X'00'         VOLFAKE PROCESSING FLAG             90260\nVFGOPEN  EQU   X'80'           OPEN WAS CALLED                   90260\nVFGDSN   EQU   X'40'           DATASET OPEN                      90260\nVFGMEM   EQU   X'20'           GETDE WAS CALLED ON MEMBER TRANSITION\n         MEND  ,                                                GP10187\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AMODE": {"ttr": 2306, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x041O\\x01\\x041O!\\x00\\x00\\x04\\x00\\x04\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2004-11-09T00:00:00", "modifydate": "2004-11-09T21:00:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         AMODE ,\n.*   DUMMY MACRO CREATED TO SUPPORT ASSEMBLY UNDFER HERCULES (XF ASM)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AM24": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x041\\x9f\\x01\\x041\\x9f#\\x07\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2004-11-14T00:00:00", "modifydate": "2004-11-14T23:07:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      AM24  &WORK=R1                                 ADDED ON 90346\n         GBLB  &MVSXA                                           GP04234\n         GBLC  &SYSSPLV                                          93097\n         AIF   (NOT &MVSXA AND '&SYSSPLV' LT '2').TLAB           93097\n&NM      LA    &WORK,*+6     GET PAST BSM WITH BIT 0 OFF\n         BSM   0,&WORK       CONTINUE IN 24-BIT MODE\n         MEXIT ,\n.TLAB    AIF   ('&NM' EQ '').MEND\n&NM      DS    0H            DEFINE LABEL ONLY\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AM31": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x041\\x9f\\x01\\x041\\x9f#\\x07\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2004-11-14T00:00:00", "modifydate": "2004-11-14T23:07:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      AM31  &WORK=R1                                 ADDED ON 90346\n         GBLB  &MVSXA                                           GP04234\n         GBLC  &SYSSPLV                                          93097\n         AIF   (NOT &MVSXA AND '&SYSSPLV' LT '2').TLAB           93097\n&NM      LA    &WORK,*+10    GET PAST BSM WITH BIT 0 ON\n         O     &WORK,=X'80000000'  SET MODE BIT\n         BSM   0,&WORK       CONTINUE IN 31-BIT MODE\n         MEXIT ,\n.TLAB    AIF   ('&NM' EQ '').MEND\n&NM      DS    0H            DEFINE LABEL ONLY\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ARM": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x022\\x9f\\x01\\x041\\x9f#\\x12\\x00=\\x009\\x00\\x02\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-11-25T00:00:00", "modifydate": "2004-11-14T23:12:00", "lines": 61, "newlines": 57, "modlines": 2, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      ARM   &ACT,&AR=\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*   THIS MACRO SETS AR MODE ON OR OFF, SETS MATCHING GLOBAL,         *\n.*   AND OPTIONALLY LOADS/STORES CONTIGUOUS ACCESS REGISTERS          *\n.*                                                                    *\n.*   ARM  ON                 BEGIN ACCESS REGISTER MODE               *\n.*   ARM  OFF                END ACCESS REGISTER MODE                 *\n.*                                                                    *\n.*     OPTIONAL:  AR=ADDR          LAM/STAM AR0,AR15,ADDR             *\n.*     OPTIONAL:  AR=(R,ADDR)      LAM/STAM AR0,AR15,ADDR             *\n.*     OPTIONAL:  AR=(RS,RT,ADDR)  LAM/STAM RS,RT,ADDR                *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         GBLB  &MVSXA                                           GP04234\n         LCLC  &R1,&R2,&ADDR\n         LCLB  &EXPAR\n         LCLA  &K\n&K       SETA  N'&AR\n         AIF   (&K EQ 0).NOK\n&EXPAR   SETB  1\n         AIF   (&K EQ 1).OK1\n         AIF   (&K EQ 2).OK2\n         AIF   (&K EQ 3).OK3\n&EXPAR   SETB  0\n  MNOTE 8,'ARM: TOO MANY OPERANDS AR=&AR'\n         AGO   .NOK\n.OK1     ANOP  ,\n&R1      SETC  'R0'\n&R2      SETC  'R15'\n&ADDR    SETC  '&AR(1)'\n         AGO   .NOK\n.OK2     ANOP  ,\n&R1      SETC  '&AR(1)'\n&R2      SETC  '&AR(1)'\n&ADDR    SETC  '&AR(2)'\n         AGO   .NOK\n.OK3     ANOP  ,\n&R1      SETC  '&AR(1)'\n&R2      SETC  '&AR(2)'\n&ADDR    SETC  '&AR(3)'\n.NOK     AIF   (&MVSXA).ENOUGH                                  GP04234\n&NM      MACPARM MODE=LBL                                       GP04234\n         MEXIT ,                                                GP04234\n.ENOUGH  AIF   ('&ACT' EQ 'ON' OR '&ACT' EQ 'S' OR '&ACT' EQ 'SEC' OR  *\n               '&ACT' EQ '512' OR '&ACT' EQ 'X''200''').ARON\n         AIF   ('&ACT' EQ 'OFF' OR'&ACT' EQ 'P' OR '&ACT' EQ 'PRI' OR  *\n               '&ACT' EQ '0' OR '&ACT' EQ 'X''0''').AROF\n MNOTE 8,'ARM: INVALID ACTION &ACT; SPECIFY ON OR OFF'\n.ARON    AIF   (NOT &EXPAR).NOLAM\n&NM      MACPARM &R1,&R2,&ADDR,OP=LAM,MODE=THREE\n.NOLAM   MACPARM 512,OP=SAC,MODE=ONE\n         SYSSTATE ASCENV=AR\n         MEXIT ,\n.AROF    ANOP  ,\n&NM      MACPARM 0,OP=SAC,MODE=ONE\n         SYSSTATE ASCENV=P\n         AIF   (NOT &EXPAR).NOSTAM\n         MACPARM &R1,&R2,&ADDR,OP=LAM,MODE=THREE\n.NOSTAM  MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ARMODE": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x00\\x19o\\x01\\x041\\x9f#\\x13\\x00E\\x00@\\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-07-14T00:00:00", "modifydate": "2004-11-14T23:13:00", "lines": 69, "newlines": 64, "modlines": 3, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      ARMODE &OP,&@ALET,&AR=R14,&WK=R14\n.*                                                                    *\n.*   ACCESS SPACE CONTROL SUPPORT                                     *\n.*                                                                    *\n.*   ARMODE 0 | P | PRI   SETS PRIMARY MODE                           *\n.*   ARMODE     S | SEC   SETS SECONDARY MODE                         *\n.*   ARMODE     H | HOME  SETS HOME SPACE MODE (PRIVILEGED)           *\n.*   ARMODE AR            SETS ACCESS REGISTER MODE                   *\n.*   ARMODE AR,@ALET,AR=N SETS AR#N FROM @ALET, THEN AR MODE          *\n.*   ARMODE ANY           CONTENTS OF WORD ANY TO WK, THEN SAC 0(WK)  *\n.*   ARMODE (R)           SAC 0(R)                                    *\n.*                                                                    *\n.*   ALL OF THE ABOVE ISSUE A SYSSTATE =P (PRIMARY), ELSE =AR         *\n.*                                                                    *\n.*   ARMODE SAVE          COPIES IAC MODE INTO WK REGISTER            *\n.*   ARMODE SAVE,WORD     IAC MODE INTO WK REGISTER AND STORE TO WORD *\n.*                                                                    *\n         GBLC  &MACPLAB\n         GBLB  &MVSXA                                           GP04234\n         AIF   (&MVSXA).ENOUGH                                  GP04234\n&NM      MACPARM MODE=LBL                                       GP04234\n         MEXIT ,                                                GP04234\n.ENOUGH  ANOP  ,                                                GP04234\n&MACPLAB SETC  '&NM'\n         LCLC  &EXP,&AEO\n         LCLA  &K\n&EXP     SETC  '0'\n&AEO     SETC  'P'\n         AIF   (T'&OP NE 'O').HAVEOP\n         MNOTE 8,'ARMODE: FUNCTION OR OPERAND REQUIRED'\n         MEXIT ,\n.*\n.HAVEOP  AIF   ('&OP' EQ '0').SAC\n         AIF   ('&OP' EQ 'P').SAC\n         AIF   ('&OP' EQ 'PRI').SAC\n.*\n&AEO     SETC  'AR'\n&EXP     SETC  'X''100'''\n         AIF   ('&OP' EQ 'S').SAC\n         AIF   ('&OP' EQ 'SEC').SAC\n.*\n&EXP     SETC  'X''300'''\n         AIF   ('&OP' EQ 'H').SAC\n         AIF   ('&OP' EQ 'HOME').SAC\n.*\n&EXP     SETC  'X''200'''\n         AIF   ('&OP' EQ 'AR').SAR\n         AIF   ('&OP' EQ 'SAVE').IAC\n.*  NOT A PREDEFINED OPERAND\n&K       SETA  K'&OP\n         AIF   (&K LT 3).LOAD   ?\n         AIF   ('&OP'(1,1) NE '(' OR '&OP'(2,1) EQ '(').LOAD\n         AIF   ('&OP'(&K,1) NE ')' OR '&OP'(&K-1,1) EQ ')').LOAD\n         MACPARM 0(&OP(1)),OP=SAC,MODE=ONE\n         AGO   .STATE\n.LOAD    MACPARM &WK,&OP,OP=L  LOAD STORED VALUE (FROM IAC?)\n         MACPARM 0(&WK),OP=SAC,MODE=ONE  IF 0, NEED ASCENV=P\n         AGO   .STATE\n.IAC     MACPARM &WK,OP=IAC,MODE=ONE\n         AIF   (T'&@ALET EQ 'O').MEND\n         MACPARM &WK,&@ALET,OP=ST,MODE=REV\n         MEXIT ,\n.SAR     AIF   (T'&@ALET EQ 'O').SAC\n         MACPARM &WK,@ALET,OP=L\n         MACPARM &AR,(&WK),OP=SAR,OPR=SAR,MODE=EQU\n.SAC     MACPARM &EXP,OP=SAC,MODE=ONE\n.STATE   SYSSTATE ASCENV=&AEO\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUTHBCDE": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x062\\x0f\\x01\\x062\\x0f#R\\x00\\x9e\\x019\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2006-11-16T00:00:00", "modifydate": "2006-11-16T23:52:00", "lines": 158, "newlines": 313, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO (AUTHORIZED VERSION)\n&REF     AUTHBCDE &RU,&LENGTH=,&SP=0,&WORKREG=,&BNDRY=DBLWD,           X\n               &EP=BUILDCDE,&LOC=,&AUTH=YES,&RENT=,&SYS=MVS     GP06320\n.**********************************************************************\n.*                                                                    *\n.* MACRO NAME = BUILDCDE - RENAMED TO AUTHBCDE FOR AC=1 USERS         *\n.*                                                                    *\n.* DESCRIPTIVE NAME = GET STORAGE AND BUILD A CDE TO NAME IT          *\n.*                                                                    *\n.* FUNCTION = MAKES A STORAGE AREA EASIER TO LOCATE IN A              *\n.*            DUMP BY MAKING IT APPEAR AS A LOAD_MODULE.              *\n.*                                                                    *\n.* STATUS = R200                                                      *\n.*                                                                    *\n.* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                       *\n.*                                                                    *\n.* ENVIRONMENT = SEE BELOW                                            *\n.*                                                                    *\n.*     AMODE = ANY                                                    *\n.*     SCP   = MVS/XA OR MVS/ESA   |  MVS 3.8J WITH SYS=MVS           *\n.*     KEY   = USER                                                   *\n.*     MODE  = PROBLEM                                                *\n.*     APF   = OFF                                                    *\n.*                                                                    *\n.* OPERATION = BUILDCDE USES THE \"LOADER\" FORM OF IDENTIFY TO CREATE  *\n.*             A MAJOR CDE AND CORRESPONDING XL, THEN ISSUES A LOAD   *\n.*             SVC TO CREATE AN LLE AND ASSOCIATE THE CDE WITH THE    *\n.*             CURRENT TCB.                                           *\n.*                                                                    *\n.* INVOCATION = SEE BELOW                                             *\n.*                                                                    *\n.*          (BEFORE)     GETMAIN RU,LV=20000                          *\n.*                                                                    *\n.*          (AFTER)      GETMAIN RU,LV=20000                          *\n.*                       BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM        *\n.*                                                                    *\n.* NOTES = SEE BELOW                                                  *\n.*                                                                    *\n.*        BUILDCDE MAY BE ISSUED MORE THAN ONCE, PROVIDED THE EP      *\n.*        KEY-WORD HAS A DIFFERENT VALUE EACH TIME.                   *\n.*                                                                    *\n.*        IF STORAGE WAS ALLOCATED IN SUB-POOL ZERO (SP=0 IS          *\n.*        SPECIFIED OR DEFAULTED TO IN THE GETMAIN MACRO),            *\n.*        THE DELETE MACRO MAY BE ISSUED AGAINST THE SPECIFIED EP     *\n.*        TO DELETE THE CDE AND FREE UP THE STORAGE.                  *\n.*                                                                    *\n.*        IF GETMAIN SPECIFIES A NON-ZERO SUBPOOL, THE DELETE MACRO   *\n.*        DELETES THE CDE BUT DOES NOT FREE UP THE STORAGE:  YOU      *\n.*        MUST ISSUE FREEMAIN YOURSELF.                               *\n.*                                                                    *\n.*        IN A MAJOR CDE CREATED BY THE \"LOADER\" FORM OF IDENTIFY,    *\n.*        THE \"RENT\" AND \"REUS\" ATTRIBUTES ARE OFF.  THIS MEANS       *\n.*        THAT YOU MAY NOT ISSUE LOAD AGAINST THE EP NAME (BUILDCDE   *\n.*        HAS ALREADY ISSUED LOAD), BUT YOU MAY ISSUE LINK, ATTACH    *\n.*        OR XCTL IF YOU WANT TO (ONCE ONLY).  YOU MAY ALSO ISSUE     *\n.*        THE STANDARD FORM OF IDENTIFY TO DEFINE SECONDARY ENTRY     *\n.*        POINTS WHICH HAVE THE \"RENT\" ATTRIBUTE.                     *\n.*        YOU MAY USE RENT=YES TO SET RENT/REUS IF AUTHORIZED   GP    *\n.*                                                                    *\n.*        IF THIS MACRO IS USED BY AN AUTHORIZED PROGRAM, THEN        *\n.*        A S306 ABEND WILL OCCUR UNLESS AUTH=YES IS SPECIFIED OR     *\n.*        DEFAULTED.                                            GP    *\n.*                                                                    *\n.*        THE IDENTIFY MACRO SUPPLIED IN SYS1.MACLIB SUPPORTS THE     *\n.*        \"LOADER\" FORM, BUT THE FORMAT OF THE PARAMETER LIST IS      *\n.*        NOT DOCUMENTED, AS FAR AS I KNOW.  THE RETURN CODES X'18'   *\n.*        OR X'1C' MAY BE RETURNED IN R15 WHEN THE PARAMETER LIST     *\n.*        IS INVALID.  THESE RETURN CODES ARE DOCUMENTED ALONG WITH   *\n.*        THE IDENTIFY MACRO.                                         *\n.*                                                                    *\n.*        WHEN THE LOAD-LIST IS EMPTY (I.E. NO LOAD HAS BEEN ISSUED   *\n.*        FOR THIS TCB YET), IDENTIFY FAILS WITH A RETURN CODE 12.    *\n.*        THIS CAN BE CIRCUMVENTED BY ISSUING THE FOLLOWING SEQUENCE: *\n.*                                                                    *\n.*                       LOAD    EP=IEFBR14                           *\n.*                       L     R0,length                              *\n.*                       AUTHBCDE RU,LENGTH=(0),ADDR=(1),EP=DYNAM     *\n.*                       DELETE  EP=IEFBR14                           *\n.*                                                                    *\n.**********************************************************************\n.*     CORRECTIONS AND CHANGES BY GERHARD POSTPISCHIL  2006-11-15     *\n.*        RETROFIT TO FUNCTION CORRECTLY UNDER MVS 3.8J (SYS=MVS)     *\n.*        CHANGE TO ASSEMBLE UNDER ASM/XF                             *\n.*        ADDED AUTH=  RENT=  AND SYS=  KEYWORDS                      *\n.**********************************************************************\n         LCLA  &O16                    OFFSETS IN PARM LIST     GP06320\n         LCLC  &LABEL,&R               FOR ASM XF               GP06320\n.*   USE SYS=MVS TO EXPAND FOR MVS 3.8J                         GP06320\n      MNOTE *,'       GETMAIN &RU,LV=&LENGTH,SP=&SP,BNDRY=&BNDRY,&LOC='\n&REF     GETMAIN &RU,LV=&LENGTH,SP=&SP,BNDRY=&BNDRY,&LOC=\n&O16     SETA  16                      OFFSET TO EXTENT LIST    GP06320\n         AIF   ('&SYS' NE 'MVS').NEWSYS                         GP06320\n&O16     SETA  12                      OFFSET TO EXTENT LIST    GP06320\n.NEWSYS  ANOP  ,                       XA, ESA, .....           GP06320\n         ST    R1,0(,R1)               STORE ENTRY-POINT ADDR\n         MVC   4(8,R1),=CL8'&EP '      CDNAME                   GP06320\n         AIF   ('&SYS' EQ 'MVS').OLDSYS   SHORTER LIST IN 3.8   GP06320\n         XC    12(4,R1),12(R1)         CLEAR BYTES 12-15\n.OLDSYS  LA    R14,16                  LENGTH OF PSEUDO XL      GP06320\n         LA    R15,1                   NUMBER OF RELOCATION FACTORS\n         STM   R14,R1,&O16.(R1)        FORMAT BYTES 16-23       GP06320\n         MVI   &O16+8(R1),X'80'        END OF LIST              GP06320\n         LR    R14,R1                  SAVE GETMAINED ADDRESS\n         MNOTE *,'       IDENTIFY EPLOC=0,ENTRY=(R1)'\n         SLR   R0,R0                   LOADER-TYPE IDENTIFY\n         SVC   41                      ISSUE IDENTIFY SVC\n&LABEL   SETC  'IHB&SYSNDX'\n&R       SETC  '&WORKREG(1)'           SHORT FORM\n         AIF   (T'&WORKREG NE 'O').WKREG2\n         MNOTE 4,'WORKREG OPERAND OMITTED, WORKREG=(R2) ASSUMED'\n&R       SETC  'R2'\n.WKREG2  L     &R,X'021C'              PSATOLD (MY TCB)\n         L     &R,TCBJSCB-TCB(,&R)     MY JSCB\n         USING IEZJSCB,&R\n         TM    JSCBOPTS,JSCBAUTH       CHECK AUTHORIZATION\n         BZ    &LABEL.N                JUMP IF NOT AUTHORIZED\n         MODESET KEY=ZERO              SWITCH TO KEY ZERO\n         NI    JSCBOPTS,255-JSCBAUTH   TURN APF FLAG OFF\n         SYNCH &LABEL.L                EXECUTE ROUTINE WITH TCB KEY\n         OI    JSCBOPTS,JSCBAUTH       TURN APF FLAG BACK ON\n         AIF   ('&AUTH' NE 'YES' AND '&RENT' NE 'YES').NOAPF    GP06320\n.*   IN MVS 3.8J, THE TEST PROGRAM'S LINK FAILS WITH IEA703I 306-C\n.*     TO AVOID THIS, WE SET THE CDE TO AUTH LIB & AUTH MODULE\n.*     WHEN THE USER REQUESTS AUTH=YES                          GP06320\n.*     WHEN RENT=YES, CDE IS FLAGGED REENTRANT AND REUSABLE     GP06320\n         L     &R,X'021C'              PSATOLD (MY TCB)         GP06320\n         ICM   &R,15,TCBJPQ-TCB(&R)    GET JOB PACK QUEUE       GP06320\n         BZ    &LABEL.C                                         GP06320\n         USING CDENTRY,&R              CDE MAPPING (IHACDE)     GP06320\n&LABEL.A CLC   =CL8'&EP ',CDNAME       MATCHING MODULE ?        GP06320\n         BE    &LABEL.B                YES; SET IT              GP06320\n         ICM   &R,15,CDCHAIN           ANOTHER CDE ON CHAIN?    GP06320\n         BNZ   &LABEL.A                YES; TRY IT              GP06320\n         B     &LABEL.C                OOPS - WHAT HAPPENED?    GP06320\n&LABEL.B DS    0H                                               GP06320\n         AIF   ('&AUTH' NE 'YES').NOAPFL                        GP06320\n         OI    CDATTR2,CDSYSLIB+CDAUTH  FLAG AUTHORIZED         GP06320\n.NOAPFL  AIF   ('&RENT' NE 'YES').NOAPF                         GP06320\n         OI    CDATTR,CDREN+CDSER      SET RENT/REUS            GP06320\n.NOAPF   DROP  &R\n&LABEL.C LR    &R,R0                   SAVE EP ADDRESS\n         MODESET KEY=NZERO             SWITCH TO TCB KEY\n         LR    R0,&R                   EP ADDRESS\n         B     &LABEL.X\n         AIF   ('&SYS' EQ 'MVS').OLDASM                         GP06320\n&LABEL.I EQU   &R-2                    WORKREG MUST BE R2-R13\n&LABEL.J EQU   13-&R                   WORKREG MUST BE R2-R13\n.OLDASM  ANOP  ,           WORKS ONLY IF &R PREVIOUSLY DEFINED  GP06320\n&LABEL.N LA    R14,&LABEL.X            RET FROM LOAD\n         MNOTE *,'       LOAD EP=&EP,DCB=0'\n&LABEL.L LA    R0,=CL8'&EP'            POINT TO EP NAME         GP06320\n         SLR   R1,R1                   NO DCB FOR LOAD\n         SVC   8                       ISSUE LOAD SVC\n         BR    R14                     RETURN NEXT OR SYNCH EX\n&LABEL.X LR    R1,R0                   ADDRESS IN R1\n         SLR   R0,R0\n         ICM   R0,B'0111',&O16+9(R14)  LENGTH IN R0             GP06320\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A64D": {"ttr": 2320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x02%\\x0f\\x01\\x13\\x12\\x1f\\x02\\x03\\x003\\x00%\\x00\\x05\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-09-07T00:00:00", "modifydate": "2013-05-01T02:03:00", "lines": 51, "newlines": 37, "modlines": 5, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      A64D  &CTR,&INC,&WK=R14\n         GBLC  &MACPLAB\n.*  ADD A 64-BIT VALUE TO A 64-BIT VALUE.\n.*  WK MUST BE AN EVEN REGISTER, AND NOT THE '(INC)' PAIR\n.*  CTR MAY BE A DOUBLE-WORD STORAGE ADDRESS, OR AN EVEN REGISTER\n.*  INC MAY BE A DOUBLE-WORD STORAGE ADDRESS, OR AN EVEN REGISTER\n.*                                                   UPD 2013/05/01 GYP\n         LCLA  &K\n         LCLB  &TOR,&FRO     ON IF REGISTER\n         LCLC  &N,&RE,&RO,&FE,&FO\n&N       SETC  'ZZA'.'&SYSNDX'\n&MACPLAB SETC  '&NM'\n         AIF   ('&CTR(1)' EQ '&WK').REGROUT\n&K       SETA  K'&CTR\n         AIF   (&K LT 3).NOTROUT\n         AIF   ('&CTR'(1,1) NE '(').NOTROUT  POSSIBLE REGISTER SPEC?\n         AIF   ('&CTR'(2,1) EQ '(').NOTROUT  EXPRESSION?\n         AIF   ('&CTR'(&K,1) NE ')').NOTROUT  POSSIBLE REGISTER SPEC?\n         AIF   ('&CTR'(&K-1,1) EQ ')').NOTROUT  EXPRESSION?\n.REGROUT ANOP  ,\n&TOR     SETB  1\n&RE      SETC  '(&CTR(1))'\n&RO      SETC  '(1+&CTR(1))'\n.NOTROUT  ANOP  ,\n&RE      SETC  '&WK'\n&RO      SETC  '1+&WK'\n.LOOKINC ANOP  ,\n&K       SETA  K'&INC\n         AIF   (&K LT 3).NOTRINC\n         AIF   ('&INC'(1,1) NE '(').NOTRINC  POSSIBLE REGISTER SPEC?\n         AIF   ('&INC'(2,1) EQ '(').NOTRINC  EXPRESSION?\n         AIF   ('&INC'(&K,1) NE ')').NOTRINC  POSSIBLE REGISTER SPEC?\n         AIF   ('&INC'(&K-1,1) EQ ')').NOTRINC  EXPRESSION?\n.REGRINC ANOP  ,\n&FRO     SETB  1\n&FE      SETC  '(&INC(1))'\n&FO      SETC  '(1+&INC(1))'\n         AGO   .PROCESS\n.NOTRINC ANOP  ,\n&FE      SETC  '&INC'\n&FO      SETC  '4+&INC'\n.PROCESS AIF   (&TOR).NOLM   OUTPUT IN REGS - SKIP LOAD\n         MACPARM &RE,&RO,&CTR,OP=LM,MODE=THREE\n.NOLM    MACPARM &RO,&FO,OP=AL,OPR=ALR\n         MACPARM 12,&N.N,OP=BC   NO CARRY\n         MACPARM &RE,=F'1',OP=A     PROPAGATE CARRY\n&N.N     MACPARM &RE,&FE,OP=A,OPR=AR\n         AIF   (&TOR).MEND\n         MACPARM &RE,&RO,&CTR,OP=STM,MODE=THREE\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A64F": {"ttr": 2322, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x02%\\x0f\\x01\\x13\\x12\\x1f\\x02\\x17\\x001\\x00$\\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-09-07T00:00:00", "modifydate": "2013-05-01T02:17:00", "lines": 49, "newlines": 36, "modlines": 3, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      A64F  &CTR,&INC,&WK=R14\n         GBLC  &MACPLAB\n.*  ADD A 32-BIT VALUE TO A 64-BIT VALUE.\n.*  WK MUST BE AN EVEN REGISTER, AND NOT THE '(INC)' REGISTER\n.*  CTR MAY BE A DOUBLE-WORD STORAGE ADDRESS, OR AN EVEN REGISTER\n.*  INC MAY BE A WORD STORAGE ADDRESS, OR ANY UNUSED REGISTER\n.*                                                   UPD 2013/05/01 GYP\n         LCLA  &K\n         LCLB  &TOR,&FRO     ON IF REGISTER\n         LCLC  &N,&RE,&RO,&FO\n&N       SETC  'ZZA'.'&SYSNDX'\n&MACPLAB SETC  '&NM'\n         AIF   ('&CTR(1)' EQ '&WK').REGROUT\n&K       SETA  K'&CTR\n         AIF   (&K LT 3).NOTROUT\n         AIF   ('&CTR'(1,1) NE '(').NOTROUT  POSSIBLE REGISTER SPEC?\n         AIF   ('&CTR'(2,1) EQ '(').NOTROUT  EXPRESSION?\n         AIF   ('&CTR'(&K,1) NE ')').NOTROUT  POSSIBLE REGISTER SPEC?\n         AIF   ('&CTR'(&K-1,1) EQ ')').NOTROUT  EXPRESSION?\n.REGROUT ANOP  ,\n&TOR     SETB  1\n&RE      SETC  '(&CTR(1))'\n&RO      SETC  '(1+&CTR(1))'\n.NOTROUT  ANOP  ,\n&RE      SETC  '&WK'\n&RO      SETC  '1+&WK'\n.LOOKINC ANOP  ,\n&K       SETA  K'&INC\n         AIF   (&K LT 3).NOTRINC\n         AIF   ('&INC'(1,1) NE '(').NOTRINC  POSSIBLE REGISTER SPEC?\n         AIF   ('&INC'(2,1) EQ '(').NOTRINC  EXPRESSION?\n         AIF   ('&INC'(&K,1) NE ')').NOTRINC  POSSIBLE REGISTER SPEC?\n         AIF   ('&INC'(&K-1,1) EQ ')').NOTRINC  EXPRESSION?\n.REGRINC ANOP  ,\n&FRO     SETB  1\n&FO      SETC  '(&INC(1))'\n         AGO   .PROCESS\n.NOTRINC ANOP  ,\n&FO      SETC  '&INC'\n.PROCESS AIF   (&TOR).NOLM   OUTPUT IN REGS - SKIP LOAD\n         MACPARM &RE,&RO,&CTR,OP=LM,MODE=THREE\n.NOLM    MACPARM &RO,&FO,OP=AL,OPR=ALR\n         MACPARM 12,*+4+4,OP=BC   NO CARRY\n         MACPARM &RE,=F'1',OP=A     PROPAGATE CARRY\n         AIF   (&TOR).MEND\n         MACPARM &RE,&RO,&CTR,OP=STM,MODE=THREE\n.MEND    MACPARM MODE=LBL\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BAKR": {"ttr": 2324, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x043\\x1f\\x01\\x043\\x1f\\x01\\x14\\x00\\t\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2004-11-26T00:00:00", "modifydate": "2004-11-26T01:14:00", "lines": 9, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BAKR  &R,&A                                    ADDED ON 04234\n.*\n.*    HERCULES MVS 3.8 SUPPORT\n.*\n         GBLB  &MVSXA        SET BY OPTIONGB/SYSPARM            GP04234\n         GBLC  &MACPLAB\n&NM      STM   R14,R12,12(R13)  SAVE STUFF\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BALS": {"ttr": 2326, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x04\\x00\\x00\\x01\\x041\\x9f\\x01\\x081\\x1f\\x16X\\x00\\x1a\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.04", "flags": 0, "createdate": "2004-11-14T00:00:00", "modifydate": "2008-11-06T16:58:00", "lines": 26, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BALS  &R,&A                                    ADDED ON 90308\n.*\n.*       THIS MODULE GENERATES EITHER A BAL OR A BAS, OR POSSIBLY\n.*       A BALR OR BASR, DEPENDING ON THE SYSTEM. BAS AND BASR\n.*       REQUIRE AT LEAST SP 2 (MVS/XA)\n.*\n         GBLB  &MVT\n         LCLA  &K\n&K       SETA  K'&A\n         AIF   (&K LT 3).NORMAL\n         AIF   ('&A'(1,1) NE '(' OR '&A'(2,1) EQ '(').NORMAL\n         AIF   ('&A'(&K,1) NE ')' OR '&A'(&K-1,1) EQ ')').NORMAL\n         AIF   (&MVT).BALR\n&NM      DC    0H'0',AL.4(0,13,&R,&A(1))  BASR\n         MEXIT ,\n.BALR    ANOP  ,\n&NM      BALR  &R,&A(1)\n         MEXIT ,\n.NORMAL  ANOP  ,\n&NM      BAL   &R,&A\n         AIF   (&MVT).MEND\n         ORG   *-4\n         DC    X'4D'         BAS\n         ORG   *+3\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BALSR": {"ttr": 2328, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x03\\x00\\x00\\x01\\x041\\x9f\\x01\\x08'\\x8f#\\x06\\x00\\x0e\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.03", "flags": 0, "createdate": "2004-11-14T00:00:00", "modifydate": "2008-10-04T23:06:00", "lines": 14, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BALSR &R,&S                                    ADDED ON 92281\n.*\n.*       THIS MODULE GENERATES EITHER\n.*       A BALR OR BASR, DEPENDING ON THE SYSTEM. BAS AND BASR\n.*       REQUIRE AT LEAST SP 2 (MVS/XA)\n.*\n         GBLB  &MVT          SET BY OPTIONGB/SYSPARM            GP04234\n         AIF   (&MVT).BAL\n&NM      DC    0H'0',AL.4(0,13,&R,&S)\n         MEXIT ,\n.BAL     ANOP  ,\n&NM      BALR  &R,&S\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BANDAID": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x01\\x03\\x00\\x1f\\x01\\x11\"\\x9f\"\\x08\\x00E\\x00\\x03\\x00\\x0e\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2003-01-01T00:00:00", "modifydate": "2011-08-17T22:08:00", "lines": 69, "newlines": 3, "modlines": 14, "user": "GERHARD"}, "text": "         MACRO ,                                       NEW 2003/01/01\n&NM      BANDAID &ARG,&A=\n         GBLC  &LOCAL                                           GP09301\n         GBLB  &ZZSTAE,&ZZSPIE\n         LCLA  &OV,&I,&J,&K,&L,&N\n         LCLB  &SYSDEB,&SPIE\n         LCLC  &C,&OPT,&OPT1,&OPT2,&LBL\n&N       SETA  N'&SYSLIST    NUMBER OF ARGUMENTS\n&LBL     SETC  '&NM'\n         AIF   (&N GT 0).OKARG\n.NOARG   MNOTE 8,'BANDAID REQUIRES AN ARGUMENT'\n         MEXIT ,\n.OKARG   AIF   (&L GE &N).EXPAND\n&L       SETA  &L+1\n&OPT     SETC  '&SYSLIST(&L)'\n         AIF   ('&OPT' EQ '').OKARG\n&C       SETC  '&OPT'(1,3).'   '\n&C       SETC  '&C'(1,3)\n&I       SETA  -2\n&J       SETA  1+8*3\n.ARGLOOP AIF   (&I GE &J).FAIL\n&I       SETA  &I+3\n         AIF   ('&C' NE 'INITERCLOSPITRARESPUSPOP'(&I,3)).ARGLOOP\n         AIF   (&I GE 7).PART2\n         AIF   (&SYSDEB).DUPE\n&SYSDEB  SETB  1\n&OPT1    SETC  '&OPT'\n         AGO   .OKARG\n.*\n.PART2   AIF   (&SPIE).DUPE\n&OV      SETA  ((&I-6)/3)\n&OPT2    SETC  '&OPT'\n&SPIE    SETB  1\n         AGO   .OKARG\n.*\n.EXPAND  AIF   (NOT &SYSDEB AND NOT &SPIE).NOARG\n         AIF   (NOT &SYSDEB).DONDEB\n.*   When OPT is INIT:        FOR TERM INVOKES WITHDRAWAL\n.*   USE THIS MACRO TO INITIALIZE THE @BANDAID (SYSDEBUG) ESTAE/ESPIE\n.*   SERVICE ROUTINE.  REQUIRES //SYSDEBUG OUTPUT DD\n&LBL     LOAD  EP=@BANDAID   LOAD @BANDAID, ISSUE ESTAE, ESPIE, ETC.\n&LBL     SETC  ' '\n         LR    R15,R0\n         L     R0,=CL4'&OPT1'  PASS OPTION (FOR LATER ESPIE SUPPORT)\n         BASSM R14,R15       INVOKE WITH AMODE31\n&ZZSTAE  SETB  1\n.*\n.DONDEB  AIF  (NOT &SPIE).MEND\n.*   When OPT is SPIE:  initialize SPIE services\n.*   When OPT is TRAP:  specify address of recovery routine\n.*   When OPT is RESET: cancel recovery\n.*   When OPT is PUSH:  specify new recovery routine; save old one\n.*   When OPT is POP:   cancel current and reinstate old recovery\n.*   When OPT is CLOSE: close SYSDEBUG DCB, remove SPIE\n.*   REQUIRES //SYSDEBUG OUTPUT DD\n&LBL     LOAD  EP=@SPIEDER   LOAD @SPIEDER, ISSUE ESPIE, ETC.\n&LBL     SETC  ' '\n         LR    R15,R0\n         AIF   ('&LOCAL' EQ '').ALIEN  NOT ESP ENVIRONMENT      GP09301\n         ST    R15,@SPIEDER\n.ALIEN   LA    R0,&OV        PASS OPTION TO INIT\n         MACPARM R1,&A,NULL=SKIP\n         BASSM R14,R15       INVOKE WITH AMODE\n&ZZSPIE  SETB  1\n         MEXIT ,\n.DUPE    MNOTE 4,'BANDAID: OPTION &OPT CONFLICTS'\n         MEXIT ,\n.FAIL    MNOTE 4,'BANDAID: OPTION &OPT NOT RECOGNIZED'\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BAS": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x05\\x00\\x00\\x01\\x040\\x7f\\x01\\x08'\\x8f\\x02\\x10\\x00\\r\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.05", "flags": 0, "createdate": "2004-11-02T00:00:00", "modifydate": "2008-10-04T02:10:00", "lines": 13, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BAS   &R,&A                                    ADDED ON 04234\n.*\n.*       THIS MODULE GENERATES EITHER A BAL FOR MVS COMPATIBILIY\n.*       BAS NEEDS AT LEAST SP 2 (MVS/XA) OR HERCULES 370\n.*\n         GBLB  &MVT\n&NM      BAL   &R,&A\n         AIF   (&MVT).MEND\n         ORG   *-4\n         DC    X'4D'         BAS\n         ORG   *+3\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BASCALL": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x8f\\x01\\x00\\x00\\x8f\\x16G\\x00\\x08\\x00\\x08\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-08T00:00:00", "modifydate": "2000-01-08T16:47:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                                GP97349\n&NM      BASCALL &MD,&AM                                        GP97349\n         AIF   ('&AM' EQ '').DEF31                              GP97349\n&NM      TSX   R9,/&MD,AMODE=&AM                                GP97349\n         MEXIT ,                                                GP97349\n.DEF31   ANOP  ,                                                GP97349\n&NM      TSX   R9,/&MD,AMODE=AM31                               GP97349\n         MEND  ,                                                GP97349\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BASEND": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00B\\x01\\x00\\x00\\x8f\\x01\\x00\\x00\\x8f\\x16F\\x00\\x06\\x00\\x06\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-08T00:00:00", "modifydate": "2000-01-08T16:46:42", "lines": 6, "newlines": 6, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                                GP97349\n&NM      BASEND ,                                               GP97349\n&NM      DS    0X                                               GP97349\nPGMTRACE CSECT ,                                                GP97349\n         POP   USING                                            GP97349\n         MEND  ,                                                GP97332\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BASHEAD": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x8f\\x01\\x00\\x00\\x8f\\x16F\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-08T00:00:00", "modifydate": "2000-01-08T16:46:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                                GP97332\n&NM      BASHEAD ,           START A SUBROUTINE                 GP97349\n         PUSH  USING                                            GP97349\n         DROP  R11,R12                                          GP97349\nSUBRTNES CSECT ,                                                GP97349\n&NM      STM   R0,R15,8(R13)  SAVE CALLER'S REGISTERS           GP97349\n         LA    R13,LOCSAVE1-LOCSAVE(,R13)  PUSH THE STACK       GP97349\n         LR    R11,R15       MAKE LOCAL BASE                    GP97349\n         LA    R12,2048                                         GP97349\n         LA    R12,2048(R11,R12)                                GP97349\n         USING &NM,R11,R12                                      GP97349\n         MEND  ,                                                GP97349\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BASR": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x04\\x00\\x00\\x01\\x040\\x7f\\x01\\x08'\\x8f\\x02\\x12\\x00\\x07\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.04", "flags": 0, "createdate": "2004-11-02T00:00:00", "modifydate": "2008-10-04T02:12:00", "lines": 7, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BASR  &R,&S                                    ADDED ON 04234\n.*\n.*       THIS MODULE GENERATES A BASR FOR IFOX (MIN. HERC 370)\n.*\n&NM      DC    0H'0',AL.4(0,13,&R,&S)   BASR\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BASRET": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00W\\x01\\x00\\x00\\x8f\\x01\\x00\\x00\\x8f\\x17\\x03\\x00\\r\\x00\\n\\x00\\r\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-01-08T00:00:00", "modifydate": "2000-01-08T17:03:57", "lines": 13, "newlines": 10, "modlines": 13, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BASRET &POP,&TYPE=BSM,&RS=R0,&RE=R15,&VECT=0\n&NM      SH    R13,=Y(LOCSAVE1-LOCSAVE)  POP THE STACK\n         AIF   ('&POP' EQ '*NO').POP\n         AIF   ('&VECT' EQ '0').BSM0\n         LA    R9,&VECT      GET RETURN OFFSET\n         A     R9,4*R9+8(R13) ADJUST RETURN\n         ST    R9,4*R9+8(R13) ADJUST RETURN\n.BSM0    LM    &RS,&RE,4*&RS+8(R13)  RESTORE CALLER'S REGISTERS\n         RET31 R9            RETURN IN CALLER'S MODE\n         MEXIT ,\n.POP     LM    &RS,&RE,4*&RS+8(R13)  RESTORE CALLER'S REGISTERS\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BASSM": {"ttr": 2575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x04\\x00\\x00\\x01\\x041_\\x01\\x10\\x05O #\\x00\\x15\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.04", "flags": 0, "createdate": "2004-11-10T00:00:00", "modifydate": "2010-02-23T20:23:00", "lines": 21, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BASSM &R,&A                                   ADDED ON GP04234\n         GBLB  &MVSXA                                           GP10054\n         GBLC  &MODEL                                           GP10054\n.*\n.*       THIS MODULE GENERATES A BASR FOR MVS COMPATIBILITY.\n.*       REQUIRE AT LEAST SP 2 (MVS/XA) FOR HARDWARE SUPPORT\n.*\n.*R1   R2   BALR R1,R2\n.*0    R2   BALR 0,R2\n.*R1   0    BALR R1,0\n.*0    0    BALR 0,0\n.*\n         AIF   ('&MODEL' EQ '380').BASSM                        GP10054\n         AIF   (NOT &MVSXA).OLD                                 GP10054\n.BASSM   ANOP  ,                                                GP10054\n&NM      DC    0H'0',AL.4(0,12,&R,&A)   BASSM                   GP10054\n         MEXIT ,\n.OLD     ANOP  ,                                                GP10054\n&NM      DC    0H'0',AL.4(0,13,&R,&A)   BASR                    GP10054\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCON": {"ttr": 2577, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x004\\x01\\x02$/\\x01\\x02$/!\\x01\\x00D\\x00>\\x00\\x15\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-08-30T00:00:00", "modifydate": "2002-08-30T21:01:34", "lines": 68, "newlines": 62, "modlines": 21, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BCON  &STR,&END=                              ADDED ON GP02242\n         GBLB  &VCON@OP\n         GBLC  &VCON@NM\n         LCLA  &I,&J,&K,&L\n.**********************************************************************\n.**                                                                  **\n.**  BCON BUILDS A TEXT MESSAGE BEGINNING WITH A ONE-BYTE LENGTH,    **\n.**    FOLLOWED BY TEXT.                                             **\n.**                                                                  **\n.**  USE   BCON  'TEXT'                                              **\n.**                                                                  **\n.**  OR    BCON  'TEXT1',END=LABEL                                   **\n.**        DC     ...ZERO OR MORE STORAGE ITEMS                      **\n.**  LABEL BCON   *END    TO GENERATE A SINGLE MESSAGE               **\n.**                                                                  **\n.**********************************************************************\n&K       SETA  K'&STR\n         AIF   (T'&END NE 'O').TSTOPEN\n         AIF   (T'&STR EQ 'O').CLOSE\n         AIF   ('&STR'(1,1) EQ '*').CLOSE\n.TSTOPEN AIF   (&K EQ 0).COMLEN\n         AIF   ('&STR'(1,1) NE '''').COMLEN\n&I       SETA  2\n&J       SETA  &K-2\n&K       SETA  &J\n.LOOP    AIF   ('&STR'(&I,2) EQ '''''').SK2\n         AIF   ('&STR'(&I,2) EQ '&&').SK2\n&I       SETA  &I+1\n         AGO   .INC\n.SK2     ANOP  ,\n&I       SETA  &I+2\n&K       SETA  &K-1\n.INC     AIF   (&I LE &J).LOOP\n.COMLEN  AIF   (NOT &VCON@OP).NOPEN\n         MNOTE 4,'PRIOR BCON/VCON NOT TERMINATED'\n&VCON@OP SETB  0\n.NOPEN   AIF   (T'&END NE 'O').OPEN\n         AIF   (&K EQ 0).REQSTR\n         AIF   ('&STR'(1,1) EQ '''').QSTR\n&NM      DC    AL1(&K),C'&STR'\n         AGO   .MEND\n.QSTR    ANOP  ,\n&NM      DC    AL1(&K),C&STR\n         AGO   .MEND\n.OPEN    AIF   (&K NE 0).OPSTR\n&NM      DC    AL1(&END-*-1)\n         AGO   .SETOPEN\n.OPSTR   AIF   ('&STR'(1,1) EQ '''').OQSTR\n&NM      DC    AL1(&END-*-1),C'&STR'\n         AGO   .SETOPEN\n.OQSTR   ANOP  ,\n&NM      DC    AL1(&END-*-1),C&STR\n.SETOPEN ANOP  ,\n&VCON@NM SETC  '&END'\n&VCON@OP SETB  1\n         MEXIT ,\n.REQSTR  MNOTE 4,'TEXT STRING REQUIRED'\n         MEXIT ,\n.CLOSE   AIF   (&VCON@OP).WASOPEN\n         MNOTE 4,'BCON/VCON END OUT OF SEQUENCE'\n.WASOPEN AIF   ('&NM' EQ '' OR '&NM' EQ '&VCON@NM').BLAB\n&NM      EQU   *\n.BLAB    ANOP  ,\n&VCON@NM EQU   *\n&VCON@NM SETC  ''\n&VCON@OP SETB  0\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BIGBEN": {"ttr": 2579, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x13\\x13/\\x01\\x13\\x13/\\x164\\x00\\x06\\x00\\x06\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2013-05-12T00:00:00", "modifydate": "2013-05-12T16:34:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BIGBEN ,\n&NM      $TCKCONV STCKVAL=0,CONVVAL=DB3,TIMETYP=BIN,DATETYP=YYYYMMDD\n PRTDATA ' At the tone the time will be',(DB3,TIME,PAD),'on',          *\n               (DB3+8,2,X,PADL),'-',(DB3+10,1,X),'-',(DB3+11,1,X)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BIX": {"ttr": 2581, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x06\\x01\\x03\\x02\\x0f\\x01\\x03\\x02\\x1f\\x14\\t\\x00X\\x00K\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-20T00:00:00", "modifydate": "2003-01-21T14:09:06", "lines": 88, "newlines": 75, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BIX   &VAL=(R0),&WK=R15,&W2=R0,&SRL=0,&BHI=,  UPDATED GP03020 *\n               &BASE=,&LOC=,&ERR=,&PFX=                    ADDED 81193\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  BIX PERFORMS AN INDEXED BRANCH WITH UP TO 256 TARGETS.            *\n.*                                                                    *\n.*  &VAL (R0) SPECIFIES THE REGISTER CONTAINING THE BRANCH VALUE      *\n.*  &SRL (0)  SPECIFIES A NUMERIC RIGHT SHIFT COUNT                   *\n.*  &BHI      LABEL TO GO TO WHEN THE VALUE MATCHES THE MASK          *\n.*   MASK (BHI(2)   MASK APPLIED AFTER SHIFTING                       *\n.*     { N'&LOC USED TO COMPUTE WHEN NOT SUPPLIED }                   *\n.*  &ERR      LABEL TO GO TO ON AN INVALID VALUE AFTER SHIFT/MASK, OR *\n.*              AN EMPTY TARGET LOCATION                              *\n.*  &BASE     VALUE SUBTRACTED FROM TARGET LOCATION. CURRENT CSECT IS *\n.*              THE DEFAULT                                           *\n.*  &LOC      LIST OF TARGET LOCATIONS, IN ORDER CORRESPONDING TO THE *\n.*              VALUE; I.E. FIRST ENTRY FOR 0, SECOND FOR 1, ETC.     *\n.*              OMITTED ENTRIES CAUSE A BRANCH TO &ERR                *\n.*  &PFX      PREFIX TO PREPEND TO THE LOC LABELS FOR A SHORTER LIST. *\n.*              THE PREFIX IS *NOT* APPLIED TO BHI OR ERR NAMES.      *\n.*  &WK  (R15)  A WORK REGISTER (ANY BUT 0)                           *\n.*  &W2  (R0)   A WORK REGISTER (ANY BUT WORK)                        *\n.*                                                                    *\n.*  SAMPLE USE:                                                       *\n.*                                                                    *\n.*       IBMMACRO THAT RETURNS 0, 4, 8, ETC., OR SUBROUTINE CALL      *\n.*         LR   R15,R0        COPY VALUE TO WORK REGISTER             *\n.*         BIX  VAL=(R15),SRL=2,LOC=(RET0,RET4),ERR=MACFAIL           *\n.*                                                                    *\n.*  NOTE THAT BITS SHIFTED OUT, AND BITS LEFT OF THE MASK ARE NOT     *\n.*  TESTED FOR ZERO. THIS IS INTENTIONAL TO PERMIT USE OF LOW FLAG    *\n.*  BITS AND OTHER USE OF UNREFERENCED DATA.                          *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         LCLA  &I,&J,&N\n         LCLC  &LB           TABLE BASE\n         LCLC  &BH1,&BH2     BHI OPERANDS\n         LCLC  &SPACES\n&LB      SETC  '&SYSECT'\n&SPACES  SETC  '    '\n         AIF   ('&BASE' EQ '' OR '&BASE' EQ '*').DEFBASE\n&LB      SETC  '&BASE'\n.DEFBASE AIF   (N'&BHI NE 2).NOTBHI\n&BH1     SETC  '&BHI(1)'     FIRST OF TWO ARGUMENTS\n&BH2     SETC  '&BHI(2)'     SECOND OF TWO ARGUMENTS\n.NOTBHI  AIF   (N'&BHI NE 1).DONBHI\n&BH1     SETC  '&BHI'        ONE OF ONE, WITH PARENTHESES\n.DONBHI  ANOP  ,\n.*--------------------------------------------------------------------*\n.*  DETERMINE NUMBER OF ADDRESSES, AND CORRESPONDING MASK             *\n.*--------------------------------------------------------------------*\n&N       SETA  N'&LOC\n&J       SETA  2             SET SMALLEST MASK + 1 (=1 FAILS)\n&I       SETA  &N            FOR NON-NUM SIZE, USE COUNT\n         AIF   (&N NE 0 AND &N LE 256).GOTSIZE\n.BADSIZE MNOTE 8,'BIX: LOC LIST BAD - NEED 1 TO 256 TARGET LABELS'\n.GOTSIZE AIF   (&J GE &I).GOTMASK\n&J       SETA  &J*&J\n         AGO   .GOTSIZE\n.GOTMASK ANOP  ,\n&I       SETA  &J-1          CONVERT POWER OF TWO TO MASK\n.USEMASK ANOP  ,\n&NM      MACPARM &WK(1),&VAL,OP=IC,OPR=LR  LOAD INDEX VALUE\n         AIF   ('&SRL' EQ '0').NOSHFT\n         MACPARM &WK(1),&SRL,OP=SRL,OPR=SRL,MODE=EVEN,NULL=SKIP\n.NOSHFT  MACPARM &W2(1),&I,OP=LA,MODE=EVEN LOAD MASK VALUE\n         NR    &WK(1),&W2(1) ISOLATE SIGNIFICANT PORTION\n         AIF   ('&BH1' EQ '').DOWK2\n         MACPARM &W2(1),&BH2,OP=LA,NULL=SKIP  ALLOW OVERRIDE\n         CR    &WK(1),&W2(1) EXACTLY MASK MAXIMUM ?\n         MACPARM &BH1,OP=BE,OPR=BER,MODE=ONE\n.DOWK2   AIF   (T'&ERR EQ 'O').NOLIM\n         AIF   ('&N' EQ '&BH2').TOOMASK  LIST HIGH SAME AS MAX ?\n         CH    &WK(1),=Y(&N) VALID INDEX ?\n.TOOMASK BNL   &ERR          NO; TOO HIGH\n.NOLIM   SLL   &WK(1),1      CONVERT INDEX TO OFFSET\n         LH    &WK(1),*+8(&WK(1)) LOAD LABEL OFFSET FROM BASE\n         B     &LB.(&WK(1))  ENTER ROUTINE\n&J       SETA  0\n.INC     AIF   (&J GE &N).DONE\n&J       SETA  &J+1\n         AIF   ('&LOC(&J)' EQ '').DFLT\n         DC    AL2(&PFX.&LOC(&J)-&LB)&SPACES.&J  BRANCH\n         AGO   .INC\n.DFLT    DC    AL2(&ERR-&LB)&SPACES.&J  ERROR\n         AGO   .INC\n.DONE    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLANKOUT": {"ttr": 2584, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x11\\x0f\\x01\\x041\\x9f#\\x16\\x00$\\x00%\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-04-20T00:00:00", "modifydate": "2004-11-14T23:16:00", "lines": 36, "newlines": 37, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      BLANKOUT &RET=R14,&ADD=R1,&LEN=R3,&CPU=,&WK=R15         78187\n         SPACE 1\n*        THIS ROUTINE BLANKS OUT AN AREA OF ANY LENGTH\n         AIF   ('&CPU' NE '360').MVCL\n*\n&NM      SH    &LEN,H1       AT LEAST ONE BYTE ?                 78187\n         BMR   &RET          NO                                  78187\n         MVI   0(&ADD),C' '  SET FIRST BYTE BLANK\n         BZR   &RET .        DONE IF ONLY ONE                    78187\n&NM.A    BCTR  &LEN,0        LESS ONE FOR EXECUTE                78187\n         LA    &WK,255       SET LENGTH-1                        78187\n         NR    &WK,&LEN      MASK OUT NUMBER THIS TIME           78187\n         EX    &WK,&NM.B     MOVE SPECIFIED NUMBER               78187\n         LA    &ADD,1(&WK,&ADD)  BUMP POINTER                    78187\n         XR    &LEN,&WK      ACCOUNT FOR NUMBER DONE             78187\n         BL    &NM.A .       DO NEXT SEGMENT                     78187\n         BR    &RET          RETURN DONE                         78187\n&NM.B    MVC   1(0,&ADD),0(&ADD)                                 78187\n         MEXIT\n.MVCL    SPACE 1                                                 78187\n&NM      LTR   &LEN,&LEN .   AT LEAST ONE BYTE ?                 79182\n         BNPR  &RET .        NO, RETURN                          79182\n         STM   R15,R1,12(R13) .  SAVE REGS                       78187\n         AIF   ('&LEN' NE '0' AND '&LEN' NE 'R0').M01\n         MACPARM R1,(&LEN)\n         MACPARM R0,(&ADD)\n         AGO   .MCOM\n.M01     MACPARM R0,(&ADD)\n         MACPARM R1,(&LEN)\n.MCOM    SR    R15,R15\n         ICM   R15,8,BLANKS .  BLANK IS PADDING BYTE\n         MVCL  R0,R14 .      CLEAR ALL\n         LM    R15,R1,12(R13) .  RESTORE\n         BR    &RET\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLOOK": {"ttr": 2586, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x99\\x05\\x0f\\x01\\x13\\x19\\x0f\\x007\\x00\\xa2\\x00=\\x00\\x07\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1999-02-19T00:00:00", "modifydate": "2013-07-09T00:37:00", "lines": 162, "newlines": 61, "modlines": 7, "user": "GERHARD"}, "text": "         MACRO\n&NM      BLOOK &T=,&ERR=*+8,&B=*,&R=,&PFX=,&X=R5,&Y=R6,&Z=R4,          *\n               &STRIP=,&ABBR=,&FULL=                            GP13189\n         GBLB  &ZZ@BLUK\n         GBLC  &MACPLAB,&ZZ@BLUF                                GP08269\n.**********************************************************************\n.*                                                                   **\n.*    Verb lookup routine; see BTAB macro for matching verb defs     **\n.*    T     - address of BTAB definitions                            **\n.*    X     - pointer for scanning                             (R5)  **\n.*    Y     - register pointing at last byte of text           (R6)  **\n.*    Z     - register for BTAB scanning                       (R4)  **\n.*    R     - address of text                                        **\n.*    B     - base address for (b)ddd branching; B=A (absolute)      **\n.*            branches to BTAB with BASE=0; B=* (default) branches   **\n.*            from CSECT                                             **\n.*    ERR   - branch address/register for no match                   **\n.*    PFX   - 0-4 character label prefix (default VERB)              **\n.*    STRIP - (default) skip leading blanks                          **\n.*            =NEVER    process at current input address             **\n.*    ABBR  - when specified, accepts matches for abbreviated verbs  **\n.*            of any length from original to ABBR value (no default) **\n.*            ABBR=3 for 'COMMAND' would match COMMAND, COMMAN,      **\n.*            COMMA, COMM, and COM                                   **\n.*    FULL  - one or more trailing characters inhibiting shorter     **\n.*            compares. No default; common are = and (               **\n.*            e.g., FULL='=' (valid are FULL=alphanum; FULL='chars'; **\n.*            FULL=C'chars'; and FULL=X'hexchars')                   **\n.*            FULL== and FULL='' are valid (= and ' comnpares)       **\n.*                                                                   **\n.**********************************************************************\n.*                                                                   **\n.*    X returns next byte after match, or last text + 1 for no match **\n.*    R14 is a return register; R15-R1 are work registers.           **\n.*                                                                   **\n.*    Y unchanged.                                                   **\n.*    Z returns last process table entry.                            **\n.*                                                                   **\n.**********************************************************************\n.*                                                                   **\n.*    BLOOK expands an in-line subroutine, called by other           **\n.*    references. To use in an assembly with multiple, not mutually  **\n.*    addressable CSECTs, use a unique PFX in each.                  **\n.*                                                                   **\n.**********************************************************************\n         LCLC  &L,&D,&LAB,&D1,&D2,&D3                           GP13189\n         LCLA  &I,&J,&K                                         GP13189\n&L       SETC  'L'''\n         AIF   ('&ZZ@BLUF' NE '').OLDLAB                        GP08269\n&ZZ@BLUF SETC  'VERB'        DEFAULT LABEL                      GP08269\n.OLDLAB  ANOP  ,                                                GP08269\n         AIF   ('&PFX' EQ '' OR '&PFX' EQ '&ZZ@BLUF').DONLAB    GP08269\n&ZZ@BLUF SETC  '&PFX'                                           GP08269\n&ZZ@BLUK SETB  0             EXPAND CODE WITH NEW LABELS        GP08269\n.DONLAB  ANOP  ,                                                GP08269\n&LAB     SETC  '&ZZ@BLUF'                                       GP08269\n&NM      MACPARM &Z,&T,NULL==X'FF'\n&D       SETC  '('.'&Y'.')'                                      89152\n         AIF   ('&D' EQ '&R' OR '&R' EQ '&Y').NOEND              89152\n         MACPARM &Y,&R+&L&R-1\n.NOEND   AIF   (&ZZ@BLUK).NOTONCE\n&ZZ@BLUK SETB  1\n         B     &LAB.END      BRANCH AROUND                       88024\n&LAB.LOOK SLR  R15,R15       ZERO IC REGISTER                    88024\n         AIF   ('&STRIP' EQ 'NEVER').NODEBLK                     89152\n&LAB.1   CLI   0(&X),C' '    LOOK FOR NON-BLANK INPUT            88024\n         BNE   &LAB.2        OK                                  88024\n         LA    &X,1(,&X)     SKIP TO NEXT BYTE\n         CR    &X,&Y         REACHED END OF INPUT BUFFER\n         BNH   &LAB.1        NO, LOOK FOR NON-BLANK              88024\n         BR    R14           RETURN, BUFFER EXHAUSTED\n         AGO   .YESBLNK                                          88269\n.NODEBLK B     &LAB.2        NO DEBLANKING                       88269\n.YESBLNK ANOP  ,                                                 88269\n&LAB.CHEK CLC  4(0,&Z),0(&X) MATCHING VERB ?                     88024\n&LAB.3   LA    &Z,5(R15,&Z)  BUMP TO NEXT TABLE ENTRY            88024\n&LAB.2   CLI   0(&Z),X'FF'   END OF TABLE ?                      88024\n         BER   R14           YES, VERB NOT FOUND\n         IC    R15,0(,&Z)    LENGTH - 1  OF TABLE ENTRY\n         EX    R15,&LAB.CHEK  SAME VERB ?                        88024\n         AIF   ('&ABBR' EQ '').NOABBR                           GP13189\n         BE    &LAB.MAT                                         GP13189\n         LA    R0,1(,R15)    COPY LENGTH                        GP13189\n         SH    R0,=AL2(&ABBR)    SHORTER ALLOWED ?              GP13189\n         BNP   &LAB.3               NO; TRY NEXT                GP13189\n         AIF   ('&FULL' EQ '').LABNKC      SKIP IF NO KEYWORDS  GP13190\n&D       SETC  '&FULL'                                          GP13189\n&D1      SETC  'C'''                                            GP13189\n&D2      SETC  ''''                                             GP13189\n&K       SETA  K'&FULL                                          GP13189\n&J       SETA  1             STRIDE                             GP13189\n         AIF   ('&FULL' EQ '''').LABNKS                         GP13189\n         AIF   (&K LT 3).LABNKS                                 GP13189\n         AIF   ('&D'(1,2) EQ 'X''').HEXSTR       HEX            GP13189\n         AIF   ('&D'(1,2) EQ 'C''').TXTSTR       TEXT           GP13189\n         AIF   ('&D'(1,1) NE '''').LABNKS       PLAIN STRING    GP13189\n&D       SETC  '&D'(2,&K-2)                                     GP13189\n&K       SETA  K'&D                                             GP13189\n         AGO   .LABNKS                                          GP13189\n.TXTSTR  ANOP  ,             TEXT NOTATION   C' '               GP13189\n&D       SETC  '&D'(3,&K-3)                                     GP13189\n&K       SETA  K'&D                                             GP13189\n         AGO   .LABNKS                                          GP13189\n.HEXSTR  ANOP  ,             HEX NOTATION                       GP13189\n&D1      SETC  'X'''                                            GP13189\n&D       SETC  '&D'(3,&K-3)                                     GP13189\n&K       SETA  K'&D                                             GP13189\n&J       SETA  2             STRIDE                             GP13189\n.LABNKS  LA    R1,4(R15,&Z)  POINT TO LAST BYTE OF VERB         GP13189\n&I       SETA  1                                                GP13189\n         AIF   (&K GE &J).LABNKL                                GP13189\n         MNOTE 4,'BLOOK: MALFORMED FULL=&FULL'                  GP13189\n         AGO   .LABNKC                                          GP13189\n.LABNKL  ANOP  ,                                                GP13189\n&D3      SETC  '&D'(&I,&J)                                      GP13189\n         AIF   (&J NE 1 OR ('&D3' NE '''' AND '&D3' NE '&&')).LABNDB\n.*TEST   AIF   ('&D'(&I,&J+1) NE '&D3').LABOOPS                 GP13189\n&I       SETA  &I+1                                             GP13189\n.LABOOPS ANOP  ,             USER ERROR                         GP13189\n&D3      SETC  '&D3'.'&D3'                                      GP13189\n.LABNDB  CLI   0(R1),&D1&D3&D2    SPECIAL?                      GP13189\n         BE    &LAB.3          YES; NO ABBR                     GP13189\n&I       SETA  &I+&J                                            GP13189\n         AIF   (&I LE &K).LABNKL      TRY AGAIN                 GP13189\n.LABNKC  LR    R1,R15                                           GP13189\n&LAB.ALP BCTR  R1,0                                             GP13189\n         EX    R1,&LAB.CHEK  MATCH ?                            GP13189\n         BE    &LAB.MA1        YES; GET OUT                     GP13189\n         BCT   R0,&LAB.ALP   SHORTER ALLOWED ?                  GP13189\n         B     &LAB.3          NO; TRY NEXT                     GP13189\n         AGO   .DOABBR                                          GP13189\n.NOABBR  BNE   &LAB.3        NO, KEEP LOOKING                    88024\n.DOABBR  ANOP  ,                                                GP13189\n&LAB.MA1 LA    R15,1(,R15)   SET FOR CORRECT INPUT POSITION     GP13189\n&LAB.MAT LA    &X,1(R15,&X)  POINT TO FIRST BYTE PAST VERB\n         ICM   R15,7,1(&Z)   LOAD DISPLACEMENT ADDRESS\n         B     4(,R14)       RETURN FOUND CONDITION\n&LAB.END DS    0H                                                88024\n.NOTONCE AIF   ('&STRIP' EQ 'NO' OR '&STRIP' EQ 'NEVER').STRIPPD 89152\n         MACPARM R14,&LAB.LOOK,OP=BAL                           GP04234\n         AGO   .REJOIN                                          GP04234\n.STRIPPD AIF   ('&STRIP' EQ 'NEVER').STRIPPR                     89152\n         MACPARM R15,0       CLEAR R15 FIRST                     89152\n.STRIPPR MACPARM R14,&LAB.LOOK,OP=BAL                           GP10164\n.REJOIN  AIF   ('&T' EQ '').NOERR\n         AIF   ('&ERR' EQ '*+8' AND '&B' EQ 'A').S6\n         B     &ERR\n         AGO   .S8\n.S6      B     *+6           SKIP OVER 'BR A'\n.S8      ANOP\n         AIF   ('&B' EQ '').NOERR\n         AIF   ('&B' EQ '*').RELDEF\n         AIF   ('&B'(1,1) EQ '(').REL\n         AIF   ('&B' EQ 'A').ABS\n         MNOTE 8,'B NOT A OR (REG)'\n         AGO   .NOERR\n.REL     B     0(&B(1),R15)\n         AGO   .NOERR\n.RELDEF  B     &SYSECT.(R15)\n         AGO   .NOERR\n.ABS     BR    R15\n.NOERR   MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BSM": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x0b\\x00\\x00\\x01\\x041_\\x01\\x10\\x15\\x9f\\x01F\\x00\\x16\\x00\\n\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.11", "flags": 0, "createdate": "2004-11-10T00:00:00", "modifydate": "2010-06-08T01:46:00", "lines": 22, "newlines": 10, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      BSM   &R,&A                                   ADDED ON GP04234\n         GBLB  &MVSXA                                           GP08292\n         GBLC  &MODEL                                           GP08292\n.*\n.*       THIS MODULE GENERATES A BALR FOR COMPATIBILITY\n.*\n         AIF   ('&MODEL' EQ '380').BSM                          GP08292\n         AIF   (NOT &MVSXA).OLD                                 GP08292\n.BSM     ANOP  ,                                                GP08292\n&NM      DC    0H'0',AL.4(0,11,&R,&A)   BSM                     GP08292\n         MEXIT ,\n.OLD     AIF   ('&R(1)' EQ '0' OR '&R(1)' EQ 'R0').BR           GP08292\n         AIF   ('&A(1)' EQ '0' OR '&A(1)' EQ 'R0').SETAM        GP10159\n&NM      MACPARM MODE=LBL                                       GP08292\n         MEXIT ,                                                GP08292\n.SETAM   ANOP  ,                                                GP10159\n&NM      LA    &R,0(,&R)     CLEAN HIGH BYTE (AM24)             GP10159\n         MEXIT ,                                                GP10159\n.BR      ANOP  ,                                                GP08292\n&NM      BR    &A\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BTAB": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x04\\x04_\\x01\\t6\\x0f\\x02\\x06\\x00n\\x00n\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-14T00:00:00", "modifydate": "2009-12-26T02:06:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      BTAB  &STRING,&TO,&XCT,&S,&BASE=\n         GBLC  &CRT\n         GBLC  &TABMBAS,&TABMOPT\n         GBLC  &PFKEY(52),&PFKEX(52)                             88211\n         GBLA  &#PFKEY                                           88211\n         LCLC  &TEXT                                             88211\n         LCLA  &I,&J,&K,&L\n&K       SETA  K'&STRING-1\n         AIF   ('&STRING' EQ '').PARMA\n         AIF   ('&STRING'(1,1) NE '''').COMLEN\n&I       SETA  2\n&J       SETA  &K-1\n&K       SETA  &J\n.LOOP    AIF   ('&STRING'(&I,2) EQ '''''').SK2\n         AIF   ('&STRING'(&I,2) EQ '&&').SK2\n&I       SETA  &I+1\n         AGO   .INC\n.SK2     ANOP\n&I       SETA  &I+2\n&K       SETA  &K-1\n.INC     AIF   (&I LE &J).LOOP\n&K       SETA  &K-1\n         AIF   (&K GE 0).COMLEN\n&K       SETA  0\n.COMLEN  AIF   ('&BASE' EQ '').NBAS\n         AIF   ('&BASE' NE '*').UBAS\n&TABMBAS SETC  '&SYSECT'\n         AGO   .NBAS\n.UBAS    ANOP\n&TABMBAS SETC  '&BASE'\n.NBAS    AIF   ('&TABMBAS' NE '').BASOK\n&TABMBAS SETC  'EXHBCOMM' .   DEFAULT BASE CSECT\n.BASOK   ANOP\n         AIF   ('&STRING' EQ '*END').LAST\n         AIF   ('&TO' NE '' AND '&XCT' EQ '' AND '&S' EQ '').TO\n         AIF   ('&TO' EQ '' AND '&XCT' NE '' AND '&S' EQ '').XCT\n         AIF   ('&TO' EQ '' AND '&XCT' EQ '' AND '&S' NE '').S\n.PARMA   MNOTE 8,'MISSING OR CONFLICTING PARAMETERS'\n         MEXIT\n.BADBASE MNOTE 8,'INCORRECT BASE PARAMETER'\n         MEXIT\n.TO      AIF   ('&TABMOPT' EQ '' OR '&TABMOPT' EQ 'TO').TOTO\n.NONO    MNOTE 8,'INCORRECT MACRO NAME, OR PREVIOUS *END MISSING'\n         MEXIT\n.TOTO    ANOP\n&TABMOPT SETC  'TO'\n         AIF   ('&STRING'(1,1) EQ '*').SPEC\n         AIF   ('&STRING'(1,1) EQ '''').TOAP\n&NM      DC    AL1(&K),AL3(&TO-(&TABMBAS)),C'&STRING'\n         MEXIT\n.TOAP    ANOP\n&NM      DC    AL1(&K),AL3(&TO-(&TABMBAS)),C&STRING\n         MEXIT\n.XCT     AIF   ('&TABMOPT' NE '' AND '&TABMOPT' NE 'XCT').NONO\n&TABMOPT SETC  'XCT'\n         AIF   ('&STRING'(1,1) EQ '*').SPEC\n         AIF   ('&STRING'(1,1) EQ '''').XAP\n&NM      DC    AL1(&K),CL3'&XCT',C'&STRING'\n         MEXIT\n.XAP     ANOP\n&NM      DC    AL1(&K),CL3'&XCT',C&STRING\n         MEXIT\n.S       AIF   ('&TABMOPT' NE '' AND '&TABMOPT' NE 'S').NONO\n&TABMOPT SETC  'S'\n         AIF   ('&STRING'(1,1) EQ '''').SAP\n         AIF   ('&STRING'(1,1) EQ '*').SPEC\n&NM      DC    AL1(&K,0),SL2(&S),C'&STRING'\n         MEXIT\n.SAP     ANOP\n&NM      DC    AL1(&K,0),SL2(&S),C&STRING\n         MEXIT\n.SPEC    AIF   ('&STRING' EQ '*').PARMA\n         PFKEYS ,            INVOKE PFK HEX EQUIVALENTS          88211\n&TEXT    SETC  '&STRING'(2,&K)\n&I       SETA  0\n.SPLP    AIF   (&I GE &#PFKEY).SPHEX                             88211\n&I       SETA  &I+1\n         AIF   ('&TEXT' NE '&PFKEY(&I)').SPLP                    88211\n&TEXT    SETC  '&PFKEX(&I)'                                      88211\n&K       SETA  0\n         AIF   ('&CRT' EQ '3270' OR '&CRT' EQ '').HEXT          GP04045\n         AIF   ('&NM' EQ '').MEND   SKIP IF NOT 3270\n&NM      EQU   * .           PLANT A LABEL - NO 3270 CODE EXPANDED\n.MEND    MEXIT\n.SPHEX   ANOP\n&I       SETA  0\n.SPHL    AIF   (&I GE &K).SPHEXS\n&I       SETA  &I+1\n&J       SETA  1\n.SPHLD   AIF   ('&TEXT'(&I,1) EQ '0123456789ABCDEF'(&J,1)).SPHL\n&J       SETA  &J+1\n         AIF   (&J GT 16).PARMA\n         AGO   .SPHLD\n.SPHEXS  ANOP\n&K       SETA  (&K-1)/2\n.HEXT    AIF   ('&TABMOPT' EQ 'TO').HEXTO\n         AIF   ('&TABMOPT' EQ 'XCT').HEXCT\n&NM      DC    AL1(&K,0),SL2(&S),X'&TEXT'\n         MEXIT\n.HEXCT   ANOP\n&NM      DC    AL1(&K),CL3'&XCT',X'&TEXT'\n         MEXIT\n.HEXTO   ANOP\n&NM      DC    AL1(&K),AL3(&TO-(&TABMBAS)),X'&TEXT'\n         MEXIT\n.LAST    ANOP\n&TABMOPT SETC  ''\n&NM      DC    X'FF' .       END OF TABLE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUILDCDE": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x062\\x0f\\x01\\x062\\x0f#C\\x00z\\x019\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2006-11-16T00:00:00", "modifydate": "2006-11-16T23:43:00", "lines": 122, "newlines": 313, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&REF     BUILDCDE &LENGTH=,&ADDR=,&EP=,&SYS=MVS,&LIST=(1)       GP06320\n.**********************************************************************\n.*                                                                    *\n.* MACRO NAME = BUILDCDE                                              *\n.*                                                                    *\n.* DESCRIPTIVE NAME = BUILD A MAJOR CDE TO IDENTIFY A STORAGE AREA    *\n.*                                                                    *\n.* FUNCTION = MAKES A STORAGE AREA EASIER TO LOCATE IN A              *\n.*            DUMP BY MAKING IT APPEAR AS A LOAD_MODULE.              *\n.*                                                                    *\n.* STATUS = R200                                                      *\n.*                                                                    *\n.* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                       *\n.*                                                                    *\n.* ENVIRONMENT = SEE BELOW                                            *\n.*                                                                    *\n.*     AMODE = ANY                                                    *\n.*     SCP   = MVS/XA OR MVS/ESA   |  MVS 3.8J WITH SYS=MVS           *\n.*     KEY   = USER                                                   *\n.*     MODE  = PROBLEM                                                *\n.*     APF   = OFF                                                    *\n.*                                                                    *\n.* OPERATION = BUILDCDE USES THE \"LOADER\" FORM OF IDENTIFY TO CREATE  *\n.*             A MAJOR CDE AND CORRESPONDING XL, THEN ISSUES A LOAD   *\n.*             SVC TO CREATE AN LLE AND ASSOCIATE THE CDE WITH THE    *\n.*             CURRENT TCB.                                           *\n.*                                                                    *\n.* INVOCATION = SEE BELOW                                             *\n.*                                                                    *\n.*          (BEFORE)     GETMAIN RU,LV=20000                          *\n.*                                                                    *\n.*          (AFTER)      GETMAIN RU,LV=20000                          *\n.*                       BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM        *\n.*                                                                    *\n.* NOTES = SEE BELOW                                                  *\n.*                                                                    *\n.*        BUILDCDE MAY BE ISSUED MORE THAN ONCE, PROVIDED THE EP      *\n.*        KEY-WORD HAS A DIFFERENT VALUE EACH TIME.                   *\n.*                                                                    *\n.*        IF STORAGE WAS ALLOCATED IN SUB-POOL ZERO (SP=0 IS          *\n.*        SPECIFIED OR DEFAULTED TO IN THE GETMAIN MACRO),            *\n.*        THE DELETE MACRO MAY BE ISSUED AGAINST THE SPECIFIED EP     *\n.*        TO DELETE THE CDE AND FREE UP THE STORAGE.                  *\n.*                                                                    *\n.*        IF GETMAIN SPECIFIES A NON-ZERO SUBPOOL, THE DELETE MACRO   *\n.*        DELETES THE CDE BUT DOES NOT FREE UP THE STORAGE:  YOU      *\n.*        MUST ISSUE FREEMAIN YOURSELF.                               *\n.*                                                                    *\n.*        IN A MAJOR CDE CREATED BY THE \"LOADER\" FORM OF IDENTIFY,    *\n.*        THE \"RENT\" AND \"REUS\" ATTRIBUTES ARE OFF.  THIS MEANS       *\n.*        THAT YOU MAY NOT ISSUE LOAD AGAINST THE EP NAME (BUILDCDE   *\n.*        HAS ALREADY ISSUED LOAD), BUT YOU MAY ISSUE LINK, ATTACH    *\n.*        OR XCTL IF YOU WANT TO (ONCE ONLY).  YOU MAY ALSO ISSUE     *\n.*        THE STANDARD FORM OF IDENTIFY TO DEFINE SECONDARY ENTRY     *\n.*        POINTS WHICH HAVE THE \"RENT\" ATTRIBUTE.                     *\n.*                                                                    *\n.*        IF THIS MACRO IS USED BY AN AUTHORIZED PROGRAM, THEN        *\n.*        A S306 ABEND WILL OCCUR (THE CDE CREATED HAS ITS CDSYSLIB   *\n.*        BIT OFF).  LOOK FOR A SECOND VERSION OF THE MACRO THAT MAY  *\n.*        BE USED IN AN AUTHORIZED PROGRAM AT THE END OF THIS JOB.    *\n.*                                                                    *\n.*        THE IDENTIFY MACRO SUPPLIED IN SYS1.MACLIB SUPPORTS THE     *\n.*        \"LOADER\" FORM, BUT THE FORMAT OF THE PARAMETER LIST IS      *\n.*        NOT DOCUMENTED, AS FAR AS I KNOW.  THE RETURN CODES X'18'   *\n.*        OR X'1C' MAY BE RETURNED IN R15 WHEN THE PARAMETER LIST     *\n.*        IS INVALID.  THESE RETURN CODES ARE DOCUMENTED ALONG WITH   *\n.*        THE IDENTIFY MACRO.                                         *\n.*                                                                    *\n.*        WHEN THE LOAD-LIST IS EMPTY (I.E. NO LOAD HAS BEEN ISSUED   *\n.*        FOR THIS TCB YET), IDENTIFY FAILS WITH A RETURN CODE 12.    *\n.*        THIS CAN BE CIRCUMVENTED BY ISSUING THE FOLLOWING SEQUENCE: *\n.*                                                                    *\n.*                       LOAD    EP=IEFBR14                           *\n.*                       GETMAIN RU,LV=20000                          *\n.*                       BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM        *\n.*                       DELETE  EP=IEFBR14                           *\n.*                                                                    *\n.*        I'VE NOTICED THAT ON MVS SYSTEMS PRIOR TO MVS/ESA 4.3, THE  *\n.*        \"LOADER\" FORM OF IDENTIFY RETURNS THE ADDRESS OF THE CDE IT *\n.*        CREATED IN REG1.  IN MVS/ESA 4.3 THIS IS NO LONGER TRUE.    *\n.*                                                                    *\n.**********************************************************************\n.*     CORRECTIONS AND CHANGES BY GERHARD POSTPISCHIL  2006-11-15     *\n.*        BY DEFAULT, BUILDCDE USES THE GETMAINED AREA TO BUILD THE   *\n.*          IDENTIFY LIST. IF YOU USE THIS AREA BETWEEN THE GETMAIN   *\n.*          AND BUILDCDE (E.G., SAVE AREA, OR INIT TO ZERO) THEN      *\n.*          USE LIST= FOR AN ALTERNATE LIST ADDRESS. FOR EXAMPLE,     *\n.*          TRY LIST=20(R13) - USE ANY RS FORMAT ADDRESS LENGTH 32    *\n.*                                                                    *\n.*        RETROFIT TO FUNCTION CORRECTLY UNDER MVS 3.8J (SYS=MVS)     *\n.*        CHANGE TO ASSEMBLE UNDER ASM/XF                             *\n.**********************************************************************\n         LCLA  &O16                    OFFSETS IN PARM LIST     GP06320\n&O16     SETA  16                      OFFSET TO EXTENT LIST    GP06320\n         AIF   ('&SYS' NE 'MVS').NEWSYS                         GP06320\n&O16     SETA  12                      OFFSET TO EXTENT LIST    GP06320\n.NEWSYS  ANOP  ,                       XA, ESA, .....           GP06320\n&REF     IHBINNRA &ADDR,&LENGTH        SET R0,R1\n         LR    R15,R1                  PRESERVE ENTRY ADDRESS   GP06320\n         IHBINNRA &LIST                SET LIST ADDRESS INTO R1 GP06320\n         ST    R15,0(,R1)              STORE ENTRY-POINT ADDR   GP06320\n         ST    R15,&O16+12(,R1)        ALSO AS LOAD ADDRESS     GP06320\n         MVC   4(8,R1),=CL8'&EP '      CDNAME                   GP06320\n         AIF   ('&SYS' EQ 'MVS').OLDSYS   SHORTER LIST IN 3.8   GP06320\n         XC    12(4,R1),12(R1)         CLEAR BYTES 12-15\n.OLDSYS  LA    R14,16                  LENGTH OF PSEUDO XL      GP06320\n         LA    R15,1                   NUMBER OF RELOCATION FACTORS\n         STM   R14,R0,&O16.(R1)        FORMAT BYTES 16-23       GP06320\n         MVI   &O16+8(R1),X'80'        END OF LIST              GP06320\n         MNOTE *,'       IDENTIFY MF=(E,(R1))'\n         SLR   R0,R0                   LOADER-TYPE IDENTIFY\n         SVC   41                      ISSUE IDENTIFY SVC\n         LR    R14,R1                  PASS CDE ADDRESS\n         MNOTE *,'       LOAD EP=&EP,DCB=0'\n         LA    R0,=CL8'&EP '           POINT TO EP NAME         GP06320\n         SLR   R1,R1                   NO DCB FOR LOAD\n         SVC   8                       ISSUE LOAD SVC\n         LR    R1,R0                   EP ADDRESS IN R1\n         SLR   R0,R0\n         ICM   R0,B'0111',&O16+9(R1)  LENGTH IN R0              GP06320\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CATCALL": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x02%\\x8f\\x01\\t\\x14\\x9f U\\x00H\\x001\\x00\\x07\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-09-15T00:00:00", "modifydate": "2009-05-29T20:55:00", "lines": 72, "newlines": 49, "modlines": 7, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CATCALL &FUN,&ARG,&PFX=CSP,&MODE=(V,BASSM),&PARM=PARM\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  CATCALL - USED TO INVOKE THE SUBCAT SERVICE FOR SIMPLE AND        *\n.*    MASKED CATALOG LOOKUP. 'FUN' IS LOOK (SINGLE REQUEST),          *\n.*    INIT, THEN LOOP, FOR MASKED REQUEST, CLOSE TO FREE STORAGE.     *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         GBLB  &MACPNUL,&MVSXA\n         GBLC  &MACPLAB\n         LCLA  &I,&J,&K\n         LCLC  &C,&D,&E,&SUBNM\n&SUBNM   SETC  'UBICF'       ICF CATALOG INTERFACE\n         AIF   (&MVSXA).SYSXA  AT LEAST MVS XA ?\n&SUBNM   SETC  'UBCAT'       VSAM & CVOL CATALOG INTERFACE\n.SYSXA   ANOP  ,\n&MACPLAB SETC  '&NM'\n&C       SETC  '&FUN'.'    '\n&C       SETC  '&C'(1,4)\n&J       SETA  1\n.FUNLOOP AIF   ('&C' EQ 'CLOSLOOKINITLOOP'(&J,4)).HAVEFUN\n&J       SETA  &J+4\n         AIF   (&J LT 16).FUNLOOP\n&J       SETA  0                                                GP09149\n         AIF   ('&C' EQ 'END ').HAVEFUN    ALTERNATE FOR CLOSE  GP09149\n         MNOTE 8,'CATCALL: INVALID FUNCTION REQUEST &FUN'\n.HAVEFUN MACPARM &PFX.$REQ,&J/4,OP=MVI\n         MACPARM R14,&ARG,NULL=SKIP\n         AIF   (&MACPNUL).NOARG\n         MACPARM R14,&PFX.@REQ,OP=ST\n.NOARG   AIF   ('&MODE(1)' EQ '').DOV\n         AIF   ('&MODE(1)' NE 'V').NOTV\n.DOV     MACPARM R15,=V(&SUBNM),OP=L\n         O     R15,=X'80000000'    GET HIGH\n         AGO   .INVOKE\n.NOTV    AIF   ('&MODE(1)' NE 'A').NOTA\n         MACPARM R15,=A(&SUBNM),OP=L\n         O     R15,=X'80000000'    GET HIGH\n         AGO   .INVOKE\n.NOTA    AIF   ('&MODE(1)' NE '@').NOTD\n         MACPARM R15,@&SUBNM,OP=L\n         AGO   .INVOKE\n.NOTD    MNOTE 8,'CATCALL: LOAD ADDRESS MODE &MODE(1) NOT RECOGNIZED'\n.INVOKE  MACPARM R1,&PFX.&PARM,NULL=SKIP  PASS WORK AREA\n         AIF   (&MVSXA).AM31  NEWFLANGLED 370 INSTRUCTIONS\n&C       SETC  'BALR'\n&E       SETC  'R14'         RETURN REGISTER\n         AIF   (N'&MODE LE 1).REGOP2\n&D       SETC  '&MODE(2)'\n         AIF   ('&D' EQ 'BAKR' OR '&D' EQ 'BASSM').REGOP2\n         AIF   ('&D' EQ 'BASR' OR '&D' EQ 'BALR').REGOP2\n         AIF   ('&D' EQ 'BSM').REGOP2\n         AGO   .BADMODE\n.AM31    ANOP  ,\n&C       SETC  'BAKR'\n&E       SETC  '0'           NO RETURN REGISTER\n         AIF   ('&D' EQ 'BAKR').REGOP2\n&C       SETC  'BASSM'\n&E       SETC  'R14'         RETURN REGISTER\n         AIF   (N'&MODE LE 1).REGOP2\n&D       SETC  '&MODE(2)'\n         AIF   ('&D' EQ 'BASSM').REGOP2\n&C       SETC  'BSM'\n         AIF   ('&D' EQ 'BSM').REGOP2\n&C       SETC  'BASR'\n         AIF   ('&D' EQ 'BASR').REGOP2\n&C       SETC  'BALR'\n         AIF   ('&D' EQ 'BALR').REGOP2\n.BADMODE MNOTE 8,'CATCALL: BRANCH TYPE MODE &D NOT RECOGNIZED'\n.REGOP2  MACPARM R14,(R15),OP=&C,OPR=&C\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATSCAT": {"ttr": 2830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x12\\x01\\x02$\\x0f\\x01\\x03\\x04/\\x16F\\x00\\x15\\x00\\t\\x00\\x10\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-08-28T00:00:00", "modifydate": "2003-02-11T16:46:12", "lines": 21, "newlines": 9, "modlines": 16, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CATSCAT &PFX=CSC,&DSECT=YES\n         AIF   ('&DSECT' NE 'YES').ALTSECT\n&PFX.DSECT DSECT ,\n         AGO   .NODSECT ,\n.ALTSECT ANOP  ,\n&PFX.DSECT  DS 0D            PLANT A LABEL\n.NODSECT AIF   (T'&NM EQ 'O').NOLABEL\n&NM      DS    0F\n.NOLABEL ANOP  ,\n&PFX.LINK  DS  A             LINK TO NEXT ELEMENT\n&PFX.NAME  DS  CL44          NAME\n&PFX.CAX   DS  A             ADDRESS OF CAX OR 0\n&PFX.FLGS  DS  X             PROCESSING FLAG\n&PFX.FGUS  EQU X'80'           ENTRY WAS USED (IN MULTIPLE CAT SEARCH)\n           DS  X             RESERVED\n           DS  X             RESERVED\n           DS  X             RESERVED\n           DS  X             RESERVED\n&PFX.SIZE  EQU  *-&PFX.LINK  AREA SIZE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATSPARM": {"ttr": 2832, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00@\\x01\\x02$\\x0f\\x01\\x03\\t?\\x15\\t\\x00:\\x00\\x1b\\x00+\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2002-08-28T00:00:00", "modifydate": "2003-04-03T15:09:40", "lines": 58, "newlines": 27, "modlines": 43, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CATSPARM &PFX=CSP,&DSECT=YES\n         AIF   ('&DSECT' NE 'YES').ALTSECT\n&PFX.DSECT DSECT ,\n         AGO   .NODSECT ,\n.ALTSECT ANOP  ,\n&PFX.DSECT  DS 0D            PLANT A LABEL\n.NODSECT AIF   ('&NM' EQ '').NOLABEL\n&NM      DS    0F\n.NOLABEL AIF   ('&NM' EQ '&PFX'.'PARM').NOLPARM\n&PFX.PARM   DS 0F            DEFINE START OF PARM\n.NOLPARM ANOP  ,\n&PFX.@WORK  DC A(0)          ADDRESS OF DYNAMIC WORK AREA\n&PFX.@SCAT  DC A(0)          ADDRESS OF LOADED SUBCAT ROUTINE\n&PFX.@SCMP  DC A(0)          ADDRESS OF LOADED SUBCOMP ROUTINE\n&PFX.#SP    DC AL1(0)        WORK AREA SUBPOOL\n&PFX.#SPL   DC AL3(0)        WORK AREA SIZE GOTTEN\n&PFX.#LEN   DC H'0'          ZERO OR LENGTH OF REQUEST NAME\n&PFX.$FLGS  DC X'00'         PROCESSING FLAGS\n&PFX.$FGCP  EQU X'80'          APPLY COMPARE MASK\n&PFX.$FGUC  EQU X'40'          USER SUPPLIED CATALOG NAME (IN ...RCAT)\n&PFX.$FG1C  EQU X'20'          LIMIT TO ONE CATALOG\n&PFX.$FGMC  EQU X'10'          CALLER HAS ALTERED MASK\n&PFX.$FULL  EQU X'01'          RETURN ERROR INFORMATION, CATALOGS,...\n&PFX.$REQ   DC X'00'         REQUEST (0-CLOSE; 1-LOOKUP; 2-INITLOOP*\n*                              3-NEXT ENTRY)\n&PFX.$RFX   EQU X'00'          CLOSE AND FREEMAIN\n&PFX.$RF1   EQU X'01'          SINGLE DSN LOOKUP\n&PFX.$RFI   EQU X'02'          INITIATE NULTIPLE LOOKUP\n&PFX.$RFN   EQU X'03'          GET NEXT ENTRY\n.*\n&PFX.@REQ   DC A(0)          LOOK/INIT: ITEM ADDRESS\n&PFX.RCOD   DC F'0'          RETURN CODE\n&PFX.REAS   DC F'0'          REASON CODE\n&PFX.@RAW   DC A(0)          ADDRESS OF THE RAW DATA            GP03042\n&PFX.#RAW   DC A(0)          LENGTH OF THE RAW DATA             GP03042\n&PFX.MASK   DC CL44' '       DSN MASK FOR LOOP REQUEST\n&PFX.MVOL   DC CL6' '        VOL MASK FOR LOOP REQUEST          GP03043\n&PFX.RCAT   DC CL44' '       CATALOG FOUND IN\n&PFX.RTYP   DC CL01' '  1/2  RETURNED ENTRY TYPE CODE           GP03042\n&PFX.RTYN   DC CL07' '  2/2  RETURNED ENTRY TYPE NAME/ABBREV    GP03042\n&PFX.RDSN   DC CL44' '       RETURNED DSNAME\n&PFX.#VOL   DC X'0'          RETURNED NO. OF VOLUMES\n&PFX.RDTYS  DC 0XL(5*4)'0'   RETURNED DEVICE TYPE(S)\n&PFX.RDTY   DC 5XL4'0'         RETURNED DEVICE TYPE(S)\n&PFX.RVOLS  DC 0CL(5*6)' '   RETURNED VOLUME SERIAL(S)\n&PFX.RVOL   DC 5CL6' '         RETURNED VOLUME SERIAL(S)\n&PFX.RDAC   DC CL08' '       DATA CLASS\n&PFX.RMGC   DC CL08' '       MANAGEMENT CLASS\n&PFX.RSTC   DC CL08' '       STORAGE CLASS\n&PFX.RGRP   DC CL08' '       SMS GROUP\n&PFX.ASTYP  DC CL(2*1)' '    ASSOCIATED TYPES\n&PFX.ASSOC  DC 0CL(2*44)' '  ASSOCIATED NAMES\n&PFX.ASSO1  DC CL44' '         FIRST NAME (DATA FOR CLUSTER)\n&PFX.ASSO2  DC CL44' '         SECOND NAME (INDEX FOR CLUSTER)\n&PFX.SIZE  EQU  *-&PFX.PARM   AREA SIZE\n&PFX.XCLR  EQU  &PFX.#LEN,*-&PFX.#LEN,X'00'  AREA TO CLEAR\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATSWORK": {"ttr": 2834, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00C\\x01\\x02$\\x0f\\x01\\x03\\x04\\x7f\\x14\\x01\\x00F\\x00:\\x00&\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2002-08-28T00:00:00", "modifydate": "2003-02-16T14:01:43", "lines": 70, "newlines": 58, "modlines": 38, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CATSWORK &PFX=CSW,&DSECT=YES\n         AIF   ('&DSECT' NE 'YES').ALTSECT\n&PFX.DSECT DSECT ,\n         AGO   .NODSECT ,\n.ALTSECT ANOP  ,\n&PFX.DSECT  DS 0D            PLANT A LABEL\n.NODSECT AIF   (T'&NM EQ 'O').NOLABEL\n&NM      DS    0F\n.NOLABEL ANOP  ,\n&PFX.SAVE   DC 18A(0)        MAIN OS SAVE AREA\n&PFX.SAV1   DC 18A(0)        INTERNAL SUBROUTINE SAVE AREA\n&PFX.SAV2   DC 18A(0)        INTERNAL SUBROUTINE SAVE AREA\n&PFX.DB     DC D'0'          WORK AREA\n&PFX.@CAHD  DC A(0)          HEAD OF CATALOG NAME LIST\n&PFX.@CATL  DC A(0)          ADDRESS OF LAST ALLOCATED ELEMENT\n&PFX.@CAMS  DC A(0)          ADDRESS OF ENTRY FOR MASTER CATALOG\n&PFX.#MASK  DC F'0'          LENGTH OF MASK\n&PFX.#CCOD  DC F'0'          PROGRAM RETURN CODE\n&PFX.@CSI   DC A(0)          ADDRESS OF IGGCSI00\n&PFX.@CPRM  DC 3A(0)         CSI CALL PARAMETER\n&PFX.@CBXL  DC 3A(0)         CSI RETURN SCANNING\n&PFX.@CRTN  DC A(0)          RETURN CODE\n&PFX.@FORM  DC A(0)          ADDRESS OF EXTRACTION ROUTINE\n&PFX.@FLD   DC A(0)          ADDRESS OF FORMATTING ROUTINE\n         SPACE 1\n&PFX.MSCAT  DC CL44' '       MASTER CATALOG\n&PFX.CUCAT  DC CL44' '       CURRENT CATALOG NAME (FROM CSI)\n&PFX.DACLS  DC CL8' '        DATA SET CLASS\n&PFX.MGCLS  DC CL8' '        MANAGEMENT CLASS\n&PFX.STCLS  DC CL8' '        STORAGE CLASS\n&PFX.FDLEN  DC F'0'          LENGTH OF CSI FIELD LENGHTS\n&PFX.CULEN  DC F'0'          LENGTH OF CURRENT CSI ENTRY\n&PFX.PFLGS  DC X'00'         MISCELLANEOUS FLAGS\n&PFX.PFCSI  EQU  X'80'          IGGCSI00 LOADED\n&PFX.PFCMP  EQU  X'40'          WE LOADED SUBCOMP ROUTINE\n&PFX.PFMST  EQU  X'20'          FIRST CATALOG PROCESS - STACK OTHERS\n&PFX.PFLUK  EQU  X'10'          LOOK OR NON-LOOP REQUEST\n&PFX.PFBUF  EQU  X'08'          LOOP INITIATED\n&PFX.PF1CT  EQU  X'04'          ONE CATALOG ONLY\n&PFX.PFCT1  EQU  X'02'          FIRST CATALOG FOUND\n&PFX.PFONE  EQU  X'01'          AT LEAST ONE MATCHED ENTRY\n         SPACE 1\n*   SUBCOMP PARAMETER LIST PASSED\n*\n&PFX.CMPRM  DC A(CSWCMMSK,CSW@CFLT,CSPMASK,CSWCM@WK)\n&PFX.CM@WK  DC A(0)          ADDRESS OFGETMAINED WORK AREA\n&PFX.CMMSK  DC C'MSK'        EXAMINE MASK\n&PFX.CMDSN  DC C'DSN'        COMPARE DSN TO MASK\n&PFX.CMVOL  DC C'VOL'        COMPARE VOLSER MASK\n&PFX.CIMSK  DC CL44' '       MASK REWORKED FOR CSI CALLS\n&PFX.CIVMS  DC CL6' ',CL2' '    REFERENCED VOLUME (COMPARE PAD)\n&PFX.CIVTS  DC CL6' ',CL2' '    VOLUME SERIAL FOR COMPARE\n         SPACE 1\n*   IGGCSI00 PARAMETER LIST PASSED\n*\n&PFX.@CFLD  DS 0F        CSI REQUEST AREA\n&PFX.@CFLT  DC CL44' '       (MAJOR) KEY\n&PFX.@CCAT  DC CL44' '       CATALOG NAME OR BLANKS\n&PFX.@CRES  DC CL44' '       ..RESUME DATA..\n&PFX.@CTYP  DC 16C' '        ENTRY TYPE SELECTION. BLANK FOR ALL\n&PFX.@COPT  DC 0CL4' '     CSI OPTIONS\n&PFX.@CODI  DC C' '          ..RETURN DATA OR INDEX, OR BLANKS..\n&PFX.@CORS  DC C' '          ..RESUME..\n&PFX.@CO1C  DC C' '          Y - SEARCH ONE CATALOG ONLY; BLANK - ALL\n&PFX.@CORV  DC C' '\n&PFX.@C#EN  DC HL2'0'        NUMBER OF FIELD NAMES\n&PFX.@C$EN  DC (PATFIENM)CL8' '   NAME1, NAME2, .....\n&PFX.SIZE  EQU  *-&PFX.SAVE  AREA SIZE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLRL": {"ttr": 2836, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x01\\x03\\t?\\x01\\t\\x01o\\x15'\\x00-\\x00/\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-04-03T00:00:00", "modifydate": "2009-01-16T15:27:00", "lines": 45, "newlines": 47, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CLRL  &A,&LN,&WORK1=14,&WORK2=0,&FILL=,&OPLEN=LA        84254\n.*--------------------------------------------------------------------*\n.*  CLEAR AN AREA OF ANY LENGTH USING MVCL (WAS MVC ON 360)           *\n.*--------------------------------------------------------------------*\n         LCLA  &K\n         LCLC  &W1E,&W1O,&W2E,&W2O\n         LCLC  &L                                               GP03093\n&L       SETC  'L'''                                            GP03093\n.*\n         AIF   (T'&A EQ 'O').BADA\n.*USE L*  AIF   (T'&LN EQ 'O').BADLN\n         AIF   (N'&A NE 1).BADA\n.*USE L*  AIF   (N'&LN NE 1).BADLN\n.*\n         AIF   (T'&WORK1 EQ 'O').BADW1\n         AIF   (T'&WORK2 EQ 'O').BADW2\n         AIF   (N'&WORK1 NE 1).BADW1\n         AIF   (N'&WORK2 NE 1).BADW2\n.*\n&W1E     SETC  '&WORK1(1)'\n&W1O     SETC  '&W1E'.'+1'\n&W2E     SETC  '&WORK2(1)'\n&W2O     SETC  '&W2E'.'+1'\n&NM      MACPARM &W1E,&A\n         MACPARM &W1O,&LN,NULL=&L&A,OP=&OPLEN                   GP03093\n         MACPARM &W2O,0      CLEAR SOURCE LENGTH\n         AIF   (T'&FILL EQ 'O').NOFILL\n         AIF   ('&FILL' EQ '0').NOFILL\n&K       SETA  K'&FILL\n         AIF   ('&FILL'(&K,1) EQ '''' OR '&FILL'(&K,1) EQ ')').FILLICM\n         ICM   &W2O,8,=AL1(&FILL)\n         AGO   .NOFILL\n.FILLICM ICM   &W2O,8,=&FILL\n.NOFILL  MVCL  &W1E,&W2E     CLEAR THE AREA\n         MEXIT ,\n.BADLN   MNOTE 4,'INVALID AREA LENGTH &LN'\n         MEXIT ,\n.BADA    MNOTE 4,'INVALID AREA ADDRESS &A'\n         MEXIT ,\n.BADW1   MNOTE 4,'INVALID WORK1 &WORK1'\n         MEXIT ,\n.BADW2   MNOTE 4,'INVALID WORK2 &WORK2'\n         MEXIT ,\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CMASK": {"ttr": 3073, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      CMASK &MASKEND='*-',&MASKEQU='?%', 2260 HAD \"  ADDED ON 89016 *\n               &ML=R15,&MA=R14,&L=R0,&A=R1,&RET=R9\n         LCLA  &I,&J,&K\n         LCLB  &LEQ\n         LCLC  &N,&C                                             89078\n&I       SETA  &SYSNDX\n&LEQ     SETB  ('&ML' EQ '&L')\n&N       SETC  '&NM'\n         AIF   (&LEQ).NOCOMP\n&N       CR    &ML,&L        IS MASK LONGER THAN DATA ?\n&N       SETC  ''\n         BHR   &RET          RETURN WITH CC UNEQUAL\n.NOCOMP  ANOP  ,             MASK LENGTH DEFINED SAME AS LENGTH\n&N       LTR   &ML,&ML       MASK EXHAUSTED ?\n         BNPR  &RET          YES - RETURN EQUAL\nCMK&I.M  DS    0H\n&J       SETA  1\n&K       SETA  K'&MASKEND-2  LENGTH W/O QUOTES\n.LOOPEND AIF   (&J GT &K).ENDLOOP\n&J       SETA  &J+1          SET FOR NEXT ONE\n&C       SETC  '&MASKEND'(&J,1)                                  89078\n         CLI   0(&MA),C'&C'  FORCED END ?                        89078\n         BER   &RET          'END' CHARACTER - RETURN EQUAL\n         AGO   .LOOPEND\n.ENDLOOP ANOP  ,\n&J       SETA  1\n&K       SETA  K'&MASKEQU-2  LENGTH W/O QUOTES\n.LOOPEQU AIF   (&J GT &K).EQULOOP\n&J       SETA  &J+1          SET FOR NEXT ONE\n&C       SETC  '&MASKEQU'(&J,1)                                  89078\n         CLI   0(&MA),C'&C'  NON-COMPARE ?                       89078\n         BE    CMK&I.E       'EQU' CHARACTER - SKIP COMPARE\n         AGO   .LOOPEQU\n.EQULOOP ANOP  ,\n         CLC   0(1,&MA),0(&A)    EQUAL ?\n         BNER  &RET          NO - RETURN UNEQUAL\nCMK&I.E  LA    &MA,1(,&MA)   NEXT MASK BYTE\n         LA    &A,1(,&A)     NEXT DATA BYTE\n         BCT   &ML,CMK&I.M   NEW MASK LENGTH\n         LTR   &ML,&ML       SET CC EQUAL\n         BR    &RET\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CNVA": {"ttr": 3075, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      CNVA  &R,&AD,&LEN,&DB=DB\n&NM      ST    &R,&DB\n         LA    R0,&DB\n         CNVX  (R0),&AD,&LEN\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNVD": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x99\\x11\\x0f\\x01\\x13\\x00\\x8f\\x00E\\x00\\x1d\\x00\\x1a\\x00\\x06\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1999-04-20T00:00:00", "modifydate": "2013-01-08T00:45:00", "lines": 29, "newlines": 26, "modlines": 6, "user": "GERHARD"}, "text": "         MACRO\n&NM      CNVD  &R,&AD,&LEN,&FORM=I\n         GBLB  &INLINE(50)\n         GBLB  &MVS,&MVSXA,&MVSESA,&OS390,&Z900                 GP04234\n         GBLC  &MACPLAB\n&MACPLAB SETC  '&NM'\n         LCLC  &L,&RTNE                                         GP13008\n         LCLA  &IX\n&L       SETC  'L'''\n&RTNE    SETC  'DCONVERT'    NORMAL INTEGER FORMATTING          GP13008\n&IX      SETA  6             STANDARD FLAG INDEX                GP13008\n         AIF   ('&FORM' EQ 'I').COMCODE                         GP13008\n&RTNE    SETC  'DCONVONE'    INTEGER PLUS SINGLE DECIMAL        GP13008\n&IX      SETA  12            SPECIAL INDEX                      GP13008\n         AIF   ('&FORM' EQ 'P1').COMCODE                        GP13008\n&RTNE    SETC  'DCONVTWO'    INTEGER PLUS TWO DECIMALS          GP13008\n&IX      SETA  13            SPECIAL INDEX                      GP13008\n         AIF   ('&FORM' EQ 'P2').COMCODE                        GP13008\n&RTNE    SETC  'DCONVTRE'    INTEGER PLUS THREE DECIMALS        GP13008\n&IX      SETA  14            SPECIAL INDEX                      GP13008\n         AIF   ('&FORM' EQ 'P3').COMCODE                        GP13008\n         MNOTE 8,'CNVD: UNRECOGNIZED FORM=&FORM VALUE'          GP13008\n&IX      SETA  6             STANDARD FLAG INDEX                GP13008\n.COMCODE MACPARM R0,(&R(1)),OP=LR   SET VALUE                   GP13003\n&INLINE(&IX) SETB 1                                             GP13008\n         MACPARM R1,&AD      GET OUTPUT ADDRESS\n         MACPARM R15,&LEN,NULL=&L&AD   OUTPUT LENGTH\n         MACPARM R14,&RTNE,OP=BAL                               GP13008\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNVR": {"ttr": 3079, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      CNVR  &R,&AD,&LEN,&DB=DB\n&NM      ST    &R,&DB\n         LA    R0,1+&DB\n         CNVX  (R0),&AD,&LEN\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNVX": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x11\\x0f\\x01\\x041\\x8f\\x104\\x00\\x14\\x00\\x13\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-04-20T00:00:00", "modifydate": "2004-11-13T10:34:00", "lines": 20, "newlines": 19, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      CNVX  &R,&AD,&LEN\n         GBLB  &INLINE(50)\n         GBLB  &MVS,&MVSXA,&MVSESA,&OS390,&Z900                 GP04234\n         LCLC  &L\n&INLINE(7) SETB 1\n&L       SETC  'L'''\n&NM      MACPARM R0,&R\n         MACPARM R1,&AD\n         AIF   ('&LEN' NE '').LEN\n         AIF   ('&AD'(1,1) EQ '(').TLEN\n         MACPARM R15,&L&AD\n         AGO   .BAL\n.TLEN    AIF   ('&LEN' NE '').LEN\n         MNOTE 4,'LENGTH REQUIRED'\n.LEN     ANOP\n         MACPARM R15,&LEN\n.BAL     ANOP\n         MACPARM R14,XCONVERT,OP=BAL\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPOOL": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\r\\x00\\x00\\x01\\x05\\x01\\x1f\\x01\\x12\\x15O\\x15E\\x00\\x91\\x08\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.13", "flags": 0, "createdate": "2005-01-11T00:00:00", "modifydate": "2012-06-02T15:45:00", "lines": 145, "newlines": 2062, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CPOOL &FUN,&OPT,&LINKAGE=,&REGS=,&LOC=,&KEY=,&TCB=,&HDR=,     *\n               &PCELLCT=,&SCELLCT=,&CSIZE=,&SP=,&CPID=,&CELL=,         *\n               &MF=S,&VERIFY=,&OWNER=\n         GBLC  &MACPLAB\n&MACPLAB SETC  '&NM'\n.**********************************************************************\n.*                                                                    *\n.*   THIS VERSION OF THE CPOOL MACRO INTERFACES TO SUBROUTINE         *\n.*   SUBCPOOL. IT PROVIDES BACKWARD COMPATIBILITY FOR HERCULES        *\n.*   RUNNING MVS 3.8J                                                 *\n.*     NOT SUPPORTED ARE KEY, TCB, LIST/WORKAREA, PRIV. SP,           *\n.*     VERIFY, AND OWNER.                                             *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*       GET    R0 = CPID  @ -> CELL  CALL SUBCPOOL                   *\n.*       FREE   R0 = CPID, R1 = CELL  CALL SUBPOOL+24*                *\n.*       BUILD  R1 = PARM LIST        CALL SUBPOOL+28*                *\n.*       DELETE R0 = CPID             CALL SUBPOOL+32*                *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*   PARM LIST IS SAME AS IBM'S FOR COMPATIBILITY                     *\n.*      0 - 3     NUMBER OF CELLS REQUESTED\n.*      4 - 7     SECONDARY AMOUNT\n.*      8 -11     SIZE OF EACH CELL\n.*     12         SUBPOOL (ONLY 0-127 WORK)\n.*     13         KEY(IGNORED)\n.*     14         FLAGS\n.*         80       LOC HAS REAL (IGNORED)\n.*         60       LOC ANY; 20 BELOW (FORCED); 00 RES\n.*         10       USER SPECIFIED TCB (IGNORED)\n.*         08       USER SPECIFIED KEY (IGNORED)\n.*         04       USER SPECIFIED HDR\n.*         03       OWNER IS SYSTEM; 01 PRIMARY; 00 HOME (IGNORED)\n.*     15         UNUSED\n.*     16-19      TCB (IGNORED)\n.*     20-43      HEADER\n.*                                                                    *\n.**********************************************************************\n         GBLC  &MACPLOD                                         GP12154\n         LCLA  &BOFF         FUNCTION'S BRANCH OFFSET\n         LCLC  &ISN          SECONDARY CELL COUNT\n         LCLA  &FGLOC,&FGTCB,&FGKEY,&FGHDR,&FGOWN\n         LCLC  &VPN,&VSN,&VSZ,&VSP,&VKY,&VTC,&VHD\n         AIF   ('&FUN' EQ 'GET').COMMID     NO OFFSET\n&BOFF    SETA  24\n         AIF   ('&FUN' EQ 'FREE').FREECEL   BRANCH WITH POOL ID\n&BOFF    SETA  28\n         AIF   ('&FUN' EQ 'BUILD').BUILDER  BRANCH WITH POOL ID\n&BOFF    SETA  32\n         AIF   ('&FUN' EQ 'DELETE').COMMID  BRANCH WITH POOL ID\n         MACPARM MODE=LBL    EXPAND LABEL, IF ANY\n MNOTE 8,'CPOOL: UNSUPPORTED FUNCTION &FUN '\n         MEXIT ,\n.FREECEL MACPARM R1,&CELL,NULL=CELL-ADD\n.COMMID  MACPARM R0,&CPID,OP=L,NULL=POOL-ID  LOAD THE CELL POOL ID\n.CALL    MACSRVLD SUBCPOOL   GET AD-CON NAME FOR SUBROUTINE\n         MACPARM R15,&MACPLOD,OP=L  GET SUBROUTINE ADDRESS\n         AIF   (&BOFF NE 0).U  ONLY GET HAS COND ENTRY\n         AIF   ('&OPT' EQ '' OR '&OPT' EQ 'U' OR '&OPT' EQ 'UNCOND').U\n         AIF   ('&OPT' EQ 'C' OR '&OPT' EQ 'COND').C\n MNOTE 8,'CPOOL: REQUEST NOT COND NOR UNCOND. &OPT INVALID'\n         AGO   .U\n.C       O     R15,=X'80000000'  CONDITIONAL REQUEST\n.U       AIF   (&BOFF EQ 0).BR  NO OFFSET\n         MACPARM R14,&BOFF.(,R15),OP=BAL  GET ENTRY ADDRESS\n         AIF   (&BOFF NE 28).MEXIT  NOT BUILD\n         MACPARM R0,&CPID,OP=ST,MODE=REV\n.MEXIT   MEXIT ,\n.BR      MACPARM R14,(R15),OP=BALR,OPR=BALR\n         MACPARM R1,&CELL,OP=ST,MODE=REV,NULL=SKIP  GET RETURNS CELL @\n         MEXIT ,\n.BUILDER AIF   ('&MF' EQ '').TYPES\n         AIF   ('&MF(1)' EQ 'L').TYPEL\n         AIF   ('&MF(1)' EQ 'S').TYPES\n         AIF   ('&MF(1)' EQ 'E').TYPEE\n         MACPARM MODE=LBL\n MNOTE 8,'CPOOL: INVALID TYPE &MF'\n         MEXIT ,\n.TYPEE   MACPARM R1,&MF(2),NULL=LIST-ADD\n         AGO   .POPLIST\n.TYPES   MACPARM 2,4,OP=CNOP,OPR=CNOP\n         MACPARM R1,*+4+44,OP=BAL  BRANCH AROUND IN-LINE PARM LIST\n         DC    XL44'0'       IN-LINE PARM LIST\n.POPLIST MACPLOP &PCELLCT,0(,R1),NULL=PCELL-CT\n&ISN     SETC  '&PCELLCT'\n         AIF   ('&SCELLCT' EQ '').HV2\n&ISN     SETC  '&SCELLCT'\n.HV2     MACPLOP &ISN,4(,R1),NULL=SCELL-#\n         MACPLOP &CSIZE,8(,R1),NULL=CELL-SZ\n         AIF   ('&SP' EQ '').NOSP\n         MACPLOP &SP,14(,R1),OP=STC\n.NOSP    AIF   ('&KEY' EQ '').NOKEY\n         MACPLOP &KEY,15(,R1),OP=STC\n&FGKEY   SETA  8             KEY SPECIFIED\n.NOKEY   AIF   ('&TCB' EQ '').NOTCB\n         MACPLOP &TCB,16(,R1)\n&FGTCB   SETA  16            TCB SPECIFIED\n.NOTCB   AIF   ('&HDR' EQ '').NOHDR\n&FGHDR   SETA  4             HDR SPECIFIED\n         AIF   ('&HDR'(1,1) NE '''').NOQ\n         MACPARM 20(24,R1),=C&HDR,OP=MVC\n         AGO   .NOHDR\n.NOQ     MACPARM R15,&HDR\n         MACPLOP 20(24,R1),0(R15),OP=MVC\n.NOHDR   MVI   14(R1),&FGLOC+&FGTCB+&FGKEY+&FGHDR+&FGOWN\n         AGO   .CALL         CALL THE BUILD FUNCTION\n.TYPEL   ANOP  ,\n&VPN     SETC  '0'\n&VSN     SETC  '0'\n&VSZ     SETC  '0'\n&VSP     SETC  '0'\n&VKY     SETC  '0'\n&VTC     SETC  '0'\n&VHD     SETC  '0'\n         AIF   (T'&PCELLCT EQ 'O').DPN\n&VPN     SETC  '&PCELLCT'\n&VSN     SETC  '&VPN'\n.DPN     AIF   (T'&SCELLCT EQ 'O').DSN\n&VSN     SETC  '&SCELLCT'\n.DSN     AIF   (T'&CSIZE EQ 'O').DSZ\n&VSZ     SETC  '&CSIZE'\n.DSZ     AIF   (T'&SP EQ 'O').DSP\n&VSP     SETC  '&CSIZE'\n.DSP     AIF   (T'&KEY EQ 'O').DKY\n&VKY     SETC  '&KEY'\n&FGKEY   SETA  8\n.DKY     AIF   (T'&TCB EQ 'O').DTC\n&VTC     SETC  '&TCB'\n&FGTCB   SETA  16\n.DTC     AIF   (T'&HDR EQ 'O').DHD\n&FGHDR   SETA  4\n&VHD     SETC  '&HDR'\n.DHD     MACPARM A(&VPN,&VSN,&VSZ),MODE=ONE,OP=DC\n         DC    AL1(&VSP,&VKY,&FGLOC+&FGTCB+&FGKEY+&FGHDR+&FGOWN,0)\n         AIF   ('&HDR' NE '').HVHD\n         DC    A(&VTC),XL24'0'\n         MEXIT ,\n.HVHD    AIF   ('&HDR'(1,1) NE '''').PNHD\n         DC    A(&VTC),CL24&VHD\n         MEXIT ,\n.PNHD    DC    A(&VTC),CL24'&VHD '\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CRMEND": {"ttr": 3087, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      CRMEND &PFX=                                   ADDED ON 85070\n         GBLC  &CRM@NAM\n         LCLC  &P\n&P       SETC  '&PFX'\n         AIF   ('&P' NE '').HP\n&P       SETC  '&CRM@NAM'\n         AIF   ('&P' NE '').HP\n&P       SETC  'CRX'\n.HP      ANOP  ,\n         LTORG ,\n         SPACE 1\n&P.LAST  DS    0D\n&P.SIZE  EQU   &P.LAST-&P.CODE  SIZE OF CSA RELOCATION\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CRMEXIT": {"ttr": 3089, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x00\\x00\\x00\\x01\\x08'\\x8f\\x01\\x08'\\x8f\\x00\\x07\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.00", "flags": 0, "createdate": "2008-10-04T00:00:00", "modifydate": "2008-10-04T00:07:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CRMEXIT &RC,&PFX=                              ADDED ON 85070\n         GBLC  &CRM@NAM\n         LCLC  &P\n&P       SETC  '&PFX'\n         AIF   ('&P' NE '').HP\n&P       SETC  '&CRM@NAM'\n         AIF   ('&P' NE '').HP\n&P       SETC  'CRX'\n.HP      ANOP  ,\n&NM      MACPARM R15,&RC\n         MACPARM R14,&P.SAVE+14*4,OP=L  RESTORE RETURN\n         BR    R14           RETURN TO SRB CONTROL CODE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CRMHEAD": {"ttr": 3091, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      CRMHEAD &PFX=                                  ADDED ON 85070\n         GBLC  &CRM@NAM\n         LCLC  &P\n&P       SETC  '&PFX'\n         AIF   ('&P' NE '').HP\n&P       SETC  'CRX'\n.HP      AIF   ('&NM' EQ '').NL\n&NM      DS    0D .\n.NL      DROP  ,             NO ADDRESSABILITY\n&CRM@NAM SETC  '&P'          SAVE PREFIX GLOBALLY\n&P.CODE  DS    0D\n&P.SAVE  DC    16A(0)        SAVE AREA USED BY @SERVICE'S SRB\n&P.SPEX  DC    A(0,0)        SPIE EXIT CODE ADDRESS/COUNT\n         USING &P.CODE,R13   SET BY SRB CODE\n&P.ENTY  STM   R0,R15,&P.SAVE-&P.SAVE(R13)  SAVE ALL REGISTERS   90274\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CRMS": {"ttr": 3093, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x041\\x8f\\x05\\x16\\x00\"\\x00!\\x00\\x02\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2004-11-13T05:16:00", "lines": 34, "newlines": 33, "modlines": 2, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CRMS  &FUN,&R0,&R1,&OPT=                        UPDATED 90177\n         GBLC  &MACPLAB                                          90177\n         GBLB  &MVS,&MVSXA,&MVSESA,&OS390,&Z900                 GP04234\n         LCLC  &B\n&MACPLAB SETC  '&NM'         SET LABEL GENERATION                90177\n         AIF   ('&FUN' EQ 'SRB' OR '&FUN' EQ 'SCHEDULE').SRB\n         AIF   ('&FUN' EQ 'INIT').INIT\n         AIF   ('&FUN' EQ 'GET').GET\n         AIF   ('&FUN' EQ 'FREE').FREE\n         MNOTE 8,'FUNCTION OPERAND REQUIRED'\n         MEXIT ,\n.FREE    ANOP  ,\n&B       SETC  'EXWCRSFR'\n         AGO   .BAL\n.GET     ANOP  ,\n&B       SETC  'EXWCRSGT'\n         AGO   .L0\n.INIT    ANOP  ,\n&B       SETC  'EXWCRSIN'\n         MACPARM R1,&R1,NULL=SKIP                               GP02241\n.L0      MACPARM R0,&R0,NULL=SKIP                               GP02241\n         AGO   .BAL\n.SRB     ANOP  ,\n&B       SETC  'EXWCRSCH'\n         MACPARM R1,0        LOAD A ZERO                         90177\n         AIF   ('&OPT' EQ '').BAL                                90177\n         AIF   ('&OPT' EQ 'SPVR').SCH1                           90177\n         MNOTE 4,'*** UNSUPPORTED OPT= VALUE'                    90177\n         AGO   .BAL                                              90177\n.SCH1    MACPARM R1,0,OP=BCTR,OPR=BCTR  SET -1                   90177\n.BAL     ANOP  ,                                                 82200\n         MACPARM R14,&B,OP=BAL,OPR=BALR   CALL SCHEDULE SERVICES 90177\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CRMSPIE": {"ttr": 3095, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x00\\x00\\x00\\x01\\x08'\\x8f\\x01\\x08'\\x8f\\x00\\x10\\x00\\x16\\x00\\x16\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.00", "flags": 0, "createdate": "2008-10-04T00:00:00", "modifydate": "2008-10-04T00:10:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CRMSPIE &AD,&PFX=                              ADDED ON 85070\n         GBLC  &CRM@NAM\n         LCLC  &P\n&P       SETC  '&PFX'\n         AIF   ('&P' NE '').HP\n&P       SETC  '&CRM@NAM'\n         AIF   ('&P' NE '').HP\n&P       SETC  'CRX'\n.HP      ANOP  ,\n         AIF   ('&AD' EQ '0').CANCEL\n         AIF   ('&AD' NE '').SET\n         MNOTE 8,'EXIT ADDRESS OPERAND REQUIRED'\n         MEXIT ,\n.CANCEL  ANOP  ,\n&NM      XC    &P.SPEX,&P.SPEX\n         MEXIT ,\n.SET     ANOP  ,\n&NM      MACPARM R0,R12,&P.SAVE,OP=STM,MODE=THREE  REFRESH USER REGS\n         MACPARM R15,&AD     LOAD ADDRESS OF EXIT\n         MACPARM R15,&P.SPEX,OP=ST   SET SPIE EXIT ADDRESS\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSADD": {"ttr": 3097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x000\\x00\\x97(?\\x00\\x97(?\\x15\"\\x00\\x16\\x00\\x13\\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-10-10T00:00:00", "modifydate": "1997-10-10T15:22:30", "lines": 22, "newlines": 19, "modlines": 3, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CSADD &CTR,&INC=1,&WK1=R14,&WK2=R15                     87001\n         LCLC  &N\n&N       SETC  '&NM'\n         AIF   ('&N' NE '').NOLB\n&N       SETC  'ZZCS'.'&SYSNDX'\n.NOLB    ANOP  ,\n&N       L     &WK1,&CTR     LOAD OLD VALUE\n         AIF   (K'&INC LT 3).NOREG\n         AIF   ('&INC'(1,1) EQ '(' AND '&INC'(2,1) NE '(').REG\n.NOREG   AIF   ('&WK1(1)' EQ '0' OR '&WK1(1)' EQ 'R0').NOLA\n         LA    &WK2,&INC.(,&WK1)  INCREASE\n         AGO   .COM\n.NOLA    LA    &WK2,&INC     INCREMENT\n         AR    &WK2,&WK1\n         AGO   .COM\n.REG     ANOP  ,\n         LR    &WK2,&WK1\n         AR    &WK2,&INC(1)  INCREASE\n.COM     CS    &WK1,&WK2,&CTR  REPLACE\n         BNZ   &N            ELSE TRY AGAIN\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSDEC": {"ttr": 3099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x08\\x00\\x97(?\\x00\\x97(?\\x15!\\x00\\x14\\x00\\x14\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-10-10T00:00:00", "modifydate": "1997-10-10T15:21:08", "lines": 20, "newlines": 20, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CSDEC &CTR,&DEC=1,&WK1=R14,&WK2=R15                     87001\n         LCLC  &N\n&N       SETC  '&NM'\n         AIF   ('&N' NE '').HAVELB\n&N       SETC  'ZZCS'.'&SYSNDX'\n.HAVELB  ANOP  ,\n&N       L     &WK1,&CTR     LOAD OLD VALUE\n         LR    &WK2,&WK1     COPY CURRENT VALUE\n         AIF   (K'&DEC LT 3).NOREG\n         AIF   ('&DEC'(1,1) EQ '(' AND '&DEC'(2,1) NE '(').REG\n.NOREG   AIF   ('&DEC' EQ '1').SPEC\n         SH    &WK2,=Y(&DEC) DECREASE\n         AGO   .COM\n.SPEC    BCTR  &WK2,0        DECREASE\n         AGO   .COM\n.REG     SR    &WK2,&DEC(1)  DECREASE\n.COM     CS    &WK1,&WK2,&CTR  REPLACE\n         BNZ   &N            ELSE TRY AGAIN\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSIRWORK": {"ttr": 3101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x00\\x04?\\x01\\x06&/#S\\x00E\\x00>\\x00\\x05\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2000-02-12T00:00:00", "modifydate": "2006-09-19T23:53:00", "lines": 69, "newlines": 62, "modlines": 5, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CSIRWORK ,                                      ADDED: GP00043\n.**********************************************************************\n.*                                                                   **\n.*  THIS MACRO MAPS THE RETURN AREA FROM THE IGGCSI00 SERVICE.       **\n.*  (COULDN'T FIND AN IBM VERSION AS OF OS/390 2.8)                  **\n.*                                                                   **\n.**********************************************************************\n         AIF   ('&NM' NE '').UNAME\nCSIRWORK DSECT ,\n         AGO   .COMMON\n.UNAME   ANOP  ,\n&NM      DS    0D\n.COMMON  ANOP  ,\nCSIUSRLN DC    F'4096'       USER PROVIDED WORK AREA SIZE\nCSIREQLN DC    F'0'          MINIMUM REQUIRED LENGTH\nCSIUSDLN DC    F'0'          ACTUAL LENGTH USED\nCSINUMFD DC    H'0'          NUMER OF SPECIFIED FIELD NAMES + 1\nCSIRWENT EQU   *             START OF DIFFERENT ENTRY TYPES\n         SPACE 1\n         ORG   CSIRWENT      DEFINE FOR ICF CATALOG\nCSICFLG  DS    X             CATALOG FLAG\nCSINTICF EQU   X'80'           UNSUPPORTED - NON-ICF CAT\nCSINOENT EQU   X'40'           NO ENTRIES FOUND\nCSINTCMP EQU   X'20'           INCOMPLETE RESPONSE\nCSICERR  EQU   X'10'           CAT.ERR. - NOTHING PROCESSED\nCSICERRP EQU   X'08'           CAT.ERR. - PARTIALLY PROCESSED\nCSICTYPE DS    C             CATALOG TYPE (ICF - '0')\nCSICNAME DS    CL44          CATALOG NAME\nCSICRETN DS    0XL4          RETURN CODES\nCSICRETM DS    CL2             CAT. MODULE ID\nCSICRETR DS    X               REASON CODE\nCSICRETC DS    X               RETURN CODE\nCSICLENG EQU   *-CSICFLG     SIZE OF ENTRY\n         SPACE 1\n         ORG   CSIRWENT      DEFINE FOR OTHERS\nCSIEFLG  DS    X             ENTRY FLAG\nCSIPMENT EQU   X'80'           PRIMARY ENTRY\nCSIENTER EQU   X'40'           ERROR - CODE AFTER NAME\nCSIEDATA EQU   X'20'           DATA ARE RETURNED FOR THIS ENTRY\nCSIETYPE DS    C             ENTRY TYPE\nCSIETYP0 EQU   C'0'            ICF CATALOG\nCSIETYPA EQU   C'A'            NON-VSAM DATA SET\nCSIETYPB EQU   C'B'            GENERATION DATA GROUP\nCSIETYPC EQU   C'C'            CLUSTER\nCSIETYPD EQU   C'D'            DATA COMPONENT\nCSIETYPH EQU   C'G'            ALTERNATE INDEX\nCSIETYPG EQU   C'H'            GENERATION DATA SET\nCSIETYPI EQU   C'I'            INDEX\nCSIETYPR EQU   C'R'            PATH\nCSIETYPX EQU   C'X'            ALIAS\nCSIETYPU EQU   C'U'            USER CATALOG CONNECTOR\nCSIETYPL EQU   C'L'            ATL LIBRARY ENTRY\nCSIETYPW EQU   C'W'            ATL VOLUME ENTRY\nCSIENAME DS    CL44          ENTRY NAME\nCSIERETN DS    0XL4          RETURN CODES\nCSIERETM DS    CL2             CAT. MODULE ID\nCSIERETR DS    X               REASON CODE\nCSIERETC DS    X               RETURN CODE\nCSIELENG EQU   *-CSIEFLG     SIZE OF ENTRY ON ERROR\n         ORG   CSIERETN\nCSITOTLN DS    HL2           LENGTH OF ENTRY AFTER CSIENAME END\n         DS    HL2             RESERVED\nCSILENFD DS    0HL2          FIELD LENGTH ARRAY\nCSILENF1 DS    HL2             LENGTH OF FIRST ENTRY\n.*\n.*  DATA, IF ANY, FOLLOW A(CSITOTLN+2)+2*CSINUMFD\n.*\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSREP": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x97(?\\x01\\x11\"O\\x16E\\x00\\x14\\x00\\x07\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-10-10T00:00:00", "modifydate": "2011-08-12T16:45:00", "lines": 20, "newlines": 7, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      CSREP &NEW,&OLD,&WK1=R14,&WK2=R15                       87001\n         GBLC  &MACPLAB\n         LCLC  &N\n         LCLA  &K\n&K       SETA  K'&NEW\n&N       SETC  '&SYSNDX'\n&L       SETC  'CS'.'&SYSNDX'\n&MACPARM SETC  '&NM'\n         AIF   (&K LT 3).OLD\n         AIF   ('&NEW'(1,1) NE '(' OR '&NEW'(&K,1) NE ')').OLD\n         AIF   ('&NEW'(2,1) EQ '(').OLD        ((EXPRESSION)) ?\n         AIF   ('&NEW'(&K-1,1) EQ ')').OLD     ((EXPRESSION)) ?\n&WK2     SETC  '&NEW(1)'\n         AGO   .COM\n.OLD     MACPARM &WK2,&NEW,OP=L           LOAD NEW VALUE\n.COM     MACPARM &WK1,&OLD,OP=L,OPR=L     LOAD OLD VALUE\n&L.L     CS    &WK1,&WK2,&OLD  REPLACE\n         BNZ   &L.L          ELSE TRY AGAIN\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVH": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x99\\x11\\x0f\\x01\\x042\\x1f\\x15!\\x00\\x17\\x00\\x0c\\x00\\x02\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-04-20T00:00:00", "modifydate": "2004-11-16T15:21:00", "lines": 23, "newlines": 12, "modlines": 2, "user": "GERHARD"}, "text": "         MACRO\n&NM      CVH   &R,&AD,&LEN\n         GBLB  &INLINE(50)\n         GBLB  &MVS,&MVSXA,&MVSESA,&OS390,&Z900                 GP04234\n         GBLC  &MACPLAB\n         LCLC  &L\n&INLINE(6) SETB 1\n&L       SETC  'L'''\n&MACPLAB SETC  '&NM'\n         AIF   (T'&R NE 'F' AND T'&R NE 'V' AND T'&R NE 'A').LH\n         MACPARM R0,&R,OP=L\n         AGO   .COM\n.LH      MACPARM R0,&R,OP=LH\n.COM     MACPARM R1,&AD .    GET OUTPUT ADDRESS\n         AIF   ('&LEN' NE '').LEN\n         AIF   ('&AD'(1,1) EQ '(').TLEN\n         MACPARM R15,&L&AD   USE IMPLICIT OUTPUT LENGTH\n         AGO   .BAL\n.TLEN    AIF   ('&LEN' NE '').LEN\n         MNOTE 4,'CVH: LENGTH REQUIRED'\n.LEN     MACPARM R15,&LEN .    GET OUTPUT LENGTH\n.BAL     MACPARM R14,DCONVERT,OP=BAL\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVI": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\t4\\x7f\\x01\\t4\\x7f\\x02\\x01\\x00\\x13\\x00\\x13\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2009-12-13T00:00:00", "modifydate": "2009-12-13T02:01:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      CVI   &R,&AD,&LEN                                  NEW GP09347\n.*   THIS MACRO CONVERTS AN INTEGER TO PRINTABLE FORM. EXPECTED\n.*   OUTPUT LENGTH IS 7. VALUES BELOW 1 MILLION ARE SHOWN WITH\n.*   A COMMA; LARGER VALUES AS TRUNCATED K WITH NO COMMAS.\n.*\n         GBLB  &INLINE(50)\n&INLINE(8) SETB 1            REQUEST ICONVERT EXPANSION\n         LCLC  &L\n&L       SETC  'L'''\n         AIF   (T'&R EQ 'H').LH\n&NM      MACPARM R0,&R,OP=L\n         AGO   .COM\n.LH      ANOP  ,\n&NM      MACPARM R0,&R,OP=LH\n.COM     MACPARM R1,&AD\n         MACPARM R15,&LEN,NULL=&LEN&AD\n         MACPARM R14,ICONVERT,OP=BAL\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DASDTYPE": {"ttr": 3335, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM    DASDTYPE &UCB=R3,&OUT=R1,&R=R15,&S=R14,&T=R0\n         GBLC  &SYSTEM                                           82158\n         LCLA  &I\n.*  THIS MACRO EXPANDS IN-LINE CODE TO SIMULATE THE DEVTYPE SVC\n.*  FOR DISK DEVICES. INPUT IS A UCB ADDRESS IN REGISTER UCB;\n.*  OUTPUT IS 20 BYTES IN AREA POINTED TO BY REGISTER OUT;\n.*  ON A WORD BOUNDARY, CORRESPONDING TO WORDS 2-6 OF DEVTYPE.\n.*   CODE WAS LIFTED FROM DEVTYPE SVC OS 21.8\n.*\n&I       SETA  &SYSNDX\n         PUSH  USING                                             93032\n&NM      XC    0(20,&OUT),0(&OUT)     CLEAR OUTPUT AREA\n         NEED  CVT           REQUEST EXPANSIONS VIA MSECT\n         NUSE  UCB,&UCB                                          93032\n         IC    &R,UCBTBYT4   GET THE DISK SUB-TYPE               93032\n         LA    &S,X'0F'      MASK FOR SUB-TYPE INDEX\n         NR    &R,&S         GET INDEX\n         L     &S,CVTPTR     GET CVT\n         L     &S,CVTZDTAB-CVTMAP(,&S)  GET CVT DEVICE POINTER\n         IC    &R,0(&R,&S)    GET INDEX TO DEVICE ENTRY\n         AR    &S,&R         GET ENTRY FOR THIS TYPE\n         MVC   4(12,&OUT),0(&S)    MOVE DATA\n         TM    UCBTBYT2,UCB2OPT3    RPS DEVICE ?                 93032\n         BZ    *+10          NO\n         MVC   16(4,&OUT),14(&S)     MOVE RPS WORD ALSO\n         LH    &R,4(,&S)     GET BLOCK SIZE\n         AIF   ('&SYSTEM' EQ 'MVS').ISMVS                        82157\n         TM    UCBFL5,UCBEXTSN     EXTENDED SENSE DEVICE ?       93032\n         BZ    ZZZZ&I        NO; SKIP RECALCULATION\n.ISMVS   XR    &T,&T                                             82157\n         IC    &T,6(,&S)     GET OVERHEAD\n         TM    9(&S),8       TWO BYTE OVERHEAD ?\n         BZ    *+8           NO\n         LH    &T,6(,&S)     GET FULL OVERHEAD\n         SR    &R,&T         ADJUST\n         XR    &T,&T\n         IC    &T,8(,&S)     GET ADJUSTMENT TO ADJUSTMENT\n         AR    &R,&T         FINAL ADJUSTED SIZE\nZZZZ&I   ST    &R,0(,&OUT)   SET RECALCULATED BLOCKSIZE\n         POP   USING                                             93032\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DBO": {"ttr": 3337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x05\\x00\\x00\\x01\\x05\\x01o\\x01\\t\\x18?\\x19C\\x01H\\x01G\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.05", "flags": 0, "createdate": "2005-01-16T00:00:00", "modifydate": "2009-07-02T19:43:00", "lines": 328, "newlines": 327, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DBO   &LBL,&TEXT=,&REGS=YES,&HEX=,&MODE=S,     ADDED ON 85360 *\n               &WK=R9,&DEV=1,&TCB=,         WTO VS @PRT  CHANGED 94011 *\n               &ROUT=13,&DES=4,&BUGPARM=NO,                ADDED 95067 *\n               &CTEXT=,&PACK=,                             ADDED 96081 *\n               &PRTMODE=0,&DCB=0,   USER PRINT DCB/MODE    ADDED 99058 *\n               &COUNT=,&CALL=DYN,&OPT=,                  CHANGED 98222 *\n               &WA=DBTSAVE,                                ADDED 99114 *\n               &LIST=                                      ADDED 95235\n.**********************************************************************\n.*>>>>>>>>> KEPT FOR OLD CODE ONLY - NEW CODE SHOULD USE DBT <<<<<<<<<*\n.**********************************************************************\n.*                                                                    *\n.*  THIS MACRO INVOKES EXTERNAL LOAD MODULE DEBTROLD TO PRODUCE       *\n.*  TRACING, REGISTER CONTENTS, AND VARIABLES. (DEBTROLD SHOULD BE IN *\n.*  A LINKLIB; AUTHORIZATION IS NOT REQUIRED). OUTPUT WILL BE BY WTO  *\n.*  UNLESS A DEBTRACE DD CARD IS SUPPLIED.                            *\n.*                                                                    *\n.*  REQUIRED:  IN A CSECT OR RSECT:   DEBTRACE MODE=C  DEFINES CODE   *\n.*             IN A CSECT OR DSECT:   DEBTRACE MODE=D  DEFINES DATA   *\n.*             IN A CSECT (\u00acRENT) :   DEBTRACE MODE=DC   BOTH         *\n.*    (NOTE: REQUIRED FORMS MUST NOT APPEAR PRIOR TO FIRST OPTIONAL)  *\n.*                                                                    *\n.*  OPTIONAL:  LABEL DEBTRACE ...                                     *\n.*                TAG OR ,  -  IDENTIFIER ON OUTPUT LISTING / CONSOLE *\n.*                                                                    *\n.*                REGS= (DEFAULT) | REGS=NO - NO REGISTERS            *\n.*                REGS=YES  -  REGISTERS R0 THROUGH R15               *\n.*                REGS=(R1,R2) - REGISTERS R1 THROUGH R2              *\n.*                REGS=SHORT   - R14 THROUGH R1                       *\n.*                                                                    *\n.*                TEXT=NAME -  TEXT STRING TO BE SHOWN                *\n.*                TEXT=(NAME,LEN) - TEXT W/EXPLICIT LENGTH            *\n.*                                                                    *\n.*                CTEXT=NAME - CONDITIONAL TEXT STRING TO BE SHOWN    *\n.*                CTEXT=(NAME,LEN) - TEXT W/EXPLICIT LENGTH           *\n.*                              OUTPUT IN HEX IF NOT PRINTABLE        *\n.*                                                                    *\n.*                HEX=NAME   -  DATA TO BE SHOWN IN HEXADECIMAL       *\n.*                HEX=(NAME,LEN) - TEXT W/EXPLICIT LENGTH             *\n.*                                                                    *\n.*                PACK=NAME  -  DATA TO BE CONVERTED FROM PACKED      *\n.*                PACK=(NAME,LEN) - TEXT W/EXPLICIT LENGTH (LEN IGNRD)*\n.*                                                                    *\n.*           LIST=((OP1,LN1,FM1),(OP2,LN2,FM2), ... )                 *\n.*                                                                    *\n.*                OP - ADDRESS EXPRESSION VALID IN S CONSTANT         *\n.*                LN - LENGTH EXPRESSION; DEFAULT IS L'OP             *\n.*                FM - TEXT | CTEXT | HEX | PACK - DEFAULT IS HEX     *\n.*                     OR ABBREVIATED   T | CT | H | P                *\n.*                                                                    *\n.*  THE REQUIRED FORMS MAY BE OMITTED WHEN PGMTRACE WILL ALSO BE USED *\n.*  AND ACTIVATED. IN THAT CASE THE FIRST OPTIONAL FORM MUST INCLUDE  *\n.*  CALL=TRC TO GENERATE SHORTER PARAMETER LISTS.                     *\n.*                                                                    *\n.**********************************************************************\n.*  MAINTENANCE:                                                      *\n.*                                                                    *\n.*  2000/01/03  GYP  REMOVED IN-LINE DEBUG CODE;                      *\n.*                   FIXED MODE=C AND MODE=D FOR USE WITH REENTRANT   *\n.*                     PROGRAMS.                                      *\n.*                                                                    *\n.**********************************************************************\n     GBLB  &BUGBEAR,&BUGTCB,&BUGSWCH,&BUGSWRT,&BUGFAR,&BUGEXT,&BUGDYN\n     GBLB  &BUGTRC,&BUGDBO   USED WITH ACTIVE PGMTRACE (ESPIE)  GP99113\n         GBLA  &MACP#        NUMBER OF SUBLIST PARAMETERS       GP04234\n         GBLC  &MACP1,&MACP2,&MACP3,&MACP4,&MACP5               GP04234\n         GBLC  &MACP6,&MACP7,&MACP8,&MACP9,&MACP10              GP04234\n         GBLC  &V\n         LCLA  &LN,&I,&EN,&EM,&EO                               GP95235\n         LCLC  &L,&ET,&EL,&EK                                   GP95235\n&L       SETC  'L'''                                            GP95235\n&V       SETC  'DBT'.'&SYSNDX'\n&BUGFAR  SETB  (&BUGFAR OR ('&CALL' EQ 'FAR'))                   95079\n&BUGEXT  SETB  (&BUGEXT OR ('&CALL' EQ 'EXTRN'))                 95227\n&BUGDYN  SETB  (&BUGDYN OR ('&CALL' EQ 'DYN'))                  GP97261\n&BUGDYN  SETB  (&BUGDYN OR ('&CALL' EQ ''))  DROP LOCAL CODE    GP00004\n&BUGDYN  SETB  (&BUGDYN OR ('&CALL' EQ 'DYNAMIC'))              GP97261\n&BUGTRC  SETB  (&BUGTRC OR ('&CALL' EQ 'TRC'))                  GP99113\n&BUGTRC  SETB  (&BUGTRC OR ('&CALL' EQ 'TRACE'))                GP99113\n&BUGTRC  SETB  (&BUGTRC OR ('&CALL' EQ 'PGMTRACE'))             GP99113\n         AIF   (&BUGBEAR OR '&BUGPARM' EQ 'NO').DOSOME\n         AIF   ('&NM' EQ '').MEND\n&NM      DS    0H            DEBUG SWITCH NOT ON\n         AGO   .MEND\n.DOSOME  ANOP  ,                                                 95067\n&BUGSWCH SETB  1                                                 95067\n         AIF   ('&MODE' EQ 'D' OR '&MODE' EQ 'M').DATA           95228\n         AIF   ('&MODE' EQ 'C').CODE\n         AIF   ('&MODE' EQ 'DC').CODE   EXPAND BOTH              95067\n         AIF   ('&MODE' EQ 'ON').SWON                            95079\n         AIF   ('&MODE' EQ 'OFF').SWOFF                          95079\n         AIF   ('&MODE' EQ 'CLOSE').SWEND  CLOSE AND QUIT       GP98222\n&BUGDBO  SETB  1             DBO STATEMENT EXPANDED             GP09183\n         AIF   (NOT &BUGTRC).NOTTRC                             GP99113\n&NM      DC    X'83CD',S(&WA,&V.X-*)             INVOKE TRACE   GP99113\n         AGO   .DONEBAS                                         GP99113\n.NOTTRC  ANOP  ,                                                GP99113\n&NM      STM   R0,R15,&WA    SAVE ALL REGISTERS\n         AIF   ('&COUNT' EQ '').DONECNT                          95079\n.*  COUNT(3) - SKIP FIRST N CALLS                                95079\n         AIF   ('&COUNT(3)' EQ '').CNTNO3                        95079\n         ICM   R14,15,&V.3   LOAD SKIP COUNT                     95079\n         BNP   &V.C          LIMIT REACHED - PROCESS             95079\n         BCTR  R14,0         DECREMENT                           95079\n         STCM  R14,15,&V.3   SAVE FOR NEXT TIME                  95079\n         B     &V.X          AND SKIP CALL                       95079\n&V.3     DC    AL4(&COUNT(3))  INITIAL SKIP COUNT                95079\n&V.C     DS    0H                                                95079\n.CNTNO3  AIF   ('&COUNT(2)' EQ '').CNTNO2                        95079\n         AIF   ('&COUNT(2)' EQ '1').CNTNO2                       95079\n         AIF   ('&COUNT(2)' EQ '0').CNTNO2                       95079\n.*  COUNT(2) - PROCESS EVERY NTH CALL ONLY                       95079\n         ICM   R14,15,&V.2   LOAD COUNTER                        95079\n         BNP   &V.L          BAD - PROCESS CALL                  95079\n         BCT   R14,&V.N      NON-ZERO; SAVE AND SKIP             95079\n         MVC   &V.2,=AL4(&COUNT(2))  REFRESH                     95079\n         B     &V.L          AND GO                              95079\n&V.2     DC    AL4(1)        INTERVAL COUNTER (DO FIRST ONE)     95079\n&V.N     STCM  R14,15,&V.2   UPDATE COUNTER                      95079\n         B     &V.X          AND EXIT                            95079\n.CNTNO2  AIF   ('&COUNT(1)' EQ '').DONECNT                       95079\n         AIF   ('&COUNT(1)' EQ '0').DONECNT                      95079\n         ICM   R14,15,&V.1   LOAD LIMIT COUNT                    95079\n         BNP   &V.X          SKIP OUT IF NOT VALID               95079\n         BCTR  R14,0         DECREMENT                           95079\n         B     &V.M          SAVE, AND CONTINUE                  95079\n&V.1     DC    AL4(&COUNT(1))  MAXIMUM CALLS TO MAKE             95079\n&V.M     STCM  R14,15,&V.1   SAVE FOR NEXT TIME                  95079\n.DONECNT ANOP  ,                                                 95079\n&V.L     BAS   R1,&V.B                                           95079\n.DONEBAS AIF   ('&LBL' EQ '' AND (&BUGEXT OR &BUGDYN OR &BUGTRC)).NOLBL\n         DC    CL8'&LBL '\n.NOLBL   AIF   ('&REGS' EQ '' OR '&REGS' EQ 'NO').NOREGS         95079\n         AIF   ('&REGS' EQ 'R15' OR '&REGS' EQ 'SHORT'                 *\n               OR '&REGS' EQ 'RET').RETREG                      GP97225\n         AIF   ('&REGS' EQ 'YES' OR '&REGS' EQ 'ALL').REGSALL   GP02246\n         AIF   (N'&REGS EQ 2).REGS2                             GP97225\n         DC    AL1(0,0),SL2(&REGS(1),&REGS(1))                  GP97225\n         AGO   .NOREGS                                          GP97225\n.REGS2   DC    AL1(0,0),SL2(&REGS(1),&REGS(2))                  GP97225\n         AGO   .NOREGS                                          GP97225\n.REGSALL DC    AL1(0,0),SL2(0,15)                               GP97225\n         AGO   .NOREGS                                          GP97225\n.RETREG  DC    SL2(0,14,1)    R15-R1 ONLY                       GP97225\n.NOREGS  AIF   ('&TEXT' EQ '').NOTEXT\n         AIF   (N'&TEXT GE 2).TEXT2                             GP97225\n         DC    AL1(1,0),SL2(&TEXT(1)),AL2(&L&TEXT(1))           GP97225\n         AGO   .NOTEXT                                          GP97225\n.TEXT2   DC    AL1(1,0),SL2(&TEXT(1),&TEXT(2))\n.NOTEXT  AIF   ('&CTEXT' EQ '').NOCTEXT                         GP97225\n         AIF   (N'&CTEXT GE 2).CTEXT2                           GP97225\n         DC    AL1(2,0),SL2(&CTEXT(1)),AL2(&L&CTEXT(1))         GP97225\n         AGO   .NOCTEXT                                         GP97225\n.CTEXT2  DC    AL1(2,0),SL2(&CTEXT(1),&CTEXT(2))                GP97225\n.NOCTEXT AIF   ('&HEX' EQ '').NOHEX                             GP97225\n         AIF   (N'&HEX GE 2).HEX2                               GP97225\n         DC    AL1(3,0),SL2(&HEX(1)),AL2(&L&HEX(1))             GP97225\n         AGO   .NOHEX                                           GP97225\n.HEX2    DC    AL1(3,0),SL2(&HEX(1),&HEX(2))                    GP97225\n.NOHEX   AIF   ('&PACK' EQ '').NOPACK                           GP97225\n         AIF   (N'&PACK GE 2).PACK2                             GP97225\n         DC    AL1(4,0),SL2(&PACK(1)),AL2(&L&PACK(1))           GP97225\n         AGO   .NOPACK                                          GP97225\n.PACK2   DC    AL1(4,0),SL2(&PACK(1),&PACK(2))                  GP97225\n.NOPACK  AIF   ('&LIST' EQ '' OR N'&LIST LT 1).NOLIST           GP95235\n&LN      SETA  N'&LIST                                          GP95235\n.DOLIST  AIF   (&I GE &LN).NOLIST   DONE WITH LIST              GP95235\n&I       SETA  &I+1          BUMP LOOP INDEX                    GP95235\n&EN      SETA  K'&EK         GET LENGTH                         GP04234\n         MACLIST &LIST(&I)   GET SUBLIST ITEMS                  GP04234\n&EN      SETA  &MACP#        NUMBER OF ENTRIES (CHG FOR XF ASM) GP04234\n         AIF   (&EN LT 1).DOLIST  USER IN COMA?                 GP95235\n         AIF   (&EN LT 4).TOOLIST WARN                          GP95235\n         MNOTE 4,'MORE THAN 3 SUBPARMS IN &LIST(&I) '           GP95235\n.TOOLIST ANOP  ,                                                GP95235\n&EK      SETC  '&MACP1'                                         GP04234\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n&EO      SETA  0             PRESET FOR NORMAL ADDRESSING MODE\n&ET      SETC  '03'          PRESET FOR HEX DEFAULT             GP95235\n         AIF   (&EM GT 0).TPFX                                  GP04234\n&EK      SETC  '0'           ALLOW EXPANSION WITHOUT ERROR      GP04234\n&EM      SETA  1                                                GP04234\n         MNOTE 4,'DEBTRACE: PARAMETER &I REQUIRES AN ADDRESS'   GP04234\n.TPFX    AIF   (&EM LT 2).NOTA31                                GP04234\n         AIF   ('&EK'(1,1) NE '/').NOTIND\n&EO      SETA  &EO+1         REQUEST INDIRECT ADDRESSING\n&EK      SETC  '&EK'(2,&EM-1)  DELETE LEADING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTIND  AIF   ('&EK'(&EM,1) NE '%').NOTA24\n&EO      SETA  &EO+2         REQUEST FORCED 24-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA24  AIF   ('&EK'(&EM,1) NE '?').NOTA31\n&EO      SETA  &EO+4         REQUEST FORCED 31-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA31  AIF   (&EN LT 3 OR '&MACP3' EQ 'HEX').HTYPE            GP95235\n         AIF   ('&MACP3' EQ 'X').HTYPE                          GP97225\n         AIF   ('&MACP3' EQ 'HEX').HTYPE\n         AIF   ('&MACP3' EQ 'T').TTYPE                          GP98189\n         AIF   ('&MACP3' EQ 'TEXT').TTYPE                       GP95235\n         AIF   ('&MACP3' EQ 'TXT').TTYPE\n         AIF   ('&MACP3' EQ 'C').CTYPE                          GP97225\n         AIF   ('&MACP3' EQ 'CT').CTYPE\n         AIF   ('&MACP3' EQ 'CTEXT').CTYPE                      GP97225\n         AIF   ('&MACP3' EQ 'PACK').PTYPE                       GP97225\n         AIF   ('&MACP3' EQ 'PACKED').PTYPE                     GP97225\n         AIF   ('&MACP3' EQ 'P').PTYPE                          GP97225\n         AIF   ('&MACP3' EQ 'PD').PTYPE\n         AIF   ('&MACP3' EQ 'D').PTYPE                          GP97225\n MNOTE 4,'TYPE MUST BE TEXT, CTEXT, HEX, OR PACKED, NOT &MACP3'\n         AGO   .HTYPE                                           GP95235\n.TTYPE   ANOP  ,                                                GP95235\n&ET      SETC  '01'          SET FOR TEXT                       GP95235\n         AGO   .HTYPE                                           GP95235\n.CTYPE   ANOP  ,                                                GP97225\n&ET      SETC  '02'          SET FOR CONDITIONAL TEXT, ELSE HEX GP97225\n         AGO   .HTYPE                                           GP97225\n.PTYPE   ANOP  ,                                                GP97225\n&ET      SETC  '04'          SET FOR PACKED                     GP97225\n.HTYPE   ANOP  ,                                                GP97225\n&EL      SETC  '&MACP2'                                         GP95235\n         AIF   ('&EL' NE '').HLEN                               GP95235\n&EL      SETC  '&L'.'&EK'\n.HLEN    DC    X'0800',CL8'&MACP1',AL1(&ET,&EO),S(&EK,&EL)\n         AGO   .DOLIST                                          GP95235\n.NOLIST  AIF   (&BUGFAR).FARCL                                   95079\n         AIF   (&BUGDYN).FARCL                                  GP97261\n         AIF   (&BUGTRC).TRCCL                                  GP99113\n         AIF   (&BUGEXT).EXTCL                                   95215\n&V.B     BAL   R14,DBTRACE                                       92271\n         AGO   .CMCAL                                            95079\n.EXTCL   ANOP  ,                                                 95215\n&V.B     L     R15,=V(DEBTRACE)    MEMBER DEBTROLD              GP05013\n         LA    R0,&WA        PASS ADDRESS OF WORK AREA           95215\n         AGO   .FARCM                                            95215\n.FARCL   ANOP  ,                                                 95079\n&V.B     L     R15,=A(DBTRACE)                                   95079\n.FARCM   BASR  R14,R15                                           95079\n.CMCAL   ANOP  ,                                                 95079\n&V.X     LM    R0,R15,&WA\n         AGO   .MEND\n.TRCCL   ANOP  ,             INVOKE PGMTRACE VIA ESPIE          GP99113\n&V.X     DS    0H            END OF TRACE LIST                  GP99113\n         AGO   .MEND                                            GP99113\n.SWON    OI    DBTFLAG,DBTFLON  SET TRACING ON                   95079\n         AGO   .MEND                                             95079\n.SWEND   OI    DBTFLAG,DBTFLEND  CLOSE DCB AND STOP TRACE       GP98222\n.SWOFF   NI    DBTFLAG,255-DBTFLON  SET TRACING OFF              95079\n         AGO   .MEND                                             95079\n.CODE    AIF   (&BUGFAR OR &BUGEXT).TESTDC                      GP97262\n         AIF   ('&NM' EQ '').NONAME\n&NM      DS    0H\n.NONAME  AIF   (NOT &BUGDYN).NOLODYN                            GP97262\n         AIF   ('&MODE' NE 'DC').NOPUP                          GP00004\n         PUSH  PRINT                                            GP00004\n         PUSH  USING                                            GP00004\n.*       PRINT GEN                                              GP00004\n         DROP  ,                                                GP00004\n         USING DBTRACE,R15                                      GP97265\n.NOPUP   ANOP  ,                                                GP00004\nDBTRACE  LA    R0,&WA        PASS ADDRESS OF WORK AREA          GP97262\n         STM   R12,R1,DBTLOCSV  SAVE BASE AND RETURN            GP97265\n         ICM   R15,15,@DEBTRAC  SEE IF PREVIOUSLY LOADED        GP97265\n         BNZR  R15           INVOKE; RETURN VIA R14 TO CALLER   GP97265\n         AIF   ('&MODE' NE 'DC').NODRP                          GP00004\n         BASR  R12,0         MAKE LOCAL BASE                    GP97262\n         DROP  R15                                              GP97265\n         USING *,R12                                            GP97265\n         AGO   .CMDRP                                           GP00004\n.NODRP   MVC   #DEBTRAC,=CL8'DEBTROLD'                          GP00004\n.CMDRP   LOAD  EPLOC=#DEBTRAC  LOAD EXTERNAL MODULE             GP97261\n         ST    R0,@DEBTRAC   SAVE FOR NEXT TIME                 GP97261\n.*FAILS* AIF   ('&MODE' NE 'DC').NOCLB                          GP00004\n         ST    R0,DBTLOCSV+(15-12)*4  UPDATE TARGET ADDRESS     GP97265\n  MACPARM DBTFLAG,(&OPT),NULL=&BUGSWCH*DBTFLON+DBTFLWID,OP=MVI,OPR=MVI\n.NOCLB   LM    R12,R1,DBTLOCSV  RESTORE                         GP97265\n         BR    R15           RETURN TO CALLER VIA R14           GP97262\n         AIF   ('&MODE' NE 'DC').NOPOP                          GP00004\n         POP   USING                                            GP97262\n         POP   PRINT                                            GP97262\n.NOPOP   AGO   .TESTDC                                          GP97262\n.NOLODYN MNOTE 4,'INLINE EXPANSION NOT SUPPORTED - USE MACRO DEBINLIN'\n.TESTDC  AIF   ('&MODE' NE 'DC').MEND                            95067\n         AGO   .NODRTE                                           95067\n.DATA    AIF   ('&NM' EQ '').NODLBL\n&NM      DS    0D\n.NODLBL  AIF   ('&ROUT' EQ '').NODRTE                            95067\n&BUGSWRT SETB  1                                                 95067\n.NODRTE  AIF   (&BUGFAR OR '&MODE' EQ 'M').MEND                  95230\nDBTPRESV DC    2F'0'  1/2    FOR SHORT FORMATTING                95230\n.NOSVPFX ANOP  ,                                                 95230\n&WA      DC    16F'0' 2/2    DEBUG SAVE AREA                    GP97265\nDBTFLAG  DC    AL1(&BUGSWCH*DBTFLON+DBTFLWID)  DEBUG FLAG       GP98222\nDBTFLTCB EQU   128             INCLUDE TCB ADDRESS IN MESSAGE\nDBTFLWTO EQU   64              USE WTO INSTEAD OF PRT            95240\nDBTFLWID EQU   32              USE WIDE FORMAT WHEN PRINTING    GP98222\nDBTFLPRO EQU   16              PRODUCTION MODE / NEED DD TO PRT GP99113\nDBTFLEND EQU   2               THIS IS A TERMINATION CALL       GP98222\nDBTFLON  EQU   1               DEBUG BIT\nDBTFLAG2 DC    AL1(0)        ..RESERVED..                       GP99062\nDBTFLAG3 DC    AL1(0)        ..RESERVED..                       GP99062\nDBTFLAG4 DC    AL1(0)        ..RESERVED..                       GP99062\nDBTCNT1  DC    A(&COUNT(1)+0)  COUNT OPTION                      95228\nDBTCNT2  DC    A(&COUNT(2)+0)  COUNT OPTION                      95228\nDBTCNT3  DC    A(&COUNT(3)+0)  COUNT OPTION                      95228\n         MAPCMPRT PFX=DBT,DCB=&DCB,PRTMODE=&PRTMODE,DEV=&DEV    GP99113\n         AIF   (NOT &BUGDYN).NODYNS                             GP97261\n.BUGDYN  WXTRN DEBTRACE      SUPPORT LINKED-IN VERSION          GP97262\n@DEBTRAC DC    A(DEBTRACE)   ADDRESS OF LOADED DEBTRACE         GP97261\n#DEBTRAC DC    CL8'DEBTROLD'  LOAD MODULE NAME                  GP97261\nDBTLOCSV DC    6A(0)         SAVE AREA                          GP97265\n         AGO   .MEND                                            GP97262\n.NODYNS  AIF   (&BUGFAR OR '&MODE' EQ 'M').MEND                  95228\nDBTLOCSV DC    4F'0'         BASE SAVE\nDBTWTO   DC    Y(56,0)       VCON                                93357\nDBTWTOM  DC    C'MSG666 '    DEBUG HEADER                        93357\nDBTWTON  DC    CL8' ',C' '   USER'S LABEL\nDBTWTOT  DC    CL36' '       USER'S HEX OR EBCDIC TEXT\n         AIF   ('&TCB' NE 'YES' AND NOT &BUGTCB).NOTCB           94011\n         DC    C' '          EXTRA FOR UNPACK                    94011\nDBTWTCB  DC    CL8' '        CURRENT TCB ADDRESS                 94011\n.NOTCB   ANOP  ,                                                 94011\nDBTWTOC  DC    C' '          EXTRA FOR UNPACK\n         AIF   (NOT &BUGSWRT).MEND  NO ROUTING CODE              95067\n         DC    XL3'0'        EXTRA FOR DESCRIPTOR/ROUTING CODES  95067\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCBEXITD": {"ttr": 3343, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&L    DCBEXITD &DSECT=NO,&PREFIX=DX,&LEVEL2=,                          *\n               &USER=0,&FLAG1=0,&FLAG2=0,&FLAG3=0,&FLAG4=0,&DRECFM=0,  *\n               &BLOCKF=0,&LRECLF=0,&LRECLV=0,&LRECLD=0,&LRECLU=0 82178\n         LCLC  &NM\n         LCLC  &P\n&P       SETC  '&PREFIX'\n         AIF   (T'&PREFIX EQ 'O').NOPFX\n         AIF   (K'&PREFIX LE 2).COMPFX\n         MNOTE 8,'PREFIX=&PREFIX EXCESSIVE LENGTH'\n         AGO   .DEFPFX\n.NOPFX   MNOTE 8,'PREFIX= KEYWORD NOT ALLOWED TO BE NULLIFIED'\n.DEFPFX  MNOTE 8,'PREFIX=DX' ASSUMED'\n&P       SETC  'DX'\n.COMPFX  ANOP  ,\n&NM      SETC  '&L'\n         AIF   ('&L' NE '' OR '&DSECT' NE 'YES').NAMEOK\n&NM      SETC  'DCBEXITD'\n*              AREA POINTED TO BY NOP (00 OR 80) IN DCB EXIT LIST:\n.NAMEOK  AIF   ('&DSECT' NE 'YES').NODSECT                       81154\n&NM      DSECT ,\n         AGO   .ID\n.NODSECT ANOP  ,\n&NM       DS   0D\n         SPACE 1\n.ID      ANOP  ,\n&P.DCBXID DC   CL8'DCBEXITP'           VALIDITY CHECK\n&P.DCBPTR DC   A(0)                    SET TO DCB ADDRESS\n&P.USER   DC   A(&USER)                AVAILABLE TO USER         82178\n&P.DOUBLE DC   D'0'                    DOUBLE WORD WORK AREA\n&P.FLAG1  DC   AL1(&FLAG1)                                       82178\n&P.1RCINT EQU  128                     RECORD INTERFACE (BFTEK=A) IF:\n*                                      RECFM=VS | VBS\n*                                      QSAM\n*                                      LRECL\u00ac=X, IE LRECL>=0\n*                                      LRECL\u00ac=0\n*                                      ELSE TURN OFF\n&P.1BLOCK EQU  64                      ERROR IF BAD BLOCK SIZE, I.E.\n*                                      MOD(BLKSIZE,LRECL)\u00ac=0\n&P.1NOFBS EQU  32                      TURN OFF STANDARD IF RECFM=FBS\n&P.1NOPCI EQU  16                      TURN OFF OPTCD=C\n&P.1NOSD  EQU  08                      TURN OFF OPTCD=Z  IF DA\n&P.1FULLT EQU  04                      DEFAULT  BLKSIZE TO FULL TRACK\n*                                                         (EQUIVALENT)\n&P.1TRUNC EQU  02                      TRUNCATE BLKSIZE TO FULL TRACK\n*                                      TRUNCATE BLKSIZE TO N*LRECL\n*                                                          IF RECFM=FB\n&P.FLAG2  DC   AL1(&FLAG2)                                       82178\n&P.2CONCT EQU  128                     CONCAT. OF UNLIKE ATTRIBUTES\n&P.2REGET EQU  64                      READ/GET MUST BE REISSUED\n&P.2CCERR EQU  4                       FAIL CONTROL CHARACTER/NOCC\n&P.2CCADJ EQU  2                       ADJUST DFLT LEN IF CC/NOCC V.V.\n&P.2TARER EQU  1                       KEEP OPTCD=Z FOR TAPE (R.E.R.)\n&P.FLAG3  DC   AL1(&FLAG3)                                       82178\n&P.3BLKTB EQU  08                      USE CANNED DEVICE/BLKSI TABLE\n&P.3BLKWY EQU  04                      USE WYLBUR BLKSIZE/LIMIT TABLE\n&P.3ISWYL EQU  02                      IF IT LOOKS LIKE WYLBUR   81210\n&P.3DFWYL EQU  01                      DEFAULT RECFM TO U (WYLBUR)\n&P.FLAG4  DC   AL1(&FLAG4)                                       82178\n&P.RETCOD DC   X'00'                   RETURN CODE FROM DCBEXIT\n&P.DRECFM DC   AL1(&DRECFM)            DEFAULT RECFM             82178\n&P.BLOCKF DC   Y(&BLOCKF)              DEFAULT BLOCKING FACTOR   82178\n&P.LRECLF DC   Y(&LRECLF)              DEFAULT LRECL FOR RECFM=F..\n&P.LRECLV DC   Y(&LRECLV)              DEFAULT LRECL FOR RECFM=V..\n&P.LRECLD DC   Y(&LRECLD)              DEFAULT LRECL FOR RECFM=D..\n&P.LRECLU DC   Y(&LRECLU)              DEFAULT LRECL FOR RECFM=U..\n          DS   0A\n&P.OPLIST DC   AL.1(1),AL.7(0),AL3(0)  ONE PER ENTRY:\n*        DS    AL.1                    1 IF LAST\n*        DS    AL.7                    TYPE\n*        DS    AL3                     PARAMETERS FOR TYPE\n&P.TNOP   EQU  0                       NULL ENTRY\n&P.TEXIT  EQU  1                       2ND LEVEL EXIT\n&P.TBLOCK EQU  2                       BLKSIZE BY DEVICE TYPE\n&P.TWYLBK EQU  3                       WYLBUR BLOCKSIZE LIMIT TABLE\n&P.TPREX  EQU  4                       PRE-DCBEXIT EXIT          82308\n&P.TMAXBK EQU  5                       BLOCKSIZE LIMIT TABLE     82308\n&P.TEXITF EQU  6                       POST-DCBEXIT EXIT         83275\n         AIF   (T'&LEVEL2 EQ 'O').NOLVL                          81154\n         AIF   (&LEVEL2 LT 2).NOLVL                              81154\n         DC    (&LEVEL2-1)X'80000000'  LEVEL 2 FIELDS            81154\n.NOLVL   SPACE 1\n*        DS    0F\n*              BLOCKSIZE TABLE FOR CODE DXTBLOCK\n*        DC    AL1(CLASS,TYPE)         UCBTBYT3,4\n*        DC    AL2(BLKSIZE)            DEFAULT FOR THIS TYPE\n*                  CLASS     TYPE      CONDITION\n*                  CLASS     TYPE      CLASS=UCBTBYT3 & TYPE=UCBTBYT4\n*                  CLASS     X'FF'     CLASS=UCBTBYT3\n*                  X'FF'     TYPE      TYPE =DCBDEVT\n*                  X'FF'     X'FF'     DEFAULT - END OF LIST\n         SPACE 1\n*              BLOCKSIZE TABLE FOR DXTWYLBK (WYLBUR EDIT)\n*                                  DXTMAXBK (ANY)                82308\n*        DC    AL1(CLASS,TYPE)         UCBTBYT3,4\n*        DC    AL2(DEFAULT,MIN,MAX)    VALUES FOR THIS TYPE      81154\n*                  CLASS     TYPE      CONDITION\n*                  CLASS     TYPE      CLASS=UCBTBYT3 & TYPE=UCBTBYT4\n*                  CLASS     X'FF'     CLASS=UCBTBYT3\n*                  X'FF'     TYPE      TYPE =DCBDEVT\n*                  X'FF'     X'FF'     DEFAULT - END OF LIST\n.END     MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCIN": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x043\\x9f\\x01\\x043\\x9f\\x16\\t\\x009\\x00\\x14\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2004-12-04T00:00:00", "modifydate": "2004-12-04T16:09:00", "lines": 57, "newlines": 20, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DCIN  &O1,&O2,&O3,&O4,&O5,&O6,&O7,&O8,&O9,&O10         GP04234\n.**********************************************************************\n.*\n.*   SOME OF US ARE HORRIBLY LAZY - THIS MACRO DEFINES A (PRESUMED\n.*   CHARACTER) CONSTANT WITH THE LABEL POINTING TO THE *LAST*\n.*   BYTE OF THE CONSTANT, AS USED BY MVCIN FROM FIELD\n.*\n.**********************************************************************\n.*\n         LCLC  &BL\n         LCLA  &I\n&I       SETA  &SYSNDX\n&BL      SETC  'ZZB'.'&I'\n         AIF   (N'&SYSLIST LE 1).NUM1\n         AIF   (N'&SYSLIST LE 2).NUM2\n         AIF   (N'&SYSLIST LE 3).NUM3\n         AIF   (N'&SYSLIST LE 4).NUM4\n         AIF   (N'&SYSLIST LE 5).NUM5\n         AIF   (N'&SYSLIST LE 6).NUM6\n         AIF   (N'&SYSLIST LE 7).NUM7\n         AIF   (N'&SYSLIST LE 8).NUM8\n         AIF   (N'&SYSLIST LE 9).NUM9\n&BL      DC    &O1,&O2,&O3,&O4,&O5,&O6,&O7,&O8,&O9,&O10\n         AIF   (N'&SYSLIST LE 10).NUMOK\n         MNOTE 4,'DCIN: MORE THAN 10 OPERANDS'\n         AGO   .NUMOK\n.NUM9    ANOP  ,\n&BL      DC    &O1,&O2,&O3,&O4,&O5,&O6,&O7,&O8,&O9\n         AGO   .NUMOK\n.NUM8    ANOP  ,\n&BL      DC    &O1,&O2,&O3,&O4,&O5,&O6,&O7,&O8\n         AGO   .NUMOK\n.NUM7    ANOP  ,\n&BL      DC    &O1,&O2,&O3,&O4,&O5,&O6,&O7\n         AGO   .NUMOK\n.NUM6    ANOP  ,\n&BL      DC    &O1,&O2,&O3,&O4,&O5,&O6\n         AGO   .NUMOK\n.NUM5    ANOP  ,\n&BL      DC    &O1,&O2,&O3,&O4,&O5\n         AGO   .NUMOK\n.NUM4    ANOP  ,\n&BL      DC    &O1,&O2,&O3,&O4\n         AGO   .NUMOK\n.NUM3    ANOP  ,\n&BL      DC    &O1,&O2,&O3\n         AGO   .NUMOK\n.NUM2    ANOP  ,\n&BL      DC    &O1,&O2\n         AGO   .NUMOK\n.NUM1    ANOP  ,\n&BL      DC    &O1\n.*\n.NUMOK   ANOP  ,\n&NM      EQU   *-1,*-&BL+1,C'C'\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCLC": {"ttr": 3587, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    DCLC  &AA,&DUMMY1,&DUMMY2,&CAPWORD=,&CAPLETR=,&PRINT=\n         GBLB  &DCLCLST      IF ON, PRINT COMMENTS SHOWING FLAGS\n         LCLA  &LENGTH,&AIN,&AOUT,&K,&USERLNG,&QUOTE1\n         LCLB  &CW           IF ON , PROCESSING A CAPITAL WORD\n         LCLC  &CAPL,&CAPW,&CIN,&COUT,&DUPLC,&LNC,&T\n         LCLC  &P(15),&Q(120)\n         ACTR  30*K'&AA+3    30 TIMES NO. OF CHARACTERS IN OPERAND\n.*360D-CM-000  DCLC          DEFINE-CONSTANT-LOWER-CASE    V 01/08/69 *\n.* BY  CHUCK MEYER, IBM, N.Y.PUBLISHING, 555 MADISON, NYC, 10022, USA *\n&DCLCLST SETB  ((&DCLCLST AND '&PRINT' NE 'OFF')  OR  '&PRINT' EQ 'ON')\n.*\n         AIF   (K'&AA LT 3).ERROR1\n         AIF   ('&AA'(K'&AA,1)  EQ  '''').OKPARAM\n.ERROR1  AIF   ('&PRINT'  EQ  'ON'  OR  '&PRINT'  EQ  'OFF').MEND\n         MNOTE 4,'INVALID OR MISSING OPERAND.  DATA IGNORED   '\n         AIF   ('&NAME'  EQ  '').MEND\n&NAME    EQU   *             BUT AT LEAST YOUR -NAME- WILL BE DEFINED.\n         AGO   .MEND\n.*\n.OKPARAM ANOP\n.*   DETERMINE CAP-WORD,  BYTE WHICH WILL -FLAG- START OF CAPITAL WORD.\n&CAPW    SETC  '/'     SLASH     *STD-VALU*\n         AIF   (K'&CAPWORD NE  1  AND  K'&CAPWORD  NE  3).OKCAPW\n&CAPW    SETC  '&CAPWORD'(1,1)    PICK UP FIRST POSITION\n         AIF   (K'&CAPWORD  NE  3).OKCAPW\n&CAPW    SETC  '&CAPWORD'(2,1)   PICK UP SECOND POSITION\n.OKCAPW  ANOP\n.*\n.*   DETERMINE CAP-LETTER,  BYTE TO -FLAG- NEXT LETTER AS A CAPITAL\n&CAPL    SETC  '<'   LESS-THAN SIGN    *STD-VALU*\n         AIF   (K'&CAPLETR  NE  1  AND  K'&CAPLETR  NE  3).OKCAPL\n&CAPL    SETC  '&CAPLETR'(1,1)   PICK UP FIRST POSITION\n         AIF   (K'&CAPLETR  NE  3).OKCAPL\n&CAPL    SETC  '&CAPLETR'(2,1)    PICK UP SECOND POSITION\n.OKCAPL  ANOP\n.*\n         AIF   (NOT  &DCLCLST).NONOTES    PRINT NOTES, IF REQUESTED\n         MNOTE *,'CAP-WORD   CHARACTER IS ''&CAPW'' .'\n         MNOTE *,'CAP-LETTER CHARACTER IS ''&CAPL'' .'\n.NONOTES ANOP\n.*\n.QTLOOP  ANOP  ,   SCAN LEFT-TO-RIGHT FOR FIRST QUOTE\n&QUOTE1  SETA  &QUOTE1+1     BUMP TO NEXT POSITION\n         AIF   ('&AA'(&QUOTE1,1)  NE  '''').QTLOOP\n.*  &QUOTE1  NOW  POINTS  TO  LEADING  QUOTE  IN  CONSTANT\n.*   CHECK FOR USER-SUPPLIED DUPLICATION-FACTOR\n         AIF   ('&AA'(1,1) LT '0').NODUPL\n.DUPLOOP AIF   ('&AA'(&AIN+1,1)  LT  '0').DUPEND\n&AIN     SETA  &AIN+1\n         AIF   (&AIN  LT  8).DUPLOOP\n.DUPEND  ANOP\n&DUPLC   SETC  '&AA'(1,&AIN)   PICK UP USERS DUPLICATION-FACTOR\n.NODUPL  ANOP  ,   &AIN POINTS TO LAST DIGIT IN DUPL.FACTOR OR ZERO\n.*\n.*   CHECK FOR USER-SUPPLIED LENGTH ASSIGNMENT\n.LNGLOOP ANOP  ,       LOOP TO FIND BEGINNING OF LENGTH FIELD\n&AIN     SETA  &AIN+1\n         AIF   ('&AA'(&AIN,1)  EQ  '''').NOLNGTH\n         AIF   ('&AA'(&AIN,1)  LT  '0'  AND  &AIN  LT  &QUOTE1).LNGLOOP\n.*  &AIN NOW POINTS TO FIRST DIGIT IN LENGTH ATTRIBUTE.\n&LNC     SETC  '&AA'(&AIN,&QUOTE1-&AIN)       USERS-LENGTH IN CHARS\n&USERLNG SETA  &LNC          USERS-LENGTH IN NUMERICS\n.NOLNGTH ANOP\n.*\n.*   NOW WE CAN START SCANNING THE ACTUAL DATA\n.*\n&AIN     SETA  &QUOTE1       SET INPUT POINTER TO FIRST QUOTE\n&LENGTH  SETA  K'&AA-&AIN-1    TENTATIVE LENGTH ATTRIBUTE\n.*\n.LOOP1   ANOP  ,   LOOP THRU HERE AS WE SCAN EACH INPUT CHARACTER\n&AIN     SETA  &AIN+1        BUMP INPUT-POINTER\n&AOUT    SETA  &AOUT+1       BUMP OUTPUT-POINTER\n         AIF   (&AIN  GE  K'&AA).ENDSCAN   IF LAST CHARACTER, ALL DONE.\n&CIN     SETC  '&AA'(&AIN,1)  SAVE THIS INPUT CHARACTER\n&CW      SETB  ((&CW  AND  '&CIN'  NE  ' ')  OR  '&CIN'  EQ  '&CAPW')\n.*   TURN ON &CW IF THIS IS CAP-WORD CHAR, TURN OFF &CW IF THIS IS BLNK\n         AIF   ('&CIN'  EQ  '&CAPW'  OR  '&CIN'  EQ  'CAPL').CAPITAL\n         AIF   ('&CIN'  EQ  ''''   OR '&CIN'  EQ  '&&'(1,1)).QUOTE\n         AIF   ('&CIN'  LT  'A'  OR  '&CIN'  GT  'Z'  OR  &CW).SETSAME\n.*\n.*  &AIN NOW POINTS TO A CAPITAL LETTER ON INPUT, WHICH MUST BE\n.*  CONVERTED TO ITS LOWER-CASE EQUIVALENT.\n.*   THE 26 LETTERS OF THE ALPHABET ARE LISTED HERE,\n.*   ORDERED BY THEIR FREQUENCY OF OCCURANCE IN THE ENGLISH LANGUAGE ..\n.*              'ETAOSINRHLDCUMYBPWFGVKJXQZ'\n.*             ERGO,  WE WILL BUILD OUR TABLE IN THAT ORDER.\n.*\n&K       SETA  1\n.LOOP2   AIF   ('ETAOSINRHLDCUMYBPWFGVKJXQZ'(&K,1)  EQ  '&CIN').LCFOUND\n&K       SETA  &K+1\n         AIF   (&K  LE  26).LOOP2\n         AGO   .SETSAME      WAS NOT ALPHABETIC\n.LCFOUND ANOP  ,    &K POINTS TO POSITION IN TABLE FOR THIS LETTER\n&COUT    SETC  'etaosinrhldcumybpwfgvkjxqz'(&K,1)  LOWER CASE PUNCHES\n&Q(&AOUT) SETC '&COUT'       SET OUTPUT LETTER TO THIS L-C LETTER\n         AGO   .LOOP1        GET NEXT LETTER\n.*\n.*\n.QUOTE   ANOP  ,   TO HANDLE PAIRED QUOTES AND PAIRED AMPERSANDS\n&Q(&AOUT) SETC '&CIN'        SET UP OUTPUT CHARACTER\n&AOUT    SETA  &AOUT+1       BUMP OUTPUT-CHARACTER-POINTER\n.*\n.CAPITAL ANOP  ,   TO HANDLE CAP-LETR AND CAP-WORD CHARACTERS\n&LENGTH  SETA  &LENGTH-1     DOESN'T COUNT IN LENGTH\n         AIF   (&AIN+1  GE  K'&AA).ENDSCAN    LAST CHARACTER  IN  LIT ?\n&AIN     SETA  &AIN+1        BUMP INPUT-CHARACTER-POINTER\n&CIN     SETC  '&AA'(&AIN,1)   PICK UP NEXT INPUT CHARACTER\n.*\n.SETSAME ANOP  ,   TO SET UP OUTPUT CHARACTER WITHOUT CHANGING IT\n&Q(&AOUT) SETC '&CIN'\n         AGO   .LOOP1        GET NEXT LETTER\n.*\n.ENDSCAN ANOP  ,  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n.*  WE HAVE COMPLETED THE SCAN OF INPUT,  NOW PREPARE THE -DC-.      *\n.*                                                                   *\n         AIF   (&USERLNG  EQ  &LENGTH  OR  &USERLNG  EQ  0).OKLNGTH\n&T       SETC  '*'           SET UP MNOTE TO BE JUST A COMMENT\n         AIF   (&USERLNG  GT  &LENGTH).LNMNOTE\n&T       SETC  '1'           MAKE IT AN ERROR,  TRUNCATION\n.LNMNOTE AIF   (NOT &DCLCLST).LNMNPRT  SKIP MNOTE IF PRINT OFF   87287\n         MNOTE &T,'YOUR ''CL&USERLNG'' SPEC. OVERRIDES ASSUMED LENGTH O*\n               F &LENGTH..'\n.LNMNPRT ANOP  ,                                                 87287\n&LENGTH  SETA  &USERLNG      PICK UP USER'S LENGTH\n.OKLNGTH ANOP\n&AIN     SETA  1\n&AOUT    SETA  1\n.*  THE NEXT 5 LINES CONVERT THE 120 SUBSCRIPTED SET SYMBOLS\n.*  (EACH OF WHICH CONTAINS ONE BYTE OF DATA OR NULL)  INTO 15\n.*  SUBSCRIPTED SET SYMBOLS (EACH CONTAING 8 BYTES).\n.LOOP3   ANOP\n&P(&AOUT) SETC '&Q(&AIN)&Q(&AIN+1)&Q(&AIN+2)&Q(&AIN+3)&Q(&AIN+4)&Q(&AIN+\n               +5)&Q(&AIN+6)&Q(&AIN+7)'    EIGHT AT A TIME\n&AIN     SETA  &AIN+8\n&AOUT    SETA  &AOUT+1\n         AIF   (&AOUT  LE  15).LOOP3    KEPP LOOKING\n.*\n&NAME    DC   &DUPLC.CL&LENGTH'&P(1)&P(2)&P(3)&P(4)&P(5)&P(6)&P(7)&P(8)&\n               &P(9)&P(10)&P(11)&P(12)&P(13)&P(14)&P(15)'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCON": {"ttr": 3591, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\t4o\\x01\\t4o\\x02V\\x00D\\x00D\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2009-12-12T00:00:00", "modifydate": "2009-12-12T02:56:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DCON  &STR,&END=                              ADDED ON GP02242\n         GBLB  &VCON@OP\n         GBLC  &VCON@NM\n         LCLA  &I,&J,&K,&L\n.**********************************************************************\n.**                                                                  **\n.**  DCON BUILDS A TEXT MESSAGE BEGINNING WITH A ONE-BYTE LENGTH-1,  **\n.**    FOLLOWED BY TEXT.                                             **\n.**                                                                  **\n.**  USE   DCON  'TEXT'                                              **\n.**                                                                  **\n.**  OR    DCON  'TEXT1',END=LABEL                                   **\n.**        DC     ...ZERO OR MORE STORAGE ITEMS                      **\n.**  LABEL DCON   *END    TO GENERATE A SINGLE MESSAGE               **\n.**                                                                  **\n.**********************************************************************\n&K       SETA  K'&STR\n         AIF   (T'&END NE 'O').TSTOPEN\n         AIF   (T'&STR EQ 'O').CLOSE\n         AIF   ('&STR'(1,1) EQ '*').CLOSE\n.TSTOPEN AIF   (&K EQ 0).COMLEN\n         AIF   ('&STR'(1,1) NE '''').COMLEN\n&I       SETA  2\n&J       SETA  &K-2\n&K       SETA  &J\n.LOOP    AIF   ('&STR'(&I,2) EQ '''''').SK2\n         AIF   ('&STR'(&I,2) EQ '&&').SK2\n&I       SETA  &I+1\n         AGO   .INC\n.SK2     ANOP  ,\n&I       SETA  &I+2\n&K       SETA  &K-1\n.INC     AIF   (&I LE &J).LOOP\n.COMLEN  AIF   (NOT &VCON@OP).NOPEN\n         MNOTE 4,'PRIOR DCON/VCON NOT TERMINATED'\n&VCON@OP SETB  0\n.NOPEN   AIF   (T'&END NE 'O').OPEN\n         AIF   (&K EQ 0).REQSTR\n         AIF   ('&STR'(1,1) EQ '''').QSTR\n&NM      DC    AL1(&K-1),C'&STR'\n         AGO   .MEND\n.QSTR    ANOP  ,\n&NM      DC    AL1(&K-1),C&STR\n         AGO   .MEND\n.OPEN    AIF   (&K NE 0).OPSTR\n&NM      DC    AL1(&END-*-2)\n         AGO   .SETOPEN\n.OPSTR   AIF   ('&STR'(1,1) EQ '''').OQSTR\n&NM      DC    AL1(&END-*-2),C'&STR'\n         AGO   .SETOPEN\n.OQSTR   ANOP  ,\n&NM      DC    AL1(&END-*-2),C&STR\n.SETOPEN ANOP  ,\n&VCON@NM SETC  '&END'\n&VCON@OP SETB  1\n         MEXIT ,\n.REQSTR  MNOTE 4,'TEXT STRING REQUIRED'\n         MEXIT ,\n.CLOSE   AIF   (&VCON@OP).WASOPEN\n         MNOTE 4,'DCON/VCON END OUT OF SEQUENCE'\n.WASOPEN AIF   ('&NM' EQ '' OR '&NM' EQ '&VCON@NM').BLAB\n&NM      EQU   *\n.BLAB    ANOP  ,\n&VCON@NM EQU   *\n&VCON@NM SETC  ''\n&VCON@OP SETB  0\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCS": {"ttr": 3593, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    DCS\n.**********************************************************************\n.*                                                                    *\n.*        DCS  -  DEFINE CONSTANT FOR SCREEN                          *\n.*                                                                    *\n.*        WRITTEN BY BILL GODFREY                                     *\n.*        PLANNING RESEARCH CORPORATION                               *\n.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *\n.*        DATE WRITTEN: JANUARY 8 1981.                               *\n.*        DATE UPDATED: MARCH 18 1982. (ROW AND COL IN PARENS)        *\n.*        GP@P6          JULY 25 1986. (EXTENDED ATTRS, MEDIUM INTENS)*\n.*        GP@P6     SEPTEMBER 23 1986. (ESCAPES, WRITES, RA, MFA, MF) *\n.*        GP@P6        AUGUST 24 1987. (EAU, WSF, RB, RM, RMA)        *\n.*        GP@P6       OCTOBER 15 1987. (3270 AND GRAPHIC EXTRAS)      *\n.*                                                                    *\n.*        THIS MACRO IS USED FOR CODING A FULLSCREEN 3270 DISPLAY.    *\n.*                                                                    *\n.*        SAMPLE                                                      *\n.*           DCS    AL1(WCC),SBA,(1,1),RTA,(7,1),X'00',IC             *\n.*                                                                    *\n.*        IT SIMPLIFIES THE CODING OF A SCREEN IN THE FOLLOWING WAYS. *\n.*        .  BUFFER ADDRESSES ARE SPECIFIED AS ROW AND COLUMN NUM-    *\n.*           BER.  THE MACRO TRANSLATES THEM INTO THE 3270 CODE.      *\n.*        .  ORDERS ARE SPECIFIED BY NAME, SUCH AS 'SBA' AND 'SF',    *\n.*           SO YOU DONT HAVE TO KNOW THE HEX CODES FOR THEM,         *\n.*        .  COMMONLY USED ATTRIBUTE BYTES ARE SPECIFIED BY NAME      *\n.*           (A SET OF RESERVED NAMES) SO YOU DONT HAVE TO KNOW       *\n.*           THE HEX CODES FOR THEM.                                  *\n.*        .  IT SAVES A LOT OF DOCUMENTATION WORK, AND MAKES          *\n.*           THE CODE EASIER FOR OTHERS TO UNDERSTAND.                *\n.*                                                                    *\n.*        THE USER OF THE MACRO MUST STILL UNDERSTAND HOW A SCREEN    *\n.*        IS CONSTRUCTED BEFORE USING IT. THE MACRO MERELY MAKES IT   *\n.*        EASIER TO SPECIFY THE VALUES.  IT DOES VERY LITTLE ERROR    *\n.*        CHECKING.  FOR INSTANCE, IT DOES NOT CHECK TO SEE IF        *\n.*        YOU FOLLOW AN 'SBA' WITH A BUFFER ADDRESS.  IT IS POSSIBLE  *\n.*        TO CODE A THOROUGHLY INVALID SCREEN.                        *\n.*                                                                    *\n.*        THE MACRO MAY HAVE ANY NUMBER OF OPERANDS, CONSISTING OF    *\n.*        ANY COMBINATION OF THE FOLLOWING.                           *\n.*                                                                    *\n.*        .  AN ESCAPE CHARACTER.                                     *\n.*           VALID ESCAPE CHARACTERS ARE:                             *\n.*           ESC - ESCAPE                                             *\n.*           GE  - GRAPHIC ESCAPE                                     *\n.*        .  A WRITE COMMAND.                                         *\n.*           VALID WRITE COMMANDS ARE:                                *\n.*           WR  - WRITE (WRT)                                        *\n.*           EW  - ERASE/WRITE                                        *\n.*           EWA - ERASE/WRITE ALTERNATE                              *\n.*           EAU - ERASE ALL UNPROTECTED                              *\n.*           WSF - WRITE STRUCTURED FIELD                             *\n.*        .  A READ COMMAND.                                          *\n.*           VALID READ COMMANDS ARE:                                 *\n.*           RB  - READ BUFFER                                        *\n.*           RM  - READ MODIFIED                                      *\n.*           RMA - READ MODIFIED ALL                                  *\n.*        .  A 3270 ORDER.                                            *\n.*           VALID 3270 ORDERS ARE:                                   *\n.*           SBA, SF, RA (RTA), IC, PT (HT), EUA, SA, SFE, MF (MFA).  *\n.*        .  A BUFFER ADDRESS IN PARENTHESES.                         *\n.*           IF AN OPERAND IS IN PARENTHESES, IT IS ASSUMED THAT      *\n.*           THE ROW AND COLUMN NUMBER ARE BETWEEN THE PARENS,        *\n.*           SEPARATED BY A COMMA.  EXAMPLE: (1,1)                    *\n.*           THIS FORM OF BUFFER ADDRESS IS NEW AS OF MARCH 18 1982.  *\n.*        .  A ROW OR COLUMN NUMBER OF A BUFFER ADDRESS (OLD FORMAT). *\n.*           IF AN OPERAND IS NUMERIC, IT IS ASSUMED TO BE            *\n.*           A ROW OR COLUMN NUMBER.  IT TAKES 2 OPERANDS TO          *\n.*           SPECIFY THE BUFFER ADDRESS (ROW AND COLUMN) SO NUMERIC   *\n.*           OPERANDS MUST ALWAYS BE SPECIFIED IN PAIRS, THE          *\n.*           FIRST BEING THE ROW AND THE SECOND BEING THE COLUMN.     *\n.*           THIS FORMAT IS SUPPORTED ONLY FOR COMPATIBILITY WITH     *\n.*           THE ORIGINAL VERSION OF THIS MACRO.                      *\n.*        .  AN ATTRIBUTE BYTE.                                       *\n.*           VALID ATTRIBUTE BYTES ARE:                               *\n.*           UNPLO  - UNPROTECTED NORMAL INTENSITY                    *\n.*           UNPMD  - UNPROTECTED MEDIUM INTENSITY                    *\n.*           UNPHI  - UNPROTECTED HIGH INTENSITY                      *\n.*           UNPNP  - UNPROTECTED NO-DISPLAY                          *\n.*           PROLO  - PROTECTED NORMAL INTENSITY                      *\n.*           PROLOS - PROTECTED NORMAL INTENSITY AUTO-SKIP            *\n.*           PROMD  - PROTECTED MEDIUM INTENSITY                      *\n.*           PROMDS - PROTECTED MEDIUM INTENSITY AUTO-SKIP            *\n.*           PROHI  - PROTECTED HIGH INTENSITY                        *\n.*           PROHIS - PROTECTED HIGH INTENSITY AUTO-SKIP              *\n.*        .  AN EXTENDED ATTRIBUTE TYPE.                              *\n.*           VALID ATTRIBUTE TYPES ARE:                               *\n.*           FIELD, VALIDN, OUTLIN, HILITE, COLOUR, PGMSYM, BKCOLR    *\n.*           AND TRANSP.                                              *\n.*        .  AN EXTENDED HIGHLIGHTING SPECIFICATION.                  *\n.*           VALID HIGHLIGHTINGS ARE:                                 *\n.*           NORMAL, BLINK, REVERSE AND USCORE.                       *\n.*        .  AN EXTENDED COLOUR SPECIFICATION.                        *\n.*           VALID COLOURS ARE:                                       *\n.*           BLUE, RED, PINK, GREEN, TURQ, YELLOW, WHITE AND NORMAL.  *\n.*        .  A BACKGROUND TRANSPARENCY SPECIFICATION.                 *\n.*           VALID TRANSPARENCIES ARE:                                *\n.*           NORMAL (TRANSPARENT) AND OPAQUE (NON-TRANSPARENT).       *\n.*        .  A FORMAT CONTROL ORDER.                                  *\n.*           VALID FORMAT CONTROL ORDERS ARE:                         *\n.*           NUL, SUB, DUP, FM, FF, CR, NL, EM, EO, BYP, RES, SI, SO. *\n.*        .  A GRAPHIC ORDER.                                         *\n.*           VALID GRAPHIC ORDERS ARE TOO NUMEROUS TO MENTION.        *\n.*        .  A HEX, CHARACTER, OR ADDRESS CONSTANT.                   *\n.*           FOR EXAMPLE, X'00', OR C'ENTER SIGNON'                   *\n.*           THIS CAN BE USED FOR DATA WITHIN FIELDS OR FOR           *\n.*           ATTRIBUTE BYTES, ORDERS, THE 'WCC', OR BUFFER            *\n.*           ADDRESSES (IF YOU WANT TO FIGURE THEM OUT).              *\n.*                                                                    *\n.*        IF THE OPERANDS DO NOT ALL FIT ON ONE LINE, YOU CAN         *\n.*        EITHER CONTINUE THE LINE IN THE STANDARD ASSEMBLER WAY      *\n.*        OR CODE THE MACRO AGAIN ON THE NEXT LINE WITH THE           *\n.*        REMAINING OPERANDS.  THE RESULT IS THE SAME EITHER WAY.     *\n.*                                                                    *\n.*        THE BUFFER ADDRESS CONVERSIONS ARE FOR A                    *\n.*        SCREEN SIZE OF 24 ROWS BY 80 COLUMNS. FOR SCREENS           *\n.*        OF OTHER DIMENSIONS (43 BY 80, 12 BY 40) THE MACRO          *\n.*        NEEDS ONLY A FEW CHANGES.                                   *\n.*                                                                    *\n.*        WARNING: IF YOU CODE THE MACRO WITH A LABEL IN COLUMN 1,    *\n.*        AND YOU LIKE USING LENGTH ATTRIBUTES, BEWARE THAT THE       *\n.*        LENGTH ATTRIBUTE OF THE LABEL IS NOT NECESSARILY THE        *\n.*        TOTAL LENGTH OF THE DATA GENERATED BY THE MACRO.            *\n.*                                                                    *\n.*        PROGRAMMING NOTE:                                           *\n.*        SA,NORMAL,NORMAL     WILL DO IN THREE BYTES WHAT            *\n.*        SA,HILITE,NORMAL,SA,COLOUR,NORMAL,SA,PGMSYM,NORMAL          *\n.*                             WILL DO IN NINE BYTES.                 *\n.*                                                                    *\n.*        TECHNICAL NOTES:                                            *\n.*        ATTRIBUTES WITH CODES IN THE RANGE X'00' TO X'7F' HAVE      *\n.*        VALUES GIVEN BY A 1-BYTE BINARY NUMBER.  EG. X'42' (COLOUR) *\n.*        ATTRIBUTES WITH CODES IN THE RANGE X'C0' TO X'FF' HAVE      *\n.*        BIT-ENCODED VALUES.  EG. X'C0' (3270 FIELD ATTRIBUTE)       *\n.*        CHARACTER SETS:                                             *\n.*        X'00' - DEFAULT               X'40'-X'EF' - LOADABLE LCID   *\n.*        X'F0'-X'F7' - NON-LOADABLE LCID   X'F8'-X'FE' - DBCS LCID   *\n.*        FIELD VALIDATION:                                           *\n.*        SPECIFY A BYTE IN THE RANGE X'00' TO X'07' ON THE BASIS OF  *\n.*        X'01' ON FOR TRIGGER, X'02' ON FOR MANDATORY ENTRY AND      *\n.*        X'04' ON FOR MANDATORY FILL.                                *\n.*        FIELD OUTLINING:                                            *\n.*        SPECIFY A BYTE IN THE RANGE X'00' TO X'0F' ON THE BASIS OF  *\n.*        X'01' ON FOR UNDERLINE, X'02' ON FOR RIGHT VERTICAL LINE,   *\n.*        X'04' ON FOR OVERLINE AND X'08' ON FOR LEFT VERTICAL LINE.  *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &R,&C,&P,&Q\n         LCLA  &AN,&AS,&AL\n         LCLB  &B,&NUMERIC,&INTEGER\n         LCLC  &T(64)\n         LCLC  &N,&ROW,&COL\n         LCLC  &CS,&STRING\n&T(1)    SETC  '40'\n&T(2)    SETC  'C1'\n&T(3)    SETC  'C2'\n&T(4)    SETC  'C3'\n&T(5)    SETC  'C4'\n&T(6)    SETC  'C5'\n&T(7)    SETC  'C6'\n&T(8)    SETC  'C7'\n&T(9)    SETC  'C8'\n&T(10)   SETC  'C9'\n&T(11)   SETC  '4A'\n&T(12)   SETC  '4B'\n&T(13)   SETC  '4C'\n&T(14)   SETC  '4D'\n&T(15)   SETC  '4E'\n&T(16)   SETC  '4F'\n.*\n&T(17)   SETC  '50'\n&T(18)   SETC  'D1'\n&T(19)   SETC  'D2'\n&T(20)   SETC  'D3'\n&T(21)   SETC  'D4'\n&T(22)   SETC  'D5'\n&T(23)   SETC  'D6'\n&T(24)   SETC  'D7'\n&T(25)   SETC  'D8'\n&T(26)   SETC  'D9'\n&T(27)   SETC  '5A'\n&T(28)   SETC  '5B'\n&T(29)   SETC  '5C'\n&T(30)   SETC  '5D'\n&T(31)   SETC  '5E'\n&T(32)   SETC  '5F'\n.*\n&T(33)   SETC  '60'\n&T(34)   SETC  '61'\n&T(35)   SETC  'E2'\n&T(36)   SETC  'E3'\n&T(37)   SETC  'E4'\n&T(38)   SETC  'E5'\n&T(39)   SETC  'E6'\n&T(40)   SETC  'E7'\n&T(41)   SETC  'E8'\n&T(42)   SETC  'E9'\n&T(43)   SETC  '6A'\n&T(44)   SETC  '6B'\n&T(45)   SETC  '6C'\n&T(46)   SETC  '6D'\n&T(47)   SETC  '6E'\n&T(48)   SETC  '6F'\n.*\n&T(49)   SETC  'F0'\n&T(50)   SETC  'F1'\n&T(51)   SETC  'F2'\n&T(52)   SETC  'F3'\n&T(53)   SETC  'F4'\n&T(54)   SETC  'F5'\n&T(55)   SETC  'F6'\n&T(56)   SETC  'F7'\n&T(57)   SETC  'F8'\n&T(58)   SETC  'F9'\n&T(59)   SETC  '7A'\n&T(60)   SETC  '7B'\n&T(61)   SETC  '7C'\n&T(62)   SETC  '7D'\n&T(63)   SETC  '7E'\n&T(64)   SETC  '7F'\n.*\n&N       SETC  '&NAME'\n&AN      SETA  N'&SYSLIST          NUMBER OF OPERANDS\n&AS      SETA  0\n&B       SETB  0 FALSE\n.EACH    AIF   (&AN EQ 0).EPILOG\n&AS      SETA  &AS+1\n&CS      SETC  '&AS'\n&AL      SETA  K'&SYSLIST(&AS)\n         AIF   (T'&SYSLIST(&AS) EQ 'O').NEXT\n         AIF   ('&SYSLIST(&AS)'(1,1) EQ '(').PAIR\n&NUMERIC SETB  (T'&SYSLIST(&AS) EQ 'N')\n&INTEGER SETB  ('&SYSLIST(&AS)'(1,1) GE '0')\n         AIF   (&NUMERIC AND &INTEGER).ROWCOL\n         AIF   (NOT &B).ROWCOLX\n         MNOTE 4,'             &CS.) MISSING COLUMN NUMBER'\n&B       SETB  0 FALSE\n.ROWCOLX ANOP\n&STRING  SETC  '&SYSLIST(&AS)'\n.*             ESCAPES\n         AIF   ('&STRING' EQ 'ESC').ESC\n         AIF   ('&STRING' EQ 'GE').GE\n.*             WRITES\n         AIF   ('&STRING' EQ 'WR').WR\n         AIF   ('&STRING' EQ 'WRT').WR\n         AIF   ('&STRING' EQ 'EW').EW\n         AIF   ('&STRING' EQ 'EWA').EWA\n         AIF   ('&STRING' EQ 'EAU').EAU\n         AIF   ('&STRING' EQ 'WSF').WSF\n.*             READS\n         AIF   ('&STRING' EQ 'RB').RB\n         AIF   ('&STRING' EQ 'RM').RM\n         AIF   ('&STRING' EQ 'RMA').RMA\n.*             3270 ORDERS\n         AIF   ('&STRING' EQ 'SBA').SBA\n         AIF   ('&STRING' EQ 'SF').SF\n         AIF   ('&STRING' EQ 'SFE').SFE\n         AIF   ('&STRING' EQ 'RA').RA\n         AIF   ('&STRING' EQ 'RTA').RA\n         AIF   ('&STRING' EQ 'IC').IC\n         AIF   ('&STRING' EQ 'PT').PT\n         AIF   ('&STRING' EQ 'HT').PT\n         AIF   ('&STRING' EQ 'EUA').EUA\n         AIF   ('&STRING' EQ 'SA').SA\n         AIF   ('&STRING' EQ 'MF').MF\n         AIF   ('&STRING' EQ 'MFA').MF\n.*             ATTRIBUTES\n         AIF   ('&STRING' EQ 'UNPLO').UNPLO\n         AIF   ('&STRING' EQ 'UNPMD').UNPMD\n         AIF   ('&STRING' EQ 'UNPHI').UNPHI\n         AIF   ('&STRING' EQ 'UNPNP').UNPNP\n         AIF   ('&STRING' EQ 'PROLO').PROLO\n         AIF   ('&STRING' EQ 'PROLOS').PROLOS\n         AIF   ('&STRING' EQ 'PROMD').PROMD\n         AIF   ('&STRING' EQ 'PROMDS').PROMDS\n         AIF   ('&STRING' EQ 'PROHI').PROHI\n         AIF   ('&STRING' EQ 'PROHIS').PROHIS\n.*             EXTENDED ATTRIBUTE TYPES\n         AIF   ('&STRING' EQ 'FIELD').FIELD\n         AIF   ('&STRING' EQ 'VALIDN').VALIDN\n         AIF   ('&STRING' EQ 'OUTLIN').OUTLIN\n         AIF   ('&STRING' EQ 'HILITE').HILITE\n         AIF   ('&STRING' EQ 'COLOUR').COLOUR\n         AIF   ('&STRING' EQ 'PGMSYM').PGMSYM\n         AIF   ('&STRING' EQ 'BKCOLR').BKCOLR\n         AIF   ('&STRING' EQ 'TRANSP').TRANSP\n.*             HIGHLIGHTING\n         AIF   ('&STRING' EQ 'NORMAL').NORMAL\n         AIF   ('&STRING' EQ 'BLINK').BLINK\n         AIF   ('&STRING' EQ 'REVERSE').REVERSE\n         AIF   ('&STRING' EQ 'USCORE').USCORE\n.*             COLOURS\n         AIF   ('&STRING' EQ 'BLUE').BLUE\n         AIF   ('&STRING' EQ 'RED').RED\n         AIF   ('&STRING' EQ 'PINK').PINK\n         AIF   ('&STRING' EQ 'GREEN').GREEN\n         AIF   ('&STRING' EQ 'TURQ').TURQ\n         AIF   ('&STRING' EQ 'YELLOW').YELLOW\n         AIF   ('&STRING' EQ 'WHITE').WHITE\n.*             TRANSPARENCIES\n         AIF   ('&STRING' EQ 'OPAQUE').OPAQUE\n.*             FORMAT CONTROL ORDERS\n         AIF   ('&STRING' EQ 'NUL').NUL\n         AIF   ('&STRING' EQ 'SUB').SUB\n         AIF   ('&STRING' EQ 'DUP').DUP\n         AIF   ('&STRING' EQ 'FM').FM\n         AIF   ('&STRING' EQ 'FF').FF\n         AIF   ('&STRING' EQ 'CR').CR\n         AIF   ('&STRING' EQ 'NL').NL\n         AIF   ('&STRING' EQ 'EM').EM\n         AIF   ('&STRING' EQ 'EO').EO\n         AIF   ('&STRING' EQ 'BYP').BYP\n         AIF   ('&STRING' EQ 'RES').RES\n         AIF   ('&STRING' EQ 'SI').SI\n         AIF   ('&STRING' EQ 'SO').SO\n.*             GRAPHIC ORDERS\n         AIF   ('&STRING' EQ 'GBAR').GBAR\n         AIF   ('&STRING' EQ 'GBIMG').GBIMG\n         AIF   ('&STRING' EQ 'GCBIMG').GCBIMG\n         AIF   ('&STRING' EQ 'GCHST').GCHST\n         AIF   ('&STRING' EQ 'GCCHST').GCCHST\n         AIF   ('&STRING' EQ 'GEAR').GEAR\n         AIF   ('&STRING' EQ 'GEIMG').GEIMG\n         AIF   ('&STRING' EQ 'GFLT').GFLT\n         AIF   ('&STRING' EQ 'GCFLT').GCFLT\n         AIF   ('&STRING' EQ 'GFARC').GFARC\n         AIF   ('&STRING' EQ 'GCFARC').GCFARC\n         AIF   ('&STRING' EQ 'GIMD').GIMD\n         AIF   ('&STRING' EQ 'GLINE').GLINE\n         AIF   ('&STRING' EQ 'GCLINE').GCLINE\n         AIF   ('&STRING' EQ 'GMRK').GMRK\n         AIF   ('&STRING' EQ 'GRLINE').GRLINE\n         AIF   ('&STRING' EQ 'GCRLINE').GCRLINE\n         AIF   ('&STRING' EQ 'GSBMX').GSBMX\n         AIF   ('&STRING' EQ 'GSCA').GSCA\n         AIF   ('&STRING' EQ 'GSCC').GSCC\n         AIF   ('&STRING' EQ 'GSCD').GSCD\n         AIF   ('&STRING' EQ 'GSCR').GSCR\n         AIF   ('&STRING' EQ 'GSCS').GSCS\n         AIF   ('&STRING' EQ 'GSCH').GSCH\n         AIF   ('&STRING' EQ 'GSCOL').GSCOL\n         AIF   ('&STRING' EQ 'GSECOL').GSECOL\n         AIF   ('&STRING' EQ 'GSLT').GSLT\n         AIF   ('&STRING' EQ 'GSLW').GSLW\n         AIF   ('&STRING' EQ 'GSMC').GSMC\n         AIF   ('&STRING' EQ 'GSMP').GSMP\n         AIF   ('&STRING' EQ 'GSMS').GSMS\n         AIF   ('&STRING' EQ 'GSMT').GSMT\n         AIF   ('&STRING' EQ 'GSMX').GSMX\n         AIF   ('&STRING' EQ 'GSPS').GSPS\n         AIF   ('&STRING' EQ 'GSPT').GSPT\n         AIF   ('&STRING' EQ 'GCOMT').GCOMT\n         AIF   ('&STRING' EQ 'GSAP').GSAP\n         AIF   ('&STRING' EQ 'GSCP').GSCP\n         AIF   ('&STRING' EQ 'GSGCH').GSGCH\n         AIF   ('&STRING' EQ 'GEPROL').GEPROL\n         AIF   ('&STRING' EQ 'GESD').GESD\n         AIF   ('&STRING' EQ 'GERASE').GERASE\n         AIF   ('&STRING' EQ 'GSTOPDR').GSTOPDR\n         AIF   ('&STRING' EQ 'GATTCUR').GATTCUR\n         AIF   ('&STRING' EQ 'GDETCUR').GDETCUR\n         AIF   ('&STRING' EQ 'GSETCUR').GSETCUR\n         AIF   ('&STRING' EQ 'GSCUDEF').GSCUDEF\n         AIF   ('&STRING' EQ 'GNOP1').GNOP1\n.*             CONSTANTS\n.*             IF THE OPERAND IS NONE OF THE ABOVE, IT IS\n.*             PRESUMED TO BE ANY VALID 'DC' CONSTANT.\n.DC      ANOP\n&N       DC    &STRING\n         AGO   .NEXT\n.ESC     ANOP\n&N       DC    X'27'               ESCAPE\n         AGO   .NEXT\n.GE      ANOP\n&N       DC    X'08'               GRAPHIC ESCAPE\n         AGO   .NEXT\n.WR      ANOP\n&N       DC    X'F1'               WRITE\n         AGO   .NEXT\n.EW      ANOP\n&N       DC    X'F5'               ERASE/WRITE\n         AGO   .NEXT\n.EWA     ANOP\n&N       DC    X'7E'               ERASE/WRITE ALTERNATE\n         AGO   .NEXT\n.EAU     ANOP\n&N       DC    X'6F'               ERASE ALL UNPROTECTED\n         AGO   .NEXT\n.WSF     ANOP\n&N       DC    X'F3'               WRITE STRUCTURED FIELD\n         AGO   .NEXT\n.RB      ANOP\n&N       DC    X'F2'               READ BUFFER\n         AGO   .NEXT\n.RM      ANOP\n&N       DC    X'F6'               READ MODIFIED\n         AGO   .NEXT\n.RMA     ANOP\n&N       DC    X'6E'               READ MODIFIED ALL\n         AGO   .NEXT\n.SBA     ANOP\n&N       DC    X'11'               SET BUFFER ADDRESS\n         AGO   .NEXT\n.SF      ANOP\n&N       DC    X'1D'               START FIELD\n         AGO   .NEXT\n.RA      ANOP\n&N       DC    X'3C'               REPEAT TO ADDRESS\n         AGO   .NEXT\n.IC      ANOP\n&N       DC    X'13'               INSERT CURSOR\n         AGO   .NEXT\n.PT      ANOP\n&N       DC    X'05'               PROGRAM TAB  (HORIZONTAL TAB)\n         AGO   .NEXT\n.EUA     ANOP\n&N       DC    X'12'               ERASE UNPROTECTED TO ADDRESS\n         AGO   .NEXT\n.SA      ANOP\n&N       DC    X'28'               SET ATTRIBUTE\n         AGO   .NEXT\n.SFE     ANOP\n&N       DC    X'29'               START FIELD EXTENDED\n         AGO   .NEXT\n.MF      ANOP\n&N       DC    X'2C'               MODIFY FIELD ATTRIBUTES\n         AGO   .NEXT\n.UNPLO   ANOP\n&N       DC    X'40'               UNPROTECTED NORMAL INTENSITY\n         AGO   .NEXT\n.UNPMD   ANOP\n&N       DC    X'C4'               UNPROTECTED MEDIUM INTENSITY\n         AGO   .NEXT\n.UNPHI   ANOP\n&N       DC    X'C8'               UNPROTECTED HIGH INTENSITY\n         AGO   .NEXT\n.UNPNP   ANOP\n&N       DC    X'4C'               UNPROTECTED NO-DISPLAY\n         AGO   .NEXT\n.PROLO   ANOP\n&N       DC    X'60'               PROTECTED NORMAL INTENSITY\n         AGO   .NEXT\n.PROLOS  ANOP\n&N       DC    X'F0'               PROTECTED NORMAL INTENSITY SKIP\n         AGO   .NEXT\n.PROMD   ANOP\n&N       DC    X'E4'               PROTECTED MEDIUM INTENSITY\n         AGO   .NEXT\n.PROMDS  ANOP\n&N       DC    X'F4'               PROTECTED MEDIUM INTENSITY SKIP\n         AGO   .NEXT\n.PROHI   ANOP\n&N       DC    X'E8'               PROTECTED HIGH INTENSITY\n         AGO   .NEXT\n.PROHIS  ANOP\n&N       DC    X'F8'               PROTECTED HIGH INTENSITY SKIP\n         AGO   .NEXT\n.FIELD   ANOP\n&N       DC    X'C0'               3270 FIELD ATTRIBUTE\n         AGO   .NEXT\n.VALIDN  ANOP\n&N       DC    X'C1'               FIELD VALIDATION\n         AGO   .NEXT\n.OUTLIN  ANOP\n&N       DC    X'C2'               FIELD OUTLINING\n         AGO   .NEXT\n.HILITE  ANOP\n&N       DC    X'41'               EXTENDED HIGHLIGHTING\n         AGO   .NEXT\n.COLOUR  ANOP\n&N       DC    X'42'               EXTENDED COLOUR\n         AGO   .NEXT\n.PGMSYM  ANOP\n&N       DC    X'43'               PROGRAMMED SYMBOLS\n         AGO   .NEXT\n.BKCOLR  ANOP\n&N       DC    X'45'               BACKGROUND COLOUR\n         AGO   .NEXT\n.TRANSP  ANOP\n&N       DC    X'46'               BACKGROUND TRANSPARENCY\n         AGO   .NEXT\n.NORMAL  ANOP\n&N       DC    X'00'               CHARACTER ATTRIBUTE RESET (DEFAULT)\n         AGO   .NEXT\n.BLINK   ANOP\n&N       DC    X'F1'               BLINK HIGHLIGHTING\n         AGO   .NEXT\n.REVERSE ANOP\n&N       DC    X'F2'               REVERSE VIDEO HIGHLIGHTING\n         AGO   .NEXT\n.USCORE  ANOP\n&N       DC    X'F4'               UNDERSCORE HIGHLIGHTING\n         AGO   .NEXT\n.BLUE    ANOP\n&N       DC    X'F1'               BLUE COLOUR\n         AGO   .NEXT\n.RED     ANOP\n&N       DC    X'F2'               RED COLOUR\n         AGO   .NEXT\n.PINK    ANOP\n&N       DC    X'F3'               PINK COLOUR\n         AGO   .NEXT\n.GREEN   ANOP\n&N       DC    X'F4'               GREEN COLOUR\n         AGO   .NEXT\n.TURQ    ANOP\n&N       DC    X'F5'               TURQUOISE COLOUR\n         AGO   .NEXT\n.YELLOW  ANOP\n&N       DC    X'F6'               YELLOW COLOUR\n         AGO   .NEXT\n.WHITE   ANOP\n&N       DC    X'F7'               WHITE COLOUR\n         AGO   .NEXT\n.OPAQUE  ANOP\n&N       DC    X'FF'               OPAQUE (NON-TRANSPARENT)\n         AGO   .NEXT\n.NUL     ANOP\n&N       DC    X'00'               NULL\n         AGO   .NEXT\n.SUB     ANOP\n&N       DC    X'3F'               SUBSTITUTE\n         AGO   .NEXT\n.DUP     ANOP\n&N       DC    X'1C'               DUPLICATE\n         AGO   .NEXT\n.FM      ANOP\n&N       DC    X'1E'               FIELD MARK\n         AGO   .NEXT\n.FF      ANOP\n&N       DC    X'0C'               FORM FEED\n         AGO   .NEXT\n.CR      ANOP\n&N       DC    X'0D'               CARRIAGE RETURN\n         AGO   .NEXT\n.NL      ANOP\n&N       DC    X'15'               NEW LINE\n         AGO   .NEXT\n.EM      ANOP\n&N       DC    X'19'               END OF MESSAGE\n         AGO   .NEXT\n.EO      ANOP\n&N       DC    X'FF'               EIGHT ONES\n         AGO   .NEXT\n.BYP     ANOP\n&N       DC    X'24'               BYPASS  (INHIBIT PRESENTATION)\n         AGO   .NEXT\n.RES     ANOP\n&N       DC    X'14'               RESTORE  (ENABLE PRESENTATION)\n         AGO   .NEXT\n.SI      ANOP\n&N       DC    X'0F'               SHIFT IN\n         AGO   .NEXT\n.SO      ANOP\n&N       DC    X'0E'               SHIFT OUT\n         AGO   .NEXT\n.GBAR    ANOP\n&N       DC    X'68'               BEGIN AREA\n         AGO   .NEXT\n.GBIMG   ANOP\n&N       DC    X'D1'               BEGIN IMAGE\n         AGO   .NEXT\n.GCBIMG  ANOP\n&N       DC    X'91'               BEGIN IMAGE\n         AGO   .NEXT\n.GCHST   ANOP\n&N       DC    X'C3'               CHARACTER STRING\n         AGO   .NEXT\n.GCCHST  ANOP\n&N       DC    X'83'               CHARACTER STRING\n         AGO   .NEXT\n.GEAR    ANOP\n&N       DC    X'60'               END AREA\n         AGO   .NEXT\n.GEIMG   ANOP\n&N       DC    X'93'               END IMAGE\n         AGO   .NEXT\n.GFLT    ANOP\n&N       DC    X'C5'               FILLET\n         AGO   .NEXT\n.GCFLT   ANOP\n&N       DC    X'85'               FILLET\n         AGO   .NEXT\n.GFARC   ANOP\n&N       DC    X'C7'               FULL ARC\n         AGO   .NEXT\n.GCFARC  ANOP\n&N       DC    X'87'               FULL ARC\n         AGO   .NEXT\n.GIMD    ANOP\n&N       DC    X'92'               IMAGE DATA\n         AGO   .NEXT\n.GLINE   ANOP\n&N       DC    X'C1'               LINE\n         AGO   .NEXT\n.GCLINE  ANOP\n&N       DC    X'81'               LINE\n         AGO   .NEXT\n.GMRK    ANOP\n&N       DC    X'C3'               MARKER\n         AGO   .NEXT\n.GRLINE  ANOP\n&N       DC    X'E1'               RELATIVE LINE\n         AGO   .NEXT\n.GCRLINE ANOP\n&N       DC    X'A1'               RELATIVE LINE\n         AGO   .NEXT\n.GSBMX   ANOP\n&N       DC    X'0D'               SET BACKGROUND MIX\n         AGO   .NEXT\n.GSCA    ANOP\n&N       DC    X'34'               SET CHARACTER ANGLE\n         AGO   .NEXT\n.GSCC    ANOP\n&N       DC    X'33'               SET CHARACTER CELL\n         AGO   .NEXT\n.GSCD    ANOP\n&N       DC    X'3A'               SET CHARACTER DIRECTION\n         AGO   .NEXT\n.GSCR    ANOP\n&N       DC    X'39'               SET CHARACTER PRECISION\n         AGO   .NEXT\n.GSCS    ANOP\n&N       DC    X'38'               SET CHARACTER SET\n         AGO   .NEXT\n.GSCH    ANOP\n&N       DC    X'35'               SET CHARACTER SHEAR\n         AGO   .NEXT\n.GSCOL   ANOP\n&N       DC    X'0A'               SET COLOUR\n         AGO   .NEXT\n.GSECOL  ANOP\n&N       DC    X'26'               SET EXTENDED COLOUR\n         AGO   .NEXT\n.GSLT    ANOP\n&N       DC    X'18'               SET LINE TYPE\n         AGO   .NEXT\n.GSLW    ANOP\n&N       DC    X'19'               SET LINE WIDTH\n         AGO   .NEXT\n.GSMC    ANOP\n&N       DC    X'37'               SET MARKER CELL\n         AGO   .NEXT\n.GSMP    ANOP\n&N       DC    X'3B'               SET MARKER PRECISION\n         AGO   .NEXT\n.GSMS    ANOP\n&N       DC    X'3C'               SET MARKER SET\n         AGO   .NEXT\n.GSMT    ANOP\n&N       DC    X'29'               SET MARKER SYMBOL\n         AGO   .NEXT\n.GSMX    ANOP\n&N       DC    X'0C'               SET MIX\n         AGO   .NEXT\n.GSPS    ANOP\n&N       DC    X'08'               SET PATTERN SET\n         AGO   .NEXT\n.GSPT    ANOP\n&N       DC    X'28'               SET PATTERN SYMBOL\n         AGO   .NEXT\n.GCOMT   ANOP\n&N       DC    X'01'               COMMENT\n         AGO   .NEXT\n.GSAP    ANOP\n&N       DC    X'22'               SET ARC PARAMETERS\n         AGO   .NEXT\n.GSCP    ANOP\n&N       DC    X'21'               SET CURRENT POSITION\n         AGO   .NEXT\n.GSGCH   ANOP\n&N       DC    X'04'               SEGMENT CHARACTERISTICS\n         AGO   .NEXT\n.GEPROL  ANOP\n&N       DC    X'3E'               END PROLOGUE\n         AGO   .NEXT\n.GESD    ANOP\n&N       DC    X'FF'               END OF SYMBOL DEFINITION\n         AGO   .NEXT\n.GERASE  ANOP\n&N       DC    X'0A'               ERASE GRAPHIC PRESENTATION SPACE\n         AGO   .NEXT\n.GSTOPDR ANOP\n&N       DC    X'0F'               STOP DRAW\n         AGO   .NEXT\n.GATTCUR ANOP\n&N       DC    X'08'               ATTACH GRAPHIC CURSOR\n         AGO   .NEXT\n.GDETCUR ANOP\n&N       DC    X'09'               DETACH GRAPHIC CURSOR\n         AGO   .NEXT\n.GSETCUR ANOP\n&N       DC    X'31'               SET GRAPHIC CURSOR POSITION\n         AGO   .NEXT\n.GSCUDEF ANOP\n&N       DC    X'21'               SET CURRENT DEFAULTS\n         AGO   .NEXT\n.GNOP1   ANOP\n&N       DC    X'00'               NO OPERATION\n         AGO   .NEXT\n.**********************************************************************\n.PAIR    ANOP\n         AIF   (N'&SYSLIST(&AS) NE 2).PERR1\n&NUMERIC SETB  (T'&SYSLIST(&AS,1) EQ 'N')\n&INTEGER SETB  ('&SYSLIST(&AS,1)'(1,1) GE '0')\n         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2\n&R       SETA  &SYSLIST(&AS,1)\n&NUMERIC SETB  (T'&SYSLIST(&AS,2) EQ 'N')\n&INTEGER SETB  ('&SYSLIST(&AS,2)'(1,1) GE '0')\n         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2\n&C       SETA  &SYSLIST(&AS,2)\n         AIF   (&R LT 1 OR &R GT 24).ROWERR\n         AIF   (&C LT 1 OR &C GT 80).COLERR\n&P       SETA  (&R-1)*80+&C-1\n&Q       SETA  &P/64               QUOTIENT\n&R       SETA  &P-&Q*64+1          REMAINDER+1\n&Q       SETA  &Q+1                QUOTIENT+1\n&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN\n         AGO   .NEXT\n.PERR1   MNOTE 4,'             &CS.) PARENS FOUND BUT NOT 2 NUMBERS'\n         MEXIT\n.PERR2   MNOTE 4,'             &CS.) NON NUMERIC ROW/COLUMN'\n         MEXIT\n.**********************************************************************\n.ROWCOL  ANOP\n         AIF   (&B).COL            BRANCH IF ROW HAS BEEN CAPTURED\n&R       SETA  &SYSLIST(&AS)\n&B       SETB  1 TRUE              SET ROW-HAS-BEEN-CAPTURED\n         AGO   .NEXTR\n.COL     ANOP\n&C       SETA  &SYSLIST(&AS)\n&B       SETB  0 FALSE             RESET SWITCH\n         AIF   (&R LT 1 OR &R GT 24).ROWERR\n         AIF   (&C LT 1 OR &C GT 80).COLERR\n&P       SETA  (&R-1)*80+&C-1\n&Q       SETA  &P/64               QUOTIENT\n&R       SETA  &P-&Q*64+1          REMAINDER+1\n&Q       SETA  &Q+1                QUOTIENT+1\n&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN\n         AGO   .NEXT\n.ROWERR  MNOTE 4,'             &CS.) VALUE &R INVALID, MUST BE 1 TO 24'\n         AGO   .NEXT\n.COLERR  MNOTE 4,'             &CS.) VALUE &C INVALID, MUST BE 1 TO 80'\n.NEXT    ANOP\n&N       SETC  ''                  TURN OFF NAME\n.NEXTR   ANOP\n&AN      SETA  &AN-1\n         AGO   .EACH\n.EPILOG  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBCNT": {"ttr": 3849, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      DEBCNT &N,&WK=R0                               ADDED ON 94225\n.*\n.*    THIS MACRO CAUSES AN 0C1 THE \"N\"TH TIME IT IS INVOKED\n.*\n         AIF   ('&N' EQ '0').ONCE\n&NM      ICM   &WK,15,*+8    LOAD TRAP COUNTER\n         BCT   &WK,*+8       CONTINUE IF COUNT NOT REACHED\n         DC    AL4(&N)       COUNTER (BETTER NOT BE 0)\n         STCM  &WK,15,*-4    UPDATE THE COUNTER\n         MEXIT ,\n.ONCE    ANOP  ,\n&NM      DC    X'00',C'TRP'  BOMB FIRST TIME\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEBDO": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\t\\x17\\x8f\\x01\\t\\x17\\x8f\\x17P\\x00\\x0f\\x00\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2009-06-27T00:00:00", "modifydate": "2009-06-27T17:50:00", "lines": 15, "newlines": 14, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DEBDO ,                                      ADDED ON 20090628\n.*\n.*    EXCEPT IN DEBUG MODE, BRANCHES TO THE MATCHING DEBEND\n.*\n         GBLB  &BUGBEAR\n         GBLC  &ZZDEBDO\n         AIF   ('&ZZDEBDO' EQ '').OK\n MNOTE 0,'NESTED DEBDO STATEMENTS NOT SUPPORTED'\n         MEXIT ,\n.OK      ANOP  ,\n&ZZDEBDO SETC  'ZZDB'.'&SYSNDX'\n         AIF   (&BUGBEAR).MEND\n         B     &ZZDEBDO\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBEND": {"ttr": 3853, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\t\\x17\\x8f\\x01\\t\\x17\\x8f\\x17S\\x00\\x10\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2009-06-27T00:00:00", "modifydate": "2009-06-27T17:53:00", "lines": 16, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DEBEND ,                                     ADDED ON 20090628\n.*\n.*    TARGET OF PRIOR DEBDO\n.*\n         GBLB  &BUGBEAR\n         GBLC  &ZZDEBDO\n         AIF   ('&ZZDEBDO' NE '').OK\n MNOTE 0,'DEBDO/DEBEND STATEMENT MISMATCH'\n         MEXIT ,\n.OK      ANOP  ,\n         AIF   (&BUGBEAR).MEND\n&ZZDEBDO DS    0H\n.MEND    ANOP  ,\n&ZZDEBDO SETC  ''\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBEX": {"ttr": 3855, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x12\\x06O\\x01\\x12\\x06O\\x18\"\\x00\\x07\\x00\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2012-03-04T00:00:00", "modifydate": "2012-03-04T18:22:00", "lines": 7, "newlines": 14, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DEBEX  &N                                    ADDED ON 2012064\n.*\n.*    THIS MACRO CAUSES AN 0C3 - USED FOR DEBUGGING\n.*      (easier to FIND than plain EX)\n&NM      EX    0,*\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DEBINLIN": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00\\x00?\\x01\\x06&/#T\\x01}\\x01w\\x00\\x02\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-01-03T00:00:00", "modifydate": "2006-09-19T23:54:00", "lines": 381, "newlines": 375, "modlines": 2, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DEBTRACE &LBL,&TEXT=,&REGS=,&HEX=,&MODE=S,     ADDED ON 85360 *\n               &WK=R9,&DEV=1,&TCB=,         WTO VS @PRT  CHANGED 94011 *\n               &ROUT=13,&DES=4,&BUGPARM=NO,                ADDED 95067 *\n               &CTEXT=,&PACK=,                             ADDED 96081 *\n               &PRTMODE=0,&DCB=0,   USER PRINT DCB/MODE    ADDED 99058 *\n               &COUNT=,&CALL=DYN,&OPT=,                  CHANGED 98222 *\n               &WA=DBTSAVE,                                ADDED 99114 *\n               &LIST=  (WORKS WITH CALL=EXTRN ONLY)        ADDED 95235\n.**********************************************************************\n.*                                                                   **\n.* THIS IS A SAVED VERSION OF DEBTRACE SUPPORTING IN-LINE DUMPING (CODE\n.* EXPANDED IN CALLER'S PROGRAM)\n.*                                                                   **\n.**********************************************************************\n     GBLB  &BUGBEAR,&BUGTCB,&BUGSWCH,&BUGSWRT,&BUGFAR,&BUGEXT,&BUGDYN\n     GBLB  &BUGTRC           USED WITH ACTIVE PGMTRACE (ESPIE)  GP99113\n         GBLC  &V\n         LCLA  &LN,&I,&EN,&EM,&EO                               GP95235\n         LCLC  &L,&ET,&EL,&EK                                   GP95235\n&L       SETC  'L'''                                            GP95235\n&V       SETC  'DBT'.'&SYSNDX'\n&BUGFAR  SETB  (&BUGFAR OR ('&CALL' EQ 'FAR'))                   95079\n&BUGEXT  SETB  (&BUGEXT OR ('&CALL' EQ 'EXTRN'))                 95227\n&BUGDYN  SETB  (&BUGDYN OR ('&CALL' EQ 'DYN'))                  GP97261\n&BUGDYN  SETB  (&BUGDYN OR ('&CALL' EQ 'DYNAMIC'))              GP97261\n&BUGTRC  SETB  (&BUGTRC OR ('&CALL' EQ 'TRC'))                  GP99113\n&BUGTRC  SETB  (&BUGTRC OR ('&CALL' EQ 'TRACE'))                GP99113\n&BUGTRC  SETB  (&BUGTRC OR ('&CALL' EQ 'PGMTRACE'))             GP99113\n         AIF   (&BUGBEAR OR '&BUGPARM' EQ 'NO').DOSOME\n         AIF   ('&NM' EQ '').MEND\n&NM      DS    0H            DEBUG SWITCH NOT ON\n         AGO   .MEND\n.DOSOME  ANOP  ,                                                 95067\n&BUGSWCH SETB  1                                                 95067\n         AIF   ('&MODE' EQ 'D' OR '&MODE' EQ 'M').DATA           95228\n         AIF   ('&MODE' EQ 'C').CODE\n         AIF   ('&MODE' EQ 'DC').CODE   EXPAND BOTH              95067\n         AIF   ('&MODE' EQ 'ON').SWON                            95079\n         AIF   ('&MODE' EQ 'OFF').SWOFF                          95079\n         AIF   ('&MODE' EQ 'CLOSE').SWEND  CLOSE AND QUIT       GP98222\n         AIF   (NOT &BUGTRC).NOTTRC                             GP99113\n&NM      DC    X'83CD',S(&WA,&V.X-*)  INVOKE TRACE              GP99113\n         AGO   .DONEBAS                                         GP99113\n.NOTTRC  ANOP  ,                                                GP99113\n&NM      STM   R0,R15,&WA    SAVE ALL REGISTERS\n         AIF   ('&COUNT' EQ '').DONECNT                          95079\n.*  COUNT(3) - SKIP FIRST N CALLS                                95079\n         AIF   ('&COUNT(3)' EQ '').CNTNO3                        95079\n         ICM   R14,15,&V.3   LOAD SKIP COUNT                     95079\n         BNP   &V.C          LIMIT REACHED - PROCESS             95079\n         BCTR  R14,0         DECREMENT                           95079\n         STCM  R14,15,&V.3   SAVE FOR NEXT TIME                  95079\n         B     &V.X          AND SKIP CALL                       95079\n&V.3     DC    AL4(&COUNT(3))  INITIAL SKIP COUNT                95079\n&V.C     DS    0H                                                95079\n.CNTNO3  AIF   ('&COUNT(2)' EQ '').CNTNO2                        95079\n         AIF   ('&COUNT(2)' EQ '1').CNTNO2                       95079\n         AIF   ('&COUNT(2)' EQ '0').CNTNO2                       95079\n.*  COUNT(2) - PROCESS EVERY NTH CALL ONLY                       95079\n         ICM   R14,15,&V.2   LOAD COUNTER                        95079\n         BNP   &V.L          BAD - PROCESS CALL                  95079\n         BCT   R14,&V.N      NON-ZERO; SAVE AND SKIP             95079\n         MVC   &V.2,=AL4(&COUNT(2))  REFRESH                     95079\n         B     &V.L          AND GO                              95079\n&V.2     DC    AL4(1)        INTERVAL COUNTER (DO FIRST ONE)     95079\n&V.N     STCM  R14,15,&V.2   UPDATE COUNTER                      95079\n         B     &V.X          AND EXIT                            95079\n.CNTNO2  AIF   ('&COUNT(1)' EQ '').DONECNT                       95079\n         AIF   ('&COUNT(1)' EQ '0').DONECNT                      95079\n         ICM   R14,15,&V.1   LOAD LIMIT COUNT                    95079\n         BNP   &V.X          SKIP OUT IF NOT VALID               95079\n         BCTR  R14,0         DECREMENT                           95079\n         B     &V.M          SAVE, AND CONTINUE                  95079\n&V.1     DC    AL4(&COUNT(1))  MAXIMUM CALLS TO MAKE             95079\n&V.M     STCM  R14,15,&V.1   SAVE FOR NEXT TIME                  95079\n.DONECNT ANOP  ,                                                 95079\n&V.L     BAS   R1,&V.B                                           95079\n.DONEBAS AIF   ('&LBL' EQ '' AND (&BUGEXT OR &BUGDYN OR &BUGTRC)).NOLBL\n         DC    CL8'&LBL '\n.NOLBL   AIF   ('&REGS' EQ '' OR '&REGS' EQ 'NO').NOREGS         95079\n         AIF   ('&REGS' EQ 'R15' OR '&REGS' EQ 'SHORT'                 *\n               OR '&REGS' EQ 'RET').RETREG                      GP97225\n         AIF   ('&REGS' EQ 'YES').REGSALL                       GP97225\n         AIF   (N'&REGS EQ 2).REGS2                             GP97225\n         DC    AL1(0,0),SL2(&REGS(1),&REGS(1))                  GP97225\n         AGO   .NOREGS                                          GP97225\n.REGS2   DC    AL1(0,0),SL2(&REGS(1),&REGS(2))                  GP97225\n         AGO   .NOREGS                                          GP97225\n.REGSALL DC    AL1(0,0),SL2(0,15)                               GP97225\n         AGO   .NOREGS                                          GP97225\n.RETREG  DC    SL2(0,14,1)    R15-R1 ONLY                       GP97225\n.NOREGS  AIF   ('&TEXT' EQ '').NOTEXT\n         AIF   (N'&TEXT GE 2).TEXT2                             GP97225\n         DC    AL1(1,0),SL2(&TEXT(1)),AL2(&L&TEXT(1))           GP97225\n         AGO   .NOTEXT                                          GP97225\n.TEXT2   DC    AL1(1,0),SL2(&TEXT(1),&TEXT(2))\n.NOTEXT  AIF   ('&CTEXT' EQ '').NOCTEXT                         GP97225\n         AIF   (N'&CTEXT GE 2).CTEXT2                           GP97225\n         DC    AL1(2,0),SL2(&CTEXT(1)),AL2(&L&CTEXT(1))         GP97225\n         AGO   .NOCTEXT                                         GP97225\n.CTEXT2  DC    AL1(2,0),SL2(&CTEXT(1),&CTEXT(2))                GP97225\n.NOCTEXT AIF   ('&HEX' EQ '').NOHEX                             GP97225\n         AIF   (N'&HEX GE 2).HEX2                               GP97225\n         DC    AL1(3,0),SL2(&HEX(1)),AL2(&L&HEX(1))             GP97225\n         AGO   .NOHEX                                           GP97225\n.HEX2    DC    AL1(3,0),SL2(&HEX(1),&HEX(2))                    GP97225\n.NOHEX   AIF   ('&PACK' EQ '').NOPACK                           GP97225\n         AIF   (N'&PACK GE 2).PACK2                             GP97225\n         DC    AL1(4,0),SL2(&PACK(1)),AL2(&L&PACK(1))           GP97225\n         AGO   .NOPACK                                          GP97225\n.PACK2   DC    AL1(4,0),SL2(&PACK(1),&PACK(2))                  GP97225\n.NOPACK  AIF   ('&LIST' EQ '' OR N'&LIST LT 1).NOLIST           GP95235\n&LN      SETA  N'&LIST                                          GP95235\n.DOLIST  AIF   (&I GE &LN).NOLIST   DONE WITH LIST              GP95235\n&I       SETA  &I+1          BUMP LOOP INDEX                    GP95235\n&EN      SETA  N'&LIST(&I)   NUMBER OF ENTRIES                  GP95235\n         AIF   (&EN LT 1).DOLIST  USER IN COMA?                 GP95235\n         AIF   (&EN LT 4).TOOLIST WARN                          GP95235\n         MNOTE 4,'LIST(&I) HAS TOO MANY (&EN) ENTRIES'          GP95235\n.TOOLIST ANOP  ,                                                GP95235\n&EK      SETC  '&LIST(&I,1)'\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n&EO      SETA  0             PRESET FOR NORMAL ADDRESSING MODE\n&ET      SETC  '03'          PRESET FOR HEX DEFAULT             GP95235\n         AIF   ('&EK'(1,1) NE '/').NOTIND\n&EO      SETA  &EO+1         REQUEST INDIRECT ADDRESSING\n&EK      SETC  '&EK'(2,&EM-1)  DELETE LEADING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTIND  AIF   ('&EK'(&EM,1) NE '%').NOTA24\n&EO      SETA  &EO+2         REQUEST FORCED 24-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA24  AIF   ('&EK'(&EM,1) NE '?').NOTA31\n&EO      SETA  &EO+4         REQUEST FORCED 31-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA31  AIF   (&EN LT 3 OR '&LIST(&I,3)' EQ 'HEX').HTYPE       GP95235\n         AIF   ('&LIST(&I,3)' EQ 'X').HTYPE                     GP97225\n         AIF   ('&LIST(&I,3)' EQ 'HEX').HTYPE\n         AIF   ('&LIST(&I,3)' EQ 'T').TTYPE                     GP98189\n         AIF   ('&LIST(&I,3)' EQ 'TEXT').TTYPE                  GP95235\n         AIF   ('&LIST(&I,3)' EQ 'TXT').TTYPE\n         AIF   ('&LIST(&I,3)' EQ 'C').CTYPE                     GP97225\n         AIF   ('&LIST(&I,3)' EQ 'CT').CTYPE\n         AIF   ('&LIST(&I,3)' EQ 'CTEXT').CTYPE                 GP97225\n         AIF   ('&LIST(&I,3)' EQ 'PACK').PTYPE                  GP97225\n         AIF   ('&LIST(&I,3)' EQ 'PACKED').PTYPE                GP97225\n         AIF   ('&LIST(&I,3)' EQ 'P').PTYPE                     GP97225\n         AIF   ('&LIST(&I,3)' EQ 'PD').PTYPE\n         AIF   ('&LIST(&I,3)' EQ 'D').PTYPE                     GP97225\n MNOTE 4,'TYPE MUST BE TEXT, CTEXT, HEX, OR PACKED, NOT &LIST(&I,3)'\n         AGO   .HTYPE                                           GP95235\n.TTYPE   ANOP  ,                                                GP95235\n&ET      SETC  '01'          SET FOR TEXT                       GP95235\n         AGO   .HTYPE                                           GP95235\n.CTYPE   ANOP  ,                                                GP97225\n&ET      SETC  '02'          SET FOR CONDITIONAL TEXT, ELSE HEX GP97225\n         AGO   .HTYPE                                           GP97225\n.PTYPE   ANOP  ,                                                GP97225\n&ET      SETC  '04'          SET FOR PACKED                     GP97225\n.HTYPE   ANOP  ,                                                GP97225\n&EL      SETC  '&LIST(&I,2)'                                    GP95235\n         AIF   ('&EL' NE '').HLEN                               GP95235\n&EL      SETC  '&L'.'&EK'\n.HLEN    DC    X'0800',CL8'&LIST(&I,1)',AL1(&ET,&EO),S(&EK,&EL)\n         AGO   .DOLIST                                          GP95235\n.NOLIST  AIF   (&BUGFAR).FARCL                                   95079\n         AIF   (&BUGDYN).FARCL                                  GP97261\n         AIF   (&BUGTRC).TRCCL                                  GP99113\n         AIF   (&BUGEXT).EXTCL                                   95215\n&V.B     BAS   R14,DBTRACE                                       92271\n         AGO   .CMCAL                                            95079\n.EXTCL   ANOP  ,                                                 95215\n&V.B     L     R15,=V(DEBTRACE)\n         LA    R0,&WA        PASS ADDRESS OF WORK AREA           95215\n         AGO   .FARCM                                            95215\n.FARCL   ANOP  ,                                                 95079\n&V.B     L     R15,=A(DBTRACE)                                   95079\n.FARCM   BASR  R14,R15                                           95079\n.CMCAL   ANOP  ,                                                 95079\n&V.X     LM    R0,R15,&WA\n         AGO   .MEND\n.TRCCL   ANOP  ,             INVOKE PGMTRACE VIA ESPIE          GP99113\n&V.X     DS    0H            END OF TRACE LIST                  GP99113\n         AGO   .MEND                                            GP99113\n.SWON    OI    DBTFLAG,DBTFLON  SET TRACING ON                   95079\n         AGO   .MEND                                             95079\n.SWEND   OI    DBTFLAG,DBTFLEND  CLOSE DCB AND STOP TRACE       GP98222\n.SWOFF   NI    DBTFLAG,255-DBTFLON  SET TRACING OFF              95079\n         AGO   .MEND                                             95079\n.CODE    AIF   (&BUGFAR OR &BUGEXT).TESTDC                      GP97262\n.*       PUSH  PRINT\n.*       PUSH  USING\n.*OOPS*  DROP  ,\n.*       PRINT GEN\n         AIF   ('&NM' EQ '').NONAME\n&NM      DS    0H\n.NONAME  AIF   (NOT &BUGDYN).NOLODYN                            GP97262\n         DROP  ,                                                GP97262\n         USING DBTRACE,R15                                      GP97265\nDBTRACE  LA    R0,&WA        PASS ADDRESS OF WORK AREA          GP97262\n         STM   R12,R1,DBTLOCSV  SAVE BASE AND RETURN            GP97265\n         ICM   R15,15,@DEBTRAC  SEE IF PREVIOUSLY LOADED        GP97265\n         BNZR  R15           INVOKE; RETURN VIA R14 TO CALLER   GP97265\n         BASR  R12,0         MAKE LOCAL BASE                    GP97262\n         DROP  R15                                              GP97265\n         USING *,R12                                            GP97265\n         LOAD  EPLOC=#DEBTRAC  LOAD EXTERNAL MODULE             GP97261\n         ST    R0,@DEBTRAC   SAVE FOR NEXT TIME                 GP97261\n         ST    R0,DBTLOCSV+(15-12)*4  UPDATE TARGET ADDRESS     GP97265\n         LM    R12,R1,DBTLOCSV  RESTORE                         GP97265\n         BR    R15           RETURN TO CALLER VIA R14           GP97262\n.*       POP   USING                                            GP97262\n.*       POP   PRINT                                            GP97262\n         AGO   .TESTDC                                          GP97262\n.NOLODYN ANOP  ,                                                 95215\nDBTRACE  STM   R12,R15,DBTLOCSV  SAVE BASE AND RETURN\n         BASR  R12,(0)       SET LOCAL BASE                      92271\n         USING *,R12\n         LA    R6,DBTEXITS   SET FOR QUICK EXIT (LABEL ONLY)     95080\n         TM    DBTFLAG,DBTFLON  DEBUG ON ?\n         BZR   R6            NO; JUST TAKE QUICK RETURN          95080\n         AIF   ('&COUNT(1)' EQ '').CNTDONE                       95079\n         AIF   ('&COUNT(1)' EQ '0').CNTDONE                      95079\n         ICM   R14,15,DBTRACNO   LOAD LIMIT COUNT                95079\n         BNPR  R6            IGNORE IF REACHED                   95080\n         BCTR  R14,0         DECREMENT                           95079\n         B     DBTRACNM      SAVE, AND PROCESS                   95079\nDBTRACNO DC    AL4(&COUNT(1))  MAXIMUM CALLS TO MAKE             95079\nDBTRACNM STCM  R14,15,DBTRACNO   SAVE FOR NEXT TIME              95079\n.CNTDONE ANOP  ,                                                 95079\n         LR    &WK,R1        COPY PARM REGISTER\n         MVC   DBTWTO(DBTPATL),DBTPAT\n         MVC   DBTWTON(DBTWTOC-DBTWTON),DBTWTON-1   BLANK THE LINE\n         AIF   ('&TCB' NE 'YES').DBTLUP                          94011\n&BUGTCB  SETB  1                                                 94011\n         UNPK  DBTWTCB(9),PSATOLD-PSA(5)                         94011\n         TR    DBTWTCB,DBTHEXTB-C'0'                             94011\n         MVI   DBTWTCB+L'DBTWTCB,C' '                            94011\n.DBTLUP  MVC   DBTWTON,0(&WK)  MOVE USER'S LABEL\nDBTLOOP  CLI   8(&WK),3      VALID FLAG ?\n         BH    DBTLAST       NO\n         SLR   R2,R2\n         IC    R2,10(,&WK)   GET S(ADDR)\n         SRL   R2,4          DELETE LOW BITS OF OFFSET\n         SLA   R2,2          *4 => INDEX INTO DBTSAVE\n         BZ    *+8           R0 = 0\n         L     R2,&WA(R2)      GET USER'S REGISTER\n         LA    R0,4095       MAKE MASK\n         N     R0,8(,&WK)    MASK OFFSET OF ADDRESS\n         ALR   R2,R0         MAKE EFFECTIVE ADDRESS\n         SLR   R3,R3\n         IC    R3,12(,&WK)   GET S(LEN)\n         SRL   R3,4          DELETE LOW BITS OF OFFSET\n         SLA   R3,2          *4 => INDEX INTO DBTSAVE\n         BZ    *+8           R0 = 0\n         L     R3,&WA(R3)      GET USER'S REGISTER\n         LA    R0,4095       MAKE MASK\n         N     R0,10(,&WK)   MASK OFFSET OF LENGTH\n         ALR   R3,R0         MAKE EFFECTIVE ADDRESS\n         CLI   8(&WK),0      REALLY SHORT REGISTERS ?\n         BH    DBTTTYP       NO; CHECK TYPE\n         MVC   DBTPRESV(8),&WA+14*4      PUT 14-15 BEFORE 0-1\n         LA    R2,DBTPRESV   POINT TO R14, R15, R0, R1 SEQUENCE\n         LA    R3,16         DO THREE REGISTERS\n         B     DBTFHEX       AND DO IT SHORTLY\nDBTTTYP  CLI   8(&WK),2      TEXT, REGS OR HEX ?\n         BL    DBTFTEXT      TEXT\n         BH    DBTFHEX       HEX\n         LA    R2,&WA        REGS\n         LA    R3,16*4\nDBTFHEX  BASR  R6,(0)        SET RETURN ADDRESS                  92271\n         SLR   R4,R4\n         LA    R1,DBTWTOT    POINT TO TEXT\n         LA    R5,16         MAX INPUT CHARACTERS ON LINE        92093\nDBTFHEXL LTR   R3,R3         ANY MORE TO DO ?\n         BNP   DBTLAST\n         UNPK  0(3,R1),0(2,R2)  UNPACK ONE BYTE\n         TR    0(2,R1),DBTHEXTB-C'0'  MAKE IT PRINTABLE\n         MVI   2(R1),C' '    BLANK NEXT\n         LA    R2,1(,R2)\n         LA    R1,2(,R1)\n         BCTR  R3,0          ADJUST RESIDUAL COUNT\n         LA    R4,1(,R4)     ADD ONE TO COUNT DONE\n         LA    R15,3\n         NR    R15,R4        END OF A WORD ?\n         BNZ   *+8           NO\n         LA    R1,1(,R1)     LEAVE A GAP BETWEEN WORDS\n         CR    R4,R5         DONE ONE LINE ?                     92093\n         BNL   DBTLAST       YES; PROCESS IT\n         B     DBTFHEXL      SEE IF MORE TO DO\nDBTFTEXT LA    R4,L'DBTWTOT  SET MAXIMUM TEXT PRINTABLE\n         BASR  R6,(0)        SET RETURN POINT                    92271\n         LTR   R3,R3         ANY MORE ?\n         BNP   DBTLAST       NO; EXIT\n         LR    R15,R4        SET TEXT LENGTH\n         CR    R3,R15        IS REQUEST LONGER ?\n         BNL   *+6           YES\n         LR    R15,R3        ELSE USE SHORTER\n         BCTR  R15,0         SET EXECUTE LENGTH\n         EX    R15,DBTFTMVC  MOVE TO LINE\n         AR    R2,R4         UP TEXT ADDRESS\n         SR    R3,R4         SET RESIDUAL PRINT LENGTH\n         B     DBTLAST       PRINT IT\nDBTFTMVC MVC   DBTWTOT(0),0(R2)  MOVE USER'S TEXT\nDBTLAST  CLC   DBTWTON(DBTWTOC-DBTWTON),DBTWTON-1  ANYTHING TO PRINT ?\n         BE    DBTLASTL      NO\n         AIF   (T'&DEV EQ 'O').NOPRT  NO PRT FILE # - WTO        92284\n         AIF   ('&DEV' EQ '0').NOPRT  NO PRT FILE # - WTO        95067\n         PRTV  DBTWTO,CC=NO,DEV=&DEV  PRINT ON REQUESTED FILE  GP95226\n         AGO   .NOWTO                                            92284\n.NOPRT   AIF   (&BUGSWRT).NOPRT2           ROUTING/DESCRIPTORS   95067\n         AIF   ('&ROUT' EQ '').NOROUT   NO ROUTING/DESCRIPTORS   95067\n&BUGSWRT SETB  1                                                 95067\n.NOPRT2  MVC   DBTWTOC(4),DBTRTDSC  ADD ROUTING/DESCRIPTOR CODE  95067\n.NOROUT  WTO   MF=(E,DBTWTO)   WRITE TO CONSOLE                  95067\n.NOWTO   ANOP  ,                                                 92284\nDBTLASTL MVC   DBTWTON(DBTWTOC-DBTWTON),DBTWTON-1  BLANK IT      93357\n         MVC   DBTWTOM,DBTWTON  CLEAR MESSAGE NUMBER             93357\n         MVI   DBTWTOM+5,C'+' INDICATE CONTINUATION              93357\n         LTR   R3,R3         ANY MORE TO DO ?\n         BPR   R6            RESTART\nDBTEXIT  LA    &WK,6(,&WK)   SKIP TO NEXT OPTION ENTRY\n         CLI   8(&WK),3      VALID REQUEST ?\n         BNH   DBTLOOP       YES; DO IT\nDBTEXITS LM    R12,R15,DBTLOCSV  RESTORE BASE AND RETURN\n         BR    R14           AND RETURN TO USER\nDBTWPAT  WTO   'MSG666 ',ROUTCDE=&ROUT,DESC=&DES,MF=L\nDBTPATL  EQU   *-DBTPAT\nDBTHEXTB DC    C'0123456789ABCDEF'\n         ORG   DBTWPAT\nDBTPAT   DC    Y(56+9*&BUGTCB)  TRUE LENGTH AFTER MOVE\nDBTRTDSC EQU   DBTHEXTB-4,4,C'X'  DESCRIPTOR/ROUTCDE, IF ANY\n         ORG   DBTHEXTB+L'DBTHEXTB  RESUME\n.*       POP   PRINT\n.*       POP   USING\n.TESTDC  AIF   ('&MODE' NE 'DC').MEND                            95067\n         AGO   .NODRTE                                           95067\n.DATA    AIF   ('&NM' EQ '').NODLBL\n&NM      DS    0D\n.NODLBL  AIF   ('&ROUT' EQ '').NODRTE                            95067\n&BUGSWRT SETB  1                                                 95067\n.NODRTE  AIF   (&BUGFAR OR '&MODE' EQ 'M').MEND                  95230\nDBTPRESV DC    2F'0'  1/2    FOR SHORT FORMATTING                95230\n.NOSVPFX ANOP  ,                                                 95230\n&WA      DC    16F'0' 2/2    DEBUG SAVE AREA                    GP97265\nDBTFLAG  DC    AL1(&BUGSWCH*DBTFLON+DBTFLWID)  DEBUG FLAG       GP98222\nDBTFLTCB EQU   128             INCLUDE TCB ADDRESS IN MESSAGE\nDBTFLWTO EQU   64              USE WTO INSTEAD OF PRT            95240\nDBTFLWID EQU   32              USE WIDE FORMAT WHEN PRINTING    GP98222\nDBTFLPRO EQU   16              PRODUCTION MODE / NEED DD TO PRT GP99113\nDBTFLEND EQU   2               THIS IS A TERMINATION CALL       GP98222\nDBTFLON  EQU   1               DEBUG BIT\nDBTFLAG2 DC    AL1(0)        ..RESERVED..                       GP99062\nDBTFLAG3 DC    AL1(0)        ..RESERVED..                       GP99062\nDBTFLAG4 DC    AL1(0)        ..RESERVED..                       GP99062\nDBTCNT1  DC    A(&COUNT(1)+0)  COUNT OPTION                      95228\nDBTCNT2  DC    A(&COUNT(2)+0)  COUNT OPTION                      95228\nDBTCNT3  DC    A(&COUNT(3)+0)  COUNT OPTION                      95228\n         MAPCMPRT PFX=DBT,DCB=&DCB,PRTMODE=&PRTMODE,DEV=&DEV    GP99113\n         AIF   (NOT &BUGDYN).NODYNS                             GP97261\n.BUGDYN  WXTRN DEBTRACE      SUPPORT LINKED-IN VERSION          GP97262\n@DEBTRAC DC    A(DEBTRACE)   ADDRESS OF LOADED DEBTRACE         GP97261\n#DEBTRAC DC    CL8'DEBTRACE'  LOAD MODULE NAME                  GP97261\nDBTLOCSV DC    6A(0)         SAVE AREA                          GP97265\n         AGO   .MEND                                            GP97262\n.NODYNS  AIF   (&BUGFAR OR '&MODE' EQ 'M').MEND                  95228\nDBTLOCSV DC    4F'0'         BASE SAVE\nDBTWTO   DC    Y(56,0)       VCON                                93357\nDBTWTOM  DC    C'MSG666 '    DEBUG HEADER                        93357\nDBTWTON  DC    CL8' ',C' '   USER'S LABEL\nDBTWTOT  DC    CL36' '       USER'S HEX OR EBCDIC TEXT\n         AIF   ('&TCB' NE 'YES' AND NOT &BUGTCB).NOTCB           94011\n         DC    C' '          EXTRA FOR UNPACK                    94011\nDBTWTCB  DC    CL8' '        CURRENT TCB ADDRESS                 94011\n.NOTCB   ANOP  ,                                                 94011\nDBTWTOC  DC    C' '          EXTRA FOR UNPACK\n         AIF   (NOT &BUGSWRT).MEND  NO ROUTING CODE              95067\n         DC    XL3'0'        EXTRA FOR DESCRIPTOR/ROUTING CODES  95067\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBPRT": {"ttr": 4104, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x08\\x10\\x9f\\x01\\t(/\\x16R\\x00\\x13\\x00\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2008-04-18T00:00:00", "modifydate": "2009-10-09T16:52:00", "lines": 19, "newlines": 14, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         DEBPRT &N,&WK=R0                             ADDED ON 20080418\n         GBLB  &ZZDEPRT\n.*\n.*    THIS MACRO TOGGLES DEBUG PRINTING ON AND OFF\n.*\n         AIF   (NOT &ZZDEPRT AND '&N' EQ 'OFF').MEND\n         AIF   (&ZZDEPRT AND '&N' EQ 'ON').MEND\n         AIF   ('&N' EQ 'ON').PUSH\n         AIF   ('&N' EQ 'OFF').POP\n&ZZDEPRT SETB  (NOT &ZZDEPRT)     FLIP\n         AIF   (NOT &ZZDEPRT).POP\n.PUSH    PUSH PRINT\n         PRINT ON,GEN,DATA\n&ZZDEPRT SETB  1\n         MEXIT ,\n.POP     POP   PRINT\n&ZZDEPRT SETB  0\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBSTOMP": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00#\\x01\\x04\\x11o\\x01\\x04\\x11o\\x12\\x00\\x00\\x16\\x00\\x15\\x00\\x02\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-04-25T00:00:00", "modifydate": "2004-04-25T12:00:23", "lines": 22, "newlines": 21, "modlines": 2, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DEBSTOMP &I,&VAR=\n         GBLC  &MACPLAB\n         GBLC  &ZZSTMNM\n         GBLB  &BUGBEAR\n         GBLA  &ZZSTMNO\n&MACPLAB SETC  '&NM'\n.*--------------------------------------------------------------------*\n.*   THIS SETS A SIMPLE (ONE BYTE) PROGRESS INDICATOR FLAG FOR DEBUG  *\n.*--------------------------------------------------------------------*\n         AIF   ('&VAR' EQ '').HAVEVAR\n&ZZSTMNM SETC  '&VAR'\n.HAVEVAR AIF   ('&ZZSTMNM' NE '').HAVEVAT\n&ZZSTMNM SETC  'DEBSTOMP'\n.HAVEVAT AIF   ('&I' EQ '').EXPAND\n&ZZSTMNO SETA  &I\n.EXPAND  AIF   (NOT &BUGBEAR AND '&ZZSTMNO' EQ 'DEBSTOMP').EXIT\n         MACPARM &ZZSTMNM,&ZZSTMNO,OP=MVI,OPR=MVI  MARK MY SPOT\n         MNOTE 0,'DEBSTOMP: FOOTPRINT NUMBER &ZZSTMNO'\n.EXIT    MACPARM MODE=LBL\n&ZZSTMNO SETA  &ZZSTMNO+1\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBTRACE": {"ttr": 4108, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x99\\x05\\x8f\\x01\\x041\\x7f \\x01\\x01G\\x01g\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1999-02-27T00:00:00", "modifydate": "2004-11-12T20:01:00", "lines": 327, "newlines": 359, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DEBTRACE &LBL,&TEXT=,&REGS=,&HEX=,&MODE=S,     ADDED ON 85360 *\n               &WK=R9,&DEV=1,&TCB=,         WTO VS @PRT  CHANGED 94011 *\n               &ROUT=13,&DES=4,&BUGPARM=NO,                ADDED 95067 *\n               &CTEXT=,&PACK=,                             ADDED 96081 *\n               &PRTMODE=0,&DCB=0,   USER PRINT DCB/MODE    ADDED 99058 *\n               &COUNT=,&CALL=DYN,&OPT=,                  CHANGED 98222 *\n               &WA=DBTSAVE,                                ADDED 99114 *\n               &LIST=                                      ADDED 95235\n.**********************************************************************\n.*>>>>>>>>> KEPT FOR OLD CODE ONLY - NEW CODE SHOULD USE DBT <<<<<<<<<*\n.**********************************************************************\n.*                                                                    *\n.*  THIS MACRO INVOKES EXTERNAL LOAD MODULE DEBTROLD TO PRODUCE       *\n.*  TRACING, REGISTER CONTENTS, AND VARIABLES. (DEBTROLD SHOULD BE IN *\n.*  A LINKLIB; AUTHORIZATION IS NOT REQUIRED). OUTPUT WILL BE BY WTO  *\n.*  UNLESS A DEBTRACE DD CARD IS SUPPLIED.                            *\n.*                                                                    *\n.*  REQUIRED:  IN A CSECT OR RSECT:   DEBTRACE MODE=C  DEFINES CODE   *\n.*             IN A CSECT OR DSECT:   DEBTRACE MODE=D  DEFINES DATA   *\n.*             IN A CSECT (\u00acRENT) :   DEBTRACE MODE=DC   BOTH         *\n.*    (NOTE: REQUIRED FORMS MUST NOT APPEAR PRIOR TO FIRST OPTIONAL)  *\n.*                                                                    *\n.*  OPTIONAL:  LABEL DEBTRACE ...                                     *\n.*                TAG OR ,  -  IDENTIFIER ON OUTPUT LISTING / CONSOLE *\n.*                                                                    *\n.*                REGS= (DEFAULT) | REGS=NO - NO REGISTERS            *\n.*                REGS=YES  -  REGISTERS R0 THROUGH R15               *\n.*                REGS=(R1,R2) - REGISTERS R1 THROUGH R2              *\n.*                REGS=SHORT   - R14 THROUGH R1                       *\n.*                                                                    *\n.*                TEXT=NAME -  TEXT STRING TO BE SHOWN                *\n.*                TEXT=(NAME,LEN) - TEXT W/EXPLICIT LENGTH            *\n.*                                                                    *\n.*                CTEXT=NAME - CONDITIONAL TEXT STRING TO BE SHOWN    *\n.*                CTEXT=(NAME,LEN) - TEXT W/EXPLICIT LENGTH           *\n.*                              OUTPUT IN HEX IF NOT PRINTABLE        *\n.*                                                                    *\n.*                HEX=NAME   -  DATA TO BE SHOWN IN HEXADECIMAL       *\n.*                HEX=(NAME,LEN) - TEXT W/EXPLICIT LENGTH             *\n.*                                                                    *\n.*                PACK=NAME  -  DATA TO BE CONVERTED FROM PACKED      *\n.*                PACK=(NAME,LEN) - TEXT W/EXPLICIT LENGTH (LEN IGNRD)*\n.*                                                                    *\n.*           LIST=((OP1,LN1,FM1),(OP2,LN2,FM2), ... )                 *\n.*                                                                    *\n.*                OP - ADDRESS EXPRESSION VALID IN S CONSTANT         *\n.*                LN - LENGTH EXPRESSION; DEFAULT IS L'OP             *\n.*                FM - TEXT | CTEXT | HEX | PACK - DEFAULT IS HEX     *\n.*                     OR ABBREVIATED   T | CT | H | P                *\n.*                                                                    *\n.*  THE REQUIRED FORMS MAY BE OMITTED WHEN PGMTRACE WILL ALSO BE USED *\n.*  AND ACTIVATED. IN THAT CASE THE FIRST OPTIONAL FORM MUST INCLUDE  *\n.*  CALL=TRC TO GENERATE SHORTER PARAMETER LISTS.                     *\n.*                                                                    *\n.**********************************************************************\n.*  MAINTENANCE:                                                      *\n.*                                                                    *\n.*  2000/01/03  GYP  REMOVED IN-LINE DEBUG CODE;                      *\n.*                   FIXED MODE=C AND MODE=D FOR USE WITH REENTRANT   *\n.*                     PROGRAMS.                                      *\n.*                                                                    *\n.**********************************************************************\n     GBLB  &BUGBEAR,&BUGTCB,&BUGSWCH,&BUGSWRT,&BUGFAR,&BUGEXT,&BUGDYN\n     GBLB  &BUGTRC           USED WITH ACTIVE PGMTRACE (ESPIE)  GP99113\n         GBLA  &MACP#        NUMBER OF SUBLIST PARAMETERS       GP04234\n         GBLC  &MACP1,&MACP2,&MACP3,&MACP4,&MACP5               GP04234\n         GBLC  &MACP6,&MACP7,&MACP8,&MACP9,&MACP10              GP04234\n         GBLC  &V\n         LCLA  &LN,&I,&EN,&EM,&EO                               GP95235\n         LCLC  &L,&ET,&EL,&EK                                   GP95235\n&L       SETC  'L'''                                            GP95235\n&V       SETC  'DBT'.'&SYSNDX'\n&BUGFAR  SETB  (&BUGFAR OR ('&CALL' EQ 'FAR'))                   95079\n&BUGEXT  SETB  (&BUGEXT OR ('&CALL' EQ 'EXTRN'))                 95227\n&BUGDYN  SETB  (&BUGDYN OR ('&CALL' EQ 'DYN'))                  GP97261\n&BUGDYN  SETB  (&BUGDYN OR ('&CALL' EQ ''))  DROP LOCAL CODE    GP00004\n&BUGDYN  SETB  (&BUGDYN OR ('&CALL' EQ 'DYNAMIC'))              GP97261\n&BUGTRC  SETB  (&BUGTRC OR ('&CALL' EQ 'TRC'))                  GP99113\n&BUGTRC  SETB  (&BUGTRC OR ('&CALL' EQ 'TRACE'))                GP99113\n&BUGTRC  SETB  (&BUGTRC OR ('&CALL' EQ 'PGMTRACE'))             GP99113\n         AIF   (&BUGBEAR OR '&BUGPARM' EQ 'NO').DOSOME\n         AIF   ('&NM' EQ '').MEND\n&NM      DS    0H            DEBUG SWITCH NOT ON\n         AGO   .MEND\n.DOSOME  ANOP  ,                                                 95067\n&BUGSWCH SETB  1                                                 95067\n         AIF   ('&MODE' EQ 'D' OR '&MODE' EQ 'M').DATA           95228\n         AIF   ('&MODE' EQ 'C').CODE\n         AIF   ('&MODE' EQ 'DC').CODE   EXPAND BOTH              95067\n         AIF   ('&MODE' EQ 'ON').SWON                            95079\n         AIF   ('&MODE' EQ 'OFF').SWOFF                          95079\n         AIF   ('&MODE' EQ 'CLOSE').SWEND  CLOSE AND QUIT       GP98222\n         AIF   (NOT &BUGTRC).NOTTRC                             GP99113\n&NM      DC    X'83CD',S(&WA,&V.X-*)             INVOKE TRACE   GP99113\n         AGO   .DONEBAS                                         GP99113\n.NOTTRC  ANOP  ,                                                GP99113\n&NM      STM   R0,R15,&WA    SAVE ALL REGISTERS\n         AIF   ('&COUNT' EQ '').DONECNT                          95079\n.*  COUNT(3) - SKIP FIRST N CALLS                                95079\n         AIF   ('&COUNT(3)' EQ '').CNTNO3                        95079\n         ICM   R14,15,&V.3   LOAD SKIP COUNT                     95079\n         BNP   &V.C          LIMIT REACHED - PROCESS             95079\n         BCTR  R14,0         DECREMENT                           95079\n         STCM  R14,15,&V.3   SAVE FOR NEXT TIME                  95079\n         B     &V.X          AND SKIP CALL                       95079\n&V.3     DC    AL4(&COUNT(3))  INITIAL SKIP COUNT                95079\n&V.C     DS    0H                                                95079\n.CNTNO3  AIF   ('&COUNT(2)' EQ '').CNTNO2                        95079\n         AIF   ('&COUNT(2)' EQ '1').CNTNO2                       95079\n         AIF   ('&COUNT(2)' EQ '0').CNTNO2                       95079\n.*  COUNT(2) - PROCESS EVERY NTH CALL ONLY                       95079\n         ICM   R14,15,&V.2   LOAD COUNTER                        95079\n         BNP   &V.L          BAD - PROCESS CALL                  95079\n         BCT   R14,&V.N      NON-ZERO; SAVE AND SKIP             95079\n         MVC   &V.2,=AL4(&COUNT(2))  REFRESH                     95079\n         B     &V.L          AND GO                              95079\n&V.2     DC    AL4(1)        INTERVAL COUNTER (DO FIRST ONE)     95079\n&V.N     STCM  R14,15,&V.2   UPDATE COUNTER                      95079\n         B     &V.X          AND EXIT                            95079\n.CNTNO2  AIF   ('&COUNT(1)' EQ '').DONECNT                       95079\n         AIF   ('&COUNT(1)' EQ '0').DONECNT                      95079\n         ICM   R14,15,&V.1   LOAD LIMIT COUNT                    95079\n         BNP   &V.X          SKIP OUT IF NOT VALID               95079\n         BCTR  R14,0         DECREMENT                           95079\n         B     &V.M          SAVE, AND CONTINUE                  95079\n&V.1     DC    AL4(&COUNT(1))  MAXIMUM CALLS TO MAKE             95079\n&V.M     STCM  R14,15,&V.1   SAVE FOR NEXT TIME                  95079\n.DONECNT ANOP  ,                                                 95079\n&V.L     BAS   R1,&V.B                                           95079\n.DONEBAS AIF   ('&LBL' EQ '' AND (&BUGEXT OR &BUGDYN OR &BUGTRC)).NOLBL\n         DC    CL8'&LBL '\n.NOLBL   AIF   ('&REGS' EQ '' OR '&REGS' EQ 'NO').NOREGS         95079\n         AIF   ('&REGS' EQ 'R15' OR '&REGS' EQ 'SHORT'                 *\n               OR '&REGS' EQ 'RET').RETREG                      GP97225\n         AIF   ('&REGS' EQ 'YES' OR '&REGS' EQ 'ALL').REGSALL   GP02246\n         AIF   (N'&REGS EQ 2).REGS2                             GP97225\n         DC    AL1(0,0),SL2(&REGS(1),&REGS(1))                  GP97225\n         AGO   .NOREGS                                          GP97225\n.REGS2   DC    AL1(0,0),SL2(&REGS(1),&REGS(2))                  GP97225\n         AGO   .NOREGS                                          GP97225\n.REGSALL DC    AL1(0,0),SL2(0,15)                               GP97225\n         AGO   .NOREGS                                          GP97225\n.RETREG  DC    SL2(0,14,1)    R15-R1 ONLY                       GP97225\n.NOREGS  AIF   ('&TEXT' EQ '').NOTEXT\n         AIF   (N'&TEXT GE 2).TEXT2                             GP97225\n         DC    AL1(1,0),SL2(&TEXT(1)),AL2(&L&TEXT(1))           GP97225\n         AGO   .NOTEXT                                          GP97225\n.TEXT2   DC    AL1(1,0),SL2(&TEXT(1),&TEXT(2))\n.NOTEXT  AIF   ('&CTEXT' EQ '').NOCTEXT                         GP97225\n         AIF   (N'&CTEXT GE 2).CTEXT2                           GP97225\n         DC    AL1(2,0),SL2(&CTEXT(1)),AL2(&L&CTEXT(1))         GP97225\n         AGO   .NOCTEXT                                         GP97225\n.CTEXT2  DC    AL1(2,0),SL2(&CTEXT(1),&CTEXT(2))                GP97225\n.NOCTEXT AIF   ('&HEX' EQ '').NOHEX                             GP97225\n         AIF   (N'&HEX GE 2).HEX2                               GP97225\n         DC    AL1(3,0),SL2(&HEX(1)),AL2(&L&HEX(1))             GP97225\n         AGO   .NOHEX                                           GP97225\n.HEX2    DC    AL1(3,0),SL2(&HEX(1),&HEX(2))                    GP97225\n.NOHEX   AIF   ('&PACK' EQ '').NOPACK                           GP97225\n         AIF   (N'&PACK GE 2).PACK2                             GP97225\n         DC    AL1(4,0),SL2(&PACK(1)),AL2(&L&PACK(1))           GP97225\n         AGO   .NOPACK                                          GP97225\n.PACK2   DC    AL1(4,0),SL2(&PACK(1),&PACK(2))                  GP97225\n.NOPACK  AIF   ('&LIST' EQ '' OR N'&LIST LT 1).NOLIST           GP95235\n&LN      SETA  N'&LIST                                          GP95235\n.DOLIST  AIF   (&I GE &LN).NOLIST   DONE WITH LIST              GP95235\n&I       SETA  &I+1          BUMP LOOP INDEX                    GP95235\n&EN      SETA  K'&EK         GET LENGTH                         GP04234\n         MACLIST &LIST(&I)   GET SUBLIST ITEMS                  GP04234\n&EN      SETA  &MACP#        NUMBER OF ENTRIES (CHG FOR XF ASM) GP04234\n         AIF   (&EN LT 1).DOLIST  USER IN COMA?                 GP95235\n         AIF   (&EN LT 4).TOOLIST WARN                          GP95235\n         MNOTE 4,'MORE THAN 3 SUBPARMS IN &LIST(&I) '           GP95235\n.TOOLIST ANOP  ,                                                GP95235\n&EK      SETC  '&MACP1'                                         GP04234\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n&EO      SETA  0             PRESET FOR NORMAL ADDRESSING MODE\n&ET      SETC  '03'          PRESET FOR HEX DEFAULT             GP95235\n         AIF   (&EM GT 0).TPFX                                  GP04234\n&EK      SETC  '0'           ALLOW EXPANSION WITHOUT ERROR      GP04234\n&EM      SETA  1                                                GP04234\n         MNOTE 4,'DEBTRACE: PARAMETER &I REQUIRES AN ADDRESS'   GP04234\n.TPFX    AIF   (&EM LT 2).NOTA31                                GP04234\n         AIF   ('&EK'(1,1) NE '/').NOTIND\n&EO      SETA  &EO+1         REQUEST INDIRECT ADDRESSING\n&EK      SETC  '&EK'(2,&EM-1)  DELETE LEADING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTIND  AIF   ('&EK'(&EM,1) NE '%').NOTA24\n&EO      SETA  &EO+2         REQUEST FORCED 24-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA24  AIF   ('&EK'(&EM,1) NE '?').NOTA31\n&EO      SETA  &EO+4         REQUEST FORCED 31-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA31  AIF   (&EN LT 3 OR '&MACP3' EQ 'HEX').HTYPE            GP95235\n         AIF   ('&MACP3' EQ 'X').HTYPE                          GP97225\n         AIF   ('&MACP3' EQ 'HEX').HTYPE\n         AIF   ('&MACP3' EQ 'T').TTYPE                          GP98189\n         AIF   ('&MACP3' EQ 'TEXT').TTYPE                       GP95235\n         AIF   ('&MACP3' EQ 'TXT').TTYPE\n         AIF   ('&MACP3' EQ 'C').CTYPE                          GP97225\n         AIF   ('&MACP3' EQ 'CT').CTYPE\n         AIF   ('&MACP3' EQ 'CTEXT').CTYPE                      GP97225\n         AIF   ('&MACP3' EQ 'PACK').PTYPE                       GP97225\n         AIF   ('&MACP3' EQ 'PACKED').PTYPE                     GP97225\n         AIF   ('&MACP3' EQ 'P').PTYPE                          GP97225\n         AIF   ('&MACP3' EQ 'PD').PTYPE\n         AIF   ('&MACP3' EQ 'D').PTYPE                          GP97225\n MNOTE 4,'TYPE MUST BE TEXT, CTEXT, HEX, OR PACKED, NOT &MACP3'\n         AGO   .HTYPE                                           GP95235\n.TTYPE   ANOP  ,                                                GP95235\n&ET      SETC  '01'          SET FOR TEXT                       GP95235\n         AGO   .HTYPE                                           GP95235\n.CTYPE   ANOP  ,                                                GP97225\n&ET      SETC  '02'          SET FOR CONDITIONAL TEXT, ELSE HEX GP97225\n         AGO   .HTYPE                                           GP97225\n.PTYPE   ANOP  ,                                                GP97225\n&ET      SETC  '04'          SET FOR PACKED                     GP97225\n.HTYPE   ANOP  ,                                                GP97225\n&EL      SETC  '&MACP2'                                         GP95235\n         AIF   ('&EL' NE '').HLEN                               GP95235\n&EL      SETC  '&L'.'&EK'\n.HLEN    DC    X'0800',CL8'&MACP1',AL1(&ET,&EO),S(&EK,&EL)\n         AGO   .DOLIST                                          GP95235\n.NOLIST  AIF   (&BUGFAR).FARCL                                   95079\n         AIF   (&BUGDYN).FARCL                                  GP97261\n         AIF   (&BUGTRC).TRCCL                                  GP99113\n         AIF   (&BUGEXT).EXTCL                                   95215\n&V.B     BAS   R14,DBTRACE                                       92271\n         AGO   .CMCAL                                            95079\n.EXTCL   ANOP  ,                                                 95215\n&V.B     L     R15,=V(DEBTRACE)    MEMBER DEBTROLD              GP05013\n         LA    R0,&WA        PASS ADDRESS OF WORK AREA           95215\n         AGO   .FARCM                                            95215\n.FARCL   ANOP  ,                                                 95079\n&V.B     L     R15,=A(DBTRACE)                                   95079\n.FARCM   BASR  R14,R15                                           95079\n.CMCAL   ANOP  ,                                                 95079\n&V.X     LM    R0,R15,&WA\n         AGO   .MEND\n.TRCCL   ANOP  ,             INVOKE PGMTRACE VIA ESPIE          GP99113\n&V.X     DS    0H            END OF TRACE LIST                  GP99113\n         AGO   .MEND                                            GP99113\n.SWON    OI    DBTFLAG,DBTFLON  SET TRACING ON                   95079\n         AGO   .MEND                                             95079\n.SWEND   OI    DBTFLAG,DBTFLEND  CLOSE DCB AND STOP TRACE       GP98222\n.SWOFF   NI    DBTFLAG,255-DBTFLON  SET TRACING OFF              95079\n         AGO   .MEND                                             95079\n.CODE    AIF   (&BUGFAR OR &BUGEXT).TESTDC                      GP97262\n         AIF   ('&NM' EQ '').NONAME\n&NM      DS    0H\n.NONAME  AIF   (NOT &BUGDYN).NOLODYN                            GP97262\n         AIF   ('&MODE' NE 'DC').NOPUP                          GP00004\n         PUSH  PRINT                                            GP00004\n         PUSH  USING                                            GP00004\n.*       PRINT GEN                                              GP00004\n         DROP  ,                                                GP00004\n         USING DBTRACE,R15                                      GP97265\n.NOPUP   ANOP  ,                                                GP00004\nDBTRACE  LA    R0,&WA        PASS ADDRESS OF WORK AREA          GP97262\n         STM   R12,R1,DBTLOCSV  SAVE BASE AND RETURN            GP97265\n         ICM   R15,15,@DEBTRAC  SEE IF PREVIOUSLY LOADED        GP97265\n         BNZR  R15           INVOKE; RETURN VIA R14 TO CALLER   GP97265\n         AIF   ('&MODE' NE 'DC').NODRP                          GP00004\n         BASR  R12,0         MAKE LOCAL BASE                    GP97262\n         DROP  R15                                              GP97265\n         USING *,R12                                            GP97265\n         AGO   .CMDRP                                           GP00004\n.NODRP   MVC   #DEBTRAC,=CL8'DEBTROLD'                          GP00004\n         MVI   DBTFLAG,&BUGSWCH*DBTFLON+DBTFLWID                GP00004\n.CMDRP   LOAD  EPLOC=#DEBTRAC  LOAD EXTERNAL MODULE             GP97261\n         ST    R0,@DEBTRAC   SAVE FOR NEXT TIME                 GP97261\n         AIF   ('&MODE' NE 'DC').NOCLB                          GP00004\n         ST    R0,DBTLOCSV+(15-12)*4  UPDATE TARGET ADDRESS     GP97265\n.NOCLB   LM    R12,R1,DBTLOCSV  RESTORE                         GP97265\n         BR    R15           RETURN TO CALLER VIA R14           GP97262\n         AIF   ('&MODE' NE 'DC').NOPOP                          GP00004\n         POP   USING                                            GP97262\n         POP   PRINT                                            GP97262\n.NOPOP   AGO   .TESTDC                                          GP97262\n.NOLODYN MNOTE 4,'INLINE EXPANSION NOT SUPPORTED - USE MACRO DEBINLIN'\n.TESTDC  AIF   ('&MODE' NE 'DC').MEND                            95067\n         AGO   .NODRTE                                           95067\n.DATA    AIF   ('&NM' EQ '').NODLBL\n&NM      DS    0D\n.NODLBL  AIF   ('&ROUT' EQ '').NODRTE                            95067\n&BUGSWRT SETB  1                                                 95067\n.NODRTE  AIF   (&BUGFAR OR '&MODE' EQ 'M').MEND                  95230\nDBTPRESV DC    2F'0'  1/2    FOR SHORT FORMATTING                95230\n.NOSVPFX ANOP  ,                                                 95230\n&WA      DC    16F'0' 2/2    DEBUG SAVE AREA                    GP97265\nDBTFLAG  DC    AL1(&BUGSWCH*DBTFLON+DBTFLWID)  DEBUG FLAG       GP98222\nDBTFLTCB EQU   128             INCLUDE TCB ADDRESS IN MESSAGE\nDBTFLWTO EQU   64              USE WTO INSTEAD OF PRT            95240\nDBTFLWID EQU   32              USE WIDE FORMAT WHEN PRINTING    GP98222\nDBTFLPRO EQU   16              PRODUCTION MODE / NEED DD TO PRT GP99113\nDBTFLEND EQU   2               THIS IS A TERMINATION CALL       GP98222\nDBTFLON  EQU   1               DEBUG BIT\nDBTFLAG2 DC    AL1(0)        ..RESERVED..                       GP99062\nDBTFLAG3 DC    AL1(0)        ..RESERVED..                       GP99062\nDBTFLAG4 DC    AL1(0)        ..RESERVED..                       GP99062\nDBTCNT1  DC    A(&COUNT(1)+0)  COUNT OPTION                      95228\nDBTCNT2  DC    A(&COUNT(2)+0)  COUNT OPTION                      95228\nDBTCNT3  DC    A(&COUNT(3)+0)  COUNT OPTION                      95228\n         MAPCMPRT PFX=DBT,DCB=&DCB,PRTMODE=&PRTMODE,DEV=&DEV    GP99113\n         AIF   (NOT &BUGDYN).NODYNS                             GP97261\n.BUGDYN  WXTRN DEBTRACE      SUPPORT LINKED-IN VERSION          GP97262\n@DEBTRAC DC    A(DEBTRACE)   ADDRESS OF LOADED DEBTRACE         GP97261\n#DEBTRAC DC    CL8'DEBTROLD'  LOAD MODULE NAME                  GP97261\nDBTLOCSV DC    6A(0)         SAVE AREA                          GP97265\n         AGO   .MEND                                            GP97262\n.NODYNS  AIF   (&BUGFAR OR '&MODE' EQ 'M').MEND                  95228\nDBTLOCSV DC    4F'0'         BASE SAVE\nDBTWTO   DC    Y(56,0)       VCON                                93357\nDBTWTOM  DC    C'MSG666 '    DEBUG HEADER                        93357\nDBTWTON  DC    CL8' ',C' '   USER'S LABEL\nDBTWTOT  DC    CL36' '       USER'S HEX OR EBCDIC TEXT\n         AIF   ('&TCB' NE 'YES' AND NOT &BUGTCB).NOTCB           94011\n         DC    C' '          EXTRA FOR UNPACK                    94011\nDBTWTCB  DC    CL8' '        CURRENT TCB ADDRESS                 94011\n.NOTCB   ANOP  ,                                                 94011\nDBTWTOC  DC    C' '          EXTRA FOR UNPACK\n         AIF   (NOT &BUGSWRT).MEND  NO ROUTING CODE              95067\n         DC    XL3'0'        EXTRA FOR DESCRIPTOR/ROUTING CODES  95067\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBTRACY": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x12\\x01\\x03\\x01\\x9f\\x01\\x03\\x12\\x8f H\\x00Z\\x00Z\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-01-19T00:00:00", "modifydate": "2003-05-08T20:48:12", "lines": 90, "newlines": 90, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO ,             EXPAND PARSER\n&NM      DEBTRACY &VA,&VL,&VT,&VKO,&VKL,&DT,&LABEL=N,&VL80=0\n.*  DEBTRACY IS USED AS AN INNER MACRO TO EXPAND ONE OPERAND, OR TO\n.*    CHANGE THE DEFAULT VARIABLE TYPE, FOR THE DBT MACRO\n         GBLA  &ZZZDBA#,&ZZZDBAN\n         GBLB  &ZZZDBTF      (FIRST TIME FLAG)\n         GBLB  &ZZZ80FG      SET WHEN END OF LIST GENERATED\n         GBLC  &ZZZDBTV,&ZZZDBTT,&ZZZDBAT(40),&ZZZDBAI(40),&ZZZDBAL(40)\n         LCLA  &LN,&I,&EN,&EM,&EO\n         LCLC  &L,&ET,&EL,&EK,&DFT,&EKO,&EKL\n&EK      SETC  '&VA'\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n&DFT     SETC  '&DT'         SET TYPE OVERRIDE\n&EKO     SETC  '0'           DEFAULT CHAIN POINTER OFFSET\n&EKL     SETC  '4'           DEFAULT CHAIN POINTER LENGTH\n.*  SEE WHETHER THE CURRENT VARIABLE NAME IS ONE OR TWO CHARACTERS,\n.*  HAS NO LENGTH OR TYPE SPECIFICATIONS, AND APPEARS IN TYPE TABLE.\n.*  IF SO, JUST RESET GLOBAL TYPE TO SPECIFIED ONE.\n         AIF   (&EM GT 2).NOLOOPT\n         AIF   (&EM LE 0).MEND\n         AIF   ('&VL' NE '' OR  '&VT' NE '').NOLOOPT\n.LOOPTYP AIF   (&I GE &ZZZDBA#).NOLOOPT  NOT A REDEFINITION\n&I       SETA  &I+1\n         AIF   ('&VA' NE '&ZZZDBAT(&I)').LOOPTYP                GP02365\n&ZZZDBTT SETC  '&ZZZDBAI(&I)'  SET NEW DEFAULT\n         MEXIT ,\n.*  FIRST CHECK THE DEFAULT TYPE - IF NULL, ASSIGN THE GLOBAL ONE.\n.*  IF GLOBAL IS NULL, SET GLOBAL AND LOCAL TO HEX (03)\n.NOLOOPT AIF   ('&DFT' NE '').NONUTYP\n&DFT     SETC  '&ZZZDBTT'    COPY GLOBAL TYPE\n         AIF   ('&DFT' NE '').NONUTYP\n&DFT     SETC  '10'          DEFAULT IS HEX\n&ZZZDBTT SETC  '10'          DEFAULT IS HEX\n.NONUTYP AIF   ('&VKO' EQ '').NONVKO\n&EKO     SETC  '&VKO'\n.NONVKO  AIF   ('&VKL' EQ '').NONVKL\n&EKL     SETC  '&VKL'\n.NONVKL  ANOP  ,\n&L       SETC  'L'''\n&EL      SETC  '&VL'\n&EO      SETA  0             PRESET FOR NORMAL ADDRESSING MODE\n&ET      SETC  '&DFT'        PRESET FOR DEFAULT\n         AIF   ('&EK'(1,1) NE '/' AND '&EK'(1,1) NE '*').NOTIND GP03128\n&EO      SETA  &EO+1         REQUEST INDIRECT ADDRESSING\n&EK      SETC  '&EK'(2,&EM-1)  DELETE LEADING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTIND  AIF   (&EM LE 0).MEND\n         AIF   ('&EK'(&EM,1) NE '%').NOTA24\n&EO      SETA  &EO+2         REQUEST FORCED 24-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA24  AIF   (&EM LE 0).MEND\n         AIF   ('&EK'(&EM,1) NE '?').NOTA31\n&EO      SETA  &EO+4         REQUEST FORCED 31-BIT ADDRESSING\n&EK      SETC  '&EK'(1,&EM-1)  DELETE TRAILING CONTROL BYTE\n&EM      SETA  K'&EK         LENGTH OF FIRST OPERAND\n.NOTA31  AIF   (&EM LE 0).MEND\n&I       SETA  0\n.TESTTYP AIF   (&I GE &ZZZDBAN).NOTYPED  NOT A VALID ENTRY\n&I       SETA  &I+1\n         AIF   ('&VT' NE '&ZZZDBAT(&I)').TESTTYP\n&ET      SETC  '&ZZZDBAI(&I)'   SET NEW TYPE\n         AGO   .EXPAND\n.NOTYPED AIF   ('&VT' NE '').NOTYPO\n&ET      SETC  '&DFT'           ESLE SET DEFAULT\n         AGO   .EXPAND\n.NOTYPO  MNOTE 4,'DEBTRACY: VARIABLE/REQUEST TYPE INVALID: &VT'\n.*  NOW WE HAVE THE VARIABLE NAME AND THE TYPE. CHECK LENGTH\n.EXPAND  AIF   ('&EL' NE '').HLEN\n&EL      SETC  '&L'.'&EK'\n.HLEN    AIF   ('&LABEL' EQ 'N').NOLABEL\n         DC    X'0100',CL8'&VA '  ITEM LABEL\n.NOLABEL ANOP  ,\n&ZZZ80FG SETB  (&ZZZ80FG OR &VL80)\n         AIF   ('&ZZZDBAL(&I)' EQ '6' OR '&ZZZDBAL(&I)' EQ '').LEN6\n         AIF   ('&ZZZDBAL(&I)' EQ '2').LEN2\n         AIF   ('&ZZZDBAL(&I)' EQ '4').LEN4\n         AIF   ('&ZZZDBAL(&I)' EQ '8').LEN8\n         MNOTE 'DEBTRACY: INVALID ENTRY PASSED: &VA,&VL,&VT,&VKO,&VKL'\n.LEN8    AIF   ('&ZZZDBAI(&I)' NE '16').LEN811   NOT FLAG\n.LEN820  DC    AL1(X'80'*&VL80+&ET,&EO),SL2(&EK,&EL,&EKO)\n         MEXIT ,\n.LEN811  DC    AL1(X'80'*&VL80+&ET,&EO),SL2(&EK,&EL),AL1(&EKO,&EKL)\n         MEXIT ,\n.LEN6    DC    AL1(X'80'*&VL80+&ET,&EO),SL2(&EK,&EL)            GP02365\n         MEXIT ,\n.LEN4    DC    AL1(X'80'*&VL80+&ET,&EO),SL2(&EK)\n         MEXIT ,\n.LEN2    DC    AL1(X'80'*&VL80+&ET,&EO)\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELETEST": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00(\\x01\\x04\\x11\\x8f\\x01\\x04\\x11\\x8f\\x17\\x16\\x00 \\x00 \\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2004-04-27T00:00:00", "modifydate": "2004-04-27T17:16:28", "lines": 32, "newlines": 32, "modlines": 3, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DELETEST &EP=,&EPLOC=,&LEN=4                   ADDED ON 81194\n.*--------------------------------------------------------------------*\n.*   DELETE A MODULE IF IT HAS PREVIOUSLY BEEN LOADED.                *\n.*   NOTE:  ASSUMES VARIABLE WITH MODULE ADDRESS (OR 0) TO HAVE THE   *\n.*     SAME NAME AS THE MODULE                                        *\n.*--------------------------------------------------------------------*\n         LCLC  &MOD\n         LCLA  &NDX,&I,&J                                       GP04118\n&NDX     SETA  &SYSNDX\n&MOD     SETC  '&EP'\n         AIF   (T'&EPLOC EQ 'O').EP\n&MOD     SETC  '&EPLOC'\n&J       SETA  K'&EPLOC                                         GP04118\n         AIF   (&J LT 5).EP                                     GP04118\n         AIF   ('&EPLOC'(1,1) NE '=').EP                        GP04118\n&I       SETA  4             SKIP =C'                           GP04118\n         AIF   ('&EPLOC'(1,3) EQ '=C''').LOCLIT                 GP04118\n&I       SETA  6             SKIP =C'                           GP04118\n         AIF   ('&EPLOC'(1,5) NE '=CL8''').EP  LET IT FAIL      GP04118\n.LOCLIT  ANOP  ,                                                GP04118\n&MOD     SETC  '&EPLOC'(&I,&J-&I)                               GP04118\n.EP      AIF   ('&LEN' EQ '3').LOWAD                             81284\n&NM      ICM   R0,15,&MOD\n         BNP   ZZZZ&NDX\n         AGO   .COMDEL                                           81284\n.LOWAD   ANOP  ,                                                 81284\n&NM      ICM   R0,7,1+&MOD\n         BZ    ZZZZ&NDX\n.COMDEL  DELETE EP=&EP,EPLOC=&EPLOC\nZZZZ&NDX XC    &MOD.(4),&MOD\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DIAG": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x10\\x04\\x1f\\x01\\x10\\x04\\x1f\\x00V\\x00\\x05\\x00&\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2010-02-10T00:00:00", "modifydate": "2010-02-10T00:56:00", "lines": 5, "newlines": 38, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      DIAG  &R1,&R3,&I2                                 NEW  GP10041\n.*  ADDED FOR HERCULES SUPPORT\n&NM      DC    0H'0',AL.4(8,3,&R1,&R3),AL2(&I2)\n.MEXIT   MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMP": {"ttr": 4364, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x01\\x02\\x00\\x1b\\x00\\x16\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T01:02:00", "lines": 27, "newlines": 22, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&L       DUMP  &TYPE\n.**********************************************************************\n.*                                                                   **\n.*  EXHIBIT MACRO TO CONTROL STORAGE FORMATTING                      **\n.*                                                                   **\n.**********************************************************************\n         LCLA  &DISP\n         AIF   ('&TYPE' EQ 'EBCDIC').EBC\n         AIF   ('&TYPE' EQ 'HEX').HEX\n         AIF   ('&TYPE' EQ 'LABEL').LAB\n         AIF   ('&TYPE' EQ 'VAR').VAR\n&L       MOTE  'TYPE MUST BE EBCDIC, HEX, LABEL, OR VAR'\n         MEXIT\n.VAR     ANOP\n&DISP    SETA  4\n.LAB     ANOP\n&DISP    SETA  &DISP+4\n.HEX     ANOP\n&DISP    SETA  &DISP+4\n.EBC     ANOP\n.CALLIT  ANOP\n&L       LA    R1,DUMPLIST\n         L     R15,DUMP\n         L     R2,&DISP.(R15)\n         BALS  R14,0(R2,R15)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNSPACE": {"ttr": 4366, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    DYNSPACE &TYPE\n.*\n.*    THIS IS AN INNER MACRO TO ALLOC/FREE.\n.*    IT IS CALLED TO   A) NAME AN AREA FOR THE PARMLIST\n.*                      B) LOG THE VARIOUS AMOUNTS NEEDED BY\n.*                         EACH, REMEMBERING THE LARGEST.\n.*                      C) GENERATING A DS FOR THE LARGEST AMOUNT.\n.*    THE FIRST TWO FUNCTIONS ARE INVOKED BY ALLOC/FREE MACROS ONLY,\n.*    AND THE THIRD IS USED BY THE PROGRAMMER, EITHER EXPLICITLY,\n.*    OR BY BEGINWKA, IF THE LATTER IS USED.\n.*\n.*     TO INVOKE THE NAMING FUNCTION, ALLOC/FREE GENERATE\n.*     NAME DYNSPACE\n.*     NOTE. THE NAMING OPERATION ONLY GENERATES A NAME ON THE\n.*     FIRST CALL IN THE ASSEMBLY. THE NAME REMAINS THE SAME UNTIL\n.*     DYNSPACE IS CALLED TO EXPAND INTO A DS.\n.*\n.*     THE SECOND FUNCTION IS INVOKED BY THE MACRO CALL\n.*          DYNSPACE ADD\n.*     (NO NAME FIELD AND ONE OPERAND)\n.*     IT USES THE GLOBAL VARIABLES &DTUO AND &DTUPO TO CALCULATE\n.*     THE SPACE FOR THIS REQUEST, AND UPDATES &DYNSPQ ONLY IF THE\n.*     CURRENT REQUEST IS FOR A GREATER AMOUNT\n.*\n.*     THE THIRD FUNCTION IS INVOKED BY CALLING DYNSPACE WITH NO\n.*     NAME OR OPERAND FIELD.\n.*     THIS EXPANDS INTO A DEFINE STORAGE, CLEARS THE DYNSPACE NAME\n.*     GLOBAL SETC, AND THE &DYNSPQ GLOBAL SETA.\n.*     THUS, THE MACRO IS SERIALLY REUSABLE IN ALL FUNCTIONS.\n.*\n         GBLA  &DYNSPQ,&DTUO,&DTUPO,&RCPDYN\n         GBLC  &DYNP,&DYNSP\n         LCLA  &I\n         AIF   ('&NAME' NE '').NAME\n         AIF   ('&TYPE' EQ '').ALLOC\n.*   THE ACCUMULATE FUNCTION IS REQUIRED\n&I       SETA  24+&DTUO+&DTUPO         GET AMOUNT FOR THIS REQUEST\n         AIF   (&I LE &DYNSPQ).EXIT    IF CURRENT < MAX, EXIT\n&DYNSPQ  SETA  &I                      ELSE UPDATE CURRENT MAXIMUM\n         MEXIT\n.NAME    AIF   ('&DYNSP' NE '').EXIT   IF NAME ALREADY EXISTS, EXIT\n&DYNSP   SETC  'DYNSP&RCPDYN'           ELSE GENERATE A NAME\n.EXIT    MEXIT\n.ALLOC   AIF   ('&DYNSP' EQ '').EXIT\n*\n**     RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA\n*\n&DYNSP   DS    0F,CL&DYNSPQ            RESERVE SPACE\n&DYNSP   SETC  ''                      SET MAX QUANTITY TO 0\n&DYNSPQ  SETA 0\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EBCDIG": {"ttr": 4368, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x00\\x04\\x1f\\x01\\x06&?\\x00\\x00\\x00$\\x00\\x18\\x00\\x0f\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-02-10T00:00:00", "modifydate": "2006-09-20T00:00:00", "lines": 36, "newlines": 24, "modlines": 15, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      EBCDIG &VAL,&LEN\n.**********************************************************************\n.*\n.*   THIS MACRO CONVERTS AN ABSOLUTE NUMBER, VARIABLE, OR EXPRESSION\n.*   INTO AN EBCDIC CONSTANT OF LENGTH &LEN (NO WARNING ON OVERFLOW).\n.*   IT'S USEFUL FOR GENERATING CONTROL CARDS, ESPECIALLY FOR SORT.\n.*\n.*   FOR EXAMPLE:\n.*     X EQU 15\n.*       EBCDIG X,3   EXPANDS:\n.*       DC    AL1(240+0,240+1,240+5)  (MORE OR LESS)  C'015'\n.*\n.**********************************************************************\n         LCLA  &I,&J,&K\n&I       SETA  9\n&J       SETA  1000000000\n&K       SETA  100000000\n         AIF   (T'&VAL EQ 'O').BADVAL\n         AIF   (T'&LEN NE 'N').BADLEN\n         AIF   ('&NM' EQ '').NODC\n&NM      DC    0CL(&LEN)' '\n.NODC    AIF   (&LEN GT 9).BADLEN\n         AIF   (&LEN GT 0).OKLEN\n.BADLEN  MNOTE 8,'LENGTH (OPERAND 2) IS UNACCEPTABLE: &LEN '\n         MEXIT ,\n.BADVAL  MNOTE 8,'VALUE (OPERAND 1) IS MISSING'\n         MEXIT ,\n.OKLEN   AIF   (&LEN LT &I).NOTLEN\n         DC    AL1(240+((&VAL)/&K-((&VAL)/&J)*10))\n.NOTLEN  AIF   (&I EQ 1).MEND\n&I       SETA  &I-1\n&J       SETA  &K\n&K       SETA  &K/10\n         AGO   .OKLEN\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EBCHEX": {"ttr": 4370, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x00\\x97'/\\x01\\x06&?\\x00\\x02\\x00\\x1e\\x00\\x18\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-09-29T00:00:00", "modifydate": "2006-09-20T00:02:00", "lines": 30, "newlines": 24, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      EBCHEX &VAL,&LEN                                       GP97272\n.**********************************************************************\n.*                                                                   **\n.*       THIS MACRO CONVERTS A NUMERIC VARIABLE (E.G. L') INTO AN\n.*       EBCDIC CONSTANT OF LENGTH &LEN IN HEXADECIMAL FORMAT\n.*                                                                   **\n.**********************************************************************\n         LCLA  &I,&J,&K\n&I       SETA  8\n&K       SETA  268435456\n         AIF   (T'&LEN NE 'N').BADLEN\n         AIF   ('&NM' EQ '').NODC\n&NM      DC    0CL(&LEN)' '\n.NODC    AIF   (&LEN GT 8).BADLEN\n         AIF   (&LEN GT 0).OKLEN\n.BADLEN  MNOTE 8,'LENGTH (OPERAND 2) IS UNACCEPTABLE: &LEN '\n         MEXIT ,\n.OKLEN   AIF   (&LEN LT &I).NOTLEN\n         AIF   (&I LT 8).LONGFM\n         DC    AL1(240+((&VAL)/&K)-((C'0'-C'A'+10)*(((&VAL)/&K)/10)))\n         AGO   .NOTLEN\n.LONGFM  DC    AL1(240+(((&VAL)/&K)-((&VAL)/&J)*16)-((C'0'-C'A'+10)*(((*\n               (&VAL)/&K)-((&VAL)/&J)*16)/10)))\n.NOTLEN  AIF   (&I EQ 1).MEND\n&I       SETA  &I-1\n&J       SETA  &K\n&K       SETA  &K/16\n         AGO   .OKLEN\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDM": {"ttr": 4372, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&L       ENDM  &DUMMY,&DISP=FREEMAIN,&PFX=SAVE,&NEXT=,                 *\n               &RC=,&RC0=,&RC1=,&COPYRET=,&RETADDR=(R14)         83087\n.*\n.*             COPYRIGHT 1978 BY SHMUEL (SEYMOUR J.) METZ\n.*                        ALL RIGHTS RESERVED.\n.*\n.*             THIS MACRO IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION,\n.*             AS DESCRIBED IN MEMBER $$RIGHTS.\n.*\n         LCLC  &LB                 LABEL                         81208\n         LCLC  &SB                 SAVE AREA BASE NAME           81208\n         LCLC  &SV                 SAVE AREA PREFIX              81208\n&LB      SETC  '&L'\n&SV      SETC  '&PFX'\n&SB      SETC  '&SV'.'SPLN'                                      81208\n         AIF   ('&DISP' EQ 'FREEMAIN' OR '&DISP' EQ 'RETAIN'           *\n               OR '&DISP' EQ 'POP' OR '&DISP' EQ 'STATIC'              *\n               OR '&DISP' EQ 'TEST').DISPOK                      81347\n         MNOTE 4,'UNSUPPORTED VALUE DISP=&DISP'                  81347\n.DISPOK  AIF   ('&DISP' EQ 'RETAIN').RETAIN                      81347\n&L       L     R0,&SV.SPLN-&SB.(,R13)                            81208\n         LR    R1,R13\n         L     R13,&SV.13-&SB.(,R13)                             81208\n&LB      SETC  ''\n.RETAIN  AIF   (T'&COPYRET EQ 'O').DONCOPY                       81154\n         AIF   (N'&COPYRET LT 2).ONECOPY                         81154\n         AIF   (N'&COPYRET EQ 2).TWOCOPY                         81154\n         MNOTE 4,' COPYRET PARAMETER INVALID; USE (ADDR-EXPR,LENGTH)'\n.TWOCOPY ANOP  ,                                                 81154\n&LB      MVC   &SV.15-&SB.(&COPYRET(2),R13),&COPYRET(1)          81208\n         AGO   .TSTCOPY                                          81154\n.ONECOPY ANOP  ,                                                 81154\n&LB      MVC   &SV.15-&SB.(4,R13),&COPYRET(1)                    81208\n.TSTCOPY ANOP  ,                                                 81154\n&LB      SETC  ''                                                81154\n.DONCOPY AIF   (T'&NEXT NE 'O').XCTL                             81154\n         AIF   (T'&RC EQ 'O').T1RC0\n         AIF   ('&RC'(1,1) EQ '(').SVRC\n         AIF   (T'&RC EQ 'N').T1RC0\n         MNOTE 12,'INVALID RETURN CODE &RC'\n         MEXIT\n.SVRC    ANOP  ,\n&LB      ST    &RC(1),&SV.15-&SB.(,R13)                          81208\n&LB      SETC  ''\n.T1RC0   AIF   (T'&RC0 EQ 'O').T1RC1\n         AIF   ('&RC0' EQ '(0)' OR '&RC0' EQ '(R0)').BUMRC0\n         AIF   ('&RC0'(1,1) EQ '(').SVRC0\n         AIF   (T'&RC0 EQ 'N').EXIT\n.BUMRC0  MNOTE 12,'INVALID SECONDARY RETURN CODE &RC0'\n         MEXIT\n.SVRC0   ANOP  ,\n&LB      ST    &RC0(1),&SV.0-&SB.(,R13)                          81208\n&LB      SETC  ''\n.T1RC1   AIF   (T'&RC1 EQ 'O').EXIT\n         AIF   ('&RC1' EQ '(1)' OR '&RC1' EQ '(R1)').BUMRC1\n         AIF   ('&RC1'(1,1) EQ '(').SVRC1\n         AIF   (T'&RC1 EQ 'N').EXIT\n.BUMRC1  MNOTE 12,'INVALID SECONDARY RETURN CODE &RC1'\n         MEXIT\n.SVRC1   ANOP  ,\n&LB      ST    &RC1(1),&SV.1-&SB.(,R13)                          81208\n&LB      SETC  ''\n         AGO   .EXIT\n.XCTL    AIF   ('&DISP' EQ 'FREEMAIN').XCTL1                     81347\n         AIF   ('&DISP' NE 'TEST').XCTL2                         81347\n&LB      ICM   R0,7,1+&SV.SPLN-&SB.(R1) ZERO LENGTH ?            81347\n&LB      SETC  ''                                                81347\n         BZ    *+6           SKIP FREE IF SO                     81347\n.XCTL1   ANOP  ,                                                 81347\n.*       FREEMAIN R,LV=(0),A=(1)                                 81347\n&LB      SVC   10                                                81347\n&LB      SETC  ''\n.XCTL2   ANOP  ,\n&LB      LA    R15,X@&SYSNDX\n         LM    R0,R12,&SV.0-&SB.(R13)                            81208\n         MVI   &SV.14-&SB.(R13),X'FF'   FLAG AS LAST SAVE AREA   81208\n         XCTL  SF=(E,(15))\nX@&SYSNDX XCTL EP=&NEXT,SF=L\n         MEXIT\n.EXIT    AIF   ('&DISP' EQ 'FREEMAIN').EXIT1                     81347\n         AIF   ('&DISP' NE 'TEST').NOFM                          81347\n&LB      ICM   R0,7,1+&SV.SPLN-&SB.(R1) ZERO LENGTH ?            81347\n&LB      SETC  ''                                                81347\n         BZ    *+6           SKIP FREE IF SO                     81347\n.EXIT1   ANOP  ,                                                 81347\n.*       FREEMAIN R,LV=(0),A=(1)                                 81347\n&LB      SVC   10                                                81347\n&LB      SETC  ''\n.NOFM    ANOP  ,\n&LB      LM    R14,R12,&SV.14-&SB.(R13)                          81208\n         MVI   &SV.14-&SB.(R13),X'FF'   FLAG AS LAST SAVE AREA   81208\n         AIF   (T'&RC NE 'N').T2RC0\n         AIF   ('&RC'(1,1) EQ '(').T2RC0\n         AIF   ('&RC' EQ '0').EFES\n         LA    R15,&RC\n         AGO   .T2RC0\n.EFES    XR    R15,R15\n.T2RC0   AIF   (T'&RC0 NE 'N').T2RC1\n         AIF   ('&RC0' EQ '0').EFES0\n         LA    R0,&RC0\n         AGO   .T2RC1\n.EFES0   XR    R0,R0\n.T2RC1   AIF   (T'&RC1 NE 'N').BR\n         AIF   ('&RC1' EQ '0').EFES1\n         LA    R1,&RC1\n         AGO   .BR                                               83087\n.EFES1   XR    R1,R1\n.BR      AIF   (T'&RETADDR EQ 'O').END                           83087\n         AIF   (K'&RETADDR LT 3).BRL                             83087\n         AIF   ('&RETADDR'(1,1) EQ '(' AND '&RETADDR'(2,1) NE '(').BRR\n.BRL     B     &RETADDR                                          83087\n         AGO   .END                                              83087\n.BRR     BR    &RETADDR(1)                                       83087\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESPCVT": {"ttr": 4611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x11!O\\x01\\x11!\\x9f\\x151\\x00e\\x00\\x90\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2011-08-02T00:00:00", "modifydate": "2011-08-07T15:31:00", "lines": 101, "newlines": 144, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      ESPCVT &SECT=D,&OPT=\n         GBLC  &HOOKCVT                                         GP11214\n         LCLC  &NAME,&USECT\n         LCLB  &D                                               GP11214\n&USECT   SETC  '&SYSECT'     SAVE USER'S CSECT NAME             GP11214\n&D       SETB  ('&OPT' EQ 'LIST')                               GP11214\n&NAME    SETC  '&NM'\n.*\n.*   THIS MACRO MAPS THE 'ESP' CVT EXTENSION                    GP11214\n.*   THAT IS POINTED TO BY 'CVTJOB'. BUILT BY 'ESPINIT'         GP11214\n&HOOKCVT SETC  'CVTLINK+4'   POINTER TO THIS TABLE              GP11214\n.*                                                              GP11214\n.*   WHEN OPT=LIST IS SPECIFIED, THIS MACRO ALSO EXPANDS A LIST OF DC\n.*       CONSTANTS FOR LOADING AND SETTING THE CONTENTS OF ADDRESSES.\n.*\n         AIF   ('&SECT' EQ 'NO').NOSECT\n         AIF   ('&NM' NE '').OK\n         MNOTE 4,'CSECT/DSECT NAME MISSING, ''ESPCVT'' ASSUMED.'\n&NAME    SETC  'ESPCVT'\n.OK      AIF   ('&SECT' NE 'C').DSECT\n&NAME    CSECT ,\n         AGO   .BLNM\n.DSECT   ANOP\n&NAME    DSECT ,\n         AGO   .BLNM\n.NOSECT  AIF   ('&NM' EQ '').BLNM\n&NAME    DS    0F .          START OF USER CVT MAPPING\n.BLNM    ANOP\n.*\nUCFLAGS  DC    X'1' .        FLAG BYTE\nUCIPL    EQU   X'80' .       IPL AUTO STARTS PENDING\nUCRJE    EQU   X'40' .       RJE RUN AT LEAST ONCE SINCE LAST IPL\nUCAUTO   EQU   X'20' .       AT LEAST ONE 'AUTO' COMMAND ACTIVE\nUCAPEN   EQU   X'10' .       AT LEAST ONE AUTO START PENDING\nUCASCRCH EQU   X'04'         ON IF IPL TIME SYSDA SCRATCHED      91049\nUCACCBAD EQU   X'02'           A$GINIT OPEN FAILED               84317\nUCCONLT  EQU   1 .           ON IF LOTS OF MESSAGES WITH CONID\n.*\n         SPACE\nUCCONID  DC    X'1' .        NON-ZERO IF SPECIAL MESSAGES ARE TO BE WTO\n*        CONTENTS IS UCMID OF DESTINATION CONSOLE\n.*\n         SPACE\nUCIPLCNT DC    X'0' .        NO. OF IPL AUTO STARTS STILL PENDING\nUCSMFNM  DC    C'H' .   BYTE TO COMPLETE SMF PARM NAME 'SMFDEFL_'\n*        U IS STANDARD SMF; T GIVES OPI; N CANCELS SMF SUPPORT\n.*       H (DEFAULT) PROVIDES HASP SUPPORT\nUCAUTCHN DC    A(0)          AUTORDR COMMAND CHAIN              GP11214\nUCAUTCNT DC    F'0'          AUTORDR ACTIVE COUNT               GP11214\nUCRSV01  DC    A(0)                                              92292\nUCRSV02  DC    A(0)                                              92292\n.*\n         SPACE\nUCIPLTIM DC    F'0' .        IPL OR LAST MODIFIED TIME (BIN)\nUCIPLDAT DC    F'0' .        IPL OR LAST MODIFIED DATE\nUCRSV03  DC    XL2'0'                                            92292\nUCRSV04  DC    XL2'0'                                            92292\nUCRSV05  DC    3A(0)                                             92292\nUCA$ANCR DS    0D      1/3   ACCOUNTING ANCHOR WORDS (DB FOR CDS)\nUCA$USCT DC    F'0'    2/3   USE COUNT                           83142\nUCA$GDA  DC    A(0)    3/3   GLOBAL ACCOUNTING DATA AREA         83142\nUCLINDX  DC    A(0)          => (BXLE) INDEX TABLE               92292\nUCLUADS  DC    A(0)          => (BXLE) UADS/ACCOUNT TABLE        85182\nUCLACCT  DC    A(0)          LPA/CSA ADDRESS OF ACCOUNT TABLE    92292\nUCLVOLT  DC    A(0)          LPA ADDRESS OF LEXVOLT SUBROUTINES\nUCLSERV  DC    A(0)          LPA ADDRESS OF @SERVICE             83044\nUCLSERV2 DC    A(0)            @SRVJES2 - PRIMARY SUBSYSTEM I/F  92292\nUCLPRINT DC    A(0)          @PRINTER ROUTINE                    83044\nUCLINPUT DC    A(0)          @INPREAD ROUTINE                    83044\nUCLVOLRD DC    A(0)          @VOLREAD ROUTINE                    83044\nUCLSCRNS DC    A(0)          @SCREENS ROUTINE                    87308\nUCLFORMS DC    A(0)          @FORMATS CONVERSIONS               GP11219\nUCLPARSE DC    A(0)          @PARSER                            GP11219\n         DC    4A(0)         LPA ADDRESSES (OR 0) OF SPECIAL MODULES\nUCXSVC99 DC    A(0)          SVC 99 USER EXIT ADDRESS            83142\nUCXACTEX DC    A(0)          ACCOUNTING - EXIT ROUTINE           83142\nUCXLOGON DC    A(0)          TSO - PRE-LOGON EXIT ROUTINE        86143\nUCHARRIS DC    A(0)          HARRIS MOUNT MESSAGE POINTER        92288\n         DC    A(0)            RESERVED                          89009\nUCLVOLS  DC    A(0)          => (BXLE) VOLUME/SERIAL TABLE       89009\nUCLOUD   DC    A(0)          CHAIN OF LOCAL ONLINE USER DATA     87277\nUCLWYL   DC    A(0)          LPA ADDRESS OF WYLBUR VTOC TABLE    85200\n.*\nESPGMLEN EQU   *-&NAME         GETMAIN LENGTH                    83044\n         AIF   (NOT &D).MEND                                    GP11214\n&USECT   CSECT ,             RESTORE USER'S CSECT (IT HAD BETTER BE)\nPATULIST DC    A(UCLVOLT-&NAME),CL8'LEXVOLT'  RESIDENT SUBROUTINES\nPATULENG EQU   *-PATULIST,4,C'A'  LENGTH OF ONE ENTRY           GP11214\n         DC    A(UCLSERV-&NAME),CL8'@SERVICE'  COMMON SERVICES  GP11214\n         DC    A(UCLSERV2-&NAME),CL8'@SRVJES2'  SUBSYSTEM SERVICES\n         DC    A(UCLPRINT-&NAME),CL8'@PRINTER'  PRINTING        GP11214\n         DC    A(UCLINPUT-&NAME),CL8'@INPREAD'  READING         GP11214\n         DC    A(UCLVOLRD-&NAME),CL8'@VOLREAD'  VTOC/DSCB INTERFACE\n         DC    A(UCLSCRNS-&NAME),CL8'@SCREENS'  3270 SCREEN HANDLING\n         DC    A(UCLFORMS-&NAME),CL8'@FORMATS'  CONVERSION SUBROUTINES\n         DC    A(UCLPARSE-&NAME),CL8'@PARSER '  PARSING    SUBROUTINES\n         DC    A(UCXSVC99-&NAME),CL8'LEXSVC99'  ALLOCATION EXIT GP11214\n         DC    A(UCXACTEX-&NAME),CL8'TMSACTRT'  CA-1 TMS ACCOUNTING\nPATULEND DC    A(UCXLOGON-&NAME),CL8'LEXLOGON'  TSO PRE-LOGON EXIT\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESPHEAD": {"ttr": 4614, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x07\\x01\\x03#?\\x01\\x03#?\\x15)\\x00\\x90\\x00\\x91\\x00\\x17\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-08-21T00:00:00", "modifydate": "2003-08-21T15:29:07", "lines": 144, "newlines": 145, "modlines": 23, "user": "GERHARD"}, "text": "         MACRO\n&MODULE ESPHEAD &R0=,&R1=,&HEADER=,&REENT=Y,&BASE=R12,&CLEAR=YES,      *\n               &LOC=,&PATCH=,&ENTRY=,&SP=0                     GP00126\n         GBLB  &RENTFLG\n         GBLC  &CPYWRIT\n         GBLC  &VERSION\n         GBLC  &MODNAME\n         LCLC  &LABEL,&NAME\n         LCLC  &PBAS,&CBAS,&FBAS,&LBAS                          GP99357\n         LCLB  &FGPATCH,&FGENT,&FGENTB                          GP00126\n&FGPATCH SETB  (T'&PATCH EQ 'N')\n&FGENT   SETB  (T'&ENTRY NE 'O')                                GP00126\n         LCLA  &I,&J,&K                                         GP99357\n         SPACE 1\n&LABEL   SETC  'ZZM'.'&SYSNDX'    PREFIX FOR GENERATED LABELS\n&NAME    SETC  '&MODULE'\n&MODNAME SETC  '&MODULE'\n&NAME    CSECT ,\n&NAME    AMODE 31\n&NAME    RMODE 24\n         AIF   ('&HEADER' EQ 'TABLE').TABLE1\n         SPACE 1\n         USING *,R15\n         B     &LABEL                  BRANCH AROUND HEADER INFO\n.TABLE1  ANOP  ,\n         DC    AL1(&LABEL-&NAME)       LENGTH(HEADER TEXT)\n         DC    CL9'&NAME'              EYE CATCHER - MODULE NAME\n         DC    CL9'&SYSDATE'           EYE CATCHER - ASSEMBLE DATE\n         DC    CL6'&VERSION'           ESP VERSION N.NN\n         DC    C'&CPYWRIT'             COPYRIGHT INFO\n         AIF   ('&HEADER' NE 'TABLE').NOTTAB\n&LABEL   DC    0D'0'                   DOUBLEWORD ALIGNMENT FOR TABLE\n.MEXIT   MEXIT ,                                                GP00126\n.NOTTAB  ANOP  ,\n&LABEL   DC    0H'0'                   TAG FOR BRANCH AROUND TEXT\n         AIF   ('&HEADER' EQ 'TABLE').MEXIT\n         SPACE 1\n         STM   R14,R12,12(R13)         SAVE REGISTERS\n         AIF   (NOT &FGENT).NOENT                               GP00126\n&I       SETA  0                                                GP00126\n&K       SETA  N'&ENTRY                                         GP00126\n         SR    R2,R2         FLAG MAIN ENTRY                    GP00126\n         B     BAS&MODULE-&NAME.(,R15)                          GP00126\n.ENTLOOP AIF   (&I GE &K).DONENT                                GP00126\n&I       SETA  &I+1                                             GP00126\n&PBAS    SETC  '&ENTRY(&I)'                                     GP00126\n         AIF   (NOT &FGENTB).NOENB                              GP00126\n         B     COM&MODULE-&PBAS.(,R15)                          GP00126\n&FGENTB  SETB  0                                                GP00126\n.NOENB   AIF   ('&PBAS' EQ '').ENTLOOP                          GP00126\n         ENTRY &PBAS                                            GP00126\n&PBAS    STM   R14,R12,12(R13)                                  GP00126\n         LA    R2,&I                                            GP00126\n&FGENTB  SETB  1                                                GP00126\n         AGO   .ENTLOOP                                         GP00126\n.DONENT  ANOP  ,                                                GP00126\nCOM&MODULE BASR R15,0                                           GP00126\n         LA    R0,*-&NAME                                       GP00126\n         SLR   R15,R0                                           GP00126\nBAS&MODULE DS  0H                                               GP00126\n.NOENT   ANOP  ,                                                GP00126\n.*   CODE CHANGED TO ALLOW LIST OF BASE REGISTERS: BASE=(R1,R2...)\n&K       SETA  N'&BASE                                          GP99357\n&FBAS    SETC  '&BASE(1)'                                       GP99357\n         AIF   (&K GE 1).HAVBASE                                GP99357\n&FBAS    SETC  'R12'         SET DEFAULT BASE                   GP99357\n.HAVBASE AIF   (&K LE 1).OLDBASE                                GP99357\n&PBAS    SETC  '&FBAS'                                          GP99357\n&I       SETA  1                                                GP99357\n&CBAS    SETC  '&FBAS'                                          GP99357\n         DROP  R15                                              GP99357\n         LR    &FBAS,R15     LOAD FIRST BASE                    GP99357\n         LA    &BASE(&K),2048  LOAD INCREMENT                   GP99357\n&LBAS    SETC  '&BASE(&K)'                                      GP99357\n.BASLOOP AIF   (&I GE &K).USEBASE                               GP99357\n&I       SETA  &I+1                                             GP99357\n&PBAS    SETC  '&FBAS'                                          GP99357\n&FBAS    SETC  '&BASE(&I)'                                      GP99357\n&CBAS    SETC  '&CBAS'.','.'&FBAS'                              GP99357\n         LA    &FBAS,2048(&LBAS,&PBAS)  SET NEXT BASE           GP99357\n         AGO   .BASLOOP                                         GP99357\n.USEBASE USING &NAME,&CBAS  DECLARE BASES                       GP99357\n         AGO   .COMBASE                                         GP99357\n.OLDBASE AIF   ('&FBAS' EQ '15' OR '&FBAS' EQ 'R15').COMBASE    GP99357\n         DROP  R15                                              GP99357\n         LR    &FBAS,R15               LOAD THE BASE REGISTER   GP99357\n         USING &NAME,&FBAS             TELL THE ASSEMBLER       GP99357\n.COMBASE AIF   ('&REENT' EQ 'N').NOREENT\n&RENTFLG SETB  1                       SET REENT FOR MODEXIT\n         L     R0,=A(SAVEEND-SAVE)     SAVE AREA AND ANY WORK AREA\n         STORAGE OBTAIN,LENGTH=(0),LOC=&LOC\n         AGO   .REENT\n         SPACE 1\n.NOREENT ANOP  ,\n&RENTFLG SETB  0                       SET NON REENT FOR MODEXIT\n         LA    R1,SAVE                 A(NON REENT DATA EXPANSION)\n.REENT   ANOP  ,\n         AIF   (T'&CLEAR EQ 'O').UNCLEAR                        GP00117\n         AIF   ('&CLEAR'(1,1) NE 'Y').UNCLEAR                   GP00117\n         AIF ('&BASE(1)' EQ 'R15' OR '&BASE(1)' EQ '15').UNCLEAR  99357\n         AIF ('&BASE(1)' EQ 'R14' OR '&BASE(1)' EQ '14').UNCLEAR  99357\n         AIF ('&BASE(1)' EQ 'R13' OR '&BASE(1)' EQ '13').UNCLEAR  99357\n         AIF ('&BASE(1)' EQ 'R1' OR '&BASE(1)' EQ '1').UNCLEAR  GP99357\n         AIF   ('&REENT' NE 'N').RENTCLR                        GP99357\n         L     R0,=A(SAVEEND-SAVE)     SAVE AREA AND WORK LEN   GP99357\n.RENTCLR LR    R14,R1        SAVE SAVE AREA ADDRESS             GP99357\n         LR    R1,R0         COPY THE LENGTH                    GP99357\n         LR    R0,R14        GET THE ADDRESS BACK               GP99357\n         SR    R15,R15       CLEAR FROM LENGTH                  GP99357\n         MVCL  R0,R14        CLEAR SAVE/WORK AREA               GP99357\n         ST    R13,4(,R14)   STORE FORWARD POINTER              GP99357\n         ST    R14,8(,R13)   STORE BACKWARD POINTER             GP99357\n         LR    R13,R14       A(NEW SAVEAREA)                    GP99357\n         USING SAVE,R13                                         GP99357\n         AIF   (K'&R0 EQ 0 AND K'&R1 EQ 0).CMCLEAR              GP99357\n         L     R14,4(,R13)   RESTORE OLD SAVE AREA FOR RELOAD   GP99357\n         AGO   .CMCLEAR                                         GP99357\n.UNCLEAR LR    R14,R13                 SAVE BACKWARD SAVEAREA POINTER\n         LR    R13,R1                  A(NEW SAVEAREA)\n         USING SAVE,R13\n         XC    ESPSAVE(ESPSAVEL),ESPSAVE    CLEAR THE NEW SAVE AREA\n         ST    R13,8(,R14)             STORE FORWARD POINTER\n         ST    R14,4(,R13)             STORE BACKWARD POINTER\n.CMCLEAR AIF   (NOT &FGENT).NOEL                                GP00126\n         LR    R15,R2        RETURN ENTRY COUNTER\n         L     R2,28(,R14)   RESTORE USER'S R2                  GP00126\n.NOEL    AIF   (('&R0' NE '0' AND '&R0' NE 'R0') OR                    *\n               ('&R1' NE '1' AND '&R1' NE 'R1')).CMREST         GP99357\n         LM    &R0,&R1,20(R14)         RESTORE R0 AND R1 FROM SAVE\n         AGO   .NOREST1                                         GP99357\n.CMREST  AIF   (K'&R0 EQ 0).NOREST0\n         L     &R0,20(,R14)            RESTORE REG 0 FROM SAVEAREA\n.NOREST0 ANOP  ,\n         AIF   (K'&R1 EQ 0).NOREST1\n         L     &R1,24(,R14)            RESTORE REG 1 FROM SAVEAREA\n.NOREST1 ANOP  ,\n.*\n         USING $ESPCVT,R11             $ESPCVT DSECT SETUP\n         USING $TSB,R10                $TSB DSECT SETUP\n         AIF   (NOT &FGPATCH).MEND                              GP00126\n         B     BEG&MODULE                                       GP00126\nESPPATCH DC    &PATCH.S(*)                                      GP00126\nBEG&MODULE DS  0H                                               GP00126\n.MEND    MEND  ,                                                GP00126\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESPIE": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x04\\x00\\x00\\x01\\x043\\x8f\\x01\\x08\\x15\\x0f\\x19Q\\x00\\x1e\\x00\\x16\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.04", "flags": 0, "createdate": "2004-12-03T00:00:00", "modifydate": "2008-05-29T19:51:00", "lines": 30, "newlines": 22, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      ESPIE &FUN,&OP1,&OP2,&MF=I,&PARAM=IGNORED\n.*   MVS 3.8 REPLACEMENT FOR ESPIE, TO RUN EXISTING CODE\n.*   UNDER HERCULES\n.*\n         AIF   ('&MF(1)' EQ 'L').LISTER\n         AIF   ('&FUN' EQ 'SET').GOSET\n         AIF   ('&FUN' EQ 'RESET').GORES\n         MNOTE 8,'ESPIE: UNSUPPORTED FUNCTION &FUN'\n         MEXIT ,\n.GOSET   AIF   (N'&MF GT 1).GOSET2\n.* MNOTE 0,'SPIE  &OP1,&OP2,MF=&MF '\n&NM      SPIE  &OP1,&OP2,MF=&MF\n         MEXIT ,\n.GOSET2  ANOP  ,\n.* MNOTE 0,'SPIE  &OP1,&OP2,MF=(&MF(1),&MF(2)) '     *****DEBUG*****\n&NM      SPIE  &OP1,&OP2,MF=(&MF(1),&MF(2))\n         MEXIT ,\n.GORES   AIF   ('&OP1' EQ '0').GOCAN\n.* MNOTE 0,'SPIE  &MF(2),&OP1,MF=&MF(1) '\n&NM      SPIE  MF=(E,&OP1)\n         MEXIT ,\n.GOCAN   ANOP  ,\n.* MNOTE 0,'SPIE  0,MF=&MF(1) '\n&NM      SPIE  0,MF=&MF(1)\n         MEXIT ,\n.LISTER  ANOP  ,\n.* MNOTE 0,'SPIE &OP1,&OP2,MF=L '\n&NM      SPIE &OP1,&OP2,MF=L\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESPPDS": {"ttr": 4620, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x042_\\x01\\x042_\\x14F\\x00\\x0c\\x00\\r\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2004-11-20T00:00:00", "modifydate": "2004-11-20T14:46:00", "lines": 12, "newlines": 13, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,             ADDED FOR HERCULES SUPPORT         GP04234\n&NM      ESPPDS &PDSBLDL=,&DSECT=\n         GBLB  &MVS,&MVSXA,&MVSESA,&OS390,&Z900\n&NM      IHAPDS PDSBLDL=&PDSBLDL,DSECT=&DSECT\n         AIF   (&OS390).MEND\nPDS2BIG  EQU   X'40'\nPDS2PGMO EQU   X'04'\nPDS2NMIG EQU   X'80'\n         AIF   (&MVSXA).MEND\nPDSMAMOD EQU   X'03'\nPDSLRMOD EQU   X'10'\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FD": {"ttr": 4622, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x01\\x020\\x8f\\x01\\x10$\\x0f\\x16\\x07\\x00\\x98\\x00\\x82\\x00\\x18\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2002-11-04T00:00:00", "modifydate": "2010-08-28T16:07:00", "lines": 152, "newlines": 130, "modlines": 24, "user": "GERHARD"}, "text": "         MACRO\n&NM      FD    &STR,&EXLEN,&VALUES,&LEN=0,&TYPE=                GP03287\n.*--------------------------------------------------------------------*\n.*   TYPE= ADDED FOR FDFLAG AND FDBAR SUPPORT                         *\n.*--------------------------------------------------------------------*\n         GBLA  &FDCNTR\n         LCLA  &C,&I,&J,&K,&N\n         LCLA  &T,&E,&O7,&O9,&DATA\n         LCLC  &L,&FDCHAIN,&W\n         LCLB  &NOP,&IN,&SKPLEN,&INDAD,&CNLOCK                   92086\n         LCLB  &NL,&DEBL,&DEBR,&DEBZ,&PADL,&PADR,&RADJ,&UP\n         LCLB  &BLUE,&GREEN,&PINK,&RED,&TURQ,&WHITE,&YELLOW,&C1,&C2,&C3\n         LCLB  &UNDER,&BLINK,&REVERSE,&MDT,&MONO                 87313\n         LCLB  &INTENSE,&DETECT,&NONDISP,&NUMERIC,&SKIP,&PROTECT\n         LCLB  &DEFAULT,&PREV\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHAIN SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&STR' NE 'END' AND '&STR' NE '*END').PROCESS\n&FDCHAIN DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&I       SETA  N'&SYSLIST\n&J       SETA  1\n         AIF   ('&STR'(1,1) NE '''').PRMLOOP                    GP04048\n&SKPLEN  SETB  1\n.*--------------------------------------------------------------------*\n.*   LOOP THROUGH POSITIONAL PARAMETERS:                              *\n.*   #1 - VARIABLE NAME OR QUOTED STRING                              *\n.*   #2 - IF UNRECOGNIZED, EXPLICIT VARIABLE LENGTH                   *\n.*--------------------------------------------------------------------*\n.PRMLOOP AIF   (&J GE &I).CHECK                                 GP04048\n&J       SETA  &J+1\n&L       SETC  '&SYSLIST(&J)'\n         AIF   ('&L' EQ '').PRMLOOP                             GP04048\n&NOP     SETB  (&NOP  OR '&L' EQ 'NOP')\n&CNLOCK  SETB  (&CNLOCK OR '&L' EQ 'LOCK' OR '&L' EQ 'LOCKED')   92086\n&NL      SETB  (&NL  OR '&L' EQ 'NL' OR '&L' EQ 'NEWLINE')\n&DEBL SETB (&DEBL OR '&L' EQ 'DEBL' OR '&L' EQ 'DEB' OR '&L' EQ 'DEBZ')\n&DEBR    SETB  (&DEBR OR '&L' EQ 'DEBR' OR '&L' EQ 'DEB')\n&DEBZ    SETB  (&DEBZ OR '&L' EQ 'DEBZ')\n&PADL    SETB  (&PADL OR '&L' EQ 'PADL' OR '&L' EQ 'PAD')\n&PADR    SETB  (&PADR OR '&L' EQ 'PADR' OR '&L' EQ 'PAD')\n&RADJ    SETB  (&RADJ OR '&L' EQ 'RADJ')\n&UP    SETB  (&UP OR '&L' EQ 'UP')\n&UP      SETB  (&UP OR '&L' EQ 'UPPER')\n&BLUE    SETB  (&BLUE OR '&L' EQ 'BLUE')\n&GREEN   SETB  (&GREEN OR '&L' EQ 'GREEN')\n&PINK    SETB  (&PINK OR '&L' EQ 'PINK')\n&RED     SETB  (&RED  OR '&L' EQ 'RED')\n&TURQ    SETB  (&TURQ  OR '&L' EQ 'TURQ' OR '&L' EQ 'CYAN')      90326\n&WHITE   SETB  (&WHITE OR '&L' EQ 'WHITE')\n&YELLOW  SETB  (&YELLOW OR '&L' EQ 'YELLOW')\n&BLUE    SETB  (&BLUE OR '&L' EQ 'BL')                          GP10240\n&GREEN   SETB  (&GREEN OR '&L' EQ 'GR')                         GP10240\n&PINK    SETB  (&PINK OR '&L' EQ 'PI')                          GP10240\n&RED     SETB  (&RED  OR '&L' EQ 'RE')                          GP10240\n&TURQ    SETB  (&TURQ  OR '&L' EQ 'TU' OR '&L' EQ 'CY')         GP10240\n&WHITE   SETB  (&WHITE OR '&L' EQ 'WH')                         GP10240\n&YELLOW  SETB  (&YELLOW OR '&L' EQ 'YE')                        GP10240\n&MONO    SETB  (&MONO OR '&L' EQ 'MONO')                         87313\n&UNDER   SETB  (&UNDER OR '&L' EQ 'UL' OR '&L' EQ 'UNDER')\n&BLINK   SETB  (&BLINK OR '&L' EQ 'BLINK')\n&REVERSE SETB  (&REVERSE OR '&L' EQ 'REVERSE')\n&INTENSE SETB  (&INTENSE OR '&L' EQ 'INTENSE' OR '&L' EQ 'INT')\n&DETECT  SETB  (&DETECT OR '&L' EQ 'DETECT' OR '&L' EQ 'LP')\n&NONDISP SETB  (&NONDISP OR '&L' EQ 'NONDISP' OR '&L' EQ 'NDISP')\n&NUMERIC SETB  (&NUMERIC OR '&L' EQ 'NUMERIC' OR '&L' EQ 'NUM')\n&SKIP    SETB  (&SKIP OR '&L' EQ 'SKIP')\n&PROTECT SETB  (&PROTECT OR '&L' EQ 'PROTECT')\n&MDT     SETB  (&MDT OR '&L' EQ 'MDT')                           87313\n&DEFAULT SETB  (&DEFAULT OR '&L' EQ 'DEFAULT' OR '&L' EQ 'DFLT')\n&PREV    SETB  (&PREV OR '&L' EQ 'PREVIOUS' OR '&L' EQ 'PREV')\n&INDAD   SETB  (&INDAD OR '&L' EQ '*')                           81270\n         AIF   (K'&L GT 4).OMLEN\n&K       SETA  0\n&L       SETC  '&L'.'    '\n&L       SETC  '&L'(1,4)\n         AIF   ('&L' NE 'X   ').DT                              GP10240\n&L       SETC  'HEX '                                           GP10240\n.DT      AIF   (&K GE 35).OMLEN                                 GP07004\n&K       SETA  &K+1\n&N       SETA  (&K-1)*4+1\n&W      SETC  'CHARCON ASISADDRHEX SHEXBIT I   $I  D   $D  F   TIMETIMD*\n               DATEDATJWDAYMTH DAY MD  DMY MDY CHEXICM ICN IZ  IA  DCM *\n               DCN DZ  DA  EDATDATDCCHHTTR '(&N,4)              GP07004\n         AIF   ('&L' NE '&W').DT\n&DATA    SETA  &K\n         AIF   (&J EQ 2).OMSET\n         AGO   .PRMLOOP                                         GP04048\n.OMLEN   AIF   (&J NE 2 OR &SKPLEN).PRMLOOP                     GP04048\n AIF (&NOP OR &IN OR &NL OR &DEBL OR &DEBR OR &DEBZ OR &PADL).OMSET\n AIF (&UP OR &PADR OR &RADJ OR &BLUE OR &GREEN OR &PINK OR &RED).OMSET\n AIF (&TURQ OR &WHITE OR &YELLOW OR &UNDER OR &BLINK).OMSET\n AIF (&REVERSE OR &INTENSE OR &DETECT OR &NONDISP OR &INDAD).OMSET\n AIF (&NUMERIC OR &SKIP OR &PROTECT OR &DEFAULT OR &PREV).OMSET\n         AIF   (&MDT OR &MONO OR &CNLOCK).OMSET                  92086\n         AGO   .PRMLOOP                                         GP04048\n.OMSET   ANOP  ,             EXPLICIT LENGTH OMITTED\n&SKPLEN  SETB  1             USE L'\n         AGO   .PRMLOOP                                         GP04048\n.*--------------------------------------------------------------------*\n.*   END OF PARAMETER LOOP                                            *\n.*--------------------------------------------------------------------*\n.CHECK   AIF   ('&TYPE' EQ '').NOTYPE                           GP03287\n.*FDBAR  AIF   (T'&TYPE NE 'N').NOTYPE                          GP03287\n&DATA    SETA  &TYPE                                            GP03287\n.NOTYPE  ANOP  ,                                                GP04048\n&T       SETA  128*&IN+64*&NOP+8*&CNLOCK+&INDAD                  92086\n&E SETA 128*&NL+64*&DEBL+32*&DEBR+16*&DEBZ+8*&PADL+4*&PADR+2*&RADJ+&UP\n&O7      SETA  128*&DEFAULT+64*&PREV\n&PROTECT SETB  (&PROTECT OR &SKIP)\n&NUMERIC SETB  (&NUMERIC OR &SKIP)\n&DETECT  SETB  (&DETECT  OR &NONDISP)\n&INTENSE SETB  (&INTENSE OR &NONDISP)\n&O7      SETA  &O7+32*&PROTECT+16*&NUMERIC+8*&INTENSE+4*&DETECT+&MDT\n&C1      SETB  (&GREEN OR &TURQ OR &WHITE OR &YELLOW)\n&C2      SETB  (&RED OR &PINK OR &WHITE OR &YELLOW)\n&C3      SETB  (&BLUE OR &PINK OR &TURQ OR &WHITE)\n&O9      SETA  64*&C1+32*&C2+16*&C3+8*&MONO+4*&UNDER+2*&REVERSE+&BLINK\n         AIF   (&O7 NE 0 OR &O9 NE 0).LONG                       81138\n&T       SETA  &T+48         USE FDPRT SHORT FORM                81138\n         AIF   ('&STR'(1,1) EQ '''').CSTRPRT                     81138\n         AIF   ('&EXLEN' NE '' AND NOT &SKPLEN).PRTLEN           81138\n&L       SETC  'L'''                                             81138\n&FDCHAIN DC    AL1(ZFD&C-*,&T,&E,&DATA,&LEN,&L&STR),SL2(&STR)    81138\n         MEXIT ,                                                 81138\n.PRTLEN  AIF   (K'&EXLEN LT 2).NOPLEN                            81270\n         AIF   ('&EXLEN'(1,1) NE '(' OR '&EXLEN'(2,1) EQ '(').NOPLEN\n&T       SETA  &T+2          ILEN IS REGISTER FORM               81270\n.NOPLEN  ANOP  ,                                                 81270\n&FDCHAIN DC    AL1(ZFD&C-*,&T,&E,&DATA,&LEN,&EXLEN),SL2(&STR)    81138\n         MEXIT ,                                                 81138\n.CSTRPRT ANOP  ,                                                 81138\n&FDCHAIN DC    AL1(ZFD&C-*,&T,&E,129,&LEN,ZFD&C-*-1),C&STR       81138\n         MEXIT ,                                                 81138\n.LONG    AIF   ('&STR'(1,1) EQ '''').CSTRING                     81138\n         AIF   ('&EXLEN' NE '' AND NOT &SKPLEN).EXLEN\n&L       SETC  'L'''\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&O9,&O7,&DATA,&LEN,&L&STR),SL2(&STR)\n         MEXIT\n.EXLEN   AIF   (K'&EXLEN LT 2).NORLEN                            81270\n         AIF   ('&EXLEN'(1,1) NE '(' OR '&EXLEN'(2,1) EQ '(').NORLEN\n&T       SETA  &T+2          ILEN IS REGISTER FORM               81270\n.NORLEN  ANOP  ,                                                 81270\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&O9,&O7,&DATA,&LEN,&EXLEN),SL2(&STR)\n         MEXIT ,\n.CSTRING ANOP  ,\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&O9,&O7,129,&LEN,ZFD&C-*-1),C&STR\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDBAR": {"ttr": 4626, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x05\\x00\\x00\\x01\\x11$\\x9f\\x01\\x11%/\"9\\x00#\\x00\\x13\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.05", "flags": 0, "createdate": "2011-09-06T00:00:00", "modifydate": "2011-09-09T22:39:00", "lines": 35, "newlines": 19, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      FDBAR &O1,&O2,&O3,&O4,&O5,&O6,&O7,&O8,&O9,&O10,&O11,&O12,&O13,*\n               &O14,&O15,&O16,&LEN=50,                                 *\n               &CHAR=C'*',&MAX=0\n.*--------------------------------------------------------------------*\n.*   FDBAR PRODUCES A BAR (E.G., PERCENTAGE BY MAKING THE LEN= AREA   *\n.*     NON-BLANK FOR THE CALCULATED PERCENTAGE OF &O1 * 100 / MAX=    *\n.*     THE EXPANSION IS THE SAME AS FOR A REGULAR FD, FOLLOWED BY THE *\n.*     PLOT CHARACTER AND THE S(MAX-ADDR)  MAX=0 DEFAULTS TO 100      *\n.*--------------------------------------------------------------------*\n         LCLA  &N,&K\n         LCLB  &I1,&I2,&I3\n         LCLC  &C\n&N       SETA  N'&SYSLIST\n&K       SETA  1             FIRST IS DIVIDEND, SKIP TEST\n.LOOP    AIF   (&K GE &N).TEST\n&K       SETA  &K+1\n&C       SETC  '&SYSLIST(&K)'\n&I1      SETB  (('&C' EQ 'I') OR &I1)\n&I2      SETB  (('&C' EQ 'D') OR &I2)\n&I3      SETB  (('&C' EQ 'F') OR &I3)\n         AGO   .LOOP\n.TEST    AIF   ((&I1+&I2+&I3) NE 1).BADTYP\n         AIF   ('&CHAR' NE '').CHAROK\n.BADTYP  MNOTE 'FDBAR: CHAR= MISSING'\n         MEXIT ,\n.CHAROK  AIF   ('&MAX' NE '').GOOD\n         MNOTE 'FDBAR: MAX= (DIVISOR) MISSING'\n         MEXIT ,\n.GOOD    ANOP  ,\n&N       SETA  48+&I2+2*&I3\n         FD    &O1,&O2,&O3,&O4,&O5,&O6,&O7,&O8,&O9,&O10,&O11,&O12,&O13,*\n               &O14,&O15,&O16,LEN=&LEN,TYPE=&N\n         DC    SL2(&MAX),AL1(&CHAR,0)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDBR": {"ttr": 4865, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDBR  &STR,&BE=0,&BL=0,&BH=0,&BNE=0,&BM=0,&BO=0,&BZ=0   81133\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLB  &NOP                                              81133\n         LCLC  &FDCHN,&FL,&FH,&FZ                                81133\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&STR' NE 'END' AND '&STR' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS AIF   ('&STR' NE 'NOP').PROCNOP                         81133\n&NOP     SETB  1                                                 81133\n.PROCNOP ANOP  ,                                                 81133\n&FZ      SETC  '&BE'                                             81133\n         AIF   ('&BZ' EQ '0').SETZ                               81133\n&FZ      SETC  '&BZ'                                             81133\n         AIF   ('&BE' EQ '0').SETZ                               81133\n         MNOTE 8,'*** MUTUALLY EXCLUSIVE BZ AND BE'              81133\n.SETZ    ANOP  ,                                                 81133\n&FL      SETC  '&BL'\n         AIF   ('&BM' EQ '0').SETL\n&FL      SETC  '&BM'\n         AIF   ('&BL' EQ '0').SETL\n         MNOTE 8,'*** MUTUALLY EXCLUSIVE BL AND BM'\n.SETL    ANOP  ,\n&FH      SETC  '&BH'\n         AIF   ('&BO' EQ '0').SETH\n&FH      SETC  '&BO'\n         AIF   ('&BH' EQ '0').SETH\n         MNOTE 8,'*** MUTUALLY EXCLUSIVE BH AND BO'\n.SETH    AIF   ('&BNE' EQ '0').CHECK\n         AIF   ('&FL' NE '0' OR '&FH' NE '0').BHEX               81133\n&FL      SETC  '&BNE'\n&FH      SETC  '&BNE'\n.BHEX    MNOTE 8,'*** MUTUALLY EXCLUSIVE BNE AND BL/BH OR BM/BO' 81133\n.CHECK   ANOP  ,\n&T       SETA  64*&NOP+18\n&FDCHN DC AL1(ZFD&C-*,&T),SL2(&FZ,&FL,&FH)                       81133\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDBUMP": {"ttr": 4867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x07\\x00o\\x01\\x07\\x00o  \\x00P\\x00P\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2007-01-06T00:00:00", "modifydate": "2007-01-06T20:20:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      FDBUMP &O,&TYPE=H                             ADDED ON 2007006\n         GBLA  &FDCNTR\n.**********************************************************************\n.*   THIS MACRO CAUSES REGISTERS IN AN FD LIST TO BE INCREMENTED      *\n.*   SEE LABEL MAKELLUP IN EXHASCRN OR @FORMATS FOR DETAILS           *\n.*   X'80' IS END OF OPERAND LIST BIT   X'7x' IS RESET ALL            *\n.*   X'0r' ONE BYTE POSITIVE INCREMENT  X'1r' HALF-WORD INCREMENT     *\n.*   X'3r' FULLWORD INCREMENT                                         *\n.**********************************************************************\n         LCLA  &C,&I,&J,&K,&L,&LD,&N,&T,&SA(17)\n         LCLC  &O1,&O2,&O3,&RA(17),&VA(17),&FDCHN\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n&N       SETA  N'&SYSLIST\n&T       SETA  16+9\n&LD      SETA  2             DEFAULT INCREMENT LENGTH\n         AIF   ('&TYPE' EQ 'H' OR '&TYPE' EQ ' ').HAVELD\n&LD      SETA  1             DEFAULT INCREMENT LENGTH\n         AIF   ('&TYPE' EQ 'X' OR '&TYPE' EQ 'B').HAVELD\n&LD      SETA  4             DEFAULT INCREMENT LENGTH\n         AIF   ('&TYPE' EQ 'F' OR '&TYPE' EQ 'H').HAVELD\n&LD      SETA  2             DEFAULT INCREMENT LENGTH\n.HAVELD  AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&N' NE 'END' AND '&N' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS AIF   (&N GE 1 AND &N LE 17).DECODE\n MNOTE 8,'FDBUMP: INCORRECT NUMBER OF OPERANDS'\n         MEXIT ,\n.DECODE  AIF   (&I GE &N).EXPAND\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)' NE 'RESET').VALUE\n&J       SETA  &J+1          COUNT ACCEPTED OPERANDS\n&RA(&J)  SETC  '15'\n&SA(&J)  SETA  6\n         AGO   .DECODE\n.VALUE   AIF   (N'&SYSLIST(&I) EQ 2).SPLITT2\n         AIF   (N'&SYSLIST(&I) EQ 3).SPLITT3\n MNOTE 8,'FDBUMP: INCORRECT NUMBER OF ARGUMENTS IN OPERAND &I'\n         AGO   .DECODE\n.SPLITT2 ANOP  ,\n&L       SETA  &LD           SET DEFAULT LENGTH\n         AGO   .SPLITTR\n.SPLITT3 AIF   ('&SYSLIST(&I,3)' EQ '1' OR '&SYSLIST(&I,3)' EQ '2'     *\n               OR '&SYSLIST(&I,3)' EQ '4').SPLITL3\n         MNOTE 'FDBUMP: LENGTH IN OPERAND &I NOT 1, 2, OR 4'\n&L       SETA  4             SHOULD BE VALID ?\n         AGO   .SPLITTR\n.SPLITL3 ANOP  ,\n&L       SETA  &SYSLIST(&I,3)  OVERRIDE LENGTH\n.SPLITTR ANOP  ,\n&O1      SETC  '&SYSLIST(&I,1)'\n&O2      SETC  '&SYSLIST(&I,2)'\n         AIF   ('&O1&O2' NE '').STASH\n         MNOTE 8,'FDBUMP: OMITTED ARGUMENT IN OPERAND &I'\n         AGO   .DECODE\n.STASH   ANOP  ,\n&J       SETA  &J+1          COUNT ACCEPTED OPERANDS\n&RA(&J)  SETC  '&O1'         PRESUMED REGISTER NUMBER\n&SA(&J)  SETA  &L-1          CONTROL FUNCTION\n&VA(&J)  SETC  '&O2'         INCREMENT\n         AGO   .DECODE       DO ANOTHER\n.EXPAND  AIF   (&J GT 0).EXPANDS\n         MNOTE 8,'FDBUMP: NO VALID ARGUMENTS FOUND'\n         MEXIT ,\n.EXPANDS ANOP  ,\n&FDCHN   DC    AL1(ZFD&C-*,&T)  IDENTIFY AS FDBUMP\n&I       SETA  0\n.EXPANDL AIF   (&I GE &J).MEND\n&I       SETA  &I+1\n&L       SETA  128*(&I/&J)   END LIST BIT\n         AIF   (&SA(&I) EQ 6).RESET\n         DC    AL1(&L+16*&SA(&I)+&RA(&I)),AL(&SA(&I)+1)(&VA(&I))\n         AGO   .EXPANDL\n.RESET   DC    AL1(&L+127)   RESET ALL REGISTERS\n         AGO   .EXPANDL\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FDCLC": {"ttr": 4870, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDCLC &STR,&STR2,&LEN,&BE=0,&BL=0,&BH=0,&BNE=0\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLB  &NOP                                              81133\n         LCLC  &FDCHN,&FL,&FH,&L\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&STR' NE 'END' AND '&STR' NE '*END').PROCESS\n&FDCHN DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&FL      SETC  '&BL'\n&FH      SETC  '&BH'\n         AIF   ('&BNE' EQ '0').CHECK\n&FL      SETC  '&BNE'\n&FH      SETC  '&BNE'\n         AIF   ('&BL' EQ '0' AND '&BH' EQ '0').CHECK\n         MNOTE 8,'*** MUTUALLY EXCLUSIVE BNE AND BL/BH'\n.CHECK   ANOP  ,\n&T       SETA  64*&NOP+21\n         AIF   (T'&LEN EQ 'O').NOL\n&FDCHN DC AL1(ZFD&C-*,&T),SL2(&BE,&FL,&FH,&STR),AL1(&LEN),SL2(&STR2)\n         MEXIT ,\n.NOL     ANOP\n&L       SETC  'L'''\n&FDCHN DC AL1(ZFD&C-*,&T),SL2(&BE,&FL,&FH,&STR),AL1(&L&STR),SL2(&STR2)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDCLI": {"ttr": 4872, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDCLI &STR,&MASK,&BE=0,&BL=0,&BH=0,&BNE=0\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLB  &NOP                                              81133\n         LCLC  &FDCHAIN,&FL,&FH\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHAIN SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&STR' NE 'END' AND '&STR' NE '*END').PROCESS\n&FDCHAIN DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&FL      SETC  '&BL'\n&FH      SETC  '&BH'\n         AIF   ('&BNE' EQ '0').CHECK\n&FL      SETC  '&BNE'\n&FH      SETC  '&BNE'\n         AIF   ('&BL' EQ '0' AND '&BH' EQ '0').CHECK\n         MNOTE 8,'*** MUTUALLY EXCLUSIVE BNE AND BL/BH'\n.CHECK   ANOP  ,\n&T       SETA  64*&NOP+20\n&FDCHAIN DC AL1(ZFD&C-*,&T),SL2(&BE,&FL,&FH,&STR),AL1(&MASK)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDDUMP": {"ttr": 4874, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x13\"\\x8f\\x01\\x13\"\\x8f!1\\x00\\t\\x00\\\\\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2013-08-16T00:00:00", "modifydate": "2013-08-16T21:31:00", "lines": 9, "newlines": 92, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      FDDUMP &ADR,&LEN,&OPT1,&OPT2,&OPT3           ADDED ON GP13228\n.*\n.*   FDDUMP is a macro that invokes FDSNAP to produce the most\n.*   frequently used form of dump (two hex columns + text)\n.*\n&NM      FDSNAP &ADR,64,DUAL,NOABS,OFFSET,&OPT1,&OPT2,&OPT3,           *\n               BASE=&ADR,LEN=&LEN\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FDEXEC": {"ttr": 4876, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDEXEC &S,&N\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLC  &FDCHN\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&S' NE 'END' AND '&S' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&T       SETA  17\n         AIF   ('&N' NE '').TWO\n&FDCHN   DC    AL1(ZFD&C-*,&T),2SL2(&S)\n         AGO   .MEND\n.TWO     ANOP  ,\n&FDCHN   DC    AL1(ZFD&C-*,&T),SL2(&S,&N)\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDFD": {"ttr": 4878, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x99\\x03\\x7f\\x01\\x042_\\x15C\\x00#\\x00\\x0f\\x00\\t\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-02-06T00:00:00", "modifydate": "2004-11-20T15:43:00", "lines": 35, "newlines": 15, "modlines": 9, "user": "GERHARD"}, "text": "         MACRO ,                                                 92087\n&NM      FDFD  &FIELD,&TYPE=HEX,&LEN=0,&OPT=,&OPTS=,&OPTL=,&ROOM=5+2+8,*\n               &PFX=,&SYS=,&COLL=TURQ,&COLD=GREEN               GP01017\n         GBLA  &FDFDPFX                                          92087\n         GBLB  &MVS,&MVSSP,&MVSXA,&MVSESA,&OS390,&Z900          GP04234\n         GBLC  &MACPLAB\n         LCLA  &PF,&I,&N                                        GP00017\n         LCLC  &FN,&GN                                           92087\n&MACPLAB SETC  '&NM'         PRESERVE NAME FIELD                GP04234\n&N       SETA  N'&SYS        SYSTEM SELECTION                   GP04234\n         AIF   ('&PFX' EQ '').NOFXOV                             92087\n&FDFDPFX SETA  &PFX+1                                            92087\n.NOFXOV  AIF   (&FDFDPFX GT 0).DOPFX                             92087\n&FDFDPFX SETA  3+1           SET FOR TYPICAL CONTROL BLOCK       92087\n.DOPFX   AIF   (&N LT 1).SELECT                                 GP04234\n.SYSLOOP AIF   (&I GE &N).SKIP                                  GP04234\n&I       SETA  &I+1                                             GP04234\n&GN      SETC  '&SYS(&I)'                                       GP04234\n         AIF   ('&GN' EQ '').SYSLOOP                            GP04234\n         AIF   ('&GN' EQ 'Z900' AND &Z900).SELECT               GP04234\n         AIF   ('&GN' EQ 'ESA' AND &MVSESA).SELECT              GP04234\n         AIF   ('&GN' EQ 'XA' AND &MVSXA).SELECT                GP04234\n         AIF   ('&GN' EQ 'SP' AND &MVSSP).SELECT                GP04234\n         AIF   ('&GN' EQ 'MVS' AND &MVS).SELECT                 GP04234\n         AGO   .SYSLOOP                                         GP04234\n.SKIP    MACPARM MODE=LBL                                       GP04234\n         MEXIT ,                                                GP04234\n.SELECT  ANOP  ,                                                 92087\n&PF      SETA  &FDFDPFX-1                                       GP00017\n&GN      SETC  '&FIELD'.'        '                               92087\n&FN      SETC  '&GN'(1+&PF,8-&PF)                               GP00017\n&NM      FDROOM &ROOM        MAKE IT FIT ON ONE LINE             92087\n         FD    ' &FN',DEBR,PAD,&COLL,&OPTL                      GP01017\n         FD    &FIELD,&OPT,&TYPE,&OPTS,&COLD,LEN=&LEN           GP01017\n         MEND  ,                                                 92087\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDFLAG": {"ttr": 4880, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x10\\x01\\x03(O\\x01\\x03(\\x7f\\x14%\\x00\\x13\\x00\\x1b\\x00\\x0e\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-10-11T00:00:00", "modifydate": "2003-10-14T14:25:10", "lines": 19, "newlines": 27, "modlines": 14, "user": "GERHARD"}, "text": "         MACRO\n&NM      FDFLAG &O1,&O2,&O3,&O4,&O5,&O6,&O7,&O8,&O9,&O10,&O11,&O12,&O13*\n               ,&O14,&O15,&O16,&LEN=0,                                 *\n               &TABLE='?',&SEP=C',',&SPACE=0\n.*--------------------------------------------------------------------*\n.*   FDFLAG REQUESTS TABLE LOOKUP. THE TABLE IS DEFINED WITH MACRO    *\n.*     FLGTAB (FLAG BITS,TEXT,MLEN=L'FLAG)                            *\n.*     THE EXPANSION IS THE SAME AS FOR A REGULAR FD, FOLLOWED BY THE *\n.*     TABLE ADDRESS AND THE ATTRIBUTES:                              *\n.*   OPERANDS ARE: S(TABLE ADDRESS) AL1(SEP CHAR OR 0) AL1(ADDL SPC)  *\n.*--------------------------------------------------------------------*\n&NM      FD    &O1,&O2,&O3,&O4,&O5,&O6,&O7,&O8,&O9,&O10,&O11,&O12,&O13,*\n               &O14,&O15,&O16,LEN=&LEN,TYPE=64\n         AIF   ('&O1' EQ 'END' OR '&O1' EQ '*END').MEND\n         AIF   ('&SEP' EQ 'NO' OR '&SEP' EQ 'NONE').NONO\n         DC    SL2(&TABLE),AL1(&SEP,&SPACE)\n         AGO   .MEND\n.NONO    DC    SL2(&TABLE),AL1(0,&SPACE)\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDGOTO": {"ttr": 4882, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDGOTO &S\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLC  &FDCHN\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&S' NE 'END' AND '&S' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&T       SETA  16\n&FDCHN   DC    AL1(ZFD&C-*,&T),SL2(&S)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDIN": {"ttr": 4884, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x07\\x00O\\x01\\x10$\\x0f\\x16\\x11\\x00\\xb5\\x00\\xa5\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2007-01-04T00:00:00", "modifydate": "2010-08-28T16:11:00", "lines": 181, "newlines": 165, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      FDIN  &S,&EXLEN,&VALUES,&LEN=0,&MAX=,&EXIT=             89095\n         GBLA  &FDCNTR,&FDOFFS                                   84146\n         LCLA  &C,&I,&J,&K,&N,&U                                 84146\n         LCLA  &T,&E,&O7,&O9,&DATA,&EXFG                         89095\n         LCLC  &L,&FDCHAIN,&W,&UEX                               89095\n         LCLB  &NOP,&IN,&SKPLEN,&INDAD                           81270\n         LCLB  &NL,&DEBL,&DEBR,&DEBZ,&PADL,&PADR,&RADJ,&UP\n         LCLB  &BLUE,&GREEN,&PINK,&RED,&TURQ,&WHITE,&YELLOW,&C1,&C2,&C3\n         LCLB  &UNDER,&BLINK,&REVERSE,&MONO,&MDT                 87313\n         LCLB  &INTENSE,&DETECT,&NONDISP,&NUMERIC,&SKIP,&PROTECT,&NULL\n         LCLB  &DEFAULT,&PREV\n&U       SETA  &FDOFFS                                           84146\n&UEX     SETC  'AL2('.'&U'.')'                                   89095\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHAIN SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&S' EQ '*END' OR '&S' EQ 'END').NOOFF  END OF CHAIN\n         AIF   ('&S' NE '*EXPAND').NOEXPND                       84214\n         AIF   ('&NM' EQ '').NOXNAM                              84214\n&NM      DC    (&FDOFFS)X'00'                                    84214\n         AGO   .NOXCOM                                           84214\n.NOXNAM  AIF   (&FDOFFS LT 1).NOXCOM                             84214\n         DC    (&FDOFFS)X'00'                                    84214\n.NOXCOM  AIF   ('&SYSLIST(2)' EQ 'NORESET').MEND                 84214\n&FDOFFS  SETA  0                                                 84214\n         AGO   .MEND                                             84214\n.NOEXPND AIF   (T'&EXIT EQ 'O').NOUEX                            89095\n         AIF   (N'&EXIT GE 2).CKUEXR                            GP07008\n&UEX     SETC  '&UEX'.',SL2('.'&EXIT'.')'                        89095\n&EXFG    SETA  1                                                 89095\n         AGO   .NOUEX                                           GP07008\n.CKUEXR  AIF   ('&EXIT(1)' NE 'R').BADUEX                       GP07008\n&UEX     SETC  '&UEX'.',SL2('.'&EXIT(2)'.'-*)'                  GP07008\n&EXFG    SETA  1                                                 89095\n         AGO   .NOUEX                                           GP07008\n.BADUEX  MNOTE 8,'FDIN: EXIT= ADDRESS MALFORMED'                GP07008\n.NOUEX   AIF   (T'&MAX EQ 'O').NOMAXQ                            89095\n         AIF   (T'&MAX EQ 'N').CKMAX                             89095\n         MNOTE 4,'NON-NUMERIC MAX= NOT SUPPORTED'                89095\n         AGO   .NOMAXQ                                           89095\n.CKMAX   AIF   (&MAX LT 0).NOMAXQ                                89095\n&I       SETA  &MAX                                              84146\n         AGO   .HAVMAX                                           84146\n.NOMAXQ  AIF   (T'&LEN NE 'N' OR '&LEN' EQ '0').NOLENQ           84146\n         AIF   (&LEN LE 0).NOLENQ                                84146\n&I       SETA  &LEN                                              84146\n         AGO   .HAVMAX                                           84146\n.NOLENQ  MNOTE 0,'LEN=/MAX= MISSING - WIDTH DEFAULTED TO 255'    84146\n&I       SETA  255                                               84146\n.HAVMAX  ANOP  ,                                                 84146\n&FDOFFS  SETA  &FDOFFS+4+&I  SET OFFSET OF NEXT ENTRY            84146\n         AIF   (K'&SYSLIST(0) LT 1 OR K'&SYSLIST(0) GT 4).NOOFF  84146\nOFFS&SYSLIST(0) EQU &U,&I                                        84214\n.NOOFF   AIF   ('&NM' EQ '').NONAME                              84146\n&NM      EQU   *\n.NONAME  AIF   ('&S' NE 'END' AND '&S' NE '*END').PROCESS        84146\n&FDCHAIN DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&I       SETA  N'&SYSLIST\n&J       SETA  1\n         AIF   ('&S'(1,1) NE '''').NOLIT                         84146\n&SKPLEN  SETB  1\n.NOLIT   AIF   (&J GE &I).CHECK\n&J       SETA  &J+1\n&L       SETC  '&SYSLIST(&J)'\n         AIF   ('&L' EQ '').NOLIT\n&NOP     SETB  (&NOP  OR '&L' EQ 'NOP')\n&NL      SETB  (&NL  OR '&L' EQ 'NL' OR '&L' EQ 'NEWLINE')\n&DEBL SETB (&DEBL OR '&L' EQ 'DEBL' OR '&L' EQ 'DEB' OR '&L' EQ 'DEBZ')\n&DEBR    SETB  (&DEBR OR '&L' EQ 'DEBR' OR '&L' EQ 'DEB')\n&DEBZ    SETB  (&DEBZ OR '&L' EQ 'DEBZ')\n&PADL    SETB  (&PADL OR '&L' EQ 'PADL' OR '&L' EQ 'PAD')\n&PADR    SETB  (&PADR OR '&L' EQ 'PADR' OR '&L' EQ 'PAD')\n&RADJ    SETB  (&RADJ OR '&L' EQ 'RADJ')\n&UP      SETB  (&UP OR '&L' EQ 'UP')\n&UP      SETB  (&UP OR '&L' EQ 'UPPER')\n&BLUE    SETB  (&BLUE OR '&L' EQ 'BLUE')\n&GREEN   SETB  (&GREEN OR '&L' EQ 'GREEN')\n&PINK    SETB  (&PINK OR '&L' EQ 'PINK')\n&RED     SETB  (&RED  OR '&L' EQ 'RED')\n&TURQ    SETB  (&TURQ  OR '&L' EQ 'TURQ' OR '&L' EQ 'CYAN')      90326\n&WHITE   SETB  (&WHITE OR '&L' EQ 'WHITE')\n&YELLOW  SETB  (&YELLOW OR '&L' EQ 'YELLOW')\n&BLUE    SETB  (&BLUE OR '&L' EQ 'BL')                          GP10240\n&GREEN   SETB  (&GREEN OR '&L' EQ 'GR')                         GP10240\n&PINK    SETB  (&PINK OR '&L' EQ 'PI')                          GP10240\n&RED     SETB  (&RED  OR '&L' EQ 'RE')                          GP10240\n&TURQ    SETB  (&TURQ  OR '&L' EQ 'TU' OR '&L' EQ 'CY')         GP10240\n&WHITE   SETB  (&WHITE OR '&L' EQ 'WH')                         GP10240\n&YELLOW  SETB  (&YELLOW OR '&L' EQ 'YE')                        GP10240\n&MONO    SETB  (&MONO OR '&L' EQ 'MONO')                         87313\n&UNDER   SETB  (&UNDER OR '&L' EQ 'UL' OR '&L' EQ 'UNDER')\n&BLINK   SETB  (&BLINK OR '&L' EQ 'BLINK')\n&REVERSE SETB  (&REVERSE OR '&L' EQ 'REVERSE')\n&INTENSE SETB  (&INTENSE OR '&L' EQ 'INTENSE' OR '&L' EQ 'INT')\n&DETECT  SETB  (&DETECT OR '&L' EQ 'DETECT' OR '&L' EQ 'LP')\n&NONDISP SETB  (&NONDISP OR '&L' EQ 'NONDISP' OR '&L' EQ 'NDISP')\n&NUMERIC SETB  (&NUMERIC OR '&L' EQ 'NUMERIC' OR '&L' EQ 'NUM')\n&SKIP    SETB  (&SKIP OR '&L' EQ 'SKIP')\n&PROTECT SETB  (&PROTECT OR '&L' EQ 'PROTECT')\n&MDT     SETB  (&MDT OR '&L' EQ 'MDT')                           87313\n&NULL    SETB  (&NULL OR '&L' EQ 'NULL')                         84146\n&DEFAULT SETB  (&DEFAULT OR '&L' EQ 'DEFAULT' OR '&L' EQ 'DFLT')\n&PREV    SETB  (&PREV OR '&L' EQ 'PREVIOUS' OR '&L' EQ 'PREV')\n&INDAD   SETB  (&INDAD OR '&L' EQ '*')                           81270\n         AIF   (&DATA NE 0).NOLIT\n         AIF   (K'&L GT 4).OMLEN\n&K       SETA  0\n&L       SETC  '&L'.'    '\n&L       SETC  '&L'(1,4)\n         AIF   ('&L' NE 'X   ').DT                              GP10240\n&L       SETC  'HEX '                                           GP10240\n.DT      AIF   (&K GE 35).OMLEN                                 GP07004\n&K       SETA  &K+1\n&N       SETA  (&K-1)*4+1\n&W      SETC  'CHARCON ASISADDRHEX SHEXBIT I   $I  D   $D  F   TIMETIMD*\n               DATEDATJWDAYMTH DAY MD  DMY MDY CHEXICM ICN IZ  IA  DCM *\n               DCN DZ  DA  EDATDATDCCHHTTR '(&N,4)              GP07004\n         AIF   ('&L' NE '&W').DT\n&DATA    SETA  &K\n         AIF   (&J EQ 2).OMSET\n         AGO   .NOLIT\n.OMLEN   AIF   (&J NE 2 OR &SKPLEN).NOLIT\n AIF (&NOP OR &IN OR &NL OR &DEBL OR &DEBR OR &DEBZ OR &PADL).OMSET\n AIF (&UP OR &PADR OR &RADJ OR &BLUE OR &GREEN OR &PINK OR &RED).OMSET\n AIF (&TURQ OR &WHITE OR &YELLOW OR &UNDER OR &BLINK OR &NULL).OMSET\n AIF (&REVERSE OR &INTENSE OR &DETECT OR &NONDISP OR &INDAD).OMSET\n AIF (&NUMERIC OR &SKIP OR &PROTECT OR &DEFAULT OR &PREV).OMSET\n         AIF   (&MDT OR &MONO).OMSET                             87313\n         AGO   .NOLIT\n.OMSET   ANOP  ,             EXPLICIT LENGTH OMITTED\n&SKPLEN  SETB  1             USE L'\n         AGO   .NOLIT\n.CHECK   ANOP  ,\n&L       SETC  'L'''\n&IN      SETB  1                                                 84146\n&T       SETA  128*&IN+64*&NOP+4*&EXFG+&INDAD                    89095\n&E SETA 128*&NL+64*&DEBL+32*&DEBR+16*&DEBZ+8*&PADL+4*&PADR+2*&RADJ+&UP\n&O7      SETA  128*&DEFAULT+64*&PREV+&MDT                        87313\n&PROTECT SETB  (&PROTECT OR &SKIP)\n&NUMERIC SETB  (&NUMERIC OR &SKIP)\n&DETECT  SETB  (&DETECT  OR &NONDISP)\n&INTENSE SETB  (&INTENSE OR &NONDISP)\n&O7      SETA  &O7+32*&PROTECT+16*&NUMERIC+8*&INTENSE+4*&DETECT+2*&NULL\n&C1      SETB  (&GREEN OR &TURQ OR &WHITE OR &YELLOW)\n&C2      SETB  (&RED OR &PINK OR &WHITE OR &YELLOW)\n&C3      SETB  (&BLUE OR &PINK OR &TURQ OR &WHITE)\n&O9      SETA  64*&C1+32*&C2+16*&C3+8*&MONO+4*&UNDER+2*&REVERSE+&BLINK\n         AIF   ((&O7 NE 0 AND &O7 NE 128) OR &O9 NE 0).LONG      86244\n&T       SETA  &T+48         USE FDPRT SHORT FORM                86244\n         AIF   ('&S'(1,1) EQ '''').CSTRPRT                       86244\n         AIF   ('&EXLEN' NE '' AND NOT &SKPLEN).EXLPRT           86244\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&DATA,&LEN,&L&S),SL2(&S),&UEX      89095\n         MEXIT ,                                                 86244\n.EXLPRT  AIF   (K'&EXLEN LT 2).NORLPRT                           86244\n         AIF   ('&EXLEN'(1,1) NE '(' OR '&EXLEN'(2,1) EQ '(').NORLPRT\n&T       SETA  &T+2          ILEN IS REGISTER FORM               86244\n.NORLPRT ANOP  ,                                                 86244\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&DATA,&LEN,&EXLEN),SL2(&S),&UEX    89095\n         MEXIT ,                                                 86244\n.CSTRPRT ANOP  ,                                                 86244\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,1,&LEN,&L.ZFD&C.C),SL2(ZFD&C.C),&UEX\nZFD&C.C  DC    C&S                                               89095\n         MEXIT ,                                                 86244\n.LONG    AIF   ('&S'(1,1) EQ '''').CSTRING                       86244\n         AIF   ('&EXLEN' NE '' AND NOT &SKPLEN).EXLEN\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&O9,&O7,&DATA,&LEN,&L&S),SL2(&S),&UEX\n         MEXIT\n.EXLEN   AIF   (K'&EXLEN LT 2).NORLEN                            81270\n         AIF   ('&EXLEN'(1,1) NE '(' OR '&EXLEN'(2,1) EQ '(').NORLEN\n&T       SETA  &T+2          ILEN IS REGISTER FORM               81270\n.NORLEN  ANOP  ,                                                 81270\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&O9,&O7,&DATA,&LEN,&EXLEN),SL2(&S),&UEX\n         MEXIT ,\n.CSTRING ANOP  ,\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&O9,&O7,1,&LEN,&L.ZFD&C.C),SL2(ZFD&C.C),&*\n               UEX                                               89095\nZFD&C.C  DC    C&S                                               89095\n.MEND    MEND  ,                                                 84214\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDINP": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x07\\x00O\\x01\\x10$\\x0f\\x16\\x11\\x00\\xb5\\x00\\xa5\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2007-01-04T00:00:00", "modifydate": "2010-08-28T16:11:00", "lines": 181, "newlines": 165, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      FDINP &S,&EXLEN,&VALUES,&LEN=0,&MAX=,&EXIT=             89095\n         GBLA  &FDCNTR,&FDOFFS                                   84146\n         LCLA  &C,&I,&J,&K,&N,&U                                 84146\n         LCLA  &T,&E,&O7,&O9,&DATA,&EXFG                         89095\n         LCLC  &L,&FDCHAIN,&W,&UEX                               89095\n         LCLB  &NOP,&IN,&SKPLEN,&INDAD                           81270\n         LCLB  &NL,&DEBL,&DEBR,&DEBZ,&PADL,&PADR,&RADJ,&UP\n         LCLB  &BLUE,&GREEN,&PINK,&RED,&TURQ,&WHITE,&YELLOW,&C1,&C2,&C3\n         LCLB  &UNDER,&BLINK,&REVERSE,&MONO,&MDT                 87313\n         LCLB  &INTENSE,&DETECT,&NONDISP,&NUMERIC,&SKIP,&PROTECT,&NULL\n         LCLB  &DEFAULT,&PREV\n&U       SETA  &FDOFFS                                           84146\n&UEX     SETC  'AL2('.'&U'.')'                                   89095\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHAIN SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&S' EQ '*END' OR '&S' EQ 'END').NOOFF  END OF CHAIN\n         AIF   ('&S' NE '*EXPAND').NOEXPND                       84214\n         AIF   ('&NM' EQ '').NOXNAM                              84214\n&NM      DC    (&FDOFFS)X'00'                                    84214\n         AGO   .NOXCOM                                           84214\n.NOXNAM  AIF   (&FDOFFS LT 1).NOXCOM                             84214\n         DC    (&FDOFFS)X'00'                                    84214\n.NOXCOM  AIF   ('&SYSLIST(2)' EQ 'NORESET').MEND                 84214\n&FDOFFS  SETA  0                                                 84214\n         AGO   .MEND                                             84214\n.NOEXPND AIF   (T'&EXIT EQ 'O').NOUEX                            89095\n         AIF   (N'&EXIT GE 2).CKUEXR                            GP07008\n&UEX     SETC  '&UEX'.',SL2('.'&EXIT'.')'                        89095\n&EXFG    SETA  1                                                 89095\n         AGO   .NOUEX                                           GP07008\n.CKUEXR  AIF   ('&EXIT(1)' NE 'R').BADUEX                       GP07008\n&UEX     SETC  '&UEX'.',SL2('.'&EXIT(2)'.'-*)'                  GP07008\n&EXFG    SETA  1                                                 89095\n         AGO   .NOUEX                                           GP07008\n.BADUEX  MNOTE 8,'FDIN: EXIT= ADDRESS MALFORMED'                GP07008\n.NOUEX   AIF   (T'&MAX EQ 'O').NOMAXQ                            89095\n         AIF   (T'&MAX EQ 'N').CKMAX                             89095\n         MNOTE 4,'NON-NUMERIC MAX= NOT SUPPORTED'                89095\n         AGO   .NOMAXQ                                           89095\n.CKMAX   AIF   (&MAX LT 0).NOMAXQ                                89095\n&I       SETA  &MAX                                              84146\n         AGO   .HAVMAX                                           84146\n.NOMAXQ  AIF   (T'&LEN NE 'N' OR '&LEN' EQ '0').NOLENQ           84146\n         AIF   (&LEN LE 0).NOLENQ                                84146\n&I       SETA  &LEN                                              84146\n         AGO   .HAVMAX                                           84146\n.NOLENQ  MNOTE 0,'LEN=/MAX= MISSING - WIDTH DEFAULTED TO 255'    84146\n&I       SETA  255                                               84146\n.HAVMAX  ANOP  ,                                                 84146\n&FDOFFS  SETA  &FDOFFS+4+&I  SET OFFSET OF NEXT ENTRY            84146\n         AIF   (K'&SYSLIST(0) LT 1 OR K'&SYSLIST(0) GT 4).NOOFF  84146\nOFFS&SYSLIST(0) EQU &U,&I                                        84214\n.NOOFF   AIF   ('&NM' EQ '').NONAME                              84146\n&NM      EQU   *\n.NONAME  AIF   ('&S' NE 'END' AND '&S' NE '*END').PROCESS        84146\n&FDCHAIN DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&I       SETA  N'&SYSLIST\n&J       SETA  1\n         AIF   ('&S'(1,1) NE '''').NOLIT                         84146\n&SKPLEN  SETB  1\n.NOLIT   AIF   (&J GE &I).CHECK\n&J       SETA  &J+1\n&L       SETC  '&SYSLIST(&J)'\n         AIF   ('&L' EQ '').NOLIT\n&NOP     SETB  (&NOP  OR '&L' EQ 'NOP')\n&NL      SETB  (&NL  OR '&L' EQ 'NL' OR '&L' EQ 'NEWLINE')\n&DEBL SETB (&DEBL OR '&L' EQ 'DEBL' OR '&L' EQ 'DEB' OR '&L' EQ 'DEBZ')\n&DEBR    SETB  (&DEBR OR '&L' EQ 'DEBR' OR '&L' EQ 'DEB')\n&DEBZ    SETB  (&DEBZ OR '&L' EQ 'DEBZ')\n&PADL    SETB  (&PADL OR '&L' EQ 'PADL' OR '&L' EQ 'PAD')\n&PADR    SETB  (&PADR OR '&L' EQ 'PADR' OR '&L' EQ 'PAD')\n&RADJ    SETB  (&RADJ OR '&L' EQ 'RADJ')\n&UP      SETB  (&UP OR '&L' EQ 'UP')\n&UP      SETB  (&UP OR '&L' EQ 'UPPER')\n&BLUE    SETB  (&BLUE OR '&L' EQ 'BLUE')\n&GREEN   SETB  (&GREEN OR '&L' EQ 'GREEN')\n&PINK    SETB  (&PINK OR '&L' EQ 'PINK')\n&RED     SETB  (&RED  OR '&L' EQ 'RED')\n&TURQ    SETB  (&TURQ  OR '&L' EQ 'TURQ' OR '&L' EQ 'CYAN')      90326\n&WHITE   SETB  (&WHITE OR '&L' EQ 'WHITE')\n&YELLOW  SETB  (&YELLOW OR '&L' EQ 'YELLOW')\n&BLUE    SETB  (&BLUE OR '&L' EQ 'BL')                          GP10240\n&GREEN   SETB  (&GREEN OR '&L' EQ 'GR')                         GP10240\n&PINK    SETB  (&PINK OR '&L' EQ 'PI')                          GP10240\n&RED     SETB  (&RED  OR '&L' EQ 'RE')                          GP10240\n&TURQ    SETB  (&TURQ  OR '&L' EQ 'TU' OR '&L' EQ 'CY')         GP10240\n&WHITE   SETB  (&WHITE OR '&L' EQ 'WH')                         GP10240\n&YELLOW  SETB  (&YELLOW OR '&L' EQ 'YE')                        GP10240\n&MONO    SETB  (&MONO OR '&L' EQ 'MONO')                         87313\n&UNDER   SETB  (&UNDER OR '&L' EQ 'UL' OR '&L' EQ 'UNDER')\n&BLINK   SETB  (&BLINK OR '&L' EQ 'BLINK')\n&REVERSE SETB  (&REVERSE OR '&L' EQ 'REVERSE')\n&INTENSE SETB  (&INTENSE OR '&L' EQ 'INTENSE' OR '&L' EQ 'INT')\n&DETECT  SETB  (&DETECT OR '&L' EQ 'DETECT' OR '&L' EQ 'LP')\n&NONDISP SETB  (&NONDISP OR '&L' EQ 'NONDISP' OR '&L' EQ 'NDISP')\n&NUMERIC SETB  (&NUMERIC OR '&L' EQ 'NUMERIC' OR '&L' EQ 'NUM')\n&SKIP    SETB  (&SKIP OR '&L' EQ 'SKIP')\n&PROTECT SETB  (&PROTECT OR '&L' EQ 'PROTECT')\n&MDT     SETB  (&MDT OR '&L' EQ 'MDT')                           87313\n&NULL    SETB  (&NULL OR '&L' EQ 'NULL')                         84146\n&DEFAULT SETB  (&DEFAULT OR '&L' EQ 'DEFAULT' OR '&L' EQ 'DFLT')\n&PREV    SETB  (&PREV OR '&L' EQ 'PREVIOUS' OR '&L' EQ 'PREV')\n&INDAD   SETB  (&INDAD OR '&L' EQ '*')                           81270\n         AIF   (&DATA NE 0).NOLIT\n         AIF   (K'&L GT 4).OMLEN\n&K       SETA  0\n&L       SETC  '&L'.'    '\n&L       SETC  '&L'(1,4)\n         AIF   ('&L' NE 'X   ').DT                              GP10240\n&L       SETC  'HEX '                                           GP10240\n.DT      AIF   (&K GE 35).OMLEN                                 GP07004\n&K       SETA  &K+1\n&N       SETA  (&K-1)*4+1\n&W      SETC  'CHARCON ASISADDRHEX SHEXBIT I   $I  D   $D  F   TIMETIMD*\n               DATEDATJWDAYMTH DAY MD  DMY MDY CHEXICM ICN IZ  IA  DCM *\n               DCN DZ  DA  EDATDATDCCHHTTR '(&N,4)              GP07004\n         AIF   ('&L' NE '&W').DT\n&DATA    SETA  &K\n         AIF   (&J EQ 2).OMSET\n         AGO   .NOLIT\n.OMLEN   AIF   (&J NE 2 OR &SKPLEN).NOLIT\n AIF (&NOP OR &IN OR &NL OR &DEBL OR &DEBR OR &DEBZ OR &PADL).OMSET\n AIF (&UP OR &PADR OR &RADJ OR &BLUE OR &GREEN OR &PINK OR &RED).OMSET\n AIF (&TURQ OR &WHITE OR &YELLOW OR &UNDER OR &BLINK OR &NULL).OMSET\n AIF (&REVERSE OR &INTENSE OR &DETECT OR &NONDISP OR &INDAD).OMSET\n AIF (&NUMERIC OR &SKIP OR &PROTECT OR &DEFAULT OR &PREV).OMSET\n         AIF   (&MDT OR &MONO).OMSET                             87313\n         AGO   .NOLIT\n.OMSET   ANOP  ,             EXPLICIT LENGTH OMITTED\n&SKPLEN  SETB  1             USE L'\n         AGO   .NOLIT\n.CHECK   ANOP  ,\n&L       SETC  'L'''\n&IN      SETB  1                                                 84146\n&T       SETA  128*&IN+64*&NOP+4*&EXFG+&INDAD+8                  89107\n&E SETA 128*&NL+64*&DEBL+32*&DEBR+16*&DEBZ+8*&PADL+4*&PADR+2*&RADJ+&UP\n&O7      SETA  128*&DEFAULT+64*&PREV+&MDT                        87313\n&PROTECT SETB  (&PROTECT OR &SKIP)\n&NUMERIC SETB  (&NUMERIC OR &SKIP)\n&DETECT  SETB  (&DETECT  OR &NONDISP)\n&INTENSE SETB  (&INTENSE OR &NONDISP)\n&O7      SETA  &O7+32*&PROTECT+16*&NUMERIC+8*&INTENSE+4*&DETECT+2*&NULL\n&C1      SETB  (&GREEN OR &TURQ OR &WHITE OR &YELLOW)\n&C2      SETB  (&RED OR &PINK OR &WHITE OR &YELLOW)\n&C3      SETB  (&BLUE OR &PINK OR &TURQ OR &WHITE)\n&O9      SETA  64*&C1+32*&C2+16*&C3+8*&MONO+4*&UNDER+2*&REVERSE+&BLINK\n         AIF   ((&O7 NE 0 AND &O7 NE 128) OR &O9 NE 0).LONG      86244\n&T       SETA  &T+48         USE FDPRT SHORT FORM                86244\n         AIF   ('&S'(1,1) EQ '''').CSTRPRT                       86244\n         AIF   ('&EXLEN' NE '' AND NOT &SKPLEN).EXLPRT           86244\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&DATA,&LEN,&L&S),SL2(&S),&UEX      89095\n         MEXIT ,                                                 86244\n.EXLPRT  AIF   (K'&EXLEN LT 2).NORLPRT                           86244\n         AIF   ('&EXLEN'(1,1) NE '(' OR '&EXLEN'(2,1) EQ '(').NORLPRT\n&T       SETA  &T+2          ILEN IS REGISTER FORM               86244\n.NORLPRT ANOP  ,                                                 86244\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&DATA,&LEN,&EXLEN),SL2(&S),&UEX    89095\n         MEXIT ,                                                 86244\n.CSTRPRT ANOP  ,                                                 86244\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,1,&LEN,&L.ZFD&C.C),SL2(ZFD&C.C),&UEX\nZFD&C.C  DC    C&S                                               89095\n         MEXIT ,                                                 86244\n.LONG    AIF   ('&S'(1,1) EQ '''').CSTRING                       86244\n         AIF   ('&EXLEN' NE '' AND NOT &SKPLEN).EXLEN\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&O9,&O7,&DATA,&LEN,&L&S),SL2(&S),&UEX\n         MEXIT\n.EXLEN   AIF   (K'&EXLEN LT 2).NORLEN                            81270\n         AIF   ('&EXLEN'(1,1) NE '(' OR '&EXLEN'(2,1) EQ '(').NORLEN\n&T       SETA  &T+2          ILEN IS REGISTER FORM               81270\n.NORLEN  ANOP  ,                                                 81270\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&O9,&O7,&DATA,&LEN,&EXLEN),SL2(&S),&UEX\n         MEXIT ,\n.CSTRING ANOP  ,\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&O9,&O7,1,&LEN,&L.ZFD&C.C),SL2(ZFD&C.C),&*\n               UEX                                               89095\nZFD&C.C  DC    C&S                                               89095\n.MEND    MEND  ,                                                 84214\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDLINE": {"ttr": 5125, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x14\\x00\\x00\\x01\\x05\\x07\\x1f\\x01\\x10#?\\x00Y\\x01\\x11\\x01\\xd1\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.20", "flags": 0, "createdate": "2005-03-12T00:00:00", "modifydate": "2010-08-21T00:59:00", "lines": 273, "newlines": 465, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      FDLINE &ARGS,&END=\n.*\n.*   BUILD ONE DISPLAY LINE DEFINITION FOR THE SCLINE SERVICE\n.*\n.*   FDLINE (FLAGS),LABEL:,(FIELD ATTRIBS),OFF-,TEXT.....   SINGLE DEF.\n.*   FDLINE (FLAGS),fields.....,    (trailing comma)  1/n\n.*   DC or FDLITEM ...                                m/n\n.*   FDLINE *END             GENERATE CLOSING NAME    n/n\n.*\n.*   ATTRIBUTES:\n.*\n.*   IN, OUT, INT(ENSE OUT),  N.B. INTENSE INPUT NOT IMPLEMENTED\n.*   RED, BLUE, GREEN, CYAN, TURQ(OISE), WHITE, YELLOW\n.*   BLACK (NON-DISPLAY)     FORCES INPUT MODE                  GP09355\n.*\n.*   FLAGS:  LADJ   RADJ\n.*           UPPER  SCROLL\n.*           MDT\n.*\n         GBLC  &ZZZLEND      PRIOR/NEXT END LABEL\n         GBLC  &ZZZFLAB      NEXT FIELD LABEL\n         GBLC  &ZZZFLAN      FDLINE STATEMENT LABEL             GP09358\n         LCLC  &LABEL,&C,&D                                     GP09358\n         LCLB  &F0,&F1,&F2,&F3,&F4,&F5,&F6,&F7\n         LCLB  &INP,&INT,&BLACK                                 GP09353\n         LCLA  &I,&J,&K,&L,&M,&N\n         AIF   ('&ARGS' EQ '*END').CLOSED\n         AIF   ('&ZZZLEND' EQ '').PRVENDD\n&ZZZLEND DC    X'00'         PRIOR LINE UNCLOSED\n&ZZZLEND SETC  ''            SHOW LABEL USED\n         MNOTE *,'FDLINE: PRIOR END= NOT DEFINED; GENERATED'\n.PRVENDD ANOP  ,\n&N       SETA  N'&SYSLIST\n&ZZZLEND SETC  '&END'\n         AIF   ('&ZZZLEND' NE '').HAVELAB\n&ZZZLEND SETC  'ZZL'.'&SYSNDX'.'Z'\n.HAVELAB ANOP  ,\n&LABEL   SETC  '&NM'\n         AIF   ('&LABEL' NE '').HAVELOC\n&LABEL   SETC  'ZZL'.'&SYSNDX'.'L'\n.HAVELOC ANOP  ,\n&LABEL   DC    0A(0),AL2(&ZZZLEND-&LABEL-3)  TEXT AND CONTROL LENGTH\n&ZZZFLAN SETC  '&LABEL'      REMEMBER FOR OFFSET                GP09358\n&I       SETA  0\n         AIF   (&N GT 0).ARGSOME  HAVE MULTIPLE ARGUMENTS\n         DC    AL1(0)        FLAGS - NONE\n         AGO   .MEND         NEEDS END= ?                       GP09355\n.ARGSOME AIF   ('&SYSLIST(1)' EQ '').ARGFLGS\n         AIF   ('&SYSLIST(1)'(1,1) EQ '(').ARGFLGS\n         DC    AL1(0)        FLAGS - NONE\n         AGO   .LOOP         START WITH FIRST ARGUMENT\n.ARGFLGS ANOP  ,\n&I       SETA  1             FIRST ARG IS FLAGS; START LOOP AT 2\n&J       SETA  0\n&L       SETA  N'&SYSLIST(1)  NUMBER OF SUBARGUMENTS\n.FGLOOP  AIF   (&J GE &L).EXPFLAG\n&J       SETA  &J+1\n&C       SETC  '&SYSLIST(&I,&J)'\n         AIF   ('&C' EQ '').FGLOOP\n&M       SETA  &M+1\n&F3      SETB  (&F3 OR ('&C' EQ 'LADJ'))\n&F4      SETB  (&F4 OR ('&C' EQ 'RADJ'))\n&F5      SETB  (&F5 OR ('&C' EQ 'UPPER'))\n&F5      SETB  (&F5 OR ('&C' EQ 'UPP'))\n&F6      SETB  (&F6 OR ('&C' EQ 'SCROLL'))\n&F6      SETB  (&F6 OR ('&C' EQ 'SCR'))\n&F7      SETB  (&F7 OR ('&C' EQ 'MDT'))\n         AIF   (&M EQ (&F0+&F1+&F2+&F3+&F4+&F5+&F6+&F7)).FGLOOP\n         MNOTE 4,'FDLINE: INVALID FLAG PARM &C '\n         AGO   .FGLOOP\n.EXPFLAG ANOP  ,\n&ZZZFLAB DC    B'&F0&F1&F2&F3&F4&F5&F6&F7'\n&ZZZFLAB SETC  ''\n.LOOP    AIF   (&I GE &N).DONE\n&I       SETA  &I+1\n&C       SETC  '&SYSLIST(&I)'\n         AIF   ('&C' EQ '').LOOP\n         AIF   ('&C'(1,1) EQ '(').FIELD\n         AIF   ('&C'(1,1) EQ '''').STRING\n         AIF   ('&C'(K'&C,1) EQ ':').LABEL\n         AIF   ('&C'(K'&C,1) EQ '-').OFFSET                     GP09358\n         AIF   ('&C'(1,1) EQ 'C').COUNT\n         AIF   ('&C'(1,1) EQ 'X').HEXER\n         AIF   ('&C'(1,1) GE '0' AND '&C'(1,1) LE '9').COUNT\n.ARGBAD  MNOTE 8,'FDLINE: ARGUMENT &I INVALID - &C NOT A VALID ENTRY'\n         AGO   .LOOP\n.*\n.STRING  ANOP  ,\n&ZZZFLAB DC    C&C\n&ZZZFLAB SETC  ''\n         AGO   .LOOP\n.*\n.COUNT   AIF   ('&C'(K'&C,1) NE '''').COUNTS\n&ZZZFLAB DC    &C\n&ZZZFLAB SETC  ''\n         AGO   .LOOP\n.COUNTS  ANOP  ,\n&ZZZFLAB DC    &C' '\n&ZZZFLAB SETC  ''\n         AGO   .LOOP\n.HEXER   AIF   ('&C'(K'&C,1) NE '''').HEXED\n&ZZZFLAB DC    &C\n&ZZZFLAB SETC  ''\n         AGO   .LOOP\n.HEXED   ANOP  ,\n&ZZZFLAB DC    &C'0'\n&ZZZFLAB SETC  ''\n         AGO   .LOOP\n.*\n.FIELD   ANOP  ,\n&J       SETA  0\n&L       SETA  N'&SYSLIST(&I)  NUMBER OF SUBARGUMENTS\n&F0      SETB  0             MUST BE OFF\n&F1      SETB  0             MUST BE OFF (RANGE 01-3F)\n&F2      SETB  0\n&F3      SETB  0        1 0  OUTPUT  ;  1 1  OUT INTENSE\n&F4      SETB  0        0 1  INPUT   ;  1 1  OUT INTENSE\n&F5      SETB  0             COLOR: GREEN\n&F6      SETB  0             COLOR: RED\n&F7      SETB  0             COLOR: BLUE\n&INP     SETB  0             INPUT                              GP09355\n&INT     SETB  0             INTENSE                            GP09355\n&BLACK   SETB  0             NON-DISPLAY                        GP09355\n.FDLOOP  AIF   (&J GE &L).EXPFLD\n&J       SETA  &J+1\n&C       SETC  '&SYSLIST(&I,&J)'\n         AIF   ('&C' EQ '').FDLOOP\n.*DEFER* AIF   ('&C' EQ 'REVERSE').REVERSE\n.*DEFER* AIF   ('&C' EQ 'BLINK').BLINK\n.*DEFER* AIF   ('&C' EQ 'UNDER').UNDER\n.*DEFER* AIF   ('&C' EQ 'DFLT').NULL\n         AIF   ('&C' EQ 'BL').BLUE\n         AIF   ('&C' EQ 'RE').RED\n         AIF   ('&C' EQ 'PI').PINK\n         AIF   ('&C' EQ 'MA').PINK\n         AIF   ('&C' EQ 'GR').GREEN\n         AIF   ('&C' EQ 'CY').TURQ\n         AIF   ('&C' EQ 'TU').TURQ\n         AIF   ('&C' EQ 'YE').YELLOW\n         AIF   ('&C' EQ 'WH').WHITE\n         AIF   ('&C' EQ 'BK').BLACK                             GP09355\n         AIF   ('&C' EQ 'ND').BLACK                             GP09355\n         AIF   ('&C' EQ 'BLUE').BLUE\n         AIF   ('&C' EQ 'RED').RED\n         AIF   ('&C' EQ 'PINK').PINK\n         AIF   ('&C' EQ 'MAGENTA').PINK\n         AIF   ('&C' EQ 'GREEN').GREEN\n         AIF   ('&C' EQ 'CYAN').TURQ\n         AIF   ('&C' EQ 'TURQ').TURQ\n         AIF   ('&C' EQ 'TURQOISE').TURQ\n         AIF   ('&C' EQ 'YELLOW').YELLOW\n         AIF   ('&C' EQ 'WHITE').WHITE\n         AIF   ('&C' EQ 'BLACK').BLACK                          GP09355\n         AIF   ('&C' EQ 'IN').INPUT\n         AIF   ('&C' EQ 'INPUT').INPUT\n         AIF   ('&C' EQ 'OUT').OUTPUT\n         AIF   ('&C' EQ 'INT').INTENSE\n         AIF   ('&C' EQ 'INTENSE').INTENSE\n       MNOTE 8,'FDLINE: ARGUMENT &I,&J INVALID - &C NOT A VALID ENTRY'\n         AGO   .FDLOOP\n.BLUE    ANOP  ,\n&F5      SETB  0\n&F6      SETB  0\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.RED     ANOP  ,\n&F5      SETB  0\n&F6      SETB  1\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.PINK    ANOP  ,\n&F5      SETB  0\n&F6      SETB  1\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.GREEN   ANOP  ,\n&F5      SETB  1\n&F6      SETB  0\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.TURQ    ANOP  ,\n&F5      SETB  1\n&F6      SETB  0\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.YELLOW  ANOP  ,\n&F5      SETB  1\n&F6      SETB  1\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.WHITE   ANOP  ,\n&F5      SETB  1\n&F6      SETB  1\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.BLACK   ANOP  ,                                                GP09355\n&F5      SETB  0                                                GP09355\n&F6      SETB  0                                                GP09355\n&F7      SETB  1             FORCE NON-ZERO                     GP09355\n&BLACK   SETB  1             NON-DISPLAY FLAG                   GP09355\n         AGO   .FDLOOP                                          GP09355\n.*\n.INPUT   ANOP\n&INP     SETB  1                                                GP08356\n&F3      SETB  0\n&F4      SETB  1\n         AIF   (&INT).CONFII                                    GP08356\n         AGO   .FDLOOP\n.*\n.OUTPUT  ANOP  ,\n&F3      SETB  1\n&F4      SETB  0\n         AGO   .FDLOOP\n.*\n.INTENSE ANOP  ,\n&INT     SETB  1                                                GP08356\n&F4      SETB  1\n         AIF   (&INP).CONFII                                    GP08356\n&F3      SETB  1\n         AGO   .FDLOOP\n.CONFII  MNOTE *,'FDLINE: INTENSE INPUT NOT IMPLEMENTED'        GP08356\n         AGO   .FDLOOP                                          GP08356\n.*\n.EXPFLD  AIF   (NOT &BLACK).EXPFLD1                             GP09355\n&F4      SETB  0             FORCED INPUT MODE                  GP09353\n         AIF   (NOT &F3).EXPFLD2                                GP09353\n    MNOTE 4,'FDLINE: CONFLICTING NON-DISPLAY AND OUTPUT ATTR &I'\n.EXPFLD1 AIF   (&F3 OR &F4).EXPFLD2\n&F3      SETB  1             OUTPUT IS DEFAULT\n.EXPFLD2 ANOP  ,\n&ZZZFLAB DC    B'&F0&F1&F2&F3&F4&F5&F6&F7'\n&ZZZFLAB SETC  ''\n&INT     SETB  0                                                GP08356\n&INP     SETB  0                                                GP08356\n         AGO   .LOOP\n.*\n.LABEL   AIF   ('&ZZZFLAB' EQ '').LABNEW\n&ZZZFLAB DC    X'00'         ERROR ?\n         MNOTE 0,'FDLINE: CONSECUTIVE LABELS &ZZZFLAB AND &C '\n.LABNEW  ANOP  ,\n&ZZZFLAB SETC  '&C'(1,K'&C-1)\n         AGO   .LOOP\n.*\n.OFFSET  ANOP  ,                                                GP09358\n&D       SETC  '&C'(1,K'&C-1)                                   GP09358\n&D       EQU   *-&ZZZFLAN    FIELD OFFSET (NO LEN)              GP09358\n         AGO   .LOOP                                            GP09358\n.*\n.DONE    AIF   ('&ZZZFLAB' EQ '').DONEL\n&ZZZFLAB DC    X'00'         ERROR ?                            GP09355\n&ZZZFLAB SETC  ''\n.DONEL   AIF   ('&ZZZLEND' EQ '').DONED\n         AIF   ('&SYSLIST(&N)' EQ '').MEND   CONTINUATION       GP09355\n.*       AGO   .CLOSED                                          GP09355\n.DONED   AIF   ('&END' NE '').MEND   REMOTE END\n.*\n.CLOSER  AIF   ('&ZZZFLAB' EQ '').CLOSED\n&ZZZFLAB DC    X'00'         ERROR ?\n&ZZZFLAB SETC  ''\n         AGO   .MEND\n.CLOSED  AIF   ('&ZZZLEND' EQ '').MEND\n&ZZZLEND DC    X'00'\n&ZZZLEND SETC  ''\n.*\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FDLITEM": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x05\\x00\\x00\\x01\\x062\\x9f\\x01\\t5\\x8f\\x15Y\\x00\\xe3\\x00\\xc3\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.05", "flags": 0, "createdate": "2006-11-25T00:00:00", "modifydate": "2009-12-24T15:59:00", "lines": 227, "newlines": 195, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      FDLITEM &ARGS\n.*\n.*   BUILD ONE DISPLAY ITEM DEFINITION FOR THE SCLINE SERVICE\n.*\n.*   USE AFTER  FDLINE ...END=name                    1/n\n.*   FDLITEM LABEL:,(FIELD ATTRIBS),LBL:,TEXT.....    2/n\n.*   DC or whatever                                   m/n\n.*   FDLINE *END             GENERATE CLOSING NAME    n/n\n.*\n.*   ATTRIBUTES:\n.*\n.*   IN, OUT, INT(ENSE OUT),\n.*   RED, BLUE, GREEN, CYAN, TURQ(OISE), WHITE, YELLOW\n.*   BLACK (NON-DISPLAY) - FORCES INPUT MODE                    GP09353\n.*\n.*   THIS MACRO GENERATES NEITHER THE LINE NOR FLAG FIELDS; USE FDLINE\n.*   FOR THOSE\n.*\n         GBLC  &ZZZLEND      PRIOR/NEXT END LABEL\n         GBLC  &ZZZFLAB      NEXT FIELD LABEL\n         GBLC  &ZZZFLAN      FDLINE  LABEL                      GP09358\n         LCLC  &LABEL,&C,&FLAB,&D                               GP09358\n         LCLB  &F0,&F1,&F2,&F3,&F4,&F5,&F6,&F7\n         LCLB  &INP,&INT,&BLACK                                 GP09353\n         LCLA  &I,&J,&K,&L,&M,&N\n         AIF   ('&ARGS' EQ '*END').CLOSER\n&N       SETA  N'&SYSLIST\n&LABEL   SETC  '&NM'\n&I       SETA  0\n         AIF   (&N GT 0).LOOP     HAVE MULTIPLE ARGUMENTS\n         MNOTE 0,'FDLITEM: NO ARGUMENTS SUPPLIED'\n         AGO   .DONE\n.LOOP    AIF   (&I GE &N).DONE\n&I       SETA  &I+1\n&C       SETC  '&SYSLIST(&I)'\n         AIF   ('&C' EQ '').LOOP\n         AIF   ('&C'(1,1) EQ '(').FIELD\n         AIF   ('&C'(1,1) EQ '''').STRING\n         AIF   ('&C'(K'&C,1) EQ ':').LABEL\n         AIF   ('&C'(K'&C,1) EQ '-').OFFSET\n         AIF   ('&C'(1,1) EQ 'C').COUNT\n         AIF   ('&C'(1,1) EQ 'X').HEXER\n         AIF   ('&C'(1,1) GE '0' AND '&C'(1,1) LE '9').COUNT\n.ARGBAD  MNOTE 8,'FDLITEM: ARGUMENT &I INVALID - &C NOT A VALID ENTRY'\n         AGO   .LOOP\n.*\n.STRING  ANOP  ,\n&LABEL   DC    C&C\n&LABEL   SETC  ''\n         AGO   .LOOP\n.*\n.COUNT   AIF   ('&C'(K'&C,1) NE '''').COUNTS\n&LABEL   DC    &C\n&LABEL   SETC  ''\n         AGO   .LOOP\n.COUNTS  ANOP  ,\n&LABEL   DC    &C' '\n&LABEL   SETC  ''\n         AGO   .LOOP\n.HEXER   AIF   ('&C'(K'&C,1) NE '''').HEXED\n&LABEL   DC    &C\n&LABEL   SETC  ''\n         AGO   .LOOP\n.HEXED   ANOP  ,\n&LABEL   DC    &C'0'\n&LABEL   SETC  ''\n         AGO   .LOOP\n.*\n.FIELD   ANOP  ,\n&J       SETA  0\n&L       SETA  N'&SYSLIST(&I)  NUMBER OF SUBARGUMENTS\n&F0      SETB  0             MUST BE OFF\n&F1      SETB  0             MUST BE OFF (RANGE 01-3F)\n&F2      SETB  0\n&F3      SETB  0        1 0  OUTPUT  ;  1 1  OUT INTENSE\n&F4      SETB  0        0 1  INPUT   ;  0 0  NON-DISPLAY\n&F5      SETB  0             COLOR: GREEN\n&F6      SETB  0             COLOR: RED\n&F7      SETB  0             COLOR: BLUE\n&INP     SETB  0             INPUT                              GP09353\n&INT     SETB  0             INTENSE                            GP09353\n&BLACK   SETB  0             NON-DISPLAY                        GP09353\n.FDLOOP  AIF   (&J GE &L).EXPFLD\n&J       SETA  &J+1\n&C       SETC  '&SYSLIST(&I,&J)'\n         AIF   ('&C' EQ '').FDLOOP\n.*DEFER* AIF   ('&C' EQ 'REVERSE').REVERSE\n.*DEFER* AIF   ('&C' EQ 'BLINK').BLINK\n.*DEFER* AIF   ('&C' EQ 'UNDER').UNDER\n.*DEFER* AIF   ('&C' EQ 'DFLT').NULL\n         AIF   ('&C' EQ 'BL').BLUE\n         AIF   ('&C' EQ 'RE').RED\n         AIF   ('&C' EQ 'PI').PINK\n         AIF   ('&C' EQ 'MA').PINK\n         AIF   ('&C' EQ 'GR').GREEN\n         AIF   ('&C' EQ 'CY').TURQ\n         AIF   ('&C' EQ 'TU').TURQ\n         AIF   ('&C' EQ 'YE').YELLOW\n         AIF   ('&C' EQ 'WH').WHITE\n         AIF   ('&C' EQ 'BK').BLACK                             GP09353\n         AIF   ('&C' EQ 'ND').BLACK                             GP09353\n         AIF   ('&C' EQ 'IN').INPUT\n         AIF   ('&C' EQ 'BLUE').BLUE\n         AIF   ('&C' EQ 'RED').RED\n         AIF   ('&C' EQ 'PINK').PINK\n         AIF   ('&C' EQ 'MAGENTA').PINK\n         AIF   ('&C' EQ 'GREEN').GREEN\n         AIF   ('&C' EQ 'CYAN').TURQ\n         AIF   ('&C' EQ 'TURQ').TURQ\n         AIF   ('&C' EQ 'TURQOISE').TURQ\n         AIF   ('&C' EQ 'YELLOW').YELLOW\n         AIF   ('&C' EQ 'WHITE').WHITE\n         AIF   ('&C' EQ 'BLACK').BLACK                          GP09353\n         AIF   ('&C' EQ 'INPUT').INPUT\n         AIF   ('&C' EQ 'OUT').OUTPUT\n         AIF   ('&C' EQ 'INT').INTENSE\n         AIF   ('&C' EQ 'INTENSE').INTENSE\n       MNOTE 8,'FDLITEM: ARGUMENT &I,&J INVALID - &C NOT A VALID ENTRY'\n         AGO   .FDLOOP\n.BLUE    ANOP  ,\n&F5      SETB  0\n&F6      SETB  0\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.RED     ANOP  ,\n&F5      SETB  0\n&F6      SETB  1\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.PINK    ANOP  ,\n&F5      SETB  0\n&F6      SETB  1\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.GREEN   ANOP  ,\n&F5      SETB  1\n&F6      SETB  0\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.TURQ    ANOP  ,\n&F5      SETB  1\n&F6      SETB  0\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.YELLOW  ANOP  ,\n&F5      SETB  1\n&F6      SETB  1\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.WHITE   ANOP  ,\n&F5      SETB  1\n&F6      SETB  1\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.BLACK   ANOP  ,                                                GP09353\n&F5      SETB  0                                                GP09353\n&F6      SETB  0                                                GP09353\n&F7      SETB  1             FORCE NON-ZERO                     GP09353\n&BLACK   SETB  1                                                GP09353\n         AGO   .FDLOOP\n.*\n.INPUT   ANOP\n&F3      SETB  0\n&F4      SETB  1\n&INP     SETB  1                                                GP08356\n         AIF   (&INT).CONFII                                    GP08356\n         AGO   .FDLOOP\n.*\n.OUTPUT  ANOP  ,\n&F3      SETB  1\n&F4      SETB  0\n         AGO   .FDLOOP\n.*\n.INTENSE ANOP  ,\n&F4      SETB  1\n&INT     SETB  1                                                GP08356\n         AIF   (&INP).CONFII                                    GP08356\n&F3      SETB  1\n         AGO   .FDLOOP\n.CONFII  MNOTE *,'FDLITEM: INTENSE INPUT NOT SUPPORTED'         GP08356\n         AGO   .FDLOOP                                          GP08356\n.*\n.EXPFLD  AIF   (NOT &BLACK).EXPFLD1                             GP09353\n&F4      SETB  0             FORCED INPUT MODE                  GP09353\n         AIF   (NOT &F3).EXPFLD2                                GP09353\n         MNOTE 4,'FDLITEM: CONFLICTING NON-DISPLAY & OUTPUT ATTR &I'\n.EXPFLD1 AIF   (&F3 OR &F4).EXPFLD2\n&F3      SETB  1             OUTPUT IS DEFAULT\n.EXPFLD2 ANOP  ,\n&LABEL   DC    B'&F0&F1&F2&F3&F4&F5&F6&F7'\n&LABEL   SETC  ''\n&INP     SETB  0                                                GP08356\n&INT     SETB  0                                                GP08356\n         AGO   .LOOP\n.*\n.LABEL   AIF   ('&LABEL' EQ '').LABNEW\n         MNOTE 0,'FDLITEM: CONSECUTIVE LABELS &LABEL AND &C '\n&LABEL   DS    0X\n.LABNEW  ANOP  ,\n&LABEL   SETC  '&C'(1,K'&C-1)\n         AGO   .LOOP\n.*\n.OFFSET  ANOP  ,                                                GP09358\n&D       SETC  '&C'(1,K'&C-1)                                   GP09358\n&D       EQU   *-&ZZZFLAN    FIELD OFFSET (NO LEN)              GP09358\n         AGO   .LOOP                                            GP09358\n.*\n.DONE    AIF   ('&LABEL' EQ '').MEND\n&LABEL   DS    0X\n         AGO   .MEND\n.*\n.CLOSER  AIF   ('&LABEL  ' EQ '').CLOSED\n&ZZZFLAB DC    X'00'         ERROR ?\n&ZZZFLAB SETC  ''\n.CLOSED  AIF   ('&ZZZLEND' EQ '').MEND\n&ZZZLEND DC    X'00'\n&ZZZLEND SETC  ''\n.*\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FDLSET": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x120?\\x01\\x125\\x7f#\\x06\\x00\\xb2\\x00\\xab\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2012-10-29T00:00:00", "modifydate": "2012-12-22T23:06:00", "lines": 178, "newlines": 171, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                       ADDED ON GP12303\n&NM      FDLSET &FIELD,&ATTR1,&ATTR2 ...\n.*\n.*   SET OR ALTER A FIELD ATTRIBUTE IN A DISPLAY LINE DEFINED\n.*   WITH FDLINE OR FDLITEM MACROS, FOR THE SCLINE SERVICE.\n.*\n.*   FIRST POSITIONAL IS THE ADDRESS OF THE FIELD ATTRIBUTE\n.*     TO BE CHANGED\n.*   SECOND AND SUBSEQUENT POSITIONALS ARE THE ATTRIBUTES\n.*     COLOR, HIGH-LIGHTING, AND INPUT VS. OUTPUT\n.*     THE SECOND, AND ONLY SECOND, OPERAND MAY BE A LIST, SIMILAR TO\n.*       FDLINE AND FDLITEM ENTRIES.\n.*   ATTRIBUTES:\n.*\n.*   IN, OUT, INT(ENSE OUT),\n.*   RED, BLUE, GREEN, CYAN, TURQ(OISE), WHITE, YELLOW\n.*   BLACK (NON-DISPLAY) - FORCES INPUT MODE\n.*\n.*   THIS MACRO GENERATES NEITHER THE LINE NOR FLAG FIELDS; USE FDLINE\n.*   OR FDLITEM FOR THOSE\n.*\n.*   EXAMPLE:\n.*       FDLINE (UPPER,LADJ),(GR),'Cmd:',CL40,MSGCOL:,(CY),ERRMSG:,CL39\n.*   the message will be cyan (light blue)\n.*   To change it to yellow, use\n.*       FDLSET MSGCOL,YE\n.*   or intense red\n.*       FDLSET MSGCOL,INT,RED\n.*\n.*\n         LCLC  &C,&D\n         LCLB  &F0,&F1,&F2,&F3,&F4,&F5,&F6,&F7\n         LCLB  &INP,&INT,&BLACK\n         LCLA  &I,&J,&K,&L,&M,&N,&NN,&NJ                        GP12357\n&N       SETA  N'&SYSLIST\n         AIF   (&N GT 1).FIELD    HAVE MULTIPLE ARGUMENTS\n         MNOTE 4,'FDLSET: NO ATTRIBUTES SUPPLIED'\n         MEXIT ,\n.*\n.FIELD   ANOP  ,\n&J       SETA  1             START WITH SECOND\n&L       SETA  N'&SYSLIST    NUMBER OF ARGUMENTS\n&F0      SETB  0             MUST BE OFF\n&F1      SETB  0             MUST BE OFF (RANGE 01-3F)\n&F2      SETB  0\n&F3      SETB  0   DFLT 1 0  OUTPUT  ;  1 1  OUT INTENSE\n&F4      SETB  0        0 1  INPUT   ;  0 0  NON-DISPLAY\n&F5      SETB  0             COLOR: GREEN\n&F6      SETB  0             COLOR: RED\n&F7      SETB  0             COLOR: BLUE\n&INP     SETB  0             INPUT\n&INT     SETB  0             INTENSE\n&BLACK   SETB  0             NON-DISPLAY\n.FDLOOM  AIF   (&J GE &L).EXPFLD\n&J       SETA  &J+1\n&NJ      SETA  0                                                GP12357\n&NN      SETA  N'&SYSLIST(&J)                                   GP12357\n.FDLOOP  AIF   (&NJ GE &NN).FDLOOM                              GP12357\n&NJ      SETA  &NJ+1                                            GP12357\n.*                                                              GP12357\n&C       SETC  '&SYSLIST(&J,&NJ)'                               GP12357\n         AIF   ('&C' EQ '').FDLOOP\n.*DEFER* AIF   ('&C' EQ 'REVERSE').REVERSE\n.*DEFER* AIF   ('&C' EQ 'BLINK').BLINK\n.*DEFER* AIF   ('&C' EQ 'UNDER').UNDER\n.*DEFER* AIF   ('&C' EQ 'DFLT').NULL\n         AIF   ('&C' EQ 'BL').BLUE\n         AIF   ('&C' EQ 'RE').RED\n         AIF   ('&C' EQ 'PI').PINK\n         AIF   ('&C' EQ 'MA').PINK\n         AIF   ('&C' EQ 'GR').GREEN\n         AIF   ('&C' EQ 'CY').TURQ\n         AIF   ('&C' EQ 'TU').TURQ\n         AIF   ('&C' EQ 'YE').YELLOW\n         AIF   ('&C' EQ 'WH').WHITE\n         AIF   ('&C' EQ 'BK').BLACK\n         AIF   ('&C' EQ 'ND').BLACK\n         AIF   ('&C' EQ 'IN').INPUT\n         AIF   ('&C' EQ 'BLUE').BLUE\n         AIF   ('&C' EQ 'RED').RED\n         AIF   ('&C' EQ 'PINK').PINK\n         AIF   ('&C' EQ 'MAGENTA').PINK\n         AIF   ('&C' EQ 'GREEN').GREEN\n         AIF   ('&C' EQ 'CYAN').TURQ\n         AIF   ('&C' EQ 'TURQ').TURQ\n         AIF   ('&C' EQ 'TURQOISE').TURQ\n         AIF   ('&C' EQ 'YELLOW').YELLOW\n         AIF   ('&C' EQ 'WHITE').WHITE\n         AIF   ('&C' EQ 'BLACK').BLACK\n         AIF   ('&C' EQ 'INPUT').INPUT\n         AIF   ('&C' EQ 'OUT').OUTPUT\n         AIF   ('&C' EQ 'INT').INTENSE\n         AIF   ('&C' EQ 'INTENSE').INTENSE\n&I       SETA  &J-1\n       MNOTE 8,'FDLSET: ATTRIBUTE &I INVALID - &C NOT A VALID ENTRY'\n         AGO   .FDLOOP\n.BLUE    ANOP  ,\n&F5      SETB  0\n&F6      SETB  0\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.RED     ANOP  ,\n&F5      SETB  0\n&F6      SETB  1\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.PINK    ANOP  ,\n&F5      SETB  0\n&F6      SETB  1\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.GREEN   ANOP  ,\n&F5      SETB  1\n&F6      SETB  0\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.TURQ    ANOP  ,\n&F5      SETB  1\n&F6      SETB  0\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.YELLOW  ANOP  ,\n&F5      SETB  1\n&F6      SETB  1\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.WHITE   ANOP  ,\n&F5      SETB  1\n&F6      SETB  1\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.BLACK   ANOP  ,\n&F3      SETB  0\n&F4      SETB  0\n&F5      SETB  0\n&F6      SETB  0\n&F7      SETB  1             FORCE NON-ZERO\n&BLACK   SETB  1\n         AGO   .FDLOOP\n.*\n.INPUT   ANOP\n&F3      SETB  0\n&F4      SETB  1\n&INP     SETB  1\n         AIF   (&INT).CONFII\n         AGO   .FDLOOP\n.*\n.OUTPUT  ANOP  ,\n&F3      SETB  1\n&F4      SETB  0\n         AGO   .FDLOOP\n.*\n.INTENSE ANOP  ,\n&F4      SETB  1\n&INT     SETB  1\n         AIF   (&INP).CONFII\n&F3      SETB  1\n         AGO   .FDLOOP\n.CONFII  MNOTE *,'FDLSET: INTENSE INPUT NOT SUPPORTED'\n         AGO   .FDLOOP\n.*\n.EXPFLD  AIF   (NOT &BLACK).EXPFLD1\n&F4      SETB  0             FORCED INPUT MODE\n         AIF   (NOT &F3).EXPFLD2\n         MNOTE 4,'FDLSET: CONFLICTING NON-DISPLAY AND OUTPUT ATTR &I'\n.EXPFLD1 AIF   (&F3 OR &F4).EXPFLD2\n&F3      SETB  1             OUTPUT IS DEFAULT\n.*\n.EXPFLD2 ANOP  ,\n&NM      MVI   &FIELD,B'&F0&F1&F2&F3&F4&F5&F6&F7'\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FDLVAL": {"ttr": 5384, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x13 O\\x01\\x13 O\\x173\\x00\\xf2\\x00\\xf2\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2013-07-23T00:00:00", "modifydate": "2013-07-23T17:33:00", "lines": 242, "newlines": 242, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                       ADDED ON GP12303\n&NM      FDLVAL &ATTR1,&ATTR2,&FROM=\n.*\n.*   INNER MACRO FOR FDLINE,FDLITEM, AND FDLSET TO DERIVE BIT\n.*   COMBINATIONS FOR ATTRIBUTE CONTROL BYTES\n.*\n.*   ATTRIBUTES:\n.*     COLOR, HIGH-LIGHTING, AND INPUT VS. OUTPUT\n.*     THE FIRST, AND ONLY FIRST, OPERAND MAY BE A LIST, SIMILAR TO\n.*       FDLINE AND FDLITEM ENTRIES.\n.*\n.*   IN, OUT, INT(ENSE OUT),\n.*   RED, BLUE, GREEN, CYAN, TURQ(OISE), WHITE, YELLOW\n.*   BLACK (NON-DISPLAY) - FORCES INPUT MODE\n.*\n.*   THIS MACRO GENERATES NEITHER THE LINE NOR FLAG FIELDS; USE FDLINE\n.*   OR FDLITEM FOR THOSE\n.*\n.*\n         GBLB  &MACBIT0,&MACBIT1,&MACBIT2,&MACBIT3\n         GBLB  &MACBIT4,&MACBIT5,&MACBIT6,&MACBIT7\n         GBLB  &MACPERR,&MACPNUL\n.*\n         LCLC  &C,&D,&MOD\n         LCLB  &F0,&F1,&F2,&F3,&F4,&F5,&F6,&F7\n         LCLB  &INP,&INT,&BLACK,&UCOL,&UHI\n         LCLA  &I,&J,&K,&L,&M,&N,&NN,&NJ                        GP12357\n&N       SETA  N'&SYSLIST\n         AIF   (&N GE 1).FIELD    HAVE MULTIPLE ARGUMENTS\n         MNOTE 4,'FDLVAL: NO ATTRIBUTES SUPPLIED'\n&MACPERR SETB  1\n&MACPNUL SETB  1\n         MEXIT ,\n.*\n.FIELD   ANOP  ,\n&MOD     SETC  '&FROM'\n         AIF   ('&MOD' NE '').OKMOD\n&MOD     SETC  'FDLVAL'\n.OKMOD   ANOP  ,\n&MACBIT0 SETB  0\n&MACBIT1 SETB  0\n&MACBIT2 SETB  0\n&MACBIT3 SETB  0\n&MACBIT4 SETB  0\n&MACBIT5 SETB  0\n&MACBIT6 SETB  0\n&MACBIT7 SETB  0\n.*\n&J       SETA  0             START WITH FIRST\n&L       SETA  N'&SYSLIST    NUMBER OF ARGUMENTS\n&F0      SETB  0             MUST BE OFF\n&F1      SETB  0             MUST BE OFF (RANGE 01-3F)\n&F2      SETB  0\n&F3      SETB  0   DFLT 1 0  OUTPUT  ;  1 1  OUT INTENSE\n&F4      SETB  0        0 1  INPUT   ;  0 0  NON-DISPLAY\n&F5      SETB  0             COLOR: GREEN\n&F6      SETB  0             COLOR: RED\n&F7      SETB  0             COLOR: BLUE\n&INP     SETB  0             INPUT\n&INT     SETB  0             INTENSE\n&BLACK   SETB  0             NON-DISPLAY\n.FDLOOM  AIF   (&J GE &L).EXPFLD\n&J       SETA  &J+1\n&NJ      SETA  0                                                GP12357\n&NN      SETA  N'&SYSLIST(&J)                                   GP12357\n.FDLOOP  AIF   (&NJ GE &NN).FDLOOM                              GP12357\n&NJ      SETA  &NJ+1                                            GP12357\n.*                                                              GP12357\n&C       SETC  '&SYSLIST(&J,&NJ)'                               GP12357\n         AIF   ('&C' EQ '').FDLOOP\n         AIF   ('&C' EQ 'REVERSE').REVERSE\n         AIF   ('&C' EQ 'BLINK').BLINK\n         AIF   ('&C' EQ 'UNDER').UNDER\n         AIF   ('&C' EQ 'DFLT').NULL\n         AIF   ('&C' EQ 'BL').BLUE\n         AIF   ('&C' EQ 'RE').RED\n         AIF   ('&C' EQ 'PI').PINK\n         AIF   ('&C' EQ 'MA').PINK\n         AIF   ('&C' EQ 'GR').GREEN\n         AIF   ('&C' EQ 'CY').TURQ\n         AIF   ('&C' EQ 'TU').TURQ\n         AIF   ('&C' EQ 'YE').YELLOW\n         AIF   ('&C' EQ 'WH').WHITE\n         AIF   ('&C' EQ 'BK').BLACK\n         AIF   ('&C' EQ 'ND').BLACK\n         AIF   ('&C' EQ 'IN').INPUT\n         AIF   ('&C' EQ 'BLUE').BLUE\n         AIF   ('&C' EQ 'RED').RED\n         AIF   ('&C' EQ 'PINK').PINK\n         AIF   ('&C' EQ 'MAGENTA').PINK\n         AIF   ('&C' EQ 'GREEN').GREEN\n         AIF   ('&C' EQ 'CYAN').TURQ\n         AIF   ('&C' EQ 'TURQ').TURQ\n         AIF   ('&C' EQ 'TURQOISE').TURQ\n         AIF   ('&C' EQ 'YELLOW').YELLOW\n         AIF   ('&C' EQ 'WHITE').WHITE\n         AIF   ('&C' EQ 'BLACK').BLACK\n         AIF   ('&C' EQ 'INPUT').INPUT\n         AIF   ('&C' EQ 'OUT').OUTPUT\n         AIF   ('&C' EQ 'INT').INTENSE\n         AIF   ('&C' EQ 'INTENSE').INTENSE\n&I       SETA  &J-1\n       MNOTE 8,'&MOD: ATTRIBUTE &I INVALID - &C NOT A VALID ENTRY'\n         AGO   .FDLOOP\n.BLUE    AIF   (&UCOL).DUPE\n         AIF   (&UHI).CONFL\n&UCOL    SETB  1\n&F5      SETB  0\n&F6      SETB  0\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.RED     AIF   (&UCOL).DUPE\n         AIF   (&UHI).CONFL\n&UCOL    SETB  1\n&F5      SETB  0\n&F6      SETB  1\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.PINK    AIF   (&UCOL).DUPE\n         AIF   (&UHI).CONFL\n&UCOL    SETB  1\n&F5      SETB  0\n&F6      SETB  1\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.GREEN   AIF   (&UCOL).DUPE\n         AIF   (&UHI).CONFL\n&UCOL    SETB  1\n&F5      SETB  1\n&F6      SETB  0\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.TURQ    AIF   (&UCOL).DUPE\n         AIF   (&UHI).CONFL\n&UCOL    SETB  1\n&F5      SETB  1\n&F6      SETB  0\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.YELLOW  AIF   (&UCOL).DUPE\n         AIF   (&UHI).CONFL\n&UCOL    SETB  1\n&F5      SETB  1\n&F6      SETB  1\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.WHITE   AIF   (&UCOL).DUPE\n         AIF   (&UHI).CONFL\n&UCOL    SETB  1\n&F5      SETB  1\n&F6      SETB  1\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.BLACK   AIF   (&UCOL).DUPE\n         AIF   (&UHI).CONFL\n&UCOL    SETB  1\n&F3      SETB  0\n&F4      SETB  0\n&F5      SETB  0\n&F6      SETB  0\n&F7      SETB  1             FORCE NON-ZERO\n&BLACK   SETB  1\n         AGO   .FDLOOP\n.*\n.BLINK   AIF   (&UCOL).CONFL\n&UHI     SETB  1\n&F2      SETB  1\n&F7      SETB  1\n         AGO   .FDLOOP\n.*\n.REVERSE AIF   (&UCOL).CONFL\n&UHI     SETB  1\n&F2      SETB  1\n&F6      SETB  1\n         AGO   .FDLOOP\n.*\n.UNDER   AIF   (&UCOL).CONFL\n&UHI     SETB  1\n&F2      SETB  1\n&F5      SETB  1\n         AGO   .FDLOOP\n.*\n.NULL    AIF   (&UCOL).CONFL\n&UHI     SETB  1\n&F2      SETB  1\n&F5      SETB  0\n&F6      SETB  0\n&F7      SETB  0\n         AGO   .FDLOOP\n.*\n.INPUT   ANOP\n&F3      SETB  0\n&F4      SETB  1\n&INP     SETB  1\n         AIF   (&INT).CONFII\n         AGO   .FDLOOP\n.*\n.OUTPUT  ANOP  ,\n&F3      SETB  1\n&F4      SETB  0\n         AGO   .FDLOOP\n.*\n.INTENSE ANOP  ,\n&F4      SETB  1\n&INT     SETB  1\n         AIF   (&INP).CONFII\n&F3      SETB  1\n         AGO   .FDLOOP\n.CONFII  MNOTE *,'&MOD: INTENSE INPUT NOT SUPPORTED'\n         AGO   .FDLOOP\n.*\n.CONFL MNOTE 8,'&MOD: CONFLICT - COLOR AND HIGH-LIGHTING NOT SUPPORTED'\n         AGO   .FDLOOP\n.*\n.DUPE    MNOTE 8,'&MOD: ERROR - COLOR PREVIOUSLY SPECIFIED'\n         AGO   .FDLOOP\n.*\n.EXPFLD  AIF   (NOT &BLACK).EXPFLD1\n&F4      SETB  0             FORCED INPUT MODE\n         AIF   (NOT &F3).EXPFLD2\n         MNOTE 4,'&MOD: CONFLICTING NON-DISPLAY AND OUTPUT ATTR &I'\n.EXPFLD1 AIF   (&F3 OR &F4).EXPFLD2\n&F3      SETB  1             OUTPUT IS DEFAULT\n.*\n.EXPFLD2 ANOP  ,\n&MACBIT0 SETB  (&F0)\n&MACBIT1 SETB  (&F1)\n&MACBIT2 SETB  (&F2)\n&MACBIT3 SETB  (&F3)\n&MACBIT4 SETB  (&F4)\n&MACBIT5 SETB  (&F5)\n&MACBIT6 SETB  (&F6)\n&MACBIT7 SETB  (&F7)\n MNOTE 0,'&MOD: &F0 &F1 &F2 &F3 &F4 &F5 &F6 &F7 '\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDMODE": {"ttr": 5389, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDMODE &S                                    ADDED ON   92307\n         GBLA  &FDCNTR\n         LCLA  &T,&C,&B1,&B2\n         LCLC  &FDCHN\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&S' NE 'END' AND '&S' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS AIF   ('&S' EQ '24' OR '&S' EQ 'AM24').EXPAND\n&B1      SETA  1              SET 31-BIT ADDRESSING MODE\n         AIF   ('&S' EQ '31' OR '&S' EQ 'AM31').EXPAND\n         MNOTE 8,'UNSUPPORTED MODE VALUE &S '\n         MEXIT ,\n.EXPAND  ANOP  ,\n&T       SETA  8+16\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL1(&B1,&B2)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDOPT": {"ttr": 5633, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDOPT &S,&SBA=,&CUR=,&CC=,&IND=                         81270\n         GBLA  &FDCNTR\n         LCLA  &C,&I,&J,&K,&N\n         LCLA  &T,&E,&O7,&O9,&WCC\n         LCLC  &SB1,&CU1,&L,&FDCHN,&COM1,&COM2\n         LCLB  &NOP,&OPT,&SKPLEN\n         LCLB  &NL,&WCCP,&SBAP,&CURP,&CCP,&INDP,&ALARM,&O79      81270\n         LCLB  &BLUE,&GREEN,&PINK,&RED,&TURQ,&WHITE,&YELLOW,&C1,&C2,&C3\n         LCLB  &UNDER,&BLINK,&REVERSE,&MONO,&MDT                 87313\n         LCLB  &INTENSE,&DETECT,&NONDISP,&NUMERIC,&SKIP,&PROTECT\n         LCLB  &DEFAULT,&PREV\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&S' NE 'END' AND '&S' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&I       SETA  N'&SYSLIST\n&J       SETA  0\n&SB1     SETC  '0'\n&CU1     SETC  '0'\n.NOLIT   AIF   (&J GE &I).CHECK\n&J       SETA  &J+1\n&L       SETC  '&SYSLIST(&J)'\n         AIF   ('&L' EQ '').NOLIT\n&NOP     SETB  (&NOP  OR '&L' EQ 'NOP')\n&NL      SETB  (&NL  OR '&L' EQ 'NL' OR '&L' EQ 'NEWLINE')\n&ALARM    SETB  (&ALARM OR '&L' EQ 'ALARM')\n&BLUE    SETB  (&BLUE OR '&L' EQ 'BLUE')\n&GREEN   SETB  (&GREEN OR '&L' EQ 'GREEN')\n&PINK    SETB  (&PINK OR '&L' EQ 'PINK')\n&RED     SETB  (&RED  OR '&L' EQ 'RED')\n&TURQ    SETB  (&TURQ  OR '&L' EQ 'TURQ' OR '&L' EQ 'CYAN')      90326\n&WHITE   SETB  (&WHITE OR '&L' EQ 'WHITE')\n&YELLOW  SETB  (&YELLOW OR '&L' EQ 'YELLOW')\n&MONO    SETB  (&MONO OR '&L' EQ 'MONO')                         87313\n&UNDER   SETB  (&UNDER OR '&L' EQ 'UL' OR '&L' EQ 'UNDER')\n&BLINK   SETB  (&BLINK OR '&L' EQ 'BLINK')\n&REVERSE SETB  (&REVERSE OR '&L' EQ 'REVERSE')\n&INTENSE SETB  (&INTENSE OR '&L' EQ 'INTENSE' OR '&L' EQ 'INT')\n&DETECT  SETB  (&DETECT OR '&L' EQ 'DETECT' OR '&L' EQ 'LP')\n&NONDISP SETB  (&NONDISP OR '&L' EQ 'NONDISP' OR '&L' EQ 'NDISP')\n&NUMERIC SETB  (&NUMERIC OR '&L' EQ 'NUMERIC' OR '&L' EQ 'NUM')\n&SKIP    SETB  (&SKIP OR '&L' EQ 'SKIP')\n&PROTECT SETB  (&PROTECT OR '&L' EQ 'PROTECT')\n&MDT     SETB  (&MDT OR '&L' EQ 'MDT')                           87313\n&DEFAULT SETB  (&DEFAULT OR '&L' EQ 'DEFAULT' OR '&L' EQ 'DFLT')\n         AGO   .NOLIT\n.CHECK   ANOP  ,\n         AIF   ('&SBA' EQ '').NOSBA\n         AIF   (N'&SBA EQ 2).SBA2\n         AIF   (N'&SBA NE 1).BADSBA\n&SBAP    SETB  1\n&SB1     SETC  '254*256+254'\n         AIF   ('&SBA(1)' EQ '*').NOSBA\n&SB1     SETC  '&SBA'\n         AGO   .NOSBA\n.BADSBA  MNOTE 4,'INVALID SBA= FIELD'\n         AGO   .NOSBA\n.SBA2    ANOP  ,\n&COM1    SETC  '&SBA(1)'\n&COM2    SETC  '&SBA(2)'\n         AGO   .ADDCOM\n.RETSBA  ANOP  ,\n&SBAP    SETB  1             SET SBA PRESENT\n&SB1     SETC  '&CU1'\n&CU1     SETC  '0'\n.NOSBA   AIF   ('&CUR' EQ '').NOCUR\n&CURP    SETB  1\n         AIF   (N'&CUR EQ 2).CUR2\n         AIF   (N'&CUR NE 1).BADCUR\n&CU1     SETC  '254*256+254'\n         AIF   ('&CUR(1)' EQ '*').NOCUR\n         AIF   ('&CUR(1)' EQ '0').BADCUR\n&CU1     SETC  '&CUR'\n         AGO   .NOCUR\n.ADDERR  AIF   (NOT &CURP).BADSBA\n.BADCUR  MNOTE 4,'INVALID CUR= FIELD'\n         AGO   .NOCUR\n.CUR2    ANOP  ,\n&COM1    SETC  '&CUR(1)'\n&COM2    SETC  '&CUR(2)'\n.ADDCOM  ANOP  ,\n&CU1     SETC  '254'\n         AIF   ('&COM1' EQ 'NULL' OR '&COM1' EQ '*').AD1COM\n&CU1     SETC  '255'\n         AIF   ('&COM1' EQ 'NEXT' OR '&COM1' EQ '+').AD1COM\n&CU1     SETC  '253'\n         AIF   ('&COM1' EQ 'PREV' OR '&COM1' EQ '-').AD1COM\n&CU1     SETC  '253'.'&COM1'\n         AIF   (K'&COM1 LT 1).ADDERR\n         AIF   ('&COM1'(1,1) EQ '-').AD1COM\n         AIF   ('&COM1' EQ '0').ADDERR\n&CU1     SETC  '&COM1'.'+63'\n.AD1COM  ANOP  ,\n&COM1    SETC  '254'\n         AIF   ('&COM2' EQ 'NULL' OR '&COM2' EQ '*').AD2COM\n&COM1    SETC  '255'\n         AIF   ('&COM2' EQ 'NEXT' OR '&COM2' EQ '+').AD2COM\n&COM1    SETC  '253'\n         AIF   ('&COM2' EQ 'PREV' OR '&COM2' EQ '-').AD2COM\n&COM1    SETC  '253'.'&COM2'\n         AIF   (K'&COM2 LT 1).ADDERR\n         AIF   ('&COM2'(1,1) EQ '-').AD2COM\n         AIF   ('&COM2' EQ '0').ADDERR\n&COM1    SETC  '&COM2'.'-1'\n.AD2COM  ANOP  ,\n&CU1     SETC  '('.'&CU1'.')*256+'.'&COM1'\n         AIF   (NOT &CURP).RETSBA\n.NOCUR   AIF   (T'&CC EQ 'O').NOCC                               81201\n         AIF   (NOT &CURP).SETCC                                 81201\n         MNOTE 4,'CC= AND CUR= ARE MUTUALLY EXCLUSIVE'           81201\n         AGO   .NOCC                                             81201\n.SETCC   ANOP  ,                                                 81201\n&CCP     SETB  1                                                 81201\n.NOCC    AIF   (T'&IND EQ 'O').NOIND                             81270\n         AIF   (NOT &CURP).SETIND                                81270\n         MNOTE 4,'IND= AND CUR= ARE MUTUALLY EXCLUSIVE'          81270\n         AGO   .NOIND                                            81270\n.SETIND  ANOP  ,                                                 81270\n&INDP    SETB  1                                                 81270\n.NOIND   ANOP  ,                                                 81270\n&OPT     SETB  1\n&T       SETA  32*&OPT+64*&NOP\n&WCC     SETA  4*&ALARM\n&WCCP    SETB  (&ALARM)\n&E      SETA 128*&NL+64*&WCCP+32*&SBAP+8*&CURP+&CCP+4*&INDP      81270\n&O7      SETA  128*&DEFAULT+64*&PREV+&MDT                        87313\n&PROTECT SETB  (&PROTECT OR &SKIP)\n&NUMERIC SETB  (&NUMERIC OR &SKIP)\n&DETECT  SETB  (&DETECT  OR &NONDISP)\n&INTENSE SETB  (&INTENSE OR &NONDISP)\n&O7      SETA  &O7+32*&PROTECT+16*&NUMERIC+8*&INTENSE+4*&DETECT\n&C1      SETB  (&GREEN OR &TURQ OR &WHITE OR &YELLOW)\n&C2      SETB  (&RED OR &PINK OR &WHITE OR &YELLOW)\n&C3      SETB  (&BLUE OR &PINK OR &TURQ OR &WHITE)\n&O9      SETA  64*&C1+32*&C2+16*&C3+8*&MONO+4*&UNDER+2*&REVERSE+&BLINK\n&O79     SETB  (&O7 NE 0 OR &O9 NE 0)\n&E       SETA  &E+2*&O79\n         AIF   (&CCP).EXPCC                                      81201\n         AIF   (&CURP).EXPSC                                     81270\n         AIF   (&INDP).EXPSI                                     81270\n&FDCHN   DC    AL1(ZFD&C-*,&T,&E,&O9,&O7,&WCC),AL2(&SB1)\n         MEXIT ,                                                 81270\n.EXPSI   ANOP  ,                                                 81270\n&FDCHN   DC    AL1(ZFD&C-*,&T,&E,&O9,&O7,&WCC),AL2(&SB1),AL1(0,&IND)\n         MEXIT ,                                                 81270\n.EXPSC   ANOP  ,                                                 81270\n&FDCHN   DC    AL1(ZFD&C-*,&T,&E,&O9,&O7,&WCC),AL2(&SB1,&CU1)\n         MEXIT ,                                                 81201\n.EXPCC   AIF   (&INDP).EXPCI                                     81270\n&FDCHN   DC    AL1(ZFD&C-*,&T,&E,&O9,&O7,&WCC),AL2(&SB1),AL1(&CC)\n         MEXIT ,                                                 81270\n.EXPCI   ANOP  ,                                                 81270\n&FDCHN   DC    AL1(ZFD&C-*,&T,&E,&O9,&O7,&WCC),AL2(&SB1),AL1(&CC,&IND)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDPRT": {"ttr": 5637, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x07\\x00O\\x01\\x12\\x02?\\x15E\\x00\\x9f\\x00\\x96\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2007-01-04T00:00:00", "modifydate": "2012-01-23T15:45:00", "lines": 159, "newlines": 150, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      FDPRT &STR,&EXLEN,&VALUES,&LEN=0,                             *\n               &LABEL=,&LABOPT=PAD,&KEEP=0                       85119\n.*\n.*       PROVIDED FOR COMPATIBILITY WITH GOSSIP FD MACROS, BUT USING\n.*       SHORTER DATA SECTION TO SAVE STORAGE\n.*         INTENDED FOR PRINT PROCESSING\n.*\n         GBLA  &FDCNTR\n         LCLA  &C,&I,&J,&K,&N,&Z                                 85119\n         LCLA  &T,&E,&O7,&O9,&DATA\n         LCLC  &L,&FDCHAIN,&W\n         LCLB  &NOP,&IN,&SKPLEN,&INDAD,&CNLOCK                   92086\n         LCLB  &NL,&DEBL,&DEBR,&DEBZ,&PADL,&PADR,&RADJ,&UP\n         LCLB  &BLUE,&GREEN,&PINK,&RED,&TURQ,&WHITE,&YELLOW,&C1,&C2,&C3\n         LCLB  &UNDER,&BLINK,&REVERSE,&MONO,&MDT                 87313\n         LCLB  &INTENSE,&DETECT,&NONDISP,&NUMERIC,&SKIP,&PROTECT\n         LCLB  &DEFAULT,&PREV\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHAIN SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&STR' NE 'END' AND '&STR' NE '*END').PROCESS\n&FDCHAIN DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS AIF   (T'&LABEL EQ 'O').PROCEED                         85118\n         AIF   ('&KEEP' EQ '' OR '&KEEP' EQ '0').DEFKEEP         85119\n&FDCHAIN DC    AL1(ZFD&C-*,30,0,&KEEP)  FDKEEP                   85119\n         AGO   .DEFKCOM                                          85119\n.DEFKEEP ANOP  ,                                                 85119\n&Z       SETA  &C+1                                              85119\n&FDCHAIN DC    AL1(ZFD&C-*,30,0,12+ZFD&Z-*)  FDKEEP              85119\n.DEFKCOM ANOP  ,                                                 85119\n&FDCNTR  SETA  &FDCNTR+1                                         85119\n&FDCHAIN SETC  'ZFD'.'&FDCNTR'                                   85119\n&C       SETA  &FDCNTR+1                                         85119\n&I       SETA  12            DEFAULT PADL+PADR                   85118\n         AIF   ('&LABOPT' EQ 'PAD').PROPAD                       85119\n         AIF   ('&LABOPT' EQ '' OR '&LABOPT' EQ '0').PADNONE     85119\n&I       SETA  8                                                 85118\n         AIF   ('&LABOPT' EQ 'PADL').PROPAD                      85118\n&I       SETA  4                                                 85118\n         AIF   ('&LABOPT' EQ 'PADR').PROPAD                      85118\n         MNOTE 4,'UNSUPPORTED LABOPT=&LABOPT'                    85118\n.PADNONE ANOP  ,                                                 85119\n&I       SETA  0                                                 85119\n.PROPAD  AIF   ('&LABEL'(1,1) NE '''').LABNQ                     85118\n&FDCHAIN DC    AL1(ZFD&C-*,48,&I,129,0,ZFD&C-*-1),C&LABEL        85118\n         AGO   .PROCOM                                           85118\n.LABNQ   ANOP  ,                                                 85118\n&FDCHAIN DC    AL1(ZFD&C-*,48,&I,129,0,ZFD&C-*-1),C'&LABEL'      85118\n.PROCOM  ANOP  ,                                                 85118\n&FDCNTR  SETA  &FDCNTR+1                                         85118\n&FDCHAIN SETC  'ZFD'.'&FDCNTR'                                   85118\n&C       SETA  &FDCNTR+1                                         85118\n.PROCEED ANOP  ,                                                 85118\n&I       SETA  N'&SYSLIST\n&J       SETA  1\n         AIF   ('&STR'(1,1) NE '''').NOLIT\n&SKPLEN  SETB  1\n.NOLIT   AIF   (&J GE &I).CHECK\n&J       SETA  &J+1\n&L       SETC  '&SYSLIST(&J)'\n         AIF   ('&L' EQ '').NOLIT\n&NOP     SETB  (&NOP  OR '&L' EQ 'NOP')\n&CNLOCK  SETB  (&CNLOCK OR '&L' EQ 'LOCK' OR '&L' EQ 'LOCKED')   92086\n&NL      SETB  (&NL  OR '&L' EQ 'NL' OR '&L' EQ 'NEWLINE')\n&DEBL SETB (&DEBL OR '&L' EQ 'DEBL' OR '&L' EQ 'DEB' OR '&L' EQ 'DEBZ')\n&DEBR    SETB  (&DEBR OR '&L' EQ 'DEBR' OR '&L' EQ 'DEB')\n&DEBZ    SETB  (&DEBZ OR '&L' EQ 'DEBZ')\n&PADL    SETB  (&PADL OR '&L' EQ 'PADL' OR '&L' EQ 'PAD')\n&PADR    SETB  (&PADR OR '&L' EQ 'PADR' OR '&L' EQ 'PAD')\n&RADJ    SETB  (&RADJ OR '&L' EQ 'RADJ')\n&UP    SETB  (&UP OR '&L' EQ 'UP')\n&UP      SETB  (&UP OR '&L' EQ 'UPPER')\n&BLUE    SETB  (&BLUE OR '&L' EQ 'BLUE')\n&GREEN   SETB  (&GREEN OR '&L' EQ 'GREEN')\n&PINK    SETB  (&PINK OR '&L' EQ 'PINK')\n&RED     SETB  (&RED  OR '&L' EQ 'RED')\n&TURQ    SETB  (&TURQ  OR '&L' EQ 'TURQ')\n&WHITE   SETB  (&WHITE OR '&L' EQ 'WHITE')\n&YELLOW  SETB  (&YELLOW OR '&L' EQ 'YELLOW')\n&BLUE    SETB  (&BLUE OR '&L' EQ 'BL')                          GP10240\n&GREEN   SETB  (&GREEN OR '&L' EQ 'GR')                         GP10240\n&PINK    SETB  (&PINK OR '&L' EQ 'PI')                          GP10240\n&RED     SETB  (&RED  OR '&L' EQ 'RE')                          GP10240\n&TURQ    SETB  (&TURQ  OR '&L' EQ 'TU' OR '&L' EQ 'CY')         GP10240\n&WHITE   SETB  (&WHITE OR '&L' EQ 'WH')                         GP10240\n&YELLOW  SETB  (&YELLOW OR '&L' EQ 'YE')                        GP10240\n&MONO    SETB  (&MONO OR '&L' EQ 'MONO')                         87313\n&UNDER   SETB  (&UNDER OR '&L' EQ 'UL' OR '&L' EQ 'UNDER')\n&BLINK   SETB  (&BLINK OR '&L' EQ 'BLINK')\n&REVERSE SETB  (&REVERSE OR '&L' EQ 'REVERSE')\n&INTENSE SETB  (&INTENSE OR '&L' EQ 'INTENSE' OR '&L' EQ 'INT')\n&DETECT  SETB  (&DETECT OR '&L' EQ 'DETECT' OR '&L' EQ 'LP')\n&NONDISP SETB  (&NONDISP OR '&L' EQ 'NONDISP' OR '&L' EQ 'NDISP')\n&NUMERIC SETB  (&NUMERIC OR '&L' EQ 'NUMERIC' OR '&L' EQ 'NUM')\n&SKIP    SETB  (&SKIP OR '&L' EQ 'SKIP')\n&PROTECT SETB  (&PROTECT OR '&L' EQ 'PROTECT')\n&MDT     SETB  (&MDT OR '&L' EQ 'MDT')                           87313\n&DEFAULT SETB  (&DEFAULT OR '&L' EQ 'DEFAULT' OR '&L' EQ 'DFLT')\n&PREV    SETB  (&PREV OR '&L' EQ 'PREVIOUS' OR '&L' EQ 'PREV')\n&INDAD   SETB  (&INDAD OR '&L' EQ '*')                           81270\n         AIF   (&DATA NE 0).NOLIT\n         AIF   (K'&L GT 4).OMLEN\n&K       SETA  0\n&L       SETC  '&L'.'    '\n&L       SETC  '&L'(1,4)\n         AIF   ('&L' NE 'X   ').DT                              GP10240\n&L       SETC  'HEX '                                           GP10240\n.DT      AIF   (&K GE 35).OMLEN                                 GP07004\n&K       SETA  &K+1\n&N       SETA  (&K-1)*4+1\n&W      SETC  'CHARCON ASISADDRHEX SHEXBIT I   $I  D   $D  F   TIMETIMD*\n               DATEDATJWDAYMTH DAY MD  DMY MDY CHEXICM ICN IZ  IA  DCM *\n               DCN DZ  DA  EDATDATDCCHHTTR '(&N,4)              GP07004\n         AIF   ('&L' NE '&W').DT\n&DATA    SETA  &K\n         AIF   (&J EQ 2).OMSET\n         AGO   .NOLIT\n.OMLEN   AIF   (&J NE 2 OR &SKPLEN).NOLIT\n AIF (&NOP OR &IN OR &NL OR &DEBL OR &DEBR OR &DEBZ OR &PADL).OMSET\n AIF (&UP OR &PADR OR &RADJ OR &BLUE OR &GREEN OR &PINK OR &RED).OMSET\n AIF (&TURQ OR &WHITE OR &YELLOW OR &UNDER OR &BLINK).OMSET\n AIF (&REVERSE OR &INTENSE OR &DETECT OR &NONDISP OR &INDAD).OMSET\n AIF (&NUMERIC OR &SKIP OR &PROTECT OR &DEFAULT OR &PREV).OMSET\n         AIF   (&MDT OR &MONO OR &CNLOCK).OMSET                  92086\n         AGO   .NOLIT\n.OMSET   ANOP  ,             EXPLICIT LENGTH OMITTED\n&SKPLEN  SETB  1             USE L'\n         AGO   .NOLIT\n.CHECK   ANOP  ,\n&T       SETA  64*&NOP+48+&INDAD+8*&CNLOCK                       92086\n&E SETA 128*&NL+64*&DEBL+32*&DEBR+16*&DEBZ+8*&PADL+4*&PADR+2*&RADJ+&UP\n&O7      SETA  128*&DEFAULT+64*&PREV+&MDT                        87313\n&PROTECT SETB  (&PROTECT OR &SKIP)\n&NUMERIC SETB  (&NUMERIC OR &SKIP)\n&DETECT  SETB  (&DETECT  OR &NONDISP)\n&INTENSE SETB  (&INTENSE OR &NONDISP)\n&O7      SETA  &O7+32*&PROTECT+16*&NUMERIC+8*&INTENSE+4*&DETECT\n&C1      SETB  (&GREEN OR &TURQ OR &WHITE OR &YELLOW)\n&C2      SETB  (&RED OR &PINK OR &WHITE OR &YELLOW)\n&C3      SETB  (&BLUE OR &PINK OR &TURQ OR &WHITE)\n&O9      SETA  64*&C1+32*&C2+16*&C3+8*&MONO+4*&UNDER+2*&REVERSE+&BLINK\n         AIF   ('&STR'(1,1) EQ '''').CSTRING\n         AIF   ('&EXLEN' NE '' AND NOT &SKPLEN).EXLEN\n&L       SETC  'L'''\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&DATA,&LEN,&L&STR),SL2(&STR)\n         MEXIT\n.EXLEN   AIF   (K'&EXLEN LT 2).NORLEN                            81270\n         AIF   ('&EXLEN'(1,1) NE '(' OR '&EXLEN'(2,1) EQ '(').NORLEN\n&T       SETA  &T+2          ILEN IS REGISTER FORM               81270\n.NORLEN  ANOP  ,                                                 81270\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,&DATA,&LEN,&EXLEN),SL2(&STR)\n         MEXIT ,\n.CSTRING ANOP  ,\n&FDCHAIN DC AL1(ZFD&C-*,&T,&E,129,&LEN,ZFD&C-*-1),C&STR\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDREPT": {"ttr": 5641, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDREPT &N,&S                                   ADDED ON 82109\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLC  &FDCHN\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&N' NE 'END' AND '&N' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&T       SETA  30\n         AIF   (T'&S EQ 'O').BLANK\n         AIF   (T'&N EQ 'O').DFLT\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL1(&N,&S)\n         MEXIT ,\n.DFLT    ANOP  ,\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL1(1,&S)\n         MEXIT ,\n.BLANK   ANOP  ,\n         AIF   (T'&N EQ 'O').BLAND\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL1(&N,C' ')\n         MEXIT ,\n.BLAND   ANOP  ,\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL1(1,C' ')\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDROOM": {"ttr": 5643, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDROOM &N                                      ADDED ON 82109\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLC  &FDCHN\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&N' NE 'END' AND '&N' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&T       SETA  30\n         AIF   (T'&N EQ 'O').DFLT\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL1(0,&N)\n         MEXIT ,\n.DFLT    ANOP  ,\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL1(0,1)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDSCAN": {"ttr": 5645, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      FDSCAN &STR,&FDW,&OPTS,&MOVE=                           87312\n.*\n.*       PROVIDED FOR COMPATIBILITY WITH 3270 FULL-SCREEN FACILITY\n.*\n         LCLA  &C,&I,&J,&K,&N,&Z\n         LCLB  &MORE,&POS,&KEY,&REQ,&ABBR                        87314\n         AIF   ('&STR' NE 'END' AND '&STR' NE '*END').PROCESS\n&NM      DC    X'FF00'       END OF LIST\n         MEXIT ,\n.PROCESS AIF   ('&MOVE' EQ '').NOMORE\n&MORE    SETB  1\n.NOMORE  ANOP  ,\n&N       SETA  N'&SYSLIST\n&J       SETA  &N-2                                              87360\n&I       SETA  3\n.OPTLOOP AIF   (&I GT &N).PROCEED\n&POS     SETB  (&POS OR '&SYSLIST(&I)' EQ 'POS')\n&KEY     SETB  (&KEY OR '&SYSLIST(&I)' EQ 'KEY')\n&ABBR    SETB  (&ABBR OR '&SYSLIST(&I)' EQ 'LONG')\n&REQ     SETB  (&REQ OR '&SYSLIST(&I)' EQ 'REQ')                 87314\n&POS     SETB  (&POS OR '&SYSLIST(&I)' EQ 'POS2')  CHAINED POS   87360\n&KEY     SETB  (&KEY OR '&SYSLIST(&I)' EQ 'POS2') CHAINED POS    87360\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I-1)' NE 'POS2').OPTLOOP              87360\n&J       SETA  &J+1          FINAGLE                             87360\n         AGO   .OPTLOOP\n.PROCEED AIF   (&J NE (&POS+&KEY+&ABBR+&REQ)).PARMA              87360\n&C       SETA  128*&MORE+64*&POS+32*&KEY+2*&REQ+&ABBR            87314\n.* &K       SETA  0             DEFAULT FOR POSITIONAL           87360\n.*       AIF   (&POS).COMLEN  NOP'D FOR SCRMARK ERRMSG OPTION    87360\n         AIF   ('&STR' EQ '').PARMA\n&K       SETA  K'&STR-1\n         AIF   ('&STR'(1,1) NE '''').COMLEN\n&I       SETA  2\n&J       SETA  &K-1\n&K       SETA  &J\n.LOOP    AIF   ('&STR'(&I,2) EQ '''''').SK2\n         AIF   ('&STR'(&I,2) EQ '&&').SK2\n&I       SETA  &I+1\n         AGO   .INC\n.SK2     ANOP  ,\n&I       SETA  &I+2\n&K       SETA  &K-1\n.INC     AIF   (&I LE &J).LOOP\n&K       SETA  &K-1\n         AIF   (&K GE 0).COMLEN\n.PARMA   MNOTE 8,'MISSING OR CONFLICTING PARAMETERS'\n         MEXIT ,\n.COMLEN  AIF   ('&STR'(1,1) EQ '''').TOAP\n&NM      DC    AL1(&K,&C),SL2(&FDW),CL(&K+1)'&STR'\n         AGO   .MORE\n.TOAP    ANOP  ,\n&NM      DC    AL1(&K,&C),SL2(&FDW),CL(&K+1)&STR\n.MORE    AIF   ('&MOVE' EQ '').MEND\n&K       SETA  K'&MOVE-1\n         AIF   ('&MOVE'(1,1) EQ '''').MORQUO\n         DC    AL1(&K),CL(&K+1)'&MOVE '\n         AGO   .MEND\n.MORQUO  ANOP  ,\n&I       SETA  2\n&J       SETA  &K-1\n&K       SETA  &J\n.MOOP    AIF   ('&MOVE'(&I,2) EQ '''''').MK2\n         AIF   ('&MOVE'(&I,2) EQ '&&').MK2\n&I       SETA  &I+1\n         AGO   .MNC\n.MK2     ANOP  ,\n&I       SETA  &I+2\n&K       SETA  &K-1\n.MNC     AIF   (&I LE &J).MOOP\n&K       SETA  &K-1\n         AIF   (&K LT 0).MEND\n         DC    AL1(&K),CL(&K+1)&MOVE\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDSECT": {"ttr": 5648, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x03(\\x7f\\x01\\x08\\x07o\\x13C\\x00\\x81\\x00~\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-10-14T00:00:00", "modifydate": "2008-03-16T13:43:00", "lines": 129, "newlines": 126, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      FDSECT ,\n         GBLB  &MAPFDS\n         AIF   (&MAPFDS).MEND\n&MAPFDS  SETB  1\n         AIF   ('&NM' NE '').EXNAME\nFDSECT   DSECT ,             FD ITEM MAPPING\n         AGO   .COMNAME\n.EXNAME  ANOP  ,\n&NM      DSECT ,             FD ITEM MAPPING\n.COMNAME ANOP  ,\nFDLINK   DS    AL1           LENGTH TO NEXT ENTRY OR 0\nFDTYPE   DS    X             ENTRY TYPE (IN, OUT, NOP)\nFDFNOP   EQU   X'40'           IGNORE THIS ENTRY\nFDFIN    EQU   X'80'           INPUT ENTRY\nFDFCIN   EQU   X'08'           FDIN IS LOCKED (COND. INPUT)      87156\nFDFPRT   EQU   X'30'           FD/FDIN - NO 3270 FIELDS          81127\nFDFIND@  EQU   X'01'             FDSADD IS INDIRECT ADDRESS      81270\nFDFINDAD EQU   X'01'             FDSADD IS INDIRECT ADDRESS     GP08076\nFDFREG#  EQU   X'02'             FDILEN IS REGISTER WITH LENGTH  81270\nFDFREGLN EQU   X'02'             FDILEN IS REGISTER WITH LENGTH GP08076\nFDFEXAD  EQU   X'04'             EXPANSION HAS USER EXIT ADDRESS 89095\nFDFOPT   EQU   X'20'           OPTION LIST\nFDFGOTO  EQU   X'10'           BRANCH TO ANOTHER FD ENTRY\nFDFEXEC  EQU   X'11'           PERFORM NEW FD RANGE              81131\nFDFBR    EQU   X'12'           BRANCH/TEST AFTER PRIOR TEST      81131\nFDFTM    EQU   X'13'           TM/BRANCH                         81131\nFDFCLI   EQU   X'14'           CLI/BRANCH                        81131\nFDFCLC   EQU   X'15'           CLC/BRANCH                        81131\nFDFSPC   EQU   X'1E'           SPACE/ROOM/REPT SERVICE           82109\nFDFUEX   EQU   X'1F'           USER EXIT                         81193\nFDGOTO   DS    0SL2(0)       ADDRESS OF TARGET FD OF GO TO\nFDEDIT   DS    X             EDITING OPTIONS\nFDFNL    EQU   X'80'           POSITION TO NEW LINE\nFDFDEBL  EQU   X'40'           STRIP LEADING BLANKS\nFDFDEBR  EQU   X'20'           STRIP TRAILING BLANKS\nFDFDEBZ  EQU   X'10'           STRIP LEADING ZEROES\nFDFPADL  EQU   X'08'           LEFT BLANK OR SF\nFDFPADR  EQU   X'04'           RIGHT BLANK OR SF\nFDFRADJ  EQU   X'02'           RIGHT-ADJUST IN OUTPUT\nFDFUP    EQU   X'01'           UPPER CASE INPUT TRANSLATE\n*        REDEFINITION FOR FDOPT                                  82109\n*FDFNL   EQU   X'80'           POSITION TO NEW LINE\nFDOWCCP  EQU   X'40'         WCC OPTIONS PRESENT\nFDOSBAP  EQU   X'20'         SBA PRESENT\nFDOCURP  EQU   X'08'         CURSOR ADDRESS PRESENT\nFDOINDP  EQU   X'04'           AUTO INDENT VALUE PRESENT         81270\nFDOPTP   EQU   X'02'         COLOR OR DISPLAY OPTIONS PRESENT\nFDOPCCP  EQU   X'01'         PRT CARRIAGE CONTROL INSTEAD OF CURP\nFDOPT9   DS    X             3279 OPTIONS\nFDFCOLOR EQU   X'70' 0DFLT,1BLUE,2RED,3PINK,4GREEN,5TURQ,6YELLOW,7WHITE\nFDFMONO  EQU   X'08'         APPLY HIGH-LIGHT ON MONOCHROME ONLY 87313\nFDFUNDER EQU   X'04'           UNDERLINE\nFDFREV   EQU   X'02'           REVERSE\nFDFBLINK EQU   X'01'           BLINK\nFDOPT7   DS    X             3277/3278 OPTIONS\nFDFINT   EQU   X'08'           INTENSIFIED\nFDFLPEN  EQU   X'04'           LIGHT-PEN DETECTABLE\nFDFNDISP EQU   X'0C'           NON-DISPLAY\nFDFNUM   EQU   X'10'           NUMERIC INPUT\nFDFSKIP  EQU   X'30'           SKIP DISPLAY\nFDFPROT  EQU   X'20'           PROTECTED\nFDFDFLT  EQU   X'80'           DEFAULT OPTIONS/COLORS\nFDFPREV  EQU   X'40'           PREVIOUS OPTIONS/COLORS\nFDFNULL  EQU   X'02'           SUPPRESS X'00' IN INPUT FIELDS\nFDFMTD   EQU   X'01'           MODIFIED DATA TAG                 87313\nFDDATA   DS    X             DATA TYPE\nFDDLIT   EQU   X'80'           FD CONTAINS LITERAL, NOT ADDRESS\nFDDCHAR  EQU   1               EBCDIC, TRANSLATED\nFDDCON   EQU   2               EBCDIC WITH CONTROL CHARACTERS\nFDDASIS  EQU   3               EBCDIC(?), NO TRANSLATE\nFDDADDR  EQU   4               ADDRESS\nFDDHEX   EQU   5               HEXADECIMAL\nFDDSHEX  EQU   6               HEXADECIMAL WITH EXPLICIT SIGN\nFDDBIT   EQU   7               BIT STRING\nFDDINT   EQU   8               INTEGER\nFDD$INT  EQU   9               INTEGER.DD\nFDDDEC   EQU   10              PACKED DECIMAL\nFDD$DEC  EQU   11              PACKED DECIMAL.DD\nFDDFIX   EQU   12              FLOATING POINT\nFDDTIME  EQU   13              TIME (BIN 1/100 SECONDS)          81193\nFDDTIMD  EQU   14              TIME (PACKED)                     81193\nFDDDATE  EQU   15              DATE (PACKED; O/P MM/DD/YY)       81193\nFDDDATJ  EQU   16              DATE (PACKED; O/P YY.DDD)         81193\nFDDFLAG  EQU   64              FLAG/TABLE FORMATTING            GP06273\nFDOLEN   DS    AL1           OUTPUT LENGTH; 0 FOR DEFAULT; MAX FOR FDIN\nFDILEN   DS    AL1           CURRENT LENGTH OF ITEM\nFDTEXT   DS    0CL132        (FD/FDPRT) LITERAL TEXT\nFDSADD   DS    SL2           ADDRESS OF DATA ITEM\nFDIOFF   DS    AL2           FDIN - OFFSET TO FIW AREA           84237\nFDIXAD   DS    SL2           FDIN - USER EXIT ADDRESS            89095\n         ORG   FDIOFF          REDEFINE FOR FLAG PROCESSING     GP03287\nFDTBAD   DS    SL2           ADDRESS OF BIT EQUIVALENT TEXT     GP03287\nFDTSEP   DS    C             OUTPUT SEPARATOR CHARACTER OR 00   GP03287\nFDTSPC   DS    XL1           NUMBER OF SPACES BETWEEN ITEMS     GP03287\n         ORG   FDDATA\nFDOWCC   DC    X'0'          WCC OPTIONS\nFDOSBA   DC    XL2'0'        SBA ADDRESS\nFDOCUR   DC    0XL2'0'       CURSOR ADDRESS\nFDOCC    DS    C             PRINTER CARRIAGE CONTROL            81201\nFDOIND   DS    AL1           AUTOMATIC LINE INDENT               81270\n         SPACE 1                                                 81127\n         ORG   FDGOTO                                            81127\nFDBRE    DS    SL2           BRANCH EQUAL                        81127\nFDBRL    DS    SL2           BRANCH LOW/MIXED                    81127\nFDBRH    DS    SL2           BRANCH HIGH/ONES                    81127\nFDBVAR   DS    SL2           TEST VARIABLE                       81127\nFDBIDA   DS    0X              IMMEDIATE DATA FOR TEST           81127\nFDBLEN   DS    X               LENGTH FOR FDCLC                  81127\nFDBCLC   DS    SL2           COMPARE STRING                      81127\n         SPACE 1                                                 81193\n         ORG   FDGOTO        DEFINITION FOR USER EXIT REQUEST    81193\nFDUXAD   DS    SL2           USER EXIT ADDRESS                   81193\nFDUXFPRM DS    0X            USER SUPPLIED PARM INFO             81193\n         ORG   ,                                                 81193\nFDXOK    EQU   0             RETURN CODES - NORMAL PROCESSING    81193\nFDXGOTO  EQU   2               NEW FD ADDRESS IN R1              81193\nFDXCLR   EQU   4               CLEAR CURRENT LINE                81193\nFDXPRT   EQU   8               PRINT CURRENT LINE                81193\nFDXADD   EQU   FDXCLR+FDXPRT   DATA ADDED TO LINE                81193\nFDXQUIT  EQU   16              TERMINATE CURRENT PRTLIST         81193\n         SPACE 1                                                 81193\nFDUXPARM DSECT ,             MAPPING OF R1 LIST SUPPLIED TO EXIT 81193\nFDUXFD   DS    A               ADDRESS OF CURRENT FD             81193\nFDUXPWRK DS    A               ADDRESS OF PRINTER WORK AREA      81193\nFDUXSAVE DS    A               ADDRESS OF ORIGINAL SAVE AREA     81193\nFDUXPRT  DS    A               ADDRESS OF CURRENT PRINT LINE     81193\n         DS    A                 RESERVED                        81193\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDSNAP": {"ttr": 5890, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x11(\\x8f\\x01\\x11(\\x8f\"3\\x00\\\\\\x00\\\\\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2011-10-15T00:00:00", "modifydate": "2011-10-15T22:33:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      FDSNAP &ADR,&HLN,&OPTS,&BASE=,&LEN=            ADDED ON 83331\n.*\n.*   FDSNAP IS USED IN AN FDLIST TO DUMP MEMORY.\n.*     LIST    (DEFAULT) PRINTS TEXT ONLY (PERIOD FOR UNPRINTABLES)\n.*     HEX     FORMATS IN HEXADECIMAL\n.*     DUAL    FORMATS HEX ON LEFT, AND TEXT ON RIGHT\n.*     VERT    FORMATS THREE LINES: TEXT/ZONES/NUMERICS\n.*\n.*     ABS     DISPLAYS MEMORY ADDRESS (DEFAULT)\n.*     NOABS   OMITS MEMORY ADDRESS\n.*\n.*     OFFSET  PRINTS OFFSET RELATIVE TO BASE= VALUE\n.*     NOOFFSET  OMITS OFFSET VALUE\n.*\n.*     ANSI\n.*     ASCII   CONVERT TEXT TO ASCII (IN OUTPUT LINE)\n.*\n.*\n         GBLA  &FDCNTR\n         LCLA  &T,&C,&FG1,&FG2,&I,&MAX\n         LCLB  &NOP,&B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7,&B8,&B9,&B10,&B11\n         LCLB  &B12,&B13,&B14,&B15\n         LCLC  &FDCHN,&OP,&RA,&RB,&LOP,&LVAL                    GP11288\n&LOP     SETC  'AL'                                             GP11288\n&LVAL    SETC  '&HLN'                                           GP11288\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n&MAX     SETA  N'&SYSLIST\n&I       SETA  3             FIRST OPTION\n         AIF   (T'&LEN EQ 'O').NOLEN\n&I       SETA  2             KEYWORD, NOT POSITIONAL, LENGTH\n&B0      SETB  1             SET S-FORMAT LENGTH FIELD\n&LVAL    SETC  '&LEN'                                           GP11288\n.NOLEN   AIF   (T'&BASE EQ 'O').NOBASE\n&B13     SETB  1\n.NOBASE  AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&ADR' NE 'END' AND '&ADR' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS AIF   (&I GT &MAX).CHECK\n&OP      SETC  '&SYSLIST(&I)'\n&I       SETA  &I+1\n         AIF   ('&OP' EQ '').PROCESS\n&B7      SETB  (&B7 OR ('&OP' EQ 'ASCII') OR ('&OP' EQ 'ANSI'))  83331\n&B8      SETB  (&B8 OR ('&OP' EQ 'HEX') OR ('&OP' EQ 'VERT'))\n&B9      SETB  (&B9 OR ('&OP' EQ 'DUAL') OR ('&OP' EQ 'VERT'))\n&B8      SETB  (&B8 AND '&OP' NE 'LIST' AND '&OP' NE 'DUAL')\n&B9      SETB  (&B9 AND '&OP' NE 'LIST' AND '&OP' NE 'HEX')\n&B14     SETB  ((&B14 OR '&OP' EQ 'NOABS') AND '&OP' NE 'ABS')\n&B15     SETB  ((&B15 OR '&OP' EQ 'OFFSET') AND '&OP' NE 'NOOFFSET')\n         AGO   .PROCESS\n.CHECK   ANOP  ,\n&T       SETA  64*&NOP+29\n         AIF   (K'&ADR LT 3).NORA                                85118\n         AIF   ('&ADR'(1,1) NE '(').NORA                         85118\n         AIF   ('&ADR'(K'&ADR,1) NE ')').NORA                    85118\n         AIF   ('&ADR'(2,1) EQ '(').NORA                         85118\n&RA      SETC  '0'           CHANGE R TO S FORMAT                85118\n.NORA    AIF   (&B0).TESTL                                       85118\n         AIF   (K'&HLN LT 3).TESTD                               85118\n         AIF   ('&HLN'(1,1) NE '(').TESTD                        85118\n         AIF   ('&HLN'(K'&HLN,1) NE ')').TESTD                   85118\n         AIF   ('&HLN'(2,1) EQ '(').TESTD                        85118\n&B0      SETB  1             SET S-FORMAT LENGTH FIELD          GP11288\n&LOP     SETC  'SL'                                             GP11288\n&LVAL    SETC  '0'.'&HLN'                                       GP11288\n         AGO   .TESTD                                            85118\n.TESTL   AIF   (K'&LEN LT 3).TESTD                               85118\n         AIF   ('&LEN'(1,1) NE '(').TESTD                        85118\n         AIF   ('&LEN'(K'&LEN,1) NE ')').TESTD                   85118\n         AIF   ('&LEN'(2,1) EQ '(').TESTD                        85118\n&LOP     SETC  'SL'                                             GP11288\n&LVAL    SETC  '0'.'&LEN'                                       GP11288\n.TESTD   ANOP  ,                                                GP11288\n&FG1     SETA  128*&B0+64*&B1+32*&B2+16*&B3+8*&B4+4*&B5+2*&B6+&B7\n&FG2     SETA  128*&B8+64*&B9+32*&B10+16*&B11+8*&B12+4*&B13+2*&B14+&B15\n&FG1     SETA  &FG1*256+&FG2\n         AIF   (&B13).BASED                                      85118\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL2(&FG1),SL2(&RA&ADR),&LOP.2(&LVAL)\n         MEXIT ,\n.BASED   AIF   (K'&BASE LT 3).BASES                              85118\n         AIF   ('&BASE'(1,1) NE '(').BASES                       85118\n         AIF   ('&BASE'(K'&BASE,1) NE ')').BASES                 85118\n         AIF   ('&BASE'(2,1) EQ '(').BASES                       85118\n&RB      SETC  '0'           CHANGE R TO S FORMAT                85118\n.BASES   ANOP  ,                                                GP11288\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL2(&FG1),SL2(&RA&ADR),&LOP.2(&LVAL),SL2*\n               (&RB&BASE)                                       GP11288\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDSPACE": {"ttr": 5893, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDSPACE &N                                     ADDED ON 82109\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLC  &FDCHN\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&N' NE 'END' AND '&N' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&T       SETA  30\n         AIF   (T'&N EQ 'O').DFLT\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL1(&N,0)\n         MEXIT ,\n.DFLT    ANOP  ,\n&FDCHN   DC    AL1(ZFD&C-*,&T),AL1(1,0)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDTM": {"ttr": 5895, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDTM  &STR,&MASK,&BZ=0,&BM=0,&BO=0,&BNO=0,&BNZ=0        81264\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLB  &NOP                                              81133\n         LCLC  &FDCHAIN,&FZ,&FM,&FO                              81264\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHAIN SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&STR' NE 'END' AND '&STR' NE '*END').PROCESS\n&FDCHAIN DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&FZ      SETC  '&BZ'                                             81264\n&FM      SETC  '&BM'                                             81264\n&FO      SETC  '&BO'                                             81264\n         AIF   ('&BNZ' EQ '0' OR '&BNO' EQ '0').BNZBNO           81264\n         MNOTE 8,'MUTUALLY EXCLUSIVE BNZ AND BNO'                81264\n.BNZBNO  AIF   ('&BNO' EQ '0').NOBNO                             81264\n         AIF   ('&FZ' EQ '0' AND '&FM' EQ '0').DOBNO             81264\n         MNOTE 8,'MUTUALLY EXCLUSIVE BNO AND BZ/BM'              81264\n.DOBNO   ANOP  ,                                                 81264\n&FZ      SETC  '&BNO'                                            81264\n&FM      SETC  '&BNO'                                            81264\n.NOBNO   AIF   ('&BNZ' EQ '0').CHECK                             81264\n         AIF   ('&FM' EQ '0' AND '&FO' EQ '0').DOBNZ             81264\n         MNOTE 8,'MUTUALLY EXCLUSIVE BNZ AND BM/BO'              81264\n.DOBNZ   ANOP  ,                                                 81264\n&FM      SETC  '&BNZ'                                            81264\n&FO      SETC  '&BNZ'                                            81264\n.CHECK   ANOP  ,\n&T       SETA  64*&NOP+19\n&FDCHAIN DC AL1(ZFD&C-*,&T),SL2(&FZ,&FM,&FO,&STR),AL1(&MASK)     81264\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDUEX": {"ttr": 5897, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      FDUEX &S                                       ADDED ON 81190\n         GBLA  &FDCNTR\n         LCLA  &T,&C\n         LCLC  &FDCHN\n&FDCNTR  SETA  &FDCNTR+1\n&FDCHN   SETC  'ZFD'.'&FDCNTR'\n&C       SETA  &FDCNTR+1\n         AIF   ('&NM' EQ '').NONAME\n&NM      EQU   *\n.NONAME  AIF   ('&S' NE 'END' AND '&S' NE '*END').PROCESS\n&FDCHN   DC    AL1(0)        END OF FD LIST\n         MEXIT ,\n.PROCESS ANOP  ,\n&T       SETA  16+15\n&FDCHN   DC    AL1(ZFD&C-*,&T),SL2(&S)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDUEXEND": {"ttr": 5899, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x065_\\x01\\x065_\\x16$\\x00\\x05\\x00\\t\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2006-12-21T00:00:00", "modifydate": "2006-12-21T16:24:00", "lines": 5, "newlines": 9, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      FDUEXEND ,\n&NM      MACPARM MODE=LBL\n         POP   USING\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDUEXHED": {"ttr": 5901, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x065_\\x01\\x065_\\x16\\x19\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2006-12-21T00:00:00", "modifydate": "2006-12-21T16:19:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      FDUEXHED ,\n.*\n.*    SIMPLE INPUT VALIDITY CHECK FOR FDIN FIELDS\n.*    DO NOT USE R13'S SAVE AREA\n.*\n         PUSH  USING\n         DROP  ,\n         USING &NM,R15\n&NM      LM    R4,R6,4(R1)   LOAD FD, FIW, AND FDW ADDRESSES\n         USING FHDLINK,R4    MAP FIELD REQUEST\n         USING FIWFG,R5      MAP FIELD INPUT WORK AREA\n         USING FDWFDA,R6     MAP FIELD DEFINITION WORK AREA\n         USING EXHBWORK,R11  PASSED\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDUEXRET": {"ttr": 5903, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x065_\\x01\\x065_\\x16#\\x00\\x04\\x00\\x04\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2006-12-21T00:00:00", "modifydate": "2006-12-21T16:23:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      FDUEXRET ,\n&NM      BR    R14           RETURN TO CALLER\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FETWORK": {"ttr": 5905, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0c\\x00\\x00\\x01\\x02%O\\x01\\x11'_\\x16\\x17\\x00'\\x00\\x10\\x00\\x1f\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.12", "flags": 0, "createdate": "2002-09-11T00:00:00", "modifydate": "2011-10-02T16:17:00", "lines": 39, "newlines": 16, "modlines": 31, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      FETWORK &PFX=FT,&DSECT=YES   MAP PARMS FOR SUBFETCH ROUTINE\n         LCLC  &NAME\n&NAME    SETC  '&NM'\n         AIF   ('&DSECT' EQ 'YES' OR '&DSECT' EQ '').DOD\n         AIF   ('&NM' EQ '').DONES\n&NM      DS    0F            SUBFETCH PARAMTER LIST\n         AGO   .DONES\n.DOD     AIF   ('&NM' NE '').HAVNAM\n&NAME    SETC  'FETWORK'\n.HAVNAM  ANOP  ,\n&NAME    DSECT ,             SUBFETCH PARAMETER LIST\n.DONES   ANOP  ,\n&PFX.@DCB   DC  A(0)         PROGRAM LIBRARY OPEN DCB\n&PFX.@NAME  DC  A(0)         MEMBER NAME\n&PFX.MFBLD  EQU X'80'          ABOVE POINTS TO BLDL RESULTS\n&PFX.@LOAD  DC  A(0)         REQUESTED/RETURNED LOAD ADDRESS\n&PFX.#LOAD  DC  F'0'         STORAGE ACQUIRED (24-BITS)\n&PFX.@RELOC DC  A(0)         REQUESTED/RETURNED RELOCATION BASE\n&PFX.@ENTRY DC  A(0)         ENTRY ADDRESS WITH AMODE BIT\n&PFX.#MODSZ DC  F'0'         MODULE SIZE\n&PFX.OFLGSP DC  X'0'         SUBFETCH - SUBPOOL FOR LOADING\n&PFX.OFLGS1 DC  X'0'         OPTION FLAGS FOR SUBFETCH\n&PFX.OFALTN EQU X'80'          USE AN ALTERNATE NAME FOR CDE\n&PFX.OFBCDE EQU X'40'          FETCH TO CALL CDE TO BUILD ONE\n&PFX.OFBCDF EQU X'20'          CDE BUILD FAILED                 GP06308\n&PFX.OFNOLO EQU X'10'          CDE NOT TO ISSUE LOAD\n&PFX.OFREFR EQU X'08'          USE SP252 IF RENT/REFR AND AUTH  GP11270\n&PFX.OFFREN EQU X'04'          FORCE RE-ENTRANT                 GP11270\n&PFX.OFCLR0 EQU X'02'          CLEAR GOTTEN STORAGE TO 0        GP05261\n&PFX.OFCLRC EQU X'01'          CLEAR GOTTEN STORAGE TO X'CC'    GP05261\n&PFX.OFLGS2 DC  X'0'         OPTION FLAGS FOR SUBCDE\n&PFX.OFRENT EQU X'20'          FLAG LOADED MODULE RE-ENTRANT\n&PFX.OFREUS EQU X'10'          FLAG LOADED MODULE RE-USABLE\n&PFX.OFLGS3 DC  X'0'         OPTION FLAGS FOR SUBCDE\n&PFX.OFAPFL EQU X'02'          FLAG AS COMING FROM APF LIBRARY\n&PFX.OFAUTH EQU X'01'          FLAG AS BEING AUTHORIZED AC=1\n&PFX.FWCLRS EQU *-&PFX.@DCB    SIZE TO CLEAR\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIXD": {"ttr": 5907, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x05\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x08'\\x8f\\x00\\x13\\x00\\x17\\x00\\x1f\\x00\\r\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2008-10-04T00:13:00", "lines": 23, "newlines": 31, "modlines": 13, "user": "GERHARD"}, "text": "         MACRO\n&NM      FIXD  &RI,&WORK=DB,&RO=R0                               85132\n         GBLB  &ZZF@FIX\n         LCLA  &I\n&I       SETA  &SYSNDX\n&NM      MACPARM R0,(&RI),OP=LDR,OPR=LDR,OPM=LDCR,OPMR=LDCR\n         MACPARM R14,ZZF@FIX,OP=BAL\n         MACPARM &RO,(R0),OP=LR,OPR=LR,OPM=LCR,OPMR=LCR\n         AIF   (&ZZF@FIX).MEND\n&ZZF@FIX SETB  1\n         B     ZZF@&I\nZZF@FIX  SD    R0,=X'4F00000008000000'\n         BC    11,ZZF@FIXO   OVERLFOW\n         AW    R0,=X'4E00000100000000'  UNNORMALIZE\n         BC    4,ZZF@FIXO    OVERFLOW\n         STD   R0,0+&WORK    STASH\n         XI    4+&WORK,X'80' FIX SIGN\n         ICM   R0,15,4+&WORK GET LOW WORD AND SET CC\n         BR    R14           RETURN\nZZF@FIXO ICM   R0,15,=X'7FFFFFFF'  SET HUGE AND CC\n         BR    R14           RETURN\nZZF@&I   DS    0H\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FLD": {"ttr": 5909, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&L       FLD   &TYP,&LEN,&LAB,&BLEN,&SEP=1\n.*             TYP IS V, H, S, OR T\n.*             LEN IS THE DECIMAL LENGTH FOR H AND V,.*\n.*                    THE COLUMN NUMBER FOR T,\n.*                    AND THE NUMBER OF COLUMNS FOR S.\n.*             LAB IS THE LABEL OR LABEL LENGTH FOR H AND V\n.*             BLEN IS THE NUMBER OF BLANKS TO ALLOW AFTER THE FIELD\n.*             SEP, FOR H ONLY, IS THE NUMBER OF BLANKS BETWEEN\n.*                              THE LABEL AND THE FIELD\n         GBLA  &PCCLINE,&PCCPOS,&PCCLTYP\n         GBLB  &DBMAC\n         LCLA  &L2,&L3,&LN\n         LCLC  &KLUDGE\n         AIF   (NOT &DBMAC).NOSNAP\n         MNOTE *,'PCCPOS=&PCCPOS PCCLINE=&PCCLINE'\n.NOSNAP  ANOP\n         AIF   ('&TYP' EQ 'H').H        IS IT HORIZONTAL FIELD?\n         AIF   ('&TYP' EQ 'V').V        IS IT VERTICAL FIELD?\n         AIF   ('&TYP' EQ 'T').T        IS IT TAB?\n         AIF   ('&TYP' EQ 'S').S        IS IT SPACE?\n         MNOTE 8,'1ST OPERAND NOT H, V, S, OR T'\n         MEXIT\n.*\n.*\n.*\n.S       AIF   ('&LEN'(1,1) EQ '-').SBACK\n         AIF   (&PCCPOS+&LEN GT 80).SPACEU\n&PCCPOS  SETA  &PCCPOS+&LEN\n         MEXIT\n.SBACK   ANOP\n&KLUDGE  SETC  '&LEN'(2,K'&LEN-1)\n         AIF   (NOT &DBMAC).NOSNAP1\n         MNOTE *,'KLUDGE=&KLUDGE'\n.NOSNAP1 ANOP\n         AIF   (&PCCPOS-&KLUDGE LE 0).BACKU\n&PCCPOS  SETA  &PCCPOS-&KLUDGE\n         MEXIT\n.BACKU   MNOTE 8,'BACKSPACE PAST START OF LINE - POS SET TO 1'\n&PCCPOS  SETA  1\n         MEXIT\n.*\n.*\n.*\n.T       AIF   (&LEN GT 80).TABU\n&PCCPOS  SETA  &LEN\n         MEXIT\n.TABU    MNOTE 4,'TAB PAST POSITION 80 TREATED AS LNE NEXT'\n.SPACEU  LNE\n         MEXIT\n.*\n.*\n.*\n.H       ANOP\n&PCCLTYP SETA  0\n         AGO   .TSTLAB\n.*\n.*\n.*\n.V       ANOP\n&PCCLTYP SETA  1\n.TSTLAB  AIF   (T'&LAB EQ 'N').LABN\n         AIF   (T'&LAB EQ 'O').TSTBLEN\n&L2      SETA  K'&LAB\n         AIF   ('&LAB'(1,1) NE '''').TSTBLEN\n&L2      SETA  &L2-2\n         AGO   .TSTBLEN\n.LABN    ANOP\n&L2      SETA  &LAB\n.TSTBLEN AIF   (T'&BLEN EQ 'O').NOBLEN\n&L3      SETA  &BLEN\n.NOBLEN  AIF   ('&TYP' EQ 'V' AND &PCCPOS+&L2 LE 81                    *\n               AND &PCCPOS+&LEN LE 81                                  *\n               OR &PCCPOS+&L2+&LEN LE 81).NOSKIP\n         LNE\n.NOSKIP  AIF   ('&TYP' EQ 'H').HORG\n&LN      SETA  &L2\n         AIF   (&LN GE &LEN).VORG\n&LN      SETA  &LEN\n.VORG    AIF   (&L2 EQ 0).NOVL\n         ORG   BUF+(&PCCLINE-1)*80+&PCCPOS+&LN-&L2-1\nL&L      DS    CL&L2\n.NOVL    ORG   BUF+&PCCLINE*80+&PCCPOS+&LN-&LEN-1\nB&L      DS    CL&LEN\n&PCCPOS  SETA  &PCCPOS+&LN+&L3\n         MEXIT\n.HORG    ORG   BUF+(&PCCLINE-1)*80+&PCCPOS-1\n         AIF   (&L2 EQ 0).NOHL\nL&L      DS    CL&L2\n         AIF   ('&SEP' EQ '' OR '&SEP' EQ '0').NOHL\n&L2      SETA  &L2+&SEP\n         DS    CL&SEP\n.NOHL    AIF   (&LEN EQ 0).NOHB\nB&L      DS    CL&LEN\n.NOHB    ANOP\n&PCCPOS  SETA  &PCCPOS+&L2+&LEN+&L3\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FLGTAB": {"ttr": 5912, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x19\\x01\\x03\\x01\\x9f\\x01\\x03\\x01\\x9f \\x05\\x00D\\x00D\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-19T00:00:00", "modifydate": "2003-01-19T20:05:19", "lines": 68, "newlines": 68, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      FLGTAB &MASK,&TEXT,&LEN,&MLEN=\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  THIS MACRO GENERATES A TABLE OF FLAG BITS AND MATCHING TEXT       *\n.*  &MLEN (ON THE FIRST ENTRY) SPECIFIES THE BIT MASK LENGTH IN BYTES *\n.*  &TEXT SPECIFIES THE QUOTED OR UNQUOTED TEXT FOR THAT BIT MASK     *\n.*  &LEN OPTIONALLY OVERRIDES THE CALCULATED TEXT LENGTH              *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         GBLC  &ZZFGTLN      REMEMBER LENGTH GLOBALLY\n         LCLA  &I,&K,&L\n         LCLB  &QUO\n         LCLC  &Q1,&Q2\n.*\n.*  CHECK END REQUEST\n.*\n         AIF   ('&MASK' EQ '*END').END\n.*\n&QUO     SETB  ('&TEXT'(1,1) EQ '''')\n         AIF   (&QUO).NOFRAME\n&Q1      SETC  ''''\n&Q2      SETC  ''''\n.*\n.*  SET GLOBAL LENGTH AS NEEDED\n.*\n.NOFRAME AIF   ('&MLEN' EQ '').NOTMLEN\n&ZZFGTLN SETC  '&MLEN'\n.NOTMLEN AIF   ('&ZZFGTLN' NE '').GOTMLEN\n&ZZFGTLN SETC  '1'           DEFAULT MASK LENGTH IS 1\n.*\n.*  WHEN USER SPECIFIES A LENGTH, JUST EXPAND THE REQUEST\n.*\n.GOTMLEN AIF   ('&LEN' EQ '').COMLEN\n&NM      DC    AL1(&LEN-1),AL(&ZZFGTLN)(&MASK),CL(&LEN)&Q1&TEXT&Q2\n         MEXIT ,\n.*\n.*  CALCULATE THE LENGTH OF THE TEXT ITEM\n.*\n.COMLEN  AIF   (&QUO).QUOADJ\n&L       SETA  K'&TEXT\n&I       SETA  &L\n&K       SETA  1\n         AGO   .LOOP\n.QUOADJ  ANOP  ,\n&L       SETA  K'&TEXT-2\n&I       SETA  &L-1\n&K       SETA  2\n.*\n.*  SCAN FOR DOUBLE QUOTES, AND DECREMENT LENGTH BY ONE\n.*\n.LOOP    AIF   (&K GE &I).EXPQ\n         AIF   ('&TEXT'(&K,2) EQ '''''').DOUB\n&K       SETA  &K+1\n         AGO   .LOOP\n.DOUB    ANOP\n&K       SETA  &K+2\n&L       SETA  &L-1\n         AGO   .LOOP\n.*\n.*  GENERATE WITH FORCED LENGTH\n.*\n.EXPQ    ANOP\n&NM      DC    AL1(&L-1),AL(&ZZFGTLN)(&MASK),CL(&L)&Q1&TEXT&Q2\n         MEXIT ,\n.END     ANOP  ,\n&NM      DC    AL1(255)      END OF FLAG TABLE ENTRIES\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FLOATD": {"ttr": 5914, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x07\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x08'\\x8f\\x00\\x13\\x00\\x13\\x00\\x1c\\x00\\t\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.07", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2008-10-04T00:13:00", "lines": 19, "newlines": 28, "modlines": 9, "user": "GERHARD"}, "text": "         MACRO\n&NM      FLOATD &RI,&WORK=DB,&RO=R0                              85132\n         GBLB  &ZZF@FLT\n         LCLA  &I\n&I       SETA  &SYSNDX\n&NM      MACPARM R0,(&RI),OP=LR,OPR=LR,OPM=LCR,OPMR=LCR\n         MACPARM R14,ZZF@FLT,OP=BAL\n         MACPARM &RO,(R0),OP=LER,OPR=LER,OPM=LCER,OPMR=LCER     GP03007\n         AIF   (&ZZF@FLT).MEND\n&ZZF@FLT SETB  1\n         B     ZZF@&I\nZZF@FLT  ST    R0,4+&WORK    STASH\n         XI    &WORK+4,X'80' FLIP A BIT\n         MVC   &WORK.(4),=X'4E00000080000000'\n         LD    R0,&WORK\n         SD    R0,=X'4E00000080000000' NORMALIZE\n         BR    R14           RETURN\nZZF@&I   DS    0H\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FMT": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x18\\x7f\\x01\\x06&?\\x00\\x05\\x00G\\x00D\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-07-06T00:00:00", "modifydate": "2006-09-20T00:05:00", "lines": 71, "newlines": 68, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      FMT   &VALUE,&OLN,&SIGN=Y,&CENT=N,&GROUP=N,                   *\n               &FILL=N,&LJUST=N,&SPACE=N,&TRUNC=N,&TYPE=DEC\n.**********************************************************************\n.*\n.*  THIS MACRO INVOKES NUMERIC FORMATTING SERVICES (VIA @FORMATS)\n.*\n.*  FIRST POSITIONAL IS ADDRESS/NAME OF VALUE\n.*  SECOND POSITIONAL USED TO SPECIFY (FORCED) OUTPUT LENGTH\n.*\n.*  OTHER SERVICES:    SIGN=Y - NEGATIVE # PREFIXED BY MINUS(DEFAULT)\n.*     CENT=Y  - FORMAT A DECIMAL NUMBER WITH TWO PLACES WWW.PP\n.*     GROUP=Y - FORMAT IN GROUPS OF THREE 123,456\n.*     FILL=Y  - FILL WITH LEADING ZEROES  00012300\n.*     LJUST=Y - LEFT JUSTIFY THE NUMBER, THEN ABUT TEXT\n.*     SPACE=Y - ONE SPACE BETWEEN NUMBER AND TEXT\n.*     TRUNC=N - OVERFLOW (***) WHEN SIGNIFICANT DIGITS LOST (CC=4)\n.*\n.*  EXCEPT FOR LJUST=Y, ALL OUTPUT FIELDS WILL BE THE MAXIMUM LENGTH\n.*  POSSIBLE (TO MAINTAIN COMMON ALIGNMENT) DEPENDING ON THE INPUT\n.*  LENGTH.  OUTPUT LENGTH INCLUDES SIGN (UNLESS SIGN=N) AND COMMAS\n.*  AND PERIODS.  OR SPECIFY EXPLICIT OUTPUT LENGTH (NUM,LEN)\n.*  LJUST=Y WITH SHORT LENGTH TRUNCATES ON RIGHT, ELSE LEFT.\n.*\n.**********************************************************************\n         GBLC  &MACPLAB\n&MACPLAB SETC  '&NM'\n         LCLA  &EPYT,&OPTS\n         LCLA  &K,&I,&J\n         LCLB  &O01,&O02,&O04,&O08,&O10,&O20,&O40,&O80\n         LCLC  &L\n&L       SETC  'L'''\n&O80     SETB  ('&SIGN' EQ 'Y' OR '&SIGN' EQ 'YES')\n&O40     SETB  ('&LJUST' EQ 'Y' OR '&LJUST' EQ 'YES')\n&O20     SETB  ('&SPACE' EQ 'Y' OR '&SPACE' EQ 'YES')\n&O10     SETB  ('&FILL' EQ 'Y' OR '&FILL' EQ 'YES')\n&O08     SETB  ('&TRUNC' EQ 'Y' OR '&TRUNC' EQ 'YES')\n.*&O04     SETB  ('&O04' EQ 'Y' OR '&O04' EQ 'YES')\n&O02     SETB  ('&GROUP' EQ 'Y' OR '&GROUP' EQ 'YES')\n&O01     SETB  ('&CENT' EQ 'Y' OR '&CENT' EQ 'YES')\n&OPTS    SETA  &O80*128+&O40*64+&O20*32+&O10*16\n&OPTS    SETA  &OPTS+&O08*8+&O04*4+&O02*2+&O01\n         AIF   ('&TYPE' EQ 'DEC' OR '&TYPE' EQ 'PACKED').LADD\n&EPYT    SETA  1\n         AIF   ('&TYPE' EQ 'ADEC' OR '&TYPE' EQ 'ABSDEC').LADD\n&EPYT    SETA  2\n         AIF   ('&TYPE' EQ 'INT' OR '&TYPE' EQ 'INTEGER').LADD\n&EPYT    SETA  3\n         AIF   ('&TYPE' EQ 'AINT' OR '&TYPE' EQ 'ABSINT').LADD\n&EPYT    SETA  5\n         AIF   ('&TYPE' EQ 'HEX').LADD\n&EPYT    SETA  6\n         AIF   ('&TYPE' EQ 'SBIN' OR '&TYPE' EQ 'SBIT').LADD\n&EPYT    SETA  7\n         AIF   ('&TYPE' EQ 'BIN' OR '&TYPE' EQ 'BINARY').LADD\n         MNOTE 8,'INVALID NUMERIC TYPE=&TYPE '\n&EPYT    SETA  4             DO AS HEX\n.LADD    AIF   ('&OLN' EQ '').NOLOAD\n         MACPARM R0,12,=Y(&OLN*256),OP=ICM,MODE=THREE USER'S LENGTH\n         MACPARM R0,3,=Y(&EPYT*256+&OPTS),OP=ICM,MODE=THREE TYPE\n         AGO   .TESTCC\n.NOLOAD  MACPARM R0,&EPYT*256+&OPTS,OP=LA   LOAD FORMATTING SELECTION\n.TESTCC  AIF   (N'&VALUE LT 2).NONUML\n         MACPARM R1,&VALUE(1),OP=LA LOAD ADDRESS OF PACKED COUNTER\n         MACPARM R0,4,=AL1(&VALUE(2)),OP=ICM,MODE=THREE\n         AGO   .CMNUML\n.NONUML  MACPARM R1,&VALUE,OP=LA LOAD ADDRESS OF PACKED COUNTER\n         MACPARM R0,4,=AL1(&L&VALUE),OP=ICM,MODE=THREE\n.CMNUML  MACPARM R15,=V(@FORMATS),OP=L\n         BASR  R14,R15       CALL FORMATTING SERVICES\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FSAWORK": {"ttr": 6148, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x13\\x01\\x03\\x13\\x0f\\x01\\x03\\x13\\x0f\\x13D\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-05-10T00:00:00", "modifydate": "2003-05-10T13:44:13", "lines": 14, "newlines": 14, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      FSAWORK &PFX=FSA                               ADDED ON 81149\n         LCLC  &NAME\n&NAME    SETC  'FSAWORK'\n         AIF   ('&NM' EQ '').NONAME\n&NAME    SETC  '&NM'\n.NONAME  ANOP  ,\n&NAME    DSECT ,             HEADER FOR WORK AREAS CHAINED FROM TCBFSA\n&PFX.LINK  DC  A(0)          POINTER TO NEXT AREA ON CHAIN\n&PFX.ID    DC  CL4' '        NAME OF THIS WORK AREA\n&PFX.SPLEN DC  F'0'          SUBPOOL/LENGTH OF THIS ENTRY\n&PFX.TCB   DC  A(0)          TCB ADDRESS OF OWNER\n&PFX.PFXL  EQU *-&PFX.LINK   SIZE OF PREFIX\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETCC": {"ttr": 6150, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x08%/\\x01\\x08%/\\x00\\x04\\x00\\n\\x00\\n\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2008-09-08T00:00:00", "modifydate": "2008-09-08T00:04:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      GETCC &R                                       ADDED ON 93168\n         GBLB  &MVSXA\n         GBLC  &SYSSPLV                                          93097\n         AIF   (NOT &MVSXA AND '&SYSSPLV' LT '2').TLAB           93097\n&NM      IPM   &R            INSERT COND.CODE AND PROG.MASK\n         MEXIT ,\n.TLAB    ANOP  ,                                                GP08252\n&NM      BALR  &R,0          LOAD COND.CODE AND PROG.MASK\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETJESID": {"ttr": 6152, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x08\"_\\x01\\x04\\x00 \\x00\\x16\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2008-08-12T01:04:00", "lines": 32, "newlines": 22, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      GETJESID &ASCBREG=R15,&HCTREG=R15,&SVT=,&HCT=ADDRHCT,&SVTREG=R*\n               1,&ERR=EXCXCB\n.**********************************************************************\n.*                                                                   **\n.*   EXHIBIT SUBROUTINE TO FIND JES2 INFORMATION                     **\n.*                                                                   **\n.**********************************************************************\n&NM      MVC   INVOKE(8),=CL8'* JES2 *'\n         SLR   R0,R0         SET FUNCTION = GET SUBSYSTEM        87268\n         BALS  R14,EXWMVS    GET EXTENDED FUNCTION               87268\n         MVC   INVOKE+2(4),EXWJ2NAM  GET CURRENT SUBSYSTEM NAME\n         MACPARM R15,R15,&ERR,OP=BXH,MODE=THREE                 GP08225\n         L     R0,EXWJ2AID   GET JES ASID\n         BALS  R14,EXWGETAS  CHECK STATUS\n         AIF   ('&ASCBREG' EQ '').SKPASCB                       GP08225\n         LTR   &ASCBREG,R15  TEST ASCB ADDRESS                  GP08225\n         MACPARM &ERR,OP=BZ,OPR=BZR,MODE=ONE     JES GONE ?     GP08225\n.SKPASCB ICM   &SVTREG,15,HASPHCT  TEST SVT ADDRESS             GP08225\n         MACPARM &ERR,OP=BZ,OPR=BZR,MODE=ONE     JES GONE ?     GP08225\n         USING SSVT,&SVTREG                                     GP08225\n         MACPARM &SVTREG,&SVT,OP=ST,OPR=LR,NULL=SKIP            GP08225\n         CLC   $SVQLOKE,EXWJ2NAM  NOT CLOBBERED ?\n         MACPARM &ERR,OP=BNE,OPR=BNER,MODE=ONE   JES GONE ?     GP08225\n         MVC   EXWCRMID,EXWJ2AID  SET ASID\n         AIF   ('&HCTREG' EQ '').SKIPHCT                        GP08225\n         MACPARM &HCTREG,15,$SVHCT,OP=ICM,MODE=THREE,NULL=SKIP  GP08225\n         AIF   ('&HCT' EQ '').SKIPHCT\n         ST    &HCTREG,&HCT  STASH $HCT ADDRESS                 GP08225\n.SKIPHCT NEED  $HCT          FORCE HCT AND SVT\n         DROP  &SVTREG\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETREG": {"ttr": 6154, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x044/\\x01\\x05\\x01\\x8f\\x15B\\x00)\\x00(\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2004-12-07T00:00:00", "modifydate": "2005-01-18T15:42:00", "lines": 41, "newlines": 40, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      GETREG &R1,&R2,&MODE=OS,&WORK=R15                      GP04234\n.**********************************************************************\n.*                                                                    *\n.*   LOAD REGISTER(S) FROM SAVE AREA OR STACK                         *\n.*   MODE = OS - R13 IS CURRENT SAVE AREA; GET FROM OLDER S.A.        *\n.*   MODE = USER - R13 POINTS TO USER'S AREA                          *\n.*   MODE = BAKR (OR ZZZBAKR GLOBAL ON) - USE EREG                    *\n.*                                                                    *\n.*   ONLY R14 - R12 ARE VALID, AND OPTIONAL SECOND REGISTER MUST      *\n.*     NOT BE SAVE AREA AFTER FIRST (R14-R5 OK; R12-R15 NOT)          *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &MVSESA,&ZZZBAKR\n         GBLC  &MACPLAB\n         LCLC  &O1,&O2,&W,&F\n&MACPLAB SETC  '&NM'\n&W       SETC  '&WORK'\n&O1      SETC  '&R1(1)'\n&O2      SETC  '&R2(1)'\n         AIF   ('&O2' NE '').O\n&O2      SETC  '&O1'\n.O       AIF   ('&MODE' EQ 'BAKR' OR &ZZZBAKR).BAKR\n&F       SETC  '4*((&O1+2)-(((&O1+2)/16)*16))+12'\n   AIF   ('&MODE' EQ 'OS' OR '&MODE' EQ 'OSSAVE' OR '&MODE' EQ '').STD\n&W       SETC  'R13'         ALREADY POINTS TO USER'S SAVE AREA\n         AIF   ('&MODE' EQ 'USER').USER\n         MNOTE 4,'GETREG: INVALID MODE=&MODE '\n.STD     AIF   ('&O2' EQ '0' OR '&O2' EQ 'R0').STD1\n&W       SETC  '&O2'\n         AGO   .STDL\n.STD1    AIF   ('&O1' EQ '0' OR '&O1' EQ 'R0').STDL\n&W       SETC  '&O1'\n.STDL    MACPARM &W,4(,R13),OP=L  USER'S SAVE AREA\n.USER    AIF   ('&O1' NE '&O2').STDLM\n         MACPARM &O1,&F.(,&W),OP=L\n         MEXIT ,\n.STDLM   MACPARM &O1,&O2,&F.(&W),OP=LM,MODE=THREE\n         MEXIT ,\n.BAKR    EREG  &O1,&O2\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HCON": {"ttr": 6156, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00D\\x01\\x02)\\x8f\\x01\\x02)\\x8f\"Q\\x00D\\x00D\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-25T00:00:00", "modifydate": "2002-10-25T22:51:44", "lines": 68, "newlines": 68, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      HCON  &STR,&END=                              ADDED ON GP02298\n         GBLB  &VCON@OP\n         GBLC  &VCON@NM\n         LCLA  &I,&J,&K,&L\n.**********************************************************************\n.**                                                                  **\n.**  HCON BUILDS A TEXT MESSAGE BEGINNING WITH A TWO-BYTE LENGTH,    **\n.**    FOLLOWED BY TEXT.                                             **\n.**                                                                  **\n.**  USE   HCON  'TEXT'                                              **\n.**                                                                  **\n.**  OR    HCON  'TEXT1',END=LABEL                                   **\n.**        DC     ...ZERO OR MORE STORAGE ITEMS                      **\n.**  LABEL HCON   *END    TO GENERATE A SINGLE MESSAGE               **\n.**                                                                  **\n.**********************************************************************\n&K       SETA  K'&STR\n         AIF   (T'&END NE 'O').TSTOPEN\n         AIF   (T'&STR EQ 'O').CLOSE\n         AIF   ('&STR'(1,1) EQ '*').CLOSE\n.TSTOPEN AIF   (&K EQ 0).COMLEN\n         AIF   ('&STR'(1,1) NE '''').COMLEN\n&I       SETA  2\n&J       SETA  &K-2\n&K       SETA  &J\n.LOOP    AIF   ('&STR'(&I,2) EQ '''''').SK2\n         AIF   ('&STR'(&I,2) EQ '&&').SK2\n&I       SETA  &I+1\n         AGO   .INC\n.SK2     ANOP  ,\n&I       SETA  &I+2\n&K       SETA  &K-1\n.INC     AIF   (&I LE &J).LOOP\n.COMLEN  AIF   (NOT &VCON@OP).NOPEN\n         MNOTE 4,'PRIOR HCON/VCON NOT TERMINATED'\n&VCON@OP SETB  0\n.NOPEN   AIF   (T'&END NE 'O').OPEN\n         AIF   (&K EQ 0).REQSTR\n         AIF   ('&STR'(1,1) EQ '''').QSTR\n&NM      DC    AL2(&K),C'&STR'\n         AGO   .MEND\n.QSTR    ANOP  ,\n&NM      DC    AL2(&K),C&STR\n         AGO   .MEND\n.OPEN    AIF   (&K NE 0).OPSTR\n&NM      DC    AL2(&END-*-2)\n         AGO   .SETOPEN\n.OPSTR   AIF   ('&STR'(1,1) EQ '''').OQSTR\n&NM      DC    AL2(&END-*-2),C'&STR'\n         AGO   .SETOPEN\n.OQSTR   ANOP  ,\n&NM      DC    AL2(&END-*-2),C&STR\n.SETOPEN ANOP  ,\n&VCON@NM SETC  '&END'\n&VCON@OP SETB  1\n         MEXIT ,\n.REQSTR  MNOTE 4,'TEXT STRING REQUIRED'\n         MEXIT ,\n.CLOSE   AIF   (&VCON@OP).WASOPEN\n         MNOTE 4,'HCON/VCON END OUT OF SEQUENCE'\n.WASOPEN AIF   ('&NM' EQ '' OR '&NM' EQ '&VCON@NM').BLAB\n&NM      EQU   *\n.BLAB    ANOP  ,\n&VCON@NM EQU   *\n&VCON@NM SETC  ''\n&VCON@OP SETB  0\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IAC": {"ttr": 6158, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x05\\x18\\x9f\\x01\\x05\\x18\\x9f\\x114\\x00\\x07\\x00\\t\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2005-07-08T00:00:00", "modifydate": "2005-07-08T11:34:00", "lines": 7, "newlines": 9, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      IAC   &R                                       ADDED ON 05189\n.*\n.*       THIS MODULE SHOWS PRIMARY ADDRESS SPACE MODE FOR MVS 3.8\n.*\n&NM      MACPARM &R,2,=X'00',OP=ICM,MODE=THREE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INC": {"ttr": 6160, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x02%\\x0f\\x01\\t\\x01\\x7f\\x19D\\x005\\x00\\x1c\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-09-07T00:00:00", "modifydate": "2009-01-17T19:44:00", "lines": 53, "newlines": 28, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      INC   &R,&INC=,&WORK=R0,&IN@=     RENAMED FROM COUNT ON 89247\n         GBLC  &MACPLAB\n         LCLA  &K                                               GP09016\n         LCLB  &REG                                             GP09016\n         LCLC  &WROK,&CNI                                       GP09016\n&WROK    SETC  '&WORK(1)'                                       GP09016\n&MACPLAB SETC  '&NM'\n&K       SETA  K'&R                                             GP09016\n         AIF   (&K LT 3).NREG                                   GP09016\n         AIF   ('&R'(1,1) NE '(' OR '&R'(2,1) EQ '(').NREG      GP09016\n         AIF   ('&R'(&K,1) NE ')' OR '&R'(&K-1,1) EQ ')').NREG  GP09016\n&WROK    SETC  '&R(1)'                                          GP09016\n&REG     SETB  1                                                GP09016\n.NREG    AIF   ('&IN@' NE '').LOAD                              GP02250\n         AIF   ('&INC' EQ '-1').BCTR\n&K       SETA  K'&INC                                           GP09016\n         AIF   (&K LT 3).LA                                     GP09016\n         AIF   ('&INC'(1,1) NE '(' OR '&INC'(2,1) EQ '(').LA\n         AIF   ('&INC'(&K,1) NE ')' OR '&INC'(&K-1,1) EQ ')').LA\n         MACPARM &WROK,&R,OP=L,OPR=LR\n         MACPARM &WROK,&INC,OPR=AR,OPMR=SR                       82003\n         AGO   .COMST\n.BCTR    MACPARM &WROK,&R,OP=L,OPR=LR\n         MACPARM &WROK,(0-0),OPR=BCTR\n         AGO   .COMST\n.LOAD    AIF   ('&INC' EQ '' OR '&INC' EQ '1').LOADER           GP02250\n         MNOTE 'INC: INC KEYWORD &INC CONFLICTS WITH IN@; IGNORED'\n.LOADER  AIF   ('&WROK' EQ '&IN@(1)').LOADRV                    GP02250\n         MACPARM &WROK,&R,OP=L,OPR=LR                           GP02250\n         MACPARM &WROK,&IN@,OP=A,OPR=AR,OPM=S,OPMR=SR           GP02250\n         AGO   .COMST                                           GP02250\n.LOADRV  MACPARM &WROK,(&IN@(1)),OP=L,OPR=LR                    GP02250\n         MACPARM &WROK,&R,OP=A,OPR=AR                           GP02250\n         AGO   .COMST                                           GP02250\n.LA      AIF   (NOT &REG).LAST                                  GP09016\n         AIF   ('&INC' NE '').AINC                              GP09016\n         MACPARM &WROK,=F'1',OP=A                               GP09016\n         MEXIT ,                                                GP09016\n.AINC    AIF   ('&INC'(1,1) NE '-').BINC                        GP09016\n&K       SETA  K'&INC                                           GP09016\n         AIF   (&K LT 4).BINC                                   GP09016\n         AIF   ('&INC'(2,1) NE '(' OR '&INC'(3,1) EQ '(').BINC  GP09016\n         AIF   ('&INC'(&K,1) NE ')' OR '&INC'(&K-1,1) EQ ')').BINC\n&CNI     SETC  '&INC'(2,&K-1)\n         MACPARM &WROK,&CNI,OP=SR,OPR=SR                        GP09016\n         MEXIT ,                                                GP09016\n.BINC    MACPARM &WROK,=A(&INC),OP=A                            GP09016\n         MEXIT ,                                                GP09016\n.LAST    MACPARM &WROK,&INC,NULL=1\n         MACPARM &WROK,&R,OP=A,OPR=AR,OPM=S,OPMR=SR              82003\n.COMST   MACPARM &WROK,&R,OP=ST,OPR=LR,MODE=REV\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INCH": {"ttr": 6162, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x05\\x00\\x00\\x01\\t\\x01o\\x01\\t\\x01\\x7f\\x19T\\x005\\x00\"\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.05", "flags": 0, "createdate": "2009-01-16T00:00:00", "modifydate": "2009-01-17T19:54:00", "lines": 53, "newlines": 34, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      INCH  &R,&INC=,&WORK=R0,&IN@=    RENAMED FROM COUNTH ON 89247\n         GBLC  &MACPLAB\n         LCLA  &K                                               GP09016\n         LCLB  &REG                                             GP09016\n         LCLC  &WROK,&CNI                                       GP09016\n&WROK    SETC  '&WORK(1)'                                       GP09016\n&MACPLAB SETC  '&NM'\n&K       SETA  K'&R                                             GP09016\n         AIF   (&K LT 3).NREG                                   GP09016\n         AIF   ('&R'(1,1) NE '(' OR '&R'(2,1) EQ '(').NREG      GP09016\n         AIF   ('&R'(&K,1) NE ')' OR '&R'(&K-1,1) EQ ')').NREG  GP09016\n&WROK    SETC  '&R(1)'                                          GP09016\n&REG     SETB  1                                                GP09016\n.NREG    AIF   ('&IN@' NE '').LOAD                              GP02250\n         AIF   ('&INC' EQ '-1').BCTR\n&K       SETA  K'&INC                                           GP09016\n         AIF   (&K LT 3).LA                                     GP09016\n         AIF   ('&INC'(1,1) NE '(' OR '&INC'(2,1) EQ '(').LA\n         AIF   ('&INC'(&K,1) NE ')' OR '&INC'(&K-1,1) EQ ')').LA\n         MACPARM &WROK,&R,OP=LH,OPR=LR\n         MACPARM &WROK,&INC,OPR=AR,OPMR=SR                       82003\n         AGO   .COMST\n.BCTR    MACPARM &WROK,&R,OP=LH,OPR=LR\n         MACPARM &WROK,(0-0),OPR=BCTR\n         AGO   .COMST\n.LOAD    AIF   ('&INC' EQ '' OR '&INC' EQ '1').LOADER           GP02250\n         MNOTE 'INCH: INC KEYWORD &INC CONFLICTS WITH IN@; IGNORED'\n.LOADER  AIF   ('&WROK' EQ '&IN@(1)').LOADRV                    GP02250\n         MACPARM &WROK,&R,OP=LH,OPR=LR                          GP02250\n         MACPARM &WROK,&IN@,OP=AH,OPR=AR,OPM=SH,OPMR=SR         GP02250\n         AGO   .COMST                                           GP02250\n.LOADRV  MACPARM &WROK,(&IN@(1)),OP=LH,OPR=LR                   GP02250\n         MACPARM &WROK,&R,OP=AH,OPR=AR                          GP02250\n         AGO   .COMST                                           GP02250\n.LA      AIF   (NOT &REG).LAST                                  GP09016\n         AIF   ('&INC' NE '').AINC                              GP09016\n         MACPARM &WROK,=H'1',OP=AH                              GP09016\n         MEXIT ,                                                GP09016\n.AINC    AIF   ('&INC'(1,1) NE '-').BINC                        GP09016\n&K       SETA  K'&INC                                           GP09016\n         AIF   (&K LT 4).BINC                                   GP09016\n         AIF   ('&INC'(2,1) NE '(' OR '&INC'(3,1) EQ '(').BINC  GP09016\n         AIF   ('&INC'(&K,1) NE ')' OR '&INC'(&K-1,1) EQ ')').BINC\n&CNI     SETC  '&INC'(2,&K-1)\n         MACPARM &WROK,&CNI,OP=SR,OPR=SR                        GP09016\n         MEXIT ,                                                GP09016\n.BINC    MACPARM &WROK,=AL2(&INC),OP=AH                         GP09016\n         MEXIT ,                                                GP09016\n.LAST    MACPARM &WROK,&INC,NULL=1\n         MACPARM &WROK,&R,OP=AH,OPR=AR,OPM=SH,OPMR=SR            82003\n.COMST   MACPARM &WROK,&R,OP=STH,OPR=LR,MODE=REV\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INDEC": {"ttr": 6164, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x11\\x0f\\x01\\x06&?\\x00\\x10\\x00+\\x00&\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-04-20T00:00:00", "modifydate": "2006-09-20T00:10:00", "lines": 43, "newlines": 38, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO\n&NM      INDEC &TO,&FROM,&FL\n         GBLB  &INLINE(50)\n         GBLC  &MACPLAB\n.**********************************************************************\n.*                                                                   **\n.*   INLINE DECIMAL CONVERSION FROM INTEGER TO EBCDIC                **\n.*                                                                   **\n.**********************************************************************\n         LCLC  &L\n&MACPLAB SETC  '&NM'\n&INLINE(11) SETB 1\n&L       SETC  'L'''\n         AIF   ('&FROM'(1,1) EQ '(').L\n         AIF   ('&FL' EQ '').DEF\n         AIF   ('&FL' EQ '1').IC\n         AIF   ('&FL' EQ '2').LH\n         AIF   ('&FL' EQ '3').LA\n         AIF   ('&FL' EQ '4').L\n         MNOTE 4,'INVALID LENGTH ON INDEC'\n         MEXIT\n.IC      ANOP\n         MACPARM R0,(R0),MODE=EVEN  CLEAR FOR IC\n         IC    R0,&FROM .       LOAD VALUE\n         AGO   .COM\n.DEF     ANOP\n.LH      ANOP\n         MACPARM R0,&FROM,OP=LH\n         AGO   .COM\n.LA      ANOP\n         MACPARM DB+1(3),&FROM,MODE=EVEN,OP=MVC\n         MVC   DB+1(3),&FROM .     MOVE VALUE\n         MVI   DB,0 .        CLEAR HIGH BYTE\n         L     R0,DB .       LOAD VALUE\n         AGO   .COM\n.L       ANOP\n         MACPARM R0,&FROM,OP=L\n.COM     ANOP\n         MACPARM R0,DB,OP=CVD . CONVERT TO PACKED\n         MVC   DCONWORK,DCONPAT .   MOVE EDIT PATTERN\n         ED    DCONWORK,DB .   EDIT\n         MVC   &TO,DCONWORK+16-&L&TO .   MOVE OUTPUT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INDSN": {"ttr": 6166, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00E\\x00\\x99\\x11\\x0f\\x01\\x01\\x01?\\x145\\x00J\\x00A\\x00\\r\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-04-20T00:00:00", "modifydate": "2001-01-13T14:35:45", "lines": 74, "newlines": 65, "modlines": 13, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      INDSN &DSN=DRDSN,&OUT=R1,&LEN=R2,&LV=44,&IN=R5,&SAVE=   84289\n         LCLA  &I,&LONG\n         LCLB  &SV                                              GP01013\n&I       SETA  &SYSNDX\n&SV      SETB  ('&SAVE' EQ 'Y')                                 GP01013\n&SV      SETB  (&SV OR '&SAVE' EQ 'YES')                        GP01013\n&NM      MACPARM R14,&DSN\n         MACPARM R15,&LV\n         MACPARM R1,(&IN)\n         AIF   (NOT &SV).NSAV1                                  GP01013\n         MACPARM R10,0(R13),OP=ST                               GP01013\n.NSAV1   MACPARM R10,15,EXRESAD,OP=ICM,MODE=THREE  RESIDENT MODULE ?\n         BZ    ZZI&I.A       NO; JUST CHECK SYS1\n         BALS  R9,20(,R10)   CALL LPA RESIDENT FUNCTION          93046\n         B     ZZI&I.L       SKIP AROUND IF PREFIX FOUND\nZZI&I.A  DS    0H                                                93046\n         AIF   (NOT &SV).NSAV2                                  GP01013\n         MACPARM R10,0(R13),OP=L                                GP01013\n.NSAV2   AIF   (NOT &LONG).SYS                                   93046\n         CLI   0(R1),C'.'    UID PREFIX ?                        93002\n         BE    ZZI&I.U       YES                                 93002\n         CLI   0(R1),C';'    UID+ACCT PREFIX ?                   93002\n         BE    ZZI&I.U       YES                                 93002\n         CLI   0(R1),C'\u00a2'    ACCOUNT ONLY ?                      93002\n         BE    ZZI&I.N       YES                                 93002\n.SYS     CLI   0(R1),C'&&'   SPECIAL INPUT NAME ?\n         BNE   ZZI&I.L       NO\n         MVC   0(4,R14),=C'SYS1' MOVE INDEX LEVEL                93002\n         B     ZZI&I.4       JOIN COMMON                         93002\n         AIF   (NOT &LONG).SYSC                                  93046\nZZI&I.U  CLI   EXWUID,C' '   IS THERE A USER ID ?                93002\n         BNH   ZZI&I.L       NO; FAIL                            93002\n         MVC   0(8,R14),EXWUID  MOVE USER ID                     93002\n         LA    R0,8          SET LENGTH TO SKIP                  93002\n         ST    R14,12(,R13)  SAVE START                          93002\n         AR    R14,R0        PAST LAST BYTE                      93002\nZZI&I.V  BCTR  R14,0         BACK-UP ONE                         93002\n         CLI   0(R14),C' '   TRAILING GUNK ?                     93002\n         BH    ZZI&I.W       NO                                  93002\n         BCT   R0,ZZI&I.V                                        93002\nZZI&I.W  L     R14,12(,R13)  RESTORE START                       93002\n         CLI   0(R1),C';'    UID PLUS ACCOUNT ?                  93002\n         BNE   ZZI&I.X       NO; GO TO COMMON EXIT               93002\n         CLI   EXWACCT,C' '  ANY ACCOUNT ?                       93002\n         BNH   ZZI&I.X       NO; GO TO COMMON                    93002\n         AR    R14,R0        GET END AGAIN                       93002\n         MVI   0(R14),C'.'   MAKE INDEX POINT                    93002\n         MVC   1(8,R14),EXWACCT  MOVE ACCOUNT                    93002\nZZI&I.9  LA    R14,9(R14,0)  MAKE HALF-WORD CONSTANT             93002\n         AH    R0,ZZI&I.9+2  SET NEW LENGTH                      93002\nZZI&I.C  BCTR  R14,0         BACK-SPACE ONE                      93002\n         CLI   0(R14),C' '   ANY THERE THERE ?                   93002\n         BH    ZZI&I.D       YES                                 93002\n         BCT   R0,ZZI&I.C    GO AGAIN                            93002\nZZI&I.D  L     R14,12(,R13)  RESTORE START                       93002\n         B     ZZI&I.X       ADD INDEX POINT, ETC.               93002\nZZI&I.N  CLI   EXWACCT,C' '   ANY ACCOUNT ?                      93002\n         BNH   ZZI&I.L       NO; WILL FAIL                       93002\n         MVC   0(4,R14),EXWACCT  MAKE MAJOR ACCOUNT              93002\n.SYSC    ANOP  ,                                                 93046\nZZI&I.4  LA    R0,4          SET LENGTH TO FOUR                  93002\nZZI&I.X  LA    R1,1(,R1)     SKIP OVER SPECIAL CHARACTER\n         AR    R14,R0        ADJUST OUTPUT ADDRESS\n         SR    R15,R0        ADJUST OUTPUT LENGTH\n         MVI   0(R14),C'.'   MAKE INDEX POINT                    93002\n         LA    R14,1(,R14)   SKIP IT                             93002\n         BCTR  R15,0         AND SET FINAL LENGTH                93002\nZZI&I.L  MACPARM &IN,(R1)    RESTORE INPUT ADDRESS REGISTER\n         MACPARM &OUT,(R14)  AND OUTPUT\n         MACPARM &LEN,(R15)  AND RESIDUAL LENGTH\n         AIF   (NOT &SV).NSAV3                                  GP01013\n         MACPARM R10,0(R13),OP=L                                GP01013\n.NSAV3   MEND  ,                                                GP01013\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INEDIT": {"ttr": 6169, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      INEDIT &OUT,&IN,&MASK\n         LCLC  &L\n&L       SETC  'L'''\n       INSETS  INDEC\n         AIF   ('&MASK' EQ '').DEF\n&NM      MVC   DCONWORK(&L&OUT+1),&MASK\n         ED    DCONWORK(&L&OUT+1),&IN\n.COM     MVC   &OUT,DCONWORK+1\n         MEXIT\n.DEF     ANOP\n&NM      MVC   DCONWORK,DCONMASK\n         ED    DCONWORK,&IN\n         AGO   .COM\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INHEX": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x03\\x01\\x1f\\x01\\x065?\\x001\\x00-\\x00\\x1a\\x00\\x0e\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2003-01-11T00:00:00", "modifydate": "2006-12-19T00:31:00", "lines": 45, "newlines": 26, "modlines": 14, "user": "GERHARD"}, "text": "         MACRO\n&NM      INHEX &OUT,&IN,&LIN,&MAKE=                             GP03011\n         GBLB  &INLINE(50)\n         GBLC  &ZZIXMAK                                         GP03016\n         LCLC  &L\n&INLINE(5) SETB 1\n&L       SETC  'L'''\n         AIF   ('&MAKE' EQ '').NORIDE                           GP03016\n&ZZIXMAK SETC  '&MAKE'                                          GP03016\n.NORIDE  AIF   ('&ZZIXMAK' NE '').BRANCH                        GP03016\n&ZZIXMAK SETC  'UPD'         DEFAULT FORMATTING                 GP03016\n.BRANCH  AIF   ('&ZZIXMAK' EQ 'DEB').DEB                        GP03011\n         AIF   ('&ZZIXMAK' EQ 'OUT').OUT                         89260\n         AIF   ('&ZZIXMAK' EQ 'OUTC').OUT                       GP06353\n         AIF   ('&LIN' NE '').UPDLIN                            GP06282\n&NM      UNPK  UPD(&L&OUT+1),&IN.(&L&OUT/2+1)\n         TR    UPD(&L&OUT),HEXTAB\n         MVC   &OUT,UPD\n         MEXIT ,                                                 89260\n.UPDLIN  ANOP  ,                                                GP06282\n&NM      UNPK  UPD(2*&LIN+1),&IN.(&LIN+1)                       GP06282\n         TR    UPD(2*&LIN),HEXTAB                               GP06282\n         MVC   &OUT.(2*&LIN),UPD                                GP06282\n         MEXIT ,                                                GP06282\n.OUT     AIF   ('&LIN' NE '').OUTLIN                            GP06282\n&NM      UNPK  &OUT.(&L&OUT+1),&IN.(&L&IN+1)                     89260\n         TR    &OUT,HEXTAB                                       89260\n         AIF   ('&ZZIXMAK' NE 'OUTC').MEND                      GP06353\n         MVI   &OUT+L'&OUT,C' '                                 GP06353\n         MEXIT ,\n.OUTLIN  ANOP  ,                                                GP06282\n&NM      UNPK  DB(2*&LIN+1),&IN.(&LIN+1)                        GP06282\n         TR    DB(2*&LIN),HEXTAB                                GP06282\n         MVC   &OUT.(2*&LIN),DB                                 GP06282\n         MEXIT ,                                                GP06282\n.DEB     AIF   ('&LIN' NE '').DEBLIN                            GP03011\n&NM      UNPK  DBWDB(&L&OUT+1),&IN.(&L&OUT/2+1)                 GP03011\n         TR    DBWDB(&L&OUT),TABHEXTR                           GP03011\n         MVC   &OUT,DBWDB                                       GP03011\n         MEXIT ,                                                GP03011\n.DEBLIN  ANOP  ,                                                GP03011\n&NM      UNPK  DBWDB(2*&LIN+1),&IN.(&LIN+1)                     GP03011\n         TR    DBWDB(2*&LIN),TABHEXTR                           GP03011\n         MVC   &OUT.(2*&LIN),DBWDB                              GP03011\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPCLOSE": {"ttr": 6403, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      INPCLOSE &TYPE,&DEV=,&OPT=DISP                 ADDED ON 81194\n         LCLA  &FN,&DSP                                          86113\n&DSP     SETA  2                                                 86113\n         AIF   ('&OPT' EQ 'LEAVE').DONDISP                       86113\n&DSP     SETA  1                                                 86113\n         AIF   ('&OPT' EQ 'REREAD').DONDISP                      86113\n&DSP     SETA  0                                                 86113\n         AIF   ('&OPT' EQ 'DISP' OR '&OPT' EQ '').DONDISP        86113\n         MNOTE 4,'INVALID DISPOSITION OPTION DISP=&OPT'          86113\n.DONDISP AIF   ('&TYPE' EQ '').COMM                              86113\n         AIF   ('&TYPE' EQ 'TCLOSE').SET1\n         MNOTE 4,'*** UNRECOGNIZED TYPE &TYPE'\n.SET1    ANOP  ,\n&FN      SETA  1             SET TCLOSE FUNCTION\n.COMM    ANOP  ,\n&NM      INPCOM &DSP,0,&FN,DEV=&DEV  EXPAND REQUEST              86113\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPCOM": {"ttr": 6405, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x986_\\x01\\x06&?\\x00\\x11\\x00@\\x007\\x00\\r\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1998-12-31T00:00:00", "modifydate": "2006-09-20T00:11:00", "lines": 64, "newlines": 55, "modlines": 13, "user": "GERHARD"}, "text": "         MACRO\n&NM      INPCOM &B0,&B1,&FN,&P0,&A1,&DEV=             UPDATED ON 99007\n.**********************************************************************\n.*                                                                   **\n.*   COMMON INNER MACRO FOR @INPREAD INVOCATION                      **\n.*                                                                   **\n.*  ESA AND OS/390 CHANGE - FLAG BYTE NOW IN R0:1 FROM R1:0     GP98365\n.**********************************************************************\n         GBLC  &MACPLAB,&INPMODE\n         LCLA  &I,&J,&K,&VD,&D(8)\n         LCLB  &INDEV                                            82116\n         LCLC  &DC,&A0                                           82116\n&MACPLAB SETC  '&NM'                                             82116\n&A0      SETC  '&P0'                                            GP99007\n         AIF   ('&A0' NE '').LENOK                              GP99007\n&A0      SETC  '0'                                              GP99007\n.LENOK   AIF   ('&DEV' EQ '' OR '&DEV' EQ '0').NODV             GP99007\n         AIF   ('&DEV' NE 'ALL').DVSOM\n&VD      SETA  255\n         AGO   .NODV\n.DVSOM   AIF   (K'&DEV LT 2).DVSOL                               82116\n         AIF   ('&DEV'(1,1) NE '=').DVSOL                        82116\n&INDEV   SETB  1             SET INDIRECT DEVICE NUMBER          82116\n         AGO   .NODV                                             82116\n.DVSOL   ANOP  ,                                                 82116\n&I       SETA  0\n&J       SETA  N'&DEV\n.DEVLOOP ANOP  ,\n&I       SETA  &I+1\n         AIF   (&I GT &J).DVEND\n         AIF   ('&DEV(&I)' EQ '').DEVLOOP\n         AIF   ('&DEV(&I)' EQ '0').DEVLOOP\n         AIF   ('&DEV(&I)' LT '1' OR '&DEV(&I)' GT '8').DVERR\n&D(&DEV(&I)) SETA  1\n         AGO   .DEVLOOP\n.DVERR   MNOTE 8,'*** INVALID DEVICE NUMBER &DEV(&I)'\n         AGO   .DEVLOOP\n.DVEND   ANOP  ,\n&VD      SETA  128*&D(8)+64*&D(7)+32*&D(6)+16*&D(5)+8*&D(4)\n&VD      SETA  &VD+4*&D(3)+2*&D(2)+&D(1)\n.NODV    AIF   ('&B0' NE '0' OR '&A0' NE '0').LONG              GP98365\n         AIF   (&VD GT 15).LONG\n&K       SETA  &VD*256+&FN\n         MACPARM R0,&K       LOAD DEVICE/FUNCTION INDEX          82116\n         AIF   ('&A0' EQ '0').POST0                             GP99007\n         ICM   R0,4,=AL1(&A0)                                   GP98365\n         AGO   .POST0                                            82116\n.LONG    ANOP  ,\n&MACPLAB L     R0,=AL1(&B0,&A0,&VD,&FN)                         GP98365\n&MACPLAB SETC  ''            CANCEL LABEL                        82116\n.POST0   AIF   (NOT &INDEV).LOAD1                                82116\n&VD      SETA  K'&DEV-1                                          82116\n&DC      SETC  '&DEV'(2,&VD)                                     82116\n&MACPLAB ICM   R0,2,&DC                                          82116\n&MACPLAB SETC  ''                                                82116\n.LOAD1   AIF   ('&FN' EQ '0' OR '&FN' EQ '1').BAL\n         MACPARM R1,&A1      LOAD PARAMETER REGISTER\n.BAL     AIF   ('&INPMODE' EQ 'V').VCON\n         L     R15,@INPREAD\n         AGO   .BALR\n.VCON    L     R15,=V(@INPREAD)\n.BALR    BALSR R14,R15\n.*ALR    BASSM R14,R15\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPFEOV": {"ttr": 6407, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      INPFEOV &COUNT,&DEV=                           ADDED ON 90233\n&NM      INPCOM 0,0,6,,0,DEV=&DEV\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPFIND": {"ttr": 6409, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00)\\x01\\x02$\\x8f\\x01\\x02$\\x8f\\tX\\x00\\x05\\x00\\x05\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-09-05T00:00:00", "modifydate": "2002-09-05T09:58:29", "lines": 5, "newlines": 5, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      INPFIND &WORK,&DEV=                             NEW ON GP02248\n.*   @INPREAD CALL TO (RE)POSITION TO A MEMBER\n&NM      INPCOM 0,0,8,0,&WORK,DEV=&DEV\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPGET": {"ttr": 6411, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Y\\x01\\x03\\x03O\\x01\\x03\\x03_\\x17A\\x00*\\x00*\\x00\\x06\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-02-03T00:00:00", "modifydate": "2003-02-04T17:41:59", "lines": 42, "newlines": 42, "modlines": 6, "user": "GERHARD"}, "text": "         MACRO\n&NM      INPGET &IMAGE,&DEV=,&FILL=                      ADDED ON 81194\n         LCLA  &N                                               GP03034\n         LCLC  &L                                               GP03034\n&NM      INPCOM 0,0,3,,0,DEV=&DEV\n.*                                                              GP03034\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  WHEN A POSITIONAL OPERNAD IS SPECIFIED, IT INDICATES MOVE MODE.   *\n.*  INPGET X     EXPANDS  MVC X{L'X},0(R1)                            *\n.*  INPGET (X,L) EXPANDS  MVC X{L},0(R1)                              *\n.*    NOTE THAT LENGTH OF X MUST BE LESS THAN OR EQUAL TO THE         *\n.*    WIDTH= PARAMETER ON THE CORRESPONDING INPWORK MACRO             *\n.*                                                                    *\n.*  WHEN FILL= IS SPECIFIED, A LONGER EXPANSION USING MVCL ALLOWS     *\n.*  DISPARATE LENGTHS                                                 *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n&N       SETA  N'&IMAGE                                         GP03034\n         AIF   (&N LT 1).MEND                                   GP03034\n         AIF   (T'&FILL NE 'O').FILL                            GP03034\n         AIF   (&N EQ 1).DEFLEN                                 GP03034\n         MVC   &IMAGE(1)(&IMAGE(2)),0(R1)                       GP03034\n         MEXIT ,                                                GP03034\n.DEFLEN  MVC   &IMAGE(1),0(R1)                                  GP03034\n         MEXIT ,                                                GP03034\n.FILL    SAR   R0,R15        PRESERVE RETURN CODE               GP03034\n         LR    R14,R1        SET SOURCE RECORD ADDRESS          GP03034\n         LR    R15,R0        SET SOURCE LENGTH                  GP03034\n         AIF   (&N EQ 1).DEFILL                                 GP03034\n         MACPARM R0,&IMAGE(1)  LOAD ADDRESS                     GP03034\n         MACPARM R1,&IMAGE(2)  LOAD LENGTH                      GP03034\n         AGO   .FILLCOM                                         GP03034\n.DEFILL  MACPARM R0,&IMAGE     LOAD RECORD ADDRESS              GP03034\n&L       SETC  'L'''                                            GP03034\n         MACPARM R1,&L&IMAGE   LOAD LENGTH                      GP03034\n.FILLCOM AIF   ('&FILL' EQ '0' OR '&FILL' EQ 'X''0'''                  *\n               OR '&FILL' EQ 'X''00''').FILLZER                 GP03034\n         ICM   R15,8,=AL1(&FILL)  INSERT FILL CHARACTER         GP03034\n.FILLZER MVCL  R0,R14        MOVE INPUT RECORD                  GP03034\n         EAR   R15,R0        RESTORE RETURN CODE                GP03034\n.MEND    MEND  ,                                                GP03034\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPKEEP": {"ttr": 6413, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      INPKEEP &COUNT,&DEV=                           ADDED ON 81194\n&NM      INPCOM 0,0,4,,0,DEV=&DEV\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPKEEPM": {"ttr": 6415, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      INPKEEPM &COUNT,&DEV=                           ADDED ON 90233\n&NM      INPCOM 0,0,7,,0,DEV=&DEV\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPOPEN": {"ttr": 6417, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01\\x04\\x11O\\x01\\x04\\x11O\"5\\x00\\x16\\x00\\x16\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-23T00:00:00", "modifydate": "2004-04-23T22:35:23", "lines": 22, "newlines": 22, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      INPOPEN &WORK,&DEV=,&OPT=                    UPDATED ON 93307\n         LCLA  &I,&J\n         LCLB  &A,&D,&W,&F,&X,&U                                GP04114\n&J       SETA  N'&OPT\n.OPTL    ANOP  ,\n&I       SETA  &I+1\n         AIF   (&I GT &J).OPTN\n         AIF   ('&OPT(&I)' EQ '').OPTL\n&A       SETB  (&A OR '&OPT(&I)' EQ 'ABE' OR '&OPT(&I)' EQ 'ABEND')\n&D       SETB  (&D OR '&OPT(&I)' EQ 'DUMMY')\n&W       SETB  (&W OR '&OPT(&I)' EQ 'NOWTO')\n&F       SETB  (&F OR '&OPT(&I)' EQ 'JFCB' OR '&OPT(&I)' EQ 'OPENJ')\n&X       SETB  (&X OR '&OPT(&I)' EQ 'VER' OR '&OPT(&I)' EQ 'EXIST')\n&U       SETB  (&U OR '&OPT(&I)' EQ 'FOLD')                     GP04114\n         AGO   .OPTL\n.OPTN    AIF   (&J EQ (&A+&D+&W+&F+&X+&U)).OPTOK                GP04114\n         MNOTE 4,'UNDEFINED OR DUPLICATE OPTION SPECIFIED'       82116\n.OPTOK   ANOP  ,                                                 82116\n&I       SETA  128*&A+64*&D+32*&W+16*&F+8*&X+1*&U               GP04114\n&NM      INPCOM 0,0,2,&I,&WORK,DEV=&DEV\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPQMEM": {"ttr": 6419, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x002\\x01\\x03#o\\x01\\x03#o\\x14Y\\x00\\x05\\x00\\x05\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-08-24T00:00:00", "modifydate": "2003-08-24T14:59:32", "lines": 5, "newlines": 5, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      INPQMEM &WORK,&DEV=                             NEW ON\n.*   @INPREAD CALL TO OBTAIN MEMBER INFORMATION (RC=0 & DIRECTORY)\n&NM      INPCOM 0,0,9,0,&WORK,DEV=&DEV\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPREAD": {"ttr": 6421, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      INPREAD &COUNT,&DEV=                           ADDED ON 90216\n&NM      INPCOM 0,0,5,,0,DEV=&DEV\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INPWORK": {"ttr": 6423, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x08\\x08\\x8f\\x01\\x08\\x10O\\x12\\x17\\x00!\\x00\\x1e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2008-03-28T00:00:00", "modifydate": "2008-04-13T12:17:00", "lines": 33, "newlines": 30, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      INPWORK &DD,&ALTDD,&WIDTH=80,&EODAD=1,&FILL=0,&EDIT=0,&JFCB=, *\n               &PDE=0,&PDS=NO,&BUF=                             GP08088\n         LCLA  &PFG,&IPDS,&I,&J,&K                               89351\n         LCLB  &I0,&I1,&I2,&I3,&I4,&I5,&I6,&I7                   89351\n&K       SETA  N'&PDS                                            89351\n         AIF   ('&BUF' NE '1').NOBUF1  NOT SINGLE BUFFER OPTION GP08088\n&PFG     SETA  &PFG+1        SET ONE BUFFER ONLY                GP08088\n.NOBUF1  AIF   ('&PDE' EQ '0').NOPDE                            GP08088\n&PFG     SETA  &PFG+8        SHOW PDS FEEDBACK REQUESTED         89351\n.NOPDE   AIF   (&I GE &K).ENDPDE                                 89351\n&I       SETA  &I+1                                              89351\n&I0      SETB  (&I0 OR ('&PDS(&I)' EQ 'DIR'))  PROCESS DIRECTORY 89351\n&I1      SETB  (&I1 OR ('&PDS(&I)' EQ 'MEM'))  PROCESS MEMBERS   89351\n&I2      SETB  (&I2 OR ('&PDS(&I)' EQ 'ALI'))  PROCESS ALIAS TOO 89351\n&I7      SETB  (&I7 OR ('&PDS(&I)' EQ 'UPD'))  BUILD ./ ADD      89351\n         AGO   .NOPDE        TRY NEXT ENTRY                      89351\n.ENDPDE  AIF   ('&PDS' EQ 'NO').OKPDE                            89351\n&IPDS    SETA  128*&I0+64*&I1+32*&I2+16*&I3+8*&I4+4*&I5+2*&I6+&I7\n&J       SETA  &I0+&I1+&I2+&I3+&I4+&I5+&I6+&I7                   89351\n         AIF   (&J EQ &K).OKPDE                                  89351\n         MNOTE 4,'*** INVALID PDS= PARAMETER ***'                89351\n.OKPDE   AIF   (T'&JFCB NE 'O').ADDJFCB                          82116\n         DC    0F'0'\n&NM      DC    CL8'&DD ',CL8'&ALTDD ',A(&EODAD,&PDE),AL2(&WIDTH,0),AL1(*\n               &PFG,&FILL,&EDIT,&IPDS)                           89351\n         MEXIT ,                                                 82116\n.ADDJFCB ANOP  ,                                                 82116\n&PFG     SETA  16+&PFG       SET JFCB PRESENT                    82116\n         DC    0F'0'\n&NM      DC    CL8'&DD ',CL8'&ALTDD ',A(&EODAD,&PDE),AL2(&WIDTH,0),AL1(*\n               &PFG,&FILL,&EDIT,&IPDS),A(&JFCB)                  89351\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IPM": {"ttr": 6425, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x02\\x00\\x00\\x01\\x05\\x18\\x9f\\x01\\x08'\\x8f\\x02A\\x00\\x0e\\x00\\x07\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.02", "flags": 0, "createdate": "2005-07-08T00:00:00", "modifydate": "2008-10-04T02:41:00", "lines": 14, "newlines": 7, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      IPM   &R,&WORK=R0                              ADDED ON 05189\n.*\n.*       THIS MODULE LOADS THE PROGRAM MASK THE HARD WAY, FOR MVS 3.8\n.*\n         AIF   ('&R' EQ '&WORK').FAST\n&NM      BALR  &WORK,0\n         N     &R,=X'00FFFFFF'\n         N     &WORK,=X'3F000000'\n         OR    &R,&WORK\n         MEXIT ,\n.FAST    ANOP  ,             OK TO CLOBBER ADDRESS\n&NM      BALR  &R,0\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOBSEPLN": {"ttr": 6427, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x06&\\x7f\\x01\\x06(\\x0f\"\\'\\x00\"\\x00#\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2006-09-24T00:00:00", "modifydate": "2006-10-07T22:27:00", "lines": 34, "newlines": 35, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                    ADDED BY/ON GP06280\n&NM    JOBSEPLN &PFX=SEP,&DSECT=    DEFAULT JOB SEPARATOR LINE\n.**********************************************************************\n.*                                                                    *\n.*  THIS MACRO MAPS THE JOB SEPARATOR DATA LINE AS PRODUCED BY THE    *\n.*  HERCULES MVS 3.8J TURNKEY SYSTEM                                  *\n.*                                                                    *\n.**********************************************************************\n         LCLC &P\n&P       SETC 'SEP'\n         AIF  ('&PFX' EQ '').DEFPFX\n&P       SETC  '&PFX'\n.DEFPFX  ANOP  ,\n&NM      MACMAPHD PFX=&P,DSECT=&DSECT\n&P.LINE  DC   0CL133' '      DEFAULT LENGTH\n&P.CC    DC   C' '           CARRIAGE CONTROL\n&P.AST1  DC   C'****'        EYE CATCHER\n&P.CLS1  DC   C' ',CL2' '    SYSOUT CLASS\n&P.FUN1  DC   C'START ',C' '   START- OR -END--\n&P.NUM1  DC   C'JOB nnnn',CL2' '   JES JOB IDENTIFER JOB/STC/TSU\n&P.NAME  DC   CL8' ',CL2' '  JOB NAME\n&P.PGMN  DC   CL20' ',CL2' '  PROGRAMMER NAME\n&P.RUME  DC   C'ROOM',C' '\n&P.ROOM  DC   CL4' ',CL2' '  ROOM (OR SUBACCOUNT?)\n&P.TIME  DC   CL11'hh.mm.ss AM',C' '  TIME\n&P.DATE  DC   CL9'dd mon yy',CL2' '   DATE\n&P.PRT   DC   CL8' ',CL2' '  PRINTER NAME\n&P.SYS   DC   C'SYS',C' '    CONSTANT\n&P.SID   DC   CL4' ',CL2' '\n&P.NUM2  DC   C'JOB nnnn',CL2' '   JES JOB IDENTIFER JOB/STC/TSU\n&P.FUN2  DC   C'START ',C' '   START- OR -END--\n&P.CLS2  DC   C' '           SYSOUT CLASS\n&P.AST2  DC   C'****'        EYE CATCHER\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LADJ": {"ttr": 6429, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00\\x00\\x01\\x03\\x01o\\x01\\x120\\x7f\\x19G\\x00J\\x00'\\x00\\x04\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-01-16T00:00:00", "modifydate": "2012-11-02T19:47:00", "lines": 74, "newlines": 39, "modlines": 4, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LADJ  &CH,&LEN,&WK=R15,&MASK=C' '  DELETE BLANKS\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  THIS MACRO CREATES CODE TO LEFT-JUSTIFY A FIELD.                  *\n.*  &FIELD MUST NOT BE A REGISTER SPECIFICATION, BUT A RELOCATABLE    *\n.*  &LEN MAY BE ABSOLUTE, OR A REGISTER                               *\n.*    &FIELD+LEN MUST BE A TRAILING FILL CHARACTER (NORMALLY BLANK)   *\n.*  &WK IS A WORK REGISTER, NORMALLY R15                              *\n.*  &MASK SPECIFIES EITHER BLANK OR ZERO (C' ' OR C'0'). SHIFTING     *\n.*    STOPS WHEN OTHER THAN THE EXCLUDED BITS ARE ON.                 *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         GBLC  &MACPLAB                                         GP03245\n         LCLC  &L,&TAG,&FIELD                                   GP03016\n         LCLC  &D,&B         BASE/DISPLACEMENT                  GP12307\n         LCLA  &I,&J,&K                                         GP12307\n&TAG     SETC  'ZZJ'.'&SYSNDX'                                  GP03016\n&L       SETC  'L'''\n&FIELD   SETC  '&CH'                                            GP12307\n&K       SETA  K'&CH                                            GP12307\n         AIF   ('&FIELD' EQ '').BOO\n         AIF   (&K LT 3).NOREG                                  GP12307\n         AIF   ('&CH'(1,1) NE '(' OR '&CH'(2,1) EQ '(').NOREG   GP12307\n       AIF ('&CH'(&K,1) NE ')' OR '&CH'(&K-1,1) EQ ')').NOREG   GP12307\n&FIELD   SETC  '0'.'&CH'     CHANGE (REG) TO 0(REG)             GP12304\n.NOREG   AIF   ('&LEN' EQ '').DEF\n         AIF   (T'&LEN NE 'N').MAC                              GP03016\n&NM      LA    &WK,&LEN-1    NO. OF BYTES TO MOVE\n         AGO   .COM\n.MAC     ANOP  ,                                                GP03016\n&NM      MACPARM &WK,&LEN                                       GP03016\n&MACPLAB MACPARM &WK,0,OP=BCTR,OPR=BCTR                         GP03016\n         AGO   .COM\n.DEF     ANOP  ,\n&NM      LA    &WK,&L&FIELD-1  NO. OF BYTES TO MOVE\n.COM     ANOP  ,                                                GP12307\n&TAG.L   TM    &FIELD,X'FF'-&MASK LEADING BLANK OR ZERO ?       GP03016\n         BNZ   &TAG.X        RETURN                             GP03016\n         EX    &WK,&TAG.M    SHIFT LEFT ONE POSITION            GP03016\n         BCT   &WK,&TAG.L    REPEAT FOR ALL                     GP03016\n         B     &TAG.X        DONE                               GP03016\n&K       SETA  K'&FIELD                                         GP12307\n         AIF   ('&FIELD'(&K,1) NE ')').SYMBOL                   GP12307\n.*  PARSE xxx ( yyy ) - CHANGE TO xxx ( 1 , yyy )               GP12307\n&I       SETA  &K                                               GP12307\n&J       SETA  1                                                GP12307\n.LOOP    AIF   (&I LE 1).ERRTO                                  GP12307\n&I       SETA  &I-1                                             GP12307\n         AIF   ('&FIELD'(&I,1) EQ '(').HAVLEFT                  GP12307\n         AIF   ('&FIELD'(&I,1) EQ ')').HAVRITE                  GP12307\n         AGO   .LOOP                                            GP12307\n.HAVRITE ANOP  ,                                                GP12307\n&J       SETA  &J+1                                             GP12307\n         AGO   .LOOP                                            GP12307\n.HAVLEFT ANOP  ,                                                GP12307\n&J       SETA  &J-1                                             GP12307\n         AIF   (&J GT 0).LOOP                                   GP12307\n         AIF   (&I LE 1).SYMBOL   ((XYZ-RST))                   GP12307\n&D       SETC  '&FIELD'(1,&I-1)                                 GP12307\n&B       SETC  '&FIELD'(&I+1,&K-&I-1)                           GP12307\n&TAG.M   MVC   &D.(0,&B),1+&FIELD                               GP12307\n&TAG.X   DS    0H                                               GP12307\n         MEXIT ,                                                GP12307\n.SYMBOL  ANOP  ,             STASH LENGTH IN MVC                GP12307\n&TAG.M   MVC   &FIELD.(0),1+&FIELD     SHIFT LEFT               GP12307\n&TAG.X   DS    0H                                               GP03016\n         MEXIT ,\n.ERRTO   MNOTE 4,'LADJ - FIELD NAME MALFORMED'                  GP12307\n         MEXIT ,                                                GP12307\n.BOO     MNOTE 4,'LADJ - FIELD NAME OMITTED'\n         AIF   ('&NM' EQ '').MEND                               GP03016\n&NM      DS    0H            BUT AT LEAST DEFINE THE LABEL      GP03016\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LAE": {"ttr": 6432, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x041\\x7f\\x01\\x05\\x02\\x0f\"(\\x00\\x07\\x00\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2004-11-12T00:00:00", "modifydate": "2005-01-20T22:28:00", "lines": 7, "newlines": 14, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LAE   &R,&A,&CRUD                             ADDED ON GP04234\n.*\n.*       THIS MODULE GENERATES A LA FOR MVS COMPAT.\n.*       ORIGINAL REQUIRES AT LEAST SP 2 (MVS/XA)\n&NM      MACPARM &R,&A,&CRUD,OP=LA,OPR=LA\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LAM": {"ttr": 6434, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x05\\x18\\x9f\\x01\\x05\\x18\\x9f\\x11\\x13\\x00\\t\\x00\\t\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2005-07-08T00:00:00", "modifydate": "2005-07-08T11:13:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LAM   &R,&S,&T                                 ADDED ON 05189\n.*\n.*       THIS MODULE GENERATES A LABEL FOR MVS COMPATIBILITY\n.*\n         GBLC  &MACPLAB\n&MACPLAB SETC  '&NM'\n         MACPARM MODE=LBL\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LAT": {"ttr": 6436, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x00\\x99\\x12o\\x01\\x08'\\x8f\\x00$\\x00!\\x00$\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-05-06T00:00:00", "modifydate": "2008-10-04T00:24:00", "lines": 33, "newlines": 36, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LAT   &R,&ADDR,&BZ,&BNZ,&LA=FW                         GP98339\n         GBLB  &MVSXA                                            91216\n         GBLC  &MACPLAB\n.**********************************************************************\n.*                                                                   **\n.*   LOAD AN ADDRESS INTO A REGISTER AND TEST FOR ZERO; OPTIONALLY   **\n.*     BRANCH ON ZERO BZ=label  OR NONZERO BNZ=label                 **\n.*                                                                   **\n.**********************************************************************\n&MACPLAB SETC  '&NM'\n         AIF   ('&LA' EQ '').ICM370\n         AIF   ('&LA' EQ '34' OR '&LA' EQ '34Z').ICM34           91216\n         AIF   ('&LA' EQ 'RX').ICMRX\n         AIF   ('&LA' EQ '0').ICMSR\n         AIF   ('&LA' EQ 'FW').ICMFW\n         MNOTE 8,'&&LA=&LA INVALID - MUST BE RX, 0, OR FW'\n         MNOTE 8,'&&LA=RX ASSUMED'\n.ICMRX   MACPARM &R,&ADDR,OP=LA  OFFSET(X,BASE)\n         MACPARM &R(1),7,1(&R(1)),OP=ICM,MODE=THREE\n         AGO   .BRT\n.ICMSR   MACPARM &R,0\n         AGO   .ICM370                                           92273\n.ICM34   AIF   (&MVSXA).ICMFW                                    91216\n.ICM370  MACPARM &R(1),7,1+&ADDR,OP=ICM,MODE=THREE  LOAD ADDRESS\n         AGO   .BRT\n.ICMFW   MACPARM &R(1),15,&ADDR,OP=ICM,MODE=THREE  LOAD FULLWORD\n         AIF   ('&LA' NE '34Z').BRT                              91216\n         MACPARM &R(1),0(,&R(1))                                 91216\n.*\n.BRT     MACPARM &BZ,OP=BZ,OPR=BZR,MODE=ONE,NULL=SKIP           GP06266\n         MACPARM &BNZ,OP=BNZ,OPR=BNZR,MODE=ONE,NULL=SKIP        GP06266\n.MEX     MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LCSTR": {"ttr": 6658, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n         LCSTR &S            MACRO TO MAKE STRING LOWER CASE     87193\n         GBLC  &LCSTR\n         LCLA  &I,&J,&K\n         LCLC  &C\n&K       SETA  K'&S\n&LCSTR   SETC  '&S'\n.LOOP    AIF   (&I GE &K).MEND\n&I       SETA  &I+1\n&C       SETC  '&LCSTR'(&I,1)\n         AIF   ('&C' LT 'A' OR '&C' GT 'Z').LOOP\n&J       SETA  1\n.CHAR    AIF   ('&C' EQ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'(&J,1)).REP\n&J       SETA  &J+1\n         AIF   (&J LE 26).CHAR\n.REP     ANOP  ,\n&C       SETC  'abcdefghijklmnopqrstuvwxyz'(&J,1)\n         AIF   (&I EQ &K).LAST\n         AIF   (&I EQ 1).FIRST\n&LCSTR   SETC  '&LCSTR'(1,&I-1).'&C'.'&LCSTR'(&I+1,&K-&I)\n         AGO   .LOOP\n.FIRST   ANOP  ,\n&LCSTR   SETC  '&C'.'&LCSTR'(2,&K-1)\n         AGO   .LOOP\n.LAST    ANOP  ,                                                 87193\n&LCSTR   SETC  '&LCSTR'(1,&K-1).'&C'\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LDSUB": {"ttr": 6660, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x042?\\x14\\x00\\x00\\x98\\x00\\x8a\\x00\\x16\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2004-11-18T14:00:00", "lines": 152, "newlines": 138, "modlines": 22, "user": "GERHARD"}, "text": "         MACRO\n&L       LDSUB &DUMMY,&NAME=DMP,&PAD=,&RESERVE=ALL,&SIZE=,             *\n               &REG=R2,&LOADADD=R7,&MODE=32K,&MIN=12*1024,&MAX=62*1024\n         GBLC  &SYSTEM\n         GBLB  &OS390,&MVS   EXHFSIZ NOT HONORED BY SYSTEM      GP04234\n         LCLC  &L1,&L2,&L3\n         LCLC  &MASK\n         AIF   ('&PAD' EQ '').NOPAD1\n         AIF   ('&RESERVE' EQ '' OR '&RESERVE' EQ 'ALL').NOPAD1  80013\n         MNOTE 12,'&&PAD AND &&RESERVE ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.NOPAD1  ANOP  ,\n         AIF   ('&SIZE' EQ '').NOSIZ1\n         AIF   ('&PAD' EQ '').NOPAD2\n         MNOTE 12,'&&PAD AND &&SIZE ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.NOPAD2  AIF   ('&RESERVE' EQ '' OR '&RESERVE' EQ 'ALL').NOSIZ1\n         MNOTE 12,'&&SIZE AND &&RESERVE ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.NOSIZ1  ANOP  ,\n&L1      SETC  'TRA&SYSNDX'\n&L2      SETC  'TRB&SYSNDX'\n&L3      SETC  'TRC&SYSNDX'\n&MASK    SETC  '00FFF000'\n         AIF   ('&SYSTEM' EQ 'SVS' OR '&SYSTEM' EQ 'MVS').PAGE4K\n&MASK    SETC  '00FFF800'\n.*AGE4K  AIF   ('&MODE' EQ '64K' OR '&MODE' EQ '65K').BIGLOAD    85317\n.PAGE4K  AIF   ('&MODE' EQ '64K' OR '&MODE' EQ '65K').LITLOAD   GP04234\n         AIF   ('&MODE' EQ '' OR '&MODE' EQ '32K').LITLOAD       85317\n         MNOTE 4,'INVALID MODE OPERAND (NOT 32K OR 64K)'         85317\n.LITLOAD AIF   (&MVS).NEWCODE  DROP REGION MANAGEMENT           GP04234\n&L       MVI   EXCINVOK+22,0           RESET FOR BLDL TEST\n         MVC   EXCINVOK+5(3),=C'&NAME' COMPLETE NAME OF SUBROUTINE\n         LA    R0,EXCSBLDL   POINT TO BLDL HEADER                86349\n         L     R15,SQBLDLA   GET ADDRESS OF BLDL CODE            86349\n         BALR  R14,R15       INVOKE BLDL                         86349\n         MVI   DB,0                                             GP04234\n         MVC   DB+1(3),EXHFSIZ-EXHBWENT+EXCINVOK    SAVE ACTUAL SIZE\n         AIF   ('&SIZE' NE '').SIZ2\n         AIF   ('&PAD' EQ '').NOPAD3\n         L     R0,DB         ADD PAD TO ACTUAL SIZE             GP04234\n         MACPARM R0,&PAD,OP=AH,OPR=AR\n         AGO   .NOSIZ2\n.SIZ2    MACPARM R0,&SIZE,OP=LH,OPR=LR GET DESIRED LOAD SIZE\n         C     R0,DB                   IS IT LESS THAN MODULE SIZE ?\n         BL    &L2                      YES - REJECT REQUEST\n.NOSIZ2  ST    R0,DB                   SET MODULE SIZE TO NEW VALUE\n         L     &REG,EXCSTGMX           GET FREE STORAGE SIZE    GP04234\n         N     &REG,=X'&MASK'          TRUNCATE TO PAGE BOUNDARY\n         CR    &REG,R0                 WILL MODULE FIT ?\n         AGO   .PAD3\n.NOPAD3  L     &REG,EXCSTGMX           GET FREE STORAGE SIZE    GP04234\n         AIF   ('&RESERVE' EQ '' OR '&RESERVE' EQ 'ALL').NORSV1\n         LR    R0,&REG                 SAVE FOR RESERVE CALCULATION\n.NORSV1  ANOP  ,\n         N     &REG,=X'&MASK'          TRUNCATE TO PAGE BOUNDARY\n         AIF   ('&RESERVE' EQ '' OR '&RESERVE' EQ 'ALL').NORSV2\n         SR    R0,&REG                 R0=FREE STORAGE IN LAST PAGE\n         MACPARM R0,&RESERVE,OP=CH,OPR=CR IS IT ENOUGH FOR RESERVE?\n         BNL   &L1                       YES - LEAVE WELL ENOUGH ALONE\n         MACPARM &REG,&RESERVE,OP=SH,OPR=SR NO - CUT BACK LOAD SIZE\n.NORSV2  ANOP  ,\n&L1      ST    &REG,DB+4               SAVE CALCULATED LOAD SIZE\n         S     &REG,DB                 AMOUNT IN EXCESS OF MODULE SIZE\n.PAD3    BNM   &L3                     GOOD, MODULE FITS\n&L2      MVC   INVOKE(8),EXCINVOK      COPY NAME\n         B     EXCXCB               AND SHOW MODULE TO BE UNAVAILABLE\n&L3      MVC   EXHFSIZ-EXHBWENT+EXCINVOK(3),DB+5    FORCE LARGEST\n         BAL   R9,EXCLOD2    TEST IF REALLY AVAILABLE\n         LTR   &LOADADD,R0             GOT IT ?\n         BZ    &L2                     NO, SIGNAL ERROR\n         MEXIT ,                                                 85317\n.BIGLOAD ANOP  ,                                                 85317\n&L       MVI   EXCINVOK+22,0           RESET FOR BLDL TEST       85317\n         MVC   EXCINVOK+5(3),=C'&NAME' COMPLETE NAME OF SUBROUTINE\n         LA    R0,EXCSBLDL   POINT TO BLDL HEADER                86349\n         L     R15,SQBLDLA   GET ADDRESS OF BLDL CODE            86349\n         BALR  R14,R15       INVOKE BLDL                         86349\n         TM    EXCINVOK+22,EXHF1ATT  REUS + EXEC ?               85317\n         BNO   &L2           NO                                  85317\n         L     R0,EXCSTGMX   GET AVAILABLE STORAGE              GP04234\n         ST    R0,DB+4       SET AS AVAILABLE MAXIMUM            85317\n         GETMAIN VC,LA=&L1.L,A=&L1.A   GET SOME STORAGE          85317\n         BXH   R15,R15,&L1.F   NONE GOTTEN                       85317\n         LM    R15,R0,&L1.A  GET ADDRESS/LENGTH                  85317\n         LR    R1,R15        SWAP                                85317\n         ST    R0,DB+4       SAVE SIZE AVAILABLE                 85317\n         FREEMAIN R,LV=(0),A=(1)  FREE IT UP AGAIN               85317\n         B     &L1.F         BRANCH AROUND LISTS                 85317\n&L1.L    DC    A(&MIN,&MAX)  REQUESTED STORAGE                   85317\n&L1.A    DC    A(0,0)        OBTAINED ADDRESS/LENGTH             85317\n&L1.F    MVC   DB+1(3),EXHFSIZ-EXHBWENT+EXCINVOK   ACTUAL SIZE  GP04234\n         AIF   ('&SIZE' NE '').BSIZ2                             85317\n         AIF   ('&PAD' EQ '').BNOPAD3                            85317\n         MACPARM R0,&PAD,OP=LH,OPR=LR  GET PAD SIZE              85317\n         N     R0,=X'0000FFFF'  KILL SIGN EXTENSION              85317\n         A     R0,DB         ADD THE MODULE SIZE                 85317\n         AGO   .BNOSIZ2                                          85317\n.BSIZ2   MACPARM R0,&SIZE,OP=LH,OPR=LR GET DESIRED LOAD SIZE     85317\n         N     R0,=X'0000FFFF'  KILL SIGN EXTENSION              85317\n         CL    R0,DB         IS IT LESS THAN MODULE SIZE ?       85317\n         BL    &L2           YES - REJECT REQUEST                85317\n.BNOSIZ2 ST    R0,DB                   SET MODULE SIZE TO NEW VALUE\n         L     &REG,DB+4     GET FREE STORAGE SIZE               85317\n         N     &REG,=X'&MASK'          TRUNCATE TO PAGE BOUNDARY 85317\n         CR    &REG,R0       WILL MODULE FIT ?                   85317\n         AGO   .BPAD3                                            85317\n.BNOPAD3 L     &REG,DB+4     GET FREE STORAGE SIZE               85317\n         AIF   ('&RESERVE' EQ '' OR '&RESERVE' EQ 'ALL').BNORSV1 85317\n         LR    R0,&REG                 SAVE FOR RESERVE CALCULATION\n.BNORSV1 ANOP  ,                                                 85317\n         N     &REG,=X'&MASK'          TRUNCATE TO PAGE BOUNDARY 85317\n         AIF   ('&RESERVE' EQ '' OR '&RESERVE' EQ 'ALL').BNORSV2 85317\n         SR    R0,&REG                 R0=FREE STORAGE IN LAST PAGE\n         MACPARM R15,&RESERVE,OP=LH,OPR=LR GET RESERVE SIZE      85317\n         N     R15,=X'0000FFFF'        KILL SIGN EXTENSION       85317\n         CR    R0,R15        ENOUGH FOR RESERVE ?                85317\n         BNL   &L1                       YES - LEAVE WELL ENOUGH ALONE\n         SR    &REG,R15      REMOVE RESERVE SIZE                 85317\n.BNORSV2 ANOP  ,                                                 85317\n&L1      ST    &REG,DB+4               SAVE CALCULATED LOAD SIZE 85317\n         L     R15,DB        GET MODULE SIZE BACK                85317\n         N     R15,=X'00FFFFFF'   KILL SIGN EXTENSION            85317\n         SR    &REG,R15      AMOUNT IN EXCESS OF MODULE SIZE     85317\n.BPAD3   BNM   &L3                     GOOD, MODULE FITS         85317\n&L2      MVC   INVOKE(8),EXCINVOK      COPY NAME                 85317\n         B     EXCXCB               AND SHOW MODULE TO BE UNAVAILABLE\n&L3      MVC   EXHFSIZ-EXHBWENT+EXCINVOK(3),DB+5  FORCE LARGEST GP04234\n         AIF   ('&RESERVE' NE '' AND '&RESERVE' NE 'ALL').BNORSVL\n         SLR   R15,R15                                           85317\n.BNORSVL AIF   ('&RESERVE' EQ '' OR '&RESERVE' EQ 'ALL').BNORSV3 85317\n         MACPARM R15,&RESERVE,OP=LH,OPR=LR GET RESERVE SIZE      85317\n         N     R15,=X'0000FFFF'        KILL SIGN EXTENSION       85317\n.BNORSV3 L     R0,EXCSTGMX   GET SUPPOSED AVAILABLE STORAGE     GP04234\n         SR    R0,R15        SUBTRACT THE RESERVE SIZE           85317\n         ST    R0,EXCSZLOD   SET AS FAKE MODULE SIZE            GP04234\n         ST    R15,EXCSTGMX  SET RESERVE AS REMAINDER           GP04234\n         BAL   R9,EXCLOD5    LOAD THE MODULE                     85317\n         LTR   &LOADADD,R0             GOT IT ?                  85317\n         BZ    &L2                     NO, SIGNAL ERROR          85317\n         MEXIT ,                                                GP02231\n.NEWCODE ANOP  ,                                                GP02231\n.*  IN THE LATEST INCARNATION, REGION MANAGEMENT HAS BEEN DROPPED.\n.*  LOAD MODULE SIZE IS FIXED (FOR DAP DETERMINED BY NAME), RESERVE,\n.*  SIZE, AND PAD ARE NO LONGER MEANINGFUL.                     GP02231\n&L       XLOAD '&NAME',&LOADADD  LOAD THE MODULE                GP02231\n.*            EXITS TO EXCXCB WITH MESSAGE IF UNAVAILABLE       GP02231\n         MVI   DB,0                                             GP02231\n         MVC   DB+1(3),EXHFSIZ-EXHBWENT+EXCINVOK  SAVE ACTUAL SIZE\n         MVC   DB+4(4),=A(&MAX)                                 GP02231\n         SR    &REG,&REG                                        GP02231\n.MEND    MEND  ,                                                GP02231\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LIX": {"ttr": 6664, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00T\\x01\\x03\\x14O\\x01\\x03\\x14O\\x15\\x05\\x00\\\\\\x00X\\x00\\x12\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-05-24T00:00:00", "modifydate": "2003-05-24T15:05:54", "lines": 92, "newlines": 88, "modlines": 18, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LIX   &VAL=(R0),&WK=R15,&W2=R0,&SRL=0,&BHI=,                  *\n               &BASE=,&LOC=,&ERRGO=,&PFX=,&ERRLOC=       ADDED  GP03144\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  LIX PERFORMS AN INDEXED LOOKUP WITH UP TO 256 TARGETS.            *\n.*                                                                    *\n.*  &VAL (R0) SPECIFIES THE REGISTER CONTAINING THE BRANCH VALUE      *\n.*  &SRL (0)  SPECIFIES A NUMERIC RIGHT SHIFT COUNT                   *\n.*  &BHI      LABEL TO GO TO WHEN THE VALUE MATCHES THE MASK          *\n.*   MASK (BHI(2)   MASK APPLIED AFTER SHIFTING                       *\n.*     { N'&LOC USED TO COMPUTE WHEN NOT SUPPLIED }                   *\n.*  &ERRGO    LABEL TO GO TO ON AN INVALID VALUE AFTER SHIFT/MASK     *\n.*  &ERRLOC   LABEL TO GO TO ON AN EMPTY TARGET LOCATION              *\n.*  &BASE     VALUE SUBTRACTED FROM TARGET LOCATION. CURRENT CSECT IS *\n.*              THE DEFAULT                                           *\n.*  &LOC      LIST OF VALUES/LOCATIONS, IN ORDER CORRESPONDING TO THE *\n.*              VALUE; I.E. FIRST ENTRY FOR 0, SECOND FOR 1, ETC.     *\n.*              OMITTED ENTRIES CAUSE A BRANCH TO &ERRLOC             *\n.*  &PFX      PREFIX TO PREPEND TO THE LOC LABELS FOR A SHORTER LIST. *\n.*              THE PREFIX IS *NOT* APPLIED TO BHI OR ERR NAMES.      *\n.*  &WK  (R15)  A WORK REGISTER (ANY BUT 0)                           *\n.*  &W2  (R0)   A WORK REGISTER (ANY BUT WORK)                        *\n.*                                                                    *\n.*  SAMPLE USE:                                                       *\n.*                                                                    *\n.*       IBMMACRO THAT RETURNS 0, 4, 8, ETC., OR SUBROUTINE CALL      *\n.*         LR   R15,R0        COPY VALUE TO WORK REGISTER             *\n.*         LIX  VAL=(R15),SRL=2,LOC=(RET0,RET4),ERRGO=MACFAIL         *\n.*                                                                    *\n.*  NOTE THAT BITS SHIFTED OUT, AND BITS LEFT OF THE MASK ARE NOT     *\n.*  TESTED FOR ZERO. THIS IS INTENTIONAL TO PERMIT USE OF LOW FLAG    *\n.*  BITS AND OTHER USE OF UNREFERENCED DATA.                          *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         LCLA  &I,&J,&N\n         LCLC  &LB           TABLE BASE\n         LCLC  &BH1,&BH2     BHI OPERANDS\n         LCLC  &SPACES\n         LCLC  &GLBL         GENERATED LABELS\n&GLBL    SETC  'ZZLX'.'&SYSNDX'\n&LB      SETC  '&SYSECT'\n&SPACES  SETC  '    '\n         AIF   ('&BASE' EQ '' OR '&BASE' EQ '*').DEFBASE\n&LB      SETC  '&BASE'\n.DEFBASE AIF   (N'&BHI NE 2).NOTBHI\n&BH1     SETC  '&BHI(1)'     FIRST OF TWO ARGUMENTS\n&BH2     SETC  '&BHI(2)'     SECOND OF TWO ARGUMENTS\n.NOTBHI  AIF   (N'&BHI NE 1).DONBHI\n&BH1     SETC  '&BHI'        ONE OF ONE, WITH PARENTHESES\n.DONBHI  ANOP  ,\n.*--------------------------------------------------------------------*\n.*  DETERMINE NUMBER OF ADDRESSES, AND CORRESPONDING MASK             *\n.*--------------------------------------------------------------------*\n&N       SETA  N'&LOC\n&J       SETA  2             SET SMALLEST MASK + 1 (=1 FAILS)\n&I       SETA  &N            FOR NON-NUM SIZE, USE COUNT\n         AIF   (&N NE 0 AND &N LE 256).GOTSIZE\n.BADSIZE MNOTE 8,'LIX: LOC LIST BAD - NEED 1 TO 256 TARGET LABELS'\n.GOTSIZE AIF   (&J GE &I).GOTMASK\n&J       SETA  &J*&J\n         AGO   .GOTSIZE\n.GOTMASK ANOP  ,\n&I       SETA  &J-1          CONVERT POWER OF TWO TO MASK\n.USEMASK ANOP  ,\n&NM      MACPARM &WK(1),&VAL,OP=IC,OPR=LR  LOAD INDEX VALUE\n         AIF   ('&SRL' EQ '0').NOSHFT\n         MACPARM &WK(1),&SRL,OP=SRL,OPR=SRL,MODE=EVEN,NULL=SKIP\n.NOSHFT  MACPARM &W2(1),&I,OP=LA,MODE=EVEN LOAD MASK VALUE\n         NR    &WK(1),&W2(1) ISOLATE SIGNIFICANT PORTION\n         AIF   ('&BH1' EQ '').DOWK2\n         MACPARM &W2(1),&BH2,OP=LA,NULL=SKIP  ALLOW OVERRIDE\n         CR    &WK(1),&W2(1) EXACTLY MASK MAXIMUM ?\n         MACPARM &BH1,OP=BE,OPR=BER,MODE=ONE\n.DOWK2   AIF   (T'&ERRGO EQ 'O').NOLIM\n         AIF   ('&N' EQ '&BH2').TOOMASK  LIST HIGH SAME AS MAX ?\n         CH    &WK(1),=Y(&N) VALID INDEX ?\n.TOOMASK MACPARM &ERRGO,OP=BNL,OPR=BNLR,MODE=ONE   NO; TOO HIGH\n.NOLIM   SLL   &WK(1),1      CONVERT INDEX TO OFFSET\n         LH    &WK(1),*+8(&WK(1)) LOAD LABEL OFFSET FROM BASE\n         B     &GLBL.Z       BRANCH AROUND STUFF\n&J       SETA  0\n.INC     AIF   (&J GE &N).DONE\n&J       SETA  &J+1\n         AIF   ('&LOC(&J)' EQ '').DFLT\n         DC    AL2(&PFX.&LOC(&J)-&LB)&SPACES.&J  BRANCH\n         AGO   .INC\n.DFLT    DC    AL2(&ERRLOC-&LB)&SPACES.&J ERROR\n         AGO   .INC\n.DONE    ANOP  ,\n&GLBL.Z  DS    0H            END OF EXPANSION\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMVC": {"ttr": 6667, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      LMVC  &R1,&R3\n         GBLC  &MODEL\n         LCLC  &N,&A1,&A3\n         LCLA  &I\n.*\n.*       THIS MACRO SUPPORTS LONG MOVES OF EQUAL LENGTH AREAS\n.*       REGISTERS MUST BE SPECIFIED AS FOR MVCL\n.*       AND ARE RESTRICTED TO ABSOLUTE VALUES OR THE FORM\n.*       R||ABSOLUTE; E.G. 2 4 OR R4, R6, ETC.\n.*\n&I       SETA  K'&R1\n         AIF   (&I LT 1 OR &I GT 3).BADONE\n&A1      SETC  '&R1'\n         AIF   ('&A1'(1,1) NE 'R').HAV1\n&A1      SETC  '&A1'(2,&I-1)\n.HAV1    AIF   ('&A1' EQ '2' OR '&A1' EQ '4').GOOD1\n         AIF   ('&A1' EQ '6' OR '&A1' EQ '8' OR '&A1' EQ '10').GOOD1\n         AIF   ('&A1' EQ '12' OR '&A1' EQ '14').GOOD1\n.BADONE  MNOTE 8,'INVALID TO REGISTER ''&R1'''\n         MEXIT\n.GOOD1   ANOP  ,\n&I       SETA  K'&R3\n         AIF   (&I LT 1 OR &I GT 3).BADTHRE\n&A3      SETC  '&R3'\n         AIF   ('&A3'(1,1) NE 'R').HAV3\n&A3      SETC  '&A3'(2,&I-1)\n.HAV3    AIF   ('&A3' EQ '2' OR '&A3' EQ '4').GOOD3\n         AIF   ('&A3' EQ '6' OR '&A3' EQ '8' OR '&A3' EQ '10').GOOD3\n         AIF   ('&A3' EQ '12' OR '&A3' EQ '14').GOOD3\n.BADTHRE MNOTE 8,'INVALID FROM REGISTER ''&R3'''\n         MEXIT\n.GOOD3   AIF   ('&A1' NE '&A3').LAPOK\n         MNOTE 8,'TO AND FROM REGISTERS EQUAL'\n         MEXIT\n.LAPOK   ANOP  ,\n&N       SETC  '&NM' .\n         AIF   ('&N' NE '').NOK                                  86010\n&N       SETC  'LM'.'&SYSNDX'                                    86010\n.NOK     AIF   ('&MODEL' NE '360').MVCL\n&N       LA    &R3+1,256 .   SET MVC MAX LENGTH\n&N.1     CR    &R1+1,&R3+1 . FULL BLOCK ?\n         BNH   &N.2 .        NO, MOVE PART\n         MVC   0(256,&R1),0(&R3) MOVE BLOCK\n         AR    &R1,&R3+1 .   UP TO ADDRESS\n         AR    &R3,&R3+1 .   UP FROM\n         SR    &R1+1,&R3+1 . REMAINDER\n         BP    &N.1 .        CHECK RESIDUAL LENGTH\n         B     &N.4 .        DONE\n&N.3     MVC   0(0,&R1),0(&R3)  EXECUTE PATTERN\n&N.2     BCTR  &R1+1,0 .     REMAINING LENGTH - 1\n         EX    &R1+1,&N.3 .  MOVE REMAINDER\n&N.4     EQU   *\n         MEXIT\n.MVCL    ANOP  ,\n&N       MVCL  &R1,&R3 .     MOVE EQUAL AREAS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LNE": {"ttr": 6669, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         LNE   &LNE\n         GBLA  &PCCLINE,&PCCPOS,&PCCLTYP\n         LCLC  &I\n&PCCPOS  SETA  1\n         AIF   (T'&LNE EQ 'O' OR '&LNE' EQ 'NEXT').NEXT\n         AIF   (T'&LNE EQ 'N').FIXED\n         AIF   ('&LNE'(1,2) EQ '*+').INC\n         MNOTE 8,'OPERAND OF LNE IS NOT ''NEXT'', N, OR *+N'\n.NEXT    ANOP\n&PCCLINE SETA  &PCCLINE+1+&PCCLTYP\n         MEXIT\n.FIXED   ANOP\n&PCCLINE SETA  &LNE\n         MEXIT\n.INC     ANOP\n&I       SETC  '&LNE'(3,K'&LNE-2)\n&PCCLINE SETA  &PCCLINE+&I\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LNKSTK": {"ttr": 6671, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x03\\x14O\\x01\\x03\\x14O\\x14\\x13\\x00\\x87\\x00\\x87\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-05-24T00:00:00", "modifydate": "2003-05-24T14:13:27", "lines": 135, "newlines": 135, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LNKSTK &DSECT=YES\n.*--------------------------------------------------------------------*\n.*  LNKSTK PRODUCES MAPPINGS FOR STACK ENTRIES. PREFIX IS LS + THE    *\n.*  ENTRY TYPE IN HEX                                                 *\n.*                                                                    *\n.*  LSX - COMMON ENTRY DESCRIPTOR (SAME FOR OS390 AND Z900)           *\n.*  LS1 - OS390 HEADER                                                *\n.*  LS2 - OS390 TRAILER                                               *\n.*  LS4 - OS390 BRANCH STATE ENTRY                                    *\n.*  LS5 - OS390 PROGRAM-CALL STATE                                    *\n.*                                                                    *\n.*  LS9 - Z/900 HEADER                                                *\n.*  LSA - Z/900 TRAILER                                               *\n.*  LSC - Z/900 BRANCH STATE ENTRY                                    *\n.*  LSD - Z/900 PROGRAM-CALL STATE                                    *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n&NM      MACMAPHD DSECT=&DSECT,SFX=_CED,DFLT=LNKSTK\nLSCED    DS    0D            COMMON ENTRY DESCRIPTOR\nLSXET    DC    X'00'         ENTRY TYPE\nLSXU     EQU   X'80'           UNSTACK SUPPRESSION BIT\nLSXSI    DC    X'00'         SECTION IDENTIFICATION\nLSXRFS   DC    XL2'0'        REMAINING FREE SPACE\nLSXNES   DC    XL2'0'        NEXT ENTRY SIZE (0 FOR CURRENT)\n         DC    XL2'0'          RESERVED\nLSXSIZE  EQU   *-LSXET       ENTRY DESCRIPTOR SIZE\n.*--------------------------------------------------------------------*\n.*  OS390 HEADER                                                      *\n.*--------------------------------------------------------------------*\n&NM      MACMAPHD DSECT=&DSECT,DFLT=LNKSTK\nLSENTRY  DS    0D\nLS1RSV   DC    A(0)            RESERVED\nLS1BSEA  DC    A(0)          BACKWARD STACK ENTRY ADDRESS\nLS1B     EQU   X'80'           BACKWARD STACK ENTRY VALIDITY BIT\nLS1LSX   DC    XL(LSXSIZE)'0' STACK ENTRY\nLS1SIZE  EQU   *-LS1RSV      SIZE WITH DESCRIPTOR\n.*--------------------------------------------------------------------*\n.*  OS390 TRAILER                                                     *\n.*--------------------------------------------------------------------*\n         ORG   LSENTRY\nLS2RSV   DC    A(0)            RESERVED\nLS2FSHA  DC    A(0)          FORWARD SECTION HEADER ADDRESS\nLS2F     EQU   X'80'           FORWARD SECTION HEADER VALIDITY BIT\nLS2LSX   DC    XL(LSXSIZE)'0' STACK ENTRY\nLS2SIZE  EQU   *-LS2RSV      SIZE WITH DESCRIPTOR\n.*--------------------------------------------------------------------*\n.*  OS390 BRANCH STATE ENTRY                                          *\n.*--------------------------------------------------------------------*\n         ORG   LSENTRY\nLS4REGS  DC    16A(0)        GENERAL PURPOSE REGISTERS\nLS4ACRS  DC    16A(0)        ACCESS CONTROL REGISTERS\nLS4PKM   DC    XL2'0'        PSW-KEY MASK\nLS4SASN  DC    XL2'0'        SECONDARY ASN\nLS4EAX   DC    XL2'0'        EXTENDED AUTHORIZATION INDEX\nLS4PASN  DC    XL2'0'        PRIMARY ASN\nLS4PSW   DC    XL8'0'\nLS4RSV   DC    XL4'0'          RESERVED\nLS4BRAD  DC    XL4'0'        BRANCH ADDRESS\nLS4MOD   DC    XL8'0'        (USER) MODIFIABLE AREA\nLS4LSX   DC    XL(LSXSIZE)'0' ENTRY DESCRIPTOR\nLS4SIZE  EQU   *-LS4REGS     SIZE WITH DESCRIPTOR\n.*--------------------------------------------------------------------*\n.*  OS390 PC-CALL STATE ENTRY                                         *\n.*--------------------------------------------------------------------*\n         ORG   LSENTRY\nLS5REGS  DC    16A(0)        GENERAL PURPOSE REGISTERS\nLS5ACRS  DC    16A(0)        ACCESS CONTROL REGISTERS\nLS5PKM   DC    XL2'0'        PSW-KEY MASK\nLS5SASN  DC    XL2'0'        SECONDARY ASN\nLS5EAX   DC    XL2'0'        EXTENDED AUTHORIZATION INDEX\nLS5PASN  DC    XL2'0'        PRIMARY ASN\nLS5PSW   DC    XL8'0'\nLS5CSI   DC    XL4'0'        CALLED SPACE ID\nLS5PCN   DC    XL4'0'        PC NUMBER\nLS5MOD   DC    XL8'0'        (USER) MODIFIABLE AREA\nLS5LSX   DC    XL(LSXSIZE)'0' ENTRY DESCRIPTOR\nLS5SIZE  EQU   *-LS5REGS     SIZE WITH DESCRIPTOR\n.*--------------------------------------------------------------------*\n.*  Z/900 HEADER                                                      *\n.*--------------------------------------------------------------------*\n         ORG   LSENTRY\nLS9BSEA  DC    XL8'0'        BACKWARD STACK ENTRY ADDRESS\nLS9B     EQU   X'01'           BACKWARD STACK ENTRY VALIDITY BIT\nLS9LSX   DC    XL(LSXSIZE)'0' STACK ENTRY\nLS9SIZE  EQU   *-LS9BSEA     SIZE WITH DESCRIPTOR\n.*--------------------------------------------------------------------*\n.*  Z/900 TRAILER                                                     *\n.*--------------------------------------------------------------------*\n         ORG   LSENTRY\nLSAFSHA  DC    XL8'0'        FORWARD SECTION HEADER ADDRESS\nLSAF     EQU   X'01'           FORWARD SECTION HEADER VALIDITY BIT\nLSALSX   DC    XL(LSXSIZE)'0' STACK ENTRY\nLSASIZE  EQU   *-LSAFSHA     SIZE WITH DESCRIPTOR\n.*--------------------------------------------------------------------*\n.*  Z/900 BRANCH STATE ENTRY                                          *\n.*--------------------------------------------------------------------*\n         ORG   LSENTRY\nLSCREGS  DC    16XL8'0'      GENERAL PURPOSE REGISTERS\nLSCPKM   DC    XL2'0'        PSW-KEY MASK\nLSCSASN  DC    XL2'0'        SECONDARY ASN\nLSCEAX   DC    XL2'0'        EXTENDED AUTHORIZATION INDEX\nLSCPASN  DC    XL2'0'        PRIMARY ASN\nLSCPSWL  DC    XL8'0'\nLSCBRAD  DC    XL8'0'        BRANCH ADDRESS\nLSCBR64  EQU   X'01'           AM64 IF LOW BIT ON\nLSCMOD   DC    XL8'0'        (USER) MODIFIABLE AREA\nLSCRSV   DC    XL8'0'          RESERVED\nLSCPSWR  DC    XL8'0'        PSW\nLSCRSV2  DC    XL48'0'         RESERVED\nLSCACRS  DC    16XL4'0'      ACCESS CONTROL REGISTERS\nLSCLSX   DC    XL(LSXSIZE)'0' ENTRY DESCRIPTOR\nLSCSIZE  EQU   *-LSCREGS     SIZE WITH DESCRIPTOR\n.*--------------------------------------------------------------------*\n.*  Z/900 PC-CALL STATE ENTRY                                         *\n.*--------------------------------------------------------------------*\n         ORG   LSENTRY\nLSDREGS  DC    16XL8'0'      GENERAL PURPOSE REGISTERS\nLSDPKM   DC    XL2'0'        PSW-KEY MASK\nLSDSASN  DC    XL2'0'        SECONDARY ASN\nLSDEAX   DC    XL2'0'        EXTENDED AUTHORIZATION INDEX\nLSDPASN  DC    XL2'0'        PRIMARY ASN\nLSDPSWL  DC    XL8'0'        PSW\nLSDCSI   DC    XL4'0'        CALLED SPACE ID\nLSDPCN   DC    XL4'0'        PC NUMBER\nLSDPC64  EQU   X'80'           AM64 IF HIGH BIT ON\nLSDMOD   DC    XL8'0'        (USER) MODIFIABLE AREA\nLSDRSV   DC    XL8'0'          RESERVED\nLSDPSWR  DC    XL8'0'        PSW\nLSDRSV2  DC    XL48'0'         RESERVED\nLSDACRS  DC    16XL4'0'      ACCESS CONTROL REGISTERS\nLSDLSX   DC    XL(LSXSIZE)'0' ENTRY DESCRIPTOR\nLSDSIZE  EQU   *-LSDREGS     SIZE WITH DESCRIPTOR\n         ORG   ,\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCBYTE": {"ttr": 6674, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00\\x00\\x01\\x03\\x08\\x0f\\x01\\x08'\\x8f\\x00%\\x00*\\x00$\\x00\\x0c\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-03-21T00:00:00", "modifydate": "2008-10-04T00:25:00", "lines": 42, "newlines": 36, "modlines": 12, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LOCBYTE &TEXT,&WK=R14,&W2=R15,&BYTE=C' ',&LEN=,  ADDED GP03080*\n               &END=                                            GP03199\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  LOCBYTE SETS UP REGISTERS FOR A SEARCH STRING FOR BYTE (SRST)     *\n.*    OPERATION.                                                      *\n.*  &TEXT     SPECIFIES THE ADDRESS OF THE TEXT STRING TO BE SEARCHED *\n.*    USE EITHER LEN= OR END=                                         *\n.*  &END      SPECIFIES THE TEXT END ADDRESS + 1                      *\n.*  &LEN      SPECIFIES THE TEXT LENGTH; DEFAULT IS L'&TEXT           *\n.*  &WK (14)  WORK REGISTER                                           *\n.*  &W2 (15)  RESULT REGISTER (TEXT+LEN IF NOTHING FOUND)             *\n.*  &BYTE     SELF-DEFINING TERM FOR SEARCH CHARACTER                 *\n.*                                                                    *\n.*  WHEN DONE,                                                        *\n.*                                                                    *\n.*         CONDITION CODE 1 (BH) NO MATCH FOUND                       *\n.*         CONDITION CODE 2 (BL) MATCH FOUND; ADDRESS IN &W2          *\n.*                                                                    *\n.*  SAMPLE USE:                                                       *\n.*                                                                    *\n.*       LOCBYTE INBUFF      BUFFER, CARD IMAGE, ETC. BUFFER          *\n.*       BH    NOTFOUND        NOTHING FOUND                          *\n.*       BCTR  R15,0     E.G., SPACE TO LAST BYTE                     *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         LCLC  &L,&LAB\n&L       SETC  'L'''\n&LAB     SETC  'ZZ'.'&SYSNDX'\n&NM      MACPARM R0,&BYTE                                       GP03199\n         MACPARM &WK,&TEXT   LOAD TEXT ADDRESS\n         AIF   ('&END' EQ '').HAVELEN                           GP03199\n         MACPARM &W2,&END    LOAD END ADDRESS+1                 GP03199\n         AIF   ('&LEN' EQ '').DONELEN                           GP03199\n         MNOTE 8,'LOCBYTE: END= AND LEN= ARE MUTUALLY EXCLUSIVE'\n.HAVELEN MACPARM &W2,&LEN,NULL=&L&TEXT                          GP03199\n         MACPARM &W2,(&WK),OP=AR,OPR=AR\n.DONELEN ANOP  ,                                                GP03199\n&LAB.LP  SRST  &W2,(&WK)                                        GP04234\n         BO    &LAB.LP\n.DONE    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCLEN": {"ttr": 6913, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\t3/\\x01\\t3/\"!\\x00$\\x00$\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2009-11-28T00:00:00", "modifydate": "2009-11-28T22:21:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LOCLEN &AD,&LN,&BYTE=C' '                     ADDED ON GP09333\n         LCLC  &L\n&L       SETC  'L'''\n.*  LOCLEN SUGGESTED BY FINDLBLK, AS PUBLISHED ON ASSEMBLER-LIST\n.*    BY CLEMENT VICTOR CLARKE\n.*\n&NM      MACPARM R15,&AD     LOAD STRING ADDRESS\n         MACPARM R1,&LN,NULL=&L&AD   LOAD THE LENGTH\n         MACPARM R0,=4&BYTE,OP=L     SEARCH ARGUMENT\n         MACPARM R14,=H'-4',OP=LH    DECREMENT\n         CH    R1,=H'4'      LONG ENOUGH FOR WORD TEST?\n         BL    ZZ&SYSNDX.W   USE BYTE COMPARE\n         AR    R1,R15        END ADDRESS\n         AR    R1,R14        LAST WORD\n         CLM   R0,15,0(R1)   LAST FOUR MATCH ?\n         BNE   ZZ&SYSNDX.X   NO; USE BYTE COMPARE\n         NR    R1,R14        TRUNCATE TO WORD BOUNDARY\nZZ&SYSNDX.L C  R0,0(,R1)     WORD MATCHED?\n         BNE   ZZ&SYSNDX.X   NO; USE BYTE COMPARE\n         BXH   R1,R14,ZZ&SYSNDX.L   TRY AGAIN\nZZ&SYSNDX.V SR R1,R1\n         B     ZZ&SYSNDX.Z   EXIT\nZZ&SYSNDX.W LTR R1,R1        ANY USABLE LENGTH ?\n         BNP   ZZ&SYSNDX.V   NO; RETURN 0\n         AR    R1,R15        END ADDRESS\n         AR    R1,R14        LAST WORD\nZZ&SYSNDX.X LA R1,3(,R1)     ADVANCE TO END\n         LH    R14,=H'-1'    DECREMENT BY 1\nZZ&SYSNDX.Y CLI 0(R1),&BYTE   MATCH ?\n         BNE   *+8           NO; DONE\n         BXH   R1,R14,ZZ&SYSNDX.Y  TRY AGAIN\n         SR    R1,R15        CALCULATE LENGTH - 1\n         SR    R1,R14        TRUE LENGTH\nZZ&SYSNDX.Z DS 0H\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPALOOK": {"ttr": 6915, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x03&\\x1f\\x01\\x06&?\\x00 \\x003\\x00\\x19\\x00\\x19\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-09-18T00:00:00", "modifydate": "2006-09-20T00:20:00", "lines": 51, "newlines": 25, "modlines": 25, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LPALOOK &EP=,&EPLOC=,&DCB=,&MEMBER=,&ALIAS=,&ERR=\n.*--------------------------------------------------------------------*\n.*  LPALOOK INVOKES SUBROUTINE SUBLPALK, WHICH USES CSVQUERY TO LOOK  *\n.*    FOR THE MODULE REQUESTED BY EITHER EP=, OR NAMED IN EPLOC.      *\n.*  WHEN THE DCB IS NON-ZERO, THE MODULE IS LOADED IF NOT IN AN LPA   *\n.*    LIST. LOAD USES DCB=0 WHEN DCB PARAMETER<256                    *\n.*                                                                    *\n.*  AN EXTRN IS ISSUED UNLESS THE MODULE WAS NAMED IN A SERVLOAD REQ. *\n.*--------------------------------------------------------------------*\n         GBLC  &MACPLAB\n         GBLC  &SRVLMOD(20),&SRVLDEL(20)\n         GBLB  &MVSXA                                           GP04234\n         GBLB  &SRVBMOD(20)\n         GBLA  &SRVNMOD\n         GBLB  &ZLPAKFG\n         LCLA  &I\n         LCLC  &CALLMOD\n&CALLMOD SETC  '=A(SUBLPALK)'    LPA LOOKUP/LOAD MODULE\n&MACPLAB SETC  '&NM'\n.LOOKLUK AIF   (&I GE &SRVNMOD).SKIPLUK  NOT IN SERVLOAD LIST\n&I       SETA  &I+1\n         AIF   ('&SRVLDEL(&I)' NE 'SUBLPALK').LOOKLUK\n&CALLMOD SETC  '&SRVLMOD(&I)'  USE SERVLOAD ADDRESS\n         AGO   .COMMLUK\n.SKIPLUK AIF   (&ZLPAKFG).COMMLUK\n         EXTRN SUBLPALK\n&ZLPAKFG SETB  1\n.COMMLUK AIF   ('&EP' EQ '' AND '&EPLOC' EQ '').OMIT\n         AIF   ('&EP' NE '' AND '&EPLOC' NE '').DUPE\n         MACPARM R0,&DCB,NULL=0\n         AIF   ('&EP' EQ '').NOEP\n         MACPARM R1,=CL8'&EP '\n         AGO   .COMMON\n.NOEP    MACPARM R1,&EPLOC\n.COMMON  MACPARM R15,&CALLMOD,OP=L\n         AIF   (&MVSXA).DOBAS                                   GP04234\n         MACPARM R14,(R15),OP=BAL,OPR=BALR\n         AGO   .NOBAS\n.DOBAS   MACPARM R14,(R15),OP=BAS,OPR=BASR\n.NOBAS   AIF ('&MEMBER' EQ '' AND '&ALIAS' EQ '' AND '&ERR' EQ '').MEND\n         MACPARM R15,=H'4',OP=CH  CHECK RETURN CODE\n         MACPARM &MEMBER,OP=BL,OPR=BLR,MODE=ONE,NULL=SKIP\n         MACPARM &ALIAS,OP=BE,OPR=BER,MODE=ONE,NULL=SKIP\n         MACPARM &ERR,OP=BH,OPR=BHR,MODE=ONE,NULL=SKIP\n         MEXIT ,                                                 81169\n.OMIT    MNOTE 8,'NEITHER EP= NOR EPLOC= SUPPLIED'               81169\n         AGO   .DEFLAB                                           81169\n.DUPE    MNOTE 8,'EP= AND EPLOC= ARE MUTUALLY EXCLUSIVE'         81169\n.DEFLAB  MACPARM MODE=LBL    EXPAND LABEL ONLY\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LTCB": {"ttr": 6917, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      LTCB  &R,&HAVE=,&USE=NO                        ADDED ON 86138\n         GBLB  &MVS\n         LCLC  &N\n&N       SETC  '&NM'\n         AIF   (&MVS).PSA\n         AIF   ('&HAVE' EQ 'CVT').HAVCVT\n&N       L     &R,CVTPTR\n&N       SETC  ''\n         L     &R,CVTTCBP-CVTMAP(,&R)                            90327\n         AGO   .OLDBOX                                           90327\n.HAVCVT  ANOP  ,\n&N       L     &R,CVTTCBP\n.OLDBOX  L     &R,4(,&R)\n         AGO   .EXIT\n.PSA     ANOP  ,\n&N       L     &R,PSATOLD-PSA\n.EXIT    AIF   ('&USE' EQ 'NO').MEND\n         USING TCB,&R\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LTJID": {"ttr": 6919, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x11\\x0f\\x01\\x06&?\\x00\"\\x00\\x18\\x00\\x18\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-04-20T00:00:00", "modifydate": "2006-09-20T00:22:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&L       LTJID &REG,&BYTE1,&BYTE2,&MASK=YES\n         GBLC  &MODEL\n         LCLC  &NM\n&NM      SETC  '&L'\n         AIF   ('&MASK' NE 'NO').NOMA\n&NM      XR    &REG,&REG\n&NM      SETC  ''\n.NOMA    AIF   ('&MODEL' EQ '360').TJID360\n&NM      ICM   &REG,3,&BYTE1           BITS 1-7 OF TJID\n         AGO   .TJID370                NOW ARE YOU HAPPY?\n.TJID360 ANOP ,\n&NM      IC    &REG,&BYTE1             BITS  1-7 OF TJID\n         SLL   &REG,8                  MAKE ROOM FOR SECOND BYTE\n.TJID370 AIF   ('&BYTE2' EQ '').UP4\n         IC    &REG,&BYTE2                   8-F OF TJID\n         AGO   .COMASK\n.UP4     IC    &REG,4+&BYTE1                 8-F OF TJID\n.COMASK  AIF   ('&MASK' EQ '' OR '&MASK' EQ 'NO').MEND\n         AIF   ('&MASK' EQ 'YES').MLIT\n         MACPARM &REG,&MASK,OP=N,OPR=NR         KILL HIGH BITS\n         MEXIT ,\n.MLIT    N     &REG,=X'00007FFF'       MASK HIGH BIT\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LTJP": {"ttr": 6921, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      LTJP  &REG,&OFFSET,&BASE=,&END=                ADDED ON 83332\n         GBLC  &SYSTEM,&MACPLAB,&LOCAL                           84317\n         GBLB  &MVSXA                                            92309\n         GBLA  &REL\n&MACPLAB SETC  ''\n         AIF   ('&SYSTEM' NE 'MVS').MEND\n         AIF   (&REL LT 102).OLDJESP\n         AIF   (&REL EQ 102 AND '&LOCAL' EQ 'CCSI').OLDJESP      84317\n         AIF   ('&OFFSET' NE 'JQECHAIN').NOTOLD                  83345\n&NM      ICM   &REG,15,JQENEXT                                   83345\n         AGO   .COMNAM                                           83345\n.NOTOLD  ANOP  ,                                                 83345\n&NM      ICM   &REG,15,&OFFSET\n.COMNAM  AIF   (NOT &MVSXA OR &REL LT 220).COMASK                92309\n         N     &REG,=X'00FFFFFF'  OOPS                           92309\n         AGO   .COMMON                                           92309\n.COMASK  N     &REG,=X'00FFFFFF'                                 83345\n         AGO   .COMMON\n.OLDJESP ANOP  ,\n&NM      ICM   &REG,12,&OFFSET\n         SRL   &REG,16\n         SLA   &REG,2\n.COMMON  AIF   (T'&END EQ 'O').NOEND\n         MACPARM &END,OP=BZ,OPR=BZR\n.NOEND   AIF   (T'&BASE EQ 'O').MEND\n         MACPARM &BASE,OP=AL,OPR=ALR\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LTJQEP": {"ttr": 6923, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x13\\x00\\x7f\\x01\\x13\\x00\\x7f\\x18\\x15\\x00\\x13\\x00\\x13\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2013-01-07T00:00:00", "modifydate": "2013-01-07T18:15:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LTJQEP &REG,&OFFSET,&BASE=,&END=               ADDED ON 85076\n         COPY  OPTIONGB\n         GBLC  &MACPLAB\n&MACPLAB SETC  ''\n         AIF   (NOT &MVS).MEND\n         AIF   (K'&JES2REL LT 3).OLDJESP\n&NM      ICM   &REG,15,&OFFSET\n         N     &REG,=X'00FFFFFF'\n         AGO   .COMMON\n.OLDJESP ANOP  ,\n&NM      ICM   &REG,12,&OFFSET\n         SRL   &REG,16\n         SLA   &REG,2\n.COMMON  AIF   (T'&END EQ 'O').NOEND\n         MACPARM &END,OP=BZ,OPR=BZR\n.NOEND   AIF   (T'&BASE EQ 'O').MEND\n         MACPARM &BASE,OP=AL,OPR=ALR\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LTP": {"ttr": 6925, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x05\\x01_\\x01\\x05\\x01o\\x00E\\x00\\x16\\x00\\x15\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2005-01-15T00:00:00", "modifydate": "2005-01-16T00:45:00", "lines": 22, "newlines": 21, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      LTP   &R,&INDEX,&BZ=,&BNZ=,&PARM=\n         GBLC  &ZZLTPRM\n.*--------------------------------------------------------------------*\n.*   LTP LOADS AND TESTS A PARAMETER E.G., CALL SUBR(A,B,C..) A=0,B=1 *\n.*   OP1:REGISTER TO BE LOADED  INDEX:PARAMETER NUMBER (REL. TO 0)    *\n.*   BZ:TARGET WHEN ADDRESS IS ZERO     PARM:REG. WITH PARM ADDRESS   *\n.*   PARM DEFAULTS TO R9, ELSE MAY BE SET ON THE FIRST INVOCATION     *\n.*--------------------------------------------------------------------*\n         AIF   ('&PARM' NE '').SETPARM\n         AIF   ('&ZZLTPRM' NE '').COMPARM\n&ZZLTPRM SETC  'R9'          DEFAULT PARM REGISTER\n.SETPARM ANOP  ,\n&ZZLTPRM SETC  '&PARM(1)'\n.COMPARM ANOP  ,\n&NM      L     &R(1),&INDEX*4(,&ZZLTPRM)\n         AIF   ('&BZ' EQ '' AND '&BNZ' EQ '').MEND\n         LA    &R(1),0(,&R(1))\n         LTR   &R(1),&R(1)\n         MACPARM &BZ,OP=BZ,OPR=BZR,NULL=SKIP,MODE=ONE\n         MACPARM &BNZ,OP=BNZ,OPR=BNZR,NULL=SKIP,MODE=ONE\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACAD": {"ttr": 6927, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\t\\x08\\x1f\\x01\\t\\x08/\\x00\\x01\\x00\\x15\\x00\\x13\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2009-03-22T00:00:00", "modifydate": "2009-03-23T00:01:00", "lines": 21, "newlines": 19, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MACAD &LABEL                                  NEW 2009.081 GYP\n.*--------------------------------------------------------------------*\n.*   MACAD EXPANDS A LABELLED DC WITH EITHER AN ADDRESS CONSTANT OR   *\n.*     A WORD OF ZEROES.                                              *\n.*   USED AS AN INNER MACRO TO EXPAND DEFINITIONS OR MAPPING          *\n.*--------------------------------------------------------------------*\n         GBLB  &ZZLABYN\n         LCLA  &I,&N\n         LCLC  &STR,&LAB\n&N       SETA  N'&SYSLIST    GET NUMBER OF OPERANDS\n         AIF   (NOT &ZZLABYN).SIMPLE\n&LAB     SETC  '&NM'\n.DOLAB   AIF   (&I GE &N).MEND\n&I       SETA  &I+1\n&LAB     DC    A(&SYSLIST(&I))\n&LAB     SETC  ''\n         AGO   .DOLAB\n.SIMPLE  ANOP  ,\n&NM      DC    &N.A(0)\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACBDDDL": {"ttr": 6929, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x10)\\x0f\\x01\\x10)\\x0f\\x16S\\x003\\x003\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2010-10-17T00:00:00", "modifydate": "2010-10-17T16:53:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         MACBDDDL &OP,&LEN                               NEW ON 2010290\n         GBLC  &MACSTR       RETURN OPERAND STRING\n         GBLA  &MACTYP       RETURN OPERAND TYPE (1-REG,2-TXT,3-MIX)\n.*\n.*   THIS MACRO ACCEPTS AN OPERAND EXPRESSION AND A LENGTH,\n.*   AND RETURNS A SINGLE OPERAND COMBINING THE TWO.  E.G.,\n.*     TEXT,5                -> TEXT(5)\n.*     (R6),4                -> 0(4,R6)\n.*     XYZ(R9),3             -> XYZ(3,R9)\n.*     ((R6)),8              -> ((R6))(8)\n.*\n         LCLC  &OP1,&OP2\n         LCLA  &I,&J,&K,&L\n&MACSTR  SETC  ''            ERROR INDICATION\n&MACTYP  SETA  0             ERROR INDICATION\n&K       SETA  K'&OP         LENGTH OF INPUT OPERAND\n         AIF   (&K LT 1).MEND     ERROR\n         AIF   (&K LT 3).BDDD     PLAIN TEXT\n         AIF   ('&OP'(&K,1) NE ')').BDDD    SIMPLE TEXT\n         AIF   ('&OP'(&K-1,1) EQ ')').BDDD\n         AIF   ('&OP'(1,1) NE '(' OR '&OP'(2,1) EQ '(').MIX\n.REG0    ANOP  ,\n&MACTYP  SETA  1             REGISTER\n&MACSTR  SETC  '0('.'&LEN'.','.'&OP'.')' GENERATE OPERAND FIELD\n         MEXIT ,\n.MIX     ANOP  ,\n.*  PARSE xxx ( yyy ) - CHANGE TO xxx ( len , yyy )\n&I       SETA  &K\n&J       SETA  1\n.QLOOP   AIF   (&I LE 1).BDDD\n&I       SETA  &I-1\n         AIF   ('&OP'(&I,1) EQ '(').QLEFT\n         AIF   ('&OP'(&I,1) EQ ')').QRITE\n         AGO   .QLOOP\n.QRITE   ANOP  ,\n&J       SETA  &J+1\n         AGO   .QLOOP\n.QLEFT   ANOP  ,\n&J       SETA  &J-1\n         AIF   (&J GT 0).QLOOP\n         AIF   (&I LE 1).BDDD\n&OP1     SETC  '&OP'(1,&I)\n&OP2     SETC  '&OP'(&I+1,&K-&I)\n&MACSTR  SETC  '&OP1'.'&LEN'.','.'&OP2'\n&MACTYP  SETA  3             MIXED\n         MEXIT ,\n.BDDD    ANOP  ,\n&MACSTR  SETC  '&OP'.'('.'&LEN'.')'    GENERATE OPERAND FIELD\n&MACTYP  SETA  2             TEXT\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACBL": {"ttr": 6931, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00)\\x01\\t\\x08/\\x01\\t\\x08?\\x01G\\x00\\x15\\x00\\x15\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2009-03-23T00:00:00", "modifydate": "2009-03-24T01:47:29", "lines": 21, "newlines": 21, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MACBL &LABEL                                  NEW 2009.082 GYP\n.*--------------------------------------------------------------------*\n.*   MACAD EXPANDS A LABELLED BRANCH TO THE TARGET ADDRESS, OR        *\n.*     A WORD OF ZEROES.                                              *\n.*   USED AS AN INNER MACRO TO EXPAND DEFINITIONS OR MAPPING          *\n.*--------------------------------------------------------------------*\n         GBLB  &ZZLABYN\n         LCLA  &I,&N\n         LCLC  &STR,&LAB\n&N       SETA  N'&SYSLIST    GET NUMBER OF OPERANDS\n         AIF   (NOT &ZZLABYN).SIMPLE\n&LAB     SETC  '&NM'\n.DOLAB   AIF   (&I GE &N).MEND\n&I       SETA  &I+1\n&LAB     B     &SYSLIST(&I)\n&LAB     SETC  ''\n         AGO   .DOLAB\n.SIMPLE  ANOP  ,\n&NM      DC    &N.AL4(0)\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACDC": {"ttr": 6933, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x03\\x10_\\x01\\x03\\x10_\\x12H\\x00\\x13\\x00\\x13\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-04-15T00:00:00", "modifydate": "2003-04-15T12:48:59", "lines": 19, "newlines": 19, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MACDC &TEXT                                   NEW 2003.091 GYP\n.*--------------------------------------------------------------------*\n.*   MACDC EXPANDS A LABELLED DC WHEN GLOBAL ZZLABYN IS TRUE, ELSE    *\n.*     IT EXPANDS AN UNLABELLED DC                                    *\n.*   USED AS AN INNER MACRO TO EXPAND DEFINITIONS OR MAPPING          *\n.*--------------------------------------------------------------------*\n         GBLB  &ZZLABYN\n         LCLA  &I,&N\n         LCLC  &STR,&LAB\n&N       SETA  N'&SYSLIST    GET NUMBER OF OPERANDS\n         AIF   (NOT &ZZLABYN).NOLAB\n&LAB     SETC  '&NM'\n.NOLAB   AIF   (&I GE &N).MEND\n&I       SETA  &I+1\n&LAB     DC    &SYSLIST(&I)\n&LAB     SETC  ''\n         AGO   .NOLAB\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACDEFXT": {"ttr": 6935, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x05%\\x0f\\x01\\x05%\\x0f\\x14Y\\x00#\\x00\\x13\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2005-09-07T00:00:00", "modifydate": "2005-09-07T14:59:00", "lines": 35, "newlines": 19, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         MACDEFXT &NAME,&TYPE                            ADDED  GP05250\n.*\n.*  (POOR) REPLACEMENT FOR D' ATTRIBUTE TO ALLOW ASSEMBLY UNDER ASM XF\n.*\n         GBLC  &ZZEXTNM(100) NAMES OF PREVIOUSLY DEFINED EXTERNALS\n         GBLA  &ZZEXTFG      0 ON ERROR; 1 IF ADDED; 2 IF OLD\n         GBLA  &ZZEXT##      NUMBER OF EXTERNALS DEFINED\n.*\n         LCLC  &WHAT   TYPE: EXTRN, WXTRN, OR 'OTHER' (NAME SAVED ONLY)\n         LCLA  &I,&J\n&ZZEXTFG SETA  0             SET ERROR\n         AIF   ('&NAME' EQ '').MEND    NULL SUBSTITUTE?\n         AIF   ('&TYPE' EQ 'OTHER').TYPOK\n&WHAT    SETC  'WXTRN'       MOST FREQUENT ?\n         AIF   ('&TYPE' EQ 'WXTRN').TYPOK\n&WHAT    SETC  'EXTRN'       DEFAULT\n         AIF   (T'&TYPE EQ 'O' OR '&TYPE' EQ 'EXTRN').TYPOK\n         MNOTE 8,'MACDEFXT: UNSUPPORTED TYPE &TYPE - NOT EXRTN, WXTRN'\n.TYPOK   AIF   (&I GE &ZZEXT##).NEW\n&I       SETA  &I+1\n         AIF   ('&ZZEXTNM(&I)' NE '&NAME').TYPOK\n&ZZEXTFG SETA  2             SET OLD\n         MEXIT ,             PREVIOUSLY DEFINED - NO ACTION\n.*\n.FULL    MNOTE 4,'MACDEFXT: NAME TABLE FULL - NAME NOT SAVED'\n         MEXIT ,             PREVIOUSLY DEFINED - NO ACTION\n.*\n.NEW     AIF   ('&TYPE' EQ 'OTHER').JUSTADD\n         &WHAT &NAME\n.JUSTADD AIF   (&ZZEXT## GT 99).FULL\n&ZZEXT## SETA  &ZZEXT##+1\n&ZZEXTNM(&ZZEXT##) SETC '&NAME'   REMEMBER THE NAME\n&ZZEXTFG SETA  1             SET NEW\n.MEND    MEND  ,             PREVIOUSLY DEFINED - NO ACTION\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACLIST": {"ttr": 6937, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x07\\x00\\x00\\x01\\x041\\x7f\\x01\\x05\\x19\\x7f\"\\x12\\x000\\x00\\x13\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.07", "flags": 0, "createdate": "2004-11-12T00:00:00", "modifydate": "2005-07-16T22:12:00", "lines": 48, "newlines": 19, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         MACLIST &LIST                                 NEW 2004.234 GYP\n.*--------------------------------------------------------------------*\n.*   MACLIST IS USED TO COMPENSATE FOR ASSEMBLER F/XF INABILITY TO    *\n.*     PROVIDE N'&LIST(&I,&N) SUPPORT.                                *\n.*   THIS MACRO STRIPS UP TO 10 INNER VALUES                          *\n.*   E.G.       MYMAC OPTS=(A,(B1,B2,B3),(C1,C2))                     *\n.*    HLASM N'&OPTS(2) IS 3, N'&OPTS(3) IS 2                          *\n.*    XFASM FAILS ALL BUT N'&OPTS                                     *\n.*                                                                    *\n.*    USE:   MACLIST &OPTS(2)                                         *\n.*    RESULTS RETURNED IN &MACP1-&MACP10, COUNT IN &MACP#             *\n.*--------------------------------------------------------------------*\n         GBLA  &MACP#        NUMBER OF (SUB)LIST ARGUMENTS\n         GBLC  &MACP1,&MACP2,&MACP3,&MACP4,&MACP5\n         GBLC  &MACP6,&MACP7,&MACP8,&MACP9,&MACP10\n         LCLA  &I,&J,&K,&N\n         LCLC  &STR,&LAB\n         LCLC  &VAL(10)\n&STR     SETC  '&LIST'\n&J       SETA  1             OUTPUT SUBSCRIPT\n&K       SETA  K'&LIST\n         AIF   (&K LT 1).DONE\n         AIF   ('&STR'(1,1) NE '(' OR '&STR'(&K,1) NE ')').NOPARS\n&STR     SETC  '&STR'(2,&K-2)\n&K       SETA  K'&STR\n.NOPARS  AIF   (&I GE &K).DONE\n&I       SETA  &I+1\n         AIF   ('&STR'(&I,1) EQ ',').NEWPRM\n&VAL(&J) SETC  '&VAL(&J)'.'&STR'(&I,1)\n         AGO   .NOPARS\n.NEWPRM  AIF   (&J GE 10).TOOMANY\n&J       SETA  &J+1\n         AGO   .NOPARS\n.TOOMANY MNOTE 8,'MACLIST SUPPORTS MAX OF 10 SUBLIST ITEMS'\n.DONE    ANOP  ,\n&MACP#   SETA  &J            GET NUMBER OF OPERANDS\n&MACP1   SETC  '&VAL(1)'\n&MACP2   SETC  '&VAL(2)'\n&MACP3   SETC  '&VAL(3)'\n&MACP4   SETC  '&VAL(4)'\n&MACP5   SETC  '&VAL(5)'\n&MACP6   SETC  '&VAL(6)'\n&MACP7   SETC  '&VAL(7)'\n&MACP8   SETC  '&VAL(8)'\n&MACP9   SETC  '&VAL(9)'\n&MACP10  SETC  '&VAL(10)'\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACMAPHD": {"ttr": 6939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x03\\x14O\\x01\\x043\\x9f\\x15&\\x008\\x008\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-05-24T00:00:00", "modifydate": "2004-12-04T15:26:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM    MACMAPHD &OP1,&DSECT=,&PFX=,&SFX=,&DFLT=,&NULL=SKIP      GP03144\n         LCLC  &FOOF\n.*--------------------------------------------------------------------*\n.*  MACMAPHD IS USED AS AN INNER MACRO TO DEFINE DS/DSECT/CSECT       *\n.*  FOR CONTROL BLOCK MAPPINGS                                        *\n.*                                                                    *\n.*  &NM IS THE (OPTIONAL) BLOCK NAME                                  *\n.*  &OP1 IS AN ALTERNATE NAME WHEN &NM IS VOID                        *\n.*  &DFLT IS A DEFAULT NAME WHEN BOTH &NM AND &OP1 ARE OMITTED        *\n.*    WHEN BOTH ARE VOID, AND DSECT= IS VOID, AND NULL=SKIP, THEN     *\n.*    NOTHING IS EXPANDED                                             *\n.*                                                                    *\n.*  &PFX AND &SFX DEFINE AN OPTIONAL PREFIX AND SUFFIX THAT WILL BE   *\n.*    APPLIED TO ALL NAMES EXCEPT &NM                                 *\n.*                                                                    *\n.*  &DSECT - WHEN VOID OR =YES, GENERATES DSECT                       *\n.*    WHEN =NO, EXPANDS DS 0D (UNLESS ALL LABELS VOID AND NULL-SKIP)  *\n.*    OTHERWISE USED AS IS (FOR RSECT AND CSECT)                      *\n.*--------------------------------------------------------------------*\n         LCLC  &LBL          EXPANDED NAME FIELD\n         LCLB  &DS,&LBF\n         LCLC  &OPCD         DSECT, DS, OR ?\n         LCLC  &OPER         MATCHING OPERAND (, OR 0D)\n         AIF   ('&NM' EQ '').NONAME\n&LBF     SETB  1             USER SUPPLIED LABEL\n&LBL     SETC  '&NM'\n         AGO   .TYPETST\n.NONAME  AIF   ('&OP1' EQ '').NOALTNM\n&LBF     SETB  1             USER SUPPLIED LABEL\n&LBL     SETC  '&PFX'.'&OP1'.'&SFX'\n         AGO   .TYPETST\n.NOALTNM AIF   ('&DFLT' NE '').GOODFLT\n&FOOF    SETC  '&SYSNDX'\n&LBL     SETC  '&PFX'.'MAP'.'&FOOF'.'&SFX'\n         AIF   ('&DSECT' NE 'NO' AND '&DSECT' NE 'DS').NODFLT\n         AIF   (NOT &LBF AND '&NULL' EQ 'SKIP').MEND\n.NODFLT  MNOTE 4,'MACMAPHD: LABEL, OPERAND, AND DFLT ALL VOID'\n         AGO   .TYPETST\n.GOODFLT ANOP  ,\n&LBL     SETC  '&PFX'.'&DFLT'.'&SFX'\n.TYPETST AIF   ('&DSECT' NE 'NO' AND '&DSECT' NE 'DS').NOTDS\n         AIF   (NOT &LBF AND '&NULL' EQ 'SKIP').MEND\n&OPCD    SETC  'DS'\n&OPER    SETC  '0D'\n         AGO   .EXPAND\n.NOTDS   AIF   ('&DSECT' NE ''   AND '&DSECT' NE 'YES').NOTDSY\n&OPCD    SETC  'DSECT'\n&OPER    SETC  ','\n         AGO   .EXPAND\n.NOTDSY  ANOP  ,\n&OPCD    SETC  '&DSECT'\n&OPER    SETC  ','\n.EXPAND  ANOP  ,\n&LBL     &OPCD &OPER\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACPARM": {"ttr": 7169, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x02\\x00\\x00\\x01\\x08\\t\\x0f\\x01\\x08'\\x9f\\x141\\x01I\\x01\\xc6\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.02", "flags": 0, "createdate": "2008-03-30T00:00:00", "modifydate": "2008-10-05T14:31:00", "lines": 329, "newlines": 454, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM    MACPARM &OP1,         FIRST OPERAND (USUALLY R1 FOR LA/LR)      *\n               &OP2,         SECOND OPERAND (R2/B2D2 OR R3 IF MODE=3   *\n               &OP3,         THIRD OPERAND (B2D2 WHEN MODE=3)          *\n               &OP4,         FOURTH OPERAND  (WHEN MODE=4)             *\n               &OP=LA,       OPCODE WHEN OP2 IS NOT A REGISTER         *\n               &OPM=,        OPCODE WHEN OP2 IS NEGATED AND NOT REG.   *\n               &OPR=LR,      OPCODE WHEN OP2 IS REGISTER               *\n               &OPMR=LCR,    OPCODE WHEN OP2 IS NEGATED REGISTER       *\n               &QUOTE=,      OPCODE FOR QUOTED STRING/EXPLICIT LEN     *\n               &MODE=,       ONE/THREE/REV/EQU/EVEN                    *\n               &NAME=,       OUTER MACRO FOR MNOTES                    *\n               &OMIT=NO,     SKIP COMPLETELY IF BLANK                  *\n               &NULL=  SKIP, YES, OR OPERAND TO USE FOR NULL &OP2\n.*                                                              GP00196\n.*   THIS IS AN INNER MACRO USED TO CONVERT MACRO PARAMETERS TO\n.*     INSTRUCTIONS APPROPRIATE TO THE OPERAND TYPE.\n.*\n.*   THIS MACRO WAS SUGGESTED BY A MUCH OLDER VERSION (LODE/LODESTAR)\n.*     BY SEYMOUR (SHMUEL) J. METZ THAT HANDLED TWO OPERANDS ONLY.\n.*     NONE OF THE ORIGINAL CODE IS USED HEREIN.\n.*\n.*   WITH DEFAULTS, IT EXPANDS:\n.*    MACPARM R5,WORD      AS   LA R5,WORD\n.*    MACPARM R5,(R5)      AS   NOTHING (LABEL IS SAVED IN MACPLAB)\n.*    MACPARM R5,(R4)      AS   LR R5,R4\n.*\n.*   IN ORDER TO BE RECOGNIZED AS MATCHING, REGISTER SPECIFICATIONS\n.*    SHOULD BE MADE IN ABSOLUTE FORM (0)-(15), OR MNEMONIC (R0)-(R15).\n.*    OP1 NORMALLY DOES NOT NEED THE PARENTHESES.\n.*\n.*   TO AVOID CONFLICTS WITH REGISTER SPECIFICATIONS, EXPRESSIONS MUST\n.*    EITHER BEGIN WITHOUT A PARENTHESIS, OR WITH TWO: ((B-A)/(C-A))\n.*\n.*    OP2 PARAMETER IS AN EXPRESSION OR (REG)\n.*       EITHER FORM MAY BE PREFIXED BY A MINUS SIGN\n.*       LA REQUESTS MAY BE PREFIXED BY / TO USE L =A(OP2)\n.*       LA REQUESTS MAY BE PREFIXED BY * TO USE L ,OP2\n.*       FOR A NEGATED SECOND OPERAND, THE EXPANSION WILL USE\n.*       &OPMR FOR REGISTER, &OPM IF SPECIFIED, OR &OP/LNR\n.*    MODE=REV      FOR &OPR, REVERSE REGISTERS\n.*    MODE=EQU      IF FIRST=SECOND OPERAND, EXPAND ANYWAY\n.*    MODE=NONE     EXPAND OP= ONLY; EITHER NO OPERAND OR OPT.  GP03144\n.*                    OPERAND. (MAY BE ENCLOSED IN QUOTES)      GP03144\n.*    MODE=ONE      SINGLE OPERAND (E.G., BX, BXR TYPE)\n.*    MODE=THREE    THREE OPERAND TYPE; EXPANDS &OP &OP1,&OP2,&OP3\n.*    MODE=FOUR     FOUR OPERAND TYPE; EXPANDS &OP &OP1,&OP2,&OP3,&OP4\n.*    MODE=EVEN     EXPAND (TWO OPERAND FORM) EVEN WHEN SAME    GP01028\n.*    MODE=LBL      NO OPERANDS - EXPANDS PENDING LABEL(S)\n.*                    OPERAND 1 - OPTIONAL ALIGNMENT (E.G., 0F) GP03144\n.*    NULL=         OMITTED PARM CAUSES ASSEMBLY ERROR (?)\n.*    NULL=YES      NULL FINAL PARAMETER EXPANDS WITHOUT PARM\n.*    NULL=TERM     EXPANSION USES SUPPLIED TERM IF PARM=NULL\n.*    NULL=SKIP     NULL FINAL PARAMETER SKIPS EXPANSION\n.*    NAME=         (OPTIONAL) NAME OF OUTER MACRO FOR MNOTES\n.*\n.*    QUOTE=(LA,8)  TURNS  'TEXT' INTO   LA RX,=CL(8)'TEXT' (MODE 2)\n.*\n         GBLC  &MACPLAB,&MACPSIZ,&MACQSTR                       GP08090\n         GBLB  &MACPERR,&MACPNUL,&MVS,&MVSXA,&MVSESA            GP00196\n         GBLB  &MACQUOT                                         GP08090\n         GBLA  &MACPLEN                                         GP08090\n         LCLA  &K,&I,&J                                         GP08090\n         LCLB  &MINUS,&MOD0,&MOD1,&MOD3,&MOD4,&MODQ,&MODR,&MODV\n         LCLB  &FGR1,&FGR2   ON WITH REGISTER OPERAND\n         LCLC  &FD1,&FD2,&FD3,&FD4,&LBL,&OPRR,&MNONM,&OPLA,&L   GP08090\n         AIF   ('&OMIT' EQ '').NO  SKIP COMPLETELY IF NULL      GP06277\n&MNONM   SETC  'MACPARM:'\n&MACPERR SETB  0             RESET RETURN FLAG                  GP00196\n&MACPNUL SETB  0             RESET RETURN FLAG                  GP00196\n&OPLA    SETC  '&OP'         MAY NEED UPDATING                  GP08090\n&MACPSIZ SETC  ''                                               GP08090\n         AIF   ('&NM' EQ '').NONAME\n&MNONM   SETC  '&NAME'.'/MACPARM:'\n.NONAME  ANOP  ,\n&MOD0    SETB  ('&MODE' EQ 'NONE' OR '&MODE' EQ '0')            GP03144\n&MOD1    SETB  ('&MODE' EQ 'ONE' OR '&MODE' EQ '1')\n&MOD3    SETB  ('&MODE' EQ 'THREE' OR '&MODE' EQ '3')\n&MOD4    SETB  ('&MODE' EQ 'FOUR' OR '&MODE' EQ '4')            GP00196\n&MODQ    SETB  ('&MODE' EQ 'EQU' OR '&MODE' EQ 'EQUAL')\n&MODR    SETB  ('&MODE' EQ 'REV' OR '&MODE' EQ 'REVERSE')\n&MODV    SETB  ('&MODE' EQ 'EVEN' OR '&MODE' EQ 'SAME')         GP01028\n.*\n.*  TEST FOR UNUSED LABEL EXPANSION ONLY\n.*\n&LBL     SETC  '&NM'         INDICATE LOCAL LABEL UNUSED\n         AIF   ('&MODE' NE 'LBL' AND '&MODE' NE 'LABEL').NOTLBL\n&FD1     SETC  '&OP1(1)'     ALLOW USER TO SPECIFY ALIGNMENT    GP03144\n         AIF   ('&FD1' NE '').XAV                               GP03144\n&FD1     SETC  '0H'          DEFAULT ALIGNMENT                  GP03144\n.XAV     AIF   ('&MACPLAB' EQ '').XNM\n         AIF   ('&MACPLAB' EQ '&LBL').X1LBL\n&MACPLAB DS    &FD1                                             GP03144\n.X1LBL   ANOP  ,\n&MACPLAB SETC  ''\n.XNM     AIF   ('&LBL' EQ '').XNOP\n&NM      DS    &FD1                                             GP03144\n&LBL     SETC  ''            LOCAL LABEL EXPANDED\n.XNOP    AIF   (T'&OP2 EQ 'O' AND T'&OP3 EQ 'O'                        *\n               AND T'&OP4 EQ 'O').MEXIT\n         MNOTE 4,'&MNONM POSITIONAL PARAMETERS IGNORED'\n&MACPERR SETB  1             RETURN ERROR                       GP00196\n.MEXIT   MEXIT ,\n.*\n.*  TEST FOR CORRECT MODE OPERAND\n.*\n.NOTLBL  AIF   ('&MODE' EQ '' OR &MOD0 OR &MOD1 OR &MOD3 OR &MODQ      *\n               OR &MODR OR &MODV).MODG                          GP03144\n         MNOTE 8,'&MNONM INVALID MODE=&MODE '\n&MACPERR SETB  1             RETURN ERROR                       GP00196\n.*\n.*  CHECK LOCAL VS. GLOBAL LABEL, EXPAND GLOBAL AND RELOAD\n.*\n.MODG    AIF   ('&MACPLAB' EQ '' OR '&LBL' EQ '').N2LBL\n&MACPLAB DS    0H\n         AGO   .PROPLBL      PROPAGATE LOCAL LABEL\n.N2LBL   AIF   ('&MACPLAB' NE '').NOLAB\n.PROPLBL ANOP  ,\n&MACPLAB SETC  '&LBL'        NO GLOBAL LABEL - USE LOCAL\n&LBL     SETC  ''\n.*\n.*  TEST FOR CORRECT NUMBER OF PARAMETERS, AND SUBSTITUTE &NULL\n.*\n.NOLAB   AIF   (NOT &MOD0).NOTNONE   OPCODE ONLY ?              GP03144\n&FD1     SETC  '&OP1'                                           GP03144\n         AIF   ('&FD1' EQ '').DONONE                            GP03144\n         AIF   ('&FD1'(1,1) NE '\"').DONONE                      GP03144\n&FD1     SETC  '&FD1'(2,K'&FD1-2)                               GP03144\n.DONONE  ANOP  ,                                                GP03144\n&MACPLAB &OP   &FD1                                             GP03144\n         AIF   (T'&OP2 EQ 'O' AND T'&OP3 EQ 'O'                        *\n               AND T'&OP4 EQ 'O').GO                            GP03144\n         MNOTE 4,'&MNONM POSITIONAL PARAMETERS IGNORED'         GP03144\n&MACPERR SETB  1             RETURN ERROR                       GP03144\n         AGO   .GO                                              GP03144\n.NOTNONE ANOP  ,\n&FD1     SETC  '&OP1'\n&FD2     SETC  '&OP2'\n&FD3     SETC  '&OP3'\n&FD4     SETC  '&OP4'                                           GP00196\n         AIF   (T'&OP1 NE 'O').HAVE1\n&MACPNUL SETB  1             RETURN NULL FLAG                   GP00196\n         AIF   (NOT &MOD1).NOTONE\n         AIF   ('&NULL' EQ '').NOTONE\n         AIF   ('&NULL' EQ 'YES').HAVE1  NOTHING ELSE TO DO     GP01009\n         AIF   ('&NULL' EQ 'SKIP').MEXIT  SKIP OUT WITHOUT      GP01009\n&FD1     SETC  '&NULL'\n         AGO   .HAVE1\n.NOTONE  MNOTE 8,'&MNONM FIRST POSITIONAL OPERAND REQUIRED'\n&MACPERR SETB  1             RETURN ERROR                       GP00196\n         AGO   .MEXIT\n.HAVE1   AIF   (&MOD1).HAVEALL\n         AIF   (T'&OP2 NE 'O').HAVE2\n&MACPNUL SETB  1             RETURN NULL FLAG                   GP00196\n         AIF   (&MOD3).NOTTWO\n         AIF   ('&NULL' EQ '').NOTTWO\n         AIF   ('&NULL' EQ 'YES').HAVE2  NOTHING ELSE TO DO     GP01009\n         AIF   ('&NULL' EQ 'SKIP').MEXIT  SKIP OUT WITHOUT      GP01009\n&FD2     SETC  '&NULL'\n         AGO   .HAVE2\n.NOTTWO  MNOTE 8,'&MNONM SECOND POSITIONAL OPERAND REQUIRED'\n&MACPERR SETB  1             RETURN ERROR                       GP00196\n         AGO   .MEXIT\n.HAVE2   AIF   (NOT &MOD3).HAVE3                                GP00196\n         AIF   (T'&OP3 NE 'O').HAVE3                            GP00196\n&MACPNUL SETB  1             RETURN NULL FLAG                   GP00196\n         AIF   ('&NULL' EQ '').NOTHREE\n         AIF   ('&NULL' EQ 'YES').HAVEALL  NOTHING ELSE TO DO   GP01009\n         AIF   ('&NULL' EQ 'SKIP').MEXIT  SKIP OUT WITHOUT      GP01009\n&FD3     SETC  '&NULL'\n         AGO   .HAVEALL\n.NOTHREE MNOTE 8,'&MNONM THIRD POSITIONAL OPERAND REQUIRED'\n&MACPERR SETB  1             RETURN ERROR                       GP00196\n         AGO   .MEXIT\n.HAVE3   AIF   (NOT &MOD4).HAVEALL                              GP00196\n         AIF   (T'&OP4 NE 'O').HAVEALL                          GP00196\n&MACPNUL SETB  1             RETURN NULL FLAG                   GP00196\n         AIF   ('&NULL' EQ '').NOFOUR                           GP00196\n         AIF   ('&NULL' EQ 'YES').HAVEALL  NOTHING ELSE TO DO   GP01009\n         AIF   ('&NULL' EQ 'SKIP').MEXIT  SKIP OUT WITHOUT      GP01009\n&FD4     SETC  '&NULL'                                          GP00196\n         AGO   .HAVEALL                                         GP00196\n.NOFOUR  MNOTE 8,'&MNONM FOURTH POSITIONAL OPERAND REQUIRED'    GP03207\n&MACPERR SETB  1             RETURN ERROR                       GP00196\n         AGO   .MEXIT                                           GP00196\n.*\n.*  CHANGE OP1 AND OP2 (UNLESS MOD1 OR MOD3) TO PREFERRED FORM\n.*    IF MODE 3, GO TO EXPAND IT\n.*\n.HAVEALL AIF   (&MOD3).DO3   SIMPLE EXPANSION OF THREE OPERANDS\n         AIF   (&MOD4).DO4   SIMPLE EXPANSION OF FOUR OPERANDS  GP00196\n         AIF   (NOT &MOD1).CLNOP1\n&K       SETA  K'&FD1\n         AIF   (&K LT 2 OR '&FD1'(1,1) NE '-').CLNOP1\n&MINUS   SETB  1\n&FD1     SETC  '&FD1'(2,&K-1)\n&K       SETA  K'&FD1\n.CLNOP1  ANOP  ,\n         AIF   (&K LT 3).NORG1\n         AIF   ('&FD1'(1,1) NE '(' OR '&FD1'(&K,1) NE ')').NORG1\n         AIF   ('&FD1'(2,1) EQ '(').NOSY1        ((EXPRESSION)) ?\n&FGR1    SETB  1             FLAG OP1 AS REGISTER EXPRESSION\n&FD1     SETC  '&FD1'(2,&K-2)\n&K       SETA  K'&FD1\n.*  LOOK FOR SINGLE OR DOUBLE DIGIT - PREFIX BY R\n.NORG1   AIF   (&K LT 1 OR &K GT 2).NOSY1\n         AIF   ('&FD1'(1,1) LT '0').NOSY1  LEAVE IF NOT NUMERIC\n&FD1     SETC  'R'.'&FD1'    MAKE SYMBOLIC REGISTER\n.*\n.*  HAVE OP1 CLEANED FROM (N) TO RN; GO TO EXPAND MODE 1\n.*    ELSE TEST AND CLEAN OPERAND 2\n.*\n.NOSY1   AIF   (&MOD1).DO1\n&K       SETA  K'&FD2\n&OPRR    SETC  '&OPR'\n         AIF   (&K LT 2 OR '&FD2'(1,1) NE '-').NONEG2\n&MINUS   SETB  1\n&FD2     SETC  '&FD2'(2,&K-1)\n&K       SETA  K'&FD2\n&OPRR    SETC  '&OPMR'\n.NONEG2  AIF   (&K LT 3).NORG2\n         AIF   ('&FD2'(1,1) NE '''' OR T'&QUOTE EQ 'O').NOQUO2  GP08090\n         AIF   ('&FD2'(&K,1) NE '''').NOQUO2                    GP08090\n         MACQOLIT &FD2,LEN=&QUOTE(2)                            GP08090\n         AIF   (&MACPERR OR &MACPNUL).NOQUO2                    GP08090\n&FD2     SETC  '&MACQSTR'                                       GP08090\n&MACPSIZ SETC  '&MACPLEN'    RETURN LENGTH                      GP08090\n         AIF   ('&QUOTE(1)' EQ '').LOPP                         GP08090\n&OPLA    SETC  '&QUOTE(1)'                                      GP08090\n         AGO   .LOPP                                            GP08090\n.NOQUO2  AIF   ('&FD2'(1,1) NE '(' OR '&FD2'(&K,1) NE ')').NORG2\n         AIF   ('&FD2'(2,1) EQ '(').NORG2        ((EXPRESSION)) ?\n&FD2     SETC  '&FD2'(2,&K-2)\n&K       SETA  K'&FD2\n&FGR2    SETB  1             FLAG OP1 AS REGISTER EXPRESSION\n         AIF   ('&FD2'(1,1) LT '0').NOSY2  LEAVE IF NOT NUMERIC\n         AIF   (&K LT 1 OR &K GT 2).NOSY2\n&FD2     SETC  'R'.'&FD2'    MAKE SYMBOLIC REGISTER\n.*\n.*  REG: CHECK FOR NEG PREFIX, MODE=EQU, ELSE IF OP1=OP2, NO EXPANSION\n.*\n.NOSY2   AIF   ('&FD2' NE '&FD1' OR &MINUS OR &MODV).LR         GP01028\n         AIF   (NOT &MODQ).NO\n.LR      AIF   (NOT &MODR).NOREV\n&MACPLAB &OPRR &FD2,&FD1\n         AGO   .GO\n.*\n.*  REG: NORMAL FORM, (EXPANDS MINUS, ALSO - OPR OR OPMR IN OPRR)\n.*\n.NOREV   ANOP  ,\n&MACPLAB &OPRR &FD1,&FD2\n         AGO   .GO\n.*\n.*  NOT REG: CHECK FOR LA AND SPECIAL CASES\n.*\n.NORG2   ANOP  ,                                                GP08090\n&MACPSIZ SETC  '&L'.'&FD2'   RETURN LENGTH FOR USUAL CASE       GP08090\n         AIF   ('&OPLA' EQ 'LA' AND '&FD2' EQ '0').SR\n         AIF   ('&OPM' NE '' AND &MINUS).OPM\n.*\n.*  LA OP1,/OP2   GENERATES L OP1,=A(OP2)\n.*\n         AIF   ('&OPLA' NE 'LA' OR '&FD2'(1,1) NE '/').LOP\n&FD2     SETC  '&FD2'(2,K'&FD2-1)\n&MACPLAB L     &FD1,=A(&FD2)\n         AGO   .LOPCO\n.*\n.*  LA OP1,*OP2   GENERATES L OP1,OP2\n.*\n.LOP     AIF   ('&OPLA' NE 'LA' OR '&FD2'(1,1) NE '*').LOPP\n         AIF   (K'&FD2 EQ 1).LOPP\n&FD2     SETC  '&FD2'(2,K'&FD2-1)\n&MACPLAB L     &FD1,&FD2\n         AGO   .LOPCO\n.LOPP    ANOP  ,\n&MACPLAB &OPLA &FD1,&FD2\n.LOPCO   AIF   (NOT &MINUS).GO\n         &OPMR &FD1,&FD1\n         AGO   .GO\n.*\n.*  USER SPECIFIED OPM AND -OP2\n.*\n.OPM     ANOP  ,\n&MACPLAB &OPM  &FD1,&FD2\n         AGO   .GO\n.*\n.*  SINGLE OPERAND INSTRUCTION - EXPAND, CHECK FOR -OP1\n.*\n.DO1     AIF   (&FGR1).DO1REG\n         AIF   ('&OPM' NE '' AND &MINUS).DO1NEG\n&MACPLAB &OP   &FD1\n         AIF   (NOT &MINUS).GO\n         &OPMR &FD1\n         AGO   .GO\n.DO1NEG  ANOP  ,\n&MACPLAB &OPM  &FD1\n         AGO   .GO\n.DO1REG  AIF   (&MINUS).DO1MIN\n&MACPLAB &OPR  &FD1\n         AGO   .GO\n.DO1MIN  ANOP  ,\n&MACPLAB &OPMR &FD1\n         AGO   .GO\n.*\n.*  EXPAND THREE OPERAND INSTRUCTIONS - NO SPECIAL CHECKING\n.*\n.DO3     ANOP  ,\n&MACPLAB &OPLA &FD1,&FD2,&FD3\n         AGO   .GO\n.*                                                              GP00196\n.*  EXPAND FOUR OPERAND INSTRUCTIONS - NO SPECIAL CHECKING      GP00196\n.*                                                              GP00196\n.DO4     ANOP  ,                                                GP00196\n&MACPLAB &OPLA &FD1,&FD2,&FD3,&FD4                              GP00196\n         AGO   .GO                                              GP00196\n.*\n.*  ON SOME OLD MACHINES LA,0 WAS SLOWER AND LONGER. RETAIN SR ?\n.*\n.SR      ANOP\n&MACPLAB SR    &FD1,&FD1\n.*\n.*  INSTRUCTION(S) EXPANDED; CLEAR LABEL\n.*\n.GO      ANOP  ,\n&MACPLAB SETC  ''\n.*\n.*  NOTHING EXPANDED - MAINTAIN LABELS\n.*\n.NO      MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MACPLOP": {"ttr": 7175, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x05\\x01/\\x01\\x06#\\x0f\\x02\\x00\\x00(\\x00%\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2005-01-12T00:00:00", "modifydate": "2006-08-18T02:00:00", "lines": 40, "newlines": 37, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MACPLOP &FROM,&TO,&NULL=,&OP=ST\n.**********************************************************************\n.*                                                                    *\n.*  MACPLOP IS AN INNER MACRO (PART OF THE MACPARM GROUP) FOR         *\n.*  PROCESSING USER SUPPLIED VALUES FOR AN MF=E/S PARAMETER LIST.     *\n.*                                                                    *\n.*  1) &FROM IS (R) - GENERATE SIMPLE STORE                           *\n.*  2) &FROM IS QUOTED STRING - GENERATE LA/ST                        *\n.*  3) OTHER - LA/ST                                                  *\n.*                                                                    *\n.**********************************************************************\n         LCLC  &V\n         LCLA  &K\n&V       SETC  '&FROM'\n         AIF   ('&V' NE '').TEST\n&V       SETC  '&NULL'\n         AIF   ('&V' NE 'YES').FSKIP\n&V       SETC  '0'\n.FSKIP   AIF   ('&V' EQ 'SKIP').MEND   SKIP IF OMITTED OK\n         AIF   ('&V' NE '').TEST\n MNOTE 8,'MACPLOP: SOURCE ADDRESS REQUIRED'\n         MEXIT ,\n.TEST    AIF   ('&TO' NE '').BOTH\n MNOTE 8,'MACPLOP: DESTINATION ADDRESS REQUIRED'\n         MEXIT ,\n.BOTH    AIF   ('&V'(1,1) EQ '''').QUOTE\n&K       SETA  K'&V\n         AIF   (&K LT 3).NORMAL\n         AIF   ('&V'(1,1) NE '(' OR '&V'(2,1) EQ '(').NORMAL\n         AIF   ('&V'(&K,1) NE ')' OR '&V'(&K-1,1) EQ ')').NORMAL\n&NM      MACPARM &V,&TO,OP=ST,OPR=ST,MODE=EVEN\n         MEXIT ,\n.NORMAL  ANOP  ,\n&NM      MACPARM R0,&V,OP=LA\n         AGO   .ST\n.QUOTE   ANOP  ,\n&NM      MACPARM R0,=C&V\n.ST      MACPARM R0,&TO,OP=&OP\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACQOLIT": {"ttr": 7177, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x065\\x7f\\x01\\x08\\t\\x0f\\x16R\\x00\\\\\\x00\\xb4\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2006-12-23T00:00:00", "modifydate": "2008-03-30T16:52:00", "lines": 92, "newlines": 180, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n       MACQOLIT &STR,&LEN=   DETERMINE LENGTH OF STRING; MAKE QUOTED\n.*\n.*   INNER MACRO FOR MACRO PROCESSING\n.*       MACQOLIT &STR  WHERE &STR IS UNQUOTED, QUOTED, OR CONSTANT\n.*                 FORMAT (E.G.,  XYZ, 'text', X'12AB', CL8'HI', =C'A')\n.*   RETURNS:\n.*       MACPNUL   FOR OMITTED PARAMETER OR EMPTY STRING ('')\n.*       MACQUOT=0  IF UNQUOTED; &STR IN MACQSTR, K'&STR IN MACPLEN\n.*       MACQUOT=1  =CLnn'text' OR =X'hex' - LITERAL FORMAT\n.*\n         GBLA  &MACPLEN      RETURN SIGNIFICANT LENGTH OF STRING\n         GBLB  &MACPNUL      TRUE IF NULL STRING\n         GBLB  &MACQUOT      TRUE IF ORIGINAL WAS QUOTED\n         GBLB  &MACPERR      TRUE IF ERROR\n         GBLC  &MACQSTR      RETURN QUOTED STRING\n         LCLA  &I,&J,&K,&L\n         LCLC  &C,&D,&TYPE\n.*\n&MACQUOT SETB  0             SET UNQUOTED\n&MACPERR SETB  0             SET NOT IN ERROR\n&MACPLEN SETA  K'&STR        SET PROVISIONAL LENGTH\n&MACQSTR SETC  '&STR'        DEFAULT - RETURN AS IS\n&TYPE    SETC  'C'           SET STRING TYPE (C OR X) DEFAULT\n.*  RETURN IF STRING IS NULL\n&MACPNUL SETB  (T'&STR EQ 'O')\n&MACPNUL SETB  (&MACPNUL OR ('&STR' EQ ''''''))\n         AIF   (&MACPNUL).MEND   DONE IF NULL STRING\n.*  RETURN IF STRING IS UNQUOTED\n         AIF   (&MACPLEN LT 2).SHORT\n&MACQUOT SETB  ('&STR'(1,1) EQ '''' OR '&STR'(&MACPLEN,1) EQ '''')\n.SHORT   AIF   (NOT &MACQUOT).MEND\n.*  DELETE LITERAL'S EQUAL SIGN IF PRESENT\n         AIF   ('&STR'(1,1) NE '=').NOTEQU\n&MACQSTR SETC  '&MACQSTR'(2,&MACPLEN)  STRIP EQUAL\n&MACPLEN SETA  K'&MACQSTR              UPDATE LENGTH\n.*  LOOK FOR LEADING QUOTE, C OR X - FAIL REST\n.NOTEQU  ANOP  ,\n&C       SETC  '&MACQSTR'(1,1)         ISOLATE FIRST BYTE\n&MACPERR SETB  ('&C' NE '''' AND '&C' NE 'C' AND '&C' NE 'X')\n         AIF   (&MACPERR).ERROR\n.*  LOOK FOR LEADING QUOTE, C OR X - FAIL REST\n.STRING  AIF   ('&C' EQ '''').COUNT\n&TYPE    SETC  '&C'                    REMEMBER THE TYPE\n&MACQSTR SETC  '&MACQSTR'(2,K'&MACQSTR)  STRIP TYPE\n&MACPLEN SETA  K'&MACQSTR              UPDATE LENGTH\n&C       SETC  '&MACQSTR'(1,1)         ISOLATE FIRST BYTE\n&MACPERR SETB  ('&C' NE '''' AND '&C' NE 'L')\n         AIF   (&MACPERR).ERROR\n.*  LOOK FOR LEADING QUOTE OR L  (I.E., WE WANT 'text' OR CLn'text')\n         AIF   ('&C' EQ '''').COUNT    COUNT LENGTH\n&L       SETA  0                       NO LENGTH YET\n.EXPLOOP ANOP  ,\n&MACQSTR SETC  '&MACQSTR'(2,K'&MACQSTR)  STRIP TYPE\n&MACPLEN SETA  K'&MACQSTR              UPDATE LENGTH\n&C       SETC  '&MACQSTR'(1,1)         ISOLATE FIRST BYTE\n         AIF   ('&C' EQ '''').HAVEXPL  DONE WITH EXPLICIT LENGTH\n         AIF   ('&C' LT '0' OR '&C' GT '9').ERROR\n&L       SETA  &L*10+&C                UPDATE LENGTH\n         AGO   .EXPLOOP                TRY ONE MORE\n.*   MACQSTR NOW HAS QUOTED STRING, AND L HAS THE LENGTH\n.HAVEXPL ANOP  ,\n&MACPLEN SETA  &L                      RETURN THE LENGTH\n&MACQSTR SETC  '='.'&TYPE'.'L'.'&L'.'&MACQSTR'\n         MEXIT ,\n.ERROR   ANOP  ,\n&MACPERR SETB  1                       RETURN AN ERROR\n         MEXIT ,\n.*   MACQSTR IS A QUOTED STRING WHOSE LENGTH WE NEED\n.*     NOTE THAT APOSTROPHES AND AMPERSANDS ARE DOUBLED (ELSE ERROR)\n.COUNT   ANOP  ,\n&MACPLEN SETA  K'&MACQSTR              UPDATE LENGTH\n&I       SETA  1                       LOOP INDEX (2 TO K'-2)\n&L       SETA  0                       SIGNIFICANT LENGTH\n.CNTLOOP  ANOP ,\n&I       SETA  &I+1\n&C       SETC  '&MACQSTR'(&I,1)\n         AIF   ('&C' NE '''' AND '&C' NE '&&').CNTONE\n         AIF   (&I GE &MACPLEN-1).ERROR\n         AIF   ('&MACQSTR'(&I+1,1) NE '&C').ERROR    ERROR?\n&I       SETA  &I+1          SKIP DOUBLED CARACTER\n.CNTONE  ANOP  ,\n&L       SETA  &L+1\n         AIF   (&I LE &MACPLEN-2).CNTLOOP\n&MACPLEN SETA  &L            SET STRIPPED LENGTH\n         AIF   ('&LEN' EQ '').DEFLN                             GP08090\n&MACQSTR SETC  '='.'&TYPE'.'L('.'&LEN'.')'.'&MACQSTR'           GP08090\n&MACPLEN SETA  &LEN                                             GP08090\n         AGO   .MEND                                            GP08090\n.DEFLN   ANOP  ,                                                GP08090\n&MACQSTR SETC  '='.'&TYPE'.'&MACQSTR'\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACQOTER": {"ttr": 7180, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x06\\x9f\\x01\\x065\\x7f\\x13\\x11\\x00\\xf3\\x00\\x82\\x00:\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-03-10T00:00:00", "modifydate": "2006-12-23T13:11:00", "lines": 243, "newlines": 130, "modlines": 58, "user": "GERHARD"}, "text": "         MACRO ,\n        MACQOTER  &STR,&OPT=,&USE=,&FILL=,&NULL=,&NAME=,&TYPE=C\n.*-------------------------------------------------------------------*.\n.*  NAME:                M A C Q O T E R                             *.\n.* PURPOSE:                                                          *.\n.*                                                                   *.\n.*  INTERNAL MACRO TO DETERMINE IF A PARAMETER IS A QUOTED STRING    *.\n.*    AND OPTIONALLY QUOTE IT OR STRIP QUOTES.                       *.\n.*                                                                   *.\n.*  INPUT :                                                          *.\n.*    THE STRING PARAMETER                                           *.\n.*                                                                   *.\n.*  OUTPUT:                                                          *.\n.*   MACPERR  GLOBAL FLAG TO INDICATE AN ERROR OCCURRED              *.\n.*   MACQUOT  GLOBAL FLAG TO INDICATE THAT INPUT WAS A QUOTED STRING *.\n.*   MACPNUL  GLOBAL FLAG TO INDICATE THAT INPUT WAS NULL            *.\n.*   MACQSTR  ORIGINAL OR MODIFIED STRING                            *.\n.*-------------------------------------------------------------------*.\n.* KEYWORD PARAMETERS:                                               *.\n.*    OPT=   USE=   FILL=   NULL=   NAME=                            *.\n.*  RESERVED FOR LATER:  USE=LITERAL (CREATE =C'PARM')               *.\n.*  RESERVED FOR LATER:  TYPE=G  (SPECIAL CHARACTER SET SUPPORT)     *.\n.*********************************************************************.\n.* POSITIONAL PARAMETERS:                                            *.\n.*    THE STRING TO BE TESTED / CHANGED                              *.\n.*********************************************************************.\n.* EXAMPLES:                                                         *.\n.*    MACQOTER HAM&EGGS,USE=HEX,OPT=QUOTE,NULL=YES,NAME=OUTER        *.\n.*                                                                   *.\n.* &MACQSTR  SET TO  'HAM&&EGGS'                                     *.\n.* &MACQUOT  SET TO  1                                               *.\n.* &MACPERR  SET TO  0                                               *.\n.* &MACPNUL  SET TO  0                                               *.\n.*                                                                   *.\n.*********************************************************************.\n.* CHANGE LOG:                                                       *.\n.*                                                                   *.\n.* YYYY-MM-DD INT COMMENTS                                           *.\n.* ---------- --- --------                                           *.\n.* 1999-03-12 GYP CREATED                                            *.\n.* 2003-05-24 GYP CHANGED MACERR TO MACPERR TO MATCH MACPARM         *.\n.*                                                                   *.\n.*********************************************************************.\n.* THIS INNER MACRO CONVERTS AN ARGUMENT STRING INTO ANOTHER ONE.    *.\n.* WHEN NO CONVERT OPTIONS ARE USED, ONLY GLOBAL SETB VALUES ARE SET.*.\n.*                                                                   *.\n.*  OPT=QUOTE    SPECIFIES THAT A QUOTED STRING IS NEEDED            *.\n.*                 WITH USE=/USE=QUOTE WILL NOT CHANGE QUOTED STRING *.\n.*  USE= OR USE=QUOTE    ADD QUOTES TO STRING                        *.\n.*  USE=PROC     SPECIFIES THAT QUOTES ARE DOUBLED AGAIN             *.\n.*  USE=HEX      ALLOWS X'NNN', B'010101', AND SIMILAR EXPRESSIONS   *.\n.*                 WITHOUT ALTERATION (OTHERS AS USE=QUOTE)          *.\n.*  OPT=STRIP    HALVES THE QUOTES IN A QUOTED STRING AND UNQUOTES   *.\n.*  FILL='X' OR FILL=X    REPLACES BLANKS BY THE SPECIFIED CHARACTER *.\n.*                 DOES NOT SUPPORT AMPERSAND OR APOSTROPHE.         *.\n.*  NULL=YES     SPECIFIES THAT AN EMPTY STRING DOES NOT SET AN      *.\n.*                 ERROR; THE MACPNUL FLAG IS SET, MACPERR IS NOT.   *.\n.*                 RETURNS EMPTY STRING UNLESS QUOTING, THEN ''      *.\n.*                 IGNORED IF STRING IS NOT NULL. OPT=STRIP FOR ''   *.\n.*                 GENERATES A NULL STRING AND SETS THE FLAGS.       *.\n.*                                                                   *.\n.*  TYPE=C (DEFAULT) OR TYPE=G - NOT SUPPORTED YET                   *.\n.*                                                                   *.\n.* REQUEST:    OPT=  OPT=QUOTE  USE=HEX  USE=PROC  OPT=STRIP RESULT  *.\n.*  STRING        Y                Y                      STRING     *.\n.*  'STRING'      Y                Y                      'STRING'   *.\n.*  X'123'        Y                Y                      X'123'     *.\n.*  STRING              Y          Y                      'STRING'   *.\n.*  'STRING'            Y          Y                      'STRING'   *.\n.*  X'123'              Y          Y                      X'123'     *.\n.*  X'123'              Y                                 'X''123''' *.\n.*  STRING              Y                   Y             ''STRING'' *.\n.*  'STRING'            Y                   Y             ''STRING'' *.\n.*  X'123'              Y                   Y       ''X''''123'''''' *.\n.*  X'123'              Y          Y        Y             X'123'     *.\n.*  'IT''S &&'                                        Y   IT'S &     *.\n.*  ..ANY..    NO FLAGS ON (OTHER THAN NULL AND FILL)  SETB ONLY     *.\n.*                                                                   *.\n.*  (STRIP AND QUOTE CANCEL; STRIP AND PROC ACTS AS QUOTE)           *.\n.*                                                                   *.\n.* N.B.: STRIPPING AND DOUBLING APPLIES TO APOSTROPHES AND AMPERSANDS*.\n.*********************************************************************.\n.*  LIMITATIONS:  MAXIMUM INPUT LENGTH: 255 (ARBITRARY, <256)        *.\n.* >>>>> DOES NOT CHECK FOR STRING LENGTH EXCESSION (>255) <<<<<     *.\n.*********************************************************************.\n         GBLB  &MACPNUL,&MACPERR,&MACQUOT\n         GBLC  &MACQSTR\n         LCLB  &DEL,&DOUB,&FOUR\n         LCLC  &PAD,&MYSTR,&CH\n         LCLA  &I,&J,&K,&L,&M,&N\n&MACPERR SETB  0\n&MACPNUL SETB  0\n&MACQUOT SETB  0\n&MYSTR   SETC  '&STR'\n&MACQSTR SETC  '&STR'        PRESET AS NULL IF EMPTY\n&K       SETA  K'&STR\n&DEL     SETB  ('&OPT' EQ 'STRIP')\n&DOUB    SETB  ('&OPT' EQ 'QUOTE')\n&FOUR    SETB  ('&USE' EQ 'PROC')\n         AIF   (&K LT 2).NOQUOCH\n&MACQUOT SETB  ('&STR'(1,1) EQ '''' AND '&STR'(&K,1) EQ '''')\n.NOQUOCH AIF   (NOT &MACQUOT).UNQUO\n.*  ALREADY QUOTED STRING CANCELS ONE LEVEL OF QUOTING\n&DOUB    SETB  (&FOUR)\n&FOUR    SETB  0\n.UNQUO   AIF   (NOT &DEL OR (NOT &DOUB AND NOT &FOUR)).NODEL\n.*  STRIP CANCELS ONE LEVEL OF QUOTING\n&DOUB    SETB  (&FOUR)\n&FOUR    SETB  0\n&DEL     SETB  0             CANCEL STRIP REQUEST\n.NODEL   AIF   ('&NULL' EQ '' OR '&NULL' EQ 'Y' OR '&NULL' EQ 'YES').NU\n         AIF   ('&NULL' EQ 'N' OR '&NULL' EQ 'NO').NU\n        MNOTE  4,'&NAME/MACQOTER *****  INVALID NULL OPTION ''&NULL'''\n        MNOTE  4,'  USE NULL= (DEFAULT), OR NULL=YES'\n&MACPERR SETB  1\n.NU      AIF   (&K GT 0 AND &K LE 255).OKLEN\n         AIF   (&K NE 0).TOOLONG\n&MACPNUL SETB  1\n         AIF   (&FOUR).DO4NU\n         AIF   (NOT &DOUB).NO2NU\n&MACQSTR SETC  ''''''        MAKE NULL STRING\n         AGO   .NO2NU\n.DO4NU   ANOP  ,\n&MACQSTR SETC  ''''''''''    MAKE NULL STRING\n.NO2NU   AIF   ('&NULL' EQ 'YES').TEST\n&MACPERR SETB  1\n         AGO   .TEST\n.TOOLONG MNOTE 8,'&NAME/MACQOTER INPUT EXCEEDS DESIGN LENGTH OF 255'\n&MACPERR SETB  1\n         MEXIT ,\n.OKLEN   AIF   ('&OPT' EQ '' OR '&OPT' EQ 'QUOTE' OR                   *\n               '&OPT' EQ 'STRIP').OKOPT\n        MNOTE 4,'&NAME/MACQOTER  *****  INVALID STRING OPTION ''&OPT'''\n        MNOTE 4,'  SUPPORTED OPTIONS ARE OPT=QUOTE AND OPT=STRIP'\n&MACPERR SETB  1\n         MEXIT ,\n.OKOPT   AIF   ('&USE'  EQ ''  OR  '&USE'  EQ  'PROC'                  *\n                 OR  '&USE'  EQ  'HEX'  OR '&USE' EQ 'QUOTE').OKUSE\n        MNOTE 4,'&NAME/MACQOTER  *****  INCORRECT USE OPTION ''&USE'''\n        MNOTE 4,'  SUPPORTED OPTIONS ARE USE=HEX AND USE=PROC'\n&MACPERR SETB  1\n         MEXIT ,\n.OKUSE   AIF   ('&FILL' EQ '').NOPAD\n&J       SETA  2\n         AIF   (K'&FILL EQ 3 AND '&FILL'(1,1) EQ '''').PADQ\n&J       SETA  1\n         AIF   (K'&FILL EQ 1).PADQ\n.BADFILL MNOTE 4,'&NAME/MACQOTER  *****  INVALID FILL OPTION ''&FILL'''\n         MNOTE 4,'  SPECIFY SINGLE CHARACTER WITH FILL=X OR FILL=''X'''\n&MACPERR SETB  1\n         MEXIT ,\n.PADQ    ANOP\n&PAD     SETC  '&FILL'(&J,1)\n.*\n.*  DO CURSORY CHECK FOR X'NNN' AND B'0101', ETC. (ONLY APOSTROPHES)\n.*\n.NOPAD   AIF   (&MACQUOT).NOTHEX\n         AIF   (&K LT 4).NOHEX\n         AIF   ('&STR'(2,1) NE '''' OR '&STR'(&K,1) NE '''').NOHEX\n         AIF   ('&USE' EQ 'HEX').MEND   BYPASS .TEST CHECKS (FAIL)\n.*  FOR UNQUOTED STRING AND STRIP OPTION, RETURN\n.NOHEX   AIF   (&DEL).TEST\n.NOTHEX  ANOP  ,\n&I       SETA  0\n.*\n.*  WHEN CALLER SPECIFIES FILL CHARACTER, REPLACE BLANKS\n.*\n&MYSTR   SETC  '&STR'        USE WORKING STRING\n&K       SETA  K'&MYSTR      JUST IN CASE\n         AIF   ('&PAD' EQ '').PADDED\n.SCANBLK AIF   (&I GE &K).PADDED\n&I       SETA  &I+1\n&CH      SETC  '&MYSTR'(&I,1)\n         AIF   ('&CH' NE ' ').SCANBLK\n         AIF   (&I EQ &K).PADRITE\n         AIF   (&I GT 1).PADMID\n&MYSTR   SETC  '&PAD'.'&MYSTR'(2,&K-1)\n         AGO   .SCANBLK\n.PADMID  ANOP  ,\n&MYSTR   SETC  '&MYSTR'(1,&I-1).'&PAD'.'&MYSTR'(&I+1,&K-&I)\n         AGO   .SCANBLK\n.PADRITE ANOP  ,\n&MYSTR   SETC  '&MYSTR'(1,&I-1).'&PAD'\n         AGO   .SCANBLK\n.*\n.*  NOW PROCESS THE STRING:\n.*\n.*  1) STRIP - FOR EACH DOUBLED AMPERSAND AND APOSTROPHE, COPY ONLY ONE\n.*     FOR QUOTED STRING, DOUB AND FOUR OFF - STRIP FRAMING QUOTES\n.*  2) DOUB/FOUR - FOR EACH, ADD TWO/FOUR AMPERSANDS OR APOSTROPHES\n.*\n.PADDED  ANOP  ,\n&MACQSTR SETC  '&MYSTR'      PROVISIONAL\n&K       SETA  K'&MYSTR      JUST IN CASE\n         AIF   (&DOUB OR &FOUR).PROCEED\n         AIF   (NOT &DEL).TEST\n         AIF   (NOT &MACQUOT OR &K LT 2).PROCEED\n&MYSTR   SETC  '&MYSTR'(2,&K-2)  ELIMINATE FRAME\n&K       SETA  K'&MYSTR      ADJUST\n&MACQSTR SETC  '&MYSTR'      RETURN\n         AIF   (&K EQ 0).NU  SET NULL FLAG IF DIMINISHED TOO MUCH\n.PROCEED ANOP  ,\n&I       SETA  1\n&MACQSTR SETC  ''\n.CHARLUP ANOP  ,\n&CH      SETC  '&MYSTR'(&I,1)\n         AIF   ('&CH' NE '''' AND '&CH' NE '&&').COPYONE\n         AIF   (&DEL).STRIPPR\n&CH      SETC  '&CH'.'&CH'\n         AIF   (NOT &FOUR).COPYONE\n&CH      SETC  '&CH'.'&CH'\n         AGO   .COPYONE\n.STRIPPR AIF   (&I GE &K).COPYONE\n         AIF   ('&MYSTR'(&I+1,1) NE '&CH').COPYONE  ERROR?\n&I       SETA  &I+1          SKIP DOUBLED CHARACTER\n.COPYONE ANOP  ,\n&MACQSTR SETC  '&MACQSTR'.'&CH'\n&I       SETA  &I+1\n         AIF   (&I LE &K).CHARLUP\n.*\n.*  NOW SEE WHETHER AND WHAT WE NEED TO DO TO THE STRING\n.*\n.*  1) UNQUOTED STRING, AND DOUB OR FOUR ON - FRAME IN QUOTES\n.*       FOR FOUR, MUST DO PRIOR TO DOUBLING\n.*  2) EXAMINE THE RESULT STRING - SET MACQUOT FLAG IF QUOTED,\n.*       OTHERWISE CHECK FOR ILLEGAL APOSTROPHES AND SET MACPERR\n.*\n         AIF   (NOT &DOUB AND NOT &FOUR AND &MACQUOT).TEST\n&MACQSTR SETC  ''''.'&MACQSTR'.''''\n         AIF   (NOT &FOUR).TEST\n&MACQSTR SETC  ''''.'&MACQSTR'.''''\n.TEST    ANOP  ,\n&K       SETA  K'&MACQSTR\n&MACQUOT SETB  0             RESET FOR SHORT OR NULL STRING\n         AIF   (&K LT 2).SKPQUOT\n&MACQUOT SETB  ('&MACQSTR'(1,1) EQ '''' AND '&MACQSTR'(&K,1) EQ '''')\n.SKPQUOT AIF   (&MACQUOT).MEND\n&I       SETA  0\n.UNBALUP AIF   (&I GE &K).MEND\n&I       SETA  &I+1\n         AIF   ('&MACQSTR'(&I,1) NE '''').UNBALUP\n&MACPERR SETB  1\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACSRVLD": {"ttr": 7428, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x12\\x15O\\x01\\x12\\x15O\\x15D\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2012-06-02T00:00:00", "modifydate": "2012-06-02T15:44:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MACSRVLD &NAME\n.*--------------------------------------------------------------------*\n.*  MACSRVLD IS AN INNER MACRO TO DETERMINE WHETHER A MODULE &NAME    *\n.*  HAS BEEN REQUESTED BY THE SERVLOAD MACRO/SERVICE.  IF IT HAS,     *\n.*  GLOBAL &MACPLOD IS SET TO THE NAME OF THE ADDRESS CONTAINING THE  *\n.*  LOADED ADDRESS (USUALLY THE MODULE NAME).                         *\n.*    OTHERWISE THE VALUE RETURNED IS =V(&NAME)                       *\n.*  2012-06-02  GYP  NEW; ADDED TO SUPPORT THE CPOOL MACRO            *\n.*--------------------------------------------------------------------*\n         GBLC  &MACPLOD\n         GBLC  &SRVLMOD(20),&SRVLDEL(20)\n         GBLB  &SRVBMOD(20),&BUGBEAR\n         GBLA  &SRVNMOD\n         LCLC  &CL,&CM\n         LCLA  &I,&J,&N\n&CL      SETC  '&NAME'\n&CM      SETC  '&NAME'\n         AIF   ('&NAME' NE '').MEMLOOP\n         MNOTE 8,'MACSRVLD: ROUTINE NAME OMITTED'\n         MEXIT ,\n.*\n.MEMLOOP AIF   (&I GE &SRVNMOD).OOPS\n&I       SETA  &I+1\n         AIF   ('&NAME' NE '&SRVLDEL(&I)').MEMLOOP\n&MACPLOD SETC  '&SRVLMOD(&I)'\n         MEXIT  ,\n.OOPS    ANOP  ,\n&MACPLOD SETC  '=V('.'&NAME'.')'\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPAUTO": {"ttr": 7430, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x11!\\x9f\\x01\\x11!\\x9f!9\\x00/\\x00/\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2011-08-07T00:00:00", "modifydate": "2011-08-07T21:39:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPAUTO &PFX=AUR,&SECT=D\n         LCLC  &P\n&P       SETC  '&PFX'\n         AIF   ('&SECT' EQ 'D').USED\n         AIF   ('&NM' NE '').USENM\nMAPAUTO  DS    0A\n         AGO   .COM\n.USENM   ANOP  ,\n&NM      DS    0A\n         AGO   .COM\n.USED    AIF   ('&NM' NE '').USECT\nMAPAUTO  DSECT ,\n         AGO   .COM\n.USECT   ANOP  ,\n&NM      DSECT ,\n.COM     ANOP  ,\n.*   THIS IS THE DEFINITION ENTRY FOR AUTOMATIC COMMANDS\n.*   AN UNSOLICITED ATTENTION OF AN UNALLOCATED UCB, PREVIOUSLY\n.*   DEFINED HERE, RESULTS IN ISSUING THE MATCHING COMMAND.\n.*     NORMALLY USED TO ISSUE A START COMMAND FOR THE DEVICE,\n.*   OR TO ISSUE A VARY COMMAND.\n.*     A SEMI-COLON MAY BE USED TO ISSUE MULTIPLE COMMANDS FROM\n.*   ONE LINE\n.*             FULL DETAILS IN THE AUTORDR MODULE\n.*\n&P.LINK  DC    A(0)          NEXT ENTRY IN CHAIN\n&P.UCB   DC    A(0)          UCB ADDRESS OF DEVICE\n&P.ID    DC    CL4' '        DEVICE NAME, LEFT JUSTIFIED\n.*\n.*    COMPLETE IQE\n&P.IQE   DC    A(0)   1/5    IQE LINK\n&P.IQPRM DC    A(0)   2/5    IQE PARM\n&P.IQIRB DC    A(0)   3/5    IQE'S IRB ADDRESS\n&P.IQTCB DC    A(0)   4/5    IQE'S TCB ADDRESS\n         DC    3A(0)  5/5      DCB, OUTLIM, ETC ?\n.*\n&P.ATI   DC    X'00'         UCB'S ORIGINAL ATTENTION INDEX\n.*\n&P.FLAGS DC    X'00'         FLAGS\n&P.PEND  EQU   X'80'           START PENDING\n&P.PIQE  EQU   X'40'           IQE ISSUED\n.*\n&P.CMDLN DC    X'00'         LENGTH OF COMMAND BUFFER\n&P.CMD   DC    CL64' '       COMMAND(S)\n&P.SIZE  EQU   *-&P.LINK\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPCMPR": {"ttr": 7432, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,                                        ADDED ON 91100\n&NM      MAPCMPR &PREFIX=OP,&DSECT=YES   COMP3270 CALLING PARM\n         LCLC  &DS,&P\n&P       SETC  '&PREFIX'\n&DS      SETC  '&P'.'TIONS'\n         AIF   ('&NM' EQ '').HAVEDS\n&DS      SETC  '&NM'\n.HAVEDS  AIF   ('&DSECT' NE 'YES').NODSECT\n&DS      DSECT ,             MAPPING OF COMP3270 EXPANSION\n         AGO   .COMDS\n.NODSECT ANOP  ,\n&DS      DS    0H            MAPPING OF COMP3270 EXPANSION\n.COMDS   ANOP  ,\n&P.FUN   DS    X             REQUESTED FUNCTIONS                 90140\n&P.FSF   EQU   X'80'           INSERT PROT. SF IF NO SF IN LINE 2\n&P.NCMP  EQU   X'40'           BYPASS BUFFER COMPRESSION, ETC.   90140\n&P.NCOL  EQU   X'20'           BYPASS COLOR SUBSTITUTION         90140\n&P.YESC  EQU   X'10'           BUFFER MAY CONTAIN ESCAPE (BTAM)  90140\n&P.YCCW  EQU   X'08'           BUFFER CONTAINS CCW               90140\n&P.YWCC  EQU   X'04'           BUFFER CONTAINS WCC/PCC           90140\n&P.YCCO  EQU   X'01'           O/P BUFFER-1 HAS CCW CODE         93331\n         SPACE 1                                                 90140\n&P.ADD   DS    X             ADDRESSING MODE                     90140\n&P.A16   EQU   X'02'           USE 16-BIT ADDRESSING ONLY        90140\n&P.A14   EQU   X'01'           14-BIT ADDRESSING SUPPORTED       90140\n         SPACE 1                                                 90140\n&P.COL   DS    X             COLOR MODE                          90140\n&P.SEVEN EQU   X'07'           7-COLOR MODE                      90140\n&P.BACK  EQU   X'70'           BACKGROUND COLOR AVAILABLE        90140\n         SPACE 1                                                 90140\n&P.HIGH  DS    X             EXTENDED HIGH-LIGHTING              90140\n*PSEVEN  EQU   X'07'           ALL EXTENDED HIGH-LIGHTING        90140\n         SPACE 1                                                 90140\n&P.MISC  DS    X             MISCELLANEOUS OPTIONS               90140\n         SPACE 1                                                 90140\n&P.FVAL  EQU   X'80'           FIELD VALIDATION SUPPORTED        90140\n&P.FOUT  EQU   X'40'           FIELD OUTLINING                   90140\n&P.FGE   EQU   X'08'           USE TEXT/APL GRAPHICS ESCAPE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPCMPRT": {"ttr": 7434, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x11?\\x01\\x06&?\\x00\"\\x00\\x12\\x00\\x11\\x00\\x06\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-04-23T00:00:00", "modifydate": "2006-09-20T00:22:00", "lines": 18, "newlines": 17, "modlines": 6, "user": "GERHARD"}, "text": "         MACRO ,\n&NM    MAPCMPRT &PFX=CPR,&DCB=0,&PRTMODE=0,&DEV=1\n.*  THIS MACRO MAPS THE COMMON PRINTER DEFINITION SHARED BY PGMTRACE,\n.*    DEBTRACE, EXORCIST, AND ?\n         LCLC  &P\n&P       SETC  '&PFX'\n&P.@UDCB DC    A(&DCB)       USER (OPEN) PRINT DCB\n&P.FGMOD DC    AL1(&PRTMODE)  USER OUTPUT DCB/PRT MODE\n&P.F@LCL EQU   0                 ADDR IS LOCAL DCB\n&P.F@WTO EQU   1                 ISSUE WTO (NARROW)\n&P.F@DCB EQU   2                 ADDR IS AN OPEN (PRINT) DCB\n&P.F@EXT EQU   3                 ADDR IS FOR USER EXIT\n&P.FXPRT EQU   4                 ADDR IS FOR XPRINT\n&P.F@PRT EQU   5                 ADDR IS FOR @PRINTER\n&P.FGOPT DC    AL1(0)        ..RESERVED..\n&P.FGSPR DC    AL1(0)        ..RESERVED..\n&P.F@DEV DC    AL1(&DEV)     @PRINTER DEVICE SELECTION BITS\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPDEFMT": {"ttr": 7436, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x05\\x00\\x00\\x01\\x05\\x06?\\x01\\x05\\x18\\x0f\\x10V\\x00<\\x02\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.05", "flags": 0, "createdate": "2005-03-04T00:00:00", "modifydate": "2005-06-29T10:56:00", "lines": 60, "newlines": 526, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPDEFMT &DSECT=YES,&PFX=PDD,&RETURN=,&VER=1           GP05180\n.*\n.*  MAPPING MACRO FOR SUBROUTINE SUBDEFMT (ADAPTED FROM @SERVICE PDSDE)\n.*   1) WHENEVER USER READS A DIRECTORY BLOCK, STORE ADDRESS (OF LENGTH\n.*      FIELD) IN pddNEXT, 2 (LENGTH OF LENGTH) IN pddINCR, AND\n.*      BYTE -1 (BLOCK-1+(length)) IN pddLAST\n.*   2) COPY THE RECFM TO pddRECFM (NEEDED FOR LKED/BINDER vs OTHER)\n.*   3) CALL SUBDEFMT, USE RESULTS, DO BXLE ON pddNEXT/pddINCR/pddLAST\n.*      READ NEXT BLOCK IF BXLE FALLS THROUGH\n.*\n.*   CHANGED FOR Y2K SUPPORT, ETC.                              GP98365\n.*\n         LCLC  &P\n&P       SETC  'PDD'\n         AIF   ('&PFX' EQ '').HAVEP\n&P       SETC  '&PFX'\n.HAVEP   ANOP  ,\n&NM      MACMAPHD MAP,PFX=&PFX,DSECT=&DSECT,DFLT=DEFMT          GP05180\n&P.NEXT  DC    A(0)          ADDRESS OF CURRENT MEMBER\n&P.INCR  DC    A(0)          BXLE INCREMENT FOR CURRENT MEMBER\n&P.LAST  DC    A(0)          LAST USED BYTE IN BLOCK\n&P.RECFM DC    AL1(0)        RECFM\n&P.TYPE  DC    X'00'         ENTRY TYPE\n&P.TLKED EQU   X'80'           LINKAGE EDITOR ENTRY\n&P.TSPF  EQU   X'40'           SPF ENTRY\n&P.TWYL  EQU   X'20'           WYLBUR ENTRY (LOCAL)\n&P.TDTX  EQU   X'10'           IEBUPDTX ENTRY\n&P.FLAGS DC    X'00'         ENTRY FLAGS (FIELDS PRESENT)\n&P.AOSLE EQU   X'80'           PRODUCED BY VS LINKAGE EDITOR\n&P.FREAL EQU   X'20'           MAIN MEMBER/EPA PRESENT\n&P.FSSI  EQU   X'10'           SSI FIELD PRESENT\n&P.FAPF  EQU   X'08'           APF FIELD PRESENT\n&P.FSCTR EQU   X'04'           SCATTER LOAD MODULE\n&P.FBIND EQU   X'01'           PRODUCED BY BINDER               GP05180\n&P.FLAG2 DC    X'00'         SECOND FLAG BYTE                   GP98365\n&P.FLAG3 DC    X'00'         THIRD FLAG BYTE                    GP98365\n&P.UDLEN DC    X'00'         NUMBER OF HALFWORDS OF USER DATA\n&P.OSSI  DC    H'0'          OFFSET TO SSI FROM NAME\n&P.OAPF  DC    H'0'          OFFSET TO APF FROM NAME\n         DC    4H'0'         EXTRA FOR EXPANSION                GP98365\n&P.CLRLN EQU   *-&P.TYPE       LENGTH TO CLEAR\n&P.RALIS DC    C' '          BLANK OR * FOR ALIAS OR \u00ac FOR SCLM GP98365\n&P.RNAME DC    CL8' '        EDITED MEMBER NAME                 GP98365\n&P.RTTR  DC    CL6' '        PRIMARY TTR                        GP05180\n&P.RSSI  DC    CL8' '        SSI OR BLANKS                      GP98365\n&P.RYMD  DC    CL10' '       CHANGE DATE YYYYMMDD               GP98365\n&P.RJDAY DC    CL3' '        CHANGE DATE JJJ (JULIAN FORM)      GP98365\n&P.RTIME DC    CL5' '        TIME MODIFED/ADDED   HH:MM         GP05180\n&P.VVMM  DC    0CL5' '       SPF VERSION/MODIFICATION           GP98365\n&P.RAPF  DC    CL4'AC=N',C' '  APF CODE > 0 OR BLANKS           GP98365\n&P.SIZE  DC    0CL8' '       LOAD MODULE SIZE                   GP05180\n&P.RLINE DC    CL8' '        CURRENT LINE COUNT                 GP05180\n&P.RMAIN DC    CL8' '        MAIN MEMBER OR SPF UID OR BLANKS   GP98365\n&P.REPAD DC    CL8' '        ENTRY POINT OFFSET OF MODULE       GP98365\n&P.RMODE DC    CL4' '        AaRa/A3R2/etc. MODE                GP98365\n&P.RATTR DC    6CL4' '       REFR/RENT/REUS/OVLY/NXEC/PAGE      GP98365\n&P.RATTN EQU   (*-&P.RATTR)/L'&P.RATTR  NUMBER OF ENTRIES       GP98365\n&P.RBLNK EQU   *-&P.RALIS      LENGTH TO BLANK                  GP98365\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MAPDSCHK": {"ttr": 7438, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x05\\x06?\\x01\\x05\\x06_\\x16\\x14\\x00\\x12\\x00\\r\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2005-03-04T00:00:00", "modifydate": "2005-03-06T16:14:00", "lines": 18, "newlines": 13, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPDSCHK &PFX=DSC,&DSECT=\n&NM      MACMAPHD MAP,PFX=&PFX,DSECT=&DSECT\n&PFX.DSN   DS  CL44          UNQUOTED, TRUE NAME\n&PFX.MEM   DS  CL8           MEMBER NAME\n&PFX.VOL   DS  XL12          1 VOL ENTRY FOR DS1; ALL VOLUMES FOR DSQ\n&PFX.SER   EQU &PFX.VOL+6,6,C'C'  FIRST VOLUME SERIAL\n&PFX.#TRKS DS  F             TRACKS IN DATA SET/PRIMARY SPACE REQUEST\n&PFX.#DES  DS  F             NUMBER/REQUESTED DIRECTORY BLOCKS\n&PFX.@UCB  DS  A             ADDRESS OF UCB OF FIRST VOLUME\n&PFX.#TPC  DS  H             TRACKS PER CYLINDER\n&PFX.DSCB1 DS  CL44          DS1DSNAM; TRUE NAME AFTER CATALOG LOCATE\n&PFX.FMTID DS  XL96          REST OF DSCB\n&PFX.DSCB3 DS  CL(44+96)     LAST DSCB3, IF ANY\n&PFX.DIRM  DS  XL74          DIRECTORY ENTRY FOR MEMBER\n         DS    CL32          WORK SPACE\n&PFX.LEN EQU   *-&PFX.DSN      LENGTH OF STORAGE REQUIRED\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPEXTNT": {"ttr": 7440, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      MAPEXTNT &DSECT=YES                            ADDED ON 82105\n         LCLC  &DS\n&DS      SETC  'MAPEXTNT'    SET DEFAULT NAME\n         AIF   ('&NM' EQ '').HAVEDS\n&DS      SETC  '&NM'\n.HAVEDS  AIF   ('&DSECT' NE 'YES').NODSECT\n&DS      DSECT ,             MAPPING OF DSCB1/DSCB3 EXTENT ENTRY\n         AGO   .COMDS\n.NODSECT ANOP  ,\n&DS      DS    0H            MAPPING OF DSCB1/DSCB3 EXTENT ENTRY\n.COMDS   ANOP  ,\nXTWHOLE  DC    0XL10'0'      DUMMY FOR CLC/XC\nXTTYPE   DC    X'0'          EXTENT TYPE\nXTTTRK   EQU   X'01'           TRACK ALIGNMENT\nXTTLABEL EQU   X'40'           LABEL EXTENT\nXTTCYL   EQU   X'81'           CYLINDER ALIGNMENT\nXTTSPLIT EQU   X'80'           SPLIT CYLINDER ALLOCATION\nXTSEQ    DC    X'0'          EXTENT SEQUENCE (0-15)\nXTLOCYL  DC    H'0'          LOW CYLINDER\nXTLOTRK  DC    H'0'          LOW TRACK\nXTHICYL  DC    H'0'          HIGH CYLINDER\nXTHITRK  DC    H'0'          HIGH TRACK\nXTLEN    EQU   *-&DS         LENGTH OF ONE ENTRY\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPFD": {"ttr": 7442, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x06\\x00\\x00\\x01\\x03(?\\x01\\x06'O\\x02 \\x00\\x8d\\x00\\x85\\x00\\x07\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.06", "flags": 0, "createdate": "2003-10-10T00:00:00", "modifydate": "2006-10-01T02:20:00", "lines": 141, "newlines": 133, "modlines": 7, "user": "GERHARD"}, "text": "         MACRO\n&NM      MAPFD ,\n         GBLB  &MAPFDS\n.*--------------------------------------------------------------------*\n.*   THIS MAPPING REPLACES FDSECT                                     *\n.*   IT SUPPORTS SPLIT DSECTS AS REQUIRED FOR EXHASCR WHILE EXAMINING *\n.*   MIXED FD AND FDPRT REQUESTS                                      *\n.*                                                                    *\n.*   PREFIX IS FHD FOR ALL COMMON MAPPINGS, AND FFD FOR FDPRT VARS.   *\n.*--------------------------------------------------------------------*\n         AIF   (&MAPFDS).MEND\n&MAPFDS  SETB  1\n         AIF   ('&NM' NE '').EXNAME\nFHDSECT  DSECT ,             FD ITEM MAPPING\n         AGO   .COMNAME\n.EXNAME  ANOP  ,\n&NM      DSECT ,             FD ITEM MAPPING\n.COMNAME ANOP  ,\nFHDLINK  DS    AL1           LENGTH TO NEXT ENTRY OR 0\nFHDTYPE  DS    X             ENTRY TYPE (IN, OUT, NOP)\nFHDFNOP  EQU   X'40'           IGNORE THIS ENTRY\nFHDFIN   EQU   X'80'           INPUT ENTRY\nFHDFCIN  EQU   X'08'           FHDIN IS LOCKED (COND. INPUT)     87156\nFHDFPRT  EQU   X'30'           FD/FDIN - NO 3270 FIELDS          81127\nFHDFIND@ EQU   X'01'             FDSADD IS INDIRECT ADDRESS      81270\nFHDFREG# EQU   X'02'             FDILEN IS REGISTER WITH LENGTH  81270\nFHDFEXAD EQU   X'04'             EXPANSION HAS USER EXIT ADDRESS 89095\nFHDFOPT  EQU   X'20'           OPTION LIST\nFHDFGOTO EQU   X'10'           BRANCH TO ANOTHER FD ENTRY\nFHDFEXEC EQU   X'11'           PERFORM NEW FD RANGE              81131\nFHDFBR   EQU   X'12'           BRANCH/TEST AFTER PRIOR TEST      81131\nFHDFTM   EQU   X'13'           TM/BRANCH                         81131\nFHDFCLI  EQU   X'14'           CLI/BRANCH                        81131\nFHDFCLC  EQU   X'15'           CLC/BRANCH                        81131\nFHDFMOD  EQU   X'18'           SET ADDRESS RESOLUTION MODE       92307\nFHDFSPC  EQU   X'1E'           SPACE/ROOM/REPT SERVICE           82109\nFHDFUEX  EQU   X'1F'           USER EXIT                         81193\nFHDGOTO  DS    0SL2(0)       ADDRESS OF TARGET FD OF GO TO\nFHDEDIT  DS    X             EDITING OPTIONS\nFHDFNL   EQU   X'80'           POSITION TO NEW LINE\nFHDFDEBL EQU   X'40'           STRIP LEADING BLANKS\nFHDFDEBR EQU   X'20'           STRIP TRAILING BLANKS\nFHDFDEBZ EQU   X'10'           STRIP LEADING ZEROES\nFHDFPADL EQU   X'08'           LEFT BLANK OR SF\nFHDFPADR EQU   X'04'           RIGHT BLANK OR SF\nFHDFRADJ EQU   X'02'           RIGHT-ADJUST IN OUTPUT\nFHDFUP   EQU   X'01'           UPPER CASE INPUT TRANSLATE\n*        REDEFINITION FOR FDOPT                                  82109\n*FHDFNL  EQU   X'80'           POSITION TO NEW LINE\nFHDOWCCP EQU   X'40'         WCC OPTIONS PRESENT\nFHDOSBAP EQU   X'20'         SBA PRESENT\nFHDOCURP EQU   X'08'         CURSOR ADDRESS PRESENT\nFHDOINDP EQU   X'04'           AUTO INDENT VALUE PRESENT         81270\nFHDOPTP  EQU   X'02'         COLOR OR DISPLAY OPTIONS PRESENT\nFHDOPCCP EQU   X'01'         PRT CARRIAGE CONTROL INSTEAD OF CURP\nFHDOPT9  DS    X             3279 OPTIONS\nFHDFCOLR EQU   X'70' 0DFLT,1BLUE,2RED,3PINK,4GREEN,5TURQ,6YELLOW,7WHITE\nFHDFMONO EQU   X'08'         APPLY HIGH-LIGHT ON MONOCHROME ONLY 87313\nFHDFUNDR EQU   X'04'           UNDERLINE\nFHDFREV  EQU   X'02'           REVERSE\nFHDFBLNK EQU   X'01'           BLINK\nFHDOPT7  DS    X             3277/3278 OPTIONS\nFHDFINT  EQU   X'08'           INTENSIFIED\nFHDFLPEN EQU   X'04'           LIGHT-PEN DETECTABLE\nFHDFNDSP EQU   X'0C'           NON-DISPLAY\nFHDFNUM  EQU   X'10'           NUMERIC INPUT\nFHDFSKIP EQU   X'30'           SKIP DISPLAY\nFHDFPROT EQU   X'20'           PROTECTED\nFHDFDFLT EQU   X'80'           DEFAULT OPTIONS/COLORS\nFHDFPREV EQU   X'40'           PREVIOUS OPTIONS/COLORS\nFHDFNULL EQU   X'02'           SUPPRESS X'00' IN INPUT FIELDS\nFHDFMTD  EQU   X'01'           MODIFIED DATA TAG                 87313\nFHDDATA  DS    0X            START OF LONG DATA\n.*\nFHDOWCC  DC    X'0'          WCC OPTIONS\nFHDOSBA  DC    XL2'0'        SBA ADDRESS\nFHDOCUR  DC    0XL2'0'       CURSOR ADDRESS\nFHDOCC   DS    C             PRINTER CARRIAGE CONTROL            81201\nFHDOIND  DS    AL1           AUTOMATIC LINE INDENT               81270\n         SPACE 1                                                 81127\n         ORG   FHDGOTO                                           81127\nFHDBRE   DS    SL2           BRANCH EQUAL                        81127\nFHDBRL   DS    SL2           BRANCH LOW/MIXED                    81127\nFHDBRH   DS    SL2           BRANCH HIGH/ONES                    81127\nFHDBVAR  DS    SL2           TEST VARIABLE                       81127\nFHDBIDA  DS    0X              IMMEDIATE DATA FOR TEST           81127\nFHDBLEN  DS    X               LENGTH FOR FDCLC                  81127\nFHDBCLC  DS    SL2           COMPARE STRING                      81127\n         SPACE 1                                                 81193\n         ORG   FHDGOTO       DEFINITION FOR USER EXIT REQUEST    81193\nFHDUXAD  DS    SL2           USER EXIT ADDRESS                   81193\nFHDUXFPM DS    0X            USER SUPPLIED PARM INFO             81193\n         ORG   ,                                                 81193\nFHDXOK   EQU   0             RETURN CODES - NORMAL PROCESSING    81193\nFHDXGOTO EQU   2               NEW FD ADDRESS IN R1              81193\nFHDXCLR  EQU   4               CLEAR CURRENT LINE                81193\nFHDXPRT  EQU   8               PRINT CURRENT LINE                81193\nFHDXADD  EQU   FHDXCLR+FHDXPRT DATA ADDED TO LINE                81193\nFHDXQUIT EQU   16              TERMINATE CURRENT PRTLIST         81193\n.*\n.*  PORTION DISTINCT FOR FDPRT\n.*\nFFDDSECT DSECT ,             SPECIAL SECTION FOR FDPRT/FD COMMON DATA\nFFDDATA  DS    X             DATA TYPE\nFFDDLIT  EQU   X'80'           FD CONTAINS LITERAL, NOT ADDRESS\nFFDDCHAR EQU   1               EBCDIC, TRANSLATED\nFFDDCON  EQU   2               EBCDIC WITH CONTROL CHARACTERS\nFFDDASIS EQU   3               EBCDIC(?), NO TRANSLATE\nFFDDADDR EQU   4               ADDRESS\nFFDDHEX  EQU   5               HEXADECIMAL\nFFDDSHEX EQU   6               HEXADECIMAL WITH EXPLICIT SIGN\nFFDDBIT  EQU   7               BIT STRING\nFFDDINT  EQU   8               INTEGER\nFFDD$INT EQU   9               INTEGER.DD\nFFDDDEC  EQU   10              PACKED DECIMAL\nFFDD$DEC EQU   11              PACKED DECIMAL.DD\nFFDDFIX  EQU   12              FLOATING POINT\nFFDDTIME EQU   13              TIME (BIN 1/100 SECONDS)          81193\nFFDDTIMD EQU   14              TIME (PACKED)                     81193\nFFDDDATE EQU   15              DATE (PACKED; O/P MM/DD/YY)       81193\nFFDDDATJ EQU   16              DATE (PACKED; O/P YY.DDD)         81193\nFFDDFLAG EQU   64              FLAG/TABLE FORMATTING            GP06273\nFFDOLEN  DS    AL1           OUTPUT LENGTH; 0 FOR DEFAULT; MAX FOR FDIN\nFFDILEN  DS    AL1           CURRENT LENGTH OF ITEM\nFFDTEXT  DS    0CL132        (FD/FDPRT) LITERAL TEXT\nFFDSADD  DS    SL2           ADDRESS OF DATA ITEM\nFFDIOFF  DS    AL2           FDIN - OFFSET TO FIW AREA           84237\nFFDIXAD  DS    SL2           FDIN - USER EXIT ADDRESS            89095\n         ORG   FFDIOFF         REDEFINE FOR FLAG PROCESSING     GP03287\nFFDTBAD  DS    SL2           ADDRESS OF BIT EQUIVALENT TEXT     GP03287\nFFDTSEP  DS    C             OUTPUT SEPARATOR CHARACTER OR 00   GP03287\nFFDTSPC  DS    XL1           NUMBER OF SPACES BETWEEN ITEMS     GP03287\n         ORG   ,                                                GP03287\n         SPACE 1                                                 81193\nFDUXPARM DSECT ,             MAPPING OF R1 LIST SUPPLIED TO EXIT 81193\nFDUXFD   DS    A               ADDRESS OF CURRENT FD             81193\nFDUXPWRK DS    A               ADDRESS OF PRINTER WORK AREA      81193\nFDUXSAVE DS    A               ADDRESS OF ORIGINAL SAVE AREA     81193\nFDUXPRT  DS    A               ADDRESS OF CURRENT PRINT LINE     81193\n         DS    A                 RESERVED                        81193\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPFDL": {"ttr": 7446, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x05\\x07o\\x01\\x05\\x07o#X\\x00\\x18\\x00\\x18\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2005-03-17T00:00:00", "modifydate": "2005-03-17T23:58:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,             MAP SINGLE ENTRY FOR SCLINE FUNCTION\n&NM      MAPFDL &DSECT=YES,&PFX=FDL\n.**********************************************************************\n.*                                                                    *\n.*  EXHIBIT - MAP HEADER DATA FOR FDLINE EXPANSIONS (SEE SCLINE)      *\n.*                                                                    *\n.**********************************************************************\n         LCLC  &P\n&P       SETC  '&PFX'\n&NM      MACMAPHD DSECT,DSECT=&DSECT,PFX=&P\n&P.LEN   DC    AL2(0)        LENGTH OF CONTROL/TEXT DATA\n&P.FLAG  DC    X'00'         LINE CONTROL FLAGS\n&P.FLAD  EQU   X'10'           INPUT FIELDS TO BE LEFT-JUSTIFIED\n&P.FRAD  EQU   X'08'           INPUT FIELDS TO BE RIGHT-JUSTIFIED\n&P.FUPP  EQU   X'04'           INPUT FIELDS TO BE UPPER CASED\n&P.FSCR  EQU   X'02'           LINE IS SCROLLABLE (LEFT/RIGHT)\n&P.FMDT  EQU   X'01'           LINE CONTAINS MODIFIED INPUT FIELD\n&P.CNTL  DS    X             CONTROL BYTE (01-3F)  {REPEATED W/TEXT}\n&P.CIN   EQU   X'08'           INPUT FIELD\n&P.COU   EQU   X'10'           OUTPUT\n&P.CHI   EQU   X'18'           HIGH INTENSITY OUT\n&P.MCOL  EQU   X'07'           MASK FOR COLOR BITS\n&P.TEXT  DS    0C              TEXT DATA\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPFDS": {"ttr": 7681, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x12)\\x7f\\x01\\x12)\\x7f\\x18\\x05\\x00 \\x00 \\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2012-10-23T00:00:00", "modifydate": "2012-10-23T18:05:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPFDS &DSECT=,&PFX=FDS,&LEN=0                 ADDED ON 87312\n.*   MAPPING FOR USE IN @SCREENS\n         LCLC  &P,&Q\n&P       SETC  '&PFX'\n&Q       SETC  '&P'.'SECT'\n         AIF   ('&NM' EQ '').DFDS\n&Q       SETC  '&NM'\n.DFDS    AIF   ('&DSECT' EQ 'NO').NODS\n&Q       DSECT ,\n         AGO   .CMDS\n.NODS    AIF   ('&NM' EQ '').CMDS\n&Q       DS    0X\n.CMDS    ANOP  ,\n&P.LEN   DC    X'00'         LENGTH-1 OF TEXT\n&P.FG    DC    X'00'         OPTION FLAGS\n&P.FMOVE EQU   X'80'           ENTRY CONTAINS REPLACEMENT TEXT\n&P.FPOS  EQU   X'40'           POSITIONAL PARAMETER ENTRY\n&P.FKEY  EQU   X'20'           KEYWORD=VALUE OR (VALUE) ENTRY\n&P.FPOS2 EQU   &P.FPOS+&P.FKEY  CHAINED POSITIONAL UID/PSW/NPSW  87361\n&P.FREQ  EQU   X'02'           MANDATORY FIELD                   87314\n&P.FLONG EQU   X'01'           KEYWORD NOT ABBREVIATED\n&P.FDAD  DC    SL2(0)        ADDRESS OF FDIN/FDINP DEFINITION\n         AIF   ('&LEN' EQ '0' OR '&LEN' EQ '').NULLEN\n&P.TEXT  DC    CL(&LEN)' '   TEXT FIELD\n         AGO   .COMLEN\n.NULLEN  ANOP  ,\n&P.TEXT  DC    0C' '         TEXT FIELD\n.COMLEN  ANOP  ,\n&P.RLEN  DC    AL1(0)        (OPTIONAL) REPLACEMENT TEXT LENGTH\n&P.RTXT  DC    0C' '         (OPTIONAL) REPLACEMENT TEXT\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPFDW": {"ttr": 7683, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x01\\x026?\\x01\\x13\\x06\\x8f \\x08\\x00M\\x009\\x00\\x0e\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-12-29T00:00:00", "modifydate": "2013-03-09T20:08:00", "lines": 77, "newlines": 57, "modlines": 14, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPFDW &DSECT=,&PFX=FDW                        ADDED ON 84237\n         LCLC  &P,&Q\n&P       SETC  '&PFX'\n&Q       SETC  '&P'.'SECT'\n         AIF   ('&NM' EQ '').DFDS\n&Q       SETC  '&NM'\n.DFDS    AIF   ('&DSECT' EQ 'NO').NODS\n&Q       DSECT ,\n         AGO   .CMDS\n.NODS    AIF   ('&NM' EQ '').CMDS\n&Q       DS    0A\n.CMDS    ANOP  ,\n&P.FDA   DC    A(0)          ADDRESS OF FD/FDIN SEQUENCE\n&P.FWA   DC    A(0)          ADDRESS OF INPUT WORK AREA (FIW)\n&P.FWL   DC    F'0'          LENGTH OF FIW\n&P.SCAN  DC    A(0)          CURRENT INPUT SCANNER ADDRESS       86209\n&P.SCAL  DC    F'0'          RESIDUAL INPUT LENGTH TO SCAN       86209\n&P.BIA   DC    A(0)          ADDRESS OF INPUT BUFFER\n&P.BIL   DC    F'0'          CURRENT LENGTH OF INPUT\n&P.BIM   DC    Y(0)          MAXIMUM INPUT SIZE                  86209\n&P.BOM   DC    Y(0)          MAXIMUM OUTPUT SIZE                 86209\n&P.BOA   DC    A(0)          ADDRESS OF OUTPUT BUFFER\n&P.BOL   DC    F'0'          LENGTH OF OUTPUT BUFFER\n&P.BOS   DC    Y(0)          SCREEN CAPACITY USED BY OUTPUT      86209\n&P.CUR   DC    X'FFFF' 1/3   0 OR REQUESTED CURSOR ADDRESS\n&P.CUD   DC    X'FFFF' 2/3   DEFAULT CURSOR ADDRESS\n&P.ICUD  DC    Y(0)    3/3   (LAST) INPUT CURSOR ADDRESS         85034\n&P.IAID  DC    C' '          (LAST) INPUT AID                    85034\n&P.ICOD  DC    AL1(0)        (LAST) INPUT AID CONVERTED          85034\n&P.FG    DC    X'00'         ENTRY FLAG (OR'ED FROM ALL FIWFG)\n&P.FTXT  EQU   X'80'           ENTRY CONTAINS TEXT\n&P.FERR  EQU   X'40'           TEXT IS IN ERROR\n&P.FPEN  EQU   X'20'           FIELD SELECTED BY LIGHT-PEN\n&P.FHLP  EQU   X'10'           TEXT IS HELP OR ?                 88221\n&P.FF1   EQU   X'08'           FIRST FDIN MODIFIED               86338\n&P.FF2   EQU   X'04'           OTHER FDIN MODIFIED               86338\n&P.FINT  EQU   X'02'           INTENSIFIED DISPLAY FIELD         86338\n&P.FINV  EQU   X'01'           INVERT INTENSITY                  86338\n&P.OPT   DC    X'00'         PROCESSING OPTIONS\n&P.OKEEP EQU   X'80'           SCINIT NOT TO ERASE FIW AREA      86231\n&P.MKEEP EQU   X'40'           SCMOVE TO KEEP FIW FLAGS          87159\n&P.MKDEL EQU   X'20'           SCMARK TO CLEAR NON-ESSENTIAL IWS 87360\n&P.OSA   EQU   X'10'           SCLIST TO USE SA, NOT SFE         87336\n&P.LOCK  EQU   X'08'           IF OFF, COND. INPUT IS LOCKED     87156\n&P.OHELP EQU   X'04'           LOOK FOR 'HELP' AND '?'           88221\n&P.SFTAB EQU   X'02'           DON'T MERGE SF - TABLE PROC.     GP02363\n&P.NREAD EQU   X'02'           SCLINE WRITE ONLY; NO READ       GP13068\n&P.KYFLP EQU   X'00' >LATER<   SWAP KEYS 13-24 WITH 1-12        GP12305\n&P.KEY12 EQU   X'01'           CONVERT KEYS 13-24 TO 1-12        88211\n&P.SCAC  DC    A(0)          SCANNER CONTROL LIST ADDRESS        87312\n&P.SCMSG DC    A(0)          ERROR MESSAGE ADDRESS               87360\n&P.DEVIC DC    A(0)          DEVICE ATTRIBUTE POINTER (MAPCMPR)  93344\n&P.FDRST DC    A(0)          FD ADDR - RESTART AFT. FULL SCREEN GP02363\n.*                             (FDOPT ADDR. IF FDKEEP SEQUENCE) GP02363\n&P.RELOC DC    A(0)          ADDRESS OF REGISTER AREA FOR FD    GP03269\n.*                             ADDRESS RESOLUTION (SUBXSCRN)    GP03269\n&P.PROFG DC    X'00'         PROCESSING FLAG FOR SUBXSCRN, ETC. GP03273\n&P.PFHED EQU   X'80'           NEED PAGE HEADER                 GP03273\n&P.PFSHO EQU   X'40'           DISPLAY PAGE                     GP03273\n&P.PFENT EQU   X'20'           RETURN TO CALLER ON ENTER ONLY   GP04108\n&P.PFCUR EQU   X'10'           USE CURSOR                       GP12297\n&P.PFARC EQU   X'08'           CURSORS IN (ROW,COL) FORMAT      GP09356\n&P.PFCAN EQU   X'04'           CAN COMMAND AFTER DISPLAY        GP09356\n&P.PFEND EQU   X'02'           END COMMAND AFTER DISPLAY        GP09350\n&P.PFDAT EQU   X'01'           DATA ON PAGE                     GP03273\n         DC    X'00'           RESERVED                         GP03273\n&P.SVCUR DC    H'0'          SCINIT SAVED CURSOR ADDRESS        GP05338\n.*       ZAP SPACE                                               87360\n&P.SVPAG DC    A(0)          ADDRESS OF INITIAL (PAGE) FD CHAIN GP03277\n&P.@HLP  DC    A(0)          FD OR FDLINE FOR HELP SCREEN       GP05080\n&P.CATR  DC    XL2'0'  1/3   CURSOR ADDRESS FOR SPECIAL SA      GP10021\n&P.CATL  DC    XL1'0'  2/3     LENGTH OF SA FIELD               GP10021\n&P.CATC  DC    CL1'6'          SA COLOR CODE                    GP10021\n         DC    1A(0)           RESERVED                         GP05080\n&P.FDWLN EQU   *-&P.FDA      SIZE TO BE CLEARED                  93344\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPFIW": {"ttr": 7686, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x04\\x11\\x1f\\x01\\x04\\x11\\x1f\\x16@\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-20T00:00:00", "modifydate": "2004-04-20T16:40:47", "lines": 31, "newlines": 31, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPFIW &DSECT=,&PFX=FIW,&LEN=0                 ADDED ON 84237\n         LCLC  &P,&Q\n&P       SETC  '&PFX'\n&Q       SETC  '&P'.'SECT'\n         AIF   ('&NM' EQ '').DFDS\n&Q       SETC  '&NM'\n.DFDS    AIF   ('&DSECT' EQ 'NO').NODS\n&Q       DSECT ,\n         AGO   .CMDS\n.NODS    AIF   ('&NM' EQ '').CMDS\n&Q       DS    0X\n.CMDS    ANOP  ,\n&P.FG    DC    X'00'         ENTRY FLAG\n&P.FTXT  EQU   X'80'           ENTRY CONTAINS TEXT\n&P.FERR  EQU   X'40'           TEXT IS IN ERROR\n&P.FPEN  EQU   X'20'           FIELD SELECTED BY LIGHT-PEN\n&P.FHLP  EQU   X'10'           TEXT IS HELP OR ?                 88221\n&P.FPRO  EQU   X'08'           PROCESSED BY EXIT; IGNORE        GP04111\n&P.FINT  EQU   X'02'           DISPLAY FIELD INTENSIFIED\n&P.FINV  EQU   X'01'           DISPLAY OPPOSITE INTENSITY\n&P.LEN   DC    AL1(0)        CURRENT TEXT LENGTH\n&P.ATB   DC    AL2(0)        ADDRESS+1 OF ATTRIBUTE BYTE\n         AIF   ('&LEN' EQ '0' OR '&LEN' EQ '').NULLEN            87166\n&P.TEXT  DC    CL(&LEN)' '   TEXT FIELD (FROM CRT)               87166\n         AGO   .COMLEN                                           87166\n.NULLEN  ANOP  ,                                                 87166\n&P.TEXT  DC    0C' '         TEXT FIELD (FROM CRT)\n.COMLEN  ANOP  ,                                                 87166\n&P.SIZE  EQU   *-&P.FG       SIZE OF ONE ENTRY (+FDOLEN)         87166\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPINDEX": {"ttr": 7688, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x10\\x18\\x7f\\x01\\x10\\x18\\x7f!\\x08\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2010-07-06T00:00:00", "modifydate": "2010-07-06T21:08:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPINDEX &DSECT=YES,&PFX=MIX                  NEW 2010.187 GYP\n.*--------------------------------------------------------------------*\n.*  MAPS ENTRIES IN THE IBM DISTRIBUTION SOURCE LIBRARY INDEX         *\n.*--------------------------------------------------------------------*\n         LCLC  &P\n&P       SETC  '&PFX'\n         AIF   ('&DSECT' NE 'YES').ALTSECT\n&PFX.DSECT DSECT ,\n         AGO   .NODSECT ,\n.ALTSECT ANOP  ,\n&PFX.DSECT  DS 0D            PLANT A LABEL\n.NODSECT AIF   ('&NM' EQ '').NOLABEL\n&NM      DS    0F\n.NOLABEL AIF   ('&NM' EQ '&PFX'.'TENT').NOLTENT\n&PFX.TENT   DS 0F            DEFINE START OF TEXT ENTRY\n.NOLTENT ANOP  ,\n&P.MEM   DC    CL8' '        MEMBER NAME (PROGRAM OR MACRO)\n&P.VOL   DC    CL6' '        VOLUME SERIAL\n&P.LBL   DC    CL1' '        LABEL TAPE (S/N)\n&P.FIL   DC    CL3'  0' '    FILE NUMBER (0 FOR DASD)\n&P.DSN   DC    CL44' '       DATA SET NAME\n&P.DST   DC    CL8' '        (OPTIONAL) DISTLIB\n&P.TGT   DC    CL8' '        PROGRAM NAME\n         DC    CL2' '          FILLER\n&P.LEN   EQU   *-&P.MEM        ENTRY LENGTH\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPINP": {"ttr": 7690, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x986_\\x01\\x08\\x08\\x8f\\x18\\x03\\x00,\\x00*\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1998-12-31T00:00:00", "modifydate": "2008-03-28T18:03:00", "lines": 44, "newlines": 42, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO ,                                        ADDED ON 82116\n&NM      MAPINP &PREFIX=PN,&DSECT=YES  INPWORK MAPPING\n.*    UPDATED FOR ESA AND OS/390 BY G.P.\n         LCLC  &DS,&P\n&P       SETC  '&PREFIX'\n&DS      SETC  '&P'.'PARM'\n         AIF   ('&NM' EQ '').HAVEDS\n&DS      SETC  '&NM'\n.HAVEDS  AIF   ('&DSECT' NE 'YES').NODSECT\n&DS      DSECT ,             MAPPING OF INPWORK EXPANSION\n         AGO   .COMDS\n.NODSECT ANOP  ,\n&DS      DS    0H            MAPPING OF INPWORK EXPANSION\n.COMDS   ANOP  ,\n&P.DDNAM  DC   CL8' '        PRIMARY DDNAME\n&P.DDALT  DC   CL8' '        ALTERNATE DDNAME\n&P.EODAD  DC   A(1)          EODAD OR 0,1 IF NONE\n&P.EODAM  EQU  X'80'         WHEN ON, EODAD ENTERED AMODE 31, ELSE 24\n&P.PPDE   DC   A(0)          POINTER TO RETURNED DIRECTORY DATA  89351\n&P.WIDTH  DC   H'0'          LINE WIDTH FOR TRUNCATION\n          DC   H'0'               RESERVED\n&P.PRFG   DC   X'00'         OPTION FLAGS\n&P.FGABE  EQU  X'80'           ABEND IF OPEN FAILS/DD MISSING\n&P.FGDUM  EQU  X'40'           ALLOW DD DUMMY (ELSE ABEND)\n&P.FGNWTO EQU  X'20'           SUPPRESS WTO IF BAD OPEN AND NO ABEND\n&P.FGJFCB EQU  X'10'           WORD FOLLOWING INPWORK IS JFCB FOR OPEN\n&P.FGPDE  EQU  X'08'           USER REQUESTED PDE FEEDBACK       89351\n&P.FG1BUF EQU  X'01'           SINGLE BUFFER (SHORT ON MEMORY)  GP08088\n&P.FILL   DC   X'00'         FILL BYTE FOR PADDED RECORDS\n&P.EDIT   DC   X'80'         EDIT OPTIONS (MATCH DCMFG1)\n&P.FESET  EQU  X'80'           OPTION BITS SET (ELSE USE DEFAULTS)\n&P.FEOSI  EQU  X'40'           OSI LINE NUMBER FORMAT\n&P.FEHWD  EQU  X'20'           HALF-WORD LINE NUMBERS\n&P.FEINT  EQU  X'10'           CREATE INTEGER LINE NUMBERS\n&P.FEEDT  EQU  X'08'           CREATE EDIT LINE NUMBERS 4C.3C\n&P.FETSO  EQU  X'04'           LINE NUMBERS LEFT-ADJUSTED IN RECFM=V\n&P.FENB#  EQU  X'01'           INSERT LINE NUMBERS EVEN IF NON-BLANK\n&P.PDS    DC   X'00'         PDS PROCESSING OPTIONS              89351\n&P.FPDIR  EQU  X'80'           OPEN PDS DIRECTORY                89351\n&P.FPMEM  EQU  X'40'           PROCESS ALL MEMBERS               89351\n&P.FPALI  EQU  X'20'           ALSO PROCESS ALIAS ENTRIES        89351\n&P.FPUPA  EQU  X'01'           BUILD ./ ADD CARDS                89351\n&P.JFCB   DC   0A(0)         OPTIONAL JFCB ADDRESS FOR OPENJ OR 0\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPINPWK": {"ttr": 7692, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x16\\x00\\x986_\\x01\\x04\\x11O#\\x06\\x00K\\x00<\\x00\\x11\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1998-12-31T00:00:00", "modifydate": "2004-04-23T23:06:16", "lines": 75, "newlines": 60, "modlines": 17, "user": "GERHARD"}, "text": "         MACRO ,                                        ADDED ON 90260\n&NM      MAPINPWK &PREFIX=IP,&WIDTH=500 INPUT READER WORK AREA MAPPING\n.*   UPDATED FOR ESA AND OS/390                                 GP98365\n.*   UPDATED FOR DESERV AND CONCATENATED PDS & PDS/E SUPPORT    GP03244\n         LCLC  &DS\n         LCLC  &P            SHORT PREFIX\n&P       SETC  '&PREFIX'\n&DS      SETC  '&P'.'WORK'\n         AIF   ('&NM' EQ '').NONAME\n&DS      SETC  '&NM'\n.NONAME  ANOP  ,\n&DS      DSECT ,             MAPPING OF PRINT DCB AND WORK AREA\n&P.LINK  DS    F             LINK TO NEXT GETMAINED AREA\n&P.ID    DS    C'INP-'       ID OF INPUT FILE 'N'\n&P.SPLEN DS    F             SUBPOOL/LENGTH OF THIS AREA\n&P.TCB   DS    A             ADDRESS OF OWNING TCB\n&P.DCB@  DS    X'90',AL3(&P.DCB)  DCB POINTER (24-BIT ADDRESS)\n&P.PU@   DS    A             ADDRESS OF USER'S OPEN WORK AREA\n&P.@SERV DS    A             ADDRESS OF @SERVICE ROUTINE\n         SPACE 1\n&P.O2LVL DCBEXITD DSECT=NO,PREFIX=IX,LEVEL2=2                    90260\n&P.WLIST SERVCOMP DSECT=NO,PFX=&P.D                              90260\n&P.UFLAG DS    X             USER'S PROCESSING FLAGS\n&P.UFILL DS    C             FILL BYTE FOR SHORT RECORDS         81200\n&P.FLAG  DS    X             PROCESSING FLAGS\n&P.FEOF  EQU   X'80'           END FILE READ\n&P.FEOM  EQU   X'40'           END MEMBER READ                   89352\n&P.FEXT  EQU   X'20'           PDS EXTENSION PRESENT            GP03244\n&P.FKEEP EQU   X'10'           RE-GET OF CURRENT RECORD\n&P.FWYL  EQU   X'08'           POTENTIAL WYLBUR EDIT BLOCK\n&P.FWIL  EQU   X'04'           WYLBUR RECORD READY FOR DEBLOCK\n&P.FACB  EQU   X'02'           PROCESSING ACB, NOT DCB           89360\n&P.FASCI EQU   X'01'           TRANSLATE ASCII TO EBCDIC         82175\n&P.BUFSP DC    X'00'         GETPOOL SUBPOOL NUMBER              85157\n&P.ACB   ACB   DDNAME=SYSUT1,MACRF=(ADR,SEQ,IN)                  89360\n&P.RPLEN DC    F'0'    1/2   LENGTH OF GOTTEN RPL                89360\n&P.RPL@  DC    A(0)    2/2   ADDRESS OF GOTTEN RPL               89360\n&P.RRN   DC    A(0)          RELATIVE RECORD NO. FEEDBACK        90201\n         ORG   &P.ACB         RE-USE                             89360\n&P.DCB   DCB   DDNAME=ANY,DSORG=PS,MACRF=GL,EROPT=ACC, OPTCD=Z,        *\n               EODAD=1,EXLST=&P.XLIST ,BFTEK=A                   82178\n         ORG   ,             COMMON END OF ACB/DCB               89360\n&P.XLIST DC    0A(0),X'87',AL3(0),A(0,0,0) +JFCB+@DCBEXIT+ABND   86272\n&P.VCON  DC    F'0'          V-FORMAT RECORD HEADER\n&P.RECCC DC    C' '          CARRIAGE CONTROL\n&P.REC   DC    2CL(&WIDTH/2)' '     TEXT RECORD\n&P.TRUPP DS    A             UPPER CASE TRANSLATE OR NO-OP      GP04114\n&P.WKEND DS    0D            END OF WORK AREA\n         SPACE 1                                                 89352\n*        EXTENSION PRESENT WHEN USER REQUESTS PDS SERVICES       89352\n&P.POD   DCB   DDNAME=ANY,DSORG=PS,MACRF=GL,RECFM=U,EODAD=1 DEODAD\n         ORG   &P.POD         RE-USE                            GP03244\n&P.DIR   DCB   DDNAME=ANY,DSORG=PS,MACRF=GL,EROPT=ACC,                 *\n               EODAD=1 EXLST=&P.XLIST                           GP03244\n         ORG   ,             COMMON END OF ACB/DCB               89360\n&P.PCARD DC    CL15'./       ADD   '   IEBUPDTE CARD             89352\n&P.PCAME DC    CL65'SSI=XXXXXXXX,NAME=XXXXXXXX'  VARIABLE PART  GP10192\n&P.CONCT DC    X'00'         CONCATENATION # FROM SMDEMLTK (0->255)\n&P.PFLAG DC    X'00'         MORE FLAGS                         GP03244\n&P.PFDE  EQU   X'80'           DESERV BUFFERS AVAILABLE         GP03244\n&P.PFPDS EQU   X'20'           PROCESSING A PDS                 GP03244\n&P.RSVD8 DC    X'00'         RESERVED                           GP03244\n&P.@DSAB DC    A(0)          ADDRESS OF DSAB FOR INPUT DD       GP03244\n&P.@POD  DC    A(&P.POD)      OPEN/CLOSE LIST                    89352\n&P.PXLST DC    2A(0)         POD EXIT LIST/JFCB                  89352\n&P.@ROOT DC    A(0)          ROOT OF DESERV BUFFERS             GP03244\n&P.@DBXL DC    4A(0)         BXLE/@BUF FOR DESERV LOOP          GP03244\n&P.@DSRV DC    A(0)          ADDRESS OF SUBDSERV ROUTINE        GP03244\n&P.PDDNM DC    CL8' '        NAME OF DYNAMICALLY ALLOCATED DD   GP03244\n&P.PJFCB DS    XL(JFCBLGTH)  JFCB FOR INDIVIDUAL MEMBER          89352\n&P.PDSDE DS    XL(8+1+3+62)  (FAKE) DIRECTORY ENTRY             GP03244\n&P.PBXLE SERVPDS PFX=PE,DSECT=NO,RETURN=YES,VER=1                89352\n&P.PBXLN EQU   *-&P.PBXLE    LENGTH OF PDE WORK AREA             89352\n&P.PWKND EQU   *             END OF PDS EXTENSION                89352\n         MEND  ,                                                 90260\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPJOBDY": {"ttr": 7695, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x05\\x02_\\x01\\x05\\x04\\x1f\\x143\\x00\\x1f\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2005-01-25T00:00:00", "modifydate": "2005-02-10T14:33:00", "lines": 31, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                       ADDED ON GP05020\n         MAPJOBDY ,    MAP DYNWORK FOR EXHC$JCL AND EXHCX$J- OVERLAYS\n.*    MUST BE PLACED AFTER MSECT ,\n.*\nEXHBSQSP DSECT ,\n         ORG   DYNWORK\nHAJCTTTR DS    F             JCT MTTR\nHANUM    DS    H             JES2 JOB NUMBER\nHADSN    DS    H             DATASET COUNT\nHAQUE    DS    H             (MY) RELATIVE QUEUE NUMBER          78090\n         SPACE 1\nHAFG     DS    X\nHAFJCT   EQU   X'80'           DISPLAY JCT INFORMATION           88284\nHAFLOG   EQU   X'40'           DISPLAY JOB LOG                   88284\nHAFJCL   EQU   X'30'           DISPLAY JCL DSN(S)                88284\nHAFJCLI  EQU   X'20'           DISPLAY INPUT JCL (PRE-INP ONLY)  88284\nHAFJCLO  EQU   X'10'           DISPLAY OUTPUT JCL                88284\nHAFMSG   EQU   X'08'           DISPLAY MESSAGE DSN               88284\nHAFTXT   EQU   X'04'           CONVERTER/INTERPRETER TEXT       GP05020\nHAFQUE   EQU   X'02'           JOB QUEUE                        GP05020\nHAFDSN   EQU   X'01'           DISPLAY DATA                      88284\nHAFJOB   EQU   HAFDSN+HAFJCT+HAFLOG+HAFJCL+HAFMSG                88284\n         SPACE 1\nHAFG2    DS    X\nHAFSLOG  EQU   X'80'           SYSLOG DISPLAY FUNCTION           88284\nHAFSUM   EQU   X'40'           SUMMARY DISPLAY ONLY (WAS HAFMSG) 88284\nHAFUSER  EQU   X'20'           USER SET OVERRIDING DSN #        GP05050\nHAFSPIN  EQU   X'01'           SPIN PROCESSING FLAG              88284\nHAADD    DS    H             ADD CONSTANT FOR S= AND T=          82353\n         SPACE 1\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPJOBWK": {"ttr": 7697, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x05\\x00\\x00\\x01\\x05\\x02O\\x01\\x086O#\\x07\\x00i\\x00e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.05", "flags": 0, "createdate": "2005-01-24T00:00:00", "modifydate": "2008-12-29T23:07:00", "lines": 105, "newlines": 101, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         MAPJOBWK &DOC=NO    COMMON I/O WORK AREA       ADDED ON 88094\n         COPY  OPTIONS\n         GBLC  &VERSION,&JQENUML\n&JQENUML SETC  '5'\n         AIF   ('&HASP' EQ 'JES2').LAB5\n   AIF ('&VERSION'(1,1) LT '4' AND '&VERSION'(1,1) GE '0').LAB3\n&JQENUML SETC  '4'           FOUR BYTE JOB NUMBER\n         AGO   .LAB5\n.LAB3    ANOP  ,\n&JQENUML SETC  '3'           THREE BYTE JOB NUMBER\n.LAB5    ANOP  ,\nIOWORK   DSECT ,\n         MAPIOWK ,           DEFINE $JCL WORK SPACE\n         PUSH  PRINT                                             88094\n         AIF   ('&DOC' EQ 'NO').NODOC                            88094\n         PRINT ON,GEN                                            88094\n.NODOC   SPACE 1\n         ORG   DRBUF         RE-USE BUFFER SPACE FOR DATA\nLOCDB    DC    2D'0'\nSAVE29   DC    8F'0'         SAVE AREA\nSAFE6    DC    9F'0'         SECOND SAVE AREA\nJAWWORK  DS    0A            POINTERS AND STUFF\nJTIOT    DC    F'0'          CURRENT IOT ADDRESS\nJTIOTOF  DC    F'0'          CURRENT IOT OFFSET\nJTIOT1   DC    F'0'          FIRST IOT ADDRESS\nJTBUFAD  DC    F'0'          NEXT AVAILABLE DSIPLAY BUFFER LINE\nJTDSKEY  DC    F'0'          DATABLOCK ID WORD\nOFFSDDB  DC    F'0'          IOT OFFSET TO FIRST PDDB (VAR. IN 1.6)\nJSPIOT   DC    F'0'          CURRENT SPIN IOT ADDRESS\nJSPIOTOF DC    F'0'          CURRENT SPIN IOT OFFSET\nJSPIOT1  DC    F'0'          FIRST SPIN IOT ADDRESS\nJSPACCT  DC    CL4' ',CL8' ' CCSI ACCOUNT NUMBER (+PAD)\nPTRBASE  DC    A(0)          ADDRESS OF FIRST RECORD POINTER\nPTRLAST  DC    A(0)          LAST AVAILABLE ENTRY\nPTRINT   DC    F'0'          ENTRY INTERVAL\nMAXLEN   DS    F'0'          CURRENT BUFFER SIZE                GP08362\nRECFOUND DC    F'0'          LAST RECORD FOUND BY FIND\nHOROFF   DC    H'0'          HORIZONTAL INDENT (WINDOWING OPTION)\nFNDLEN   DC    H'0'          LENGTH OF FIND TEXT\nFNDLEN2  DC    H'0'          LENGTH OF FIND TEXT2                88284\nFNDTEXT  DC    CL40' '       COMPARE TEXT\nFNDTEXT2 EQU   FNDTEXT+20,20,C'C'  SUB-ALLOCATED SECOND STRING   88284\nFNDDESC  DC    X'0000'       SYSLOG - DESCRIPTORS                88284\nFNDTIME  DC    2CL6' '       SYSLOG - TIME RANGE                 88284\nFNDFG    DC    X'00'         SYSLOG - CONTROL FLAG               88284\nFFGDESC  EQU   X'80'           MATCH ON DESCRIPTOR CODE(S)       88284\nFFGTIME  EQU   X'40'           MATCH ON TIME                     88284\nFFGTIMED EQU   X'20'           TIME MATCHED                      88284\nMODEFG   DC    X'0'          PROCESSING OPTIONS\nMFSCALE  EQU   X'80'           SHOW COLUMN SCALE\nMFNUM    EQU   X'40'           SHOW RCD NUMBERS ON EACH LINE\nMFCC     EQU   X'20'           SHOW MACHINE OR ANSI CARR. CONTROL\nMFWRAP   EQU   X'10'           DISPLAY FULL (WRAPPED) TEXT (NO WINDOW)\nMFUPP    EQU   X'08'           FOLD UPPER CASE ON FIND\nMFHEX    EQU   X'04'           HEX TEXT\nMFFIND   EQU   X'01'           FIND REQUEST MADE\nJSVFLAGS DC    X'00'         PRINT/SAVE FLAGS\nJFFAIL   EQU   X'80'           REQUEST IN ERROR\nJFERR    EQU   X'40'           ERROR DURING PROCESSING\nJFNULL   EQU   X'20'           NO DATA PROCESSED\nJFABE    EQU   X'01'           DCB ABEND ENTERED\nJSVCOUNT DC    F'0'          DATA SET RECORD COUNT\nJSVMTTR  DC    XL4'0'        DATA SET MTTR\nJSVRET   DC    XL4'0'        #RECS COPIED / SYS ABEND CODE / ERROR CODE\nJSVCLEAR EQU   JSVFLAGS,*-JSVFLAGS,C'X'  AREA TO CLEAR IN $JC\n         SPACE 1\nJADWORK  DS    0F            FUNCTION WORK AREA\nRECMAX   DC    F'0'          HIGHEST RECORD EVER READ\nCURTTR   DC    F'0'          TTR OF CURRENT BLOCK\nREQTTR   DC    F'0'          REQUESTED TTR\nCURREC   DC    F'0'          CURRENT RECORD NUMBER\nREQREC   DC    F'0'          REQUESTED RECORD NUMBER\nTOPREC   DC    F'0'          RECORD ON TOP OF PAGE\nCURROF   DC    F'0'          OFFSET TO CURRENT RECORD IN BLOCK  GP08362\nTOPTTR   DC    F'0'          BLOCK OF TOP LINE                  GP08362\nTOPOFF   DC    F'0'          OFFSET OF TOP LINE                 GP08362\nTOPFG    DC    X'00'         EXT. FUNCTION FLAG                 GP08362\nTFSET    EQU   X'80'           TOP TTR/OFF SET                  GP08362\nTFRET    EQU   X'40'           RETURN - RESET TO TOP            GP08362\nTFERR    EQU   X'20'           ERROR DURING SAVE/PRINT          GP08362\nPROFG    DC    X'00'         PROCESSING FLAG\nPFEOF    EQU   X'80'           END-FILE PROCESSED\nPFMSG    EQU   X'01'           EOF MSG ON SCREEN\nSAVECC   DS    C             CARRIAGE CONTROL FOR CURRENT RECORD\nSAVFLAG1 DS    X             COPY OF LRCFLAG1\nTOPMSG   DC    CL20' '       ERROR MESSAGE FROM SAVE/PRINT/FIND GP08362\nJAWCLEAR EQU   JAWWORK,*-JAWWORK,C'A'  GLOBAL CLEAR\nJADCLEAR EQU   JADWORK,*-JADWORK,C'A'  FUNCTION CLEAR\n         SPACE 1\nJTPROC   DS    CL8,C         PROC STEP\nJTSTEP   DS    CL8,C         STEP NAME\nJTDDN    DS    0CL8,C        DDNAME\nJTITLE   DS    CL7,C         TITLE - JCT/LOG/JCL/MSG/DSN=NNN\nJQUE     DS    CL4,C         QUEUE\nJNAME    DS    CL8,C         JOB NAME\nJCTLPA1  DS    C'('\nJNUM     DS    CL&JQENUML    JOB NUMBER\nJCTLPA2  DS    C') '\nJCTTRA   DS    CL8           TTR OF JCT OR CURRENT MTTR\nJTSHORT  EQU   JTDDN,*-JTDDN,C'C'  NARROW TITLE\nJTWIDE   EQU   JTPROC,*-JTPROC,C'C'  WIDE TITLE\nIOBUF    DS    0D ,          INPUT BUFFER FOR JCT/IOT/BUFFER\n         POP   PRINT                                             88094\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPLODCB": {"ttr": 7700, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x065O\\x01\\x065O\\x00\\x17\\x00\\x14\\x00\\x14\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2006-12-20T00:00:00", "modifydate": "2006-12-20T00:17:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPLODCB &PFX=LOD,&DSECT=YES                            87280\n.*   EXHIBIT - SUPPORT FOR JESx LOAD LIBRARIES\n         LCLC  &P,&N\n&N       SETC  '&NM'\n&P       SETC  '&PFX'\n         AIF   ('&NM' NE '').OK\n&N       SETC  '&P'.'CB'\n.OK      AIF   ('&DSECT' EQ 'NO').NOS\n&N       DSECT ,\n         AGO   .COMM\n.NOS     AIF   ('&NM' EQ '').COMM\n&NM      DS    0F\n.COMM    ANOP  ,\n&P.LINK  DC    A(0)          POINTER TO NEXT ENTRY\n&P.SPLEN DC    A(0)          SUBPOOL/LENGTH OF THIS BLOCK\n&P.DDNM  DC    CL8'LOADXXXX'  DDNAME OF ENTRY\n&P.DCB   DCB   DDNAME=LOADXXXX,DSORG=PO,DEVD=DA,MACRF=(E)\n&P.SIZE  EQU   *-&P.LINK\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPMTS": {"ttr": 7702, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x97)\\x0f\\x01\\x065O\\x00\\x18\\x012\\x011\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-10-17T00:00:00", "modifydate": "2006-12-20T00:18:00", "lines": 306, "newlines": 305, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPMTS &TYPE=DSECT,&PFX=MTS,&MODE=,&FLAVOR=EXHIBIT,           *\n               &ACB=MYACB,&ETX=XETXR,&EPLOC=EXHABASS,            87012 *\n               &MAXLINE=62,&MAXWITH=160                          92269\n.*  EXHABASE CREATED TABLE FOR EACH EXHIBIT SESSION\n         LCLC  &P,&LACB,&LETX,&LLOC\n&LACB    SETC  '&ACB'\n&LETX    SETC  '&ETX'\n&LLOC    SETC  '&EPLOC'\n&P       SETC  'MTS'\n         AIF   ('&PFX' EQ '').NOP\n&P       SETC  '&PFX'\n.NOP     AIF   ('&TYPE' NE 'DSECT').NOD\n&P.WORK  DSECT ,             MULTI-TASKING MODE SUBTASK WORK AREA\n&LACB    SETC  '1'\n&LETX    SETC  '1'\n&LLOC    SETC  '1'\n         AIF   ('&NM' EQ '').NONM                                89065\n.NOD     ANOP  ,\n&NM      DS    0F\n.NONM    ANOP ,                                                  89065\n&P.ID    DC    0CL4'MTS '    VECTOR TABLE SELF-ID\n&P.NIB   NIB   MODE=RECORD,PROC=TRUNC\n&P.WRPL  RPL   AM=VTAM,ACB=&LACB,STYPE=REQ,CONTROL=DATA,POST=RESP,     *\n               BRACKET=(BB,NEB),RTYPE=DFSYN,OPTCD=(ASY,CA),            *\n               RESPOND=(NEX,FME,NRRN),NIB=&P.NIB\n&P.CRPL  RPL   AM=VTAM,ACB=&LACB,STYPE=REQ,CONTROL=DATA,POST=RESP,     *\n               OPTCD=SYN,RESPOND=(NEX,FME,NRRN),NIB=&P.NIB\n&P.PDCB  DCB   DSORG=PS,MACRF=PM,DDNAME=EXHPRINT,EROPT=ACC,            *\n               RECFM=VBA,LRECL=137,BLKSIZE=689\n&P.PMG14 VCON  'EXH414E EXHPRINT ABENDED XXX-CC '\n&P.PRDD  EQU   &P.PMG14+4+8,8,C'C'   PRINT DCB DDNAME (DYNALLOC)\n&P.DEB   DC   4A(0),X'05',AL3(0),X'FF',AL3(0),X'0F',AL3(0),X'02',AL3(0)\n&P.DEBND DC    X'33',AL3(0)  UCB POINTER FOR CRT\n         DC    3AL1(X'73',0,0,0)  DUMMY EXTENTS\n&P.DEBPR DC    X'37',AL3(0)  PRINTER UCB POINTER\n&P.UCB   DC    0A(0),X'0000FF88',X'00AF0000',X'00000000',X'00',C'VTM'\n         DC    X'12501009',A(0,0,0,0,0,0)\n&P.UCBX  DC    6A(0)\n&P.UCBD  DC    2A(0)         DDT\n&P.ATT7  DC    18A(0)        ENOUGH ROOM FOR SP2 ATTACH          93270\n         ORG   &P.ATT7                                           93270\n&P.ATT   ATTACH EPLOC=&LLOC,ETXR=&LETX,SZERO=NO, STAI=XESTAI,          *\n               ASYNCH=NO,PURGE=NONE,SF=L\n         ORG   ,             ALLOW EITHER LENGTH ATTACH          93270\n&P.CSCB  DC    A(0,0),CL8'ID',CL8'EXHABASE',CL3'UCB',5AL1(0)\n         DC    4A(0),X'00',CL7' ',2A(0),C'CSCB'\n         ORG   &P.CSCB+X'DC'                                    GP97290\n&P.CSCX  DC    A(&P.CSCB+32) CSCB EXTENSION OVERLAPS FAKE CSCB  GP97290\n         ORG   ,                                                GP97290\n         AIF   ('&PFX' EQ 'PAT').MEND\n         SPACE 1\n&P.QLINK DC    A(0)          LINK TO NEXT AREA ON CHAIN\n&P.SAVER DC    16F'0'        SUBROUTINE SAVE AREA\n&P.SAVES DC    16F'0'        SECOND SUBROUTINE SAVE AREA\n&P.INPAD DC    A(&P.BUFIN) 1/2  INPUT BUFFER\n&P.INPLN DC    F'0'       2/2  SIZE OF SAVED INPUT\n&P.WECB  DC    A(0)\n&P.FEAT  DC    0A(0),XL18'0' FEATURE/SIZE INFORMATION\n&P.SCRSZ EQU   &P.FEAT+6,4,C'Y'  TERMINAL SIZES (ROWS ; COLUMNS)\n&P.BUFSZ EQU   &P.FEAT+4,2,C'Y'  TERMINAL SIZE (ROWS * COLUMNS)  89327\n&P.ROWS  EQU   &P.FEAT+8,2,C'Y'  ROWS ON SCREEN                  89327\n&P.COLS  EQU   &P.FEAT+10,2,C'Y' COLUMNS ON SCREEN               89327\n&P.FLGV  DC    X'00'         SPECIAL PROCESSING FLAGS\n&P.FBKER EQU   X'80'           BRACKET ERROR (RECOVERY)          87257\n&P.FENAT EQU   X'10'           RE-ENABLE ATTENTIONS AFTER WRITE\n&P.UA90  EQU   X'04'           SKIP UNSOLICITED 3290 ATTENTION   94073\n&P.FRSVP EQU   X'02'           NEXT WRITE IS A RESPONSE\n&P.FVONC EQU   X'01'           FIRST TIME FLAG;  POSSIBLE RACE ERROR\n         SPACE 1\n&P.FLGT  DC    X'00'         TERMINAL STATUS FLAGS\n&P.FGONE EQU   X'80'           TERMINAL IS GONE\n&P.FXEND EQU   X'40'           EXECUTION TO BE ENDED             89327\n&P.FGOIN EQU   X'20'           GRADUAL SHUT-DOWN (QUIESCE)       90231\n&P.FNSTA EQU   X'08'           SKIP STAE MSGS (DONE BY ESPIE)    93185\n&P.FTTIM EQU   X'02'           FIRST INPUT WAIT INTERVAL EXPIRED 92108\n&P.FBUG  EQU   X'01'           DEBUG TRACE REQUEST\n&P.SAVE4 DC    18F'0'        SAVE AREA\n&P.PDCBX DC    0A(0),X'91',AL3(0)    DCB ABEND EXIT\n         SPACE 1\n&P.DDB   DC    D'0'          DOUBLE WORD WORK AREA\n&P.SAVCK DC    5A(0)         RPL CHECK ROUTINE SAVE AREA\n&P.NAPPL DC    CL8' '        NEXT APPLICATION OR NULL\n&P.@WORK DC    A(0)          ADDRESS OF WORK AREA\n&P.@SQSP DC    A(0)          ADDRESS OF SQA WORK AREA\n&P.TASK  DC    A(0)          ADDRESS OF SUBTASK\n&P.ERRCT DC    F'0'          CONSECUTIVE I/O ERROR COUNT\n&P.@PARM DC    A(0) ATTPARM  POINTER TO PARM OPTIONS\n&P.@MTV  DC    A(0) MTVECT   POINTER TO MAIN-TASK AREA\n&P.UID   DC    CL8' '        NAME OF USER                        87012\n&P.ACCT  DC    CL8' ',CL4' '   ACCOUNT + SPARE                   87012\n&P.LOUD  DC    A(0)          LOCAL ONLINE USER DATA              89107\n&P.#WRIT DC    A(0)          WRITE I/O COUNT\n&P.#READ DC    A(0)          READ I/O COUNT\n&P.PRVWR DC    2A(0)         ADDRESS/LENGTH OF LAST FULL-SCREEN WRITE\n&P.CURSA DC    A(0)          CURSOR ADDRESS\n&P.BFEND DC    A(0)          LOGICAL BUFFER END\n&P.SPARM DC    0A(0)         COMPRESSION ROUTINE PARMS           90147\n&P.CMPO@ DC    A(0)          OUTPUT BUFFER ADDRESS               90147\n&P.CMPOL DC    A(0)          ADDRESS OF MAX/ACT OUTPUT LENGTH    90147\n&P.CMPI@ DC    A(0)          INPUT BUFFER ADDRESS                90147\n&P.CMPIL DC    A(0)          ADDRESS OF INPUT LENGTH             90147\n&P.CMPB@ DC    A(0)          ADDRESS OF BUFFER SIZE              90147\n&P.CMPF@ DC    A(0)          ADDRESS OF OPTION FLAGS             90147\n&P.CMPC@ DC    A(0)          ADDRESS OF COLOR CONVERSION TABLE   90147\n&P.CMPTY DC    A(0)          ADDRESS OF TTY TYPE FOR SIMULATION  93331\n         DC    A(0)            SPARE                             90147\n&P.CMPOS DC    A(0)          OUTPUT LENGTH (MAX, THEN RESULT)    90147\n&P.CMPIS DC    A(0)          INPUT LENGTH                        90147\n&P.CMPBS DC    A(0)          BUFFER SIZE                         90147\n&P.CMPFG DC    X'00'         REQUESTED FUNCTIONS                 90147\n&P.CMFSF EQU   X'80'           INSERT PROT. SF IF NO SF IN LINE 2\n&P.CMNCM EQU   X'40'           BYPASS BUFFER COMPRESSION, ETC.   90147\n&P.CMNCO EQU   X'20'           BYPASS COLOR SUBSTITUTION         90147\n&P.CMESC EQU   X'10'           BUFFER MAY CONTAIN ESCAPE (BTAM)  90147\n&P.CMCCW EQU   X'08'           BUFFER CONTAINS CCW               90147\n&P.CMWCC EQU   X'04'           BUFFER CONTAINS WCC/PCC           90147\n&P.CMCCO EQU   X'01'           O/P BUFFER HAS CCW @ ADDR-1       93331\n&P.CMPFA DC    X'00'         ADDRESSING MODE                     90147\n&P.CMA16 EQU   X'02'           USE 16-BIT ADDRESSING ONLY        90147\n&P.CMA14 EQU   X'01'           14-BIT ADDRESSING SUPPORTED       90147\n&P.CMPFC DC    X'00'         COLOR MODE                          90147\n&P.CMCO7 EQU   X'07'           7-COLOR MODE                      90147\n&P.CMCOB EQU   X'70'           BACKGROUND COLOR AVAILABLE        90147\n&P.CMPFH DC    X'00'         EXTENDED HIGH-LIGHTING              90147\n&P.CMHI7 EQU   X'07'           ALL EXTENDED HIGH-LIGHTING        90147\n&P.CMPFM DC    X'00'         MISCELLANEOUS OPTIONS               90147\n&P.CMVAL EQU   X'80'           FIELD VALIDATION SUPPORTED        90147\n&P.CMOUT EQU   X'40'           FIELD OUTLINING                   90147\n&P.CMGE  EQU   X'08'           GRAPHICS ESCAPE PROCESSING        91101\n         DC    X'00'         SPARE                               90147\n         DC    X'00'         SPARE                               90147\n         DC    X'00'         SPARE                               90147\n&P.PPARM DC    CL8' '        PRINT WORK WORDS\n&P.PLINE DC    H'0'          LNE WORK AREA\n&P.PLIN# DC    H'-1'\n&P.PPRFX DC    XL5'0'        SAVE AREA FOR LEN, FGS, CC ON H BOUND\n&P.PPRCC EQU   &P.PPRFX+4,1,C'C'  SAVED CARRIAGE CONTROL\n&P.FLGM  DC    X'00'         CONTROL FLAG\n&P.FREAD EQU   X'80'           DISPLAY READ INPUT INSTEAD OF WRITE\n&P.FSFO  EQU   X'40'           START FIELD ORDER FOUND\n&P.FNOND EQU   X'20'           NON-DISPLAY FIELD\n&P.FFSF  EQU   X'10'           FAKE SF TO BE INSERTED\n&P.FNCOL EQU   X'08'           BYPASS COLOR MAPPING              87172\n&P.FNCMP EQU   X'02'           BYPASS COMPRESSION (AND COL.MAP)\n&P.FATTN EQU   X'01'           WRITE INTERRUPTED BY ATTN\n&P.PPAG# DC    PL3'0'        PAGE NUMBER\n&P.TRMTY DC    X'00'         - RESERVED FOR TERMINAL TYPE\n         DC    X'00'\n&P.TRMFG DC    X'00'         TERMINAL MODE FLAGS\n&P.FAUCR EQU   X'80'           IF ON, SKIP CR IF LEN=WIDTH\n&P.FAULF EQU   X'40'           IF ON, CR INCLUDES LF\n&P.FSAS  EQU   X'10'           SAS TPUT CONTROL MODS ON TCAM\n&P.FVTAM EQU   X'08'           VTAM TERMINAL (DIRECT OR TSO)     89065\n&P.FWYLB EQU   X'04'           RUNNING AS WYLBUR SUBSYSTEM       91267\n         AIF   ('&FLAVOR' NE 'KERMIT').NOTKERM                   89327\n&P.ATECB DC    F'0'          ATTENTION ECB                       89327\n&P.CNECB DC    F'0'          CANCEL ECB                          89327\n&P.TMECB DC    F'0'          STIMER ECB                          89327\n&P.TLIST DC    A(&P.TMECB)   ECB LIST WITH TIMER                 89327\n&P.ELIST DC    A(&P.ATECB,&P.CNECB),X'80',AL3(&P.WECB)           89327\n&P.GETLN DC    A(0)          GETLINE ROUTINE ADDRESS             89327\n&P.PUTLN DC    A(0)          PUTLINE ROUTINE ADDRESS             89327\n&P.PUTFS DC    A(0)          FULL-SCREEN PUT                     89327\n&P.PUTPG DC    A(0)          PUT STRUCTURED FIELD/RESPONSE       89327\n&P.LOGOF DC    A(0)          LOGOFF EXIT                         89337\n&P.COMND DC    A(0)          COMMAND (PRE)PROCESSING             89337\n&P.DDACC DC    A(0)          DDNAME ACCESS CONTROL CHECKING      89337\n         DC    4A(0)           RESERVED ...                      90049\n&P.DDNIO DC    CL8' '        DYN.ALL.DDN FOR I/O FILES           90049\n&P.DDNCT DC    CL8' '        DYN.ALL.DDN FOR CONTROL FILES       90049\n         DC    1A(0)           RESERVED ...                      90049\n&P.TETOA DC    A(0)          EBCDIC TO ASCII TRANSLATE TABLE     91315\n&P.TATOE DC    A(0)          ASCII TO EBCDIC TRANSLATE TABLE     91315\n&P.KMXPK DC    A(0)          MAX PACKET IF NON-ZERO              91267\n.*                           ZAP SPACE                           89327\n.*                           ZAP SPACE                           89327\n&P.SMF   DS    0F                  SMF TS STEP TERMINATION RECORD\n&P.RLEN  DS    BL2'0'    RECORD LENGTH                           89337\n&P.RSEG  DS    BL2'0'    SEGMENT DESCRIPTOR                      89337\n&P.RFLG  DC    BL1'0'              HEADER FLAG BYTE              89337\n&P.RCDTY DC    BL1'0'              RECORD TYPE (34 DECIMAL)      89337\n&P.RCDTS DC    BL4'0'              TIME STAMP  TOD .01 SECS      89337\n&P.RCDTE DC    PL4'0000'                       DATE 00YYDDDF     89337\n&P.CPUID DC    CL4' '              CPU IDENTIFICATION (SYSTEM, MODEL)\n&P.UIF   DC    CL8' '              USER IDENTIFICATION FIELD     Y02901\n&P.ONTME DC    BL4'0'              LOGON TIME  TOD .01 SECS      89337\n&P.ONDTE DC    PL4'0000'                       DATE 00YYDDDF     89337\n&P.UDATA DC    CL8' '              RESV FOR USER                 89337\n&P.INVSQ DC    BL1'0'              STEP SEQUENCE NUMBER          89337\n&P.SIT   DC    BL4'0'              TOD STEP INITIATION         @YL026WA\n&P.OUTCT DC    BL4'0'              LINE OUT COUNT                89337\n&P.INCT  DC    BL4'0'              LINE IN COUNT                 89337\n&P.STAT  DC    BL2'0'              STEP TERMINATION STATUS       89337\n&P.PRI   DC    BL1'0'              STEP DISPATCHING PRIORITY     89337\n&P.PRGNM DC    CL8' '              NAME OF PROGRAM INVOKED       89337\n&P.INVNM DC    CL8' '              STEP (PROC) NAME              89337\n&P.EFRGN DC    BL2'0'              EFFECTIVE REGION SIZE IN 1K BLKS\n&P.SYST  DC    BL2'0'              SYST AREA USED, TOP PRI AREA  Y02901\n&P.MCRE  DC    BL2'0'              CORE ACTUALLY USED IN  1K BLKS\n&P.RVC   DC    BL6'0'              RESERVED                      89337\n&P.SPK   DC    BL1'0'              STORAGE PROTECT KEY           A40791\n&P.STI   DC    BL1'0'              STEP TERMINATION INDICATORS   89337\n*                        BIT6 - 0=NORMAL COMPLETION              89337\n*                               1=ABEND                          89337\n&P.RV1   DC    BL2'0'              RESERVED                      A40791\n&P.AST   DC    BL4'0'              ALLOC. START TIME             A40791\n&P.PPST  DC    BL4'0'              PROBLEM PROG. START TIME      A40791\n&P.RV2   DC    BL1'0'              RESERVED                    @YL026WA\n&P.SRBT  DC    BL3'0'              STEP CPU UNDER SRB(.01 SEC) @YL026WA\n&P.RIN   DC    BL2'0'              RECORD INDICATORS             89337\n&P.RLCT  DC    BL2'0'              OFFSET TO RELOCATE SECTION    89337\n&P.VAR   DC    BL2'0'              LENGTH OF EXCP COUNT FIELDS   89337\n*                                  (INCLUDING THESE TWO BYTES)   89337\n&P.EXCP  EQU   *                   DEVICES USED AND EXCP COUNTS  89337\n*                                                                89337\n*                                  EACH ENTRY                    89337\n*                                                                89337\n&P.DEVC  DC    BL1'0'              DEVICE CLASS                  89337\n&P.UTYP  DC    BL1'0'              UNIT TYPE                     89337\n&P.CUAD  DC    BL2'00'             CHANNEL/UNIT ADDRESS          89337\n&P.VDV   EQU   X'80'               VIRTUAL INDICATOR           @Y30AQPF\n&P.NEXCP DC    BL4'0'              EXCP COUNT                    89337\n*                                                                89337\n&P.OXCP  DC    XL8'0'        OUTPUT COUNTS                       89337\n&P.VARA  DC    BL1'0'              LENGTH OF CPU AND ACCT. SECTION\n*                                  (NOT INCLUDING THIS BYTE)     89337\n&P.CPUTM DC    BL3'0'              STEP CPU UNDER TCB(.01 SEC) @YL026WA\n&P.NBRAC DC    BL1'0'              NUMBER OF ACCOUNTING FIELDS   89337\n&P.RCEND EQU   *             END OF SMF RECORD                   89337\n&P.STAXP DC    5A(0)         STAE PARAMETER AREA                 89327\n&P.SAVPR DC    X'0'          GLOBAL PRIVILEGE FLAGS              89327\n&P.SAVPO DC    X'0'          ADDITIONAL OPTIONS                  89327\n&P.SAFIO EQU   X'80'         DELAY IF INTERVENTION REQ.          89327\n&P.SAFIG EQU   X'40'         DELAY IF ANY ERROR                  89327\n&P.SAFSH EQU   X'20'         MULTIPLE INPUT CRTS PER TASK        89327\n&P.SAPRM EQU   X'10'         WRITE PROMPT ON DISPLAY CYCLE       89327\n&P.SNGAM EQU   X'08'         GAMES NOT PERMITTED ON THIS CRT     89327\n&P.SAMUL EQU   X'02'           MULTI-TASKING ENVIRONMENT         89327\n&P.SAFVM EQU   X'01'         RUNNING UNDER VM                    89327\n&P.SEDFG DC    X'00'         EDIT OPTIONS FOR SQEXCP             89327\n&P.SENED EQU   X'80'           BYPASS EDITING                    89327\n&P.SENCM EQU   X'40'           BYPASS BUFFER COMPRESSION         89327\n&P.SENCT EQU   X'20'           BYPASS COMPR. ON NEXT WRITE ONLY  89327\n&P.SENCO EQU   X'10'           BYPASS COLOR MAPPING ON NEXT WRT  89327\n         DC    X'00'         RESERVED                            89327\n&P.SECFG DC    X'00'         SECURITY FLAGS                      89327\n&P.SECRQ EQU   X'80'           SIGNON REQUIRED                   89327\n&P.SECMD EQU   X'20'           SIGNON REQ. FOR ANY CONV.         89327\n&P.SECUN EQU   X'40'           SIGNON FOR PRIV. ONLY             89327\n&P.SECON EQU   X'02'           USER SIGNED ON                    89327\n&P.SIMFG DC    X'00'         EXTENDED FLAGS                      89327\n&P.SICRT EQU   X'80'           OUTPUT IS TO A CRT                89327\n&P.SIPRT EQU   X'40'           PRINTED OUTPUT REQUESTED          89327\n&P.SITSO EQU   X'20'           TSO FLAG (SAME AS OPTSO)          89327\n&P.SIVTM EQU   X'10'           RUNNING UNDER VTAM                89327\n&P.SIFSC EQU   X'08'           FULL-SCREEN I/O SUPPORT PRESENT   89327\n&P.SIF78 EQU   X'04'           EXTENDED HIGH-LIGHTING AVAILABLE  89327\n&P.SIF79 EQU   X'02'           SEVEN-COLOR SUPPORT AVAILABLE     89327\n&P.SINPR EQU   X'01'           PRINT FUNCTION PERMANENTLY DISABLED\n.NOTKERM SPACE 2\n&P.PTITL DC    0A(0),CL137' '\n         ORG   &P.PTITL\n&P.PH137 DC    H'137,0',C'1'\n&P.PTITX DC    CL60'     *****     EXHIBIT TERMINAL ACTIVITY LOG     ***\n               ***     '\n&P.PTITE DC    C'RUN ON '\n&P.PTIDT DC    CL6'YY.DDD',C' AT '\n&P.PTITM DC    CL8'HH:MM:SS',CL4' '\n         DC    C'PAGE'\n&P.PTIPG DC    C'123456'\n&P.PTILE EQU   &P.PTITE-&P.PTITX\n         ORG   &P.PTITL+137\n&P.PVLIN DC    0A(0),AL2(137,0)    PRINT LINE\n&P.PFLIN DC    CL133' '      PRINT DATA\n         ORG   &P.PFLIN+5\n&P.PLNDC DC    C'WRITE AT LINE '\n&P.PLNAD DC    C'  ',C'   **'\n&P.PLNTX DC    CL80' ',C'**'\n         ORG   &P.PVLIN+138 ,   SET FOR NEXT LINE\n&P.PVLN2 DC    0A(0),AL2(137,0)    PRINT LINE 2\n&P.PFLN2 DC    CL133' '      PRINT DATA\n&P.BINDS DC    XL120'0'      SESSION INFO (CURR MAX IS 88 BYTES)\n&P.STAVC VCON   'EXH513E EXHIBIT  ABENDED SXXX; APSW=FF00CCCC FFAAAAAA;*\n                PSW=FF00CCCC FFAAAAAA'   STAE ABEND MESSAGE\n&P.STAMG EQU   &P.STAVC+4,*-&P.STAVC+4,C'C'\n&P.STADB DC    D'0'          STAE WORK SPACE\n         DC    CL73' '       WITH ABOVE, REGISTER FORMAT AREA\n         SPACE 1\n*        BUFFER PREFIX FOR 3180 EXPLICIT PARTITION DATASTREAM    88243\n&P.XPART DC    X'F3000A0C'   CCW; SIZE; CREATE PARTITION         88243\n&P.XPNM  DC    X'00',X'0000' PART.ID; CELL, 12/14 BIT; UNPROT    88243\n&P.XPROW DC    X'0018'       ROWS                                88243\n&P.XPCOL DC    X'0050'       COLUMNS                             88243\n&P.DSSIZ DC    X'0000'       SIZE OF DATA STREAM                 88243\n         DC    X'4000'       3270DS ID; CCW FOLLOWS              88243\n&P.PRCCW DC    X'F5'         CCW CODE FOR WRITE TYPE\n&P.BUFF  DC    (&MAXLINE)CL&MAXWITH' '    WORK BUFFER            92269\n&P.BUFND DC    (&MAXLINE/2+1)CL&MAXWITH' ' MSG LINE / COLOR+HILIGHT\n&P.BUFLN EQU   &P.BUFND-&P.BUFF   BUFFER LENGTH\n&P.BUFIN DC    CL256' ' 1/2  INPUT AREA  (TTY-WHOLE, CRT 1/2)\n&P.BUFTY DC    (&MAXLINE)CL(&MAXWITH+3)' '  LEAVE ROOM FOR ATB PER LINE\n*                                       2/2 (TTY-PREV.BUF, CRT - INPUT)\n&P.BUFIL EQU   *-&P.BUFIN    LENGTH OF INPUT BUFFER              93190\n&P.WORKL EQU   *-&P.WORK     LENGTH OF STORAGE\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPPARSE": {"ttr": 7942, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x03\\x10_\\x01\\x08%\\x0f\\x00\\x07\\x005\\x00%\\x00\\x18\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2003-04-15T00:00:00", "modifydate": "2008-09-06T00:07:00", "lines": 53, "newlines": 37, "modlines": 24, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPPARSE &DSECT=YES,&PFX=PAR                  NEW 2003.091 GYP\n.*--------------------------------------------------------------------*\n.*  THIS MACRO MAPS THE USER'S REQUEST PARAMETERS FOR @PARSER         *\n.*--------------------------------------------------------------------*\n         LCLC  &P\n&P       SETC  '&PFX'\n         AIF   ('&DSECT' NE 'YES').ALTSECT\n&PFX.DSECT DSECT ,\n         AGO   .NODSECT ,\n.ALTSECT ANOP  ,\n&PFX.DSECT  DS 0D            PLANT A LABEL\n.NODSECT AIF   ('&NM' EQ '').NOLABEL\n&NM      DS    0F\n.NOLABEL AIF   ('&NM' EQ '&PFX'.'PARM').NOLPARM\n&PFX.PARM   DS 0F            DEFINE START OF PARM\n.NOLPARM ANOP  ,\n.*--------------------------------------------------------------------*\n.*  USER'S INFO: TEXT ADDRESS/LENGTH/KEYWORDS/FLAGS/REQUESTS          *\n.*--------------------------------------------------------------------*\n&PFX.@TEXT  DC A(0)          ADDRESS OF TEXT TO BE PARSED\n&PFX.#TEXT  DC F'0'          LENGTH OF TEXT\n&PFX.@KEYS  DC A(0)          ADDRESS OF KEYWORD TABLE (OPTIONAL)\n.*\n&PFX.$TYPE  DC X'00'         REQUEST FLAGS (PARSE OPT=)\n&PFX.$TPBK  EQU X'00'          SEPARATE WORDS BY SPACES ONLY\n&PFX.$TPBC  EQU X'01'          SEPARATE BY COMMAS AND SPACES\n&PFX.$TPKW  EQU X'02'          SEPARATE BY =, COMMAS, SPACES\n&PFX.$TPLS  EQU X'03'          SEPARATE BY =, COMMAS, SPACES, LISTS\n&PFX.$TPLI  EQU X'04'          SEPARATE BY =, COM, SPC, LIST ITEMS\n&PFX.$RQFG  DC X'00'         REQUEST PROCESSING FLAGS\n&PFX.$PARK  EQU X'80'          TREAT XXX(YYY) AS KEYWORD=, NOT DSN(MEM)\n&PFX.$COSP  EQU X'40'          TREAT (XX,YY) AS SEPARATE TEXT STRINGS\n&PFX.$COKW  EQU X'20'          TREAT : COLON AS KEYWORD SEPARATOR\n&PFX.$COUQ  EQU X'10'          STORE QUOTED STRING IN UNQUOTED FORM\n&PFX.$COMI  EQU X'02'          TREAT MINUS AS END CHARACTER     GP08250\n&PFX.$COUP  EQU X'01'          UPPER CASE EVERYTHING            GP08095\n.*--------------------------------------------------------------------*\n.*  PARSER INFO: RESULT CHAIN/CONDCODE/REASON/FLAGS/COUNTS            *\n.*--------------------------------------------------------------------*\n            DS 0F\n&PFX.CLRST  EQU *              START OF AREA CLEARED ON ENTRY\n&PFX.@TABL  DC A(0)          ADDRESS OF RESULT TABLE (MACRO MAPPARST)\n&PFX.#CODE  DC A(0)          RESULT CONDITION CODE\n&PFX.#REAS  DC A(0)          RESULT REASON CODE\n&PFX.$FLGS  DC X'00'         RETURN PROCESSING FLAGS\n&PFX.#OPER  DC X'00'         RETURN NUMBER OF OPERANDS\n&PFX.#OPOS  DC X'00'         RETURN NUMBER OF POSITIONALS\n&PFX.#OPKW  DC X'00'         RETURN NUMBER OF KEYWORDS\n&PFX.CLEAR  EQU &PFX.CLRST,*-&PFX.CLRST,C'X'  AREA TO CLEAR\n.*  ABOVE AREA CLEAR IN PARSER INITIALIZATION\n&PFX.SIZE  EQU  *-&PFX.PARM   AREA SIZE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPPARST": {"ttr": 7944, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00(\\x01\\x03\\x10_\\x01\\x03\\x11\\x7f\\tP\\x008\\x007\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-04-15T00:00:00", "modifydate": "2003-04-27T09:50:28", "lines": 56, "newlines": 55, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPPARST &DSECT=YES,&PFX=PRS                  NEW 2003.091 GYP\n.*--------------------------------------------------------------------*\n.*  THIS MACRO MAPS INDIVIDUAL RETURN ENTRIES FROM A @PARSER CALL     *\n.*--------------------------------------------------------------------*\n         LCLC  &P\n&P       SETC  '&PFX'\n         AIF   ('&DSECT' NE 'YES').ALTSECT\n&PFX.DSECT DSECT ,\n         AGO   .NODSECT ,\n.ALTSECT ANOP  ,\n&PFX.DSECT  DS 0D            PLANT A LABEL\n.NODSECT AIF   ('&NM' EQ '').NOLABEL\n&NM      DS    0F\n.NOLABEL AIF   ('&NM' EQ '&PFX'.'TENT').NOLTENT\n&PFX.TENT   DS 0F            DEFINE START OF TEXT ENTRY\n.NOLTENT ANOP  ,\n&P.LINK  DC    A(0)          LINK TO NEXT ENTRY OR ZERO\n&P.@TEXT DC    A(0)          ADDRESS OF TEXT STRING (OR ONE BLANK)\n&P.#TEXT DC    F'0'          LENGTH OF TEXT\n&P.@KEY  DC    A(0)          ADDRESS OF MATCHED KEYWORD ENTRY\n&P.#THEX DC    XL8'0'        IF VALID HEX, VALUE\n&P.#TINT DC    XL8'0'        IF VALID INTEGER, VALUE\n&P.TYPE  DC    X'00'         ENTRY TYPE\n&P.CHAR  DC    C' '          END CHARACTER\n.*\n&P.PROF  DC    X'00'         PROCESSING FLAG\n&P.PFKEY EQU   X'80'           MATCHED KEYWORD\n&P.PFSDT EQU   X'40'           SELF-DEFINING KEYWORD\n&P.PFPOS EQU   X'C0'           MATCHED POSITIONAL\n&P.PFTUE EQU   X'20'           USER EXIT TAKEN\n&P.PFFUE EQU   X'10'           FAILED BY USER EXIT\n&P.PFFKY EQU   X'08'           UNMATCHED KEYWORD\n&P.PFFPO EQU   X'04'           EXCESSIVE POSITIONAL\n&P.PFFOT EQU   X'02'           OTHER ERROR\n&P.PFPAS EQU   X'01'           TESTED AND PASSED\n.*\n&P.STOP  DC    X'00'         END CHARACTER CODE\n&P.STBLK EQU   X'01'           TEXT ENDED AT TERMINAL BLANK/ZERO\n&P.STEQU EQU   X'02'           TEXT ENDED AT = OR (\n&P.STEPL EQU   X'04'           TEXT ENDED AT (\n&P.STEPR EQU   X'08'           TEXT ENDED AT )\n&P.STCOM EQU   X'10'           TEXT ENDED AT COMMA OR SEMI-COLON\n&P.STQUO EQU   X'20'           TEXT IS A QUOTED STRING\n&P.STPAR EQU   X'40'           ONE LEVEL OF PARENTHESES STRIPPED\n&P.STSUB EQU   X'80'           TEXT IS PART OF A LIST\n.*\n&P.FLAGS DC    X'00'         FLAGS\n&P.FGHEX EQU   X'80'           TEXT IS VALID HEX\n&P.FGINT EQU   X'40'           TEXT IS VALID INTEGER (ALSO)\n&P.FGUNQ EQU   X'10'           TEXT IS STRIPPED QUOTED STRING\n&P.KEYWD DC    CL8' '        EDITED TEXT FRAGMENT - FIRST EIGHT BYTES\n&P.$TEXT DC    CL64' '       EDITED TEXT FRAGMENT\n         DS    0A              ALIGNMENT FOR NEXT ENTRY\n&PFX.SIZE  EQU  *-&PFX.TENT   AREA SIZE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPPDS": {"ttr": 7946, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x041\\x0f\\x01\\x041\\x0f\\x155\\x00%\\x00%\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2004-11-05T00:00:00", "modifydate": "2004-11-05T15:35:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         MAPPDS &PDSBLDL=NO   EXPAND SPECIAL DIRECTORY MAPPINGS\n.*       THIS MACRO SHOULD BE PLACED IMMEDIATELY FOLLOWING REQUEST\n.*       FOR IHAPDS PDSBLDL=NO TO MAP LOCAL/SPECIAL DIRECTORY ENTRY\n.*       FORMATS.                                       ADDED ON 82122\n*        USER DATA FOR SPF ENTRIES\n*\n         ORG   PDS2USRD      REDEFINE USER DATA\nSPFVERL  DS    X             VERSION NUMBER\nSPFMODL  DS    X             MODIFICATION LEVEL\nSPFFLGS  DS    X             FLAGS                              GP04234\nSPFGSCLM EQU   X'80'           SCLM OWNED                       GP04234\nSPFMDSEC DS    PL1           TIME MODIFIED - SECONDS            GP04234\nSPFCRTDT DS    PL4           CREATION DATE\nSPFMODDT DS    PL4           MODIFICATION DATE\nSPFMODTM DS    XL2           MODIFICATION TIME (PACKED, NO SIGN)\nSPFCURLN DS    XL2           CURRENT LINE COUNT\nSPFINILN DS    XL2           INITIAL LINE COUNT\nSPFMODLN DS    XL2           NUMBER MODIFIED\nSPFUID   DS    CL7           USER ID\n         DS    C' '            RESERVED (BLANK)\n         DS    CL2' '          RESERVED (BLANK)\nSPFUDLEN EQU   (*-PDS2USRD+1)/2   HALF-WORD LENGTH OF ENTRY\n         SPACE 2\n*        USER DATA PORTION FOR IEBUPDTX CHAINED ENTRIES\n*\n         ORG   PDS2USRD\nDTXSSI   DS    XL4           SSI OR FF200000\nDTXMODNM DS    CL8           PRODUCTION MEMBER NAME\nDTXID    DS    CL2           LIBRARY ID\nDTXMODNO DS    PL2           MODULE NUMBER\nDTXVER   DS    PL2           VERSION NUMBER\nDTXUDLEN EQU   (*-PDS2USRD+1)/2   HALF-WORD LENGTH OF SHORT ENTRY\nDTXTIMES DS    XL4           (OPTIONAL) TIME STAMP YYDDDHHF\nDTXUDLTM EQU   (*-PDS2USRD+1)/2   HALF-WORD LENGTH OF SPECIAL ENTRY\n         ORG   ,\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPPRT": {"ttr": 7948, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x03\\x02_\\x01\\x08\\x08\\x8f\\x18\\x17\\x008\\x007\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2008-03-28T18:17:00", "lines": 56, "newlines": 55, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                        ADDED ON 81201\n&NM      MAPPRT &PREFIX=PU,&DSECT=YES,&EXPARM=NO PRTWORK MAPPING 84171\n         LCLC  &DS,&P\n&P       SETC  '&PREFIX'\n&DS      SETC  '&P'.'PARM'\n         AIF   ('&NM' EQ '').HAVEDS\n&DS      SETC  '&NM'\n.HAVEDS  AIF   ('&DSECT' NE 'YES').NODSECT\n&DS      DSECT ,             MAPPING OF PRTWORK/PUNWORK EXPANSION\n         AGO   .COMDS\n.NODSECT ANOP  ,\n&DS      DS    0H            MAPPING OF PRTWORK/PUNWORK EXPANSION\n.COMDS   ANOP  ,\n&P.DDNAM  DC   CL8' '        PRIMARY DDNAME\n&P.DDALT  DC   CL8' '        ALTERNATE DDNAME\n&P.LPP    DC   H'0'          LINES PER PAGE\n&P.FILL   DC   X'0'          TRANSLATE TABLE UNPRINTABLE CHARACTER\n&P.WIDTH  DC   X'0'          LINE WIDTH FOR TRUNCATION\n&P.TIT#   DC   X'00'         NUMBER OF TITLES\n&P.FOOT#  DC   X'00'         NUMBER OF FOOTERS\n&P.CCFG   DC   X'00'         GLOBAL CARRIAGE CONTROL FLAG\n&P.PRFG   DC   X'00'         OPTION FLAGS\n&P.PUNCH  EQU  X'80'           PUNCH FILE\n&P.FG1BUF EQU  X'10'           SIGNLE BUFFER                    GP08088\n&P.PGXLST EQU  X'04'           EXIT LIST SUPPLIED                84169\n&P.PUPAGE EQU  X'02'           PAGE NUMBERS MAINTAINED IN USER AREA\n&P.PGPAGE EQU  X'01'           PAGE NUMBER FEED-BACK\n*        PAGE NUMBERS PRESENT ONLY IF USER REQUESTED FEED-BACK\n*        OR USER UPDATING.  EXIT LIST (IF PRESENT) FOLLOWS PAGE #S.\n&P.PAGE   DC   H'0'          CURRENT PAGE NUMBER\n&P.SPAGE  DC   H'0'          PAGE NUMBER SINCE LAST TITLE REQUEST\n&P.EXLST DC    A(0)          OPTIONAL EXIT LIST                  84169\n         DC    H'0'            RESERVED                         GP02234\n         DC    H'0'            RESERVED                         GP02234\n*        EXIT LIST FORMAT : 6 BYTES PER ENTRY                    84169\n*          FIRST BYTE: TYPE FLAGS AND END OF LIST X'80'          84169\n*          SECOND BYTE: TITLE, FOOTER OR LINE NUMBER             84169\n*          FOUR BYTES: 0 OR EXIT ADDRESS                         84169\n&P.XOTYPE EQU   0,1,C'B'     EXIT LIST - TYPE FIELD              84171\n&P.XFEND EQU   X'80'           END OF LIST                       84169\n&P.XFOOT EQU   X'04'           FOOTER EXIT                       84169\n&P.XFTIT EQU   X'02'           TITLE EXIT                        84169\n&P.XFLIN EQU   X'01'           LINE EXIT                         84169\n         AIF   ('&EXPARM' EQ 'NO').MEND                          84171\n&P.XONUM EQU   1,1,C'F'      OFFSET TO LINE NUMBER               84171\n&P.XOADDR EQU  2,4,C'A'      OFFSET TO EXIT ADDRESS              84171\n&P.XOLEN EQU   6               LENGTH OF ONE EXIT ENTRY          84171\n&P.XPLIST DSECT ,                                                84171\n&P.XPTYPE DS   X             EXIT TYPE                           84171\n&P.XPNUM  DS   X             LINE NUMBER OR MAXIMUM # OF HDR/FTR 84171\n&P.XPSIZE DS   H             MAXIMUM LINE WIDTH, INCL. RDW+CC    84171\n&P.XPPWAD DS   A             ADDRESS OF PRINTER WORK AREA        84171\n&P.XPSAVE DS   A             ORIGINAL SAVE AREA                  84171\n&P.XPLINE DS   A             ADDRESS OF PRINT LINE(S)            84171\n         DS    A               RESERVED                          84171\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPPRTWK": {"ttr": 7950, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x03\\x10_\\x01\\x08\\x08\\x8f\\x18\\x18\\x00]\\x00]\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-04-15T00:00:00", "modifydate": "2008-03-28T18:18:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                        ADDED ON 81201\n&NM      MAPPRTWK &PREFIX=PW,&WIDTH=    PRINTER WORK AREA MAPPING\n         LCLC  &DS\n         LCLC  &P            SHORT PREFIX\n&P       SETC  '&PREFIX'\n&DS      SETC  '&P'.'WORK'\n         AIF   ('&NM' EQ '').NONAME\n&DS      SETC  '&NM'\n.NONAME  ANOP  ,\n&DS      DSECT ,             MAPPING OF PRINT DCB AND WORK AREA\n&P.LINK   DS   F             LINK TO NEXT GETMAINED AREA\n&P.ID     DS   C'PRT-'       ID OF PRINT FILE 'N'\n&P.SPLEN  DS   F             SUBPOOL/LENGTH OF THIS AREA\n&P.TCB    DS   A             ADDRESS OF OWNING TCB\n&P.DCB@   DS   X'BF',AL3(&P.DCB)  DCB POINTER\n&P.PU@    DS   A             ADDRESS OF USER'S OPEN WORK AREA\n&P.TRAN   DC   F'0'          ADDRESS OF TRANSLATE TABLE OR 0\n&P.DDNAM  DS   CL8           DDNAME\n&P.UCS    DS   CL4           UCS NAME\n&P.FCB    DS   CL4           FCB NAME\n&P.LSTWRK DS   0XL14         WORK AREA FOR EACH FD ENTRY\n&P.LSTLEN DS   A             FIELD LENGTH\n&P.LSTLTX DS   A             ITEM LENGTH\n&P.LSTADD DS   A             ITEM ADDRESS\n&P.LSTDAT DS   X             DATA TYPE\n&P.CUROPT DS   X             CURRENT PROCESSING OPTIONS\n&P.PREOPT DS   X             PRIOR OPTIONS\n&P.LSTEDT DS   X             EDIT OPTIONS\n&P.BUFNXT DS   A             ADDRESS OF NEXT BYTE\n&P.SCRCUR DS   H             BYTES USED IN CURRENT LINE\n&P.FLAG   DS   X             PROCESSING FLAG\n&P.FPUN   EQU  X'80' =PUPUNCH   THIS IS A PUNCH FILE\n&P.FAKE   EQU  X'40'         IN-STORAGE ACCESS METHOD            83275\n&P.FCON   EQU  X'20'         OUTPUT ROUTED TO CONSOLE\n&P.FHEAD  EQU  X'10'         TITLE PRINTED ON THIS PAGE\n&P.FPRINT EQU  X'08'         BUFFER CONTAINS TEXT\n&P.FPXLST EQU  X'04' =PUPGXLST   EXIT LIST PRESENT               84169\n&P.FUPAGE EQU  X'02' =PUPUPAGE   USER MAINTAINS PAGE #S          84169\n&P.FGPAGE EQU  X'01' =PUPGPAGE   USER PAGE # FEED-BACK OPTION\n&P.FLG2  DS    X             PROCESSING FLAGS                    90309\n&P.F3800 EQU   X'80'           IBM 3800 LASER MODE (?)           90309\n&P.F4050 EQU   X'40'           XEROX 4050/9700/2700 ...(?)       90309\n&P.FNUST EQU   X'10'           EJECT TO NEW SHEET                90309\n&P.FOVER EQU   X'02'           REPLACE BOLD(OVERPRINT) BY FONT+1 90309\n&P.FOPTJ EQU   X'01'           INSERT FONT CONTROL CHARACTERS    90309\n&P.FONT# DS    X             CURRENT FONT NUMBER                 90309\n&P.FONTB DS    XL2           FONT # PUSHDOWN STACK               90309\n&P.CHARS DS    4CL4          SAVED CHARACTERS/XEROX SETUP/PAPER  90309\n&P.FONT$ DS    8Y            CHARACTERS/LINE PER FONT (0-7)      90309\n&P.EXTEN DS    2A            SUBPOOL/LENGTH/ADDRESS OF EXTENSION 90309\n&P.SOUTFM DC   CL8' '        SYSOUT FORM NAME (BLANKS IF N/A)    91001\n&P.SOUTWT DC   CL8' '        SYSOUT SPECIAL WRITER NAME          91001\n&P.FILL   DC   AL1(0)        UNPRINTABLE CHARACTER REPLACEMENT\n&P.SOUTCL DC   C' '          SYSOUT CLASS (OR MSGCLASS IF *)     91001\n          DC   AL1(0,0)         RESERVED\n&P.DCB    DCB  DDNAME=ANY,DSORG=PS,MACRF=PM,EROPT=ACC,                 *\n               RECFM=VBSA,LRECL=137,EXLST=&P.EXLIST\n&P.EXLIST DC   0A(0),X'87',AL3(0),A(0,0) +JFCB+@DCBEXIT\n&P.TOPPG  DC   F'0'          EDIT LEN/ADDRESS FOR PAGE NUMBER\n&P.TOPPS  DC   F'0'             DITTO FOR SUB-PAGE\n&P.TOPDT  DC   F'0'             DITTO FOR DATE\n&P.TOPTM  DC   F'0'             AND TIME\n&P.BOTPG  DC   F'0'          EDIT LEN/ADDRESS FOR PAGE NUMBER\n&P.BOTPS  DC   F'0'             DITTO FOR SUB-PAGE\n&P.BOTDT  DC   F'0'             DITTO FOR DATE\n&P.BOTTM  DC   F'0'             AND TIME\n&P.CURLN  DC   H'-1'\n&P.MAXLN  DC   H'60'         MAXIMUM LINES PER PAGE (INCL. TITLES)\n&P.WIDTH  DC   H'0'          DATA WIDTH FOR TRUNCATION\n&P.TIT#   DC   H'0'          NUMBER OF TITLE LINES\n&P.FOOT#  DC   H'0'          NUMBER OF FOOTER LINES\n&P.PAGE   DC   H'0'          CURRENT PAGE NUMBER\n&P.SPAGE  DC   H'0'          PAGE SINCE LAST TITLE CHANGE\n&P.TRTAB  DC   256AL1(0)     TRANSLATE TABLE\n&P.CCSAV  DC   C' '          SAVE PWRECCC OVER PUT\n&P.BUFSP  DC   AL1(0)        SUB-POOL OF GETPOOL REQUEST         83275\n&P.VCON   DC   F'0'          V-FORMAT RECORD HEADER\n&P.RECCC  DC   C' '          CARRIAGE CONTROL\n         AIF   ('&WIDTH' NE '').HAVEW\n&P.REC    EQU  *             DATA RECORD\n         AGO   .MEND         TRUNCATE THE MAPPING\n.HAVEW   ANOP  ,\n&P.REC    DC   CL(&WIDTH+1)' '   TEXT RECORD                     90309\n         DS    0F\n&P.MCREC  DC   CL((&WIDTH+6+3)/4*4)' '   MACHINE CONTROL SAVE RECORD\n&P.MCC    EQU  &P.MCREC+4,1,C'C'        CARRIAGE CONTROL\n         SPACE 1\n         DS    0F\n&P.SIZE  EQU   *-&DS         LENGTH OF FIXED AREA\n&P.ULOP   DC   CL((&WIDTH+6+3)/4*4)' '   UNDERLINE/OVERPRINT RCD\n         DS    0F\n&P.TIT1   DC   CL((&WIDTH+6+3)/4*4)' '   1-14 TITLE/FOOTER RECORDS\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPRDC": {"ttr": 7953, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x10$\\x8f\\x01\\x10$\\x8f\\x16A\\x00-\\x00\\x19\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2010-09-05T00:00:00", "modifydate": "2010-09-05T16:41:00", "lines": 45, "newlines": 25, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPRDC &DSECT=YES,&PFX=                       ADDED ON GP10248\n         LCLC  &DS,&P\n&DS      SETC  'MAPRDC'      SET DEFAULT NAME\n&P       SETC  '&PFX'\n         AIF   ('&NM' EQ '').HAVEDS\n&DS      SETC  '&NM'\n.HAVEDS  AIF   ('&DSECT' NE 'YES').NODSECT\n&DS      DSECT ,             MAPPING OF DEVICE CHARACTERISTICS\n         AGO   .COMDS\n.NODSECT ANOP  ,\n&DS      DS    0H            MAPPING OF DEVICE CHARACTERISTICS\n.COMDS   AIF   ('&PFX' NE '').COMPFX\n&P       SETC  'RDC'\n.COMPFX  ANOP  ,\n&P.CONTY DS    XL2           CONTROLLER TYPE\n&P.CONMD DS    XL1           CONTROLLER MODEL\n&P.DEVTY DS    XL2           DEVICE TYPE\n&P.DEVMD DS    XL1           DEVICE MODEL\n&P.DEVFT DS    XL4           DEVICE & CONTROLLER FEATURES\n&P.DEVCL DS    XL1           DEVICE CLASS (UCBTBYT3)\n&P.DEVCD DS    XL1           DEVICE CODE  (UCBTBYT4)\n&P.PRICY DS    XL2           PRIMARY CYLINDER NUMBER\n&P.PRITK DS    XL2           TRACKS PER CYLINDER\n&P.PRISC DS    XL1           SECTORS PER TRACK\n&P.TRKLN DS    XL3           BYTES PER TRACK (DATA)\n&P.HA0LN DS    XL2           HOME ADDRESS & R0 LENGTH\n&P.CAPCD DS    XL1           TRACK CAPACITY CODE\n&P.CAPFA DS    XL1           TRACK CAPACITY FACTOR\n&P.NKOHD DS    XL2           NON-KEYED OVERHEAD\n&P.KYOHD DS    XL2           KEYED AREA OVERHEAD\n&P.ALTAD DS    XL2           ALTERNATE CYLINDER ADDRESS\n&P.ALTNO DS    XL2           ALTERNATE TRACK NUMBER\n&P.DIAAD DS    XL2           DIAGNOSTIC CYLINDER ADDRESS\n&P.DIANO DS    XL2           DIAGNOSTIC TRACK NUMBER\n&P.SARAD DS    XL2           SA CYLINDER START\n&P.SARNO DS    XL2           SA TRACK NUMBER\n&P.MDRID DS    XL1           MDR ID\n&P.OBRID DS    XL1           OBR ID\n&P.CONTP DS    XL1           CONTROLLER TYPE (?)\n         DS    XL1             RESERVED\n&P.RCDLN DS    XL2           LENGTH OF RECORD\n         DS    XL18            RESERVED\n&P.LEN   EQU   *-&DS         LENGTH OF ONE ENTRY\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPSBALL": {"ttr": 8194, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x045_\\x01\\x10\\x19\\x1f\\x158\\x00\"\\x00\\x1e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2004-12-20T00:00:00", "modifydate": "2010-07-10T15:38:00", "lines": 34, "newlines": 30, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPSBALL &PFX=ALD,&DSECT=\n.**********************************************************************\n.*  THIS MACRO MAPS THE CALLING SEQUENCE FOR SUBALLOC                 *\n.**********************************************************************\n         LCLC  &P\n&P       SETC  '&PFX'\n&NM      MACMAPHD PFX=&PFX,DSECT=&DSECT\n.*                           MAPPING OF USER'S CALLING AREA\n&P.FUN   DC    C' '          FUNCTION CODE (A-ALLOC; U-UNALLOC)\n&P.VER   DC    C' '          VERSION CODE (FOR LATER EXPANSION?)\n&P.DSNAM DC    CL44' '       REQUESTED/RETURNED DATA SET NAME\n&P.MEMBR DC    CL8' '        MEMBER NAME OR BLANK OR HEX ZERO\n&P.DDNAM DC    CL8' '        REQUESTED/RETURNED DD NAME\n&P.MGCL  DC    CL8' '        SMS - MANAGEMENT CLASS\n&P.DACL  DC    CL8' '        SMS - DATA CLASS\n&P.STCL  DC    CL8' '        SMS - STORAGE CLASS\n&P.UNIT  DC    CL8' '        REQUESTED UNIT (OR BLANK)\n&P.STATS DC    CL3' '        NEW/OLD/MOD/SHR\n&P.NDISP DC    CL3' '        CAT/KEE/DEL/UNC/PAS                GP10191\n&P.CDISP DC    CL3' '        CAT/KEE/DEL/UNC/PAS                GP10191\n&P.SPC   DC    CL8' '        CYL/TRK/###(NUMERIC, BLOCKS)\n&P.PRIME DC    CL8' '        PRIMARY AMOUNT\n&P.SECND DC    CL8' '        SECONDARY AMOUNT\n&P.DIR   DC    CL8' '        DIRECTORY BLOCKS\n&P.RETPD DC    CL4' '        RETENTION PERIOD IN DAYS\n&P.DSORG DC    CL3' '        DSORG\n&P.RECFM DC    CL5' '        RECORD FORMAT\n&P.LRECL DC    CL5' '        RECORD LENGTH OR 'X'\n&P.BLKSZ DC    CL5' '        BLOCK SIZE\n&P.KYLEN DC    CL3' '        KEY LENGTH\n&P.VLSER DC    5CL6' '       VOLUME SERIALS\n&P.SIZE  EQU   *-&P.FUN        SIZE                             GP10191\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPSBAWK": {"ttr": 8196, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x10\\x19\\x0f\\x01\\x10\\x19\\x1f\\x159\\x00\\x10\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2010-07-09T00:00:00", "modifydate": "2010-07-10T15:39:00", "lines": 16, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPSBAWK &PFX=ALW,&DSECT=\n.**********************************************************************\n.*  THIS MACRO MAPS THE CALLING SEQUENCE FOR SUBALLOC                 *\n.**********************************************************************\n         LCLC  &P\n&P       SETC  '&PFX'\n&NM      MACMAPHD PFX=&PFX,DSECT=&DSECT\n.*                           MAPPING OF USER'S WORK/RETURN AREA\n&P.RET   DC    F'0'          RETURN CODE\n&P.ERR   DC    F'0'          ERROR CODE\n&P.INF   DC    F'0'          INFORMATIONAL CODE\n         DC    F'0'            SPARE (DEBUG - ALLOC PARM ADDRESS)\n&P.MSG   DC    10CL256' '    RETURNED MESSAGES\n&P.SIZE  EQU   *-&P.RET        SIZE                             GP10191\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPSBP2W": {"ttr": 8198, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x022?\\x01\\x06&?\\x00$\\x00\\x1c\\x00\\x15\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-11-19T00:00:00", "modifydate": "2006-09-20T00:24:00", "lines": 28, "newlines": 21, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPSBP2W &PFX=,&DSECT=NO                         ADDED GP02323\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  THIS MAPPING MACRO IS USED BY SUBP2W TO DEFINE THE RETURN AREA.   *\n.*  AREA ADDRESS IS PASSED BACK IN R1                                 *\n.*                                                                    *\n.*  CURRENTLY USED BY HOB                                             *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         AIF   ('&DSECT' NE '' AND '&DSECT' NE 'YES').NODSECT\n         AIF   ('&NM' EQ '').NODSLAB\n&NM      DSECT ,\n         AGO   .NOLABEL\n.NODSLAB ANOP  ,\nMAPSBP2W DSECT ,\n         AGO   .NOLABEL\n.NODSECT AIF   ('&NM' EQ '').NOLABEL\n&NM      DS    0D\n.NOLABEL ANOP  ,\n&PFX.MONTH1   DC C'MONTH1'     MONTH/WEEK OF MONTH\n&PFX.MONTHL   DC C'MONTHL'     SAME AS MONTH1 IN LAST 7 DAYS/MO\n&PFX.MONDH1   DC C'DAYNN'      DAY OF MONTH\n&PFX.MONDHL   DC C'DAY32'      LAST DAY OF MONTH\n&PFX.WEEKNO   DC C'WEEKXX'     WEEK OF YEAR\n&PFX.WEEKDAY  DC X'07',CL9'SATURDAY'  SET TO CURRENT DAY\n&PFX.JULDATE  DS P'1989123'    JULIAN DATE FOR RUN\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPSCR": {"ttr": 8200, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,                                        ADDED ON 88211\n&NM      MAPSCR &PREFIX=SU,&DSECT=YES,&EXPARM=NO SCRWORK MAPPING\n         LCLC  &DS,&P\n&P       SETC  '&PREFIX'\n&DS      SETC  '&P'.'PARM'\n         AIF   ('&NM' EQ '').HAVEDS\n&DS      SETC  '&NM'\n.HAVEDS  AIF   ('&DSECT' NE 'YES').NODSECT\n&DS      DSECT ,             MAPPING OF SCRWORK EXPANSION\n         AGO   .COMDS\n.NODSECT ANOP  ,\n&DS      DS    0H            MAPPING OF SCRWORK EXPANSION\n.COMDS   ANOP  ,\n&P.DDNAM  DC   CL8' '        DDNAME (BTAM OR VTAM)\n&P.DDALT  DC   CL8' '        ALTERNATE DDNAME (BTAM) OR LU ID (VTAM)\n&P.HIL    DC    X'07'        MASK FOR EXTENDED HIGH-LIGHTING\n&P.LPP    DC   X'0'          PREFERRED LINES PER PAGE\n&P.FILL   DC   X'0'          TRANSLATE TABLE UNPRINTABLE CHARACTER\n&P.WIDTH  DC   X'0'          MAXIMUM WIDTH TO USE (0, 80 OR 132)\n&P.TIT#   DC   X'00'         NUMBER OF TITLES\n&P.FOOT#  DC   X'00'         NUMBER OF FOOTERS\n&P.COL    DC   X'07'         MASK FOR EXTENDED COLOR\n&P.PRFG   DC   X'00'         OPTION FLAGS\n&P.FVTAM  EQU  X'80'           USE VTAM RATHER THAN BTAM\n&P.PGXLST EQU  X'04'           EXIT LIST SUPPLIED                84169\n&P.PUPAGE EQU  X'02'           PAGE NUMBERS MAINTAINED IN USER AREA\n&P.PGPAGE EQU  X'01'           PAGE NUMBER FEED-BACK\n*        PAGE NUMBERS PRESENT ONLY IF USER REQUESTED FEED-BACK\n*        OR USER UPDATING.  EXIT LIST (IF PRESENT) FOLLOWS PAGE #S.\n&P.PAGE   DC   H'0'          CURRENT PAGE NUMBER\n&P.SPAGE  DC   H'0'          PAGE NUMBER SINCE LAST TITLE REQUEST\n&P.EXLST DC    F'0'          OPTIONAL EXIT LIST                  84169\n*        EXIT LIST FORMAT : 6 BYTES PER ENTRY                    84169\n*          FIRST BYTE: TYPE FLAGS AND END OF LIST X'80'          84169\n*          SECOND BYTE: TITLE, FOOTER OR LINE NUMBER             84169\n*          FOUR BYTES: 0 OR EXIT ADDRESS                         84169\n&P.XOTYPE EQU   0,1,C'B'     EXIT LIST - TYPE FIELD              84171\n&P.XFEND EQU   X'80'           END OF LIST                       84169\n&P.XFOOT EQU   X'04'           FOOTER EXIT                       84169\n&P.XFTIT EQU   X'02'           TITLE EXIT                        84169\n&P.XFLIN EQU   X'01'           LINE EXIT                         84169\n         AIF   ('&EXPARM' EQ 'NO').MEND                          84171\n&P.XONUM EQU   1,1,C'F'      OFFSET TO LINE NUMBER               84171\n&P.XOADDR EQU  2,4,C'A'      OFFSET TO EXIT ADDRESS              84171\n&P.XOLEN EQU   6               LENGTH OF ONE EXIT ENTRY          84171\n&P.XPLIST DSECT ,                                                84171\n&P.XPTYPE DS   X             EXIT TYPE                           84171\n&P.XPNUM  DS   X             LINE NUMBER OR MAXIMUM # OF HDR/FTR 84171\n&P.XPSIZE DS   H             MAXIMUM LINE WIDTH, INCL. RDW+CC    84171\n&P.XPPWAD DS   A             ADDRESS OF PRINTER WORK AREA        84171\n&P.XPSAVE DS   A             ORIGINAL SAVE AREA                  84171\n&P.XPLINE DS   A             ADDRESS OF PRINT LINE(S)            84171\n         DS    A               RESERVED                          84171\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPSCRWK": {"ttr": 8202, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01\\x03\\x01\\x1f\\x01\\x03\\x01\\x1f\\x164\\x00f\\x00f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-11T00:00:00", "modifydate": "2003-01-11T16:34:36", "lines": 102, "newlines": 102, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                        ADDED ON 81201\n&NM      MAPSCRWK &PREFIX=SW,&WIDTH=    PRINTER WORK AREA MAPPING\n         LCLC  &DS\n         LCLC  &P            SHORT PREFIX\n&P       SETC  '&PREFIX'\n&DS      SETC  '&P'.'WORK'\n         AIF   ('&NM' EQ '').NONAME\n&DS      SETC  '&NM'\n.NONAME  ANOP  ,\n&DS      DSECT ,             MAPPING OF PRINT DCB AND WORK AREA\n&P.LINK   DS   F             LINK TO NEXT GETMAINED AREA\n&P.ID     DS   C'SCR-'       ID OF PRINT FILE 'N'\n&P.SPLEN  DS   F             SUBPOOL/LENGTH OF THIS AREA\n&P.TCB    DS   A             ADDRESS OF OWNING TCB\n&P.DCB@   DS   X'BF',AL3(SWDCB)  DCB POINTER\n&P.PU@    DS   A             ADDRESS OF USER'S OPEN WORK AREA\n&P.TRAN   DC   F'0'          ADDRESS OF TRANSLATE TABLE OR 0\n&P.DDNAM  DS   CL8           DDNAME\n&P.@BCC DC    A(0)           ADDRESS OF BUFFER PREFIX\n&P.@OBUF DS    A(&P.OBUF)    OUTPUT BUFFER START\n&P.@IBUF DS    A(&P.IBUF)    INPUT BUFFER ADDRESS\n&P.WUMASK DC   XL4'00'       DEVICE CAPABILITY MASKS\n&P.WUDFLT DC   XL4'0'        DEFAULT FD OPTIONS\n&P.LSTWRK DS   0XL14         WORK AREA FOR EACH FD ENTRY\n&P.LSTLEN DS   A             FIELD LENGTH\n&P.LSTLTX DS   A             ITEM LENGTH\n&P.LSTADD DS   A             ITEM ADDRESS\n&P.LSTDAT DS   F             DATA TYPE\n&P.PREOPT DS   F             PRIOR OPTIONS\n&P.CUROPT DS   F             CURRENT PROCESSING OPTIONS\n&P.LSTEDT DS   X             EDIT OPTIONS\n&P.LSTCC  DS   X\n&P.BUFNXT DS   A             ADDRESS OF NEXT BYTE\n&P.SCRCUR DS   H             BYTES USED IN CURRENT LINE\n&P.LSTDO  DC    X'00'        CONTROL FLAG\n&P.FUN    DC    X'00'        CALLER'S REQUEST\n&P.FLIST  EQU   X'80'          BUILD BUFFER FROM FD LIST\n&P.FANAL  EQU   X'40'          ANALYZE USER'S RESPONSE\n&P.FMOVE  EQU   X'10'          MOVE ERROR-FREE INPUT TO MEMORY\n&P.FLOOP  EQU   X'04'          LOOP FDS AND TAKE USER EXIT       87173\n&P.FITEM  EQU   X'01'          SCITEM CALL                      GP03011\n&P.OPT9   DC    X'00'  1/2   FD OPTION BYTES; 0 IF NONE\n&P.OPT7   DC    X'00'  2/2   SECOND OPTION BYTE; DFLT IF MISSING\n&P.LSTXEQ DC    A(0)         ADDRESS OF EXEC FD\n&P.LSTXEN DC    A(0)         END ADDRESS OF EXEC RANGE\n         DC    (4*2)A(0)     PUSH-DOWN STACK\n&P.TRNLOW DC    A(TNTRTAB)   TRANSLATE TABLE\n         SPACE 1                                                 87173\n&P.XEXIT  DC    A(0,0,&P.XPARM)  R15-R1 TO USER (EXIT,LIST,PARM)\n&P.XPARM  DC    A(&P.XSAVE,0,0,0) SAVE/FD/FIW/FDW\n&P.XSAVE  DC    18F'0'       SAVE AREA FOR USER'S USE            87173\n&P.XMYSV  DC    12F'0'       MY SAVE AREA                        87173\n&P.FLAG   DS   X             PROCESSING FLAG\n&P.FVTAM  EQU  X'80' =PUFVTAM   THIS IS VTAM, NOT BTAM\n&P.FAKE   EQU  X'40'         IN-STORAGE ACCESS METHOD            83275\n&P.FTSU   EQU  X'20'         OUTPUT ROUTED TO TSO USER\n&P.FHEAD  EQU  X'10'         TITLE PRINTED ON THIS PAGE\n&P.SETAT  EQU  X'08'           USE SET ATTRIB, NOT SFE\n&P.FPXLST EQU  X'04' =PUPGXLST   EXIT LIST PRESENT               84169\n&P.FUPAGE EQU  X'02' =PUPUPAGE   USER MAINTAINS PAGE #S          84169\n&P.FGPAGE EQU  X'01' =PUPGPAGE   USER PAGE # FEED-BACK OPTION\n&P.FILL   DC   AL1(0)        UNPRINTABLE CHARACTER REPLACEMENT\n&P.DCB    DCB  DDNAME=ANY,DSORG=PS,MACRF=PM,EROPT=ACC,                 *\n               RECFM=VBSA,LRECL=137,EXLST=SWEXLIST\n&P.EXLIST DC   0A(0),X'87',AL3(0),A(0,0) +JFCB+@DCBEXIT\n&P.TOPPG  DC   F'0'          EDIT LEN/ADDRESS FOR PAGE NUMBER\n&P.TOPPS  DC   F'0'             DITTO FOR SUB-PAGE\n&P.TOPDT  DC   F'0'             DITTO FOR DATE\n&P.TOPTM  DC   F'0'             AND TIME\n&P.BOTPG  DC   F'0'          EDIT LEN/ADDRESS FOR PAGE NUMBER\n&P.BOTPS  DC   F'0'             DITTO FOR SUB-PAGE\n&P.BOTDT  DC   F'0'             DITTO FOR DATE\n&P.BOTTM  DC   F'0'             AND TIME\n&P.CURLN  DC   H'-1'\n&P.MAXLN  DC   H'24'         MAXIMUM LINES PER PAGE (INCL. TITLES)\n&P.WIDTH  DC   H'80'         DATA WIDTH FOR TRUNCATION\n&P.BUFSIZ DC   Y(&P.IBUF-&P.OBUF)  BUFFER SIZE\n&P.SCRSIZ DC   Y(24*80)      SCREEN SIZE\n&P.TIT#   DC   H'0'          NUMBER OF TITLE LINES\n&P.FOOT#  DC   H'0'          NUMBER OF FOOTER LINES\n&P.PAGE   DC   H'0'          CURRENT PAGE NUMBER\n&P.SPAGE  DC   H'0'          PAGE SINCE LAST TITLE CHANGE\n&P.QUEREP DC    XL128'0'     WSF QUERY REPLY DATA                87315\n&P.BINDS  DC    XL128'0'     BIND DATA                           87315\n&P.PRSZ  DC    2X'0'         PRIMARY SIZE                        87315\n&P.ALSZ  DC    2X'00'        ALTERNATE SIZE                      87315\n&P.ATTR  DC    XL4'0'        ATTRIBUTE STRING                    87315\n&P.VCON   DC   F'0'          V-FORMAT RECORD HEADER\n&P.RECCC  DC   C' '          CARRIAGE CONTROL\n         AIF   ('&WIDTH' NE '').HAVEW\n&P.REC    EQU  *             DATA RECORD\n         AGO   .MEND         TRUNCATE THE MAPPING\n.HAVEW   ANOP  ,\n&P.REC    DC   CL(&WIDTH)' '   TEXT RECORD\n         DS    0F\n&P.SIZE  EQU   *-&DS         LENGTH OF FIXED AREA\n&P.TIT1   DC   14CL((&WIDTH+5+3)/4*4)' '   14 TITLE/FOOTER RECORDS\n&P.CBUF  DS    16X           BUFFER CONTROL BYTES (VAR. LENGTH)\n&P.OBUF  DS    (27+13)CL132' '  ROOM FOR COLOR OUTPUT\n&P.IBUF  DS    27CL132' '    ROOM FOR FULL INPUT\n&P.BUFND  EQU  *               END OF BUFFERS\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPTSA": {"ttr": 8205, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00S\\x01\\x03\\x14\\x1f\\x01\\x03)\\x0f\\t1\\x00\\x17\\x00\\x16\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-05-21T00:00:00", "modifydate": "2003-10-17T09:31:53", "lines": 23, "newlines": 22, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPTSA &PFX=TSA,&DSECT=\n         GBLC  &ZZZLNM(128)\n         GBLB  &ZZZLFG\n         GBLA  &ZZZLNO\n         LCLC  &P,&N\n&P       SETC  '&PFX'\n&N       SETC  '&NM'\n         AIF   ('&N' NE '').HAVSECT\n&N       SETC  'MAP'.'&P'\n.HAVSECT AIF   ('&DSECT' EQ 'NO').NOSEC\n&N       DSECT ,\n         AGO   .COMSEC\n.NOSEC   AIF   ('&NM' EQ '').COMSEC\n&NM      DS    0D\n.COMSEC  ANOP  ,\n&P.@SERV DC    A(0)          ADDRESS OF @SERVICE ROUTINE\n&P.EXSVC SVC   0             SVC OR BASR TO @SERVICE (TARGET OF EX 0,)\n&P.#SIZE DC    AL2(&P.SIZE)  AMOUNT OF STORAGE GOTTEN\n&P.FIX@  DC    D'0'          BASE OF FIXED OFFSET WORK AREA ADDRESSES\n         SERVWORK OPT=EXPAND  EXPAND FIXED STORAGE SAVERS\n&P.SIZE  EQU   *-&P.@SERV    SIZE TO GET\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPVOLRD": {"ttr": 8207, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\t\\x15\\x8f\\x01\\t\\x15\\x9f 2\\x00\\x1c\\x00\\x19\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2009-06-07T00:00:00", "modifydate": "2009-06-08T20:32:00", "lines": 28, "newlines": 25, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAPVOLRD &DSECT=YES,&PFX=                        ADDED GP09158\n.*\n.*   THIS MACRO MAPS THE DATA RETURNED FROM @VOLREAD USING THE\n.*     VOLREAD TRACK,CCHH    MACRO CALL\n.*\n         LCLC  &DS,&P\n&DS      SETC  'MAPVOLRD'    SET DEFAULT NAME\n&P       SETC  'TRK'\n         AIF   ('&PFX' EQ '').DEFPFX\n&P       SETC  '&PFX'\n.DEFPFX  AIF   ('&NM' EQ '').HAVEDS\n&DS      SETC  '&NM'\n.HAVEDS  AIF   ('&DSECT' NE 'YES').NODSECT\n&DS      DSECT ,             MAPPING OF @VOLREAD TRACK DATA\n         AGO   .COMDS\n.NODSECT ANOP  ,\n&DS      DS    0H            MAPPING OF @VOLREAD TRACK DATA\n.COMDS   ANOP  ,\n&P.CCHH  DC    XL4'0'        CCHH TRACK ADDRESS\n&P.PCYL  DC    FL4'0'        TRACKS PER CYLINDER\n&P.MAXSZ DC    FL4'0'        MAXIMUM (RAW) TRACK CAPACITY\n&P.#BLOK DC    FL4'0'        NUMBER OF BLOCKS (1-N)\n&P.R0DAT DC    XL8'0'        R0 DATA\n&P.@DATA DC    AL4(0)  1/2   ADDRESS OF TRACK DATA\n&P.CURSZ DC    FL4'0'  2/2   CURRENT SIZE OF ALL BLOCKS\n&P.SIZE  EQU   *-&DS           SIZE OF RETURN AREA\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPVTOCS": {"ttr": 8209, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00S\\x00\\x99\\x02\\x0f\\x01\\x01\\x00\\x8f\\x18\\x00\\x00\\xa3\\x00\\xa2\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2001-01-08T18:00:53", "lines": 163, "newlines": 162, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO\n         MAPVTOCS\n         USING *,R7\nNOTMOUNT LA    R2,SMINMT .   GET NOT MOUNTED MESSAGE\n         LA    R3,L'SMINMT\n         B     EXCSLOP\n         SPACE\nPROCERR  CNVX  RDCCHHR,SMIPCC  .    FORMAT THE BAD CCHHR\n         CNVX  RDCCHHR+2,SMIPHH\n         CNVX  RDCCHHR+4,SMIPRR\n         LA    R2,SMIPROC .   PROCESSING ERROR MSG\n         LA    R3,L'SMIPROC\n         B     EXCSLOP\n         SPACE 2\nNEXTDSCB SR    R1,R1\n         IC    R1,CCHHR+4 .  GET CURRENT RECORD NUMBER\n         LA    R1,1(R1) .    POINT TO NEXT\n         STC   R1,CCHHR+4 .   STASH BACK\n         CH    R1,HIGHR .    FIT ON TRACK ?\n         BNH   MVCCHHR .     GO TO MOVE CORRECT CCHHR INTO REQUEST\n         MVI   CCHHR+4,1 .     RESET TO RECORD 1\n         LH    R1,CCHHR+2 .   GET TRACK\n         LA    R1,1(R1) .    UP IT\n         STH   R1,CCHHR+2 .   STASH IT BACK\n         CH    R1,HIGHTRK .   FITS ON CYL ?\n         BL    MVCCHHR .     GO TO MOVE CORRECT CCHHR INTO REQUEST\n         MVC   CCHHR+2(2),ZERO .   CLEAR TRACK #\n         LH    R1,CCHHR .    GET CYL. NO.\n         LA    R1,1(R1) .    UP\n         STH   R1,CCHHR .    STASH BACK\nMVCCHHR  MVC   RDCCHHR,CCHHR .    MOVE REQUESTED CCHHR TO READ\n         CLC   CCHHR(5),HIGHMARK .  IN USED PART OF VTOC ?\n         BHR   R9 .          NO, TAKE END-FILE EXIT\n         SPACE 2\n*        ROUTINE TO GET A DSCB - CCHHR MOVED TO RDCCHHR, BAL R9\n*\nREADDSCB OBTAIN  DSCB .      GET THE DSCB - SEEK\n         CH    R15,H4 .      GOOD COMP CODE ?\n         BE    NOTMOUNT .    NOT MOUNTED\n         BH    4(R9) .       OTHER ERROR\n         B     8(R9) .       NORMAL EXIT\n         SPACE 2\nENDSCAN  L     R10,SPCURR .    GET CURRENT DISPLAY LINE ADDRESS AGAIN\n         SPLINE , ,          GET A FREE LINE\n         BNL   ENDSMI .      END OF PAGE - USE SMI\n         MVC   (40-L'EOFMSG)/2(L'EOFMSG,R10),EOFMSG\n         B     EXCYES .      EXEUNT\nENDSMI   LA    R2,SMIEOF .   GET EOF MESSAGE\n         LA    R3,L'SMIEOF .   AND LENGTH\n         B     EXCSLOP .     AND EXIT\n         SPACE 2\n*        CONDITIONAL PAGE OUTPUT - ONLY IF LINE 2 IS NON-BLANK\n*\nCONPOUT  L     R1,BUFAD .    GET START OF BUFFER\n         CLC   BLANKS,80(R1)   ARE THERE DATA ON FIRST LINE ?\n         BE    PTOP .        NO, SKIP PAGE OUTPUTTING\n         SPACE 2\n*        OUTPUT THE CURRENT PAGE\n*\nPOUT     ST    R9,POUT9 .    SAVE RETURN ADDR.\n         XPOUT ,             WRITE 'MORE', ETC.\n         B     *+8 .         ENTER ONLY\n         B     EXCIN .       LOOK AT NEW INPUT\n         L     R9,POUT9 .    RELOAD AGAIN\n         SPACE 2\n*        INITIALIZE PAGE OUTPUT\n*\nPTOP     ST    R9,POUT9 .    SAVE RETURN ADDR.\n         BALS  R14,BLANKER . CLEAR BUFFER\n         SPINIT 0\n         L     R1,BUFAD .    GET START OF BUFFER\n         MVC   29(L'DSNAM,R1),DSNAM .   PROV. USER DSNAM AS TITLE\n         TR    29(L'DSNAM,R1),TRTAB .  MAKE SURE ITS GOOD\n         MVC   74(L'VOLSER,R1),VOLSER .   ADD VOL-SER\n         SPLINE ,            COND. LINE ADVANCE FOR SMALL SCREEN\n         L     R9,POUT9 .    RESTORE RETURN ADDR.\n         BR    R9 .          RETURN\n         SPACE 2\n*        ROUTINE TO MOVE ONE LINE; AND PAGE OUT IF NECESSARY\n*\nLOUT     STM   R2,R3,LOUT23  .  SAVE CALL REGISTERS\nLOUT1    SPMOVE (R2),(R3)\n         B     *+6 .         PAGE WRITE NEXESSARY\n         BR    R4 .          RETURN, LINE MOVED\n         BALS  R9,POUT .     ELSE OUTPUT THE PAGE AND WAIT\n         LM    R2,R3,LOUT23 .  RESTORE THE PARM REGISTERS\n         B     LOUT1 .       AND MOVE ON TOP OF PAGE\n         SPACE 3\nDSCB     CAMLST  SEEK,1,2,3  COMPLETED BY EXHCCVTO\nSMINMT   SMI    '''ABCXXX'' NOT MOUNTED  '\n         ORG   SMINMT+1+SMILOFF .   OVERLAY DATA PORTION\nVOLSER   DS    CL6 .         VOL-SER\n         ORG   SMINMT+L'SMINMT .    CAN'T USE BLANK ORG\nSMIPROC  SMI   'ERROR PROCESSING CCCC.HHHH.RR  '\n         ORG   SMIPROC+SMILOFF .   OVERLAY DATA PORTION\n         DS    C'ERROR PROCESSING '\nSMIPCC   DS    C'CCCC'\n         DS    C\nSMIPHH   DS    C'HHHH'\n         DS    C\nSMIPRR   DS    C'RR'\n         ORG   SMIPROC+L'SMIPROC\nSMIEOF   SMI   '**** END OF DISPLAY ****  '\n         ORG   SMIEOF+SMILOFF . REDEFINE\nEOFMSG   DC    C'**** END OF DISPLAY ****'\n         ORG   SMIEOF+L'SMIEOF\n         SPACE 2\nPOUT9    DC    F'0' .        RETURN ADDR. SAVE WORD\nLOUT23   DC    2A(0) .       REGISTER STORAGE\n         SPACE\nHIGHTRK  DC    H'0' .        HIGH TRK PER CYL\nHIGHR    DC    H'0' .        HIGH DSCB RECORD PER TRK\n         DS    0H            FORCE ALIGNMENT\nHIGHMARK DC    XL5'0' .      DSCB 1 HIGH ADDRESS\nF6PTR    DC    XL5'0' .      FIRST FORMAT 6 ADDRESS IN INITIAL PROC.\n         DS    0H\nCCHHR    DC    XL5'0' .      CURRENT CCHHR FOR SEQUENTIAL PASS OF VTOC\nRDCCHHR  DC    XL5'0' .      CCHHR FOR 'READDSCB' ROUTINE\nF4PTR    DC    XL5'0' .      CCHHR OF FORMAT 4 DSCB\n         SPACE\nPF       DC    X'0' .        PROCESSING FLAG FOR INDEX, ETC.\nPFIND    EQU   X'80' .       INDEX PAGE REQUESTED\nPFION    EQU   X'40' .       INDEX PAGE ONLY\nPFRAW    EQU   X'01'         DISPLAY DSCBS IN HEX               GP01008\n         SPACE\nDSNCLC   CLC   DS1DSNAM(0),DSNMASK .    MASKED DSNAME TEST\nDSNLEN   EQU   DSNCLC+1 .    LEN - 1 OF MASK, IF ANY\nDSNAM    DC    CL44' ' .     DSNAME FOR SPECIFIC REQUEST PROCESSING\nDSNMASK  DC    CL43' ' .     DSN MASK VALUE, IF USED\n         SPACE 2\n       INSETS  SPINIT,SPMOVE,INHEX,CVH,CNVR,TRTAB\n         INSECT\n         SPACE 2\nWRKINPUT DS    0D .          CAMLST WORK AREA\n         DC    XL100'0' .    WORK AREA\n         DC    XL100'0' .    WORK AREA\n         DC    XL65'0' .     WORK AREA\n         SPACE\n         ORG   WRKINPUT\n     IECSDSL1  1\n         SPACE\n         ORG   WRKINPUT\n     IECSDSL1  2\n         SPACE\n         ORG   WRKINPUT\n     IECSDSL1  3\n         SPACE\n         ORG   WRKINPUT\nDS4DSNAM DS    CL44 .        FORCE OBTAIN IN SAME LOCATION AS FMT 1\n         SPACE\n     IECSDSL1  4\n         SPACE\n         ORG   WRKINPUT\n     IECSDSL1  5\n         SPACE\n         ORG   WRKINPUT\n     IECSDSL1  6\n         SPACE 2\n         ORG   WRKINPUT+148+L'DS1DSNAM+5\nXVTXWORK DS    0D\n         DS    CL256         FORCE WORK SPACE\n         ORG\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAPXWORK": {"ttr": 8213, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x08\\x00\\x00\\x01\\x05(o\\x01\\x13\\t\\x1f\\x019\\x01\\x80\\x01p\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.08", "flags": 0, "createdate": "2005-10-13T00:00:00", "modifydate": "2013-04-01T01:39:00", "lines": 384, "newlines": 368, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,             USED SOLELY BY EXORCIST ROUTINES\n       MAPXWORK &SECT=D\n         COPY OPTIONS\n         AIF   ('&SECT' NE 'D').INLINEA\nEXORWORK DSECT ,\n         AGO   .INLINEB\n.INLINEA ANOP  ,\nWORKHORS CSECT ,\n.INLINEB ANOP  ,\n         DC    CL8'CURR-PIE'\nCURRPIE  DC    F'0'          PIE ADDRESS\nMYPIE    DC    F'0'\nMIEGPR   DC    16F'0'        REGISTERS 0-15 AT TIME OF ERROR     93198\nMIEPSW   DC    F'0'          LEFT-HALF\nMIEADD   DC    F'0'          MODE BIT/ADDRESS\nMIELNIC  DC    F'0'          LENGTH/INTERRUPT CODE\nMIELEN   EQU   *-MYPIE\nMIESAVLN EQU   *-CURRPIE\n         SPACE 1\n         DC    CL8'PREV-PIE'\nCUTEYPIE DC    XL(MIESAVLN)'0'\n         SPACE 1\nDDB      DC    D'0'\nDDB2     DC    D'0'                                             GP05095\nDDB3     DC    D'0'                                             GP05095\nOLDREGS  DS    0XL(16*4)     LENGTH OF REGISTER AREA\nOLDREG0  DC    A(0)          USER'S OLD REGISTER\nOLDREG1  DC    A(0)          USER'S OLD REGISTER\nOLDREG2  DC    A(0)          USER'S OLD REGISTER\nOLDREG3  DC    A(0)          USER'S OLD REGISTER\nOLDREG4  DC    A(0)          USER'S OLD REGISTER\nOLDREG5  DC    A(0)          USER'S OLD REGISTER\nOLDREG6  DC    A(0)          USER'S OLD REGISTER\nOLDREG7  DC    A(0)          USER'S OLD REGISTER\nOLDREG8  DC    A(0)          USER'S OLD REGISTER\nOLDREG9  DC    A(0)          USER'S OLD REGISTER\nOLDREG10 DC    A(0)          USER'S OLD REGISTER\nOLDREG11 DC    A(0)          USER'S OLD REGISTER\nOLDREG12 DC    A(0)          USER'S OLD REGISTER\nOLDREG13 DC    A(0)          USER'S OLD REGISTER\nOLDREG14 DC    A(0)          USER'S OLD REGISTER\nOLDREG15 DC    A(0)          USER'S OLD REGISTER\nCRTECB1  DC    A(0)          POST MAIN TASK FOR CRT I/O\nCRTECB2  DC    A(0)          POST AT CRT I/O COMPLETION\nDUMECB1  DC    F'0'          DUMMY ECB - STOP / MODIFY\nDUMECB2  DC    F'0'          DUMMY ECB - CANCEL\nCRTPARM  DS    0D            CRT SIZES FOR PHYSICAL/SIMULATED TERMINAL\nCRTLEN   DC    H'80'         LINE WIDTH\nCRTNUM   DC    AL2(&CRT/1635*12)  NUMBER OF LINES\nCRTSIZ   DC    H'0'          PHYSICAL CRT - BUFFER SIZE\nCRTPFX   DC    H'0'          PREFIX CHARACTER LENGTH\nCRSPARM  DS    0D          TEST PROGRAM'S CRT VALUES\nCRSLEN   DC    H'0'          LINE LENGTH\nCRSNUM   DC    H'0'          LINE NUMBER\nCRSSIZ   DC    H'0'          SCREEN SIZE\nCRSPFX   DC    H'0'          PREFIX SIZE\nSYMCCW   DC    X'06',AL3(WAITREPL),A(256)  PSEUDO-READ CCW\nCRTCCW   DC    D'0'          I/O REQUEST CCW\nSTEPDCB  DC    A(0,0)        STEPLIB (LOADLIB) DCB OPEN LIST    GP05005\nSTEPDDN  DC    CL8'LOADLIB' .NAME OF STEPLIB (LOADLIB) DD\nSTEPDCB2 DC    A(0,0)        EXORPSYM COPY OF STEPLIB OPEN LIST GP05005\nJOBQDCB  DC    A(0) .        DCB ADDRESS OF SYSJOBQE OR ZERO\nCL16     DC    CL16' '\nBUFPARM  DC    CL8' '        BUFFER PRINT - HEADER\n         SPACE 1\nMILF     DC    X'0'          MILTEN PROCESSING FLAG\nMFATTN   EQU   X'80'         WRITE CANCELLED BY ATTN\nMFLONG   EQU   X'40'         NO ERASE/SUPPRESS TRAILING BLANK SUPPRESS\nMFNOND   EQU   X'20'         NON-DISPLAY FIELD - DON'T PRINT\n         SPACE 1\nSYNTAX   DC    X'00'         SYSIN CONTROL BYTE\nSYNFSKIP EQU   X'02'           SKIP ENTER-ONLY AFTER DUMP\nSYNFOPEN EQU   X'01'           SYSIN IS OPEN\n         SPACE 1\nCRF      DC    X'0'          CRT PROCESSING FLAG\nCRFTSO   EQU   X'80'         TSO TERMINAL FOR SIMULATION\nCRFMIL   EQU   X'40'         MILTEN TERMINAL\nCRFCRT   EQU   X'20'         CRT OUTPUT (ALONE OR WITH ABOVE)\nCRFSYN   EQU   X'10'         SYSIN SUPPLIED AND OPEN\nCRFEND   EQU   X'08'         SYSIN END OF FILE READ\nCRFEOF   EQU   X'04'         SYSIN TO CRT SWITCH SWITCH\nCRFVTAM  EQU   X'02'         VTAM TERMINAL                       82291\nCRFDATA  EQU   X'01'         'WAITREPL' HAS USER INPUT BUFFER\n         SPACE 1\nIOFLAG   DC    X'0'          I/O PROCESSING FLAG\nIOPEND   EQU   X'80'         READ TI PENDING\nIORED    EQU   X'40'         READ COMPLETED\nIOCAN    EQU   X'20'         CANCEL READ ONLY - NO WRITE\nIOPNRIT  EQU   X'10'         SUPPRESS RITE\nIOPATT   EQU   X'08'         ENABLE READ AFTER WRITE\nIOWSF    EQU   X'04'         WSF ISSUED                          87116\n         SPACE 1\nBFMODE   DC    X'0'          BUFFER PRINT OPTIONS\nBFREAD   EQU   X'80'         READ INPUT BUFFER\nBFCORE   EQU   X'40'         IN-CORE BUFFER / BOTH OFF - WRITE BUFFER\nBFCNTL   EQU   X'20'         CONTROL I/O - USE ACTUAL SIZES\nBFSF     EQU   X'08'         3270 - START FIELD FOUND DURING FORMAT\n         SPACE 1\nCOMMODE  DC    X'0'          CONTROL PROGRAM PROCESSING FLAG\nCFCNTL   EQU   X'80'         CP IN CONTROL\nCFTEST   EQU   X'40'         TEST TASK RUNNING\nCFATTN   EQU   X'20'         TEST IN ATTENTION WAIT\nCFEXIT   EQU   X'10'         END OF JOB FLAG\nCFPORD   EQU   X'04'         PRINT SCREEN DETAIL ORDERS/ATTR     90150\nCFCHECK  EQU   X'02'         CHECK WRITE BUFFER CONTENTS         90150\nCFDATA   EQU   X'01'         BUFFER HAS DATA FOR USER READ\nCFNOTEST EQU   255-CFTEST-CFATTN-CFDATA  TEST RESET FLAGS\n         SPACE 1\nHEXTRA   DC    C'0123456789ABCDEF'\nHEXTRT   EQU   HEXTRA-C'0'\n         SPACE 1\nSTAEFLGS DC    X'00'         TEST SUBTASK ESTAE CONTROLS        GP05286\nSFEXIT   EQU   X'80'           EXIT WAS ENTERED                 GP05286\nSTAMFLGS DC    X'00'         MAIN TASK ESTAE CONTROLS           GP05286\n*FEXIT   EQU   X'80'           EXIT WAS ENTERED                 GP05286\nSFS322   EQU   X'40'                                            GP05286\n         SPACE 1\n         DS    0F\nBUF      DC    XL72'0',CL4' '   HANGOVER - OLD BUFFER FOR XCTL / LOAD\nSTIT     WTO   '#  ',MF=L    SUB-TITLE\nSTITD    WTO   '@  ',MF=L    DELAYED/CONDITIONAL SUB-TITLE\nPRITE    DC    0A(0),AL2(137,0)\nMRITE    DC    CL133' '\n         ORG   MRITE+5\nMWRITE   DC    C'WRITE AT LINE '\nMLINEAD  DC    C'  ',C'   **'\nMBUF     DC    CL80' ',C'**'\n         ORG\nREADMISS WTO   '0***** MISSING ATTN OR BAD CODE',MF=L\n         SPACE 2\nPLINE    DC    0A(0),AL2(137,0)\nMLINE    DC    CL133' '\nMSAVE    DC    18F'0'\nSVAR1    DC    18F'0'        TEST TASK TOP SAVE AREA\nSVAR4    DC    18F'0'        SPIE PROCESSING SAVE\nCOMSAVE  DC    6F'0'\n         SPACE 1\nSAVEIT   DC    4A(0)         SPACE FOR CRITICAL REGISTERS\nSPIETRAP DC    A(0)          EXORDUMP, ETC. SPIE TRAP (WAS FRS)\nAYERETA  DC    A(0)\nFWAITIME DC    F'25'         TIMER DELAY  1/4TH SECOND\nMYDEB    DC    10A(0)\n         SPACE 2\n@KEYLAB  DC    A(0)          ADDRESS OF FUNCTION KEY (INTERRUPT) LABELS\nENDCCW   CCW   5,ENDSMI,0,L'ENDSMI\n         AIF   ('&CRT' EQ '2260').END60\nENDPFX   SCRN  (RESTMDT),SBA,(1,1),SF,(PROT,INT)  FINAL WRITES   78037\n         SCRN  '       EXH599I  CIAO   ',SF,(NONE),IC            78280\nENDEND   EQU   *\nENDSMI   EQU   ENDPFX,(ENDEND-ENDPFX),C'C'\n         AGO   .ENDCOM\n.END60   ANOP  ,\nENDSMI   SMI   '0       EXH599I  CIAO     '                      78280\n.ENDCOM  SPACE 1\nWORK     DC    3D'0'\nAYESAVE  DC    6F'0'         PARTIAL SAVE AREA                   86219\nFAIMAT   DC    0A(0),AL2(FAIMATE-*,0),CL5' '\n         DC    C'FAILING INSTRUCTION AT '\nFAIMAD   DC    CL8' '                                            93198\n         DC    C' IS '\nFAIMAI   DC    CL5' '         MNEMONIC\n         DC    C' '\nFAIMAH   DC    CL4' ',C','\n         DC    CL10' '\nFAIMATE  EQU   *\nTRAPREGS DC    16F'0'        REGISTERS WHEN ONEXIT WAS ISSUED\nPSPIE    DC    0A(0),AL2(PSPIEX-*,0)\nMSPIE    DC    CL133'1'\n         ORG   MSPIE+4\nMSPIEDC  DC    C'PROGRAM CHECK     PSW = '\nMPSW     DC    CL17' ',C'  LEN '                                GP13091\nMLNIC1   DC    CL4' ',CL2' '                                    GP13091\nMDCIC    DC    C'INT '                                          GP13091\nMLNIC2   DC    CL4' ',CL3' '                                    GP13091\nMRELOC   DC    C'AT LOC '\nMRAD     DC    CL8' ',C' IN '                                    93198\nMRPGM    DC    CL8' '\nPSPIEX   EQU   *\n         ORG   ,                                                GP01028\n         SPACE 2\nSPIECCW  CCW   1,SPIESMI,0,L'SPIESMI\nOKCCW    CCW   1,DONSMI,0,L'DONSMI\nBADCCW   CCW   1,BADSMI,0,L'BADSMI\nSNAPCCW  CCW   1,SNAPSMI,0,L'SNAPSMI\nAHAPFX   SCRN  (RESTMDT,RESTKBY),SBA,(1,1),SF,(PROT,INT),' AHA  ? '\n         SCRN  SF,(NONE),IC\nAHAEND   EQU   *\n         ORG   AHAPFX\nAHASMI   DS    CL(AHAEND-AHAPFX)\n         SPACE 1\nAHSOPFX  SCRN  (RESTMDT,RESTKBY),SBA,(1,1),SF,(PROT)\n         SCRN  AHSOTXT:,CL80' ','    ECB = ',ECBCODE:,CL8' '\n         SCRN  SF,(PROT,INT),' AHA  ? ',SF,(NONE),IC\nAHSOEND  EQU   *\n         ORG   AHSOPFX\nAHSOSMI  DS    CL(AHSOEND-AHSOPFX)\n         SPACE 1\nSPIEPFX  SCRN  (NONE),SBA,(1,1),SF,(PROT)\n         SCRN  SPIETXT:,CL80' ',IC\nSPIEEND  EQU   *\n         ORG   SPIEPFX\nSPIESMI  DS    CL(SPIEEND-SPIEPFX)\n         SPACE 1\nNOSMI    DC    C'''ENTER'' ONLY'\n         SPACE 1\nBADPFX   SCRN  (RESTMDT,RESTKBY),SBA,(1,1),SF,(PROT,INT)\n         SCRN  'INVALID CONTROL INPUT - REDO :',SF,(NONE),IC\nBADEND   EQU   *\n         ORG   BADPFX\nBADSMI   DS    CL(BADEND-BADPFX)\n         SPACE 1\nDONPFX   SCRN  (RESTMDT,RESTKBY),SBA,(1,1),SF,(PROT,INT)\n         SCRN  'CONTROL REQUEST DONE :',SF,(NONE),IC\nDONEND   EQU   *\n         ORG   DONPFX\nDONSMI   DS    CL(DONEND-DONPFX)\n         SPACE 1\nSNAPPFX  SCRN  (RESTMDT,RESTKBY),SBA,(1,1),SF,(PROT,INT)\n         SCRN  'SNAP DONE  :',SF,(NONE),IC\nSNAPEND  EQU   *\n         ORG   SNAPPFX\nSNAPSMI  DS    CL(SNAPEND-SNAPPFX)\n         SPACE 1                                                 86219\n         DS    0A                                               GP99042\nUSRNMASK DC    X'7FFFFFFF'   USER'S MODE ADDRESSING MASK        GP99042\nUSROMASK DC    X'80000000'   USER'S MODE ADDRESSING MASK        GP99042\nSPEXFLAG DC    X'00'         CONDITION FLAGS                    GP99042\nSPEXSERV EQU   X'80'           PROCESSING A SERVICE REQUEST     GP99042\nSPEXRET  EQU   X'40'           (NORMAL) RETURN VIA SPIE EXIT    GP99042\nSPEXRETU EQU   X'20'           (USER) RETURN VIA SPIE EXIT      GP99042\nSPEXNSYM EQU   X'10'           PSYM STEPLIB FAILED              GP02263\nSPEXING  EQU   X'01'           ALREADY PROCESSING A DUMP        GP99042\nSPEXTEST EQU   SPEXSERV+SPEXRET+SPEXRETU+SPEXING  TEST TASK RESET\nSNAPFLAG DC    X'00'         DUMP ELEMENTS:                     GP99042\nSNPPREG  EQU   X'20'           PRINT REGISTER LINE              GP99042\nSNPPREGS EQU   X'10'           PRINT REGISTERS VS. LOAD LIST    GP99042\nSNPPLOAD EQU   X'08'           PRINT LOAD LIST                  GP99042\nSNPPBUF  EQU   X'04'           PRINT DISPLAY BUFFER             GP99042\nSNPNOT   EQU   X'02'           SKIP INITIAL PAGE EJECT          GP05287\nSNPPPGM  EQU   X'01'           DUMP MEMORY/PROGRAMS             GP99042\nDBUGFLAG DC    X'00'         USER'S SPIE/SNAP OPTIONS           GP99042\nDBFSPALL EQU   X'80'           PRINT EPIE CONTENTS ON ALL ENTRIES\nDBFEXITP EQU   X'40'           PRINT ALL ONEXIT DATA            GP99042\nDBFEXITF EQU   X'20'           TREAT USER'S ONEXIT AS FAILURE   GP99042\nDBFEXITN EQU   X'10'           USER'S ONEXIT SKIPS OUTPUT       GP05310\nDBFNOSTA EQU   X'08'           DON'T ISSUE (E)STAE              GP05321\nDBFONCE  EQU   X'02'           NO RETRY AFTER EXTEST ERROR      GP03275\nDBFEXOR  EQU   X'01'           DEBUG EXORCIST CODE, TOO         GP99050\nAYESPC   DC    C'0'          DOUBLE-SPACE (OR SINGLE)            86219\n*        DATA, DATA, DATA AND GARBAGE\n*\n@TAPROOT DC    A(0)          EXORZAPS - BASE OF MEMBER INFORMATION\n@CURROOT DC    A(0)          EXORZAPS - ROOT ADDRESS FOR CURRENT MEMBER\n@CURRCHN DC    A(0)          EXORZAPS - CURRENT VER OR REP CHAIN ADDR\nMEMBER   DC    CL8' '        EXORZAPS - MEMBER NAME FROM LAST NAME CARD\n@TAPSIZE EQU   *-@TAPROOT      SIZE TO CLEAR IN SUBTASK\n         SPACE 1\nREGNEND  DC    A(0)          APPROX. END OF REGION               78363\nAYERET   DC    A(0)\n@PGMTAB  DC    A(0)          ADDRESS OF PROGRAM TABLE\nOFFEP    EQU   00,8,C'C'        OFFSET TO EPNAME OF CURRENT PGM\nOFFLD    EQU   16,8,C'C'        OFFSET TO EPNAME OF CURRENT LOAD\nOFFGM    EQU   32,8,C'C'        OFFSET TO EPNAME OF CURRENT GETMAIN\nOFFCS    EQU   48,8,C'C'        OFFSET TO EPNAME OF CURRENT CSA\nOFFBF    EQU  144,8,C'C'        OFFSET TO SCREEN BUFFER\nOFFDYN   EQU  160,8,C'C'        OFFSET TO EPNAME OF SPIE DETECTED MOD\n@PGMTABX DC    A(0)          ADDRESS OF PROGRAM TABLE END\n@PGMTABD DC    A(0)          ADDRESS OF END OF DUMPED ENTRIES\n@MAPREG  DC    A(0)          ADDRESS OF REGISTER MAPPING TABLE\n@COMM    DC    A(0)          ADDRESS OF EXHBCOMM\n@SQSP    DC    A(0)          ADDRESS OF EXHBSQSP\n@WORK    DC    A(0)          ADDRESS OF EXHBWORK\n@SRBFG   DC    A(0)          ADDRESS OF WEXFLAG\n@ALLDN   DC    A(0)          ADDRESS OF ALLDONE IN EXORCIST\n@LOOPR   DC    A(0)          ADDRESS OF LOOPER  IN EXORCIST\n@BUF     DC    A(0)          BUFFER ADDRESS\n@WKCMD   DC    A(0)          4K COMMAND WORK AREA               GP04234\n@WKSUB   DC    A(0)          4K SUB-CMD WORK AREA               GP04234\nCRTISAV  DC    4A(0)\nFCLMVC   MVC   1(0,R1),0(R1)   CLEAR STORAGE\nUDISPLAY DC    X'0'          USER VS. TEST MODE                  78284\nUDREQ    EQU   X'80'           DISPLAY REQUESTED                 78284\nUDRUN    EQU   X'40'           DISPLAY COMMAND ISSUED            78284\nUDBAD    EQU   X'04'           DISPLAY BOMBED                    78284\nSNIPFLAG DC    X'00'         SNAP ENTRY CONDITIONS\nSNIPABND EQU   X'80'           FORMAT ABEND INFORMATION\nSNIPDUMP EQU   X'40'           ENTERED FOR -DUMP COMMAND\nSNIPSNAP EQU   X'20'           ENTERED FOR -SNAP COMMAND\nSNIPSPIE EQU   X'10'           ENTERED FOR ESPIE\n         DS    0F            ENSURE CORRECT REGISTER ALIGNMENT\nNEWREGS  DS    0XL(16*4)     LENGTH OF REGISTER AREA\nNEWREG0  DC    A(0)          NEW USER REGISTER\nNEWREG1  DC    A(0)          NEW USER REGISTER\nNEWREG2  DC    A(0)          NEW USER REGISTER\nNEWREG3  DC    A(0)          NEW USER REGISTER\nNEWREG4  DC    A(0)          NEW USER REGISTER\nNEWREG5  DC    A(0)          NEW USER REGISTER\nNEWREG6  DC    A(0)          NEW USER REGISTER\nNEWREG7  DC    A(0)          NEW USER REGISTER\nNEWREG8  DC    A(0)          NEW USER REGISTER\nNEWREG9  DC    A(0)          NEW USER REGISTER\nNEWREG10 DC    A(0)          NEW USER REGISTER\nNEWREG11 DC    A(0)          NEW USER REGISTER\nNEWREG12 DC    A(0)          NEW USER REGISTER\nNEWREG13 DC    A(0)          NEW USER REGISTER\nNEWREG14 DC    A(0)          NEW USER REGISTER\nNEWREG15 DC    A(0)          NEW USER REGISTER\nNEWPSW   DC    0D'0',XL4'0'  NEW PSW, MASK AND STUFF\nNEWIC    DC    A(0)          NEW INSTRUCTION COUNTER, WITH AMODE BIT\nNEWICOF  DC    A(0)          OFFSET TO NEWIC BEFORE USE\nNEWAM    DC    A(0)          NEW AMODE BIT\nOLDPSW   DC    0D'0',F'0'    LEFT PSW\nOLDIC    DC    A(0)          RIGHT PSW WITH AMODE BIT\nOLDLNIC  DC    H'0,0'        LENGTH / INTERRUPT CODE\n         DS    0F            ENSURE CORRECT REGISTER ALIGNMENT\nSNPREGS  DS    0XL(16*4)     LENGTH OF REGISTER AREA\nSNPREG0  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG1  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG2  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG3  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG4  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG5  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG6  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG7  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG8  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG9  DC    A(0)          SNAP REQUEST REGISTER\nSNPREG10 DC    A(0)          SNAP REQUEST REGISTER\nSNPREG11 DC    A(0)          SNAP REQUEST REGISTER\nSNPREG12 DC    A(0)          SNAP REQUEST REGISTER\nSNPREG13 DC    A(0)          SNAP REQUEST REGISTER\nSNPREG14 DC    A(0)          SNAP REQUEST REGISTER\nSNPREG15 DC    A(0)          SNAP REQUEST REGISTER\nSNPPSW   DC    0D'0',XL4'0'  SNAP PSW, MASK AND STUFF\nSNPIC    DC    A(0)          SNAP INSTRUCTION COUNTER, WITH AMODE BIT\nSNPLNIC  DC    A(0)          SNAP PSW LENGTH/CODE\n         DC    X'00'           SPARE                            GP05295\nSNPCMPC  DC    XL3'0'        ESTAE ABEND CODE                   GP05295\nCRTINUMB DC    A(0)                                              94073\nREGNSIZE DC    A(128*1024)   WORKING REGION SIZE                GP04234\nCRTIBAD  WTO   '-*** PROGRAM OR I/O ERROR ***',MF=L\nMONECB   DC    F'0'\nMONTCB   DC    F'0'\nMONHEAD  DC    0A(0),AL2(MONHEADE-MONHEAD,0)\n         DC    C'$            *****   EXORCISE DEBUG PROGRAM   *****  '\n         DC    C'       '\nMONHEADT DC    C'TEST',C' #'\nMONHEADN DC    CL4' '\nMONHEADE EQU   *\nMONCNT   DC    PL2'0'\nMONP1    DC    P'1'\nMONMASK  DC    X'40202120'\n#XPRINT  DC    V(EXORPRNT)   PRINT ROUTINE MAIN ENTRY\n@TRACE   DC    A(0)          FOR PGMTRACE CALLS\n         DEBTRACE MODE=D,CALL=DYN,PRTMODE=DBTFXPRT              GP99116\n         ORG   DBT@UDCB      RESPECIFY THE EXORPRNT ADDRESS\n@XPRINT  DC    V(EXORPRNT)   PRINT ROUTINE MAIN ENTRY\n         ORG   ,\nFPREGS   DC    4D'0'         360/370 STYLE FLOATING REGS        GP11253\nTAILEND  EQU   *\n         SPACE 3\n         AIF   ('&SECT' NE 'D').INLBUFA\nBUFSECT  DSECT\n         AGO   .INLBUFB\n.INLBUFA ANOP\n         ENTRY BUFSECT\nBUFSECT  DS    0D\n.INLBUFB ANOP\nDATALEN  DC    F'0'          USER DATA LENGTH / 0-ENTER ONLY\nWAITREPL DC    CL256' '      3270 ATTN/INPUT BUFFER\nDATAREPL DC    CL256' '      PROGRAM DATA INPUT\n         DC    CL4' ' .      SPACE FOR TSO PREFIX CHARACTERS\n         AIF   ('&CRT' NE '3270').DBUF\nSCREEN   DC    X'C3114040'\n         AGO   .CBUF\n.DBUF    ANOP\n         DC    CL3' '\nSCREEN   DC    C'0'          2260 WITH LNE DEFINITION\n.CBUF    ANOP\nBUFFER   DC    124CL80' '    BUFFER FOR 3290 (62*160)\nMSGBUF   EQU   BUFFER+24*80,80,C'C'  MESSAGE LINE FOR 24*80 BUFFER\n         DC    64CL80' '     OVERFLOW FOR ORDERS                 93198\n         DC    CL4' '        PADDING\nPRTBUF   DC    124CL80' '    SIMULATION PROCESSING BUFFER        93198\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MASKEQU": {"ttr": 8455, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "MAX": {"ttr": 8457, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x041\\x7f\\x01\\x041\\x7f\"\\x12\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2004-11-12T00:00:00", "modifydate": "2004-11-12T22:12:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAX   &R,&A,&TYPE=                                      85195\n         GBLC  &MACPLAB\n         LCLA  &I\n         LCLC  &SUF                                             GP04234\n         AIF   ('&TYPE' EQ 'F' OR '&TYPE' EQ 'A').NOSUF         GP04234\n&SUF     SETC  '&TYPE'                                          GP04234\n.NOSUF   ANOP  ,                                                GP04234\n&I       SETA  &SYSNDX\n&NM      MACPARM &R,&A,OP=C&SUF,OPR=C&SUF.R,MODE=EQU\n         MACPARM ZZZZ&I,OP=BNL,MODE=ONE\n         MACPARM &R,&A,OP=L&SUF,OPR=L&SUF.R,MODE=EQU\nZZZZ&I   DS    0H\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAXH": {"ttr": 8459, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x01\\x04\\x12\\x8f\\x01\\x08'\\x8f\\x00'\\x00\\t\\x00\\x0b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-05-07T00:00:00", "modifydate": "2008-10-04T00:27:00", "lines": 9, "newlines": 11, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MAXH  &R,&A                                     ADDED  GP04128\n         LCLA  &I\n&I       SETA  &SYSNDX\n&NM      MACPARM &R,&A,OP=CH,OPR=CR,MODE=EQU\n         MACPARM ZZZZ&I,OP=BNL,MODE=ONE\n         MACPARM &R,&A,OP=LH,OPR=LR,MODE=EQU\nZZZZ&I   DS    0H\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDEF": {"ttr": 8461, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x00\\x00\\x99\\x06_\\x01\\x08\\x08/\\x16T\\x01\\x0b\\x00\\x01\\x01\\x06\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1999-03-06T00:00:00", "modifydate": "2008-03-22T16:54:00", "lines": 267, "newlines": 1, "modlines": 262, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MDEF  &LIST,&TYPE=,&PFX=,&SECT=\n.*\n.*   MDEF IS THE MACRO USED TO DEFINE ONE ERROR MESSAGE.\n.*     THIS MACRO IS LIMITED TO MESSAGE TABLE MODULES, STARTED WITH\n.*     MDEFHEAD, AND TERMINATED BY MDEFEND. EACH COMBINATION OF\n.*     LANGUAGE AND CHARACTER SET IS EXPECTED TO HAVE A SEPARATE TABLE.\n.*\n.*   &LB      THE NAME FIELD SPECIFIES THE MESSAGE IDENTIFIER\n.*   &PFX     SPECIFIES A PREFIX TO THE MESSAGE ID, AND IS A GLOBAL\n.*            (ONCE USED IT CAN BE CHANGED, BUT NOT TURNED OFF)\n.*\n.*   &LIST    ARE THE WORDS OF THE MESSAGE, SEPARATED BY COMMAS.\n.*      ENTRIES MAY BE:\n.*        1) SIMPLE WORD, E.G.         DSNAME\n.*        2) QUOTED STRING, E.G.       'IT''S'\n.*        3) HEXADECIMAL TEXT, E.G.    X'070809'\n.*        4) REPLACEABLE USER PARAMETER:  *1 - *16\n.*        5) A FUNCTION INVOCATION (DEFERRED)\n.*\n.*   &TYPE    TYPE OF DATA BEING DEFINED. TYPE IS LOCAL, BUT OVERRIDES\n.*        ANY TYPE SPECIFIED IN MDEFHEAD.\n.*\n.*      SUPPORTED ARE:      (DEFAULT IS C IF NOT SPECIFIED ANYWHERE)\n.*        C  CHARACTER CONSTANT (USE FOR X', ETC. ANYWAY)\n.*        G  DBDC VALUE (NOT SUPPORTED YET)\n.*\n.*   REQUIRES INNER MACROS MDEFDICT, AND MACQOTER.\n.*     RELATED MACROS ARE MDEFHEAD, MDEFEND, AND MDEFGBL.\n.*   MUST BE INVOKED IN AN RSECT. CREATES AND USES RSECTS NAMED\n.*   MSGDSCT AND MSGSECT.\n.*\n.*   WHEN SECT=DSECT IS SPECIFIED, MAPPINGS FOR THREE CONTROL BLOCKS\n.*   ARE EXPANDED: MTPDSECT - MAP MESSAGE POINTER\n.*                 MTMDSECT - MAP MESSAGE DEFINITION AND SPECIALS\n.*                 MTDDSECT - MAP DICTIONARY DEFINITION\n.*\n.*                                      V1 WRITTEN 3/1999 BY GYP\n         COPY  MDEFGBL\n         GBLC  &MACQSTR\n         LCLA  &I,&J,&K,&N,&STRCNT,&STRDC\n         LCLC  &CH,&CHIX,&STRING,&LQ,&TCH,&FCODE,&LOTYP,&DCLAB\n         LCLC  &QU,&TP,&LB                                      GP03245\n&ZZSECT  SETC  '&SYSECT'\n         AIF   ('&SECT' EQ 'DSECT').MAPPER\n&LB      SETC  '&NM'         SET LABEL TO SUPPLIED VALUE\n         AIF   ('&ZZMPFX' EQ '').NMDOPF                         GP08078\n&N       SETA  K'&ZZMPFX                                        GP08078\n&DCLAB   SETC  '&LB'(1,&N)                                      GP08078\n         AIF   ('&ZZMPFX' NE '&DCLAB').NMDOPF                   GP08078\n&LB      SETC  '&NM'(&N+1,K'&NM)   REMOVE DUPLICATE PREFIX      GP08078\n.NMDOPF  ANOP  ,                                                GP08078\n&N       SETA  N'&SYSLIST\n&DCLAB   SETC  '&ZZMPFX'.'&LB'  LABEL FOR FIRST/ONLY DEF STRING\n.*  STRING ACCUMULATES ENTRIES FOR THE MESSAGE'S DICTIONARY LIST\n.*  STRCNT CONTAINS THE NUMBER OF ENTRIES\n&STRING  SETC  ''\n&STRCNT  SETA  0\n.*  PFX OVERRIDES GLOBAL PREFIX, IF ANY, UNTIL CHANGED\n         AIF   ('&PFX' EQ '').NONUPFX\n&ZZMPFX  SETC  '&PFX'\n.NONUPFX AIF   (&N GT 0).NUMGOOD\n.*  NOTE THIS MAY APPEAR WHEN USER HAS UNBALANCED APOSTROPHES\n         MNOTE 8,'MDEF: NO MESSAGE TEXT PROCESSABLE'\n         MEXIT ,\n.NUMGOOD AIF   ('&LB' NE '').LABGOOD\n         MNOTE 8,'MDEF: MESSAGE ID (NAME FIELD) OMITTED'\n         MEXIT ,\n.*  MAINTAIN GLOBAL TYPE. NOTE THAT X' IS TREATED AS C WITH X IN DATA\n.LABGOOD ANOP  ,\n&LOTYP   SETC  'C'\n         AIF   ('&ZZMDTYP' EQ '').HAVEGBL\n&LOTYP   SETC  '&ZZMDTYP'\n.HAVEGBL AIF   ('&TYPE' EQ '').GETWORD\n&LOTYP   SETC  '&TYPE'\n.*\n.*  LOOP THROUGH EACH WORD IN THE LIST\n.*\n.GETWORD AIF   (&K GE &N).PLANT\n&K       SETA  &K+1\n&CH      SETC  '&SYSLIST(&K)'\n&FCODE   SETC  ''            NO SPECIAL CODE\n&TCH     SETC  ''            NO SPECIAL TRAILER\n&I       SETA  K'&CH         SEE HOW LONG IT IS\n         AIF   (&I LT 1).COMMA  TREAT AS COMMA\n         AIF   (&I LT 2).WORD   NOTHING SPECIAL?\n         AIF   (N'&SYSLIST(&K) LE 1).NOSUB\n         AIF   ('&SYSLIST(&K,1)'(1,1) EQ '*').PARM\n.NOSUB   AIF   ('&CH'(1,1) EQ '*').PARM\n&TCH     SETC  '&CH'(&I,1)\n         AIF   ('&TCH' EQ '|').TRSP    ABUTTAL?\n         AIF   ('&TCH' EQ '\u00a6').TRSP    ABUTTAL?\n         AIF   ('&TCH' EQ '-').TRCH\n         AIF   ('&TCH' EQ '.').TRCH\n         AIF   ('&TCH' EQ ':').TRCH\n         AIF   ('&TCH' EQ ';').TRCH\n         AIF   ('&TCH' EQ '/').TRCH\n         AIF   ('&TCH' EQ '!').TRCH\n         AIF   ('&TCH' EQ '?').TRCH\n         AIF   ('&TCH' EQ '+').TRCH\n         AIF   ('&TCH' EQ '*').TRCH\n         AGO   .WORD\n.*\n.*  PROCESS A PARM REFERENCE\n.*    GENERAL FORM IS (*N,TYPE,MOD)\n.*    N IS THE PARAMETER NUMBER IN CALL\n.*    TYPE IS C (DEFAULT), I, P, ETC.\n.*    MOD IS A FORMATTING MODIFIER\n.*\n.PARM    ANOP  ,             PRELIMINARY\n&J       SETA  1\n&QU      SETC  '0'\n&TP      SETC  'C'\n         AIF   (N'&SYSLIST(&K) LT 3).PARM2\n&QU      SETC  '&SYSLIST(&K,3)' QUALIFIER, IF ANY\n.PARM2   AIF   (N'&SYSLIST(&K) LT 2).PARM1\n&TP      SETC  '&SYSLIST(&K,2)' FORMATTING TYPE (C, O, X, P, I)\n.PARM1   AIF   ('&TP' NE 'UI' AND '&TP' NE 'IU').PARMTP\n&TP      SETC  'U'\n.PARMTP  AIF   ('&TP' EQ 'CTAPDIIHXBBXXX'(&J,1)).PARMTPF\n&J       SETA  &J+1\n         AIF   (&J LE 16).PARMTP\n.PARMTPF ANOP  ,\n&J       SETA  &J-1\n&TP      SETC  '&J'\n&CH      SETC  '&SYSLIST(&K,1)'\n&TCH     SETC  '&CH'(2,&I-1)  ISOLATE PARM NUMBER\n&FCODE   SETC  'X''E000''+('.'&TCH'.'-1)*256+16*'.'&QU'.'+'.'&TP'\n         AGO   .CODESTR\n.*\n.*  NULL PARAMETER - EXPAND A COMMA AND SPACE\n.*\n.COMMA   ANOP  ,\n&CH      SETC  ','\n&FCODE   SETC  'X''FD00''+C'','''\n         AGO   .CODESTR      ADD JUST A COMMA\n.*\n.*  ABUTTAL - SEE WHETHER PRECEDING CHARACTER IS ALSO SPECIAL\n.*\n.TRSP    ANOP  ,             NO TRAILING SPACE\n&TCH     SETC  ' '\n&FCODE   SETC  'X''FE00''+C'''.'&TCH'.''''  ABUTTAL - NO SPACE\n&CH      SETC  '&CH'(1,&I-1)  DROP TRAILER\n&I       SETA  K'&CH\n&TCH     SETC  '&CH'(&I,1)\n         AIF   (&I LT 2).WORD   TOO SHORT -  PROCESS WORD PROPER\n         AIF   ('&TCH' EQ '-').NSCH\n         AIF   ('&TCH' EQ '.').NSCH\n         AIF   ('&TCH' EQ ':').NSCH\n         AIF   ('&TCH' EQ ';').NSCH\n         AIF   ('&TCH' EQ '/').NSCH\n         AIF   ('&TCH' EQ '!').NSCH\n         AIF   ('&TCH' EQ '?').NSCH\n         AIF   ('&TCH' EQ '+').NSCH\n         AIF   ('&TCH' NE '*').WORD\n.NSCH    ANOP  ,             SPECIAL CHARACTER + ABUTTAL\n&CH      SETC  '&CH'(1,&I-1)  DROP TRAILER\n&FCODE   SETC  'X''FD00''+C'''.'&TCH'.''''\n         AGO   .WORD         PROCESS REST\n.*\n.*  SPECIAL CHARACTER - STRIP FROM WORD, AND ADD LEXICAL SUFFIX ENTRY\n.*\n.TRCH    ANOP  ,\n&CH      SETC  '&CH'(1,&I-1)  DROP TRAILER\n&FCODE   SETC  'X''FD00''+C'''.'&TCH'.''''\n.*\n.*  EXTRACT WORD; SEE WHAT IT IS; ADJUST ACCORDINGLY\n.*  REGARDLESS OF CURRENT FORM, PUT IT IN QUOTES\n.WORD    ANOP  ,\n&I       SETA  K'&CH\n         AIF   (&I LT 3).WORDQ\n         AIF   ('&CH'(1,2) EQ 'X''').WORDH\n         AIF   ('&CH'(1,2) EQ 'B''').WORDH\n         AIF   ('&CH'(1,2) EQ 'C''').WORDC\n         AIF   ('&CH'(1,2) NE 'Z''').WORDQ\n.WORDC   ANOP  ,\n&CH      SETC  '&CH'(2,&I-1)\n         AGO   .WORDQ\n.WORDH   ANOP  ,\n&MACQSTR SETC  '&CH'\n         AGO   .WORDD\n.WORDQ   MACQOTER &CH,OPT=QUOTE,NAME=MDEF,TYPE=&LOTYP\n.*  ADD THIS WORD TO DICTIONARY, OR GET DICTIONARY INDEX IN ZZDCTRT\n.WORDD   MDEFDICT &MACQSTR,TYPE=&LOTYP\n&CHIX    SETC  '00000'.'&ZZDCTRT'\n&J       SETA  K'&CHIX\n&CHIX    SETC  '&CHIX'(&J-4,5)\n.*\n.*  ADD DICTIONARY OFFSET TO STRING, AND UP COUNTER\n.STRINGS AIF   ('&STRING' NE '').APPEND\n&STRING  SETC  'DWD&CHIX-MSGDSCT'\n         AGO   .APPCNT\n.APPEND  ANOP  ,\n&STRING  SETC  '&STRING'.','.'DWD&CHIX-MSGDSCT'\n.APPCNT  ANOP  ,             COUNT ENTRIES IN STRING\n&STRCNT  SETA  &STRCNT+1\n.CODESTR AIF   ('&FCODE' EQ '').TESTDC\n         AIF   (&ZZDOFLN EQ 4).SCALE4\n         AIF   (&ZZDOFLN NE 3).SCALED\n&FCODE   SETC  '('.'&FCODE'.')*256'\n         AGO   .SCALED\n.SCALE4  ANOP  ,\n&FCODE   SETC  '('.'&FCODE'.')*65536'\n.SCALED  AIF   ('&STRING' NE '').SUFFIX\n&STRING  SETC  '&FCODE'\n         AGO   .SUFFCNT\n.SUFFIX  ANOP  ,\n&STRING  SETC  '&STRING'.','.'&FCODE'\n.SUFFCNT ANOP  ,\n&STRCNT  SETA  &STRCNT+1\n.*  WHEN THE STRING HAS AN ARBITRARY NUMBER OF ENTRIES, EXPAND IT\n.*    TO AVOID OVERFLOWING LEGAL LENGTHS\n.TESTDC  AIF   ((&STRCNT-&STRDC) LE 6).GETWORD                  GP08082\nMSGSECT  CSECT ,\n&STRDC   SETA  &STRCNT\n&DCLAB   DC    AL&ZZDOFLN.(&STRING)\n&DCLAB   SETC  ''\n&STRING  SETC  ''\n         AGO   .GETWORD\n.*  LAST WORD PROCESSED. EXPAND MESSAGE DEFINITION\n.PLANT   AIF   ('&STRING' EQ '').PLEITE\nMSGSECT  CSECT ,\n&DCLAB   DC    AL&ZZDOFLN.(&STRING)\n.PLEITE  AIF   (&ZZMSGIX NE 1).PLINT\n&LQ      SETC  'L'''\nLENWDPTR EQU   &LQ&ZZMPFX&LB DEFINE FIELD LENGTH FOR DICT. PTR\n.PLINT   ANOP  ,\n.*  EXPAND POINTER TO MESSAGE STRING JUST CREATED\n&ZZSECT  CSECT ,\n&ZZMSGIX SETA  &ZZMSGIX+1\n&CHIX    SETC  '00000'.'&ZZMSGIX'\n&J       SETA  K'&CHIX\n&CHIX    SETC  '&CHIX'(&J-4,5)\nMPT&CHIX DC    AL&ZZMOFLN.(&ZZMPFX&LB-MSGSECT),CL&ZZIDLEN'&ZZMPFX&LB',A*\n               L2(&STRCNT)\n         AIF   (&ZZMSGIX NE 1).NOMPTLN\nMPTSIZE  EQU   *-MPT&CHIX    DEFINE ENTRY LENGTH\n.NOMPTLN ANOP  ,\n&ZZSECT  CSECT ,\n&CH      SETC  '&ZZMPFX'.'&LB'  GET MESSAGE ID\n         AIF   ('&CH' GE '&ZZMGPRE').SEQOK\n&ZZMGSRT SETC  'IS NOT'      MESSAGES NOT IN SEQUENCE\n.SEQOK   AIF   ('&CH' GE '&ZZMGLO').SEQLO\n&ZZMGLO  SETC  '&CH'         REMEMBER LOWEST ID\n.SEQLO   AIF   ('&CH' LE '&ZZMGHI').SEQHI\n&ZZMGHI  SETC  '&CH'         REMEMBER HIGHEST ID\n.SEQHI   ANOP  ,\n&ZZMGPRE SETC  '&CH'         REMEMBER PREVIOUS ID\n.MEXIT   MEXIT ,\n.MAPPER  ANOP  ,             ENTRY MAPPING - FIXED NAMES\nMTPDSECT DSECT ,             MESSAGE TABLE POINTER ENTRY\nMTPMSGOF DS    AL&ZZMOFLN    OFFSET TO MESSAGE DEFINITION\nMTPMSGID DS    CL&ZZIDLEN    MESSAGE IDENTIFIER\nMTPWDCNT DS    AL&ZZDOFLN    NUMBER OF ENTRIES FOLLOWING\n         SPACE 1\nMTMDSECT DSECT ,             MESSAGE DEFINITION ENTRY\nMTMDICOF DS    AL&ZZDOFLN    ONE OR MORE DICTIONARY OFFSETS OR SPECIALS\nMTSPFUN  EQU   X'D0'           FUNCTION INVOCATION\nMTSPPRM  EQU   X'E0'           CALL PARAMETER INSERTION\nMTSPMETA EQU   X'F0'           SYNTACTICAL FUNCTIONS\n         SPACE 1\nMTDDSECT DSECT ,             DICTIONARY ENTRY DEFINITION\nMTDPHYLN DS    AL1           PHYSICAL ENTRY LENGTH\nMTDLOGLN DS    AL1           LOGICAL ENTRY LENGTH\nMTDTYPE  DS    C             ENTRY TYPE - C (OR G, LATER)\nMTDTEXT  DS    0C            VARIABLE LENGTH TEXT\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDEFDICT": {"ttr": 8707, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x99\\x06\\x8f\\x01\\x08\\x07\\x8f!\\x07\\x00$\\x00$\\x00\\x04\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-03-09T00:00:00", "modifydate": "2008-03-18T21:07:00", "lines": 36, "newlines": 36, "modlines": 4, "user": "GERHARD"}, "text": "         MACRO ,\n         MDEFDICT &WORD,&TYPE=C\n         COPY  MDEFGBL\n         LCLA  &I,&J,&K\n         LCLC  &LQ,&CHIX\n.*  FIND WORD IN DICTIONARY\n.LOOP    AIF   (&I GE &ZZDCTIX).ADDWORD\n&I       SETA  &I+1\n         AIF   ('&WORD' NE '&ZZDCT(&I)').LOOP\n.*  FOUND. RETURN INDEX\n&ZZDCTRT SETA &I\n         MEXIT ,\n.*  NOT FOUND. ERROR IF DICTIONARY FULL; OTHERWISE BUILD ENTRY.\n.*  RETURN INDEX IN ZZDCTRT\n.ADDWORD AIF   (&ZZDCTIX GE &ZZDICMX).MUCH2\n&ZZDCTIX SETA &ZZDCTIX+1\n&ZZDCT(&ZZDCTIX) SETC '&WORD'\n&ZZDCTRT SETA &ZZDCTIX\nMSGDSCT  CSECT ,\n&LQ      SETC  'L'''\n&CHIX    SETC  '00000'.'&ZZDCTIX'\n&J       SETA  K'&CHIX\n&CHIX    SETC  '&CHIX'(&J-4,5)\nDWD&CHIX DC    AL1(&LQ.DWT&CHIX,&LQ.DWT&CHIX,C'&TYPE')\n&K       SETA  K'&WORD\n         AIF   (&K LT 4).NOSPEC\n         AIF   ('&WORD'(1,1) EQ '''' OR '&WORD'(2,1) NE '''').NOSPEC\nDWT&CHIX DC    &WORD         EXPAND SELF-DEFINING TERM\n         AGO   .USECT\n.NOSPEC  ANOP  ,\nDWT&CHIX DC    &TYPE.&WORD\n.USECT   ANOP  ,\n&ZZSECT  CSECT ,\n         MEXIT ,\n.MUCH2 MNOTE 12,'DESIGN LIMIT OF &ZZDICMX DICTIONARY ENTRIES EXCEEDED.'\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDEFEND": {"ttr": 8709, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x99\\x06_\\x01\\x08\\x07\\x8f\\x17\\x12\\x00\\x15\\x00\\x01\\x00\\x15\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1999-03-06T00:00:00", "modifydate": "2008-03-18T17:12:00", "lines": 21, "newlines": 1, "modlines": 21, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MDEFEND ,\n         COPY  MDEFGBL\n         LCLA  &I,&J,&K,&N\n         LCLC  &CH,&CHIX,&STRING\n&CHIX    SETC  '00000'.'&ZZMSGIX'\n&J       SETA  K'&CHIX\n&CHIX    SETC  '&CHIX'(&J-4,5)\nMPTLAST  EQU   MPT&CHIX,MPTSIZE,C'A'  DEFINE LAST MSG PTR FOR MDEFHEAD\n MNOTE *,'************************************************************'\n MNOTE *,'**                                                          '\n MNOTE *,'**  MESSAGE TABLE &ZZSECT CONTAINS &ZZMSGIX MESSAGES,       '\n MNOTE *,'**  AND USED &ZZDCTIX DICTIONARY ENTRIES.                  '\n MNOTE *,'**                                                          '\n MNOTE *,'**  THE LOWEST MESSAGE IDENTIFIER WAS  &ZZMGLO              '\n MNOTE *,'**  THE HIGHEST MESSAGE IDENTIFIER WAS &ZZMGHI              '\n MNOTE *,'**                                                          '\n MNOTE *,'**  THE MESSAGE TABLE &ZZMGSRT IN SORT SEQUENCE.            '\n MNOTE *,'**                                                          '\n MNOTE *,'************************************************************'\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDEFGBL": {"ttr": 8711, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x99\\x06O\\x01\\x08\\x07\\x8f\\x17\\x10\\x00\\x07\\x00\\x04\\x00\\x06\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1999-03-05T00:00:00", "modifydate": "2008-03-18T17:10:00", "lines": 7, "newlines": 4, "modlines": 6, "user": "GERHARD"}, "text": ".*   GLOBAL DEFINITIONS FOR MESSAGE DEFINITION (MDEFXXXX) MODULES\n         GBLA  &ZZDCTIX,&ZZDCTRT,&ZZMSGIX,&ZZLNGIX,&ZZIDLEN\n         GBLA  &ZZDOFLN,&ZZMOFLN,&ZZDICMX\n         GBLC  &ZZMDTYP,&ZZSECT,&ZZMPFX,&ZZTABNM\n         GBLC  &ZZDCT(32000)\n         GBLC  &ZZSTR,&ZZMGLO,&ZZMGHI,&ZZMGPRE,&ZZMGSRT\n&ZZDICMX SETA  32000\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDEFHEAD": {"ttr": 8713, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x99\\x06_\\x01\\x08\\x08O\\x11Q\\x02,\\x00\\x01\\x00\\x9a\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1999-03-06T00:00:00", "modifydate": "2008-03-24T11:51:00", "lines": 556, "newlines": 1, "modlines": 154, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MDEFHEAD &LANG=0001,&PFX=,&VERID=V0R9,&SECT=,&TYPE=,          *\n               &RENT=YES,    (OPTIONAL RENT=NO SLIGHTLY FASTER)        *\n               &LENID=8,     MAXIMUM MESSAGE ID LENGTH                 *\n               &UDATA=0,     AVAILABLE TO DESIGNER                     *\n               &DOFFLEN=2,   LENGTH OF A DICTIONARY OFFSET ENTRY       *\n               &MOFFLEN=2,   LENGTH OF A MESSAGE POINTER OFFSET        *\n               &COM='U.S. ENGLISH / EBCDIC'\n.**********************************************************************\n.*                                                                    *\n.* MDEFHEAD - THIS MACRO IS THE FIRST IN A MESSAGE DEFINITION MODULE. *\n.*       ONLY ONE IS PERMITTED PER ASSEMBLY, AND IT IS ANTICIPATED    *\n.*       THAT EACH MESSAGE MODULE WILL BE COMPLETE FOR ONE PRODUCT.   *\n.*                                                                    *\n.*   AFTER MDEFHEAD, USE ONE MDEF STATEMENT PER MESSAGE.              *\n.*   THE MODULE IS COMPLETED WITH THE MDEFEND MACRO (AND AN END CARD) *\n.*                                                                    *\n.*   PARAMETERS:                                                      *\n.*                                                                    *\n.*   SECT=  EXPANDS IN-LINE TEXT AND RSECT STATEMENTS                 *\n.*   SECT=DSECT  EXPANDS A MAPPING OF THE MODULE HEADER AREA.         *\n.*       NOTE THAT THE ENTRIES PRIOR TO POINT ARE VARIABLE LENGTH.    *\n.*       TO GET CORRECT RESULTS, LOAD THE FIRST FOUR BYTES, MASK WITH *\n.*       X'00000FFF' (RETAIN ONLY DISPLAVEMENT), AND THE LOAD ADDRESS *\n.*       AND USE THAT ADDRESS FOR A USING MTVPOINT                    *\n.*                                                                    *\n.*   LANG=  ANY VALUE LEGAL IN AN A CONSTANT. NOT USED, NOT CHECKED.  *\n.*                                                                    *\n.*   PFX=   WITH SECT=DSECT, THE LABEL PREFIX                         *\n.*          OTHERWISE, THE PREFIX FOR MESSAGE IDENTIFIERS             *\n.*                                                                    *\n.*   TYPE=  USE C OR G(NOT SUPPORTED) - GLOBAL DC TYPE                *\n.*                                                                    *\n.*   VERID= VERSION IDENTIFIER (I.E., V_R_)                           *\n.*                                                                    *\n.*   LENID= MAXIMUM MESSAGE IDENTIFIER LENGTH. LONGER IDS WILL FAIL.  *\n.*          SHORTER ONES ARE LEFT-JUSTIFIED AND BLANK PADDED          *\n.*                                                                    *\n.*   DOFFLEN=2 (LEGAL ARE 2, 3, AND 4) LENGTH OF DICTIONARY OFFSET    *\n.*          ENTRY. USE 2 FOR SMALL MODULES, 3 FOR LARGE.              *\n.*                                                                    *\n.*   MOFFLEN=2 (LEGAL ARE 2, 3, AND 4) LENGTH OF MESSAGE PTR OFFSET   *\n.*          ENTRY. USE 2 FOR SMALL MODULES, 3 FOR LARGE.              *\n.*                                                                    *\n.*   COM=   ARBITRARY TEXT TO IDENTIFY THE MODULE IN A DUMP.          *\n.*                                                                    *\n.*   UDATA= ANY TEXT LEGAL IN AN A CONSTANT.                          *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*   PRODUCES:  RSECT,AM31,RMANY WITH SECT=,  DSECT WITH SECT=DSECT   *\n.*     RSECT NAME MUST APPEAR ON MACRO INVOCATION                     *\n.*     DSECT NAME USES LABEL. IF NONE, DEFAULTS TO MTVDSECT, AND      *\n.*              PFX DEFAULTS TO MTV                                   *\n.*                                                                    *\n.*   PFX.BCODE  BRANCH TO MESSAGE BUILD CODE                          *\n.*   PFX.POINT  LABEL FOR USING                                       *\n.*   PFX.UDAT   USER DATA                                             *\n.*   PFX.LANG   LANGUAGE INDICATOR                                    *\n.*   PFX.MPTR   1/3 FIRST MESSAGE POINTER ADDRESS      |              *\n.*   PFX.MPLN   2/3 LENGTH OF MESSAGE POINTER (2,3,4)  |  BXLE        *\n.*   PFX.MPND   3/3 LAS DEFINED MESSAGE POINTER        |              *\n.*   PFX.@MSG   ADDRESS OF MESSAGE RSECT                              *\n.*   PFX.@DIC   ADDRESS OF DICTIONARY RSECT                           *\n.*   PFX.LMID   MAXIMUM LENGTH OF A MESSAGE IDENTIFIER                *\n.*   PFX.LMOF   SIZE OF MESSAGE OFFSET (2,3,4)                        *\n.*   PFX.LDOF   LENGTH OF MESSAGE OFFSET LIST ENTRY                   *\n.*                                                                    *\n.*   TO LOCATE A MESSAGE:                                             *\n.*                                                                    *\n.*   CALCULATE ADDRESS OF PFX.POINT                                   *\n.*   LM R1,R3,PFX.MPTR - USE BXLE OR (IF ORDERED) BINARY TABLE LOOKUP *\n.*     RESULT IS POINTER TO MESSAGE DEFINITION:                       *\n.*     (2,3,4 BYTE) OFFSET TO MESSAGE WORD LIST; MESSAGE ID           *\n.*     WORDLIST OFFSET IS OFFSET FROM MESSAGE RSECT IN PFX.@MSG       *\n.*   WORDLIST: (2,3,4 BYTE EACH): NUMBER OF ENTRIES FOLLOWING;        *\n.*     A) OFFSET FROM ADDR IN PFX.@DIC TO WORD IN DICTIONARY          *\n.*     B) CODE (>ZZDICMX) FOR SPECIAL FUNCTION (DEFAULT IS 48000)     *\n.*                                                                    *\n.*   DICTIONARY ENTRY:                                                *\n.*     (1 BYTE) PHYSICAL LENGTH OF TEXT                               *\n.*     (1 BYTE) LOGICAL LENGTH OF TEXT                                *\n.*     (1 BYTE) TYPE (C, G, X)                                        *\n.*     (PHYS. LEN) QUOTED STRING                                      *\n.*                                                                    *\n.**********************************************************************\n         COPY  MDEFGBL\n         LCLC  &P,&LBL,&OPDS,&MYSECT\n.*  ESTABLISH GLOBAL VALUES\n&ZZDOFLN SETA  &DOFFLEN      LENGTH OF OFFSET WORD - DICTIONARY LOOKUP\n&ZZMOFLN SETA  &MOFFLEN      LENGTH OF OFFSET WORD - MESSAGE LOOKUP\n&ZZIDLEN SETA  &LENID\n&ZZMDTYP SETC  '&TYPE'       GLOBAL DC ATTRIBUTE (C OR G)\n&LBL     SETC  '&NM'\n&P       SETC  '&PFX'\n&MYSECT  SETC  '&SYSECT'\n.*  CHECK MDEFHEAD USAGE - BY DESIGN, ONE PER MODULE. (IGNORE IF DSECT)\n         AIF   ('&SECT' EQ 'DSECT').UNFORKD\n&ZZMGLO  SETC  (&LENID)'9'   LOWEST ID TO DATE\n&ZZMGHI  SETC  ''            HIGHEST MESSAGE ID TO DATE\n&ZZMGPRE SETC  ''            PREVIOUS MESSAGE ID\n&ZZMGSRT SETC  'IS'          TABLE IS IN SEQUENCE (?)\n&ZZLNGIX SETA &ZZLNGIX+1\n         AIF   (&ZZLNGIX LE 1).UNFORKD\n         MNOTE 4,'ONLY ON MDEFHEAD PER MODULE IS SUPPORTED.'\n.*  SET DEFAULT NAME (MTVDSECT) AND PREFIX (MTV) FOR SECT=DSECT ONLY\n.UNFORKD AIF   ('&P' NE '').UPFX\n&P       SETC  'MTV'         MESSAGE TABLE VECTOR MAPPING\n.UPFX    AIF   ('&NM' NE '').HAVELBL\n&LBL     SETC  'MTVDSECT'\n.HAVELBL AIF   ('&SECT' EQ 'DSECT').MAPPER\n         AIF   ('&NM' NE '').HAVEMOD\n         MNOTE 4,'MDEFHEAD SHOULD HAVE A NAME FIELD'\n.*  EXPAND RSECT FOR MODULE HEADER\n.HAVEMOD ANOP  ,\n&NM      CSECT ,\n&NM      AMODE 31\n&NM      RMODE ANY\n&ZZTABNM SETC  '&NM'\n&OPDS    SETC  ''\n         AIF   ('&P' NE '').COMGO\n&P       SETC  '&NM'(1,3)    IF NO PREFIX - CHEAT AND USE PRODUCT NAME\n         AGO   .COMGO\n.*  ELSE SET DSECT HEADER\n.MAPPER  ANOP  ,             MAP THE MESSAGE TABLE HEADER\n&LBL     DSECT ,             MAP THE MESSAGE TABLE HEADER\n&OPDS    SETC  '0) '         PREVENT UNDEFINED ERRORS\n.COMGO   ANOP  ,\n.*  BUILD BRANCH AROUND, AND BUILD VARIABLE HEADER INFORMATION\n&P.BROF  B     &P.BCODE-&LBL.(,R15)    DEFINE OFFSET TO CONSTANTS\n         DC    AL1(&OPDS.&P.POINT-&P.COPR)  LENGTH OF EYEBALLER\n&P.COPR  DC    C'&LBL &VERID &SYSDATE &SYSTIME '\n         DC    C'COPYRIGHT 2003,2008 EXPERT SYSTEM PROGRAMMING'\n         DC    C' - ALL RIGHTS RESERVED '\n         CNOP  2,4           FORCE ALIGNMENT PRIOR TO POINT\n&P.TBVR  DC    C' 1'         TABLE VERSION 1\n.*  START OF MESSAGE TABLE VECTORS\n         DS   0A             MALIGN\n&P.BCODE B    &P.CODE-&LBL.(,R15)  GO TO MESSAGE BUILDER\n&P.POINT DS   0A   SPECIFY THIS IN USING AFTER CALCULATING ADDRESS\n&P.UDAT  DC    A(&OPDS.&UDATA) USER SPECIFIED DATA\n&P.LANG  DC    A(&OPDS.&LANG) LANGUAGE / CODE PAGE COMBINATION\n&P.MPTR  DC    A(&OPDS.MPT00001) FIRST MESSAGE POINTER (1/3 FOR BXLE)\n&P.MPLN  DC    A(&OPDS.MPTSIZE) SIZE OF MSG PTR ENTRY (2/3)\n&P.MPND  DC    A(&OPDS.MPTLAST) LAST DEFINED MESSAGE (3/3 FOR BXLE)\n&P.@MSG  DC    A(&OPDS.MSGSECT) ADDRESS OF MESSAGE BASE\n&P.@DIC  DC    A(&OPDS.MSGDSCT) ADDRESS OF DICTIONARY START\n&P.LMOF  DC    A(&OPDS.MPTSIZE-&LENID-2) SIZE OF MSG ID OFFSET\n&P.LMID  DC    A(&OPDS.&LENID) LENGTH OF MESSAGE IDENTIFIER (MAX)\n&P.LCOF  DC    A(&OPDS.MPTSIZE-2) SIZE OF LEN OFFSET\n&P.LCID  DC    A(&OPDS.2)    LENGTH OF LENGTH\n&P.LDOF  DC    A(&OPDS.LENWDPTR) LENGTH OF MESSAGE OFFSET LIST ENTRY\n          DC    A(0)           RESERVED\n          DC    A(0)           RESERVED\n          DC    A(0)           RESERVED\n          DC    A(0)           RESERVED\n&P.TCOMD DC    C'MESSAGE TABLE FOR ',C&COM\n&ZZMPFX  SETC  '&PFX'\n&P.CODE  DS    0H            START OF EXECUTABLE CODE\n         AIF   ('&SECT' EQ 'DSECT').MEND\n         SPACE 2\n         STM   R14,R12,12(R13)    SAVE\n         LR    R12,R15       LOCAL BASE\n         DROP  ,\n         USING &LBL,R12\n         AIF   ('&RENT' NE 'YES').NOGET\n         LA    R0,LOCEND-LOCSAVE  DYNAMIC SIZE\n         STORAGE OBTAIN,LENGTH=(0)\n         LR    R9,R1         COPY RETURN\n         USING LOCSAVE,R13   DECLARE GOTTEN STORAGE\n         AGO   .CMGET\n.NOGET   LA    R9,LOCSAVER\n.CMGET   ST    R13,4(,R9)\n         ST    R9,8(,R13)\n         LM    R0,R1,20(R13) RELOAD R0, R1 FOR RENT CASE\n         LR    R13,R9        MAKE NEW SAVE AREA\n         STM   R0,R1,CALLR0  SAVE ENTRY VALUES\n         XC    RETR15(3*4),RETR15   ZERO RETURN VALUES\n         L     R10,CALLR1    RESTORE CALL PARM\n         USING XMSGMGPM,R10   DECLARE IT\n         LM    R8,R9,XMSGBUF  LOAD BUFFER ADDRESS AND LENGTH\n         LTR   R8,R8         HAVE AN ADDRESS ?\n         BNP   DISASTER      NO; TOO BAD\n         CH    R9,=H'44'     AT LEAST MINIMUM LENGTH ?\n         BL    DISASTER      NO; FAIL\n         CLRL  (R8),(R9),FILL=C' '  BLANK THE BUFFER\n         USING MESSBUF,R8    DECLARE THE BUFFER\n         MVC   MESSLEN(4),=X'00040000'  CLEAR BUFFER LENGTH\n         LA    R11,&P.POINT\n         USING MTVPOINT,R11  OR RENAME MTV -> &P\n         LM    R3,R5,MTVMPTR  GET FIRST MESSAGE\n         USING MTPDSECT,R3\n         SPACE 1\nMSGLOOP  LM    R14,R15,MTVLMOF  GET MSG ID OFFSET AND LENGTH\n         SH    R15,=H'1'     CHANGE FOR EXECUTE\n         BM    BADMISS       TAKE A DIVE\n         LA    R14,MTPDSECT(R14)  ADDRESS OF MESSAGE IDENTIFIER\n         CLC   XMSGMID,0(R14)     REQUESTED MESSAGE ?\n         BE    FOUNDREQ\n         BXLE  R3,R4,MSGLOOP\nBADMISS  OICC  4,4           RETURN MESSAGE NOT FOUND\n         MVC   DB(MGBADMSL),MGBADMIS   MISSING MESSAGE DEFINITION\n         MVC   DB+21(8),XMSGMID\n         LA    R2,DB         POINT TO MISSING MESSAGE MESSAGE\n         LA    R5,1          SINGLE MESSAGE ELEMENT\n         B     DICTMSG       OOPS\nBADMDF   OICC  4,4           RETURN MESSSUB NOT FOUND\n         MVC   DB(MGBADMDL),MGBADMDF   MISSING MESSAGE DEFINITION\n         MVC   DB+21(8),XMSGMID\n         LA    R2,DB         POINT TO MISSING MESSAGE MESSAGE\n         LA    R5,1          SINGLE MESSAGE ELEMENT\n         B     DICTMSG       OOPS\n         SPACE 1\nFOUNDREQ LR    R7,R3         (USE OLD MAPPING)\n         DROP  R3\n         USING MTPDSECT,R3\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE  SPACE IT\n         EX    R15,BUILDID   MAKE MESSAGE ID\n         LA    R15,6(,R15)   MAKE MESSAGE LENGTH WITH RDW\n         STH   R15,MESSLEN   STASH IT\n         AL    R14,MTVLMID   SPACE TO WORD COUNT\n         MVI   MSGFLAGS,0    RESET MESSAGE FLAGS\n         SR    R5,R5         CLEAR FOR ICM\n         STH   R5,ENDSPACE   CLEAR ENDING SPACE COUNT\n         ICM   R5,3,0(R14)   GET MESSAGE WORD COUNT\n         BZ    BADMDF        OOPS\n         SPACE 1\n         L     R1,MTVLMOF    GET OFFSET LENGTH AGAIN\n         SLL   R1,2          CONVERT TO VECTOR OFFSET\n         SR    R6,R6         CLEAR FOR ICM\n         EX    0,GETMSGOF-4(R1)  LOAD MESSAGE OFFSET\n         AL    R6,MTV@MSG    MAKE MESSAGE ADDRESS\n         USING MTMDSECT,R6\n         L     R4,MTVLDOF    LENGTH OF DICTIONARY OFFSET\n         LR    R3,R4         COPY\n         SLL   R3,2          CONVERT TO INSTRUCTION INDEX\nDICTLOOP SR    R2,R2         CLEAR FOR ICM\n         CLI   0(R6),MTSPFUN  SPECIAL ENTRY?\n         BL    DICTWORD      NO; DO A WORD\n         CLI   0(R6),MTSPPRM  SPECIAL FUNCTION?\n         BL    BADFUN        YES; PROCESS IT\n         CLI   0(R6),MTSPMETA SPECIAL GIMMICKING?\n         BL    DICTPARM      NO; PROCESS A PARM\n         MVC   ENDCHAR,1(R6)  COPY THE OPTION CHARACTER\n         IC    R2,0(,R6)     GET THE REQUESTED FUNCTION\n         N     R2,=X'0000000F'  ISOLATE REQUEST\n         SLL   R2,1          CONVERT TO HALF-WORD OFFSET\n         LH    R15,METAPHOR(R2) GET CORRESPONDING PROCESSING ROUTINE\n         B     &LBL.(R15)    INVOKE THE PROCESSOR\nMETAPHOR DC    Y(BADFUN-&LBL)      F0 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      F1 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      F2 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      F3 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      F4 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      F5 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      F6 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      F7 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      F8 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      F9 - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      FA - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      FB - UNASSIGNED\n         DC    Y(BADFUN-&LBL)      FC - UNASSIGNED\n         DC    Y(CHARWSP-&LBL)      FD - SUFFIX CHARACTER, SPACE\n         DC    Y(CHARNSP-&LBL)      FE - SUFFIX CHARACTER, NO SPACE\n         DC    Y(BADFUN-&LBL)      FF - UNASSIGNED\n         SPACE 1\n*  CHARNSP - SUPPRESS INTER-WORD SPACING\n*     APPEND THE CURRENT CHARACTER TO PRIOR WORD, UNLESS IT IS A BLANK\nCHARNSP  MVI   ENDSPACE+L'ENDSPACE-1,0  SET NO TRAILING SPACE\n         CLI   ENDCHAR,C' '  IS IT A SPACE ?\n         BNE   CHARNOW       NO; SUFFIX IT\n         B     DICTBUMP      ELSE REQUEST IS DONE\n         SPACE 1\n*  CHARWSP - APPEND CHARACTER TO CURRENT TEXT, AND SET TRAILING SPACE\n*     APPEND THE CURRENT CHARACTER TO PRIOR WORD UNCONDITIONALLY\nCHARWSP  MVI   ENDSPACE+L'ENDSPACE-1,1  APPEND TRAILING SPACE\nCHARNOW  LH    R14,MESSLEN   CURRENT MESSAGE LENGTH\n         LA    R0,1(,R14)    NEW LENGTH\n         STH   R0,MESSLEN    UPDATE LENGTH\n         LA    R14,MESSLEN(R14)  NEXT ENTRY\n         MVC   0(1,R14),ENDCHAR  MOVE SUFFIX CHARACTER\n         B     DICTBUMP      DO NEXT WORD\n         SPACE 1\n*  DICTFUN - INVOKE A FUNCTION FOR PARM N (N=0 - ALL PARMS)\n*    **NOT DEFINED YET**\nDICTFUN  LA    R2,BADFUNC\n         B     DICTMSG\nBADFUN   LA    R2,BADFUNC\n         OICC  4,16\n         B     DICTMSG\n         SPACE 1\n*  DICTPARM - FORMAT CALLER'S PARM N AS SPECIFIED BY FORMAT BYTE\n*\nDICTPARM MVC   WDHED,MGBADTOO  MOVE WORD/MSG HEADER\n*    **FOR TESTING - JUST DISPLAY REQUEST**\n*TEST*   MVC   DB(16),BADPARM\n*TEST*   MVC   DB3(2),0(R6)  GET TEXT WITHOUT 0C4\n*TEST*   UNPK  DB+3+1(5),DB3(3)  SHOW ENTIRE CALL\n*TEST*   TR    DB+3+1(4),TRHEXTAB\n*TEST*   MVI   DB+3+1+4,C'>'\n*TEST*   LA    R2,DB\n         LA    R0,15         MAKE PARAMETER # MASK\n         IC    R2,0(,R6)     LOAD DEFINITION\n         NR    R2,R0         EXTRACT PARAMETER\n         MH    R2,=AL2(XMSGPR2-XMSGPRM)  GET OFFSET\n         LA    R2,XMSGPRM(R2)  POINT TO ADDRESS & LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         ICM   R15,1,5(R2)   LOAD LENGTH\n         BZ    DICTBUMP      NULL VALUE - IGNORE\n         ICM   R14,1,4(R2)   LOAD TYPE\n         BNZ   DICTYPE       USE OVERRIDE TYPE\n         IC    R14,1(,R6)    GET DEFAULT TYPE FROM MESSAGE\nDICTYPE  STC   R14,PROFG     SAVE PROCESSING FLAGS\n         N     R14,=X'0000000F'  DELETE MODIFIER BITS\n         L     R2,0(,R2)     GET PARM ADDRESS\n         N     R2,=X'7FFFFFF'  IGNORE END OF LIST BIT\n         BNZ   DICTBRTY      BRANCH BY TYPE\n         CH    R14,=H'2'     IS IT ADDRESS FUNCTION ?\n         BNE   DICTBUMP      NO; IGNORE ZERO ADDRESS\nDICTBRTY BIX   VAL=(R14),WK=R1,ERR=BADCOD,BASE=&LBL,PFX=UPM,           *\n               LOC=(TEXT,     0 - TEXT                                 *\n               TEXT,          1 - TEXT                                 *\n               ADDR,          2 - ADDRESS                              *\n               SDEC,          3 - SIGNED DECIMAL                       *\n               ADEC,          4 - UNSIGNED DECIMAL                     *\n               SINT,          5 - SIGNED INTEGER                       *\n               AINT,          6 - UNSIGNED INTEGER                     *\n               SHEX,          7 - SIGNED HEX ?                         *\n               AHEX,          8 - HEXADECIMAL                          *\n               SBIN,          9 - SIGNED BINARY                        *\n               ABIN,         10 - UNSIGNED BINARY                      *\n               )             END OF LIST\n         SPACE 1\nUPMSBIN  DS    0H\nUPMABIN  STM   R3,R6,12(R13) SAVE A FEW REGISTERS\n         LR    R3,R15        INPUT LOOP COUNTER\n         SLL   R15,3         NEW OUTPUT LENGTH\n         LA    R4,DB3        SET OUTPUT POSITION\nUPMABINB ICM   R1,8,0(R2)    LOAD BITS TO BE PROCESSED\n         LA    R6,8          DO8 BITS PER BYTE\nUPMABINL LA    R0,C'0'/2     MAKE 0 OR 1 WITH NEXT SHIFT\n         SLDL  R0,1          ISOLATE LEFT-MOST BIT\n         STC   R0,0(,R4)     STASH IT\n         LA    R4,1(,R4)     NEXT BIT POSITION\n         BCT   R6,UPMABINL   DO ALL BITS IN BYTE\n         LA    R2,1(,R2)     NEXT INPUT BYTE\n         BCT   R3,UPMABINB   REPEAT FOR NEXT BYTE\n         LM    R3,R6,12(R13) RESTORE REGISTERS\n         LA    R2,DB3        POINT TO RESULTS\n         B     UPMTEXT       NO EDITING\nUPMSINT  DS    0H\nUPMAINT  XC    DB(16),DB\n         XC    DB2,DB2\n         LA    R14,DB2+8\n         SR    R14,R15       MOVE DESTINATION\n         EX    R15,EXMVT14   MOVE INPUT\n         LM    R0,R1,DB2     LOAD IT\n         CVD   R1,DB+8       PACK LOW WORD\n         B     UPMADIN\n         SPACE 1\nUPMSDEC  DS    0H\nUPMADEC  XC    DB(16),DB     CLEAR TO MAX\n         LTR   R15,R15       ANY LENGTH ?\n         BP    MADECLOK\n   LA  R15,16     *****TEST***** LATER CALCULATE LENGTH\nMADECLOK CH    R15,=H'16'    DESIGN LIMIT ?\n         BH    BADTOO        YES; TOO LONG\n         LA    R14,DB+16     MOVE TO TEMP WORK\n         SR    R14,R15       SET MOVE DESTINATION\n         SH    R15,=H'1'     MAKE EXECUTE LENGTH\n         EX    R15,EXMVT14   MOVE USER'S DATA RIGHT JUSTIFIED\nUPMADIN  MVI   DB3,C' '      SET EDIT FILL BYTE\n         MVI   DB3+1,X'20'     MAKE EDIT BYTE\n         MVC   DB3+2(L'DB3-2),DB3+1   PROPAGATE IT\n         MVI   DB3+30,X'21'  TURN SIGNIFICANCE ON\n         LA    R1,DB3+31     SET DEFAULT SIGNIFICANCE START\n         EDMK  DB3(32),DB    EDIT USER'S TEXT\n         BNM   MADEPLUS\n         TM    PROFG,PFABS   DOING ABSOLUTE VALUE ?\n         BZ    MADEPLUS      YES; IGNORE THE SIGN\n         BCTR  R1,0\n         MVI   0(R1),C'-'    MOVE SIGN TO FRONT\nMADEPLUS LA    R15,DB3+32    GETEND + 1\n         SR    R15,R1        TOTAL LENGTH\n         LR    R2,R1         POINT TO TEXT START\n         B     UPMTEXT       FINAGLE\n         SPACE 1\nUPMADDR  ST    R2,DB2        FORMAT ADDRESS\n         LA    R2,DB2\n         LA    R15,4\n         SPACE 1\nUPMSHEX  DS    0H            TREAT AS UNSIGNED\nUPMAHEX  XC    DB(16),DB     CLEAR TO MAX\n         CH    R15,=H'16'    DESIGN LIMIT ?\n         BH    BADTOO        YES; TOO LONG\n         SH    R15,=H'1'     MAKE EXECUTE LENGTH\n         BM    DICTBUMP       SHOULDN'T GET HERE\n         EX    R15,EXMVCTX   MOVE TEXT TO WORK AREA\n         UNPK  DB3+00(9),DB+00(5)  UNPACK TEXT\n         UNPK  DB3+09(9),DB+04(5)  UNPACK TEXT\n         UNPK  DB3+18(9),DB+08(5)  UNPACK TEXT\n         UNPK  DB3+27(9),DB+12(5)  UNPACK TEXT\n         TR    DB3(35),TRHEXTAB    MAKE DISPLAYABLE\n         LR    R14,R15       COPY INPUT LENGTH-1\n         MVI   DB3+08,C' '   GAP\n         MVI   DB3+17,C' '   GAP\n         MVI   DB3+26,C' '   GAP\n         SRL   R14,2         NUMBER OF INTERWORD GAPS\n         SLL   R15,1         DOUBLE INPUT LENGTH (-2)\n         LA    R15,2(R14,R15)  NEW OUTPUT LENGTH\n         LA    R2,DB3        NEW TEXT\n*NEXT*   B     UPMTEXT       ADJUST\n         SPACE 1\nUPMTEXT  STC   R15,WDHOLEN   INPUT=OUTPUT LENGTH\n         SPACE 1\nMASSAGE  LTR   R15,R15       ANY STRING LENGTH ?\n         BNP   DICTBUMP      BUMP      NO; SKIP IT\n         TM    PROFG,PFDEBL  SUPPRESS DEBLANKING ?\n         BNZ   SKIPDEBL      YES\nLOOPDEBL TM    0(R2),255-C' '    LEADING BLANK/NULL ?\n         BNZ   SKIPDEBL      NO\n         LA    R2,1(,R2)     ADVANCE\n         BCT   R15,LOOPDEBL\n         B     DICTBUMP      ALL GONE\nSKIPDEBL TM    PROFG,PFDEBR  SUPPRESS DEBLANKING ?\n         BNZ   SKIPDEBR      YES\n         LA    R14,0(R15,R2)\nLOOPDEBR BCTR  R14,0         SPACE TO LAST BYTE\n         TM    0(R14),255-C' '   TRAILING BLANK/NULL ?\n         BNZ   SKIPDEBR      NO\n         BCT   R15,LOOPDEBR\n         B     DICTBUMP      ALL GONE\nSKIPDEBR B     DICTMSG2      PROCESS WHAT'S LEFT\nEXMVT14  MVC   0(0,R14),0(R2)  MOVE TEXT RIGHT-JUSTIFIED\nEXMVCTX  MVC   DB(0),0(R2)   MOVE USER'S TEXT\n         SPACE 1\nBADDEF   LA    R2,MGBADDEF   ERROR IN DEFINITION\n         OICC  4,16\n         B     DICTMSG       INSERT\nBADCOD   LA    R2,MGBADCOD   ERROR IN TYPE\n         OICC  4,32\n         B     DICTMSG       INSERY\nBADTOO   LA    R2,MGBADTOO   INPUT DATA TOO LONG\n         OICC  4,64\n         B     DICTMSG       INSERY\n         SPACE 1\nDICTWORD SR    R2,R2         CLEAR FOR ICM\n         EX    0,GETDICOF-4(R3)  OFFSET TO DICTIONARY ENTRY\n         AL    R2,MTV@DIC    GET ADDRESS IN DICTIONARY\n         USING MTDDSECT,R2\nDICTMSG  SR    R15,R15\n         IC    R15,MTDPHYLN  GET PHYSICAL LENGTH\n         MVC   WDHED,0(R2)   MOVE MESSAGE HEADER\n         LA    R2,MTDTEXT    POINT TO TEXT\n         DROP  R2\nDICTMSG2 SH    R15,=H'1'     SET EXECUTE LENGTH\n         BM    DICTBUMP      OOPS\n         LH    R14,MESSLEN   CURRENT MESSAGE LENGTH\n         AH    R14,ENDSPACE  LEADING SPACE, IF ANY\n         LA    R0,1(R14,R15)  NEW LENGTH\n         C     R0,XMSGBUF+4  WILL IT FIT ?\n         BNH   DICTLNOK      YES\n         OICC  8             SET TRUNCATION ERROR\n         S     R0,XMSGBUF+4  GET SIZE OF EXCESS\n         SR    R14,R0        MAX THAT WILL FIT IN OUTPUT BUFFER\n         SR    R15,R0        MAXIMUM TO BE MOVED\n         BM    XMSGWTOT      TRUNCATE\n         LA    R0,1(R14,R15)  NEW LENGTH\nDICTLNOK STH   R0,MESSLEN    UPDATE LENGTH\n         LA    R14,MESSLEN(R14)  NEXT ENTRY\n         EX    R15,EXMVT14   MOVE AN ENTRY\n         MVI   ENDSPACE+L'ENDSPACE-1,1  SET (DEFAULT) SPACE\n         MVI   MSGFLAGS,0    RESET FLAGS\nDICTBUMP AR    R6,R4         SPACE TO NEXT ENTRY\n         BCT   R5,DICTLOOP   REPEAT UNTIL TIRED\nXMSGWTOT LA    R1,XMSGMSG    POINT TO TEXT\n         ST    R1,RETR1      MAKE IT EASY FOR CALLER\n         TM    CALLR0+L'CALLR0-1,1  WTO REQUESTED ?\n         BZ    XMSGEXIT      NO\n         WTO   MF=(E,MESSLEN)  ISSUE WTO\nXMSGEXIT LR    R1,R13        SAVE FOR RENT CASE\n         L     R13,4(,R13)   LOAD CALLER'S SAVE AREA\n         MVC   16(12,R13),RETCODE-LOCSAVER(R1)  COPY RETURNS\n         AIF   ('&RENT' NE 'YES').NOLET\n         LA    R0,LOCEND-LOCSAVE  DYNAMIC SIZE\n         STORAGE RELEASE,LENGTH=(0),ADDR=(1)\n.NOLET   LM    R14,R12,12(R13)  LOAD REST\n         BR    R14           RETURN\n         SPACE 1\nDISASTER MVICC 20            ERROR IN PARMS\n         B     XMSGEXIT      RETURN WITHOUT ACTION\n         SPACE 1\nBUILDID  MVC   MESSAGE(0),0(R14)  MOVE MESSAGE ID\nGETMSGOF IC    R6,0(,R7)  1/4  LOAD OFFSET\n         ICM   R6,3,0(R7) 2/4  LOAD OFFSET FROM AL2\n         ICM   R6,7,0(R7) 3/4  LOAD OFFSET FROM AL3\n         L     R6,0(,R7)  4/4  LOAD OFFSET FROM AL4\n         SPACE 1\nGETDICOF IC    R2,0(,R6)  1/4  LOAD OFFSET\n         ICM   R2,3,0(R6) 2/4  LOAD OFFSET FROM AL2\n         ICM   R2,7,0(R6) 3/4  LOAD OFFSET FROM AL3\n         L     R2,0(,R6)  4/4  LOAD OFFSET FROM AL4\n         SPACE 1\nBADFUNC  DC    AL1(30,30,C'C'),C'UNSUPPORTED TEXT IN DEFINITION'\nBADPARM  DC    AL1(06,06,C'C'),C'<....>'\nMGBADDEF DC    AL1(13,13,C'C'),C'<msg.def.err>'\nMGBADCOD DC    AL1(10,10,C'C'),C'<inv.type>'\nMGBADTOO DC    AL1(10,10,C'C'),C'<inp.long>'\nMGBADMIS DC    AL1(L'MGBADMS1+10,L'MGBADMS1+10,C' '),CL10'&PFX.000E'\nMGBADMS1 DC    C'Message XXXXXXXX not defined'\nMGBADMSL EQU   *-MGBADMIS    TOTAL PATTERN LENGTH\nMGBADMDF DC    AL1(L'MGBADMD1+10,L'MGBADMD1+10,C' '),CL10'&PFX.001E'\nMGBADMD1 DC    C'Message XXXXXXXX in error'\nMGBADMDL EQU   *-MGBADMIS    TOTAL PATTERN LENGTH\nHEXTAB   DC    C'0123456789ABCDEF'\nTRHEXTAB EQU   HEXTAB-C'0',256,C'C'\n         LTORG ,\n         SPACE 1\n         AIF   ('&RENT' NE 'YES').NODS\nLOCSAVE  DSECT ,\n.NODS    ANOP  ,\nLOCSAVER DS    18A\nCALLR0   DS    A    1/2\nCALLR1   DS    A    2/2\nRETCODE  DS    0A   0/3\nRETR15   DS    A    1/3\nRETR0    DS    A    2/3\nRETR1    DS    A    3/3\nDB       DS    2D            CONVERSION SPACE - INPUT\nDB2      DS    D             CONVERSION SPACE - INPUT\nDB3SIG   DS    5D            CONVERSION SPACE - SIGNED\nDB3      EQU   DB3SIG+1,5*8-1,C'C'  CONVERSION SPACE - OUTPUT\nENDSPACE DS    H\nMSGFLAGS DS    X             MESSAGE PROCESSING FLAGS\nMFCHAR   EQU   X'01'           APPEND ENDCHAR TO CURR. WORD\nENDCHAR  DS    C             SUFFIX CHARACTER, IF ANY\nPROFG    DS    X             PARAMETER PROCESSING FLAG\nPFABS    EQU   1               IGNORE SIGN\nPFDEBR   EQU   X'10'           SKIP RIGHT DEBLANKING\nPFDEBL   EQU   X'20'           SKIP LEFT DEBLANKING\nWDHED    DS    XL3           WORD DEFINITION HEADER\nWDHXLEN  EQU   WDHED,1,C'X'    EXPLICIT (INPUT) LENGTH\nWDHOLEN  EQU   WDHED+1,1,C'X'  OUTPUT LENGTH\nWDHCHAR  EQU   WDHED+2,1,C'C'  CHAR SET (C OR G)\nPFDEB    EQU   PFDEBL+PFDEBR   SKIP BOTH\nLOCEND   EQU   *\n.*\nXMSGMGPM MDEFPARM SECT=DSECT\nMESSBUF  DSECT ,\nMESSLEN  DS    XL2,XL2       V-FORMAT MESSAGE\nMESSAGE  DS    CL132         MESSAGE TEXT\n         YREGS ,\n&NM      CSECT ,             RESTORE\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MDEFPARM": {"ttr": 8964, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x08\\x07\\x9f\\x01\\x08\\x07\\x9f\\x169\\x00\\x1f\\x00\\x1e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2008-03-19T00:00:00", "modifydate": "2008-03-19T16:39:00", "lines": 31, "newlines": 30, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MDEFPARM &PFX=XMSG,&SECT=\n.*\n.*   MDEFPARM IS THE MACRO USED TO DEFINE THE WORK AND CALLING\n.*     PARAMETER AREA FOR THE XMSG/MDEFxxx MACROS AND THE MESSAGE\n.*     FORMATTING SERVICE.\n.*\n.*   &PFX     SPECIFIES A PREFIX TO THE GENERATED LABELS\n.*   WHEN SECT=DSECT IS SPECIFIED, MAPPING FOR THE PARAMETER AREA\n.*   IS EXPANDED\n.*\n.*                                      V1 WRITTEN 3/2008 BY GYP\n         LCLC  &LABEL\n&LABEL   SETC  '&NM'\n         AIF   ('&LABEL' NE '').HAVELAB\n&LABEL   SETC  '&PFX'.'MGPM'\n.HAVELAB AIF   ('&SECT' EQ 'DSECT').DSECT\n&LABEL   DS    0D            SET LABEL\n         AGO   .COMMON\n.DSECT   ANOP  ,\n&LABEL   DSECT ,             EXPAND DSECT\n.COMMON  ANOP  ,\n&PFX.ADD DC    A(0)          ADDRESS OF MESSAGE MODULE\n&PFX.BUF DC    A(&PFX.MSG,L'&PFX.MSG)  MESSAGE RETURN AREA\n&PFX.MID DC    CL8' '        MESSAGE IDENTIFIER\n         SPACE 1\n&PFX.PRM DC    AL4(0),AL2(0) INSERTION ENTRY (ADDRESS/FLG/LEN)\n&PFX.PR2 DC    15XL(&PFX.PR2-&PFX.PRM)'0'  16 ENTRIES TOTAL\n         SPACE 1\n&PFX.MSG DC    XL(4+132)'0'  V-FORMAT MESSAGE ASSEMBLY AREA\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MIN": {"ttr": 8966, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x03\\x00\\x00\\x01\\x041\\x7f\\x01\\x08'\\x8f\\x00(\\x00\\r\\x00\\x0b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.03", "flags": 0, "createdate": "2004-11-12T00:00:00", "modifydate": "2008-10-04T00:28:00", "lines": 13, "newlines": 11, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MIN   &R,&A,&TYPE=                                      85195\n         LCLA  &I\n         LCLC  &SUF                                             GP04234\n         AIF   ('&TYPE' EQ 'F' OR '&TYPE' EQ 'A').NOSUF         GP04234\n&SUF     SETC  '&TYPE'                                          GP04234\n.NOSUF   ANOP  ,                                                GP04234\n&I       SETA  &SYSNDX\n&NM      MACPARM &R,&A,OP=C&SUF,OPR=C&SUF.R,MODE=EQU\n         MACPARM ZZZZ&I,OP=BNH,MODE=ONE\n         MACPARM &R,&A,OP=L&SUF,OPR=L&SUF.R,MODE=EQU\nZZZZ&I   DS    0H\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MINH": {"ttr": 8968, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x01\\x04\\x12\\x8f\\x01\\x08'\\x8f\\x00)\\x00\\t\\x00\\x0b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-05-07T00:00:00", "modifydate": "2008-10-04T00:29:00", "lines": 9, "newlines": 11, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MINH  &R,&A                                     ADDED  GP04128\n         LCLA  &I\n&I       SETA  &SYSNDX\n&NM      MACPARM &R,&A,OP=CH,OPR=CR,MODE=EQU\n         MACPARM ZZZZ&I,OP=BNH,MODE=ONE\n         MACPARM &R,&A,OP=LH,OPR=LR,MODE=EQU\nZZZZ&I   DS    0H\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MOTE": {"ttr": 8970, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         MOTE  &LVL,&TXT                                ADDED ON 81164\n         MNOTE &LVL,&TXT\n.*       THIS MACRO NEEDED BECAUSE CAN'T ISSUE MNOTE FROM PROGRAM\n.*       MNOTE MUST BE ISSUED FROM WITHIN A MACRO.   BOOO, HISS.\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MSORT": {"ttr": 8972, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x973o\\x01\\x045_!\\x06\\x00y\\x00[\\x007\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1997-12-02T00:00:00", "modifydate": "2004-12-20T21:06:00", "lines": 121, "newlines": 91, "modlines": 55, "user": "GERHARD"}, "text": "         MACRO\n&NM      MSORT &ADDR=,&SIZE=,&OFF=,&COMPL=,&NUM=,&RET=R14,&EXIT=,      *\n               &ORDER=A\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*     ADAPTED FROM SORT APPEARING IN 'FORTRAN PROGRAMMING' BY        *\n.*     FREDRIC STUART, WILEY '69. ORIGINATED BY D.L. SHELL, MODIFIED  *\n.*     BY MARLENE METZNER (PRATT&WHITNEY).                            *\n.*                                                                    *\n.*     INPUT PARAMETERS :                                             *\n.*     ADDR  ADDRESS OF LIST TO BE SORTED; REL-EXP OR (REG 2-12)      *\n.*     SIZE  SIZE OF LIST ENTRY; SELF-DEFINING TERM OR (REG 2-12)     *\n.*     OFF   OFFSET OF COMPARE STRING FROM START OF ENTRY;  -''-      *\n.*     COMPL LENGTH OF COMPARE STRING;                      -''-      *\n.*     NUMBER  NUMBER OF ENTRIES IN LIST;                   -''-      *\n.*                                                               92052*\n.*     WHEN THE EXIT= PARAMETER IS SPECIFIED, OFF AND COMPL ARE NOT   *\n.*     USED.  THE CODE INVOKES THE EXIT USING SORT'S R0-R9; R4 POINTS *\n.*     TO CURRENT ENTRY, R8 TO NEXT ENTRY, USER RETURNS TO R14 WITH   *\n.*     CC 2 TO SWAP ENTRIES, CC 0 OR 1 TO RETAIN.                92052*\n.*                                                               92052*\n.*     THE AREA POINTED TO BY REGISTER 13 IS USED TO SAVE CALLER'S    *\n.*     REGISTERS AND AS A WORK AREA FOR RE-ENTRANCY.                  *\n.*                                                                    *\n.*     RET   RETURN REGISTER                                          *\n.*           BR TO RET - ERROR IN PARAMETERS OR VALUES                *\n.*           B TO RET+4 - COMPLETED                                   *\n.*                                                                    *\n.*     ADDED ORDER=A / ORDER=D FOR SORT DIRECTION               GP04020\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         GBLC  &MACPLAB\n         LCLA  &I\n         LCLC  &ORDBC\n&MACPLAB SETC  ''\n&I       SETA  &SYSNDX\n&ORDBC   SETC  'ADDR'                                           GP04020\n         AIF   ('&ADDR' EQ '').MISSOP                           GP04020\n&ORDBC   SETC  'SIZE'                                           GP04020\n         AIF   ('&SIZE' EQ '').MISSOP                           GP04020\n         AIF   ('&EXIT' NE '' AND '&EXIT' NE '0').NOOFF NO NEED GP04234\n&ORDBC   SETC  'OFF'                                            GP04020\n         AIF   ('&OFF' EQ '').MISSOP                            GP04020\n&ORDBC   SETC  'COMPL'                                          GP04020\n         AIF   ('&COMPL' EQ '').MISSOP                          GP04020\n.NOOFF   ANOP  ,                                                GP04234\n&ORDBC   SETC  'NUM'                                            GP04020\n         AIF   ('&NUM' EQ '').MISSOP                            GP04020\n&ORDBC   SETC  'RET'                                            GP04020\n         AIF   ('&RET' EQ '').MISSOP                            GP04020\n&ORDBC   SETC  'H'           ASCENDING (BNH)\n         AIF   ('&ORDER' EQ 'A').ORDNUNG\n&ORDBC   SETC  'L'           DESCENDING (BNL)\n         AIF   ('&ORDER' EQ 'D').ORDNUNG\n         MNOTE 8,'MSORT: ORDER MUST BE A (ASCENDING) OR D (DESCENDING)'\n&ORDBC   SETC  'H'           ASCENDING (BNH)\n.ORDNUNG ANOP  ,\n&NM      STM   R14,R9,20(R13)   SAVE REGISTERS                   92052\n         LA    R0,1                    MAKE CONSTANT\n         AIF   ('&EXIT' EQ '' OR '&EXIT' EQ '0').NOEXIT          92052\n         MACPARM R15,&EXIT,OP=LA                                 92052\n         LTR   R15,R15       VALID EXIT ?                        92052\n         BZR   R14           NO; RETURN ERROR                    92052\n         ST    R15,12(,R13)  SAVE EXIT ADDRESS                   92052\n         AGO   .NOCLC                                            92052\n.NOEXIT  MVC   12(6,R13),SRT&I.Z       MOVE PATTERN CLC\n         MACPARM R9,&OFF,OP=LA         GET COMPARE OFFSET\n         STC   R9,15(,R13)             STASH INTO CLC\n         STC   R9,17(,R13)              FOR COMPARE\n         MACPARM R9,&COMPL,OP=LA       GET COMPARE LENGTH\n         SR    R9,R0                   LENGTH FOR CLC\n         BM    SRT&I.Y                 TAKE ERROR EXIT\n         STC   R9,13(,R13)             SET INTO CLC LENGTH FIELD\n.NOCLC   MACPARM R2,&SIZE,OP=LA        GET SIZE OF ENTRY\n         LR    R3,R2                   COPY INTO EXECUTE REGISTER\n         SR    R3,R0                   DECREMENT FOR EXECUTE\n         BM    SRT&I.Y                 TAKE ERROR EXIT\n         MACPARM R9,&NUM,OP=L          GET NUMBER OF ENTRIES    GP09245\n         CR    R9,R0                   CHECK AT LEAST TWO ENTRIES\n         BNH   SRT&I.B                 TAKE GOOD EXIT IF NONE\n         MR    R8,R2                   CONVERT TO TABLE LENGTH\n         MACPARM R1,&ADDR,OP=LA        GET TABLE BASE ADDRESS\n         LR    R7,R9                   COPY TO SUBLIST\nSRT&I.A  SRL   R7,1                    HALVE SUBLIST SIZE\n         XR    R6,R6                     CLEAR FOR DIVIDE\n         DR    R6,R2                   CONVERT TO LIST ENTRIES\n         MR    R6,R2                   BACK TO INT(M/S)\n         LTR   R7,R7                   ANY LEFT TO BE DONE ?\n         BP    SRT&I.C                 YES; PROCEED\nSRT&I.B  LM    R14,R9,20(R13)    RESTORE USER'S REGISTERS        92052\n         B     4(,&RET)                TAKE GOOD EXIT\nSRT&I.C  LR    R6,R9                   GET ENTRY SIZE\n         SR    R6,R7                   GET SIZE OF OTHER HALF\n         XR    R5,R5                   CLEAR COUNTER\nSRT&I.D  LA    R4,0(R5,R1)             GET ADDRESS OF NEXT ELEMENT\nSRT&I.E  LA    R8,0(R4,R7)             GET ADDRESS OF OTHER ELEMENT\n         AIF   ('&EXIT' EQ '' OR '&EXIT' EQ '0').EXCOMP          92052\n         L     R15,12(,R13)  LOAD EXIT ADDRESS                   92052\n         BASR  R14,R15       INVOKE THE EXIT                     92052\n         AGO   .COMPAR       BRANCH AS SET BY USER               92052\n.EXCOMP  EX    0,12(,R13)              COMPARE THE TWO\n.COMPAR  BN&ORDBC SRT&I.F              IN SEQUENCE - SKIP FLIP\n         EX    R3,SRT&I.Z+6            FLIP THE\n         EX    R3,SRT&I.Z+12             TWO\n         EX    R3,SRT&I.Z+6                LIST ENTRIES\n         SR    R4,R7                   GET NEXT ELEMENT\n         CR    R4,R1                   BACK TO START OF TABLE ?\n         BNL   SRT&I.E                 NO; TRY AGAIN\nSRT&I.F  AR    R5,R2                   NEXT COMPARE ELEMENT ADDRESS\n         CR    R5,R6                   DONE THIS PART OF LIST ?\n         BNL   SRT&I.A                 YES; GET ANOTHER SUBLIST\n         B     SRT&I.D                 ELSE PROCEED\nSRT&I.Y  LM    R14,R9,20(R13)  RESTORE REGISTERS                 92052\n         BR    &RET                    TAKE ERROR EXIT\nSRT&I.Z  CLC   0(0,R4),0(R8)           PATTERN COMPARE\n         XC    0(0,R4),0(R8)           FLIP 1/3\n         XC    0(0,R8),0(R4)           FLIP  2\n         MEXIT ,                                                GP04020\n.MISSOP  MNOTE 8,'MSORT: MISSING OPERAND &ORDBC'                GP04020\n&NM      MACPARM R14,OP=BR,MODE=ONE  EXPAND LABEL & ERROR RETURN\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MTITL": {"ttr": 8975, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&L       MTITL &TIT,&LEN=40\n.*             THIS MACRO IS CALLED AT THE BEGINNING OF AN ASSEMBLY,\n.*             IN ORDER TO SET UP THE LEFT HALF OF THE TITLE.\n.*             IT IS INTENDED TO BE USED IN CONJUNCTION WITH STITL.\n.*             MAIN HALF OF TITLE IS PADDED TO &LEN CHARACTERS.\n.*\n.*             THIS MACRO MAY NOT BE USED WITH ASSEMBLER F.\n.*             USE F EXTENDED(FROM OS/VS), G WITH LSETC=255, OR H.\n.*       CHANGES DATED 81154 MADE TO SUPPORT ASSEMBLER G AS ADVERTISED\n         GBLC  &MTITLE\n         LCLA  &I,&LN\n         LCLC  &BS                                               81154\n&BS      SETC  '                                        '  L'40  81154\n&I       SETA  1\n         AIF   ('&TIT'(1,1) NE '''' OR '&TIT'(K'&TIT,1) NE '''').DEL\n.LOOP    AIF   (&I GE K'&TIT-1).ENDLOOP\n         AIF   (&LN GE &LEN).TOOBIG\n&I       SETA  &I+1\n&LN      SETA  &LN+1\n         AIF   ('&TIT'(&I,1) EQ '''' OR '&TIT'(&I,1) EQ '&&').SPECIAL\n&MTITLE  SETC  '&MTITLE'.'&TIT'(&I,1)\n         AGO   .LOOP\n.*\n.DEL     MNOTE 4,'TITLE NOT DELIMITED BY \"''\" - IGNORED'\n&MTITLE  SETC  'LEARN TO PUT QUOUTES AROUND THINGS'\n.*\n.SPECIAL AIF   (&I EQ K'&TIT).NOTPAIR\n         AIF   ('&TIT'(&I,1) NE '&TIT'(&I+1,1)).NOTPAIR\n&MTITLE  SETC  '&MTITLE'.'&TIT'(&I,2)\n&I       SETA  &I+1\n         AGO   .LOOP\n.*\n.NOTPAIR MNOTE 4,' CHARACTER \"''\" OR \"&&\" NOT PAIRED'\n&MTITLE  SETC  '&MTITLE'.'&TIT'(&I,1).'&TIT'(&I,1)               81154\n         AGO   .LOOP\n.*\n.TOOBIG  MNOTE 4,'TITLE LONGER THAN &LEN - EXCESS TRUNCATED'\n         MEXIT\n.*\n.ENDLOOP AIF   (&LN EQ &LEN).END\n&I       SETA  &LEN-&LN                                          81154\n.PADLOOP AIF   (&I LE 40).TRUNCB                                 81154\n&MTITLE  SETC  '&MTITLE'.'&BS'                                   81154\n&I       SETA  &I-40                                             81154\n         AGO   .PADLOOP                                          81154\n.TRUNCB  AIF   (&I LT 1).END                                     81154\n&MTITLE  SETC  '&MTITLE'.'&BS'(1,&I)                             81154\n.END     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MVCLIT": {"ttr": 8977, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x065\\x7f\\x01\\x065\\x7f\\x13 \\x00)\\x00\\xb0\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2006-12-23T00:00:00", "modifydate": "2006-12-23T13:20:00", "lines": 41, "newlines": 176, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MVCLIT &TO,&FRO,&ULEN\n.**********************************************************************\n.*                                                                    *\n.*    MOVE DATA (LITERAL) FROM A FIELD TO A FIELD USING THE           *\n.*      LENGTH OF THE SECOND OPERAND                                  *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &MACPLEN      RETURN SIGNIFICANT LENGTH OF STRING\n         GBLB  &MACPNUL      TRUE IF NULL STRING\n         GBLB  &MACQUOT      TRUE IF ORIGINAL WAS QUOTED\n         GBLB  &MACPERR      TRUE IF ERROR\n         GBLC  &MACQSTR      RETURN QUOTED STRING\n         LCLA  &K\n         LCLC  &C,&D,&L\n       MACQOLIT &FRO         SEE WHAT WE HAVE FOR SOURCE\n&D       SETC  '&MACPLEN'\n         AIF   (NOT &MACPNUL).QERR\n         MNOTE 8,'MVCLIT: SOURCE IS REQUIRED'\n         AGO   .FRODO\n.QERR    AIF   (NOT &MACPERR).FRODO\n         MNOTE 8,'MVCLIT: SOURCE IS MALFORMED'\n.FRODO   AIF   (&MACQUOT).QDEST        QUOTED ?\n&L       SETC  'L'''\n&D       SETC  '&L'.'&FRO'             NO; USE LENGTH ATTRIBUTE\n.QDEST   AIF   (T'&TO NE 'O').FRQREG   CHECK FOR REGISTER FORM\n         MNOTE 8,'MVCLIT: DESTINATION REQUIRED'\n         MEXIT ,\n.FRQREG  AIF   (T'&ULEN EQ 'O').CMPLEN\n&D       SETC  '&ULEN'\n.CMPLEN  ANOP  ,\n&K       SETA  K'&TO\n         AIF   (&K LT 3).TOADD         DO AS ADDRESS FORM\n         AIF   ('&TO'(1,1) NE '(' OR '&TO'(&K,1) NE ')').TOADD\n         AIF   ('&TO'(2,1) EQ '(' OR '&TO'(&K-1,1) EQ ')').TOADD\n&C       SETC  '&TO'(2,&K-1)           STRIP (\n&NM      MVC   0(&D,&C,&MACQSTR\n         MEXIT ,\n.TOADD   ANOP  ,\n&NM      MVC   &TO.(&D),&MACQSTR\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MVC2": {"ttr": 8979, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x08\\to\\x01\\x08\\x13\\x0f\\x01&\\x00H\\x01\\x80\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2008-04-05T00:00:00", "modifydate": "2008-05-09T01:26:00", "lines": 72, "newlines": 384, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MVC2  &TO,&FR                                      NEW GP08096\n.*\n.*   THIS LITTLE GOODY IS BASED ON AN IDEA OFFERED IN THE ASSEMBLER\n.*   LIST, NAMELY THAT THERE SHOULD BE A MOVE INSTRUCTION WHOSE DEFAULT\n.*   LENGTH IS THAT OF THE SECOND OPERAND.\n.*\n         GBLA  &MACPLEN      RETURN SIGNIFICANT LENGTH OF STRING\n         GBLB  &MACPNUL      TRUE IF NULL STRING\n         GBLB  &MACQUOT      TRUE IF ORIGINAL WAS QUOTED\n         GBLB  &MACPERR      TRUE IF ERROR\n         GBLC  &MACQSTR      RETURN QUOTED STRING\n         LCLA  &K,&I,&J\n         LCLC  &L,&LF,&RT\n&L       SETC  'L'''\n         AIF   ('&TO' EQ '').NOTO\n         AIF   ('&FR' EQ '').NOFR\n&K       SETA  K'&TO\n         MACQOLIT &FR        CHECK FOR QUOTED STRING            GP08130\n         AIF   (&MACQUOT).QUOTED                                GP08130\n         AIF   ('&TO'(&K,1) NE ')').SIMPLE\n.*  PARSE xxx ( yyy ) - CHANGE TO xxx ( L'fr , yyy )\n&I       SETA  &K\n&J       SETA  1\n.LOOP    AIF   (&I LE 1).ERRTO\n&I       SETA  &I-1\n         AIF   ('&TO'(&I,1) EQ '(').HAVLEFT\n         AIF   ('&TO'(&I,1) EQ ')').HAVRITE\n         AGO   .LOOP\n.HAVRITE ANOP  ,\n&J       SETA  &J+1\n         AGO   .LOOP\n.HAVLEFT ANOP  ,\n&J       SETA  &J-1\n         AIF   (&J GT 0).LOOP\n         AIF   (&I LE 1).SIMPLE   ((XYZ-RST))\n&LF      SETC  '&TO'(1,&I)\n&RT      SETC  '&TO'(&I+1,&K-&I)\n&NM      MVC   &LF&L&FR,&RT,&FR\n         MEXIT ,\n.QUOTED  AIF   ('&TO'(&K,1) NE ')').QSIMP                       GP08130\n.*  PARSE xxx ( yyy ) - CHANGE TO xxx ( L'fr , yyy )            GP08130\n&I       SETA  &K                                               GP08130\n&J       SETA  1                                                GP08130\n.QLOOP   AIF   (&I LE 1).ERRTO                                  GP08130\n&I       SETA  &I-1                                             GP08130\n         AIF   ('&TO'(&I,1) EQ '(').QLEFT                       GP08130\n         AIF   ('&TO'(&I,1) EQ ')').QRITE                       GP08130\n         AGO   .QLOOP                                           GP08130\n.QRITE   ANOP  ,                                                GP08130\n&J       SETA  &J+1                                             GP08130\n         AGO   .QLOOP                                           GP08130\n.QLEFT   ANOP  ,                                                GP08130\n&J       SETA  &J-1                                             GP08130\n         AIF   (&J GT 0).QLOOP                                  GP08130\n         AIF   (&I LE 1).QSIMP   ((XYZ-RST))                    GP08130\n&LF      SETC  '&TO'(1,&I)                                      GP08130\n&RT      SETC  '&TO'(&I+1,&K-&I)                                GP08130\n&NM      MVC   &LF&MACPLEN,&RT,&MACQSTR                         GP08130\n         MEXIT ,                                                GP08130\n.QSIMP   ANOP  ,                                                GP08130\n&NM      MVC   &TO.(&MACPLEN),&MACQSTR                          GP08130\n         MEXIT ,                                                GP08130\n.ERRTO   MNOTE 8,'MVC2: TO OPERAND IS MALFORMED'\n         MEXIT ,\n.SIMPLE  ANOP  ,\n&NM      MVC   &TO.(&L&FR),&FR\n         MEXIT ,\n.NOTO    MNOTE 8,'MVC2: TO OPERAND MISSING'\n         MEXIT ,\n.NOFR    MNOTE 8,'MVC2: FROM OPERAND MISSING'\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MVICC": {"ttr": 8982, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x03\\x10_\\x01\\x06(O\\x01S\\x00\\x10\\x00\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-04-15T00:00:00", "modifydate": "2006-10-11T01:53:00", "lines": 16, "newlines": 14, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&N       MVICC &CODE,&REAS,&RESULT=                    NEW 2003.091 GYP\n         GBLC  &ZZCCNAM\n         LCLC  &L\n&L       SETC  'L'''\n         AIF   ('&RESULT' EQ '').NONEW\n&ZZCCNAM SETC  '&RESULT'\n.NONEW   AIF   ('&ZZCCNAM' NE '').NODEF\n         MNOTE *,'MVICC: RESULT= NOT SPECIFIED - DEFAULTED TO RETCODE'\n&ZZCCNAM SETC  'RETCODE'\n.NODEF   ANOP  ,\n&N MACPARM &ZZCCNAM+&L&ZZCCNAM-1,&CODE,OP=MVI,OPR=STC,NULL=SKIP,       *\n               MODE=REV\n   MACPARM &ZZCCNAM+&L&ZZCCNAM+3,&REAS,OP=MVI,OPR=STC,NULL=SKIP,       *\n               MODE=REV\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MVSDSAB": {"ttr": 9217, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x06#\\x0f\\x01\\x06#\\x0f\\x01S\\x00`\\n_\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2006-08-18T00:00:00", "modifydate": "2006-08-18T01:53:00", "lines": 96, "newlines": 2655, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      MVSDSAB &DDNAME=,&DCBPTR=,&DSABPTR=,&TCBPTR=,&RETCODE=,       *\n               &RSNCODE=,&MF=\n         GBLB  &MVSESA       IF ESA, USE IBM'S MACRO AND SERVICE\n         GBLC  &MACPLAB      FIRST LABEL EXPANDED, IF ANY\n.**********************************************************************\n.*                                                                    *\n.*   THIS MACRO LINKS TO LOCAL SUBROUTINE SUBDSAB FOR EARLY SYSTEMS   *\n.*   (E.G., MVS 3.8J). FOR ESA AND LATER, IT INVOKES IBM'S GETDSAB    *\n.*   SERVICE                                                          *\n.*                                                                    *\n.**********************************************************************\n         LCLC  &MF1,&MF2,&MF3,&LLN,&@REQ,&@TCB,&@RSN,&@RET\n         LCLA  &I,&J,&K,&#REQ\n&MF1     SETC  '&MF(1)'\n&MF2     SETC  '&MF(2)'\n&MF3     SETC  '&MF(3)'\n&LLN     SETC  '5'           NUMBER OF WORDS IN LIST\n         AIF   (NOT &MVSESA).USELOCL\n&NM      GETDSAB &SYSLIST(1),DDNAME=&DDNAME,DCBPTR=&DCBPTR, *\n               DSABPTR=&DSABPTR,TCBPTR=&TCBPTR,                        *\n               RETCODE=&RETCODE,RSNCODE=&RSNCODE,MF=&MF\n         MEXIT ,\n.USELOCL ANOP ,\n         AIF   ('&MF1' EQ 'L').LIST\n&MACPLAB SETC  '&NM'         LABEL TO BE EXPANDED\n         AIF   ('&MF1' EQ 'S' OR '&MF1' EQ '').STND\n         AIF   ('&MF1' EQ 'E').EXEC\n         MNOTE 8,'MF=&MF1 NOT A SUPPORTED OPTION'\n         MEXIT ,\n.*\n.LIST    AIF   ('&MF3' NE '').LISTEX\n&MF3     SETC  '0A'          DEFAULT ALIGNMENT\n.LISTEX  AIF   ('&MF3' EQ '0F' OR '&MF3' EQ '0D' OR                    *\n               '&MF3' EQ '0A').LISTAOK\n         MNOTE 4,'MF= &MF3 NOT SUPPORTED; USING 0F'\n&MF3     SETC  '0A'          FORCED ALIGNMENT\n.LISTAOK AIF   ('&SYSLIST(1)' NE '').LISTBAD\n         AIF   ('&DDNAME' NE '').LISTBAD\n         AIF   ('&DCBPTR' NE '').LISTBAD\n         AIF   ('&DSABPTR' NE '').LISTBAD\n         AIF   ('&TCBPTR' NE '').LISTBAD\n         AIF   ('&RETCODE' NE '').LISTBAD\n         AIF   ('&RSNCODE' EQ '').LISTEXP\n.LISTBAD MNOTE 4,'KEYWORD SETTINGS IGNORED FOR MF=L'\n.LISTEXP ANOP  ,\n&MF2     DS    &MF3\n&NM      MACPARM MODE=LABEL  EXPAND ADDITIONAL LABEL, IF NEEDED\n         DC    &LLN.AL4(0)\n         MEXIT ,\n.*\n.STND    ANOP  ,\n         MACPARM R1,*+4*&LLN+4,OP=BAL\n         DC    &LLN.AL4(0)\n         AGO   .EXECC\n.*\n.EXEC    AIF   ('&MF2' NE '').EXECR1\n         MNOTE 8,'MF=(E,LIST) NEEDS LIST ADDRESS'\n         MEXIT ,\n.EXECR1  MACPARM R1,&MF2\n.EXECC   MACPARM 0(4*&LLN,R1),0(R1),OP=XC  CLEAR LIST\n         AIF   ('&DCBPTR' EQ '' AND '&DDNAME' EQ '').NODUPE\n         MNOTE 8,'DCBPTR AND DDNAME ARE MUTUALLY EXCLUSIVE'\n         MEXIT ,\n.EXCDCB  MNOTE 8,'FIRST/NEXT AND DCBPTR= ARE MUTUALLY EXCLUSIVE'\n         MEXIT ,\n.EXCDDN  MNOTE 8,'FIRST/NEXT AND DDNAME= ARE MUTUALLY EXCLUSIVE'\n         MEXIT ,\n.NODUPE  AIF   ('&SYSLIST(1)' NE '' AND '&DCBPTR' NE '').EXCDCB\n         AIF   ('&SYSLIST(1)' NE '' AND '&DDNAME' NE '').EXCDDN\n&#REQ    SETA  1             GET FIRST DSAB\n&@REQ    SETC  '0'           NO ADDRESS NEEDED\n         AIF   ('&SYSLIST(1)' EQ 'FIRST').OTHR   LOOK FOR OTHERS\n&#REQ    SETA  2             GET NEXT DSAB\n&@REQ    SETC  '0'           NO ADDRESS NEEDED\n         AIF   ('&SYSLIST(1)' EQ 'NEXT').OTHR   LOOK FOR OTHERS\n         AIF   ('&SYSLIST(1)' EQ '').TREQ   LOOK FOR NON-CHAINED\n         MNOTE 8,'UNSUPPORTED POSITIONAL: &SYSLIST(1)'\n         MEXIT ,\n.TREQ    AIF   ('&DDNAME' NE '').SETDCB\n&#REQ    SETA  3             GET DSAB BY DDNAME\n&@REQ    SETC  '&DDNAME'     DDN ADDRESS NEEDED\n         AGO   .OTHR\n.SETDCB  ANOP  ,\n&#REQ    SETA  4             GET DSAB BY DCB\n&@REQ    SETC  '&DCBPTR'     DCB ADDRESS NEEDED\n.OTHR    ANOP  ,\n         MVI   0(R1),&#REQ   SET REQUEST TYPE\n         MACPLOP &@REQ,4(R1)   PASS REQUEST ADDRESS OR 0\n         MACPLOP &DSABPTR,8(R1)\n         MACPLOP &TCBPTR,12(R1),NULL=SKIP\n         MACPARM R15,=V(SUBDSAB),OP=L\n         MACPARM R14,R15,OP=BALR,OPR=BALR\n         MACPARM R15,&RETCODE,OP=ST,NULL=SKIP\n         MACPARM R0,&RSNCODE,OP=ST,NULL=SKIP\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MVSQUERY": {"ttr": 9220, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x0c\\x00\\x00\\x01\\x043o\\x01\\x08\\x11\\x7f\\x01\\x05\\x00\\xaf\\x016\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.12", "flags": 0, "createdate": "2004-12-01T00:00:00", "modifydate": "2008-04-26T01:05:00", "lines": 175, "newlines": 310, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,             LOCAL CSVQUERY REPLACEMENT (MVS 3.8)\n&NM      MVSQUERY &INEPNM=,&INADDR=,&SEARCHM=,&SEARCH=JPALPA,&OLEN=,&OX*\n               TLST=,&OEPA=,&OEPNM=,&OMJNM=,&OLOADPT=,&OSP=,&OATTR1=,&O*\n               ATTR2=,&OATTR3=,&OVALID=,&OPDATA=,&OPID=,&ODIAG=,&RETCOD*\n               E=,&MF=S,&PFX=CVQ,&DSECT=DSECT,&OEPTKN=,&TCB=0\n         GBLC  &MACPLAB\n         LCLC  &P\n         LCLC  &A01,&A02,&A03,&A04,&A05,&A06,&A07,&A08,&A09\n         LCLC  &A10,&A11,&A12,&A13,&A14,&A15,&A16,&A17,&A18\n         LCLA  &OPTFG,&I,&F\n         LCLB  &OPJPA,&OPLPA,&OPMIN,&OPNAM\n&P       SETC  '&PFX'\n&MACPLAB SETC  '&NM'\n&I       SETA  &SYSNDX\n         AIF   ('&MF' EQ 'D').MAPDSCT\n.*\n&OPJPA   SETB  ('&SEARCH' EQ 'JPA' OR '&SEARCH' EQ 'JPALPA')\n&OPLPA   SETB  ('&SEARCH' EQ 'LPA' OR '&SEARCH' EQ 'JPALPA')\n&OPNAM   SETB  ('&INEPNM' NE '')\n&OPMIN   SETB  ('&SEARCHM' EQ 'YES')\n         AIF   (&OPNAM AND '&INADDR' EQ '').INOK\n         AIF   (NOT &OPNAM AND '&INADDR' NE '').INOK\n         AIF   ('&MF(1)' EQ 'L' OR '&MF(1)' EQ 'E').INOK  DEFER\n MNOTE 8,'EITHER INEPNM OR INADDR MUST BE SPECIFIED, BUT NOT BOTH'\n         MEXIT ,\n.*\n.INOK    AIF   ('&MF' EQ '').BADMF\n&F       SETA  128*&OPJPA+64*&OPLPA+32*&OPNAM+16*&OPMIN\n         AIF   (N'&MF GT 1 AND '&MF(1)' EQ 'L').LFORM\n         AIF   ('&MF' EQ 'S').STDFORM\n         AIF   (N'&MF LT 2).BADMF\n         AIF   ('&MF(1)' EQ 'E').EFORM\n         AIF   ('&MF(1)' EQ 'M').EFORM\n         AIF   ('&MF(1)' EQ 'L').LFORM\n.BADMF   MNOTE 8,'VALUE OF MF= IS UNSUPPORTED'\n         MEXIT ,\n.STDFORM CNOP  0,4           FORCE ALIGNMENT\n         MACPARM R1,ZZQ&I.S,OP=BAL  LOAD THE IN-LINE LIST ADDRESS\n&MACPLAB SETC  'ZZQ'.'&I'.'S'  MAKE TARGET LABEL\n         DC    XL(18*4)'0'     DEFINE PARAMETER LIST SPACE\n         AGO   .LOADLST\n.EFORM   MACPARM R1,&MF(2)   LOAD PARM LIST ADDRESS\n         AIF   (NOT &OPNAM AND '&INADDR' EQ '').LOADLST  MF=L HAS?\n         MACPARM 0(R1),X'DF',OP=NI  RESET OLD INEPNM FLAG\n         MACPARM 0(R1),&F,OP=OI,OPR=OI  SET  OPTION FLAGS\n         AGO   .LOADFLG\n.LOADLST MACPARM 0(R1),&F,OP=MVI,OPR=MVI  LOAD OPTION FLAGS\n.*       MVI   3(R1),AL1(&PLVER+0)  PLIST VERSION - IGNORE\n.LOADFLG MACPARM R0,&INEPNM,NULL=SKIP\n         MACPARM R0,&INADDR,NULL=SKIP\n         ST    R0,04(,R1)     INPUT POINTER\n         AIF   ('&RETCODE' EQ '').SKIP08\n         MACPARM R0,&RETCODE\n         ST    R0,08(,R1)     RETURN CODE\n.SKIP08  AIF   ('&OVALID' EQ '').SKIP12\n         MACPARM R0,&OVALID\n         ST    R0,12(,R1)     VALIDITY FLAGS\n.SKIP12  AIF   ('&OLEN' EQ '').SKIP16\n         MACPARM R0,&OLEN\n         ST    R0,16(,R1)     MODULE LENGTH\n.SKIP16  AIF   ('&OEPA' EQ '').SKIP20\n         MACPARM R0,&OEPA\n         ST    R0,20(,R1)     ENTRY ADDRESS W/AM FLAG IN HIGH BIT\n.SKIP20  AIF   ('&OEPNM' EQ '').SKIP24\n         MACPARM R0,&OEPNM\n         ST    R0,24(,R1)     MODULE NAME/ALIAS\n.SKIP24  AIF   ('&OMJNM' EQ '').SKIP28\n         MACPARM R0,&OMJNM\n         ST    R0,28(,R1)     MAJOR NAME\n.SKIP28  AIF   ('&OSP' EQ '').SKIP32\n         MACPARM R0,&OSP\n         ST    R0,32(,R1)     SUBPOOL\n.SKIP32  AIF   ('&OATTR1' EQ '').SKIP36\n         MACPARM R0,&OATTR1\n         ST    R0,36(,R1)     ATTRIBUTE 1\n.SKIP36  AIF   ('&OATTR2' EQ '').SKIP40\n         MACPARM R0,&OATTR2\n         ST    R0,40(,R1)     ATTRIBUTE 2\n.SKIP40  AIF   ('&OATTR3' EQ '').SKIP44\n         MACPARM R0,&OATTR3\n         ST    R0,44(,R1)     ATTIBUTE 3\n.SKIP44  AIF   ('&OLOADPT' EQ '').SKIP48\n         MACPARM R0,&OLOADPT\n         ST    R0,48(,R1)     LOAD POINT (FIRST EXTENT)\n.SKIP48  AIF   ('&OPDATA' EQ '').SKIP52\n         MACPARM R0,&OPDATA\n         ST    R0,52(,R1)     P DATA\n.SKIP52  AIF   ('&OPID' EQ '').SKIP56\n         MACPARM R0,&OPID\n         ST    R0,56(,R1)     P ID\n.SKIP56  AIF   ('&OEPTKN' EQ '').SKIP60\n         MACPARM R0,&OEPTKN\n         ST    R0,60(,R1)     TOKEN - NOT SUPPORTED\n.SKIP60  AIF   ('&OXTLST' EQ '').SKIP64\n         MACPARM R0,&OXTLST\n         ST    R0,64(,R1)     EXTENT LIST\n.SKIP64  AIF   ('&ODIAG' EQ '').SKIP68\n         MACPARM R0,&ODIAG\n         ST    R0,68(,R1)     DIAG - NOT IMPLEMENTED\n.SKIP68  AIF   ('&MF(1)' EQ 'M').MEND  MODIFY ONLY\n         MACPARM R0,&TCB,NULL=0                                 GP08117\n         MACPARM R15,=V(SUBQUERY),OP=L  ADDRESS OF SUBROUTINE\n         MACPARM R14,(R15),OP=BALR,OPR=BALR\n         MEXIT ,\n.LFORM   ANOP  ,\n&A01     SETC  '&INEPNM&INADDR+0'\n&A02     SETC  '&RETCODE+0'\n&A03     SETC  '&OVALID+0'\n&A04     SETC  '&OLEN+0'\n&A05     SETC  '&OEPA+0'\n&A06     SETC  '&OEPNM+0'\n&A07     SETC  '&OMJNM+0'\n&A08     SETC  '&OSP+0'\n&A09     SETC  '&OATTR1+0'\n&A10     SETC  '&OATTR2+0'\n&A11     SETC  '&OATTR3+0'\n&A12     SETC  '&OLOADPT+0'\n&A13     SETC  '&OPDATA+0'\n&A14     SETC  '&OPID+0'\n&A15     SETC  '&OEPTKN+0'\n&A16     SETC  '&OXTLST+0'\n&A17     SETC  '&ODIAG+0'\n&A18     SETC  '0'\n&MF(2)   MACMAPHD DSECT=NO,PFX=&PFX\n         AIF   ('&NM' EQ '').MAPCOM\n&NM      DS    0A\n         AGO   .MAPCOM\n.MAPDSCT ANOP  ,\n&A01     SETC  '0'\n&A02     SETC  '0'\n&A03     SETC  '0'\n&A04     SETC  '0'\n&A05     SETC  '0'\n&A06     SETC  '0'\n&A07     SETC  '0'\n&A08     SETC  '0'\n&A09     SETC  '0'\n&A10     SETC  '0'\n&A11     SETC  '0'\n&A12     SETC  '0'\n&A13     SETC  '0'\n&A14     SETC  '0'\n&A15     SETC  '0'\n&A16     SETC  '0'\n&A17     SETC  '0'\n&A18     SETC  '0'\n&NM      MACMAPHD DSECT=&DSECT,PFX=&PFX,DFLT=DSECT\n.MAPCOM  ANOP  ,\n&P.FLAGS DC    0A(0),AL1(&F) REQUEST FLAGS\n&P.OPJPA EQU   X'80'           SEARCH JOB'S JPA AND LOAD LIST\n&P.OPLPA EQU   X'40'           SEARCH SYSTEM'S MLPA AND PLPA\n&P.OPNAM EQU   X'20'           SEARCH FOR NAME, NOT ADDRESS\n&P.OPMIN EQU   X'10'           SEARCH INCLUDES MINOR CDES\n         DC    X'00'\n         DC    X'00'\n&P.#PLST DC    B'0'          LIST VERSION\n&P.@INRQ DC    A(&A01)  4    ADDRESS REQUESTED, OR LOC OF NAME\n&P.@OCOD DC    A(&A02)  8    ADDRESS OF OUTPUT RETURN CODE\n&P.@OVAL DC    A(&A03) 12    ADDRESS OF OUTPUT VALIDITY FLAGS\n&P.@OLEN DC    A(&A04) 16    ADDRESS OF OUTPUT LENGTH WORD\n&P.@OEPA DC    A(&A05) 20    ADDRESS OF OUTPUT ENTRY ADDRESS\n&P.@ONAM DC    A(&A06) 24    ADDRESS OF OUTPUT ENTRY NAME\n&P.@OMAJ DC    A(&A07) 28    ADDRESS OF OUTPUT MAJOR NAME\n&P.@OSP  DC    A(&A08) 32    ADDRESS OF OUTPUT SUBPOOL ADDRESS\n&P.@OAT1 DC    A(&A09) 36    ADDRESS OF OUTPUT ATTRIBUTE ADDRESS\n&P.@OAT2 DC    A(&A10) 40    ADDRESS OF OUTPUT ATTRIBUTE ADDRESS\n&P.@OAT3 DC    A(&A11) 44    ADDRESS OF OUTPUT ATTRIBUTE ADDRESS\n&P.@OLOD DC    A(&A12) 48    ADDRESS OF OUTPUT LOAD ADDRESS\n&P.@OPDA DC    A(&A13) 52    ADDRESS OF OUTPUT ?     - NOT IMPLEMENTED\n&P.@OPID DC    A(&A14) 56    ADDRESS OF OUTPUT ?     - NOT IMPLEMENTED\n&P.@OTKN DC    A(&A15) 60    ADDRESS OF OUTPUT TOKEN - NOT IMPLEMENTED\n&P.@OXTL DC    A(&A16) 64    ADDRESS OF OUTPUT EXTENT LIST AREA\n&P.@ODIA DC    A(&A17) 68    ADDRESS OF OUTPUT DIAG  - NOT IMPLEMENTED\n&P.LEN   EQU   *-&P.FLAGS      LIST LENGTH\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MVSSVCUP": {"ttr": 9224, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x050_\\x01\\x050_\\x01#\\x02\\xcb\\x02\\xce\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2005-11-01T00:00:00", "modifydate": "2005-11-01T01:23:00", "lines": 715, "newlines": 718, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      MVSSVCUP &SVC,&FUNC,&TYPE=,&EP=,&LOCKS=,&NPRMPT=,&MF=,        *\n               &APF=,&AR=,&EPNAME=,&RELATED=\n.**********************************************************************\n.*   THIS IS AN MVS 3.8J IMPLEMENTATION OF THE SVCUPDTE FACILITY      *\n.*   NEW-FANGLED PARAMETERS ARE IGNORED                               *\n.*   CODE IS IMPLEMENTED IN SUBROUTINE SUBSVCUP                       *\n.*   TRIED TO STAY COMPATIBLE WITH IBM                                *\n.**********************************************************************\n         ACTR    100               LIMIT LOOPING TO 100 ITERATIONS\n         GBLC  &MACPLAB      GENERATE LABEL AS NEEDED\n.*\n         LCLA &REQLOCK,&INDEX1,&INDEX2,&TEMP,&SVCNUM,&FUNCNUM,&TYPENUM,*\n               &APFNUM,&NPNUM,&NCMS,&NDISP,&NLOCAL,&NSRM,&NSALLOC,&NNP,*\n               &NAPF,&SVCFLAG,&SVCOFF,&DELETE,&REPLACE,&EXTRACT\n         LCLA  &ARNUM,&NAR\n.*\n.*            APFNUM               APF CODE\n.*            ARNUM                AR CODE\n.*            DELETE               FUNCTION CODE VALUE FOR DELETE\n.*            EXTRACT              FUNCTION CODE VALUE FOR EXTRACT\n.*            FUNCNUM              FUNCTION NUMBER\n.*            INDEX1               GENERAL INDEX\n.*            INDEX2               GENERAL INDEX\n.*            NAPF                 VALUE OF THE APF BIT IN SVC ENTRY\n.*            NAR                  VALUE OF AR BIT IN SVC ENTRY\n.*            NCMS                 VALUE OF THE CMS BIT IN SVC ENTRY\n.*            NDISP                VALUE OF THE DISP BIT IN SVC ENTRY\n.*            NLOCAL               VALUE OF THE LOCAL BIT IN SVC ENTRY\n.*            NNP                  VALUE OF THE NON-PREMPT BIT\n.*            NSRM                 VALUE OF THE SRM BIT IN SVC @ZMC3226\n.*                                 ENTRY                       @ZMC3226\n.*            NSALLOC              VALUE OF THE SALLOC BIT IN SVC ENTRY\n.*            REPLACE              REPLACE FUNCTION CODE VALUE\n.*            SVCOFF               OFFSET OF THE SVC NUMBER IN PARM\n.*            NPNUM                NON-PREEMPTIBILITY CODE\n.*            REQLOCK              LOCKS BYTE\n.*            SVCNUM               SVC NUMBER\n.*            SVCFLAG              SVC NUMBER SUPPLIED INDICATOR\n.*            TEMP                 TEMPORARY\n.*            TYPENUM              SVC TYPE NUMBER\n.*\n         LCLC &VERSION,&CHARS,&ACHAR,&BADENT,&LAB1,&EPOFF\n         LCLC &EPNOFF\n         LCLC &EPCHAR\n         LCLC &EPMSG\n         LCLC &INCONS      STRING FOR INCONSISTENT OPERANDS\n         LCLC &INSPEC(10)  ARRAY OF KEYWORD ATTRIBUTES\n         LCLC &BADSPEC(10) ARRAY OF KEYWORD NAMES FOR MESSAGE\n.*\n.*            ACHAR                SINGLE CHARACTER TEMPORARY\n.*            BADENT               SET TO 'YES' INDICATES FATAL ERROR\n.*            CHARS                MULTIPLE CHARACTER TEMPORARY\n.*            EPCHAR               TEMP VARIABLE: EP OR EPNAME\n.*            EPMSG                TEMP VARIABLE: ENTRY-POINT MSG\n.*            EPOFF                OFFSET OF ENTRY POINT IN PARM LIST\n.*            EPNOFF               OFFSET OF EPNAME IN PARM LIST\n.*            MACDATE              DATE MACRO LAST MODIFIED\n.*            VERSION              SVCUPDTE VERSION NUMBER\n.*\n&BADENT  SETC  'NO'                   NO ERROR DETECTED YET\n&EPOFF   SETC    '4'                  OFFSET OF THE ENTRY POINT IN LIST\n&EPNOFF  SETC    '12'                 OFFSET OF THE EPNAME IN LIST\n&LAB1    SETC  'ZZ'.'&SYSNDX'.'L' GENERATED LABEL\n&NAPF    SETA    8                    VALUE OF THE APF BIT IN SVC ENTRY\n&NAR     SETA    4                    VALUE OF AR BIT IN SVC ENTRY\n&NCMS    SETA   64                    VALUE OF THE CMS\n&NDISP   SETA    8                    VALUE OF THE DISP\n&NLOCAL  SETA  128                    VALUE OF THE LOCAL\n&NNP     SETA    2                    VALUE OF THE NON-PREMPT\n&NSRM    SETA   32                    VALUE OF THE SRM         @ZMC3226\n&NSALLOC SETA   16                    VALUE OF THE SALLOC\n&REPLACE SETA    1                    REPLACE FUNCTION CODE\n&DELETE  SETA    2                    DELETE FUNCTION CODE\n&EXTRACT SETA    3                    EXTRACT FUNCTION CODE\n&SVCOFF  SETA    3                    OFFSET OF THE SVC NUMBER IN\n.*                                    THE PARAMETER LIST\n&VERSION SETC   '1'                   INITIALIZE TO VERSION 1  @YA11662\n.**********************************************************************\n.*                   VALIDATE MF PARAMETER                            *\n.**********************************************************************\n         AIF   (T'&MF EQ 'O' OR                                        -\n               '&MF(1)' EQ 'E' AND N'&MF EQ 2 OR                       -\n               '&MF' EQ 'L' AND N'&MF EQ 1).L0020\n.*       MSG: \"INVALID MF OPERAND SPECIFIED- \"\n         IHBERMAC 1001,MF,&MF\n&BADENT  SETC  'YES'                  FATAL ERROR DETECTED\n.L0020   ANOP\n         AIF   ('&MF(1)' NE 'E').L0040\n.*\n.*       IS THIS AN EXECUTE FORM OF THE MACRO?\n.*          YES: MAKE SURE THERE WERE NO UNNECESSARY PARAMETERS\n.*\n&INSPEC(1)  SETC T'&TYPE\n&BADSPEC(1) SETC 'TYPE'\n&INSPEC(2)  SETC T'&LOCKS\n&BADSPEC(2) SETC 'LOCKS'\n&INSPEC(3)  SETC T'&NPRMPT\n&BADSPEC(3) SETC 'NPRMPT'\n&INSPEC(4)  SETC T'&APF\n&BADSPEC(4) SETC 'APF'\n&INSPEC(5)  SETC T'&AR\n&BADSPEC(5) SETC 'AR'\n.*\n.* FIRST TEST IF REPLACE, DELETE, OR EXTRACT SPECIFIED\n.*\n&INCONS  SETC  ''              CLEAR ERROR STRING\n         AIF   (T'&FUNC EQ 'O').L0022    IF A FUNCTION SPECIFIED\n         AIF   ('&FUNC' EQ 'REPLACE' OR '&FUNC' EQ 'DELETE' OR         *\n               '&FUNC' EQ 'EXTRACT').L0022\n&INCONS  SETC '&FUNC'                   THEN MOVE TO ERROR MESSAGE\n.L0022   ANOP\n.*\n.* LOOP THROUGH INPUT DATA IN ARRAY AND FORMAT MESSAGE STRING\n.*\n&INDEX1  SETA 0\n.L0025   ANOP\n&INDEX1  SETA (&INDEX1+1)                    BUMP LOOP\n         AIF  (&INDEX1 GT 5).L0034\n.*\n.*       TEST FOR A KEYWORD SPECIFICATION\n.*         BY CHECKING ARRAY ENTRY NOT EQUAL TO \"OMITTED\"\n.*\n         AIF   ('&INSPEC(&INDEX1)' EQ 'O').L0032  TEST KEY\n.*    INCONSISTENT KEYWORD DETECTED -- PUT KEY INTO ERROR MESSAGE\n         AIF   ('&INCONS' EQ '').L0030       IF NOT 1ST ERROR\n&INCONS  SETC  '&INCONS'.','.'&BADSPEC(&INDEX1)'  THEN ADD KEY\n         AGO   .L0032\n.L0030   ANOP\n&INCONS  SETC  '&BADSPEC(&INDEX1)'           ELSE ASSIGN 1ST KEY\n.L0032   ANOP\n         AGO   .L0025                        LOOP TILL DONE\n.*\n.*       END OF TEST LOOP - PRINT MNOTE IF NECESSARY\n.*\n.L0034   ANOP\n         AIF   ('&INCONS' EQ '').L0040\n.*\n.*       MSG: \"XX,YY,ZZ OPERAND INCONSISTENT-IGNORED.\"\n         IHBERMAC 147,&INCONS\n.L0040   ANOP\n.*\n.*  SCREEN 'EXTRACT' REQUESTS\n.*\n         AIF   ('&FUNC' EQ 'EXTRACT').L0300       YES: BRANCH\n.*\n.*  CHECK FOR EXTRACT REQUEST WITH SVC PARAMETER CODED WRONG\n.*\n         AIF   ('&SVC' NE 'EXTRACT').L0050        NO: BRANCH\n&FUNCNUM SETA   &EXTRACT\n.*       MSG: \"EXTRACT PARAMETER SPECIFIED IN WRONG POSITION.\"\n       MNOTE 12,'EXTRACT PARAMETER SPECIFIED IN WRONG POSITION.'\n&BADENT  SETC  'YES'                      FATAL ERROR DETECTED\n         AGO   .L0440\n.L0050   ANOP\n.**********************************************************************\n.*                                                                    *\n.*                   VALIDATE SVC PARAMETER                           *\n.*                                                                    *\n.**********************************************************************\n.*\n.*       IF THE SVC NUMBER IS NOT VALID INDICATE ERROR\n.*\n.*            MF     OMITTED   REGISTER   SELF-DEFINING TERM DECIMAL#\n.*            --     --------  --------   ------------------ --------\n.*         STANDARD   ERROR       OK               OK          OK\n.*            L         OK       ERROR             OK          OK\n.*            E         OK        OK              ERROR       ERROR\n.*\n.*       IS THERE A SUB-PARAMETER LIST FOR THE SVC PARAMETER?\n         AIF   (N'&SVC GT 1).L0140                  YES: ERROR\n.*\n.*       IS THE SVC NUMBER SUPPLIED?\n         AIF   (T'&SVC  NE 'O').L0060               YES: CONTINUE\n.*       THE SVC NUMBER IS OMITTED\n&SVCFLAG SETA  1                                    REMEMBER FACT\n.*       IS IT ANY CASE OTHER THAN THE MF STANDARD CASE?\n         AIF   (T'&MF   NE 'O').L0200               YES: VALID\n.*       MSG: \"SVC OPERAND REQUIRED, NOT SPECIFIED\"\n         IHBERMAC 1006,SVC                          NO:  INVALID\n&BADENT  SETC  'YES'\n         AGO   .L0200\n.*\n.*       IF THIS THE REGISTER FORM OF THE SVC PARAMETER?\n.L0060   AIF   ('&SVC'(1,1) NE '(').L0080      NO: TRY OTHER CASES\n.*       THIS IS THE REGISTER FORM - IS IT THE RIGHT MF TYPE?\n         AIF   ('&MF' NE 'L').L0200                 YES: NOT MF=L\n         AGO   .L0140                               NO:  ERROR\n.*\n.*       CHECK TO SEE IF THIS IS A SELF-DEFINING TERM\n.*\n.L0080   AIF   ('&SVC'(1,1) GE '0' AND '&SVC'(1,1) LE '9').L0100\n         AIF   ('&SVC'(1,1) LT 'A' OR  '&SVC'(1,1) GT 'Z').L0140\n         AIF   ('&MF(1)' EQ 'E').L0140           MF=E CASE INVALID\n         AGO   .L0200\n.*\n.*       CHECK TO SEE IF THE SVC NUMBER IS NUMERICALLY VALID\n.*\n.L0100   AIF   ('&MF(1)' EQ 'E').L0140    NUMBER INVALID FOR MF=E\n&INDEX1  SETA  1                          START WITH FIRST CHARACTER\n&CHARS   SETC  '&SVC'                     TEMPORARY STRING\n.L0120   AIF   (K'&SVC GT 3).L0140        TOO MANY DIGITS?\n&ACHAR   SETC  '&CHARS'(&INDEX1,1)        GET A CHARACTER FROM STRING\n         AIF   ('&ACHAR' LT '0' OR '&ACHAR' GT '9').L0140  DECIMAL?\n&INDEX1  SETA  &INDEX1+1                  YES: INDICATE NEXT CHARACTER\n         AIF   (&INDEX1 LE K'&SVC).L0120  ALL CHARACTERS DONE?\n&SVCNUM  SETA  &SVC                       YES: CONVERT STRING TO NUMBER\n         AIF   (&SVCNUM GE 0 AND &SVCNUM LE 255).L0160  TOO BIG?\n.*       MSG: \"INVALID SVC OPERAND SPECIFIED- \"\n.L0140   IHBERMAC 1001,SVC,&SVC           YES: TELL USER\n&BADENT  SETC  'YES'                      FATAL ERROR DETECTED\n         AGO   .L0200\n.L0160   ANOP\n.*\n.*       CHECK TO SEE IF THE SVC NUMBER IS\n.*       RESERVED FOR AN ESR TABLE\n.*\n         AIF   (&SVCNUM EQ 109).L0180\n         AIF   (&SVCNUM EQ 116).L0180\n         AIF   (&SVCNUM EQ 122).L0180\n         AIF   (&SVCNUM EQ 137).L0180\n         AGO   .L0200\n.L0180   ANOP\n       MNOTE 12,'SVC &SVC MAY NOT BE UPDATED. IT IS RESERVED FOR ESR.'\n&BADENT  SETC  'YES'                      FATAL ERROR DETECTED\n.L0200   ANOP\n         AIF   ('&MF(1)' EQ 'E').L0440    IF MF=E SKIP\n.**********************************************************************\n.*                                                                    *\n.*                   VALIDATE FUNCTION PARAMETER                      *\n.*                                                                    *\n.**********************************************************************\n         AIF    ('&FUNC' NE 'REPLACE').L0220\n&FUNCNUM SETA   &REPLACE\n         AGO    .L0340\n.*\n.*         IF ITS A 'DELETE' THEN ENSURE NO EXTRA PARAMETERS\n.*\n.L0220   AIF    ('&FUNC' NE 'DELETE').L0240\n&FUNCNUM SETA   &DELETE\n&INSPEC(1)  SETC T'&TYPE\n&BADSPEC(1) SETC 'TYPE'\n&INSPEC(2)  SETC T'&LOCKS\n&BADSPEC(2) SETC 'LOCKS'\n&INSPEC(3)  SETC T'&NPRMPT\n&BADSPEC(3) SETC 'NPRMPT'\n&INSPEC(4)  SETC T'&APF\n&BADSPEC(4) SETC 'APF'\n&INSPEC(5)  SETC T'&EP\n&BADSPEC(5) SETC 'EP'\n&INSPEC(6)  SETC T'&EPNAME\n&BADSPEC(6) SETC 'EPNAME'\n&INSPEC(7)  SETC T'&AR\n&BADSPEC(7) SETC 'AR'\n.*\n.* LOOP THROUGH INPUT DATA IN ARRAY AND FORMAT MESSAGE STRING\n.*\n&INDEX1  SETA 0                INITIALIZE LOOP COUNTER\n&INCONS  SETC  ''              CLEAR ERROR STRING\n.L0224   ANOP\n&INDEX1  SETA (&INDEX1+1)                    BUMP LOOP\n         AIF  (&INDEX1 GT 7).L0236\n.*\n.*       TEST FOR A KEYWORD SPECIFICATION\n.*         BY CHECKING ARRAY ENTRY NOT EQUAL TO \"OMITTED\"\n.*\n         AIF   ('&INSPEC(&INDEX1)' EQ 'O').L0232  TEST KEY\n.*    INCONSISTENT KEYWORD DETECTED -- PUT KEY INTO ERROR MESSAGE\n         AIF   ('&INCONS' EQ '').L0228       IF NOT 1ST ERROR\n&INCONS  SETC  '&INCONS'.','.'&BADSPEC(&INDEX1)'  THEN ADD KEY\n         AGO   .L0232\n.L0228   ANOP\n&INCONS  SETC  '&BADSPEC(&INDEX1)'           ELSE ASSIGN 1ST KEY\n.L0232   ANOP\n         AGO   .L0224                        LOOP TILL DONE\n.*\n.*       END OF TEST LOOP - PRINT MNOTE IF NECESSARY\n.*\n.L0236   ANOP\n         AIF   ('&INCONS' EQ '').L0960\n.*\n.*       MSG: \"XX,YY,ZZ OPERAND INCONSISTENT-IGNORED.\"\n         IHBERMAC 147,&INCONS\n         AGO   .L0960\n.L0240   ANOP\n&BADENT  SETC  'YES'                 FATAL ERROR DETECTED\n         AIF   (T'&FUNC EQ 'O').L0260\n.*       MSG: \"INVALID FUNCTION OPERAND SPECIFIED- \"\n         IHBERMAC 1001,FUNCTION-CODE,&FUNC\n         AGO   .L0340\n.L0260   ANOP\n.*       MSG: \"FUNCTION-CODE OPERAND REQUIRED, NOT SPECIFIED\"\n.L0280   IHBERMAC 1006,FUNCTION-CODE\n         AGO   .L0340\n.L0300   ANOP\n.*\n.*         FOR AN 'EXTRACT' ENSURE NO EXTRA PARAMETERS\n.*\n&FUNCNUM SETA   &EXTRACT\n&VERSION SETC   '2'       EXTRACT IS A VERSION 2 SPECIFICATION @YA11662\n&SVCFLAG SETA  1\n         AIF    (T'&SVC EQ 'O').L0320               SVC SPECIFIED?\n.*       MSG: \"SVCNUM AND EXTRACT OPTIONS ARE MUTUALLY EXCLUSIVE\"\n       MNOTE 12,'SVCNUM AND EXTRACT OPTIONS ARE MUTUALLY EXCLUSIVE.'\n&BADENT  SETC  'YES'                      FATAL ERROR DETECTED\n.L0320   ANOP\n&INSPEC(1)  SETC T'&TYPE\n&BADSPEC(1) SETC 'TYPE'\n&INSPEC(2)  SETC T'&LOCKS\n&BADSPEC(2) SETC 'LOCKS'\n&INSPEC(3)  SETC T'&NPRMPT\n&BADSPEC(3) SETC 'NPRMPT'\n&INSPEC(4)  SETC T'&APF\n&BADSPEC(4) SETC 'APF'\n&INSPEC(5)  SETC T'&AR\n&BADSPEC(5) SETC 'AR'\n.*\n.* LOOP THROUGH INPUT DATA IN ARRAY AND FORMAT MESSAGE STRING\n.*\n&INDEX1  SETA 0                INITIALIZE LOOP COUNTER\n&INCONS  SETC  ''              CLEAR ERROR STRING\n.L0324   ANOP\n&INDEX1  SETA (&INDEX1+1)                    BUMP LOOP\n         AIF  (&INDEX1 GT 5).L0336\n.*\n.*       TEST FOR A KEYWORD SPECIFICATION\n.*         BY CHECKING ARRAY ENTRY NOT EQUAL TO \"OMITTED\"\n.*\n         AIF   ('&INSPEC(&INDEX1)' EQ 'O').L0332  TEST KEY\n.*    INCONSISTENT KEYWORD DETECTED -- PUT KEY INTO ERROR MESSAGE\n         AIF   ('&INCONS' EQ '').L0328       IF NOT 1ST ERROR\n&INCONS  SETC  '&INCONS'.','.'&BADSPEC(&INDEX1)'  THEN ADD KEY\n         AGO   .L0332\n.L0328   ANOP\n&INCONS  SETC  '&BADSPEC(&INDEX1)'           ELSE ASSIGN 1ST KEY\n.L0332   ANOP\n         AGO   .L0324                        LOOP TILL DONE\n.*\n.*       END OF TEST LOOP - PRINT MNOTE IF NECESSARY\n.*\n.L0336   ANOP\n         AIF   ('&INCONS' EQ '').L0440\n.*\n.*       MSG: \"XX,YY,ZZ OPERAND INCONSISTENT-IGNORED.\"\n         IHBERMAC 147,&INCONS\n         AGO   .L0440\n.**********************************************************************\n.*                                                                    *\n.*                   VALIDATE SVC TYPE PARAMETER                      *\n.*                                                                    *\n.**********************************************************************\n.L0340   ANOP\n         AIF   ('&TYPE' EQ '1' OR '&TYPE' EQ '2' OR                    -\n               '&TYPE' EQ '3' OR '&TYPE' EQ '4' OR                     -\n               '&TYPE' EQ '5' OR '&TYPE' EQ '6').L0380\n&BADENT  SETC  'YES'                 FATAL ERROR DETECTED\n         AIF   (T'&TYPE EQ 'O').L0360      PARAMETER OMITTED?\n.*       MSG: \"INVALID TYPE OPERAND SPECIFIED- \"\n         IHBERMAC 1001,TYPE,&TYPE          NO: JUST IN ERROR\n         AGO   .L0440\n.L0360   ANOP                              YES: PARAMETER OMITTED\n.*       MSG: \"TYPE OPERAND REQUIRED, NOT SPECIFIED\"\n         IHBERMAC 1006,TYPE\n         AGO   .L0440\n.L0380   ANOP\n&TYPENUM SETA  &TYPE\n.L0400   ANOP\n.*\n.*       IF ITS A TYPE 5 SVC DON'T ALLOW AN ENTRY POINT TO BE SPECIFIED\n.*\n         AIF   (&TYPENUM NE 5).L0440\n         AIF   (T'&EP EQ 'O' AND T'&EPNAME EQ 'O').L0580\n       MNOTE 12,'TYPE=5 AND EPNAME OPTIONS ARE MUTUALLY EXCLUSIVE'\n&BADENT  SETC  'YES'                 FATAL ERROR DETECTED\n         AGO   .L0580\n.L0440   ANOP\n.**********************************************************************\n.*                                                                    *\n.*                   VALIDATE ENTRY POINT PARAMETER                   *\n.*                   'EP' OR 'EPNAME'\n.*                                                                    *\n.**********************************************************************\n.*\n.*       CHECK ENTRY POINT -\n.*\n.*       MF        LABEL     REGISTER  OMITTED\n.*       --        -----     --------  --------\n.*        E        ERROR        OK        OK\n.*        L         OK        ERROR       OK\n.*   STANDARD       OK          OK      ERROR\n.*\n.*\n.*\n.*       NEITHER \"EP\" OR \"EPNAME\" OPTIONS SPECIFIED?\n.*\n         AIF   (T'&EP NE 'O' OR T'&EPNAME NE 'O').L0460  NO: OK\n         AIF   ('&MF' EQ 'L' OR '&MF(1)' EQ 'E').L0580   MF=L/E OK\n&BADENT  SETC  'YES'                              OTHERWISE: FATAL\n.*       MSG: \"ENTRY-POINT OPERAND REQUIRED, NOT SPECIFIED\"\n         IHBERMAC 1006,ENTRY-POINT\n         AGO   .L0580                        GO TO LOCK PROCESSING\n.L0460   ANOP\n.*\n.*       BOTH \"EP\" AND \"EPNAME\" OPTIONS SPECIFIED?\n.*\n         AIF   (T'&EP EQ 'O' OR T'&EPNAME EQ 'O').L0480  NO: OK\n&BADENT  SETC  'YES'                                    YES: FATAL\n.*     MSG: \"BOTH \"EP\" AND \"EPNAME\" SPECIFIED. \"\n     MNOTE 12,'*** BOTH \"EP\" AND \"EPNAME\" SPECIFIED. '\n         AGO   .L0580                        GO TO LOCK PROCESSING\n.L0480   ANOP\n.*\n.*       DETERMINE WHICH ENTRY POINT OPTION WAS USED\n.*\n         AIF   (T'&EP EQ 'O').L0500                    EP OPTION?\n&EPCHAR  SETC  '&EP'                     INITIALIZE MACRO VARIABLE\n&EPMSG   SETC  'EP'                      INITIALIZE MSG VARIABLE\n.*       ARE THERE ANY SUB-PARAMETERS?\n         AIF   (N'&EP GT 1).L0560                   YES: ERROR\n         AGO   .L0520\n.L0500   ANOP\n&EPCHAR  SETC  '&EPNAME'                 INITIALIZE MACRO VARIABLE\n&EPMSG   SETC  'EPNAME'                  INITIALIZE MSG VARIABLE\n&VERSION SETC  '2'         EPNAME IS A VERSION 2 SPECIFICATION @YA11662\n.*       ARE THERE ANY SUB-PARAMETERS?\n         AIF   (N'&EPNAME GT 1).L0560               YES: ERROR\n.L0520   ANOP\n.*\n.*       BREAK OUT PROCESSING DEPENDING ON MF TYPE\n.*\n         AIF   (T'&MF EQ 'O').L0580                  STANDARD CASE\n         AIF   ('&MF' EQ 'L').L0540                  LIST CASE\n.*\n.*       HANDLE THE MF=E CASES\n.*\n         AIF   ('&EPCHAR'(1,1) EQ '(' ).L0580\n         AGO   .L0560    ANYTHING OTHER THAN REGISTER FORM INVALID\n.L0540   ANOP\n.*\n.*       HANDLE THE MF=L CASES\n.*\n         AIF   ('&EPCHAR'(1,1) NE '(').L0580\n.*                                           REGISTER FORM INVALID\n.L0560   ANOP\n.*\n.*       ISSUE MNOTE FOR INVALID ENTRY-POINT OPERAND\n.*\n&BADENT  SETC  'YES'                       FATAL ERROR DETECTED?\n.*       MSG: \"INVALID (EP,EPNAME) OPERAND SPECIFIED-XXX\"\n         IHBERMAC 1001,&EPMSG,&EPCHAR\n.L0580   ANOP\n         AIF   ('&MF(1)' EQ 'E').L0960\n.**********************************************************************\n.*                                                                    *\n.*               VALIDATE LOCKS PARAMETERS                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.*       CHECK FOR VALID, NON-DUPLICATE LOCKS\n.*             - TYPE 1 DEFAULTS TO HAVING THE LOCAL LOCK\n.*             - TYPE 3 + 4 MAY NOT HOLD ANY GLOBAL SPIN LOCK\n.*             - TYPE 6 MAY NOT HOLD ANY LOCK\n.*\n         AIF   (&FUNCNUM EQ &EXTRACT).L0960  EXTRACT CHECKING DONE\n         AIF   (T'&LOCKS EQ 'O').L0840\n         AIF   (&TYPENUM NE  6 ).L0600\n         MNOTE 12,'*** A TYPE 6 SVC MAY NOT HAVE ANY LOCKS'\n&BADENT  SETC  'YES'                 FATAL ERROR DETECTED\n         AGO   .L0880\n.*\n.*       IS THIS A DUPLICATE LOCK?\n.*\n.L0600   ANOP\n&INDEX1  SETA   1\n.L0620   AIF    (&INDEX1 GT N'&LOCKS).L0840   PROCESSED ALL LOCKS?\n&INDEX2  SETA   &INDEX1+1                  NO: PROCESS NEXT\n.L0640   AIF    (&INDEX2 GT N'&LOCKS).L0680   LAST LOCK IN LIST?\n         AIF    ('&LOCKS(&INDEX1)'  NE '&LOCKS(&INDEX2)').L0660\n.*                                             NO: IS IT A DUPLICATE?\n         MNOTE 12,'*** DUPLICATE LOCK-- &LOCKS(&INDEX1)'\n&BADENT  SETC  'YES'                       FATAL ERROR DETECTED\n         AGO   .L0820\n.L0660   ANOP\n&INDEX2  SETA  &INDEX2+1                   NEXT LOCK IN LIST\n         AGO   .L0640\n.L0680   ANOP\n.*\n.*       MAP THE LOCK NAME INTO ITS NUMERIC REPRESENTATION\n.*\n&TEMP    SETA  0\n         AIF   ('&LOCKS(&INDEX1)' NE 'LOCAL').L0700\n&TEMP    SETA  &NLOCAL\n.L0700   AIF   ('&LOCKS(&INDEX1)' NE 'CMS').L0720\n&TEMP    SETA  &NCMS\n.L0720   AIF   ('&LOCKS(&INDEX1)' NE 'SRM').L0740\n&TEMP    SETA  &NSRM                                           @ZMC3226\n.L0740   AIF   ('&LOCKS(&INDEX1)' NE 'SALLOC').L0760\n&TEMP    SETA  &NSALLOC\n.L0760   AIF   ('&LOCKS(&INDEX1)' NE 'DISP').L0780\n&TEMP    SETA  &NDISP\n.L0780   AIF   (&TEMP NE 0).L0800             VALID LOCK FOUND?\n.*       MSG: \"INVALID LOCK OPERAND SPECIFIED- \"\n         IHBERMAC 1001,LOCK,&LOCKS(&INDEX1)   NO: INVALID LOCK\n&BADENT  SETC  'YES'                  FATAL ERROR DETECTED\n.L0800   ANOP\n&REQLOCK SETA  &REQLOCK+&TEMP         ADD LOCK TO LOCKS VALUE\n.* CHECK FOR TYPE 3 OR TYPE 4 SVC REQUESTING A GLOBAL SPIN LOCK\n         AIF   (&TYPENUM NE 3 AND &TYPENUM NE 4).L0820   TYPE 3/4?\n         AIF   (&TEMP NE &NSRM AND &TEMP NE &NSALLOC                   -\n               AND &TEMP NE &NDISP).L0820              SPIN LOCK?\n   MNOTE 12,'TYPE 3/4 SVC CANNOT GET SPIN (&LOCKS(&INDEX1)) LOCK.'\n&BADENT  SETC  'YES'                  FATAL ERROR DETECTED\n.L0820   ANOP\n&INDEX1  SETA  &INDEX1+1              ITERATE IN LOOP\n         AGO   .L0620\n.*\n.*       DEFAULT THE LOCAL LOCK FOR TYPE 1 SVC\n.*\n.L0840   AIF   (&TYPENUM NE 1).L0880  TYPE 1 SVC?\n&TEMP    SETA  &REQLOCK/&NLOCAL/2*2   ZERO THE LOCAL BIT DOWN\n&TEMP    SETA  &REQLOCK/&NLOCAL-&TEMP ISOLATE THE LOCAL BIT\n         AIF   (&TEMP NE 0).L0880    LOCAL LOCK ALREADY SPECIFIED?\n&REQLOCK SETA  &REQLOCK+&NLOCAL       NO: DEFAULT IT\n.**********************************************************************\n.*                                                                    *\n.*               VALIDATE APF PARAMETER                               *\n.*                                                                    *\n.**********************************************************************\n.L0880   ANOP\n         AIF   (T'&APF EQ 'O' OR '&APF' EQ 'NO').L0920\n         AIF   ('&APF' EQ 'YES').L0900\n.*       MSG: \"APF KEYWORD MUST BE YES OR NO. \"\n         MNOTE 12,'APF KEYWORD MUST BE YES OR NO.'\n&BADENT  SETC  'YES'                    FATAL ERROR DETECTED\n         AGO   .L0920\n.L0900   ANOP\n&APFNUM  SETA  &NAPF\n.**********************************************************************\n.*                                                                    *\n.*               VALIDATE AR PARAMETER                                *\n.*                                                                    *\n.**********************************************************************\n.L0920   ANOP\n         AIF   (T'&AR EQ 'O' OR '&AR' EQ 'NO').L0930\n         AIF   ('&AR' EQ 'YES').L0925\n.*       MSG: \"AR KEYWORD VALUE MUST BE YES OR NO.\"\n         MNOTE 12,'AR KEYWORD VALUE MUST BE YES OR NO.'\n&BADENT  SETC  'YES'                    FATAL ERROR DETECTED\n         AGO   .L0930\n.L0925   ANOP\n&ARNUM   SETA  &NAR  SET VALUE SO AR BIT=1 IN ATTRIBUTE BYTE\n.L0930   ANOP\n.**********************************************************************\n.*                                                                    *\n.*               VALIDATE NON-PREEMPTIBILITY PARAMETER                *\n.*                                                                    *\n.**********************************************************************\n         AIF   (T'&NPRMPT EQ 'O' OR '&NPRMPT' EQ 'NO').L0960\n         AIF   ('&NPRMPT' EQ 'YES').L0940\n.*       MSG: \"NPRMPT KEYWORD MUST BE YES OR NO.\"\n         MNOTE 12,'NPRMPT KEYWORD MUST BE YES OR NO.'\n&BADENT  SETC  'YES'                    FATAL ERROR DETECTED\n.L0940   ANOP\n&NPNUM   SETA  &NNP\n.**********************************************************************\n.*                                                                    *\n.*               ARE THE PARAMETERS VALID?                            *\n.*                                                                    *\n.**********************************************************************\n.L0960   AIF   ('&BADENT' NE 'YES').L0980\n         MNOTE 12,'*** ERROR(S) CAUSED MACRO EXPANSION TERMINATION'\n         AIF   (T'&NM EQ 'O').L1380\n&NM      DS    0H\n         AGO   .L1380\n.**********************************************************************\n.*                                                                    *\n.* GENERATE CODE TO FIND THE SVCUPDTE SERVICE IF THIS IS NOT MF=L     *\n.*                                                                    *\n.**********************************************************************\n.L0980   AIF   ('&MF' EQ 'L').L1040\n&NM      L     R15,=V(SUBSVCUP)   GET SERVICE ROUTINE\n.**********************************************************************\n.*                                                                    *\n.*       GENERATE CODE TO LOAD R1 WITH PARAMETER LIST IF NOT MF=L     *\n.*                                                                    *\n.**********************************************************************\n.*\n.*       IF THIS IS THE EXECUTE FORM - USE THE GIVEN PARAMETER LIST\n.*\n         AIF   ('&MF(1)' NE 'E').L1020  IF THIS ISN'T MF=E\n         MACPARM R1,&MF(2)\n         AGO   .L1280\n.*\n.*       IF THIS IS STANDARD FORM - THE PARAMETER LIST FOLLOWS\n.*\n.L1020   AIF   (T'&MF NE 'O').L1040\n         CNOP  0,4                     ENSURE ALIGNMENT FOR STD FORM\n         BAS   R1,&LAB1                SET POINTER TO PARAMETER LIST\n.**********************************************************************\n.*                                                                    *\n.*       GENERATE PARAMETER LIST IF THIS IS NOT MF=E                  *\n.*                                                                    *\n.**********************************************************************\n.L1040   AIF   ('&MF' NE 'L').L1060\n&NM      DS    0F                      FORCE WORD ALIGNMENT\n.L1060   ANOP\n         DC    AL1(&VERSION)           SVCUPDTE VERSION NUMBER\n         DC    AL1(&FUNCNUM)           FUNCTION TO PERFORM\n         DC    AL1(&SVCFLAG)           SVC FLAG\n*                                          0 - SVC NUMBER SUPPLIED\n*                                          1 - SVC NUMBER NOT GIVEN\n.*\n.*       IF THIS IS AN EXTRACT FUNCTION ZERO THE SVC NUMBER\n.*       FIELD IN THE PARAMETER LIST\n.*\n         AIF   (&FUNCNUM NE &EXTRACT).L1080\n         DC    AL1(0)              SVC NUMBER NOT USED FOR EXTRACT\n         AGO   .L1140\n.L1080   ANOP\n.*\n.*       IF NO SVC PARAMETER SUPPLIED OR THE REGISTER FORM WAS USED\n.*       THEN USE ZERO IN THE PARAMETER LIST FOR THE SVC PARAMETER\n.*\n         AIF   (T'&SVC EQ 'O').L1100\n         AIF   ('&SVC'(1,1) EQ '(').L1100\n         DC    AL1(&SVC)               SVC TO MODIFY\n         AGO   .L1120\n.L1100   ANOP\n         DC    AL1(0)                  SVC NUMBER TO FILL IN LATER\n.L1120   ANOP\n.*\n.*       IF THIS IS A DELETE FUNCTION THE REST OF THE LIST IS ZEROES\n.*\n         AIF   (&FUNCNUM NE &DELETE).L1140\n         DC    16X'0'                  DUMMY ENTRY\n         AGO   .L1280\n.*\n.*       IF A ENTRY POINT IS NOT SUPPLIED OR REGISTER FORM IS USED\n.*       THEN USE ZERO AS THE ENTRY POINT\n.*\n.L1140   AIF   (T'&EP EQ 'O').L1160\n         AIF   ('&EP'(1,1) EQ '(').L1160\n         DC    AL4(&EP)                ENTRY POINT OF NEW SVC ROUTINE\n         AGO   .L1200\n.L1160   AIF   (&TYPENUM EQ 5).L1180   TYPE 5 SVC?\n         DC    AL4(1)                  ENTRY POINT NOT SPECIFIED\n         AGO   .L1200\n.L1180   ANOP\n         DC    AL4(0)                  ENTRY POINT NOT SPECIFIED\n.L1200   ANOP\n.*\n.*       IF THIS IS AN EXTRACT FUNCTION ZERO THE TYPE AND ATTRIBUTE\n.*       FIELDS IN THE PARAMETER LIST\n.*\n         AIF   (&FUNCNUM NE &EXTRACT).L1220\n         DC    AL1(0)\n         DC    AL1(0)\n         DC    AL1(0)\n         DC    AL1(0)                    RESERVED\n         AGO   .L1240\n.L1220   ANOP\n         DC    AL1(&TYPENUM)           SVC TYPE\n&TEMP    SETA  &APFNUM+&ARNUM+&NPNUM   GENERATE ATTRIBUTE CONSTANT\n         DC    AL1(&TEMP)              SVC ATTRIBUTE BITS\n         DC    AL1(&REQLOCK)           SVC LOCKS\n         DC    AL1(0)                  RESERVED\n.L1240   ANOP\n.*\n.*       IF AN EPNAME IS NOT SUPPLIED OR REGISTER FORM IS USED\n.*       THEN ZERO EPNAME FIELD IN PARAMETER LIST\n.*\n         AIF   (T'&EPNAME EQ 'O').L1260\n         AIF   ('&EPNAME'(1,1) EQ '(').L1260\n         DC    CL8'&EPNAME'            EPNAME OF NEW SVC ROUTINE\n         AGO   .L1280\n.L1260   ANOP\n         DC    8X'00'                  EPNAME NOT SPECIFIED\n.L1280   AIF   ('&MF' EQ 'L').L1380\n.**********************************************************************\n.*                                                                    *\n.*       GENERATE CODE TO DYNAMICALLY INSERT EP VALUE INTO            *\n.*       THE PARAMETER LIST FOR MF=E AND STANDARD                     *\n.*                                                                    *\n.**********************************************************************\n.L1300   ANOP\n&LAB1    DS    0H\n         AIF   (&FUNCNUM EQ &DELETE).L1340        END DELETE PROC\n         AIF   (T'&EP    EQ 'O').L1320    ENTRY POINT INCLUDED?\n         AIF   (T'&MF EQ 'O' AND '&EP'(1,1) NE '(').L1340\n         ST    &EP(1),&EPOFF.(0,1)     STORE ADDRESS IN PARAMETER LIST\n         AGO   .L1340                  GO PROCESS SVC NUMBER\n.**********************************************************************\n.*                                                                    *\n.*       GENERATE CODE TO DYNAMICALLY INSERT EPNAME VALUE INTO    *\n.*       THE PARAMETER LIST FOR MF=E AND STANDARD                     *\n.*                                                                    *\n.**********************************************************************\n.L1320   ANOP\n         AIF   (T'&EPNAME EQ 'O').L1340     EPNAME INCLUDED?\n         AIF   (T'&MF EQ 'O' AND '&EPNAME'(1,1) NE '(').L1340  REG\n         MVC   &EPNOFF.(8,1),0(&EPNAME(1))  MOVE EPNAME INTO LIST\n.**********************************************************************\n.*                                                                    *\n.*       GENERATE CODE TO DYNAMICALLY INSERT SVC VALUES INTO          *\n.*       THE PARAMETER LIST FOR MF=E AND STANDARD                     *\n.*                                                                    *\n.**********************************************************************\n.L1340   ANOP\n         AIF   (T'&SVC EQ 'O').L1360     SVC SUPPLIED?\n         AIF   ('&SVC'(1,1) NE '(').L1360  YES: REGISTER FORM?\n         STH   &SVC(1),&SVCOFF-1(0,1)  RESET SVCFLAG & STORE SVC#\n.L1360   ANOP\n         BALR  R14,R15       CALL UPDATE ROUTINE\n.L1380   ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MVST": {"ttr": 9481, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\t\\x15O\\x01\\t\\x15O\\x01Q\\x00\\x11\\x00\\x1d\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2009-06-03T00:00:00", "modifydate": "2009-06-03T01:51:00", "lines": 17, "newlines": 29, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      MVST  &R,&S                                      ADDED GP09154\n.*\n.*    BACKLEVEL IMPLEMENTATION OF MVST FOR HERCULES\n.*    DOES NOT PRODUCE CODE 3\n.*\n         LCLA  &I\n&I       SETA  &SYSNDX\n&NM      MACPARM MODE=LBL\nZZS&I.L  MVC   0(1,&R),0(&S)\n         CLM   R0,1,0(&R)    MOVED END CHAR ?\n         BE    ZZS&I.X\n         LA    &S,1(,&S)\n         LA    &R,1(,&R)\n         B     ZZS&I.L       DO AGAIN\nZZS&I.X  TM    ZZS&I.L,X'FF'   SET CC=1 - MIXED\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MYLVL": {"ttr": 9483, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x045_\\x01\\x045_\\x18\\t\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2004-12-20T00:00:00", "modifydate": "2004-12-20T18:09:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         MYLVL ,\n         GBLA  &MYLVL,&REL\n         GBLB  &MFT,&MVT,&SVS,&MVS,&MVSSP,&MVSXA,&MVSESA,&OS390,&Z900\n*   ASSIGN AN (ARBITRARY, BUT CONSISTENT VALUE TO THE GENERATING\n*   SYSTEM:   1-MFT   2-MVT   3-SVS   4-MVT   5-SE    6-SP1   7-SP3\n*             8-SP6   9-XA   10-ESA  11-S390 12-Z900\n&MYLVL   SETA  12\n         AIF   (&Z900).LVLSET\n&MYLVL   SETA  11\n         AIF   (&OS390).LVLSET\n&MYLVL   SETA  10\n         AIF   (&MVSESA).LVLSET\n&MYLVL   SETA  9\n         AIF   (&MVSXA).LVLSET\n&MYLVL   SETA  8\n         AIF   (&MVSSP AND &REL GE 106).LVLSET\n&MYLVL   SETA  7\n         AIF   (&MVSSP AND &REL GE 103).LVLSET\n&MYLVL   SETA  6\n         AIF   (&MVSSP).LVLSET\n&MYLVL   SETA  5\n         AIF   (&MVS AND &REL GT 41).LVLSET\n&MYLVL   SETA  4\n         AIF   (&MVS).LVLSET\n&MYLVL   SETA  3\n         AIF   (&SVS).LVLSET\n&MYLVL   SETA  2\n         AIF   (&MVT).LVLSET\n&MYLVL   SETA  1\n.LVLSET  MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OICC": {"ttr": 9485, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x03\\x10_\\x01\\x06(/\\t#\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-04-15T00:00:00", "modifydate": "2006-10-09T09:23:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&N       OICC  &CODE,&REAS,&RESULT=                    NEW 2003.091 GYP\n         GBLC  &ZZCCNAM\n         LCLC  &L\n&L       SETC  'L'''\n         AIF   ('&RESULT' EQ '').NONEW\n&ZZCCNAM SETC  '&RESULT'\n.NONEW   AIF   ('&ZZCCNAM' NE '').NODEF\n         MNOTE *,'OICC: RESULT= NOT SPECIFIED - DEFAULTED TO RETCODE'\n&ZZCCNAM SETC  'RETCODE'\n.NODEF   ANOP  ,\n&N MACPARM &ZZCCNAM+&L&ZZCCNAM-1,&CODE,OP=OI,OPR=STC,NULL=SKIP,MODE=REV\n   MACPARM &ZZCCNAM+&L&ZZCCNAM+3,&REAS,OP=OI,OPR=STC,NULL=SKIP,MODE=REV\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OPTIONGB": {"ttr": 9487, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         GBLA  &SYSPRM#            NUMBER OF SYSPARM TOKENS\n         GBLA  &SVCJFCB            0 OR MODJFCB SVC NUMBER       82099\n         GBLA  &SVC@SVC            0 OR @SERVICE ROUTINE SVC     83100\n         GBLA  &SVCTMSX,&SVCTMSY   0 OR UCC-1 (TMS) SVC X/Y NMBR 83100\n         GBLB  &BUGBEAR      (WAS &DEBUG - SAME AS HASP)         81331\n         GBLB  &MVS                1 IF OS/VS2 MVS\n         GBLB  &MVSSP              1 IF OS/VS2 MVS/SP            82068\n         GBLB  &MVSXA              1 IF OS/VS2 MVS/XA (SP2)      82068\n         GBLB  &MVSESA             1 IF OS/VS2 MVS/ESA (SP3)     90217\n         GBLB  &SVS                1 IF OS/VS2 SVS\n         GBLB  &VS1                1 IF OS/VS1                   82137\n         GBLC  &CPU                360/370/470\n         GBLC  &JES2REL            JES2 LEVEL                    85076\n         GBLC  &LOCAL              INSTALLATION ACRONYM/NAME\n         GBLC  &MODEL              360/370/470\n         GBLC  &SPVEREL            MVS/SP VERSION/RELEASE/LEVEL  82091\n         GBLC  &SYSPRMS(10)        SYSPARM TOKENS\n         GBLC  &PRTMAC             GEN OPTION FOR LOCAL  MAPS    81142\n         GBLC  &PRTSOR             GEN OPTION FOR SOURCE         81142\n         GBLC  &PRTSYS             GEN OPTION FOR SYSTEM MAPS    81142\n         GBLC  &SYSTEM             MVT/SVS/MVS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARFGSET": {"ttr": 9489, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00%\\x01\\x03\\x15\\x0f\\x01\\x03\"\\x9f\\x11(\\x00)\\x00\\x01\\x00)\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-05-30T00:00:00", "modifydate": "2003-08-17T11:28:25", "lines": 41, "newlines": 1, "modlines": 41, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PARFGSET &BXLE,&TEXT=PRS$TEXT,&ERR=?,&DONE=            GP03229\n.*--------------------------------------------------------------------*\n.*  PARFGSET IS USED AFTER A PARSE REQUEST FINDS A SELF-DEFINING      *\n.*    KEYWORD REPRESENTING A FLAG TO BE TURNED ON OR OFF, AS DEFINED  *\n.*    BY A TABLE BUILD WITH PARKEYBX/PARKEYFG MACROS.                 *\n.*                                                                    *\n.*  USES REGISTERS 14-2, AND WORK AREA DB                             *\n.*--------------------------------------------------------------------*\n         GBLB  &ZZPARFG\n         LCLC  &P                                               GP03229\n&P       SETC  'ZZP'.'&SYSNDX'                                  GP03229\n*---------------------------------------------------------------------*\n*  LOOK UP TEXT &TEXT USING BXLE TABLE &BXLE\n*---------------------------------------------------------------------*\n&NM      MACPARM R1,&BXLE    GET BXLE POINTER\n         MACPARM R0,&TEXT    VERB TO BE LOCATED\n         SUBCALL SUBVERB     (NEEDS EXTRN OR SERVLOAD FOR SUBVERB)\n         LTR   R2,R15        DID IT WORK ?\n         MACPARM &ERR,OP=BZ,OPR=BZR,MODE=ONE  TAKE ERROR BRANCH\n         SPACE 1\n*---------------------------------------------------------------------*\n*  APPLY FLAG OFF, THEN FLAG ON REQUEST                               *\n*---------------------------------------------------------------------*\n         SR    R15,R15       GET THE LENGTH\n         IC    R15,OFOFLEN(,R2)  LOAD FLAG LENGTH - 1\n         MVC   DB,=8X'FF'\n         EX    R15,EXFGOFF   SET FLAG(S) OFF\n         LA    R14,OFOFONN(R15,R2)  POINT TO ON FLAG\n         EX    R15,EXFGON    SET FLAGS ON\n         MACPARM &DONE,OP=B,OPR=BR,MODE=ONE,NULL=SKIP  KEYWORD PROC\n         AIF   (&ZZPARFG).MEND\n         AIF   ('&DONE' NE '').NORND                            GP03229\n         B     &P.X\n.NORND   ANOP  ,                                                GP03229\nEXFGOFF  NC    0(*-*,R1),OFOFOFF(R2)  SET FLAGS OFF\nEXFGON   OC    0(*-*,R1),0(R14)       SET FLAGS ON\n&ZZPARFG SETB  1\n         AIF   ('&DONE' NE '').MEND                             GP03229\n&P.X     DS    0H\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARKEYAD": {"ttr": 9729, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x004\\x01\\x03\\x11_\\x01\\x03$_\\x13T\\x00\\x18\\x00\\x13\\x00\\x16\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-04-25T00:00:00", "modifydate": "2003-09-02T13:54:34", "lines": 24, "newlines": 19, "modlines": 22, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PARKEYAD &TEXT,&ADD,&MIN=3\n.*--------------------------------------------------------------------*\n.*  THIS MACRO BUILDS BRANCH ADDRESS TABLES FOR KEYWORD PROCESSING.   *\n.*  USE IN CONJUNCTION WITH @PARSER/PARSE, AND PARKEYBX SERVICES,     *\n.*  AND THE SUBVERB SUBROUTINE.                                       *\n.*--------------------------------------------------------------------*\n         GBLB  &ZZZOPT@\n         LCLA  &I,&J                                            GP03245\n&I       SETA  N'&TEXT                                          GP03245\n&J       SETA  16            SIGNAL SL2 ADDRESS\n         AIF   (&ZZZOPT@).LATER\nOFO@TXT  EQU   0,8,C'C'      VERB\nOFO@MIN  EQU   8,1,C'F'      MINIMUM LENGTH\nOFO@FLG  EQU   9,1,C'F'      (ARBITRARY) FLAG\nOFO@ADD  EQU  10,2,C'A'      OFFSET TO PROCESSING CODE\n&ZZZOPT@ SETB  1             DEFINITIONS DONE\n.LATER   AIF   ('&TEXT'(1,1) EQ '''').QUOTED\n&NM      DC    CL8'&TEXT ',AL1(&MIN-1,&J),SL2(&ADD)\n         MEXIT ,\n.QUOTED  ANOP  ,\n&I       SETA  &I-2\n&NM      DC    CL8&TEXT,AL1(&MIN-1,&J),SL2(&ADD)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARKEYBX": {"ttr": 9731, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x08\\x01\\x03\\x11_\\x01\\x03\\x11_\\x14\\x00\\x00\\x17\\x00\\x07\\x00\\x14\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-04-25T00:00:00", "modifydate": "2003-04-25T14:00:08", "lines": 23, "newlines": 7, "modlines": 20, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PARKEYBX &PREFIX\n.*--------------------------------------------------------------------*\n.*  THIS MACRO BUILDS THE BXLE ADDRESS TABLE FOR THE SUBVERB ROUTINE. *\n.*  USE IN CONJUNCTION WITH @PARSER/PARSE, AND PARKEYAD/PARKEYFG      *\n.*  MACROS TO BUILD THE TABLES.                                       *\n.*                                                                    *\n.*  THE PREFIX OPERAND SPECIFIES THE NAME OF THE FIRST TABLE ENTRY.   *\n.*  THE LAST ADDRESS IS PREFIX.Z, AND THE ENTRY LENGTH IS TAKEN AS    *\n.*  PREFIX.2-PREFIX                                                   *\n.*--------------------------------------------------------------------*\n         GBLC  &ZZZOPTL,&MACPLAB\n&ZZZOPTL SETC ''             RESET FLAG TABLE ENTRY LENGTH\n         LCLC  &PFX\n&PFX     SETC  '&PREFIX'\n         AIF   ('&PREFIX' NE '').HAVEPFX\n         MNOTE 8,'PARKEYBX: TABLE NAME MISSING'\n&PFX     SETC  'VERBTAB'\n.HAVEPFX AIF   ('&NM' NE '').HAVENM\n&MACPLAB SETC '&PFX'.'P'\n.HAVENM  ANOP  ,\n&NM      MACPARM A(&PFX,&PFX.2-&PFX,&PFX.N,0),OP=DC,MODE=ONE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARKEYFG": {"ttr": 9733, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00D\\x01\\x03\\x11_\\x01\\x03\\x11o\\x16\\x14\\x00\\x1d\\x00\\x14\\x00\\x1d\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2003-04-25T00:00:00", "modifydate": "2003-04-26T16:14:44", "lines": 29, "newlines": 20, "modlines": 29, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PARKEYFG &TEXT,&FLAG,&OFF,&ON,&LEN=,&MIN=3\n.*--------------------------------------------------------------------*\n.*  THIS MACRO BUILDS ON/OFF FLAG SETTINGS FOR KEYWORD PROCESSING.    *\n.*  USE IN CONJUNCTION WITH @PARSER/PARSE, AND PARKEYBX SERVICES,     *\n.*  AND THE SUBVERB SUBROUTINE.                                       *\n.*--------------------------------------------------------------------*\n         GBLB  &ZZZOPTF\n         GBLC  &ZZZOPTL\n         AIF   ('&LEN' EQ '').NOLOVR\n&ZZZOPTL SETC  '&LEN'\n.NOLOVR  AIF   ('&ZZZOPTL' NE '').HAVELEN\n&ZZZOPTL SETC  '1'\n.HAVELEN AIF   (&ZZZOPTF).LATER\nOFOFTXT  EQU   0,8,C'C'      VERB\nOFOFMIN  EQU   8,1,C'F'      MINIMUM LENGTH (-1)\nOFOFLEN  EQU   9,1,C'F'      OFF/ON DATA LENGTH (-1)\nOFOFSAD  EQU  10,2,C'S'      FLAG ADDRESS S-CON\nOFOFOFF  EQU  12,1,C'X'      FLAGS TO BE RESET\nOFOFONN  EQU  13,1,C'X'      FLAGS TO BE SET\n&ZZZOPTF SETB  1             DEFINITIONS DONE\n.LATER   AIF   ('&TEXT'(1,1) EQ '''').QUOTED\n&NM      DC    CL8'&TEXT',AL1(&MIN-1,&ZZZOPTL-1),SL2(&FLAG),AL(&ZZZOPTL*\n               )(0-(&OFF+1),&ON+0)\n         MEXIT ,\n.QUOTED  ANOP  ,\n&NM      DC    CL8&TEXT,AL1(&MIN-1,&ZZZOPTL-1),SL2(&FLAG),AL(&ZZZOPTL)(*\n               0-(&OFF+1),&ON+0)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMLOAD": {"ttr": 9735, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\t$\\x7f\\x01\\t$\\x7f\\x182\\x00\\x1b\\x00\\x18\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2009-09-04T00:00:00", "modifydate": "2009-09-04T18:32:00", "lines": 27, "newlines": 24, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,             LOAD PARM TEXT ADDRESS/LENGTH\n&NM      PARMLOAD &R,&PTR=                                ADDED GP09247\n.**********************************************************************\n.*                                                                    *\n.*  GET PARM TEXT ADDRESS FOR MVS OR TSO CP INVOCATION                *\n.*    FIRST OPERAND SPECIFIES THE EVEN REGISTER OF AN EVEN/ODD PAIR   *\n.*      TO RECEIVE THE TEXT ADDRESS AND LENGTH.                       *\n.*    PTR= SPECIFIES THE REGISTER CONTAINING THE ADDRESS OF THE PARM  *\n.*      POINTER (AS RECEIVED BY MODULE ON ENTRY)                      *\n.*                                                                    *\n.**********************************************************************\n         GBLC  &SAVZPRM      PGMHEAD SAVED PARM\n         LCLC  &OR1,&S       ORIGINAL POINTER\n&OR1     SETC  '&PTR'\n&S       SETC  '1+'.'&R'\n         AIF   ('&OR1' NE '').HAVEOR\n&OR1     SETC  '&SAVZPRM'    COPY FROM PGMHEAD MACRO\n.HAVEOR  ANOP  ,\n&NM      MACPARM &R,0(,&OR1),OP=L LOAD POINTER ADDRESS\n         LH    &S,0(,&R)     GET LENGTH\n         CLI   2(&R),0       TSO CP CALL?\n         BH    *+16          NO, USE OS FORM\n         SH    &S,=H'4'      ALLOW FOR LENGTH LENGTH\n         SH    &S,2(,&R)     ALLOW FOR PARSED COMMAND NAME\n         LA    &R,2(,&R)     SKIP SECOND LENGTH\n         LA    &R,2(,&R)     SKIP FIRST LENGTH\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARSE": {"ttr": 9737, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x03\\x11\\x1f\\x01\\x08\\t\\x7f\\x02\\x16\\x00I\\x00)\\x00\"\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2003-04-21T00:00:00", "modifydate": "2008-04-06T02:16:00", "lines": 73, "newlines": 41, "modlines": 34, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PARSE &TEXT,&LEN,&OPT=COMMA,&PARM=PARPARM\n         GBLC  &MACPLAB\n         LCLC  &L\n         LCLC  &ON(10),&OV(10),&O1,&O2\n         LCLC  &RN(10),&RV(10),&RQ\n         LCLA  &OM,&RM,&I,&J,&N\n&L       SETC  'L'''\n&MACPLAB SETC  '&NM'\n&ON(01)  SETC  'WORD'        REXX WORD LIST (BLANK SEPARATORS)\n&OV(01)  SETC  'PAR$TPBK'      BLANK SEPARATION\n&ON(02)  SETC  'COMMA'       COMMA/BLANK SEPARATED LIST\n&OV(02)  SETC  'PAR$TPBC'      BLANK, COMMA\n&ON(03)  SETC  'KEYWORD'     COMMA/BLANK/KEYWORD=\n&OV(03)  SETC  'PAR$TPKW'      BLANK, COMMA, (OPT.PARENTHESES), EQUAL\n&ON(04)  SETC  'LIST'        COMMA/BLANK/PARENTHESIZED LISTS\n&OV(04)  SETC  'PAR$TPLS'      BLANK, COMMA, PARENTHESES\n&ON(05)  SETC  'ITEM'        COMMA/BLANK/PARENTHESIZED LISTS\n&OV(05)  SETC  'PAR$TPLI'      BLANK, COMMA, PARENTHESES (SEPARATED)\n&OM      SETA  5             CURRENT MAXIMUM\n&ON(06)  SETC  '        '    RESERVED\n&OV(06)  SETC  'PAR$TPBK'      RESERVED\n.*\n&RN(01)  SETC  'PARKEY'\n&RV(01)  SETC  'PAR$PARK'\n&RN(02)  SETC  'SUBLIST'\n&RV(02)  SETC  'PAR$COSP'\n&RN(03)  SETC  'COLKEY'\n&RV(03)  SETC  'PAR$COKW'\n&RN(04)  SETC  'UNQUOTE'\n&RV(04)  SETC  'PAR$COUQ'\n&RM      SETA  4             CURRENT MAXIMUM\n&RN(05)  SETC  '        '\n&RV(05)  SETC  '        '\n&N       SETA  N'&OPT\n         AIF   ('&TEXT' EQ '*END').DONE\n         AIF   ('&OPT' NE 'CLOSE').TEXT\n.DONE    MACPARM R1,(R1),OPR=SR,MODE=EQU\n         AGO   .CALL\n.TEXT    MACPARM R15,&TEXT\n         MACPARM R0,&LEN,NULL=&L&TEXT\n         MACPARM R1,&PARM\n         MACPARM R15,R0,PAR@TEXT-PARPARM(R1),MODE=THREE,OP=STM\n         AIF   (&N LT 1).CALL\n&O1      SETC  '&OPT(1)'\n         AIF   ('&O1' EQ '').SEESUB\n&I       SETA  1\n.TRYOPT  AIF   ('&O1' EQ '&ON(&I)').HAVEOPT\n&I       SETA  &I+1\n         AIF   (&I LE &OM).TRYOPT\n.BADOPT  MNOTE 4,'PARSE: OPTION &O1 NOT RECOGNIZED; IGNORED'\n         AGO   .CALL\n.HAVEOPT MACPARM PAR$TYPE-PARPARM(R1),&OV(&I),OP=MVI  SET CALL TYPE\n.SEESUB  AIF   (&N LT 2).CALL\n&J       SETA  1\n.OPLOOP  AIF   (&J GE &N).EXPSUB\n&J       SETA  &J+1\n&O1      SETC  '&OPT(&J)'\n         AIF   ('&O1' EQ '').OPLOOP\n&I       SETA  1\n.TRYSUB  AIF   ('&O1' EQ '&RN(&I)').HAVESUB\n&I       SETA  &I+1\n         AIF   (&I LE &RM).TRYSUB\n         MNOTE 8,'PARSE: OPT &O1 NOT A VALID OPTION'\n         AGO   .OPLOOP\n.HAVESUB ANOP  ,\n&RQ      SETC  '&RQ'.'+'.'&RV(&I)'\n         AGO   .OPLOOP\n.EXPSUB  AIF   ('&RQ' EQ '').CALL  SKIP ALL NULLS\n         MACPARM PAR$RQFG-PARPARM(R1),&RQ,OP=MVI  SET SUB OPTION\n.CALL    MACPARM R15,@PARSER,OP=L\n         MACPARM R14,(R15),OP=BALR,OPR=BALR\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PATCH": {"ttr": 9740, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x043\\x7f\\x01\\x043\\x7f\\x14\\x05\\x00\\x10\\x00\\x10\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2004-12-02T00:00:00", "modifydate": "2004-12-02T14:05:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PATCH &SIZE=64,&OPT=CODE                           NEW GP04234\n.*\n.*   THIS MACRO CREATES 'ZAP' SPACE WHERE USED\n.*   SIZE SPECIFES THE NUMBER OF HALFWORDS CREATED\n.*   USE OPT=DATA FOR SPACE NOT ADDRESSABLE, OR DATA ONLY\n.*\n         AIF   ('&OPT' EQ 'DATA').DATA\n         AIF   ('&OPT' EQ 'CODE').CODE\n MNOTE 4,'PATCH: OPT= MUST BE CODE OR DATA'\n.CODE    ANOP  ,\n&NM      DC    (&SIZE)SL2(*)  PATCH SPACE\n         MEXIT ,\n.DATA    ANOP  ,\n&NM      DC    (&SIZE)AL2(0)  PATCH SPACE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PFKEYS": {"ttr": 9742, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      PFKEYS ,                                       ADDED ON 88211\n         GBLA  &#PFKEY\n         GBLC  &PFKEY(52),&PFKEX(52)\n         AIF   (&#PFKEY EQ 52).MEND\n&#PFKEY  SETA  52\n.*       THE FOLLOWING HEXADECIMAL PFKEY VALUES RESULT FROM\n.*       SPECIAL PROCESSING ON THE AID BYTE IN THE @SCREENS ROUTINE\n.*       AND EXHABASE/EXHASCRN EXHIBIT ROUTINES.\n.*\n&PFKEY(01) SETC '    '\n&PFKEX(01) SETC '01'\n&PFKEY(02) SETC '    '\n&PFKEX(02) SETC '02'\n&PFKEY(03) SETC '    '\n&PFKEX(03) SETC '03'\n&PFKEY(04) SETC '    '\n&PFKEX(04) SETC '04'\n&PFKEY(05) SETC '    '\n&PFKEX(05) SETC '05'\n&PFKEY(06) SETC 'OID'\n&PFKEX(06) SETC '06'\n&PFKEY(07) SETC 'MSR'\n&PFKEX(07) SETC '07'\n&PFKEY(08) SETC '\u00acPRT'\n&PFKEX(08) SETC '08'\n&PFKEY(09) SETC '    '\n&PFKEX(09) SETC '09'\n&PFKEY(10) SETC '    '\n&PFKEX(10) SETC '0A'\n&PFKEY(11) SETC 'PA3'\n&PFKEX(11) SETC '0B'\n&PFKEY(12) SETC 'PA1'\n&PFKEX(12) SETC '0C'\n&PFKEY(13) SETC 'CLEAR'\n&PFKEX(13) SETC '0D'\n&PFKEY(14) SETC 'PA2'\n&PFKEX(14) SETC '0E'\n&PFKEY(15) SETC '    '\n&PFKEX(15) SETC '0F'\n&PFKEY(16) SETC 'TEST'\n&PFKEX(16) SETC '10'\n&PFKEY(17) SETC 'PF1'\n&PFKEX(17) SETC '11'\n&PFKEY(18) SETC 'PF2'\n&PFKEX(18) SETC '12'\n&PFKEY(19) SETC 'PF3'\n&PFKEX(19) SETC '13'\n&PFKEY(20) SETC 'PF4'\n&PFKEX(20) SETC '14'\n&PFKEY(21) SETC 'PF5'\n&PFKEX(21) SETC '15'\n&PFKEY(22) SETC 'PF6'\n&PFKEX(22) SETC '16'\n&PFKEY(23) SETC 'PF7'\n&PFKEX(23) SETC '17'\n&PFKEY(24) SETC 'PF8'\n&PFKEX(24) SETC '18'\n&PFKEY(25) SETC 'PF9'\n&PFKEX(25) SETC '19'\n&PFKEY(26) SETC 'PF10'\n&PFKEX(26) SETC '1A'\n&PFKEY(27) SETC 'PF11'\n&PFKEX(27) SETC '1B'\n&PFKEY(28) SETC 'PF12'\n&PFKEX(28) SETC '1C'\n&PFKEY(29) SETC 'ENTER'\n&PFKEX(29) SETC '1D'\n&PFKEY(30) SETC 'LPEN'\n&PFKEX(30) SETC '1E'\n&PFKEY(31) SETC '    '\n&PFKEX(31) SETC '1F'\n&PFKEY(32) SETC '    '\n&PFKEX(32) SETC '20'\n&PFKEY(33) SETC 'PF13'\n&PFKEX(33) SETC '21'\n&PFKEY(34) SETC 'PF14'\n&PFKEX(34) SETC '22'\n&PFKEY(35) SETC 'PF15'\n&PFKEX(35) SETC '23'\n&PFKEY(36) SETC 'PF16'\n&PFKEX(36) SETC '24'\n&PFKEY(37) SETC 'PF17'\n&PFKEX(37) SETC '25'\n&PFKEY(38) SETC 'PF18'\n&PFKEX(38) SETC '26'\n&PFKEY(39) SETC 'PF19'\n&PFKEX(39) SETC '27'\n&PFKEY(40) SETC 'PF20'\n&PFKEX(40) SETC '28'\n&PFKEY(41) SETC 'PF21'\n&PFKEX(41) SETC '29'\n&PFKEY(42) SETC 'PF22'\n&PFKEX(42) SETC '2A'\n&PFKEY(43) SETC 'PF23'\n&PFKEX(43) SETC '2B'\n&PFKEY(44) SETC 'PF24'\n&PFKEX(44) SETC '2C'\n&PFKEY(49) SETC 'CANCEL'\n&PFKEX(49) SETC '0E'\n&PFKEY(50) SETC 'TREQ'\n&PFKEX(50) SETC '10'\n&PFKEY(51) SETC 'PEN'\n&PFKEX(51) SETC '1E'\n&PFKEY(52) SETC '\u00acAID'\n&PFKEX(52) SETC '00'\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PGMBAKR": {"ttr": 9745, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x07\\x00\\x00\\x01\\x044/\\x01\\x05\\x01\\x9f\\x005\\x00'\\x00 \\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.07", "flags": 0, "createdate": "2004-12-07T00:00:00", "modifydate": "2005-01-19T00:35:00", "lines": 39, "newlines": 32, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PGMBAKR &OP1,&OP2,&BASE=R12,&AM=ANY,&ID=0,&BREG=\n.**********************************************************************\n.*                                                                    *\n.*   THIS MACRO INVOKES BAKR UNDER MVS ESA AND LATER, ELSE PGMHEAD    *\n.*   UNDER BAKR, NO SAVE AREA IS OBTAINED                             *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &MVSESA,&ZZZBAKR,&MAPONCE\n         LCLA  &K,&I         BASE COUNT                         GP04234\n         LCLC  &CASE,&CMU                                       GP04234\n         AIF   (&MVSESA).BAKR\n&NM      PGMHEAD &OP1,&OP2,NOENTRY,BASE=&BASE,AM=&AM,SETAM=&AM,CSECT=,I*\n               D=&ID,BREG=&BREG                                 GP05018\n&ZZZBAKR SETB  0\n         AGO   .COMMON\n.BAKR    ANOP  ,\n&NM      BAKR  ,\n&ZZZBAKR SETB  1             NEED PR IN PGMBAND MACRO\n&K       SETA  N'&BASE      MAX NUMBER OF BASES SPECIFIED       GP04234\n&CMU     SETC  '&BASE(1)'    SET THE FIRST ONE                  GP04234\n&CASE    SETC  '&BASE(1)'    SET THE FIRST ONE                  GP04234\n&K       SETA  N'&BASE                                          GP04234\n         AIF   (&K LT 2).DONEBAS                                GP04234\n&I       SETA  1                                                GP04234\n         LA    &BASE(&K),2048                                   GP04234\n.BASLOOP AIF   (&I GE &K).DONEBAS                               GP04234\n&I       SETA  &I+1                                             GP04234\n         AIF   ('&BASE(&I)' EQ '').BASLOOP                      GP04234\n         LA    &BASE(&I),2048(&BASE(&K),&BASE(&I-1))            GP04234\n&CMU     SETC  '&CMU'.','.'&BASE(&I)'                           GP04234\n         AGO   .BASLOOP                                         GP04234\n.DONEBAS USING &NM,&CMU                                         GP04234\n         SETAM &AM           SET MODE AS REQUESTED (OR NOT)\n.COMMON  AIF   (&MAPONCE).MEND\n&MAPONCE SETB  1\n         YREGS ,\n         MASKEQU ,\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PGMBAND": {"ttr": 9747, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x044/\\x01\\x05\\x01\\x9f\\x008\\x00\\x12\\x00\\x10\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2004-12-07T00:00:00", "modifydate": "2005-01-19T00:38:00", "lines": 18, "newlines": 16, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PGMBAND ,\n.**********************************************************************\n.*                                                                    *\n.*   THIS IS THE COMPANION MACRO TO PGMBAKR, USED INSTEAD OF PR       *\n.*   UNDER OLDER SYSTEMS. ASSUMES RETURN VALUES ALREADY LOADED        *\n.*   INTO R15, R0, AND R1                                             *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &ZZZBAKR      WAS BAKR USED ?\n         AIF   (&ZZZBAKR).BAKR  YES; JUST DO PR\n&NM      L     R2,4(,R13)    GET CALLER'S SAVE AREA\n         STM   R15,R1,16(R2)   ENSURE RETURN VALUES SET         GP05018\n         PGMEXIT ,                                              GP05018\n         MEXIT ,\n.BAKR    ANOP  ,\n&NM      PR    ,             RESTORE AND RETURN\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PGMEXIT": {"ttr": 9749, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x00\\x00\\x986_\\x01\\t\\x18?\\x19F\\x00\\xdc\\x00w\\x00\\xd1\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "1998-12-31T00:00:00", "modifydate": "2009-07-02T19:46:00", "lines": 220, "newlines": 119, "modlines": 209, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PGMEXIT &DUMMY,&PFX=,&NEXT=,                                  *\n               &RC=,&RC0=,&RC1=,&COPYRET=,&RETADDR=(R14)         83087\n         GBLB  &ZZSVBSM      SET BY SAVEM WHEN BSM IS USED ON ENTRY\n         GBLB  &MVS,&MVSXA,&MVSESA,&OS390,&Z900,&BUGDBO         GP04234\n         GBLC  &SAVTYPE,&SAVNAME                                GP04050\n         GBLC  &MACPLAB                                         GP04051\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*    PGMEXIT PROVIDES THE LOGICAL END OF A PROGRAM INITIATED WITH    *\n.*    A PGMHEAD REQUEST. INFORMATION IS PASSED WITH GLOBALS, AND THE  *\n.*    CODE DOES NOT SUPPORT INTERLEAVED PGMHEAD/PGMEXIT STATEMENTS.   *\n.*                                                                    *\n.*    THE PARAMETERS ARE:                                             *\n.*                                                                    *\n.*    RC=     NUMERIC VALUE (0-4095), REGISTER, OR RELOCATABLE WORD   *\n.*    RC0=    NUMERIC VALUE (0-4095), REGISTER, OR RELOCATABLE WORD   *\n.*    RC1=    NUMERIC VALUE (0-4095), REGISTER, OR RELOCATABLE WORD   *\n.*                                                                    *\n.*    RC LOADS REGISTER 15 (STANDARD RETURN CODE CONVENTION)          *\n.*    RC0 AND RC1 LOAD REGISTERS 0 AND 1 AND ARE OPTIONAL             *\n.*                                                                    *\n.*    COPYRET=ADDRESS  OR COPYRET=(ADDRESS) LOAD R15 FROM STORAGE     *\n.*    COPYRET=(ADDRESS,LENGTH)  LOAD R15,R0, ETC. DEPENDING ON LENGTH *\n.*      ADDRESS IS A RELOCATABLE; LENGTH MUST BE AN ABSOLUTE TERM     *\n.*                                                                    *\n.*    ANY REGISTER NOT SPECIFIED IS RESTORED TO ITS VALUE ON ENTRY,   *\n.*      UNLESS THE NOSAVE OPTION IS IN EFFECT                         *\n.*                                                                    *\n.*    R14 IS NOT SUPPORTED FOR A REGISTER OPERAND                     *\n.*    R15, R0, AND R1 ARE ALLOWED PROVIDING THEY DO NOT CONFLICT      *\n.*      E.G.  RC=(R15),RC1=(R1) IS VALID                              *\n.*            RC=(R1),RC1=(R15) WILL FAIL                             *\n.*                                                                    *\n.*    RETADDR=R14 SPECIFIES THE REGISTER CONTAINING THE RETURN        *\n.*      ADDRESS. IN BSM MODE, THIS MUST INCLUDE THE APPROPRIATE MODE  *\n.*      SETTING BITS. OPERAND IS IGNORED IN BAKR/PR AND XCTL MODES.   *\n.*                                                                    *\n.*    PFX= SPECIFIES AN OVERRIDE TO THE SAVE AREA AND REGISTER NAME   *\n.*      PREFIX. BY DEFAULT THE PFX FROM PGMHEAD IS USED.              *\n.*                                                                    *\n.*    NEXT= SPECIFIES THE NAME OF A MODULE TO XCTL TO, EITHER AS AN   *\n.*      UNQUOTED NAME, OR AS QUOTED STRING, OR AS =CL8' ' LITERAL.    *\n.*                                                                    *\n.*                                                                    *\n.*    THIS MACRO WAS SUGGESTED BY ENDM WRITTEN BY SHMUEL (SEYMOUR J.  *\n.*    METZ, WHICH IS COPYRIGHT 1978 BY SHMUEL (SEYMOUR J.) METZ       *\n.*\n.*    THIS MACRO IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION,\n.*    AS DESCRIBED IN MEMBER $$RIGHTS.\n.*\n.*--------------------------------------------------------------------*\n         LCLC  &SAVBASE      SAVE AREA START\n         LCLC  &OSVREG,&C    WORK REGISTER FOR HIGH LEVEL SAVE AREA\n         LCLB  &NOSAVE,&OLDSAVE  PASSED BY PGMEXIT              GP04051\n         LCLB  &OSVLOAD      FLAG THAT OSVREG LOADED AND SET\n         LCLB  &LR15         FLAG THAT R15 HAS RC\n         LCLB  &LR0          FLAG THAT R15 HAS RC0\n         LCLB  &LR1          FLAG THAT R15 HAS RC0\n         LCLA  &I,&K\n&I       SETA  &SYSNDX\n&MACPLAB SETC  '&NM'                                            GP04051\n         AIF   ('&PFX' EQ '').NOPFX                             GP04050\n&SAVNAME SETC  '&PFX'\n.NOPFX   AIF   ('&SAVNAME' NE '').DFPFX                         GP04050\n&SAVNAME SETC  'SAVE'                                           GP04050\n.DFPFX   ANOP  ,                                                GP04050\n&SAVBASE SETC '&SAVNAME'.'SPLN'\n&NOSAVE  SETB  ('&SAVTYPE' EQ 'NO')                             GP04051\n&OLDSAVE SETB  ('&SAVTYPE' EQ 'OLD')                            GP04051\n.*--------------------------------------------------------------------*\n.*   STEP 1:  EXCEPT FOR NOSAVE, SAVE ANY NON-NUMERIC RETURN CODES    *\n.*       USE R14 AS A WORKING REGISTER                                *\n.*       WITH NOSAVE, JUST LOAD THE NON-NUMERICS                      *\n.*--------------------------------------------------------------------*\n         AIF   (&NOSAVE).CPRCOM\n         AIF   (NOT &OLDSAVE).CPROLD\n&OSVREG  SETC  'R13'\n&OSVLOAD SETB  1\n         MACPARM R13,&SAVNAME.13-&SAVBASE.(R13),OP=L  LOAD OLD SV\n         AGO   .CPRCOM\n.CPROLD  MACPARM R14,&SAVNAME.13-&SAVBASE.(R13),OP=L  LOAD WORK\n&OSVREG  SETC  'R14'         WORK REGISTER\n&OSVLOAD SETB  1             WORK REGISTER LOADED\n.CPRCOM  AIF   (T'&COPYRET EQ 'O').DONCOPY\n         AIF   (N'&COPYRET LT 2).CPRONE\n         AIF   (N'&COPYRET EQ 2).CPRTWO\n.CPRBAD  MNOTE 4,' COPYRET PARAMETER INVALID; USE (ADDR-EXPR,LENGTH)'\n         MEXIT ,\n.CPRTWO  AIF   (&NOSAVE).CPRTWON\n&MACPLAB MVC   &SAVNAME.15-&SAVBASE.(&COPYRET(2),&OSVREG),&COPYRET(1)\n&MACPLAB SETC  ''\n         AGO   .NOL15\n.CPRTWON MACPARM R15,&COPYRET(2)/4-2,&COPYRET(1),OP=LM\n         AGO   .NOL15\n.CPRONE  AIF   (&NOSAVE).CPRONEN\n&MACPLAB MVC   &SAVNAME.15-&SAVBASE.(4,&OSVREG),&COPYRET(1)\n&MACPLAB SETC  ''\n         AGO   .NOL15\n.CPRONEN MACPLAB R15,&COPYRET(1),OP=L,OPR=LR\n         AGO   .NOL15\n.*--------------------------------------------------------------------*\n.*    NOTE THAT NUMERIC (T' = 'N') CODES ARE LOADED LATER ON          *\n.*--------------------------------------------------------------------*\n.DONCOPY AIF   (T'&RC EQ 'O').NOL15\n         AIF   (T'&RC EQ 'N').NOL15                             GP04051\n         AIF   (&NOSAVE).NSL15\n         AIF   ('&RC'(1,1) EQ '(').STL15\n.NSL15   MACPARM R15,&RC,OP=L                                   GP04051\n         AIF   (&NOSAVE).NOL15\n         MACPARM R15,&SAVNAME.15-&SAVBASE.(,&OSVREG),OP=ST      GP04051\n         AGO   .NOL15                                           GP04051\n.STL15   MACPARM &RC(1),&SAVNAME.15-&SAVBASE.(,&OSVREG),OP=ST   GP04051\n.NOL15   AIF   (T'&RC0 EQ 'O').NOL0\n         AIF   (T'&RC0 EQ 'N').NOL0                             GP04051\n         AIF   (&NOSAVE).NSL0\n         AIF   ('&RC0'(1,1) EQ '(').STL0\n.NSL0    MACPARM R0,&RC0,OP=L                                   GP04051\n         AIF   (&NOSAVE).NOL0\n         MACPARM R0,&SAVNAME.0-&SAVBASE.(,&OSVREG),OP=ST        GP04051\n         AGO   .NOL0                                            GP04051\n.STL0    MACPARM &RC0(1),&SAVNAME.0-&SAVBASE.(,&OSVREG),OP=ST   GP04051\n.NOL0    AIF   (T'&RC1 EQ 'O').DONLREG\n         AIF   (T'&RC1 EQ 'N').DONLREG                          GP04051\n         AIF   (&NOSAVE).NSL1\n         AIF   ('&RC1'(1,1) EQ '(').STL1\n.NSL1    MACPARM R1,&RC1,OP=L                                   GP04051\n         AIF   (&NOSAVE).DONLREG\n         MACPARM R1,&SAVNAME.1-&SAVBASE.(,&OSVREG),OP=ST        GP04051\n         AGO   .DONLREG                                         GP04051\n.STL1    MACPARM &RC1(1),&SAVNAME.1-&SAVBASE.(,&OSVREG),OP=ST   GP04051\n.*--------------------------------------------------------------------*\n.*   STEP 2: REGAIN OLD SAVE AREA                                     *\n.*--------------------------------------------------------------------*\n.DONLREG AIF   (&NOSAVE).DONLSAV\n         AIF   (&OLDSAVE).NSVSAVE\n         MACPARM R1,(R13),OP=LR        SAVE STORAGE ADDRESS\n.NSVSAVE AIF   (NOT &OSVLOAD).NSVLOAD  GET CALLER'S SAVE AREA\n         AIF   ('&OSVREG' EQ 'R13').DONLSAV  HAVE IT ALREADY\n         MACPARM R13,(&OSVREG),OP=LR   SKIP STORAGE IF HAVE\n         AGO   .DONLSAV\n.NSVLOAD MACPARM R13,&SAVNAME.13-&SAVBASE.(R13),OP=L  OLD SAVE AREA\n.*--------------------------------------------------------------------*\n.*   STEP 3: FREE WORKING STORAGE                                     *\n.*--------------------------------------------------------------------*\n.DONLSAV AIF   (&NOSAVE OR &OLDSAVE).DONFREE\n         MACPARM R0,&SAVNAME.SPLN-&SAVBASE.(R1),OP=L\n         AIF   (&MVSESA).STOREL                                 GP04234\n         ICM   R15,7,&SAVNAME.SPLN+1-&SAVBASE.(R1)  ANY LENGTH? GP04234\n         BZ    ZZZ&I.L       SKIP IF ZERO LENGTH                GP04234\n         FREEMAIN R,LV=(0),A=(1)  FREE STORAGE                  GP04234\nZZZ&I.L  DS    0H                                               GP06277\n         AGO   .COMREL                                          GP04234\n.STOREL  LR    R15,R0        COPY POSSIBLE SUBPOOL              GP04051\n         SLL   R0,8\n         SRA   R0,8          REMOVE SUBPOOL\n         BZ    ZZZ&I.L       SKIP IF ZERO LENGTH\n         SRL   R15,24        RIGHT-JUSTIFY SUBPOOL\n.*       STORAGE RELEASE,ADDR=(1),LENGTH=(0),SP=(15)\n         STORAGE RELEASE,ADDR=(1),LENGTH=(0),SP=(15)\n.COMREL  ANOP  ,                                                GP04234\n.*--------------------------------------------------------------------*\n.*   STEP 4: LOAD NUMERIC RETURN CODES                                *\n.*--------------------------------------------------------------------*\n.DONFREE AIF   (T'&COPYRET NE 'O').LARDONE  COPYRET DONE ALREADY\n         AIF   (T'&RC NE 'N').NOR15\n&LR15    SETB  1             SHOW REGISTER LOADED\n         MACPARM R15,&RC,OP=LA                                  GP04051\n.NOR15   AIF   (T'&RC0 NE 'N').NOR0\n         MACPARM R0,&RC0,OP=LA\n&LR0     SETB  1             SHOW REGISTER LOADED\n.NOR0    AIF   (T'&RC1 NE 'N').LARDONE\n         MACPARM R1,&RC1,OP=LA\n&LR1     SETB  1             SHOW REGISTER LOADED\n.*--------------------------------------------------------------------*\n.*   STEP 5: RESTORE NON-RC REGISTERS AS NEEDED                       *\n.*--------------------------------------------------------------------*\n.LARDONE AIF   (&NOSAVE).LNRDONE\n&OSVREG  SETC  'R14'\n         AIF   (NOT &LR15 AND NOT &LR0 AND NOT &LR1).LNRALL\n         AIF   (NOT &LR15).LNR2LM\n         MACPARM R14,&SAVNAME.14-&SAVBASE.(R13),OP=L\n&OSVREG  SETC  'R2'\n         AIF   (&LR1 AND &LR0).LNRALL\n&OSVREG  SETC  'R0'\n         AIF   (NOT &LR0 AND NOT &LR1).LNRALL\n&OSVREG  SETC  'R1'\n         AIF   (&LR0).LNRALL\n&OSVREG  SETC  'R2'\n         MACPARM R0,&SAVNAME.0-&SAVBASE.(R13),OP=L\n         AGO   .LNRALL\n.LNR2LM  ANOP  ,\n&OSVREG  SETC  'R1'.'+&LR1*4'\n         AIF   (NOT &LR0).LNRE0\n         MACPARM R14,R15,&SAVNAME.14-&SAVBASE.(R13),OP=LM,MODE=THREE\n         AGO   .LNRALL\n.LNRE0   MACPARM R14,R0,&SAVNAME.14-&SAVBASE.(R13),OP=LM,MODE=THREE\n.LNRALL  ANOP  ,\n&K       SETA   K'&OSVREG\n&C       SETC   '&OSVREG'(2,&K-1)\n        MACPARM &OSVREG,R12,&SAVNAME.&C-&SAVBASE.(R13),OP=LM,MODE=THREE\n.*--------------------------------------------------------------------*\n.*   STEP 6: XCTL OR RETURN ACCORDING TO ENTRY LINKAGE                *\n.*--------------------------------------------------------------------*\n.LNRDONE AIF   (&NOSAVE).RETFOOT                                GP04051\n         MVI   &SAVNAME.14-&SAVBASE.(R13),X'FF' FLAG AS LAST SAVE AREA\n.RETFOOT AIF   (T'&NEXT NE 'O').GOXCTL\n         AIF   (T'&RETADDR EQ 'O').BUGME                        GP09183\n         AIF   (&ZZSVBSM).GOBSM\n         MACPARM &RETADDR,OP=B,OPR=BR,MODE=ONE                  GP04051\n         AGO   .BUGME                                           GP09183\n.GOXCTL  ANOP  ,                                                GP04234\n&MACPLAB LA    R15,ZZZ&SYSNDX.X\n         XCTL  SF=(E,(15))                                      GP04050\nZZZ&SYSNDX.X XCTL EP=&NEXT,SF=L\n         AGO   .BUGME                                           GP09183\n.GOBSM   MACPARM 0,&RETADDR(1),OP=BSM,OPR=BSM                   GP04051\n.BUGME   AIF   (NOT &BUGDBO).END                                GP09183\n         DBO   MODE=C        EXPAND DEBUG SUPPORT               GP09183\n.END     MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PGMHEAD": {"ttr": 9988, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x06\\x00\\x00\\x01\\x041/\\x01\\x10\\x18\\x0f\\x03\\x12\\x01\\xfa\\x01\\xe7\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.06", "flags": 0, "createdate": "2004-11-07T00:00:00", "modifydate": "2010-06-29T03:12:00", "lines": 506, "newlines": 487, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&L       PGMHEAD &DUMMY,&PFX=SAVE,&END=,&ENDZERO=,&DSECT=,&PARM=R1,    *\n               &SAVE=*,                                          81208 *\n               &STARTOF=0,     LISTING OFFSET FOR SUBROUTINES   GP02257*\n               &BASE=R12,&BASED=*,&BREG=,                       GP02264*\n               &EID=SHORT,&ENTRY=,&ENTNO=,                             *\n               &RIGHT=,                                                *\n               &ID=*,&DATE=,&SP=0,&BNDRY=,&LOC=,                 82002 *\n               &CSECT=CSECT,&XOPT=BSM,&AM=31,&RM=24,&SETAM=     GP02285\n.*\n.*    REWRITTEN FROM MACRO SAVEM, WITH ESA AND OS/390 CHANGES   GP98365\n.*             COPYRIGHT 1978 BY SHMUEL (SEYMOUR J.) METZ\n.*                        ALL RIGHTS RESERVED.\n.*             NEW CODE COPYRIGHT 1998 GERHARD POSTPISCHIL      GP98365\n.*                                                              GP98365\n.*             THIS MACRO IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION,\n.*             AS DESCRIBED IN MEMBER $$RIGHTS.\n.*\n.*       FOR SIMPLE ENTRIES, PARM=R1 NOW RELOADS R0 AND R1       87223\n.*       BASE=(B1,B2,B3,B4) SUPPORT ADDED (EASIER TO USE?)       87223\n.*                                                               87223\n         COPY  OPTIONGB\n         GBLB  &DROP@1                                           81163\n         GBLB  &MAPONCE\n         GBLB  &AMSET,&RMSET                                    GP98365\n         GBLB  &SAV@REG\n         GBLB  &SAV@DYN(10)\n         GBLC  &SAV@NAM(10)\n         GBLC  &SAVTYPE,&SAVNAME                                GP04050\n         GBLC  &MACPLAB                                          81154\n         GBLC  &SYSSPLV      VERSION OF SP (1, 2...)             93174\n         GBLC  &SAVZPRM      PGMHEAD SAVED PARM                 GP09247\n         LCLA  &I,&J,&K,&N,&NUMENT                              GP03245\n         LCLB  &BWOPT,&Y           BIGWORK  OPTION\n         LCLB  &HWOPT              HUGEWORK OPTION ( > 32767 )   84307\n         LCLB  &CME                BASED/ENTRY PRESENT           81163\n         LCLB  &CPYREGS            CPYREGS  OPTION\n         LCLB  &DSOPT              NODSECT  OPTION\n         LCLB  &EQUOPT             NOEQU    OPTION\n         LCLB  &NOENTRY            NOENTRY  OPTION\n         LCLB  &NOREG              NOREG    OPTION - SKIP YREGS GP04115\n         LCLB  &NOSAVE             NOSAVE   OPTION\n         LCLB  &NWOPT              NOWORK   OPTION\n         LCLB  &OLDSAVE            OLDSAVE  OPTION\n         LCLB  &BZOPT              ZERO > 256\n         LCLB  &NOT1ST             NOT FIRST USE OF &PFX\n         LCLB  &ZERO               ZERO     OPTION\n         LCLB  &ZERO8              ZERO     <= 256               81202\n         LCLB  &ZERO12             ZERO     >  256               81202\n         LCLB  &ZERO15             ZERO     > 4095               81208\n         LCLB  &ZERO31             ZERO     > 32767              84307\n         LCLC  &B@                 GENERATED LABEL FOR B TARGET\n         LCLC  &CMB                COMMON BASE NAME              81163\n         LCLC  &CMU                BASE REG. STRING FOR USING    81163\n         LCLC  &DSVAR              NON-RENT SAVE AREA NAME      GP03033\n         LCLC  &DSCTG              DSECT NAME                    81208\n         LCLC  &ENDG               END LABEL FOR GETMAINED AREA  81208\n         LCLC  &ENDZ               END OF ZEROED AREA            81208\n         LCLC  &LAB                LABEL FOR ENTRY POINT\n         LCLC  &LQ                 L'\n         LCLC  &N@                 GENERATED NAME FOR DC\n         LCLC  &SECT               CSECT NAME\n         LCLC  &SP@                SUBPOOL FOR GETMAIN\n         LCLC  &NAME               NAME FOR CONSTRUCTED ID\n         LCLC  &SV                 SAVE AREA PREFIX              81208\n         LCLC  &BEGZ         WHERE TO START ZEROING (FWD DEFAULT)\n         LCLC  &PARMEXP\n         LCLC  &PARMREG\n         LCLC  &CASE         FIRST/ONLY BASE REG                GP02264\n         LCLC  &C9           TEMP                               GP03245\n         LCLC  &YOPT         COPY OF XOPT OR 'STM'              GP04234\n       SYSPARM ,                   SET GLOBALS\n&SECT    SETC  '&SYSECT'\n&SV      SETC  '&PFX'\n&SAVNAME SETC  '&PFX'                                           GP04050\n&DSCTG   SETC  '&PFX'\n&ENDG    SETC  '&PFX'.'END'                                     GP98365\n&BEGZ    SETC  '&PFX'.'FWD'        ZERO BEGINNING AT FWD LINK    94272\n&SAVTYPE SETC  'DYN'         (AS OPPOSED TO NO OR OLD)          GP04050\n.*\n&YOPT    SETC  '&XOPT'                                          GP04234\n         AIF   ('&YOPT' EQ 'BSM' AND &MVSESA).ASMVS             GP04234\n&YOPT    SETC  'STM'                                            GP04234\n.*\n.ASMVS   AIF   ('&DSECT' EQ '').DSGOK\n&DSCTG   SETC  '&DSECT'\n.DSGOK   AIF   ('&END' EQ '').ENDGOK\n&ENDG    SETC  '&END'\n.ENDGOK  ANOP  ,\n&DSVAR   SETC  '&DSCTG'      DEFAULT START OF SAVE AREA         GP03033\n         AIF   ('&SAVE' EQ '*').ENDGSV                          GP03033\n&DSVAR   SETC  '&SAVE'       FOR LENGTH DEFINITION              GP03033\n.ENDGSV  ANOP  ,                                                GP03033\n.*\n&N       SETA  1\n.NXTSLOT ANOP  ,\n&NOT1ST  SETB  (&NOT1ST OR ('&PFX' EQ '&SAV@NAM(&N)'))\n         AIF   (&NOT1ST).FND1ST\n         AIF   ('&SAV@NAM(&N)' EQ '').FNDSLOT\n&N       SETA  &N+1\n         AIF   (&N LE 10).NXTSLOT\n         MNOTE 12,'TOO MANY PGMHEAD DSECTS'                     GP98365\n         MEXIT ,\n.FNDSLOT ANOP  ,\n&SAV@NAM(&N) SETC '&PFX'\n.*\n.FND1ST  AIF   ('&SYSECT' EQ '' AND T'&L EQ 'O').NOL\n&I       SETA  1\n         AIF   (N'&SYSLIST EQ 0).ENDOPT\n.*\n.LOOP    AIF   ('&SYSLIST(&I)' EQ 'CPYREGS').CPYREGS\n         AIF   ('&SYSLIST(&I)' EQ 'COPYREGS').CPYREGS            81154\n         AIF   ('&SYSLIST(&I)' EQ 'COPYREGISTERS').CPYREGS\n         AIF   ('&SYSLIST(&I)' EQ 'NODSECT').NODSECT\n         AIF   ('&SYSLIST(&I)' EQ 'NOEQU').NOEQU\n         AIF   ('&SYSLIST(&I)' EQ 'NOREG').NOREGS               GP04115\n         AIF   ('&SYSLIST(&I)' EQ 'NOREGS').NOREGS              GP04115\n         AIF   ('&SYSLIST(&I)' EQ 'BIGWORK').BIGWORK\n         AIF   ('&SYSLIST(&I)' EQ 'HUGEWORK').HUGWORK            84307\n         AIF   ('&SYSLIST(&I)' EQ 'BIGZERO').BIGZERO\n         AIF   ('&SYSLIST(&I)' EQ 'HUGEZERO').ZERO31             84307\n         AIF   ('&SYSLIST(&I)' EQ 'NOWORK').NOWORK\n         AIF   ('&SYSLIST(&I)' EQ 'NOSAVE').NOSAVE1\n         AIF   ('&SYSLIST(&I)' EQ 'OLDSAVE').OLDSAVE\n         AIF   ('&SYSLIST(&I)' EQ 'NOENTRY').NOENTRY\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO').ZERO\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO8').ZERO8                 81208\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO12').ZERO12               81208\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO15').ZERO15               81208\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO31').ZERO31               84307\n         AIF   ('&SYSLIST(&I)' EQ '').NXTOPT\n         MNOTE 4,'''&SYSLIST(&I)'' IS AN INVALID OPTION - IGNORED'\n         AGO   .NXTOPT\n.*\n.NOL     MNOTE 12,'LABEL REQUIRED IF NO CSECT'\n         MEXIT ,\n.*\n.CPYREGS ANOP  ,\n&CPYREGS SETB  1\n         AGO   .NXTOPT\n.NODSECT ANOP  ,\n&DSOPT   SETB  1\n         AGO   .NXTOPT\n.NOEQU   ANOP  ,\n&EQUOPT  SETB  1\n         AGO   .NXTOPT\n.NOREGS  ANOP  ,                                                GP04115\n&NOREG   SETB  1                                                GP04115\n         AGO   .NXTOPT                                          GP04115\n.HUGWORK ANOP  ,                                                 84307\n&HWOPT   SETB  1             SET FOR HUGE WORK AREA              84307\n.BIGWORK ANOP  ,\n&BWOPT   SETB  1\n&BZOPT   SETB  1\n         AGO   .NXTOPT\n.NOWORK  ANOP  ,\n&NWOPT   SETB  1\n         AGO   .NXTOPT\n.NOSAVE1 ANOP  ,\n&NOSAVE  SETB  1\n&SAVTYPE SETC  'NO'                                             GP04050\n         AGO   .NXTOPT\n.OLDSAVE ANOP  ,\n&OLDSAVE SETB  1\n&SAVTYPE SETC  'OLD'                                            GP04050\n         AGO   .NXTOPT\n.NOENTRY ANOP  ,\n&NOENTRY SETB  1\n         AGO   .NXTOPT\n.*                                                               81208\n.ZERO8   ANOP  ,                                                 81208\n&ZERO8   SETB  1                                                 81208\n         AGO   .ZERO                                             81208\n.ZERO12  ANOP  ,                                                 81208\n&ZERO12  SETB  1                                                 81218\n         AGO   .ZERO                                             81208\n.ZERO31  ANOP  ,                                                 84307\n&HWOPT   SETB  1             HUGE WORK AREA > 32767              84307\n&ZERO31  SETB  1                                                 84307\n.ZERO15  ANOP  ,                                                 81208\n&ZERO15  SETB  1                                                 81208\n&BWOPT   SETB  1                                                 81218\n         AGO   .ZERO                                             81208\n.BIGZERO ANOP  ,\n&BZOPT   SETB  1                                                 81202\n.ZERO    ANOP  ,\n&ZERO    SETB  1\n.NXTOPT  ANOP  ,\n&I       SETA  &I+1\n         AIF   (&I LE N'&SYSLIST).LOOP\n.ENDOPT  AIF   (&ZERO8 OR &ZERO12 OR &ZERO15).GOTZERO            81208\n&ZERO31  SETB  (&ZERO AND &HWOPT)                                84307\n&ZERO15  SETB  (&ZERO AND &BWOPT)                                81208\n&ZERO12  SETB  (&BZOPT AND NOT &ZERO15)                          81208\n&ZERO8   SETB  (&ZERO AND NOT &ZERO12 AND NOT &ZERO15)           81202\n.GOTZERO AIF   (T'&L EQ 'O').CSECTOK                             81208\n         AIF   ('&SYSECT' EQ '' OR '&L' EQ '&SYSECT').LABOK      81202\n&LAB     SETC  '&L'\n         AIF   (&NOENTRY).LABOK\n         SPACE 1                                                GP04050\n         ENTRY &L\n.LABOK   AIF   ('&SYSECT' NE '').CSECTOK\n         AIF   ('&CSECT' EQ 'CSECT').CSECTDO                    GP98322\n         AIF   ('&CSECT' EQ 'RSECT').RSECTDO                    GP98322\n         AIF   ('&CSECT' EQ 'START').STARTDO                    GP98322\n         MNOTE 4,'INVALID CSECT OPERAND; USE CSECT OR RSECT'    GP98322\n         AGO   .CSECTDO      TRY TO CONTINUE?                   GP98322\n.*                                                              GP98322\n.STARTDO ANOP  ,                                                GP98322\n&L       START &STARTOF                                         GP04234\n         AGO   .CSECTCM                                         GP98322\n.*                                                              GP98322\n.RSECTDO AIF   (NOT &MVSESA).CSECTDO                            GP04234\n&L       RSECT ,                                                GP98322\n         AGO   .CSECTCM                                         GP98322\n.*                                                              GP98322\n.CSECTDO ANOP  ,                                                GP98322\n&L       CSECT ,\n.CSECTCM ANOP  ,\n&SECT    SETC  '&L'\n         AIF   ('&AM' EQ '' OR &AMSET).NOAM                     GP98365\n         AIF   (NOT &MVSESA).NOAM                               GP04234\n&L       AMODE &AM\n&AMSET   SETB  1                                                GP98365\n.NOAM    AIF   ('&RM' EQ '' OR &RMSET).CSECTOK                  GP98365\n         AIF   (NOT &MVSESA).CSECTOK                            GP04234\n         AIF   ('&RM' EQ '24' OR '&RM' EQ 'ANY').SETRM          GP99120\n         AIF   ('&RM' EQ '31').ANYRM                            GP99120\n         MNOTE 4,'INVALID RM=&RM '                              GP99120\n.ANYRM   ANOP  ,                                                GP99120\n&L       RMODE ANY                                              GP99120\n         AGO   .FLGRM                                           GP99120\n.SETRM   ANOP  ,                                                GP99120\n&L       RMODE &RM                                              GP98365\n.FLGRM   ANOP  ,                                                GP99120\n&RMSET   SETB  1                                                GP98365\n.CSECTOK AIF   (T'&BASED EQ 'O' AND T'&ENTRY EQ 'O').NOCLAB      81163\n         AIF   (T'&ENTRY NE 'O').DOCLAB                          81163\n         AIF   ('&BASED' EQ '*').NOCLAB                          81163\n.DOCLAB  ANOP  ,                                                 81163\n&CME     SETB  1             SET SPECIAL BASE PROCESSING         81163\n.NOCLAB  AIF   ('&LAB' NE '').OKCLAB                             81163\n&LAB     SETC  'A@&SYSNDX'                                       81163\n.OKCLAB  ANOP  ,                                                 81163\n&CMB     SETC  '&LAB'        DEFAULT BASED VALUE                 81163\n         AIF   (T'&BASED EQ 'O').CLABOK                          81163\n         AIF   ('&BASED' EQ '*').CLABOK                          81163\n         AIF   ('&BASED' NE '*SYSECT').CLABSET                   81163\n         AIF   ('&SYSECT' EQ '').CLABOK   BOO                    81163\n&CMB     SETC  '&SYSECT'                                         81163\n         AGO   .CLABOK                                           81163\n.CLABSET ANOP  ,                                                 81163\n&CMB     SETC  '&BASED'                                          81163\n.CLABOK  ANOP  ,                                                 81163\n&CMU     SETC  'R15'         DEFAULT BASE REGISTER ON USING      81163\n&SAV@DYN(&N) SETB (NOT &NOSAVE)\n&PARMEXP SETC  '(R1)'\n&PARMREG SETC  '1'\n&SAVZPRM SETC  ''            PASS TO PARMLOAD MACRO             GP10180\n         AIF   ('&PARM' EQ '').PARM1\n&SAVZPRM SETC  '&PARM(1)'    PASS TO PARMLOAD MACRO             GP10180\n         AIF   (N'&PARM LT 2).PARM1\n&PARMEXP SETC  '&PARM(2)'\n         AIF   (NOT &OLDSAVE).PARM1\n&PARMREG SETC  '&PARM(2)'\n         AIF   ('&PARMEXP'(1,1) EQ '(').STRIP\n         MNOTE 8,'PARM=&PARM INVALID'\n         MNOTE 8,'PARM=(&PARM(1),(&PARM(2)) ASSUMED'\n         AGO   .STRIPT\n.STRIP   AIF   ('&PARMEXP'(K'&PARMEXP,1) EQ ')').STRIP1\n         MNOTE 12,'PARM=&PARM INVALID'\n         MEXIT ,\n.STRIP1  ANOP  ,\n&PARMREG SETC  '&PARMREG'(2,K'&PARMREG-2)\n.STRIPT  AIF   ('&PARMREG'(1,1) GE '0').PARM1\n&PARMREG SETC  '&PARMREG'(2,K'&PARMREG-1)\n.PARM1   AIF   (NOT &DROP@1).NODROP                              81163\n         DROP  ,                                                 81163\n.NODROP  ANOP  ,                                                 81163\n&DROP@1  SETB  1                                                 81163\n         AIF   (T'&BASE NE 'O').NEWBASE                         GP02264\n.NOBASE  AIF   (T'&ENTRY NE 'O').NOBASEU                         81163\n         DS    0H\n         USING *,R15                                             81163\n.NOBASEU ANOP  ,                                                 81163\n&CMU     SETC  'R15'                                             81163\n&CASE    SETC  'R15'                                             81163\n         AGO   .BASED\n.NEWBASE ANOP  ,                                                GP02264\n&K       SETA  N'&BASE      MAX NUMBER OF BASES SPECIFIED       GP02264\n&CMU     SETC  '&BASE(1)'    SET THE FIRST ONE                  GP02264\n&CASE    SETC  '&BASE(1)'    SET THE FIRST ONE                  GP02264\n.BASED   AIF   (&NOSAVE).BASED2                                 GP04050\n         USING &DSCTG,R13\n.BASED2  AIF   ('&ID' EQ 'NO').NAMEOK                           GP05017\n&B@      SETC  'B@&SYSNDX'\n&N@      SETC  'N@&SYSNDX'\n&LQ      SETC  'L'''\n&LAB     B     &B@-*(,R15)\n&LAB     SETC  ''                                               GP05017\n         DC    AL1(&LQ&N@)\n         AIF   ('&ID' NE '*').USEID\n&NAME    SETC  '&L'\n         AIF   (T'&L NE 'O').USENAME\n&NAME    SETC  '&SYSECT'\n.USENAME AIF   ('&RIGHT' EQ '').NORIGHT\n&NAME    SETC  '&NAME'.' '.'COPYRIGHT '.'&RIGHT'\n.NORIGHT AIF   ('&DATE' EQ 'NO').NODATE\n&N@      DC    C'&NAME - &SYSDATE - &SYSTIME'\n         AGO   .NAMEOK\n.NODATE  ANOP  ,\n&N@      DC    C'&NAME'\n         AGO   .NAMEOK\n.USEID   ANOP  ,\n         AIF   ('&ID'(1,1) NE '''').USEIDQ\n&N@      DC    C&ID\n         AGO   .NAMEOK\n.USEIDQ  ANOP  ,\n&N@      DC    C'&ID'\n.NAMEOK  ANOP  ,                                                GP05017\n&LAB     MACPARM MODE=LBL                                       GP05017\n         AIF   (T'&ENTRY EQ 'O').NOENTR                          81163\n&I       SETA  0                                                 81163\n&J       SETA  N'&ENTRY                                          81163\n&N@      SETC  ''            SHORT ID                            81163\n         AIF   ('&EID' EQ 'SHORT').ENTRSH                        81163\n&N@      SETC  ' - '.'&SYSDATE'.' - '.'&SYSTIME'                 81163\n.ENTRSH  AIF   (&I GE &J).ENTRDN                                 81163\n&I       SETA  &I+1                                              81163\n&C9      SETC  '&ENTRY(&I)'                                      81163\n         AIF   (&NOENTRY).ENTRNN                                 81347\n         SPACE 1                                                GP04051\n         ENTRY &C9                                               81163\n.ENTRNN  AIF   (T'&ENTNO EQ 'O').ENTRNM                          88255\n&NUMENT  SETA  &NUMENT+1     INCREASE ENTRY NUMBER               88255\n         DC    Y(&NUMENT)    MAKE ENTRY PREFIX                   88255\n.ENTRNM  ANOP  ,                                                 88255\n&C9      B     &B@-*(,R15)                                       81163\n         AIF   ('&EID' EQ 'NONE').ENTRSH                        GP99055\n&N       SETA  K'&N@+K'&C9                                       81163\n&N       SETA  ((&N/2)*2)+1  MAKE ODD LENGTH FOR ALIGNMENT       81163\n         DC    AL1(&N),CL(&N)'&ENTRY(&I)&N@'                     81163\n         AGO   .ENTRSH                                           81163\n.ENTRDN  AIF   (T'&ENTNO EQ 'O').ENTRDM                          88255\n         DC    Y(0)          SET ENTRY PREFIX =0 (MAIN)          88255\n.ENTRDM  AIF   (&NOSAVE).ELDSVAM                                GP04050\n.*WHY?   USING &C9,R15                                          GP99158\n&B@      SAVEX R14,R12,&SV.14,TYPE=&YOPT,SETAM=&SETAM           GP99018\n&B@      SETC  ''                                                81163\n.*WHY?   DROP  R15                                              GP99158\n         AGO   .ELDSV                                           GP04050\n.ELDSVAM AIF   ('&SETAM' EQ '').ELDSV                           GP04050\n         AIF   (NOT &MVSESA).ELDSV                              GP04234\n         BASR  &CASE,0                                          GP04050\n         USING *,&CASE                                          GP04050\n         AM&SETAM WORK=&CASE                                    GP04050\n         DROP  &CASE                                            GP04050\n.ELDSV   AIF   ('&CASE' EQ '').ELDSVLR                           87223\n         AIF   ('&BASED' NE '*').ELDSVLR                         81263\n&B@      BASR  &CASE,0                                           93006\n         LA    R15,*-&CMB                                        81263\n         SLR   &CASE,R15                                         87223\n         AGO   .COMBAS2                                          81263\n.ELDSVLR ANOP  ,                                                 81263\n&B@      BASR  R15,0                                             93006\n         USING *,R15                                             81163\n         AIF   ('&CASE' EQ '').NOBASE2                           87223\n         L     &CASE,=A(&CMB)                                    87223\n         DROP  R15                                               81163\n         AGO   .COMBAS2                                          81163\n.NOENTR  AIF   (&NOSAVE).OLDSVAM                                GP04050\n.*WHY    USING &LAB,R15                                         GP99158\n&B@      SAVEX R14,R12,&SV.14,TYPE=&YOPT,SETAM=&SETAM           GP98322\n&B@      SETC  ''\n.*WHY    DROP  R15                                              GP99158\n         AGO   .OLDSV                                           GP04050\n.OLDSVAM AIF   ('&SETAM' EQ '').OLDSV                           GP04050\n         AIF   (NOT &MVSESA).OLDSV                              GP04234\n         BASR  &CASE,0                                          GP04050\n         USING *,&CASE                                          GP04050\n         AM&SETAM WORK=&CASE                                    GP04050\n         DROP  &CASE                                            GP04050\n.OLDSV   AIF   ('&CASE' EQ '').NOBASE2                           87223\n         AIF   ('&BREG' NE 'SET').BASREG                        GP05017\n&B@      BASR  &CASE,0                                          GP05017\n         LA    R15,*-&CMB                                       GP05017\n         SLR   &CASE,R15                                        GP05017\n         AGO   .COMBAS2                                         GP05017\n.BASREG  AIF   (&CME).BASEL                                      81163\n&B@      LA    &CASE,0(,R15)  REMOVE AM BIT\n         AGO   .COMBAS2                                          81163\n.BASEL   USING &LAB,R15                                          81163\n&B@      L     &CASE,=A(&CMB)                                    87223\n         DROP  R15                                               81163\n.COMBAS2 ANOP  ,                                                GP02264\n&K       SETA  N'&BASE                                          GP02264\n         AIF   (&K LT 2).NOBASE2                                GP02264\n&I       SETA  1                                                GP02264\n         LA    &BASE(&K),2048                                   GP02264\n.NOBASLP AIF   (&I GE &K).NOBASE2                               GP02264\n&I       SETA  &I+1                                             GP02264\n         AIF   ('&BASE(&I)' EQ '').NOBASLP                      GP02264\n         LA    &BASE(&I),2048(&BASE(&K),&BASE(&I-1))            GP02264\n&CMU     SETC  '&CMU'.','.'&BASE(&I)'                           GP02264\n         AGO   .NOBASLP                                         GP02264\n.NOBASE2 AIF   ('&CASE' EQ '').NOUSEB                            87223\n         USING &CMB,&CMU                                         81163\n.NOUSEB  AIF   (NOT &OLDSAVE).NOLDSV\n.*WHY?   L     R15,&SV.13                                       GP04050\n.*WHY?   ST    &CASE,&SV.15-&DSCTG.(,R15)                        87223\n         AIF   ('&PARM' EQ '').NOLDSV1\n         AIF   ('&PARM' EQ 'R1' OR '&PARM' EQ '1').NOLDSV1      GP04052\n         AIF   (&NOSAVE).NOLDSV1                                GP04052\n         L     &PARM(1),&SV.&PARMREG-&DSCTG.(,R13)              GP04050\n         AGO   .NOLDSV1\n.NOLDSV  AIF   (&NOSAVE).NOLDSV1\n         AIF   ('&PARM' EQ '').NOPARM\n         AIF   ('&PARM' EQ '1' OR '&PARM' EQ 'R1').NOPARM        87223\n&MACPLAB SETC  ''                                                81154\n         MACPARM &PARM(1),&PARMEXP                               81154\n.*\n.NOPARM  AIF   ('&SAVE' NE '*' AND NOT &ZERO).NOSTO NON-RENT/NO LENGTH\n         AIF   (NOT &HWOPT).LYLEN                                84307\n         L     R14,=A(&ENDG-&DSVAR)                             GP03033\n         AGO   .NOLA                                             84307\n.LYLEN   AIF   (NOT &BWOPT).LALEN                                84307\n         LH    R14,=Y(&ENDG-&DSVAR)                             GP03033\n         AGO   .NOLA\n.LALEN   LA    R14,&ENDG-&DSVAR                                 GP03033\n.*  NOTE THAT R14-R1 ARE USED BY STORAGE\n.NOLA    ST    R14,&SV.FWD   TEMP: LEN INTO OLD SAVE AREA       GP02304\n         AIF   ('&SAVE' NE '*').NOSTO                           GP03033\n*        STORAGE OBTAIN,LENGTH=(R14),SP=&SP,BNDRY=&BNDRY,LOC=&LOC\n         STORAGE OBTAIN,LENGTH=(R14),SP=&SP,BNDRY=&BNDRY,LOC=&LOC\n         AGO   .GTSTO                                           GP03033\n.NOSTO   LA    R14,&SAVE     LOAD NON-RENT SAVE AREA            GP03033\n         AIF   (&ZERO).ZRSTO                                    GP03033\n         XC    0(4*18,R14),0(R14)  PREVENT S978 IN EXIT         GP03033\n         AGO   .SKPLEN                                          GP03033\n.GTSTO   LR    R14,R1        SAVE OVER CLEAR                    GP02264\n         AIF   (NOT &ZERO).UNCLEAN                              GP02264\n.ZRSTO   SR    R15,R15       ZERO SOURCE LENGTH AND INSERTION   GP02264\n         LR    R0,R14        SET CLEAR ADDRESS                  GP02264\n         L     R1,&SV.FWD    GET SAVED LENGTH                   GP02304\n         MVCL  R0,R14        CLEAR GOTTEN STORAGE               GP02264\n         AIF   ('&SAVE' NE '*').SKPLEN  PREVENT S978 IN EXIT    GP03033\n.UNCLEAN MVC   &SV.SPLN-&DSCTG.(4,R14),&SV.FWD  SET LENGTH FOR PGMEXIT\n.SKPLEN  AIF   ('&SP' EQ '0').NOGM                               82002\n         MVI   &SV.SPLN-&DSCTG.(R14),&SP  AND SUBPOOL           GP02264\n.NOGM    ST    R14,&SV.FWD   MAKE FOWARD SAVE AREA LINK         GP02264\n         ST    R13,&SV.13-&DSCTG.(,R14) MAKE BACKWARD LINK      GP02264\n         AIF   (NOT &CPYREGS).LR13\n         MVC   &SV.14-&DSCTG.(&SV.12+4-&SV.14,R14),&SV.14        81151\n.LR13    LR    R13,R14       ESTABLISH NEW SAVE AREA\n         AIF   (T'&ENTRY EQ 'O' OR T'&ENTNO EQ 'O').NOLDENT      88255\n         L     R1,&SV.13     GET OLD SAVE AREA BACK              88255\n         CLM   &CASE,7,&SV.15+1-&DSCTG.(R1)  MAIN ENTRY ?        88255\n         BE    *+16          YES; DON'T MOVE                     88255\n         L     R1,&SV.15-&DSCTG.(,R1) GET ENTRY ADDRESS BACK     88255\n         BCTR  R1,0          SPACE TO ENTRY COUNTER              88255\n         MVC   &ENTNO+L'&ENTNO-1(1),0(R1) COPY COUNT             88255\n.NOLDSV1 ANOP  ,       TRY IT HERE                              GP03033\n.NOLDENT AIF   ('&PARM' NE '1' AND '&PARM' NE 'R1').NOPARM1      87223\n         AIF   (&NOSAVE OR &OLDSAVE).NOPARM1                    GP04052\n         L     R1,&SV.13     OLD SAVE AREA                       87223\n         LM    R0,R1,&SV.0-&DSCTG.(R1)  RESTORE ENTRY REGISTERS  94272\n.NOPARM1 AIF   (&NOT1ST).END\n         AIF   (&DSOPT OR &NOSAVE).DSOPT                        GP04050\n&DSCTG   DSECT ,                                                GP04051\n&SV.SPLN DS    F\n&SV.13   DS    F\n&SV.FWD  DS    A\n&SV.14   DS    A\n&SV.15   DS    A\n&SV.0    DS    A\n&SV.1    DS    A\n&SV.2    DS    A\n&SV.3    DS    A\n&SV.4    DS    A\n&SV.5    DS    A\n&SV.6    DS    A\n&SV.7    DS    A\n&SV.8    DS    A\n&SV.9    DS    A\n&SV.10   DS    A\n&SV.11   DS    A\n&SV.12   DS    A\n&SV.FWK  EQU   *                                                 94272\n         AIF   (NOT &NWOPT).NOEND\n&ENDG    EQU   *\n.NOEND   AIF   ('&CSECT' NE 'RSECT').NOENDC\n&SECT    RSECT ,\n         AGO   .DSOPT\n.NOENDC  ANOP  ,\n&SECT    CSECT ,\n.DSOPT   AIF   (&EQUOPT OR &MAPONCE OR &SAV@REG).END\n&MAPONCE SETB  1\n&SAV@REG SETB  1\n         AIF   (&NOREG).SKPYREG  AVOID JES2 MAPPING CONFLICT    GP04115\n         YREGS ,\n.SKPYREG MASKEQU ,                                               87223\n.END     AIF   ('&SAVE' EQ '*' OR &NOSAVE).MEND                 GP04051\n&SAVTYPE SETC  'OLD'         PREVENT STORAGE RELEASE IN PGMEXIT GP04051\n MNOTE *,'SAVE IS &SAVE'\n MNOTE *,'SAVTYPE IS &SAVTYPE'\n.MEND    MEND  ,                                                GP04051\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PGMPATCH": {"ttr": 9997, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00\\x01\\x7f\\x01\\x05\\x01\\x7f\\x11C\\x00\\t\\x00\\t\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-01-17T00:00:00", "modifydate": "2005-01-17T11:43:00", "lines": 9, "newlines": 9, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PGMPATCH &LEN                                 ADDED ON 2000017\n         LCLC  &LN\n&LN      SETC  '&LEN'\n         AIF   ('&LEN' NE '').USERS\n&LN      SETC  '128'\n.USERS   ANOP  ,\n&NM      DC    ((&LN+1)/2)S(*)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTBIG": {"ttr": 10241, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00C\\x01\\x03\\x02_\\x01\\x03\\x02o\\x114\\x00#\\x00#\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2003-01-26T11:34:43", "lines": 35, "newlines": 35, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PRTBIG &ITEM,&LIST=,&DEV=,&OPT=                ADDED ON 81159\n         LCLA  &OP,&I,&J\n         LCLB  &B1,&B2,&B4,&B8,&B16,&B32,&B64,&B128              91056\n         AIF   ('&ITEM' NE '' AND '&LIST' NE '').BOTH\n         AIF   ('&LIST' NE '').LIST\n&J       SETA  N'&OPT\n         AIF   (&J EQ 0).ITMNOPT\n.ITMLOOP AIF   (&I GE &J).ITMTEST\n&I       SETA  &I+1\n&B128    SETB  (&B128 OR '&OPT(&I)' EQ 'CH12' OR '&OPT(&I)' EQ 'BIG')\n&B64     SETB  (&B64 OR '&OPT(&I)' EQ 'MORE')                    91056\n&B32     SETB  (&B32 OR '&OPT(&I)' EQ 'SMALLER')                 91056\n&B16     SETB  (&B16 OR '&OPT(&I)' EQ 'CH8' OR '&OPT(&I)' EQ 'SMALL')\n&B8      SETB  (&B8 OR '&OPT(&I)' EQ 'CENT' OR '&OPT(&I)' EQ 'CENTER')\n&B4      SETB  (&B4 OR '&OPT(&I)' EQ 'LEFT')                     91056\n&B2      SETB  (&B2 OR '&OPT(&I)' EQ 'RIGHT')                    91056\n&B1      SETB  (&B1 OR '&OPT(&I)' EQ 'NEG' OR '&OPT(&I)' EQ 'NEGATIVE')\n         AGO   .ITMLOOP\n.ITMTEST AIF   ((&B128+&B16+&B32) LT 2).ITMSONE                  91056\n       MNOTE 4,'MUTUALLY EXCLUSIVE SIZE OPTIONS SPECIFIED; SMALL USED'\n.ITMSONE ANOP  ,                                                 86064\n&OP      SETA  &B128+&B64+&B32+&B16+&B8+&B4+&B2+&B1              91056\n         AIF   (&OP NE &J).BADOPT\n&OP      SETA  &B128*128+&B64*64+&B32*32+&B16*16+&B8*8+&B4*4+&B2*2+&B1\n.ITMNOPT ANOP  ,\n&NM      PRTCOM PRTBIG,FUN=8,B0=0,B1=&OP,A1=&ITEM,DEV=&DEV\n         MEXIT ,\n.BOTH    MNOTE 4,'ITEM OPERAND AND LIST= MUTUALLY EXCLUSIVE'\n         MEXIT ,\n.BADOPT  MNOTE 4,'ERRONEOUS OPT= VALUE; USE ''CENT'' AND ''NEG'' ONLY'\n         MEXIT ,\n.LIST    ANOP  ,\n&NM      PRTCOM PRTBIG,FUN=8,A1=&LIST,DEV=&DEV,OPT=&OPT,A80=ON\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTCLOSE": {"ttr": 10243, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x03\\x02_\\x01\\x03\\x02_\\x153\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2003-01-25T15:33:58", "lines": 11, "newlines": 11, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTCLOSE &TYPE,&DEV=\n         LCLA  &FN\n         AIF   ('&TYPE' EQ '').COMM\n         AIF   ('&TYPE' EQ 'TCLOSE' OR '&TYPE' EQ 'SPIN').SET1\n         MNOTE 4,'*** UNRECOGNIZED TYPE &TYPE'\n.SET1    ANOP  ,\n&FN      SETA  1             SET TCLOSE FUNCTION\n.COMM    ANOP  ,\n&NM      PRTCOM PRTCLOSE,FUN=&FN,DEV=&DEV  EXPAND REQUEST\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTCOM": {"ttr": 10245, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x01\\x03\\x02_\\x01\\x05\\x19/\\x00W\\x00\\xb9\\x00\\xa1\\x00*\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2005-07-11T00:57:00", "lines": 185, "newlines": 161, "modlines": 42, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTCOM &OM,&B0=,&B1=0,&DEV=0,&FUN=,&A0=,&A1=,&OPT=,&A80=OFF\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*   PRTCOM PROVIDES THE INTERFACE TO THE @PRINTER SERVICE ROUTINE    *\n.*   ARGUMENTS ARE PASSED IN R0, R1, AND ACR0 (PRTF,PRTS)             *\n.*                                                                    *\n.*   IN AM24, THE REGISTER USE IS:                                    *\n.*                                                                    *\n.*   R0:0           R0:1           R0:2           R0:3                *\n.*                                                                    *\n.*   OPT FLAGS      TITLE/FOOTER#  DEVICE MASK    PRT FUNCTION REQ.   *\n.*   (EITHER B0 OR OPT=)                                              *\n.*                                                                    *\n.*   R1:0           R1:1           R1:2           R1:3                *\n.*                                                                    *\n.*   LENGTH/ENDCH   ADDRESS-OF-LIST-OR-PRINT-DATA-ETC.                *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*   IN AM31, THE REGISTER USE IS:                                    *\n.*                                                                    *\n.*   R0:0           R0:1           R0:2           R0:3                *\n.*                                                                    *\n.*   FLAG           TITLE/FOOTER#  DEVICE MASK    PRT FUNCTION REQ.   *\n.*   (EITHER B0 OR OPT=)                                              *\n.*                                                                    *\n.*   R1:0           R1:1           R1:2           R1:3                *\n.*                                                                    *\n.*   ADDRESS-OF-LIST-OR-PRINT-DATA-ETC.---------------                *\n.*                                                                    *\n.*                                                                    *\n.*   ACR0:0         ACR0:1         ACR0:2         ACR0:3              *\n.*                                                                    *\n.*                                                LENGTH/ENDCH        *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*   FLAGS :                                                          *\n.*                                                                    *\n.*     80 - ABEND IF NOT OPENED         (PRTOPEN)                     *\n.*     40 - (DON'T USE)                 (PRTOPEN)                     *\n.*     20 - SUPPRESS WTO IF NOT OPENED  (PRTOPEN)                     *\n.*     10 - ABEND IF DD DUMMY           (PRTOPEN)                     *\n.*     20 - NEW SHEET ON NEXT PAGE EJECT                              *\n.*     04 - THIS RECORD CONTAINS ASA                                  *\n.*     02 - THIS RECORD CONTAINS MACHINE CODE                         *\n.*     01 - NO CONTROL CHARACTER IN RECORD                            *\n.*                                                                    *\n.*   TITLE/FOOTER #:   4 BITS EACH; TOTAL OF EACH (PRTOPEN); ELSE     *\n.*     NUMBER OF TITLE/FOOTER THIS RECORD IS TO BE USED FOR           *\n.*                                                                    *\n.*   DEVICE MASK:  (0 TREATED AS 1)                                   *\n.*                                                                    *\n.*   NUMBER OF DEVICE (1-8) FOR PRTOPEN; R1 POINTS TO PRTWORK/PUNWORK *\n.*   ONE BIT PER DEVICE TO RECEIVE THIS RECORD (E.G. DEV=3 WRITES THE *\n.*     REQUEST TO DEVICES 1 AND 2)                                    *\n.*                                                                    *\n.*   FUNCTION:  INDEX TO REQUESTED FUNCTION:                          *\n.*                                                                    *\n.*   0 - CLOSE      1 - TCLOSE     2 - OPEN       3 - ROOM (COND.SPC) *\n.*   4 - SPACE N    5 - FD LIST    6 - V-RECORD   7 - FIXED REC.      *\n.*   8 - SEPARATE   9 - SNAP      10 - FD ITEM   11 - STRING RECORD   *\n.*  12 - AM31 FREC                                                    *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         GBLC  &MACPLAB,&PRTMODE\n         GBLB  &MVSESA                                          GP04234\n         LCLA  &I,&J,&K,&OPA,&VD,&D(8)\n         LCLB  &F01,&F02,&F04,&F08,&F10,&F20,&F40,&F80,&B0Z\n         LCLB  &INDEV                                            81259\n         LCLC  &DC,&LNR,&OP                                      81259\n.*   FOR AM31 SUPPORT, THE A0 FIELD IS NOW PLACED INTO ACCESS REGISTER\n.*   0, BYTE 3\n.*\n&MACPLAB SETC  '&NM'                                             81259\n&K       SETA  N'&OPT                                            90309\n&B0Z     SETB  ('&B0' EQ '' OR '&B0' EQ '0')  OPTION FLAGS ?\n         AIF   (&B0Z AND &K EQ 0).DEFOPT      NO FLAGS, NO OPTIONS\n         AIF   (&B0Z OR  &K EQ 0).WHATOPT\n         MNOTE 8,'&OM: BOTH B0 AND OPT SPECIFIED; B0=&B0 IGNORED'\n.WHATOPT AIF   (NOT &B0Z).ITMNOPT    B0 - USE IT\n&J       SETA  0             COUNT OF PROCESSED OPERANDS\n.ITMLOOP AIF   (&I GE &K).ITMTEST                                90309\n&I       SETA  &I+1                                              90309\n&DC      SETC  '&OPT(&I)'\n         AIF   ('&DC' EQ '').ITMLOOP  IGNORE NULLS\n         AIF   ('&DC' EQ 'WTO').ITMLOOP  IGNORE SEMANTIC NULLS  GP03027\n         AIF   ('&DC' EQ 'DUMMY').ITMLOOP  IGNORE SEMANTIC NULL\n&J       SETA  &J+1                                              90309\n&F80     SETB  (&F80 OR '&DC' EQ 'ABE' OR '&DC' EQ 'LIST')\n&F80     SETB  (&F80 OR '&DC' EQ 'ABEND')\n&F40     SETB  (&F40 OR '&DC' EQ 'X9700')\n&F20     SETB  (&F20 OR '&DC' EQ 'SHEET' OR '&DC' EQ 'PAGE')\n&F20     SETB  (&F20 OR '&DC' EQ 'AUX' OR '&DC' EQ 'TRAY2')\n&F20     SETB  (&F20 OR '&DC' EQ 'AUXTRAY' OR '&DC' EQ 'TRAY')\n&F20     SETB  (&F20 OR '&DC' EQ 'NOWTO')\n&F10     SETB  (&F40 OR '&DC' EQ 'NODUMMY')\n&F10     SETB  (&F40 OR '&DC' EQ 'ABDUMMY')\n&F04     SETB  (&F04 OR '&DC' EQ 'ASA')   (DEFAULT)\n&F02     SETB  (&F02 OR '&DC' EQ 'MC' OR '&DC' EQ 'MCC')\n&F02     SETB  (&F02 OR '&DC' EQ 'SKIPEJE' OR '&DC' EQ 'NOEJE')\n&F01     SETB  (&F01 OR '&DC' EQ 'NO' OR '&DC' EQ 'NOCC')\n&F01     SETB  (&F01 OR '&DC' EQ 'EJECT2' OR '&DC' EQ '2EJECT')\n         AGO   .ITMLOOP                                          90309\n.ITMTEST ANOP  ,\n&OPA     SETA  &F80+&F40+&F20+&F10+&F08+&F04+&F02+&F01\n         AIF   (&OPA EQ &J).DONOPT  EACH OPERAND VALID ?\n.BADOPT  MNOTE 4,'&OM: ERROR - OPT PARAMETER BAD: &OPT'\n.DONOPT  ANOP  ,\n&OPA     SETA  &F80*128+&F40+&F20*32+&F10*16+&F08*8+&F04*4+&F02*2+&F01\n&OP      SETC  '&OPA'\n         AGO   .POSTOPT                                         GP99029\n.ITMNOPT ANOP  ,                                                 90309\n&OP      SETC  '&B0'         USE USER'S PASSED VALUE             90309\n         AIF   ('&OP' NE '').POSTOPT\n.DEFOPT  ANOP  ,\n&OP      SETC  '0'           MAKE IT NON-BLANK\n.POSTOPT AIF   ('&DEV' EQ '' OR '&DEV' EQ '0').NODV\n         AIF   ('&DEV' NE 'ALL' AND '&DEV' NE '255').DVSOM      GP03240\n&VD      SETA  255\n         AGO   .NODV\n.DVSOM   AIF   (K'&DEV LT 2).DVSOL                               81259\n         AIF   ('&DEV'(1,1) NE '=').DVSOL                        81259\n&INDEV   SETB  1             SET INDIRECT DEVICE NUMBER          81259\n         AGO   .NODV                                             81259\n.DVSOL   ANOP  ,                                                 81259\n&I       SETA  0\n&K       SETA  N'&DEV\n.DEVLOOP ANOP  ,\n&I       SETA  &I+1\n         AIF   (&I GT &K).DVEND\n         AIF   ('&DEV(&I)' EQ '').DEVLOOP\n         AIF   ('&DEV(&I)' EQ '0').DEVLOOP\n         AIF   ('&DEV(&I)' LT '1' OR '&DEV(&I)' GT '8').DVERR\n&D(&DEV(&I)) SETA  1\n         AGO   .DEVLOOP\n.DVERR   MNOTE 8,'*** INVALID DEVICE NUMBER &DEV(&I)'\n         AGO   .DEVLOOP\n.DVEND   ANOP  ,\n&VD      SETA  128*&D(8)+64*&D(7)+32*&D(6)+16*&D(5)+8*&D(4)\n&VD      SETA  &VD+4*&D(3)+2*&D(2)+&D(1)\n.NODV    AIF   ('&OP' NE '0' OR '&B1' NE '0').LONG              GP99029\n         AIF   (&VD GT 15).LONG\n&J       SETA  &VD*256+&FUN\n         MACPARM R0,&J       LOAD DEVICE/FUNCTION INDEX          81259\n         AGO   .POST0                                            81259\n.LONG    ANOP  ,                                                 82326\n&MACPLAB L     R0,=AL1(&OP,&B1+0,&VD,&FUN)                       81259\n&MACPLAB SETC  ''            CANCEL LABEL                        81259\n.POST0   AIF   (NOT &INDEV).LOAD1                                81259\n&VD      SETA  K'&DEV-1                                          81259\n&DC      SETC  '&DEV'(2,&VD)                                     81259\n&MACPLAB ICM   R0,2,&DC                                          81259\n&MACPLAB SETC  ''                                                81259\n.LOAD1   AIF   ('&FUN' EQ '0' OR '&FUN' EQ '1').BAL  CLOSE?\n         MACPARM R1,&A1      LOAD PARAMETER REGISTER\n         AIF   ('&A80' EQ 'OFF').NOTHIGH                        GP03025\n         O     R1,=X'80000000'  SET LIST BIT (PRTBIG)           GP03025\n.NOTHIGH AIF   (NOT &MVSESA).VER24                              GP04234\n         AIF   (&FUN EQ 11 OR &FUN EQ 12).ACR                   GP03025\n.VER24   AIF   ('&A0' EQ '' OR '&A0' EQ '0').BAL                 90309\n&K       SETA  K'&A0                                            GP05190\n         AIF   (&K LT 3).VER24I                                 GP05190\n         AIF   ('&A0'(1,1) NE '(' OR '&A0'(2,1) EQ '(').VER24I  GP05190\n         AIF   ('&A0'(&K,1) NE ')' OR '&A0'(&K-1,1) EQ ')').VER24I\n         LA    R1,0(,R1)     CLEAR HIGH BYTE                    GP05190\n         MACPARM R14,&A0,OP=LR,OPR=LR                           GP05190\n         SLL   R14,24                                           GP05190\n         OR    R1,R14        INSERT LENGTH                      GP05190\n         AGO   .BAL                                             GP05190\n.VER24I  ICM   R1,8,=AL1(&A0)                                    90309\n         AGO   .BAL\n.ACR     AIF   ('&A0' NE '' AND '&A0' NE '0').ACRLOAD\n         AIF   (&FUN EQ 11 AND '&A0' EQ '0').ACRLOAD\n         MNOTE 8,'&OM: REQUIRED LENGTH VALUE MISSING'\n.ACRLOAD MACPARM R15,&A0\n.*NEED(R) N     R15,=X'000000FF'  FOR FUTURE USE\n         SAR   R0,R15        LOAD INTO ACCESS REGISTER\n.BAL     AIF   ('&PRTMODE' EQ 'V').VCON\n         L     R15,@PRINTER\n         AGO   .BALR\n.VCON    L     R15,=V(@PRINTER)\n.BALR    BASR  R14,R15                                          GP99020\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTDATA": {"ttr": 10249, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\t\\x14\\x8f\\x01\\t\"\\x7f\\x15\\x00\\x00 \\x00 \\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2009-05-28T00:00:00", "modifydate": "2009-08-15T15:00:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PRTDATA &LIST,&DEV=,&TITLE=0\n         LCLA  &N,&I,&J,&K\n         LCLC  &LBL,&C,&T(10)\n&N       SETA  N'&SYSLIST\n&LBL     SETC  'ZZ'.'&SYSNDX'\n&NM      PRTLIST &LBL.L,DEV=&DEV,TITLE=&TITLE\n         B     &LBL.X\n&LBL.L   FDOPT NL\n.LOOP    ANOP  ,\n&I       SETA  &I+1\n&K       SETA  N'&SYSLIST(&I)\n         AIF   (&K LT 1).LOOP\n&T(2)    SETC  ''\n&T(3)    SETC  ''\n&T(4)    SETC  ''\n&T(5)    SETC  ''\n&T(6)    SETC  ''\n&T(7)    SETC  ''\n&T(8)    SETC  ''\n&T(9)    SETC  ''\n&T(10)   SETC  ''\n&J       SETA  0\n.PLUP    ANOP  ,\n&J       SETA  &J+1\n&T(&J)   SETC  '&SYSLIST(&I,&J)'\n         AIF   (&J LT &K).PLUP\n.POUT    FD    &T(1),&T(2),&T(3),&T(4),&T(5),&T(6),&T(7),&T(8)\n         AIF   (&I LT &N).LOOP\n         FD    *END\n&LBL.X   DS    0H\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTF": {"ttr": 10251, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x01\\x03\\x02_\\x01\\x08\\x11O\\x15W\\x00<\\x004\\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2008-04-23T15:57:00", "lines": 60, "newlines": 52, "modlines": 3, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTF  &FAD,&LN,&DEV=,&TITLE=0,&FOOTER=0,&CC=,&OPT=,&MODE=,    *\n               &AM=31                                           GP02235\n         GBLB  &MVSESA                                          GP04234\n.*  NOTE THAT OPT= USES THE HIGH BYTE OF R1 UNLESS AM=AM31 IS USED\n         LCLA  &CT,&I,&J,&K,&FN,&HF                              84068\n         LCLB  &AM24,&AM31                                      GP02235\n         LCLC  &L\n         AIF   (&MVSESA).ACC                                    GP04234\n&AM24    SETB  1             FORCE OLD MODE                     GP04234\n         AGO   .GOODAM                                          GP04234\n.ACC     ANOP  ,                                                GP04234\n&AM24    SETB  ('&AM' EQ '24' OR '&AM' EQ 'AM24')               GP02235\n&AM31    SETB  ('&AM' EQ '31' OR '&AM' EQ 'AM31' OR '&AM' EQ 'ANY')\n         AIF   (&AM24 OR &AM31).GOODAM                          GP02235\n         MNOTE 4,'PRTF: USING AM=31 - UNRECOGNIZED AM=&AM'      GP02235\n&AM31    SETB  1                                                GP02235\n.GOODAM  AIF   (&TITLE EQ 0 AND &FOOTER EQ 0).NOT\n         AIF   (&TITLE LT 16 AND &FOOTER LT 16).OKT\n         MNOTE 4,'*** NON-NUMERIC TITLE/FOOTER NOT SUPPORTED'\n.OKT     ANOP  ,\n&HF      SETA  &TITLE*16+&FOOTER\n.NOT     ANOP  ,\n&FN      SETA  7+5*&AM31     USE FUNCTION CODE APPROPRIATE TO MODE\n         AIF   ('&LN' EQ '').DFLTLEN                             90309\n         AIF   ('&FAD'(1,1) EQ '''').LITLEN                     GP02235\n&NM      PRTCOM PRTF,FUN=&FN,DEV=&DEV,B1=&HF,A0=&LN,A1=&FAD,OPT=&CC\n         MEXIT ,                                                GP02235\n.LITLEN  ANOP  ,                                                GP02235\n&NM      LA    R1,&FAD                                          GP02235\n         PRTCOM PRTF,FUN=&FN,DEV=&DEV,B1=&HF,A0=&LN,A1=(R1),OPT=&CC\n         MEXIT ,                                                GP02235\n.DFLTLEN AIF   ('&FAD'(1,1) NE '''').LNNLIT                     GP02235\n&K       SETA  K'&FAD-2                                         GP02235\n         AIF   ('&FAD'(&K+2,1) NE '''').LNNLIT                  GP08114\n         AIF   (&K LT 4).LNNSHRT                                GP08114\n&I       SETA  2                                                GP02235\n&J       SETA  &K                                               GP02235\n&K       SETA  &J                                               GP02235\n.LNNLUP  AIF   ('&FAD'(&I,2) EQ '''''').LNNSK2                  GP02235\n         AIF   ('&FAD'(&I,2) EQ '&&').LNNSK2                    GP02235\n&I       SETA  &I+1                                             GP02235\n         AGO   .LNNINC                                          GP02235\n.LNNSK2  ANOP  ,                                                GP02235\n&I       SETA  &I+2                                             GP02235\n&K       SETA  &K-1                                             GP02235\n.LNNINC  AIF   (&I LE &J).LNNLUP                                GP02235\n.*                                                              GP02235\n.LNNSHRT AIF   (&K GE 0).LNNCOM                                 GP02235\n&K       SETA  0                                                GP02235\n.LNNCOM  ANOP  ,                                                GP02235\n&NM      LA    R1,=C&FAD                                        GP02235\n&HF      SETA  &TITLE*16+&FOOTER                                GP02235\n         PRTCOM PRTF,FUN=&FN,DEV=&DEV,B1=&HF,A0=&K,A1=(R1),OPT=&CC\n         MEXIT ,                                                GP02235\n.LNNLIT  ANOP  ,                                                GP02235\n&L       SETC  'L'''                                            GP02235\n&NM      PRTCOM PRTF,FUN=&FN,DEV=&DEV,B0=&CT,B1=&HF,A0=&L&FAD,A1=&FAD,O*\n               PT=&CC                                           GP08110\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTITEM": {"ttr": 10253, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00(\\x01\\x03\\x02_\\x01\\x03\\x02_\\x154\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2003-01-25T15:34:28", "lines": 12, "newlines": 12, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTITEM &LAD,&DEV=,&TITLE=0,&FOOTER=0,&OPT=             90309\n.*   CLONED FROM PRTLIST                                        GP99029\n         LCLA  &HF\n         AIF   (&TITLE EQ 0 AND &FOOTER EQ 0).NOT\n         AIF   (&TITLE LT 16 AND &FOOTER LT 16).OKT\n         MNOTE 4,'*** NON-NUMERIC TITLE/FOOTER NOT SUPPORTED'\n.OKT     ANOP  ,\n&HF      SETA  &TITLE*16+&FOOTER\n.NOT     ANOP  ,\n&NM      PRTCOM PRTLIST,FUN=10,DEV=&DEV,B1=&HF,A1=&LAD,OPT=&OPT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTL": {"ttr": 10255, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x002\\x01\\x03\\x02_\\x01\\x03\\x02_\\x154\\x00\\x18\\x00\\x18\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2003-01-25T15:34:32", "lines": 24, "newlines": 24, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTL  &VAD,&DEV=,&TITLE=0,&FOOTER=0,&CC=,&OPT=,&MODE=  GP02301\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  PRTL SERVES AS A TEMPORARY ADJUNCT TO PRTF, PENDING CORRECTION    *\n.*  OF PRTF AND PRTS IN 31-BIT ADDRESSING MODE                        *\n.*                                                                    *\n.*  PRTL 'LITERAL STRING' - CONVERTED TO VCON AND INVOKES PRTV        *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         LCLA  &CT,&I\n         LCLC  &M#\n&M#      SETC  '&SYSNDX'\n&NM      PRTV  ZZVC&M#,                                                *\n               DEV=&DEV,                                               *\n               TITLE=&TITLE,                                           *\n               FOOTER=&FOOTER,                                         *\n               CC=&CC,                                                 *\n               OPT=&OPT,                                               *\n               MODE=&MODE\n         B     ZZVD&M#\nZZVC&M#  VCON  &VAD\nZZVD&M#  DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTLIST": {"ttr": 10257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01\\x03\\x02_\\x01\\x03\\x02_\\x154\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2003-01-25T15:34:36", "lines": 11, "newlines": 11, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTLIST &LAD,&DEV=,&TITLE=0,&FOOTER=0,&OPT=,&MODE=      90309\n         LCLA  &HF\n         AIF   (&TITLE EQ 0 AND &FOOTER EQ 0).NOT\n         AIF   (&TITLE LT 16 AND &FOOTER LT 16).OKT\n         MNOTE 4,'*** NON-NUMERIC TITLE/FOOTER NOT SUPPORTED'\n.OKT     ANOP  ,\n&HF      SETA  &TITLE*16+&FOOTER\n.NOT     ANOP  ,\n&NM      PRTCOM PRTLIST,FUN=5,B1=&HF,A1=&LAD,DEV=&DEV,OPT=&OPT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTOPEN": {"ttr": 10259, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x01\\x03\\x02_\\x01\\x03\\x02_\\x154\\x00\\x07\\x00\\x07\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2003-01-25T15:34:40", "lines": 7, "newlines": 7, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTOPEN &WORK,&DEV=,&OPT=\n         LCLA  &I,&J\n         LCLB  &A,&D,&W\n&J       SETA  N'&OPT\n&NM      PRTCOM PRTOPEN,FUN=2,A1=&WORK,DEV=&DEV,OPT=&OPT\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTROOM": {"ttr": 10261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00C\\x01\\x03\\x02_\\x01\\x03\\x02_\\x154\\x00\\x04\\x00\\x04\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2003-01-25T15:34:43", "lines": 4, "newlines": 4, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTROOM &COUNT,&DEV=,&OPT=                              90309\n&NM      PRTCOM PRTROOM,FUN=3,A1=&COUNT,DEV=&DEV,OPT=&OPT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTS": {"ttr": 10263, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00$\\x01\\x03\\x02_\\x01\\x04\\x08\\x0f\"\\x16\\x00 \\x00 \\x00\\x02\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2004-03-20T22:16:24", "lines": 32, "newlines": 32, "modlines": 2, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTS  &FAD,&DEV=,&TITLE=0,&FOOTER=0,&CC=,&OPT=,&END=0,&MODE=\n.*  NOTE THAT OPT= USES THE HIGH BYTE OF R1 - PERMANENT RESTRICTION\n         LCLA  &CT,&HF,&J,&K,&L\n         AIF   (&TITLE EQ 0 AND &FOOTER EQ 0).NOT\n         AIF   (&TITLE LT 16 AND &FOOTER LT 16).OKT\n         MNOTE 4,'*** NON-NUMERIC TITLE/FOOTER NOT SUPPORTED'\n.OKT     ANOP  ,\n&HF      SETA  &TITLE*16+&FOOTER\n.NOT     AIF   ('&FAD'(1,1) NE '''').NOTLIT\n&K       SETA  K'&FAD-1\n&L       SETA  2\n&J       SETA  &K-1\n&K       SETA  &J\n.LOOP    AIF   ('&FAD'(&L,2) EQ '''''').SK2\n         AIF   ('&FAD'(&L,2) EQ '&&').SK2\n&L       SETA  &L+1\n         AGO   .INC\n.SK2     ANOP\n&L       SETA  &L+2\n&K       SETA  &K-1\n.INC     AIF   (&L LE &J).LOOP\n.*\n         AIF   (&K GE 0).COMLEN\n&K       SETA  0\n.COMLEN  ANOP  ,\n&NM      LA    R1,=C&FAD\n      PRTCOM PRTS,FUN=11,DEV=&DEV,B1=&HF,A0=&END,A1=(R1),OPT=(&OPT,&CC)\n         MEXIT ,\n.NOTLIT  ANOP  ,\n&NM   PRTCOM PRTS,FUN=11,DEV=&DEV,B1=&HF,A0=&END,A1=&FAD,OPT=(&OPT,&CC)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTSNAP": {"ttr": 10265, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00R\\x01\\x03\\x02_\\x01\\x03\\x02_\\x154\\x00\\x04\\x00\\x04\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2003-01-25T15:34:52", "lines": 4, "newlines": 4, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      PRTSNAP &LISTAD,&DEV=,&OPT=                    ADDED ON 83331\n&NM      PRTCOM PRTSNAP,FUN=9,A1=&LISTAD,DEV=&DEV,OPT=&OPT\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTSPACE": {"ttr": 10267, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x03\\x02_\\x01\\x03\\x02_\\x154\\x00\\x04\\x00\\x04\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2003-01-25T15:34:56", "lines": 4, "newlines": 4, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTSPACE &COUNT,&DEV=,&OPT=                             90309\n&NM      PRTCOM PRTSPACE,FUN=4,A1=&COUNT,DEV=&DEV,OPT=&OPT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTV": {"ttr": 10269, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00R\\x01\\x03\\x02_\\x01\\x04\\x08\\x0f\"\\x16\\x00\\x0b\\x00\\x0b\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2004-03-20T22:16:52", "lines": 11, "newlines": 11, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTV  &VAD,&DEV=,&TITLE=0,&FOOTER=0,&CC=,&OPT=,&MODE=   90309\n         LCLA  &CT,&HF\n         AIF   (&TITLE EQ 0 AND &FOOTER EQ 0).NOT\n         AIF   (&TITLE LT 16 AND &FOOTER LT 16).OKT\n         MNOTE 4,'*** NON-NUMERIC TITLE/FOOTER NOT SUPPORTED'\n.OKT     ANOP  ,\n&HF      SETA  &TITLE*16+&FOOTER\n.NOT     ANOP  ,                                                 90309\n&NM      PRTCOM PRTV,FUN=6,B1=&HF,A1=&VAD,DEV=&DEV,OPT=(&OPT,&CC)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTWORK": {"ttr": 10497, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x03\\x02_\\x01\\x08\\x10O\\x12\\x18\\x00K\\x00D\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-01-25T00:00:00", "modifydate": "2008-04-13T12:18:00", "lines": 75, "newlines": 68, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PRTWORK &DD,&ALTDD,&TITLE=0,&FOOTER=0,&LPP=0,&WIDTH=0,        *\n               &FILL=0,&RECFM=0,&PAGE=0,&SPAGE=0,&PGUP=NO,&EXLST=0,    *\n               &BUF=                                            GP08088\n         LCLA  &PFG,&I,&J,&K                                     84169\n         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7,&PFX             GP05120\n         LCLC  &REC                                              81155\n&REC     SETC  '&RECFM'                                          81155\n         AIF   ('&REC' EQ '0').DEFREC                            81155\n&I       SETA  K'&RECFM                                          81155\n         AIF   (&I LT 4).NRECSD                                  81155\n         AIF   ('&RECFM'(&I,1) EQ '''').DEFREC                   81155\n.NRECSD  AIF   (&J GE &I).DONREC                                 81155\n&J       SETA  &J+1                                              81155\n         AIF   ('&REC'(&J,1) EQ 'U').RECU                        81155\n         AIF   ('&REC'(&J,1) EQ 'V').RECV                        81155\n         AIF   ('&REC'(&J,1) EQ 'F').RECF                        81155\n         AIF   ('&REC'(&J,1) EQ 'D').RECD                        81155\n         AIF   ('&REC'(&J,1) EQ 'T').RECT                        81155\n         AIF   ('&REC'(&J,1) EQ 'B').RECB                        81155\n         AIF   ('&REC'(&J,1) EQ 'S').RECS                        81155\n         AIF   ('&REC'(&J,1) EQ 'M').RECM                        81155\n         AIF   ('&REC'(&J,1) EQ 'N').RECN                        81271\n         AIF   ('&REC'(&J,1) NE 'A').DEFREC                      81155\n&B5      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECM    ANOP  ,                                                 81155\n&B6      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECN    ANOP  ,             SUPPRESS CC DEFAULT IN PRTOPEN      81271\n&B7      SETB  1                                                 81271\n         AGO   .NRECSD                                           81271\n.RECS    ANOP  ,                                                 81155\n&B4      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECB    ANOP  ,                                                 81155\n&B3      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECD    AIF   (&B0 OR &B1).DEFREC     FAIL VD, ETC.             81155\n.RECT    ANOP  ,                                                 81155\n&B2      SETB  1                                                 81155\n.RECV    ANOP  ,                                                 81155\n&B1      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECU    ANOP  ,                                                 81155\n&B1      SETB  1                                                 81155\n.RECF    ANOP  ,                                                 81155\n&B0      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.DONREC  ANOP  ,                                                 81155\n&REC     SETC  'B'''.'&B0&B1&B2&B3&B4&B5&B6&B7'.''''             81155\n.DEFREC  AIF   ('&PAGE' EQ '0').NOPG\n&I       SETA  &PAGE\n&PFG     SETA  1             SET PAGE FEED-BACK\n&PFX     SETB  1             EXPAND PAGE VALUES                 GP05120\n.NOPG    AIF   ('&SPAGE' EQ '0').NOSPG\n&J       SETA  &SPAGE\n&PFG     SETA  1             SET PAGE FEED-BACK\n&PFX     SETB  1             EXPAND PAGE VALUES                 GP05120\n.NOSPG   AIF   ('&PGUP' EQ 'NO').NOPGUP                          84169\n&PFG     SETA  3             SET UPDATING BY USER                84169\n         AIF   ('&PGUP' EQ '' OR '&PGUP' EQ 'YES').NOPGUP        84169\n         MNOTE 4,'INVALID PGUP OPTION : &PGUP'                   84169\n.NOPGUP  AIF   ('&EXLST' EQ '0').NOLST1\n&PFG     SETA  &PFG+4        SET EXIT LIST FLAG                  84169\n.NOLST1  AIF   ('&BUF' NE '1').NOBUF1                           GP08088\n&PFG     SETA  &PFG+16       SIGNLE BUFFER                      GP08088\n.NOBUF1  ANOP  ,                                                GP08088\n         DC    0H'0'\n&NM      DC    CL8'&DD ',CL8'&ALTDD ',AL2(&LPP),AL1(&FILL,&WIDTH,&TITLE*\n               ,&FOOTER,&REC,&PFG)\n         AIF   (NOT &PFX).SKIPPG#                               GP05120\n         DC    Y(&I,&J)      PAGE/SUB-PAGE FEEDBACK AREA\n.SKIPPG# DC    AL4(&EXLST)   EXIT LIST POINTER                   84169\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSWSECT": {"ttr": 10500, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "           MACRO\n&NM      PSWSECT &PFX=PSW,&LIST=,&FLAGS=,&WYL=,&LCL=             81134\n         LCLB  &FL,&FF,&FW,&FX,&FWO                              81134\n&FL      SETB  ('&LIST' EQ '' OR '&LIST' EQ 'YES')               81134\n&FF      SETB  ('&FLAGS' EQ '' OR '&FLAGS' EQ 'YES')             81134\n&FW      SETB  ('&WYL' EQ 'YES')                                 81134\n&FWO     SETB  ('&WYL' EQ 'ONLY')                                81134\n&FX      SETB  ('&LCL' EQ 'YES')                                 81134\n***********************************************************************\n*                                                                     *\n*                 PROTECT (SVC98) PASSWORD WORK AREA                  *\n*                                                                     *\n***********************************************************************\n           SPACE 2\n           AIF   ('&NM' EQ '').DSECT\n&NM        DS    0F .          PASSWORD/PROTECT WORK AREA\n           AGO   .NOSECT\n.DSECT     ANOP ,\n&PFX.SECT  DSECT ,             PASSWORD/PROTECT WORK AREA\n.NOSECT  AIF   (NOT &FL).NOTLST1                                 81134\n&PFX.LIST  DC    XL28'0' .     DEFINE FOR XC CLEAR\n           ORG   &PFX.LIST .   START INDIVIDUAL DEFINITIONS\n           SPACE 1\n&PFX.PCODE DC    X'00' .       'PROTECT' FUNCTION REQUEST\n.NOTLST1   AIF (NOT &FL AND NOT &FF).NOTLST2                     81134\n&PFX.FADD  EQU   1 .           ADD A PASSWORD\n&PFX.FREP  EQU   2 .           CHANGE A PASSWORD\n&PFX.FDEL  EQU   3 .           DELETE A PASSWORD\n&PFX.FLIST EQU   4 .           FIND A PASSWORD\n&PFX.FTTR  EQU   5 .           RETURN TTR (LIKE FIND); TTR=>A(DATA)\n&PFX.FTTD  EQU   6 .           SUPPLY DSN, GET TTR OF FIRST ENTRY\n         AIF   (NOT &FL).NOTLST2                                 81134\n           SPACE 1\n&PFX.PDATA DC    AL3(0) .      'FIND' OPERATION 80 BYTE DATA AREA PTR\n&PFX.DSNL  DC    X'00' .       DSN LENGTH\n&PFX.DSNA  DC    AL3(0) .      DSN ADDRESS\n           DC    X'00' .       UNUSED\n&PFX.PSWA  DC    AL3(0) .      PTR TO CURRENT PASSWORD\n           SPACE 1\n*          END OF LIST FOR 'FIND' OPERATION\n           SPACE 1\n           DC    X'00' .       UNUSED\n&PFX.CONP  DC    AL3(0) .      PTR TO CONTROL PSW IF NOT CPSW OP\n&PFX.VOL#  DC    X'00' .       NO. OF VOLUMES IN VOLUME LIST\n&PFX.VOLA  DC    AL3(0) .      PTR TO VOLUME LIST\n           SPACE 1\n*          END OF LIST FOR 'DELETE' OPERATION\n           SPACE 1\n&PFX.TCODE DC    X'00' .       PROTECTION CODE\n.NOTLST2   AIF (NOT &FL AND NOT &FF).NOTLST3                     81134\n&PFX.TDEF  EQU   0 .           DEFAULT ?\n&PFX.TRW   EQU   1 .           READ/WRITE ALLOWED\n&PFX.TRD   EQU   2 .           READ ALLOWED\n&PFX.TWR   EQU   3 .           WRITE ALLOWED\n         AIF   (NOT &FL).NOTLST3                                 81134\n           SPACE 1\n&PFX.NPSWA DC    AL3(0) .      ADDRESS OF NEW PASSWORD\n&PFX.DATL  DC    X'00' .       LENGTH OF DATA FIELD\n&PFX.DATB  DC    AL3(0) .      ADDRESS OF DATA FIELD\n           SPACE 1\n*          END OF LIST FOR ADD AND REPLACE\n           SPACE 2\n*********************** END OF SVC 98 WORKAREA ************************\n           SPACE 2\n&PFX.NPSW  DC    CL8' ' .      NEW PASSWORD FOR ADD/REPLACE\n&PFX.CPSW  DC    CL8' ' .      CONTROL PASSWORD FOR NON-CONTROL OP\n.NOTLST3   SPACE 2                                               81134\n***********************************************************************\n*                                                                     *\n*                           PASSWORD RECORD                           *\n*                                                                     *\n***********************************************************************\n           SPACE 2\n&PFX.START DS    0F .          START OF PASSWORD RECORD\n         AIF   (&FWO).WYLSHRT                                    81134\n&PFX.DSN   DC    CL44' ' .     DATASET NAME\n         AGO   .WYLFULL                                          81134\n.WYLSHRT ANOP  ,                                                 81134\n&PFX.DSN   DC    CL25' ' .     DSN FOR WYLBUR-ONLY CALLS         81134\n.WYLFULL ANOP  ,                                                 81134\n&PFX.PSWD  DC    CL8' ' .      PASSWORD\n           SPACE 1\n*          END OF KEY FIELD\n           SPACE 1\n         DS    0H ,          SET COUNTER ALIGNMENT               81134\n&PFX.DATA  DC    CL80' ' .     DATA RECORD OF ENTRY\n&PFX.DATAN EQU   *\n           ORG   &PFX.DATA .   REDEFINE\n&PFX.COUNT DC    H'0' .        ACCESS COUNTER\n&PFX.FLAG  DC    X'00' .       ENTRY TYPE FLAG\n&PFX.FCON  EQU   X'80' .       CONTROL PASSWORD\n&PFX.FRW   EQU   X'01' .       READ AND WRITE ACCESS ALLOWED\n*                              READ ONLY IF OFF\n           ORG   &PFX.DATAN    END OF DATA FIELD\n&PFX.RECL  EQU   *-&PFX.START . LENGTH OF PASSWORD RECORD\n.LOCOK   AIF   (NOT &FW AND NOT &FWO).NOWYL                      81134\n           SPACE 2\n****************** WYLBUR DATA SET NAME DEFINITIONS *******************\n           SPACE 1\n           ORG   &PFX.DSN .    REDEFINE 'WYLBUR' RECORD\n&PFX.WYLB  DC    CL9'WYLBUR' . SYSTEM IDENTIFIER\n&PFX.ACCT  DC    0CL8' ' .     FULL ACCOUNT NUMBER\n&PFX.ACT   DC    CL4' ' .      ACCOUNT NUMBER\n&PFX.SUB   DC    CL4' ' .      SUB-ACCOUNT\n&PFX.USER  DC    CL8' ' .      USER ID\n&PFX.WYLL  EQU   *-&PFX.WYLB . LENGTH OF DSN ENTRY FOR WYLBUR\n           SPACE 1\n******************** WYLBUR DATA AREA DEFINITIONS *********************\n           SPACE 1\n           ORG   &PFX.FLAG+1 . START OF WYLBUR DATA FIELD\n&PFX.WPRIV DC    X'00' .       USER PRIVILEGES\n&PFX.WOK   EQU   X'80' .       VALID PASSWORD (FOR ZAPS)\n&PFX.WSYS  EQU   X'40' .       SYSTEM PROGRAMMER\n&PFX.WACCT EQU   X'20' .       CROSS ACCOUNTS PRIVILEGE\n&PFX.WOPER EQU   X'10' .       OPERATOR PRIVILEGE\n&PFX.WFAIL EQU   X'08' .       UNDER PRIVILEGED ?\n&PFX.WLCL  EQU   X'04' .       IN-HOUSE USER                     81134\n&PFX.WTIME EQU   X'02' .       ALLOWED 'NOTIME-OUT'\n&PFX.WSUB  EQU   X'01' .       SUB-ACCOUNT PRIVILEGE\n           SPACE 1\n&PFX.WHASP DC    X'00' .       JOB ENTRY INTERFACE BITS\n&PFX.WNKEY EQU   X'80' .       DO KEYWORD CHECK FOR BATCH JOBS\n&PFX.WNBAT EQU   X'40' .       BATCH JOB ENTRY PERMITTED\n&PFX.WNSEQ EQU   X'20' .       USER RESTRICTED TO PDS ON WYLBUR PACKS\n&PFX.WNWYB EQU   X'10' .       USER RESTRICTED TO 'LIB' DATASET  81134\n&PFX.WXDAT EQU   X'01' .       DATA FIELD IS PRESENT\n           SPACE 1\n&PFX.WBIN  DC    CL3' ' .      DATE OF CREATION OR LAST MAINTENANCE\n&PFX.HINDX DC    X'00' .       INDEX TO 'WYL' INDEX IN VOLT      81134\n&PFX.WDATE DC    PL3'0' .      DATE OF LAST ACCESS\n&PFX.WFLAG DC    X'00' .       PROCESSING FLAGS\n&PFX.WAUL  EQU   X'80' .       AUTO LOAD LOGON GO (CONDITIONAL)\n&PFX.MODP  EQU   X'40' .       USER PASSWORD MODIFY ALLOWED\n&PFX.WAUA  EQU   X'20' .       AUTO LOGON FOR RECOVERY (UNCONDITIONAL)\n&PFX.WCPU  DC    X'00' .       INDEX TO DEFAULT CPU\n&PFX.WRJID DC    2X'00' .      HASP RJE PRINT/PUNCH ROUTING\n&PFX.WSSID DC    CL8' ' .      DEFAULT SUB-SYSTEM\n&PFX.WDVOL DC    CL6' ' .      DEFAULT SAVE VOLUME\n&PFX.WACTS DC    6CL4' ' .     ADDITIONAL ACCTS. FOR JOB ACCESS\n&PFX.WAVOL DC    5CL5' ' .      PACKS PERMITTED TO ACCESS (1ST 5 DIG)\n           SPACE 2\n.NOWYL   AIF   (NOT &FX).MDONE                                   81134\n********************* LOCAL SPECIAL PASSWORD ENTRY ********************\n           SPACE 1\n           ORG   &PFX.FLAG+1\n&PFX.AXACT DC    4CL8' ' .     ACCOUNTS\n&PFX.AXUID DC    3CL8' ' .     TSO USER ID\n&PFX.AXRJE DC    3X'00' .      RJE REMOTE NUMBERS\n           ORG   &PFX.DATAN\n.MDONE     SPACE 1                                               81134\n*********************** END OF PASSWORD RECORD ************************\n           SPACE 2\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PUNWORK": {"ttr": 10504, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x08\\x08\\x8f\\x01\\x08\\x10O\\x12\\x19\\x00?\\x00>\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2008-03-28T00:00:00", "modifydate": "2008-04-13T12:19:00", "lines": 63, "newlines": 62, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      PUNWORK &DD,&ALTDD,&TITLE=0,&FOOTER=0,&LPP=0,                 *\n               &WIDTH=80,&RECFM=FBN,&EXLST=,&BUF=               GP08088\n         LCLA  &PFG\n         LCLA  &I,&J                                             81155\n         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7                   81155\n         LCLC  &REC                                              81155\n&REC     SETC  '&RECFM'                                          81155\n&PFG     SETA  128           SET PUNCH OPTION\n         AIF   ('&REC' EQ '0').DEFREC                            81155\n&I       SETA  K'&RECFM                                          81155\n         AIF   (&I LT 4).NRECSD                                  81155\n         AIF   ('&RECFM'(&I,1) EQ '''').DEFREC                   81155\n.NRECSD  AIF   (&J GE &I).DONREC                                 81155\n&J       SETA  &J+1                                              81155\n         AIF   ('&REC'(&J,1) EQ 'U').RECU                        81155\n         AIF   ('&REC'(&J,1) EQ 'V').RECV                        81155\n         AIF   ('&REC'(&J,1) EQ 'F').RECF                        81155\n         AIF   ('&REC'(&J,1) EQ 'D').RECD                        81155\n         AIF   ('&REC'(&J,1) EQ 'T').RECT                        81155\n         AIF   ('&REC'(&J,1) EQ 'B').RECB                        81155\n         AIF   ('&REC'(&J,1) EQ 'S').RECS                        81155\n         AIF   ('&REC'(&J,1) EQ 'M').RECM                        81155\n         AIF   ('&REC'(&J,1) EQ 'N').RECN                        81271\n         AIF   ('&REC'(&J,1) NE 'A').DEFREC                      81155\n&B5      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECM    ANOP  ,                                                 81155\n&B6      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECN    ANOP  ,             SUPPRESS CC INSERTION IN OPEN       81271\n&B7      SETB  1                                                 81271\n         AGO   .NRECSD                                           81271\n.RECS    ANOP  ,                                                 81155\n&B4      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECB    ANOP  ,                                                 81155\n&B3      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECD    AIF   (&B0 OR &B1).DEFREC     FAIL VD, ETC.             81155\n.RECT    ANOP  ,                                                 81155\n&B2      SETB  1                                                 81155\n.RECV    ANOP  ,                                                 81155\n&B1      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.RECU    ANOP  ,                                                 81155\n&B1      SETB  1                                                 81155\n.RECF    ANOP  ,                                                 81155\n&B0      SETB  1                                                 81155\n         AGO   .NRECSD                                           81155\n.DONREC  ANOP  ,                                                 81155\n&REC     SETC  'B'''.'&B0&B1&B2&B3&B4&B5&B6&B7'.''''             81155\n.DEFREC  AIF   ('&EXLST' EQ '').NOLST1                           84169\n&PFG     SETA  &PFG+4        SET EXIT LIST PRESENT               84169\n.NOLST1  AIF   ('&BUF' NE '1').NOBUF1                           GP08088\n&PFG     SETA  &PFG+16       SIGNLE BUFFER                      GP08088\n.NOBUF1  ANOP  ,                                                GP08088\n         DC    0H'0'\n&NM      DC    CL8'&DD ',CL8'&ALTDD ',AL2(&LPP,&WIDTH),AL1(&TITLE,&FOOT*\n               ER,&REC,&PFG)\n         AIF   ('&EXLST' EQ '').MEND                             84169\n         DC    AL4(&EXLST)   EXIT LIST ADDRESS                   84169\n.MEND    MEND  ,                                                 84169\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RANDOM": {"ttr": 10506, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x035\\x8f\\x01\\x042o\"U\\x00O\\x00F\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-12-24T00:00:00", "modifydate": "2004-11-21T22:55:00", "lines": 79, "newlines": 70, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                        REPLACED 78029\n&ALIAS   RANDOM &R=R14,&SECT=,&SCALE=10                 REWRITE 2003358\n         GBLB  &MVS,&MVSSP,&MVSXA,&MVSESA,&OS390,&Z900          GP04234\n         GBLC  &MACPLAB                                         GP03358\n&MACPLAB SETC  '&ALIAS'                                         GP03358\n.*--------------------------------------------------------------------*\n.*   RANDOM - INLINE MACRO TO EXPAND RANDOM NUMBER GENERATION SUBRTNE *\n.*     NEEDS LTORG FOR THE CURRENT CSECT PRIOR TO END                 *\n.*                                                                    *\n.*     INVOKE AS BAS R14,RANDOM                                       *\n.*     XC RANDAU(4),RANDAU  TO RE-INITIALIZE                          *\n.*     RETURN IN GPR 0 INTEGER 0 TO 9 UNLESS SCALE IS REQUESTED       *\n.*                                                                    *\n.*     SECT= SPECIFIES DSECT NAME WHEN REFRESHABLE CODE IS NEEDED     *\n.*     (USE AFTER DEFINITION FOR THAT DSECT)                          *\n.*                                                                    *\n.*     WHEN USED WITH SCALE=(REG), THE REGISTER MAY BE ANY FLOATING   *\n.*     POINT REGISTER, BUT IF REGISTER 0, MUST BE WRITTEN AS (0) OR   *\n.*     (R0). THIS USAGE REQUIRES  LE REG,=E'MAXVAL'/BAS R14,RANDOM    *\n.*     FOR ALL CALLS.                                                 *\n.*--------------------------------------------------------------------*\n         LCLC  &MYSECT,&FPR                                     GP03358\n&MYSECT  SETC  '&SYSECT'                                        GP03358\n&FPR     SETC  'R0'          USE FLOATING POINT REGISTER 0      GP03358\n         AIF   ('&SCALE' EQ '').NOFREG                          GP03358\n         AIF   ('&SCALE'(1,1) NE '(').NOFREG                    GP03358\n         AIF   ('&SCALE' EQ '(0)').DOFREG                       GP03358\n         AIF   ('&SCALE' EQ '(R0)').DOFREG                      GP03358\n         AIF   ('&SCALE' EQ '(FR0)').DOFREG                     GP03358\n         AIF   ('&SCALE' EQ '(FPR0)').DOFREG                    GP03358\n         AGO   .NOFREG                                          GP03358\n.DOFREG  ANOP  ,                                                GP03358\n&FPR     SETC  'R6'          USE FLOATING POINT REGISTER 6      GP03358\n.NOFREG  AIF   (NOT &MVSESA).OLDSV                              GP03358\nRANDOM   MACPARM (&R),(0),OP=BAKR,OPR=BAKR                      GP03358\n         MACPARM (R15),(R1),RANDSAVE,MODE=THREE,OP=STM,OPR=STM  GP03358\n         AGO   .COMSV                                           GP04234\n.OLDSV   ANOP  ,                                                GP04234\nRANDOM   MACPARM (R14),(R1),RANDSAVD,MODE=THREE,OP=STM,OPR=STM  GP04234\n.COMSV   ICM   R1,15,RANDAU  CALLED BEFORE ?                    GP03358\n         BNZ   RANDOLD                                          GP03358\n         TIME  BIN\n         AR    R1,R0\n         N     R1,=X'3FFFFFFF'                                  GP03358\n         LA    R0,1\n         OR    R1,R0\nRANDOLD  M     R0,=F'13187'  WAS X'0001000D'                    GP03358\n         SRL   R1,8          KILL SIGN AND SOME                 GP03358\n         ST    R1,RANDAU     TEMP                               GP03358\n         ST    R1,RANDSAV0   TEMP                               GP03358\n         MVI   RANDSAV0,X'40' SET EXPONENT                      GP03358\n         LE    &FPR,RANDSAV0                                    GP03358\n         AIF   ('&SCALE' EQ '').NOSCALE                         GP03358\n         AIF   (T'&SCALE NE 'N').VAR                            GP03358\n         MACPARM &FPR,=E'&SCALE',OP=ME,OPR=MER                  GP03358\n         AGO   .NOSCALE                                         GP03358\n.VAR     MACPARM &FPR,&SCALE,OP=ME,OPR=MER                      GP03358\n.NOSCALE ANOP  ,\n         AU    &FPR,=X'46000000' POSITION AS INTEGER            GP03358\n         STE   &FPR,RANDSAV0\n         MVI   RANDSAV0,0    KILL EXPONENT\n         AIF   (NOT &MVSESA).OLDRS                              GP04234\n         LM    R15,R1,RANDSAVE                                  GP03358\n         PR    ,             ANSWER IN (0)                      GP03358\n         AGO   .COMRS                                           GP04234\n.OLDRS   LM    R14,R1,RANDSAVD                                  GP04234\n         BR    &R            RETURN ANSWER IN R0                GP04234\n.COMRS   SPACE 1                                                GP03358\n         AIF   ('&SECT' EQ '').NORENT                           GP03358\n&SECT    DSECT ,             REFRESHABLE (ZEROED INITIALLY)     GP03358\n.NORENT  ANOP  ,                                                GP03358\nRANDAU   DC    D'0'                                             GP03358\nRANDSAVD DC    F'0'   0/2    SAVE 14                            GP04234\nRANDSAVE DC    F'0'   1/2    SAVE 15                             *TSM*\nRANDSAV0 DC    2F'0'  2/2    SAVE 0,1                            *TSM*\n         AIF   ('&SECT' EQ '').NOREFR                           GP03358\n&MYSECT  CSECT ,             RESTORE USER'S SECTION             GP03358\n.NOREFR  ANOP  ,                                                GP03358\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "READFDR": {"ttr": 10509, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x13\"_\\x02\\x05\\x009\\x00-\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2013-08-13T02:05:00", "lines": 57, "newlines": 45, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      READFDR &TYPE,&OPERAND,&USE=                   ADDED ON 82248\n         GBLC  &MACPLAB\n.*\n.*   This macro is used for reading FDR dump tapes, in conjunction\n.*   with the @FDRREAD service routine. The current version requires\n.*   authorization to diddle the DEB.\n.*\n.*   Used by COPYFDR program, and the @OBTAINS and @VOLREAD routines.\n.*\n         LCLA  &I,&J\n&MACPLAB SETC  '&NM'\n&I       SETA  0\n         AIF   ('&TYPE' EQ 'CLOSE').CLOSE\n&I       SETA  1\n         AIF   ('&TYPE' EQ 'TCLOSE').CLOSE\n&I       SETA  2\n         AIF   ('&TYPE' EQ 'OPEN').CHKUSE\n&I       SETA  3\n         AIF   ('&TYPE' EQ 'READ').TEST1\n&I       SETA  4\n         AIF   ('&TYPE' EQ 'NEXT').TEST1\n&I       SETA  5                                                GP13222\n         AIF   ('&TYPE' EQ 'TRACK').TEST1                       GP13222\n         AIF   ('&TYPE' EQ 'RDM').TEST1                         GP13222\n&I       SETA  6                                                GP13222\n         AIF   ('&TYPE' EQ 'MORE').TEST1                        GP13222\n         AIF   ('&TYPE' EQ 'LOAD' OR '&TYPE' EQ 'INIT').INIT\n         MNOTE 8,'TYPE OPERAND REQUIRED'\n         MEXIT ,\n.INIT    ANOP  ,\n&I       SETA  &SYSNDX\n&NM      ICM   R15,7,@FDRREAD+1   PRIOR LOAD ?\n         BNZ   VLR@&I\n         SERVCALL LPALD,=CL8'@FDRREAD'\n         ST    R0,@FDRREAD\nVLR@&I   DS    0H\n         MEXIT ,\n.TEST1   AIF   (T'&OPERAND EQ 'O').CLOSE\n         AGO   .LR1\n.CHKUSE  AIF   (T'&USE EQ 'O').LOAD1\n&J       SETA  128\n         AIF   ('&USE' EQ 'VTOC').LOAD1\n&J       SETA  0\n         MNOTE 4,'INVALID USE PARAMETER &USE'\n.LOAD1   AIF   (T'&OPERAND NE 'O').LR1\n         MNOTE 8,'FUNCTION &TYPE REQUIRES AN OPERAND'\n         MEXIT ,\n.LR1     MACPARM R1,&OPERAND,NULL=0\n         AIF   (&J EQ 0).CLOSE\n         ICM   R1,8,=AL1(&J)\n.CLOSE   MACPARM R0,&I\n.BAL     ANOP  ,\n&MACPLAB L     R15,@FDRREAD\n         BASR  R14,R15\n&MACPLAB SETC  ''\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "READTMC": {"ttr": 10511, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x002\\x00*\\x00*\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T00:32:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      READTMC &FUN,&PARM,&BUFNO=,&TEST=,&EXT=NO    UPDATED ON 81173\n         GBLC  &MACPLAB\n         GBLB  &TMC@EXT                                          81173\n         LCLA  &I\n&MACPLAB SETC  '&NM'         INIT LABEL\n         AIF   ('&EXT' EQ 'NO').NTEXT                            81173\n&TMC@EXT SETB  1                                                 81173\n.NTEXT   AIF   ('&FUN' NE '').HAVEFUN                            81173\n         MNOTE 8,'***** FUNCTION REQUIRED : OPEN/CLOSE/VOL/DSN'\n         MEXIT ,\n.HAVEFUN AIF   ('&FUN' EQ 'OPEN' OR '&BUFNO' EQ '').BUFOK\n         MNOTE 0,'***** BUFNO VALID FOR ''OPEN'' ONLY; IGNORED'\n.BUFOK   AIF   ('&FUN' EQ 'CLOSE').DOC2\n&I       SETA  1\n         AIF   ('&FUN' EQ 'OPEN').DOC0\n&I       SETA  2\n         AIF   ('&FUN' EQ 'VOL').DOC0                            93025\n&I       SETA  3\n         AIF   ('&FUN' EQ 'DSN' OR '&FUN' EQ 'DSNB').DOC0\n&I       SETA  4                                                 93025\n         AIF   ('&FUN' EQ 'TMC' OR '&FUN' EQ 'RAW').DOC0         93025\n         MNOTE 8,'***** FUNCTION &FUN INVALID; USE OPEN/CLOSE/VOL/DSN'\n         MEXIT ,\n.DOC0    AIF   ('&PARM' EQ '').ZR1\n         MACPARM R1,&PARM    LOAD BUFFER ADDRESS (BXLE FOR OPEN)\n         AGO   .DOC1\n.ZR1     MACPARM R1,0        CLEAR R1 (LOCATE MODE)\n.DOC1    AIF   (&I NE 1).DOC2\n         AIF   ('&BUFNO' EQ '' OR '&BUFNO' EQ '0').DOC2\n&MACPLAB ICM   R1,8,=AL1(&BUFNO)  LOAD NO. OF BUFFERS\n&MACPLAB SETC  ''\n.DOC2    MACPARM R0,&I       SET FUNCTION CODE\n         AIF   (&TMC@EXT).DOEXT                                  81173\n&MACPLAB L     R15,=V(@TMSREAD)\n         AGO   .EXTCOM                                           81173\n.DOEXT   ANOP  ,                                                 81173\n&MACPLAB L     R15,@TMSREAD\n.EXTCOM  BALR  R14,R15                                           81173\n         AIF   ('&TEST' EQ '' OR '&TEST' EQ 'NO').MEND\n         CH    R15,=H'4'     TEST RETURN CODE\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGEQU": {"ttr": 10513, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x13\"_\\x01\\x13\"_\\x020\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2013-08-13T00:00:00", "modifydate": "2013-08-13T02:30:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         REGEQU  ,\n         GBLA  &REGS\n         AIF   (&REGS EQ 1).MEND  ONLY EXPAND ONCE\n&REGS    SETA  1             MAINTAIN IBM COMPATIBILITY\n         LCLA  &I\n.LOUPE   AIF   (&I GT 15).MEND\nR&I      EQU   &I\n&I       SETA  &I+1\n         AGO   .LOUPE\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RET31": {"ttr": 10515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x00\\x00\\x00\\x01\\x08'\\x8f\\x01\\x08'\\x8f\\x006\\x00\\r\\x00\\r\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.00", "flags": 0, "createdate": "2008-10-04T00:00:00", "modifydate": "2008-10-04T00:36:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      RET31 &RET                                     ADDED ON 90308\n.*\n.*       THE MACRO NAME NOT-WITHSTANDING, THIS MACRO RETURNS WITH\n.*       A BSM (IN XA) REGARDLESS OF CURRENT OR NEW MODE\n.*\n         GBLB  &MVSXA\n         AIF   (&MVSXA).BSM\n&NM      MACPARM &RET,OP=BR,OPR=BR,MODE=ONE\n         MEXIT ,\n.BSM     ANOP  ,\n&NM      MACPARM 0,&RET,OP=BSM,OPR=BSM\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RMODE": {"ttr": 10517, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x041O\\x01\\x041O!\\x01\\x00\\x04\\x00\\x04\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2004-11-09T00:00:00", "modifydate": "2004-11-09T21:01:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n         RMODE ,\n.*   DUMMY MACRO CREATED TO SUPPORT ASSEMBLY UNDFER HERCULES (XF ASM)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RP": {"ttr": 10519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00D\\x01\\x00!\\x8f\\x01\\x00!\\x8f\\x13\\x07\\x00\\x05\\x00\\x05\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-05T00:00:00", "modifydate": "2000-08-05T13:07:44", "lines": 5, "newlines": 5, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      RP    &OP\n.*   PROVIDED TO ASSEMBLE OS/390 CODE UNDER OLDER SYSTEMS\n&NM      DC    0H'0',X'B277',S(&OP)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RSECT": {"ttr": 10521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x041/\\x01\\x041O!\\x01\\x00\\x04\\x00\\r\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2004-11-07T00:00:00", "modifydate": "2004-11-09T21:01:00", "lines": 4, "newlines": 13, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      RSECT ,             HERCULES SUPPORT             ADDED GP04234\n&NM      CSECT ,\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAC": {"ttr": 10754, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x043\\x1f\\x01\\x043\\x1f\\x01\\x16\\x00\\x07\\x00\\t\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2004-11-26T00:00:00", "modifydate": "2004-11-26T01:16:00", "lines": 7, "newlines": 9, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SAC   &R                                       ADDED ON 04234\n.*\n.*    HERCULES MVS 3.8 SUPPORT\n.*\n&NM      MACPARM MODE=LBL\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAVEM": {"ttr": 10756, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x05_\\x01\\x10\\x18\\x0f\\x03\\x12\\x01\\xfe\\x01\\xfc\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-02-24T00:00:00", "modifydate": "2010-06-29T03:12:00", "lines": 510, "newlines": 508, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO ,\n&L       SAVEM &DUMMY,&PFX=SAVE,&END=,&ENDZERO=,&DSECT=,&PARM=R11,     *\n               &SAVE=*,                                          81208 *\n               &BASE=R12,&BASE2=,&BASE3=,&BASE4=,&BASED=*,             *\n               &EID=SHORT,&ENTRY=,&ENTNO=,                             *\n               &RIGHT=,                                                *\n               &ID=*,&DATE=,&SP=0,&BNDRY=                        82002\n.**********************************************************************\n.*\n.*             COPYRIGHT 1978 BY SHMUEL (SEYMOUR J.) METZ\n.*                        ALL RIGHTS RESERVED.\n.*\n.*             THIS MACRO IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION,\n.*             AS DESCRIBED IN MEMBER $$RIGHTS.\n.*\n.*       FOR SIMPLE ENTRIES, PARM=R1 NOW RELOADS R0 AND R1       87223\n.*       BASE=(B1,B2,B3,B4) SUPPORT ADDED (EASIER TO USE?)       87223\n.*                                                               87223\n.**********************************************************************\n         COPY  OPTIONGB\n         GBLB  &DROP@1                                           81163\n         GBLB  &MAPONCE\n         GBLB  &SAV@REG\n         GBLB  &SAV@DYN(10)\n         GBLC  &SAV@NAM(10)\n         GBLC  &MACPLAB                                          81154\n         GBLC  &SYSSPLV      VERSION OF SP (1, 2...)             93174\n         LCLA  &I,&J,&N,&NUMENT\n         LCLB  &BWOPT,&Y           BIGWORK  OPTION\n         LCLB  &HWOPT              HUGEWORK OPTION ( > 32767 )   84307\n         LCLB  &CME                BASED/ENTRY PRESENT           81163\n         LCLB  &CPYREGS            CPYREGS  OPTION\n         LCLB  &DSOPT              NODSECT  OPTION\n         LCLB  &EQUOPT             NOEQU    OPTION\n         LCLB  &NOENTRY            NOENTRY  OPTION\n         LCLB  &NOSAVE             NOSAVE   OPTION\n         LCLB  &NWOPT              NOWORK   OPTION\n         LCLB  &OLDSAVE            OLDSAVE  OPTION\n         LCLB  &BUMASM             ASM DOESN'T SUPPORT LONG SETC\n         LCLB  &BZOPT              ZERO > 256\n         LCLB  &NOT1ST             NOT FIRST USE OF &PFX\n         LCLB  &ZERO               ZERO     OPTION\n         LCLB  &ZERO8              ZERO     <= 256               81202\n         LCLB  &ZERO12             ZERO     >  256               81202\n         LCLB  &ZERO15             ZERO     > 4095               81208\n         LCLB  &ZERO31             ZERO     > 32767              84307\n         LCLC  &B@                 GENERATED LABEL FOR B TARGET\n         LCLC  &CMB                COMMON BASE NAME              81163\n         LCLC  &CMU                BASE REG. STRING FOR USING    81163\n         LCLC  &C9                 TEST FOR LONG SETC SUPPORT\n         LCLC  &DSCTG              DSECT NAME                    81208\n         LCLC  &ENDG               END LABEL FOR GETMAINED AREA  81208\n         LCLC  &ENDZ               END OF ZEROED AREA            81208\n         LCLC  &LAB                LABEL FOR ENTRY POINT\n         LCLC  &LQ                 L'\n         LCLC  &N@                 GENERATED NAME FOR DC\n         LCLC  &SECT               CSECT NAME\n         LCLC  &SP@                SUBPOOL FOR GETMAIN\n         LCLC  &NAME               NAME FOR CONSTRUCTED ID\n         LCLC  &SV                 SAVE AREA PREFIX              81208\n         LCLC  &BEGZ         WHERE TO START ZEROING (FWD DEFAULT)\n         LCLC  &PARMEXP\n         LCLC  &PARMREG\n         LCLC  &CASE,&CASE2,&CASE3,&CASE4   LOCAL BASES          87223\n       SYSPARM ,                   SET GLOBALS\n&C9      SETC  '*********'\n&SECT    SETC  '&SYSECT'\n&SV      SETC  '&PFX'\n&DSCTG   SETC  '&PFX'\n&ENDG    SETC  '&PFX'.'ND'\n&BEGZ    SETC  '&PFX'.'FWD'        ZERO BEGINNING AT FWD LINK    94272\n.*\n         AIF   ('&C9' EQ '*********').ASMVS\n         MNOTE 4,'USE THE OS/VS-DOS/VS-CMS ASSEMBLER,'\n         MNOTE 4,'OR USE ASMG WITH LSETC=80'\n&BUMASM  SETB  1\n.*\n.ASMVS   AIF   ('&DSECT' EQ '').DSGOK\n&DSCTG   SETC  '&DSECT'\n.DSGOK   AIF   ('&END' EQ '').ENDGOK\n&ENDG    SETC  '&END'\n.ENDGOK  ANOP\n.*\n&N       SETA  1\n.NXTSLOT ANOP\n&NOT1ST  SETB  (&NOT1ST OR ('&PFX' EQ '&SAV@NAM(&N)'))\n         AIF   (&NOT1ST).FND1ST\n         AIF   ('&SAV@NAM(&N)' EQ '').FNDSLOT\n&N       SETA  &N+1\n         AIF   (&N LE 10).NXTSLOT\n         MNOTE 12,'TOO MANY SAVEM DSECTS'\n         MEXIT\n.FNDSLOT ANOP\n&SAV@NAM(&N) SETC '&PFX'\n.*\n.FND1ST  AIF   ('&SYSECT' EQ '' AND T'&L EQ 'O').NOL\n&I       SETA  1\n         AIF   (N'&SYSLIST EQ 0).ENDOPT\n.*\n.LOOP    AIF   ('&SYSLIST(&I)' EQ 'CPYREGS').CPYREGS\n         AIF   ('&SYSLIST(&I)' EQ 'COPYREGS').CPYREGS            81154\n         AIF   ('&SYSLIST(&I)' EQ 'COPYREGISTERS').CPYREGS\n         AIF   ('&SYSLIST(&I)' EQ 'NODSECT').NODSECT\n         AIF   ('&SYSLIST(&I)' EQ 'NOEQU').NOEQU\n         AIF   ('&SYSLIST(&I)' EQ 'BIGWORK').BIGWORK\n         AIF   ('&SYSLIST(&I)' EQ 'HUGEWORK').HUGWORK            84307\n         AIF   ('&SYSLIST(&I)' EQ 'BIGZERO').BIGZERO\n         AIF   ('&SYSLIST(&I)' EQ 'HUGEZERO').ZERO31             84307\n         AIF   ('&SYSLIST(&I)' EQ 'NOWORK').NOWORK\n         AIF   ('&SYSLIST(&I)' EQ 'NOSAVE').NOSAVE1\n         AIF   ('&SYSLIST(&I)' EQ 'OLDSAVE').OLDSAVE\n         AIF   ('&SYSLIST(&I)' EQ 'NOENTRY').NOENTRY\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO').ZERO\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO8').ZERO8                 81208\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO12').ZERO12               81208\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO15').ZERO15               81208\n         AIF   ('&SYSLIST(&I)' EQ 'ZERO31').ZERO31               84307\n         AIF   ('&SYSLIST(&I)' EQ '').NXTOPT\n         MNOTE 4,'''&SYSLIST(&I)'' IS AN INVALID OPTION - IGNORED'\n         AGO   .NXTOPT\n.*\n.NOL     MNOTE 12,'LABEL REQUIRED IF  NO  CSECT'\n         MEXIT\n.*\n.CPYREGS ANOP\n&CPYREGS SETB  1\n         AGO   .NXTOPT\n.NODSECT ANOP\n&DSOPT   SETB  1\n         AGO   .NXTOPT\n.NOEQU   ANOP\n&EQUOPT  SETB  1\n         AGO   .NXTOPT\n.HUGWORK ANOP  ,                                                 84307\n&HWOPT   SETB  1             SET FOR HUGE WORK AREA              84307\n.BIGWORK ANOP\n&BWOPT   SETB  1\n&BZOPT   SETB  1\n         AGO   .NXTOPT\n.NOWORK  ANOP\n&NWOPT   SETB  1\n         AGO   .NXTOPT\n.NOSAVE1 ANOP\n&NOSAVE  SETB  1\n         AGO   .NXTOPT\n.OLDSAVE ANOP\n&OLDSAVE SETB  1\n         AGO   .NXTOPT\n.NOENTRY ANOP\n&NOENTRY SETB  1\n         AGO   .NXTOPT\n.*                                                               81208\n.ZERO8   ANOP  ,                                                 81208\n&ZERO8   SETB  1                                                 81208\n         AGO   .ZERO                                             81208\n.ZERO12  ANOP  ,                                                 81208\n&ZERO12  SETB  1                                                 81218\n         AGO   .ZERO                                             81208\n.ZERO31  ANOP  ,                                                 84307\n&HWOPT   SETB  1             HUGE WORK AREA > 32767              84307\n&ZERO31  SETB  1                                                 84307\n.ZERO15  ANOP  ,                                                 81208\n&ZERO15  SETB  1                                                 81208\n&BWOPT   SETB  1                                                 81218\n         AGO   .ZERO                                             81208\n.BIGZERO ANOP\n&BZOPT   SETB  1                                                 81202\n.ZERO    ANOP\n&ZERO    SETB  1\n.NXTOPT  ANOP\n&I       SETA  &I+1\n         AIF   (&I LE N'&SYSLIST).LOOP\n.ENDOPT  AIF   (&ZERO8 OR &ZERO12 OR &ZERO15).GOTZERO            81208\n&ZERO31  SETB  (&ZERO AND &HWOPT)                                84307\n&ZERO15  SETB  (&ZERO AND &BWOPT)                                81208\n&ZERO12  SETB  (&BZOPT AND NOT &ZERO15)                          81208\n&ZERO8   SETB  (&ZERO AND NOT &ZERO12 AND NOT &ZERO15)           81202\n.GOTZERO AIF   (T'&L EQ 'O').CSECTOK                             81208\n         AIF   ('&SYSECT' EQ '' OR '&L' EQ '&SYSECT').LABOK      81202\n&LAB     SETC  '&L'\n         AIF   (&NOENTRY).LABOK\n         ENTRY &L\n.LABOK   AIF   ('&SYSECT' NE '').CSECTOK\n.*\n&L       CSECT\n&SECT    SETC  '&L'\n.CSECTOK AIF   (T'&BASED EQ 'O' AND T'&ENTRY EQ 'O').NOCLAB      81163\n         AIF   (T'&ENTRY NE 'O').DOCLAB                          81163\n         AIF   ('&BASED' EQ '*').NOCLAB                          81163\n.DOCLAB  ANOP  ,                                                 81163\n&CME     SETB  1             SET SPECIAL BASE PROCESSING         81163\n.NOCLAB  AIF   ('&LAB' NE '').OKCLAB                             81163\n&LAB     SETC  'A@&SYSNDX'                                       81163\n.OKCLAB  ANOP  ,                                                 81163\n&CMB     SETC  '&LAB'        DEFAULT BASED VALUE                 81163\n         AIF   (T'&BASED EQ 'O').CLABOK                          81163\n         AIF   ('&BASED' EQ '*').CLABOK                          81163\n         AIF   ('&BASED' NE '*SYSECT').CLABSET                   81163\n         AIF   ('&SYSECT' EQ '').CLABOK   BOO                    81163\n&CMB     SETC  '&SYSECT'                                         81163\n         AGO   .CLABOK                                           81163\n.CLABSET ANOP  ,                                                 81163\n&CMB     SETC  '&BASED'                                          81163\n.CLABOK  ANOP  ,                                                 81163\n&CMU     SETC  'R15'         DEFAULT BASE REGISTER ON USING      81163\n&SAV@DYN(&N) SETB (NOT &NOSAVE)\n&PARMEXP SETC  '(R1)'\n&PARMREG SETC  '1'\n         AIF   ('&PARM' EQ '').PARM1\n         AIF   (N'&PARM LT 2).PARM1\n&PARMEXP SETC  '&PARM(2)'\n         AIF   (NOT &OLDSAVE).PARM1\n&PARMREG SETC  '&PARM(2)'\n         AIF   ('&PARMEXP'(1,1) EQ '(').STRIP\n         MNOTE 8,'PARM=&PARM INVALID'\n         MNOTE 8,'PARM=(&PARM(1),(&PARM(2)) ASSUMED'\n         AGO   .STRIPT\n.STRIP   AIF   ('&PARMEXP'(K'&PARMEXP,1) EQ ')').STRIP1\n         MNOTE 12,'PARM=&PARM INVALID'\n         MEXIT ,\n.STRIP1  ANOP  ,\n&PARMREG SETC  '&PARMREG'(2,K'&PARMREG-2)\n.STRIPT  AIF   ('&PARMREG'(1,1) GE '0').PARM1\n&PARMREG SETC  '&PARMREG'(2,K'&PARMREG-1)\n.PARM1   AIF   (NOT &DROP@1).NODROP                              81163\n         DROP  ,                                                 81163\n.NODROP  ANOP  ,                                                 81163\n&DROP@1  SETB  1                                                 81163\n         AIF   (T'&BASE EQ 'O').OLDBASE                          87223\n         AIF   (N'&BASE LT 2).OLDBASE                            87223\n AIF (T'&BASE2 EQ 'O' AND T'&BASE3 EQ 'O' AND T'&BASE4 EQ 'O').NEWBASE\n         MNOTE 8,'CONFLICTING SPECIFICATION: BASE=(.,.) AND BASEn='\n.NEWBASE ANOP  ,                                                 87223\n&CASE    SETC  '&BASE(1)'                                        87223\n&CASE2   SETC  '&BASE(2)'                                        87223\n&CASE3   SETC  '&BASE(3)'                                        87223\n&CASE4   SETC  '&BASE(4)'                                        87223\n         AIF   (N'&BASE LT 5).COMBASE                            87223\n         MNOTE 0,'ONLY FOUR BASES SUPPORTED'                     87223\n         AGO   .COMBASE      BOMB ON ADDRESSABILITY ?            87223\n.OLDBASE ANOP  ,                                                 87223\n&CASE    SETC  '&BASE(1)'                                        87223\n&CASE2   SETC  '&BASE2'                                          87223\n&CASE3   SETC  '&BASE3'                                          87223\n&CASE4   SETC  '&BASE4'                                          87223\n.COMBASE AIF   ('&CASE4' NE '').FORBASE                          87223\n         AIF   ('&CASE3' NE '').THRBASE                          87223\n         AIF   ('&CASE2' NE '').TWOBASE                          87223\n         AIF   ('&CASE' NE '').ONEBASE                           87223\n.NOBASE  AIF   (T'&ENTRY NE 'O').NOBASEU                         81163\n         DS    0H\n         USING *,R15                                             81163\n.NOBASEU ANOP  ,                                                 81163\n&CMU     SETC  'R15'                                             81163\n         AGO   .BASED\n.FORBASE AIF   ('&CASE3' EQ '').GAP43                            87223\n         AIF   ('&CASE2' EQ '').GAP42                            87223\n         AIF   ('&CASE' EQ '').GAP41                             87223\n&CMU     SETC  '&CASE'.','.'&CASE2'.','.'&CASE3'.','.'&CASE4'    87223\n         AGO   .BASED\n.GAP43   MNOTE 12,'BASE3 REQUIRED WHEN BASE4 SPECIFIED'\n         AIF   ('&CASE2' NE '').GAP41T                           87223\n.GAP42   MNOTE 12,'BASE2 REQUIRED WHEN BASE4 SPECIFIED'\n.GAP41T  AIF   ('&CASE' NE '').NOBASE                            87223\n.GAP41   MNOTE 12,'BASE REQUIRED WHEN BASE4 SPECIFIED'\n         AGO   .NOBASE\n.THRBASE AIF   ('&CASE2' EQ '').GAP32                            87223\n         AIF   ('&CASE' EQ '').GAP31                             87223\n&CMU     SETC  '&CASE'.','.'&CASE2'.','.'&CASE3'                 87223\n         AGO   .BASED\n.GAP32   MNOTE 12,'BASE2 REQUIRED WHEN BASE3 SPECIFIED'\n         AIF   ('&CASE' NE '').NOBASE                            87223\n.GAP31   MNOTE 12,'BASE REQUIRED WHEN BASE3 SPECIFIED'\n         AGO   .NOBASE\n.TWOBASE AIF   ('&CASE' EQ '').GAP21                             87223\n&CMU     SETC  '&CASE'.','.'&CASE2'                              87223\n         AGO   .BASED\n.GAP21   MNOTE 12,'BASE REQUIRED WHEN BASE2 SPECIFIED'\n         AGO   .NOBASE\n.ONEBASE ANOP  ,                                                 81163\n&CMU     SETC  '&CASE'                                           87223\n.BASED   USING &DSCTG,R13\n&B@      SETC  'B@&SYSNDX'\n&N@      SETC  'N@&SYSNDX'\n&LQ      SETC  'L'''\n&LAB     B     &B@-*(,R15)\n         DC    AL1(&LQ&N@)\n         AIF   ('&ID' NE '*').USEID\n&NAME    SETC  '&L'\n         AIF   (T'&L NE 'O').USENAME\n&NAME    SETC  '&SYSECT'\n.USENAME AIF   ('&RIGHT' EQ '').NORIGHT\n&NAME    SETC  '&NAME'.' '.'COPYRIGHT '.'&RIGHT'\n.NORIGHT AIF   ('&DATE' EQ 'NO' OR &BUMASM).NODATE\n&N@      DC    C'&NAME - &SYSDATE - &SYSTIME'\n         AGO   .NAMEOK\n.NODATE  ANOP\n&N@      DC    C'&NAME'\n         AGO   .NAMEOK\n.USEID   ANOP\n         AIF   ('&ID'(1,1) NE '''').USEIDQ\n&N@      DC    C&ID\n         AGO   .NAMEOK\n.USEIDQ  ANOP\n&N@      DC    C'&ID'\n.NAMEOK  AIF   (T'&ENTRY EQ 'O').NOENTR                          81163\n&I       SETA  0                                                 81163\n&J       SETA  N'&ENTRY                                          81163\n&N@      SETC  ''            SHORT ID                            81163\n         AIF   ('&EID' EQ 'SHORT').ENTRSH                        81163\n&N@      SETC  ' - '.'&SYSDATE'.' - '.'&SYSTIME'                 81163\n.ENTRSH  AIF   (&I GE &J).ENTRDN                                 81163\n&I       SETA  &I+1                                              81163\n&C9      SETC  '&ENTRY(&I)'                                      81163\n         AIF   (&NOENTRY).ENTRNN                                 81347\n         ENTRY &C9                                               81163\n.ENTRNN  AIF   (T'&ENTNO EQ 'O').ENTRNM                          88255\n&NUMENT  SETA  &NUMENT+1     INCREASE ENTRY NUMBER               88255\n         DC    Y(&NUMENT)    MAKE ENTRY PREFIX                   88255\n.ENTRNM  ANOP  ,                                                 88255\n&C9      B     &B@-*(,R15)                                       81163\n         AIF   ('&EID' EQ 'NONE' OR '&EID' EQ 'NO').ENTRSH      GP99062\n&N       SETA  K'&N@+K'&C9                                       81163\n&N       SETA  ((&N/2)*2)+1  MAKE ODD LENGTH FOR ALIGNMENT       81163\n         DC    AL1(&N),CL(&N)'&ENTRY(&I)&N@'                     81163\n         AGO   .ENTRSH                                           81163\n.ENTRDN  AIF   (T'&ENTNO EQ 'O').ENTRDM                          88255\n         DC    Y(0)          SET ENTRY PREFIX =0 (MAIN)          88255\n.ENTRDM  AIF   (&OLDSAVE).ELDSV                                  81163\n&B@      SAVEX R14,R12,&SV.14,TYPE=STM                           81203\n&B@      SETC  ''                                                81163\n.ELDSV   AIF   ('&CASE' EQ '').ELDSVLR                           87223\n         AIF   ('&BASED' NE '*').ELDSVLR                         81263\n&B@      BASR  &CASE,0                                           93006\n         LA    R15,*-&CMB                                        81263\n         SLR   &CASE,R15                                         87223\n         AGO   .COMBAS2                                          81263\n.ELDSVLR ANOP  ,                                                 81263\n&B@      BASR  R15,0                                             93006\n         USING *,R15                                             81163\n         AIF   ('&CASE' EQ '').NOBASE2                           87223\n         L     &CASE,=A(&CMB)                                    87223\n         DROP  R15                                               81163\n         AGO   .COMBAS2                                          81163\n.NOENTR  AIF   (&OLDSAVE).OLDSV                                  81163\n&B@      SAVEX R14,R12,&SV.14,TYPE=STM                           81203\n&B@      SETC  ''\n.OLDSV   AIF   ('&CASE' EQ '').NOBASE2                           87223\n         AIF   (&CME).BASEL                                      81163\n&B@      LR    &CASE,R15                                         87223\n         AGO   .COMBAS2                                          81163\n.BASEL   USING &LAB,R15                                          81163\n&B@      L     &CASE,=A(&CMB)                                    87223\n         DROP  R15                                               81163\n.COMBAS2 AIF   ('&CASE2' EQ '').NOBASE2                          87223\n         AIF   ('&CASE3' EQ '').NOBASE3                          87223\n         AIF   ('&CASE4' EQ '').NOBASE4                          87223\n         LA    &CASE4,2048                                       87223\n         LA    &CASE2,2048(&CASE4,&CASE)                         87223\n         LA    &CASE3,2048(&CASE4,&CASE2)                        87223\n         LA    &CASE4,2048(&CASE4,&CASE3)                        87223\n         AGO   .NOBASE2\n.NOBASE4 LA    &CASE3,2048                                       87223\n         LA    &CASE2,2048(&CASE3,&CASE)\n         LA    &CASE3,2048(&CASE3,&CASE2)                        87223\n         AGO   .NOBASE2\n.NOBASE3 LA    &CASE2,4095                                       87223\n         LA    &CASE2,1(&CASE2,&CASE)                            87223\n.NOBASE2 AIF   (NOT &OLDSAVE).NOLDSV\n         L     R15,&SV.13\n         ST    &CASE,&SV.15-&DSCTG.(,R15)                        87223\n         AIF   ('&PARM' EQ '').NOLDSV1\n         L     &PARM(1),&SV.&PARMREG-&DSCTG.(,R15)\n         AGO   .NOLDSV1\n.NOLDSV  AIF   (&NOSAVE).NOLDSV1\n         AIF   ('&PARM' EQ '').NOPARM\n         AIF   ('&PARM' EQ '1' OR '&PARM' EQ 'R1').NOPARM        87223\n&MACPLAB SETC  ''                                                81154\n         MACPARM &PARM(1),&PARMEXP                               81154\n.*\n.NOPARM  AIF   ('&CASE' EQ '').NOUSEB                            87223\n         USING &CMB,&CMU                                         81163\n.NOUSEB  AIF   ('&SAVE' NE '*').LA                               81163\n         AIF   (NOT &HWOPT).LYLEN                                84307\n         L     R14,=A(&ENDG-&DSCTG)                              84307\n         AGO   .NOLA                                             84307\n.LYLEN   AIF   (NOT &BWOPT).LALEN                                84307\n         LH    R14,=Y(&ENDG-&DSCTG)\n         AGO   .NOLA\n.LA      LA    R1,&SAVE\n         SLR   R15,R15\n         AGO   .NOGM\n.LALEN   LA    R14,&ENDG-&DSCTG\n.*             NOTE THAT R15 IS DESTROYED (OS/VS2) BY RMAIN\n.NOLA    AIF   (&MVSXA OR '&SYSSPLV' GT '1').DOXA                93174\n         AIF   ('&BNDRY' NE 'PAGE').GMDBLWD                      82002\n         AIF   (NOT &MVS).SOLA                                   82002\n.DOXA    LR    R0,R14        COPY LENGTH                         82002\n         SLR   R1,R1         CLEAR FREEMAIN ADDRESS              82002\n&Y       SETB  ('&BNDRY' EQ 'PAGE')                              93174\n         LA    R15,2+4*&Y    UNCONDITIONAL GETMAIN(PAGE BNDRY)   93174\n         AIF   ('&SP' EQ '0').POLA                               82002\n         ICM   R15,2,=AL1(&SP)                                   82002\n.POLA    SVC   120           GET PAGE ALIGNED STORAGE            82002\n         ST    R14,&SV.SPLN-&DSCTG.(R1)                          82002\n         AIF   ('&SP' EQ '0').NOGM                               82002\n         MVI   &SV.SPLN-&DSCTG.(R1),&SP                          82002\n         AGO   .NOGM                                             82002\n.*       FOR NON-MVS SYSTEMS, PAGE ALIGNMENT IS ATTEMPTED, BUT   82002\n.*       NOT GUARANTEED BY DOING THE GETMAIN IN A 4K CHUNK IN A  82002\n.*       NON-ZERO SUB-POOL.  MVT/MFT NOT SUPPORTED.              82002\n.SOLA    LA    R14,4095(,R14)                                    82002\n         SRL   R14,12                                            82002\n         SLL   R14,12                                            82002\n         AIF   ('&SP' NE '0').GMDBLWD                            82002\n         ICM   R14,8,=AL1(10)                                    82002\n         AGO   .GM                                               82002\n.GMDBLWD AIF   ('&SP' EQ '0').GM                                 82002\n         AIF   ('&MODEL' EQ '360').GM360\n.GMICM   ICM   R14,8,=AL1(&SP)                                   82002\n.GM    GETMAIN R,LV=(R14)\n         AGO   .GMCOM\n.GM360 GETMAIN R,SP=(&SP),LV=(R14)\n         ST    R14,&SV.SPLN-&DSCTG.(R1)                          82002\n         MVI   &SV.SPLN-&DSCTG.(R1),&SP                          82002\n         AGO   .NOGM                                             82002\n.GMCOM   ST    R14,&SV.SPLN-&DSCTG.(R1)\n.NOGM    ST    R1,&SV.FWD\n         ST    R13,&SV.13-&DSCTG.(R1)\n         AIF   (NOT &CPYREGS).LR13\n         MVC   &SV.14-&DSCTG.(&SV.12+4-&SV.14,R1),&SV.14         81151\n&BEGZ    SETC  '&PFX'.'FWK'  CLEAR ONLY AFTER REGISTERS          94272\n         AIF   (NOT &ZERO).LR13                                  94272\n         XC    &SV.FWD-&DSCTG.(&SV.14-&SV.FWD,R1),&SV.FWD-&DSCTG.(R1)\n.LR13    LR    R13,R1\n&ENDZ    SETC  '&ENDG'             DEFAULT END OF CLEAR          81208\n         AIF   (T'&ENDZERO EQ 'O').CLRDFLT                       81209\n&ENDZ    SETC  '&ENDZERO'                                        81208\n&ZERO    SETB  1                                                 81208\n&ZERO15  SETB  (NOT &ZERO8 AND NOT &ZERO12)                      81208\n.CLRDFLT AIF   (NOT &ZERO).NOLDSV1                               81208\n         AIF   (&ZERO8).XC                                       81202\n         AIF   ('&MODEL' NE '360').MVCL\n         LA    R0,(&ENDG-&BEGZ)/256-1 ASM ERROR IF LEN<256       94272\n         ORG   *-4\n         LA    R0,(&ENDG-&BEGZ)/256   NUMBER OF SEGMENTS TO ZERO 94272\n         LA    R1,&BEGZ      ZERO WORK AREA                      94272\n         LA    R15,&ENDG-&BEGZ-(&ENDG-&BEGZ)/256*256             94272\n         XC    0(256,R1),0(R1)          ZERO WORK AREA SEGMENT\n         LA    R1,256(,R1)\n         BCT   R0,*-10\n         SH    R15,=H'1'\n         BM    *+14\n         EX    R15,*+4                  ZERO PARTIAL SEGMENT\n         XC    0(0,R1),0(R1)            EXECUTED TO ZERO WORK AREA\n         AGO   .NOLDSV1\n.XC      XC    &BEGZ.(&ENDG-&BEGZ),&BEGZ                         94272\n         AGO   .NOLDSV1\n.MVCL    LA    R0,&BEGZ      ZERO WORK AREA                      94272\n         AIF   (NOT &ZERO31).ZEROLY                              84307\n         L     R1,=A(&ENDG-&BEGZ)                                94272\n         AGO   .XR15                                             84307\n.ZEROLY  AIF   (&ZERO12).ZEROLA                                  84307\n         LH    R1,=Y(&ENDG-&BEGZ)                                94272\n         AGO   .XR15                                             81202\n.ZEROLA  LA    R1,&ENDG-&BEGZ                                    94272\n.XR15    SLR   R15,R15                                           81202\n         MVCL  R0,R14\n.NOLDSV1 AIF   (T'&ENTRY EQ 'O' OR T'&ENTNO EQ 'O').NOLDENT      88255\n         L     R1,&SV.13     GET OLD SAVE AREA BACK              88255\n         CLM   &CASE,7,&SV.15+1-&DSCTG.(R1)  MAIN ENTRY ?        88255\n         BE    *+16          YES; DON'T MOVE                     88255\n         L     R1,&SV.15-&DSCTG.(,R1) GET ENTRY ADDRESS BACK     88255\n         BCTR  R1,0          SPACE TO ENTRY COUNTER              88255\n         MVC   &ENTNO+L'&ENTNO-1(1),0(R1) COPY COUNT             88255\n.NOLDENT AIF   ('&PARM' NE '1' AND '&PARM' NE 'R1').NOPARM1      87223\n         L     R1,&SV.13     OLD SAVE AREA                       87223\n         LM    R0,R1,&SV.0-&DSCTG.(R1)  RESTORE ENTRY REGISTERS  94272\n.NOPARM1 AIF   (&NOT1ST).END\n         AIF   (&DSOPT).DSOPT\n&DSCTG   DSECT\n&SV.SPLN DS    F\n&SV.13   DS    F\n&SV.FWD  DS    A\n&SV.14   DS    A\n&SV.15   DS    A\n&SV.0    DS    A\n&SV.1    DS    A\n&SV.2    DS    A\n&SV.3    DS    A\n&SV.4    DS    A\n&SV.5    DS    A\n&SV.6    DS    A\n&SV.7    DS    A\n&SV.8    DS    A\n&SV.9    DS    A\n&SV.10   DS    A\n&SV.11   DS    A\n&SV.12   DS    A\n&SV.FWK  EQU   *                                                 94272\n         AIF   (NOT &NWOPT).NOEND\n&ENDG    EQU   *\n.NOEND   ANOP\n&SECT   CSECT\n.DSOPT   AIF   (&EQUOPT OR &MAPONCE OR &SAV@REG).END\n&MAPONCE SETB  1\n&SAV@REG SETB  1\n         REGEQU ,\n         MASKEQU ,                                               87223\n.END     MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAVEX": {"ttr": 10765, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x982/\\x01\\x044/\\x15F\\x00+\\x00\\x17\\x00\\x19\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1998-11-18T00:00:00", "modifydate": "2004-12-07T15:46:00", "lines": 43, "newlines": 23, "modlines": 25, "user": "GERHARD"}, "text": "         MACRO ,\n&L       SAVEX &R1,&R3,&LOC,&TYPE=*,&SETAM=,&WORK=R14           GP99018\n         GBLB  &ZZSVBSM,&MVSESA\n         LCLC  &NM\n&NM      SETC  '&L'\n.*\n.*             COPYRIGHT 1981 BY EXPERT SYSTEMS PROGRAMMING INC.\n.*                               347 ORCHARD STREET\n.*                               VIENNA, VIRGINIA   22180\n.*\n.*                        ALL RIGHTS RESERVED.\n.*\n.*             THIS MACRO IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION,\n.*             AS DESCRIBED IN MEMBER $$RIGHTS.\n.*\n.*       CODE ADDED TO PRESERVE CALLER'S AMODE AND OPTIONALLY SET AMODE\n.*                                                              GP99018\n         AIF   ('&TYPE' EQ 'BSM').BSM                           GP98322\n         AIF   ('&TYPE' EQ 'STM').STM\n         MNOTE 8,'SAVEX: TYPE=&TYPE UNKNOWN - TYPE=STM ASSUMED'\n         AGO   .STM\n.BSM     ANOP  ,                                                GP98322\n&ZZSVBSM SETB  1             SET FLAG FOR ENDM\n&NM      BSM   R14,0         GET CALLER'S AMODE                 GP98322\n&NM      SETC  ''            DONE WITH LABEL\n.STM     ANOP  ,\n&NM      STM   &R1,&R3,&LOC\n&NM      SETC  ''            DONE WITH LABEL\n         AIF   ('&SETAM' EQ '' OR '&SETAM' EQ 'ANY').MEND       GP04234\n         AIF   (NOT &MVSESA).MEND                               GP04234\n         BASR  R14,0                                            GP04050\n         USING *,R14                                            GP04050\n         LA    &WORK,ZZSV&SYSNDX                                GP99018\n         AIF   ('&SETAM' EQ '24' OR '&SETAM' EQ 'AM24').SETCM   GP99018\n         LA    R0,1                                             GP99018\n         SLL   R0,31         MAKE 80000000                      GP99018\n         OR    &WORK,R0                                         GP99018\n         AIF   ('&SETAM' EQ '31' OR '&SETAM' EQ 'AM31').SETCM   GP99018\n   MNOTE 8,'SAVEX: UNSUPPORTED SETAM VALUE: &SETAM - AM31 ASSUMED'\n.SETCM   BSM   0,&WORK       CHANGE TO REQUIRED MODE            GP99018\n         DROP  R14                                              GP04050\nZZSV&SYSNDX DS 0H                                               GP99018\n.MEND    MEND  ,                                                GP99018\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCBILD": {"ttr": 10767, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x120O\\x01\\x120O\\x15!\\x00\\x0e\\x00\\x0f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2012-10-30T00:00:00", "modifydate": "2012-10-30T15:21:00", "lines": 14, "newlines": 15, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                       ADDED ON GP12304\n&NM      SCBILD &OP,&LIST,&FILL  BUILD A SCREEN ADDRESS LIST AND\n&NM      MACPARM R1,&OP,NULL=SKIP  LOAD FDW LIST ADDRESS\n.*   THIS MACRO BUILD AN ADDRESS LIST AND MATCHING DATA ARRAY IN\n.*   PREVIOUSLY ALLOCATED STORAGE (EXW@STOR), FOR USE BY SCLINE.\n.*   LIST DATA ARE COPIED AS SUPPLIED; FILL IS REPEATED FOR REMAINDER.\n         MACPARM R15,&LIST,NULL=0  LOAD LIST ADDRESS\n         MACPARM R15,0(,R1),OP=ST    SET LIST ADDRESS INTO FDWFDA\n         MACPARM R15,&FILL,NULL=0  LOAD FILLER ADDRESS\n         MACPARM R15,12(,R1),OP=ST   SET IT ADDRESS INTO FDWSCAN\n         MACPARM R15,EXWASCRN,OP=L LOAD SCREEN SERVICE ROUTINE\n         L     R15,80(,R15)  LOAD ADDRESS OF ROUTINE\n         BASR  R14,R15       CALL IT\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRANAL": {"ttr": 11009, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRANAL &FDW,&DEV=\n&NM      SCRCOM 0,0,5,,&FDW,DEV=&DEV  EXPAND REQUEST\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRCLOSE": {"ttr": 11011, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRCLOSE &TYPE,&DEV=\n         LCLA  &FN\n         AIF   ('&TYPE' EQ '').COMM\n         AIF   ('&TYPE' EQ 'TCLOSE' OR '&TYPE' EQ 'SPIN').SET1\n         MNOTE 4,'*** UNRECOGNIZED TYPE &TYPE'\n.SET1    ANOP  ,\n&FN      SETA  1             SET TCLOSE FUNCTION\n.COMM    ANOP  ,\n&NM      SCRCOM 0,0,&FN,DEV=&DEV  EXPAND REQUEST\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRCOM": {"ttr": 11013, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x006\\x00B\\x00=\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T00:36:00", "lines": 66, "newlines": 61, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      SCRCOM &B0,&B1,&FN,&A0,&A1,&DEV=\n         GBLC  &MACPLAB,&SCRMODE\n.**********************************************************************\n.*                                                                   **\n.*   TSO INTERFACE TO @SCREENS FULL-SCREEN FORMATTING & I/O ROUTINE  **\n.*                                                                   **\n.**********************************************************************\n         LCLA  &I,&J,&K,&VD,&D(8)\n         LCLB  &INDEV                                            81259\n         LCLC  &DC                                               81259\n&MACPLAB SETC  '&NM'                                             81259\n         AIF   ('&DEV' EQ '' OR '&DEV' EQ '0').NODV\n         AIF   ('&DEV' NE 'ALL').DVSOM\n&VD      SETA  255\n         AGO   .NODV\n.DVSOM   AIF   (K'&DEV LT 2).DVSOL                               81259\n         AIF   ('&DEV'(1,1) NE '=').DVSOL                        81259\n&INDEV   SETB  1             SET INDIRECT DEVICE NUMBER          81259\n         AGO   .NODV                                             81259\n.DVSOL   ANOP  ,                                                 81259\n&I       SETA  0\n&J       SETA  N'&DEV\n.DEVLOOP ANOP  ,\n&I       SETA  &I+1\n         AIF   (&I GT &J).DVEND\n         AIF   ('&DEV(&I)' EQ '').DEVLOOP\n         AIF   ('&DEV(&I)' EQ '0').DEVLOOP\n         AIF   ('&DEV(&I)' LT '1' OR '&DEV(&I)' GT '8').DVERR\n&D(&DEV(&I)) SETA  1\n         AGO   .DEVLOOP\n.DVERR   MNOTE 8,'*** INVALID DEVICE NUMBER &DEV(&I)'\n         AGO   .DEVLOOP\n.DVEND   ANOP  ,\n&VD      SETA  128*&D(8)+64*&D(7)+32*&D(6)+16*&D(5)+8*&D(4)\n&VD      SETA  &VD+4*&D(3)+2*&D(2)+&D(1)\n.NODV    AIF   ('&B0' NE '0' OR '&B1' NE '0').LONG\n         AIF   (&VD GT 15).LONG\n&K       SETA  &VD*256+&FN\n         MACPARM R0,&K       LOAD DEVICE/FUNCTION INDEX          81259\n         AGO   .POST0                                            81259\n.LONG    AIF   (K'&B0 LT 2).LONGCON                              82326\n         AIF   ('&B0'(1,1) NE '(').LONGCON                       82326\n         AIF   ('&B0'(2,1) EQ '(').LONGCON                       82326\n         MACPARM R0,&B0      LOAD R0                             82326\n         SLL   R0,24         ALIGN LENGTH TO HIGH BYTE           82326\n         O     R0,=AL1(0,&B1,&VD,&FN)                            82326\n         AGO   .POST0                                            82326\n.LONGCON ANOP  ,                                                 82326\n&MACPLAB L     R0,=AL1(&B0,&B1,&VD,&FN)                          81259\n&MACPLAB SETC  ''            CANCEL LABEL                        81259\n.POST0   AIF   (NOT &INDEV).LOAD1                                81259\n&VD      SETA  K'&DEV-1                                          81259\n&DC      SETC  '&DEV'(2,&VD)                                     81259\n&MACPLAB ICM   R0,2,&DC                                          81259\n&MACPLAB SETC  ''                                                81259\n.LOAD1   AIF   ('&FN' EQ '0' OR '&FN' EQ '1').BAL\n         MACPARM R1,&A1      LOAD PARAMETER REGISTER\n         AIF   ('&A0' EQ '' OR '&A0' EQ '0').BAL\n         ICM   R1,8,=AL1(&A0)\n.BAL     AIF   ('&SCRMODE' EQ 'V').VCON\n         L     R15,@SCREENS\n         AGO   .BALR\n.VCON    L     R15,=V(@SCREENS)\n.BALR    BASSM R14,R15\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCREDIT": {"ttr": 11015, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCREDIT &FDW,&DEV=                                      88340\n&NM      SCRCOM 0,0,11,,&FDW,DEV=&DEV  EXPAND REQUEST            88340\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRINIT": {"ttr": 11017, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRINIT &FDW,&DEV=\n&NM      SCRCOM 0,0,3,,&FDW,DEV=&DEV  EXPAND REQUEST\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRITEM": {"ttr": 11019, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x03\\x01\\x1f\\x01\\x03\\x01\\x1f\\x16C\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-11T00:00:00", "modifydate": "2003-01-11T16:43:50", "lines": 12, "newlines": 12, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      SCRITEM &LAD,&DEV=,&TITLE=0,&FOOTER=0                  GP03011\n.*  PROCESS A SINGLE DISPLAY ITEM (IN LIST FORM)\n         LCLA  &I\n         AIF   (&TITLE EQ 0 AND &FOOTER EQ 0).NOT\n         AIF   (&TITLE LT 16 AND &FOOTER LT 16).OKT\n         MNOTE 4,'*** NON-NUMERIC TITLE/FOOTER NOT SUPPORTED'\n.OKT     ANOP  ,\n&I       SETA  &TITLE*16+&FOOTER\n.NOT     ANOP  ,\n&NM      SCRCOM 0,&I,12,,&LAD,DEV=&DEV\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRLIST": {"ttr": 11021, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRLIST &LAD,&DEV=,&TITLE=0,&FOOTER=0\n         LCLA  &I\n         AIF   (&TITLE EQ 0 AND &FOOTER EQ 0).NOT\n         AIF   (&TITLE LT 16 AND &FOOTER LT 16).OKT\n         MNOTE 4,'*** NON-NUMERIC TITLE/FOOTER NOT SUPPORTED'\n.OKT     ANOP  ,\n&I       SETA  &TITLE*16+&FOOTER\n.NOT     ANOP  ,\n&NM      SCRCOM 0,&I,4,,&LAD,DEV=&DEV\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRLOOP": {"ttr": 11023, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRLOOP &FDW,&DEV=\n&NM      SCRCOM 0,0,8,,&FDW,DEV=&DEV  EXPAND REQUEST\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRMARK": {"ttr": 11025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRMARK &FDW,&DEV=                                      87314\n&NM      SCRCOM 0,0,10,,&FDW,DEV=&DEV  EXPAND REQUEST\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRMOVE": {"ttr": 11027, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRMOVE &FDW,&DEV=\n&NM      SCRCOM 0,0,6,,&FDW,DEV=&DEV  EXPAND REQUEST\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRN": {"ttr": 11029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x06&/\\x01\\x06&/#C\\x01\\xdb\\x01\\xdb\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2006-09-19T00:00:00", "modifydate": "2006-09-19T23:43:00", "lines": 475, "newlines": 475, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&L       SCRN  &DUMMY,&WIDTH=                                    89298\n.*\n.*             COPYRIGHT 1978 BY SHMUEL (SEYMOUR J.) METZ\n.*                        ALL RIGHTS RESERVED.\n.*\n.*             THIS MACRO IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION,\n.*             AS DESCRIBED IN MEMBER $$RIGHTS.\n.*\n.*             ANYONE MAKING ENHANCEMENTS IS REQUEST TO FORWARD THEM\n.*             TO ME, IDENTIFIED BY \"** XXX **' IN COLUMN 63,\n.*             WHERE XXX IS THE SHARE INSTALLATION CODE.\n.*                                                               89298\n.*       PERFORMANCE ENHANCEMENT (?) - LINESZE=80 REPLACED BY    89298\n.*       WIDTH= AND LINESZE MADE GLOBAL. REQUIRES ONLY ONE WIDTH 89298\n.*       OVERRIDE FOR AN EXTENDED SERIES OF MACROS.  *GYP*       89298\n.*       FIX FOR 'RA' ORDER POSITIONING.             *GYP*       89300\n.*\n.*\n         GBLA  &ROW,&COL,&LINESZE,&SCRNRAF                       89300\n         GBLB  &TAB70IN                                          87070\n         GBLC  &TAB3270(64)                                      87070\n         LCLA  &I,&I1,&I2,&J,&K\n         LCLB  &LN40,&LN64,&LN80,&STARTPR,&SAL,&RSTKBY,&RSTMDT\n         LCLB  &PROT,&NUMERIC,&DETCT,&INT,&MDT                   81328\n         LCLB  &NONDISP,&SKIP      COMPOSITES                    81328\n         LCLB  &OK\n         LCLC  &LABEL,&LABEL1,&CH1                               87070\n&LABEL   SETC  '&L'\n         AIF   (&TAB70IN).TABINIT                                87070\n&LINESZE SETA  80            DEFAULT SCREEN WIDTH                89298\n&TAB3270(1)   SETC  ' '                                          89271\n&TAB3270(2)   SETC  'A'                                          89271\n&TAB3270(3)   SETC  'B'                                          89271\n&TAB3270(4)   SETC  'C'                                          89271\n&TAB3270(5)   SETC  'D'                                          89271\n&TAB3270(6)   SETC  'E'                                          89271\n&TAB3270(7)   SETC  'F'                                          89271\n&TAB3270(8)   SETC  'G'                                          89271\n&TAB3270(9)   SETC  'H'                                          89271\n&TAB3270(10)  SETC  'I'                                          89271\n&TAB3270(11)  SETC  '\u00a2'                                          89271\n&TAB3270(12)  SETC  '.'                                          89271\n&TAB3270(13)  SETC  '<'                                          89271\n&TAB3270(14)  SETC  '('                                          89271\n&TAB3270(15)  SETC  '+'                                          89271\n&TAB3270(16)  SETC  '|'                                          89271\n&TAB3270(17)  SETC  '&&'                                         81335\n&TAB3270(18)  SETC  'J'                                          89271\n&TAB3270(19)  SETC  'K'                                          89271\n&TAB3270(20)  SETC  'L'                                          89271\n&TAB3270(21)  SETC  'M'                                          89271\n&TAB3270(22)  SETC  'N'                                          89271\n&TAB3270(23)  SETC  'O'                                          89271\n&TAB3270(24)  SETC  'P'                                          89271\n&TAB3270(25)  SETC  'Q'                                          89271\n&TAB3270(26)  SETC  'R'                                          89271\n&TAB3270(27)  SETC  '!'                                          89271\n&TAB3270(28)  SETC  '$'                                          89271\n&TAB3270(29)  SETC  '*'                                          89271\n&TAB3270(30)  SETC  ')'                                          89271\n&TAB3270(31)  SETC  ';'                                          89271\n&TAB3270(32)  SETC  '\u00ac'                                          89271\n&TAB3270(33)  SETC  '-'                                          89271\n&TAB3270(34)  SETC  '/'                                          89271\n&TAB3270(35)  SETC  'S'                                          89271\n&TAB3270(36)  SETC  'T'                                          89271\n&TAB3270(37)  SETC  'U'                                          89271\n&TAB3270(38)  SETC  'V'                                          89271\n&TAB3270(39)  SETC  'W'                                          89271\n&TAB3270(40)  SETC  'X'                                          89271\n&TAB3270(41)  SETC  'Y'                                          89271\n&TAB3270(42)  SETC  'Z'                                          89271\n&TAB3270(43)  SETC  '\u00a6'                                          89271\n&TAB3270(44)  SETC  ','                                          89271\n&TAB3270(45)  SETC  '%'                                          89271\n&TAB3270(46)  SETC  '_'                                          89271\n&TAB3270(47)  SETC  '>'                                          89271\n&TAB3270(48)  SETC  '?'                                          89271\n&TAB3270(49)  SETC  '0'                                          89271\n&TAB3270(50)  SETC  '1'                                          89271\n&TAB3270(51)  SETC  '2'                                          89271\n&TAB3270(52)  SETC  '3'                                          89271\n&TAB3270(53)  SETC  '4'                                          89271\n&TAB3270(54)  SETC  '5'                                          89271\n&TAB3270(55)  SETC  '6'                                          89271\n&TAB3270(56)  SETC  '7'                                          89271\n&TAB3270(57)  SETC  '8'                                          89271\n&TAB3270(58)  SETC  '9'                                          89271\n&TAB3270(59)  SETC  ':'                                          89271\n&TAB3270(60)  SETC  '#'                                          89271\n&TAB3270(61)  SETC  '@'                                          89271\n&TAB3270(62)  SETC  ''''''                                       81328\n&TAB3270(63)  SETC  '='                                          89271\n&TAB3270(64)  SETC  '\"'                                          89271\n&TAB70IN SETB  1             INITIALIZATION DONE                 87070\n.TABINIT AIF   ('&WIDTH' EQ '').SIZED                            89298\n&LINESZE SETA  &WIDTH        RESET WIDTH FOR CURRENT SCREEN      89298\n.SIZED   AIF   (N'&SYSLIST EQ 0).NOLIST                          89271\n.NXTI    AIF   (&I EQ N'&SYSLIST).END\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)'(1,1) EQ '(').ADDR\n&SCRNRAF SETA  0             CANCEL 'RA' ADJUSTMENT - NOT ADDRESS\n         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').STRING\n         AIF   ('&SYSLIST(&I)' EQ 'WDC').WDC\n         AIF   ('&SYSLIST(&I)' EQ 'W').WDC                       82273\n         AIF   ('&SYSLIST(&I)' EQ 'WRE').WRE\n         AIF   ('&SYSLIST(&I)' EQ 'EW').WRE                      82273\n         AIF   ('&SYSLIST(&I)' EQ 'EWA').EWA                     82273\n         AIF   ('&SYSLIST(&I)' EQ 'EAU').EAU\n         AIF   ('&SYSLIST(&I)' EQ 'WSF').WSF                     82273\n         AIF   ('&SYSLIST(&I)' EQ 'SBA').SBA\n         AIF   ('&SYSLIST(&I)' EQ 'SF').SF\n         AIF   ('&SYSLIST(&I)' EQ 'SFE').SFE                     82273\n         AIF   ('&SYSLIST(&I)' EQ 'MF').MF                       83165\n         AIF   ('&SYSLIST(&I)' EQ 'SA').SA                       83165\n         AIF   ('&SYSLIST(&I)' EQ 'IC').IC\n         AIF   ('&SYSLIST(&I)' EQ 'PT').PT\n         AIF   ('&SYSLIST(&I)' EQ 'RA').RA\n         AIF   ('&SYSLIST(&I)' EQ 'EUA').EUA\n         AIF   ('&SYSLIST(&I)' EQ 'COLOR').COLOR                 89258\n         AIF   ('&SYSLIST(&I)' EQ 'HIGHLITE').HIGHLIT            89258\n         AIF   ('&SYSLIST(&I)' EQ 'ATTR').ATTR                   89258\n         AIF   ('&SYSLIST(&I)' EQ 'REVERSE').REVERSE             89258\n         AIF   ('&SYSLIST(&I)' EQ 'BLINK').BLINK                 89258\n         AIF   ('&SYSLIST(&I)' EQ 'UNDER').UNDER                 89258\n         AIF   ('&SYSLIST(&I)' EQ 'DFLT').NULL                   89258\n         AIF   ('&SYSLIST(&I)' EQ 'BLUE').BLUE                   89258\n         AIF   ('&SYSLIST(&I)' EQ 'RED').RED                     89258\n         AIF   ('&SYSLIST(&I)' EQ 'PINK').PINK                   89258\n         AIF   ('&SYSLIST(&I)' EQ 'GREEN').GREEN                 89258\n         AIF   ('&SYSLIST(&I)' EQ 'CYAN').TURQ                   89258\n         AIF   ('&SYSLIST(&I)' EQ 'TURQ').TURQ                   89258\n         AIF   ('&SYSLIST(&I)' EQ 'TURQOISE').TURQ               89258\n         AIF   ('&SYSLIST(&I)' EQ 'YELLOW').YELLOW               89258\n         AIF   ('&SYSLIST(&I)' EQ 'WHITE').WHITE                 89258\n         AIF   ('&SYSLIST(&I)' EQ 'NULL').NULL\n         AIF   ('&SYSLIST(&I)' EQ 'BLANK').BLANK                 81328\n         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ ':').LABEL\n         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '-').LABEL1\n         AIF   ('&SYSLIST(&I)'(1,2) EQ 'CL').DSC\n         AIF   ('&SYSLIST(&I)'(1,2) EQ 'XL').DSC\n         AIF   ('&SYSLIST(&I)'(1,4) EQ 'AL2(').DSA\n         MNOTE 12,'PARAMETER #&I INVALID - &SYSLIST(&I) NOT A VALID KEY*\n               WORD'\n         MEXIT\n.*\n.STRING  ANOP\n&J       SETA  2\n&K       SETA  0\n.STRLOOP AIF   ('&SYSLIST(&I)'(&J,2) EQ '''''').STRDBL\n         AIF   ('&SYSLIST(&I)'(&J,2) NE '&&&&').STRSNGL\n.STRDBL  ANOP\n&J       SETA  &J+1\n.STRSNGL ANOP\n&J       SETA  &J+1\n&K       SETA  &K+1\n         AIF   (&J LT K'&SYSLIST(&I)).STRLOOP\n         AIF   (&COL+&K LE &LINESZE).STRFITS\n&ROW     SETA  &ROW+1\n&COL     SETA  1\n.STRFITS ANOP\n&LABEL   DC    C&SYSLIST(&I)\n.SETL1   AIF   ('&LABEL1' EQ '').NOL1\n&I2      SETA  (&ROW-1)*&LINESZE+&COL-1\n         AIF   (&I2 LT 4096).ADDR2#6                            GP06262\n&LABEL1  DC    AL2(&I2)      14-BIT ADDRESS                     GP06262\n&LABEL1  SETC  ''                                               GP06262\n         AGO   .NOL1                                            GP06262\n.ADDR2#6 ANOP  ,                                                GP06262\n&I1      SETA  &I2/64\n&CH1     SETC  '&TAB3270(&I1+1)'.'&TAB3270(&I2-64*&I1+1)'        87070\n&LABEL1  EQU   C'&CH1'\n&LABEL1  SETC  ''\n.NOL1    ANOP\n&LABEL   SETC  ''\n&COL     SETA  &COL+&K\n.SLDEC   AIF   (&COL LE &LINESZE).NXTI\n&ROW     SETA  &ROW+1\n&COL     SETA  &COL-&LINESZE\n         AGO   .SLDEC\n.*\n.ADDR    AIF   (N'&SYSLIST(&I) NE 2).CONBYTE                     90149\n         AIF   ('&SYSLIST(&I,1)' EQ '*').RSAME\n         AIF   ('&SYSLIST(&I,1)'(1,1) EQ '+').RINC\n         AIF   ('&SYSLIST(&I,1)'(1,1) EQ '-').RDEC\n         AIF   ('&SYSLIST(&I,1)'(1,1) LT '0').CONBYTE\n         AIF   (K'&SYSLIST(&I,1) GT 3).CONBYTE                   90149\n&ROW     SETA  &SYSLIST(&I,1)\n         AGO   .RSAME\n.RINC    ANOP\n&CH1     SETC  '&SYSLIST(&I,1)'(2,K'&SYSLIST(&I,1)-1)\n&ROW     SETA  &ROW+&CH1\n&COL     SETA  1\n         AGO   .RSAME\n.RDEC    ANOP\n&CH1     SETC  '&SYSLIST(&I,1)'(2,K'&SYSLIST(&I,1)-1)\n&ROW     SETA  &ROW-&CH1\n&COL     SETA  1\n.RSAME   AIF   ('&SYSLIST(&I,2)' EQ '*').CSAME\n         AIF   ('&SYSLIST(&I,2)'(1,1) EQ '+').CINC\n         AIF   ('&SYSLIST(&I,2)'(1,1) EQ '-').CDEC\n&COL     SETA  &SYSLIST(&I,2)\n         AGO   .CSAME\n.CINC    ANOP\n&CH1     SETC  '&SYSLIST(&I,2)'(2,K'&SYSLIST(&I,2)-1)\n&COL     SETA  &COL+&CH1\n.TINC    AIF   (&COL LE &LINESZE).CSAME\n&COL     SETA  &COL-&LINESZE\n&ROW     SETA  &ROW+1\n         AGO   .TINC\n.CDEC    ANOP\n&CH1     SETC  '&SYSLIST(&I,2)'(2,K'&SYSLIST(&I,2)-1)\n&COL     SETA  &COL-&CH1\n.TDEC    AIF   (&COL GE 0).CSAME\n&COL     SETA  &COL+&LINESZE\n&ROW     SETA  &ROW-1\n         AGO   .TDEC\n.CSAME   ANOP\n&I2      SETA  (&ROW-1)*&LINESZE+&COL-1\n         AIF   (&I2 LT 4096).ADDR6#6                            GP06262\n&LABEL   DC    AL2(&I2)      14-BIT ADDRESS                     GP06262\n         AGO   .ADDRAF                                          GP06262\n.ADDR6#6 ANOP  ,                                                GP06262\n&I1      SETA  &I2/64\n&CH1     SETC  '&TAB3270(&I1+1)'.'&TAB3270(&I2-64*&I1+1)'        87070\n&LABEL   DC    C'&CH1'\n.ADDRAF  ANOP  ,                                                GP06262\n&LABEL   SETC  ''\n&COL     SETA  &COL-&SCRNRAF   FIX FOR 'RA' ORDER ADJUSTMENT     89300\n&SCRNRAF SETA  0             DONE WITH ADJUSTMENT                89300\n         AGO   .NXTI\n.*\n.CONBYTE ANOP\n&SCRNRAF SETA  0             CANCEL 'RA' ADJUSTMENT - NOT ADDRESS\n&K       SETA  0\n&J       SETA  1\n.CBLOOP  AIF   (&J GT N'&SYSLIST(&I)).CBEND\n&LN40    SETB  ('&SYSLIST(&I,&J)' EQ '40CHAR')\n&LN64    SETB  ('&SYSLIST(&I,&J)' EQ '64CHAR')\n&LN80    SETB  ('&SYSLIST(&I,&J)' EQ '80CHAR')\n&LN40    SETB  ('&SYSLIST(&I,&J)' EQ 'CHAR40' OR &LN40)          81328\n&LN64    SETB  ('&SYSLIST(&I,&J)' EQ 'CHAR64' OR &LN64)          81328\n&LN80    SETB  ('&SYSLIST(&I,&J)' EQ 'CHAR80' OR &LN80)          81328\n&STARTPR SETB  ('&SYSLIST(&I,&J)' EQ 'STARTPR')\n&SAL     SETB  ('&SYSLIST(&I,&J)' EQ 'RING')\n&SAL     SETB  ('&SYSLIST(&I,&J)' EQ 'ALARM' OR &SAL)\n&SAL     SETB  ('&SYSLIST(&I,&J)' EQ 'SAL'   OR &SAL)\n&RSTKBY  SETB  ('&SYSLIST(&I,&J)' EQ 'RESTKBY')\n&RSTKBY  SETB  ('&SYSLIST(&I,&J)' EQ 'KBYRSTOR' OR &RSTKBY)\n&RSTMDT  SETB  ('&SYSLIST(&I,&J)' EQ 'RESTMDT')\n&RSTMDT  SETB  ('&SYSLIST(&I,&J)' EQ 'RESETMDT' OR &RSTMDT)\n&K       SETA  &K+&LN40*16+&LN64*32+&LN80*48+&STARTPR*8\n&K       SETA  &K+&SAL*4+&RSTKBY*2+&RSTMDT\n.*\n&PROT    SETB  ('&SYSLIST(&I,&J)' EQ 'PROT')\n&NUMERIC SETB  ('&SYSLIST(&I,&J)' EQ 'NUM')\n&SKIP    SETB  ('&SYSLIST(&I,&J)' EQ 'SKIP')                     81328\n&SKIP    SETB  ('&SYSLIST(&I,&J)' EQ 'AUTOSKIP' OR &SKIP)        81328\n&PROT    SETB  (&PROT OR &SKIP)                                  81328\n&NUMERIC SETB  (&NUMERIC OR &SKIP)                               81328\n&DETCT   SETB  ('&SYSLIST(&I,&J)' EQ 'DETCTABLE')\n&DETCT   SETB  ('&SYSLIST(&I,&J)' EQ 'DECTABLE' OR &DETCT)       83165\n&INT     SETB  ('&SYSLIST(&I,&J)' EQ 'INTENSE')\n&INT     SETB  ('&SYSLIST(&I,&J)' EQ 'INT' OR &INT)\n&NONDISP SETB  ('&SYSLIST(&I,&J)' EQ 'NONDISP')\n&DETCT   SETB  (&DETCT OR &NONDISP)                               *GPP*\n&INT     SETB  (&INT OR &NONDISP)                                 *GPP*\n&MDT     SETB  ('&SYSLIST(&I,&J)' EQ 'MDT')\n&K       SETA  &K+&PROT*32+&NUMERIC*16+&DETCT*4+&INT*8+&MDT       *GPP*\n&OK      SETB  ('&SYSLIST(&I,&J)' EQ 'NONE' OR &LN40 OR &LN64 OR &LN80)\n&OK      SETB  (&OK OR &STARTPR OR &SAL OR &RSTKBY OR &RSTMDT)\n&OK      SETB  (&OK OR &PROT OR &NUMERIC OR &DETCT OR &INT OR &NONDISP)\n&OK      SETB  (&OK OR &MDT)\n         AIF   (&OK).CBBUMP\n         MNOTE 12,'SUBPARAMETER #&J OF PARAMETER #&I INVALID - ''&SYSLI*\n               ST(&I,&J)'' NOT RECOGNIZED'\n.CBBUMP  ANOP\n&J       SETA  &J+1\n         AGO   .CBLOOP\n.CBEND   ANOP\n&CH1     SETC  '&TAB3270(&K+1)'                                  87070\n&LABEL   DC    C'&CH1'\n&LABEL   SETC  ''\n         AGO   .NXTI\n.*\n.WDC     ANOP\n&LABEL   DC    X'27'                    ESCAPE\n         DC    C'1'                     WRITE DISPLAY CURSOR\n&K       SETA  0\n         AGO   .SETL1\n.*\n.WRE     ANOP\n&LABEL   DC    X'27'                    ESCAPE\n         DC    C'5'                     ERASE/WRITE\n         AGO   .SETL1\n.*\n.EWA     ANOP  ,                                                 82273\n&LABEL   DC    X'27'                    ESCAPE                   82273\n         DC    C'='                     ERASE/WRITE ALTERNATE    82273\n         AGO   .SETL1                                            82273\n.*                                                               82273\n.EAU     ANOP\n&LABEL   DC    X'27'                    ESCAPE\n         DC    C'?'                     ERASE ALL UNPROTECTED\n&K       SETA  0\n         AGO   .SETL1\n.*\n.WSF     ANOP                                                    82273\n&LABEL   DC    X'27'                    ESCAPE                   82273\n         DC    C'3'                     WRITE STRUCTURED FIELD   82273\n&K       SETA  0                                                 82273\n         AGO   .SETL1                                            82273\n.*                                                               82273\n.SBA     ANOP\n&LABEL   DC    X'11'                    SET BUFFER ADDRESS\n&K       SETA  0\n         AGO   .SETL1\n.*\n.SF      ANOP\n&LABEL   DC    X'1D'                    START FIELD\n&K       SETA  1\n         AGO   .SETL1\n.*\n.SFE     ANOP                                                    82273\n&LABEL   DC    X'29'                    START FIELD EXTENDED     82273\n&K       SETA  1                                                 82273\n         AGO   .SETL1                                            82273\n.*                                                               82273\n.SA      ANOP                                                    82273\n&LABEL   DC    X'28'                    SET ATTRIBUTE            82273\n&K       SETA  0                                                 82273\n         AGO   .SETL1                                            82273\n.*                                                               82273\n.MF      ANOP                                                    82273\n&LABEL   DC    X'2C'                    MODIFY FIELD             82273\n&K       SETA  1                                                 82273\n         AGO   .SETL1                                            82273\n.*                                                               82273\n.IC      ANOP\n&LABEL   DC    X'13'                    INSERT CURSOR\n&K       SETA  0\n         AGO   .SETL1\n.*\n.PT      ANOP\n&LABEL   DC    X'05'                    PROGRAM TAB\n&K       SETA  0\n         AGO   .NOL1\n.*\n.RA      ANOP\n&LABEL   DC    X'3C'                    REPEAT TO ADDRESS\n&K       SETA  0\n&SCRNRAF SETA  1             AFTER NEXT ADDRESS, ADJUST BY 1     89300\n         AGO   .NOL1\n.*\n.EUA     ANOP\n&LABEL   DC    X'12'                    ERASE UNPROTECTED TO ADDRESS\n&K       SETA  0\n         AGO   .NOL1\n.*                                                               89258\n.COLOR   ANOP  ,                                                 89258\n&LABEL   DC    X'42'         FOREGROUND COLOR                    89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.HIGHLIT ANOP  ,                                                 89258\n&LABEL   DC    X'41'         EXTENDED HIGHLIGHTING               89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.ATTR    ANOP  ,                                                 89258\n&LABEL   DC    X'C0'         FIELD ATTRIBUTE                     89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.UNDER   ANOP  ,                                                 89258\n&LABEL   DC    X'F4'         UNDERLINE (NORMAL, NOT FIELD)       89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.REVERSE ANOP  ,                                                 89258\n&LABEL   DC    X'F2'         REVERSE                             89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.BLINK   ANOP  ,                                                 89258\n&LABEL   DC    X'F1'         BLINK                               89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.BLUE    ANOP  ,                                                 89258\n&LABEL   DC    X'F1'         DARK (UNREADABLE) BLUE              89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.RED     ANOP  ,                                                 89258\n&LABEL   DC    X'F2'         RED                                 89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.PINK    ANOP  ,                                                 89258\n&LABEL   DC    X'F3'         MAGENTA ?                           89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.GREEN   ANOP  ,                                                 89258\n&LABEL   DC    X'F4'         GREEN                               89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.TURQ    ANOP  ,                                                 89258\n&LABEL   DC    X'F5'         CYAN (TURQOISE IS TOO FANCY)        89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.YELLOW  ANOP  ,                                                 89258\n&LABEL   DC    X'F6'         YELLOW                              89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*                                                               89258\n.WHITE   ANOP  ,                                                 89258\n&LABEL   DC    X'F7'         WHITE/TRIPLE-PLANE SELECT           89258\n&K       SETA  0                                                 89258\n         AGO   .NOL1                                             89258\n.*\n.NULL    ANOP\n&LABEL   DC    X'00'                    NULL\n&K       SETA  0                                                 81328\n         AGO   .SETL1                                            81328\n.*                                                               81328\n.BLANK   ANOP  ,                                                 81328\n&LABEL   DC    C' '                BLANK                         81328\n&K       SETA  0                                                 81328\n         AGO   .SETL1                                            81328\n.*\n.LABEL   AIF   ('&LABEL' EQ '').SETL                             80203\n&LABEL   EQU   *                                                 80203\n.SETL    ANOP  ,                                                 80203\n&LABEL   SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1)\n         AGO   .NXTI\n.*\n.LABEL1  ANOP\n&LABEL1  SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1)\n         AGO   .NXTI\n.*\n.DSC     ANOP\n&J       SETA  3\n.DSLOOP  AIF   (&J GT K'&SYSLIST(&I)).DSEND\n         AIF   ('&SYSLIST(&I)'(&J,1) EQ '''').DSQ\n         AIF   ('&SYSLIST(&I)'(&J,1) LT '0').DSL\n&J       SETA  &J+1\n         AGO   .DSLOOP\n.DSL     MNOTE 12,'PARAMETER #&I INVALID - &SYSLIST(&I) NOT DS OPERAND'\n         MEXIT\n.DSQ     ANOP\n&CH1     SETC  '&SYSLIST(&I)'(3,&J-3)\n&K       SETA  &CH1\n&LABEL   DC    &SYSLIST(&I)\n         AGO   .SETL1\n.DSEND   ANOP\n&CH1     SETC  '&SYSLIST(&I)'(3,&J-3)\n&K       SETA  &CH1\n&LABEL   DS    &SYSLIST(&I)\n         AGO   .SETL1\n.DSA     ANOP\n&LABEL   DC    &SYSLIST(&I)\n&LABEL   SETC  ''\n         AGO   .NXTI\n.*\n.END     AIF   ('&LABEL' EQ '').SOF                              80203\n&LABEL   EQU   *                                                 80203\n         MEXIT ,                                                 80203\n.*\n.NOLIST  MNOTE 12,'BUFFER LIST OMITTED'\n.SOF     MEND  ,                                                 80203\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SCROPEN": {"ttr": 11268, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCROPEN &WORK,&DEV=,&OPT=\n         LCLA  &I,&J\n         LCLB  &A,&D,&W,&S                                       87317\n&J       SETA  N'&OPT\n.OPTL    ANOP  ,\n&I       SETA  &I+1\n         AIF   (&I GT &J).OPTN\n         AIF   ('&OPT(&I)' EQ '').OPTL\n&A       SETB  (&A OR '&OPT(&I)' EQ 'ABE' OR '&OPT(&I)' EQ 'ABEND')\n&D       SETB  (&D OR '&OPT(&I)' EQ 'DUMMY')\n&W       SETB  (&W OR '&OPT(&I)' EQ 'NOWTO')\n&S       SETB  (&S OR '&OPT(&I)' EQ 'SA')                        87317\n         AGO   .OPTL\n.OPTN    ANOP  ,\n&I       SETA  128*&A+64*&D+32*&W+8*&S                           87317\n&NM      SCRCOM 0,0,2,&I,&WORK,DEV=&DEV\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRPAGE": {"ttr": 11270, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRPAGE &FDW,&DEV=\n&NM      SCRCOM 0,0,7,,&FDW,DEV=&DEV  EXPAND REQUEST\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRSCAN": {"ttr": 11272, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRSCAN &FDW,&DEV=                                      87312\n&NM      SCRCOM 0,0,9,,&FDW,DEV=&DEV  EXPAND REQUEST\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRWORK": {"ttr": 11274, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      SCRWORK &DD,&ALTDD,&TITLE=0,&FOOTER=0,&LPP=0,&WIDTH=0,        *\n               &FILL=0,&PAGE=,&SPAGE=,&PGUP=NO,&EXLST=,&AM=VTAM,       *\n               &COL=7,&HIL=7                                     87306\n         LCLA  &PFG,&I,&J,&K                                     84169\n         AIF   ('&PAGE' EQ '').NOPG                              81155\n&I       SETA  &PAGE\n&PFG     SETA  1             SET PAGE FEED-BACK\n.NOPG    AIF   ('&SPAGE' EQ '').NOSPG\n&J       SETA  &SPAGE\n&PFG     SETA  1             SET PAGE FEED-BACK\n.NOSPG   AIF   ('&PGUP' EQ 'NO').NOPGUP                          84169\n&PFG     SETA  3             SET UPDATING BY USER                84169\n         AIF   ('&AM' EQ 'BTAM').NOAM                            87306\n         AIF   ('&AM' EQ '' OR '&AM' EQ 'VTAM').DOVTAM           87306\n         MNOTE 4,'INVALID ACCESS METHOD AM=&AM'                  87306\n.DOVTAM  ANOP  ,                                                 87306\n&PFG     SETA  &PFG+128      ACCESS METHOD BIT                   87306\n.NOAM    AIF   ('&PGUP' EQ '' OR '&PGUP' EQ 'YES').NOPGUP        84169\n         MNOTE 4,'INVALID PGUP OPTION : &PGUP'                   84169\n.NOPGUP  AIF   ('&EXLST' EQ '').NOLST1                           84169\n&PFG     SETA  &PFG+4        SET EXIT LIST FLAG                  84169\n.NOLST1  ANOP  ,                                                 84169\n&NM      DC    0H'0',CL8'&DD ',CL8'&ALTDD ',AL1(&HIL,&LPP,&FILL,&WIDTH,*\n               &TITLE,&FOOTER,&COL,&PFG)                         87306\n&K       SETA  &PFG-(&PFG/2*2)                                   84169\n         AIF   (&K NE 1).NOLST2                                  84169\n         DC    Y(&I,&J)      PAGE/SUB-PAGE FEEDBACK AREA\n.NOLST2  AIF   ('&EXLST' EQ '').MEND                             84169\n         DC    AL4(&EXLST)   EXIT LIST POINTER                   84169\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVCALC": {"ttr": 11276, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x008\\x02\\x85\\x02\\x85\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T00:38:00", "lines": 645, "newlines": 645, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO\n&NAME   SERVCALC &FUNCTN=,&DEVTAB=,&TYPE=,&UCB=,&BALANCE=,&REMOVE=,    *\n               &MAXSIZE=,&REGSAVE=,&RKDD=,&R=,&K=,&DD=,&LAST=,&MF=I\n.***** START OF SPECIFICATIONS ****************************************\n.*\n.* MODULE NAME - SERVCALC;  ADAPTED FROM IBM'S TRKCALC MACRO     82105\n.*\n.* DESCRIPTIVE NAME -\n.*      SYSTEM TRACK ALGORITHM ROUTINE (STAR) SERVICE MACRO\n.*\n.* COPYRIGHT - NONE (PRE MVS/SE)\n.*\n.* STATUS - NEW\n.*\n.* FUNCTION -\n.*    THIS MACRO, DEPENDING ON THE VALUE OF THE \"MF\" PARAMETER,\n.*    PERFORMS ONE OF FOUR BASIC FUNCTIONS RELATED TO ESTABLISHING\n.*    OR MAPPING THE INPUT PARAMETER LIST FOR THE SYSTEM TRACK\n.*    ALGORITHM ROUTINE (STAR). THE FOUR FUNCTIONS ARE DESCRIBED\n.*    BELOW:\n.*\n.*    MF=I - DEFAULT - WITH A SPECIFICATION OF MF=I, THIS MACRO\n.*       WILL ALLOCATE STORAGE FOR THE STAR PARAMETER LIST AND\n.*       INITIALIZE IT ACCORDING TO THE OPTIONS SELECTED VIA THE\n.*       ALLOWABLE KEYWORDS (SEE BELOW FOR KEYWORD DESCRIPTIONS).\n.*       THIS IS CALLED THE STANDARD-FORM (INSTRUCTION FORMAT) OF\n.*       THE MACRO.\n.*    MF=E - THIS SPECIFICATION WILL RESULT IN THE INITIALIZATION\n.*       OF AN ALREADY EXISTING STAR PARAMETER LIST. THE ADDRESS\n.*       OF THE EXISTING PARAMETER LISTS IS PROVIDED VIA A SECOND\n.*       SUBPARAMETER OF THE \"MF\" KEYWORD. (SEE THE SECTION BELOW\n.*       ON KEYWORDS FOR THE SOURCE OF THE INITIALIZATION DATA).\n.*       THIS IS CALLED THE EXECUTE-FORM OF THE MACRO.\n.*\n.*    NOTE - NO KEYWORDS ARE PROCESSED FOR THE FOLLOWING MACRO FORMS.\n.*\n.*    MF=L - THIS SPECIFICATION WILL RESULT IN THE ALLOCATION\n.*       OF THE STAR PARAMETER LIST WITHOUT INITIALIZATION. THIS IS\n.*       CALLED THE LIST-FORM OF THE MACRO.\n.*    MF=D - THIS SPECIFICATION WILL RESULT IN THE GENERATION OF A\n.*       MAPPING OF THE SYMBOLS USED TO ADDRESS THE FIELDS AND\n.*       FLAGS OF THE STAR PARAMETER LIST. THE CALLER MUST PROVIDE\n.*       A \"DSECT\" STATEMENT IN ORDER TO OBTAIN SYMBOLIC ADDRESSING\n.*       WITHOUT STORAGE ALLOCATION. THIS IS CALLED THE DSECT-FORM\n.*       OF THE MACRO.\n.*\n.*    KEYWORDS- (APPLICABLE ONLY FOR MF=I AND MF=E FORMS)\n.*       FUNCTN - USED TO REQUEST TRACK BALANCE (TRKBAL) OR TRACK\n.*          CAPACITY (TRKCAP) FUNCTIONS.\n.*       NOTE 1 - A SPECIAL OPTION IS PROVIDED TO ALLOW A TRKCALC CALL\n.*                WITH THE 'FUNCTN' KEYWORD OMITTED. THIS OPTION IS\n.*                ALLOWED ONLY IF THE KEYWORD MF=E IS CODED. IF THE\n.*                'FUNCTN' KEYWORD IS OMITTED, NO INSTRUCTION WILL BE\n.*                GENERATED TO SET THE PARAMETER LIST FLAGS. THUS,\n.*                THE MUTUALLY EXCLUSIVE TEST FOR FUNCTN=TRKCAP AND\n.*                REMOVE=YES, MAXSIZE=YES, AND LAST=YES IS BYPASSED.\n.*                ALSO, THE FOLLOWING NOTE (2) DOES NOT APPLY.\n.*       NOTE 2 - ONE OF THE FOLLOWING THREE KEYWORDS (DEVTAB,\n.*                TYPE, OR UCB) MUST BE PROVIDED WHEN THE 'FUNCTN'\n.*                KEYWORD IS CODED. THIS IS TO ENSURE A SOURCE FOR THE\n.*                DEVICE CHARACTERISTICS TABLE. IF THE PARAMETER LIST\n.*                HAS BEEN PREVIOUSLY SET WITH A SOURCE, THEN AN '*'\n.*                SHOULD BE CODED AS THE INPUT VALUE FOR THE PROPER\n.*                SOURCE KEYWORD. THIS WILL RESULT IN THE PROPER SOURCE\n.*                FLAG SETTING WITHOUT ACTUALLY GENERATING THE CODE TO\n.*                STORE THE DVCT.\n.*       DEVTAB - USED TO SUPPLY THE ADDRESS OF THE DEVICE CHARACTER-\n.*          ISTICS TABLE ENTRY.\n.*       TYPE - USED TO SUPPLY THE UCB DEVICE TYPE VIA THE LOW ORDER\n.*          BYTE OF A REGISTER OR AN ADDRESS. UCB TYPE IS USED BY STAR\n.*          TO FIND THE DEVICE CHARACTERISTICS TABLE ENTRY.\n.*       UCB - USED TO PROVIDE THE ADDRESS OF THE UCB. STAR WILL\n.*          EXTRACT THE DEVICE TYPE TO FIND THE PROPER DEVICE CHAR-\n.*          ACTERISTICS TABLE ENTRY.\n.*       BALANCE - USED TO PROVIDE THE ADDRESS OF A TRACK BALANCE TO BE\n.*          USED BY STAR IN THE CAPACITY AND BALANCE ALGORITHMS.\n.*       RKDD - USED TO SUPPLY THE ADDRESS OF A FULL WORD CONTAINING\n.*          A RECORD NUMBER, KEY LENGTH, AND DATA LENGTH OR TO DESIG-\n.*          NATE A REGISTER CONTAINING SAME. THE FOLLOWING THREE KEY-\n.*          WORDS SUPPLY THE SAME DATA, BUT FROM SEPARATE SOURCES.\n.*\n.*       NOTE - THE FOLLOWING THREE KEYWORDS PROVIDE THE CAPABILITY\n.*              FOR THE CALLER TO CODE THE RECORD NUMBER, KEY LENGTH,\n.*              AND DATA LENGTH AS SELF-DEFINING DECIMAL VALUES\n.*              (REFERRED TO HERE AS IMMEDITATE DATA).\n.*\n.*       R - USED TO PROVIDE THE SUBJECT RECORD NUMBER VIA THE LOW-\n.*           ORDER BYTE OF A REGISTER, A STORAGE ADDRESS, OR IMMEDIATE\n.*           DATA.\n.*       K - USED TO PROVIDE THE SUBJECT KEY LENGTH VIA THE LOW-ORDER\n.*           BYTE OF A REGISTER, A STORAGE ADDRESS, OR IMMEDIATE\n.*           DATA.\n.*       DD - USED TO PROVIDE THE SUBJECT DATA LENGTH VIA THE LOW-ORDER\n.*           BYTE OF A REGISTER, A STORAGE ADDRESS, OR IMMEDIATE\n.*           DATA.\n.*\n.*       NOTE - THE FOLLOWING THREE KEYWORDS (REMOVE, MAXSIZE, AND\n.*              LAST) ARE VALID ONLY WHEN 'FUNCTN=TRKBAL' IS CODED.\n.*              THEY ARE IGNORED IF 'FUNCTN' IS OMITTED.\n.*\n.*       REMOVE - OPTIONALLY USED TO REQUEST THE DELETION OF A RECORD\n.*          DURING A TRACK BALANCE REQUEST.\n.*       MAXSIZE - OPTIONALLY USED TO REQUEST A COUNT OF THE RESIDUAL\n.*          DATA BYTES ON A TRACK AFTER IT IS FOUND THAT ANOTHER WHOLE\n.*          RECORD WILL NOT FIT DURING A TRACK BALANCE REQUEST.\n.*       LAST - A SPECIAL OPTION MADE AVAILABLE FOR ISAM. IF SPECIFIED,\n.*          THE OVERHEAD FOR THE LAST RECORD IS USED IN CALCULATING\n.*          A NEW TRACK BALANCE.\n.*       REGSAVE - DEFINED FOR COMPATIBILITY WITH TRKCALC; NOT USED\n.*          THE CALL TO @SERVICE PRESERVES REGISTERS 2-13        82105\n.*       MF - USED TO SPECIFY WHICH FORM OF THE TRKCALC MACRO IS\n.*          DESIRED. SEE OPENING PARAGRAPH ABOVE.\n.*\n.*    INTERNAL PROCESSING FOR THE I AND E FORMS OF THE MACRO IS\n.*    CONTROLLED BY A NUMBER OF LOCAL BINARY AND CHARACTER\n.*    VARIABLES. THE L AND D FORMS OF THE MACRO ARE HANDLED BY\n.*    DIRECT PATHS THROUGH THE MACRO AND AS SUCH DO NOT INVOLVE THE\n.*    USE OF LOCAL VARIABLES. FOLLOWING ARE THE DESCRIPTIONS OF THE\n.*    THE LOCAL VARIABLES USED FOR THE I AND E FORMS:\n.*\n.*    LCLC'S -\n.*       &FUNFLG - 'B' = TRKBAL FUNCTION REQUESTED\n.*               - 'C' = TRKCAP FUNCTION REQUESTED\n.*               - (OMITTED) = USE FUNCTION FLAGS FROM LAST CALL\n.*       &SAVAREA - 'NO' = DON'T SAVE AND RESTORE REGISTERS\n.*                  'YES' = SAVE AND RESTORE REGISTERS\n.*       &SET(1) - DVCT SOURCE WITH POSSIBLE PARENTHESES REMOVED: DVCT\n.*                 ADDRESS, UCB ADDRESS, OR DEVICE TYPE (ADDRESS\n.*                 OR IMMEDIATE DATA)\n.*       &SET(2) - RKDD PARAMETER VALUE WITH POSSIBLE PARENTHESES\n.*                 REMOVED\n.*       &SET(3) - R PARAMETER VALUE WITH POSSIBLE PARENTHESES REMOVED\n.*       &SET(4) - K PARAMETER VALUE WITH POSSIBLE PARENTHESES REMOVED\n.*       &SET(5) - DD PARAMETER VALUE WITH POSSIBLE PARENTHESES REMOVED\n.*       &SET(6) - BALANCE PARAMETER VALUE WITH POSSIBLE PARENTHESES\n.*                 REMOVED\n.*       &SKIP - 'P3' = RKDD PARAMETER NOT SPECIFIED\n.*       &FLGA(1) - 'R' = &SET(1) (DVCT SOURCE PARAMETER) IS IN\n.*                        REGISTER FORMAT\n.*                - 'A' = &SET(1) (DVCT SOURCE PARAMETER) IS IN ADDRESS\n.*                        FORMAT\n.*       &FLGA(2) - 'R' = RKDD PARAMETER IS IN REGISTER FORMAT\n.*                - 'A' = RKDD PARAMETER IS IN ADDRESS FORMAT\n.*       &FLGA(3) - 'R' = BALANCE PARAMETER IS IN REGISTER OR IMMED-\n.*                        IATE DATA FORMAT\n.*                - 'A' = BALANCE PARAMETER IS IN ADDRESS FORMAT\n.*       &FLGA(4) - 'R' = R PARAMETER IS IN REGISTER FORMAT\n.*       &FLGA(5) - 'R' = K PARAMETER IS IN REGISTER FORMAT\n.*       &FLGA(6) - 'R' = DD PARAMETER IS IN REGISTER FORMAT\n.*       &LABEL - AID TO VARIABLE LABEL ASSIGNMENT\n.*       &BITS - USED TO COLLECT BIT SWITCHES FOR STAR PARM FLAGS\n.*\n.*    LCLB'S\n.*       &BIT(1) - 0 = TRKBAL REQUESTED OR FUNCTN WAS OMITTED\n.*               - 1 = TRKCAP REQUESTED\n.*       &BIT(2) - 0 = REMOVE OPTION NOT REQUESTED\n.*               - 1 = REMOVE OPTION REQUESTED\n.*       &BIT(3) - 0 = MAXSIZE OPTION NOT REQUESTED\n.*               - 1 = MAXSIZE OPTION REQUESTED\n.*       &BIT(4) - 0 = BALANCE NOT PROVIDED CALLER\n.*               - 1 = BALANCE PROVIDED BY CALLER\n.*       &BIT(5) - 0 = LAST OPTION NOT REQUESTED\n.*               - 1 = LAST OPTION REQUESTED\n.*       &BIT(6&7) - 00 = DVCT ENTRY ADDRESS PROVIDED\n.*                   01 = NOT USED\n.*                   10 = UCB ADDRESS PROVIDED\n.*                   11 = DEVICE TYPE (ADDRESS OR IMMEDIATE) PROVIDED\n.*       &QUIT - 0 = SUCCESSFUL PARAMETER LIST CONSTRUCTION\n.*             - 1 = ERRORS DETECTED. DO NOT GENERATE ANY CODE\n.*       &MSG - 0 = NO INFORMATION/WARNING MESSAGES ISSUED\n.*              1 = INFORMATION/WARNING MESSAGES ISSUED\n.*\n.* NOTES - EXECUTABLE CODE RESIDES IN @SERVICE, FUNCTION TRKCP   82105\n.*\n.* MACROS - IHBINNRA\n.*\n.***** END OF SPECIFICATIONS ******************************************\n         LCLC  &FUNFLG,&SAVAREA,&SET(6),&SKIP,&FLGA(6),&LABEL,&BITS\n         LCLB  &BIT(7),&QUIT,&MSG\n&LABEL   SETC  '&NAME'\n         AIF   ('&MF' EQ 'L').LIST      BR IF LIST OPTION\n         AIF   ('&MF' EQ 'D').DSECT     BR IF DSECT OPTION\n*\n*   STAR USES REGISTERS; 0(OUTPUT),1,9,10,11,14, AND 15(RETURN CODE)\n*\n.**********************************************************************\n.*    KEYWORD SYNTAX CHECKING FOLLOWS\n.**********************************************************************\n.*\n.**********************************************************************\n.*    CHECK SYNTAX OF REGSAVE KEYWORD\n.**********************************************************************\n         AIF   (T'&REGSAVE EQ 'O').NOSAVE\n         AIF   ('&REGSAVE' EQ 'NO').NOSAVE\n         AIF   ('&REGSAVE' EQ 'YES').SAVE\n         SPACE 1\n         MNOTE 0,'REGSAVE= OPERAND NOT RECOGNIZED; ''NO'' IS ASSUMED'\n&MSG     SETB  1                        INDICATE MESSAGE ISSUED\n.NOSAVE  ANOP  ,\n&SAVAREA SETC  'NO'                     INDICATE REG SAVING NOT REQ'D\n         AGO   .SYNTAX\n.SAVE    ANOP  ,\n*   REGSAVE OPTION SPECIFIED; ALL REGISTERS BUT 0 AND 15 WILL BE\n*   SAVED AND RESTORED.\n*\n&SAVAREA SETC  'YES'                    INDICATE REG SAVING REQ'D\n.**********************************************************************\n.*    SYNTAX CHECK OF FUNCTN KEYWORD\n.**********************************************************************\n.SYNTAX  ANOP  ,\n         AIF   (T'&FUNCTN EQ 'O').NOFUNC\n         AIF   ('&FUNCTN' EQ 'TRKBAL').BALFUN\n         AIF   ('&FUNCTN' EQ 'TRKCAP').CAPFUN\n         SPACE 1\n         MNOTE 8,'FUNCTN= OPERAND INVALID; PROCESSING TERMINATED'\n         SPACE 1\n         MEXIT ,                        ABORT - CAN'T VALIDATE\n.*                                      REMAINING KEYWORD CONFLICTS\n.NOFUNC  ANOP  ,\n         AIF   ('&MF' NE 'I').NOPROBM   FUNCTN OMITTED AND MF=E IS OK\n         SPACE 1\n         MNOTE 8,'FUNCTN= CAN NOT BE OMITTED WITH MF=I; PROCESSING TERM*\n               INATED'\n         SPACE 1\n         MEXIT ,\n.BALFUN  ANOP  ,\n&FUNFLG  SETC  'B'                      INDICATE TRKBAL REQ'D\n.NOPROBM ANOP  ,\n&BIT(1)  SETB  0                        SET TRKBAL/OMITTED FLG FOR\n.*                                      STAR PARMS\n         AGO   .TRKC010\n.CAPFUN  ANOP  ,\n&FUNFLG  SETC  'C'                      INDICATE TRKCAP REQ'D\n&BIT(1)  SETB  1                        SET TRKCAP FLG FOR STAR PARMS\n.**********************************************************************\n.*   CHECK SYNTAX OF DEVTAB KEYWORD\n.**********************************************************************\n.TRKC010 ANOP  ,\n&BIT(6)  SETB  0                        INIT SOURCE FLAGS\n&BIT(7)  SETB  0                        FOR DVCT ADDR\n         AIF   (T'&DEVTAB EQ 'O').TRKC020\n         AIF   ('&DEVTAB'(1,1) NE '(').DEVADDR\n         AIF   (N'&DEVTAB GT 1).DEVBAD\n&SET(1)  SETC  '&DEVTAB(1)'             SAVE KEYW VALUE W/O PARENS\n&FLGA(1) SETC  'R'                      INDICATE REG-FORM\n         AGO   .TRKC020                 ON TO NEXT KEYW\n.DEVADDR ANOP  ,\n&SET(1)  SETC  '&DEVTAB'                SAVE KEYW VALUE\n&FLGA(1) SETC  'A'                      INDICATE ADDR-FORM\n         AGO   .TRKC020                 ON TO NEXT KEYW\n.DEVBAD  ANOP  ,\n         SPACE 1\n         MNOTE 8,'DEVTAB= OPERAND INVALID; NO CODE PRODUCED'\n&QUIT    SETB  1                        DEFER TERMINATION\n.**********************************************************************\n.*  CHECK SYNTAX OF TYPE KEYWORD\n.**********************************************************************\n.TRKC020 ANOP  ,\n         AIF   (T'&TYPE EQ 'O').TRKC030\n         AIF   ('&FLGA(1)' NE '').DEVBAD2  HAVE DVCT SOURCE ALREADY?\n         AIF   ('&TYPE'(1,1) NE '(').TYPADDR\n         AIF   (N'&TYPE GT 1).TYPEBAD\n&SET(1)  SETC  '&TYPE(1)'               SAVE KEYW VALUE W/O PARENS\n&FLGA(1) SETC  'R'                      INDICATE REG-FORM\n         AGO   .SETTYPE                 ON TO SETTING OF TYPE FLG\n.TYPADDR ANOP  ,\n&SET(1)  SETC  '&TYPE'                  SAVE KEYW VALUE\n&FLGA(1) SETC  'A'                      INDICATE ADDR-FORM\n.SETTYPE ANOP  ,\n&BIT(6)  SETB  1                        SET TYPE FLGS FOR\n&BIT(7)  SETB  1                        STAR PARMS\n         AGO   .TRKC030                 ON TO NEXT KEYW\n.TYPEBAD ANOP  ,\n         SPACE 1\n         MNOTE 8,'TYPE= OPERAND INVALID; NO CODE PRODUCED'\n&QUIT    SETB  1                        DEFER TERMINATION\n.**********************************************************************\n.*  CHECK SYNTAX OF UCB KEYWORD\n.**********************************************************************\n.TRKC030 ANOP  ,\n         AIF   (T'&UCB EQ 'O').TRKC040\n         AIF   ('&FLGA(1)' NE '').DEVBAD2  HAVE DVCT SOURCE ALREADY?\n         AIF   ('&UCB'(1,1) NE '(').UCBADDR\n         AIF   (N'&UCB GT 1).UCBBAD\n&SET(1)  SETC  '&UCB(1)'                SAVE KEYW VALUE W/O PARENS\n&FLGA(1) SETC  'R'                      INDICATE REG-FORM\n         AGO   .SETUCB                  ON TO SETTING UCB FLG\n.UCBADDR ANOP  ,\n&SET(1)  SETC  '&UCB'                   SAVE KEYW VALUE\n&FLGA(1) SETC  'A'                      INDICATE ADDR-FORM\n.SETUCB  ANOP  ,\n&BIT(6)  SETB  1                        SET UCB FLG FOR STAR PARMS\n         AGO   .TRKC040                 ON TO NEXT KEYW\n.DEVBAD2 ANOP  ,\n         SPACE 1\n         MNOTE 8,'DEVTAB=, TYPE=, AND UCB= OPERANDS ARE MUTUALLY EXCLUS*\n               IVE;              NO CODE PRODUCED'\n&QUIT    SETB  1                        DEFER TERMINATION\n         AGO   .TRKC040                 ON TO NEXT KEYW\n.UCBBAD  ANOP  ,\n         SPACE 1\n         MNOTE 8,'UCB= OPERAND INVALID; NO CODE PRODUCED'\n&QUIT    SETB  1                        DEFER TERMINATION\n.**********************************************************************\n.*  ENSURE THAT A SOURCE (DEVTAB, UCB, OR TYPE) FOR THE DEVICE CHAR-\n.*  ACTERISTICS TABLE WAS PROVIDED. IF NOT, DEFAULT TO A RESIDUAL\n.*  DEVTAB ADDRESS AS THE DVCT SOURCE.\n.**********************************************************************\n.TRKC040 ANOP  ,\n         AIF   (T'&FUNCTN EQ 'O').TRKC045  BR, IF FUNCTN NOT PROVIDED -\n.*                                      SOURCE ASSUMED, FLGS NOT SET\n         AIF   ('&FLGA(1)' NE '').TRKC045  BR, IF DVCT SOURCE GIVEN\n.*  AT THIS POINT IF &QUIT=1, THE CALLER PROVIDED A SOURCE FOR THE\n.*  DVCT BUT IT WAS IN ERROR.\n         AIF   (&QUIT).TRKC045          BR, IF &QUIT=1\n         SPACE 1\n         MNOTE 4,'DVCT SOURCE (DEVTAB=, UCB=, OR TYPE=) IS MISSING;    *\n                DEVTAB=* IS ASSUMED'\n&SET(1)  SETC  '*'                      INDICATE A RESIDUAL DEVTAB\n&MSG     SETB  1                        INDICATE MESSAGE ISSUED\n.**********************************************************************\n.*  CHECK SYNTAX OF RKDD KEYWORD\n.**********************************************************************\n.TRKC045 ANOP  ,\n         AIF   (T'&RKDD EQ 'O').TRKC050\n         AIF   ('&RKDD'(1,1) NE '(').DORKDD\n         AIF   (N'&RKDD GT 1).RKDDBAD\n&SET(2)  SETC  '&RKDD(1)'               SAVE KEYW VALUE W/O PARENS\n&FLGA(2) SETC  'R'                      INDICATE REG-FORM\n         AGO   .TSTDUP\n.DORKDD  ANOP  ,\n         AIF   (T'&RKDD EQ 'N').RKDDBAD  BR IF IMMEDIATE-FORM; ERROR\n&SET(2)  SETC  '&RKDD'                  SAVE KEYW VALUE\n&FLGA(2) SETC  'A'                      INDICATE ADDR-FORM\n         AGO   .TSTDUP\n.RKDDBAD ANOP  ,\n         SPACE 1\n         MNOTE 8,'RKDD= OPERAND INVALID; NO CODE PRODUCED'\n&QUIT    SETB  1                        DEFER TERMINATION\n.**********************************************************************\n.*  SYNTAX CHECK FOR R, K, AND DD KEYWORDS\n.**********************************************************************\n.TSTDUP  AIF   (T'&R NE 'O' OR T'&K NE 'O').MLTXERR  RKDD AND R, K, OR\n         AIF   (T'&DD EQ 'O').TRKC060   DD ARE MUTUALLY EXCLUSIVE\n.MLTXERR ANOP  ,\n         SPACE 1\n         MNOTE 4,'R=, K=, OR DD= MAY NOT BE CODED WITH RKDD=; R=, K=, A*\n               ND DD= ARE IGNORED'                               82105\n&MSG     SETB  1                        INDICATE MESSAGE ISSUED\n         AGO   .TRKC060                 ON TO NEXT KEYW\n.TRKC050 ANOP  ,\n&SKIP    SETC  'P3'                     INDICATE R/K/DD PROVIDED\n         AIF   (T'&R EQ 'O').NORXX\n         AIF   ('&R'(1,1) NE '(').NORXX\n         AIF   (N'&R GT 1).BADPARM\n&FLGA(4) SETC  'R'                      INDICATE REG-FORM\n.NORXX   AIF   (T'&K EQ 'O').NOKXX\n         AIF   ('&K'(1,1) NE '(').NOKXX\n         AIF   (N'&K GT 1).BADPARM\n&FLGA(5) SETC  'R'                      INDICATE REG-FORM\n.NOKXX   AIF   (T'&DD EQ 'O').NODDXX\n         AIF   ('&DD'(1,1) NE '(').NODDXX\n         AIF   (N'&DD GT 1).BADPARM\n&FLGA(6) SETC  'R'                      INDICATE REG-FORM\n.NODDXX  ANOP  ,\n&SET(3)  SETC  '&R(1)'                  SAVE KEYW VALUES AND\n&SET(4)  SETC  '&K(1)'                  STRIP AWAY\n&SET(5)  SETC  '&DD(1)'                 POSSIBLE PARENS\n         AGO   .TRKC060                 ON TO NEXT KEYW\n.BADPARM ANOP  ,\n         SPACE 1\n         MNOTE 8,'R=, K=, OR DD= OPERAND INVALID; NO CODE PRODUCED'\n&QUIT    SETB  1                        DEFER TERMINATION\n.**********************************************************************\n.*  SYNTAX CHECKING OF REMOVE KEYWORD\n.**********************************************************************\n.TRKC060 ANOP  ,\n         AIF   (T'&REMOVE EQ 'O').NOREMV\n         AIF   ('&REMOVE' EQ 'NO').NOREMV\n         AIF   ('&REMOVE' NE 'YES').GARMSG1\n         AIF   ('&FUNFLG' EQ 'C').WARN1\n&BIT(2)  SETB  1                        SET REMOVE FLG FOR STAR PARMS\n         AGO   .TRKC070                 ON TO NEXT KEYW\n.GARMSG1 ANOP  ,\n         SPACE 1\n         MNOTE 4,'REMOVE= OPERAND NOT RECOGNIZED; ''NO'' IS ASSUMED'\n&MSG     SETB  1                        INDICATE MESSAGE ISSUED\n         AGO   .NOREMV\n.WARN1   ANOP  ,\n         SPACE 1\n         MNOTE 4,'REMOVE=YES AND FUNCTN=TRKCAP ARE MUTUALLY EXCLUSIVE; *\n                REMOVE=YES IS IGNORED'\n&MSG     SETB  1                        INDICATE MESSAGE ISSUED\n.NOREMV  ANOP  ,\n&BIT(2)  SETB  0                        RESET REMOVE FLG FOR STAR PARMS\n.**********************************************************************\n.*  SYNTAX CHECKING OF MAXSIZE KEYWORD\n.**********************************************************************\n.TRKC070 ANOP  ,\n         AIF   ('&MAXSIZE' EQ 'NO').NOMAX\n         AIF   (T'&MAXSIZE EQ 'O').NOMAX\n         AIF   ('&MAXSIZE' NE 'YES').GARMSG2\n         AIF   ('&FUNFLG' EQ 'C').WARN2\n&BIT(3)  SETB  1                        SET MAXSIZE FLG FOR STAR PARMS\n         AGO   .TRKC080                 ON TO NEXT KEYW\n.GARMSG2 ANOP  ,\n         SPACE 1\n         MNOTE 4,'MAXSIZE= OPERAND NOT RECOGNIZED; ''NO'' IS ASSUMED'\n&MSG     SETB  1                        INDICATE MESSAGE ISSUED\n         AGO   .NOMAX\n.WARN2   ANOP  ,\n         SPACE 1\n         MNOTE 4,'MAXSIZE=YES AND FUNCTN=TRKCAP ARE MUTUALLY EXCLUSIVE;*\n                MAXSIZE=YES IS IGNORED'\n&MSG     SETB  1                        INDICATE MESSAGE ISSUED\n.NOMAX   ANOP  ,\n&BIT(3)  SETB  0                        RESET MAXSIZE FLG FOR\n.*                                      STAR PARMS\n.**********************************************************************\n.*  SYNTAX CHECKING OF LAST KEYWORD\n.**********************************************************************\n.TRKC080 ANOP  ,\n         AIF   ('&LAST' EQ 'NO').NOLAST\n         AIF   (T'&LAST EQ 'O').NOLAST\n         AIF   ('&LAST' NE 'YES').GARMSG3\n         AIF   ('&FUNFLG' EQ 'C').WARN3\n&BIT(5)  SETB  1                        SET LAST FLG FOR STAR PARMS\n         AGO   .TRKC090                 ON TO NEXT KEYW\n.GARMSG3 ANOP  ,\n         SPACE 1\n         MNOTE 4,'LAST= OPERAND NOT RECOGNIZED; ''NO'' IS ASSUMED'\n&MSG     SETB  1                        INDICATE MESSAGE ISSUED\n         AGO   .NOLAST\n.WARN3   ANOP  ,\n         SPACE 1\n         MNOTE 4,'LAST=YES AND FUNCTN=TRKCAP ARE MUTUALLY EXCLUSIVE;   *\n               LAST=YES IS IGNORED'                              82105\n&MSG     SETB  1                        INDICATE MESSAGE ISSUED\n.NOLAST  ANOP  ,\n&BIT(5)  SETB  0                        RESET LAST FLG FOR STAR PARMS\n.**********************************************************************\n.*  SYNTAX CHECKING OF BALANCE KEYWORD\n.**********************************************************************\n.TRKC090 ANOP  ,\n         AIF   (T'&BALANCE EQ 'O').BALOFF\n         AIF   ('&BALANCE'(1,1) EQ '(').BALREG\n&SET(6)  SETC  '&BALANCE'               SAVE KEYW VALUE\n&FLGA(3) SETC  'A'                      INDICATE ADDR-FORM\n         AGO   .BALON                   ON TO SETTING BALANCE FLG\n.BALREG  ANOP  ,\n         AIF   (N'&BALANCE GT 1).BADBAL\n&SET(6)  SETC  '&BALANCE(1)'            SAVE KEYW VALUE W/O PARENS\n&FLGA(3) SETC  'R'                      INDICATE REG-FORM\n         AGO   .BALON                   ON TO SETTING BALANCE FLG\n.BADBAL  ANOP  ,\n         SPACE 1\n         MNOTE 8,'BALANCE= OPERAND INVALID; NO CODE PRODUCED'\n&QUIT    SETB  1                        DEFER TERMINATION\n.BALOFF  ANOP  ,\n&BIT(4)  SETB  0                        RESET BALANCE FLG FOR\n.*                                      STAR PARMS\n         AGO   .TSTERR\n.BALON   ANOP  ,\n&BIT(4)  SETB  1                        SET BALANCE FLG FOR STAR PARMS\n.**********************************************************************\n.*  TEST TO SEE IF ANY SERIOUS (TERMINATING) ERRORS WERE FOUND\n.**********************************************************************\n.TSTERR  AIF   (&MSG EQ 0 AND &QUIT EQ 0).SETBITS  DON'T SPACE IF CLEAN\n         SPACE 1\n         AIF   (&QUIT EQ 0).SETBITS     CONTINUE IF NO TERMINAL ERRORS\n         MEXIT ,                        OTHERWISE, GIVE IT UP\n.**********************************************************************\n.*  SET STAR PARM FLAGS FOR CODE GENERATION\n.**********************************************************************\n.SETBITS ANOP  ,\n&BITS    SETC  '&BIT(1).&BIT(3).&BIT(2).&BIT(4).&BIT(5).&BIT(6).&BIT(7)*\n               .0'\n.**********************************************************************\n.*  CHECK SYNTAX OF MF KEYWORD\n.**********************************************************************\n.MFCHECK AIF   ('&MF' EQ 'I').DOCNOP\n         AIF   (N'&MF NE 2).MFBAD\n         AIF   ('&MF(1)' NE 'E').MFBAD\n         AGO   .TSTSA                   GO TEST FOR REG SAVE REQ\n.DOCNOP  ANOP  ,\n         CNOP  0,4                      BOUNDARY ALIGNMENT\n.TSTSA   ANOP  ,             SAVE REGISTER CODE REMOVED          82105\n.NOSA    AIF   ('&MF' EQ 'I').STNDARD\n&LABEL   IHBINNRA &MF(2)                GO LOAD PARM REG\n         AGO   .XECUTE                  GO GEN CODE TO INIT PARM LIST\n.MFBAD   ANOP  ,\n         MNOTE 8,'MF= OPERAND INVALID; PROCESSING TERMINATED'\n         SPACE 1\n         MEXIT ,                        A BAD MF KEYW IS FATAL\n.STNDARD ANOP  ,\n&LABEL   BALS  1,*+16                   BRANCH AROUND LIST\n&LABEL   SETC  ''                       CAN USE A LABEL ONLY ONCE\n.LIST    ANOP  ,\n&LABEL   DC    A(0)                     DVCT OR UCB ADDR, OR DEVTYPE\n         AIF   ('&MF' EQ 'L').SKIPFLG   IF LIST, GEN ONLY ZERO'S\n         DC    B'&BITS'                 FLAG BYTE\n         AGO   .TRKC100                 GO AROUND LIST CODE\n.SKIPFLG ANOP  ,\n         DC    X'00'                    FLAG BYTE\n.TRKC100 ANOP  ,\n         DC    X'00'                    RESERVED\n         DC    AL2(0)                   TRACK BALANCE\n         AIF   ('&MF' EQ 'L').SKIPR     GEN ZERO FOR\n         AIF   ('&FLGA(4)' EQ 'R').SKIPR  RECORD NUMBER UNLESS\n         AIF   (T'&R NE 'N').SKIPR      IT'S THE IMMEDIATE-FORM\n         DC    AL1(&R)                  RECORD NUMBER\n         AGO   .TRKC110\n.SKIPR   ANOP  ,\n         DC    AL1(0)                   RECORD NUMBER\n.TRKC110 ANOP  ,\n         AIF   ('&MF' EQ 'L').SKIPK     GEN ZERO FOR\n         AIF   ('&FLGA(5)' EQ 'R').SKIPK  KEY LENGTH UNLESS\n         AIF   (T'&K NE 'N').SKIPK      IT'S THE IMMEDIATE-FORM\n         DC    AL1(&K)                  KEY LENGTH\n         AGO   .TRKC120\n.SKIPK   ANOP  ,\n         DC    AL1(0)                   KEY LENGTH\n.TRKC120 ANOP  ,\n         AIF   ('&MF' EQ 'L').SKIPDD    GEN ZERO FOR\n         AIF   ('&FLGA(6)' EQ 'R').SKIPDD  DATA LENGTH UNLESS\n         AIF   (T'&DD NE 'N').SKIPDD    IT'S THE IMMEDIATE-FORM\n         DC    AL2(&DD)                 DATA LENGTH\n         AGO   .TRKC130\n.SKIPDD  ANOP  ,\n         DC    AL2(0)                   DATA LENGTH\n.TRKC130 ANOP  ,\n         AIF   ('&MF' EQ 'L').FINISH    GEN NO INSTRUCTION IF LIST REQ\n.XECUTE  ANOP  ,\n         AIF   ('&SET(1)' EQ '*').TRKC140  IF *, THEN DVCT SOURCE IS\n.*                                      ALREADY IN THE STAR LIST\n         AIF   (&BIT(7)).GOTTYPE        BR IF TYPE PROVIDED\n         AIF   ('&FLGA(1)' EQ 'R').BR1  BR IF REG-FORM\n         AIF   ('&FLGA(1)' NE 'A').TRKC140  BR IF NOT ADDR-FORM\n         ICM   15,15,&SET(1)            MOVE ADDR OF DEVTAB OR   86041\n         ST    15,0(0,1)                UCB TO LIST\n         AGO   .TRKC140\n.BR1     ANOP  ,\n         ST    &SET(1),0(0,1)           ST @ OF DEVTAB OR UCB IN LIST\n         AGO   .TRKC140\n.GOTTYPE AIF   ('&FLGA(1)' EQ 'R').TYPER  BR IF REG-FORM\n.*                                      OTHERWISE, IT'S ADDR-FORM\n         IC    15,&SET(1)               MOVE DEVICE TYPE\n         STC   15,3(0,1)                TO LIST\n         AGO   .TRKC140\n.TYPER   ANOP  ,\n         STC   &SET(1),3(0,1)           ST DEVICE TYPE IN LIST\n.TRKC140 ANOP  ,\n         AIF   ('&MF' EQ 'I').NOFLAG    FLGS ARE DC'D FOR I-FORM\n         AIF   (T'&FUNCTN EQ 'O').NOFLAG  USE RESIDUAL FLGS IF NO FUNCT\n         MVI   4(1),B'&BITS'            FLAGS TO LIST\n.NOFLAG  ANOP  ,\n         AIF   (&BIT(4) NE 1).TRKC150   BR IF NO BALANCE PROVIDED\n         AIF   ('&SET(6)' EQ '*').TRKC150  IF '*', BAL IS IN STAR\n.*                                      PARM LIST ALREADY\n         AIF   ('&FLGA(3)' EQ 'R').BR2  BR IF REG-FORM\n         ICM   15,3,&SET(6)             TRK BALANCE              86041\n         STH   15,6(0,1)                TO LIST\n         AGO   .TRKC150\n.BR2     ANOP  ,\n         STH   &SET(6),6(0,1)           ST TRK BALANCE IN LIST\n.TRKC150 ANOP  ,\n         AIF   ('&SKIP' EQ 'P3').RKDD3  BR IF RKDD WAS NOT PROVIDED\n         AIF   ('&FLGA(2)' EQ 'R').BR3  BR IF REG-FORM\n         ICM   15,15,&SET(2)            MOVE RKDD                86041\n         ST    15,8(0,1)                TO LIST\n         AGO   .EXITBR\n.BR3     ANOP  ,\n         ST    &SET(2),8(0,1)           ST RKDD IN LIST\n         AGO   .EXITBR\n.RKDD3   ANOP  ,\n         AIF   (T'&R EQ 'O').AKY        BR IF R NOT PROVIDED\n         AIF   ('&FLGA(4)' NE 'R').RADDR  BR IF NOT REG-FORM\n         STC   &SET(3),8(0,1)           ST REC NO. IN LIST\n         AGO   .AKY\n.RADDR   ANOP  ,\n         AIF   (T'&R EQ 'N').NRX        BR IF IMMEDIATE-FORM\n         IC    15,&SET(3)               MOVE REC NO.\n         STC   15,8(0,1)                TO LIST\n         AGO   .AKY\n.NRX     ANOP  ,\n         AIF   ('&MF' EQ 'I').AKY       IF I-FORM, R IS DC'D\n         MVI   8(1),&R                  ST REC NO. IN LIST\n.AKY     ANOP  ,\n         AIF   (T'&K EQ 'O').ADDY       BR IF K NOT PROVIDED\n         AIF   ('&FLGA(5)' NE 'R').KADDR  BR IF NOT REG-FORM\n         STC   &SET(4),9(0,1)           ST KEY LENGTH IN LIST\n         AGO   .ADDY\n.KADDR   ANOP  ,\n         AIF   (T'&K EQ 'N').NKX        BR IF IMMEDIATE-FORM\n         IC    15,&SET(4)               MOVE KEY LENGTH\n         STC   15,9(0,1)                TO LIST\n         AGO   .ADDY\n.NKX     ANOP  ,\n         AIF   ('&MF' EQ 'I').ADDY      IF I-FORM, K IS DC'D\n         MVI   9(1),&K                  ST KEY LENGTH IN LIST\n.ADDY    ANOP  ,\n         AIF   (T'&DD EQ 'O').EXITBR    BR IF DD NOT PROVIDED\n         AIF   ('&FLGA(6)' NE 'R').DDADDR  BR IF NOT REG-FORM\n         STH   &SET(5),10(0,1)          ST DATA LENGTH IN LIST\n         AGO   .EXITBR\n.DDADDR  ANOP  ,\n         AIF   (T'&DD EQ 'N').NDDX      BR IF IMMEDIATE-FORM\n         ICM   15,3,&SET(5)             MOVE DATA LENGTH         86041\n         STH   15,10(0,1)               TO LIST\n         AGO   .EXITBR\n.NDDX    ANOP  ,\n         AIF   ('&MF' EQ 'I').EXITBR    IF I-FORM, DD IS DC'D\n         MVI   10(1),&DD/256            ST DATA LENGTH(1) IN LIST\n         MVI   11(1),&DD-((&DD/256)*256) ST DATA LENGTH(2) IN LIST\n.EXITBR  ANOP  ,\n         L     R15,@SERVICE  LOAD THE SERVICE ROUTINE ADDRESS    82105\n         LA    R0,VENDVCAP   SET THE ENTRY CODE                  82105\n         BALSR R14,R15       SERVICE THE REQUEST                 82105\n.FINISH  MEXIT ,\n.DSECT   ANOP  ,\n         DS    0F                       ALIGN TO FULL WORD BOUNDARY\n&NAME    DS    0CL12                    STAR PARM LIST MAP\nSTARUCBA DS    0F                       UCB ADDRESS\nSTARDCTA DS    0F                       DEVICE TABLE ADDRESS\n         DS    XL3\nSTARTYPE DS    XL1                      DEVICE TYPE\nSTARFLGS DS    XL1                      FUNCTION AND OPTIONS\nSTARFUNC EQU   B'10000000'              FUNCTION: 0=TRKBAL, 1=TRKCAP\nSTARMAXS EQU   B'01000000'              1=MAXSIZE REQUESTED\nSTARREMV EQU   B'00100000'              1=REMOVE REQUESTED\nSTARUBAL EQU   B'00010000'              1=CALLER PROVIDED BALANCE\nSTARLAST EQU   B'00001000'              1=SPECIAL LAST RCD REQUEST\nSTARDTU  EQU   B'00000110'              DVCT ENTRY SOURCE FLAGS:\n*                                       00=DVCT ENTRY ADDRESS PROVIDED\n*                                       01=RESERVED\n*                                       10=UCB ADDRESS PROVIDED\n*                                       11=DEVICE TYPE PROVIDED\nSTARLOC  EQU   B'00000001'              LOC=ANY. DEVTAB OR UCB  GP99133\n         DS    XL1                      RESERVED\nSTARBAL  DS    H                        TRACK BALANCE\nSTARRKDD DS    0F                       RECORD INFO AS DEFINED BELOW\nSTARR    DS    XL1                      RECORD NUMBER\nSTARKL   DS    XL1                      KEY LENGTH\nSTARDL   DS    H                        DATA LENGTH\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SERVCALL": {"ttr": 11527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x12\\x04?\\x16\"\\x00I\\x00,\\x00\\x06\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2012-02-12T16:22:00", "lines": 73, "newlines": 44, "modlines": 6, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SERVCALL &CODE,&ADDR,&REG2,&ERR=,&CC0=,&CC4=,&CC8=,&LEN=,     *\n               &MODE=BAL,&OPT=                                  GP06287\n         GBLC  &SRVCM@R,&MACPLAB                                 81148\n         GBLB  &MVSXA                                           GP04234\n         LCLA  &I,&J,&K,&OPA                                    GP06287\n         LCLB  &F0,&F1,&F2,&F3,&F4,&F5,&F6,&F7                  GP06287\n         LCLC  &LERR,&DC                                         81148\n         AIF   ('&MACPLAB' NE '' AND '&NM' NE '').LABTWO        GP12043\n         AIF   ('&MACPLAB' NE '').LABCOM                        GP12043\n         AGO   .LABSET                                          GP12043\n.LABTWO  MACPARM MODE=LBL    EXPAND LABEL FOR MACPLAB           GP12043\n.LABSET  ANOP  ,                                                GP12043\n&MACPLAB SETC  '&NM'                                            GP12043\n.LABCOM  MACPARM R2,&REG2,NULL=SKIP                              85070\n         MACPARM R1,&ADDR,NULL=SKIP\n         AIF   ('&CODE' EQ '').NOR0\n         AIF   ('&CODE'(1,1) EQ '(').REG0\n         MACPARM R0,VEN&CODE\n         AIF   ('&LEN' EQ '').NOR0                               81148\n         MACPARM R0,8,=AL1(&LEN),OP=ICM,MODE=THREE               81148\n         AGO   .NOR0\n.REG0    MACPARM R0,&CODE\n.NOR0    AIF   (T'&OPT EQ 'O').NOOPT   NO OPTIONS               GP06287\n&K       SETA  N'&OPT                                           GP06287\n&J       SETA  0             COUNT OF PROCESSED OPERANDS        GP06287\n&I       SETA  0             CLEAR INDEX                        GP06287\n.ITMLOOP AIF   (&I GE &K).ITMTEST                               GP06287\n&I       SETA  &I+1                                             GP06287\n&DC      SETC  '&OPT(&I)'                                       GP06287\n         AIF   ('&DC' EQ '').ITMLOOP  IGNORE REAL NULL          GP06287\n         AIF   ('&DC' EQ 'NONE').ITMLOOP  IGNORE SEMANTIC NULL  GP06287\n&J       SETA  &J+1                                             GP06287\n&F0      SETB  (&F0  OR '&DC' EQ 'LIST')                        GP06287\n&F0      SETB  (&F0  OR '&DC' EQ 'TEXT')                        GP06287\n&F6      SETB  (&F6  OR '&DC' EQ '2'  OR '&DC' EQ '3')          GP06287\n&F7      SETB  (&F7  OR '&DC' EQ '1'  OR '&DC' EQ '3')          GP06287\n         AGO   .ITMLOOP                                         GP06287\n.ITMTEST ANOP  ,                                                GP06287\n&OPA     SETA  &F0+&F1+&F2+&F3+&F4+&F5+&F6+&F7                  GP06287\n         AIF   (&OPA EQ &J).DONOPT  EACH OPERAND VALID ?        GP06287\n.BADOPT  MNOTE 4,'SERVCALL: ERROR - OPT PARAMETER BAD: &OPT'    GP06287\n.DONOPT  AIF   (&J EQ 0).NOOPT    SKIP IF ONLY NULLS            GP06287\n         MACPARM R0,4,=AL1(&OPA),OP=ICM,MODE=THREE              GP06287\n.NOOPT   MACPARM R15,@SERVICE,OP=L  GET MODULE ADDRESS\n         AIF   ('&MODE' EQ 'BAL' OR '&MODE' EQ '').BALMODE       90337\n         AIF   ('&MODE' EQ 'SYNCH').SYNMODE                      90337\n         MNOTE 8,'INVALID MODE=&MODE'                            90337\n.SYNMODE ANOP  ,                                                 90337\n&MACPLAB SYNCH (15),RESTORE=YES  INVOKE AND SAVE MODE            90337\n         AGO   .COMMODE                                          90337\n.BALMODE AIF   (&MVSXA).BASMODE                                 GP04234\n&MACPLAB BALR  R14,R15       CALL THE @SERVICE ROUTINE          GP04234\n         AGO   .COMMODE                                         GP04234\n.BASMODE ANOP  ,                                                 90337\n&MACPLAB BASSM R14,R15       CALL THE @SERVICE ROUTINE\n.COMMODE AIF   ('&CC0' EQ '' AND '&CC4' EQ '' AND '&CC8' EQ '').NOCC\n         AIF   ('&ERR' EQ '' OR '&ERR' EQ 'NO').NODUPE           81148\n         MNOTE 4,'CC= AND ERR= ARE MUTUALLY EXCLUSIVE'           81148\n.NODUPE  ANOP  ,                                                 81148\n&MACPLAB SETC  ''                                                81148\n         CH    R15,=H'4'     TEST RETURN                         81148\n         MACPARM &CC0,OP=BL,OPR=BLR,MODE=ONE,NULL=SKIP          GP02241\n         MACPARM &CC4,OP=BE,OPR=BER,MODE=ONE,NULL=SKIP          GP02241\n         MACPARM &CC8,OP=BH,OPR=BHR,MODE=ONE,NULL=SKIP          GP02241\n         AGO   .MEND                                             81148\n.NOCC    AIF   ('&ERR' EQ 'NO').MEND                             81148\n&LERR    SETC  '&ERR'                                            81148\n         AIF   ('&LERR' NE '').DOERR                             81148\n&LERR    SETC  '&SRVCM@R'                                        81148\n         AIF   ('&LERR' EQ '').MEND                              81148\n.DOERR   BXH   R15,R15,&LERR  GO TO SET ERROR MESSAGE            81148\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVCOMP": {"ttr": 11530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      SERVCOMP &DSECT=YES,&PFX=WCM,                                 *\n               &FG1=0,&FG2=0,&LINE#=0,&DELTA=1,                        *\n               &BUFAD=0,&BUFMX=0,&RECAD=0,&RECMX=0,&CODAD=0      81263\n         LCLC  &P,&NAME\n&NAME    SETC  '&NM'\n&P       SETC  'WCM'\n         AIF   ('&NAME' NE '').HAVENM\n&NAME    SETC  'SERVCOMP'\n.HAVENM  AIF   ('&DSECT' NE 'YES').NOSECT\n&NAME    DSECT ,\n         AGO   .TESTP\n.NOSECT  AIF   ('&NM' EQ '').TESTP\n&NM      DS    0A .\n.TESTP   AIF   ('&PFX' EQ '').HAVEP\n&P       SETC  '&PFX'\n.HAVEP   ANOP  ,\n&P.BUFAD DC    A(&BUFAD)     CURRENT BLOCK ADDRESS\n&P.BUFMX DC    AL2(&BUFMX)     MAXIMUM BLOCK SIZE\n&P.BUFLN DC    H'0'            OFFSET TO NEXT LINE\n&P.RECAD DC    A(&RECAD)     CURRENT RECORD ADDRESS\n&P.RECMX DC    AL2(&RECMX)     MAXIMUM RECORD LENGTH\n&P.RECLN DC    H'0'            CURRENT RECORD LENGTH\n&P.CODAD DC    A(&CODAD)     ADDRESS OF CODE WORD OR ZERO\n&P.LINE# DC    A(&LINE#)       CURRENT LINE NUMBER (BINARY)\n&P.LINEB DC    CL8' '          CURRENT LINE NUMBER (EBCDIC)\n&P.LINEP DC    A(&LINE#-&DELTA)  PREVIOUS LINE NUMBER\n&P.DELTA DC    A(&DELTA)     LINE NUMBERING INCREMENT (FWD)\n&P.FG1   DC    AL1(&FG1)     PROCESSING FLAGS\n&P.F1NIH EQU   X'80'           NIH FORMAT\n&P.F1OSI EQU   X'40'           OSI FORMAT (X'80' IN LINE# FOR FWD)\n&P.F1HWD EQU   X'20'           HALF-WORD LINE # (RAND, ETC.)\n&P.F1INT EQU   X'10'           NUMBER IN CL8 FORMAT\n&P.F1EDT EQU   X'08'           NUMBER IN 4C.3C FORMAT\n&P.F1TSO EQU   X'04'           LEFT-ADJUSTED LINE NUMBERS\n&P.F1LCC EQU   X'02'           RETURN CARR.CONTROL/LINE/TEXT (+F1TSO)\n&P.F1NB# EQU   X'01'           INSERT NUMBERS EVEN IF NON-BLANK\n&P.FG2   DC    AL1(&FG2)     CONTROL FLAGS\n&P.F2NPR EQU   X'80'           NO LINE DECOMPRESSION (REBLOCK)\n&P.F2RDW EQU   X'40'           V-FORMAT RECORD RETURNED\n&P.F2COD EQU   X'02'           CODE WORD CHECKED\n&P.F2PSW EQU   X'01'           ENCRYPTION/DECRYPTION REQUIRED\n&P.FG3   DC    X'00'         NEW NIH LINE FLAGS\n&P.F3RAW EQU   X'80'           UNCOMPRESSED RECORD\n&P.F3L16 EQU   X'40'           16-BIT LENGTH FIELD\n&P.F3NSP EQU   X'20'           NO SPECIAL CONTROL CHARACTERS\n&P.F3MRK EQU   X'10'           LINE IS FLAGGED 'CHANGED'\n&P.F308  EQU   X'08'             RESERVED\n&P.F3NIF EQU   X'F8'           ALL NEW NIH FLAG BITS\n&P.F3NIH EQU   X'04'           COPY OF NIH FORMAT FLAG\n&P.LINEH DC    C' '         SPILL BYTE FOR EDIT LINE OVERFLOW\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVDEFS": {"ttr": 11532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x07\\x00\\x00\\x01\\x03\\x11/\\x01\\t'\\x7f\\x15\\t\\x00)\\x00\\x1d\\x00\\x07\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.07", "flags": 0, "createdate": "2003-04-22T00:00:00", "modifydate": "2009-10-04T15:09:00", "lines": 41, "newlines": 29, "modlines": 7, "user": "GERHARD"}, "text": "         MACRO ,\n&NM     SERVDEFS &PARM=10\n         GBLC  &MACPLAB,&SRVLMOD(20),&SRVLDEL(20)\n         GBLB  &SRVBMOD(20)\n         GBLB  &BUGBEAR,&ZZSPIE\n         GBLB  &MVS,&MVSSP,&MVSXA,&MVSESA\n         GBLA  &SRVNMOD\n.*--------------------------------------------------------------------*\n.*  SERVDEFS IS USED IN THE PROGRAM'S MAIN SAVE AREA TO EXPAND THE    *\n.*  ADDRESS LABELS FOR STANDARD SERVICE ROUTINES (@SERVICE, @PRINTER, *\n.*  ETC.).  WHEN RUNNING IN DEBUG MODE, IT ALSO EXPANDS PGMTRACE AND  *\n.*  DEBTRACE WORK AREAS.                                              *\n.*--------------------------------------------------------------------*\n         LCLA  &I,&J\n&MACPLAB SETC  '&NM'         ENSURE CORRECT VALUE\n         MACPARM MODE=LABEL\n@SERVICE DS    A             ADDRESS OF @SERVICE ROUTINE\n@SERVEXC DS    A             EXECUTED INSTRUCITON (SVC, BASSM, ...)\n@SERVTCA DS    A             ADDRESS OF @SERVICE TASK CONTROL AREA\n.DSLOOP  AIF   (&I GE &SRVNMOD).NDLOOP\n&I       SETA  &I+1\n         AIF   (&SRVBMOD(&I)).DSLOOP  SKIP EXPANSION ?\n&SRVLMOD(&I)  DS  A\n         AGO   .DSLOOP\n.NDLOOP  AIF   (NOT &ZZSPIE).NDSPIE  SKIP IF NOT (E)SPIE MODE   GP09277\n@SPIEDER DS    A  *DEBUG*    @SPIEDER (E)SPIE INTERCEPT         GP09277\n.NDSPIE  AIF   (NOT &BUGBEAR).PARM  SKIP IF NOT DEBUG MODE\n@TRACE   DS    A  *DEBUG*    PGMTRACE ROUTINE\n    #TRC  DATA    *DEBUG*    PGMTRACE RE-ENTRANT WORK AREA      GP06319\n         AIF   (NOT &MVSXA AND NOT &MVSESA).OLDBUG\n         DBT   MODE=D  *DEBUG*  DEBTRACE WORK AREA\n         AGO   .PARM\n.OLDBUG  DBO   MODE=D  *DEBUG*  DEBTROLD WORK AREA\n.PARM    AIF   ('&PARM' EQ '').MEND\n.*DEFER* AIF   (T'&PARM' NE 'N').MEND\n         AIF   ('&PARM' EQ '0').MEND\nCALLPARM DS    (&PARM)A      PARAMETER LIST FOR SUBCALL, ETC.\nRETCODE  DS    F             PROGRAM RETURN CODE\nRSNCODE  DS    F             ERROR REASON\nRR1CODE  DS    F             RETURNED R1                        GP04068\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVFLAG": {"ttr": 11534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x03\\x01\\x02&_\\x01\\x03\\x07_\"(\\x00\\x95\\x00\\x92\\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-09-22T00:00:00", "modifydate": "2003-03-16T22:28:03", "lines": 149, "newlines": 146, "modlines": 3, "user": "GERHARD"}, "text": "*        SERVFLAG                                     UPDATED ON 90316\n*          CALL CODES (R0) FOR '@SERVICE' ROUTINE\nVENMOD1  EQU   256           ENTRY MODIFIER 1\nVENMOD2  EQU   512           ENTRY MODIFIER 2\nVENMOD3  EQU   768           ENTRY MODIFIER 3\nVENMOD4  EQU   1024          ENTRY MODIFIER 4\nVENMOD5  EQU   1280          ENTRY MODIFIER 5\nVENMOD6  EQU   1536          ENTRY MODIFIER 6\nVENMOD7  EQU   1792          ENTRY MODIFIER 7\nVENMOD8  EQU   2048          ENTRY MODIFIER 8\nVENMOD9  EQU   2304          ENTRY MODIFIER 9\nVENMOD10 EQU   2560          ENTRY MODIFIER 10\nVENMOD11 EQU   2816          ENTRY MODIFIER 11\nVENMOD12 EQU   3072          ENTRY MODIFIER 12\nVENMOD13 EQU   3328          ENTRY MODIFIER 13\nVENMOD14 EQU   3584          ENTRY MODIFIER 14\nVENMOD15 EQU   3840          ENTRY MODIFIER 15\n         SPACE 1\nVENCLOSE EQU   00            CLOSE/FREEMAIN ENTRY\nVENFREEM EQU   00+VENMOD1      CLOSE/FREE - KEEP @PRINTER OPEN\nVENINITG EQU   01            INIT - LOCAL GETMAINS/LOADS/OPENS\nVENLPALD EQU   02            MODULE LOAD FROM LPA, OR STEP/LINKLIB\nVENLPADL EQU   02+VENMOD1      MODULE CLOSE AND DELETE\nVENLPA@0 EQU   02+VENMOD2      ZERO MODULE ADDRESS IN USERCVT\nVENAPFON EQU   03            AUTH - SET APF ON\nVENAPFOF EQU   03+VENMOD1      SET APF AUTH OFF\nVENPASON EQU   03+VENMOD2      SET JSCB PASS ON\nVENPASOF EQU   03+VENMOD3      SET JSCBPASS OFF\nVENCANON EQU   03+VENMOD4      SET CSCB CANCEL ON\nVENCANOF EQU   03+VENMOD5      SET CSCB CANCEL OFF\nVENNO522 EQU   03+VENMOD6      SET SMF OFF (NO 522)\nVENDO522 EQU   03+VENMOD7      SET SMF ON (ALLOW 522, ETC.)\nVENUCBUM EQU   05            SEQUENTIAL UCB LOOKUP\nVENUCBNM EQU   05+VENMOD1      LOCATE UCB BY UNITNAME\nVENUCBVS EQU   05+VENMOD2      LOCATE UCB BY VOLSER\nVENUCBDK EQU   05+VENMOD3      LOCATE DISK UCB BY VOLSER\nVENUCBGN EQU   05+VENMOD4      GET GENERIC NAME FOR UCB\nVENUCBDT EQU   05+VENMOD5      GET UCB TYPE FROM GENERIC\nVENTIOLP EQU   06            TIOT ENTRY LOOP\nVENTIOLK EQU   06+VENMOD1      TIOT LOOP - SKIP SPECIAL ENTRIES\nVENTIODD EQU   06+VENMOD2      TIOT - LOCATE DDNAME\nVENTIOUA EQU   06+VENMOD3      TIOT - LOCATE BY UCB ADDRESS\nVENSIOTE EQU   06+VENMOD4      SIOT - LOCATE BY TIOT ADDRESS\nVENSWARL EQU   06+VENMOD5      SWARL - GET SWA (TEXT) FROM SVA TOKEN\nVENSWAAD EQU   06+VENMOD6      SWAAD - GET SWA ADDRESS FROM SVA TOKEN\nVENSWAAB EQU   06+VENMOD7      SWAAB - GET SWA ADDRESS FROM SVA TOKEN\nVENDSABL EQU   06+VENMOD8      DSAB - LOOP THROUGH ENTRIES\nVENDSABD EQU   06+VENMOD9      DSAB - FIND BY DDNAME\nVENSORTB EQU   07            BUBBLE SORT\nVENSORTH EQU   07+VENMOD1      HEAP SORT\nVENBINLK EQU   07+VENMOD3      BINARY TABLE LOOKUP\nVENDVTBL EQU   08            DEVICE TABLE LOCATE\nVENDVCAP EQU   08+VENMOD1      DEVICE CAPACITY/BALANCE\nVENDVEXT EQU   08+VENMOD2      DEVICE EXTENT SIZE CALCULATION\nVENDVSPC EQU   08+VENMOD3      TRK=>CYL; CYL=>TRK CONVERSION\nVENSCHFR EQU   09            SCHEDULE - FREE WORK AREA\nVENSCHIN EQU   09+VENMOD1      GET/INIT CSA WORK AREA\nVENSCHMV EQU   09+VENMOD2      MOVE/UPDATE WORK AREA\nVENSCHED EQU   09+VENMOD3      SCHEDULE AN SRB\nVENPGFIX EQU   09+VENMOD4      PAGEFIX LPA PAGE\nVENSWAPY EQU   09+VENMOD5      SET SWAPPABLE\nVENSWAPN EQU   09+VENMOD6      SET ADDRESS SPACE NONSWAPPABLE\nVENGASID EQU   09+VENMOD7      VALIDATE BY ASID\nVENGASJB EQU   09+VENMOD8      VALIDATE BY JOBNAME\nVENGASCB EQU   09+VENMOD9      VALIDATE ASCB ONLY\nVENSSLOC EQU   09+VENMOD10     LOCATE SUBSYSTEM\nVENSSSET EQU   09+VENMOD11     SPECIFY SUBSYSTEM\nVENLOCAT EQU   10            CATALOG LOOKUP\nVENLOCMT EQU   10+VENMOD1      CAT. LOOK ON P/R AND RSV PACKS\nVENLOCRT EQU   10+VENMOD2      CAT. LOOK ON P/R PACKS ONLY\nVENCATCO EQU   10+VENMOD6      CAT. CONNECT CVOL INDEX\nVENJESVC EQU   11            JES(2) GENERIC SERVICES :\nVENJ2INF EQU   11              JES(2) INFO - GET SUBSYSTEM NAME\nVENLOJOB EQU   11+VENMOD1      GET JOB DATA\nVENMDJOB EQU   11+VENMOD2      RESET HOLD (AND LOCAL) FLAGS\nVENACGET EQU   16            GET CURRENT ACCOUNT/PRIVILEGES\nVENACTST EQU   16+VENMOD1      TEST ACCOUNT NUMBER IN R1\nVENACTSM EQU   16+VENMOD2      TEST AND RETURN ACCOUNT IN R1\nVENACCON EQU   16+VENMOD3      CONVERT INTEGER TO EBCDIC ACCOUNT\nVENACCNX EQU   16+VENMOD4      CONVERT INTEGER ACCOUNT TO EXTERNAL\nVENUSGET EQU   17            GET USER ID\nVENUSTST EQU   17+VENMOD1      TEST USER ID\nVENAUTST EQU   18            TEST ACCOUNT/USERID COMBINATION\nVENAUWYL EQU   18+VENMOD1      TEST ACCT/UID COMBINATION FOR WYLBUR\nVENFMTAC EQU   19            CHECK FORMAT, BUT NOT VALIDITY OF ACCT\nVENFMTLB EQU   19+VENMOD1      CHECK FORMAT OF LIBPAK NAME\nVENFMTWY EQU   19+VENMOD2      CHECK FORMAT OF WYLBUR NAME\nVENFMTTS EQU   19+VENMOD3      CHECK FORMAT OF TSO DSN\nVENGFORM EQU   20            CHECK GDA FORM TABLE\nVENGPAPR EQU   20+VENMOD1      CHECK GDA PAPER COST TABLE\nVENDSTST EQU   32            CHECK DSN (NON-CATLG)\nVENDSCAT EQU   32+VENMOD1      CHECK DSN FROM CATALOG (GDG)\nVENDSABB EQU   32+VENMOD2      EXTRACT 8-BYTE PORTION FROM DSN\nVENDSDS1 EQU   32+VENMOD3      OBTAIN FORMAT 1 DSCB\nVENDSDJ1 EQU   32+VENMOD4      OBTAIN FORMAT 1 DSCB FROM JFCB\nVENDSFMT EQU   32+VENMOD5      FORMAT DSORG/RECFM/OPTCD/BLKL/LRECL\nVENDSMEM EQU   32+VENMOD6      CHECK MEMBER NAME\nVENRJFCB EQU   32+VENMOD7      GET JFCB FOR DDNAME\nVENPDSDE EQU   32+VENMOD8      DECODE PDS DIRECTORY ENTRY\nVENDSDS4 EQU   32+VENMOD9      OBTAIN FORMAT 4 DSCB\nVENDSDJ4 EQU   32+VENMOD10     OBTAIN FORMAT 4 DSCB\nVENDDCLR EQU   32+VENMOD11     RE-INITIALIZE DD HAVING DISP=MOD\nVENDSLIB EQU   33            CHECK DSN ON LIBPAK\nVENDSLIX EQU   33+VENMOD1      CHECK LIBPAK INDEX\nVENDSWYL EQU   34            CHECK WYLBUR DSN\nVENWYLDX EQU   34+VENMOD1      CHECK FOR WYLBUR INDEX\nVENDSGET EQU   34+VENMOD2      CHANGE SHORT TO LONG WYLBUR NAME\nVENDSWYC EQU   34+VENMOD3      CHECK WYLBUR DSN IN CATALOG\nVENDSTSO EQU   35            CHECK TSO DSNAME\nVENDSTSX EQU   35+VENMOD1      CHECK TSO INDEX\nVENDSTET EQU   35+VENMOD2      CHANGE SHORT TO LONG TSO NAME\nVENVSNFG EQU   36            CHECK VOLUME ATTRIBUTE FLAGS\nVENDSANY EQU   36+VENMOD1      CHECK VOLUME/DSNAME FOR VALIDITY\nVENVSTMS EQU   36+VENMOD2      CHECK VS FOR TMS ELIGIBILITY\nVENWCOMP EQU   37            WYLBUR COMPRESS ROUTINE\nVENWDCOM EQU   37+VENMOD1      WYLBUR DECOMPRESS ROUTINE\nVENALCVS EQU   38            ALLOCATION - GET DDNAME FOR VTOC OPEN\nVENALCDS EQU   38+VENMOD1      ALLOCATE A (PERM) DSN FROM JFCB\nVENALCFR EQU   38+VENMOD2      RELEASE ALLOCATED TIOT ENTRY\nVENALCDD EQU   38+VENMOD3      ALLOCATE DD FOR DSN\nVENALCFD EQU   38+VENMOD4      FREE DD\nVENWYLOC EQU   39            WYLBUR MULTI-VOLUME LOCATE\n         SPACE 1\nVAASTC   EQU   X'80'    ACCOUNT PRIVILEGES - INSTALLATION DEFAULT\nVAASYS   EQU   X'40'         SYSTEM PRIVILEGES\nVAASUP   EQU   X'20'         TECH SUPPORT\nVAAINH   EQU   X'10'         IN-HOUSE STAFF\nVAAUSER  EQU   X'08'         PLAIN OLD USER\nVAAOHD   EQU   X'04'         OVERHEAD ACCOUNT (WITH STC,SYS,SUP)\n         SPACE 1\nVRPGER   EQU   0        RETURN VALUES : DISASTROUS ERROR\nVRPARM   EQU   1             BAD PARM OR ENTRY\nVRSYNT   EQU   2             BAD CHARACTER OR SYNTAX ERROR\nVRACCT   EQU   3             BAD ACCOUNT\n         SPACE 1\nVRNTOS   EQU   4             NON-OS DSN\nVRNWYL   EQU   5             NOT LIBPAK/WYLBUR NAME\nVRDLEN   EQU   6             TOO FEW INDEX LEVELS\nVRDLON   EQU   7             TOO MANY INDEX LEVELS\nVRNWYX   EQU   8             INVALID SPECIAL (WYLBUR) INDEX\nVRNPSW   EQU   9             NO PASSWORD ENTRY FOR WYLBUR USER\n         SPACE 1\nVCMPARM  EQU   1   WCOMP/WDCOM:  INVALID PARM OR OPTION LIST\nVCMNEDIT EQU   2             BLOCK NOT IN EDIT FORMAT\nVCMBKLEN EQU   3             INVALID BLOCK LENGTH\nVCMRCLEN EQU   4             INVALID/TRUNCATED RECORD LENGTH\nVCMSEQ#  EQU   5             INVALID SEQUENCE # OR OVERFLOW\nVCMSEQSQ EQU   6             LINE NUMBER OUT OF SEQUENCE\n         SPACE 1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVICE": {"ttr": 11780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x08'\\x8f\\x00E\\x007\\x00.\\x00\\x14\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2008-10-04T00:45:00", "lines": 55, "newlines": 46, "modlines": 20, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SERVICE &CODE,&ADDR,&REG2,&ERR=,&CC0=,&CC4=,&CC8=,&LEN=,      *\n               &MAP=                                             87036\n         GBLA  &SVC@SVC                                          83100\n         GBLB  &SRVCM@P                                          85021\n         GBLB  &SRV#NUT      USE TSA BASSM/SVC IF TRUE          GP03142\n         GBLC  &MACPLAB,&SRVCM@R                                 81148\n         LCLC  &LERR                                             81148\n.*--------------------------------------------------------------------*\n.*  SERVICE INVOKES THE @SERVICE ROUTINE IN ANY OF THREE WAYS:        *\n.*  1) OLD MODE - IF SVC GLOBAL IS NON-ZERO, VIA SVC IGC00SVC         *\n.*  2) OLD MODE - IF SVC GLOBAL IS ZERO, VIA BASSM                    *\n.*  3) NEW MODE - EXECUTE INSTRUCTION (EITHER BASSM OR SVC); REQUIRES *\n.*     NEW SERVINIT MACRO AND SERVDEFS IN SAVE AREA                   *\n.*--------------------------------------------------------------------*\n&NM      MACPARM R2,&REG2,NULL=SKIP                              85070\n         MACPARM R1,&ADDR,NULL=SKIP\n.NOR1    AIF   ('&CODE' EQ '').NOR0\n         AIF   ('&CODE'(1,1) EQ '(').REG0\n         MACPARM R0,VEN&CODE\n         AIF   ('&LEN' EQ '').NOR0                              GP99026\n         MACPARM R0,8,=AL1(&LEN),OP=ICM,MODE=THREE              GP99026\n         AGO   .NOR0\n.REG0    MACPARM R0,&CODE\n.NOR0    AIF   (NOT &SRV#NUT).NOTEXEC                           GP03142\n         AIF   ('&CODE' EQ 'LPALD').NOTSVC   DOESN'T WORK IN SVC\n         MACPARM R15,@SERVICE,OP=L  GET MODULE ADDRESS          GP03142\n         MACPARM 0,@SERVEXC,OP=EX  EXECUTE BASSM OR SVC         GP03142\n         AGO   .COMSVC                                          GP03142\n.NOTEXEC AIF   (&SVC@SVC EQ 0).NOTSVC                            83100\n&MACPLAB SVC   &SVC@SVC      CALL THE SERVICE ROUTINE\n&MACPLAB SETC  ''                                                83100\n         AGO   .COMSVC                                           83100\n.NOTSVC  MACPARM R15,@SERVICE,OP=L  GET MODULE ADDRESS\n&MACPLAB BASSM R14,R15       CALL THE @SERVICE ROUTINE\n.COMSVC  AIF   ('&CC0' EQ '' AND '&CC4' EQ '' AND '&CC8' EQ '').NOCC\n         AIF   ('&ERR' EQ '' OR '&ERR' EQ 'NO').NODUPE           81148\n         MNOTE 4,'CC= AND ERR= ARE MUTUALLY EXCLUSIVE'           81148\n.NODUPE  ANOP  ,                                                 81148\n&MACPLAB SETC  ''                                                81148\n         CH    R15,=H'4'     TEST RETURN                         81148\n         MACPARM &CC0,OP=BL,OPR=BLR,MODE=ONE,NULL=SKIP          GP02241\n         MACPARM &CC4,OP=BE,OPR=BER,MODE=ONE,NULL=SKIP          GP02241\n         MACPARM &CC8,OP=BH,OPR=BHR,MODE=ONE,NULL=SKIP          GP02241\n         AGO   .MEND                                             81148\n.NOCC    AIF   ('&ERR' EQ 'NO').MEND                             81148\n&LERR    SETC  '&ERR'                                            81148\n         AIF   ('&LERR' NE '').DOERR                             81148\n&LERR    SETC  '&SRVCM@R'                                        81148\n         AIF   ('&LERR' EQ '').MEND                              81148\n.DOERR   BXH   R15,R15,&LERR  GO TO SET ERROR MESSAGE            81148\n.MEND    AIF   (&SRVCM@P OR '&MAP' EQ 'NO').MMEND                87036\n&SRVCM@P SETB  1                                                 85021\n         COPY  SERVFLAG                                          85021\n.MMEND   MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVINIT": {"ttr": 11782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x99\\x12O\\x01\\t\\x17\\x9f\\x117\\x00>\\x00,\\x009\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1999-05-04T00:00:00", "modifydate": "2009-06-28T11:37:00", "lines": 62, "newlines": 44, "modlines": 57, "user": "GERHARD"}, "text": "         MACRO ,\n&NM    SERVINIT &LPA=YES,&MAP=YES,&ERR=,&LIST=NO,&AMODE=*,       81167 *\n               &MODE=NEW                                        GP03129\n         GBLA  &SVC@SVC      SVC NUMBER OF @SERVICE              83100\n         GBLB  &MVSESA                                          GP04234\n         GBLB  &SRVCM@P,&SRV#NUT\n         GBLC  &PRTMAC,&SRVCM@R,&MACPLAB\n         AIF   ('&MODE' EQ 'NEW' AND &MVSESA).CALLSUB           GP04234\n&NM      MACPARM R15,15,@SERVICE,MODE=THREE,OP=ICM,OPR=ICM\n         BNZ   ZZZZ&SYSNDX+4\n         AIF   ('&LPA' NE 'YES').NOLPA\n         AIF   (&SVC@SVC EQ 0).DOLPA                             83100\n         SR    R0,R0         REQUEST GETMAIN/INITIALIZATION      83100\n         SVC   &SVC@SVC      CALL IT                             83100\n         AGO   .COMMON                                           83100\n.DOLPA   LPALOOK EP=@SERVICE,DCB=4                              GP03262\n         AGO   .COMMON\n.NOLPA   AIF   ('&LPA' NE 'LINK').DOLOAD                        GP09179\n         L     R0,=V(@SERVICE)    LINK IN                       GP09179\n         AGO   .COMMON                                          GP09179\n.DOLOAD  LOAD  EP=@SERVICE\n.COMMON  AIF   ('&AMODE' EQ '*' AND &MVSESA).BSM                GP04234\nZZZZ&SYSNDX ST R0,@SERVICE\n         AIF   (NOT &MVSESA).COMSET                             GP04234\n         AIF   ('&AMODE' EQ '31').AM31                          GP99124\n         AIF   ('&AMODE' EQ '24').AM24                          GP99124\n         MNOTE 4,'UNDEFINED AMODE=&AMODE - AM24 ASSUMED'        GP99124\n.AM24    MVI   @SERVICE,0    FORCE LOW                          GP99124\n         AGO   .COMSET                                          GP99124\n.AM31    OI    @SERVICE,X'80'   SET AM31 ON BASSM INVOCATION    GP99124\n         AGO   .COMSET                                          GP99124\n.BSM     ANOP  ,                                                GP99124\nZZZZ&SYSNDX LR R15,R0        COPY ADDRESS                       GP99124\n         BSM   R15,0         IMPART CURRENT MODE                GP99124\n         ST    R15,@SERVICE  AND STASH IT                       GP99124\n         AGO   .COMSET\n.*--------------------------------------------------------------------*\n.*  NEW INTERFACE FOR EXTERNAL INITIALIZATION ROUTINE SUBSERV         *\n.*--------------------------------------------------------------------*\n.*\n.CALLSUB ANOP  ,                                                GP03129\n&NM      MACPARM R0,(R0),MODE=EVEN,OP=SR,OPR=SR                 GP03129\n         MACPARM R1,@SERVICE   LOCATE THE SERVDEFS AREA         GP03129\n         L     R15,=V(SUBSERV)  CALL INITIALIZATION ROUTINE     GP03129\n         BASR  R14,R15       CALL IT                            GP03129\n&SRV#NUT SETB  1             USE NEW INTERFACE                  GP03129\n.COMSET  AIF   ('&ERR' EQ '').NOERR                              81148\n&SRVCM@R SETC  ''                                                81148\n         AIF   ('&ERR' EQ 'NO').NOERR                            81148\n&SRVCM@R SETC  '&ERR'                                            81148\n.NOERR   AIF   ('&MAP' EQ 'NO').MEND\n         AIF   (&SRVCM@P).MEND\n&SRVCM@P SETB  1\n         PUSH  PRINT\n         AIF   ('&LIST' NE 'NO').DOLIST                          81167\n         PRINT OFF                                               81167\n         AGO   .CMLIST                                           81167\n.DOLIST  PRINT ON,GEN                                            81167\n.CMLIST  SPACE 1                                                 81167\n         COPY  SERVFLAG\n         POP   PRINT\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVJES": {"ttr": 11784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x022\\x7f\\x01\\x06(?\\x15\\x08\\x00q\\x00l\\x00\\x11\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-11-23T00:00:00", "modifydate": "2006-10-10T15:08:00", "lines": 113, "newlines": 108, "modlines": 17, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SERVJES &DSECT=,&OPT=,&PFX=SJ                  ADDED ON 90274\n         LCLC  &S,&P\n         LCLA  &I,&J\n&P       SETC  '&PFX'\n&S       SETC  '&NM'\n         AIF   ('&DSECT' EQ 'NO').NODS\n         AIF   ('&S' NE '').DODS\n&S       SETC  'SERVJES'\n.DODS    ANOP  ,\n&S       DSECT ,             @SERVICE JES INTERFACE MAPPING\n         AGO   .PODS\n.NODS    ANOP  ,\n&S       DS    0D            @SERVICE JES INTERFACE LIST\n.PODS    ANOP  ,\n&P.SSNAM DS    CL8           SUB-SYSTEM NAME\n&P.SSTOK DS    XL8           TOKEN FOR ALESERV ACCESS           GP02327\n&P.SSASC DS    A             JES2 ASCB ADDRESS                  GP02327\n&P.SSASI DS    H             JES2 ASID                          GP02327\n&P.SSCOM DS    C             OS COMMAND CHARACTER                90288\n&P.SSRCH DS    C             READER COMMAND CHARACTER            90288\n.SSLOOP  AIF   (&I GE N'&OPT).DONELUP\n&I       SETA  &I+1\n&S       SETC  '&OPT(&I)'    GET NEXT OPTION\n         AIF   ('&S' EQ '').SSLOOP  BAD KEYPUNCHING ?\n         AIF   ('&S' EQ 'LOJOB').LOJOB\n         AIF   ('&S' EQ 'J2INF').JESINFO                         90288\n         MNOTE 4,'UNDEFINED OPT=&S '\n         AGO   .SSLOOP\n.LOJOB   ORG   &P.SSNAM+8\n&P.1JNAM DS    CL8           JOB NAME (REQ/RET)\n&P.1JNUM DS    CL8           JOB ID/NUMBER (EBCDIC)\n&P.1ACCT DS    CL8           ACCOUNT   (REQ/RET)\n&P.1JQOF DS    XL4           OFFSET TO JQE (REQ/RET)             90288\n&P.1J### DS    HL2           JOB NUMBER (BINARY) (REQ/RET)\n.*.1     DS    XL2             SPARE\n&P.1FLGS DS    X             JES FLAGS\n&P.F1HA  EQU   X'80'           HOLD ALL                          90288\n&P.F1H1  EQU   X'40'           HOLD THIS JOB                     90288\n&P.F1H2  EQU   X'20'           HOLD FOR DUPLICATE JOBNAME        90288\n&P.F1PG  EQU   X'10'           PURGE REQUESTED                   90288\n&P.F1OC  EQU   X'08'           OPERATOR CANCELLED                90288\n&P.F1BSY EQU   X'07'           BUSY ON CPU #                     90288\n&P.1FLG2 DS    X             JES FLAGS\n&P.F1IAF EQU   X'80'           INIT/AFFINITY                     90288\n&P.F1SAF EQU   X'7F'           SYSTEM AFFINITY                   90288\n&P.1FLG3 DS    X             JES FLAGS\n&P.F1MRQ EQU   X'80'           MOVE REQUESTED                    90288\n&P.F1USP EQU   X'40'           UNSPOOLED IOT                     90288\n&P.F1NDP EQU   X'20'           DON'T PROCESS ON SPOOL DUMP       90288\n&P.F1SYD EQU   X'10'                                             90288\n&P.F1TMD EQU   X'08'                                             90288\n&P.F1XMT EQU   X'04'                                             90288\n&P.F1JOB EQU   X'03'           JQE IS A BATCH JOB                90288\n&P.F1TSU EQU   X'02'           JQE IS A TIME SHARING USER        90288\n&P.F1STC EQU   X'01'           JQE IS A START JOB                90288\n&P.1FLG4 DS    X             JES FLAGS\n.*.F1    EQU   X'80'                                             90288\n.*.F1    EQU   X'40'                                             90288\n.*.F1    EQU   X'20'                                             90288\n.*.F1    EQU   X'10'                                             90288\n.*.F1    EQU   X'08'                                             90288\n.*.F1    EQU   X'04'                                             90288\n.*.F1    EQU   X'02'                                             90288\n&P.F1JHD EQU   X'01'           TYPRUN=JCLHOLD                    90288\n&P.1LFG1 DS    X             LOCAL FLAGS\n.*.F1    EQU   X'80'                                             90288\n.*.F1    EQU   X'40'                                             90288\n.*.F1    EQU   X'20'                                             90288\n.*.F1    EQU   X'10'                                             90288\n&P.F1NPT EQU   X'08'           NO PRINT WHEN SENT TO HOPE        90288\n.*.F1    EQU   X'04'                                             90288\n.*.F1    EQU   X'02'                                             90288\n.*.F1    EQU   X'01'                                             90288\n&P.1LFG2 DS    X             LOCAL FLAGS\n&P.F1HDT EQU   X'80'           USER REQUESTED HOLD               90288\n&P.F1RRN EQU   X'40'           JOB RERUN PERMITTED               90288\n&P.F1NST EQU   X'20'           NO-SETUP JOB                      90288\n&P.F1FET EQU   X'10'           ROUTE TO FETCH AFTER EXECUTION    90288\n&P.F1NFY EQU   X'08'           NOTIFY USER                       90288\n&P.F1PAS EQU   X'04'           PASSWORD SUPPLIED AND VERIFIED    90288\n.*.F1    EQU   X'02'                                             90288\n.*.F1    EQU   X'01'                                             90288\n&P.1OCLS DS    0X            ORIGINAL CLASS (LOCAL)\n&P.1LFG3 DS    X             LOCAL FLAGS\n&P.1OPTY DS    0X            ORIGINAL PRIORITY\n&P.1LFG4 DS    X             LOCAL FLAGS\n&P.1QNAM DS    CL4           QUEUE NAME\n&P.1CLS  DS    X             QUEUE TYPE\n&P.1QUE  DS    XL2           QUEUE OFFSET\n&P.1PTY  DS    X             JOB PRIORITY\n         DS    4X            SPARE\n         AGO   .SSLOOP\n.JESINFO ANOP  ,                                                 90288\n&P.2VERS DS    CL8           $HCT VERSION                        90288\n&P.2TON  DS    AL2           THIS NODE (BINARY)                 GP02328\n&P.2TOQ  DS    C,C           THIS NODE (EBCDIC)                  90288\n&P.2MSYS DS    AL2           MAXIMUM SYSTEM NUMBER              GP02328\n&P.2MRJE DS    AL2           MAXIMUM REMOTE NUMBER               90288\n&P.2$HCT DS    A             $HCT ADDRESS                       GP02327\n&P.2$CAT DS    A             $CAT ADDRESS                       GP02327\n&P.2$DCT DS    A             $DCT/RAT ADDRESS                   GP02327\n&P.2$JOB DS    A             $JOBQPTR ADDRESS                   GP02327\n&P.2$JOT DS    A             $JOT ADDRESS                       GP02327\n&P.2$JQH DS    A             $JQHEAD ADDRESS                    GP02327\n&P.2$QNX DS    A             $QINDEXA                           GP02327\n&P.2COMC DS    C             OS COMMAND CHARACTER               GP04234\n&P.2COMR DS    C             READER COMMAND CHARACTER           GP04234\n         DS    2X              SPARES                           GP04234\n         DS    7A              SPARES                            90288\n         AGO   .SSLOOP                                           90288\n.DONELUP ORG   ,\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVLOAD": {"ttr": 11787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x01\\x03\\x07\\x8f\\x01\\x12\\x15O\\x15B\\x00a\\x00\\x1a\\x00\\x16\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2003-03-19T00:00:00", "modifydate": "2012-06-02T15:42:00", "lines": 97, "newlines": 26, "modlines": 22, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SERVLOAD &NAME1,&NAME2,&LFETCH=NO                      GP03246\n.*--------------------------------------------------------------------*\n.*  SERVLOAD INVOKES THE @SERVICE ROUTINE TO LOAD AND STORE MODULES   *\n.*  USING STANDARD CONVENTIONS (E.G., @INPREAD, @PRINTER)             *\n.*  MODULE NAME IS THE SAME AS THE ADDRESS {I.E., @INPREAD DC A(0)}   *\n.*  UNLESS A SECOND PARAMETER IS SPECIFIED {E.G., (@INPREAD,READER) } *\n.*    A THIRD SUBPARAMETER OF N MAY BE SPECIFIED TO INHIBIT EXPANSION *\n.*  OF A DS BY SERVDEFS                                               *\n.*                                                                    *\n.*  2006-06-28  GYP  ADDED LFETCH VALUE LINK. EXPANDS V-CONSTANT TO   *\n.*                   FORCE LINKER TO INCLUDE MODULE STATICALLY.       *\n.*  2003-09-03  GYP  ADDED LFETCH KEYWORD. LFETCH=NO USES SERVCALL    *\n.*                   LPA LOAD (OR PLAIN LOAD IF NOT IN LP); LFETCH=Y  *\n.*                   USES LOAD; LFETCH=DFLT USES SERVCALL UNLESS      *\n.*                   THE DEBUG SWITCH IS SET, THEN IT USES LOAD.      *\n.*--------------------------------------------------------------------*\n         GBLC  &MACPLAB\n         GBLC  &SRVLMOD(20),&SRVLDEL(20)\n         GBLB  &SRVBMOD(20),&BUGBEAR                            GP03246\n         GBLA  &SRVNMOD\n         LCLC  &CL,&CM\n         LCLB  &USELOAD                                         GP03246\n         LCLA  &I,&J,&K,&N\n&N       SETA  N'&SYSLIST\n&MACPLAB SETC  '&NM'\n         AIF   ('&LFETCH' EQ '').DEFLOAD                        GP03246\n         AIF   ('&LFETCH'(1,1) EQ 'Y').SETLOAD                  GP03246\n         AIF   ('&LFETCH' EQ 'LINK').SETLOAD                    GP09179\n         AIF   ('&LFETCH'(1,1) EQ 'N').SVCLOAD                  GP03246\n         AIF   ('&LFETCH' EQ 'DFLT').DEFLOAD                    GP09179\n         MNOTE 4,'SERVLOAD: LFETCH=&LFETCH UNSUPPORTED; USING DFLT'\n.DEFLOAD AIF   (NOT &BUGBEAR).SVCLOAD                           GP03246\n.SETLOAD ANOP  ,                                                GP03246\n&USELOAD SETB  1             USE LOAD RATHER THAN SERVCALL LPALD\n.SVCLOAD AIF   (&N LT 1).OOPS                                   GP03246\n.MEMLOOP AIF   (&I GE &N).TEST\n&I       SETA  &I+1\n&SRVBMOD(&SRVNMOD+1) SETB 0    JUST IN CASE\n.*--------------------------------------------------------------------*\n.*  SUBOPERAND OF FORM (MOD-NAME,DC-NAME)                             *\n.*--------------------------------------------------------------------*\n         AIF   (N'&SYSLIST(&I) EQ 1).TRYONE\n         AIF   ('&SYSLIST(&I,1)' EQ '').MEMLOOP\n&CL      SETC  '&SYSLIST(&I,1)'\n&CM      SETC  '&SYSLIST(&I,1)'\n         AIF   ('&SYSLIST(&I,2)' EQ '').SEE3SUB\n&CM      SETC  '&SYSLIST(&I,2)'\n         AGO   .SEE3\n.SEE3SUB AIF   (K'&CL LT 4).SEE3\n&K       SETA  K'&CM\n         AIF   ('&CL'(1,3) NE 'SUB').SEE3\n&CM      SETC  '&CM'(4,&K-3)                                    GP12154\n&CM      SETC  '@UB'.'&CM.'      '                              GP12154\n&CM      SETC  '&CM'(1,8)\n.SEE3    AIF   (N'&SYSLIST(&I) LT 3).DONTWO\n         AIF   ('&SYSLIST(&I,3)' NE 'N' AND '&SYSLIST(&I,3)' NE 'NO'   *\n               AND '&SYSLIST(&I,3)' NE '''N''').DONTWO\n&SRVBMOD(&SRVNMOD+1) SETB 1    INHIBIT DS/DC EXPANSION\n         AGO   .DONTWO\n.*--------------------------------------------------------------------*\n.*  SUBOPERAND OF FORM MOD-NAME - SAVE IN SAME NAME UNLESS SUB----    *\n.*--------------------------------------------------------------------*\n.TRYONE  ANOP  ,\n&CL      SETC  '&SYSLIST(&I)'\n&CM      SETC  '&SYSLIST(&I)'\n         AIF   (K'&CL LT 4).DONTWO\n         AIF   ('&CL'(1,3) NE 'SUB').DONTWO\n&K       SETA  K'&CM\n&CM      SETC  '&CM'(4,&K-3)                                    GP12154\n&CM      SETC  '@UB'.'&CM.'      '                              GP12154\n&CM      SETC  '&CM'(1,8)\n.DONTWO  AIF   ('&CL' EQ '').MEMLOOP\n&J       SETA  &J+1\n         AIF   (&USELOAD).DOLOAD                                GP03246\n.DOSVC   ANOP  ,                                                GP05013\n         SERVCALL LPALD,=CL8'&CL '                              GP05013\n         AGO   .SV8COM                                          GP03246\n.DOLOAD  AIF   ('&LFETCH' NE 'LINK').SV8LOAD                    GP09179\n&MACPLAB L     R0,=V(&CL)    LINK MODULE                        GP09179\n         AGO   .SV8COM                                          GP09179\n.SV8LOAD ANOP  ,                                                GP09179\n&MACPLAB LOAD  0,EPLOC==CL8'&CL '                               GP03250\n.SV8COM  ANOP  ,                                                GP09179\n&MACPLAB SETC  ''                                               GP03250\n         ST    R0,&CM                                           GP03246\n.*--------------------------------------------------------------------*\n.*  REMEMBER DS NAME FOR SAVE AREA; IF DS DIFFERENT, REMEMBER DELETE  *\n.*--------------------------------------------------------------------*\n&SRVNMOD SETA  &SRVNMOD+1\n&SRVLMOD(&SRVNMOD) SETC  '&CM'\n&SRVLDEL(&SRVNMOD) SETC  '&CL'\n         AGO   .MEMLOOP\n.TEST    AIF   (&J GT 0).GOODBYE\n.OOPS    MNOTE 0,'SERVLOAD - NO USABLE MODULE NAMES SPECIFIED'\n         MACPARM MODE=LBL\n.GOODBYE MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVPDS": {"ttr": 11790, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x986_\\x01\\t#\\x0f#\\t\\x00\\x90\\x000\\x00,\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1998-12-31T00:00:00", "modifydate": "2009-08-18T23:09:00", "lines": 144, "newlines": 48, "modlines": 44, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SERVPDS &DSECT=YES,&PFX=PDD,&RETURN=,&VER=2,&OPT=      GP98365\n.*   CHANGED FOR Y2K SUPPORT, ETC. (NOT FOR PGM OBJECTS)        GP98365\n         LCLC  &P,&NAME\n&NAME    SETC  '&NM'\n&P       SETC  'PDD'\n         AIF   ('&NAME' NE '').HAVENM\n&NAME    SETC  'SERVPDS'\n.HAVENM  AIF   ('&DSECT' NE 'YES').NOSECT\n&NAME    DSECT ,\n         AGO   .TESTP\n.NOSECT  AIF   ('&NM' EQ '').TESTP\n&NM      DS    0A .\n.TESTP   AIF   ('&PFX' EQ '').HAVEP\n&P       SETC  '&PFX'\n.HAVEP   AIF   ('&OPT' EQ 'DISPLAY').DISPLAY  EXHIBIT FORMAT    GP08274\n         AIF   (&VER EQ 1).OLDVER                               GP98365\n&P.NEXT  DC    A(0)          ADDRESS OF CURRENT MEMBER\n&P.INCR  DC    A(0)          BXLE INCREMENT FOR CURRENT MEMBER\n&P.LAST  DC    A(0)          LAST USED BYTE IN BLOCK\n&P.RECFM DC    AL1(0)        RECFM\n&P.TYPE  DC    X'00'         ENTRY TYPE\n&P.TLKED EQU   X'80'           LINKAGE EDITOR ENTRY\n&P.TSPF  EQU   X'40'           SPF ENTRY\n&P.TWYL  EQU   X'20'           WYLBUR ENTRY (LOCAL)\n&P.TDTX  EQU   X'10'           IEBUPDTX ENTRY\n&P.FLAGS DC    X'00'         ENTRY FLAGS (FIELDS PRESENT)\n&P.AOSLE EQU   X'80'           PRODUCED BY VS LINKAGE EDITOR\n&P.FREAL EQU   X'40'           MAIN MEMBER/EPA PRESENT\n&P.FSSI  EQU   X'10'           SSI FIELD PRESENT\n&P.FAPF  EQU   X'08'           APF FIELD PRESENT\n&P.FSCTR EQU   X'04'           SCATTER LOAD MODULE\n&P.FLAG2 DC    X'00'         SECOND FLAG BYTE                   GP98365\n&P.FLAG3 DC    X'00'         THIRD FLAG BYTE                    GP98365\n&P.UDLEN DC    X'00'         NUMBER OF HALFWORDS OF USER DATA\n&P.OSSI  DC    H'0'          OFFSET TO SSI FROM NAME\n&P.OAPF  DC    H'0'          OFFSET TO APF FROM NAME\n         DC    4H'0'         EXTRA FOR EXPANSION                GP98365\n&P.CLRLN EQU   *-&P.TYPE       LENGTH TO CLEAR\n         AIF   ('&OPT' EQ 'BASIC').MEND                         GP08274\n         AIF   (T'&RETURN EQ 'O').MEND                          GP98365\n         AIF   ('&RETURN' NE 'DSECT').NODS2                     GP98365\nSERVPDSR DSECT ,                                                GP98365\n.NODS2   ANOP  ,                                                GP98365\n&P.RALIS DC    C' '          BLANK OR * FOR ALIAS               GP98365\n&P.RNAME DC    CL8' '        EDITED MEMBER NAME                 GP98365\n&P.RSSI  DC    CL8' '        SSI OR BLANKS                      GP98365\n&P.RYMD  DC    CL8' '        CHANGE DATE YYYYMMDD               GP98365\n&P.RJDAY DC    CL3' '        CHANGE DATE JJJ (JULIAN FORM)      GP98365\n&P.RAPF  DC    CL4'AC=N'     APF OR BLANKS                      GP98365\n&P.RMAIN DC    CL8' '        MAIN MEMBER OR SPF UID OR BLANKS   GP98365\n&P.RRMOD DC    CL3' '        24 OR 31 - RESIDENCE MODE (OR ANY) GP98365\n&P.RAMOD DC    CL3' '        24 OR 31 - ADDRESSING MODE         GP98365\n&P.RBLNK EQU   *-&P.RALIS      LENGTH TO BLANK                  GP98365\n         AGO   .MEND                                            GP98365\n.OLDVER  AIF   (&VER EQ 1).VERONE                               GP98365\n         MNOTE 8,'PLEASE USE VER=1 OR VER=2 TO MATCH SERVCALL'  GP98365\n.VERONE  ANOP  ,                                                GP98365\n&P.NEXT  DC    A(0)          ADDRESS OF CURRENT MEMBER          GP98365\n&P.INCR  DC    A(0)          BXLE INCREMENT FOR CURRENT MEMBER  GP98365\n&P.LAST  DC    A(0)          LAST USED BYTE IN BLOCK            GP98365\n&P.RECFM DC    AL1(0)        RECFM                              GP98365\n&P.TYPE  DC    X'00'         ENTRY TYPE                         GP98365\n&P.TLKED EQU   X'80'           LINKAGE EDITOR ENTRY             GP98365\n&P.TSPF  EQU   X'40'           SPF ENTRY                        GP98365\n&P.TWYL  EQU   X'20'           WYLBUR ENTRY (LOCAL)             GP98365\n&P.TDTX  EQU   X'10'           IEBUPDTX ENTRY                   GP98365\n&P.FLAGS DC    X'00'         ENTRY FLAGS (FIELDS PRESENT)       GP98365\n&P.AOSLE EQU   X'80'           PRODUCED BY VS LINKAGE EDITOR    GP98365\n&P.FREAL EQU   X'40'           MAIN MEMBER/EPA PRESENT          GP98365\n&P.FSSI  EQU   X'10'           SSI FIELD PRESENT                GP98365\n&P.FAPF  EQU   X'08'           APF FIELD PRESENT                GP98365\n&P.FSCTR EQU   X'04'           SCATTER LOAD MODULE              GP98365\n&P.UDLEN DC    X'00'         NUMBER OF HALFWORDS OF USER DATA   GP98365\n&P.OSSI  DC    H'0'          OFFSET TO SSI FROM NAME            GP98365\n&P.OAPF  DC    H'0'          OFFSET TO APF FROM NAME            GP98365\n&P.CLRLN EQU   *-&P.TYPE       LENGTH TO CLEAR                  GP98365\n         AIF   ('&OPT' EQ 'BASIC').MEND                         GP08274\n         AIF   (T'&RETURN EQ 'O').MEND                          GP98365\n         AIF   ('&RETURN' NE 'DSECT').NODS\nSERVPDSR DSECT ,\n.NODS    ANOP  ,\n&P.RALIS DC    C' '          BLANK OR * FOR ALIAS\n&P.RNAME DC    CL8' '        EDITED MEMBER NAME\n&P.RSSI  DC    CL8' '        SSI OR BLANKS\n&P.RDATE DC    CL5' '        CHANGE DATE OR BLANKS\n&P.RAPF  DC    CL4'AC=N'     APF OR BLANKS\n&P.RMAIN DC    CL8' '        MAIN MEMBER OR SPF UID OR BLANKS\n&P.RRMOD DC    CL2' '        24 OR 31 - RESIDENCE MODE           90204\n&P.RAMOD DC    CL2' '        24 OR 31 - ADDRESSING MODE          90204\n&P.RBLNK EQU   *-&P.RALIS      LENGTH TO BLANK\n         MEXIT ,\n.DISPLAY ANOP  ,             FORMATTED FOR 80 BYTE DISPLAY LINE\n.*    USED BY SUBROUTINE SUBXDEFM\n&P.RALIS DS    C             ALIAS INDICATOR\n&P.RNAME DS    CL8           MEMBER OR ALIAS NAME\n         DS    C\n&P.RTTR  DS    CL6           TTR OF FIRST RECORD                 81319\n         DS    C\n&P.REPAD DS    CL6\n         DS    C\n&P.SIZE  DS    CL6\n         DS    C\n&P.TXT   DS    CL6\n         DS    CL2\n&P.RATTR DS    CL32          LKED OPTION FIELD\n&P.RATTN EQU   L'&P.RATTR/5    (TEMP)                           GP08274\n         DS    C\n&P.RMODE DS    CL4                                              GP08274\n         DS    C                                                GP08274\n&P.RAPF  DS    CL4                                              GP08274\n         DS    C                                                GP08274\n&P.RMAIN DS    CL8                                              GP08274\n         DS    C\n&P.RSSI  DS    CL8\n&P.EQU   EQU   *\n         SPACE 1                                                 80150\n         ORG   &P.REPAD      REDEFINE FOR NON-LKED ENTRY         80150\n&P.NSSI  DS    CL8           SSI FIELD                           80150\n         DS    C                                                 80150\n&P.DATA  DS    CL54          USER DATA                           80150\n         SPACE 1                                                 83178\n         ORG   &P.REPAD                                          83178\nDSFCENT  DC    CL8'CCYY.DDD' DATE MODIFIED                      GP08274\n         DC    C' '                                             GP08274\nDSFTIM   DC    C'HH:MM'      TIME MODIFIED                       83178\n         DC    C' '                                              83178\nDSFDVER  DC    C'V'          VERSION ID                         GP08274\nDSFVER   DC    C'MM.NN'      VERSION/ MOD                       GP08274\n         DC    C' '                                              83178\nDSFDUID  DC    C'U='                                             83178\nDSFUID   DC    CL7' ',C' '   WYLBUR USES 8                       83178\n         DC    C' '                                              83178\nDSFLCUR  DC    CL7' ',C' '                                       83178\nDSFDCL2  DC    C'CUR',C' '                                       83178\nDSFLMOD  DC    CL7' ',C' '                                       83178\nDSFDCL3  DC    C'CHG'                                            83178\n         SPACE 1                                                 83178\n         ORG   &P.REPAD                                          83178\nDSXMAIN  DC    CL8' '        MAIN MEMBER                        GP08274\nDSXVER   DC    C'VMM.NN',C' '                                   GP08274\nDSXCENT  DC    C'CCYY.DDD',C' '                                 GP08274\nDSXTIME  DC    C'HH:MM',C' '                                    GP08274\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVSORT": {"ttr": 12033, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      SERVSORT &DSECT=YES,&PFX=SOP,&LOW=0,&HIGH=0,&SEQ=C'A',        *\n               &COO=0,&COL=0,&LEN=0                     ADDED ON 82024\n         LCLC  &P,&NAME\n&NAME    SETC  '&NM'\n&P       SETC  'SOP'\n         AIF   ('&NAME' NE '').HAVENM\n&NAME    SETC  'SERVSORT'\n.HAVENM  AIF   ('&DSECT' NE 'YES').NOSECT\n&NAME    DSECT ,\n         AGO   .TESTP\n.NOSECT  AIF   ('&NM' EQ '').TESTP\n&NM      DS    0A .\n.TESTP   AIF   ('&PFX' EQ '').HAVEP\n&P       SETC  '&PFX'\n.HAVEP   ANOP  ,\n&P.LOW   DC    A(&LOW)       LOWEST ENTRY ADDRESS\n&P.FAD   EQU   X'80'         ON IN HIGH TO SIGNAL ADDRESS\n&P.HIGH  DC    A(&HIGH)      ADDRESS (-) / ELSE # OF ENTRIES\n&P.SEQ   DC    AL1(&SEQ)     SORT SEQUENCE (C'A' OR C'D')\n&P.COO   DC    AL1(&COO)     COMPARE OFFSET\n&P.COL   DC    AL1(&COL)     COMPARE LENGTH\n&P.LEN   DC    AL1(&LEN)     ENTRY LENGTH\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVTERM": {"ttr": 12035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x00A\\x00&\\x00\\t\\x00\"\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T00:41:00", "lines": 38, "newlines": 9, "modlines": 34, "user": "GERHARD"}, "text": "         MACRO ,\n&NM    SERVTERM &DELETE=YES                             ADDED ON 81148\n         GBLC  &MACPLAB\n         GBLC  &SRVLMOD(20),&SRVLDEL(20)                        GP03258\n         GBLB  &MVSXA                                           GP04234\n         GBLA  &SRVNMOD                                         GP03258\n.*--------------------------------------------------------------------*\n.*  SERVTERM OPTIONALLY FREES MODULES LOADED BY SERVLOAD (W/EXPLICIT  *\n.*    SECOND NAME).                                                   *\n.*  SERVTERM CALLS @SERVICE TO CLOSE AND FREE KNOWN WORK AREAS AND    *\n.*    MODULES                                                         *\n.*  SERVTERM FREES AND CLEARS THE @SERVICE POINTER                    *\n.*--------------------------------------------------------------------*\n         LCLA  &I,&J                                            GP03258\n         LCLC  &X                                               GP03258\n&X       SETC  '&SYSNDX'                                        GP03258\n&NM      MACPARM R15,15,@SERVICE,OP=ICM,MODE=THREE\n         BZ    ZZZZ&SYSNDX\n         SR    R0,R0\n         AIF   (&MVSXA).BASSM                                   GP04234\n         BALR  R14,R15       CLOSE/FREE                         GP04234\n         AGO   .DELETE                                          GP04234\n.BASSM   BASSM R14,R15       CLOSE/FREE\n.DELETE  DELETE EP=@SERVICE\nZZZZ&SYSNDX XC @SERVICE,@SERVICE\n         AIF   ('&DELETE' NE 'YES').SKIPDEL                     GP03258\n.DELLOOP AIF   (&I GE &SRVNMOD).SKIPDEL                         GP03258\n&I       SETA  &I+1                                             GP03258\n         AIF   ('&SRVLMOD(&I)' EQ '' OR '&SRVLDEL(&I)' EQ '').DELLOOP\n         MACPARM R15,15,&SRVLMOD(&I),OP=ICM,MODE=THREE          GP03258\n&J       SETA  &J+1                                             GP03258\n         BZ    ZZ&X.D&J                                         GP03258\n&MACPLAB SETC  'ZZ&X.D'.'&J'                                    GP03258\n         DELETE EPLOC==CL8'&SRVLDEL(&I) '                       GP03258\n         XC    &SRVLMOD(&I).(4),&SRVLMOD(&I)                    GP03258\n         AGO   .DELLOOP                                         GP03258\n.SKIPDEL MACPARM MODE=LBL    EXPAND FINAL LABEL                 GP03258\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVTREE": {"ttr": 12037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00C\\x01\\x03\\x04\\x1f\\x01\\x03\\x04\\x1f\\x133\\x00\\x11\\x00\\x11\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-02-10T00:00:00", "modifydate": "2003-02-10T13:33:43", "lines": 17, "newlines": 17, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SERVTREE &PFX=?,&KEYLEN=4,&KEYOFF=0,&RECLEN=256,              *\n               &RECNUM=64*1024\n         AIF   ('&NM' EQ '').NOLAB\n&NM      DS    0A            TREE WORK AREA\n.NOLAB   ANOP  ,\n&PFX.ID    DC  C'TREE'       IDENTIFIER FOR THIS\n&PFX.HEAD  DC  2A(0)         HEAD OF TREE\n&PFX.WORK  DC  A(0)          ADDRESS OF WORK AREA\n&PFX.@REC  DC  A(0)          ADDRESS OF RECORD (SAME AS R1)\n&PFX.COUNT DC  A(&RECNUM)    NUMBER OF RECORDS (ESTIMATED)\n&PFX.RECL  DC  AL2(&RECLEN)  LENGTH OF RECORD (INCLUDING KEY)\n&PFX.KEYO  DC  AL2(&KEYOFF)  KEY OFFSET IN RECORD\n&PFX.KEYL  DC  AL1(&KEYLEN)  KEY LENGTH\n&PFX.REC   DC  CL(&RECLEN)' '  CURRENT RECORD (OR JUST KEY FOR LOC)\n&PFX.SIZE  EQU *-&PFX.ID     SIZE OF USER CONTROL AREA\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SERVWORK": {"ttr": 12039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x01\\x03\\x14\\x1f\\x01\\x05\\x02\\x0f\\x14H\\x00\\xc2\\x00Z\\x00\\x06\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2003-05-21T00:00:00", "modifydate": "2005-01-20T14:48:00", "lines": 194, "newlines": 90, "modlines": 6, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SERVWORK &ID,&LEN,&REG=R13,&OPT=GET,&OREG=R9,&BASE=R6,&PREG=\n.*--------------------------------------------------------------------*\n.*  SERVWORK IS USED BY RESIDENT FUNCTIONS (@SERVICE, @PRINTER, ETC.) *\n.*  TO MANAGE WORK AREAS.                                             *\n.*    OPT=GET LOCATES A WORK AREA FOR THE FUNCTION, OR OBTAINS IT     *\n.*      (R15=0 - OLD ADDRESS OF FSA HEADER IN R1; USER ADDRESS IN R0) *\n.*      (R15=4 - R1, R0 SAME; STORAGE OBTAINED ON THIS CALL)          *\n.*                                                                    *\n.*    OPT=SHARE OR OPT=SHR FUNCTIONS LIKE OPT=GET, EXCEPT THAT A WORK *\n.*      ARE OBTAINED PREVIOUSLY BY A HIGHER TASK WILL BE USED.        *\n.*                                                                    *\n.*    OPT=RELEASE FREES THE WORK AREA (LEN PARAMETER EITHER WORK AREA *\n.*      ADDRESS OR ZERO)                                              *\n.*                                                                    *\n.*    ID - RESERVED FOUR BYTE FUNCTION NAME (E.G., '@PAR'), OR        *\n.*      ADDRESS OF FOUR-BYTE NAME                                     *\n.*    LEN - FSALEN (FSAPFXL+USER LENGTH)                              *\n.*--------------------------------------------------------------------*\n         GBLC  &MACPLAB\n         GBLC  &ZZZLNM(128)\n         GBLB  &ZZZLFG,&MVSESA\n         GBLA  &ZZZLNO\n         LCLC  &WHO,&ARG\n         LCLA  &I,&N\n         LCLC  &TAG                                             GP05019\n&TAG     SETC  'S@'.'&SYSNDX'                                   GP05019\n&WHO     SETC  'SUBSERVW'    GET/LOCATE STORAGE\n&MACPLAB SETC  '&NM'\n         AIF   (NOT &MVSESA).OLDSTYL                            GP05019\n         AIF   ('&OPT' NE 'SHR' AND '&OPT' NE 'SHARE').UNSHARE  GP03312\n&WHO     SETC  'SUBSERVS'    GET/LOCATE SHARED STORAGE          GP03312\n.UNSHARE AIF   ('&OPT' NE 'RELEASE').GET                        GP03312\n&WHO     SETC  'SUBSERVZ'    RELEASE STORAGE\n.GET     AIF   (&ZZZLFG).INITDEF\n&ZZZLFG  SETB  1             SHOW DEFINED\n.*--------------------------------------------------------------------*\n.*  DEFINE MODULE<->ORDINAL CORRESPONDENCE FOR MAPTSA WORK AREA       *\n.*    LISTED MODULES MAY OBTAIN A WORK AREA USING THE SERVWORK MACRO  *\n.*    WITH FAST ACCESS (FIXED OFFSET IN TSA). APPROXIMATELY SAME AS   *\n.*    MODULES IN @SERVICE LOADLIST                                    *\n.*--------------------------------------------------------------------*\n.*ZZLNM(000) SETC '@SERVICE'   MUST BE FIRST ONE BY DESIGN\n&ZZZLNM(001) SETC '@SCREENS'   MUST BE FIRST TWO BY DESIGN\n&ZZZLNM(002) SETC '@PRINTER'   MUST BE FIRST TWO BY DESIGN\n&ZZZLNM(003) SETC '@BANDAID'\n&ZZZLNM(004) SETC '@CATREAD'\n&ZZZLNM(005) SETC '@CVLREAD'\n&ZZZLNM(006) SETC '@DCBEXIT'\n&ZZZLNM(007) SETC '@FDRREAD'\n&ZZZLNM(008) SETC '@FORMATS'\n&ZZZLNM(009) SETC '@INPREAD'\n&ZZZLNM(010) SETC '@MESSAGE'\n&ZZZLNM(011) SETC '@OBTAINS'\n&ZZZLNM(012) SETC '@PARSER '\n&ZZZLNM(013) SETC '@PROTECS'\n&ZZZLNM(014) SETC '@SRVJES2'\n&ZZZLNM(015) SETC '@TMSREAD'\n&ZZZLNM(016) SETC '@VOLREAD'\n&ZZZLNM(017) SETC '@WRITER '\n&ZZZLNM(018) SETC 'DEBTRACE'\n&ZZZLNM(019) SETC 'LEXVOLT '\n&ZZZLNM(020) SETC 'PGMTRACE'\n&ZZZLNM(021) SETC 'SUBCAT  '\n&ZZZLNM(022) SETC 'SUBCOMP '\n&ZZZLNM(023) SETC 'SUBCOMP '\n&ZZZLNM(024) SETC 'SUBTIMER'\n&ZZZLNM(025) SETC 'SUBWTO  '\n&ZZZLNO  SETA  25                     NUMBER OF ENTRIES\n.INITDEF AIF   ('&OPT' EQ 'EXPAND').MAKEDC\n&ARG     SETC  '&ID'\n         AIF   ('&ID'(1,1) NE '''').LOOKED\n&N       SETA  K'&ID\n&ARG     SETC  '&ID'(2,&N-2)\n.ARGNQ   ANOP  ,\n&ARG     SETC  '&ARG'.'        '\n&ARG     SETC  '&ARG'(1,4)\n.LOOKLUP AIF   (&I GE &ZZZLNO).LOOKED\n&I       SETA  &I+1\n         AIF   ('&ZZZLNM(&I)'(1,4) NE '&ARG').LOOKLUP\n         MACPARM R0,&I\n         AGO   .DONLIT\n.LOOKED  AIF   ('&ID'(1,1) NE '''').NOTLIT\n         MACPARM R0,=CL4&ID\n         AGO   .DONLIT\n.NOTLIT  MACPARM R0,&ID\n.DONLIT  AIF   ('&OPT' NE 'RELEASE').NEEDLEN\n         MACPARM R1,&LEN,NULL=0   CLEAR IF NOT USER SPECIFIED\n         AGO   .COMLEN\n.NEEDLEN MACPARM R1,&LEN     LOAD THE WORK AREA LENGTH\n.COMLEN  MACPARM R15,=V(&WHO),OP=L\n         MACPARM R14,(R15),OPR=BALR\n         AIF  ('&REG' EQ '' OR '&OPT' NE 'GET').MEND\n         MACPARM &REG(1),(R0),OP=LR  LOAD SAVE AREA (FSAWORK+FSAPFXL)\n         MEXIT ,\n.OLDSTYL AIF   ('&OPT' EQ 'EXPAND').MEND\n         AIF   ('&OPT' EQ 'SHR' OR '&OPT' EQ 'SHARE').OLDGET    GP05019\n         AIF   ('&OPT' EQ 'RELEASE').OLDREL                     GP05019\n.OLDGET  PUSH  USING                                            GP05019\n.*    REGISTER USE DURING SETUP\n.*    R1 - TEMP GETMAIN/OBTAIN RETURN\n.*    R2 - CHAIN ELEMENT (WORK AREA) ID\n.*    R3 - WORK AREA LENGTH\n.*    R4 - CURRENT TCB\n.*    R6 - NEW WORK AREA ADDRESS\n.*    R7 - TEMP CHAIN CHASING\n.*\n&NM      LTCB  R4,USE=YES    GET MY TCB                         GP05019\n&MACPLAB SETC  ''                                               GP05019\n         AIF   ('&ID' NE '').OHVID                              GP05019\n&WHO     SETC  '&SYSECT'(1,4)                                   GP05019\n         L     R2,=CL4'&WHO'                                    GP05019\n         AGO   .OCMID                                           GP05019\n.OHVID   AIF   ('&ID'(1,1) NE '''').OICID                       GP05019\n         ICM   R2,15,=CL4&ID                                    GP05019\n         AGO   .OCMID                                           GP05019\n.OICID   MACPARM R2,15,&ID,OP=ICM,MODE=THREE                    GP05019\n.OCMID   L     R7,TCBFSA     POINT TO CHAIN HEAD                GP05019\n         N     R7,=X'00FFFFFF'  CLEAN FOR AM31                  GP05019\n         SR    R6,R6         CLEAR HIGH BYTE\n         SR    R15,R15       PRESET RETURN CODE\n&TAG.L   ICM   R6,7,1(R7)    LAST ENTRY ON CHAIN ?              GP05019\n         BZ    &TAG.G        YES; GET A WORK AREA               GP05019\n         USING FSAWORK,R6    DECLARE IT\n         CL    R2,FSAID      SAME ID ?\n         BE    &TAG.H        YES; USE IT                        GP05019\n         LR    R7,R6         SWAP\n         B     &TAG.L        TRY AGAIN                          GP05019\n&MACPLAB SETC  '&TAG.G'\n         AIF   ('&PREG' EQ '').ONEND                            GP05020\n         MACPARM &PREG,(&PREG),OP=LTR,OPR=LTR,MODE=EVEN         GP05020\n         BZ    &TAG.Z        NO STORAGE IF CLOSE CALL           GP05020\n.ONEND   MACPARM R3,&LEN,NULL=FSALEN LN OF WORK AREA            GP05019\n         STORAGE OBTAIN,LENGTH=(R3),COND=YES,LOC=BELOW          GP05019\n         BXLE  R15,R15,&TAG.W  CLEAR IT                         GP05019\n&TAG.Z   LM    R14,R12,12(R13)  ERROR IN PROCESSING OR ENVIRONMENT\n         LA    R15,16        SET MAJOR ERROR\n         SLR   R0,R0         INDICATE ENVIRONMENT (PGM ERROR)\n         BSM   0,R14         RETURN                             GP99026\n         SPACE 1\n         DROP  R6\n         USING FSAWORK,R7\n&TAG.W   LR    R6,R1         COPY THIS ONE TO PERMANENT REGISTER\n         LR    R14,R1        COPY FOR MVCL                      GP05019\n         LR    R15,R3                                           GP05019\n         SR    R1,R1                                            GP05019\n         MVCL  R14,R0        CLEAR GOTTEN AREA                  GP05019\n         MVC   FSALINK-FSAWORK(4,R6),FSALINK  CHAIN OLD AREA    GP05019\n         ST    R6,FSALINK    CHAIN THIS AHEAD OF OLD ONE        GP05019\n         DROP  R7\n         USING FSAWORK,R6\n         ST    R2,FSAID      SET ID OF THIS AREA\n         ST    R3,FSASPLEN   SAVE GETMAIN LENGTH\n         ST    R4,FSATCB     AND TCB\n         LA    R15,4         FLAG NEW AREA                      GP05019\n&MACPLAB SETC  '&TAG.H'                                         GP05019\n         MACPARM &BASE,(R6)  PUT INTO USER'S REGISTER           GP05019\n         AIF   ('&REG' EQ '' OR '&OREG' EQ '').ONSAVE           GP05019\n         MACPARM &OREG,(&REG) PRESERVE OLD SAVE                 GP05019\n         LA    &REG,SAVEAREA  HARD-CODED NAME                   GP05019\n         ST    &REG,8(,&OREG) CHAIN                             GP05019\n         ST    &OREG,4(,&REG) LINK                              GP05019\n.ONSAVE  MACPARM MODE=LBL                                       GP05019\n         POP   USING         SKIP ALL BUT BLANKS                GP05019\n         MEXIT ,\n.OLDREL  ANOP  ,\n         PUSH  USING                                            GP05019\n&NM      LA    &OREG,0(,R13)   GET CLEAN SAVE AREA              GP05019\n         SH    &OREG,=AL2(SAVEAREA-FSAWORK)  BACK TO BEGINNING  GP05019\n         USING FSAWORK,&OREG                                    GP05019\n         L     R13,4(,R13)   GET CALLER'S SAVE AREA             GP05019\n         LM    R2,R3,FSASPLEN  GET LENGTH AND TCB BACK\n         L     R3,TCBFSA-TCB(,R3)  POINT TO CHAIN HEAD\n         N     R3,=X'00FFFFFF'                                  GP05019\n&TAG.L   CLM   &OREG,7,1(R3)    POINTER TO OUR AREA ?           GP05019\n         BE    &TAG.F        YES; UNCHAIN                       GP05019\n         ICM   R3,7,1(R3)    GET NEXT ENTRY\n         BNZ   &TAG.L        CHECK IT                           GP05019\n         ABEND 222,DUMP      SHOULD NEVER HAPPEN ?\n         SPACE 1\n&TAG.F   MVC   0(4,R3),FSALINK  UNCHAIN OURS\n         LR    R15,R2        GET SUBPOOL AND LENGTH             GP05019\n         SRL   R15,24        FIX SUBPOOL                        GP05019\n         N     R0,=X'00FFFFFF'   DELETE SUBPOOL                 GP05019\n         STORAGE RELEASE,ADDR=(&OREG),LENGTH=(R2),SP=(15),COND=YES\n         LM    R14,R12,12(R13)    RELOAD CALLER'S REGS          GP05019\n         SR    R15,R15       SET GOOD RETURN                    GP05019\n         BSM   0,R14         RETURN                             GP99026\n         POP   USING\n         MEXIT ,\n.MAKEDC  ANOP  ,\n&NM      DC    &ZZZLNO.D'0'  FIXED OFFSET WORK AREA POINTERS\n         DC    (64-&ZZZLNO)D'0'   FUTURE EXPANSION\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETAM": {"ttr": 12043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x044/\\x01\\x044/\\x149\\x00\\x10\\x00\\x10\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2004-12-07T00:00:00", "modifydate": "2004-12-07T14:39:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SETAM &AM           SET AMODE PER PARAMETER\n         GBLC  &MACPLAB\n  AIF   ('&AM' EQ '31' OR '&AM' EQ 'AM31' OR '&AM' EQ 'AMODE31').AM31\n  AIF   ('&AM' EQ '24' OR '&AM' EQ 'AM24' OR '&AM' EQ 'AMODE24').AM24\n&MACPLAB SETC  '&NM'\n         AIF   ('&AM' EQ '' OR '&AM' EQ 'ANY').LBL\n         MNOTE 4,'SETAM: INVALID MODE &AM'\n.LBL     MACPARM MODE=LBL\n         MEXIT ,\n.AM31    ANOP  ,\n &NM     AM31  WORK=R15\n         MEXIT ,\n.AM24    ANOP  ,\n &NM     AM24  WORK=R15\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETCC": {"ttr": 12045, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x10\\x12o\\x01\\x10\\x12o\\x19F\\x00\\x1d\\x00\\x10\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2010-05-06T00:00:00", "modifydate": "2010-05-06T19:46:00", "lines": 29, "newlines": 16, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&N       SETCC &CODE,&REAS,&RESULT=                    NEW 2003.091 GYP\n.*\n.*   SETCC replaces a condition code, and optional reason code,\n.*   provided it is higher than the current one.\n.*\n.*   For unconditional setting see MVICC and OICC\n.*\n.*   &CODE MAY NOT SPECIFY A REGISTER\n.*\n         GBLC  &ZZCCNAM\n         LCLC  &L,&T\n&L       SETC  'L'''\n&T       SETC  'ZZ'.'&SYSNDX'.'X'\n         AIF   ('&RESULT' EQ '').NONEW\n&ZZCCNAM SETC  '&RESULT'\n.NONEW   AIF   ('&ZZCCNAM' NE '').NODEF\n         MNOTE *,'SETCC: RESULT= NOT SPECIFIED - DEFAULTED TO RETCODE'\n&ZZCCNAM SETC  'RETCODE'\n.NODEF   ANOP  ,\n&N MACPARM &ZZCCNAM+&L&ZZCCNAM-1,&CODE,OP=CLI,OPR=CLM,NULL=SKIP,       *\n               MODE=REV\n         MACPARM &T,OP=BNL,MODE=ONE   NO CHANGE UNLESS HIGHER CODE\n   MACPARM &ZZCCNAM+&L&ZZCCNAM-1,&CODE,OP=MVI,OPR=STC,NULL=SKIP,       *\n               MODE=REV\n   MACPARM &ZZCCNAM+&L&ZZCCNAM+3,&REAS,OP=MVI,OPR=STC,NULL=SKIP,       *\n               MODE=REV\n&T       MACPARM MODE=LABEL\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMFSEAC": {"ttr": 12047, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      SMFSEAC &P=SEAC                                ADDED ON 85270\n.*       THIS MACRO DEFINES THE RECORDS WRITTEN BY THE NCR/COMTEN\n.*       SEAC (STATISTICS AND EXTENDED ACCESS CONTROL) PROGRAMS.\n.*\n         AIF   ('&NM' EQ '').NONAME\n&NM      DS    0F            SEAC SMF RECORD\n.NONAME  ANOP  ,\n&P.RDW   DC    Y(&P.END-*,0)   RECORD DESCRIPTOR\n&P.SYIN  DC    X'02'         SYSTEM ID (VS)\n&P.TYPE  DC    AL1(&P.SMF#)  RECORD TYPE\n&P.SMF#  EQU   X'C9'         DEFAULT RECORD TYPE 201\n&P.TIME  DC    XL4'0'        TIME RECORDED\n&P.DATE  DC    PL4'0'        DATE RECORDED\n&P.SID   DC    CL4' '        SYSTEM/MODEL ID\n&P.IDAT  DC    PL4'0'        DATE RECORD INITIALIZED\n&P.ITIM  DC    XL4'0'        TIME RECORD INITIALIZED (1/1000 SECS)\n&P.TDAT  DC    PL4'0'        DATE RECORD CLOSED\n&P.TTIM  DC    XL4'0'        TIME RECORD CLOSED      (1/1000 SECS)\n&P.VERS  DC    X'0'          SEAC VERSION\n&P.RTYP  DC    X'00'         RECORD TYPE\n&P.RTOK  EQU   0               NORMAL RECORD\n&P.RTTR  EQU   1               TIME-RELEASED RECORD\n&P.RTBU  EQU   2               BUSY RECORD\n&P.RTSR  EQU   3               SECURITY RECORD\n&P.HCH   DC    X'00'         HOST INTERFACE NUMBER\n&P.HSCH  DC    X'00'         HOST SUBCHANNEL NUMBER\n&P.EMU   DC    X'00'         CONTROLLING EMULATOR ID\n&P.CMF   DC    X'00'         MIM FUNCTION # FOR ABOVE\n&P.TLN   DC    XL2'0'        # OF PHYS LINE ON TERMINAL'S NODE\n         DC    FL4'0'          RESERVED                          85273\n         DC    FL4'0'          RESERVED                          85273\n&P.WTCT  DC    XL4'0'        # OF WRITE COMMANDS FROM HOST\n&P.RDCT  DC    XL4'0'        # OF READ/INHIBIT COMMANDS FROM HOST\n&P.ACFG  DC    X'00'         ACCESS CONTROL FLAG (FOR SEC.RCD)\n&P.SATT  DC    X'00'         # OF INVALID PASSWORDS ENTERED\n         DC    Y(0)            SPARE                             85273\n         DC    FL4'0'          SPARE                             85273\n&P.HCC   DC    XL4'0'        # DATA CHARACTERS SENT BY HOST\n&P.TCC   DC    XL4'0'        # DATA CHARACTERS SENT TO HOST\n         DC    FL4'0'          SPARE                             85273\n         DC    FL4'0'          SPARE                             85273\n         DC    FL4'0'          SPARE                             85273\n         DC    FL4'0'          SPARE                             85273\n         DC    FL4'0'          SPARE                             85273\n         DC    FL4'0'          SPARE                             85273\n&P.HSIT  DC    CL3' '        SENDING NODE'S NAME (FROM CMT GEN)\n         DC    C' '            SPARE                             85273\n&P.TSIT  DC    CL3' '        TERMINAL'S NODE'S NAME\n         DC    C' '            SPARE                             85273\n&P.WRU   DC    CL8' '        WRU ANSWERBACK CHARACTERS\n&P.TILS  DC    CL8' '        TILS SWITCHING CHARACTERS USED\n&P.LSET  DC    CL8' '        LINESET (FROM EXTEN= MACRO)\n&P.PASS  DS    0CL8' '       LAST INVALID PASSWORD\n&P.USID  DC    CL8' '        USER\n&P.END   EQU   *               END OF LONGEST RECORD\n.*\n.*       LOST DATA RECORD\n.*\n&P.RTLD  EQU   X'0F'           LOST DATA RECORD\n         ORG   &P.HCH\n&P.LDTY  DC    X'00'         REASON CODE\n&P.LRNI  EQU   X'01'           SEACSMF NOT INITIALIZED (BAD TIME)\n&P.LRBS  EQU   X'02'           BUFFER SLOW-DOWN\n&P.LRFI  EQU   X'03'           SEACSMF FAILD AFTER INITIALIZATION\n         DS    X\n         DS    FL4\n&P.SMFD  DC    PL4'0'        DATE FAILED\n&P.SMFT  DC    XL4'0'        TIME FAILED\n&P.USEK  DC    Y(0)          # OF LOST DATA USERS\n&P.LOGK  DC    Y(0)          # OF LOST DATA LOGONS\n&P.BUSK  DC    Y(0)          # LOST BUSY RECORDS\n&P.UAAK  DC    XL2'0'        # LOST SECURITY RECORDS\n         DS    2FL4\n&P.LDBU  DC    Y(0)          # BUFFERS USED BY SEAC\n&P.LDBM  DC    Y(0)          MAXIMUM BUFFERS GIVEN TO SEAC\n&P.LDBT  DC    Y(0)          BUFFER DEPLETION LEVEL\n&P.LDBS  DC    Y(0)          BUFFER SLOWDOWN LEVEL\n&P.LDRU  DC    Y(0)          ACTIVE SEAC RECORDS USED\n&P.LDRM  DC    Y(0)          MAXIMUM SEAC RECORDS USED\n&P.LDQU  DC    Y(0)          ACTIVE TRANSMIT QUEUE COUNT\n&P.LDQM  DC    Y(0)          MAXIMUM TRANSMIT QUEUE COUNT\n&P.LDSM  DC    FL4'0'        MAXIMUM SYSTEM SEAC RECORDS\n         ORG   &P.END        ENSURE PROPER LENGTH\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMPIOWK": {"ttr": 12050, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n       SMPIOWK ,\n         GBLA  &SMPREL       SMP RELEASE NUMBER                  79216\n         MAPIOWK\n         SPACE 3\n         ORG   DRDSN .       REDEFINE DSN FOR HEADER\nSYSDSN   DS    CL4 .         CDS/ACDS/PTS\n         DS    C\nSYSVS    DS    CL6 .         VOL-SER\n         DS    C\nSYSREL   DS    CL4 .         SYSTEM RELEASE TYPE/NUMBER\n         DS    C\nSYSTSO   DS    CL3 .         TSO\n         DS    C\nSYSNUCC  DS    C'NUC' .      IDENTIFIER\nSYSNUC   DS    C .           NUCLEUS NUMBER\n         DS    C\nSYSPEMC  DS    C'PE'\nSYSPEM   DS    CL5 .         PEMAX VALUE                         79216\n         DS    CL3 ,         SPACER                              79216\nSYSMEM   DS    CL8 .         CURRENT MEMBER NAME\n         SPACE 1\n         ORG   DRBUF\nDMCDSWK  DS    0F ,          SMP WORK AREA\nSCANCCW1 CCW   X'E9',0,X'60',8    SEARCH KEY <= DMKEY2\nSCANCCW2 DC    0A(0),X'08',AL3(0),A(0)    TIC BACK\nSCANCCW3 CCW   X'06',0,X'40',256  READ DATA INTO DMDE2\nSCANCCW4 CCW   X'92',0,0,8   READ CCHHR FOR NEXT TTR\n         SPACE 1\nOPFLAGS  DS    0CL2 .        USER SPECIFIED PROCESSING OPTIONS\nOPF1     DC    X'0' .        LIBRARY TYPE/OPTIONS\nOPF1CDS  EQU   X'80' .       THIS IS A CDS\nOPF1ACDS EQU   X'40' .       ACDS\nOPF1PTS  EQU   X'20' .       PTS\nOPF1HLD  EQU   X'10' .       HLDS\nOPF1NOT  EQU   X'01' .       MEMBER NOT FOUND/EMPTY DS/NO LIST OPTION\n         SPACE 1\nOPF2     DC    X'0' .        LISTING FLAGS\nOPF2FULL EQU   X'80' .       LIST ASSEM/LDMOD CONTROL CARDS\nOPF2ASM  EQU   X'40' .       LIST ASSEMBLER ENTRIES\nOPF2MAC  EQU   X'20' .       LIST MACRO ENTRIES\nOPF2MOD  EQU   X'10' .       LIST OBJECT MODULE ENTRIES\nOPF2LOAD EQU   X'08' .       LIST LOAD MODULE ENTRIES\nOPF2PTF  EQU   X'04' .       LIST PTF ENTRIES\nOPF2DLIB EQU   X'02' .       LIST DLIB ENTRIES\n         SPACE 1\nDMW1     DC    X'0' .        PROCESSING BYTE\nDMW2     DC    X'0' .         DITTO\nDMPUTSAV DS    9F .          REGISTER SAVE AREA\nDMPUTS9  DS    F .           RETURN REGISTER SAVE AREA\nDMDEAT   DS    3A .          DIRECTORY ENTRY SCAN POINTERS\nDMTTR    DC    A(0) .        TTR FOR SEQUENTIAL READ\nDMSCANT  DC    A(0) .        TTR FOR SCAN START\nDMTRTAB  DS    CL256 .       TRANSLATE TABLE\nDMTRINDX DS    5XL3 .        NAME/TTR INDEX FOR FASTER SCANNING\n         SPACE 1\n         DS    0F ,          ALIGN\nDMDE     DS    XL264 .       PRIMARY PROCESSING DIRECTORY BLOCK\nDMKEY2   DS    CL8 .         KEY FIELD FOR SECOND BLOCK\nDMDE2    DS    XL256 .       SECONDARY DIRECTORY BLOCK\nDMDATA   DS    10CL80 .      DATA INPUT FIELD\nDMDATEND DS    9X'FF' .      SCAN STOPPER\n         ORG   ,\n         SPACE 3\nCDSDSECT DSECT ,             MAP THE CDS DIRECTORY ENTRIES\nIOPNAME  DC    0CL8' ',X'0' . NAME/FLAG FIELD\nIOPCDTYP EQU   X'C0' .       OBJ IF ON/ASM IF OFF\nIOPCDTYL EQU   X'40' .       LOAD MODULE ENTRY\nIOPCDTYM EQU   X'80' .       MACRO ENTRY\nIOPTYPE  EQU   X'F0' .       SPECIAL ENTRY IF ALL ON\nIOPTYPED EQU   X'F0' .       DLIB ENTRY\nIOPTYPES EQU   X'F1' .       SYSTEM ENTRY\nIOPTYPEE EQU   X'F2' .       EOF ENTRY\nIOPTYPEP EQU   X'F9' .       PTF ENTRY\nIOPNAME2 DS    CL7 .         REST OF NAME\nIOPTTR   DS    XL3 .         TTR OF DATA, EXTENDED DIRECTORY OR EOF RCD\nIOPUSERL DS    X .           ALIAS FLAG; # OF USER DATA HALFWORDS\nIOPUSERS EQU   *\n         AIF   (&SMPREL GT 1).NEWSMP                             79216\n         SPACE 1\n*     OBJECT MODULE ENTRY\n*\n         ORG   IOPUSERS\nIOPMODID DS    CL2 .         ID OF PTF OR LOCAL OWNER\nIOPDLIB  DS    CL7 .         DISTRIBUTION LIBRARY\nIOPLMODS DS    CL8 .         LOAD MODULE NAMES\n         SPACE 1\n*     LOAD MODULE ENTRY\n*\n         ORG   IOPUSERS\nIOPFLGS2 DS    X .           LKED ATTRIBUTES\nIOPAPF   EQU   X'80' .       ?\nIOPRENT  EQU   X'40' .       RE-ENTRANT\nIOPREUS  EQU   X'20' .       RE-USABLE\nIOPSCTR  EQU   X'10' .       SCATTER LOADED\nIOPOVLY  EQU   X'08' .       OVERLAY\nIOPREFR  EQU   X'04' .       RE-FRESHABLE\nIOPDC    EQU   X'02' .       DOWNWARD CONTEMPTIBLE\nIOPNE    EQU   X'01' .       NOT EDITABLE\nIOPFLGS3 DS    X .           ATTRIBUTE RELATED FLAGS\nIOPCOPY  EQU   X'80' .       COPIED AT SYSGEN TIME\nIOPLINK  EQU   X'40' .       LKED PARMS OBTAINED\nIOPCHREP EQU   X'20' .       TEXT INCLUDES CHANGE/REPLACE STATEMENTS\nIOPSYSLB DS    CL8 .         LIBRARIES LINKED TO                 79217\nIOPSYSL2 DS    CL8 .         ...                                 79217\n         SPACE 1\n*     MACRO ENTRY\n*\n         ORG   IOPUSERS\n         DS    CL2 .         OWNER ID\nIOPASMOD DS    CL8 .         UP TO 50 NAMES OF REASSEMBLY MODULE NAMES\n         SPACE 1\n*     PTF ENTRY\n*\n         ORG   IOPUSERS\nIOPFLGS5 DS    X .           PROCESSING FLAGS\nIOPAPP   EQU   X'80' .       APPLIED\nIOPACC   EQU   X'40' .       ACCEPTED\nIOPFORCE EQU   X'20' .       FORCE RECEIVED\nIOPDUMMP EQU   X'10' .       NAME OF SUPERCEDING PTF EXISTS\nIOPREGEN EQU   X'08' .       PTF APPLIED VIA SYSTEM REGENERATION\nIOPDATE  DS    PL3 .         DATE OF RECEIVE\nIOPPNTRY DS    0CL9 .        SUPERCEDING PTF / LIST OF MODULES CHANGED\nIOPPMODS DS    CL8 .         MODULE NAME\nIOPPIND  DS    X .           SUB-TYPE\nIOPPIND0 EQU   0 .           MACRO CHANGE/REPLACE\nIOPPIND1 EQU   1 .           OBJECT MODULE REPLACEMENT\nIOPPIND2 EQU   2 .           ZAP (EITHER S/ZAP OR X/ZAP)\n         SPACE 1\n*     SYSTEM ENTRY\n*\n         ORG   IOPUSERS\nIOPFLGS7 DS    X .           SYSTEM OPTION FLAGS\nIOPTSO   EQU   X'80' .       SYSTEM HAS TSO\nIOPSREL  DS    CL4 .         SYSTEM TYPE/RELEASE\nIOPNUCID DS    C .           NUCLEUS NUMBER\nIOPPEMAX DS    AL2 .         MAX ENTRIES FOR RECEIVE PRIOR TO ACCEPT\nIOPPDLM  DS    X'FF' .       END OF LIST DELIMITER\n         SPACE 1\n*     DLIB ENTRY\n*\n         ORG   IOPUSERS\nIOPDSYS  DS    CL8 .         LIBRARIES COPIED TO DURING GEN\nIOPDSYS2 DS    CL8                                               79216\n         SPACE 2\n***   PTS LIBRARY ENTRY\n*\n         ORG   IOPUSERS\nIOPPFLG1 DS    X .           LIBRARY PROCESSING\nIOPLIBLK EQU   X'80' .       INDIRECT LINKLIB\nIOPLIBTX EQU   X'40' .       INDIRECT TEXT LIBRARY\nIOPTALIS EQU   X'20' .       TARGET ALIAS EXISTS\nIOPDALIS EQU   X'10' .       DISTRIBUTION ALIAS EXISTS\nIOPDISTN DS    CL8 .         DLIB NAME\nIOPINDLB DS    CL8 .         LIBRARY FROM HEADER\nIOPALISL DS    CL8 .         ALIAS ENTRIES\n         ORG   ,\n         MEXIT ,                                                 79216\n.NEWSMP  SPACE 1                                                 79216\n*     OBJECT MODULE ENTRY                                        79216\n*                                                                79216\n         ORG   IOPUSERS                                          79216\n         DS    X                                                 79216\nIOPMODAP DS    CL7           PTF/APAR NUMBER                     79216\nIOPMODID DS    CL4 .         ID OF PTF OR LOCAL OWNER            79216\n         DS    X                                                 79216\nIOPDLIB  DS    CL8 .         DISTRIBUTION LIBRARY                79216\nIOPLMODS DS    CL8 .         LOAD MODULE NAMES                   79216\n         SPACE 1                                                 79216\n*     LOAD MODULE ENTRY                                          79216\n*                                                                79216\n         ORG   IOPUSERS                                          79216\nIOPFLGS2 DS    X .           LKED ATTRIBUTES                     79216\nIOPAPF   EQU   X'80' .       ?                                   79216\nIOPRENT  EQU   X'40' .       RE-ENTRANT                          79216\nIOPREUS  EQU   X'20' .       RE-USABLE                           79216\nIOPSCTR  EQU   X'10' .       SCATTER LOADED                      79216\nIOPOVLY  EQU   X'08' .       OVERLAY                             79216\nIOPREFR  EQU   X'04' .       RE-FRESHABLE                        79216\nIOPDC    EQU   X'02' .       DOWNWARD CONTEMPTIBLE               79216\nIOPNE    EQU   X'01' .       NOT EDITABLE                        79216\nIOPFLGS3 DS    X .           ATTRIBUTE RELATED FLAGS             79216\nIOPCOPY  EQU   X'80' .       COPIED AT SYSGEN TIME               79216\nIOPLINK  EQU   X'40' .       LKED PARMS OBTAINED                 79216\nIOPCHREP EQU   X'20' .       TEXT INCLUDES CHANGE/REPLACE STATEMENTS\nIOPLODID DS    XL4                                               79216\nIOPSYSLB DS    CL8 .         LIBRARIES LINKED TO                 79217\n         DS    X                                                 79217\nIOPSYSL2 DS    CL8 .         ...                                 79217\n         SPACE 1                                                 79216\n*     MACRO ENTRY                                                79216\n*                                                                79216\n         ORG   IOPUSERS                                          79216\n         DS    X                                                 79216\nIOPMACAP DS    CL7           PTF/APAR LEVEL                      79216\nIOPMACID DS    XL3                                               79217\nIOPASMOD DS    CL8 .         UP TO 50 NAMES OF REASSEMBLY MODULE NAMES\n         SPACE 1                                                 79216\n*     PTF ENTRY                                                  79216\n*                                                                79216\n         ORG   IOPUSERS                                          79216\n         DS    X                                                 79216\nIOPFLGS5 DS    X .           PROCESSING FLAGS                    79216\nIOPAPP   EQU   X'80' .       APPLIED                             79216\nIOPACC   EQU   X'40' .       ACCEPTED                            79216\nIOPFORCE EQU   X'20' .       FORCE RECEIVED                      79216\nIOPDUMMP EQU   X'10' .       NAME OF SUPERCEDING PTF EXISTS      79216\nIOPREGEN EQU   X'08' .       PTF APPLIED VIA SYSTEM REGENERATION 79216\n         DS    XL3                                               79216\nIOPPMODS DS    CL7           SUPER. PTF #                        79216\n         DS    X                                                 79216\nIOPDATE  DS    PL3 .         DATE OF RECEIVE                     79216\nIOPPNTRY DS    CL8 .         MODULE NAME                         79216\nIOPPIND  DS    X .           SUB-TYPE                            79216\nIOPPIND0 EQU   0 .           MACRO CHANGE/REPLACE                79216\nIOPPIND1 EQU   1 .           OBJECT MODULE REPLACEMENT           79216\nIOPPIND2 EQU   2 .           ZAP (EITHER S/ZAP OR X/ZAP)         79216\n         SPACE 1                                                 79216\n*     SYSTEM ENTRY                                               79216\n*                                                                79216\n         ORG   IOPUSERS                                          79216\n         DS    XL2                                               79216\nIOPFLGS7 DS    X .           SYSTEM OPTION FLAGS                 79216\nIOPTSO   EQU   X'80' .       SYSTEM HAS TSO                      79216\nIOPSREL  DS    CL4 .         SYSTEM TYPE/RELEASE                 79216\nIOPNUCID DS    C .           NUCLEUS NUMBER                      79216\nIOPPEMAX DS    AL2 .         MAX ENTRIES FOR RECEIVE PRIOR TO ACCEPT\nIOPPDLM  DS    X'FF' .       END OF LIST DELIMITER               79216\n         SPACE 1                                                 79216\n*     DLIB ENTRY                                                 79216\n*                                                                79216\n         ORG   IOPUSERS                                          79216\n         DS    X                                                 79216\nIOPDSYS  DS    CL8 .         LIBRARIES COPIED TO DURING GEN      79216\n         DS    X                                                 79216\nIOPDSYS2 DS    CL8                                               79216\n         SPACE 2                                                 79216\n***   PTS LIBRARY ENTRY                                          79216\n*                                                                79216\n         ORG   IOPUSERS                                          79216\nIOPPFLG1 DS    X .           LIBRARY PROCESSING                  79216\nIOPLIBLK EQU   X'80' .       INDIRECT LINKLIB                    79216\nIOPLIBTX EQU   X'40' .       INDIRECT TEXT LIBRARY               79216\nIOPTALIS EQU   X'20' .       TARGET ALIAS EXISTS                 79216\nIOPDALIS EQU   X'10' .       DISTRIBUTION ALIAS EXISTS           79216\nIOPDISTN DS    CL8 .         DLIB NAME                           79216\nIOPINDLB DS    CL8 .         LIBRARY FROM HEADER                 79216\nIOPALISL DS    CL8 .         ALIAS ENTRIES                       79216\n         ORG   ,                                                 79216\n         MEND  ,                                                 79216\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPLEVEL": {"ttr": 12292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x041/\\x01\\x041O\"C\\x00\\x08\\x00\\x11\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2004-11-07T00:00:00", "modifydate": "2004-11-09T22:43:00", "lines": 8, "newlines": 17, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SPLEVEL &FUN,&SET=\n.*\n.*    BACKWARD COMPATIBILITY FOR MVS\n.*\n         GBLC  &SYSSPLV\n&SYSSPLV SETC  '0'           BREAK IT\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SRST": {"ttr": 12294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\n\\x00\\x00\\x01\\x042\\x0f\\x01\\t\\x15_\\x136\\x00\\x1d\\x00\\x1c\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.10", "flags": 0, "createdate": "2004-11-15T00:00:00", "modifydate": "2009-06-04T13:36:00", "lines": 29, "newlines": 28, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SRST  &R,&S                                      ADDED GP04234\n         GBLC  &MACPLAB                                         GP08310\n.*\n.*    BACKLEVEL IMPLEMENTATION OF SRST FOR HERCULES\n.*    DOES NOT SUPPORT ALL POSSIBLE USES, ONLY MY COMMON ONES\n.*    E.G., DOES NOT SUPPORT CASE WHERE R2 IS 0\n.*          DOES NOT IGNORE HIGH BYTE/BIT\n.*\n         LCLA  &I\n&I       SETA  &SYSNDX\n&NM      ST    &R,24(,R13)   SAVE\n         ST    &S,16(,R13)   CALLER'S\n         MVI   20(R13),3     PRESET FOR\n         MVI   21(R13),4     NO MATCH         CLC CC=2  L\n&MACPLAB SETC  'ZZS'.'&I'.'L'  LOOP TAG\n         AIF   ('&R' EQ '0' OR '&R' EQ 'R0').NOTEST\n         MACPARM &R,&S,OP=CR,OPR=CR,MODE=EQU  DONE YET ?\n         BE    ZZS&I.X\n.NOTEST  MACPARM R0,1,0(&S),OP=CLM,MODE=THREE\n         BE    ZZS&I.Q\n         LA    &S,1(,&S)\n         B     ZZS&I.L\nZZS&I.Q  MVI   21(R13),2     SET MATCH        CLC CC=1  H\n         ST    &S,24(,R13)   RETURN MATCH LOCATION\nZZS&I.X  L     &R,24(,R13)   RETURN R1 SAME OR UPDATED\n         L     &S,16(,R13)   ORIGINAL R2\n         CLC   21(,R13),20(R13)  SET CC = MATCH, HI - NO MATCH  GP08076\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ST@": {"ttr": 12296, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      ST@   &R,&ADDR,&MVI=\n         AIF   ('&ADDR'(1,1) EQ '(').REG\n&NM      STCM  &R(1),7,1+&ADDR .   STORE ADDRESS BYTES\n         AIF   ('&MVI' EQ '').MEND\n         AIF   ('&MVI'(1,1) EQ '(').MR\n         MVI   &ADDR,&MVI .    SET NEW HIGH BYTE\n         AGO   .MEND\n.MR      STC   &MVI(1),&ADDR .   SET NEW HIGH BYTE\n         AGO   .MEND\n.REG     ANOP  ,\n&NM      STCM  &R(1),7,1&ADDR .   STORE ADDRESS BYTES\n         AIF   ('&MVI' EQ '').MEND\n         AIF   ('&MVI'(1,1) EQ '(').SR\n         MVI   0&ADDR,&MVI .    SET NEW HIGH BYTE\n         AGO   .MEND\n.SR      STC   &MVI(1),0&ADDR .   SET NEW HIGH BYTE\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STAM": {"ttr": 12298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x02\\x00\\x00\\x01\\x05\\x18\\x9f\\x01\\x08'\\x8f\\x00P\\x00\\x07\\x00\\t\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.02", "flags": 0, "createdate": "2005-07-08T00:00:00", "modifydate": "2008-10-04T00:50:00", "lines": 7, "newlines": 9, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      STAM  &R,&S,&T                                 ADDED ON 05189\n.*\n.*       THIS MODULE GENERATES A LABEL FOR MVS COMPATIBILITY\n.*\n&NM      MACPARM MODE=LBL\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STITL": {"ttr": 12300, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&L       STITL &TIT\n.*             THIS MACRO IS USED IN CONJUNCTION WITH MTITL TO\n.*             SPECIFY THE SUB-TITLE FOR A TITLE CARD.\n.*             THE MAIN PORTION OF THE TITLE IS SPECIFIED ONCE,\n.*             VIA MTITL, WHILE EACH STITL SPECIFIES ITS OWN\n.*             SUB-TITLE, WHICH IS PLACED ON THE RIGHT HAND SIDE.\n.*             AN OPERAND OF OFF GENERATES A TITLE WITH NO SUB-TITLE.\n         GBLC  &MTITLE\n         LCLC  &STIT\n         PUSH  PRINT                                             80140\n         PRINT GEN                                               80140\n         AIF   (T'&TIT EQ 'O').OFF\n         AIF   ('&TIT' EQ 'OFF').OFF\n         AIF   ('&TIT'(1,1) EQ '''' AND '&TIT'(K'&TIT,1) EQ '''').OK\n         MNOTE 4,'SUBTITLE NOT DELIMITED BY \"''\" - IGNORED'\n&STIT    SETC  '*** INVALID SUBTITLE ***'\n         AGO   .TIT\n.OK      ANOP\n&STIT    SETC  '&TIT'(2,K'&TIT-2)\n.TIT     TITLE '&MTITLE- &STIT'\n         POP   PRINT                                             80140\n         MEXIT\n.OFF     TITLE '&MTITLE'\n         POP   PRINT                                             80140\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STMAX": {"ttr": 12302, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x00\\x00\\x00\\x01\\x08'\\x8f\\x01\\x08'\\x8f\\x00Q\\x00\\t\\x00\\t\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.00", "flags": 0, "createdate": "2008-10-04T00:00:00", "modifydate": "2008-10-04T00:51:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      STMAX &R,&A,&TYPE=                                      85195\n         LCLA  &I\n&I       SETA  &SYSNDX\n&NM      MACPARM &R,&A,OP=C&TYPE,OPR=C&TYPE.R,MODE=EQU\n         MACPARM ZZZZ&I,OP=BNH,MODE=ONE\n         MACPARM &R,&A,OP=ST&TYPE,OPR=L&TYPE.R,MODE=REV\nZZZZ&I   DS    0H\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STMIN": {"ttr": 12304, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"P\\x00\\x00\\x00\\x01\\x08'\\x8f\\x01\\x08'\\x8f\\x00Q\\x00\\t\\x00\\t\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "80.00", "flags": 0, "createdate": "2008-10-04T00:00:00", "modifydate": "2008-10-04T00:51:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      STMIN &R,&A,&TYPE=                                      85195\n         LCLA  &I\n&I       SETA  &SYSNDX\n&NM      MACPARM &R,&A,OP=C&TYPE,OPR=C&TYPE.R,MODE=EQU\n         MACPARM ZZZZ&I,OP=BNL,MODE=ONE\n         MACPARM &R,&A,OP=ST&TYPE,OPR=L&TYPE.R,MODE=REV\nZZZZ&I   DS    0H\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STOMP": {"ttr": 12306, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x10#o\\x01\\x10#o\\x14\\x18\\x00!\\x00\\r\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2010-08-24T00:00:00", "modifydate": "2010-08-24T14:18:00", "lines": 33, "newlines": 13, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                                GP02318\n&NM      STOMP &IV=,&ADDR=,&VAL=,&ADDRV=                        GP10236\n         GBLA  &ZZSTMP#                                         GP02318\n         GBLC  &ZZSTMP@,&ZZSTMPV                                GP02318\n.*\n.*   STOMP IS USED FOR DEBUGGING TO SET A FOOTPRINT.\n.*   THE FIRST PHYSICAL OCCURRENCE IN AN ASSEMBLY REQUIRES\n.*   AND ADDR= OPERAND TO SPECIFY THE BYTE TO RECEIVE THE FOOTPRINT\n.*   VALUE. THE IV PARAMETER SETS AN OPTION (RE)STARTING COUNT.\n.*\n.*   THE OPTIONAL VAL PARAMETER MAY BE USED TO SAVE UP TO 8 BYTES\n.*   OF DATA IN ADDRV                                           GP10236\n.*\n.*\n.*\n         AIF   ('&IV' EQ '').NONUMB                             GP02318\n&ZZSTMP# SETA  &IV                                              GP02318\n.NONUMB  AIF   ('&ADDR' EQ '').NONADD                           GP02318\n&ZZSTMP@ SETC  '&ADDR'                                          GP02318\n.NONADD  AIF   ('&ADDRV' EQ '').NONVAD                          GP10236\n&ZZSTMPV SETC  '&ADDRV'                                         GP10236\n.NONVAD  ANOP  ,                                                GP02318\n&ZZSTMP# SETA  &ZZSTMP#+1                                       GP02318\n&NM      MVI   &ZZSTMP@,&ZZSTMP#                                GP02318\n MNOTE *,'***************** STOMP &ZZSTMP# ********************'\n         AIF   ('&ZZSTMPV' EQ '' OR '&VAL' EQ '').MEND          GP10236\n         AIF   (K'&VAL LT 3).MVC                                GP10236\n         AIF   ('&VAL'(1,1) NE '(' OR '&VAL'(2,1) EQ '(').MVC   GP10236\n      AIF   ('&VAL'(K'&VAL,1) NE ')' OR '&VAL'(K'&VAL-1,1) EQ ')').MVC\n         ST    &VAL(1),&ZZSTMPV                                 GP10236\n         MEXIT ,                                                GP10236\n.MVC     MVC   &ZZSTMPV,&VAL                                    GP10236\n.MEND    MEND  ,                                                GP02318\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STORAGE": {"ttr": 12308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x15\\x00\\x00\\x01\\x040\\x8f\\x01\\x12\\x04?\\x16)\\x00H\\x00\\x12\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.21", "flags": 0, "createdate": "2004-11-03T00:00:00", "modifydate": "2012-02-12T16:29:00", "lines": 72, "newlines": 18, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      STORAGE &FUN,&LENGTH=,&ADDR=,&SP=,&BNDRY=,&LOC=,&COND=,       *\n               &CALLRKY=,&RELEASE=\n.*\n.*    BACKWARD COMPATIBILITY FOR MVS 3.8 UNDER HERCULES         GP04234\n.*    ALLOW MOST OPERANDS USING GETMAIN/FREEMAIN\n.*\n         LCLA  &K,&RK\n         LCLC  &SB                                              GP08258\n         AIF   ('&SP' EQ '0').NOPOOL  TREAT AS SP=              GP08258\n&SB      SETC  '&SP'                                            GP08258\n.NOPOOL  ANOP  ,                                                GP08258\n&K       SETA  K'&SB\n&RK      SETA  K'&LENGTH\n         AIF   ('&FUN' EQ 'OBTAIN').GET\n         AIF   ('&FUN' EQ 'RELEASE').FREE\n         MNOTE 8,'STORAGE: FUNCTION &FUN INVALID'\n         MEXIT ,\n.GET     AIF   ('&COND' EQ 'YES').GETC\n         AIF   ('&BNDRY' NE '' OR '&SB' NE '').GETU\n&NM      GETMAIN R,A=&ADDR,LV=&LENGTH\n         MEXIT ,\n.*\n.GETC    AIF   ('&SB' EQ '' OR &K LT 3).GETCB\n         AIF   ('&SB'(1,1) EQ '(' AND '&SB'(2,1) NE '(' AND            *\n               '&SB'(&K,1) EQ ')' AND '&SB'(&K-1,1) NE ')').GETCR\n.GETCB   ANOP  ,\n&NM      GETMAIN RC,A=&ADDR,LV=&LENGTH,BNDRY=&BNDRY,SP=&SB\n         MEXIT ,\n.GETCR   ANOP  ,\n&NM      MACPARM R0,&LENGTH\n         MACPARM R15,&SB     GET SUBPOOL                        GP08089\n         GETMAIN RC,A=&ADDR,LV=(0),SP=(15),BNDRY=&BNDRY         GP08089\n         MEXIT ,\n.*\n.GETU    AIF   ('&SB' EQ '' OR &K LT 3).GETUB\n         AIF   ('&SB'(1,1) EQ '(' AND '&SB'(2,1) NE '(' AND            *\n               '&SB'(&K,1) EQ ')' AND '&SB'(&K-1,1) NE ')').GETUR\n.GETUB   ANOP  ,\n&NM      GETMAIN RU,A=&ADDR,LV=&LENGTH,BNDRY=&BNDRY,SP=&SB\n         MEXIT ,\n.GETUR   ANOP  ,\n&NM      MACPARM R0,&LENGTH\n         MACPARM R15,&SB     GET SUBPOOL                        GP08089\n         GETMAIN RU,A=&ADDR,LV=(0),SP=(15),BNDRY=&BNDRY         GP08089\n         MEXIT ,\n.*\n.FREE   AIF   ('&SB' NE '' AND '&LENGTH' EQ '' AND '&ADDR' EQ '').FPOOL\n         AIF   ('&SB' NE '').FREESP\n&NM      FREEMAIN R,A=&ADDR,LV=&LENGTH\n         MEXIT ,\n.FREESP  AIF   ('&LENGTH' EQ '' OR &RK LT 3).FREESR\n         AIF   ('&LENGTH'(1,1) EQ '(' AND '&LENGTH'(2,1) NE '(' AND    *\n               '&LENGTH'(&RK,1) EQ ')' AND                             *\n               '&LENGTH'(&RK-1,1) NE ')').FRUR\n.FREESR  AIF   ('&SB' EQ '' OR &K LT 3).FREEUB\n         AIF   ('&SB'(1,1) EQ '(' AND '&SB'(2,1) NE '(' AND            *\n               '&SB'(&K,1) EQ ')' AND '&SB'(&K-1,1) NE ')').FRUR\n.FREEUB  ANOP  ,\n&NM      FREEMAIN R,A=&ADDR,LV=&LENGTH,SP=&SB\n         MEXIT ,\n.FRUR  ANOP  ,\n&NM      MACPARM R0,&LENGTH\n         MACPARM R0,8(R13),OP=ST      SAVE LENGTH\n         MACPARM R0,&SB\n         MACPARM R0,8(R13),OP=STC    COMBINE WITH SUBPOOL\n         MACPARM R0,8(R13),OP=L      AND RELOAD                 GP08251\n         FREEMAIN R,A=&ADDR,LV=(0)  LV=&LENGTH,SP=&SB\n         MEXIT ,\n.FPOOL   ANOP  ,\n&NM      FREEMAIN R,SP=&SB   FREE ENTIRE SUBPOOL\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STORQ": {"ttr": 12311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x11\\x0f\\x01\\x06&?\\x00B\\x00+\\x00&\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-04-20T00:00:00", "modifydate": "2006-09-20T00:42:00", "lines": 43, "newlines": 38, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                        ADDED ON 79226\n&NM      STORQ &IN=,&LEN=,&OUT=,&ERR=EXCSOP,                           *\n               &WK0=R0,&WK1=R1,&WK2=R2,&WK3=R3,&WK4=R4,&WK5=R5\n.**********************************************************************\n.*                                                                   **\n.*   USED BY EXHIBIT COMMANDS TO PARSE A QUOTED STRING               **\n.*                                                                   **\n.**********************************************************************\n         LCLC  &T\n&T       SETC  'STQ'.'&SYSNDX'\n&NM      LA    &WK0,1        CONSTANT ONE\n         MACPARM &WK1,&OUT\n         MACPARM &WK2,&LEN\n         MACPARM &WK5,&IN\n         LR    &WK3,&WK2     SAVE FULL LENGTH\n         LNR   &WK4,&WK5     SET MINUS FOR UNQUOTED\n         CLI   0(&WK5),C''''  QUOTED ?\n         BE    &T.A-2        YES\n         CLI   0(&WK5),C'\"'   REAL QUOTE ?\n         BNE   &T.A+2        NO\n         LR    &WK4,&WK5     SAVE LOCATION OF QUOTE\n&T.A     AR    &WK5,&WK0     GET NEXT BYTE\n         LTR   &WK4,&WK4     DOING QUOTED STRING ?\n         BP    &T.C          YES\n         CLI   0(&WK5),C' '  END OF INPUT ?\n         BE    &T.D          YES\n         CLI   0(&WK5),C','  ALTERNATE END\n         BE    &T.D          YES\n&T.B     LTR   &WK2,&WK2     ROOM FOR ANOTHER ?\n         BNP   &ERR          NO; FAIL\n         MVC   0(1,&WK1),0(&WK5)  MOVE ONE\n         AR    &WK1,&WK0     UP ONE\n         BCTR  &WK2,0        ADJUST LENGTH\n         B     &T.A          SKIP AND TEST AGAIN\n&T.C     CLC   0(1,&WK5),0(&WK4)  QUOTE ?\n         BNE   &T.B          NO; COPY\n         AR    &WK5,&WK0     SKIP FIRST DOUBLED QUOTE            80328\n         CLC   0(1,&WK5),0(&WK4)  DOUBLED ?                      89166\n         BE    &T.B          AND MOVE SECOND\n         SR    &WK5,&WK0      FINAGLE FOR NEXT ADD\n&T.D     AR    &WK5,&WK0     SKIP SEPARATION CHARACTER\n         SR    &WK3,&WK2     SET STRING LENGTH\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SUBCALL": {"ttr": 12313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x12\\x16/\\x01\\x16\\x00h\\x00\\x10\\x00\\\\\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2012-06-10T01:16:00", "lines": 104, "newlines": 16, "modlines": 92, "user": "GERHARD"}, "text": "         MACRO ,                                                 88150\n&NM      SUBCALL &NAME,&PARM,&VL,&MF=S,&OP=BALR,&MODE=L     ADDED 88150\n         GBLC  &MACPLAB                                          88150\n         GBLC  &SRVLMOD(20),&SRVLDEL(20)                        GP03150\n         GBLB  &MVSESA,&OS390,&Z900                             GP08076\n         GBLA  &SRVNMOD                                         GP03150\n         LCLA  &I,&J,&N\n         LCLC  &LBL,&M,&LOP                                     GP08076\n         AIF   ('&MF' EQ 'L').MFL\n&LOP     SETC  '&OP'                                            GP08076\n.*--------------------------------------------------------------------*\n.*  NON-STANDARD HANDLING OF PARAMETER LIST:                          *\n.*                                                                    *\n.*  &N IS 1 - GENERATE SIMPLE LA UNLESS PARENTHESIZED (BACKWARD COMP) *\n.*  &N IS 2 OR MORE - NORMAL PARAMETER LIST                           *\n.*--------------------------------------------------------------------*\n&MACPLAB SETC  '&NM'                                             88150\n&N       SETA  N'&PARM                                          GP03041\n         AIF   (&MVSESA OR &OS390 OR &Z900).OKBASS              GP08076\n         AIF   ('&OP' EQ 'BSM').FLAKY                           GP12162\n         AIF   ('&OP' NE 'BASSM' AND '&LOP' NE 'BASR').OKBASS   GP12162\n.FLAKY   ANOP  ,                                                GP12162\n&LOP     SETC  'BALR'        DON'T HAVE BASSM ON 360/370        GP08076\n.OKBASS  AIF   (&N LT 1).LAPARM                                 GP03041\n         AIF   (&N GT 1).NOTONE                                 GP03041\n         AIF   ('&PARM'(1,1) EQ '(' AND '&PARM'(1,2) NE '(').NOTONE\n         AIF   ('&PARM'(1,2) NE '((' OR                                *\n               '&PARM'(K'&PARM-1,2) NE '))').LAPARM             GP03041\n.NOTONE  AIF   ('&MF(1)' EQ 'E').NODC                           GP03041\n*TEST*   CNOP  0,4           WORD ALIGN FOR PARM LIST           GP03041\n         MACPARM *+(&N+1)*4,OP=B,MODE=ONE                       GP03041\n&M       SETC  '&SYSNDX'                                        GP03041\nZZ&M.P   DC    &N.AL4(0)     INLINE, NONREFRESHABLE PARM LIST   GP03041\n&LBL     SETC  'ZZ'.'&M'.'P'                                    GP03041\n         AGO   .HAVEDC                                          GP03041\n.NODC    ANOP  ,                                                GP03041\n&LBL     SETC  '&MF(2)'                                         GP03041\n.HAVEDC  MACPARM R1,&LBL     LOAD PARM LIST                     GP03041\n&I       SETA  0             JUST IN CASE                       GP03041\n         AIF   ((&N+1) EQ K'&PARM).GETADDR  PARM LIST IS NULL   GP03041\n&M       SETC  'R1'          ABNORMAL PARM LIST POINTER         GP03041\n&J       SETA  0             PARM OFFSET FOR NEXT ITEM          GP03041\n.PRMLOOP AIF   (&I GE &N).GETADDR    DONE                       GP03041\n&I       SETA  &I+1                                             GP03041\n         AIF   ('&PARM(&I)' EQ '').NOLST                        GP03041\n         AIF   ('&PARM(&I)'(1,1) NE '''').NOCHAR                GP03041\n         MACPARM R0,=C&PARM(&I)                                 GP03041\n         AGO   .HAVER0                                          GP03041\n.NOCHAR  MACPARM R0,&PARM(&I)  LOAD USER'S ADDRESS              GP03041\n.HAVER0  MACPARM R0,&J.(,&M),OP=ST   PLACE INTO PARAMETER LIST  GP03041\n.NOLST   AIF   (&I NE &N).PRMBUMP                               GP03041\n         AIF   ('&VL' NE 'VL').GETADDR                          GP03041\n         OI    &J.(&M),X'80'  END LIST BIT                      GP03041\n         AGO   .GETADDR                                         GP03041\n.PRMBUMP ANOP  ,                                                GP03041\n&J       SETA  &J+4          NEXT LIST OFFSET                   GP03041\n         AGO   .PRMLOOP                                         GP03041\n.*                                                              GP03041\n.LAPARM  MACPARM R1,&PARM,NULL=SKIP                             GP02241\n.*\n.*--------------------------------------------------------------------*\n.*  HAVE PARM ADDRESS IN R1; NOW GET ROUTINE ADDRESS IN R15 AND GO    *\n.*--------------------------------------------------------------------*\n.GETADDR AIF   ('&NAME' EQ '(15)' OR '&NAME' EQ '(R15)').BALR    88150\n         AIF   ('&NAME'(1,1) NE '(').GETPGM                      88150\n&MACPLAB LR    R15,&NAME(1)                                      88150\n         AGO   .BAL                                              88150\n.*--------------------------------------------------------------------*\n.*  SUBCALL INTERACTS WITH THE SERVLOAD MACRO.                        *\n.*  WHEN A MODULE LOADED BY SERVLOAD IS REFERENCED HERE, THE L =A()   *\n.*  IS REPLACED BY A LOAD FROM THE NAME USED BY SERVLOAD.             *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.GETPGM  AIF   ('&NAME'(1,1) NE '/' AND '&NAME'(1,1) NE '*').GETLOAD\n         MACPARM R15,&NAME                                      GP03264\n         AGO   .BAL                                             GP03264\n.GETLOAD ANOP  ,                                                 88150\n&I       SETA  0             SCAN THROUGH SERVLOAD MODULES      GP03150\n.LODLOOP AIF   (&I GE &SRVNMOD).SKIPLOD                         GP03150\n&I       SETA  &I+1                                             GP03150\n AIF ('&SRVLMOD(&I)' NE '&NAME' AND '&SRVLDEL(&I)' NE '&NAME').LODLOOP\n         MACPARM R15,&SRVLMOD(&I),OP=L                          GP03150\n         AGO   .BALR                                            GP03150\n.SKIPLOD AIF   ('&MODE' NE 'LA').LOAD                           GP03150\n&MACPLAB LA    R15,&NAME     GET SUBROUTINE ADDRESS             GP03150\n.LOAD    ANOP  ,                                                 88150\n&MACPLAB L     R15,=A(&NAME)  GET SUBROUTINE ADDRESS             88150\n.BAL     ANOP  ,                                                 88150\n&MACPLAB SETC  ''                                                88150\n.BALR    AIF   ('&LOP' EQ 'BALR').OLDBAL                        GP12162\n         AIF   (NOT &MVSESA).OLDBAL                             GP12162\n&MACPLAB &LOP  R14,R15       INVOKE IT                          GP00020\n&MACPLAB SETC  ''                                               GP00020\n         MEXIT ,                                                GP03041\n.OLDBAL  ANOP  ,                                                GP12162\n&MACPLAB BALR  R14,R15       INVOKE IT                          GP12162\n&MACPLAB SETC  ''                                               GP12162\n         MEXIT ,                                                GP03041\n.MFL     AIF   ('&PARM' EQ '' AND '&NAME' NE '').OOPS           GP03041\n&NM      DC    A&PARM REMOTE PARM LIST FOR SUBCALL              GP03041\n         MEXIT ,                                                GP03041\n.OOPS    ANOP  ,                                                GP03041\n&NM      DC    A&NAME REMOTE PARM LIST FOR SUBCALL              GP03041\n.MEND    MEND  ,                                                 88150\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBENT": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x00C\\x00\\x1f\\x00\\x1a\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T00:43:00", "lines": 31, "newlines": 26, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                                 88150\n&NM      SUBENT &SAVE=YES,&WRK=R14,&BASE=R12   SUBROUTINE ENTRY  88150\n.**********************************************************************\n.*                                                                   **\n.*   DEFINE SUBROUTINE ENTRY; USES SAVE AREA STACK                   **\n.*                                                                   **\n.**********************************************************************\n         LCLC  &N                                                88150\n         DROP  ,             DROP EVERYTHING                     88150\n&NM      STM   R14,R12,12(R13)                                   88150\n         AIF   (N'&BASE LE 1).ONEBASE                            88150\n         BALSR &BASE(1),0                                        88150\n&N       SETC  '&NM'.'ZZZZ'                                      88150\n&N       SETC  '&N'(1,4).'BASE'                                  88150\n         USING &N,&BASE(1),&BASE(2)                              88150\n&N       LA    &BASE(2),2048(,&BASE(1))                          88150\n         LA    &BASE(2),2048(,&BASE(2))                          88150\n         AGO   .COMBASE                                          88150\n.ONEBASE BALSR &BASE,0       MAKE LOCAL BASE                     88150\n&N       SETC  '&NM'.'ZZZZ'                                      88150\n&N       SETC  '&N'(1,4).'BASE'                                  88150\n&N       DS    0H            LOCAL BASE                          88150\n         USING &N,&BASE                                          88150\n.COMBASE USING RENTWORK,R11  GLOBAL BASE PASSED BY CALLER        88150\n         USING DYNWORK,R10   DYNAMIC WORK AREA ALSO PASSED       88150\n         AIF   ('&SAVE' EQ 'NO').NOSAVE                          88150\n         LA    &WRK,72(,R13)   GET LOWER SAVE AREA               88150\n         ST    R13,4(,&WRK)                                      88150\n         ST    &WRK,8(,R13)  LINK                                88150\n         LR    R13,&WRK      FLIP                                88150\n.NOSAVE  MEND  ,                                                 88150\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBEX": {"ttr": 12547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\t!_\\x01\\t!_\\x14!\\x00\\x11\\x00\\x11\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2009-08-03T00:00:00", "modifydate": "2009-08-03T14:21:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                                 88150\n&NM      SUBEX &Q,&OFF=,&RC=0                              ADDED 88150\n         GBLC  &MACPLAB                                          88150\n         AIF   ('&Q' EQ '').GOOD                                GP09215\n         MNOTE 4,'SUBEX: EXTRANEOUS VALUE &Q IGNORED'           GP09215\n         MNOTE 4,'SUBEX: ONLY OFF= AND RC= SUPPORTED'           GP09215\n.GOOD    ANOP  ,                                                GP09215\n&NM      L     R13,4(,R13)   GET HIGHER SAVE AREA                88150\n&MACPLAB SETC  ''                                                88150\n         MACPARM R15,&RC,NULL=0  RETURN CODE                     88150\n         LM    R0,R12,20(R13)  RESTORE                           88150\n         L     R14,12(,R13)  SET RETURN ADDRESS                  88150\n         AIF   ('&OFF' EQ '' OR '&OFF' EQ '0').NOOFF            GP09216\n         B     &OFF.(R14)    RETURN WITH OFFSET                  88150\n         AGO   .COMOFF                                           88150\n.NOOFF   BR    R14           RETURN TO CALLER                    88150\n.COMOFF  MEND  ,                                                 88150\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBHEAD": {"ttr": 12549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00D\\x01\\x00\\x00\\x8f\\x01\\x03\\x03O\\x10F\\x00.\\x00\\x05\\x00,\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2000-01-08T00:00:00", "modifydate": "2003-02-03T10:46:44", "lines": 46, "newlines": 5, "modlines": 44, "user": "GERHARD"}, "text": "         MACRO ,                                                GP97332\n&NM      SUBHEAD &F,&L,&BASE=      START A SUBROUTINE           GP03034\n.*  SUBHEAD BEGINS A SUBROUTINE, USING A SAVE AREA STACK\n.*    THE MACRO MUST PHYSICALLY PRECEDE THE MATCHING SUBRET\n.*    MACRO FOR CORRECT REGISTER RESTORE.\n.*  BY SPECIFYING &F AND &L APPROPRIATELY, (E.G., R2,R0),\n.*    ALTERED REGISTER VALUES (IN THIS CASE, R1) CAN BE RETURNED\n.*    TO THE CALLER\n.*    FOR FUTURE COMPATIBILITY (BAKR/PR) USE R0,R15             GP03034\n.*                                                              GP03034\n.* WHEN BASE= IS SPECIFIED, APPROPRIATE USINGS ARE ISSUED, OTHERWISE\n.*    THE CALLER'S USINGS REMAIN IN EFFECT.                     GP03034\n.*                                                              GP03034\n.*                                                              GP03034\n.*                                                              GP03034\n         GBLC  &ZZSUBR1,&ZZSUBR2                                GP00020\n         LCLC  &EX,&CMU                                         GP03029\n         LCLA  &I,&K                                            GP03034\n&ZZSUBR1 SETC  '&F'                                             GP00020\n&ZZSUBR2 SETC  '&L'                                             GP00020\n         AIF   ('&F' NE '').HAVE1                               GP00020\n&ZZSUBR1 SETC  'R0'                                             GP00020\n.HAVE1   AIF   ('&L' NE '').HAVE2                               GP00020\n&ZZSUBR2 SETC  '((16+&ZZSUBR1-1)-(16+&ZZSUBR1-1)/16*16)'        GP03029\n.HAVE2   ANOP  ,                                                GP00020\n&NM      STM   &ZZSUBR1,&ZZSUBR2,8(R13) SAVE CALLER'S REGISTERS GP00020\n         ST    R13,LOCSAVE1-LOCSAVE+4(,R13)  MAKE BACK CHAIN    GP03034\n         LA    R13,LOCSAVE1-LOCSAVE(,R13)  PUSH THE STACK       GP97332\n.*--------------------------------------------------------------------*\n.*  LOAD AND DECLARE BASE REGISTERS                                   *\n.*--------------------------------------------------------------------*\n&K       SETA  N'&BASE      MAX NUMBER OF BASES SPECIFIED       GP03034\n         AIF   (&K LT 1).MEND  *** NONE *** USE CALLER'S        GP03034\n&CMU     SETC  '&BASE(1)'    SET THE FIRST ONE                  GP03034\n         MACPARM &BASE(1),(R15),OP=LA                           GP03034\n         AIF   (&K LT 2).DOUSE                                  GP03034\n&I       SETA  1                                                GP03034\n         LA    &BASE(&K),2048                                   GP03034\n.BASLOOP AIF   (&I GE &K).DOUSE                                 GP03034\n&I       SETA  &I+1                                             GP03034\n         AIF   ('&BASE(&I)' EQ '').BASLOOP                      GP03034\n         LA    &BASE(&I),2048(&BASE(&K),&BASE(&I-1))            GP03034\n&CMU     SETC  '&CMU'.','.'&BASE(&I)'                           GP03034\n         AGO   .BASLOOP                                         GP03034\n.DOUSE   USING &NM,&CMU                                         GP03034\n.MEND    MEND  ,                                                GP03034\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBRET": {"ttr": 12551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00A\\x01\\x00\\x00\\x8f\\x01\\x00\\x16\\x9f\\x15Y\\x00(\\x00\\x0e\\x00(\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-01-08T00:00:00", "modifydate": "2000-06-17T15:59:41", "lines": 40, "newlines": 14, "modlines": 40, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SUBRET &RREG,&TYPE=BR,&RS=,&RE=,&OR=8,&VECT=0\n         GBLC  &ZZSUBR1,&ZZSUBR2                                GP00020\n         LCLC  &RR                                              GP00020\n.*  SUBRET ENDS A MATCHING SUBHEAD USING SUBROUTINE\n.*    &RREG SPECIFIES THE RETURN REGISTER (DEFAULT IS R14)\n.*    &TYPE MAY SPECIFY POP (RELOAD, NO BRANCH), BR FOR BRANCH,\n.*      OR BSM FOR A BSM 0,&&REG RETURN\n.*    &RS AND &RE MAY OVERRIDE THE RESTORE REGISTERS, BUT NOTE THAT\n.*      THIS WILL WORK ONLY IF RE IS LESS THAN THE SUBHEAD SECOND REG.\n.*    &VECT SPECIFIES AN INTEGER RETURN OFFSET (CALLER'S RETURN + N)\n.*\n.*  SUBHEAD BEGINS A SUBROUTINE, USING A SAVE AREA STACK\n.*    THE MACRO MUST PHYSICALLY PRECEDE THE MATCHING SUBRET\n.*    MACRO FOR CORRECT REGISTER RESTORE.\n.*  BY SPECIFYING &F AND &L APPROPRIATELY, (E.G., R2,R0),\n.*    ALTERED REGISTER VALUES (IN THIS CASE, R1) CAN BE RETURNED\n.*    TO THE CALLER\n&RR      SETC  '&RREG(1)'                                       GP00020\n         AIF   ('&RR' NE '').HAVER                              GP00020\n&RR      SETC  'R14'                                            GP00020\n.HAVER   AIF   ('&RS' EQ '').HAVE1                              GP00020\n&ZZSUBR1 SETC  '&RS'                                            GP00020\n.HAVE1   AIF   ('&RE' EQ '').HAVE2                              GP00020\n&ZZSUBR2 SETC  '&RE'                                            GP00020\n.HAVE2   ANOP  ,                                                GP00020\n&NM      SH    R13,=Y(LOCSAVE1-LOCSAVE)  POP THE STACK\n         LM    &ZZSUBR1,&ZZSUBR2,&OR.(R13)  RESTORE CALLER'S REGISTERS\n         AIF   ('&RR' EQ 'POP').MEND                            GP00020\n         AIF   ('&TYPE' EQ 'POP' OR '&TYPE' EQ 'NO').MEND\n         AIF   ('&TYPE' EQ 'BSM').BSM\n         AIF   ('&VECT' EQ '0').BR\n         B     &VECT.(,&RR)  VECTORED RETURN\n         MEXIT ,\n.BR      BR    &RR           RETURN TO CALLER\n         MEXIT ,\n.BSM     AIF   ('&VECT' EQ '0').BSM0\n         AL    &RR,=A(&VECT) ADJUST RETURN ADDRESS\n.BSM0    RET31 &RR           RETURN IN CALLER'S MODE\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCJFCB": {"ttr": 12553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x99\\x05?\\x01\\x06&?\\x00E\\x00\\x19\\x00\\x14\\x00\\x02\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-02-22T00:00:00", "modifydate": "2006-09-20T00:45:00", "lines": 25, "newlines": 20, "modlines": 2, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SVCJFCB &PARM,&ERR=                            ADDED ON 84268\n         GBLA  &SVCJFCB\n         GBLB  &ZZSJFCB                                         GP99053\n         GBLC  &MACPLAB\n.**********************************************************************\n.*                                                                   **\n.*   INVOKE JFCB MODIFICATION (VIA SVC).  USED IN ASMANY             **\n.*                                                                   **\n.**********************************************************************\n&MACPLAB SETC  '&NM'\n         MACPARM R1,&PARM    LOAD R1 WITH LIST ADDRESS\n         AIF   (&SVCJFCB EQ 0).NOSVC                            GP99053\n         MACPARM &SVCJFCB,MODE=ONE,OP=SVC  CALL SVC\n         AGO   .ERRT\n.NOSVC   AIF   (&ZZSJFCB).NOSVC2                                GP99053\n*HOPE?*  MNOTE 0,'GLOBAL VARIABLE &&SVCJFCB IS ZERO'\n&ZZSJFCB SETB  1                                                GP99053\n.NOSVC2  ANOP  ,                                                GP99053\n&MACPLAB LINK  EPLOC=DCMJFCB        MUST BE AUTHORIZED TO CALL  GP99055\n&MACPLAB SETC  ''\n.ERRT    AIF   ('&ERR' EQ '').MEND\n         LTR   R15,R15       TEST RETURN\n         MACPARM &ERR,MODE=ONE,OP=BNZ,OPR=BNZR\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SWAP": {"ttr": 12555, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      SWAP  &A,&B,&LEN=   EXCHANGE TWO STRINGS                86197\n         LCLC  &L\n&L       SETC  'L'''\n         AIF   ('&LEN' EQ '').DFLT\n&NM      XC    &A.(&LEN),&B\n         XC    &B.(&LEN),&A\n         XC    &A.(&LEN),&B\n         MEXIT ,\n.DFLT    ANOP  ,\n&NM      XC    &A.(&L&A),&B\n         XC    &B.(&L&A),&A\n         XC    &A.(&L&A),&B\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SWAPR": {"ttr": 12557, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      SWAPR &A,&B         EXCHANGE TWO REGISTERS              86197\n&NM      XR    &A,&B\n         XR    &B,&A\n         XR    &A,&B\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SWATCH": {"ttr": 12559, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x01\\x00\\x01\\x1f\\x01\\x13\\x13/\\x165\\x00\\xdc\\x00X\\x00\\x13\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2000-01-11T00:00:00", "modifydate": "2013-05-12T16:35:00", "lines": 220, "newlines": 88, "modlines": 19, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      SWATCH &FUN,&CODE,&PFX=STMR,&PAT=STMP,&TIME=,&SAVE=YES\n.**                                                                  **\n.**********************************************************************\n.**                                                                  **\n.**  MACRO TO RUN A SIMPLE STOP WATCH PROGRAM  (UPDATED 2013-05-12)  **\n.**                                                                  **\n.**  NAME SWATCH START[,'TEST NAME']  BEGIN TIMING                   **\n.**  NAME SWATCH STOP            STOP TIMING                         **\n.**  NAME SWATCH SHOW            CALCULATE INTERVAL, AND SHOW ON WTO **\n.**                              (SAVES IF FIRST START/STOP USE)     **\n.**  NAME SWATCH SAVE            SAVE FOR LATER COMPARISON           **\n.**                                                                  **\n.**  NAME SWATCH COMPARE         COMPARE CURRENT (AFTER SHOW) WITH   **\n.**                                PREVIOUS RESULT                   **\n.**                                                                  **\n.**  NAME SWATCH DATA            DEFINE DATA. IF DSECT, MOVE FROM    **\n.**                                PATTERN WITH INIT FUNCTION.       **\n.**                                                                  **\n.**  NAME SWATCH PATTERN         DEFINE WORK AREA PATTERN (PFX STMP) **\n.**  NAME SWATCH INIT            MOVES PATTERN TO DATA               **\n.**                                                                  **\n.**  NAME SWATCH CLEAR           PREPARES DATA AREA WITHOUT PATTERN  **\n.**                                OR INIT CALL                      **\n.**                                                                  **\n.**  NAME SWATCH OVERHEAD        RUNS EMPTY STOP/START TO GET        **\n.**                                OVERHEAD TIME WITHOUT A LOOP.     **\n.**                                                                  **\n.**  TIME= SETS GLOBAL MODE (REMAINS UNTIL RESPECIFIED). VALUE IS:   **\n.**    JST or CPU - USE APPLICATION CPU TIME ONLY                    **\n.**    SRB        - USE SYSTEM OVERHEAD ONLY                         **\n.**    ALL or BOTH- USE SUM OF CPU AND SRB TIME                      **\n.**                                                                  **\n.**  TO BE LINKED WITH MODULE SUBTIMER, AND ENTRY SUBTIMED.          **\n.**                                                                  **\n.**********************************************************************\n         GBLA  &ZZSWAM       MODE (0-JST, 1-SRB, 2-BOTH)        GP13118\n         GBLB  &MVSXA        WHEN DID TIMEUSED APPEAR ?         GP07015\n         GBLB  &ZZSWAT         SET IF EQU EXPANDED              GP13111\n         GBLC  &MACPLAB                                         GP03245\n         LCLC  &P,&LB,&STORE,&LBL                               GP13111\n&LB      SETC  'ZZT'.'&SYSNDX'                                  GP13111\n&LBL     SETC  '&NM'                                            GP13111\n&P       SETC  '&PFX'\n         AIF   ('&TIME' EQ '').KEEP                             GP13118\n&ZZSWAM  SETA  1                                                GP13118\n         AIF   ('&TIME' EQ 'JST' OR '&TIME' EQ 'CPU').KEEP      GP13118\n&ZZSWAM  SETA  2                                                GP13118\n         AIF   ('&TIME' EQ 'SRB').KEEP                          GP13118\n&ZZSWAM  SETA  3                                                GP13118\n         AIF   ('&TIME' EQ 'BOTH' OR '&TIME' EQ 'ALL').KEEP     GP13118\n         AIF   ('&TIME' EQ 'TOTAL').KEEP                        GP13118\n&ZZSWAM  SETA  1                                                GP13118\n         MNOTE 4,'SWATCH: TIME=&TIME INVALID. USE JST, SRB, OR ALL'\n.KEEP    ANOP  ,                                                GP13118\n&STORE   SETC  'STMRSTRT'    PRESET FOR START                   GP13111\n         AIF   ('&FUN' EQ 'START').BEGIN\n&STORE   SETC  'STMRSTOP'    PRESET FOR STOP                    GP13111\n         AIF   ('&FUN' EQ 'STOP').BEGCOM    SAME AS START CODE  GP13111\n         AIF   ('&FUN' EQ 'WTO').PRINT\n         AIF   ('&FUN' EQ 'SHOW').PRINT\n         AIF   ('&FUN' EQ 'PRINT').PRINT\n         AIF   ('&FUN' EQ 'COMPARE').COMPARE\n         AIF   ('&FUN' EQ 'SAVE').SAVE\n         AIF   ('&FUN' EQ 'DATA').DATA\n         AIF   ('&FUN' EQ 'PATTERN').PATTERN\n         AIF   ('&FUN' EQ 'INIT').INIT\n         AIF   ('&FUN' EQ 'CLEAR').CLEAR                        GP13111\n         AIF   ('&FUN' EQ 'OVERHEAD').OVERHD                    GP13118\n         MNOTE 8,'SWATCH: UNRECOGNIZED FUNCTION &FUN'\n         MEXIT ,\n.OVERHD  ANOP  ,                                                GP13118\n&NM      SWATCH START,'OVERHEAD',SAVE=NO                        GP13118\n         SWATCH STOP,SAVE=NO                                    GP13118\n         XC    &P.OHD,&P.OHD  *TEST\n         LM    R14,R15,&P.STOP                                 GP13118\n         SL    R15,&P.STRT+4                                   GP13118\n         BC    3,*+4+4                                          GP13118\n         S     R14,=F'1'                                        GP13118\n         S     R14,&P.STRT                                     GP13118\n         BM    *+8           SHOULD NOT BE NEGATIVE ?           GP13118\n         STM   R14,R15,&P.OHD                                  GP13118\n         SWATCH CLEAR                                           GP13118\n         MEXIT ,                                                GP13118\n.BEGIN   AIF   ('&CODE' EQ '').NOCODE\n         AIF   ('&CODE'(1,1) EQ '''').STRCODE\n&NM      MVC   STMRCODE,=CL(16)'&CODE '\n&LBL     SETC  ''                                               GP13111\n         AGO   .BEGCOM\n.STRCODE ANOP  ,\n&NM      MVC   STMRCODE,=CL(16)&CODE\n&LBL     SETC  ''                                               GP13111\n         AGO   .BEGCOM\n.NOCODE  ANOP  ,\n&NM      MVC   STMRCODE,=CL16' '    NO CODE SPECIFIED\n&LBL     SETC  ''                                               GP13111\n         MNOTE 0,'SWATCH: TEST NAME NOT SPECIFIED'\n.BEGCOM  AIF   (&MVSXA).BEGESA  TIMEUSED AVAILABLE ?            GP07015\n         AIF   ('&SAVE' NE 'YES').NOSAV1                        GP13118\n&LBL     STM   R14,R1,12(R13)     SAVE A BIT                    GP13118\n&LBL     SETC  ''                                               GP13118\n.NOSAV1  AIF   (&ZZSWAT).DONEQU                                 GP13111\n.*       THIS CODE CALCULATES TOTAL CPU TIME FOR THE CURRENT TCB.     *\n.*       FOR TASKS WITH MULTIPLE ACTIVE TCBS/SRBS USE AN SVC INSTEAD: *\n.*         SEE IGC251 IN THE ESPSRC PDS.                              *\n.*       LCCADTOD HAS THE TIME THE TASK WAS DISPATCHED                *\n.*       TIME SINCE LAST DISPATCH IS:                                 *\n.*         CURRENT TOD - LCCADTOD                                     *\n.*                                                                    *\n.*       THIS VALUE IS ADDED TO ASCBESTL (TIME=JST/ALL) OR            *\n.*       ASCBSRBT (TIME=SRB/ALL).                                     *\n.*                                                                    *\n.*       CLOCK UNITS ARE CONVERTED TO MIC UNITS (10**-6 SECS)         *\n.*                                                                    *\n.*       EQUATES ARE USED TO RELIEVE THE USER FROM INCLUDING ESOTERIC *\n.*       MAPPING MACROS (IHALCCA, ETC.). THE FIRST A IN EACH NAME HAS *\n.*       BEEN CHANGED TO @.                                           *\n.*                                                                    *\n&ZZSWAT  SETB  1                                                GP13111\nPS@      EQU   0\nPS@LCCAV EQU   528                 ADDRESS OF POINTER TO LCC@\nPS@AOLD  EQU   548                 CURRENT @SCB POINTER         GP13111\n@SCB     EQU   0                                                GP13111\n@SCBEJST EQU   64                  ELAPSED JOB-STEP TIMING, TOD CLOCK\n.*                                 UNITS (64-BITS)\n@SCBSRBT EQU   200                 ELAPSED JOB-STEP TIMING, TOD CLOCK\n.*                                 UNITS (64-BITS)\nLCC@     EQU   0                                                GP13111\nLCC@DTOD EQU   600                OFFSET OF TOD STAMP FROM\n.*                                DISPATCH OF TCB\n.**  GET TIME FROM @SCBEJST/SRBT, AND SUBTRACT UNUSED TIME FROM LCCA\n.DONEQU  ANOP  ,\n&LBL     L     R1,PS@AOLD-PS@     GET ASCB ADDRESS              GP13118\n         AIF   (&ZZSWAM EQ 2).MVSA2                             GP13118\n.MVSA1   LM    R14,R15,@SCBEJST-@SCB(R1)  GET JOB STEP TIME     GP13118\n         AIF   (&ZZSWAM EQ 1).MVSAOK                            GP13118\n         AL    R15,4+@SCBSRBT-@SCB(,R1)   ADD SRB TIME          GP13118\n         BC    12,*+4+4                                         GP13118\n         AL    R14,=F'1'                                        GP13118\n         AL    R14,@SCBSRBT-@SCB(,R1)                           GP13118\n         AGO   .MVSAOK                                          GP13118\n.MVSA2   LM    R14,R15,@SCBSRBT-@SCB(R1)  GET SRB TIME          GP13118\n.MVSAOK  STCK  &STORE             SAVE TOD CLOCK VALUE        GP13118\n         AL    R15,4+&STORE       SUBTRACT TOD                GP13118\n         BC    12,*+4+4                                         GP13118\n         AL    R14,=F'1'                                        GP13118\n         AL    R14,&STORE                                     GP13118\n         L     R1,PS@LCCAV-PS@    GET A(LCCA FOR THIS CPU)      GP13118\n         SL    R15,4+LCC@DTOD-LCC@(,R1)   ADD REMAINING         GP13118\n         BC    3,*+4+4                                          GP13118\n         SL    R14,=F'1'                      DISPATCH TIME     GP13118\n         SL    R14,LCC@DTOD-LCC@(,R1)                           GP13118\n&LB.X    SRDL  R14,12          CHANGE TO MIC                    GP07015\n         STM   R14,R15,&STORE  UPDATE CPU TIME                GP07015\n         AIF   ('&SAVE' NE 'YES').NOSAV2                        GP13118\n         LM    R14,R1,12(R13)  RESTORE WORK REGISTERS           GP13118\n.NOSAV2  MEXIT ,                                                GP07015\n.BEGESA  AIF   (&ZZSWAM EQ 2).ESASRB                            GP13118\n&LBL     TIMEUSED STORADR=&STORE,CPU=MIC,LINKAGE=SYSTEM       GP07015\n         AIF   (&ZZSWAM NE 3).MEND                              GP13118\n         TIMEUSED STORADR=STMRDB,VECTOR=MIC,LINKAGE=SYSTEM      GP13118\n         LM    R14,R15,&STORE                                 GP13118\n         AL    R15,STMRDB+4   ADD LOW ORDER                     GP13118\n         BC    12,*+4+4                                         GP13118\n         A     R14,=F'1'                                        GP13118\n         A     R14,STMRDB                                       GP13118\n         STM   R14,R15,&STORE  UPDATE CPU TIME                GP13118\n         MEXIT ,\n.ESASRB  ANOP  ,                                                GP13118\n&LBL     TIMEUSED STORADR=&STORE,VECTOR=MIC,LINKAGE=SYSTEM    GP13118\n         MEXIT ,\n.PRINT   ANOP  ,\n&NM      LA    R1,STMRWORK\n         L     R15,=V(SUBTIMER)\n         BALR  R14,R15\n         MEXIT ,\n.COMPARE ANOP  ,\n&NM      LA    R1,STMRWORK\n         L     R15,=V(SUBTIMED)\n         BALR  R14,R15\n         MEXIT ,\n.INIT    ANOP  ,\n&NM      MVC   &P.WORK(&PAT.WKLR+L'&PAT.OHD),&PAT.WORK          GP13118\n         MEXIT ,\n.CLEAR   ANOP  ,\n&NM      XC    &P.WORK(&P.WKLR),&P.WORK                         GP13111\n         MVI   &P.CODE,C' '                                     GP13111\n         MVC   &P.CODE+1(L'&P.CODE-1),&P.CODE                   GP13111\n         MVC   &P.COD2,&P.CODE                                  GP13111\n         MEXIT ,\n.SAVE    ANOP  ,\n&NM      MVC   &P.STR2(&P.SVLN),&P.STRT  SAVE THIS TIME'S COUNTERS\n         MEXIT ,\n.PATTERN AIF   ('&P' NE '' AND '&P' NE 'STMR').DATA\n&P       SETC  'STMP'\n.DATA    AIF   ('&NM' EQ '').NOEXTRA\n&NM      DS    0D\n.NOEXTRA ANOP  ,\n&P.WORK  DS    0D\n&P.SAVE  DC    18A(0)        LOWER SAVE AREA\n&P.DB    DC    D'0'          WORK WORDS\n&P.ITER  DC    F'0'          ITERATION COUNTER (OPTIONAL)\n&P.LTIM  DC    F'0'          TIME FOR ONE ITERATION             GP13118\n.*  START OF CURRENT DATA\n&P.STRT  DC    D'0'          STOPWATCH START TIME\n&P.STOP  DC    D'0'          STOPWATCH STOP TIME\n&P.TIME  DC    F'0'          TIME FOR THIS TEST\n&P.CODE  DC    CL16' '       USER'S MNEMONIC CODE FOR THIS FUNCTION\n&P.SVLN  EQU   *-&P.STRT       LENGTH TO SAVE AFTER WRITE\n.*  SAVED RESULT FROM AN EARLIER MEASUREMENT\n&P.STR2  DC    2F'0'         PRIOR STOPWATCH START TIME\n&P.STO2  DC    2F'0'         PRIOR STOPWATCH STOP TIME\n&P.TIM2  DC    F'0'          TIME FOR THIS TEST\n&P.COD2  DC    CL16' '       PRIOR CODE\n&P.WKLR  EQU   *-&P.WORK       LENGTH TO BE CLEARED             GP13118\n.*  OTHER STUFF - NOT CLEARED NOR COPIED                        GP13118\n&P.OHD   DC    D'0'          OVERHEAD (OPTIONAL)                GP13118\n&P.WTO   DC    XL92'0'       SPACE FOR WTO\n&P.WKLN  EQU   *-&P.WORK       LENGTH TO BE MOVED               GP13118\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSPARM": {"ttr": 12564, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x97 /\\x01\\x06&?\\x00G\\x00\\xff\\x01H\\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1997-07-21T00:00:00", "modifydate": "2006-09-20T00:47:00", "lines": 255, "newlines": 328, "modlines": 3, "user": "GERHARD"}, "text": "         MACRO ,\n       SYSPARM &DBTEST=YES,&SETS=YES,&LIST=YES,&SHOW=,&PARM=\n.**********************************************************************\n.*   THIS MACRO, FOLLOWING OPTIONGB, SETS GLOBAL ASSEMBLY OPTIONS.\n.*   OVERRIDES ARE MERGED FROM THE CONTENTS OF THE ASSEMBLER EXEC\n.*   PARM SUBFIELD SYSPARM:  // EXEC ASMHC,PARM='SYSPARM(MVS/ESA)'\n.**********************************************************************\n         COPY  OPTIONGB\n         LCLA  &CURSOR\n         LCLA  &I,&J,&K\n         LCLB  &GOTLOC\n         LCLC  &CHAR\n         LCLC  &DEFSP1R,&DEFSP2R,&DEFSP3R,&DEFJES2               90217\n         LCLC  &DELIM\n         LCLC  &TOKEN\n         LCLC  &DEFMOD,&DEFLOC,&DEFMAC,&DEFSOR,&DEFSYM,&DEFSYS   81169\n&GOTLOC  SETB  ('&SETS' EQ 'NO' OR '&LOCAL' NE '' OR &SYSPRM# GT 0)\n         AIF   (&SYSPRM# NE 0).BYEBYE                            81154\n         AIF   ('&PARM' EQ 'IGNORE').NOFRAME                     83100\n         AIF   (T'&PARM EQ 'O').OKPPRM                           83100\n         MNOTE 8,'INVALID PARM=&PARM'                            83100\n.OKPPRM  ANOP  ,                                                 83100\n&K       SETA  K'&SYSPARM                                        82099\n         AIF   (&K LT 2).NOFRAME                                 82099\n         AIF   ('&SYSPARM'(1,1) NE '(').NOFRAME                  82099\n         AIF   ('&SYSPARM'(&K,1) NE ')').NOFRAME                 82099\n&K       SETA  &K-1          SUPPORT FORMAT (A,B,C)              82099\n&CURSOR  SETA  &CURSOR+1                                         82099\n.NOFRAME AIF   (&GOTLOC).FINDTOK                                 82099\n&DEFLOC  SETC  'MVS'           INSTALLATION                      81154\n&DEFMOD  SETC  '370'             DEFAULTS        (360 OR 370)    81154\n&DEFSYS  SETC  'MVS'               HERE          (SYSTEM FLAVOR) 85077\n&DEFSP1R SETC  '0303'                            SP1 RELEASE     85077\n&DEFSP2R SETC  '0200'                            SP2 RELEASE     90252\n&DEFSP3R SETC  '0100'                            SP3 RELEASE     90217\n&DEFJES2 SETC  '41'                              JES2 VERSION    90189\n&DEFMAC  SETC  'GEN'         PRINT OPTION FOR LOCAL MACROS       81154\n&DEFSOR  SETC  'NOGEN'       PRINT OPTION FOR SOURCE CODE        81154\n&DEFSYM  SETC  'NOGEN'       PRINT OPTION FOR SYSTEM MACROS      81154\n&SVCJFCB SETA  0             MODJFCB SVC (SOURCE MEMBER IGC00240)82099\n&SVC@SVC SETA  0             @SERVICE INSTALLED AS SVC ? (255)   84160\n&SVCTMSX SETA  0             UCC-1 (TMS) SVC X                   92271\n&SVCTMSY SETA  0             UCC-1 (TMS) SVC Y                   92271\n.*\n.FINDTOK AIF   (&CURSOR GE &K).MERGE                             82099\n&CURSOR  SETA  &CURSOR+1\n         AIF   ('&SYSPARM'(&CURSOR,1) EQ ' ').FINDTOK\n         AIF   ('&SYSPARM'(&CURSOR,1) EQ ',').FINDTOK\n.*\n&DELIM   SETC  '&SYSPARM'(&CURSOR,1)\n&TOKEN   SETC  '&DELIM'\n         AIF   ('&DELIM' EQ '''' OR '&DELIM' EQ '\"').CURINC2\n&DELIM   SETC  ''\n&TOKEN   SETC  ''\n.*\n.SCANTOK AIF   (&CURSOR GT &K).ENDTOK                           82099\n&CHAR    SETC  '&SYSPARM'(&CURSOR,1)\n         AIF   ('&DELIM' EQ '&CHAR').CATDEL\n         AIF   ('&DELIM' EQ '').TESTEND\n         AGO   .CATTOK\n.CATDEL  ANOP  ,\n&TOKEN   SETC  '&TOKEN'.'&CHAR'\n&CURSOR  SETA  &CURSOR+1\n         AIF   (&CURSOR GT &K).GOODTOK                           82099\n&CHAR    SETC  '&SYSPARM'(&CURSOR,1)\n         AIF   ('&CHAR' NE '&DELIM').ENDQTOK\n.TESTEND AIF   ('&CHAR' EQ ' ').GOODTOK\n         AIF   ('&CHAR' EQ ',').GOODTOK\n.CATTOK  ANOP  ,\n&TOKEN   SETC  '&TOKEN'.'&CHAR'\n.CURINC2 ANOP  ,\n&CURSOR  SETA  &CURSOR+1\n         AGO   .SCANTOK\n.ENDQTOK AIF   ('&CHAR' EQ ' ' OR '&CHAR' EQ ',').GOODTOK\n         MNOTE 4,'TOKENS RUN TOGETHER - COMMA ASSUMED'\n         AGO   .GOODTOK\n.ENDTOK  AIF   ('&DELIM' EQ '').GOODTOK\n         AIF   ('&TOKEN' NE '').GOODTOK\n         MNOTE 8,'UNPAIRED DELIMITER IN &&SYSPARM:'\n         MNOTE 8,'&SYSPARM'\n.GOODTOK AIF   ('&TOKEN' NE 'DEBUG' OR '&DBTEST' EQ 'NO').NOTDB\n&BUGBEAR SETB  1                                                 81331\n         AGO   .FINDTOK\n.NOTDB   AIF   ('&TOKEN' EQ '360' OR '&TOKEN' EQ '370' OR '&TOKEN'     *\n               EQ '470' OR '&TOKEN' EQ '390').SETMODL           GP04234\n         AIF   ('&TOKEN' EQ 'MVS' OR '&TOKEN' EQ 'SVS' OR '&TOKEN'     *\n               EQ 'VS1' OR '&TOKEN' EQ 'MVT').SETSYS             82137\n         AIF   ('&TOKEN     '(1,6) EQ 'MVS/SP').SETSP            82091\n         AIF   ('&TOKEN     '(1,6) EQ 'MVS/XA').SETXA            82091\n         AIF   ('&TOKEN     '(1,7) EQ 'MVS/ESA').SETESA          90217\n         AIF   ('&TOKEN   '(1,3) EQ 'J2/').SETJES2               85076\n         AIF   (K'&TOKEN NE 6 AND K'&TOKEN NE 8).NOTPROP         82099\n         AIF   ('&TOKEN'(1,1) NE 'P').NOTPROP                    82099\n         AIF   ('&TOKEN'(3,1) NE '/').NOTPROP                    82099\n         AIF   ('&TOKEN'(K'&TOKEN-2,3) NE 'GEN').NOTPROP         82099\n         AIF   ('&TOKEN'(2,1) EQ 'S').PROPSOR                    82099\n         AIF   ('&TOKEN'(2,1) EQ 'M').PROPMAC                    82099\n         AIF   ('&TOKEN'(2,1) EQ 'Y').PROPSYS                    82099\n.NOTPROP AIF   (NOT &GOTLOC).GETLOC                              82099\n         AIF   (&SYSPRM# GE 10).TOOMANY\n&SYSPRM# SETA  &SYSPRM#+1\n&SYSPRMS(&SYSPRM#) SETC '&TOKEN'\n         AGO   .FINDTOK\n.SETMODL ANOP  ,                                                 81154\n&MODEL   SETC  '&TOKEN'                                          81154\n         AGO   .FINDTOK                                          81154\n.*                                                               82099\n.*       PRINT OPTIONS MAY BE PARTIALLY SET WITH THE FORM        82099\n.*       SYSPARM=P?/GEN AND =P?/NOGEN, WHERE ? IS S, M, OR Y     82099\n.PROPSOR ANOP  ,             PS/ - SET SOURCE OPTION             82099\n&PRTSOR  SETC  '&TOKEN'(4,K'&TOKEN-3)                            82099\n         AGO   .FINDTOK                                          82099\n.PROPMAC ANOP  ,             PM/ - SET LOCAL MACRO OPTION        82099\n&PRTMAC  SETC  '&TOKEN'(4,K'&TOKEN-3)                            82099\n         AGO   .FINDTOK                                          82099\n.PROPSYS ANOP  ,             PY/ - SET SYSTEM MACRO OPTION       82099\n&PRTSYS  SETC  '&TOKEN'(4,K'&TOKEN-3)                            82099\n         AGO   .FINDTOK                                          82099\n.SETJES2 ANOP  ,                                                 85076\n&JES2REL SETC  '&TOKEN'(4,K'&TOKEN-3)                            85076\n         AGO   .FINDTOK                                          85076\n.*                                                               85076\n.*                                                               82091\n.SETSP   AIF   ('&TOKEN' EQ 'MVS/SP').SETSYS                     82091\n&SPVEREL SETC  ''                                                82091\n.SETSP1  ANOP  ,                                                 82091\n&I       SETA  6                                                 82091\n.SETSP2  ANOP  ,                                                 82091\n&CHAR    SETC  ''                                                82091\n.SETSP3  ANOP  ,                                                 82091\n&I       SETA  &I+1                                              82091\n         AIF   ('&TOKEN'(&I,1) EQ '.').SPENDL                    82091\n&CHAR    SETC  '&CHAR'.'&TOKEN'(&I,1)                            82091\n         AIF   (&I LT K'&TOKEN).SETSP3                           82091\n.SPENDL  AIF   (K'&CHAR LE 2).SPNERRL                            82091\n         MNOTE 8,'\"&CHAR\" IN \"&TOKEN\" IS MORE THAN 2 DIGITS'     82091\n         MNOTE 8,'\"&CHAR\" WILL BE TRUNCATED ON THE LEFT'         82091\n.SPNERRL ANOP  ,                                                 82091\n&CHAR    SETC  '00'.'&CHAR'                                      82091\n&SPVEREL SETC  '&SPVEREL'.'&CHAR'(K'&CHAR-1,2)                   82091\n         AIF   (&I LT K'&TOKEN).SETSP2                           82091\n&SYSTEM  SETC  'MVS/SP'                                          82091\n         AIF   (K'&SPVEREL GT 2).SPRELS                          82091\n&SPVEREL SETC  '&SPVEREL'.'01'                                   82091\n.SPRELS  AIF   (K'&SPVEREL GT 4).SPLEVS                          82091\n&SPVEREL SETC  '&SPVEREL'.'00'                                   82091\n.SPLEVS  AIF   ('&SPVEREL'(1,2) LE '01').FINDTOK                 82091\n&MVSXA   SETB  1                                                 82091\n         AIF   ('&SPVEREL'(1,2) LE '02').FINDTOK                 90217\n&MVSESA  SETB  1                                                 90217\n         AGO   .FINDTOK                                          82091\n.*                                                               82091\n.SETXA   AIF   ('&TOKEN' EQ 'MVS/XA').SETSYS                     82091\n&SYSTEM  SETC  'MVS/SP'                                          82091\n&SPVEREL SETC  '02'                                              82091\n         AGO   .SETSP1                                           82091\n.*                                                               90217\n.SETESA  AIF   ('&TOKEN' EQ 'MVS/ESA').SETSYS                    90217\n&SYSTEM  SETC  'MVS/SP'                                          90217\n&SPVEREL SETC  '03'                                              90217\n         AGO   .SETSP1                                           90217\n.*                                                               82091\n.SETSYS  ANOP  ,                                                 81154\n&SYSTEM  SETC  '&TOKEN'                                          81154\n         AGO   .FINDTOK                                          81154\n.GETLOC  AIF   ('&TOKEN' EQ 'TSM').OPTTSM\n&DEFSYS  SETC  'MVS'         DEFAULT SYSTEM                      94217\n&DEFMAC  SETC  'GEN'         LOCAL MACROS                        90031\n&DEFSOR  SETC  'NOGEN'       LOCAL SOURCE                        90031\n&DEFSYM  SETC  'NOGEN'       SYSTEM MACROS                       90031\n&SVCJFCB SETA  0             NO MODJFCB SVC                      90031\n&SVC@SVC SETA  0             @SERVICE NOT INSTALLED AS SVC       90031\n&SVCTMSX SETA  0             UCC-1 TMS ?                         90031\n&SVCTMSY SETA  0             UCC-1 TMS ?                         90031\n         AGO   .OPT370                                           90031\n.*\n.OPTTSM  ANOP  ,                                                 82099\n&SVCJFCB SETA  240           MODJFCB SVC                         82099\n&SVC@SVC SETA  0             @SERVICE NOT INSTALLED AS SVC       83100\n&SVCTMSX SETA  0             UCC-1 TMS ?                         82099\n&SVCTMSY SETA  0             UCC-1 TMS ?                         82099\n.*\n.OPTMVS  ANOP  ,\n&DEFSYS  SETC  'MVS'\n         AGO   .OPT370                                           82099\n.*\n.OPTSVS  ANOP  ,\n&DEFSYS  SETC  'SVS'\n.OPT370  ANOP  ,\n&DEFMOD  SETC  '370'\n.COMLOC  ANOP  ,                                                 81154\n&LOCAL   SETC  '&TOKEN'                                          81154\n&GOTLOC  SETB  1\n         AGO   .FINDTOK                                          81154\n.TOOMANY MNOTE 8,'MORE THAN 10 ELEMENTS IN &&SYSPARM:'\n         MNOTE 8,'&SYSPARM'\n.MERGE   AIF   ('&LOCAL' NE '').MGLOC                            81154\n&LOCAL   SETC  '&DEFLOC'                                         81154\n.MGLOC   AIF   ('&MODEL' NE '').MGMOD                            81154\n&MODEL   SETC  '&DEFMOD'                                         81154\n.MGMOD   AIF   ('&PRTMAC' NE '').MGMAC                           81154\n&PRTMAC  SETC  '&DEFMAC'                                         81154\n.MGMAC   AIF   ('&PRTSOR' NE '').MGSOR                           81154\n&PRTSOR  SETC  '&DEFSOR'                                         81154\n.MGSOR   AIF   ('&PRTSYS' NE '').MGSYM                           81154\n&PRTSYS  SETC  '&DEFSYM'                                         81154\n.MGSYM   AIF   ('&SYSTEM' NE '').MGSYS                           81154\n&SYSTEM  SETC  '&DEFSYS'                                         81154\n.MGSYS   ANOP  ,                                                 81154\n&MVSESA  SETB  (&MVSESA OR '&SYSTEM' EQ 'MVS/ESA')               90217\n&MVSXA   SETB  (&MVSXA OR &MVSESA OR '&SYSTEM' EQ 'MVS/XA')      90217\n&MVSSP   SETB  (&MVSSP OR &MVSXA OR '&SYSTEM' EQ 'MVS/SP')       90217\n         AIF   (NOT &MVSSP OR '&SPVEREL' NE '').MGSP             82091\n&SYSTEM  SETC  'MVS/SP'                                          82091\n&SPVEREL SETC  '01'.'&DEFSP1R'                                   82091\n         AIF   (NOT &MVSXA).MGSP                                 82091\n&SYSTEM  SETC  'MVS/XA'                                          90217\n&SPVEREL SETC  '02'.'&DEFSP2R'                                   82091\n         AIF   (NOT &MVSESA).MGSP                                90217\n&SYSTEM  SETC  'MVS/ESA'                                         90217\n&SPVEREL SETC  '03'.'&DEFSP3R'                                   90217\n.MGSP    AIF   ('&JES2REL' NE '').MGSJ2                          85076\n&JES2REL SETC  '&DEFJES2'                                        85076\n.MGSJ2   ANOP  ,                                                 85076\n&CPU     SETC  '&MODEL'\n&MVS     SETB  ('&SYSTEM'(1,3) EQ 'MVS')                         82091\n&SVS     SETB  ('&SYSTEM' EQ 'SVS')\n&VS1     SETB  ('&SYSTEM' EQ 'VS1')                              82137\n.BYEBYE  AIF   ('&LIST' EQ 'NO').MEND                            81154\n         MNOTE *,'                                                  '\n         MNOTE *,'               INSTALLATION &LOCAL                '\n&CHAR    SETC  ''                                                85076\n         AIF   (NOT &MVSSP).PRTVER                               85076\n&CHAR    SETC  'V'.'&SPVEREL'(1,2)                               82091\n         AIF   (K'&SPVEREL LE 3).PRTVER                          82091\n&CHAR    SETC  '&CHAR'.'.R'.'&SPVEREL'(3,2)                      82091\n         AIF   (K'&SPVEREL LE 5).PRTVER                          82091\n&CHAR    SETC  '&CHAR'.'.L'.'&SPVEREL'(5,2)                      82091\n.PRTVER  MNOTE *,'      CPU   &MODEL      SYSTEM &SYSTEM  &CHAR     '\n         AIF   ('&JES2REL' EQ '').NOTJES2                        85076\n         MNOTE *,'      JES2 RELEASE &JES2REL                       '\n.NOTJES2 MNOTE *,'      PRINT SOR &PRTSOR  MAC &PRTMAC  SYS &PRTSYS '\n         MNOTE *,'      SVC:  TMS=&SVCTMSX/&SVCTMSY  JFCB=&SVCJFCB  @SV*\n               C=&SVC@SVC '                                      83100\n         MNOTE *,'                                                  '\n         AIF   ('&SHOW' EQ '').IFBUG\n         MNOTE *,'      MVS &MVS  MVS/SP &MVSSP  MVS/XA &MVSXA  MVS/ESA*\n               &MVSESA'\n.IFBUG   AIF   (NOT &BUGBEAR).MEND                               82099\n         MNOTE *,'**************************************************'\n         MNOTE *,'*                                                *'\n         MNOTE *,'*              DEBUG MODE IN EFFECT              *'\n         MNOTE *,'*                                                *'\n         MNOTE *,'**************************************************'\n.MEND    MEND  ,                                                 81154\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "S64D": {"ttr": 12804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x03\\x10?\\x01\\x13\\x12\\x1f\\x02\\x04\\x003\\x00%\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-04-13T00:00:00", "modifydate": "2013-05-01T02:04:00", "lines": 51, "newlines": 37, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      S64D  &CTR,&INC,&WK=R14\n         GBLC  &MACPLAB\n.*  SUBTRACT A 64-BIT VALUE FROM A 64-BIT VALUE.\n.*  WK MUST BE AN EVEN REGISTER, AND NOT THE '(INC)' PAIR\n.*  CTR MAY BE A DOUBLE-WORD STORAGE ADDRESS, OR AN EVEN REGISTER\n.*  INC MAY BE A DOUBLE-WORD STORAGE ADDRESS, OR AN EVEN REGISTER\n.*                                                   UPD 2013/05/01 GYP\n         LCLA  &K\n         LCLB  &TOR,&FRO     ON IF REGISTER\n         LCLC  &N,&RE,&RO,&FE,&FO\n&N       SETC  'ZZA'.'&SYSNDX'\n&MACPLAB SETC  '&NM'\n         AIF   ('&CTR(1)' EQ '&WK').REGROUT\n&K       SETA  K'&CTR\n         AIF   (&K LT 3).NOTROUT\n         AIF   ('&CTR'(1,1) NE '(').NOTROUT  POSSIBLE REGISTER SPEC?\n         AIF   ('&CTR'(2,1) EQ '(').NOTROUT  EXPRESSION?\n         AIF   ('&CTR'(&K,1) NE ')').NOTROUT  POSSIBLE REGISTER SPEC?\n         AIF   ('&CTR'(&K-1,1) EQ ')').NOTROUT  EXPRESSION?\n.REGROUT ANOP  ,\n&TOR     SETB  1\n&RE      SETC  '(&CTR(1))'\n&RO      SETC  '(1+&CTR(1))'\n.NOTROUT  ANOP  ,\n&RE      SETC  '&WK'\n&RO      SETC  '1+&WK'\n.LOOKINC ANOP  ,\n&K       SETA  K'&INC\n         AIF   (&K LT 3).NOTRINC\n         AIF   ('&INC'(1,1) NE '(').NOTRINC  POSSIBLE REGISTER SPEC?\n         AIF   ('&INC'(2,1) EQ '(').NOTRINC  EXPRESSION?\n         AIF   ('&INC'(&K,1) NE ')').NOTRINC  POSSIBLE REGISTER SPEC?\n         AIF   ('&INC'(&K-1,1) EQ ')').NOTRINC  EXPRESSION?\n.REGRINC ANOP  ,\n&FRO     SETB  1\n&FE      SETC  '(&INC(1))'\n&FO      SETC  '(1+&INC(1))'\n         AGO   .PROCESS\n.NOTRINC ANOP  ,\n&FE      SETC  '&INC'\n&FO      SETC  '4+&INC'\n.PROCESS AIF   (&TOR).NOLM   OUTPUT IN REGS - SKIP LOAD\n         MACPARM &RE,&RO,&CTR,OP=LM,MODE=THREE\n.NOLM    MACPARM &RO,&FO,OP=SL,OPR=SLR\n         MACPARM 3,&N.N,OP=BC   NO BORROW\n         MACPARM &RE,=F'1',OP=S    PROPAGATE CARRY\n&N.N     MACPARM &RE,&FE,OP=S,OPR=SR\n         AIF   (&TOR).MEND\n         MACPARM &RE,&RO,&CTR,OP=STM,MODE=THREE\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "S64F": {"ttr": 12806, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x13\\x12\\x1f\\x01\\x13\\x12\\x1f\\x02\\x18\\x001\\x001\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2013-05-01T00:00:00", "modifydate": "2013-05-01T02:18:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      S64F  &CTR,&INC,&WK=R14\n         GBLC  &MACPLAB\n.*  SUBTRACT A 32-BIT VALUE FROM A 64-BIT VALUE.\n.*  WK MUST BE AN EVEN REGISTER, AND NOT THE '(INC)' REGISTER\n.*  CTR MAY BE A DOUBLE-WORD STORAGE ADDRESS, OR AN EVEN REGISTER\n.*  INC MAY BE A WORD STORAGE ADDRESS, OR ANY UNUSED REGISTER\n.*                                                   UPD 2013/05/01 GYP\n         LCLA  &K\n         LCLB  &TOR,&FRO     ON IF REGISTER\n         LCLC  &N,&RE,&RO,&FO\n&N       SETC  'ZZA'.'&SYSNDX'\n&MACPLAB SETC  '&NM'\n         AIF   ('&CTR(1)' EQ '&WK').REGROUT\n&K       SETA  K'&CTR\n         AIF   (&K LT 3).NOTROUT\n         AIF   ('&CTR'(1,1) NE '(').NOTROUT  POSSIBLE REGISTER SPEC?\n         AIF   ('&CTR'(2,1) EQ '(').NOTROUT  EXPRESSION?\n         AIF   ('&CTR'(&K,1) NE ')').NOTROUT  POSSIBLE REGISTER SPEC?\n         AIF   ('&CTR'(&K-1,1) EQ ')').NOTROUT  EXPRESSION?\n.REGROUT ANOP  ,\n&TOR     SETB  1\n&RE      SETC  '(&CTR(1))'\n&RO      SETC  '(1+&CTR(1))'\n.NOTROUT  ANOP  ,\n&RE      SETC  '&WK'\n&RO      SETC  '1+&WK'\n.LOOKINC ANOP  ,\n&K       SETA  K'&INC\n         AIF   (&K LT 3).NOTRINC\n         AIF   ('&INC'(1,1) NE '(').NOTRINC  POSSIBLE REGISTER SPEC?\n         AIF   ('&INC'(2,1) EQ '(').NOTRINC  EXPRESSION?\n         AIF   ('&INC'(&K,1) NE ')').NOTRINC  POSSIBLE REGISTER SPEC?\n         AIF   ('&INC'(&K-1,1) EQ ')').NOTRINC  EXPRESSION?\n.REGRINC ANOP  ,\n&FRO     SETB  1\n&FO      SETC  '(&INC(1))'\n         AGO   .PROCESS\n.NOTRINC ANOP  ,\n&FO      SETC  '&INC'\n.PROCESS AIF   (&TOR).NOLM   OUTPUT IN REGS - SKIP LOAD\n         MACPARM &RE,&RO,&CTR,OP=LM,MODE=THREE\n.NOLM    MACPARM &RO,&FO,OP=AL,OPR=ALR\n         MACPARM 3,*+4+4,OP=BC   NO CARRY\n         MACPARM &RE,=F'1',OP=S     PROPAGATE CARRY\n         AIF   (&TOR).MEND\n         MACPARM &RE,&RO,&CTR,OP=STM,MODE=THREE\n.MEND    MACPARM MODE=LBL\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "S99FAIL": {"ttr": 12808, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    S99FAIL &RB=(R14),&RC=(R15),&CPPL=,&MF=G,&CP=\n         GBLB  &RCPCPPL(2)             CP INDICATOR\n         GBLC  &RCPPRE\n         LCLB  &GEN\n         LCLC  &C\n&NAME    DS    0H\n         AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF(1)' EQ 'E').EXEC\n         MNOTE 4,'&MF(1) IS AN INVALID MF, MF=G USED'\n.GEN     LA    R1,FAIL&SYSNDX     LOAD PLIST ADDRESS\n&GEN     SETB  1\n         AGO   .L\n.EXEC    AIF   ('&MF(2)' NE '').LISTOK\n         MNOTE 8,'LIST ADDRESS NOT SPECIFIED'\n         MEXIT\n.LISTOK  AIF   ('&MF(3)' EQ '').TMF2\n&MF(3)   EQU   24                      LENGTH OF PARAMETER LIST\n.TMF2    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').L\n         AIF   ('&MF(2)'(1,1) EQ '(').REG\n         LA    R1,&MF(2)          LOAD DAIRFAIL PARAM LIST ADDRESS\n         AGO   .L\n.REG     ANOP\n&C       SETC  '&MF(2)'(2,K'&MF(2)-2)\n         LR    R1,&C              LOAD DAIRFAIL PARAM LIST ADDR\n.L       AIF   ('&RB'(1,1) EQ '(').RBR\n         AIF   ('&RB' NE '').RBA\n         MNOTE 8,'REQ BLOCK ADDRESS NOT SPECIFIED'\n         MEXIT\n.RBR     ST    &RB(1),0(R1)       STORE S99 RB ADDRESS\n         AGO   .RC\n.RBA     LA    R14,&RB            LOAD ADDRESS OF REQ BLOCK\n         ST    R14,0(R1)          AND STORE IN PLIST\n.RC      AIF   ('&RC'(1,1) EQ '(').RCR\n         LA    R14,&RC            LOAD ADDRESS OF RET CODE\n         ST    R14,4(R1)          AND STORE IN PLIST\n         AGO   .EFF02\n.RCR     ANOP\n.GRC     LA    R14,20(R1)         LOAD ADDR RET CODE FLD\n         ST    &RC(1),0(R14)      STORE RET CODE\n         ST    R14,4(R1)          AND STORE ITS ADDRESS\n.EFF02   LA    R14,=A(0)          LOAD ADDR OF FULLWORD OF 0\n         ST    R14,8(R1)          STORE IT.\n         AIF   ('&CP' EQ 'YES' OR &RCPCPPL(1)).CPID\n         LA    R14,=X'8032'       LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)          AND STORE IT\n         XC    16(4,R1),16(R1)    CLEAR CPPL POINTER\n         AGO   .GO\n.CPID    LA    R14,=Y(50)         LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)         AND STORE IT\n         AIF   ('&CPPL' EQ '').DCPPL\n         AIF   ('&CPPL'(1,1) EQ '(').RCPPL\n         LA    R14,&CPPL          LOAD CPPL ADDRESS\n         ST    R14,16(R1)          AND STORE IT\n         AGO   .GO\n.DCPPL   MVC   16(4,R1),&RCPPRE.CPPL MOVE IN CPPL ADDRESS\n         AGO   .GO\n.RCPPL   ST    &CPPL(1),16(R1)    STORE ADDRESS OF CPPL\n.GO      LINK  EP=IKJEFF18\n         AIF   (NOT &GEN).EXIT\n         SPACE 1\n         RCPDS\n&C SETC 'FAIL&SYSNDX'\n&C       DS    6F             RESERVE SPACE FOR PARAM LIST\n         RCPDS\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TERMTYPE": {"ttr": 12810, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TERMTYPE &TERMIDL=\n         CNOP 0,4\n&NAME    DS   0H\n         SR   1,1                  ZERO REGISTER 1\n         LA   0,&TERMIDL           LOAD TERMINAL ID LOCATION\n         LA   15,2                 LOAD ENTRY CODE\n         SLL  15,24                SHIFT TO TOP BYTE\n         OR   0,15                 GATE INTO REGISTER 0\n         LNR  0,0                  MAKE NEGATIVE\n         SVC  94                   ISSUE TERMINAL CONTROL SVC\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIC": {"ttr": 12812, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x07\\x00o\\x01\\x07\\x00o!4\\x00\\x04\\x00\\x04\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2007-01-06T00:00:00", "modifydate": "2007-01-06T21:34:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      TIC   &ADDR         DEFINE TRANSFER-IN-CHANNEL CCW     GP07007\n&NM      CCW   X'08',(&ADDR),0,0\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMONSECT": {"ttr": 12814, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      TMONSECT &IO=5,&US=2,&DSECT=YES                ADDED ON 86155\n         LCLC  &N\n&N       SETC  'TMONSECT'\n         AIF   ('&NM' EQ '').DFLT\n&N       SETC  '&NM'\n.DFLT    AIF   ('&DSECT' EQ 'YES' OR '&DSECT' EQ '').DSECT\n         AIF   ('&DSECT' EQ 'DSECT').DSECT\n         AIF   ('&DSECT' EQ 'CSECT').CSECT\n&N       DS    0D            TMON APPLICATION DATA RECORD  10/84\n         AGO   .COMMON\n.CSECT   ANOP  ,\n&N       CSECT ,             TMON APPLICATION DATA RECORD  10/84\n         AGO   .COMMON\n.DSECT   ANOP  ,\n&N       DSECT ,             TMON APPLICATION DATA RECORD  10/84\n.COMMON  ANOP  ,\nTMDRDW   DC    Y(TMDRLEN,0)  SAM RECORD DESCRIPTOR\nTMDALEN  DC    Y(TMDRLEN-4)  LENGTH WITHOUT SAM RDW\nTMDRECID DC    C'D'          RECORD TYPE (DETAIL RECORD)\nTMDDETID EQU   C'D'            DETAIL RECORD ID\nTMDSYSID DC    CL4' '        APPLICATION ID OF CICS SYSTEM\nTMDTRAID DC    CL8' '        TRANSACTION NAME\nTMDTERM  DC    CL4' '        TERMINAL ID\nTMDUSER  DC    CL3' '        OPERATOR ID\nTMDPGM   DC    CL8' '        PROGRAM NAME OF FIRST IN TRANSACTION\nTMDACCT  DC    CL8' '        USER (ACCOUNT) FIELD\nTMDRECDT DC    CL6' '        TERMINATION DATE (YYMMDD)\nTMDABND  DC    CL4' '        CICS ABEND NAME\nTMDTSKID DC    PL3'0'        TCA TASK ID\nTMDFACFG DC    X'00'         FACILITY FLAG\nTMDSELVL DC    X'00'         SECURITY LEVEL\nTMDVEREL DC    X'00'         CICS VERSION/RELEASE\nTMDMONVR DC    AL1(0)        TMON VERSION NUMBER\n         DC    X'00'           RESERVED\nTMDTASK# DC    XL4'0'        TMON'S ORIGINATED TASK COUNT\n         DC    XL4'0'          RESERVED\nTMDTIMON DC    XL4'0'        ATTACH START TIME\nTMDTIMOF DC    XL4'0'        DETACH TIME\nTMDTIMRN DC    XL4'0'        PROCESSING TIME\nTMDCPU   DC    XL4'0'        CPU TIME\nTMDWAIT  DC    XL4'0'        WAIT TIME\nTMDPAGIN DC    XL4'0'        PAGES PAGED IN\nTMDPAGOT DC    XL4'0'        PAGES PAGED OUT\nTMDSTHWM DC    XL4'0'        TCA/TIOA STORAGE HIGH-WATER MARK\nTMD#GETM DC    XL4'0'        NUMBER OF GETMAINS ISSUED\nTMDHISTG DC    XL4'0'        HIGHEST NUMBER OF GETMAINS\nTMDTRMIN DC    XL4'0'        TERMINAL INPUT COUNT\nTMDTRMIL DC    XL4'0'        TERMINAL INPUT LENGTH\nTMDTRMOT DC    XL4'0'        TERMINAL OUTPUT COUNT\nTMDTRMOL DC    XL4'0'        TERMINAL OUTPUT LENGTH\nTMDTYPE  DC    X'00'         DEVICE TYPE FROM TCTTE\nTMDAID   DC    X'00'         TCTTE AID BYTE AT TASK START\nTMDFG1   DC    X'00'         FLAGS\nTMFMAXTK EQU   X'80'           MAX TASKS OCCURRED\nTMFMAXAC EQU   X'40'           MAXIMUM ACTIVE OCCURRED\nTMFSOS   EQU   X'20'           SOS OCCURRED\nTMFSTGV  EQU   X'10'           STORAGE VIOLATION\nTMFABND  EQU   X'08'           ABENDED\nTMFABNDM EQU   X'04'           ABENDED BY MONITOR\nTMFSUSP  EQU   X'02'           SUSPENDED\nTMFENQ   EQU   X'01'           CICS ENQUEUE USED\nTMDFG2   DC    X'00'         MORE FLAGS\nTMFIBMTK EQU   X'80'           IBM TASK\nTMFCONTK EQU   X'40'           CONVERSATIONAL TASK\nTMFPRTTK EQU   X'20'           PRINTER TASK\nTMFATITK EQU   X'10'           ATI TASK\nTMFSWAIT EQU   X'08'           STRING WAIT\nTMFBWAIT EQU   X'04'           BUFFER WAIT\nTMFDMS   EQU   X'02'           DMS USED\nTMFUFO   EQU   X'01'           UFO USED\nTMDFG3   DC    X'00'         STILL MORE FLAGS\nTMFBAL   EQU   X'80'           PROGRAM IN ASSEMBLER LANGUAGE\nTMFPLI   EQU   X'40'           PL/I\nTMFCOB   EQU   X'20'           COBOL\nTMFRPG   EQU   X'10'           RPG\nTMFPSPF  EQU   X'04'           PROGRAM SUBPOOL COMPRESSED\nTMFPFET  EQU   X'02'           PROGRAM FETCH USED\nTMFABNDS EQU   X'01'           SYSTEM ABEND OCCURRED\nTMDFG4   DC    X'00'         AND YET MORE FLAGS\nTMFACP   EQU   X'80'           ACP\nTMFIRC   EQU   X'40'           IRC\nTMFISC   EQU   X'20'           ISC\nTMFEIP   EQU   X'10'           EIP\nTMFICP   EQU   X'08'           ICP\nTMFFCP   EQU   X'04'           FCP\nTMFTDP   EQU   X'02'           TDP\nTMFTSP   EQU   X'01'           TSP\nTMDFG5   DC    X'00'         ALMOST THE LAST FLAGS\nTMFDLI   EQU   X'80'           DL/I\nTMFJCP   EQU   X'40'           JCP\nTMFBMS   EQU   X'20'           BMS\nTMFBIF   EQU   X'10'           BIF\nTMFPSB   EQU   X'08'           PSB SCHEDULED\nTMFPRAY  EQU   X'04'           MANTIS USED\nTMFNATCH EQU   X'02'           NATURAL USED\nTMFSTAR  EQU   X'01'           GENER/OL USED\nTMDFG6   DC    X'00'         LAST, BUT NOT LEAST, FLAGS\nTMFDETL  EQU   X'80'           DETAIL RECORD\nTMFSUMRY EQU   X'40'           SUMMARY RECORD\nTMFSYSTM EQU   X'20'           SYSTEM DETAIL (TCP, KCP, JCP)\nTMFCISPT EQU   X'02'           CI SPLIT OCCURRED\nTMFCASPT EQU   X'01'           CA SPLIT OCCURRED\nTMDFCPTM DC    XL4'0'        FCP FILE TIME\nTMDFCPCT DC    XL4'0'        FCP COUNT\nTMDDLITM DC    XL4'0'        DL1 CALLS TIMES\nTMDDLICT DC    XL4'0'        DL1 COUNT\nTMDSTGTM DC    XL4'0'        TEMPSTG TIMES\nTMDSTGCT DC    XL4'0'        TEMPSTG COUNT\nTMDELATM DC    XL4'0'        TD (EXTRA) ELAPSED TIME\nTMDELACT DC    XL4'0'        TD (EXTRA) COUNT\nTMDFETTM DC    XL4'0'        PROGRAM FETCH TIME\nTMDFETCT DC    XL4'0'        PROGRAM FETCH COUNT\nTMDJURTM DC    XL4'0'        JOURNAL TIME\nTMDJURCT DC    XL4'0'        JOURNAL COUNT\nTMDIONUM DC    AL1(&IO)      NUMBER OF ENTRIES THAT FOLLOW\nTMDIOREC DS    0X            START OF I/O FILE ACCESS ENTRY\nTMDIOFIT DC    CL8' '        FILE/DBD NAME\nTMDIOFG1 DC    X'00'         FILE TYPE FLAG\nTMFISAM  EQU   X'80'           ISAM\nTMFBDAM  EQU   X'40'           BDAM\nTMFVSAM  EQU   X'20'           VSAM\nTMFIODLI EQU   X'10'           DL/I\nTMFIORMT EQU   X'08'           REMOTE ?\nTMFIOPSB EQU   X'04'           DL/I PSB\nTMFUSER  EQU   X'01'           USER DATABASE\nTMDIOFG2 DC    X'00'         ACTION FLAGS\nTMFADD   EQU   X'80'           ADD/INSERT\nTMFUPDT  EQU   X'40'           UPDATE/REPLACE\nTMFGET   EQU   X'20'           GET\nTMFPEEK  EQU   X'10'           BROWSE\nTMFOC    EQU   X'08'           OPEN/CLOSE\nTMFVSSWT EQU   X'04'           VSAM STRING WAIT\nTMFVSBWT EQU   X'02'           VSAM BUFFER WAIT\nTMFSPLIT EQU   X'01'           VSAM SPLIT OCCURRED\nTMDIOUCB DC    XL2'0'        FILE/DBD UCB CUU\nTMDIOVOL DC    CL6' '        FILE/DBD VOLUME SERIAL\nTMDIOTIM DC    XL4'0'        ACCESS TIME\nTMDIOCT  DC    XL4'0'        ACCESS COUNT\nTMDIOLEN EQU   *-TMDIOREC      LENGTH OF ONE ENTRY\n         ORG   TMDIOREC      REDEFINE\nTMDIOENT DC    (&IO)XL(TMDIOLEN)'0'    FILE ACCESS TABLE ENTRIES\nTMDUSNUM DC    X'00'         NUMBER OF USER ENTRIES\nTMDUSREC EQU   *             START OF USER RECORD ENTRY\nTMDUSID  DC    X'00'         TMCT ID CODE\nTMDUSFG1 DC    X'00'         FLAG\nTMFCLOCK EQU   X'80'           CLOCK ENTRY\nTMFCOUNT EQU   X'40'           COUNTER ENTRY\nTMDUSDAT DC    XL4'0'        ACCUMULATED DATA (TIMES OR COUNTS)\nTMDUSOCC DC    XL4'0'        NUMBER OF OCCURRENCES\nTMDUSBEG DC    XL4'0'        START TIME\nTMDUSLEN EQU   *-TMDUSREC    LENGTH OF ONE ENTRY\n         ORG   TMDUSREC      BUMP BACK\nTMDUSENT DC    (&US)XL(TMDUSLEN)'0'  INITIALIZE\nTMDRLEN  EQU   *-TMDRDW      LENGTH OF RECORD\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMSREC": {"ttr": 12818, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM     TMSREC &SECT=DSECT,&P=TM,&VERSION=50                     92364\n         LCLC  &N\n.*       THIS IS A LOCAL VERSION OF THE CA-1 (UCC-1) VOLUME RECORD.\n.*       THE COPY WAS ADDED HERE TO PERMIT UTILITIES AND REPORT\n.*       PROGRAMS TO BE ASSEMBLED INDEPENDENTLY OF TMS LIBRARIES.\n.*       UPDATED FOR TMS 4.8 (FUNNY EXPDT, 3480 SUPPORT)         90082\n&N       SETC  '&NM'\n         AIF   ('&SECT' EQ 'DSECT').DSECT\n         AIF   ('&NM' EQ '').DONESEC\n&NM       DS   0D            ALIGN RECORD\n         AGO   .DONESEC\n.DSECT   AIF   ('&N' NE '').HDSEC\n&N       SETC  'TMRECORD'\n.HDSEC   ANOP  ,\n&N       DSECT ,\n.DONESEC AIF   (&VERSION GE 50).NEWREC                           92364\n&P.DSN    DS   CL44          DATASET\n&P.STPNAM DS   CL8           NAME OF STEP (OR PROC?)\n&P.SLOT   DS   AL2           VAULT #\n&P.VOLSEQ DS   AL2           VOLUME SEQUENCE\n&P.CRTDT  DS   PL3           CREATION DATE\n&P.EXPDT  DS   PL3           EXPIRATION DATE\n&P.TRTCH  DS   XL1           TAPE MODE\n&P.9TRK  EQU   X'80'            9-TRACK TAPE\n&P.18TRK EQU   X'C0'           18-TRACK (CARTRIDGE)              90082\n*        EQU   X'23'            7-TRACK, EVEN\n*        EQU   X'3B'            7-TRACK, TRANSLATE\n*        EQU   X'13'            7-TRACK, CONVERT\n*        EQU   X'2B'            7-TRACK, EVEN + TRANSLATE\n&P.DEN    DS   XL1           RECORDING DENSITY\n&P.38000 EQU   X'E3'           18-TRACK IN 38K BPI MODE          90082\n&P.38KC  EQU   X'E7'          38000 BPI  18-TRACK  COMPRESSED    90316\n*        EQU   X'D3'           6250 BPI   9-TRACK\n*        EQU   X'C3'           1600 BPI   9-TRACK\n*        EQU   X'83'            800 BPI   7-TRACK\n*        EQU   X'43'            556 BPI   7-TRACK\n*        EQU   X'03'            200 BPI   7-TRACK\n&P.LTYPE  DS   XL1           LABEL TYPE\n*        EQU   X'02'            SL\n*        EQU   X'0A'            SUL\n*        EQU   X'01'            NL\n*        EQU   X'04'            NSL\n*        EQU   X'10'            BLP\n*        EQU   X'40'            AL     AL1\n*        EQU   X'48'            AU1                              90082\n*        EQU   X'C0'            AL3                              90082\n*        EQU   X'C8'            AU3                              90082\n&P.RECFM  DS   XL1           RECFORM\n&P.BLKSI  DS   AL2           BLKSIZE\n&P.LRECL  DS   AL2           RECORD LENGTH\n&P.FLAG2  DS   XL1           TMS FLAGS\n&P.CATLOG EQU  X'80'            DSN IS CATALOGED\n&P.OUTPUT EQU  X'40'            DS WAS WRITTEN\n&P.REUSE  EQU  X'20'            DS RECREATED\n&P.TEMPDS EQU  X'10'            TEMPORARY DS\n&P.E99000 EQU  X'08'            99000 EXPIRATION\n&P.E99CCC EQU  X'04'            99CCC CYCLE EXPIRATIO\n&P.E98DDD EQU  X'02'            98DDD ?\n&P.ETMS   EQU  X'01'            EXPIRED BY TMS\n&P.VOLSER DS   CL6           VOLUME SERIAL\n&P.NXTVOL DS   CL6           NEXT VOLUME IN GROUP\n&P.PRVVOL DS   CL6           PRIOR VOLUME IN GROUP\n&P.DSSIF  DS   XL1           PSWD FLAGS\n&P.DSSPW  DS   XL4           TMS ACCESS PASSWORD\n&P.#DSNBS DS   XL2           DSNB COUNT\n&P.ADSNB  DS   AL4           BLOCK # OF FIRST DSNB\n&P.FRSVOL DS   CL6           FIRST VOLUME IN GROUP\n&P.BATCH# DS   XL1           UPDATE ID ?\n&P.FLAG3  DS   XL1           TMS FLAGS\n&P.BADTAP EQU  X'80'           DO NOT USE FOR SCRATCH\n&P.XPDTCH EQU  X'40'           EXPDT IS PHONY\n&P.EXTAP  EQU  X'20'           MANAGED OUTSIDE TMS ?\n&P.DYNAM  EQU  X'10'           DYNAM-T TAPE ?                    90316\n&P.CRTTI  DS   PL3           TIME CREATED\n&P.CRUNI  DS   XL2           CUU WRITTEN ON\n&P.USUNI  DS   XL2           CUU USED ON\n&P.LASUSD DS   PL3           LAST USED DATE\n&P.LASUSJ DS   CL8           LAST USED JOB\n&P.BTHDT  DS   PL3           FIRST EVER USE\n&P.UCOUNT DS   XL2           USE COUNT\n&P.FLAG1  DS   XL1           TMS FLAGS\n&P.INTAL  EQU  X'80'           FIELD CHANGED BY USER\n&P.CLOSED EQU  X'40'           CLOSED BY TMS\n&P.UPDATE EQU  X'20'           UPDATED BY USER\n&P.ABEND  EQU  X'10'           WRITER ABENDED\n&P.CLEAN  EQU  X'08'           SCHEDULE CLEANING\n&P.SCRTCH EQU  X'04'           LISTED ON SCRATCH\n&P.DELET  EQU  X'02'           PHYSICAL DELETION FROM TAPELIB\n&P.DFAULT EQU  X'01'           DEFAULT EXPIRY\n&P.CLNCNT DS   XL1           # TIMES CLEANED\n&P.OUTDAT DS   PL3           DATE OF REMOVAL FROM SITE\n&P.OUTAR  DS   CL4           DESTINATION NICKNAME\n&P.USECLN DS   AL2           TIMES USED AT LAST CLEANING\n&P.DATCLN DS   PL3           DATE CLEANED\n&P.BLKCNT DS   FL4           BLOCKS IN DS\n&P.RERROR DS   XL1           # OF READ ERRORS\n&P.WERROR DS   XL1           # OF WRITE ERRORS\n&P.JOBNM  DS   CL8           NAME OF (RE)CREATING JOB\n&P.USER   DS   0CL41         P.I.D.I. GOODIES FIELD\nIGPACCT  DS    0CL8          ACCT AND SUB-ACCT\nIGPACT   DC    CL4' '        ACCOUNT NUMBER\nIGPSUB   DC    CL4' '        SUB ACCOUNT\nIGPOWN   DC    C' '          OWNERSHIP FLAG\nIGPOCUS  EQU   C'C'          CUSTOMER OWNED\nIGPOIGP  EQU   C'D'          PIDI OWNED\nIGPBILL  DC    C' '          BILLING FLAG\nIGPOBIL  EQU   C'B'          BILLABLE\nIGPOFRE  EQU   C'F'          FREEBEE\nIGPOFLAG DC    X'00'         SPECIAL PROCESSING FLAGS\nIGPFSYS  EQU   X'80'           SYSTEMS BYPASS - SMF DUMP ETC.\nIGPFBACK EQU   X'40'           TAPE USED FOR BACKUP SERVICE\nIGPODEC  EQU   X'20'           DEC SYSTEM TAPE\nIGPFBLP  EQU   X'10'           SKIP VOL PROMPT WITH BLP\nIGPFFLG5 EQU   X'08'           RESERVED\nIGPFFLG6 EQU   X'04'           RESERVED\nIGPFFLG7 EQU   X'02'           RESERVED\nIGPFMANU EQU   X'01'           MANUAL PROCESSING\nIGPPGMNM DC    CL8' '        PROGRAM NAME\nIGPDUMMY DC    CL22' '       ROOM FOR MORE STUFF\n         MEXIT ,                                                 92364\n.NEWREC  ANOP  ,                                                 92364\n&P.VOLSER  DS  CL6           VOLUME SERIAL                       92364\n&P.DSN     DS  CL44          DATA SET NAME                       92364\n&P.EXPDT   DS  PL4           EXPIRATION DATE                     92364\n&P.VOLSEQ  DS  H             VOLUME SEQUENCE NUMBER              92364\n&P.FRSVOL  DS  CL6           FIRST VOLSER OF DATA SET            92364\n&P.PRVVOL  DS  CL6           PREVIOUS VOLSER OF DATA SET         92364\n&P.NXTVOL  DS  CL6           NEXT VOLSER OF DATA SET             92364\n&P.#DSNBS  DS  H             NUMBER OF DATA SET NAME BLOCKS      92364\n&P.ADSNB   DS  F             ADDRESS OF FIRST DSNB               92364\n&P.ALDSNB  DS  F             ADDRESS OF LAST DSNB                92364\n&P.FLAG1   DS  X             FLAGS (1-4)                         92364\nF1INTAL  EQU   X'80'           FIELD CHANGED BY USER             92364\nF1CLOSED EQU   X'40'           VOLUME CLOSED BY TMS              92364\nF1UPDATE EQU   X'20'           RECORD UPDATED BY USER            92364\nF1ABEND  EQU   X'10'           VOLUME CLOSED BY ABEND            92364\nF1CLEAN  EQU   X'08'           TAPE IS TO BE CLEANED             92364\nF1SCRTCH EQU   X'04'           LISTED ON SCRATCH LIST            92364\nF1DELET  EQU   X'02'           VOLUME DELETED FROM LIBRARY       92364\nF1DFAULT EQU   X'01'           DEFAULT EXPIRATION DATE USED      92364\n&P.FLAG2   DS  X                                                 92364\nF2CATLOG EQU   X'80'           DATA SET IS CATALOGED             92364\nF2OUTPUT EQU   X'40'           DATA SET OPENED FOR OUTPUT        92364\nF2REUSE  EQU   X'20'           DATA SET RECREATED                92364\nF2TEMPDS EQU   X'10'           TEMPORARY DATA SET                92364\nF2ECATLG EQU   X'08'           EXPIRE UNDER CATALOG CONTROL      92364\nF2ECYCLE EQU   X'04'           EXPIRE UNDER CYCLE CONTROL        92364\nF2ELDATE EQU   X'02'           EXPIRE UNDER FREQUENCY CONTROL    92364\nF2ETMS   EQU   X'01'           EXPIRED BY TMS                    92364\n&P.FLAG3   DS  X                                                 92364\nF3BADTAP EQU   X'80'           BAD TAPE, DO NOT MOUNT FOR SCRATCH\nF3EDMTAP EQU   X'20'           EXTERNALLY MANAGED TAPE           92364\nF3DYNAM  EQU   X'10'           DYNAM-T OWNED TAPE                92364\nF3FILCPY EQU   X'01'           FILE CREATED BY CA-1/COPYCAT      92364\n&P.FLAG4   DS  X                                                 92364\n&P.TRTCH   DS  X             TRTCH                               92364\nFT9TRK   EQU   X'80'                                             92364\nFT18TRK  EQU   X'C0'           3480                              92364\nFT36TRK  EQU   X'E0'           3490                              92364\n*        EQU   X'23'            7-TRACK, EVEN\n*        EQU   X'3B'            7-TRACK, TRANSLATE\n*        EQU   X'13'            7-TRACK, CONVERT\n*        EQU   X'2B'            7-TRACK, EVEN + TRANSLATE\n&P.DEN     DS  X             DENSITY                             92364\nFD38000  EQU   X'E3'           3480 CARTRIDGE @ 38000 BPI        92364\nFD38KC   EQU   X'E7'                    -\"-   COMPACTED          92364\n*        EQU   X'D3'           6250 BPI   9-TRACK\n*        EQU   X'C3'           1600 BPI   9-TRACK\n*        EQU   X'83'            800 BPI   7-TRACK\n*        EQU   X'43'            556 BPI   7-TRACK\n*        EQU   X'03'            200 BPI   7-TRACK\n&P.LTYPE   DS  X             TAPE LABEL TYPE                     92364\n*        EQU   X'02'            SL\n*        EQU   X'0A'            SUL\n*        EQU   X'01'            NL\n*        EQU   X'04'            NSL\n*        EQU   X'10'            BLP\n*        EQU   X'40'            AL     AL1\n*        EQU   X'48'            AU1                              90082\n*        EQU   X'C0'            AL3                              90082\n*        EQU   X'C8'            AU3                              90082\n&P.RECFM   DS  X             RECORD FORMAT                       92364\n&P.LRECL   DS  F             RECORD LENGTH                       92364\n&P.BLKSI   DS  F             MAXIMUM BLOCK SIZE                  92364\n&P.BLKCNT  DS  F             DATA SET BLOCK COUNT                92364\n&P.OUTDAT  DS  PL4           DATE TAKEN OUT OF AREA              92364\n&P.OUTAR   DS  CL4           (OUT OF) AREA CODE                  92364\n&P.SLOT    DS  F             VAULT SLOT NUMBER                   92364\n&P.CRTDT   DS  PL4           CREATION DATE                       92364\n           DS  X                                      FILLER     92364\n&P.CRTTI   DS  PL3             AND TIME                          92364\n&P.JOBNM   DS  CL8           CREATING JOB NAME                   92364\n&P.STPNAM  DS  CL8             STEP NAME                         92364\n&P.DDNAME  DS  CL8             DDNAME                            92364\n&P.CRUNI   DS  XL2             UNIT                              92364\n&P.LASUSD  DS  PL4           DATE LAST ACCESSED                  92364\n           DS  X                                                 92364\n&P.LASUST  DS  PL3             AND TIME                          92364\n&P.LASUSJ  DS  CL8           JOB THAT LAST USED VOLUME           92364\n&P.USUNI   DS  XL2             UNIT                              92364\n&P.DSSIF   DS  X             INSECURITY FLAGS                    92364\nTSSDPRO  EQU   X'80'           TMS SECURITY PROTECTED            92364\nTSDDREA  EQU   X'40'             READ PROTECTED                  92364\nTSDDWRT  EQU   X'20'             WRITE PROTECTED                 92364\n&P.DSSPW   DS  XL4           SECURITY PASSWORD                   92364\n&P.CLNCNT  DS  X             COUNT OF TAPE CLEANINGS             92364\n&P.USECLN  DS  HL2           USE COUNT AT LAST CLEANING          92364\n&P.DATCLN  DS  PL4           DATE OF LAST CLEANING               92364\n&P.BTHDT   DS  PL4           DATE OF FIRST USE                   92364\n&P.UCOUNT  DS  XL2           NUMBER OF USES                      92364\n&P.VENDOR  DS  CL8           VENDOR'S NAME (???)                 92364\n&P.EDMID   DS  CL4           EXT. MANAGER ID                     92364\n&P.TRERRC  DS  XL2           TEMP READ ERRORS: CLEAN             92364\n&P.TWERRC  DS  XL2           TEMP WRITE ERRORS: CLEAN            92364\n&P.PRERRC  DS  XL2           PERM READ ERRORS: CLEAN             92364\n&P.PWERRC  DS  XL2           PERM WRITE ERRORS: CLEAN            92364\n&P.TRERRI  DS  XL2           TEMP READ ERRORS: INIT              92364\n&P.TWERRI  DS  XL2           TEMP WRITE ERRORS: INIT             92364\n&P.PRERRI  DS  XL2           PERM READ ERRORS: INIT              92364\n&P.PWERRI  DS  XL2           PERM WRITE ERRORS: INIT             92364\n&P.DSN17   DS  XL17          REAL TAPE DSN                       92364\n           DS  XL35                       RESERVED               92364\n&P.USER    DS  0CL50         USER'S PLAYGROUND                   92364\nPIDACCT  DS    0CL8          ACCT AND SUB-ACCT                   92364\nPIDACT   DS    CL4' '        ACCOUNT NUMBER                      92364\nPIDSUB   DS    CL4' '        SUB ACCOUNT                         92364\nPIDOWN   DS    C' '          OWNERSHIP FLAG                      92364\nPIDOCUS  EQU   C'C'            CUSTOMER OWNED                    92364\nPIDOPID  EQU   C'D'            DATACENTER OWNED                  92364\nPIDBILL  DS    C' '          BILLING FLAG                        92364\nPIDOBIL  EQU   C'B'            BILLABLE                          92364\nPIDOFRE  EQU   C'F'            FREEBEE                           92364\nPIDOFLAG DS    X'00'         SPECIAL PROCESSING FLAGS            92364\nPIDFSYS  EQU   X'80'           SYSTEMS BYPASS - SMF DUMP ETC.    92364\nPIDFBACK EQU   X'40'           TAPE USED FOR BACKUP SERVICE      92364\nPIDODEC  EQU   X'20'           HARRIS SYSTEM TAPE                92364\nPIDFBLP  EQU   X'10'           SKIP VOL PROMPT WITH BLP          92364\nPIDFFLG5 EQU   X'08'             RESERVED                        92364\nPIDFFLG6 EQU   X'04'             RESERVED                        92364\nPIDFFLG7 EQU   X'02'             RESERVED                        92364\nPIDFMANU EQU   X'01'             RESERVED                        92364\nPIDPGMNM DS    CL8' '        PROGRAM NAME                        92364\nPIDJNAME DS    CL8' '          ???                               92364\nPIDDUMMY DS    CL23' '       ROOM FOR MORE STUFF                 92364\n         DS    H               ???                               92366\n         DS    PL4           DATE ?                              92366\n         DS    PL4           TIME ?                              92366\n         DS    4H              ???                               92366\nTMCPUID  DS    CL4           SMCA ID                             92366\n         DS    H                                                 92366\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TRANHEAD": {"ttr": 13061, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      TRANHEAD &DOLL=C';'                               ADDED 79299\n         COPY  OPTIONS\n         LCLA  &I\n         LCLC  &N1\n&N1      SETC  '&NM'\n         AIF   ('&N1' EQ '').BOOBOO\n&I       SETA  K'&NM-4\n         AIF   (&I LT 1).BOOBOO\n         AIF   ('&N1'(1,4) NE 'EXHT').BOOBOO\n&N1      SETC  '&N1'(5,&I)\n&NM      START 0\n         USING *,R15\n         NUSE  SQSP,R13\n         NUSE  WORK,R11\n*        THIS MODULE PROVIDES TRANSLATION CODE AND TRANSLATE TABLES\n*        FOR SPECIFIC DEVICES.  THE CODE ASSUMES THAT THE TRANSLATE\n*        INSTRUCTION MAY BE USED; E.G. APL AND SIMILAR KEYBOARDS\n*        WITH TWO-CHARACTER SHIFT SEQUENCES ARE NOT SUPPORTED.\n*\n*        INPUT R2 - BUFFER TO BE TRANSLATED  R3 - BUFFER LENGTH\n*              R0 - FUNCTION SWITCH 0/OUT,DATA  2/OUT,CONTROL\n*                                   4/IN,VAR. CASE  6/IN,UPPER CASE\n*              R15 - BASE ADDRESS OF THIS MODULE\n*              R14 - RETURN ADDRESS\n*          R0-R3 ARE DESTROYED\n*\n         B     TRANSLAT      GO TO TRANSLATION CODE\n         SPACE 1\n         DC    CL4'&N1 '     MODULE ID\nTRANPOIN DC    Y(OUTDATA-&NM)  OUTPUT TABLE; DATA ONLY\n         DC    Y(OUTCON-&NM)   OUTPUT TABLE; CONTROL AND DATA\nTRANULOW DC    Y(INUPLOW-&NM)  INPUT TABLE; UPPER+LOWER CASE\n         DC    Y(INUPPER-&NM)  INPUT TABLE; UPPER CASE ONLY\nTRANSDOL DC    AL1(&DOLL)    ALTERNATE FOR $ IN COMMANDS         87176\n         DC    XL3'0'          SPARE                             87176\n         DC    3A(0)         FOR EXPANSION\n         SPACE 1\nTRANSLAT CH    R0,=Y(TRANULOW-TRANPOIN)  UPLOW INPUT ?\n         BNE   TRANSLAS      NO\n         TM    SQTRANS,X'80'  UPLOW FLAG SET ?\n         BNZ   TRANSLAS      YES; LEAVE LOWER CASE\n         LA    R0,TRANULOW+2-TRANPOIN  SET UPPER CASE ONLY\nTRANSLAS LR    R1,R0         COPY TABLE OFFSET\n         LH    R1,TRANPOIN(R1)  GET TABLE OFFSET IN MODULE\n         AR    R1,R15        GET TABLE ADDRESS\n         LTR   R3,R3         VALID LENGTH ?\n         BNPR  R14           NO; RETURN\n         LR    R0,R14        SAVE RETURN ADDRESS\n         LA    R14,255       MAKE LENGTH VALUE FOR EXECUTE\nTRANLOOP CH    R3,=H'256'    MORE TO DO ?\n         BNL   *+8           YES\n         LR    R14,R3\n         BCTR  R14,0         SET FOR EXECUTE\n         EX    R14,TRANTR    TRANSLATE\n         LA    R2,1(R2,R14)  BUMP BUFFER\n         BCTR  R3,0          DECREMENT LENGTH\n         SR    R3,R14        MORE TO DO ?\n         BP    TRANLOOP\n         LR    R14,R0        REGAIN EXIT ADDRESS\n         BR    R14           RETURN TO CALLER\nTRANTR   TR    0(0,R2),0(R1)  TRANSLATE BUFFER\n         SPACE 1\n         LTORG ,\n         PUSH  PRINT\n         PRINT NOGEN\n&NM      CSECT ,\n         MSECT ,\n&NM      CSECT ,\n         POP   PRINT\n.MEXIT   MEXIT\n.BOOBOO  MNOTE 12,'NAME MISSING OR INVALID'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TRENT": {"ttr": 13064, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x12\\x00_\\x01\\x12\\x01/\\x01\\x10\\x00C\\x00D\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2012-01-05T00:00:00", "modifydate": "2012-01-12T01:10:00", "lines": 67, "newlines": 68, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      TRENT &TAB,&VAL,&OFF,&FILL=                    ADDED ON 86311\n.*\n.*   This macro is used to create translate and translate and test\n.*     tables in compact fashion.\n.*\n.*   The table may be built by (separate) DC statements, or by\n.*     a TRENT entry with a FILL= operand and a name field.     GP12005\n.*\n.*   Any name field is attached to first expanded DC, if any\n.*     First positional is name of table to be modified; may be\n.*       null after first occurrence and after a FILL\n.*     Second positional is value to be placed in table; may be\n.*       null after first occurrence. May be expression.\n.*     Subsequent values are offsets in self-defining form, i.e.,\n.*       X'nn', C'x', integer, equate value, or absolute expression.\n.*     A sublist may be used, offset in first value, repeat count\n.*       in second.\n.*     When the last parm is null, no final ' ORG ' is created.\n.*       (requested by trailing comma)\n.*     When no parameters are supplied, a final ' ORG ' is expanded.\n.*\n.*       ex.:  upper case translate:\n.*       UPTAB DC    256AL1(*-UPTAB)     or\n.*       UPTAB TRENT FILL=(*-UPTAB)\n.*             TRENT UPTAB,*-UPTAB+X'40',(X'81',9),(X'91',9),(X'A2,8)\n.*\n         GBLC  &ZZ@TAB,&ZZ@VAL\n         LCLC  &N\n         LCLA  &I,&J\n&J       SETA  N'&SYSLIST\n&N       SETC  '&NM'\n         AIF   (T'&FILL EQ 'O').DATA                            GP12005\n         AIF   ('&N' NE '').BUILD                               GP12005\n         MNOTE 8,'TRENT WITH FILL= REQUIRES A LABEL'            GP12005\n         MEXIT ,                                                GP12005\n.*   BUILD TRANSLATE OR TRT TABLE                               GP12005\n.*                                                              GP12005\n.BUILD   ANOP  ,                                                GP12005\n&N       DC    256AL1(&FILL)                                    GP12005\n&ZZ@TAB  SETC  '&N'                                             GP12005\n&N       SETC  ''                                               GP12005\n         AIF   (&J EQ 0).MEND                                   GP12005\n.*   EXPAND TABLE MODIFICATIONS\n.*\n.DATA    AIF   (&J EQ 0).ORG\n         AIF   ('&TAB' EQ '').NOTAB\n&ZZ@TAB  SETC  '&TAB'\n.NOTAB   AIF   ('&VAL' EQ '').NOVAL\n&ZZ@VAL  SETC  '&VAL'\n.NOVAL   AIF   (&J LT 3).MEND\n&I       SETA  2\n.LOOP    AIF   (&I GE &J).DONE\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)' EQ '').LOOP\n         AIF   (N'&SYSLIST(&I) EQ 2).PAIR\n         ORG   &ZZ@TAB+&SYSLIST(&I)\n&N       DC    AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.PAIR    ORG   &ZZ@TAB+&SYSLIST(&I,1)\n&N       DC    (&SYSLIST(&I,2))AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.DONE    AIF   ('&SYSLIST(&J)' EQ '').MEND\n.ORG     ORG   ,\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TRINV": {"ttr": 13066, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x13 o\\x01\\x13 o\\x01(\\x00$\\x00$\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2013-07-25T00:00:00", "modifydate": "2013-07-25T01:28:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "GERHARD"}, "text": "        MACRO\n&LABEL  TRINV  ,\n.* Construct reverse bits translate table\n.* Contributed by Kenneth Wilkerson on IBM-MAIN as REVTABLE\n         LCLA  &I,&J,&K,&L,&M,&N,&O\n         LCLC  &X\n&LABEL   DS    0D            LIKE EM DOUBLE WORD ALIGNED\n&I       SETA  0             STARTING VALUE\n.TABLOOP ANOP  ,             LOOP UNTIL TABLE IS DONE\n&K       SETA  1             NEED SIXTEEN ENTRIES PER LINE\n&X       SETC  'AL1('\n         AGO   .X16LP\n.X16NXT  ANOP  ,\n&X       SETC  '&X'.'&J'.','\n.X16LP   ANOP  ,             16 ENTRY LOOP\n&J       SETA  0             STARTING RESULT\n&L       SETA  1             STARTING ADDEND\n&M       SETA  1             8 BITS PER BYTE\n&N       SETA  128           STARTING COMPARAND X'80'\n&O       SETA  &I            COPY CURRENT BYTE TO REVERSE\n.BYTELP  ANOP  ,\n         AIF   (&O LT &N).BYTEFT     LESS THAN CURRENT - 0\n&O       SETA  &O-&N\n&J       SETA  &J+&L\n.BYTEFT  ANOP  ,\n&L       SETA  &L*2          NEXT ADDEND\n&N       SETA  &N/2          NEXT COMPARAND\n&M       SETA  &M+1          NEED EIGHT BITS\n         AIF   (&M LE 8).BYTELP\n&I       SETA  &I+1\n&K       SETA  &K+1\n         AIF   (&K LE 16).X16NXT\n&X       SETC  '&X'.'&J'.')'\n      DC &X\n         AIF   (&I LT 256).TABLOOP\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TRTAB": {"ttr": 13068, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x99\\x11O\\x01\\x13\\x00\\x7f\\x12\\x02\\x010\\x01\\x08\\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1999-04-24T00:00:00", "modifydate": "2013-01-07T12:02:00", "lines": 304, "newlines": 264, "modlines": 3, "user": "GERHARD"}, "text": "         MACRO\n&NM      TRTAB &FILL=C'.',&CODE=,&OPT=,&TYPE=                    90241\n         GBLC  &CRT\n         LCLC  &N\n         LCLA  &I,&J\n         LCLB  &C60,&C70,&C78,&PN,&TN,&FOLD,&ERR,&UP,&LOW,&TRT   86244\n         LCLA  &LEN(30),&DISP(30),&ADD(30)                      GP08131\n.**********************************************************************\n.*                                                                    *\n.*  TRTAB PRODUCES DIFFERENT FLAVORS OF TRANSLATE, AND TRANSLATE AND  *\n.*  TEST TABLES.                                                      *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*  TYPE= EXPANDS A PREDEFINED CONVERSION: ATOE ETOA 7-BIT            *\n.*                                         ITOE ETOI 8-BIT            *\n.*                                         UPPER  LOWER               *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*  CODE= EXPANDS 3178 OR PRINT CONVERSION.                           *\n.*    DEFINED ARE 2260, 3270 (3178), PN, AND TN                       *\n.*                                                                    *\n.*    THE TABLE MAY BE QUALIFIED WITH OPT=                            *\n.*      OPT=3278  ADDS LEFT AND RIGHT BRACE, DEGREE, REVERSE SLASH    *\n.*      OPT=LOW   ADDS LOWER CASE TO PN AND 2260                      *\n.*      OPT=FOLD  ADDS LOWER CASE AS UPPER CASE                       *\n.*      OPT=UP    ADDS LOWER CASE AS UPPER CASE                       *\n.*      OPT=ERR   ADDS THE 2260 ERROR SYMBOL (X'7F')                  *\n.*                                                                    *\n.*    FILL=C'.' OR FILL=X'6A' SPECIFIES THE CHARACTER TO BE USED FOR  *\n.*      AND UNPRINTABLE.                                              *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*    FILL=X'FF' IN COMBINATION WITH ANY CODE= AND OPT=               *\n.*      CREATES A TRANSLATE AND TEST TABLE (VALID CHARACTERS ARE      *\n.*      ZERO; INVALID ARE THE FILL CHARACTER.                         *\n.*                                                                    *\n.**********************************************************************\n&DISP(1) SETA  75            .\n&LEN(1)  SETA  6             . TO &\n&DISP(2) SETA  91            $\n&LEN(2)  SETA  7             $ TO /\n&DISP(3) SETA  107           ,\n&LEN(3)  SETA  5             , TO ?\n&DISP(4) SETA  122           :\n&LEN(4)  SETA  5             : TO =\n&DISP(10) SETA 193           A-I\n&LEN(10) SETA  9             A\n&LEN(11) SETA  9             J\n&DISP(11) SETA 209           J-R\n&DISP(12) SETA 226           S-Z\n&LEN(12) SETA  8             S\n&DISP(13) SETA 240           0-9\n&LEN(13) SETA  10            0\n&TRT     SETB  ('&FILL' EQ 'X''FF''')  INVERSE TABLE\n&N       SETC  '&NM'\n         AIF   ('&N' NE '').OK\n&N       SETC  'TRTA'.'&SYSNDX'\n.OK      AIF   ('&TYPE' EQ '').PIZMEAL                           90241\n         AIF   ('&TYPE' NE 'ATOE').NOTATOE                       90241\n         SPACE 1                                                 90241\n*        TRANSLATE TABLES LIFTED FROM SVC 103 (PTF 77533 LEVEL)  90241\n*        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F          91312\n&N DC X'00,01,02,03,37,2D,2E,2F,16,05,25,0B,0C,0D,0E,0F'  0X     90241\n   DC X'10,11,12,13,3C,3D,32,26,18,19,3F,27,1C,1D,1E,1F'  1X     90241\n   DC X'40,4F,7F,7B,5B,6C,50,7D,4D,5D,5C,4E,6B,60,4B,61'  2X     90241\n   DC X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,7A,5E,4C,7E,6E,6F'  3X     90241\n   DC X'7C,C1,C2,C3,C4,C5,C6,C7,C8,C9,D1,D2,D3,D4,D5,D6'  4X     90241\n   DC X'D7,D8,D9,E2,E3,E4,E5,E6,E7,E8,E9,AD,E0,BD,5F,6D'  5X     90241\n   DC X'79,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96'  6X     90241\n   DC X'97,98,99,A2,A3,A4,A5,A6,A7,A8,A9,C0,6A,D0,A1,07'  7X     90241\n         AIF   ('&OPT' EQ 'SHORT').MEND                          90241\n   DC X'3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F'  8X     90241\n   DC X'3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F'  9X     90241\n   DC X'3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F'  AX     90241\n   DC X'3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F'  BX     90241\n   DC X'3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F'  CX     90241\n   DC X'3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F'  DX     90241\n   DC X'3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F'  EX     90241\n   DC X'3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F,3F'  FX     90241\n         MEXIT ,                                                 90241\n.NOTATOE AIF   ('&TYPE' NE 'ETOA').NOTETOA                       90241\n         SPACE 1                                                 90241\n*        TRANSLATE TABLES LIFTED FROM SVC 103 (PTF 77533 LEVEL)  90241\n*        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F          91312\n&N DC X'00,01,02,03,1A,09,1A,7F,1A,1A,1A,0B,0C,0D,0E,0F'  0X     90241\n   DC X'10,11,12,13,1A,1A,08,1A,18,19,1A,1A,1C,1D,1E,1F'  1X     90241\n   DC X'1A,1A,1A,1A,1A,0A,17,1B,1A,1A,1A,1A,1A,05,06,07'  2X     90241\n   DC X'1A,1A,16,1A,1A,1A,1A,04,1A,1A,1A,1A,14,15,1A,1A'  3X     90241\n   DC X'20,1A,1A,1A,1A,1A,1A,1A,1A,1A,1A,2E,3C,28,2B,21'  4X     90241\n   DC X'26,1A,1A,1A,1A,1A,1A,1A,1A,1A,1A,24,2A,29,3B,5E'  5X     90241\n   DC X'2D,2F,1A,1A,1A,1A,1A,1A,1A,1A,7C,2C,25,5F,3E,3F'  6X     90241\n   DC X'1A,1A,1A,1A,1A,1A,1A,1A,1A,60,3A,23,40,27,3D,22'  7X     90241\n   DC X'1A,61,62,63,64,65,66,67,68,69,1A,1A,1A,1A,1A,1A'  8X     90241\n   DC X'1A,6A,6B,6C,6D,6E,6F,70,71,72,1A,1A,1A,1A,1A,1A'  9X     90241\n   DC X'1A,7E,73,74,75,76,77,78,79,7A,1A,1A,1A,1A,1A,1A'  AX     90241\n   DC X'1A,1A,1A,1A,1A,1A,1A,1A,1A,1A,1A,1A,1A,1A,1A,1A'  BX     90241\n   DC X'7B,41,42,43,44,45,46,47,48,49,1A,1A,1A,1A,1A,1A'  CX     90241\n   DC X'7D,4A,4B,4C,4D,4E,4F,50,51,52,1A,1A,1A,1A,1A,1A'  DX     90241\n   DC X'5C,1A,53,54,55,56,57,58,59,5A,1A,1A,1A,1A,1A,1A'  EX     90241\n   DC X'30,31,32,33,34,35,36,37,38,39,1A,1A,1A,1A,1A,1A'  FX     90241\n         MEXIT ,                                                 90241\n.NOTETOA AIF   ('&TYPE' NE 'ITOE').NOTITOE                       90241\n         SPACE 1                                                 90241\n*        TRANSLATE TABLES FROM APPENDIX E, GC26-4003-2           90241\n*        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F          91312\n&N DC X'00,01,02,03,37,2D,2E,2F,16,05,25,0B,0C,0D,0E,0F'  0X     90241\n   DC X'10,11,12,13,3C,3D,32,26,18,19,3F,27,1C,1D,1E,1F'  1X     90241\n   DC X'40,4F,7F,7B,5B,6C,50,7D,4D,5D,5C,4E,6B,60,4B,61'  2X     90241\n   DC X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,7A,5E,4C,7E,6E,6F'  3X     90241\n   DC X'7C,C1,C2,C3,C4,C5,C6,C7,C8,C9,D1,D2,D3,D4,D5,D6'  4X     90241\n   DC X'D7,D8,D9,E2,E3,E4,E5,E6,E7,E8,E9,4A,E0,5A,5F,6D'  5X     90241\n   DC X'79,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96'  6X     90241\n   DC X'97,98,99,A2,A3,A4,A5,A6,A7,A8,A9,C0,6A,D0,A1,07'  7X     90241\n   DC X'20,21,22,23,24,15,06,17,28,29,2A,2B,2C,09,0A,1B'  8X     90241\n   DC X'30,31,1A,33,34,35,36,08,38,39,3A,3B,04,14,3E,E1'  9X     90241\n   DC X'41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57'  AX     90241\n   DC X'58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75'  BX     90241\n   DC X'76,77,78,80,8A,8B,8C,8D,8E,8F,90,9A,9B,9C,9D,9E'  CX     90241\n   DC X'9F,A0,AA,AB,AC,AD,AE,AF,B0,B1,B2,B3,B4,B5,B6,B7'  DX     90241\n   DC X'B8,B9,BA,BB,BC,BD,BE,BF,CA,CB,CC,CD,CE,CF,DA,DB'  EX     90241\n   DC X'DC,DD,DE,DF,EA,EB,EC,ED,EE,EF,FA,FB,FC,FD,FE,FF'  FX     90241\n         MEXIT ,                                                 90241\n.NOTITOE AIF   ('&TYPE' NE 'ETOI').NOTETOI                       90241\n         SPACE 1                                                 90241\n*        TRANSLATE TABLES FROM APPENDIX E, GC26-4003-2           90241\n*        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F          91312\n&N DC X'00,01,02,03,9C,09,86,7F,97,8D,8E,0B,0C,0D,0E,0F'  0X     90241\n   DC X'10,11,12,13,9D,85,08,87,18,19,92,8F,1C,1D,1E,1F'  1X     90241\n   DC X'80,81,82,83,84,0A,17,1B,88,89,8A,8B,8C,05,06,07'  2X     90241\n   DC X'90,91,16,93,94,95,96,04,98,99,9A,9B,14,15,9E,1A'  3X     90241\n   DC X'20,A0,A1,A2,A3,A4,A5,A6,A7,A8,5B,2E,3C,28,2B,21'  4X     90241\n   DC X'26,A9,AA,AB,AC,AD,AE,AF,B0,B1,5D,24,2A,29,3B,5E'  5X     90241\n   DC X'2D,2F,B2,B3,B4,B5,B6,B7,B8,B9,7C,2C,25,5F,3E,3F'  6X     90241\n   DC X'BA,BB,BC,BD,BE,BF,C0,C1,C2,60,3A,23,40,27,3D,22'  7X     90241\n   DC X'C3,61,62,63,64,65,66,67,68,69,C4,C5,C6,C7,C8,C9'  8X     90241\n   DC X'CA,6A,6B,6C,6D,6E,6F,70,71,72,CB,CC,CD,CE,CF,D0'  9X     90241\n   DC X'D1,7E,73,74,75,76,77,78,79,7A,D2,D3,D4,D5,D6,D7'  AX     90241\n   DC X'D8,D9,DA,DB,DC,DD,DE,DF,E0,E1,E2,E3,E4,E5,E6,E7'  BX     90241\n   DC X'7B,41,42,43,44,45,46,47,48,49,E8,E9,EA,EB,EC,ED'  CX     90241\n   DC X'7D,4A,4B,4C,4D,4E,4F,50,51,52,EE,EF,F0,F1,F2,F3'  DX     90241\n   DC X'5C,9F,53,54,55,56,57,58,59,5A,F4,F5,F6,F7,F8,F9'  EX     90241\n   DC X'30,31,32,33,34,35,36,37,38,39,FA,FB,FC,FD,FE,FF'  FX     90241\n         MEXIT ,                                                 90241\n.NOTETOI AIF   ('&TYPE' NE 'UPPER').NOTUPP                      GP13007\n*        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F         GP13007\n&N DC X'00,01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F'  0X    GP13007\n   DC X'10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F'  1X    GP13007\n   DC X'20,21,22,23,24,25,26,27,28,29,2A,2B,2C,2D,2E,2F'  2X    GP13007\n   DC X'30,31,32,33,34,35,36,37,38,39,3A,3B,3C,3D,3E,3F'  3X    GP13007\n   DC X'40,41,42,43,44,45,46,47,48,49,4A,4B,4C,4D,4E,4F'  4X    GP13007\n   DC X'50,51,52,53,54,55,56,57,58,59,5A,5B,5C,5D,5E,5F'  5X    GP13007\n   DC X'60,61,62,63,64,65,66,67,68,69,6A,6B,6C,6D,6E,6F'  6X    GP13007\n   DC X'70,71,72,73,74,75,76,77,78,79,7A,7B,7C,7D,7E,7F'  7X    GP13007\n   DC X'80,C1,C2,C3,C4,C5,C6,C7,C8,C9,8A,8B,8C,8D,8E,8F'  8X    GP13007\n   DC X'90,D1,D2,D3,D4,D5,D6,D7,D8,D9,9A,9B,9C,9D,9E,9F'  9X    GP13007\n   DC X'A0,E1,E2,E3,E4,E5,E6,E7,E8,A9,AA,AB,AC,AD,AE,AF'  AX    GP13007\n   DC X'B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,BA,BB,BC,BD,BE,BF'  BX    GP13007\n   DC X'C0,C1,C2,C3,C4,C5,C6,C7,C8,C9,CA,CB,CC,CD,CE,CF'  CX    GP13007\n   DC X'D0,D1,D2,D3,D4,D5,D6,D7,D8,D9,DA,DB,DC,DD,DE,DF'  DX    GP13007\n   DC X'E0,E1,E2,E3,E4,E5,E6,E7,E8,E9,EA,EB,EC,ED,EE,EF'  EX    GP13007\n   DC X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,FA,FB,FC,FD,FE,FF'  FX    GP13007\n.NOTUPP  AIF   ('&TYPE' NE 'LOWER').NOTCASE                     GP13007\n*        0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F         GP13007\n&N DC X'00,01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F'  0X    GP13007\n   DC X'10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F'  1X    GP13007\n   DC X'20,21,22,23,24,25,26,27,28,29,2A,2B,2C,2D,2E,2F'  2X    GP13007\n   DC X'30,31,32,33,34,35,36,37,38,39,3A,3B,3C,3D,3E,3F'  3X    GP13007\n   DC X'40,41,42,43,44,45,46,47,48,49,4A,4B,4C,4D,4E,4F'  4X    GP13007\n   DC X'50,51,52,53,54,55,56,57,58,59,5A,5B,5C,5D,5E,5F'  5X    GP13007\n   DC X'60,61,62,63,64,65,66,67,68,69,6A,6B,6C,6D,6E,6F'  6X    GP13007\n   DC X'70,71,72,73,74,75,76,77,78,79,7A,7B,7C,7D,7E,7F'  7X    GP13007\n   DC X'80,81,82,83,84,85,86,87,88,89,8A,8B,8C,8D,8E,8F'  8X    GP13007\n   DC X'90,91,92,93,94,95,96,97,98,99,9A,9B,9C,9D,9E,9F'  9X    GP13007\n   DC X'A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,AA,AB,AC,AD,AE,AF'  AX    GP13007\n   DC X'B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,BA,BB,BC,BD,BE,BF'  BX    GP13007\n   DC X'C0,81,82,83,84,85,86,87,88,89,CA,CB,CC,CD,CE,CF'  CX    GP13007\n   DC X'D0,91,92,93,94,95,96,97,98,99,DA,DB,DC,DD,DE,DF'  DX    GP13007\n   DC X'E0,A1,A2,A3,A4,A5,A6,A7,A8,E9,EA,EB,EC,ED,EE,EF'  EX    GP13007\n   DC X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,FA,FB,FC,FD,FE,FF'  FX    GP13007\n.NOTCASE MNOTE 8,'INVALID TYPE=&TYPE'                           GP13007\n         MNOTE 8,'  ONLY ATOE, ETOA, ITOE, ETOI, UPPER, LOWER VALID'\n         MEXIT ,                                                 90241\n.PIZMEAL ANOP  ,                                                 90241\n&N       DC    256&FILL .      FILLER CODE\n         ORG   &N+C' '\n         AIF   (&TRT).BLKOK\n         DC    C' ' .        BLANK\n         AGO   .BLKCM\n.BLKOK   DC    X'00'         BLANK\n.BLKCM   AIF   ('&CODE' NE '').GOTCODE\n&C60     SETB  ('&CRT' EQ '2260' OR '&CRT' EQ '2265')\n&C70     SETB  ('&CRT' EQ '3270')\n.GOTCODE ANOP  ,\n&C60     SETB  ('&CODE' EQ '2260' OR '&CODE' EQ '2265' OR &C60)\n&C70     SETB  ('&CODE' EQ '3270' OR &C70)\n&PN      SETB  ('&CODE' EQ 'PN' OR '&CODE' EQ 'P11')            GP04040\n&TN      SETB  ('&CODE' EQ 'TN' OR '&CODE' EQ 'T11')            GP04040\n         AIF   (&C60 OR &C70 OR &PN OR &TN).OKCODE\n         MNOTE 8,'CODE=''&CODE'' NOT SUPPORTED'\n         MEXIT ,\n.OKCODE  ANOP  ,\n&I       SETA  N'&OPT\n         AIF   (&I LT 1).NOPT\n&J       SETA  1\n.OPTLOOP AIF   ('&OPT(&J)' EQ 'FOLD').FOLD\n         AIF   ('&OPT(&J)' EQ 'SVC').SVC\n         AIF   ('&OPT(&J)' EQ 'ERR').ERR\n         AIF   ('&OPT(&J)' EQ 'UP').UPR\n         AIF   ('&OPT(&J)' EQ 'LOW').LOW\n         AIF   ('&OPT(&J)' EQ '3278').SET78                      86244\n         AIF   ('&OPT(&J)' EQ '').OPTINC\n.BADOPT  MNOTE 8,'OPT=''&OPT(&J)'' NOT SUPPORTED'\n.OPTINC  AIF   (&J GE &I).NOPT\n&J       SETA  &J+1\n         AGO   .OPTLOOP\n.FOLD    AIF   (&UP).BADOPT\n&FOLD    SETB  1                                                 86244\n         AGO   .OPTINC\n.SVC     ORG   &N+X'C0'\n         AIF   (&TRT).SVCOK\n         DC    C'+' .        DISPLAY X'C0' IN SVC NAME AS PLUS SIGN\n         AGO   .SVCCM\n.SVCOK   DC    X'00'         BLANK\n.SVCCM   AGO   .OPTINC\n.ERR     ANOP  ,\n&ERR     SETB  (&C60)\n         AGO   .OPTINC\n.UPR     AIF   (&FOLD OR &LOW).BADOPT\n&UP      SETB  1\n         AGO   .OPTINC\n.LOW     AIF   (&UP).BADOPT\n&LOW     SETB  1\n         AGO   .OPTINC\n.SET78   AIF   (NOT &C70 AND NOT &TN).BADOPT                    GP04040\n&C78     SETB  1                                                 86244\n         AGO   .OPTINC                                           86244\n.NOPT    ANOP  ,\n&LOW     SETB  (&LOW OR &FOLD OR &TN OR &C70)\n&ERR     SETB  (&ERR OR &TN OR &PN OR &C70)\n         AIF   (&C60 OR &PN).NOCENT\n&DISP(1) SETA  74            ADD CENT SIGN\n&LEN(1)  SETA  7\n&DISP(2) SETA  90            ADD EXC. MARK\n&LEN(2)  SETA  8\n         AIF   (NOT &C70 AND NOT &TN).NOCENT                    GP08145\n&DISP(3) SETA  106           ADD SPLIT BAR                       86244\n&LEN(3)  SETA  6                                                 86244\n         AIF   (NOT &C78 AND NOT &TN).NOCENT                    GP08145\n&DISP(10) SETA 192           LEFT BRACE                          86244\n&LEN(10)  SETA 10                                                86244\n&DISP(11) SETA 208           RIGHT BRACE                         86244\n&LEN(11)  SETA 10                                                86244\n&DISP(18) SETA 121           REVERSE QUOTE                       86244\n&LEN(18)  SETA 1                                                 86244\n&DISP(19) SETA 161           TILDE                               86244\n&LEN(19)  SETA 1                                                 86244\n&DISP(20) SETA 224           REVERSE SLASH                       86244\n&LEN(20)  SETA 1                                                 86244\n&DISP(21) SETA 186           LEFT/RIGHT BRACKET                 GP08114\n&LEN(21)  SETA 2                                                 86244\n.NOCENT  AIF   (&C60 AND NOT &ERR).NOERR\n&LEN(4)  SETA  6             ADD QUOTE\n.NOERR   AIF   (&UP OR NOT &LOW).NOLC\n&DISP(5) SETA  129\n&LEN(5)  SETA  9\n&DISP(6) SETA  145\n&LEN(6)  SETA  9\n&DISP(7) SETA  162\n&LEN(7)  SETA  8\n         AIF   (NOT &TN OR &FOLD).NONUM                         GP13007\n&DISP(8) SETA  176\n&LEN(8)  SETA  10\n         AIF   (&TN).NONUM\n&ADD(8)  SETA  64\n.NONUM   AIF   (NOT &FOLD).NOLC                                  86244\n&ADD(5)  SETA  64\n&ADD(6)  SETA  64\n&ADD(7)  SETA  64\n.NOLC    AIF   (NOT &TN).NOGRA\n&LEN(13) SETA  11            ADD PLOTTING BAR TO 0-9            GP08145\n&DISP(14) SETA 139           TN GRAPHICS\n&LEN(14) SETA  5\n&DISP(15) SETA 155\n&LEN(15) SETA  7\n&DISP(16) SETA 171\n&LEN(16) SETA  6                                                GP08145\n&DISP(17) SETA 186           LEFT BRACKET                       GP08114\n&LEN(17) SETA  6\n.NOGRA   ANOP  ,\n&I       SETA  1\n.NEXT    AIF   (&LEN(&I) LT 1).DCL\n         ORG   &N+&DISP(&I)\n         AIF   (&TRT).LSTOK\n         DC    &LEN(&I)AL1(*-&N+&ADD(&I))\n         AGO   .DCL\n.LSTOK   DC    &LEN(&I)X'00'\n.DCL     AIF   (&I GE 20).ORG                                    86244\n&I       SETA  &I+1\n         AGO   .NEXT\n.ORG     ORG   &N+256 ,\n.MEND    MEND  ,                                                 90241\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TRTSMF": {"ttr": 13316, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,                                                 90068\n&NM      TRTSMF ,                                                90068\n*        COMMON TRT TABLE FOR SMF RECORD PROCESSING.             90068\n*        USED BY SMFMERGE AND SMFSELCT.                          90068\n         SPACE 1                                                 90068\nZ        EQU   16            SKIP THIS RECORD                    84171\nG        EQU   12            SPECIAL JOB HEADER - TYPE 32        84171\nF        EQU   8             SPECIAL JOB HEADER - TYPE 30        84171\nJ        EQU   4             PROCESS JOB-HEADER                  83327\nC        EQU   0             COPY AS IS (NOT JOB RELATED)        83327\n         SPACE 1                                                 83327\n*                  0 1 2 3 4 5 6 7 8 9 A B C D E F               83327\n&NM      DC    AL1(C,C,C,C,J,J,J,C,C,C,J,C,C,C,J,J)   0X         84171\n         DC    AL1(C,J,J,C,J,C,C,C,C,J,J,C,C,C,F,C)   1X         83327\n         DC    AL1(G,C,J,J,C,C,C,C,J,C,C,C,C,C,C,C)   2X         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,J,J)   3X         83327\n         DC    AL1(J,C,C,J,J,J,C,C,C,C,C,C,C,C,C,C)   4X         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C)   5X         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C)   6X         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C)   7X         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C)   8X         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C)   9X         83327\n         DC    AL1(C,C,C,C,C,C,J,C,C,C,C,C,C,C,C,C)   AX         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C)   BX         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C)   CX         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C)   DX         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C)   EX         83327\n         DC    AL1(C,C,C,C,C,C,C,C,C,J,C,C,C,C,C,C)   FX         83326\n         MEND  ,                                                 90068\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSX": {"ttr": 13318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x00\\x972\\x8f\\x01\\x08'\\x8f\\x00W\\x00\\x17\\x00\\x19\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "1997-11-24T00:00:00", "modifydate": "2008-10-04T00:57:00", "lines": 23, "newlines": 25, "modlines": 1, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      TSX   &R,&A,&AMODE=ANY                         ADDED ON 90308\n.*\n.*       THIS MACRO CALLS A SUB-ROUTINE IN 31 OR 24 BIT MODE.\n.*       IF AMODE=24, THE USER'S ADDRESS IS OVERRIDDEN\n.*       IF AMODE=31, THE USER'S ADDRESS IS FORCED TO 31-BIT MODE.\n.*       IN PRE-XA SYSTEMS, ACTS AS BAL/BALR\n.*\n         GBLB  &MVSXA\n&NM      MACPARM R15,&A      LOAD DESTINATION ADDRESS TO R15\n         AIF   (NOT &MVSXA).BALR\n         AIF   ('&AMODE' EQ 'ANY' OR 'AMODE' EQ '').BASSMX\n         AIF   ('&AMODE' EQ '24' OR '&AMODE' EQ 'AM24').BASSM24\n         AIF   ('&AMODE' EQ '31' OR '&AMODE' EQ 'AM31').BASSM31\n         MNOTE 4,'INVALID AMODE OPERAND - USE: ANY, 24 OR 31'\n         AGO   .BASSMX\n.BASSM24 MACPARM R15,=X'7FFFFFFF',OP=N  KILL 31-BIT MODE BIT\n         AGO   .BASSMX\n.BASSM31 MACPARM R15,=X'80000000',OP=O  SET 31-BIT MODE\n.BASSMX  MACPARM &R,R15,OP=BASSM,OPR=BASSM,MODE=EQU\n         MEXIT ,\n.BALR    MACPARM &R,(R15),OP=BAL,OPR=BALR\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBDEVN": {"ttr": 13320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x08\\x00\\x00\\x01\\x08\\'O\\x01\\x13\"\\x0f\\x00$\\x00\"\\x002\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.08", "flags": 0, "createdate": "2008-09-30T00:00:00", "modifydate": "2013-08-08T00:24:00", "lines": 34, "newlines": 50, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      UCBDEVN &UCBPTR=,&DEVN=,&NONBASE=,&HEXTAB=,&MODE=\n         GBLC  &MACPLAB\n         GBLB  &MVSXA        ON IF X/A OR LATER                 GP10227\n.*   QUICK AND DIRTY TO PROVIDE MODERN SYSTEM COMPATIBILITY\n         LCLC  &R\n&R       SETC  '1'\n&MACPLAB SETC  '&NM'\n         AIF   (K'&UCBPTR LT 3).NOREG\n         AIF   ('&UCBPTR'(1,1) NE '(' OR '&UCBPTR'(2,1) EQ '(').NOREG\n         AIF   ('&UCBPTR'(K'&UCBPTR,1) NE ')').NOREG\n         AIF   ('&UCBPTR'(K'&UCBPTR-1,1) EQ ')').NOREG\n&R       SETC  '&UCBPTR(1)'\n         AGO   .DOREG\n.NOREG   ANOP  ,\n         MACPARM &R,&UCBPTR,OP=L\n.DOREG   AIF   ('&MODE' EQ '1' OR &MVSXA).NEWFORM               GP10227\n         MACPARM R15,&DEVN                                      GP10227\n         AIF   ('&MODE' EQ '2').MVS4                            GP13220\n         MVC   0(3,R15),13(&R)    UCB NAME                      GP10227\n         MVI   3(R15),C' '   DEVN COMPATIBILITY                 GP10227\n         MEXIT ,                                                GP10227\n.MVS4    MVC   1(3,R15),13(&R)    UCB NAME                      GP13220\n         MVI   0(R15),C'0'   DEVN COMPATIBILITY                 GP13220\n         MEXIT ,                                                GP13220\n.NEWFORM MACPARM 20(5,13),4(3,&R),OP=UNPK  UCBCHAN/DEVN\n         AIF   ('&HEXTAB' EQ '').LONG\n         TR    20(4,13),&HEXTAB\n         AGO   .COMM\n.LONG    NC    20(4,13),=X'0F0F0F0F'\n         TR    20(4,13),=C'0123456789ABCDEF'\n.COMM    MACPARM 15,&DEVN\n         MVC   0(4,15),20(13)   RETURN RESULT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNITY": {"ttr": 13322, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99!\\x1f\\x01\\x10\\x04?\\x01\\x17\\x00V\\x000\\x00\\x08\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-07-30T00:00:00", "modifydate": "2010-02-12T01:17:00", "lines": 86, "newlines": 48, "modlines": 8, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      UNITY &FORMAT=,&DEVD=(DA,TA)     EARLY VERSION ADDED ON 90359\n         GBLB  &MVS\n         LCLA  &I,&J,&K\n         LCLB  &DA,&TA,&UR,&GAM,&TP\n         LCLC  &N\n&N       SETC  '&NM'\n&K       SETA  N'&DEVD\n.DEVLOOP ANOP  ,\n&I       SETA  &I+1\n         AIF   (&I GT &K).DEVDONE\n&DA      SETB  (&DA OR ('&DEVD(&I)' EQ 'DA'))\n&TA      SETB  (&TA OR ('&DEVD(&I)' EQ 'TA'))\n&UR      SETB  (&UR OR ('&DEVD(&I)' EQ 'UR'))\n&TP      SETB  (&TP OR ('&DEVD(&I)' EQ 'TP'))\n&GAM     SETB  (&GAM OR ('&DEVD(&I)' EQ 'GAM'))\n         AGO   .DEVLOOP\n.DEVDONE ANOP  ,                                                GP10042\n&I       SETA  4             WIDTH OF DEVICE NAME               GP10042\n         AIF   ('&FORMAT' EQ '24').TAB24\n         AIF   ('&FORMAT' EQ '14').TAB14                        GP10042\n&I       SETA  6             WIDTH OF DEVICE NAME               GP10042\n         AIF   ('&FORMAT' EQ '26').TAB24\n         AIF   ('&FORMAT' EQ '16').TAB14                        GP10042\n         MNOTE 4,'FORMAT &FORMAT NOT SUPPORTED'\n.TAB24   AIF   (NOT &DA).SK24DA\n.*  NOTE:  THE DASD TABLE MUST BE KEPT IN REVERSE ORDER BY TBYT4,\n.*   AND MUST BE COMPLETE. SOME PROGRAMS INDEX INTO THE TABLE.\n&N       DC    X'200F',CL&I'3390'\n&N       SETC  ''\n         DC    X'200E',CL&I'3380'\n         DC    X'200D',CL&I'333D'\n         DC    X'200C',CL&I'3375'\n         DC    X'200B',CL&I'3350'\n         DC    X'200A',CL&I'3340'\n         DC    X'2009',CL&I'3330'\n         DC    X'2008',CL&I'2314'\n         DC    X'2007',CL&I'2305'\n         DC    X'2006',CL&I'2305'\n         DC    X'2005',CL&I'2321'\n         AIF   (&MVS).NO24DA\n         DC    X'2004',CL&I'2302'\n         AGO   .CM24DA\n.NO24DA  DC    X'2004',CL&I'9345'\n.CM24DA  DC    X'2003',CL&I'2303'\n         DC    X'2002',CL&I'2301'\n         DC    X'2001',CL&I'2311'\n.SK24DA  AIF   (NOT &TA).NO24TA\n&N       DC    X'8083',CL&I'3590'\n&N       SETC  ''\n         DC    X'8081',CL&I'3490'\n         DC    X'8080',CL&I'3480'\n         DC    X'8003',CL&I'3400'\n         DC    X'8001',CL&I'2400'\n.NO24TA  MEXIT ,\n.TAB14   AIF   (NOT &DA).SK14DA\n.*  NOTE:  THE DASD TABLE MUST BE KEPT IN REVERSE ORDER BY TBYT4,\n.*   AND MUST BE COMPLETE. SOME PROGRAMS INDEX INTO THE TABLE.\n&N       DC    X'0F',CL&I'3390'\n&N       SETC  ''\n         DC    X'0E',CL&I'3380'\n         DC    X'0D',CL&I'333D'\n         DC    X'0C',CL&I'3375'\n         DC    X'0B',CL&I'3350'\n         DC    X'0A',CL&I'3340'\n         DC    X'09',CL&I'3330'\n         DC    X'08',CL&I'2314'\n         DC    X'07',CL&I'2305'\n         DC    X'06',CL&I'2305'\n         DC    X'05',CL&I'2321'\n         AIF   (&MVS).NO14DA\n         DC    X'04',CL&I'2302'\n         AGO   .CM14DA\n.NO14DA  DC    X'04',CL&I'9345'\n.CM14DA  DC    X'03',CL&I'2303'\n         DC    X'02',CL&I'2301'\n         DC    X'01',CL&I'2311'\n.SK14DA  AIF   (NOT &TA).NO14TA\n&N       DC    X'83',CL&I'3590'\n&N       SETC  ''\n         DC    X'81',CL&I'3490'\n         DC    X'80',CL&I'3480'\n         DC    X'03',CL&I'3400'\n         DC    X'01',CL&I'2400'\n.NO14TA  MEXIT ,\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USERHMT": {"ttr": 13325, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM    USERHMT &SECT=D,&PFX=                                     92288\n         LCLC  &N,&NN\n&N       SETC  '&NM'\n&NN      SETC  '&N'\n         AIF   ('&SECT' NE 'D').NOD\n         AIF   ('&N' NE '').DS\n         MNOTE 4,'DSECT NAME OMITTED'\n&N       SETC  'USERHMT'\n&NN      SETC  '&N'\n.DS      ANOP  ,\n&N       DSECT ,\n&N       SETC  ''\n         AGO   .NOCOM\n.NOD     ANOP  ,\n&N       DS    0D            FORCE ALIGNMENT\n.NOCOM   ANOP  ,\n&PFX.LINK DC   A(0)          ADDRESS OF NEXT ELEMENT IN CHAIN\n&PFX.DOM  DC   A(0)          NON-ZERO: MOUNT WTO ID FOR DOM\n&PFX.TIME DC   F'0'          TIMESTAMP OF LAST ENTRY\n&PFX.DATE DC   PL4'0'        DATE OF LAST CHANGE\n&PFX.DRIV DC   CL3' '        DRIVE NAME (DEVICE ADDRESS)\n&PFX.STAT DC   C' '          STATUS FLAG\n.*      M-MOUNT; R-MOUNT READ ONLY; W-WRITE RING; U-UP; F-FREE; I-INTRQ\n&PFX.MSLN DC   AL2(0)        MESSAGE LENGTH\n&PFX.SER  DC   CL6' '        NORMAL MESSAGE - VOLUME SERIAL\n&PFX.SIZE EQU  *-&NN             LENGTH OF EXTENSION\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VCON": {"ttr": 13327, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x01\\x02$/\\x01\\x02$/ &\\x00J\\x00J\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-08-30T00:00:00", "modifydate": "2002-08-30T20:26:21", "lines": 74, "newlines": 74, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      VCON  &STR,&END=,&BNDRY=H                      ADDED ON 81155\n         GBLB  &VCON@OP\n         GBLC  &VCON@NM\n         LCLA  &I,&J,&K,&L\n         LCLC  &L2\n.**********************************************************************\n.**                                                                  **\n.**  VCON BUILDS A TEXT MESSAGE BEGINNING WITH A TWO-BYTE LENGTH,    **\n.**  TWO BYTES OF ZERO, AND TEXT OF THAT LENGTH (WTO / RECFM=V FMT)  **\n.**                                                                  **\n.**  USE   VCON  'TEXT'                                              **\n.**                                                                  **\n.**  OR    VCON  'TEXT1',END=LABEL                                   **\n.**        DC     ...ZERO OR MORE STORAGE ITEMS                      **\n.**  LABEL VCON   *END    TO GENERATE A SINGLE MESSAGE               **\n.**                                                                  **\n.**********************************************************************\n&K       SETA  K'&STR\n         AIF   (T'&END NE 'O').TSTOPEN\n         AIF   (T'&STR EQ 'O').CLOSE\n         AIF   ('&STR'(1,1) EQ '*').CLOSE\n.TSTOPEN AIF   (&K EQ 0).COMLEN\n         AIF   ('&STR'(1,1) NE '''').COMLEN\n&I       SETA  2\n&J       SETA  &K-2\n&K       SETA  &J\n.LOOP    AIF   ('&STR'(&I,2) EQ '''''').SK2\n         AIF   ('&STR'(&I,2) EQ '&&').SK2\n&I       SETA  &I+1\n         AGO   .INC\n.SK2     ANOP  ,\n&I       SETA  &I+2\n&K       SETA  &K-1\n.INC     AIF   (&I LE &J).LOOP\n.COMLEN  AIF   (NOT &VCON@OP).NOPEN\n         MNOTE 4,'PRIOR VCON NOT TERMINATED'\n&VCON@OP SETB  0\n.NOPEN   AIF   ('&BNDRY' EQ 'H' OR '&BNDRY' EQ 'Y').NOBOUND\n         AIF   ('&BNDRY' NE 'X' AND '&BNDRY' NE 'C').DOBOUND\n&L2      SETC  'L2'\n         AGO   .NOBOUND\n.DOBOUND DS    0&BNDRY\n.NOBOUND AIF   (T'&END NE 'O').OPEN\n         AIF   (&K EQ 0).REQSTR\n         AIF   ('&STR'(1,1) EQ '''').QSTR\n&NM      DC    Y&L2.(&K+4,0),C'&STR'\n         AGO   .MEND\n.QSTR    ANOP  ,\n&NM      DC    Y&L2.(&K+4,0),C&STR\n         AGO   .MEND\n.OPEN    AIF   (&K NE 0).OPSTR\n&NM      DC    Y&L2.(&END-*,0)\n         AGO   .SETOPEN\n.OPSTR   AIF   ('&STR'(1,1) EQ '''').OQSTR\n&NM      DC    Y&L2.(&END-*,0),C'&STR'\n         AGO   .SETOPEN\n.OQSTR   ANOP  ,\n&NM      DC    Y&L2.(&END-*,0),C&STR\n.SETOPEN ANOP  ,\n&VCON@NM SETC  '&END'\n&VCON@OP SETB  1\n         MEXIT ,\n.REQSTR  MNOTE 4,'TEXT STRING REQUIRED'\n         MEXIT ,\n.CLOSE   AIF   (&VCON@OP).WASOPEN\n         MNOTE 4,'VCON END OUT OF SEQUENCE'\n.WASOPEN AIF   ('&NM' EQ '' OR '&NM' EQ '&VCON@NM').BLAB\n&NM      EQU   *\n.BLAB    ANOP  ,\n&VCON@NM EQU   *\n&VCON@NM SETC  ''\n&VCON@OP SETB  0\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VERBTAB": {"ttr": 13330, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      VERBTAB &STR,&LB,&BASE=,&LEN=                UPDATED ON 81169\n         GBLA  &TABMBLN                                          81169\n         GBLC  &TABMBAS\n         LCLA  &I,&J,&K,&L\n         LCLC  &H                                                81169\n&K       SETA  K'&STR-1\n         AIF   (&TABMBLN NE 0).HADLEN                            81169\n&TABMBLN SETA  3             SET DEFAULT                         81169\n         AIF   (T'&LEN EQ 'O').HADLEN                            81169\n&TABMBLN SETA  &LEN                                              81169\n.HADLEN  AIF   ('&STR' EQ '').PARMA                              81169\n         AIF   ('&STR'(1,1) NE '''').COMLEN\n&I       SETA  2\n&J       SETA  &K-1\n&K       SETA  &J\n.LOOP    AIF   ('&STR'(&I,2) EQ '''''').SK2\n         AIF   ('&STR'(&I,2) EQ '&&').SK2\n&I       SETA  &I+1\n         AGO   .INC\n.SK2     ANOP  ,\n&I       SETA  &I+2\n&K       SETA  &K-1\n.INC     AIF   (&I LE &J).LOOP\n&K       SETA  &K-1\n         AIF   (&K GE 0).COMLEN\n&K       SETA  0\n.COMLEN  AIF   ('&BASE' EQ '').NBAS\n         AIF   ('&BASE' NE '*').UBAS\n&TABMBAS SETC  '&SYSECT'\n         AGO   .NBAS\n.UBAS    ANOP  ,\n&TABMBAS SETC  '&BASE'\n.NBAS    AIF   ('&TABMBAS' NE '').BASOK\n&TABMBAS SETC  '&SYSECT'     DEFAULT BASE TO CURRENT\n.BASOK   AIF   ('&STR' EQ '*END').LAST\n         AIF   ('&LB' NE '').THEX                                81169\n.PARMA   MNOTE 8,'MISSING OR CONFLICTING PARAMETERS'\n         MEXIT ,\n.THEX    AIF   (&K LT 1).TO                                      81169\n         AIF   ('&STR'(1,1) NE '*').TO                           81169\n&L       SETA  &K            SUPPLIED LENGTH-1                   81169\n&K       SETA  (&K+1)/2-1    NEW TEXT LENGTH                     81169\n&H       SETC  '&STR'(2,&L)                                      81169\n&NM      DC    AL1(&K),AL&TABMBLN.(&LB-&TABMBAS),X'&H'\n         MEXIT ,                                                 81169\n.TO      AIF   ('&STR'(1,1) EQ '''').TOAP\n&NM      DC    AL1(&K),AL&TABMBLN.(&LB-&TABMBAS),C'&STR'\n         MEXIT ,\n.TOAP    ANOP  ,\n&NM      DC    AL1(&K),AL&TABMBLN.(&LB-&TABMBAS),C&STR\n         MEXIT ,\n.LAST    ANOP  ,\n&NM      DC    X'FF'         END OF TABLE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VFORM": {"ttr": 13332, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x00P\\x00\\x0e\\x00\\t\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T00:50:00", "lines": 14, "newlines": 9, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      VFORM &P\n.**********************************************************************\n.*                                                                   **\n.*   EXHIBIT MACRO FOR STORAGE FORMATTING                            **\n.*                                                                   **\n.**********************************************************************\n&NM      LA    R1,&P\n         ST    R1,PARMSDMP\n         L     R15,SDMPAD\n         L     R10,12(,R15)\n         LA    R1,PARMSDMP\n         BALS  R14,0(R10,R15)\n.MEXIT   MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VLOOK": {"ttr": 13334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x13\\x19\\x0f\\x01\\x13\\x19\\x0f\\x01\\x08\\x00\\x9a\\x00\\x9a\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2013-07-09T00:00:00", "modifydate": "2013-07-09T01:08:00", "lines": 154, "newlines": 154, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      VLOOK &T=,&B=*,&R=,&PFX=,&X=R5,&Y=R6,&Z=R4,                   *\n               &STRIP=,&ABBR=,&FULL=                      ADDED GP13190\n         GBLB  &ZZ@BLUK                              ADAPTED FROM BLOOK\n         GBLC  &MACPLAB,&ZZ@BLUF\n.**********************************************************************\n.*                                                                   **\n.*    Verb lookup routine; see BTAB macro for matching verb defs     **\n.*    T     - address of BTAB definitions                            **\n.*    X     - pointer for scanning                             (R5)  **\n.*    Y     - register pointing at last byte of text           (R6)  **\n.*    Z     - register for BTAB scanning                       (R4)  **\n.*    R     - address of text                                        **\n.*    B     - base address for (b)ddd branching; B=A (absolute)      **\n.*            branches to BTAB with BASE=0; B=* (default) branches   **\n.*            from CSECT (as does B= )                               **\n.*    PFX   - 0-4 character label prefix (default VERB)              **\n.*    STRIP - (default) skip leading blanks                          **\n.*            =NEVER    process at current input address             **\n.*    ABBR  - when specified, accepts matches for abbreviated verbs  **\n.*            of any length from original to ABBR value (no default) **\n.*            ABBR=3 for 'COMMAND' would match COMMAND, COMMAN,      **\n.*            COMMA, COMM, and COM                                   **\n.*    FULL  - one or more trailing characters inhibiting shorter     **\n.*            compares. No default; common are = and (               **\n.*            e.g., FULL='=' (valid are FULL=alphanum; FULL='chars'; **\n.*            FULL=C'chars'; and FULL=X'hexchars')                   **\n.*                                                                   **\n.**********************************************************************\n.*                                                                   **\n.*    X returns next byte after match, or last text + 1 for no match **\n.*    R14 is a return register; R15-R1 are work registers.           **\n.*      code branches to R15 on match, R14 otherwise.                **\n.*                                                                   **\n.*    Y unchanged.                                                   **\n.*    Z returns last process table entry.                            **\n.*                                                                   **\n.**********************************************************************\n.*                                                                   **\n.*    VLOOK expands an in-line subroutine, called by other           **\n.*    references. To use in an assembly with multiple, not mutually  **\n.*    addressable CSECTs, use a unique PFX in each.                  **\n.*                                                                   **\n.**********************************************************************\n         LCLC  &L,&D,&LAB,&D1,&D2,&D3\n         LCLA  &I,&J,&K\n&L       SETC  'L'''\n         AIF   ('&ZZ@BLUF' NE '').OLDLAB\n&ZZ@BLUF SETC  'VERB'        DEFAULT LABEL\n.OLDLAB  ANOP  ,\n         AIF   ('&PFX' EQ '' OR '&PFX' EQ '&ZZ@BLUF').DONLAB\n&ZZ@BLUF SETC  '&PFX'\n&ZZ@BLUK SETB  0             EXPAND CODE WITH NEW LABELS\n.DONLAB  ANOP  ,\n&LAB     SETC  '&ZZ@BLUF'\n&NM      MACPARM &Z,&T,NULL==X'FF'\n&D       SETC  '('.'&Y'.')'\n         AIF   ('&D' EQ '&R' OR '&R' EQ '&Y').NOEND\n         MACPARM &Y,&R+&L&R-1\n.NOEND   AIF   (&ZZ@BLUK).NOTONCE\n&ZZ@BLUK SETB  1\n         B     &LAB.END      BRANCH AROUND\n&LAB.LOOK SLR  R15,R15       ZERO IC REGISTER\n         AIF   ('&STRIP' EQ 'NEVER').NODEBLK\n&LAB.1   CLI   0(&X),C' '    LOOK FOR NON-BLANK INPUT\n         BNE   &LAB.2        OK\n         LA    &X,1(,&X)     SKIP TO NEXT BYTE\n         CR    &X,&Y         REACHED END OF INPUT BUFFER\n         BNH   &LAB.1        NO, LOOK FOR NON-BLANK\n         BR    R14           RETURN, BUFFER EXHAUSTED\n         AGO   .YESBLNK\n.NODEBLK B     &LAB.2        NO DEBLANKING\n.YESBLNK ANOP  ,\n&LAB.CHEK CLC  4(0,&Z),0(&X) MATCHING VERB ?\n&LAB.3   LA    &Z,5(R15,&Z)  BUMP TO NEXT TABLE ENTRY\n&LAB.2   CLI   0(&Z),X'FF'   END OF TABLE ?\n         BER   R14           YES, VERB NOT FOUND\n         IC    R15,0(,&Z)    LENGTH - 1  OF TABLE ENTRY\n         EX    R15,&LAB.CHEK  SAME VERB ?\n         AIF   ('&ABBR' EQ '').NOABBR\n         BE    &LAB.MAT\n         LA    R0,1(,R15)    COPY LENGTH\n         SH    R0,=AL2(&ABBR)    SHORTER ALLOWED ?\n         BNP   &LAB.3               NO; TRY NEXT\n         AIF   ('&FULL' EQ '').LABNKC      SKIP IF NO KEYWORDS\n&D       SETC  '&FULL'\n&D1      SETC  'C'''\n&D2      SETC  ''''\n&K       SETA  K'&FULL\n&J       SETA  1             STRIDE\n         AIF   ('&FULL' EQ '''').LABNKS\n         AIF   (&K LT 3).LABNKS\n         AIF   ('&D'(1,2) EQ 'X''').HEXSTR       HEX\n         AIF   ('&D'(1,2) EQ 'C''').TXTSTR       TEXT\n         AIF   ('&D'(1,1) NE '''').LABNKS       PLAIN STRING\n&D       SETC  '&D'(2,&K-2)\n&K       SETA  K'&D\n         AGO   .LABNKS\n.TXTSTR  ANOP  ,             TEXT NOTATION   C' '\n&D       SETC  '&D'(3,&K-3)\n&K       SETA  K'&D\n         AGO   .LABNKS\n.HEXSTR  ANOP  ,             HEX NOTATION\n&D1      SETC  'X'''\n&D       SETC  '&D'(3,&K-3)\n&K       SETA  K'&D\n&J       SETA  2             STRIDE\n.LABNKS  LA    R1,4(R15,&Z)  POINT TO LAST BYTE OF VERB\n&I       SETA  1\n         AIF   (&K GE &J).LABNKL\n         MNOTE 4,'VLOOK: MALFORMED FULL=&FULL'\n         AGO   .LABNKC\n.LABNKL  ANOP  ,\n&D3      SETC  '&D'(&I,&J)\n         AIF   (&J NE 1 OR ('&D3' NE '''' AND '&D3' NE '&&')).LABNDB\n.*TEST   AIF   ('&D'(&I,&J+1) NE '&D3').LABOOPS\n&I       SETA  &I+1\n.LABOOPS ANOP  ,             USER ERROR\n&D3      SETC  '&D3'.'&D3'\n.LABNDB  CLI   0(R1),&D1&D3&D2    SPECIAL?\n         BE    &LAB.3          YES; NO ABBR\n&I       SETA  &I+&J\n         AIF   (&I LE &K).LABNKL      TRY AGAIN\n.LABNKC  LR    R1,R15\n&LAB.ALP BCTR  R1,0\n         EX    R1,&LAB.CHEK  MATCH ?\n         BE    &LAB.MA1        YES; GET OUT\n         BCT   R0,&LAB.ALP   SHORTER ALLOWED ?\n         B     &LAB.3          NO; TRY NEXT\n         AGO   .DOABBR\n.NOABBR  BNE   &LAB.3        NO, KEEP LOOKING\n.DOABBR  ANOP  ,\n&LAB.MA1 LR    R15,R1        SET FOR CORRECT INPUT POSITION\n&LAB.MAT LA    &X,1(R15,&X)  POINT TO FIRST BYTE PAST VERB\n         ICM   R15,7,1(&Z)   LOAD DISPLACEMENT ADDRESS\n         AIF   ('&B' EQ '').RELDEF\n         AIF   ('&B' EQ '*').RELDEF\n         AIF   ('&B'(1,1) EQ '(').REL\n         AIF   ('&B' EQ 'A').ABS\n         MNOTE 8,'B NOT A OR (REG)'\n.ABS     BR    R15\n         AGO   .BDONE\n.REL     B     0(R15,&B(1))\n         AGO   .BDONE\n.RELDEF  B     &SYSECT.(R15)\n.BDONE   ANOP  ,\n&LAB.END DS    0H\n.NOTONCE AIF   ('&STRIP' EQ 'NO' OR '&STRIP' EQ 'NEVER').STRIPPD\n         MACPARM R14,&LAB.LOOK,OP=BAL\n         AGO   .MEND\n.STRIPPD AIF   ('&STRIP' EQ 'NEVER').STRIPPR\n         MACPARM R15,0       CLEAR R15 FIRST (AM31,RM24)\n.STRIPPR MACPARM R14,&LAB.LOOK,OP=BAL\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VNENTRY": {"ttr": 13572, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      VNENTRY &LIST       ENTRY POINT FOR XCTLS\n         LCLA  &I,&J\n&J       SETA  N'&SYSLIST\n&NM      ONSPIE BUG99,X'7F'  TRAP PROGRAM CHECK INTERRUPTS\n         MVI   SQSPICA+5,X'FF'  REALLY TRAP ALL\n&NM      LH    R15,BROFF\n         LH    R15,VNENTRY(R15)\n         B     0(R15,R12)    BRANCH\nVNENTRY  EQU   *\n.LOOP    AIF   (&I GE &J).MEND\n&I       SETA  &I+1\n         DC    AL2(L&SYSLIST(&I)-&SYSECT)\n         AGO   .LOOP\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VNEXIT": {"ttr": 13574, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n         VNEXIT &LIST\n         LCLA  &I,&J\n&J       SETA  N'&SYSLIST\n.LOOP    AIF   (&I GE &J).MEND\n&I       SETA  &I+1\nL&SYSLIST(&I) LA R1,=AL1(M&SYSLIST(&I),B&SYSLIST(&I))\n         B     COMXCTL\n         AGO   .LOOP\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VOLREAD": {"ttr": 13576, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\t\\x18O!9\\x00T\\x00P\\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2009-07-03T21:39:00", "lines": 84, "newlines": 80, "modlines": 3, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      VOLREAD &TYPE,&OPERAND,&USE=,&SIZE=,&MODE=   UPDATED ON 85350\n         GBLC  &MACPLAB\n         LCLA  &I,&J\n&MACPLAB SETC  '&NM'\n&I       SETA  0\n         AIF   ('&TYPE' EQ 'CLOSE').CLOSE\n&I       SETA  1\n         AIF   ('&TYPE' EQ 'TCLOSE').CLOSE\n&I       SETA  2\n         AIF   ('&TYPE' EQ 'OPEN').CHKUSE\n&I       SETA  3\n         AIF   ('&TYPE' EQ 'DSCB').TEST1\n&I       SETA  4\n         AIF   ('&TYPE' EQ 'DSC3').TEST1\n&I       SETA  5\n         AIF   ('&TYPE' EQ 'SEARCH').LOAD1\n&I       SETA  6\n         AIF   ('&TYPE' EQ 'SEEK').LOAD1\n&I       SETA  7\n         AIF   ('&TYPE' EQ 'FIND').LOAD1\n&I       SETA  8\n         AIF   ('&TYPE' EQ 'GETDE').TEST1\n&I       SETA  9\n         AIF   ('&TYPE' EQ 'READ').TEST1\n&I       SETA  10\n         AIF   ('&TYPE' EQ 'NOTE').TEST1\n&I       SETA  11\n         AIF   ('&TYPE' EQ 'POINT').LOAD1\n&I       SETA  12\n         AIF   ('&TYPE' EQ 'GET').TEST1\n&I       SETA  13                                                85350\n         AIF   ('&TYPE' EQ 'UPDATE').LOAD1                       85350\n&I       SETA  14                                                85350\n         AIF   ('&TYPE' EQ 'FEOM').CLOSE                        GP02247\n&I       SETA  15                                                85350\n         AIF   ('&TYPE' EQ 'TRACK').LOAD1                       GP09158\n         AIF   ('&TYPE' EQ 'LOAD').INIT\n         MNOTE 8,'TYPE OPERAND REQUIRED'\n         MEXIT ,\n.INIT    ANOP  ,\n&I       SETA  &SYSNDX\n         MACPARM R15,15,@VOLREAD,OP=ICM,OPR=ICM,MODE=THREE PRIOR LOAD?\n         BNZ   VLR@&I\n         SERVCALL LPALD,=CL8'@VOLREAD'\n         ST    R0,@VOLREAD\nVLR@&I   DS    0H\n         MEXIT ,\n.TEST1   AIF   (T'&OPERAND EQ 'O').CLOSE\n         AGO   .LR1\n.CHKUSE  AIF   (T'&USE EQ 'O').MODE1\n&J       SETA  128\n         AIF   ('&USE' EQ 'VTOC').MODE1\n&J       SETA  64\n         AIF   ('&USE' EQ 'PDS').MODE1\n&J       SETA  32\n         AIF   ('&USE' EQ 'DATA').MODE1\n&J       SETA  0\n         MNOTE 4,'INVALID USE PARAMETER &USE'\n.MODE1   AIF   (T'&MODE EQ 'O').LOAD1                            85350\n         AIF   ('&MODE' EQ 'INPUT').LOAD1                        85350\n&J       SETA  &J+1          SET OUTPUT FLAG                     85350\n         AIF   ('&MODE' EQ 'UPDAT' OR '&MODE' EQ 'OUTPUT' OR           *\n               '&MODE' EQ 'UPDATE').LOAD1                        85350\n         MNOTE 4,'INVALID MODE OPERAND &MODE'                    85350\n.LOAD1   AIF   (T'&OPERAND NE 'O').LR1P\n         MNOTE 8,'FUNCTION &TYPE REQUIRES AN OPERAND'\n         MEXIT ,\n.LR1P    AIF   ('&TYPE' NE 'POINT').LR1\n         MACPARM R1,&OPERAND,OP=L   LOAD TTR VALUE\n         AGO   .LR1CM\n.LR1     MACPARM R1,&OPERAND,NULL=0\n.LR1CM   AIF   (&J EQ 0).CLOSE\n         ICM   R1,8,=AL1(&J)\n.CLOSE   AIF   (&I NE 2 OR T'&SIZE EQ 'O').CLOSET\n         MACPARM R0,&SIZE\n         IC    R0,=AL1(&I)\n         AGO   .BAL\n.CLOSET  MACPARM R0,&I\n.BAL     ANOP  ,\n&MACPLAB L     R15,@VOLREAD\n         BALSR R14,R15\n&MACPLAB SETC  ''\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTAB": {"ttr": 13579, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      VTAB  &OP,&TO,&IN,&INTO\n         LCLA  &I\n         LCLC  &L,&T(16),&S(16)\n&L       SETC  'L'''\n&T(1)    SETC  'ALL'\n&T(2)    SETC  'MVC'\n&T(3)    SETC  'REG'\n&T(4)    SETC  'HEX'\n&T(5)    SETC  'I1'\n&T(6)    SETC  'I2'\n&T(7)    SETC  'I3'\n&T(8)    SETC  'I4'\n&T(9)    SETC  'BIN'\n&T(10)   SETC  'DEC'\n&T(11)   SETC  'N A'\n&T(12)   SETC  'N A'\n&T(13)   SETC  'N A'\n&T(14)   SETC  'CLC'\n&T(15)   SETC  'N A'\n&T(16)   SETC  'LOOP'\n&S(1)    SETC  'NOP'\n&S(2)    SETC  'AGO'\n&S(3)    SETC  'LD'\n&S(4)    SETC  'LO'\n&S(5)    SETC  'LA'\n&S(6)    SETC  'LTR'\n&S(7)    SETC  'AH'\n&S(8)    SETC  'ST'\n&S(9)    SETC  'TM'\n&S(10)   SETC  'MAX'\n&S(11)   SETC  'BCT'\n&S(12)   SETC  'N A'         UNUSED\n&S(13)   SETC  'N A'         UNUSED\n&S(14)   SETC  'N A'         UNUSED\n&S(15)   SETC  'N A'         UNUSED\n&S(16)   SETC  'N A'         UNUSED\n&I       SETA  1\n.LOOP    ANOP\n         AIF   ('&OP' EQ '&T(&I)').FND\n&I       SETA  &I+1\n         AIF   (&I LT 17).LOOP\n         AIF   ('&OP' EQ '*END').END\n         AIF   ('&OP' NE 'END').BLKQ\n.END     ANOP\n&NM      DC    X'FFFFFFFFFF' .   END OF TABLE\n         AGO   .MEX\n.BLKQ    AIF   ('&OP' NE 'BLK').LOTS\n&I       SETA  1\n.FND     AIF   (&I EQ 16).DOL\n&I       SETA  (&I-1)*16\n         AIF   ('&OP' EQ 'BLK').BLK\n         AIF   (&I EQ 0).ALL\n         AIF   ('&TO'(1,1) EQ '(' AND '&TO(2)' NE '').SUB\n&NM      DC    SL2(&TO),AL1(&I+((&L&TO-1)-((&L&TO-1)/16)*16)),SL2(&IN)\n.MEX     MEXIT\n.SUB     ANOP\n&NM DC SL2(&TO(1)),AL1(&I+((&TO(2)-1)-((&TO(2)-1)/16)*16)),SL2(&IN)\n         AGO   .MEX\n.BLK     AIF   ('&TO'(1,1) EQ '(' AND '&TO(2)' NE '').BSUB\n&NM      DC    SL2(&TO),AL1(&I+((&L&TO-1)-((&L&TO-1)/16)*16)),AL1((&L&TX\n               O-1)/16,C' ') <    MOVE BLANKS\n         AGO   .MEX\n.BSUB    ANOP\n&NM      DC    SL2(&TO(1)),AL1(&I+((&TO(2)-1)-((&TO(2)-1)/16)*16)),AL1(X\n               (&TO(2)-1)/16,C' ') <     MOVE BLANKS\n         AGO   .MEX\n.ALL     AIF   ('&TO'(1,1) EQ '(' AND '&TO(2)' NE '').BALL\n&NM      DC    SL2(&TO),AL1(&I+((&L&TO-1)-((&L&TO-1)/16)*16)),AL1((&L&TX\n               O-1)/16,&IN) <   MOVE ALL\n         AGO   .MEX\n.BALL    ANOP\n&NM      DC    SL2(&TO(1)),AL1(&I+((&TO(2)-1)-((&TO(2)-1)/16)*16)),AL1(X\n               (&TO(2)-1)/16,&IN) <    MOVE ALL\n         AGO   .MEX\n.DOL     ANOP\n&NM      DC    AL2(&IN),AL1(X'F0'+((&TO-1)-(&TO-1)/16*16)),AL2(&INTO)\n         AGO   .MEX\n.LOTS    ANOP\n&I       SETA  1\n.LLOP    AIF   ('&OP' EQ '&S(&I)').LFND\n&I       SETA  &I+1\n         AIF   (&I LT 17).LLOP\n.BOOBOO  MNOTE 8,'INVALID OPERATION CODE ''&OP'''\n         MEXIT\n.LFND    ANOP\n&I       SETA  14*16+&I-1\n         AIF   ('&OP' EQ 'AGO').SS\n         AIF   ('&OP' EQ 'LD' OR '&OP' EQ 'LA'                         *\n               OR '&OP' EQ 'BCT'                                       *\n               OR '&OP' EQ 'ST').RS\n         AIF   ('&OP' EQ 'LTR').RM\n         AIF   ('&OP' EQ 'AH').RH\n         AIF   ('&OP' EQ 'TM').SM\n         AIF   ('&OP' EQ 'MAX' AND '&TO' NE '').SZ\n         AIF   ('&OP' EQ 'MAX').ZM\n         AIF   ('&OP' EQ 'LO').RZ\n.*       ASSUME NOP OR NOT CODED YET\n&NM      DC    AL1(0,0,&I,0,0) .     NOP\n         AGO   .MEX\n.RS      ANOP\n&NM      DC    AL1(0,(&TO-(&TO/16)*16),&I),SL2(&IN)\n         AGO   .MEX\n.SS      ANOP\n&NM      DC    SL2(&TO),AL1(&I),SL2(&IN)\n         AGO   .MEX\n.RM      ANOP\n&NM      DC    AL1(0,(&TO-(&TO/16)*16),&I,0,&IN)\n         AGO   .MEX\n.RH      ANOP\n&NM      DC    AL1(0,(&TO-(&TO/16)*16),&I),AL2(&IN)\n         AGO   .MEX\n.SM      ANOP\n&NM      DC    SL2(&TO),AL1(&I,0,&IN)\n         AGO   .MEX\n.ZM      DC    AL1(0,0,&I,0,&IN)\n         AGO   .MEX\n.SZ      ANOP\n&NM      DC    SL2(&TO),AL1(&I,0,0)\n         AGO   .MEX\n.RZ      ANOP\n&NM      DC    AL1(0,(&TO-(&TO/16)*16),&I,0,0)\n         AGO   .MEX\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOBYTE": {"ttr": 13582, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n      VTOBYTE  &CHAR=CHAR\n.*       R1 => VTOTAB TABLE\n.*       R5 => INPUT STRING\nCHARBYTE MVI   &CHAR,0 .     CLEAR CHARACTER OUT\n         SR    R14,R14 .     CLEAR IC REG\nCHARBYTL CLI   1(R1),255 .   END OF TABLE ?\n         BER   R9 .          YES, RETURN\n         IC    R14,1(R1) .   ELSE GET LENGTH - 1 OF ENTRY\n         EX    R14,CHARCLC .  IS THIS ENTRY IN INPUT STRING ?\n         BNE   CHARBYTI .    NO, TRY NEXT TABLE ENTRY\n         OC    &CHAR,0(R1) .   OR FLAG(S) TO BYTE\n         LA    R5,1(R5,R14) .   SET INPUT TO NEXT\nCHARBYTI LA    R1,3(R1,R14) .   SET TO NEXT TABLE ENTRY\n         B     CHARBYTL .    TRY AGAIN\nCHARCLC  CLC   2(0,R1),0(R5) .   IS INPUT SAME AS TABLE ENTRY ?\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCHAR": {"ttr": 13584, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         VTOCHAR\n         LCLC  &SECT\n&SECT    SETC  '&SYSECT'\nCHARBIT  LA    R14,CHAROUT   START OF OUTPUT,AT END WILL BE LENGTH\n         LR    R15,R14       START ADDRESS - SETUP FOR SPMOVE\n         MVC   CHAROUT,BLANKS   CLEAR OUTPUT FIELD\n         USING CHARMS,R1     MAP INPUT TABLE\n         SR    R2,R2         CLEAR IC REGISTER\nCHARLP   CLI   CHARL,255     END OF TABLE ?\n         BNE   CHARTS        NO, CONTINUE\n         SR    R14,R15       GET LENGTH OF OUTPUT STASHED\n         BPR   R9            AT LEAST ONE BYTE ?\n         LA    R14,1         FORCE ONE\n         BR    R9            RETURN\n         SPACE\nCHARTS   IC    R2,CHARL      GET LENGTH - 1 OF TEXT\n         MVC   CHARN,CHAR    COPY TEST BYTE TO WORK BYTE\n         NC    CHARN,CHART   MASK OUT ALL BUT TESTED BITS\n        CLC   CHARN,CHART   IS THIS THE PATTERN ?\n         BNE   CHARINC       NO, TRY NEXT ONE\n         EX    R2,CHARMV     MOVE TEXT TO OUTPUT\n         MVI   CHARX,255     PREPARE TO COMPLIMENT\n         XC    CHARX,CHART   COMPLEMENT TEST PATTERN\n         NC    CHAR,CHARX    MASK OUT BITS USED BY TEST\n         LA    R14,1(R2,R14)    POINT TO NEXT O/P POSITION\n         SPACE\nCHARINC  LA    R1,3(R1,R2)   POINT TO NEXT INPUT TABLE POSITION\n         B     CHARLP        TEST FOR END OR NEXT\n         DROP  R1\n         SPACE 2\nCHARMS   DSECT\nCHART    DS    X             TEST BIT PATTERN\nCHARL    DS    X             LENGTH - 1 OF TEXT\nCHARC    DS    C             CHARACTERS\n         SPACE\n&SECT    CSECT\nCHARMV   MVC   0(0,R14),2(R1)   MOVE TO OUTPUT\nCHAR     DC    X'0'          BYTE TO BE ANALYZED\nCHARN    DC    X'0'          TEST AREA\nCHARX    DC    X'0'          COMPLEMENT OF TEST BYTE\nCHAROUT  DC    CL39' '       OUTPUT AREA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOTAB": {"ttr": 13586, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM     VTOTAB &BIT,&ITEM,&LEN\n         LCLA  &I,&K,&L\n         AIF   ('&BIT' EQ '*END').END\n         AIF   ('&LEN' EQ '').DEF\n         AIF   ('&ITEM'(1,1) EQ '''').EXLQ\n&NM      DC    AL1(&BIT,&LEN-1),CL(&LEN)'&ITEM'\n         MEXIT\n.EXLQ    ANOP\n&NM      DC    AL1(&BIT,&LEN-1),CL(&LEN)&ITEM\n         MEXIT\n.DEF     ANOP\n&I       SETA  K'&ITEM\n         AIF   ('&ITEM'(1,1) EQ '''').IMLQ\n&NM      DC    AL1(&BIT,&I-1),CL&I'&ITEM'\n         MEXIT\n.IMLQ    ANOP\n&L       SETA  &I-2\n&I       SETA  &I-1\n&K       SETA  2\n.LOOP    AIF   (&K GE &I).EXPQ\n         AIF   ('&ITEM'(&K,2) EQ '''''').DOUB\n&K       SETA  &K+1\n         AGO   .LOOP\n.DOUB    ANOP\n&K       SETA  &K+2\n&L       SETA  &L-1\n         AGO   .LOOP\n.EXPQ    ANOP\n&NM      DC    AL1(&BIT,&L-1),CL&L&ITEM\n         MEXIT\n.END     ANOP\n&NM      DC    AL1(0,255) .    END OF LIST\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTBLD": {"ttr": 13588, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x00Q\\x01U\\x01U\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T00:51:00", "lines": 341, "newlines": 341, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&L       WTBLD &DUM,&MSGSECT=,&PFX='---> ',&SFX=' <---',          78310*\n               &CPU=370,                                          *GPP**\n               &ROUTCDE=(2,13),&UCMID=,&DOM=,&SCON=NO,&WTOIN=NO,&ML=\n         GBLC  &WTOSECT                                           78310\n         LCLA  &I,&LPFX,&LSFX\n.*\n.*             THIS MACRO WAS WRITTEN BY:\n.*                            SHMUEL (SEYMOUR J.) METZ\n.*                            SIGMA DATA SERVICES CORPORATION     78310\n.*                            GODDARD SPACE FLIGHT CENTER         78310\n.*                            CODE 911                            78310\n.*                            GREENBELT ROAD                      78310\n.*                            GREENBELT, MARYLAND   20771         78310\n.*\n.*             IT MAY NOT BE DISTRIBUTED WITHOUT PERMISSION FROM ME:\n.*             ANYONE REQUESTING A COPY SHOULD BE REFERRED TO THE\n.*             SHARE MFT/MVT PROJECT, WHICH IS DISTRIBUTING IT\n.*             ON THE \"MICHIGAN MODS TAPE\", AKA NMDBT;\n.*             ALTERNATIVELY, IT MAY BE OBTAINED BY ORDERING THE TDTR\n.*             (TECHNION DTR) FROM THE TECHNION.\n.*\n.*             THIS RESTRICTION IS INTENDED TO PREVENT A PROLIFERATION\n.*             OF INCOMPATIBLE VERSIONS: ANY REASONABLE SUGGESTIONS\n.*             OR CONTRIBUTIONS WILL BE ADDED TO THE DISTRIBUTED COPY.\n.*                                                                78310\n         AIF   ('&WTOSECT' EQ '').SECTSET                         78310\n         AIF   ('&MSGSECT' EQ '&WTOSECT').SECTOK                  78310\n         AIF   ('&MSGSECT' EQ '').SECTOK                          78310\n         MNOTE 8,'MSGSECT=&MSGSECT INCONSISTENT'                  78310\n         MNOTE 8,'MSGSECT=&WTOSECT PREVIOUSLY SPECIFIED'          78310\n         AGO   .SECTOK                                            78310\n.SECTSET ANOP  ,                                                  78310\n&WTOSECT SETC  '&MSGSECT'                                         78310\n         AIF   ('&WTOSECT' NE '').SECTOK                          78310\n&WTOSECT SETC  'MSGCSECT'                                         78310\n.SECTOK  ANOP  ,                                                  78310\n         AIF   ('&PFX' EQ '').NOPFX\n         AIF   ('&PFX'(1,1) EQ '''' AND '&PFX'(K'&PFX,1) EQ '''').PFOK\n         MNOTE 12,'PFX INVALID - MUST BEGIN AND END WITH ''.'\n         MEXIT\n.SPFX    MNOTE 12,'PFX INVALID - NO TEXT'\n         MEXIT\n.PFOK    AIF   ('&PFX' EQ '''' OR '&PFX' EQ '''''').SPFX\n&I       SETA  2\n.PLOOP   AIF  ('&PFX'(&I,2) NE ''''''  AND                             *\n               '&PFX'(&I,2) NE '&&&&').PSNGL\n&I       SETA  &I+1\n.PSNGL   ANOP\n&I       SETA  &I+1\n&LPFX    SETA  &LPFX+1\n         AIF   (&I LT K'&PFX).PLOOP\n         AIF   (&I EQ K'&PFX).NOPFX\n         MNOTE 12,'PFX HAS UNMATCHED ''S.'\n         MEXIT\n.*\n.NOPFX   AIF   ('&SFX' EQ '').NOSFX1\n         AIF   ('&SFX'(1,1) EQ '''' AND '&SFX'(K'&SFX,1) EQ '''').SFOK\n         MNOTE 12,'SFX INVALID - MUST BEGIN AND END WITH ''.'\n         MEXIT\n.SSFX    MNOTE 12,'SFX INVALID - NO TEXT'\n         MEXIT\n.SFOK    AIF   ('&SFX' EQ '''' OR '&SFX' EQ '''''').SSFX\n&I       SETA  2\n.SLOOP   AIF  ('&SFX'(&I,2) NE '''''' AND                              *\n               '&SFX'(&I,2) NE '&&&&').SSNGL\n&I       SETA  &I+1\n.SSNGL   ANOP\n&I       SETA  &I+1\n&LSFX    SETA  &LSFX+1\n         AIF   (&I LT K'&SFX).SLOOP\n         AIF   (&I EQ K'&SFX).NOSFX1\n         MNOTE 12,'SFX HAS UNMATCHED ''S.'\n         MEXIT\n.*\n.NOSFX1  ANOP\n&I       SETA   1\n         SPACE 1\n*        R0    PAD\n*        R1    -> WTO/WTOR PARM LIST\n*        R2    LENGTH-1 FOR MVC\n*        R3    -> DESC (OR BYTE AFTER TEXT FOR MLWTO)\n*        R4    -> WTO PARM LIST, ADJUSTED FOR PREFIX\n*        R5    -> WTO PARM LIST (OR -> LENGTH FOR MLWTO)\n*        R6    -> MSG\n*        R9    INTERNAL CALL REGISTER\n*        R14   PARM/RETURN\n*        +0    DESCRIPTOR\n*        +2    LENGTH-1 OF TEXT\n*        +3    FLAG BYTE\n*        +4    DISPLACEMENT TO TEXT\n*        +6    RETURN\n         SPACE 1\n*              FOR MULTI-LINE MESSAGES:\n*        +0    DESCRIPTOR\n*        +2    LENGTH-1\n*        +3    FLAG BYTE\n*        +4    DISPLACEMENT TO TEXT\n*        +6    LINE TYPE\n*        +8    LENGTH-1 OF TEXT\n*        +9    FLAG\n*        +10   DISPLACEMENT TO TEXT\n*        +12   LINE TYPE\n*        +14   LENGTH-1 OF TEXT\n*        ...\n*              X'FFFF'\n*        +2    RETURN\n         SPACE 3\n*              CONSTRUCTED WTO/WTOR IS OF FORM:\n*        +0    L'REPLY\n*        +1    AL3(REPLY)\n*        +4    A(ECB)\n*        +8    0\n*        +9    LENGTH\n*        +10   MCSFLAGS\n*        +12   TEXT\n*        ---   DESCRIPTOR\n*        +2    ROUTCDE\n*        +4    LINE TYPE (IF MLWTO)\n*        +6    AREA ID\n*        +7    # OF LINES\n         SPACE 1\n*        +8    LENGTH\n*        +10   LINETYPE\n*        +12   TEXT\n*        ...\n         SPACE 3\n         USING WT1,R5\n         USING WT2,R3\n         USING WTPRM,R14\n         AIF   ('&ML' EQ 'NO').NOML1\n         SPACE 2\n*              ENTRY POINT TO ADD LINES TO MLWTO\nWTOEXTND XR    R0,R0                    DO NOT ALLOW FOR POSTFIX\n         BCTR  R14,0                    FOR COMPATIBILITY WITH BUILD\n         BCTR  R14,0                        R14=R14-2\n         AIF   ('&SCON' NE 'NO').SCON1\n         STM   R14,R12,12(R13)\n         AGO   .NOSCON1\n.SCON1   STM   R0,R15,WTOREGS\n.NOSCON1 LA    R1,WTOMSGL\n         L     R3,DESCPTR               R2 = # OF LINES ALREADY BUILT\n         XR    R2,R2\n         IC    R2,WTNUMLIN\n         LA    R5,WTNUMLIN+1\nWTOE1    BCT   R2,*+8\n         B     WTOB2\n         AIF   ('&CPU' NE '360').SK370                            *TSM*\n         XR    R4,R4                    SKIP TO NEXT LINE\n         IC    R4,WTLENGTH+1\n         AGO   .SK360\n.SK370   LH    R4,WTLENGTH              SKIP TO NEXT LINE\n.SK360   AR    R5,R4\n         B     WTOE1\n.NOML1   SPACE 2\n*              ENTRY POINT TO CONSTRUCT WTO/WTOR\nWTOBUILD XR    R0,R0                    DO NOT ALLOW FOR POSTFIX\n         AIF   ('&SCON' NE 'NO').SCON2\n         STM   R14,R12,12(R13)\n         AGO   .NOSCON2\n.SCON2   STM   R0,R15,WTOREGS\n.NOSCON2 LA    R5,WTOMSGL               PTR FOR MSG BUILD\n         LR    R1,R5                    PTR FOR EXIT\n         TM    WPFLAG,$WTOR             IS WTOR FLAG ON\n         BZ    WTOB0\n         LA    R1,REPLY\n         ST    R1,WTORRPLY\n         MVI   WTORRPLY,L'REPLY\n         LA    R1,WTORECB\n         ST    R1,WTORECBA\n         MVI   WTORECB,0\n         LA    R1,WTOR\n         LA    R5,WTORMSGL\n         USING WT1,R5\n         USING WT2,R3\nWTOB0    BALS  R9,WTOBLINE              SET UP 1ST OR ONLY LINE OF WTO\n         MVC   WTDESC,WPDESC            DESC FROM CALLING SEQUENCE\n         MVC   WTROUT,ROUTCDE           ROUTCDE=(2,13)\n         MVC   WTFLAG,WFLAG             SET MCS FLAG\n         AIF   ('&ML' EQ 'NO').NOML3\n         ST    R3,DESCPTR               SAVE FOR SUBSEQUENT LINES\n         TM    WPFLAG,$ML               ML WTO REQUESTED?\n         BZ    WTOBEXIT                  NO  - CLEAN UP AND GO\n         OI    WTFLAG+1,$MCMLWTO         YES - FLAG AS SUCH\n         MVC   WTLINTYP,WPLINTYP        MOVE IN 1ST LINE TYPE\n         WTPVT AREAID                   DEFAULT: MVI WTAREAID,0\n         MVI   WTNUMLIN,1               INDICATE 1 LINE\n         LA    R5,WTNUMLIN+1            SETUP FOR NEXT LINE\nWTOB1    CLI   WPSTOPER,X'FF'           DAY IS DUN?\n         BE    WTOBXTML                     YES - DEPART\n         LA    R14,WPSTOPER-WPTXLENG+WTPRM  NO  - TO NEXT ENTRY\nWTOB2    MVC   WTLINTP2,WPLINTYP        MOVE IN NEXT LINE TYPE\n         L     R3,DESCPTR               BUMP # OF LINES\n         IC    R15,WTNUMLIN\n         LA    R15,1(,R15)\n         STC   R15,WTNUMLIN\n         BALS  R9,WTOBLINE              SET UP SUBSEQUENT LINE OF WTO\n         LR    R5,R3                    SET UP FOR NEXT LINE\n         B     WTOB1                    OD PA'AM\n.NOML3   SPACE 2\nWTOBLINE LH    R6,WPTXDISP\n         A     R6,=A(&WTOSECT)                                    78310\n         XR    R2,R2                    PICK UP LENGTH-1 FOR MVC\n         IC    R2,WPTXLENG\n         AIF   ('&SCON' EQ 'NO').NOSCON3\n         TM    WPFLAG,$SCON             TEXT POINTER OR OFFSET?\n         BZ    NOSCON                    OFFSET\n         MVC   WTOLA(2),=X'4160'        BUILD: LA R6,OFFSET(,R15)\n         MVC   WTOLA+2(2),WPTXDISP\n         OI    WTOLA+2,X'F0'\n         SR    R15,R15                  LOCATE REGISTER SAVE FOR R\n         IC    R15,WPTXDISP\n         SRL   R15,4\n         SLL   R15,2\n         L     R15,WTOREGS(R15)         LOAD FROM SAVED VALUE\n         EX    0,WTOLA                  R6->WTO (RECFM=V)\n         AIF   ('&CPU' NE '360').LH370                            *GPP*\n         SR    R2,R2         CLEAR FOR IC                         *GPP*\n         IC    R2,1(,R6)     LENGTH FROM WTO                      *GPP*\n         AGO   .LHCOM                                             *GPP*\n.LH370   LH    R2,0(,R6)     LENGTH FROM WTO                      *GPP*\n.LHCOM   SH    R2,=H'5'       - 5                                 *GPP*\n         LA    R6,4(,R6)                R6->TEXT\n.NOSCON3 ANOP\nNOSCON   LA    R3,WTTEXT+1(R2)          -> DESC IF NO PFX/SFX\n         AR    R3,R0\n         XR    R0,R0                    CLEAR FOR NEXT LINE IF MLWTO\n         LR    R4,R5\n         TM    WPFLAG,$PFX              IS PREFIX FLAG ON?\n         BZ    WTOBL1\n         WTPVT CODE,PFX=&PFX,LPFX=&LPFX,SFX=&SFX,LSFX=&LSFX\nWTOBL1   EX    R2,WTOBMVC               MOVE IN CALLER'S MESSAGE\n         SR    R3,R5                    SET WTO/WTOR LENGTH\n         AIF   ('&CPU' NE '360').STH370                           *GPP*\n         STC   R3,WTLENGTH+1       STORE LENGTH                   *GPP*\n         MVI   WTLENGTH,0    FOLLOW CONVENTIONS                   *GPP*\n         AGO   .STHCOM                                            *GPP*\n.STH370  STH   R3,WTLENGTH     STORE LENGTH                       *GPP*\n.STHCOM  AR    R3,R5         RESTORE DESC PTR                     *GPP*\n         BR    R9                       BACK FOR NEXT LINE\n         DROP  R3\n         DROP  R5\n         SPACE 1\n         USING WT1,R5\n         USING WT2,R3\n         AIF   ('&UCMID' EQ '').NOUCMID\n         AIF   ('&ML' EQ 'NO').NOML2A\nWTOBXTML LR    R5,R1                    RESTORE PFX POINTER IF MLWTO\n.NOML2A  ANOP\nWTOBEXIT XR    R0,R0                    CLEAR FOR MLWTO IN KEY 0  *TSM*\n         TM    WPFLAG,$UCMID            WTO WITH UCMID IN R0 DESIRED?\n         BZ    NOUCMID                   NO\n         IC    R0,UCMID                 GET UCMID FOR WTO         *TSM*\n         LTR   R0,R0                    IS UCMID PRESENT?\n         BZ    NOUCMID                   NO - CAN'T DO WITH REG0\n         OI    WTFLAG,$MCREG0           SET UCMID FLAG IN WTO\nNOUCMID  TM    WPFLAG,$IMM              IS IMMEDIATE WTO FLAG ON?\n         AGO   .UCMID\n.NOUCMID ANOP\n         AIF   ('&ML' EQ 'NO').NOML2B\nWTOBXTML EQU   *                        RESTORE PFX POINTER IF MLWTO\n*                                        NOT NEEDED SINCE NO UCMID\n.NOML2B  ANOP\nWTOBEXIT TM    WPFLAG,$IMM              IS IMMEDIATE WTO FLAG ON?\n.UCMID   BZ    WTOBXIT1                  NO - LET CALLER MUCK UP WTO\n         WTO   MF=(E,(1))\n         AIF   ('&DOM' EQ 'NO').NODOM1\n         AIF   ('&ML' EQ 'NO').NOML4\n         L     R3,DESCPTR               RESTORE PTR IF MLWTO\n.NOML4   TM    WTDESC,$DSIMMAC          IS THIS DESC=2?\n         BZ    WTOBXIT1                   NO - DON'T NEED DOM\n*              LEAVE DESC=1 FOR OPERATOR DELETE VIA K (CONTROL) CMD\n         BALS  R15,SAVEDOM\n.NODOM1  AIF   ('&SCON' NE 'NO').SCON4\nWTOBXIT1 LM    R2,R10,28(R13)\n         AGO   .NOSCON4\n.SCON4   ANOP\nWTOBXIT1 LM    R2,R10,WTOR2\n.NOSCON4 AIF   ('&ML' EQ 'NO').NOML5\n         TM    WPFLAG,$ML               WHERE IS THE RETURN POINT?\n         BO    WPRTRN2                   +10\n.NOML5   B     WPRETRN                   +6\n         DROP  R5,R3\n         DROP  R14\n         SPACE 1\n         WTPVT DSECT,PFX=&PFX,LPFX=&LPFX,SFX=&SFX,LSFX=&LSFX\n         SPACE 1\nWTOBMVC  MVC   4(0,R4),0(R6)            MOVE IN CALLER'S MESSAGE\n         AIF   ('&WTOIN' EQ 'NO').NOWTOIN\n         SPACE 5\n*              THIS ENTRY POINT IS USED TO COMPLETE A PARTIALLY\n*              CONSTRUCTED WTO.\n*              THE CALLER MUST SET THE TEXT INTO WTOMSG AND THE\n*              LENGTH INTO WTOMSGL(FIRST BYTE WILL BE ZEROED BY WTOIN).\n*              CALLING SEQUENCE IS:\n         SPACE 1\n*        BALS  R14,WTOIN\n*        DC    XL2'DESCRIPTORS'\n         SPACE 1\nWTOIN    MVI   WTOMSGL,0\n         LA    R1,WTOMSG-4\n         AH    R1,WTOMSGL\n         MVC   0(2,R1),0(R14)           DESC FROM CALLING SEQUENCE\n         MVC   2(2,R1),ROUTCDE          ROUTCDE=(2,13)\n         MVC   WTOFLGS(2),WFLAG\n         LA    R1,WTOMSGL\n         B     2(R14)\n.NOWTOIN AIF   ('&DOM' EQ 'NO').NODOM2\n         SPACE 1\n         AIF   ('&DOM' EQ '1').ONEDOM1\nSAVEDOM  MVC   DOMTABST,DOMTABLE+4      MAKE ROOM FOR NEW ENTRY\n         AIF   ('&CPU' NE '360').SD370                            *TSM*\n         ST    R1,DOMLAST    SAVE NEW ENTRY                       *TSM*\n         MVI   DOMLAST,X'00'            BYTE0=00                  *TSM*\n         AGO   .ONEDOM2                                           *TSM*\n.SD370   STCM  R1,7,DOMLAST+1           SAVE NEW ENTRY (BYTE0=00)\n         AGO   .ONEDOM2\n.ONEDOM1 ANOP\nSAVEDOM  ST    R1,DOMTABLE              SAVE NEW ENTRY (BYTE0=00)\n.ONEDOM2 BR    R15\n         SPACE 1\n         AIF   ('&DOM' EQ '1').ONEDOM3\nDOMITALL LA    R15,DOMTABLE\n         LA    R0,4\n         LA    R1,DOMLAST\n         OC    1(3,R15),1(R15)\n         BNZ   *+10\n         BXLE  R15,R0,*-10\n         BR    R14\n         MVI   DOMLAST,X'80'\n         DOM   MSGLIST=0(15)\n         AGO   .ONEDOM4\n.ONEDOM3 ANOP\nDOMITALL L     R1,DOMTABLE\n         DOM   MSG=(1)\n.ONEDOM4 XC    DOMTABLE(DOMTABLN),DOMTABLE\n         BR    R14\n.NODOM2  SPACE 1\nWFLAG    DC    AL1($MCRTDS,0)           MCSFLAG\nROUTCDE  WTLST &ROUTCDE,TYPE=ROUTCDE\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WTCLR": {"ttr": 13830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x00Q\\x00\\x81\\x00\\x81\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T00:51:00", "lines": 129, "newlines": 129, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&L       WTCLR &TXT,&FLAG=(PFX,IMM),&DESC=2,&PAD=,                78310*\n               &TYPE=BUILD,&MSGSECT=                              78310\n.*       TXT   TEXT TO BE DISPLAYED, DELIMITED BY APOSTROPHES\n.*       NAME  LABEL TO BE GENERATED ON DC\n.*       FLAG  LIST OF ONE OR MORE OPTIONS:\n.*             UCMID                    ROUTE TO SPECIFIC CONSOLE\n.*             ML                       MULTI-LINE WTO\n.*             PFX                      PREFIX '&PFX' FROM WTBLD\n.*                                      SUFFIX '&SFX' FROM WTBLD\n.*             WTOR                     CONSTRUCT WTOR\n.*             IMM                      ISSUE SVC 35\n.*       PAD   SPACE TO BE ALLOWED FOLLOWING TEXT\n.*       DESC  DESCRIPTOR FOR WTO/WTOR\n.*\n.*             AT LEAST ONE OF TXT, NAME MUST BE SPECIFIED\n.*\n.*       TYPE  TYPE OF OPERATION TO BE PERFORMED:\n.*             BUILD                    BUILD NEW WTO/WTOR\n.*             EXTEND                   ADD TO EXISTING WTO/WTOR\n         GBLC  &WTOSECT,&MACPLAB                                  82171\n         LCLA  &I,&J,&ILINE,&ITXT\n         LCLB  &OPTS(5)\n         LCLC  &LB,&LD,&LP,&LQ\n         LCLC  &ALFABET,&LTR\n         LCLC  &ENTRY\n         LCLC  &FLAGS(5),&OPTION,&OPTSC\n&MACPLAB SETC  '&L'                                               82171\n         AIF   ('&WTOSECT' EQ '').SECTSET                         78310\n         AIF   ('&MSGSECT' EQ '&WTOSECT').SECTOK                  78310\n         AIF   ('&MSGSECT' EQ '').SECTOK                          78310\n         MNOTE 8,'MSGSECT=&MSGSECT INCONSISTENT'                  78310\n         MNOTE 8,'MSGSECT=&WTOSECT PREVIOUSLY SPECIFIED'          78310\n         AGO   .SECTOK                                            78310\n.SECTSET ANOP  ,                                                  78310\n&WTOSECT SETC  '&MSGSECT'                                         78310\n         AIF   ('&WTOSECT' NE '').SECTOK                          78310\n&WTOSECT SETC  'MSGCSECT'                                         78310\n.SECTOK  ANOP  ,                                                  78310\n&ITXT    SETA  1\n&FLAGS(1) SETC 'UCMID'\n&FLAGS(2) SETC 'ML'\n&FLAGS(3) SETC 'WTOR'\n&FLAGS(4) SETC 'PFX'\n&FLAGS(5) SETC 'IMM'\n&ALFABET SETC  'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n&LD      SETC  '$'\n&LQ      SETC  'L'''\n.NXTLINE ANOP\n&ILINE   SETA  (&ITXT+1)/2\n&LTR     SETC  '&ALFABET'(&ILINE,1)\n&OPTSC   SETC  '+$SCON'\n         AIF   ('&SYSLIST(&ITXT)'(1,2) EQ 'S(').NAMEOK\n&OPTSC   SETC  ''\n&LB      SETC  '&SYSLIST(&ITXT,2)'\n         AIF   ('&SYSLIST(&ITXT,2)' NE '').NAMEOK\n         AIF   ('&SYSLIST(&ITXT)' NE '').GENAME\n         MNOTE 12,'PARAMETER # &ITXT INVALID'\n         MNOTE *,'LINE &ILINE MUST SPECIFY EITHER NAME OR TEXT'\n         MEXIT\n.*\n.GENAME  ANOP\n&LB      SETC  '@&SYSNDX'.'&LTR'\n.NAMEOK  AIF   (N'&SYSLIST EQ 1 OR &ITXT GT 1).NOML\n&OPTS(2) SETB  1\n&OPTION  SETC  '$ML'\n&LP      SETC  '+'\n.NOML    AIF   ('&OPTSC' NE '' OR '&SYSLIST(&ITXT,1)' EQ '').GENOP\n&WTOSECT CSECT ,                                                  78310\n&LB      DC    C&SYSLIST(&ITXT,1)\n&SYSECT  CSECT ,                                                  78310\n.GENOP   AIF   (&ITXT GT 1).NOT1ST\n         AIF   (&I EQ N'&FLAG).OPTDONE\n&I       SETA  &I+1\n&J       SETA  1\n.GENLOOP AIF   ('&FLAG(&I)' EQ '&FLAGS(&J)').SETOPT\n&J       SETA  &J+1\n         AIF   (&J LE 5).GENLOOP\n         MNOTE 12,'&FLAG(&I) IS INVALID OPTION'\n         MEXIT\n.*\n.*             CHECK FOR OPTION PREVIOUSLY SET\n.SETOPT  AIF   (&OPTS(&J)).GENOP\n.*             SET OPTION AND FLAG BIT\n&OPTION  SETC  '&OPTION'.'&LP'.'&LD&FLAG(&I)'\n&OPTS(&J) SETB 1\n&LP      SETC  '+'\n         AGO   .GENOP\n.OPTDONE AIF   ('&OPTION' NE '').TESTOPT\n&OPTION  SETC  '0'\n.*\n.TESTOPT AIF   (&OPTS(2) AND &OPTS(3)).BUM1ML\n         AIF   (NOT &OPTS(3) OR '&TYPE' NE 'EXTEND').TESTYPE\n         MNOTE 12,'TYPE=EXTEND ILLEGAL WITH WTOR - TYPE=BUILD ASSUMED'\n&ENTRY   SETC  'WTOBUILD'\n         AGO   .BAL\n.BUM1ML  MNOTE 12,'ML ILLEGAL WITH WTOR - MACRO TERMINATED'\n         MEXIT\n.*\n.TESTYPE ANOP\n&ENTRY   SETC  'WTOEXTND'\n         AIF   ('&TYPE' EQ 'EXTEND').BAL\n&ENTRY   SETC  'WTOBUILD'\n         AIF   ('&TYPE' EQ 'BUILD').BAL\n         MNOTE 12,'TYPE=&TYPE INVALID - TYPE=BUILD ASSUMED'\n.BAL     AIF   ('&PAD' EQ '' OR '&PAD' EQ '0').NOPAD              82171\n         MACPARM R0,&PAD                                          82171\n&ENTRY   SETC  '&ENTRY'.'+2'\n.NOPAD   ANOP\n         MACPARM R14,&ENTRY,OP=BAL\n         AIF   ('&TYPE' EQ 'EXTEND').NOT1ST\n         WTLST &DESC,TYPE=DESC\n.NOT1ST  AIF   ('&OPTSC' NE '').DCSCON\n         DC    AL1(&LQ.&LB-1,&OPTION&OPTSC)\n         DC    AL2(&LB-&WTOSECT)                                  78310\n         AGO   .TSTML\n.DCSCON  DC    AL1(0,&OPTION&OPTSC)\n         DC    &SYSLIST(&ITXT)\n.TSTML   AIF   (NOT &OPTS(2)).BYBY\n         WTLTP &SYSLIST(&ITXT+1),&ILINE\n.*\n.BMPITXT ANOP\n&ITXT    SETA  &ITXT+2\n         AIF   (&ITXT LT N'&SYSLIST).NXTLINE\n         AIF   (&ITXT GT N'&SYSLIST).DONE\n         MNOTE 12,'NUMBER OF PARAMETERS MUST BE ODD'\n         MNOTE *,'# &ITXT = &SYSLIST(&ITXT) IGNORED'\n.DONE    DC    X'FFFF'\n.BYBY    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTERM": {"ttr": 13833, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,                                                 88255\n&LAB     WTERM &AD,&LN,&MODE=EDIT                          ADDED 88150\n         LCLC  &MD,&NM,&MN,&L                                    88255\n         LCLA  &ML                                               88150\n&MN      SETC  'TPUT'                                            88255\n&NM      SETC  '&LAB'                                            88150\n         AIF   ('&AD'(1,1) EQ '''').LIT                          88150\n         AIF   ('&AD'(1,1) EQ '(').REG                           88150\n&NM      LA    R1,&AD        LOAD MESSAGE ADDRESS                88150\n         AGO   .BLN          PROCESS LENGTH OPERAND              88150\n.LIT     ANOP  ,                                                 88150\n&NM      LA    R1,=C&AD      LOAD MESSAGE ADDRESS                88150\n         AIF   ('&LN' NE '').BLN                                 88150\n&ML      SETA  K'&AD-2                                           88150\n         LA    R0,&ML        LOAD MESSAGE LENGTH                 88150\n         AGO   .BCAL                                             88150\n.REG     AIF   ('&AD' EQ '(1)' OR '&AD' EQ '(R1)').LEN           88150\n&NM      LR    R1,&AD(1)     LOAD MESSAGE ADDRESS                88150\n.BLN     ANOP  ,                                                 88150\n&NM      SETC  ''            LABEL ALREADY EXPANDED              88150\n.LEN     AIF   ('&LN' NE '').LNP\n&L       SETC  'L'''\n&NM      LA    R0,&L&AD\n         AGO   .BCAL\n.LNP     AIF   ('&LN'(1,1) EQ '(').REGL                          88150\n&NM      LA    R0,&LN        LOAD MESSAGE LENGTH                 88150\n         AGO   .BCAL         PROCESS CALL                        88150\n.REGL    AIF   ('&LN' EQ '(0)' OR '&LN' EQ '(R0)').CALL          88150\n&NM      LR    R0,&LN(1)     LOAD MESSAGE LENGTH                 88150\n.BCAL    ANOP  ,                                                 88150\n&NM      SETC  ''                                                88150\n.CALL    AIF   ('&MODE' EQ 'EDIT' OR '&MODE' EQ 'ASIS' OR              *\n                '&MODE' EQ 'CONTROL').MOK                        88150\n         AIF   ('&MODE' EQ 'DARK' OR '&MODE' EQ 'PROMPT').PUTGET 88255\n&MD      SETC  'EDIT'        SET DEFAULT                         88150\n         MNOTE 4,'INVALID MODE OPERAND - &MODE'                  88150\n         AGO   .KALL                                             88150\n.PUTGET  ANOP  ,                                                 88255\n&MN      SETC  'PTGT'        USE PUTGET INSTEAD OF PUTLINE       88255\n.MOK     ANOP  ,                                                 88150\n&MD      SETC  '&MODE'(1,4)  TRUNCATE                            88150\n.KALL    ANOP  ,                                                 88150\n&NM      SUBCALL &MN&MD      PROCESS OUTPUT SERVICE              88255\n         MEND  ,                                                 88255\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTLST": {"ttr": 13835, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&L       WTLST &DUM,&TYPE=DESC\n         GBLB  &WTFAIL\n         LCLA  &I,&J,&UNIQUE\n         LCLB  &BIT(16)\n         LCLC  &DIGIT\n         AIF   (N'&SYSLIST(1) EQ 0).NOLIST\n         AIF   (N'&SYSLIST(1) LE 16).LOOP1\n         MNOTE 12,'&TYPE HAS MORE THAN 16 OPERANDS'\n.FAIL    ANOP\n&WTFAIL  SETB  1\n         MEXIT\n.NOLIST  MNOTE 12,'&TYPE IS A REQUIRED OPERAND'\n         AGO   .FAIL\n.NOTNUM  MNOTE 12,'&TYPE.(&I.) MUST BE NUMERIC'\n         AGO   .FAIL\n.RANGE   MNOTE 12,'&TYPE.(&I.) MUST BE IN THE RANGE 1-16'\n         AGO   .FAIL\n.NOTU    MNOTE 12,'DESCRIPTORS CODES 1-7 MUST BE UNIQUE'\n         AGO   .FAIL\n.LOOP1   ANOP\n&I       SETA  &I+1\n         AIF   (T'&SYSLIST(1,&I) NE 'N').NOTNUM\n         AIF   (&SYSLIST(1,&I) LE 0 OR &SYSLIST(1,&I) GT 16).RANGE\n&BIT(&SYSLIST(1,&I)) SETB 1\n         AIF   (&SYSLIST(1,&I) GT 7 OR '&TYPE' NE 'DESC').END1\n&UNIQUE  SETA  &UNIQUE+1\n.END1    AIF   (&I LT N'&SYSLIST(1)).LOOP1\n         AIF   (&UNIQUE GT 1).NOTU\n         AIF   ('&TYPE' NE 'DESC' OR NOT &BIT(8) OR &BIT(9)).OUTOK\n         MNOTE 8,'DESC=8(OUT OF LINE) REQUIRES DESC=9(ID ADDED)'\n         MNOTE *,'DESC=9 ADDED TO LIST - ASSEMBLY CONTINUES'\n&BIT(9)  SETB  1\n.OUTOK   ANOP\n&I       SETA  1\n.LOOP2   ANOP\n&J       SETA  1+8*&BIT(&I)+4*&BIT(&I+1)+2*&BIT(&I+2)+&BIT(&I+3)\n&DIGIT   SETC  '&DIGIT'.'0123456789ABCDEF'(&J,1)\n&I       SETA  &I+4\n         AIF   (&I LE 16).LOOP2\n&L       DC    X'&DIGIT'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTLTP": {"ttr": 13837, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         WTLTP &TYPE,&I\n         AIF   ('&TYPE' EQ 'C').CONTROL\n         AIF   ('&TYPE' EQ 'L').LABEL\n         AIF   ('&TYPE' EQ 'D').DATA\n         AIF   ('&TYPE' EQ 'DE').DEND\n         AIF   ('&TYPE' EQ 'E').END\n         MNOTE 12,'LINETYPE # &I IS NOT C, L, D, DE, OR E - DE ASSUMED'\n         AGO   .DEND\n.CONTROL DC    XL2'8000'\n         MEXIT\n.LABEL   DC    XL2'4000'\n         MEXIT\n.DATA    DC    XL2'2000'\n         MEXIT\n.DEND    DC    XL2'3000'\n         MEXIT\n.END     DC    XL2'1000'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTPVT": {"ttr": 13839, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&L       WTPVT &TYPE,&PFX=,&LPFX=0,&SFX=,&LSFX=0\n         AIF   ('&TYPE' EQ 'CODE').CODE\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         AIF   ('&TYPE' EQ 'AREAID').AREAID\n         MNOTE 12,'&TYPE INVALID - TYPE MUST BE AREAID, CODE OR DSECT.'\n         MEXIT\n.CODE    ANOP\n         LA    R4,TEXTDISP-4(R4)        ADJUST FOR PFX\n         AIF   (&LPFX EQ 0).NOPFX\n         MVC   4(&LPFX,R5),=C&PFX\n.NOPFX   AIF   (&LSFX EQ 0).NOSFX\n         MVC   LPFX(&LSFX,R3),=C&SFX\n.NOSFX   LA    R3,&LSFX+LPFX(R3)        ADJUST FOR PREFIX/SUFFIX\n         MEXIT\n.DSECT   ANOP\nLPFX     EQU   &LPFX\nTEXTDISP EQU   4+&LPFX\n         MEXIT\n.AREAID  ANOP\n         MVI   WTAREAID,0               L=Z\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTU": {"ttr": 14081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x02\\x0f\\x01\\x06&?\\x00S\\x01Q\\x01K\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-20T00:00:00", "modifydate": "2006-09-20T00:53:00", "lines": 337, "newlines": 331, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NAME    WTU   &MESG,&MF=I,&ROUTCDE=,&DESC=,&MSGTYP=,&MCSFLAG=,&UCMID=W*\n               RKUCMID,&TSO=NO\n         GBLB  &IHBWTL,&IHBWTOR\n         GBLC  &MACPLAB\n.**********************************************************************\n.*                                                                   **\n.*   ISSUE MESSAGE AS TPUT UNDER TSO, AND WTO OTHERWISE              **\n.*     IF STC, USE START CONSOLE UCMID FOR RESPONSES                 **\n.*                                                                   **\n.**********************************************************************\n         LCLA  &LT(256),&H,&I,&N,&J,&LEN,&LNUM,&LLCNT            S21002\n         LCLB  &NODFLT\n         LCLB  &B(16),&AD,&E,&E1,&E2,&E3,&E4,&E5,&MCS,&MLW       S21002\n         LCLB  &SECONDL,&SWM,&TWO,&PAIR                          S21002\n         LCLC  &CFLG(16),&CD(16),&GNAME                          S21002\n.*\n.*       THIS IS A COPY OF IBM'S WTO MACRO - ONLY MODIFICATION\n.*       WAS TO FORCE MCSFLAG=REG0 AND ADDED CODE TO LOAD\n.*       UCMID FROM LABEL WRKUCMID VIA IC\n.*\n&GNAME   SETC  'IHB'.'&SYSNDX'\n&MACPLAB SETC  '&NAME'\n         AIF    ('&MF' EQ 'I' OR '&MF' EQ 'L').NUMCHK            S21002\n         AIF   (N'&MF NE 2).E1\n         AIF   ('&MF(1)' NE 'E').E1\n&NAME    IHBINNRA &MF(2)\n&MACPLAB SETC  ''                                                90014\n         AIF   (&IHBWTL).END\n.*       SVC   35                                ISSUE SVC\n         AGO   .UCMSVC\n.NUMCHK  ANOP                                                    S21002\n         AIF   (N'&SYSLIST LE 1).LABLL                            66488\n         AIF   ('&SYSLIST(1)'(1,1) EQ '(').LABLL                  66488\n         MNOTE 8,'MLWTO MSG LINES NOT ENCLOSED IN PARENTHESES'    66488\n         AGO   .END                                               66488\n.LABLL   AIF   (N'&SYSLIST EQ 0 OR N'&SYSLIST GT 10).NOTXT        66488\n         AIF   ('&MF' EQ 'I').IROUT                              S21002\n.LROUT   AIF   (&IHBWTOR).MESCHK\n&NAME    DS    0H\n&MACPLAB SETC  ''                                                90014\n.MESCHK  ANOP\n&I       SETA  1\n&MCS     SETB  (T'&ROUTCDE NE'O' OR T'&MSGTYP NE 'O' )\n&B(3)    SETB  0                                                   MCS\n         AIF   ('&MESG' EQ '').NOTXT                             S21002\n&MLW     SETB  (N'&SYSLIST NE 1 OR N'&SYSLIST(1) NE 1)           S21002\n         AIF   (&IHBWTOR AND &MLW).MLWTOR                        S21002\n         AIF   (T'&DESC EQ 'O').SETNCLR\n&MCS     SETB  1\n.*\n.*  DESCRIPTOR CODES\n.*\n.DCHK    ANOP\n&N       SETA  &DESC(&I)\n&I       SETA  &I+1\n         AIF   (&N GE 1 AND &N LE 16).ASSIGND\n         MNOTE 8,'&DESC(&I-1) IS INVALID DESCRIPTOR- IGNORED'     67737\n         AGO   .NXTD\n.ASSIGND ANOP\n&B(&N)   SETB  1\n.NXTD    AIF   (&I LE N'&DESC).DCHK\n&I       SETA  1\n         AGO   .SETNCLR\n.*\n.*  ROUTE CODES\n.*\n.RTCHK   AIF   (T'&ROUTCDE NE 'O').RCHK0\n.DEFLAG  ANOP\n&I       SETA  3\n         AIF   (&J EQ N'&MCSFLAG OR T'&MCSFLAG EQ 'O').DODEF\n&J       SETA  &J+1\n         AIF   ('&MCSFLAG(&J)' EQ 'REG0' OR '&MCSFLAG(&J)' EQ 'QREG0').*\n               SETNCLR\n         AGO   .DEFLAG\n.DODEF   ANOP\n         AIF   (T'&MSGTYP NE 'O').SETNCLR                         68508\n         AIF   (T'&UCMID NE 'O').SETNCLR\n&B(2)    SETB  (&MCS)\n&I       SETA  3\n         AGO   .SETNCLR\n.*\n.RCHK0   ANOP\n.RCHK    ANOP\n&N       SETA  &ROUTCDE(&I)\n&I       SETA  &I+1\n         AIF   (&N GE 1 AND &N LE 16).ASSIGNR\n         MNOTE 8,'ROUTCDE(&I-1) IS INVALID ROUTE- IGNORED'        66111\n         AGO   .NXTR\n.ASSIGNR ANOP\n&NODFLT  SETB  (&NODFLT OR &N NE 16)\n&B(&N)   SETB  1\n.NXTR    AIF   (&I LE N'&ROUTCDE).RCHK\n&I       SETA  3\n&B(2)    SETB  (&B(2) OR NOT &NODFLT)\n&NODFLT  SETB  0\n&B(16)   SETB  0\n.NOT11   ANOP\n.*\n.*  SET OUTPUT AREAS AND CLEAR BINARY FLAGS\n.*\n.SETNCLR ANOP\n&CD(&I)  SETC  '&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'\n&CD(&I+1) SETC '&B(9)&B(10)&B(11)&B(12)&B(13)&B(14)&B(15)&B(16)'\n&N       SETA  1\n.CLR     ANOP\n&B(&N)   SETB  0\n&N       SETA  &N+1\n         AIF   (&N LT 17).CLR\n         AIF   (&I EQ 1).RTCHK\n         AIF   (&I EQ 5).FLGCHK0\n         AIF   (&I EQ 7).GENDCS                                  S21002\n.*\n.*  MESSAGE TYPES\n.*\n.TYPCHK  AIF   (T'&MSGTYP EQ 'O').FLGCHK0\n         AIF   ('&MSGTYP(1)' EQ 'N').FLGCHK0\n&SWM     SETB  1                                                 S21002\n&I       SETA  5\n&N       SETA  1\n         AIF   ('&MSGTYP(1)' EQ 'Y').SETNCLR\n&I       SETA  1\n.*\n&CFLG(1) SETC  'JOBNAMES'\n&CFLG(2) SETC  'STATUS'\n&CFLG(3) SETC  'ACTIVE'                                          S21002\n&CFLG(4) SETC  ''                                                S21002\n&CFLG(5) SETC  'SHOW'                                              CRJE\n&CFLG(6) SETC  'SESS'                                            20034\n.*\n.TCHK    AIF   ('&MSGTYP(&I)' EQ '&CFLG(&N)').SETTYP\n&N       SETA  &N+1\n         AIF   (&N LE 8).TCHK\n         MNOTE 8,'MESSAGE TYPE FIELD INVALID- N IS ASSUMED'\n&N       SETA  1                                                 S21002\n&I       SETA  5                                                 S21002\n&SWM     SETB  0                                                 S21002\n         AGO   .CLR                                              S21002\n         AGO   .FLGCHK0\n.SETTYP  AIF   ('&CFLG(&N)' EQ '').ADDIT\n&B(&N)   SETB 1\n.ADDIT   ANOP\n&I       SETA  &I+1\n&N       SETA  1\n         AIF   (&I LE N'&MSGTYP).TCHK\n&I       SETA  5\n         AGO   .SETNCLR\n.*\n.*  MCSFLAGS\n.*\n.FLGCHK0 ANOP\n&MCS    SETB  (T'&ROUTCDE NE 'O' OR T'&MSGTYP NE 'O' OR T'&DESC NE 'O')\n.*                                                               S21002\n&B(1)    SETB  (&MCS)\n         AIF   (T'&UCMID EQ 'O').NOUCMFG\n&B(2)    SETB  1             SET UCMID FLAG\n.NOUCMFG ANOP\n&B(4)    SETB  (&SWM)\n&B(10)   SETB  (&MLW)              THIS IS MLWTO LIST            S21002\n&I       SETA  7\n         AIF   (T'&MCSFLAG EQ 'O').SETNCLR\n&I       SETA  1\n&N       SETA  1\n.*\n&CFLG(1) SETC  'REG0'\n&CFLG(2) SETC  'RESP'\n&CFLG(3) SETC  ''\n&CFLG(4) SETC  'REPLY'\n&CFLG(5) SETC  'BRDCST'\n&CFLG(6) SETC  'HRDCPY'\n&CFLG(7) SETC  'QREG0'\n&CFLG(8) SETC  'NOTIME'\n&CFLG(13) SETC 'NOCPY'\n.*\n.FLGCHK  AIF   ('&MCSFLAG(&I)' EQ '&CFLG(&N)').SETFLG\n&N       SETA  &N+1\n         AIF   (&N LE 15).FLGCHK\n         MNOTE 8,'&MCSFLAG(&I) IS INVALID- IGNORED'\n         AGO   .ADDI\n.SETFLG  AIF   ('&CFLG(&N)' EQ '').ADDI\n         AIF   ('&CFLG(&N)' NE 'HRDCPY').HDCYOK               BE A52575\n         AIF   (NOT &MLW).HDCYOK                              BE A52575\n         IHBERMAC 248                                         BE A52575\n&GNAME.A DS    0H\n         MEXIT\n.HDCYOK  ANOP                                                 BE A52575\n&B(&N+1) SETB  1\n.ADDI    ANOP\n&I       SETA  &I+1\n&N       SETA  1\n         AIF   (&I LE N'&MCSFLAG).FLGCHK\n         AIF   (&B(7) AND &B(14)).MUTEXC  THESE PARAM MUTUALLY EXCLUSIV\n.*                                      HARDCOPY AND NO HARD COPY\n         AGO   .SETTER\n.MUTEXC  ANOP\n&B(14)   SETB  0\n         MNOTE 8,'HRDCPY AND NOCPY MUTUALLY EXCLUSIVE, HRDCPY ASSUMED'\n.SETTER  ANOP\n&I       SETA  7\n         AGO   .SETNCLR\n.IROUT   AIF   (&IHBWTOR).MESCHK\n         CNOP  0,4\n&NAME    BAL   1,&GNAME.A                        BRANCH AROUND MESSAGE\n&MACPLAB SETC  ''                                                90014\n         AGO   .MESCHK\n.*                                                               S21002\n.*  * *  SET LINETYPE  * * * * *                                 S21002\n.*                                                               S21002\n.GENDCS  AIF   (NOT &MLW).NOTMLW1  GENERATE REGULAR WTO          S21002\n&H       SETA  1                                                 S21002\n         AIF   ('&SYSLIST(1,1)' EQ '').MLW04                     S21002\n         AIF   (N'&SYSLIST(1) GT 2).MLW05                        S21002\n         AIF   ('&SYSLIST(1,2)' NE 'C').MLW02                    S21002\n&LT(1)   SETA  80                                                S21002\n.MLW01   AIF   (N'&SYSLIST LE &H).MLW11                          S21002\n&H       SETA  &H+1                                              S21002\n         AIF   (N'&SYSLIST(&H) GT 2).MLW05                       S21002\n.MLW02   AIF   ('&SYSLIST(&H,2)' NE 'L' OR '&SYSLIST(&H,1)' EQ '').MLW0X\n               4                                                 S21002\n&LT(&H)  SETA  40                                                S21002\n         AIF   (&SECONDL).MLW03                                  S21002\n&SECONDL SETB  1                                                 S21002\n         AGO   .MLW01                                            S21002\n.MLW03   AIF   (N'&SYSLIST LE &H).MLW11                          S21002\n&H       SETA  &H+1                                              S21002\n         AIF   (N'&SYSLIST(&H) GT 2).MLW05                       S21002\n.MLW04   AIF   ('&SYSLIST(&H,2)' EQ 'E').MLW06                   S21002\n         AIF   ('&SYSLIST(&H,1)' EQ '').MLW05                    S21002\n         AIF   ('&SYSLIST(&H,2)' EQ 'DE').MLW08                  S21002\n         AIF   ('&SYSLIST(&H,2)' EQ 'L' OR '&SYSLIST(&H,2)' EQ 'C').MLWX\n               09                                                S21002\n         AIF   ('&SYSLIST(&H,2)' NE 'D' AND '&SYSLIST(&H,2)' NE '').MLW*\n               10                                                S21002\n&LT(&H)  SETA  20                                                S21002\n         AGO   .MLW03                                            S21002\n.MLW05   ANOP                                                    S21002\n&E5      SETB  1                                                 S21002\n&LT(&H)  SETA  10                                                S21002\n         AGO   .MLW11                                            S21002\n.MLW06   ANOP                                                    S21002\n&LT(&H)  SETA  10                                                S21002\n.MLW07   ANOP                                                    S21002\n&E4      SETB  (&H NE N'&SYSLIST)                                S21002\n         AGO   .MLW11                                            S21002\n.MLW08   ANOP                                                    S21002\n&LT(&H)  SETA  30                                                S21002\n         AGO   .MLW07                                            S21002\n.MLW09   ANOP                                                    S21002\n&E3      SETB  1                                                 S21002\n&LT(&H)  SETA  30                                                S21002\n         AGO   .MLW11                                            S21002\n.MLW10   ANOP                                                    S21002\n&E5      SETB  1                                                 S21002\n&LT(&H)  SETA  30                                                S21002\n.MLW11   ANOP                                                    S21002\n&LLCNT   SETA  &H                                                S21002\n&H       SETA  1                                                 S21002\n.NOTMLW1 ANOP                                                    S21002\n&I       SETA  1                                              MA S21002\n&LEN     SETA  K'&SYSLIST(1,1)-2                              MA S21002\n&PAIR    SETB  0                                              MA S21002\n.QLOOP1  ANOP                                                 MA S21002\n&I       SETA  &I+1+&PAIR                                     MA S21002\n         AIF   (&I GE K'&SYSLIST(1,1)).QDONE1                 MA S21002\n&PAIR    SETB  ('&SYSLIST(1,1)'(&I,2) EQ '''''' OR '&SYSLIST(1,1)'(&I,2*\n               ) EQ '&&')\n&LEN     SETA  &LEN-&PAIR                                     MA S21002\n         AGO   .QLOOP1                                        MA S21002\n.QDONE1  ANOP                                                 MA S21002\n&AD      SETB  (&LT(1) NE 10)      0 IF E-TYPE LINE, 1 IF NOT MA S21002\n&LEN     SETA  4+&LEN*&AD                                     MA S21002\n         DC    AL2(&LEN)           TEXT LENGTH\n         DC    B'&CD(7)&CD(8)'     MCS FLAGS\n         AIF   (&LEN EQ 4).SKIPDC                                S21002\n         DC    C&SYSLIST(1,1)\n.SKIPDC  AIF   (NOT &MCS).OLDEXIT                                S21002\n         DC    B'&CD(1)&CD(2)'     DESCRIPTOR CODES\n         DC    B'&CD(3)&CD(4)'     ROUTING CODES\n         AIF   ('&MSGTYP(1)' NE 'Y' AND NOT &SWM).OLDEXIT        S21002\n         DC    B'&CD(5)&CD(6)'     MESSAGE TYPE\n.OLDEXIT AIF   (NOT &MLW).NOTMLW2                                S21002\n         DC    XL2'&LT(1)00'       LINE TYPE\n         DC    AL2(&LLCNT)         TOTAL NUMBER OF LINES\n.MLW12   AIF   (&H GE &LLCNT).MLW14                              S21002\n&H       SETA  &H+1                                              S21002\n&I       SETA  1                                              MA S21002\n&LEN     SETA  K'&SYSLIST(&H,1)-2                             MA S21002\n&PAIR    SETB  0                                              MA S21002\n.QLOOPH  ANOP                                                 MA S21002\n&I       SETA  &I+1+&PAIR                                     MA S21002\n         AIF   (&I GE K'&SYSLIST(&H,1)).QDONEH                MA S21002\n&PAIR    SETB  ('&SYSLIST(&H,1)'(&I,2) EQ '''''' OR '&SYSLIST(&H,1)'(&I*\n               ,2) EQ '&&')\n&LEN     SETA  &LEN-&PAIR                                     MA S21002\n         AGO   .QLOOPH                                        MA S21002\n.QDONEH  ANOP                                                 MA S21002\n&AD      SETB  (&LT(&H) NE 10)     0 IF E-TYPE LINE, 1 IF NOT MA S21002\n&LEN     SETA  4+&LEN*&AD                                     MA S21002\n         DC    AL2(&LEN)           LENGTH\n         DC    XL2'&LT(&H)00'      LINE TYPE\n         AIF   (&LEN EQ 4).MLW12                                 S21002\n         DC    C&SYSLIST(&H,1)\n         AGO   .MLW12                                            S21002\n.MLW14   AIF   (NOT &E4).MLW15                                   S21002\n         IHBERMAC 242                                         MB  M1428\n.MLW15   AIF   (NOT &E5).MLW17                                   S21002\n         IHBERMAC 243                                         MB  M1428\n.MLW17   AIF   (NOT &E3).NOTMLW2                                 S21002\n         IHBERMAC 244                                         MB  M1428\n.NOTMLW2 AIF   (&IHBWTOR OR '&MF' NE 'I').END                    S21002\n.MLWHC   ANOP                                                 BE A52575\n&GNAME.A DS    0H\n         AIF   (&E3 OR &IHBWTL).END                              S21002\n.UCMSVC  AIF   (T'&UCMID EQ 'O').DOSVC\n         AIF   ('&UCMID'(1,1) EQ '(').NOSR\n&MACPLAB SLR   R0,R0         CLEAR IC REGISTER                   90014\n&MACPLAB SETC  ''                                                90014\n.NOSR    MACPARM R0,&UCMID,OP=IC\n         AIF   ('&TSO' EQ 'NO').DOSVC\n&MACPLAB LA    R15,255       MAX UCMID\n         CR    R0,R15        MAX ?\n         BL    *+22          SKIP TPUT CODE\n         LH    R0,0(,R1)     LOAD LENGTH+4\n         SH    R0,*+6        ACTUAL LENGTH\n         LA    R1,4(R1,0)    TEXT START\n         SVC   93            TPUT\n         B     *+6           BRANCH AROUND WTO\n.DOSVC   ANOP  ,\n&MACPLAB SVC   35\n         MEXIT                                                   S21002\n.E1      IHBERMAC 35,,&MF\n         MEXIT\n.NOTXT   ANOP                                                    S21002\n         IHBERMAC 245                                         MB  M1428\n         MEXIT                                                   S21002\n.MLWTOR  IHBERMAC 246                                         MB  M1428\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTWRK": {"ttr": 14087, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&L       WTWRK &DUMMY,&MSGLEN=125,&REPLYLN=5,&NUMDOM=5,&ML=YES,        *\n               &SCON=NO\n         AIF   (&NUMDOM EQ 0).NODOM\nDOMTABLE DS    (&NUMDOM)A          IDS TO BE DELETED AFTER REPLY\nDOMTABLN EQU   4*&NUMDOM           LENGTH IN BYTES OF DOM ID TABLE\nDOMTABST EQU   DOMTABLE,DOMTABLN-4 FIRST N-1 ENTRIES IN DOM ID TABLE\nDOMLAST  EQU   *-4,4,C'A'          LAST ID IN DOM TABLE           78117\n.NODOM   AIF   ('&ML' EQ 'NO').NOML\nDESCPTR  DS    A                   SAVE ADDR OF DESC - USED FOR MLWTO\n.NOML    AIF   ('&SCON' EQ 'NO').NOSCON\nWTOREGS  DS    0F                  SAVE AREA IF SCONS ALLOWED\nWTOR0    DS    F\nWTOR1    DS    F\nWTOR2    DS    F\nWTOR3    DS    F\nWTOR4    DS    F\nWTOR5    DS    F\nWTOR6    DS    F\nWTOR7    DS    F\nWTOR8    DS    F\nWTOR9    DS    F\nWTOR10   DS    F\nWTOR11   DS    F\nWTOR12   DS    F\nWTOR13   DS    F\nWTOR14   DS    F\nWTOR15   DS    F\nWTOLA    LA    R6,0(,R15)\n.NOSCON  ANOP\nWTORAREA DS    0C                  INCLUDES REPLY AREA AND ECB\nREPLY    DS    CL(&REPLYLN)\nWTORECB  DS    F\nWTOAREA  DS    0C                  OVERLAY WTOS HERE\nWTOR     DS    0C\nWTORRPLY DS    AL4                 LENGTH OF REPLY AREA AND ITS ADDR\nWTORECBA DS    AL4                 ADDRESS OF WTOR ECB\nWTORMSGL DS    AL2\nWTORFLGS DS    AL2\nWTORL    EQU   *-WTORAREA          AMOUNT TO ZERO\nWTORMSG  DS    CL60                MAX MSG LENGTH\nWTORROUT DS    CL4\n         ORG   WTOAREA             OVERLAY FOR WTOS\nWTO      DS    0C\nWTOMSGL  DS    AL2                 1ST BYTE IS 0 FOR WTO\nWTOFLGS  DS    AL2\nWTOL     EQU   *-WTOAREA           AMOUNT TO ZERO\nWTOMSG   DS    CL(&MSGLEN)         MAX LENGTH OF WTO MSG\nWTOROUT  DS    CL4                                                78117\n         ORG\n         SPACE 1\n*              WTO PREFIX - END OF WTOR PREFIX\nWT1      DSECT\nWTLENGTH DS    Y                        LENGTH INCLUDING WTO PREFIX\nWTFLAG   DS    XL2                      MCS FLAGS FOR FIRST LINE\n$MCRTDS  EQU   128                      ROUTCDE/DESC FIELDS EXIST\n$MCREG0  EQU   64\n$MCRESP  EQU   32\n$MCREPLY EQU   8\n$MCBRDCS EQU   4\n$MCHRDCP EQU   2\n$MCQREG0 EQU   1\n$MCNOTIM EQU   128\n$MCMLWTO EQU   64\n$MCNOCPY EQU   4\nWTLINTP2 EQU   WTFLAG,2,C'X'            LINE TYPE FOR SUBSEQUENT L78117\nWTTEXT   EQU   *,1,C'C'                                           78117\n         SPACE 1\nWT2      DSECT\n*              PORTION OF WTO FOLLOWING TEXT\nWTDESC   DS    XL2                      DESCRIPTOR FOR FIRST LINE\n$DSSYSFA EQU   128\n$DSIMMAC EQU   64\n$DSEVNAC EQU   32\n$DSSYSST EQU   16\n$DSIMMCR EQU   8\n$DSJOBST EQU   4\n$DSAPPLP EQU   2\n$DSOUTLN EQU   1\n$DSDISMN EQU   128                      ID TO BE PUT INTO CONTROL LINE\nWTROUT   DS    XL2\nWTLINTYP DS    XL2                      LINE TYPE FOR FIRST LINE\n$LTC     EQU   128                      CONTROL LINE\n$LTL     EQU   64                       LABEL   LINE\n$LTD     EQU   32                       DATA    LINE\n$LTE     EQU   16                       END     LINE\nWTAREAID DS    X\nWTNUMLIN DS    X\n         SPACE 1\nWTPRM    DSECT\nWPDESC   DS    XL2\nWPTXLENG DS    AL1                      TEXT LENGTH-1 FOR MVC\nWPFLAG   DS    X\n$UCMID   EQU   128                      ROUTE TO SPECIFIC CONSOLE\n$ML      EQU   64                       ANOTHER LINE FOLLOWS\n$WTOR    EQU   32\n$PFX     EQU   16\n$IMM     EQU   8\n$SCON    EQU   4\n$TPUT    EQU   2\nWPTXDISP DS    Y                        OFFSET TO TEXT FROM MSGCSECT\nWPRETRN  EQU   *\nWPLINTYP DS    XL2\nWPSTOPER DS    XL2\nWPRTRN2  EQU   *\n&SYSECT  DSECT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XCURCON": {"ttr": 14090, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x03\\x00\\x00\\x01\\x13\\x10O\\x01\\x13\\x16/\\x16\\x05\\x00O\\x009\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.03", "flags": 0, "createdate": "2013-04-14T00:00:00", "modifydate": "2013-06-11T16:05:00", "lines": 79, "newlines": 57, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      XCURCON &XOFF=0,&YOFF=0,&ERR=,&XINT=2,&YINT=1,&XMAX=,&YMAX=,  *\n               &XFUZZ=0,&YFUZZ=0,                                      *\n               &FLAGS=FDWPROFG,&FBIT=FDWPFCUR,&VAL=FDWCUR   NEW GP13105\n.*\n.*   XCURCON ALLOWS THE USER TO PLACE THE CURSOR AT A SCREEN LOCATION\n.*   AND HIT ENTER. THE MACRO EITHER BRANCHES TO THE 'ERR' LABEL,\n.*   OR ENDS WITH AN X OFFSET IN R3 AND A Y OFFSET IN R1 (REL. TO 0).\n.*     (FLAG AND CURSOR DEFAULTS SET FOR SCLINE SERVICE)\n.*\n.*   &VAL   - THE CURSOR ADDRESS SUITABLE FOR THE NEXT WRITE\n.*   &FLAGS - CONTROL BYTE SET ON FOR A MINIMAL VALID ADDRESS\n.*   &FBIT  - CONTROL BIT INDICATING A CURSOR ADDRESS PROCESSED\n.*   &ERR   - LABEL FOR ERROR (CURSOR NOT IN TARGET RECTANGLE)\n.*   &XOFF  - MINIMUM X OFFSET IN SCREEN LINE (DEFAULT IS 0)\n.*   &XINT  - X SPACING (DEFAULT IS 2; INTEGER OR HALFWORD)\n.*   &XMAX  - NUMBER OF HORIZONTAL POSITIONS\n.*   &XFUZZ - DEVIATION FROM MINIMUM (FUZZY POSITION)           GP13162\n.*   &YOFF  - MINIMUM OFFSET ON SCREEN (DEFAULT IS 0)\n.*   &YINT  - Y SPACING (DEFAULT IS 1; INTEGER OR HALFWORD)     GP13162\n.*   &YMAX  - NUMBER OF VERTICAL POSITIONS\n.*   &YFUZZ - DEVIATION FROM MINIMUM (FUZZY POSITION)           GP13162\n.*\n.*  XFUZZ/YFUZZ ALLOW CURSOR IN AN AREA TO REGISTER AS A POINT. GP13162\n.*\n&NM      MVC   DB(3),EXCRAWIN  COPY TO PARAMETER AREA\n         BAS   R14,EXWFRSBA  GET SCREEN ADDRESS OF CURSOR\n         STH   R0,&VAL       SAVE BINARY CURSOR ADDRESS\n         MACPARM R15,&ERR    QUICK RETURN ON ERROR\n         SRDA  R0,32         MOVE TO R1 AND ZERO R0\n         LH    R2,LSIZE      GET SCREEN WIDTH\n         DR    R0,R2         GET COLUMN / ROW OF CURSOR\n         LR    R3,R0         COPY Y OFFSET                      GP13162\n         AIF   (T'&XOFF EQ 'N').NUMX\n         MACPARM R3,&XOFF,OP=SH,OPR=SR\n         AGO   .TESTY\n.NUMX    SH    R3,=AL2(&XOFF)  LESS STARTING ROW\n.TESTY   BMR   R15           NOT IN DISPLAY AREA\n         AIF   (T'&YOFF EQ 'N').NUMY\n         MACPARM R1,&YOFF,OP=SH,OPR=SR\n         AGO   .TESTZ\n.NUMY    SH    R1,=AL2(&YOFF)  LESS STARTING ROW\n.TESTZ   BMR   R15           NOT IN DISPLAY AREA\n         SR    R0,R0         PREPARE FOR DIVIDE                 GP13162\n         AIF   ('&YINT' EQ '1').VERTZ                           GP13162\n         AIF   (T'&YINT NE 'N').VERTN                           GP13162\n         LA    R14,&YINT                                        GP13162\n         AGO   .VERTR                                           GP13162\n.VERTN   MACPARM R14,&YINT,OP=LH                                GP13162\n.VERTR   DR    R0,R14                                           GP13162\n         AIF   ('&YFUZZ' EQ '0').VERTP                          GP13162\n         CH    R0,=AL2(&YFUZZ)                                  GP13162\n         BNLR  R15                                              GP13162\n         AGO   .VERTZ                                           GP13162\n.VERTP   LTR   R0,R0         ANY REMAINDER                      GP13162\n         BNZR  R15           YES; NOT ON DISPLAY CHARACTER      GP13162\n.VERTZ   OI    &FLAGS,&FBIT  SHOW CURSOR GENERATED\n         AIF   ('&XINT' EQ '2').TMODD\n         AIF   ('&XINT' EQ '1').TMAXS\n         SR    R2,R2\n         D     R2,=A(&XINT)  TEST\n         AIF   ('&XFUZZ' EQ '0').HORFZ                          GP13162\n         CH    R2,=AL2(&XFUZZ)                                  GP13162\n         BNLR  R15                                              GP13162\n         AGO   .TMAXS                                           GP13162\n.HORFZ   LTR   R2,R2         REMAINDER ?\n         BNZR  R15             YES; INVALID OFFSET\n         AGO   .TMAXS        CHECK FOR MAXIMA\n.TMODD   EX    R3,EXTMODD    IS THE COLUMN OFFSET ODD ?\n         BNZR  R15           YES; NOT ON DISPLAY CHARACTER\n         SRA   R3,1          CONVERT INDEX TO OFFSET\n.TMAXS   CH    R3,=AL2(&XMAX)  VALID ?\n         BNLR  R15           NO; IGNORE\n         CH    R1,=AL2(&YMAX)  VALID ?\n         BNLR  R15           NO; IGNORE\n         AIF   ('&XINT' NE '2').MEND                            GP13162\n         B     *+8           PROCESS\nEXTMODD  TM    =X'01',*-*    IS REGISTER ODD ?\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XCURSOR": {"ttr": 14093, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x12)\\x7f\\x01\\x12)\\x8f!A\\x00=\\x005\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2012-10-23T00:00:00", "modifydate": "2012-10-24T21:41:00", "lines": 61, "newlines": 53, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      XCURSOR &A,&B,&BASE=1,&SAVE=YES                    NEW GP12297\n         GBLC  &MACPLAB\n         GBLB  &ZZXCUR2      GLOBAL USE FLAG FOR SCINIT\n         LCLA  &K                                               GP12298\n.*                                                                    *\n.*   XCURSOR IS USED IN CONJUNCTION WITH EXHASCRN ROUTINES, INVOKED   *\n.*   BY SCxxxx MACROS OTHER THAN SCLINE.                              *\n.*                                                                    *\n.*   XCURSOR n          SET IT TO A BINARY OFFSET                     *\n.*   XCURSOR m,n        PLACES THE CURSOR INTO ROW m (1-max) AND      *\n.*                      COLUMN n (1-max)                              *\n.*          BASE=1      ACCEPTS COORDINATES RELATIVE TO 1 (1-24,1-80) *\n.*          BASE=0      ACCEPTS COORDINATES RELATIVE TO 0 (0-42,0-132)*\n.*                                                                    *\n&MACPLAB SETC  '&NM'\n&ZZXCUR2 SETB  1             SHOW USER IS CONTROLLING THE CURSOR\n         AIF   ('&A' EQ 'RESET').DEFAULT\n         AIF   ('&A' EQ 'RETAIN').PROP\n         AIF   ('&A' EQ 'PUSH').SAVEIC\n         AIF   ('&A' EQ 'POP').RESTIC\n         AIF   ('&SAVE' NE 'YES').NOSAVE\n         MACPARM R14,R0,DB,OP=STM,MODE=THREE\n.NOSAVE  AIF   (N'&SYSLIST LT 1 OR N'&SYSLIST GT 2).BADPARM\n         AIF   (N'&SYSLIST EQ 2).CALC\n&K       SETA  K'&A                                             GP12298\n         AIF   (&K LT 3).F1                                     GP12298\n         AIF   ('&A'(1,1) NE '(').F1                            GP12298\n         AIF   ('&A'(&K,1) NE ')').F1                           GP12298\n         AIF   ('&A'(2,1) EQ '(' OR '&A'(&K-1,1) EQ ')').F1     GP12298\n         MACPARM R0,&A,OP=LH GET BINARY POSITION (0-max)\n         MACPARM R0,FDWCUR,OP=STH   AND SET\n         AGO   .COMOUT\n.F1      MACPARM FDWCUR,&A,OP=MVC                               GP12298\n         AGO   .COMOUT                                          GP12298\n.CALC    MACPARM R14,&A      GET ROW\n         AIF   ('&BASE' EQ '0').NOSUB1\n         MACPARM R14,0,OP=BCTR,OPR=BCTR\n.NOSUB1  MACPARM R15,&B      GET COLUMN\n         AIF   ('&BASE' EQ '0').NOSUB2\n         MACPARM R15,0,OP=BCTR,OPR=BCTR\n.NOSUB2  MH    R14,LSIZE     GET OFFSET TO CORRECT ROW\n         AR    R14,R15       GET TOTAL OFFSET\n         STH   R14,FDWCUR    STASH IT\n.*\n.COMOUT  AIF   ('&SAVE' NE 'YES').NOREST\n         MACPARM R14,R0,DB,OP=LM,MODE=THREE\n.NOREST  OI    FDWPROFG,FDWPFCUR  USE IT\n         MEXIT ,\n.BADPARM MNOTE 8,'XCURSOR TAKES ONE OR TWO ARGUMENTS'\n         MEXIT ,\n.SAVEIC  MACPARM FDWSVCUR,FDWICUD,OP=MVC  SAVE WHERE USER LEFT IT\n         MEXIT ,\n.RESTIC  MACPARM FDWCUR,FDWSVCUR,OP=MVC  RESTORE FROM SAVE\n         OI    FDWPROFG,FDWPFCUR  USE IT\n         MEXIT ,\n.PROP    MACPARM FDWCUR,FDWICUD,OP=MVC   SET WHERE USER LEFT IT\n         OI    FDWPROFG,FDWPFCUR  USE IT\n         MEXIT ,\n.DEFAULT MACPARM FDWCUR,=X'FFFF',OP=MVC  DEFAULTS TO 1ST INPUT FIELD\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XDEVOPT": {"ttr": 14337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x99\\x01o\\x01\\x11#\\x0f!8\\x011\\x01%\\x00\\x0c\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1999-01-16T00:00:00", "modifydate": "2011-08-18T21:38:00", "lines": 305, "newlines": 293, "modlines": 12, "user": "GERHARD"}, "text": "         MACRO ,\n&NM    XDEVOPT &SW1=,&SW2=,&SW3=,&SW4=,&ULV=,&EXIT=,&ID=,&LAYOUT=,     *\n               &LOOP=,&WAIT=,&INPUT=,&PRIV=,&DELAY=NO,&GROUP=DFL,      *\n               &COLIN='46464646232300004646464623230000',        88364 *\n               &COLOUT='11115555777700001111555577770000',       88364 *\n               &EXPART=0,&IMPART=L,&COLREP='1234567',            88364 *\n               &GAMES=NO,&DASKIP=,&TRAN=,&TRGE=,&PROMPT=        GP99106\n.*\n.*       MACRO ADDED 76060\n.*       PROVIDES SUPPORT FOR USER OPTIONS IN MODULES EXHPXXXX\n.*       SEE EXHAINIT, XDEVPFK AND EXHPDFLT FOR ADDITIONAL COMMENTS\n.*\n         COPY  GBLDEF\n         GBLB  &PFKONE,&PFKEND,&OPTONE,&OPTEND\n         GBLC  &OPTNAM(20),&OPTVAL(20),&OPTCOM(20)\n         GBLC  &OPTCIN,&OPTCOT,&OPTCRP,&OPTEXP,&OPTIMP           88364\n         GBLA  &OPTMAX\n         LCLC  &PRM\n         LCLA  &I,&J,&K\n         AIF   (&OPTONE).INIT\n&OPTONE  SETB  1\n&OPTNAM(01) SETC 'LAYOUT'\n&OPTVAL(01) SETC 'DFLT'\n&OPTCOM(01) SETC ''\n&OPTNAM(02) SETC 'LOOP TIME'\n&OPTVAL(02) SETC '3'\n&OPTCOM(02) SETC 'SECONDS'\n&OPTNAM(03) SETC 'WAIT TIME'\n&OPTVAL(03) SETC '30'\n&OPTCOM(03) SETC 'SECONDS'\n&OPTNAM(04) SETC 'PRIVILEGES'\n&OPTVAL(04) SETC '00000000'\n&OPTCOM(04) SETC ''\n&OPTNAM(05) SETC ''\n&OPTVAL(05) SETC '00000000'\n&OPTCOM(05) SETC ''\n&OPTNAM(06) SETC 'SCREEN REFRESH TIME'\n&OPTVAL(06) SETC '5'\n&OPTCOM(06) SETC 'SECONDS'\n&OPTNAM(07) SETC 'SW2'\n&OPTVAL(07) SETC '2'\n&OPTCOM(07) SETC 'SECOND CYCLE UPDATES'\n&OPTNAM(08) SETC 'SW3'\n&OPTVAL(08) SETC '12'\n&OPTCOM(08) SETC 'THIRD LEVEL UPDATES'\n&OPTNAM(09) SETC 'SW4'\n&OPTVAL(09) SETC '5'\n&OPTCOM(09) SETC 'FOURTH LEVEL UPDATES'\n&OPTNAM(10) SETC 'USER EXIT LEVEL'\n&OPTVAL(10) SETC '3'\n&OPTCOM(10) SETC '(SW NUMBER - 1)'\n&OPTNAM(11) SETC 'OPTION FLAGS'\n&OPTVAL(11) SETC '00000001'\n&OPTCOM(11) SETC ''\n&OPTVAL(12) SETC ''                                              79156\n&OPTCOM(12) SETC 'LPA RESIDENT GROUP'                            79156\n&OPTNAM(13) SETC 'DASKIP'                                        82361\n&OPTVAL(13) SETC '00000000'                                      82361\n&OPTCOM(13) SETC 'DISPLAY ACTIVE SKIP OPTIONS'                   82361\n&OPTNAM(14) SETC 'TRAN'                                          82361\n&OPTVAL(14) SETC ''                                              82361\n&OPTCOM(14) SETC 'LPA/LSQA CRT TRANSLATE TABLES'                 82361\n&OPTMAX  SETA  14                                                82361\n.INIT    AIF   (NOT &PFKONE AND NOT &PFKEND).POK\n         MNOTE 8,'OUT OF SEQUENCE'\n         MEXIT\n.POK     ANOP  ,\n.P1      AIF   ('&SW1' EQ '').P2\n      EXGCHECK &SW1,&OPTVAL(6),OPT=NUM\n         AIF   (NOT &OK).BOO1\n         AIF   (&DUPL).P2\n         AIF   (&SW1 LT 1 OR &SW1 GT 655).BOO1\n&OPTVAL(6) SETC '&SW1'\n         AGO   .P2\n.BOO1    MNOTE 8,'INVALID OPTION  SW1=''&SW1'''\n.P2      AIF   ('&SW2' EQ '').P3\n      EXGCHECK &SW2,&OPTVAL(7),OPT=NUM\n         AIF   (NOT &OK).BOO2\n         AIF   (&DUPL).P3\n         AIF   (&SW2 LT 1 OR &SW2 GT 255).BOO2\n&OPTVAL(7) SETC '&SW2'\n         AGO   .P3\n.BOO2    MNOTE 8,'INVALID OPTION  SW2=''&SW2'''\n.P3      AIF   ('&SW3' EQ '').P4\n      EXGCHECK &SW3,&OPTVAL(8),OPT=NUM\n         AIF   (NOT &OK).BOO3\n         AIF   (&DUPL).P4\n         AIF   (&SW3 LT 1 OR &SW3 GT 255).BOO3\n&OPTVAL(8) SETC '&SW3'\n         AGO   .P4\n.BOO3    MNOTE 8,'INVALID OPTION  SW3=''&SW3'''\n.P4      AIF   ('&SW4' EQ '').P5\n      EXGCHECK &SW4,&OPTVAL(9),OPT=NUM\n         AIF   (NOT &OK).BOO4\n         AIF   (&DUPL).P5\n         AIF   (&SW4 LT 1 OR &SW4 GT 255).BOO4\n&OPTVAL(9) SETC '&SW4'\n         AGO   .P5\n.BOO4    MNOTE 8,'INVALID OPTION  SW4=''&SW4'''\n.P5      AIF   ('&ULV' EQ '').P6\n      EXGCHECK &ULV,&OPTVAL(10),OPT=NUM\n         AIF   (NOT &OK).BOO5\n         AIF   (&DUPL).P6\n         AIF   (&ULV GT 255).BOO5\n&OPTVAL(10) SETC '&ULV'\n         AGO   .P6\n.BOO5    MNOTE 8,'INVALID OPTION  ULV=''&ULV'''\n.P6      AIF   ('&EXIT' EQ '').P7\n      EXGCHECK NONE,&EXIT,OPT=YES\n         AIF   (NOT &OK).BOO6\n         AIF   ('&EXIT' EQ 'NO').P6NO\n&OPTVAL(11) SETC '&OPTVAL(11)'(1,4).'1'.'&OPTVAL(11)'(6,3)\n         AGO   .P7\n.P6NO    ANOP  ,\n&OPTVAL(11) SETC '&OPTVAL(11)'(1,4).'0'.'&OPTVAL(11)'(6,3)\n         AGO   .P7\n.BOO6    MNOTE 8,'INVALID OPTION  EXIT=''&EXIT'''\n.P7      AIF   ('&ID' EQ '').P8\n      EXGCHECK NONE,&ID,OPT=YES\n         AIF   (NOT &OK).BOO7\n         AIF   ('&ID' EQ 'NO').P7NO\n&OPTVAL(11) SETC '&OPTVAL(11)'(1,7).'1'\n         AGO   .P8\n.P7NO    ANOP  ,\n&OPTVAL(11) SETC '&OPTVAL(11)'(1,7).'0'\n         AGO   .P8\n.BOO7    MNOTE 8,'INVALID OPTION  ID=''&ID'''\n.P8      AIF   ('&LAYOUT' EQ '').P9\n      EXGCHECK DFLT,&LAYOUT,OPT=ALPHA\n         AIF   (NOT &OK).BOO8\n         AIF   (&DUPL).P9\n         AIF   (K'&LAYOUT NE 4).BOO8\n&OPTVAL(1) SETC '&LAYOUT'\n         AGO   .P9\n.BOO8    MNOTE 8,'INVALID OPTION  LAYOUT=''&LAYOUT'''\n.P9      AIF   ('&LOOP' EQ '').P10\n      EXGCHECK &OPTVAL(2),&LOOP,OPT=NUM\n         AIF   (NOT &OK).BOO9\n         AIF   (&DUPL).P10\n         AIF   (&LOOP LT 1 OR &LOOP GT 655).BOO9\n&OPTVAL(2) SETC '&LOOP'\n         AGO   .P10\n.BOO9    MNOTE 8,'INVALID OPTION  LOOP=''&LOOP'''\n.P10     AIF   ('&WAIT' EQ '').P11\n      EXGCHECK &OPTVAL(3),&WAIT,OPT=NUM\n         AIF   (NOT &OK).BOO10\n         AIF   (&DUPL).P11\n         AIF   (&WAIT LT 10 OR &WAIT GT 655).BOO10\n&OPTVAL(3) SETC '&WAIT'\n         AGO   .P11\n.BOO10    MNOTE 8,'INVALID OPTION  WAIT=''&WAIT'''\n.P11     AIF   ('&INPUT' EQ '').P12\n      EXGCHECK NONE,&INPUT,(YES,NO,KEYS,PSWD),OPT=LIST\n         AIF   (NOT &OK).BOO11\n         AIF   (&DUPL).P12\n         AIF   ('&INPUT' EQ 'YES').P11YES\n         AIF   ('&INPUT' EQ 'KEYS').P11KEYS\n         AIF   ('&INPUT' EQ 'PSWD').P11PSWD\n&OPTVAL(11) SETC '&OPTVAL(11)'(1,5).'1'.'&OPTVAL(11)'(7,2)\n         AGO   .P12\n.P11YES  ANOP  ,\n&OPTVAL(11) SETC '&OPTVAL(11)'(1,5).'0'.'&OPTVAL(11)'(7,2)\n         AGO   .P12\n.P11KEYS ANOP  ,\n&OPTVAL(4) SETC '&OPTVAL(4)'(1,2).'1'.'&OPTVAL(4)'(4,5)\n         AGO   .P12\n.P11PSWD ANOP  ,\n&OPTVAL(4) SETC '&OPTVAL(4)'(1,1).'1'.'&OPTVAL(4)'(3,5).'1'\n         AGO   .P12\n.BOO11    MNOTE 8,'INVALID OPTION  INPUT=''&INPUT'''\n.P12     AIF   ('&PRIV' EQ '').P13\n&J       SETA  N'&PRIV\n&I       SETA  0\n.P12LOOP AIF   (&I GE &J).P13\n&I       SETA  &I+1\n&PRM     SETC  '&PRIV(&I)'\n         AIF   ('&PRM' EQ '').P12LOOP\n      EXGCHECK NONE,&PRM,(SYS,CON,CAN,UNL,FAIL),OPT=LIST\n         AIF   (NOT &OK).BOO12\n         AIF   (&DUPL).P12LOOP\n         AIF   ('&PRM' EQ 'SYS').P12SYS\n         AIF   ('&PRM' EQ 'CON').P12CON\n         AIF   ('&PRM' EQ 'CAN').P12CAN\n         AIF   ('&PRM' EQ 'UNL').P12UNL\n.*       DROP THROUGH TO 'FAIL'\n&OPTVAL(4) SETC '1'.'&OPTVAL(4)'(2,7)\n         AGO   .P12LOOP\n.P12SYS  ANOP  ,\n&OPTVAL(4) SETC '&OPTVAL(4)'(1,6).'1'.'&OPTVAL(4)'(8,1)\n         AGO   .P12LOOP\n.P12CON  ANOP  ,\n&OPTVAL(4) SETC '&OPTVAL(4)'(1,4).'1'.'&OPTVAL(4)'(6,3)\n         AGO   .P12LOOP\n.P12CAN  ANOP  ,\n&OPTVAL(4) SETC '&OPTVAL(4)'(1,5).'1'.'&OPTVAL(4)'(7,2)\n         AGO   .P12LOOP\n.P12UNL  ANOP  ,\n&OPTVAL(4) SETC '&OPTVAL(4)'(1,7).'1'\n         AGO   .P12LOOP\n.BOO12    MNOTE 8,'INVALID OPTION  PRIV=''&PRM'''\n         AGO   .P12LOOP\n.P13     AIF   ('&DELAY' EQ 'NO').P14                            77117\n      EXGCHECK NONE,&DELAY,(YES,DELAY,IGNORE,END),OPT=LIST      GP11230\n         AIF   (NOT &OK).BOO13                                   77117\n         AIF   (&INDX EQ 4).DELEND                              GP11230\n&OPTVAL(5) SETC '1'.'&OPTVAL(5)'(2,7)                            77117\n         AIF   (&INDX NE 3).P14                                 GP11230\n&OPTVAL(5) SETC '11'.'&OPTVAL(5)'(3,6)                           79156\n         AGO   .P14                                              77117\n.DELEND  ANOP  ,             END TASK ON DISCONNECT (TN3270)    GP11230\n&OPTVAL(5) SETC '&OPTVAL(5)'(1,5).'1'.'&OPTVAL(5)'(7,2)         GP11230\n         AGO   .P14                                             GP11230\n.BOO13   MNOTE 8,'INVALID OPTION  DELAY=''&DELAY'''              77117\n.P14  EXGCHECK NONE,&GROUP,OPT=ALPHA,NULL=YES                    79156\n         AIF   (NOT &OK).BOO14                                   79156\n&OPTVAL(12) SETC ''                                              79156\n         AIF   ('&GROUP' EQ '').P15                              79156\n         AIF   (K'&GROUP NE 3).BOO14                             79156\n&OPTVAL(12) SETC '&GROUP'                                        79156\n         AGO   .P15                                              79156\n.BOO14   MNOTE 4,'INVALID LPA GROUP=''&GROUP'''                  79156\n.P15  EXGCHECK NONE,&GAMES,(NO,YES,GAMES),OPT=LIST,NULL=YES      79194\n         AIF   (NOT &OK).BOO15                                   79194\n         AIF   ('&GAMES' NE 'NO').P15A                           89020\n&OPTVAL(5) SETC '&OPTVAL(5)'(1,4).'1'.'&OPTVAL(5)'(6,3)          79194\n         AGO   .P15A                                             89020\n.BOO15   MNOTE 8,'INVALID OPTION  GAMES=''&GAMES'''              79194\n.P15A EXGCHECK NONE,&PROMPT,(NO,YES,ID),OPT=LIST,NULL=YES        89020\n         AIF   (NOT &OK).BOO15A                                  89020\n         AIF   ('&PROMPT' NE 'ID' AND '&PROMPT' NE 'YES').P16    89020\n&OPTVAL(5) SETC '&OPTVAL(5)'(1,3).'1'.'&OPTVAL(5)'(5,4)          89020\n         AGO   .P16                                              89020\n.BOO15A  MNOTE 8,'INVALID OPTION  PROMPT=''&PROMPT'''            89020\n.P16     AIF   ('&DASKIP' EQ '').P17                             82361\n&J       SETA  N'&DASKIP                                         82361\n&I       SETA  0                                                 82361\n.P16LOOP AIF   (&I GE &J).P17                                    82361\n&I       SETA  &I+1                                              82361\n&PRM     SETC  '&DASKIP(&I)'                                     82361\n         AIF   ('&PRM' EQ '').P16LOOP                            82361\n EXGCHECK NONE,&PRM,(IDLE,DRAIN,DRAINED,STC,TSU,START,TSO,TS,PRM,PERM),*\n               OPT=LIST                                         GP99016\n         AIF   (NOT &OK).BOO16                                   82361\n         AIF   (&DUPL).P16LOOP                                   82361\n         AIF   ('&PRM' EQ 'IDLE').P16IDLE                        82361\n         AIF   ('&PRM' EQ 'DRAIN' OR '&PRM' EQ 'DRAINED').P16DRAN\n         AIF   ('&PRM' EQ 'STC' OR '&PRM' EQ 'START').P16STC     82361\n         AIF   ('&PRM' EQ 'TSO' OR '&PRM' EQ 'TS').P16TSU       GP99016\n.*       DROP THROUGH TO 'PRM'                                  GP99016\n&OPTVAL(13) SETC '&OPTVAL(13)'(1,4).'1'.'&OPTVAL(13)'(6,3)      GP99016\n         AGO   .P16LOOP                                         GP99016\n.P16TSU  ANOP  ,                                                GP99016\n&OPTVAL(13) SETC '&OPTVAL(13)'(1,3).'1'.'&OPTVAL(13)'(5,4)       82361\n         AGO   .P16LOOP                                          82361\n.P16STC  ANOP  ,                                                 82361\n&OPTVAL(13) SETC '&OPTVAL(13)'(1,2).'1'.'&OPTVAL(13)'(4,5)       82361\n         AGO   .P16LOOP                                          82361\n.P16IDLE ANOP  ,                                                 82361\n&OPTVAL(13) SETC '&OPTVAL(13)'(1,1).'1'.'&OPTVAL(13)'(3,6)       82361\n         AGO   .P16LOOP                                          82361\n.P16DRAN ANOP  ,                                                 82361\n&OPTVAL(13) SETC '1'.'&OPTVAL(13)'(2,7)                          82361\n         AGO   .P16LOOP                                          82361\n.BOO16    MNOTE 8,'INVALID OPTION  DASKIP=''&PRM'''              82361\n         AGO   .P16LOOP                                          82361\n.P17  EXGCHECK NONE,&TRAN,OPT=ALPHA,NULL=YES                     82361\n         AIF   (NOT &OK).BOO17                                   82361\n&OPTVAL(14) SETC ''                                              82361\n         AIF   ('&TRAN' EQ '').P17A                             GP99106\n         AIF   (K'&TRAN GT 4).BOO17                              82361\n&OPTVAL(14) SETC '&TRAN'                                         82361\n         AGO   .P17A                                            GP99106\n.BOO17   MNOTE 4,'INVALID LPA/LSQA TRAN=''&TRAN'''               82361\n.P17A EXGCHECK NONE,&TRGE,OPT=ALPHA,NULL=YES                    GP99106\n         AIF   (NOT &OK).BOO17A                                 GP99106\n&OPTVAL(15) SETC '&OPTVAL(14)'                                  GP99106\n         AIF   ('&TRGE' EQ '').P18                              GP99106\n         AIF   (K'&TRGE GT 4).BOO17A                            GP99106\n&OPTVAL(15) SETC '&TRGE'                                        GP99106\n         AGO   .P18                                             GP99106\n.BOO17A  MNOTE 4,'INVALID LPA/LSQA TRGE=''&TRAN'''              GP99106\n.P18     AIF   (K'&COLIN EQ 34).P19                              88364\n         MNOTE 8,'COLIN STRING INVALID'                          88364\n         AGO   .MEND                                             88364\n.P19     AIF   (K'&COLOUT EQ 34).P20                             88364\n         MNOTE 8,'COLOUT STRING INVALID'                         88364\n         AGO   .MEND                                             88364\n.P20     AIF   (K'&COLREP EQ 9).P21                              88364\n         MNOTE 8,'COLREP STRING INVALID'                         88364\n         AGO   .MEND                                             88364\n.P21     EXGCHECK NONE,&EXPART,(0,1,2,3,4,5),OPT=LIST            88364\n         AIF   (&OK).P22                                         88364\n         MNOTE 8,'INVALID EXPART'                                88364\n         AGO   .MEND                                             88364\n.P22     EXGCHECK NONE,&IMPART,(S,L,C,D),OPT=LIST                88364\n         AIF   (&OK).NEWOK                                       88364\n         MNOTE 8,'INVALID IMPART'                                88364\n         AGO   .MEND                                             88364\n.NEWOK   ANOP  ,                                                 88364\n&OPTCIN  SETC  '&COLIN'                                          88364\n&OPTCOT  SETC  '&COLOUT'                                         88364\n&OPTCRP  SETC  '&COLREP'                                         88364\n&OPTEXP  SETC  '&EXPART'                                         88364\n&OPTIMP  SETC  '&IMPART'                                         88364\n.MEND    MEND  ,                                                 88364\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XDEVPFK": {"ttr": 14343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x10o\\x01\\x10!?\\x15\\x19\\x01\\x9d\\x01\\x9d\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-04-16T00:00:00", "modifydate": "2010-08-01T15:19:00", "lines": 413, "newlines": 413, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM    XDEVPFK &QUY,&TEXT,&COPIES=1                              93057\n.*\n.*       ADDED 76060 FOR EXHPCXXX AND EXHPDFLT MODULES\n.*             SETS 3270 PFK OPTIONS (OVERRIDES MAPSQSP SETTINGS)\n.*             ALSO SEE EXHAINIT MODIFICATIONS\n.*\n         GBLB  &PFKONE,&PFKEND,&OPTONE,&OPTEND,&OPTEND2          88364\n         GBLC  &KEY(40),&HEX(40),&KVL(40),&SECT                  88272\n         GBLC  &OPTNAM(20),&OPTVAL(20),&OPTCOM(20)\n         GBLC  &OPTCIN,&OPTCOT,&OPTCRP,&OPTEXP,&OPTIMP           88364\n         GBLA  &IND(40),&DEF(40),&OPTMAX,&PFKMAX                 88272\n         LCLA  &I,&J,&K,&L,&SI,&SM                              77110\n         LCLC  &N,&PRIT(16),&OPTT(16)\n&N       SETC  '&NM'\n&SM      SETA  N'&SYSLIST                                       77110\n&SI      SETA  1                                                77110\n         AGO   .TESTL                                           77110\n.NEXTL   ANOP  ,                                                77110\n&SI      SETA  &SI+2                                            77110\n.TESTL   AIF   (&SI LE &SM).DOL                                 77110\n         MEXIT ,                                                77110\n.DOL     AIF   (NOT &PFKEND).OK                                 77110\n         MNOTE 8,'OUT OF SEQUENCE'\n         MEXIT\n.OK  AIF  ('&SYSLIST(&SI)' EQ '*END' OR '&SYSLIST(&SI)' EQ 'END').LAST\n         AIF ('&SYSLIST(&SI)' EQ '' OR '&SYSLIST(&SI+1)' EQ '').BOOBOO\n         AIF   (&PFKONE).INIT\n.DEF     AIF   (&OPTONE).OPTOK\n         MNOTE 0,' ''DOPT'' MACRO NOT USED - OPTIONS DEFAULTED'\n&N       DOPT\n&N       SETC  ''\n.OPTOK   AIF   (&OPTEND).OPTDONE\n&OPTEND  SETB  1\n&N       DC    C'OPTS' .     MODULE I.D.\n&N       SETC  ''\n         DC    CL4'&OPTVAL(1) ' .  LAYOUT\n         DC    AL2(&OPTVAL(2)*100) .   LOOP TIME\n         DC    AL2(&OPTVAL(3)*100) .   WAIT TIME\n         DC    B'&OPTVAL(4)&OPTVAL(5)' .  GLOBAL PRIVILEGES\n         DC    AL2(&OPTVAL(6)*100) .   DISPLAY UPDATE TIME\n         DC    AL2(&OPTVAL(7),&OPTVAL(8),&OPTVAL(9)) .  CYCLE #\n         DC    AL1(&OPTVAL(10)) .      USER EXIT LEVEL\n         DC    B'&OPTVAL(11)' .         OPTION FLAGS\n         DC    CL3'&OPTVAL(12) '  LPA RESIDENT DISPLAY GROUP     79156\n         DC    B'&OPTVAL(13)'  DA SKIP OPTIONS                   82361\n         DC    CL4'&OPTVAL(14) '  CRT TRANSLATE TABLE SUFFIX     82361\n.OPTDONE AIF   ('&OPTCIN' EQ '').OLDSECT  OLD FORMAT             88364\n         AIF   (&OPTEND2).COMSECT                                88364\n&OPTEND2 SETB  1                                                 88364\n&N       DC    C'PFK2'       SET FOR NEW FORMAT                  88364\n&N       SETC  'KEYS'        SET LABEL FOR FIRST KEY DEFINITION  88364\n         DC    AL2(KEYS-&SYSECT,0)  DISPLACEMENT TO KEYS / FILLER\n         DC    CL32&OPTCIN      1/3   MATCHES MAPWORK COLORMAP/SET\n         DC    CL32&OPTCOT      2/3                              88364\n         DC    X'00',CL7&OPTCRP 3/3                              88364\n         DC    AL1(&OPTEXP),C'&OPTIMP'  SIZE(PARTITION) OPTIONS  88364\n         DC    AL2(0)        FILLER                              88364\n         DC    8A(0)         RESERVED                            88364\n         DC    CL4'&OPTVAL(15) '  CRT GE TRANSLATE TABLE SUFFIX GP99106\n         AGO   .COMSECT                                          88364\n.OLDSECT ANOP  ,                                                 88364\n&N       DC    C'PFKS' .     FUNCTION KEY DEFINITIONS\n&N       SETC  ''\n.COMSECT AIF   (K'&SYSECT EQ 8).SECTOK                           88364\n.BADSECT MNOTE 4,'CONTROL SECTION NAME INVALID'\n         AGO   .CONT\n.SECTOK  AIF   ('&SYSECT'(1,4) NE 'EXHP').BADSECT\n&SECT    SETC  '&SYSECT'(5,4)\n         AIF   ('&SECT'(1,1) NE 'C').CONT\n&SECT    SETC  'CRT '.'&SECT'(2,3)\n.CONT    ANOP  ,\n&PFKONE  SETB  1\n&PFKMAX  SETA  40            NUMBER OF PFK ARRAY ENTRIES         88272\n&HEX(11) SETC  '0B'\n&HEX(12) SETC  '0C'\n&HEX(13) SETC  '0D'\n&HEX(14) SETC  '0E'\n&HEX(16) SETC  '10'\n&HEX(17) SETC  '11'\n&HEX(18) SETC  '12'\n&HEX(19) SETC  '13'\n&HEX(20) SETC  '14'\n&HEX(21) SETC  '15'\n&HEX(22) SETC  '16'\n&HEX(23) SETC  '17'\n&HEX(24) SETC  '18'\n&HEX(25) SETC  '19'\n&HEX(26) SETC  '1A'\n&HEX(27) SETC  '1B'\n&HEX(28) SETC  '1C'\n&HEX(29) SETC '21'                                               88272\n&HEX(30) SETC '22'                                               88272\n&HEX(31) SETC '23'                                               88272\n&HEX(32) SETC '24'                                               88272\n&HEX(33) SETC '25'                                               88272\n&HEX(34) SETC '26'                                               88272\n&HEX(35) SETC '27'                                               88272\n&HEX(36) SETC '28'                                               88272\n&HEX(37) SETC '29'                                               88272\n&HEX(38) SETC '2A'                                               88272\n&HEX(39) SETC '2B'                                               88272\n&HEX(40) SETC '2C'                                               88272\n&IND(01) SETA  14            ALIAS FOR PA2\n&IND(02) SETA  02\n&IND(03) SETA  03\n&IND(04) SETA  04\n&IND(05) SETA  05\n&IND(06) SETA  06\n&IND(07) SETA  07\n&IND(08) SETA  08\n&IND(09) SETA  09\n&IND(10) SETA  10\n&IND(11) SETA  11\n&IND(12) SETA  12\n&IND(13) SETA  13\n&IND(14) SETA  14\n&IND(15) SETA  15\n&IND(16) SETA  16\n&IND(17) SETA  17\n&IND(18) SETA  18\n&IND(19) SETA  19\n&IND(20) SETA  20\n&IND(21) SETA  21\n&IND(22) SETA  22\n&IND(23) SETA  23\n&IND(24) SETA  24\n&IND(25) SETA  25\n&IND(26) SETA  26\n&IND(27) SETA  27\n&IND(28) SETA  28\n&IND(29) SETA  29\n&IND(30) SETA  30\n&IND(31) SETA  31\n&IND(32) SETA  32\n&IND(33) SETA  33                                                88272\n&IND(34) SETA  34                                                88272\n&IND(35) SETA  35                                                88272\n&IND(36) SETA  36                                                88272\n&IND(37) SETA  37                                                88272\n&IND(38) SETA  38                                                88272\n&IND(39) SETA  39                                                88272\n&IND(40) SETA  40                                                88272\n&KVL(11) SETC  '\u00acPA3 '\n&KVL(12) SETC  '\u00acPA1 '\n&KVL(13) SETC  'ASC  '              WAS \u00acCLR                     93057\n&KVL(14) SETC  '\u00acCAN '\n&KVL(16) SETC  'ASC *'                                           93057\n&KVL(17) SETC  '$F   '\n&KVL(18) SETC  '$I   '\n&KVL(19) SETC  '$JOB '\n&KVL(20) SETC  '$N   '\n&KVL(21) SETC  '$U   '\n&KVL(22) SETC  '$MSG '\n&KVL(23) SETC  'CON -'                                           87176\n&KVL(24) SETC  'STOR '\n&KVL(25) SETC  'ENQ  '\n&KVL(26) SETC  'PIO  '\n&KVL(27) SETC  'U M  '\n&KVL(28) SETC  'U D,T'\n&KVL(29) SETC  '$J   '                                           88272\n&KVL(30) SETC  'ASC  '                                           88272\n&KVL(31) SETC  '$DSN '                                           88272\n&KVL(32) SETC  '$LA  '                                           88272\n&KVL(33) SETC  'NET  '                                           88272\n&KVL(34) SETC  '$LOG '                                           88272\n&KVL(35) SETC  'DCO  '                                           88272\n&KVL(36) SETC  'PFK  '                                           88272\n&KVL(37) SETC  'RSV  '                                           93057\n&KVL(38) SETC  'PAT  '                                           88272\n&KVL(39) SETC  'SMC  '                                           88272\n&KVL(40) SETC  'U CRT'                                           88272\n&KEY(01) SETC  'CANCEL'      ALIAS FOR PA2\n&KEY(11) SETC  'PA3'\n&KEY(12) SETC  'PA1'\n&KEY(13) SETC  'CLEAR'\n&KEY(14) SETC  'PA2'\n&KEY(16) SETC  'TEST'\n&KEY(17) SETC  'PF1'\n&KEY(18) SETC  'PF2'\n&KEY(19) SETC  'PF3'\n&KEY(20) SETC  'PF4'\n&KEY(21) SETC  'PF5'\n&KEY(22) SETC  'PF6'\n&KEY(23) SETC  'PF7'\n&KEY(24) SETC  'PF8'\n&KEY(25) SETC  'PF9'\n&KEY(26) SETC  'PF10'\n&KEY(27) SETC  'PF11'\n&KEY(28) SETC  'PF12'\n&KEY(29) SETC  'PF13'                                            88272\n&KEY(30) SETC  'PF14'                                            88272\n&KEY(31) SETC  'PF15'                                            88272\n&KEY(32) SETC  'PF16'                                            88272\n&KEY(33) SETC  'PF17'                                            88272\n&KEY(34) SETC  'PF18'                                            88272\n&KEY(35) SETC  'PF19'                                            88272\n&KEY(36) SETC  'PF20'                                            88272\n&KEY(37) SETC  'PF21'                                            88272\n&KEY(38) SETC  'PF22'                                            88272\n&KEY(39) SETC  'PF23'                                            88272\n&KEY(40) SETC  'PF24'                                            88272\n&DEF(11) SETA  11\n&DEF(12) SETA  12\n&DEF(13) SETA  13\n&DEF(14) SETA  14\n&DEF(16) SETA  16\n&DEF(17) SETA  17\n&DEF(18) SETA  18\n&DEF(19) SETA  19\n&DEF(20) SETA  20\n&DEF(21) SETA  21\n&DEF(22) SETA  22\n&DEF(23) SETA  23\n&DEF(24) SETA  24\n&DEF(25) SETA  25\n&DEF(26) SETA  26\n&DEF(27) SETA  27\n&DEF(28) SETA  28\n&DEF(29) SETA  29                                                88272\n&DEF(30) SETA  30                                                88272\n&DEF(31) SETA  31                                                88272\n&DEF(32) SETA  32                                                88272\n&DEF(33) SETA  33                                                88272\n&DEF(34) SETA  34                                                88272\n&DEF(35) SETA  35                                                88272\n&DEF(36) SETA  36                                                88272\n&DEF(37) SETA  37                                                88272\n&DEF(38) SETA  38                                                88272\n&DEF(39) SETA  39                                                88272\n&DEF(40) SETA  40                                                88272\n      AIF ('&SYSLIST(&SI)' EQ '*END' OR '&SYSLIST(&SI)' EQ 'END').LAST\n.INIT    ANOP  ,                                                77110\n&I       SETA  0                                                77110\n.INITL   AIF   (&I GT 31).BOOBOO                                77110\n&I       SETA  &I+1\n         AIF   ('&KEY(&I)' NE '&SYSLIST(&SI)').INITL            77110\n&I       SETA  &IND(&I)\n&J       SETA  K'&SYSLIST(&SI+1)                                77110\n         AIF   ('&SYSLIST(&SI+1)'(1,1) EQ '''').QUOTE           77110\n         AIF   (&J GT 5).BOOBOO\n&L       SETA  &J\n&N       DC    X'&HEX(&I)',CL5'&SYSLIST(&SI+1) '                77110\n&KVL(&I) SETC  '&SYSLIST(&SI+1)'                                77110\n         AGO   .SAVE\n.BOOBOO  AIF   ('&SYSLIST(&SI+1)' EQ '').BOOB                   77110\n         AIF   ('&SYSLIST(&SI+1)'(1,1) NE '''').BOOB            77110\n   MNOTE 8,'INVALID :  KEY=''&SYSLIST(&SI)'', VALUE='&SYSLIST(&SI+1)''\n         MEXIT\n.BOOB    ANOP  ,                                                77110\n MNOTE 8,'INVALID :  KEY=''&SYSLIST(&SI)'', VALUE=''&SYSLIST(&SI+1)'''\n         MEXIT\n.QUOTE   ANOP  ,\n&L       SETA  &J-2\n&J       SETA  &L\n&K       SETA  2\n.LOOP    AIF   (&K GE &J).EXPQ\n         AIF   ('&SYSLIST(&SI+1)'(&K,2) EQ '&&').DOUB           77110\n         AIF   ('&SYSLIST(&SI+1)'(&K,2) EQ '''''').DOUB         77110\n&K       SETA  &K+1\n         AGO   .LOOP\n.DOUB    ANOP  ,\n&K       SETA  &K+2\n&L       SETA  &L-1\n         AGO   .LOOP\n.EXPQ    AIF   (&L GT 5).BOOBOO\n&KVL(&I) SETC  '&SYSLIST(&SI+1)'(2,&J)                          77110\n&N       DC    X'&HEX(&I)',CL5&SYSLIST(&SI+1)                   77110\n.SAVE    ANOP  ,\n&N       SETC  ''\n&DEF(&I) SETA  0\n         AIF   (&L EQ &J AND &L EQ 5).NEXTL                     77110\n.NOT5    AIF   (&L GE 1).TACK\n&KVL(&I) SETC  '     '\n         AGO   .NEXTL                                           77110\n.TACK    ANOP  ,\n&KVL(&I) SETC  '&KVL(&I)'.'        '(1,5-&L)\n         AGO   .NEXTL                                           77110\n.LAST    AIF   (&SI NE &SM).BOOBOO     FAIL END NOT AT END      77110\n         AIF   (&PFKONE).LEAST                                  77110\n         MNOTE 0,'NO PFK DEFINITIONS SUPPLIED - DEFAULTS WILL BE USED'\n         AGO   .DEF\n.LEAST   ANOP  ,\n&I       SETA  0\n.DEFEX   AIF   (&I GE &PFKMAX).DOEND                             88272\n&I       SETA  &I+1\n&J       SETA  &DEF(&I)\n         AIF   (&J EQ 0).NODEF\n&N       DC    X'&HEX(&J)',CL5'&KVL(&J) ' .  DEFAULT\n&N       SETC  ''                                               GP99106\n.NODEF   AIF   ('&KVL(&I)' EQ '').DEFEX\n         AIF   ('&KVL(&I)'(1,1) NE '\u00ac').DEFEX\n         AIF   ('&KVL(&I)'(2,3) EQ 'CAN').REPCAN\n         AIF   ('&KVL(&I)'(2,3) EQ 'CLR').REPCLR\n         AIF   ('&KVL(&I)'(2,3) EQ 'PA1').REPPA1\n         AIF   ('&KVL(&I)'(2,3) NE 'PA3').DEFEX\n&KVL(&I) SETC  '\u00acPA3 '       NOT USED\n         AGO   .DEFEX\n.REPCAN  ANOP  ,\n&KVL(&I) SETC  'LOCK '\n         AGO   .DEFEX\n.REPCLR  ANOP  ,\n&KVL(&I) SETC  'CLEAR'\n         AGO   .DEFEX\n.REPPA1  ANOP  ,\n&KVL(&I) SETC  'HOLD '\n         AGO   .DEFEX\n.DOEND   ANOP  ,\n&N       DC    X'FF' .       END OF LIST\n&PFKEND  SETB  1\n&K       SETA  &OPTVAL(6)*&OPTVAL(7)\n&OPTCOM(7) SETC 'SECOND LEVEL UPDATES EVERY '.'&K'.' SECONDS'\n&K       SETA  &K*&OPTVAL(8)\n&OPTCOM(8) SETC 'THIRD LEVEL UPDATES EVERY '.'&K'.' SECONDS'\n&K       SETA  &K*&OPTVAL(9)\n&OPTCOM(9) SETC 'FOURTH LEVEL UPDATES EVERY '.'&K'.' SECONDS'\n&PRIT(9) SETC  'FAIL'\n&PRIT(11) SETC 'KEYS-ONLY'\n&PRIT(12) SETC 'PSWD-ONLY'\n&PRIT(13) SETC 'CON'\n&PRIT(14) SETC 'CAN'\n&PRIT(15) SETC 'SYS'\n&PRIT(16) SETC 'UNL'\n&OPTT(5)  SETC 'NOEXIT'\n&OPTT(13) SETC 'EXIT'\n&OPTT(14) SETC 'NO-INPUT'\n&OPTT(16) SETC 'ID-LINE'\n&I       SETA  0\n.PRILOOP AIF   (&I GE 8).PRILEND\n&I       SETA  &I+1\n&N       SETC  '&OPTVAL(4)'(&I,1)\n&J       SETA  &N\n&OPTCOM(4) SETC '&OPTCOM(4)'.' '.'&PRIT(8*&J+&I)'\n         AGO   .PRILOOP\n.PRILEND ANOP  ,\n&I       SETA  0\n.OPTTLOP AIF   (&I GE 8).OPTTLEN\n&I       SETA  &I+1\n&N       SETC  '&OPTVAL(11)'(&I,1)\n&J       SETA  &N\n&OPTCOM(11) SETC '&OPTCOM(11)'.' '.'&OPTT(8*&J+&I)'\n         AGO   .OPTTLOP\n.OPTTLEN ANOP  ,\n&I       SETA  &OPTVAL(10)+1\n&OPTCOM(10) SETC 'INVOKED ON SW&I CYCLE'\n&PRIT(9) SETC  'DELAY'                                         77117\n&PRIT(10) SETC 'IGNORE'                                          79194\n&PRIT(13) SETC 'NOGAMES'                                         79194\n&I       SETA  0                                               77117\n.PR2LOOP AIF   (&I GE 8).PR2LEND                               77117\n&I       SETA  &I+1                                            77117\n&N       SETC  '&OPTVAL(5)'(&I,1)                              77117\n&J       SETA  &N                                              77117\n&OPTCOM(5) SETC '&OPTCOM(5)'.' '.'&PRIT(8*&J+&I)'              77117\n         AGO   .PR2LOOP                                        77117\n.PR2LEND ANOP  ,                                               77117\n&OPTNAM(5) SETC '  OPT FLAGS 2'                                77117\n&OPTNAM(12) SETC 'GROUP'                                         79156\n         AIF   ('&OPTVAL(12)' NE '').HAVGRUP                     79156\n&OPTVAL(12) SETC  'NO'                                           79156\n.HAVGRUP AIF   ('&OPTVAL(14)' NE '').NTRTAB                      82361\n&OPTVAL(14) SETC 'NO'                                            82361\n.NTRTAB  AIF   ('&OPTVAL(13)' EQ '00000000').NDASKP              82361\n.NDASKP  ANOP  ,                                                 82361\n&L       SETA  0\n.PRTLOOP EJECT\n&I       SETA  0\n&J       SETA  &OPTMAX\n         MNOTE *,' '\n         MNOTE *,' '\n         MNOTE *,'        MODIFY / SET  OPTIONS :'\n         MNOTE *,' '\n         MNOTE *,' '\n.OPTLOOP AIF   (&I GE &J).ENDOPT\n&I       SETA  &I+1\n         MNOTE *,'         &OPTNAM(&I) = &OPTVAL(&I) &OPTCOM(&I)'\n         AGO   .OPTLOOP\n.ENDOPT  ANOP  ,\n         MNOTE *,' '\n         MNOTE *,' '\n MNOTE *,'                                                      '\n MNOTE *,'                                                      '\n MNOTE *,'            FUNCTION KEY DEFINITIONS FOR &SECT        '\n MNOTE *,'                                                      '\n MNOTE *,'                                                    '\n MNOTE *,'                                                    '\n MNOTE *,'                        **************************  '\n MNOTE *,'                        *       *       *        *  '\n MNOTE *,'                        * &KVL(17) * &KVL(18) *  &KVL(19) *'\n MNOTE *,'                        *       *       *        *  '\n MNOTE *,'                        **************************  '\n MNOTE *,'                        *       *       *        *  '\n MNOTE *,'                        * &KVL(20) * &KVL(21) *  &KVL(22) *'\n MNOTE *,'                        *       *       *        *  '\n MNOTE *,'                        **************************  '\n MNOTE *,'                        *       *       *        *  '\n MNOTE *,'                        * &KVL(23) * &KVL(24) *  &KVL(25) *'\n MNOTE *,'                        *       *       *        *  '\n MNOTE *,'     *********************************************  '\n MNOTE *,'     *        *         *       *       *        *  '\n MNOTE *,'     *  &KVL(12) *  &KVL(14)  * &KVL(26) * &KVL(27) *  &KVL(2*\n               8) *'\n MNOTE *,'     *        *         *       *       *        *  '\n MNOTE *,'     *********************************************  '\n         MNOTE *,' '\n         MNOTE *,' '\n         MNOTE *,' '\n         MNOTE *,' '\n         MNOTE *,' '\n         MNOTE *,' '\n&L       SETA  &L+1\n         AIF   (&L LT &COPIES).PRTLOOP                           93057\n         MEND ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFORMAT": {"ttr": 14596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x13\\x00\\x8f\\x01\\x13\\x00\\x8f\\x00G\\x00\\x97\\x00\\x97\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2013-01-08T00:00:00", "modifydate": "2013-01-08T00:47:00", "lines": 151, "newlines": 151, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n         XFORMAT &DB=DB                                         GP13008\n         GBLB  &INLINE(50)\n         COPY  OPTIONS\n         LCLC  &WK           DOUBLE-WORD WORK SPACE              88025\n         LCLB  &INMOVE,&INWORK                                  GP09347\n&WK      SETC  '&DB'         USE USER'S                          88025\n         AIF   ('&WK' NE '').HAVEWK    OK                        88025\n&WK      SETC  'DCONDB'      GENERATE LOCALLY                    88025\n.*       (1)   EXPANSION SWITCH\n.*       (5)   INLINE HEX EXPANSION\n.*       (6)   CVH / CNVD CALL\n.*       (7)   CNVR / CNVX CALL\n.*       (8)   CVI - FORMAT INTEGER WITH COMMAS AND SCALING\n.*       (9)   IN-LINE TRANSLATE TABLE (3278 CHARS)\n.*       (10)  CALL TO RANDOM\n.*       (11)  INLINE DECIMAL EXPANSION\n.*       (12)  INTEGER + 1 DECIMAL                              GP13008\n.*       (13)  INTEGER + 2 DECIMALS                             GP13008\n.*       (14)  INTEGER + 3 DECIMALS                             GP13008\n.*\n.HAVEWK  AIF   (NOT &INLINE(1)).OKONCE                          GP13008\n         MNOTE 4,'MULTIPLE ''INSECT/XFORMAT'' CALLS INVALID'    GP13008\n         MEXIT ,\n.OKONCE  ANOP  ,                                                GP13008\n&INLINE(1) SETB 1            SHOW EXPANSION REQUESTED           GP13008\n         AIF   (&INLINE(2) AND &INLINE(3)).OK1\n         AIF   (NOT &INLINE(2) AND NOT &INLINE(3)).OK3\n         MNOTE 4,'INCONSISTENT USE OF ''SPxxxx'' CALLS'         GP13008\n.OK1     MNOTE 4,'REPLACE SPxxxx CALLS BY XLINE'                GP13008\n.OK3     ANOP  ,                                                GP09347\n&INLINE(5) SETB (&INLINE(5) OR &INLINE(11))                     GP09347\n&INWORK  SETB  (&INLINE(5))                                     GP10037\n         AIF   (NOT &INLINE(12)).OK6P1                          GP13008\n         SPACE 1\n*        CONVERT BINARY TO EBCDIC  NNN.N                        GP13008\n*        (0) - VALUE    (1) O/P ADDRESS     (15) - O/P LENGTH   GP13008\n*                                                               GP13008\nDCONVONE STM   R14,R3,12(R13)                                   GP13008\n         MVC   DCONWORK-1(17),DCONPONE                          GP13008\n         B     DCONPCOM                                         GP13008\nDCONPONE DC    C' ',12X'20',X'21204B20' .   EDIT MASK           GP13008\n.OK6P1   AIF   (NOT &INLINE(13)).OK6P2                          GP13008\n         SPACE 1\n*        CONVERT BINARY TO EBCDIC  NNN.NN                       GP13008\n*        (0) - VALUE    (1) O/P ADDRESS     (15) - O/P LENGTH   GP13008\n*                                                               GP13008\nDCONVTWO STM   R14,R3,12(R13)                                   GP13008\n         MVC   DCONWORK-1(17),DCONPTWO                          GP13008\n         B     DCONPCOM                                         GP13008\nDCONPTWO DC    C' ',11X'20',X'21204B2020' .   EDIT MASK         GP13008\n.OK6P2   AIF   (NOT &INLINE(14)).OK6COM                         GP13008\n         SPACE 1\n*        CONVERT BINARY TO EBCDIC  NNN.NNN                      GP13008\n*        (0) - VALUE    (1) O/P ADDRESS     (15) - O/P LENGTH   GP13008\n*                                                               GP13008\nDCONVTRE STM   R14,R3,12(R13)                                   GP13008\n         MVC   DCONWORK-1(17),DCONPTRE                          GP13008\n         B     DCONPCOM                                         GP13008\nDCONPTRE DC    C' ',10X'20',X'21204B202020' . EDIT MASK         GP13008\n.OK6COM  AIF (NOT &INLINE(12) AND NOT &INLINE(13) AND NOT &INLINE(14)).*\n               OK6P                                             GP13008\nDCONPCOM CVD   R0,&WK        MAKE VALUE PACKED                  GP13008\n         ED    DCONWORK-1(17),&WK                               GP13008\n&INWORK  SETB  1                                                GP13008\n&INMOVE  SETB  1                                                GP13008\n         AIF   (NOT &INLINE(6)).OK6P                            GP13008\n         B     DCONCOM       GO TO OUTPUT MOVE\n.OK6P    AIF   (NOT &INLINE(6)).OK6\n         SPACE 2\n*        CONVERT BINARY TO EBCDIC\n*        (0) - VALUE    (1) O/P ADDRESS     (15) - O/P LENGTH\n*\nDCONVERT STM   R14,R3,12(R13)\n         MVC   DCONWORK(16),DCONPAT\nDCONVCOM CVD   R0,&WK        MAKE VALUE PACKED\n         ED    DCONWORK,&WK\n&INWORK  SETB  1                                                GP09347\n&INMOVE  SETB  1                                                GP09347\n         AIF   (NOT &INLINE(7) AND NOT &INLINE(8)).DOCON        GP09347\n         B     DCONCOM       GO TO OUTPUT MOVE\n.OK6     AIF   (NOT &INLINE(8)).OK8\n         SPACE 2\n*        CONVERT BINARY TO EBCDIC                               GP09347\n*        (0) - VALUE    (1) O/P ADDRESS     (15) - O/P LENGTH   GP09347\n*                                                               GP09347\nICONVERT STM   R14,R3,12(R13)                                   GP09347\n&INWORK  SETB  1                                                GP09347\n&INMOVE  SETB  1                                                GP09347\n         CVD   R0,&WK        MAKE VALUE PACKED                  GP09347\n         MVC   DCONWORK-1(17),DCOMPAT                           GP09347\n         ED    DCONWORK-1(17),&WK                               GP09347\n         CLI   DCONWORK+8,C' '    LESS THAN 1M?                 GP09347\n         BE    DCONCOM       YES; MOVE IT                       GP09347\n         LA    R2,DCONWORK+13                                   GP09347\n         MVI   DCONWORK+12,C'K'                                 GP09347\n         SR    R2,R15                                           GP09347\n         LR    R3,R15                                           GP09347\n         BCTR  R3,0                                             GP09347\n         EX    R3,DCONMOVE                                      GP09347\n         LM    R14,R3,12(R13)                                   GP09347\n         BR    R14                                              GP09347\nDCOMPAT  DC    X'402020202020202020202020206B202120'            GP09347\n.OK8     AIF   (NOT &INLINE(7)).DOCON                           GP09347\n         SPACE 2\n*        CONVERT HEX TO EBCDIC\n*        (0) - INPUT ADDR.   (1) - O/P ADDR.   (15) - O/P LENGTH\n*\nXCONVERT STM   R14,R3,12(R13)\n         LA    R3,1(,R15) .     O/P LEN + 1\n         SRA   R3,1 .        /2\n         AR    R3,R0 .        I/P + 1/2  O/P LEN\n         SH    R3,DCONH8     - 8\n&INWORK  SETB  1                                                GP09347\n&INMOVE  SETB  1                                                GP09347\n         UNPK  DCONWORK(9),0(5,R3) .    UNPACK FIRST WORD\n         UNPK  DCONWORK+8(9),4(5,R3) .     SECOND WORD\n         TR    DCONWORK(16),HEXTAB .    MAKE VIEWABLE\n         SPACE\n.DOCON   AIF   (NOT &INMOVE).OK6Z\nDCONCOM  LA    R2,DCONWORK+16\n         SR    R2,R15\n         LR    R3,R15\n         BCTR  R3,0\n&INMOVE  SETB  1                                                GP09347\n         EX    R3,DCONMOVE\n         LM    R14,R3,12(R13)\n         BR    R14\n         SPACE\n.OK6Z    AIF   ('&DB' NE '').OKWK                                88025\nDCONDB   DC    D'0'          LOCAL WORK AREA                     88025\n.OKWK    ANOP  ,                                                 88025\nDCONPAT  DC    C' ',13X'20',X'2120' .     EDIT MASK\n         AIF   (NOT &INLINE(11) AND NOT &INMOVE).OK7            GP09347\nDCONMOVE MVC   0(0,R1),0(R2)\nDCONH8   DC    H'8'\n.OK7     AIF   (NOT &INWORK).B8                                 GP09347\n         DS    C       1/2                                      GP09347\nDCONWORK DS    CL16    2/2                                      GP09347\n         DS    C\n         ORG   DCONWORK\nUPD      DS    CL9\n         ORG\nHEXTAB   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n.B8      AIF   (NOT &INLINE(9)).OK9\nTRTAB    TRTAB CODE=&CRT,OPT=ERR\n.OK9     AIF   (NOT &INLINE(10)).OK10\n         RANDOM ,\n.OK10    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMSG": {"ttr": 14600, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x06\\x00\\x00\\x01\\x08\\x07\\x9f\\x01\\x08\\x08/#)\\x00\\xe0\\x00\\x85\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.06", "flags": 0, "createdate": "2008-03-19T00:00:00", "modifydate": "2008-03-22T23:29:00", "lines": 224, "newlines": 133, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                         NEW ON GP08079\n&NM      XMSG  &MID,&TYPE=MSG,   FORMAT A MESSAGE FOR WTO OR PRT       *\n               &LIST=,&PARM=,&ERRET=  MSG WITH TEXT INSERTION\n         GBLC  &MACPLAB,&ZZXMWRK\n         GBLA  &MACP#        NUMBER OF (SUB)LIST ARGUMENTS\n         GBLC  &MACP1,&MACP2,&MACP3,&MACP4,&MACP5\n         GBLC  &MACP6,&MACP7,&MACP8,&MACP9,&MACP10\n         LCLA  &K,&I,&J,&N,&M,&O\n         LCLB  &TF\n         LCLC  &RA,&RL,&RT,&L  DEFINE ADDRESS AND LENGTH REGISTERS\n         LCLC  &TYPA(23),&TYVL(23)\n         LCLC  &LIT          SPECIAL HANDLING FOR LITERAL OPERANDS\n&RA      SETC  'R1'          SET NORMAL USE\n&RL      SETC  'R0'\n&L       SETC  'L'''\n&MACPLAB SETC  '&NM'         SET NAME FIELD\n         AIF   ('&PARM' EQ '').DEFPARM\n&ZZXMWRK SETC  '&PARM'       SET NEW WORK AREA\n.DEFPARM AIF   ('&ZZXMWRK' NE '').USEPARM\n&ZZXMWRK SETC  'XMSGMGPM'    USE DEFAULT MDEFPARM NAME\n.USEPARM ANOP  ,\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*  XMSG GENERATES A CALL TO MESSAGE FORMATTING/DEFINITION PROGRAM    *\n.*  EXHMGxxx PREVIOUSLY LOADED AND STORED IN XMSGMGPM(1)              *\n.*                                                                    *\n.*   name XMSG  modname,LIST=(buffer,buflen),TYPE=INIT                *\n.*      LOADS THE MESSAGE MODULE, AND SETS THE BUFFER INFORMATION     *\n.*                                                                    *\n.*   name XMSG  modname,TYPE=CLOSE                                    *\n.*      FREES THE MESSAGE MODULE                                      *\n.*                                                                    *\n.*   name XMSG  mid,LIST=(addr,'text',(addr,len),(addr,len,type)...)  *\n.*                                                                    *\n.*  mid  SPECIFIES THE MESSAGE ID:                                    *\n.*    A) AS A LITERAL                                                 *\n.*    B) ADDRESS OF A TEXT STRING OF LENGTH 8                         *\n.*                                                                    *\n.*  TYPE=END (OR A TEXT SPECIFICATION OF *END) REQUESTS PROGRAM       *\n.*    TO CLEAN UP AND RELEASE STORAGE                                 *\n.*                                                                    *\n.*  TYPE=TEXT (DEFAULT) BYPASSES THE WTO, BUT RETURNS THE MESSAGE     *\n.*    ADDRESS: H'LEN,0',CL(LEN)'TEXT' USABLE IN WTO OR PRTV           *\n.*  TYPE=MSG  SPECIFIES A MESSAGE TO BE WRITTEN TO THE OPERATOR       *\n.*                                                                    *\n.*    LIST OPERANDS SPECIFY TEXT TO BE INSERTED INTO THE MESSAGE      *\n.*    AS DEFINED. AN OMITTED LENGTH FIELD (FOR NON-LITERAL) EXPANDS   *\n.*    AS L'addr.                                                      *\n.*    TYPE OPERANDS DEFAULT TO THOSE IN THE MESSAGE DEFINITION, OR    *\n.*      CHARACTER STRING IF NOT DEFINED THERE, EITHER.                *\n.*    VALID ARE: C or T FOR CHARACTER TEXT; A FOR ADDRESS (HEX);      *\n.*      I or INT FOR INTEGERES; P, D, or PD FOR PACKED DECIMAL;       *\n.*      H, X, or HEX FOR HEXADECIMAL; B or BIN FOR BINARY/BIT         *\n.*                                                                    *\n.*  PARM=mdefparm DEFINES A REMOTE PARAMETER LIST TO BE USED (SEE     *\n.*    EXPANSION OF MDEFPARM FOR FORMAT.                               *\n.*                                                                    *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n&N       SETA  N'&LIST\n&TYPA(01) SETC 'C'           CHARACTER STRING\n&TYPA(02) SETC 'CHAR'\n&TYPA(03) SETC 'T'           TEXT STRING\n&TYPA(04) SETC 'TEXT'\n&TYPA(05) SETC '@'           ADDRESS\n&TYPA(06) SETC 'A'\n&TYPA(07) SETC 'ADDR'\n&TYPA(08) SETC 'P'           PACKED DECIMAL\n&TYPA(09) SETC 'D'\n&TYPA(10) SETC 'PD'\n&TYPA(11) SETC 'DEC'\n&TYPA(12) SETC 'UP'          UNSIGNED (ABSOLUTE) PD\n&TYPA(13) SETC 'UD'\n&TYPA(14) SETC 'UPD'\n&TYPA(15) SETC 'I'           INTEGER\n&TYPA(16) SETC 'INT'\n&TYPA(17) SETC 'UI'          UNSIGNED / ABSOLUTE INT\n&TYPA(18) SETC 'AI'\n&TYPA(19) SETC 'H'           HEXADECIMAL\n&TYPA(20) SETC 'X'\n&TYPA(21) SETC 'HEX'\n&TYPA(22) SETC 'B'           BIT STRING\n&TYPA(23) SETC 'BIN'\n&TYVL(01) SETC '1'\n&TYVL(02) SETC '1'\n&TYVL(03) SETC '1'\n&TYVL(04) SETC '1'\n&TYVL(05) SETC '2'\n&TYVL(06) SETC '2'\n&TYVL(07) SETC '2'\n&TYVL(08) SETC '3'\n&TYVL(09) SETC '3'\n&TYVL(10) SETC '3'\n&TYVL(11) SETC '3'\n&TYVL(12) SETC '4'\n&TYVL(13) SETC '4'\n&TYVL(14) SETC '4'\n&TYVL(15) SETC '5'\n&TYVL(16) SETC '5'\n&TYVL(17) SETC '6'\n&TYVL(18) SETC '6'\n&TYVL(19) SETC '8'\n&TYVL(20) SETC '8'\n&TYVL(21) SETC '8'\n&TYVL(22) SETC '9'\n&TYVL(23) SETC '9'\n         AIF   ('&MID' EQ '*END').CLOSE\n         AIF   ('&TYPE' EQ 'CLOSE' OR '&TYPE' EQ 'END').CLOSE\n         AIF   ('&TYPE' NE 'INIT' AND '&TYPE' NE 'NAME').DOMSG\n         AIF   ('&MID' EQ '').NOMOD  LET IT FAIL\n&LIT     SETC  '&MID'\n         AIF   ('&MID'(1,1) NE '''').NOMOD\n&LIT     SETC  '=CL8'.'&LIT'\n         MACPARM R0,&LIT,OP=LA  LOAD ADDRESS OF MODULE NAME\n         AGO   .GOMOD\n.NOMOD   MACPARM R0,&LIT,OP=LA  LOAD ADDRESS OF MODULE NAME\n.GOMOD   ANOP  ,\n&MACPLAB LOAD  EPLOC=(0),ERRET=&ERRET  LOAD; OPTIONAL RECOVERY\n&MACPLAB SETC  ''\n         MACPARM R0,&ZZXMWRK,OP=ST   SAVE THE MODULE ADDRESS\n         MACPARM R0,&LIST(1),NULL=XMSGMSG-XMSGADD+&ZZXMWRK\n         MACPARM R1,&LIST(2),NULL=&L.XMSGMSG\n         MACPARM R0,R1,XMSGBUF-XMSGADD+&ZZXMWRK,MODE=THREE,OP=STM\n.DONEIN  MEXIT ,\n.CLOSE   MACPARM &ZZXMWRK.(4),&ZZXMWRK,OP=XC  CLEAR THE ADDRESS\n         AIF   ('&MID' EQ '').DONEND\n&LIT     SETC  '&MID'\n         AIF   ('&MID'(1,1) NE '''').NODEL\n&LIT     SETC  '=CL8'.'&LIT'\n         MACPARM R0,&LIT,OP=LA  LOAD MESSAGE ADDRESS\n         AGO   .GODEL\n.NODEL   MACPARM R0,&LIT,OP=LA  LOAD MESSAGE ADDRESS\n.GODEL   DELETE EPLOC=(0)    DELETE MESSAGE MODULE\n.DONEND  MEXIT ,\n.*--------------------------------------------------------------------*\n.*  PROCESS A MESSAGE LIST (TEXT/LEN OPTIONAL DEPENDING ON MESSAGE)   *\n.*--------------------------------------------------------------------*\n.DOMSG   MACPARM R1,&ZZXMWRK LOAD CALLING AREA ADDRESS\n         AIF   ('&MID' EQ '').NOMID  LET IT FAIL\n&LIT     SETC  '&MID'\n         AIF   ('&MID'(1,1) NE '''').NOMID\n&LIT     SETC  '=CL8'.'&LIT'\n         MACPARM R15,&LIT,OP=LA  LOAD MESSAGE ADDRESS\n         AGO   .GOMID\n.NOMID   MACPARM R15,&LIT,OP=L   LOAD MESSAGE ADDRESS\n.GOMID   MACPARM XMSGMID-XMSGMGPM(L'XMSGMID,R1),0(R15),OP=MVC MOVE TEXT\n&TF      SETB   (NOT ('&TYPE' EQ 'MSG'))\n         MACPARM R0,&TF      SET FLAG (0-WTO; 1-NO WTO,RETURN MSG ADD)\n         AIF   (&N EQ 0).GOMSG\n&O       SETA    20          OFFSET IN GENERATED LIST\n&M       SETA    1           OFFSET IN LIST=\n.*--------------------------------------------------------------------*\n.*  CASE 2  - LOOP THROUGH SUPPLIED ADDRESS/LEN PAIRS AND STASH       *\n.*--------------------------------------------------------------------*\n.LSTADD  AIF   (&M GT &N).LSTEND  DONE - SET VL BIT IN LIST\n&K       SETA  0             TYPE NOT NEEDED\n         MACLIST &LIST(&M)   GET SUBLIST ITEMS\n&RA      SETC  '&MACP1'\n&RL      SETC  '&MACP2'\n         AIF   ('&RA' NE '').HAVERA\n&RA      SETC  '0'           NULL ADDRESS - NO SUBSTITUTION\n.HAVERA  AIF   ('&RL' NE '').HAVERL\n&RL      SETC  '0'           NULL ADDRESS - NO SUBSTITUTION\n.*--------------------------------------------------------------------*\n.*  CASE 2A - EXPLICIT TEXT/LEN SUPPLIED                              *\n.*--------------------------------------------------------------------*\n.HAVERL  AIF   ('&RA'(1,1) EQ '''').ENTRNG\n         MACPARM R15,&RA,OP=LA LOAD ADDRESS OF NAME OR REGISTER\n         MACPARM R15,&O.(,R1),OP=ST STORE ADDRESS IN CALL LIST\n         AIF   ('&MACP2' NE '').GOODRL\n         AIF   ('&MACP1' EQ '').GOODRL\n         MACPARM R15,&L&MACP1   USE DEFAULT LENGTH\n         AGO   .COMMRL\n.GOODRL  MACPARM R15,&RL,NULL=0   SET EXPLICIT LENGTH OR 0\n.COMMRL  MACPARM R15,&O+4(,R1),OP=STH STORE LENGTH IN CALL LIST\n         AIF   ('&MACP3' EQ '').COMMK0\n&I       SETA  1\n.TYLOOP  AIF   ('&MACP3' EQ '&TYPA(&I)').SETK0\n&I       SETA  &I+1\n         AIF   (&I LE 23).TYLOOP\n MNOTE 8,'XMSG: TYPE &MACP3 NOT RECOGNIZED, IGNORED'\n         AGO   .COMMK0\n.SETK0   ANOP  ,\n&K       SETA  &TYVL(&I)\n         AIF   (&K EQ 0).COMMK0\n         MACPARM &O+4(R1),&K,OP=MVI   SET PARM TYPE\n.COMMK0  ANOP  ,\n&O       SETA   &O+6         NEXT AVAILABLE LIST OFFSET\n&M       SETA   &M+1\n         AGO   .LSTADD\n.*--------------------------------------------------------------------*\n.*  CASE 2B - EXPLICIT QUOTED TEXT SUPPLIED                           *\n.*--------------------------------------------------------------------*\n.ENTRNG  ANOP  ,\n&K       SETA  K'&RA-2       LENGTH OF QUOTED STRING (EXC AMPSND/QOT)\n&I       SETA  2             FIRST BYTE TO EXAMINE\n&J       SETA  &K            LAST BYTE (PAIR) TO EXAMINE\n.ENTLOOP AIF   (&I GT &J).ENTEXP\n         AIF   ('&RA'(&I,2) EQ '''''' OR '&RA'(&I,2) EQ '&&').ENDPR\n&I       SETA  &I+1          TRY AGAIN\n         AGO   .ENTLOOP\n.ENDPR   ANOP  ,\n&I       SETA  &I+2          SKIP THE PAIR\n&K       SETA  &K-1          AND CORRECT THE LENGTH\n         AGO   .ENTLOOP\n.ENTEXP  LA    R15,=C&RA     LOAD THE STRING ADDRESS\n         MACPARM R15,&O.(,R1),OP=ST STORE ADDRESS IN CALL LIST\n         MACPARM R15,&K+256,OP=LA LOAD THE LENGTH OF THE STRING / TYPE\n         MACPARM R15,&O+4(,R1),OP=STH STORE LENGTH IN CALL LIST\n&O       SETA   &O+6         NEXT AVAILABLE LIST OFFSET\n&M       SETA   &M+1\n         AGO   .LSTADD\n.LSTEND  ANOP  ,\n&O       SETA  &O-6          POSITION TO LAST WORD IN LIST\n         MACPARM &O.(R1),X'80',OP=OI\n         AGO   .COMBAS  DONE - INVOKE SUBWTO\n.GOMSG   MACPARM 20(16,R1),20(R1),OP=XC\n         OI    20(R1),X'80'  EMPTY LIST\n.*--------------------------------------------------------------------*\n.*  LOAD R0 AND R1 APPROPRIATELY; CALL MESSAGE ROUTINE                *\n.*--------------------------------------------------------------------*\n.COMBAS  MACPARM R15,&ZZXMWRK,OP=L   MODE ADDRESS IN LIST\n         BASR  R14,R15       INVOKE IT\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XRAND": {"ttr": 14605, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x13\\x10O\\x01\\x13\\x10_\\x15\\x03\\x00\\x0f\\x00\\n\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2013-04-14T00:00:00", "modifydate": "2013-04-15T15:03:00", "lines": 15, "newlines": 10, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      XRAND &OPT=                                        NEW GP13105\n.*\n.*  INVOKES THE RANDOM NUMBER GENERATOR IN EXHBWORK\n.*  RETURN IS INTEGER 0-9 IN GPR 0, AND 0.0-9.0 IN FPR 0\n.*    OPT=INIT RESTARTS WITH TIME-BASED VALUE\n.*\n         GBLC  &MACPLAB\n&MACPLAB SETC  '&NM'\n         AIF   ('&OPT' NE 'INIT').CONTIN\n         MACPARM R15,EXWRANDI,OP=L\n         XC    0(8,R15),0(R15)    INITIALIZE\n.CONTIN  MACPARM R15,EXWRAND,OP=L\n         MACPARM R14,R15,OP=BALR,OPR=BALR\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XREQUIRE": {"ttr": 14849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x05\\x00\\x00\\x01\\x10 \\x7f\\x01\\x11&\\x0f!\\x19\\x00y\\x00k\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.05", "flags": 0, "createdate": "2010-07-26T00:00:00", "modifydate": "2011-09-17T21:19:00", "lines": 121, "newlines": 107, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n&NM      XREQUIRE &OPTS,&B=EXCXCB,&MINLS=,&MINLN=               GP10206\n         GBLC  &MACPLAB\n.**********************************************************************\n.*   EXHIBIT MACRO TO TEST (AND FAIL) IMPROPER MODULE INVOCATION     **\n.*     (WAS NAMED RESTRICT)                                          **\n.**********************************************************************\n         LCLA  &I,&M\n         LCLB  &TRUE,&F(36)                                     GP07007\n         LCLC  &C,&J                                            GP10213\n&M       SETA  N'&SYSLIST\n&J       SETC  '&SYSNDX'\n&I       SETA  0\n&MACPLAB SETC  '&NM'\n.LOOP    AIF   (&I GE &M).LEND\n&I       SETA  &I+1\n&C       SETC  '&SYSLIST(&I)'\n         AIF   ('&C' EQ '').LOOP\n&F(2)    SETB  (('&C' EQ 'PCP') OR &F(2))\n&F(3)    SETB  (('&C' EQ 'MFT') OR &F(3))\n&F(4)    SETB  (('&C' EQ 'MVT') OR &F(4))\n&F(6)    SETB  (('&C' EQ 'MP') OR &F(6))\n&F(7)    SETB  (('&C' EQ 'DAT') OR &F(7))\n&F(9)    SETB  (('&C' EQ 'TSO') OR &F(9))                        *TSO*\n&F(10)   SETB  (('&C' EQ 'NOTSO') OR &F(10))                     *TSO*\n&F(11)   SETB  (('&C' EQ 'DEBUG') OR &F(11))\n&F(12)   SETB  (('&C' EQ 'HASP') OR &F(12))\n&F(12)   SETB  (('&C' EQ 'JES2') OR &F(12))                      89211\n&F(13)   SETB  (('&C' EQ 'CON') OR &F(13))\n&F(14)   SETB  (('&C' EQ 'PAS') OR &F(14))\n&F(15)   SETB  (('&C' EQ 'KEY') OR &F(15))\n&F(16)   SETB  (('&C' EQ 'UNL') OR &F(16))\n&F(17)   SETB  (('&C' EQ 'VM') OR &F(17))                        79194\n&F(18)   SETB  (('&C' EQ 'GAME') OR ('&C' EQ 'GAMES') OR &F(18))\n&F(19)   SETB  (('&C' EQ 'KEY0') OR &F(19))  ->WITH DEBUG ONLY  GP11260\n&F(21)   SETB  (('&C' EQ '12') OR &F(21))\n&F(22)   SETB  (('&C' EQ '24') OR &F(22))\n&F(27)   SETB  (('&C' EQ '40') OR &F(27))\n&F(28)   SETB  (('&C' EQ '80') OR &F(28))\n&F(29)   SETB  (('&C' EQ '132') OR &F(29))                       89211\n&F(30)   SETB  (('&C' EQ 'DRDEBUG') OR &F(30))                  GP07007\n         AGO   .LOOP\n.LEND    ANOP  ,\n&TRUE    SETB (&F(2) OR &F(3) OR &F(4) OR &F(6) OR &F(7))\n         AIF   (NOT &TRUE).SK1\n         NEED  CVT\n&NM   MACPARM  WRKSYS,&F(2)*CVT1SSS+&F(3)*CVT2SPS+&F(4)*CVT4MS1+&F(6)*C*\n               VT4MPS+&F(7)*CVT6DAT,OP=TM  TEST SYSTEM BITS\n         MACPARM &B,MODE=ONE,OP=BNZ,OPR=BNZR                    GP10206\n.SK1     ANOP  ,\n&TRUE    SETB (&F(13) OR &F(14) OR &F(16) OR &F(15))\n         AIF   (NOT &TRUE).SK2\n         MACPARM EXCPRIV,EXCPSYS,OP=TM KEY MODE ?\n&TRUE    SETB (&F(13) OR &F(14) OR &F(16))                       *TSM*\n         AIF   (NOT &TRUE).N15                                   *TSM*\n         BO    ZZX&J.K       SKIP ALL TESTS IF IN KEY MODE      GP10213\n         AIF   (NOT &F(13) OR NOT &F(14)).N13\n         TM    EXCPRIV,EXCONSOL .  CONTROL DESK ?\n         BZ    ZZX&J.I       NO; SKIP THE NEXT TEST             GP10206\n         TM    EXCPRIV,EXCONCAN .   SUPPLIED PASSWORD ?\n.N15     MACPARM &B,MODE=ONE,OP=BZ,OPR=BZR                      GP10206\nZZX&J.I  EQU   * .           BYPASS IF IN KEY MODE              GP10206\n&F(13)   SETB  0\n&F(14)   SETB  0\n.N13     ANOP\n         AIF   (NOT &F(16) AND NOT &F(14)).N16\n         TM    EXCPRIV,EXCAUTH*&F(16)+EXCONCAN*&F(14) .  PASS/UNL ?\n         MACPARM &B,MODE=ONE,OP=BZ,OPR=BZR                      GP10206\n.N16     AIF   (NOT &F(13)).SS2\n         TM    EXCPRIV,EXCONSOL .  CONTROL DESK CRT ?\n         MACPARM &B,MODE=ONE,OP=BZ,OPR=BZR                      GP13221\n.SS2     ANOP\nZZX&J.K  EQU   * .           BYPASS IF IN KEY MODE\n.SK2     AIF   (NOT &F(12)).SKCRT\n         MACPARM HASPHCT+1(3),ZEROES,OP=CLC\n         MACPARM &B,MODE=ONE,OP=BE,OPR=BER                      GP10206\n.SKCRT   AIF   (NOT &F(21) AND NOT &F(22)).SKCB\n         MACPARM LNO+1,LN24+LN32,OP=TM . MORE THAN 15 LINES ?    78051\n         AIF   (&F(22)).SKC2\n         MACPARM &B,MODE=ONE,OP=BZ,OPR=BZR                      GP10206\n         AGO   .SKCB\n.SKC2    MACPARM &B,MODE=ONE,OP=BNZ,OPR=BNZR                    GP10206\n.SKCB    AIF   (NOT &F(27) AND NOT &F(28) AND NOT &F(29)).SKOTH  89211\n         MACPARM LSIZE+1,80,OP=CLI  40 OR 80 BYTE CRT ?          88249\n         BC    2*&F(29)+8*&F(28)+4*&F(27),&B                     91364\n         MACPARM 2*&F(29)+8*&F(28)+4*&F(27),&B,OP=BC,OPR=BCR    GP10206\n.SKOTH   AIF   (NOT &F(11)).SKNDEB\n         AIF   (NOT &F(9)).SKBOPT  SKIP COMBINED TEST            78216\n         MACPARM OPTS,DEBUG+OPTSO,OP=TM DEBUG OR TSO ?           78216\n         MACPARM &B,MODE=ONE,OP=BNZ,OPR=BNZR                    GP10206\n         AGO   .SKTSO                                            78216\n.SKBOPT  ANOP  ,                                                 78216\n         MACPARM OPTS,DEBUG,OP=TM . RUNNING DEBUG MODE ?\n         MACPARM &B,MODE=ONE,OP=BNZ,OPR=BNZR                    GP10206\n.SKNDEB  AIF   (NOT &F(9) AND NOT &F(10)).SKTSO                  *TSO*\n         MACPARM OPTS,OPTSO,OP=TM . RUNNING UNDER TSO ?          *TSO*\n         AIF   (NOT &F(9)).NTTSO                                 *TSO*\n         MACPARM &B,MODE=ONE,OP=BNZ,OPR=BNZR                    GP10206\n         AGO   .SKTSO                                            *TSO*\n.NTTSO   ANOP  ,                                                 *TSO*\n         MACPARM &B,MODE=ONE,OP=BZ,OPR=BZR                      GP10206\n.SKTSO   AIF   (NOT &F(17) AND NOT &F(18)).NOSS18                79194\n         MACPARM SQSAVPO,SQSAFVM*&F(17)+SQSNGAM*&F(18),OP=TM     79194\n         MACPARM &B,MODE=ONE,OP=BNZ,OPR=BNZR                    GP10206\n.NOSS18  AIF   (NOT &F(19)).NOSAVP     NO KEY0 CHECK            GP11260\n         MACPARM OPTS,DEBUG,OP=TM . RUNNING DEBUG MODE ?        GP11260\n         MACPARM &B,MODE=ONE,OP=BZ,OPR=BZR                      GP11260\n         TESTAUTH KEY=YES,FCTN=0,RBLEVEL=1  KEY ZERO ?          GP11260\n         LTR   R15,R15                                          GP11260\n         MACPARM &B,MODE=ONE,OP=BNZ,OPR=BNZR                    GP11260\n.NOSAVP  AIF   (NOT &F(30)).SS30\n         TM    DRFLAG,DRDEBUG  DASD FUNCTION IN DEBUG MODE ?    GP07007\n         MACPARM &B,MODE=ONE,OP=BNZ,OPR=BNZR                    GP10206\n.SS30    AIF   (T'&MINLS EQ 'O').SS31                           GP10206\n         CLI   LSIZE+1,&MINLS                                   GP10206\n         MACPARM &B,MODE=ONE,OP=BL,OPR=BLR                      GP10206\n.SS31    AIF   (T'&MINLN EQ 'O').SS32                           GP10206\n         CLI   LNO+1,&MINLN                                     GP10206\n         MACPARM &B,MODE=ONE,OP=BL,OPR=BLR                      GP10206\n.SS32    ANOP  ,                                                GP10206\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XSCLINE": {"ttr": 14852, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x13\\x16/\\x01\\x13\\x16/\\x16\\x06\\x008\\x008\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2013-06-11T00:00:00", "modifydate": "2013-06-11T16:06:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      XSCLINE &FUN=PAGETAB                                   GP13162\n.*   THE XSCLINE MACRO PROVIDES A FULL PAGE OUT, AND READ INPUT GP13162\n.*   SERVICE FOR SCREENS DEFINED USING THE FDLINE SERVICE.      GP13162\n.*   ON ENTRY R0 DEFINES A FUNCTION CODE, THAT *16 IS AN INDEX  GP13162\n.*   INTO A TABLE OF ADDRESSES DEFINED AS:                      GP13162\n.*    A(screen list,help list,prompt,quicktab)                  GP13162\n.*   screen list IS THE ADDRESS VECTOR OF SCLINES THAT COMPOSE  GP13162\n.*     THE SCREEN.                                              GP13162\n.*   help list IS AN ADDRESS VECTOR WITH HELP INFORMATION OR 0  GP13162\n.*   prompt IS THE ADDRESS OF BCON TEXT FOR THE PROMPT MESSAGE  GP13162\n.*   quicktab IS A LIST OF BTAB ENTRIES FOR PF/PA KEYS          GP13162\n.*                                                              GP13162\n         LCLC  &NAME         SUBROUTINE NAME                    GP13162\n&NAME    SETC  '&NM'                                            GP13162\n         AIF   ('&NAME' NE '').DOPROM                           GP13162\n&NAME    SETC  'PAGENEW'                                        GP13162\n.DOPROM  ANOP  ,                                                GP13162\n&NAME    STM   R5,R7,DB2     SAVE OVER SUBROUTINES              GP13162\n         LR    R6,R0         PRESERVE ENTRY CODE                GP13162\n         SLL   R6,4          * 16                               GP13162\n         LA    R6,&FUN.(R6)  POINT TO FUNCTION ADDRESSES    GP13162\n         LA    R5,REPLY      RESET                              GP13162\n         ST    R5,REPPTR       INPUT POINTER                    GP13162\n         ICM   R2,15,8(R6)   GET PROMPT ADDRESS                 GP13162\n         BZ    PAGENPRO        NO PROMPT                        GP13162\n         MVC   ZPROM,BLANKS  CLEAR PROMPT TEXT                  GP13162\n         SR    R1,R1                                            GP13162\n         IC    R1,0(,R2)     GET PROMPT LENGTH                  GP13162\n         BCTR  R1,0            EX LENGTH                        GP13162\n         EX    R1,EXMVCPRO   MOVE PROMPT TO SCREEN              GP13162\nPAGENPRO LM    R2,R3,0(R6)   LOAD MAIN AND HELP SCREEN ADDR     GP13162\n         SCINIT FDW,(R2)     PREPARE FOR SCREEN                 GP13162\n         TM    PROFLAGS,PFCURSE   SET CURSOR ?                  GP13162\n         BZ    PAGEQUE                                          GP13162\n         MVC   FDWCUR,SAVECUR     SET POSITION                  GP13162\n         OI    FDWPROFG,FDWPFCUR  USE CURSOR                    GP13162\nPAGEQUE  MVC   ZCMD,BLANKS   CLEAR INPUT                        GP13162\n         SCLINE FDW,(R2),(R3)  DISPLAY BUFFER AND HELP SCREEN   GP13162\n         BNM   REPLANAL      CHECK INPUT                        GP13162\n         CLI   FDWIAID,1     WHAT CONDITION ?                   GP13162\n         BE    EXCWERR        WRITE ERROR                       GP13162\n         BH    EXCRERR        READ ERROR                        GP13162\n         TM    EXCPRIV,EXCPLOOP  LOOP MODE?                     GP13162\n         BZ    GETOUT        NO RESPONSE FROM USER (OR ERROR)   GP13162\nREPLANAL MVC   REPLY,BLANKS                                     GP13162\n         ICM   R4,15,12(R6)  LOAD QUICKTAB                      GP13162\n         BZ    PAGENQIK        SKIP IF NONE                     GP13162\n         LA    R5,FDWICOD    POINT TO CONVERTED AID             GP13162\n         L     R7,DB2+8      RESTORE GETMAIN BASE               GP13162\n         XLOOK T=(R4),R=FDWICOD    LOOK FOR NON-DATA FUNCTIONS  GP13162\n         MVC   REPLY+6(L'ZCMD),ZCMD  COPY MAJOR COMMAND         GP13162\nPAGENQIK LM    R5,R7,DB2     RESTORE                            GP13162\n         BR    R6                                               GP13162\nEXMVCPRO MVC   ZPROM(*-*),1(R2)   OVE PROMPT TEXT               GP13162\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XTAB": {"ttr": 14854, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NM      XTAB  &STRING,&XCT\n&NM      BTAB  &STRING,,&XCT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XTRAP": {"ttr": 14856, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x025\\x7f\\x01\\x10#\\x9f\\x16\\x03\\x00^\\x00F\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-12-23T00:00:00", "modifydate": "2010-08-27T16:03:00", "lines": 94, "newlines": 70, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      XTRAP &LIST,&OPT=(PSW,REGS),&TEST=,&ID=        ADDED ON 86218\n.*\n.*    THIS MACRO, RUNNING UNDER THE EXORCISE DEBUG PROGRAM, WILL TRACE\n.*    INSTRUCTION FLOW, PRINT VARIABLES, AND DISPLAY REGISTERS\n.*  NAME CHANGED TO XTRAP TO PREMIT XTRACE USE FOR INSTRUCTION TRACE\n.*\n.*  MAINTENANCE:  2005-06-14  GYP\n.*  ALLOW *var AS INDIRECT LOOKUP REQUEST - 24-BIT ADDRESS IN WORD\n.*  ALLOW /var AS INDIRECT INDIRECT LOOKUP\n.*    IMPLEMENTED BY TRUNCATING PRINTED NAME TO CL7\n.*                2008-04-18  GYP\n.*  LENGTH FIELD CHANGED FROM AL2 TO SL2 USING DEBTROLD         GP10021\n.*\n         LCLC  &LN,&N,&V,&LAB,&TAG,&C                           GP08109\n         LCLA  &I,&J,&K,&L,&FG,&NL,&R                           GP08109\n         LCLB  &B80,&B40,&B20,&B10,&B08,&B04,&B02,&B01\n&TAG     SETC  '&ID'         USE OVERRIDE LABEL\n         AIF   ('&TAG' NE '').HVTAG\n&TAG     SETC  '&NM'         ELSE USE NAME FIELD\n.HVTAG   ANOP  ,\n.*       B01 RESERVED FOR FULL MEMORY DUMP\n&I       SETA  N'&OPT\n&LN      SETC  'L'''\n&LAB     SETC  '&NM'\n         AIF   ('&TEST' NE '').TEST\n         AIF   ('&SYSPARM' NE 'DEBUG').EASY\n         AGO   .PROCEED\n.TEST    ANOP  ,\n&LAB     TM    OPTS,DEBUG .   RUNNING UNDER EXORCISE ?\n         BZ    XTR&SYSNDX    NO; BYPASS TRACE\n&LAB     SETC  ''\n.PROCEED AIF   (&I GT 0).OPTLOOP\n         MNOTE 0,'OPTIONS OMITTED - PSW DEFAULTED'\n&B40     SETB  1\n         AGO   .OPTDONE\n.OPTLOOP AIF   (&J GE &I).OPTDONE\n&J       SETA  &J+1\n&B40     SETB  ('&OPT(&J)' EQ 'PSW' OR &B40)\n&B80     SETB  (('&OPT(&J)' EQ 'PSW' AND '&TAG' NE '') OR &B80)\n&B20     SETB  ('&OPT(&J)' EQ 'REGS' OR &B20)\n&B10     SETB  ('&OPT(&J)' EQ 'MREGS' OR &B10)\n&B08     SETB  ('&OPT(&J)' EQ 'MAP' OR &B08)\n&B04     SETB  ('&OPT(&J)' EQ 'BUFFER' OR &B04)\n         AGO   .OPTLOOP\n.OPTDONE AIF   ((&B40+&B20+&B10+&B08+&B04+&B02+&B01) GE &I).OPTOK\n         MNOTE 4,'UNRECOGNIZED OPTION SPECIFIED'\n.OPTOK   ANOP  ,\n&I       SETA  N'&SYSLIST\n&J       SETA  0\n.COUNTER AIF   (&J GE &I).COUNTED\n&J       SETA  &J+1\n         AIF   ('&SYSLIST(&J)' EQ '').COUNTER\n&K       SETA  (N'&SYSLIST(&J)+1)/2\n&NL      SETA  &NL+&K\n         AGO   .COUNTER\n.COUNTED ANOP  ,\n&J    SETA  128*&B80+64*&B40+32*&B20+16*&B10+8*&B08+4*&B04+2*&B02+&B01\n&LAB     DC    0H'0',X'830E',AL1(&J,&NL) DEBUG: TRACE\n         AIF   (&NL EQ 0 AND NOT &B80).EXPDONE\n         B     XTR&SYSNDX\n&J       SETA  0\n         AIF   (NOT &B80).EXPAND\n         DC    CL8'&TAG '\n.EXPAND  AIF   (&J GE &I).EXPDONE\n&J       SETA  &J+1\n         AIF   ('&SYSLIST(&J)' EQ '').EXPAND\n&K       SETA  N'&SYSLIST(&J)\n&L       SETA  1\n.EXPITEM AIF   (&L GT &K).EXPAND\n&N       SETC  '&SYSLIST(&J,&L)'\n&V       SETC  '&N'                                             GP05165\n         AIF   ('&V'(1,1) NE '*' AND '&V'(1,1) NE '/').NIND     GP05165\n&V       SETC  '&V'(2,K'&N-1)  ELIMINATE * FROM VARIABLE NAME   GP05165\n.* &N    SETC  '&V'          COPY   (DEFER)                     GP05165\n.NIND    AIF   ('&SYSLIST(&J,&L+1)' EQ '').DEFLN\n&R       SETA  K'&SYSLIST(&J,&L+1)                              GP08109\n         AIF   (&R LT 3).NOREGLN                                GP08109\n&C       SETC  '&SYSLIST(&J,&L+1)'                              GP08109\n         AIF   ('&C'(1,1) NE '(' OR '&C'(2,1) EQ '(').NOREGLN   GP08109\n         AIF   ('&C'(&R,1) NE ')' OR '&C'(&K-1,1) EQ ')').NOREGLN\n         DC    CL8'&N ',SL2(&V,0&C)                             GP10021\n         AGO   .EXPITEX                                         GP08109\n.NOREGLN DC    CL8'&N ',SL2(&V,&SYSLIST(&J,&L+1))               GP10021\n         AGO   .EXPITEX                                         GP08109\n.DEFLN   DC    CL8'&N ',SL2(&V,&LN&V)                           GP10021\n.EXPITEX ANOP  ,\n&L       SETA  &L+2\n         AGO   .EXPITEM\n.EASY    AIF   ('&NM' EQ '').EXPDONE\n&LAB     DS    0H            NO DEBUG MODE - NO TRACE\n.EXPDONE AIF   ('&TEST' EQ '' AND &NL EQ 0 AND NOT &B80).MEXIT\nXTR&SYSNDX DS  0H\n.MEXIT   MEND  ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XXHHEX": {"ttr": 14859, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x120\\x0f\\x01\\x120\\x0f\\x17U\\x00)\\x00)\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2012-10-26T00:00:00", "modifydate": "2012-10-26T17:55:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                         NEW ON GP12298\n&NM      XXHHEX &LEN=R2,&WK=R3,&W2=R4,&MAXL=,&MAX=,&ERR=\n.*   CHECK FOR A VALID HEX CONSTANT IN AN SCLINE/SCPAGE EXIT ROUTINE.\n.*   CODE IS FUNNY, BUT DOESN'T NEED A TRT TABLE OR LOOP\n.*   TRANSLATES TO HEX AND BACK, THEN COMPARES. CATCHES MOST ERRORS.\n.*\n         GBLC  &ZZXXHNM\n         LCLC  &LER,&LAB\n&LER     SETC  '&ERR'\n         AIF   ('&LER' NE '').USERR\n&LER     SETC  '&ZZXXHNM'.'R'     NORMAL ERROR LABEL\n.USERR   ANOP  ,\n&LAB     SETC  'ZZX'.'&SYSNDX'\n&NM      MVC   DBWK,=8X'F0'  CLEAR OUTPUT\n         AIF   ('&MAXL' EQ '').NOLL\n         CH    &LEN,=AL2(&MAXL)   VALID LENGTH ?\n         MACPARM &LER,OP=BH,OPR=BHR,MODE=ONE\n.NOLL    LR    &WK,&LEN      COPY LENGTH\n         BCTR  &WK,0         MAKE EXECUTE LENGTH\n         LA    &W2,DBWK+8\n         SR    &W2,&LEN      LOCATION TO MOVE TO\n         EX    &WK,&LAB.M    MOVE TEXT\n         NC    DBWK,=8X'1F'  KEEP ONLY SIGNIFICANT BITS\n         TR    DBWK,=X'000A0B0C0D0E0F0000000000000000000001020304050607*\n               0809000000000000'\n         PACK  DB(5),DBWK(L'DBWK+1)\n.*  CONVERTED TEXT IN DB(4); NOW DO BACKWADS TO CHECK VALIDITY\n         UNPK  DB2(L'DB2+1),DB(5)  REVERSE\n         NC    DB2,=8X'0F'\n         TR    DB2,=C'0123456789ABCDEF'\n         MVC   DBWK,=8X'F0'  CLEAR OUTPUT\n         EX    &WK,&LAB.M    MOVE TEXT\n         OC    DBWK,=8C' '   UPPER CASE TO ALLOW REVERSE COMPARE\n         CLC   DB2,DBWK      SAME BOTH WAYS?\n         MACPARM &LER,OP=BNE,OPR=BNER,MODE=ONE\n         AIF   ('&MAX' EQ '').NOMAX\n         CLC   DB(4),=A(&MAX)   VALID ?\n         MACPARM &LER,OP=BH,OPR=BHR,MODE=ONE\n.NOMAX   B     *+4+6         CONTINUE PAST EXECUTIONERS\n&LAB.M   MVC   0(0,&W2),FIWTEXT\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XXHINT": {"ttr": 14861, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x01\\x00\\x00\\x01\\x12)\\x8f\\x01\\x120\\x0f\\x17\\x10\\x00#\\x00\\x1f\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.01", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2012-10-26T17:10:00", "lines": 35, "newlines": 31, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                         NEW ON GP12298\n&NM      XXHINT &LEN=R2,&WK=R3,&W2=R4,&MAXL=,&MAX=,&ERR=\n.*   THIS MACRO IS USED TO VALIDATE INTEGER FIELDS SPECIFIED ON AN\n.*     FDIN MACRO WITH EXIT=\n.*   IT IS NOT NEEDED EXCEPT TO VALIDATE SPECIAL CONDITIONS, SUCH AS\n.*     POSITIVE VALUE ONLY, OR A MAXIMUM SMALLER THAN POSSIBLE (E.G.,\n.*     255 IN A THREE-DIGIT FIELD)\n.*\n         GBLC  &ZZXXHNM\n         LCLC  &LER,&LAB\n&LER     SETC  '&ERR'\n         AIF   ('&LER' NE '').USERR\n&LER     SETC  '&ZZXXHNM'.'R'     NORMAL ERROR LABEL\n.USERR   ANOP  ,\n&LAB     SETC  'ZZX'.'&SYSNDX'\n&NM      MVC   DBWK,=8X'F0'  CLEAR OUTPUT\n         AIF   ('&MAXL' EQ '').NOLL\n         CH    &LEN,=AL2(&MAXL)   VALID LENGTH ?\n         MACPARM &LER,OP=BH,OPR=BHR,MODE=ONE\n.NOLL    LR    &WK,&LEN      COPY LENGTH\n         BCTR  &WK,0         MAKE EXECUTE LENGTH\n         LA    &W2,DBWK+8\n         SR    &W2,&LEN      LOCATION TO MOVE TO\n         EX    &WK,&LAB.Z    MOVE ZONES\n         CLC   DBWK,=8X'F0'  NUMERIC ZONES ?\n         MACPARM &LER,OP=BNE,OPR=BNER,MODE=ONE\n         EX    &WK,&LAB.M    MOVE TO WORK AREA\n         CVB   R0,DBWK       CONVERT\n         AIF   ('&MAX' EQ '').NOMAX\n         CL    R0,=A(&MAX)   VALID ?\n         MACPARM &LER,OP=BH,OPR=BHR,MODE=ONE\n.NOMAX   B     *+4+6+6         RETURN TO CALLER\n&LAB.Z   MVZ   DBWK(0),FIWTEXT\n&LAB.M   PACK  DBWK,FIWTEXT(*-*)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "X4CMD": {"ttr": 14863, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO ,\n&NM      X4CMD &TEXT,&ACTION=XEROX                               89143\n         LCLA  &K\n         LCLB  &F0,&F1,&F2,&F3,&F4,&F5,&F6,&F7\n         AIF   ('&TEXT' EQ '*END').NULL                          89143\n&F7      SETB  ('&ACTION' EQ 'XEROX' OR '&ACTION' EQ 'WTO')      89160\n&F6      SETB  ('&ACTION' EQ 'TEXT' OR '&ACTION' EQ 'WTO')       89160\n&K       SETA  K'&TEXT\n         AIF   (&K LT 2).NOQ\n         AIF   ('&TEXT'(1,1) NE '''').NOQ\n         AIF   ('&TEXT'(&K,1) NE '''').NOQ\n&K       SETA  &K-2\n         AIF   (&K LT 1).NULL                                    89143\n&NM      DC    AL1(&K),B'&F0&F1&F2&F3&F4&F5&F6&F7',C&TEXT\n         MEXIT ,\n.NOQ     AIF   (&K LT 1).NULL                                    89143\n&NM      DC    AL1(&K),B'&F0&F1&F2&F3&F4&F5&F6&F7',C'&TEXT'\n         MEXIT ,                                                 89143\n.NULL    ANOP  ,                                                 89143\n&NM      DC    AL1(&K),B'&F0&F1&F2&F3&F4&F5&F6&F7'\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "X4050": {"ttr": 14865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x995O\\x01\\x06&?\\x01\\x00\\x00D\\x00<\\x00\\x03\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-12-20T00:00:00", "modifydate": "2006-09-20T01:00:00", "lines": 68, "newlines": 60, "modlines": 3, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      X4050 &JDE=DUPLEX,&JDL=DFAULT,                 ADDED ON 89143 *\n               &PAPER=LETTER,&FEED=MAIN,&MAXLEN=150,                   *\n               &PMODE=LAND,&DUPLEX=YES,&SEP=WIDE,                      *\n               &OVERFIX=YES,&CHARS=,&HCOUNT=1,&TCOUNT=1,&FLASH=,       *\n               &PREJES2=0,&PRESAM=0,&POSTJES=0,&POSTSAM=0,&MF=D\n.**********************************************************************\n.*                                                                   **\n.*   MACRO TO DEFINE/CORRELATE XEROX 4050 DJDE SETUP                 **\n.*     USED BY LOCAL JES2 MODS AND LOCAL WRITER ROUTINES             **\n.*                                                                   **\n.**********************************************************************\n         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7\n         LCLB  &B8,&B9,&B10,&B11,&B12,&B13,&B14,&B15\n&B0      SETB  ('&OVERFIX' EQ 'YES')\n&B1      SETB  ('&CHARS' EQ 'DUMP')                              89302\n&B4      SETB  ('&SEP' EQ 'NARROW')                              89157\n&B8      SETB  ('&DUPLEX' EQ 'YES')\n&B12     SETB  ('&PMODE' EQ 'PORTRAIT')\n         AIF   ('&MF' EQ 'D').MAP\n.*\n&NM      START 0             BEGIN DEFINITION MODULE\n         DC    B'&B0&B1&B2&B3&B4&B5&B6&B7'\n         DC    B'&B8&B9&B10&B11&B12&B13&B14&B15'\n         DC    B'0'\n         DC    B'0'\n         DC    B'0'\n         DC    B'0'\n         DC    AL1(&MAXLEN)                                      89157\n         DC    AL1(&HCOUNT*16+&TCOUNT)                           89157\n         DC    A(&NM+40,&PREJES2,&POSTJES,&PRESAM,&POSTSAM)\n         DC    3A(0)         SPARES\n         DC    CL8'&JDL ',CL8'&JDE ',CL8'&PAPER '\n         DC    CL8'&FEED ',CL8'&FLASH '                          89355\n         MEXIT ,\n.MAP     ANOP  ,\nX4DSECT  DSECT ,\nX4F1     DS    X             LOCAL GOODIES\nX4FOFIX  EQU   X'80'           FIX OVERPRINT TO DARKEN OUTPUT\nX4FODUMP EQU   X'40'           FIX CHARS=DUMP OUTPUT             89302\nX4FCARD  EQU   X'08'           80-BYTE SEPARATOR MODE            89157\nX4F2     DS    X             RENDITION\nX4FDUPX  EQU   X'80'           DUPLEX (0=SIMPLEX)\nX4FPORT  EQU   X'08'           PORTRAIT (0=LANDSCAPE)\nX4F3     DS    X\nX4F4     DS    X\nX4F5     DS    X\nX4MAXLEN DS    AL1(&MAXLEN)     MAX WIDTH TO PROCESS             89157\nX4HEAD#  DS    AL1(&HCOUNT*16+&TCOUNT)   HEADER/TRAILER PAGES    89157\nX4@SET   DS    A             ADDRESS OF BASIC SETUP TEXT\nX4@PREJ  DS    A             ADDRESS OF JES2 PREFIX\nX4@POSJ  DS    A             ADDRESS OF JES2 POST-AMBLE\nX4@PRES  DS    A             ADDRESS OF SAM PREFIX (ON-LINE)\nX4@POSS  DS    A             ADDRESS OF SAM POST-AMBLE\n         DS    3A            SPARES                              89143\n*        FLOATING SETUP                                          89143\nX4JDLSCT DSECT ,                                                GP99354\nX4JDL    DS    CL8           JDL/JSL                             89143\nX4JDE    DS    CL8           JDE WITHIN JDL                      89143\nX4PAPER  DS    CL8           TYPE OF PAPER                       89143\nX4FEED   DS    CL8           FEED MODE                           89143\nX4FLASH  DS    CL8           FORMS FLASH (IBM CL4, XEROX CL6)    89355\n*        OPTIONAL SETUP COMMANDS                                 89143\nX4CMDSCT DSECT ,                                                GP99354\nX4CMD    DS    X             COMMAND LENGTH\nX4CFG    DS    X             COMMAND FLAGS\nX4CTX    DS    0C            COMMAND TEXT\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YCON": {"ttr": 14867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x02\\x01\\x00\\x02\\x7f\\x01\\x03$_\\x14\\x06\\x00O\\x00\\xa9\\x00\\x12\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-01-27T00:00:00", "modifydate": "2003-09-02T14:06:02", "lines": 79, "newlines": 169, "modlines": 18, "user": "GERHARD"}, "text": "         MACRO ,\n&NM      YCON  &STR,&END=,&BNDRY=H                      ADDED ON 89272\n         GBLB  &YCON@OP\n         GBLC  &YCON@NM\n         LCLA  &I,&J,&K,&L\n         LCLC  &L2,&LQ                                          GP00027\n&K       SETA  K'&STR\n         AIF   (T'&END NE 'O').TSTOPEN\n         AIF   (T'&STR EQ 'O').CLOSE\n         AIF   ('&STR'(1,1) EQ '*').CLOSE\n.TSTOPEN AIF   (&K EQ 0).COMLEN\n         AIF   ('&STR'(1,1) NE '''').COMLEN\n&I       SETA  2\n&J       SETA  &K-2\n&K       SETA  &J\n.LOOP    AIF   ('&STR'(&I,2) EQ '''''').SK2\n         AIF   ('&STR'(&I,2) EQ '&&').SK2\n&I       SETA  &I+1\n         AGO   .INC\n.SK2     ANOP  ,\n&I       SETA  &I+2\n&K       SETA  &K-1\n.INC     AIF   (&I LE &J).LOOP\n.COMLEN  AIF   (NOT &YCON@OP).NOPEN\n         MNOTE 4,'PRIOR YCON NOT TERMINATED'\n&YCON@OP SETB  0\n.NOPEN   AIF   ('&BNDRY' EQ 'H' OR '&BNDRY' EQ 'Y').NOBOUND\n         AIF   ('&BNDRY' NE 'X' AND '&BNDRY' NE 'C').DOBOUND\n&L2      SETC  'L2'\n         AGO   .NOBOUND\n.DOBOUND DS    0&BNDRY\n.NOBOUND AIF   (T'&END NE 'O').OPEN\n&I       SETA  K'&STR                                           GP00027\n         AIF   (&I LT 5).NOXLN                                  GP00027\n         AIF   ('&STR'(1,2) EQ 'CL' OR '&STR'(1,2) EQ 'XL').XCHR\n.NOXLN   ANOP  ,                                                GP00027\n         AIF   (&K EQ 0).REQSTR\n         AIF   ('&STR'(1,1) EQ '''').QSTR\n&NM      DC    Y&L2.(&K+4),C'&STR'                               89272\n         AGO   .MEND\n.XCHR    ANOP  ,                                                GP00027\n&I       SETA  &SYSNDX                                          GP00027\n&LQ      SETC  'L'''                                            GP00027\n&NM      DC    Y&L2.(&LQ.ZZDH&I)\nZZDH&I   DC    &STR                                             GP00027\n         AGO   .MEND                                            GP00027\n.QSTR    ANOP  ,\n&NM      DC    Y&L2.(&K+4),C&STR                                 89272\n         AGO   .MEND\n.OPEN    AIF   (&K NE 0).OPSTR\n&NM      DC    Y&L2.(&END-*)                                     89272\n         AGO   .SETOPEN\n.OPSTR   AIF   ('&STR'(1,1) EQ '''').OQSTR\n&I       SETA  K'&STR                                           GP00027\n         AIF   (&I LT 5).NOXLEN                                 GP00027\n         AIF   ('&STR'(1,2) EQ 'CL' OR '&STR'(1,2) EQ 'XL').OXCHR\n.NOXLEN  ANOP  ,                                                GP00027\n&NM      DC    Y&L2.(&END-*),C'&STR'                             89272\n         AGO   .SETOPEN\n.OXCHR   ANOP  ,                                                GP00027\n&NM      DC    Y&L2.(&END-*-2),&STR\n         AGO   .SETOPEN                                         GP00027\n.OQSTR   ANOP  ,\n&NM      DC    Y&L2.(&END-*),C&STR                               89272\n.SETOPEN ANOP  ,\n&YCON@NM SETC  '&END'\n&YCON@OP SETB  1\n         MEXIT ,\n.REQSTR  MNOTE 4,'TEXT STRING REQUIRED'\n         MEXIT ,\n.CLOSE   AIF   (&YCON@OP).WASOPEN\n         MNOTE 4,'YCON END OUT OF SEQUENCE'\n.WASOPEN AIF   ('&NM' EQ '' OR '&NM' EQ '&YCON@NM').BLAB\n&NM      EQU   *\n.BLAB    ANOP  ,\n&YCON@NM EQU   *\n&YCON@NM SETC  ''\n&YCON@OP SETB  0\n.MEND    MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YREGS": {"ttr": 14870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x12\\x01\\x1f\\x01\\x12\\x01\\x1f\\x01$\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2012-01-11T00:00:00", "modifydate": "2012-01-11T01:24:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO\n         YREGS ,\n         GBLA  &REGS\n         AIF   (&REGS EQ 1).MEND  ONLY EXPAND ONCE\n&REGS    SETA  1             MAINTAIN IBM COMPATIBILITY\n         LCLA  &I\n.LOUPE   AIF   (&I GT 15).MEND\nR&I      EQU   &I\n&I       SETA  &I+1\n         AGO   .LOUPE\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZI": {"ttr": 15106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x00\\x00\\x00\\x01\\x065_\\x01\\x065_#\\x19\\x00\\x08\\x00\\x08\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "80.00", "flags": 0, "createdate": "2006-12-21T00:00:00", "modifydate": "2006-12-21T23:19:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "GERHARD"}, "text": "         MACRO ,                                       ADDED ON GP05355\n&NM      ZI    &ADDRESS,&FLAGS\n.*   ADDED IN RESPONSE TO A THREAD ON IBM-MAIN ABOUT RESETTING FLAGS\n.*     THIS MACRO ALLOWS SPECIFICATION OF THE FLAGS TO BE RESET,\n.*     INSTEAD OF THE NI CONVENTION OF ALL BUT\n.*\n&NM      NI    &ADDRESS,255-(&FLAGS)\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT861/FILE861.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT861", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}