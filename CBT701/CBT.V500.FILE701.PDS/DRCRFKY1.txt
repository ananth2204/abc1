/* REXX *************************************************************/
/********************************************************************/
/*   EXEC : DRCRFK                                                  */
/*                                                                  */
/*   EXEC for tailoring DDL for DROP/CREATE FOREIGN KEYS            */
/********************************************************************/

/* PARSE ARGUMENTS FROM JCL SYSTSIN SEQUENCE                        */
/* if the sequence contains just SSID nad schema then -             */
/* drop/create ddl for all the schema tables will be created        */
/* if the sequence contains SSID,schema and some table names then - */
/* drop/create ddl for that tables  will be created                 */
PARSE ARG input
data = 'START'
argm=0
DO UNTIL data = ''
   argm=argm+1
   PARSE PULL data
   stem_arg.argm=data
END

/* argm = no. of arguments from jcl systsin seq */
argm=argm-1

/* gl.ssid means db2 subsystem identifier -mandatory parm.- */
gl.ssid=stem_arg.1

/* schema means Authorization ID of the owner -mandatory parm- */
schema=stem_arg.2

/* constants */
tables=''
zarez=','     /* zarez means comma */
zagrada=')'   /* zagrada means bracket */
in_tables='and (r.tbname in ('

/* HOW TO FORM SQL STATEMENT */
/* if no. of arg. < 3 the loop isn't to be executed */
DO i= 3 TO argm
 IF i=argm THEN zarez=''
 tables=STRIP(tables)' 'STRIP("'"STRIP(stem_arg.i)"'"zarez)
END
/* if no. of arg. < 3 the structure isn't to be executed */
IF argm>2 THEN
   in_tables=STRIP(in_tables)' 'STRIP(tables)' )' ,
   'or r.reftbname in ('STRIP(tables) ') )'
ELSE
   in_tables=''

say argm in_tables

/* SQL statement */
 statement="select r.creator,r.tbname,r.relname,c.keyseq,f.colname, " ,
 "r.reftbcreator, r.reftbname,  c.name, r.deleterule, r.colcount " ,
 "from SYSIBM.SYSRELS r,sysibm.syscolumns c,sysibm.sysforeignkeys f " ,
 "where (r.creator='"schema"' or r.reftbcreator='"schema"') " ,
 STRIP(in_tables) ,
 " and c.keyseq  <> 0 " ,
 "and r.reftbcreator=c.tbcreator " ,
 "and r.reftbname=c.tbname " ,
 "and r.creator=f.creator " ,
 "and r.TBNAME  = f.TBNAME " ,
 "and r.RELNAME = f.RELNAME " ,
 "and c.KEYSEQ=f.COLSEQ" ,
 "ORDER BY r.creator, r.tbname, r.relname, c.keyseq "

 say statement


/* INIT. lenght of the stem vars needed for the DROP/CREATE statement */

/* stem1_1 needs for the CREATE statement              */
/* it contains 3 lines 1. ALTER TABLE schema.tbname    */
/*                     2. FOREIGN KEY fk_name(         */
/*                     3. first column in FK           */
/* the value is set by app_stem1_1 procedure           */
stem1_1_l=3 /* means stem1_1 length */

/* stem1_2 needs for the CREATE statement                   */
/* it contains 0 lines if is the only one column in the FK  */
/* otherwise it contains (no. of cols in FK - 1) lines      */
/* the value is set by app_stem1_2 procedure                */
stem1_2_l=0 /* means stem1_2 initial length */

/* stem2_1 needs for the CREATE statement                 */
/* it contains 2 lines 1. REFERENCES refschema.reftbname( */
/*                     2. first column in reftbname       */
/* the value is set by app_stem2_1 procedure              */
stem2_1_l=2 /* means stem1_1 length */

/* stem2_2 needs for the CREATE statement                   */
/* it contains 0 lines if is the only one column in the FK  */
/* otherwise it contains (no. of cols in FK - 1) lines      */
/* the value is set by app_stem1_2 procedure                */
stem2_2_l=0 /* means stem2_2 initial length */

/* stem_ddl needs for the CREATE statement                   */
/* it is concatination of all the stem vars above            */
/* the value is set by app_stem_ddl procedure                */
stem_ddl_l=0 /* means stem_ddl initial length */

/* stem_ddl needs for the DROP statement                           */
/* it contains 1 line ALTER TABLE schema.tbname DROP FOREIGN KEY fk*/
/* the value is set by app_stem_drop procedure                     */
stem_drop_l=0 /* means stem_drop initial length */

/* Connect, declare, prepare, open */
CALL CDPO_SQL statement
DO WHILE sqlcode = 0
   /* fetch */
   CALL FETC_SQL
   IF sqlcode=100 then LEAVE
   /* take the values from the fetched row */
   CALL ASSIGN_STEM_VALUE_1

   /* select a combination for the drop/create FK statement creation */
   /* d_keyseq = The column's numeric position within the table's PK */
   /* colcount = Number of columns in the foreign key. */
   SELECT
      WHEN (d_keyseq=1 & colcount=1) THEN
      DO
        CALL app_stem_drop ';'
        CALL app_stem1_1 ''
        CALL app_stem2_1 ''
        CALL app_stem_ddl stem1_1, stem1_1_l
        CALL app_stem_ddl zagrada, 1
        CALL app_stem_ddl stem2_1, stem2_1_l
        CALL app_stem_ddl zagrada, 1
        CALL set_on_del deleterule
        CALL app_stem_ddl on_del, 1
        stem1_2_l=0
        stem2_2_l=0
      END
      WHEN (d_keyseq=1 & colcount>1) THEN
      DO
        CALL app_stem_drop ';'
        CALL app_stem1_1 ','
        CALL app_stem2_1 ','
      END
      WHEN (d_keyseq>1 & colcount>1) THEN
      DO
        IF d_keyseq=colcount THEN
         DO
          CALL app_stem1_2 ''
          CALL app_stem2_2 ''
          CALL app_stem_ddl stem1_1, stem1_1_l
          CALL app_stem_ddl stem1_2, stem1_2_l
          CALL app_stem_ddl zagrada, 1
          CALL app_stem_ddl stem2_1, stem2_1_l
          CALL app_stem_ddl stem2_2, stem2_2_l
          CALL app_stem_ddl zagrada, 1
          CALL set_on_del deleterule
          CALL app_stem_ddl on_del, 1
          stem1_2_l=0
          stem2_2_l=0
         END
        ELSE
         DO
          CALL app_stem1_2 ','
          CALL app_stem2_2 ','
         END
      END
      OTHERWISE
      END
END

/*Append DDL for CREATE FK*/
"EXECIO" stem_ddl_l "DISKW OUTDD2 (STEM stem_ddl."
"EXECIO 0 DISKW OUTDD2 (FINIS"

/*Append DDL for DROP FK*/
"EXECIO" stem_drop_l "DISKW OUTDD1 (STEM stem_drop."
"EXECIO 0 DISKW OUTDD1 (FINIS"

SAY '*************************************************************'
SAY '* PROCEDURE SUCCESSFULLY ENDED                              *'
SAY '*************************************************************'
EXIT 0

/*****************************************************************/
/*                 PROCEDURE SECTION                             */
/*****************************************************************/

APP_STEM1_1 :
ARG zarez
stem1_1.1='ALTER TABLE' STRIP(d_creator)'.'d_tbname
stem1_1.2='FOREIGN KEY' d_relname'('
stem1_1.3=d_colname zarez
RETURN

APP_STEM1_2 :
ARG zarez
stem1_2_l=stem1_2_l+1
stem1_2.stem1_2_l=d_colname zarez
RETURN

APP_STEM2_1 :
ARG zarez
stem2_1.1='REFERENCES' STRIP(p_creator)'.'p_tbname'('
stem2_1.2=p_colname zarez
RETURN

APP_STEM2_2 :
PARSE ARG zarez
stem2_2_l=stem2_2_l+1
stem2_2.stem2_2_l=p_colname zarez
RETURN

SET_ON_DEL :
ARG deletrule
IF DELETERULE = 'C' THEN AKCIJA='CASCADE  ;';
IF DELETERULE = 'N' THEN AKCIJA='SET NULL ;';
IF DELETERULE = 'R' THEN AKCIJA='RESTRICT ;';
IF DELETERULE = 'A' THEN AKCIJA='NO ACTION;';
on_del = 'ON DELETE 'AKCIJA
RETURN

APP_STEM_DDL :
ARG v_stem, lines
SELECT
WHEN v_stem=zagrada THEN
DO
   stem_ddl_l=stem_ddl_l+1
   stem_ddl.stem_ddl_l=zagrada
END
WHEN v_stem=on_del THEN
DO
   stem_ddl_l=stem_ddl_l+1
   stem_ddl.stem_ddl_l=on_del
END
OTHERWISE
DO i=1 TO lines
   INTERPRET 'v_stem.i='v_stem'.i'
   stem_ddl_l=stem_ddl_l+1
   stem_ddl.stem_ddl_l=v_stem.i
END
END
RETURN

APP_STEM_DROP :
ARG zarez
   stem_drop_l=stem_drop_l+1
   stem_drop.stem_drop_l=LEFT('ALTER TABLE' ,
   STRIP(d_creator)'.'d_tbname,40) ,
   'DROP FOREIGN KEY' STRIP(d_relname)zarez
RETURN

CDPO_SQL :
PARSE ARG statement
SQLDA. = ''
/* Set up REXX/SQL environment */
"SUBCOM DSNREXX"
IF rc THEN
  S_RC = RXSUBCOM('ADD','DSNREXX','DSNREXX')    /* ADD HOST CMD ENV */

ADDRESS DSNREXX 'CONNECT' gl.ssid
IF SQLCODE ¬= 0 THEN
     CALL errsqlca "CONNECT"

/* Execut REXX/SQL statement */
ADDRESS DSNREXX "EXECSQL DECLARE C1 CURSOR FOR S1"
IF SQLCODE ¬= 0 THEN
     CALL errsqlca "DECLARE C1 CURSOR FOR S1"

ADDRESS DSNREXX "EXECSQL PREPARE S1 INTO :SQLDA FROM :statement"
IF SQLCODE ¬= 0 THEN
     CALL errsqlca "PREPARE S1 FROM :statement"

ADDRESS DSNREXX "EXECSQL OPEN C1"
IF sqlcode ¬= 0 THEN
  CALL errsqlca "OPEN C1"
RETURN sqlcode

FETC_SQL :
ADDRESS DSNREXX "EXECSQL FETCH C1 USING DESCRIPTOR :SQLDA"
RETURN sqlcode

ASSIGN_STEM_VALUE_1 :
d_creator     = SQLDA.1.SQLDATA
d_tbname      = SQLDA.2.SQLDATA
d_relname     = SQLDA.3.SQLDATA
d_keyseq      = SQLDA.4.SQLDATA
d_colname     = SQLDA.5.SQLDATA
p_creator     = SQLDA.6.SQLDATA
p_tbname      = SQLDA.7.SQLDATA
p_colname     = SQLDA.8.SQLDATA
deleterule    = SQLDA.9.SQLDATA
colcount      = SQLDA.10.SQLDATA
RETURN


errsqlca:
 TRACE O
 SAY '** Error SQL statement - ' arg(1)
 SAY 'SQLCODE ='SQLCODE
 SAY 'SQLERRMC ='SQLERRMC
 SAY 'SQLERRP ='SQLERRP
 SAY 'SQLERRD ='SQLERRD.1',',
                     || SQLERRD.2',',
                     || SQLERRD.3',',
                     || SQLERRD.4',',
                     || SQLERRD.5',',
                     || SQLERRD.6 ;
 SAY 'SQLWARN ='SQLWARN.0',',
                     || SQLWARN.1',',
                     || SQLWARN.2',',
                     || SQLWARN.3',',
                     || SQLWARN.4',',
                     || SQLWARN.5',',
                     || SQLWARN.6',',
                     || SQLWARN.7',',
                     || SQLWARN.8',',
                     || SQLWARN.9',',
                     || SQLWARN.10 ;
    SAY 'SQLSTATE='SQLSTATE
