   This text comes from the @@DOC member of this pds.

   Welcome to my world.

   What I'm about to show you in the pages that follow is my
   Personal 64/20 z/OS Assembly Language Development Platform.
   The 64 in the name refers to having full support for 64-bit
   z/Architecture.  And the 20 represents the 20-Bit
   displacement instruction set with the 'Y' and 'G'
   instructions.   Those 20-bit instructions are awesomely
   powerful in that they allow for direct addressability of one
   megabyte of storage.  So, if we limit our coding to these
   instructions we can have 256 base registers for the price of
   one.  To support this reality, this system includes the SSY
   macros to be used as a replacement for the SS instruction
   set, which cannot be converted to 20-bit instructions due to
   the limitations of the hardware.  It would require 8-byte
   instructions and the hardware won't support that, because the
   PSW cannot represent an 8-byte instruction in the ILC, the
   Instruction Length Code.

   There are many features to this system, including Stacking DSA
   for your below-the-line storage, Stacking ATB for your
   above-the-bar storage, and label level tracing is built into
   the system, which makes debugging and maintenance a breeze.
   These traces support multiple TCBs with a separate SYSOUT
   dataset being dynamically allocated for each task in the
   address space.  And full support for programs running in
   ARMODE is also provided.

   So, it's a pretty robust system.  And it's the only true
   64/20 Development Platform in the world.  I know, because I
   had to write GETMAIN and FREEMAIN for above-the-bar storage,
   and you can't have a truly effective 64/20 system without
   that.  In ten years IBM has failed to produce that result, so
   I had to do it myself.  It's part of this system.   I hope
   you will find it as useful as I do.

What You Can and Cannot Do With This System

    You have to understand that this system, as distributed is
    subject to the GNU-GPL license, which means that it cannot be
    used to write or develop commercial code, which is to say
    code intended for sale or production use by any company.  You
    can't do that, the GNU-GPL precludes that, which is why I
    distributed it this way.


What you can't do.

    This is a macro based system, and as such anything you write
    using this platform will inherently include code that I have
    written which is subject to GNU-GPL and this makes anything
    that you write using this platform also subject to GNU-GPL.
    And what that means is that anything you write using this
    platform cannot be sold, it must be given away for free, as
    Free Software.  Understand?

    But even more than that, as I understand the GNU-GPL license,
    nothing that you write using this platform can be linked-in
    or included into any commercial application, because if it
    is, the entire application cannot be sold and must be given
    away for free, as Free Software.

    So, this is something you need to be very careful of, as a
    developer.  You cannot use the Free Software version of this
    code to write a subroutine or sub-program and include the
    object module into ANY commercial code.  So, if you do your
    boss will very likely be really pissed off and you will
    likely be fired, and rightfully so.  So don't do that.

    Now, with respect to this matter, I have a word to say to the
    Manager.  If somebody under you were to do something as
    stupid as this, placing my code into a production product,
    you have two options.  You really need to rebuke that boy or
    girl, and firing them would not be an inappropriate response.
    And while I do not require that, they have put your Company
    and your product at risk, and as such they would need to be
    called on the carpet-at the very least.

    So, in that event your two options are, remove the code from
    the commercial product and move on, or if it was really good
    code that you want to keep, you can purchase a commercial
    license for this development platform from me or my
    representative.  We'll talk about that in a separate section.
    But those are your two options in this case.

    Another thing that you can't do, well it's not that you can't
    do, but it would be very unwise to do, is to write any
    production code with this system.  You see, anything written
    with the GNU-GPL version of this code is by definition "Free
    Software."  So, if you're working for a bank and write
    something cool like an Investment Portfolio System, which I
    did once long ago, and use this system to do it?  Well, it's
    free software.  So any employee can take that code and give
    it away to any competitor for free.  Understand?  So, you
    really don't want use this system for production code.  In
    that event the company needs to purchase a Commercial License
    from me or my representative.

What you can do.

    Now that said, there are a lot of reasons to use this
    platform.  Any code that is not for sale or for production
    use is not a problem.  You can do whatever you want as long
    as you're not intending to sell what you write with this
    platform.  So, let's talk about what you can do.

    You can write any kind of test program that you like, and we
    all need to write test programs to test out our production
    code.  Well, I'm distributing some 30+ such programs with
    this system in the /TST library.

    When I was working with JES2, that group had two people where
    there whole job was to write test programs to test out new
    interfaces placed into the component, such as SAPI, Extended
    Status, and the like.  Such testers can certainly use this
    system to develop these kinds of programs, since they were
    never intended for sale in the first place.  And this is true
    for any company and any developer anywhere.  Yes, it's Free
    Software, but who gives a damn, it's a bloody test program.

    And this is a sanctioned use for the GNU-GPL version of this
    system.  You, as the developer will likely find yourself many
    times more productive than the developer sitting in the
    cubicle next to you, if you learn this system and use it.
    And in todays job market that can only work to your
    advantage, as it will benefit you and your company.

    The other really important use for this system is for your
    own education or edification.  We all have to remain current
    in our knowledge and understanding of the z/OS Operating
    System.  It's our job and continuing education is a part of
    that job.  Every few years IBM comes out with a new version
    of POPs (Principles of Operations), and every time a new
    version comes out you need to read it, and I mean cover to
    cover.  They're constantly adding new instructions.  I'm
    still not really clear about the damn PLO instruction.

    But this is a system that allows you to test out new
    instructions where you can use the #TRACE macro to get a
    clear and distinct understanding of how these new
    instructions work.  But it's not just new instructions.  If
    you haven't done an MGCR, write a test program that uses it.
    If you haven't written an SRB, do so.  If you haven't written
    a PC, write one, and use this system to do it.  You will
    learn more quickly for it.  Ongoing education is important,
    and something you need to do committedly if you're working in
    this field.  So, this is another legitimate and sanctioned
    use of this system.

    Another thing you can do is use it to debug your production
    code.  Then you can cut and paste the debugged code into your
    production code, as long as you don't include any of my
    macros in that production code.  This platform can help you
    to diagnose problems much more quickly, and help you to be
    much more productive than the other developers in your shop.
    And this is also a sanctioned use of the GNU-GPL version of
    this code.

