***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHTRSVC - Label Level Tracing SVC Glue Code                       *
*                                                                     *
*    This program gets control via SVC from the execution of a        *
*  #TRACE Macro.  It's primary purpose for existence is to fill in    *
*  the TRGDSECT area and call RDHTRACE to process the #TRACE trace    *
*  point.                                                             *
*    The TRGDSECT area is common for all implementations of #TRACE    *
*  including BASR, SVC and TRAP2.  This glue code allows RDHTRACE     *
*  to be independent of the implementation being used.  And having    *
*  multiple implementations allows me to use one stable version       *
*  to test a working version of RDHTRACE, or using the traces to      *
*  trace the traces.                                                  *
*                                                                     *
*                                                                     *
*  Date     FIX-ID Programmer Description                             *
*  ======== ====== ========== ======================================= *
*  02/02/06  M001  R. Harper  Module Developed                        *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
*
         IHAPSA  ,                   PSA  Mapping Macro
         CVT   DSECT=YES             CVT  Mapping Macro
         IHASTCB ,                   STCB Mapping macro
         IHAXSB ,                    XSB  Mapping macro
         DCBD DSORG=PS               DCB  Mapping Macto
         IHASDWA ,                   SDWA Mapping macro
*
         LSEDSECT ,                  Linkage Stack Entry DSECT
         TRGDSECT ,                  #TRACE Glue DSECT Area
*
         PRINT ON,NOGEN
*
***********************************************************************
* RDHTRSVC - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Define PSA Addressability
         USING TRGDSECT,R10            Trace TRG Addressability
         USING LSEN,TRGLSEN            Linkage Stack Entry
*
RDHTRSVC SVCNTRY SVCNO=166,            Program Entry Code              *
               BASE=(R11),             (Same)                          *
               TRACE=NO,               (Same)                          *
               IMP=BASR                (Same)
*
         LA    R10,DSATRG              Get TRGDSECT Addressability
         ST    R1,TRGTRPAD             Save Input Parms
*
** Program Mainline
*
         GOSUB INIT                    Perform Initialization
         GOSUB MAIN                    Do Main Processing
*
** Return to Caller
*
MAINEXIT DS    0H
         SVCEXIT RC=0                  Define Program Exit Code
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
         MVC   TRGEYECT,=C'TRGDSECT'   Set Eye Catcher
*
         GOSUB BLSE                    Build Linkage Stack Entry
*
         OI  TRGFLAG1,TRG1SVCI         Indicate SVC Implementation
         MVC TRGASCB,PSAAOLD           Address of Current ASCB
         MVC TRGTCB,PSATOLD            Address of Current TCB or Zero
*
** Return to Caller
*
INIT999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* MAIN- Program Main Processing                                       *
***********************************************************************
*
MAIN     SUBNTRY ,
         IF (CLC,TRGTRPAD,EQ,=C'TRAP') Called to Install DUCT Trap Rtn?
            CALL RDHTRAPI,             Install DUCT at PGMNTRY         *
               ((R10)),VL,             Pass TRGDSECT Address           *
               MF=(E,DSAPLIST)
         ELSE ,
            CALL RDHTRACE,             Call Trace Point Processor      *
               ((R10)),VL,             Pass TRGDSECT Address           *
               MF=(E,DSAPLIST)
         ENDIF ,
*
** Pop Off The Fake Linkage Stack Entry
*
         STCTG CR15,CR15,DSACR15       Get Linkage Stack Pointer
         LG    R2,DSACR15              (Same)
         SH    R2,=Y(LSENLNTH)         Back up to BAKR Entry
*
         LR    R0,R2                   Restore Saved Stack Entry
         LH    R1,=Y(LSENLNTH)         (Same)
         LA    R14,DSASLSEN            (Same)
         LR    R15,R1                  (Same)
         MVCL  R0,R14                  (Same)
*
L        USING LSEN,R2                 Obtain Addressability
         LARL  R15,MAIN999
         ST    R15,L.LSENPSW2+4        Set Address ot return to
         NC    L.LSENPSW1(2),=X'FF0E'  Return in Key0 Supervisor State
         PR    ,                       Pop The Stack
*
** Return to Caller
*
MAIN999  DS    0H
         SUBEXIT ,
         DROP  L                       Drop Temp Addressability
*
***********************************************************************
* BLSE- Build Linkage Stack Entry                                     *
***********************************************************************
*
*   The IMP=SVC glue code is different than the glue code for BASR
* and TRAP2 implementations, in that these latter implementations
* get control at the point of the trap and the first thing they do
* is to push an entry onto the linkage stack to save the current
* status so it can be reenstated after the trap.
*   The SVC implementation does not do this, the status is stored
* in the SVRB and the XSB so in order to keep the environment the
* same from the point of view of RDHTRACE, who does not know how
* he was entered, we build a stack entry the way it would have
* looked just prior to the execution of the SVC.
*   This way the code in RDHTRACE does not have to be aware of how
* it was entered.  Upon return from RDHTRACE we pop the linkage
* stack entry and return to the caller via the standard SVC path.
*
*
         USING RBSECT,R5               SVRB Addressability
P        USING RBSECT,R3               PRB  Addressability
         USING XSB,R4                  XSB  Addressability
*
BLSE     SUBNTRY ,
         LR    R4,R5                   Get XSB Addressability
         SH    R4,=Y(32)               (Same)
         L     R4,0(,R4)               (Same)
         L     R3,RBLINK               Get Address of PRB
*
** Obtain Old PSW
*
         MVC   LSENPSW1(4),P.RBOPSW      Get 1st Half of PSW
         MVC   LSENPSW2+4(4),P.RBOPSW+4  Get 2nd Half of PSW
         IF (TM,LSENPSW2+4,128,O)        If 31 Bit Address
            NI LSENPSW2+4,X'7F'          ..Turn Off Bit Here
            OI LSENPSW1+4,X'80'          ..Turn On  Bit Here
         ENDIF ,
*
** Obtain Access and General Registers
*
         MVC   LSENARGS,XSBARS         Get Access Registers
*
         MVC   LSENGR0(4),XSBG64H0     Get High Register Halfs
         MVC   LSENGR1(4),XSBG64H1     (Same)
         MVC   LSENGR2(4),XSBG64H2     (Same)
         MVC   LSENGR3(4),XSBG64H3     (Same)
         MVC   LSENGR4(4),XSBG64H4     (Same)
         MVC   LSENGR5(4),XSBG64H5     (Same)
         MVC   LSENGR6(4),XSBG64H6     (Same)
         MVC   LSENGR6(4),XSBG64H7     (Same)
         MVC   LSENGR8(4),XSBG64H8     (Same)
         MVC   LSENGR9(4),XSBG64H9     (Same)
         MVC   LSENGR10(4),XSBG64HA    (Same)
         MVC   LSENGR11(4),XSBG64HB    (Same)
         MVC   LSENGR12(4),XSBG64HC    (Same)
         MVC   LSENGR13(4),XSBG64HD    (Same)
         MVC   LSENGR14(4),XSBG64HE    (Same)
         MVC   LSENGR15(4),XSBG64HF    (Same)
*
         MVC   LSENGR0+4(4),RBGRS0     Get Low Register Halfs
         MVC   LSENGR1+4(4),RBGRS1     (Same)
         MVC   LSENGR2+4(4),RBGRS2     (Same)
         MVC   LSENGR3+4(4),RBGRS3     (Same)
         MVC   LSENGR4+4(4),RBGRS4     (Same)
         MVC   LSENGR5+4(4),RBGRS5     (Same)
         MVC   LSENGR6+4(4),RBGRS6     (Same)
         MVC   LSENGR7+4(4),RBGRS7     (Same)
         MVC   LSENGR8+4(4),RBGRS8     (Same)
         MVC   LSENGR9+4(4),RBGRS9     (Same)
         MVC   LSENGR10+4(4),RBGRS10   (Same)
         MVC   LSENGR11+4(4),RBGRS11   (Same)
         MVC   LSENGR12+4(4),RBGRS12   (Same)
         MVC   LSENGR13+4(4),RBGRS13   (Same)
         MVC   LSENGR14+4(4),RBGRS14   (Same)
         MVC   LSENGR15+4(4),RBGRS15   (Same)
*
** Copy Our Fake Stack Entry Onto Linkage Stack
*
         BAKR  R0,R0                   Push an Entry Onto The Stack
         STCTG CR15,CR15,DSACR15       Get Linkage Stack Pointer
         L     R2,DSACR15+4            (Same)
         SH    R2,=Y(LSENLNTH)         Back up to BAKR Entry
*
         LR    R0,R2                   Load Fr Address
         LH    R1,=Y(LSENLNTH)         Load Fr Length
         LA    R14,DSASLSEN            Load To Address
         LR    R15,R1                  Load To Lentgth
         MVCL  R14,R0                  Save This Stack Entry in DSA
*
         LR    R0,R2                   Load To Address
         LH    R1,=Y(LSENLNTH)         Load To Length
         LA    R14,LSEN                Load Fr Address
         LR    R15,R1                  Load Fr Lentgth
         MVCL  R0,R14                  Overlay Linkage Stack Entry
*
** Obtain Control Registers
*
         STCTG CR0,CR15,TRGCNTRL       Get Control Registers
*
** Return to Caller
*
BLSE999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constant Area
*
HEXFF    EQU   X'FF'
*
         CONEND ,                      Define End of Constant Area
*
***********************************************************************
* Define Dynamic Storage Area - DSA                                   *
***********************************************************************
*
         DSABEG ,
*
DSACR15  DS    AD                      Control Register CR15 - Stack
DSAPRWD1 DS    F
         DS    0D                      Doubleword Aligned
DSASLSEN DS    XL(LSENLNTH)            LSEN Save Area
         DS    0D                      Doubleword Aligned
DSATRG   DS    XL(TRGLNGTH)            Space for TRGDSECT
*
         DSAEND ,
         END ,
