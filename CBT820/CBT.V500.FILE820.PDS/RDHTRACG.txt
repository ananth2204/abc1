***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHTRACG - Glue Code for #TRACE BASR Implementation                *
*                                                                     *
*    This program gets control via BASR from the execution of a       *
*  #TRACE Macro.  It's sole purpose for existence is to fill in       *
*  the TRGDSECT area and call RDHTRACE to process the #TRACE trace    *
*  point.                                                             *
*    The TRGDSECT area is common for all implementations of #TRACE    *
*  including BASR, SVC and TRAP2.  This glue code allows RDHTRACE     *
*  to be independent of the implementation being used.                *
*                                                                     *
*                                                                     *
*  Date     FIX-ID Programmer Description                             *
*  ======== ====== ========== ======================================= *
*  02/02/06  M001  R. Harper  Module Developed                        *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                   PSA  Mapping Macro
         CVT   DSECT=YES             CVT  Mapping Macro
         IKJTCB  ,                   TCB  Mapping Macro
         IHASTCB ,                   STCB Mapping macro
         IHARB ,                     PRB  Mapping macro
         IHAXSB ,                    XSB  Mapping macro
         DCBD DSORG=PS               DCB  Mapping Macto
         IHASDWA ,                   SDWA Mapping macro
SDWLEN   EQU   SDWAEND-SDWA               ..Length of SDWA
*
         PRINT ON,NOGEN
         LSEDSECT ,                  Linkage Stack Entry DSECT
         TRPDSECT ,                  #TRACE Trap Point Dsect
         TRGDSECT ,                  #TRACE Glue DSECT Area
*
***********************************************************************
* RDHTRACG - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
         USING TRGDSECT,R10          Trace TRG Addressability
         USING LSEN,TRGLSEN          Linkage Stack Entry
         USING TRPDSECT,R9           Trace TRP Addressability
*
RDHTRACG PGMNTRY TYPE=SUB,           Establish Main Entry Point        *
               BASE=(R12,R11),       Base Registers                    *
               TRACE=NO,PRINT=GEN    No Traces Here - Just Yet
*
** Program MainLine
*
         LR    R14,R13               Save Our DSA Address
         EREG  R13,R13               Restore Caller's R13
         XC    8(4,R13),8(R13)       Zero Forward Pointer
         LR    R13,R14               Load Our DSA Address
*
         LA    R10,DSATRG            Get TRGDSECT Addressability
         ST    R1,TRGTRPAD           Save Input Parms
         LR    R9,R1                 Get TRPDSECT Addressability
*
         GOSUB INIT                  Do Initialization Processing
         GOSUB MAIN                  Do Main Processing
*
** Return to Caller
*
         LG    R0,LSENGR0            Restore General Registers
         LG    R1,LSENGR1            (Same)
         LG    R14,LSENGR14          (Same)
         LG    R15,LSENGR15          (Same)
         LAM   AR0,AR15,LSENAR0      Restore Access Registers
*
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
L        USING LSEN,R2               Real Linkage Stacl Address
*
INIT     SUBNTRY ,
         MVC   TRGEYECT,=C'TRGDSECT' Set Eye Catcher
         STCTG CR0,CR15,TRGCNTRL     Get Control Registers
*
** Assure Stack Entry is 64-Bit if Current PSW is 64-Bit
*
*    There is s problem with the linkage stack entry in 64-bit mode
*  in that the addressing mode bits in the return PSW are set to
*  zero by the BAKR and not preserved.  So if we are entered in
*  64-Bit mode we have to set the addressing mode bits in PSW in
*  the linkage stack entry.  Failing to do that will result in the
*  program receiving control in 24-Bit Mode upon the execution of
*  the PR instruction.  This is not good, therefore this workaround.
*
*
         EPSW  R14,R15               Get Current PSW First 64 Bits
         STM   R14,R15,DSAPSW        (Same)
         L     R2,TRGCR15+4          Get Linkage Stack Address
         SH    R2,=Y(LSENLNTH)       Back up to BAKR Entry
         IF (TM,DSAPSW+3,X'01',O)       If We're in Z-Arch Mode?
*temp       OC L.LSENPSW1+3(2),=X'0180'    Set AMODE=64 in Return PSW
         ENDIF
         DROP  L
*
** Extract Copy of Linkage Stack Entry
*
         L     R0,TRGCR15+4          Get Linkage Stack Address
         SH    R0,=Y(LSENLNTH)       Back up to BAKR Entry
         LA    R1,L'TRGLSEN          Length for MVCL
         LA    R14,TRGLSEN           Set To Address
         LR    R15,R1                Set To Length
         MVCL  R14,R0                Move Linkage Stack Entry
*
         LG    R2,LSENGR13               Get Callers R13
C        USING DSA,R2                    & Addressability
         MVC   LSENGR14(16),C.DSASAVER   Get Real Values for 14-1
         MVC   LSENGR0(16),C.DSASAVER+16 (Same)
*
         MVC TRGASCB,PSAAOLD         Address of Current ASCB
         MVC TRGTCB,PSATOLD          Address of Current TCB or Zero
         OI  TRGFLAG1,TRG1BSRI       Indicate BASR Implementation
         IF (OC,TRGTCB,TRGTCB,Z)     Are We in SRB Mode?
            OI TRGFLAG1,TRG1SRBM     Yes -> Indicate This
         ENDIF ,
*
** Return to Caller
*
INIT999  DS    0H
         SUBEXIT ,
         DROP  C                     Drop Temp Addressability
*
*=====================================================================*
** MAIN - Do Main Processing                                          *
*=====================================================================*
*
MAIN     SUBNTRY ,
         SAM31                       Enter RDHTRACE in 31-Bit Mode
         CALL  RDHTRACE,             Call Trace Point Processor        *
               ((R10)),VL,           Pass TRGDSECT Address             *
               MF=(E,DSAPLIST)
*
MAIN999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                    Define Constant Area
*
*
         CONEND ,                    Define End of Constant Area
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
DSAPSW   DS    D                     PSW On Entry
*
         DS    0D                    Doubleword Aligned
DSATRG   DS    XL(TRGLNGTH)          Space for TRGDSECT
*
         DSAEND ,                    Define DSA Suffix
         END   ,
