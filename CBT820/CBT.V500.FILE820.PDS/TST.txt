./ ADD NAME=ABNDBS01 0100-10050-10050-1200-00220-00220-00000-RHDTST
//RDHABBS1 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHABND1
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHABND1 - Program to test Abend Diagnostics using IMP=BASR        *
*                                                                     *
*             *** Program Specifically Intended to Abend ***          *
*                                                                     *
*    This program is s series of Csects some using PGMNTRY and some   *
*  simple O/S Savearea Csects.  This test will abend after the last   *
*  called program to demonstrate that the savearea chains, linkage    *
*  stack entries are all being properly printed for in the abend      *
*  diagnostics.                                                       *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
         IHACDE ,                      Define CDE Control Block
         IHAXTLST ,                    Define XTLST Control Block
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
         LSEDSECT ,                    Linkage Stack Dsect
*
***********************************************************************
* RDHABND1 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHABND1 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=BASR
*
** Program MainLine
*
 #TRACE MSG='We Are Here1'
         L     R15,=A(RDHCALL1)      Load Next Program
         BASR  R14,R15               Call Program
 #TRACE MSG='We Are Here2'
*
** Return to Caller
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHCALL1 - Called program 1 - Has Linkage Stack - TYPE=SUB          *
***********************************************************************
*
RDHCALL1 PGMNTRY TYPE=SUB,           Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=BASR
*
** Program MainLine
*

         LA    R1,DSA2SAVE           Pass Temp Savearea
         L     R15,=A(RDHCALL2)      Load Next Program
         BASR  R14,R15               Call Program
*
** Return to Caller
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
DSA2SAVE DS    9D                    Temp Savearea for RDHCALL2
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHCALL2 - Called Program 3 - Standard O/S Savearea                 *
***********************************************************************
*
RDHCALL2 CSECT ,
         J     CALL2STM              Branch Around Standard ID Area
         DC    YL1(L'CALL2ID)        Length of ID Area
CALL2ID  DC    C'RDHCALL2 - Assembled: &SYSDATE, &SYSTIME'
CALL2STM DS    0H
         STM   R14,R12,12(R13)       Save Callers Registers
         LR    R12,R15               Get base Register
         USING RDHCALL2,R12          (Same)
         LR    R11,R1                Get Temp Savearea From Caller
         ST    R11,8(,R13)           Save Ours in His
         ST    R13,4(,R11)           Save His in Ours
         LR    R13,R11               Set Our Save Area
*
         L     R15,=A(RDHCALL3)      Load Next Program
         BASR  R14,R15               Call Program
*
         L     R13,4(,R13)           Reload Callers Savearea
         LM    R14,R12,12(R13)       Load Callers Registers
         BR    R14                   -> Return
*
         LTORG ,                     Define Literal Pool
*
***********************************************************************
* RDHCALL3 - Called Program 3 - Has Linkage Stack - TYPE=MAIN         *
***********************************************************************
*
RDHCALL3 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=BASR
*
** Program MainLine
*
         LA    R1,DSA4SAVE           Pass Temp Savearea
         L     R15,=A(RDHCALL4)      Load Next Program
         BASR  R14,R15               Call Program
*
** Return to Caller
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
DSA4SAVE DS    9D                    Temp Savearea for RDHCALL2
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHCALL4 - Called Program 4 - Standard O/S Savearea                 *
***********************************************************************
*
RDHCALL4 CSECT ,
         J     CALL4STM              Branch Around Standard ID Area
         DC    YL1(L'CALL2ID)        Length of ID Area
CALL4ID  DC    C'RDHCALL4 - Assembled: &SYSDATE, &SYSTIME'
CALL4STM DS    0H
         STM   R14,R12,12(R13)       Save Callers Registers
         LR    R12,R15               Get base Register
         USING RDHCALL4,R12          (Same)
         LR    R11,R1                Get Temp Savearea From Caller
         ST    R11,8(,R13)           Save Ours in His
         ST    R13,4(,R11)           Save His in Ours
         LR    R13,R11               Set Our Save Area
*
         L     R15,=A(RDHCALL5)      Load Next Program
         BASR  R14,R15               Call Program
*
         L     R13,4(,R13)           Reload Callers Savearea
         LM    R14,R12,12(R13)       Load Callers Registers
         BR    R14                   -> Return
*
         LTORG ,                     Define Literal Pool
*
***********************************************************************
* RDHCALL5 - Called Program 5 - Has Linkage Stack - TYPE=MAIN         *
***********************************************************************
*
*
RDHCALL5 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=BASR,PRINT=GEN
*
** Program MainLine
*
         #TRACE MSG='We Have Entered RDHCALL5.'
*
** Return to Caller
*
         EX 0,*                ====> Force an Abend Here
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
         END   ,
./ ADD NAME=ABNDSV01 0100-10050-10050-1200-00221-00221-00000-RHDTST
//RDHABSV1 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHABND1
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHABND1 - Program to test Abend Diagnostics using IMP=SVC         *
*                                                                     *
*             *** Program Specifically Intended to Abend ***          *
*                                                                     *
*    This program is s series ofCsects some using PGMNTRY and some    *
*  simple O/S Savearea Csects.  This test will abend after the last   *
*  called program to demonstrate that the savearea chains, linkage    *
*  stack entries are all being properly printed.                      *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
         IHACDE ,                      Define CDE Control Block
         IHAXTLST ,                    Define XTLST Control Block
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
         LSEDSECT ,                    Linkage Stack Dsect
*
***********************************************************************
* RDHABND1 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHABND1 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               PRINT=GEN,            (Same)                            *
               IMP=SVC
*
** Program MainLine
*
 #TRACE MSG='We Are Here1'
         L     R15,=A(RDHCALL1)      Load Next Program
         BASR  R14,R15               Call Program
 #TRACE MSG='We Are Here2'
*
** Return to Caller
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHCALL1 - Called program 1 - Has Linkage Stack - TYPE=SUB          *
***********************************************************************
*
RDHCALL1 PGMNTRY TYPE=SUB,           Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=SVC
*
** Program MainLine
*

         LA    R1,DSA2SAVE           Pass Temp Savearea
         L     R15,=A(RDHCALL2)      Load Next Program
         BASR  R14,R15               Call Program
*
** Return to Caller
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
DSA2SAVE DS    9D                    Temp Savearea for RDHCALL2
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHCALL2 - Called Program 3 - Standard O/S Savearea                 *
***********************************************************************
*
RDHCALL2 CSECT ,
         J     CALL2STM              Branch Around Standard ID Area
         DC    YL1(L'CALL2ID)        Length of ID Area
CALL2ID  DC    C'RDHCALL2 - Assembled: &SYSDATE, &SYSTIME'
CALL2STM DS    0H
         STM   R14,R12,12(R13)       Save Callers Registers
         LR    R12,R15               Get base Register
         USING RDHCALL2,R12          (Same)
         LR    R11,R1                Get Temp Savearea From Caller
         ST    R11,8(,R13)           Save Ours in His
         ST    R13,4(,R11)           Save His in Ours
         LR    R13,R11               Set Our Save Area
*
         L     R15,=A(RDHCALL3)      Load Next Program
         BASR  R14,R15               Call Program
*
         L     R13,4(,R13)           Reload Callers Savearea
         LM    R14,R12,12(R13)       Load Callers Registers
         BR    R14                   -> Return
*
         LTORG ,                     Define Literal Pool
*
***********************************************************************
* RDHCALL3 - Called Program 3 - Has Linkage Stack - TYPE=MAIN         *
***********************************************************************
*
RDHCALL3 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=SVC
*
** Program MainLine
*
         LA    R1,DSA4SAVE           Pass Temp Savearea
         L     R15,=A(RDHCALL4)      Load Next Program
         BASR  R14,R15               Call Program
*
** Return to Caller
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
DSA4SAVE DS    9D                    Temp Savearea for RDHCALL2
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHCALL4 - Called Program 4 - Standard O/S Savearea                 *
***********************************************************************
*
RDHCALL4 CSECT ,
         J     CALL4STM              Branch Around Standard ID Area
         DC    YL1(L'CALL2ID)        Length of ID Area
CALL4ID  DC    C'RDHCALL4 - Assembled: &SYSDATE, &SYSTIME'
CALL4STM DS    0H
         STM   R14,R12,12(R13)       Save Callers Registers
         LR    R12,R15               Get base Register
         USING RDHCALL4,R12          (Same)
         LR    R11,R1                Get Temp Savearea From Caller
         ST    R11,8(,R13)           Save Ours in His
         ST    R13,4(,R11)           Save His in Ours
         LR    R13,R11               Set Our Save Area
*
         L     R15,=A(RDHCALL5)      Load Next Program
         BASR  R14,R15               Call Program
*
         L     R13,4(,R13)           Reload Callers Savearea
         LM    R14,R12,12(R13)       Load Callers Registers
         BR    R14                   -> Return
*
         LTORG ,                     Define Literal Pool
*
***********************************************************************
* RDHCALL5 - Called Program 5 - Has Linkage Stack - TYPE=MAIN         *
***********************************************************************
*
*
RDHCALL5 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=SVC
*
** Program MainLine
*
         #TRACE MSG='We Have Entered RDHCALL5.'
*
** Return to Caller
*
         EX 0,*                ====> Force an Abend Here
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
         END   ,
./ ADD NAME=ABNDTR01 0100-10050-10050-1200-00220-00220-00000-RHDTST
//RDHABTR1 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHABND1
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHABND1 - Program to test Abend Diagnostics using IMP=TRAP2       *
*                                                                     *
*             *** Program Specifically Intended to Abend ***          *
*                                                                     *
*    This program is s series ofCsects some using PGMNTRY and some    *
*  simple O/S Savearea Csects.  This test will abend after the last   *
*  called program to demonstrate that the savearea chains, linkage    *
*  stack entries are all being properly printed.                      *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
         IHACDE ,                      Define CDE Control Block
         IHAXTLST ,                    Define XTLST Control Block
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
         LSEDSECT ,                    Linkage Stack Dsect
*
***********************************************************************
* RDHABND1 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHABND1 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=TRAP2,PRINT=GEN
*
** Program MainLine
*
 #TRACE MSG='We Are Here1'
         L     R15,=A(RDHCALL1)      Load Next Program
         BASR  R14,R15               Call Program
 #TRACE MSG='We Are Here2'
*
** Return to Caller
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHCALL1 - Called program 1 - Has Linkage Stack - TYPE=SUB          *
***********************************************************************
*
RDHCALL1 PGMNTRY TYPE=SUB,           Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=TRAP2
*
** Program MainLine
*

         LA    R1,DSA2SAVE           Pass Temp Savearea
         L     R15,=A(RDHCALL2)      Load Next Program
         BASR  R14,R15               Call Program
*
** Return to Caller
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
DSA2SAVE DS    9D                    Temp Savearea for RDHCALL2
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHCALL2 - Called Program 3 - Standard O/S Savearea                 *
***********************************************************************
*
RDHCALL2 CSECT ,
         J     CALL2STM              Branch Around Standard ID Area
         DC    YL1(L'CALL2ID)        Length of ID Area
CALL2ID  DC    C'RDHCALL2 - Assembled: &SYSDATE, &SYSTIME'
CALL2STM DS    0H
         STM   R14,R12,12(R13)       Save Callers Registers
         LR    R12,R15               Get base Register
         USING RDHCALL2,R12          (Same)
         LR    R11,R1                Get Temp Savearea From Caller
         ST    R11,8(,R13)           Save Ours in His
         ST    R13,4(,R11)           Save His in Ours
         LR    R13,R11               Set Our Save Area
*
         L     R15,=A(RDHCALL3)      Load Next Program
         BASR  R14,R15               Call Program
*
         L     R13,4(,R13)           Reload Callers Savearea
         LM    R14,R12,12(R13)       Load Callers Registers
         BR    R14                   -> Return
*
         LTORG ,                     Define Literal Pool
*
***********************************************************************
* RDHCALL3 - Called Program 3 - Has Linkage Stack - TYPE=MAIN         *
***********************************************************************
*
RDHCALL3 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=TRAP2
*
** Program MainLine
*
         LA    R1,DSA4SAVE           Pass Temp Savearea
         L     R15,=A(RDHCALL4)      Load Next Program
         BASR  R14,R15               Call Program
*
** Return to Caller
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
DSA4SAVE DS    9D                    Temp Savearea for RDHCALL2
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHCALL4 - Called Program 4 - Standard O/S Savearea                 *
***********************************************************************
*
RDHCALL4 CSECT ,
         J     CALL4STM              Branch Around Standard ID Area
         DC    YL1(L'CALL2ID)        Length of ID Area
CALL4ID  DC    C'RDHCALL4 - Assembled: &SYSDATE, &SYSTIME'
CALL4STM DS    0H
         STM   R14,R12,12(R13)       Save Callers Registers
         LR    R12,R15               Get base Register
         USING RDHCALL4,R12          (Same)
         LR    R11,R1                Get Temp Savearea From Caller
         ST    R11,8(,R13)           Save Ours in His
         ST    R13,4(,R11)           Save His in Ours
         LR    R13,R11               Set Our Save Area
*
         L     R15,=A(RDHCALL5)      Load Next Program
         BASR  R14,R15               Call Program
*
         L     R13,4(,R13)           Reload Callers Savearea
         LM    R14,R12,12(R13)       Load Callers Registers
         BR    R14                   -> Return
*
         LTORG ,                     Define Literal Pool
*
***********************************************************************
* RDHCALL5 - Called Program 5 - Has Linkage Stack - TYPE=MAIN         *
***********************************************************************
*
*
RDHCALL5 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=TRAP2
*
** Program MainLine
*
         #TRACE MSG='We Have Entered RDHCALL5.'
*
** Return to Caller
*
         EX 0,*                ====> Force an Abend Here
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
         END   ,
./ ADD NAME=ABND64B1 0100-10050-10050-1200-00274-00274-00000-RHDTST
//RDH64AB1 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDH64AB1
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDH64AB1 - Test 64-Bit Abend Diagnostics                           *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         COPY  #MAC64
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         IHASDWA ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDH64AB1 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64AB1 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=R10,               (Same)                          *
               AMODE=64,               (Same)                          *
               RMODE=ANY,              (Same)                          *
               IMP=BASR,PRINT=GEN
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
 print gen
         CALL  RDH64SB1,               Call TYPE=SUB Program           *
               (CONPARM1,              Passing Parameters              *
               CONPARM2,               (Same)                          *
               DSAPARM1),              (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DSMPLIST)
         ORG *-2
         BASPM R14,R15
*
 print nogen
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
         MVC ATBP1,=CL64'Data in ATB Storage ATBP1.'
         MVC ATBP2,=CL64'Data in ATB Storage ATBP2.'
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
         LG  R10,DSAATBAD
         #TRACE DATA=('ATB Storage',0(R10),256)
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
CONPARM1 DC    CL20'This is a Parameter'
CONPARM2 DC    AD(TERM)
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
DSMPLIST DS     4AD
DSAPARM1 DS     D
*
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
ATBP1    DS    CL64
ATBP2    DS    CL64
         ATBEND ,                      Define ATB Suffix
         DROP   ,                      Drop Everything
*
***********************************************************************
*                                                                     *
** RDH64SB1 - Sub-Program 1                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               AMODE=31,IMP=BASR,      (Same)                          *
               RMODE=ANY,PRINT=GEN     (Same)
*
         LG    R10,DSAATBAD            Get ATB Storage Address
*
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
*
** Program MainLine
*
         GOSUB SUB1                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB1     SUBNTRY ,
         CALL  RDH64SB2,               Call TYPE=SUB Program           *
               ((R10),                 Passing Parameters              *
               MYDATA),                (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DS1PLIST)
         ORG *-2
         BASPM R14,R15
*
*
SUB1999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
MYDATA   DC    CL8'My Data'
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
DS1PLIST DS    4AD
         DSAEND ,                      Define DSA Suffix
*
***********************************************************************
*                                                                     *
** RDH64SB2 - Sub-Program 2                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=R10,               (Same)                          *
               AMODE=64,IMP=BASR,      (Same)                          *
               RMODE=ANY               (Same)
*
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
*
** Program MainLine
*
         GOSUB SUB2                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB2     SUBNTRY ,
         MVC ATBS1,=CL64'Data in ATB Storage ATBS1.'
         MVC ATBS2,=CL64'Data in ATB Storage ATBS2.'
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
         LG  R10,DSAATBAD
         #TRACE DATA=('ATB Storage',0(R10),256)
 ex 0,*
*
*
SUB2999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
ATBS1    DS    CL64
ATBS2    DS    CL64
         ATBEND ,                      Define ATB Suffix
         END   ,
./ ADD NAME=AM64BS01 0100-10050-10050-1200-00289-00289-00000-RHDTST
//RDH64AB1 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDH64AB1
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDH64AB1 - 64-Bit Adend Diagnostics Test Program                   *
*                                                                     *
*             *** This Program Intended to Abend ***                  *
*                                                                     *
*    This is a test program to test abend diagnostics for programs    *
*  running in AMODE(64).  In these cases we not only want to see the  *
*  standard diagnostics that we see with 31-bit programs which        *
*  includes DSA for all programs in the chain, we also want to see    *
*  the ATB storage for all programs in the chain.                     *
*    This program starts with an AMODE(64) TYPE=MAIN program that     *
*  then calls an AMODE(31) TYPE=SUB program sharing DSA, that then    *
*  calls an AMODE(64) TYPE=SUB program sharing DSA and sharing ATB    *
*  with the original TYPE=MAIN program.                               *
*    At that point we abend the program with a S0C3 and view the      *
*  abend diagnostics in TRCPRINT.                                     *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         IHASDWA ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDH64AB1 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64AB1 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=R10,               (Same)                          *
               AMODE=64,               (Same)                          *
               RMODE=ANY,              (Same)                          *
               IMP=BASR,PRINT=GEN
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         CALL  RDH64SB1,               Call TYPE=SUB Program           *
               (CONPARM1,              Passing Parameters              *
               CONPARM2,               (Same)                          *
               DSAPARM1),              (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DSMPLIST)
         ORG *-2
         BASPM R14,R15
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
         MVC    ATBP1,=CL64'This is Data in ATBP1'
         MVC    ATBP2,=CL64'This is More Data in ATBP2'
*
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
         #TRACE DATA=('ATB Storage',0(R10),256)
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
CONPARM1 DC    CL20'This is a Parameter'
CONPARM2 DC    AD(TERM)
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
DSMPLIST DS     4AD
DSAPARM1 DS     D
*
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
ATBP1    DS    CL64
ATBP2    DS    CL64
         ATBEND ,                      Define ATB Suffix
         DROP   ,                      Drop Everything
*
***********************************************************************
*                                                                     *
** RDH64SB1 - Sub-Program 1                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               AMODE=31,IMP=BASR,      (Same)                          *
               RMODE=ANY,PRINT=GEN     (Same)
*
         LG    R10,DSAATBAD            Get ATB Storage Address
*
         #TRACE DATA=('Parameters Input',0(R1),32)
         #TRACE MSG='Propogating ATB Storage Over an AMODE(31) Pgm.',  *
               REGS=(R10)
*
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
         SAM64
         #TRACE DATA=('ATB Storage',0(R10),256)
         SAM31
*
** Program MainLine
*
         GOSUB SUB1                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB1     SUBNTRY ,
         CALL  RDH64SB2,               Call TYPE=SUB Program           *
               ((R10),                 Passing Parameters              *
               MYDATA),                (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DS1PLIST)
         ORG *-2
         BASPM R14,R15
*
*
SUB1999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
MYDATA   DC    CL8'My Data'
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
DS1PLIST DS    4AD
         DSAEND ,                      Define DSA Suffix
*
***********************************************************************
*                                                                     *
** RDH64SB2 - Sub-Program 2                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=R10,               (Same)                          *
               AMODE=64,IMP=BASR,      (Same)                          *
               RMODE=ANY,PRINT=GEN     (Same)
*
         MVC   ATBS1,=CL64'This is Data in ATBP1'
         MVC   ATBS2,=CL64'This is More Data in ATBP2'
*
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
         #TRACE DATA=('ATB Storage',0(R10),256)
*
** Program MainLine
*
         GOSUB SUB2                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB2     SUBNTRY ,
         #SUICIDE  MSG='Mercy Killing'
*
*
SUB2999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
ATBS1    DS    CL64
ATBS2    DS    CL64
         ATBEND ,                      Define ATB Suffix
         END   ,
./ ADD NAME=AM64BS02 0100-10050-10050-1200-00288-00288-00000-RHDTST
//RDH64B02 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDH64B02
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDH64B02 - 64-Bit Program Calling Subroutines                      *
*                                                                     *
*    This is a test to exercise the code when a 64-bit program        *
*  calls other TYPE=SUB and TYPE=MAIN programs.                       *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         COPY  #MAC64
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         IHASDWA ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDH64B02 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64B02 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               AMODE=64,               (Same)                          *
               ABAS=(R10),             (Same)                          *
               RMODE=ANY,              (Same)                          *
               IMP=BASR
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         ESTAE 0                       Cancel ESTAE Recovery
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         CALL  RDH64SB1,               Call TYPE=SUB Program           *
               ((R10),                 Passing Parameters              *
               CONPARM1,               (Same)                          *
               CONPARM2,               (Same)                          *
               DSAPARM1),              (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DSMPLIST)
         ORG *-2
         BASPM R14,R15
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
         MVC   ATBAREA1,=CL64'This is My ATB Storage.'
         MVC   ATBAREA2,HEXTAB
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
CONPARM1 DC    CL20'This is a Parameter'
CONPARM2 DC    AD(TERM)
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
DSMPLIST DS     4AD
DSAPARM1 DS     D
*
         DSAEND ,                      Define DSA Suffex
*
***********************************************************************
* Define Above-The-Bar Stroage                                        *
***********************************************************************
*
         ATBBEG ,                      Define DSA Prefix
*
ATBAREA1 DS     CL64
ATBAREA2 DS     CL64
*
         ATBEND ,                      Define DSA Suffex
         DROP   ,                      Drop Everything
*
***********************************************************************
*                                                                     *
** RDH64SB1 - Sub-Program 1                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=(R10),             (Same)                          *
               AMODE=64,IMP=BASR,      (Same)                          *
               RMODE=ANY,PRINT=GEN     (Same)
*
         MVC ATBAREA3,=CL64'This is my ATB Area.'
         MVC ATBAREA4,=CL64'This is my ATB Area.'
         #TRACE DATA=('Parameters Input',0(R1),32),REGS=ALL
         #TRACE DATA=('ATB Storage',0(R10),256)
*
** Program MainLine
*
         GOSUB SUB1                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB1     SUBNTRY ,
         CALL  RDH64SB2,               Call TYPE=SUB Program           *
               ((R10),                 Passing Parameters              *
               MYDATA),                (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DS1PLIST)
         ORG *-2
         BASPM R14,R15
*
*
SUB1999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
MYDATA   DC    CL8'My Data'
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
DS1PLIST DS    4AD
         DSAEND ,                      Define DSA Suffex
*
 print gen
         ATBBEG ,                      Define DSA Prefix
ATBAREA3 DS     CL64
ATBAREA4 DS     CL64
         ATBEND ,                      Define DSA Suffex
 print nogen
*
***********************************************************************
*                                                                     *
** RDH64SB2 - Sub-Program 2                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=(R10),             (Same)                          *
               AMODE=64,IMP=BASR,      (Same)                          *
               RMODE=ANY               (Same)
*
         MVC ATBAREA5,=CL64'This is my ATB Area.'
         MVC ATBAREA6,=CL64'This is my ATB Area.'
         #TRACE DATA=('Parameters Input',0(R1),16),REGS=ALL
         #TRACE DATA=('ATB Storage',0(R10),256)
*
** Program MainLine
*
         GOSUB SUB2                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB2     SUBNTRY ,
*ex 0,*
*
*
SUB2999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define DSA Prefix
ATBAREA5 DS     CL64
ATBAREA6 DS     CL64
         ATBEND ,                      Define DSA Suffex
*
         END   ,
./ ADD NAME=AM64BS03 0100-10050-10050-1200-00454-00454-00000-RHDTST
//RDH64B03 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDH64B03
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDH64B03 - 64-Bit Program Calling Subroutines                      *
*                                                                     *
*    This is a test to exercise the code when a 64-bit program        *
*  calls other programs.                                              *
*    I discovered many things about 64-bit communications during this *
*  investigation, bu the end result were the BASPM, BAS31 and BAS64   *
*  macro constructs that are now in the #MAC64 copybook.              *
*                                                                     *
*  ==> Mission Accomplished <===                                      *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         COPY  #MAC64                  Copy 64-Bit Support Macros
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         IHASDWA ,
*
         LSEDSECT ,                    Linkage Stack Dsect
*
         PRINT ON,NOGEN
*
***********************************************************************
* RDH64B03 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64B03 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=(R10),             (Same)                          *
               AMODE=64,               (Same)                          *
               RMODE=ANY,              (Same)                          *
               IMP=BASR,ESTAE=YES,     (Same)                          *
               PRINT=GEN               (Same)
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
*temp    GOSUB TST1                    Basic Testing of 64-Bit Calls
*temp    GOSUB TST2                    Test for BASR W/Bit63 Set
*temp    GOSUB TST3                    Test for BAKR/PR Sequence
*temp    GOSUB TST4                    Can Key8 Modify LSEN?
*temp    GOSUB TST5                    Does VD Set Bit63 at Runtime?
         GOSUB TST6                    Test BASPM Concept
*
*
*
** Return to Caller
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST1 - First Testing  Processing                                   *
*=====================================================================*
*
*    What we're looking for here is the value of R14 after the
*  execution of a branch instruction when the program PSW is in
*  64-Bit amode.  What we want is for the return register to have
*  bit-63 set to one, but it seems that only the BASSM instruction
*  is working as expected.  The rest fail to set Bit-63.
*
*
TST1     SUBNTRY ,
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
         #TRACE MSG=('PSW in 64-Bit Mode: ',DSAWORKD)
*
         BAS   R14,TST1010
TST1010  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
         #TRACE MSG=('PSW After a BAS: ',DSAWORKD),REGS=(R14)
*
*
         LG    R15,=AD(TST1020)
         BASR  R14,R15
TST1020  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
         #TRACE MSG=('PSW After a BASR: ',DSAWORKD),REGS=(R14,R15)
*
*
         BAS   R14,TST1025
TST1025  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
         #TRACE MSG=('PSW After a BAS: ',DSAWORKD),REGS=(R14)
*
*
         LAY   R15,TST1030
         BALR  R14,R15
TST1030  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
        #TRACE MSG=('PSW After a BALR + LAY: ',DSAWORKD),REGS=(R14,R15)
*
*
         BAL   R14,TST1035
TST1035  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
        #TRACE MSG=('PSW After a BAL: ',DSAWORKD),REGS=(R14)
*
*
         LAE   R15,TST1040
         BASR  R14,R15
TST1040  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
        #TRACE MSG=('PSW After a BASR + LAE: ',DSAWORKD),REGS=(R14,R15)
*
*
         LARL  R15,TST1050
         BASR  R14,R15
TST1050  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
       #TRACE MSG=('PSW After a BASR + LARL: ',DSAWORKD),REGS=(R14,R15)
*
*
** BASSM works as expected.
*
         LG    R15,=AD(TST1060+1)
         BASSM R14,R15
TST1060  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
       #TRACE MSG=('PSW After a BASSM + LG: ',DSAWORKD),REGS=(R14,R15)
*
*
TST1999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST2 - Test Using BASR but Setting Bit63                           *
*=====================================================================*
*
*    This did not go well.  It seems that we can set bit63 in this
*  way, but when you return via BR instead of a PR you fail in a
*  specification.  Unless you clear bit63 before returning.
*
*
TST2     SUBNTRY ,
         LG    R15,=AD(TST2010)
         BASR  R14,0
         LA    R14,7(,R14)
         BASR  0,R15
TST2010  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
     #TRACE MSG=('PSW After a BASR W/B63-1: ',DSAWORKD),REGS=(R14,R15)
*
** Test Return to Odd Address Via BR - Fails S0C6 On Return
*
         LG    R15,=AD(TST2BR14)
         BASR  R14,0
         LA    R14,7(,R14)
*temp    BASR  0,R15
TST2020  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
     #TRACE MSG=('PSW After a BASR W/B63-2: ',DSAWORKD),REGS=(R14,R15)
*
** Test Return to Odd Address Via LA & BR - Fails
*        LA does clear Bit 31 but does not zero Bit63
*
         LG    R15,=AD(TST2LABR)
         BASR  R14,0
         LA    R14,7(,R14)
*temp    BASR  0,R15
TST2030  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
     #TRACE MSG=('PSW After a BASR W/B63-2: ',DSAWORKD),REGS=(R14,R15)
*
** Test Return to Odd Address Via NI & BR - Works.
*
*    This option works but is undesirable.  I had it in mind to
*  OPSYN out BASR and replace BASR with a macro.  But the fact that
*  you get a S0C6 on return if you don't zero bit63 is a problem.
*    So, What's Next?
*
*
         LG    R15,=AD(TST2NIBR)
         BASR  R14,0
         LA    R14,7(,R14)
         BASR  0,R15
TST2040  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
     #TRACE MSG=('PSW After a BASR W/B63-3: ',DSAWORKD),REGS=(R14,R15)
*
*
TST2999  DS    0H
         SUBEXIT ,
*
TST2BR14 BR    R14
*
TST2LABR LA    R14,0(,R14)
         BR    R14
*
TST2NIBR NILL  R14,X'FFFE'
         BR    R14
*
*=====================================================================*
** TST3 - Test With BAKR Issueing the Call                            *
*=====================================================================*
*
*    This works but is also not a desirable method because it requires
*  different calling mechanisms for 64-64, 64-31, 31-64 and 31-31.
*  When what is desired is one method that would work for all amodes.
*
TST3     SUBNTRY ,
         XGR   R14,R14
         LG    R15,=AD(TST3PR1)
         BAKR  0,R15
TST3010  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
     #TRACE MSG=('PSW After a BAKR W/B63-1: ',DSAWORKD),REGS=(R14,R15)
*
*
*
TST3999  DS    0H
         SUBEXIT ,
*
TST3PR1  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
     #TRACE MSG=('PSW After a BAKR-1: ',DSAWORKD),REGS=(R14,R15)
         PR
*
*=====================================================================*
** TST4 - Can a Key8 PROB Program Modify The Linkage Stack?           *
*=====================================================================*
*
*  Answer: No, can't do STCTL, privalaged Instruction
*
*
TST4     SUBNTRY ,
         MODESET KEY=NZERO,MODE=PROB   Chunk Down
*
         STCTL CR15,CR15,DSACR15       Get CR15 - Linkage Stack Ptr
         L     R15,DSACR15
         SH    R15,=Y(LSENLNTH)        Point at Our Entry
         #TRACE DATA=('LSEN Entry',0(R15),LSENLNTH)
*
*
TST4999  DS    0H
         MODESET KEY=ZERO,MODE=SUP     Chunk Up
         SUBEXIT ,
*
*=====================================================================*
** TST5 - Does VC Set Bit63 at Runtime?                               *
*=====================================================================*
*
TST5     SUBNTRY ,
*
         L     R15,TESTVD1
         BSM   R15,0
         #TRACE REGS=(R15),MSG='4-Byte VCON in R15'
*
         LG    R15,TESTVD2
         BSM   R15,0
         #TRACE REGS=(R15),MSG='8-Byte VCON in R15'
*
TST5999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST6 - Test BASPM - Branch & Save & Preseve Mode Concept           *
*=====================================================================*
*
TST6     SUBNTRY ,
*
** BASPM When AMODE=64
*
         PRINT GEN
         LG    R15,=AD(TST6010)
         BASPM R14,R15
         PRINT NOGEN
TST6010  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
         #TRACE MSG=('PSW After a BASPM 14,15 in AMODE64: ',DSAWORKD), *
               REGS=(R14,R15)
*
** BASPM When AMODE=31
*
         SAM31 ,
         PRINT GEN
         LG    R15,=AD(TST6020)
         BASPM R14,R15
         PRINT NOGEN
TST6020  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
         #TRACE MSG=('PSW After a BASPM 14,15 in AMODE31: ',DSAWORKD), *
               REGS=(R14,R15)
         SAM64 ,
*
** BAS31 To Call a 31-Bit Program From 64-Bit
*
         PRINT GEN
         LG    R15,=AD(TST6030)
         BAS31 R14,R15
         PRINT NOGEN
TST6030  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
         #TRACE MSG=('PSW After a BAS31 14,15 in AMODE64: ',DSAWORKD), *
               REGS=(R14,R15)
*
** BAS64 To Call a 64-Bit Program From 31-Bit
*
         PRINT GEN
         LG    R15,=AD(TST6040)
         BAS64 R14,R15
         PRINT NOGEN
TST6040  DS    0H
         EPSW  R0,R1
         STM   R0,R1,DSAWORKD
         #TRACE MSG=('PSW After a BAS64 14,15 in AMODE31: ',DSAWORKD), *
               REGS=(R14,R15)
         SAM64 ,
*
*
TST6999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
CONPARM1 DC    CL20'This is a Parameter'
CONPARM2 DC    AD(TERM)
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
*        DC    AD(TESTAD+1)            Test Constant Generation
TESTAD   DC    AD(TESTAD+1)            AD - Works
*TESTVD  DC    VD(RDH64B03+1)          VD - Fails
TESTVD1  DC    V(RDH64B03)
TESTVD2  DC    VD(RDH64B03)
*
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
DSMPLIST DS    4AD
DSAPARM1 DS    D
*
DSACR15  DS    A
*
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
         ATBEND ,                      Define ATB Suffex
*
         END   ,
./ ADD NAME=AM64BS04 0100-10050-10050-1200-00265-00265-00000-RHDTST
//RDH64B04 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDH64B04
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDH64B04 - 64-Bit Program Calling Subroutines                      *
*                                                                     *
*    This is a test for a MAIN(64) program calling a SUB(31) program  *
*  which calls a SUB(64) program, with IMP=BASR.                      *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         IHASDWA ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDH64B04 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64B04 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=(R10),             (Same)                          *
               AMODE=64,               (Same)                          *
               RMODE=ANY,              (Same)                          *
               IMP=BASR,PRINT=GEN
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         ESTAE 0                       Cancel ESTAE Recovery
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         CALL  RDH64SB1,               Call TYPE=SUB Program           *
               ((R10),                 Passing Parameters              *
               CONPARM1,               (Same)                          *
               CONPARM2,               (Same)                          *
               DSAPARM1),              (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DSMPLIST)
         ORG *-2
         BASPM 14,15
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
         #TRACE DATA=('ATB Storage',0(R10),256)
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
CONPARM1 DC    CL20'This is a Parameter'
CONPARM2 DC    AD(TERM)
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
DSMPLIST DS     4AD
DSAPARM1 DS     D
*
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
ATBPLIS1 DS    4AD
         ATBEND ,                      Define ATB Suffix
         DROP   ,                      Drop Everything
*
***********************************************************************
*                                                                     *
** RDH64SB1 - Sub-Program 1                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               AMODE=31,IMP=BASR,      (Same)                          *
               RMODE=ANY,PRINT=GEN     (Same)
*
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
*
** Program MainLine
*
         GOSUB SUB1                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB1     SUBNTRY ,
         CALL  RDH64SB2,               Call TYPE=SUB Program           *
               ((R10),                 Passing Parameters              *
               MYDATA),                (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DS1PLIST)
         ORG *-2
         BASPM 14,15
*
*
SUB1999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
MYDATA   DC    CL8'My Data'
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
DS1PLIST DS    4AD
         DSAEND ,                      Define DSA Suffex
*
***********************************************************************
*                                                                     *
** RDH64SB2 - Sub-Program 2                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=(R10),             (Same)                          *
               AMODE=64,IMP=BASR,      (Same)                          *
               RMODE=ANY               (Same)
*
         #TRACE DATA=('Parameters Input',0(R1),16),REGS=ALL
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
         #TRACE DATA=('ATB Storage',0(R10),256)
*
** Program MainLine
*
         GOSUB SUB2                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB2     SUBNTRY ,
*ex 0,*
*
*
SUB2999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
ATBPLIS2 DS    4AD
         ATBEND ,                      Define ATB Suffix
         END   ,
./ ADD NAME=AM64BS05 0100-10050-10050-1200-00263-00263-00000-RHDTST
//RDH64B05 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDH64B05
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDH64B05 - 64-Bit Program Calling Subroutines                      *
*                                                                     *
*    This is a test for a MAIN(31) program calling a SUB(64) program  *
*  which calls a SUB(31) program, with IMP=BASR.                      *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         COPY  #MAC64
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         IHASDWA ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDH64B05 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64B05 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               AMODE=31,               (Same)                          *
               RMODE=ANY,              (Same)                          *
               IMP=BASR,PRINT=GEN
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         ESTAE 0                       Cancel ESTAE Recovery
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         CALL  RDH64SB1,               Call TYPE=SUB Program           *
               (CONPARM1,              Passing Parameters              *
               CONPARM2,               (Same)                          *
               DSAPARM1),              (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DSMPLIST)
         ORG *-2
         BASPM 14,15
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
CONPARM1 DC    CL20'This is a Parameter'
CONPARM2 DC    AD(TERM)
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
DSMPLIST DS     4AD
DSAPARM1 DS     D
*
         DSAEND ,                      Define DSA Suffex
         DROP   ,                      Drop Everything
*
***********************************************************************
*                                                                     *
** RDH64SB1 - Sub-Program 1                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ABAS=(R10),             (Same)                          *
               AMODE=64,IMP=BASR,      (Same)                          *
               RMODE=ANY,PRINT=GEN     (Same)
*
         MVC   0(8,R10),=C'ATBDSECT'
         MVC   16(16,R10),HEXTAB
*
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
         #TRACE DATA=('Parameters Input',0(R1),32),REGS=ALL
         #TRACE DATA=('ATB Storage',0(R10),256)
*
** Program MainLine
*
         GOSUB SUB1                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB1     SUBNTRY ,
         CALL  RDH64SB2,               Call TYPE=SUB Program           *
               ((R10),                 Passing Parameters              *
               MYDATA),                (Same)                          *
               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *
               MF=(E,DS1PLIST)
         ORG *-2
         BASPM 14,15
*
*
SUB1999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
MYDATA   DC    CL8'My Data'
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
DS1PLIST DS    4AD
         DSAEND ,                      Define DSA Suffix
*
         ATBBEG ,                      Define ATB Prefix
ATBPLIST DS    4AD
         ATBEND ,                      Define ATB Suffix
*
***********************************************************************
*                                                                     *
** RDH64SB2 - Sub-Program 2                                           *
*                                                                     *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               AMODE=31,IMP=BASR,      (Same)                          *
               RMODE=ANY               (Same)
*
         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)
*
** Program MainLine
*
         GOSUB SUB2                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** SUB1 - Main Processing Routine                                     *
*=====================================================================*
*
SUB2     SUBNTRY ,
*ex 0,*
*
*
SUB2999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constants Prefix
         CONEND ,                      Define Constants Suffix
*
         DSABEG ,                      Define DSA Prefix
         DSAEND ,                      Define DSA Suffex
         END   ,
./ ADD NAME=ARMDBS01 0100-10050-10050-1200-00616-00616-00000-RHDTST
//RDHARB01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHARB01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHARB01 - Test Program for for ARMODE Programs with IMP=BASR      *
*                                                                     *
*    This program will test the situation where the data we wish      *
*  to display is in a different address space or dataspace.  This     *
*  The program will be in ARMODE when executing the #TRACE and        *
*  RDHTRACE will trigger off that bit in the PSW to determine if      *
*  it needs to go into ARMODE in order to access the data to be       *
*  written to the traces.                                             *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASVT ,                     Define ASVT DSECT
         IHAASCB ,                     Define ASCB DSECT
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     Define ASSB DSECT
         IHAASTE ,                     Define ASTE DSECT
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
         DUCDSECT                      Define DUCT DSECTs
         PRINT ON,NOGEN
*
***********************************************************************
* RDHARB01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
         USING DSPDSECT,R9           Establish Addressability
*
RDHARB01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=BASR
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB WTOR                    Issue WTOR & Wait for Response
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
*   We have to first obtain a Play Page to move data from real
* storage locations where this data is stored because the #TRACE
* macro has yet to be enhanced to display real storage locations
* or to access data in AR mode.
*
INIT     SUBNTRY ,
         GETMAIN RU,LV=PLAYPGLN,       Obtain 4K for a Play Page       *
               BNDRY=PAGE              (Same)
         ST    R1,DSAPLAYP             Save Play Page Address
*
** Show ASTE from CR5 and DUCT from CR2
*
         STCTG CR0,CR15,DSACNTRL       Store Control Registers
         #TRACE DATA=('Control Registers On Entry',DSACNTRL,16*8)
*
         LG    R3,DSACNTRL+5*8         Get Address of Primary ASCE
         L     R2,DSAPLAYP             Set To Address
         LH    R4,=Y(64)               Set Length
         MFREAL 0(R2),0(R3),           Show me the Segment Table       *
               LEN=(R4)                (Same)
         #TRACE DATA=('ASTE From CR5',0(R2),64),REGS=(R3)
*
         LG    R3,DSACNTRL+2*8         Get Address of DUCT
         L     R2,DSAPLAYP             Set To Address
         LH    R4,=Y(DUCTLNTH)         Set Length
         MFREAL 0(R2),0(R3),           Show me the Segment Table       *
               LEN=(R4)                (Same)
         L     R3,DUCTDUAL-DUCTO(,R2)  Get Real Address of DUAL
         ST    R3,DSADUALD             Address of DUAL From Duct
*
** Make Us non-Swapable - Required for Common Dataspaces
*
         XR    R1,R1                   Swapping Out This ASID
         SYSEVENT TRANSWAP             Make Us Noon-Swapable
*
** Return to Caller
*
INIT999  DS    0H
         SUBEXIT ,
*
K        EQU   1024
PLAYPGLN EQU   4*K
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
         SYSEVENT OKSWAP               Remove Non-Swappability
*
         L     R2,DSAPLAYP             Get Play Page Address
         FREEMAIN RU,LV=PLAYPGLN,      Free Storage for Segment Table  *
               A=(R2)                  (Same)
*
         GOSUB DDSP                    Delete Test Dataspaces
*
** Return to Caller
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** WTOR - issue WTOR & Wait for Response                              *
*=====================================================================*
*
*   This routine alllows me to stop after initializing the environment
* providing the opportunity to dump the address space and view things
* under IPCS.
*
WTOR     SUBNTRY ,
         MVC   DSAWTOR,RWTOR
*temp    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *
               DSAWORKD,8,DSAECBWT,MF=(E,DSAWTOR)
*temp    WAIT ECB=DSAECBWT           Wait for operator Response
*
** Return to Caller
*
WTOR999  DS    0H
         SUBEXIT ,
*
RWTOR    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *
               *-*,8,*-*,MF=L
RWTORL   EQU   *-RWTOR
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         GOSUB DASTB                   Display Tables Before
         GOSUB CDSP                    Create Test Dataspaces
         GOSUB DASTA                   Display Tables After
*
         #TRACE MSG=' ',NOHEAD=YES
         #TRACE DATA=('Single STKN/ORGN/ALET 1',DSA1STKN,32),NOHEAD=YES
         #TRACE DATA=('Common STKN/ORGN/ALET 2',DSA2STKN,32),NOHEAD=YES
         #TRACE DATA=('All    STKN/ORGN/ALET 3',DSA3STKN,32),NOHEAD=YES
         #TRACE MSG=' ',NOHEAD=YES
*
** Test Printing Data From Dataspace With #TRACE
*
         GOSUB TEST                    #TRACE in ARMODE Testing Here
*
** Return to Caller
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TEST - Test #TRACE Macro in an ARMODE Program                      *
*=====================================================================*
*
TEST     SUBNTRY ,
         XGR   R2,R2                   Dataspace Starts at Loc Zero
         SAC   512                     Enter ARMADE
*
** Test DATA= Getting Data From Dataspace
*
         #TRACE MSG='Testing DATA= Parameter With Data in Dataspace.'
         LAM   AR2,AR2,DSA1ALET        Load ALET for Dataspace 1
         #TRACE DATA=('Data From Dataspace 1',0(R2),128)
*
         LAM   AR2,AR2,DSA2ALET        Load ALET for Dataspace 2
         #TRACE DATA=('Data From Dataspace 2',0(R2),128)
*
         LAM   AR2,AR2,DSA3ALET        Load ALET for Dataspace 3
         #TRACE DATA=('Data From Dataspace 3',0(R2),128)
*
** Test MSG= Getting Variable Data From Dataspace
*
         #TRACE MSG=('Showing Dataspace CL8 Data: ',DSPWKCL8)
         #TRACE MSG=('Showing Dataspace ZL8 Data: ',DSPWKZL8)
         #TRACE MSG=('Showing Dataspace XL8 Data: ',DSPWKXL8)
         #TRACE MSG=('Showing Dataspace WKF Data: ',DSPWORKF)
         #TRACE MSG=('Showing Dataspace WKH Data: ',DSPWORKH)
*
         #TRACE MSG=('Showing Dataspace PL8 Data: ',DSPWKPL8) Bug
*
         SAC   000                     Exit  ARMADE
*
** Return to Caller
*
TEST999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** CDSP - Create a Few of Data Spaces                                 *
*=====================================================================*
*
CDSP     SUBNTRY MSG='Creating Dataspaces'
*
** Build RDHDSP01 - SCOPE=SINGLE
*
         DSPSERV CREATE,           -*- Create a Data Space             *
               NAME==C'RDHDSP01',      ..Name                          *
               STOKEN=DSA1STKN,        ..Stoken Returned               *
               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *
               ORIGIN=DSA1ORGN,        ..Starting at Zero              *
               SCOPE=SINGLE,           ..Local Dataspace               *
               MF=(E,DSADSPL)
*
         LA    R3,DSA1STKN             Point at Dataspace STOKEN
         XC    DSAALE,DSAALE           Zero Parameter Area
         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *
               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *
               ALET=(R4),              Output ALET address             *
               CHKEAX=NO,              Don't check EAX table           *
               CHKPT=IGNORE,           Don't inhibit CHKPTs            *
               AL=PASN,                Create ALET on PASN list        *
               MF=(E,DSAALE)           Execute form
         ST    R4,DSA1ALET             Save ALET Value
*
         LA    R3,DSA1STKN             Point at Dataspace STOKEN
         XC    DSAALE,DSAALE           Zero Parameter Area
         ALESERV ADD,              -*- Get ALET for Dataspace - DUAL   *
               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *
               ALET=(R4),              Output ALET address             *
               CHKEAX=NO,              Don't check EAX table           *
               CHKPT=IGNORE,           Don't inhibit CHKPTs            *
               AL=WORKUNIT,            Create ALET on PASN list        *
               MF=(E,DSAALE)           Execute form
         ST    R4,DSA1ALED             Save ALET Value
*
         LAM   AR0,AR15,=16A(0)    -*- Initialize The Dataspace
         SAC   512                     Shift Into AR Mode
         LAM   AR2,AR2,DSA1ALET        Get First ALET
         XR    R2,R2                   Start at Location Zero
         MVC   0(8,R2),=C'RDHDSP01'    Put Eyecatcher in Dataspace
         LAM   AR2,AR2,DSA1ALED        Get DUAL  ALET
         MVC   8(8,R2),=C'DUALALET'    Put Eyecatcher in Dataspace
         LAE   R9,0(,R2)
         GOSUB PDSP                    Populate With test Data
         SAC   000                     Back Into Primary Mode
*
** BUILD RDHDSP02 - SCOPE=COMMON
*
         DSPSERV CREATE,           -*- Create a Data Space             *
               NAME==C'RDHDSP02',      ..Name                          *
               STOKEN=DSA2STKN,        ..Stoken Returned               *
               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *
               ORIGIN=DSA2ORGN,        ..Starting at Zero              *
               SCOPE=COMMON,           ..Common Database               *
               MF=(E,DSADSPL)
*
         LA    R3,DSA2STKN             Point at Dataspace STOKEN
         XC    DSAALE,DSAALE           Zero Parameter Area
         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *
               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *
               ALET=(R4),              Output ALET address             *
               CHKEAX=NO,              Don't check EAX table           *
               CHKPT=IGNORE,           Don't inhibit CHKPTs            *
               AL=PASN,                Create ALET on PASN list        *
               MF=(E,DSAALE)           Execute form
         ST    R4,DSA2ALET             Save ALET Value
*
         SAC   512                 -*- Initialize the Dataspace
         LAM   AR2,AR2,DSA2ALET        Get First ALET
         XR    R2,R2                   Start at Location Zero
         MVC   0(8,R2),=C'RDHDSP02'    Put Eyecatcher in Dataspace
         MVC   8(8,R2),=C'PASNALET'    Put Eyecatcher in Dataspace
         LAE   R9,0(,R2)
         GOSUB PDSP                    Populate With test Data
         SAC   000                     Back Into Primary Mode
*
** BUILD RDHDSP03 - SCOPE=ALL
*
         DSPSERV CREATE,           -*- Create a Data Space             *
               NAME==C'RDHDSP03',      ..Name                          *
               STOKEN=DSA3STKN,        ..Stoken Returned               *
               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *
               ORIGIN=DSA3ORGN,        ..Starting at Zero              *
               SCOPE=ALL,              ..An All Dataspace              *
               MF=(E,DSADSPL)
*
         LA    R3,DSA3STKN             Point at Dataspace STOKEN
         XC    DSAALE,DSAALE           Zero Parameter Area
         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *
               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *
               ALET=(R4),              Output ALET address             *
               CHKEAX=NO,              Don't check EAX table           *
               CHKPT=IGNORE,           Don't inhibit CHKPTs            *
               AL=PASN,                Create ALET on PASN list        *
               MF=(E,DSAALE)           Execute form
         ST    R4,DSA3ALET             Save ALET Value
*
         LA    R3,DSA3STKN             Point at Dataspace STOKEN
         XC    DSAALE,DSAALE           Zero Parameter Area
         ALESERV ADD,              -*- Get ALET for Dataspace - DUAL   *
               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *
               ALET=(R4),              Output ALET address             *
               CHKEAX=NO,              Don't check EAX table           *
               CHKPT=IGNORE,           Don't inhibit CHKPTs            *
               AL=WORKUNIT,            Create ALET on PASN list        *
               MF=(E,DSAALE)           Execute form
         ST    R4,DSA3ALED             Save ALET Value
*
         SAC   512                 -*- Initialize the Dataspace
         LAM   AR2,AR2,DSA3ALET        Get First ALET
         XR    R2,R2                   Start at Location Zero
         MVC   0(8,R2),=C'RDHDSP03'    Put Eyecatcher in Dataspace
         LAM   AR2,AR2,DSA3ALED        Get DUAL  ALET
         MVC   8(8,R2),=C'DUALALET'    Put Eyecatcher in Dataspace
         LAE   R9,0(,R2)
         GOSUB PDSP                    Populate With test Data
         SAC   000                     Back Into Primary Mode
*
** Return To Caller
*
CDSP999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** PDSP - Populate Dataspace                                          *
*=====================================================================*
*
PDSP     SUBNTRY ,
         MVC   DSPWKCL8,=CL8'ABCDEFGH'
         MVC   DSPWKZL8,=CL8'12345678'
         MVC   DSPWKXL8,=XL8'0102030405060708'
         ZAP   DSPWKPL8,=PL8'1235'
         MVC   DSPWORKF,=F'1222'
         MVC   DSPWORKH,=H'166'
*
** Return To Caller
*
PDSP999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** DDSP - Delete Our Test Data Spaces                                 *
*=====================================================================*
*
DDSP     SUBNTRY MSG='Deleting Data Spaces'
         DSPSERV DELETE,               Delete a Data Space             *
               STOKEN=DSA1STKN,        ..Stoken for Delete Request     *
               MF=(E,DSADSPL)
*
         DSPSERV DELETE,               Delete a Data Space             *
               STOKEN=DSA2STKN,        ..Stoken for Delete Request     *
               MF=(E,DSADSPL)
*
         DSPSERV DELETE,               Delete a Data Space             *
               STOKEN=DSA3STKN,        ..Stoken for Delete Request     *
               MF=(E,DSADSPL)
*
** Return to Caller
*
DDSP999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** DASTB - Display Tables Before Dataspace Create                     *
*=====================================================================*
*
DASTB    SUBNTRY ,
         #TRACE MSG=' ',NOHEAD=YES
         #TRACE MSG='===================================',NOHEAD=YES
         #TRACE MSG='***> Before Dataspace Creation <***',NOHEAD=YES
         #TRACE MSG='===================================',NOHEAD=YES
         #TRACE MSG=' ',NOHEAD=YES
*
         L     R10,PSAAOLD             Get Current ASCB Address
         USING ASCB,R10                & Addressability
         L     R10,ASCBASTE            Get Base ASTE Address
         USING ASTE,R10                & Addressability
         #TRACE DATA=('Base ASTE From ASCBASTE',0(R10),64),REGS=(R10)
*
         L     R3,ASTEATO              Auth Table Origin
         N     R3,=A(X'7FFFFFFC')      (Same)
         L     R2,DSAPLAYP             Set To Address
         LH    R4,=Y(768)              Set Length
         MFREAL 0(R2),0(R3),           Show me the Authorization Table *
               LEN=(R4)                (Same)
*temp    #TRACE DATA=('ASTE ATO',0(R2),768),REGS=(R2,R3,R4)
*
         L     R3,ASTEPALD             PASN Access list
         N     R3,=A(X'7FFFFF80')      (Same)
         L     R2,DSAPLAYP             Set To Address
         LH    R4,=Y(1024)             Set Length
         MFREAL 0(R2),0(R3),           Show me the Segment Table       *
               LEN=(R4)                (Same)
         #TRACE DATA=('ASTEPALD - PASN-AL Before',0(R2),1024),         *
               REGS=(R2,R3,R4)
*
         LG    R3,DSACNTRL+2*8         Get Address of DUCT
         L     R2,DSAPLAYP             Set To Address
         LH    R4,=Y(DUCTLNTH)         Set Length
         MFREAL 0(R2),0(R3),           Show me the Segment Table       *
               LEN=(R4)                (Same)
         #TRACE DATA=('DUCT From CR2',0(R2),DUCTLNTH),REGS=(R3)
*
         L     R2,DSAPLAYP             Set To Address
         L     R3,DUCTDUAL-DUCTO(,R2)  Get Real Address of DUAL
         LH    R4,=Y(512)              Set Length
         MFREAL 0(R2),0(R3),           Show me the Segment Table       *
               LEN=(R4)                (Same)
         #TRACE DATA=('DU-AL From DUCT Before',0(R2),256),REGS=(R3)
*
** Return to Caller
*
DASTB99  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** DASTA - Display Table After Dataspace Create                       *
*=====================================================================*
*
DASTA    SUBNTRY ,
         #TRACE MSG=' ',NOHEAD=YES
         #TRACE MSG='==================================',NOHEAD=YES
         #TRACE MSG='***> After Dataspace Creation <***',NOHEAD=YES
         #TRACE MSG='==================================',NOHEAD=YES
         #TRACE MSG=' ',NOHEAD=YES
*
         L     R10,PSAAOLD             Get Current ASCB Address
         USING ASCB,R10                & Addressability
         L     R10,ASCBASTE            Get Base ASTE Address
         USING ASTE,R10                & Addressability
         #TRACE DATA=('Base ASTE From ASCBASTE',0(R10),64),REGS=(R10)
*
         L     R3,ASTEATO              Auth Table Origin
         N     R3,=A(X'7FFFFFFC')      (Same)
         L     R2,DSAPLAYP             Set To Address
         LH    R4,=Y(768)              Set Length
         MFREAL 0(R2),0(R3),           Show me the Authorization Table *
               LEN=(R4)                (Same)
*temp    #TRACE DATA=('ASTE ATO',0(R2),768),REGS=(R2,R3,R4)
*
         L     R3,ASTEPALD             PASN Access list
         N     R3,=A(X'7FFFFF80')      (Same)
         L     R2,DSAPLAYP             Set To Address
         LH    R4,=Y(1024)             Set Length
         MFREAL 0(R2),0(R3),           Show me the Segment Table       *
               LEN=(R4)                (Same)
         #TRACE DATA=('ASTE PSALD After',0(R2),1024),REGS=(R2,R3,R4)
*
         LG    R3,DSACNTRL+2*8         Get Address of DUCT
         L     R2,DSAPLAYP             Set To Address
         LH    R4,=Y(DUCTLNTH)         Set Length
         MFREAL 0(R2),0(R3),           Show me the Segment Table       *
               LEN=(R4)                (Same)
         #TRACE DATA=('DUCT From CR2',0(R2),DUCTLNTH),REGS=(R3)
         L     R3,DUCTDUAL-DUCTO(,R2)  Get Real Address of DUAL
         ST    R3,DSADUALD             Address of DUAL From Duct
*
         L     R2,DSAPLAYP             Set To Address
         L     R3,DSADUALD             Address of DUAL From Duct
         LH    R4,=Y(512)              Set Length
         MFREAL 0(R2),0(R3),           Show me the Segment Table       *
               LEN=(R4)                (Same)
         #TRACE DATA=('DU-AL From DUCT After',0(R2),256),REGS=(R3)
*
** Show ALET's Returned
*
         #TRACE MSG=' ',NOHEAD=YES
         #TRACE DATA=('Single STKN/ORGN/ALET 1',DSA1STKN,24),NOHEAD=YES
         #TRACE DATA=('Common STKN/ORGN/ALET 2',DSA2STKN,24),NOHEAD=YES
         #TRACE DATA=('All    STKN/ORGN/ALET 3',DSA3STKN,24),NOHEAD=YES
         #TRACE MSG=' ',NOHEAD=YES
*
** Return to Caller
*
DASTA99  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
ALEMODL  DS    0D
         ALESERV MF=L              Access a data space
ALEMODLL EQU   *-ALEMODL
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
DSACNTRL DS    16D                     Control Registers
DSAPLAYP DS    A                       Play Page Address
DSABASTE DS    A                       Base ASTE Address
DSADUALD DS    A                       DUAL Address From DUCT
*
DSA1STKN DS    D                       Dataspace 1 STOKEN
DSA1ORGN DS    A                       Dataspace 1 Origin
DSA1ALET DS    A                       Dataspace 1 ALET PASN
DSA1ALED DS    A                       Dataspace 1 ALET DUAL
DSA1ASN2 DS    A                       Dataspace 1 ASN PASN
DSA1ASD2 DS    A                       Dataspace 2 ASN DU
         DS    A
*
DSA2STKN DS    D                       Dataspace 2 STOKEN
DSA2ORGN DS    A                       Dataspace 2 Origin
DSA2ALET DS    A                       Dataspace 2 ALET PASN
DSA2ALED DS    A                       Dataspace 2 ALET DUAL
DSA2ASN2 DS    A                       Dataspace 2 ASN PASN
DSA2ASD2 DS    A                       Dataspace 2 ASN DU
         DS    A
*
DSA3STKN DS    D                       Dataspace 3 STOKEN
DSA3ORGN DS    A                       Dataspace 3 Origin
DSA3ALET DS    A                       Dataspace 3 ALET PASN
DSA3ALED DS    A                       Dataspace 3 ALET DUAL
DSA3ASN2 DS    A                       Dataspace 3 ASN PASN
DSA3ASD2 DS    A                       Dataspace 3 ASN DU
         DS    A
*
DSAECBWT DS    A                       ECB for WTOR
*
         DS    0D
DSAWK256 DS    CL256                   GP Workarea
DSAASN2E DS    CL128                   ASN 2ND Level Entry
*
** Define list Forms of IBM Macros - Uck! A Necessary Evil.
*
         DS    0D
DSAWTOR  DS    XL(RWTORL)'0'           MF=L for WTOR
         DS    0D
*
DSAALE   DS    XL(ALEMODLL)            Space for ALESERV List Form
         DSPSERV MF=(L,DSADSPL)
*
         DSAEND ,                      Define DSA Suffex
*
** Parameters in Dataspace
*
DSPDSECT DSECT ,
DSPNAME  DS    CL8                     Dataspace Name
DSPALTYP DS    CL8                     ALET TYPL DUAL/PASN
*
DSPWKCL8 DS    CL8                     Diaplay Char     Data
DSPWKZL8 DS    ZL8                     Display Zoned    Data
DSPWKXL8 DS    XL8                     Display Hex      Data
DSPWKPL8 DS    PL8                     Display Packed   Data
DSPWORKF DS    F                       Display Fullword Data
DSPWORKH DS    H                       Display halfword Data
         END   ,
./ ADD NAME=ARMDSV01 0100-10050-10050-1200-00368-00368-00000-RHDTST
//RDHARS01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHARS01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHARS01 - Test Program for for ARMODE Programs with IMP=SVC       *
*                                                                     *
*    This program will test the situation where the data we wish      *
*  to display is in a different address space or dataspace.  This     *
*  The program will be in ARMODE when executing the #TRACE and        *
*  RDHTRACE will trigger off that bit in the PSW to determine if      *
*  it needs to go into ARMODE in order to access the data to be       *
*  written to the traces.                                             *
*                                                                     *
*                          *** Note ***                               *
*                                                                     *
*    There is a problem with having the traces run in Key(8), Problem *
*  State in ARMODE.  While you can create a dataspace in problem      *
*  state, you cannot issue an SVC when also in ARMODE.  This means    *
*  that these traces are not functional in this environment.  To      *
*  run and trace a problem state program while in ARMODE it will be   *
*  necessary to utilize the TRAP2 version of the traces.              *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASVT ,                     Define ASVT DSECT
         IHAASCB ,                     Define ASCB DSECT
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     Define ASSB DSECT
         IHAASTE ,                     Define ASTE DSECT
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
         DUCDSECT                      Define DUCT DSECTs
         PRINT ON,NOGEN
*
***********************************************************************
* RDHARS01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
         USING DSPDSECT,R9           Establish Addressability
*
RDHARS01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=SVC,PRINT=GEN
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB WTOR                    Issue WTOR & Wait for Response
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
** Return to Caller
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
** Return to Caller
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** WTOR - issue WTOR & Wait for Response                              *
*=====================================================================*
*
*   This routine alllows me to stop after initializing the environment
* providing the opportunity to dump the address space and view things
* under IPCS.
*
WTOR     SUBNTRY ,
         MVC   DSAWTOR,RWTOR
*temp    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *
               DSAWORKD,8,DSAECBWT,MF=(E,DSAWTOR)
*temp    WAIT ECB=DSAECBWT           Wait for operator Response
*
** Return to Caller
*
WTOR999  DS    0H
         SUBEXIT ,
*
RWTOR    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *
               *-*,8,*-*,MF=L
RWTORL   EQU   *-RWTOR
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         GOSUB CDSP                    Create Test Dataspaces
*
         #TRACE MSG=' ',NOHEAD=YES
         #TRACE DATA=('Single STKN/ORGN/ALET 1',DSA1STKN,32),NOHEAD=YES
         #TRACE MSG=' ',NOHEAD=YES
*
** Test Printing Data From Dataspace With #TRACE
*
         GOSUB TEST                    #TRACE in ARMODE Testing Here
*
** Return to Caller
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TEST - Test #TRACE Macro in an ARMODE Program                      *
*=====================================================================*
*
TEST     SUBNTRY ,
 B TEST999 ===> Cannot xeecute an SVC in ARMODE
*          ===> Must Use TRAP2 or BASR Implemetnations
*
*
         XGR   R2,R2                   Dataspace Starts at Loc Zero
         SAC   512                     Enter ARMADE
*
** Test DATA= Getting Data From Dataspace
*
         #TRACE MSG='Testing DATA= Parameter With Data in Dataspace.'
         LAM   AR2,AR2,DSA1ALET        Load ALET for Dataspace 1
         #TRACE DATA=('Data From Dataspace 1',0(R2),128)
*
** Test MSG= Getting Variable Data From Dataspace
*
         #TRACE MSG=('Showing Dataspace CL8 Data: ',DSPWKCL8)
         #TRACE MSG=('Showing Dataspace ZL8 Data: ',DSPWKZL8)
         #TRACE MSG=('Showing Dataspace XL8 Data: ',DSPWKXL8)
         #TRACE MSG=('Showing Dataspace WKF Data: ',DSPWORKF)
         #TRACE MSG=('Showing Dataspace WKH Data: ',DSPWORKH)
*
         #TRACE MSG=('Showing Dataspace PL8 Data: ',DSPWKPL8) Bug
*
         SAC   000                     Exit  ARMADE
*
** Return to Caller
*
TEST999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** CDSP - Create a Few of Data Spaces                                 *
*=====================================================================*
*
CDSP     SUBNTRY MSG='Creating Dataspaces'
*
** Build RDHDSP01 - SCOPE=SINGLE
*
         DSPSERV CREATE,           -*- Create a Data Space             *
               NAME==C'RDHDSP01',      ..Name                          *
               STOKEN=DSA1STKN,        ..Stoken Returned               *
               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *
               ORIGIN=DSA1ORGN,        ..Starting at Zero              *
               SCOPE=SINGLE,           ..Local Dataspace               *
               MF=(E,DSADSPL)
*
         LA    R3,DSA1STKN             Point at Dataspace STOKEN
         XC    DSAALE,DSAALE           Zero Parameter Area
         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *
               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *
               ALET=(R4),              Output ALET address             *
               CHKEAX=YES,             Don't check EAX table           *
               CHKPT=IGNORE,           Don't inhibit CHKPTs            *
               AL=PASN,                Create ALET on PASN list        *
               MF=(E,DSAALE)           Execute form
         ST    R4,DSA1ALET             Save ALET Value
         LR    R5,R4                   Save ALET Value
*
         LA    R3,DSA1STKN             Point at Dataspace STOKEN
         XC    DSAALE,DSAALE           Zero Parameter Area
         ALESERV ADD,              -*- Get ALET for Dataspace - DUAL   *
               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *
               ALET=(R4),              Output ALET address             *
               CHKEAX=YES,             Don't check EAX table           *
               CHKPT=IGNORE,           Don't inhibit CHKPTs            *
               AL=WORKUNIT,            Create ALET on PASN list        *
               MF=(E,DSAALE)           Execute form
         ST    R4,DSA1ALED             Save ALET Value
*
         LAM   AR0,AR15,=16A(0)    -*- Initialize The Dataspace
         SAC   512                     Shift Into AR Mode
         LAM   AR2,AR2,DSA1ALET        Get First ALET
         XR    R2,R2                   Start at Location Zero
         MVC   0(8,R2),=C'RDHDSP01'    Put Eyecatcher in Dataspace
         LAM   AR2,AR2,DSA1ALED        Get DUAL  ALET
         MVC   8(8,R2),=C'DUALALET'    Put Eyecatcher in Dataspace
         SAC   000                     Back Into Primary Mode
         GOSUB PDSP                    Populate With test Data
*
** Return To Caller
*
CDSP999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** PDSP - Populate Dataspace                                          *
*=====================================================================*
*
PDSP     SUBNTRY ,
         SAC   512
         LAM   AR9,AR9,DSA1ALET        Get First ALET
         XR    R9,R9                   At Address Zero
         MVC   DSPWKCL8,=CL8'ABCDEFGH'
         MVC   DSPWKZL8,=CL8'12345678'
         MVC   DSPWKXL8,=XL8'0102030405060708'
         ZAP   DSPWKPL8,=PL8'1235'
         MVC   DSPWORKF,=F'1222'
         MVC   DSPWORKH,=H'166'
         SAC   000
*
** Return To Caller
*
PDSP999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** DDSP - Delete Our Test Data Spaces                                 *
*=====================================================================*
*
DDSP     SUBNTRY MSG='Deleting Data Spaces'
         DSPSERV DELETE,               Delete a Data Space             *
               STOKEN=DSA1STKN,        ..Stoken for Delete Request     *
               MF=(E,DSADSPL)
*
** Return to Caller
*
DDSP999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
ALEMODL  DS    0D
         ALESERV MF=L              Access a data space
ALEMODLL EQU   *-ALEMODL
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
DSACNTRL DS    16D                     Control Registers
DSAPLAYP DS    A                       Play Page Address
DSABASTE DS    A                       Base ASTE Address
DSADUALD DS    A                       DUAL Address From DUCT
*
DSA1STKN DS    D                       Dataspace 1 STOKEN
DSA1ORGN DS    A                       Dataspace 1 Origin
DSA1ALET DS    A                       Dataspace 1 ALET PASN
DSA1ALED DS    A                       Dataspace 1 ALET DUAL
DSA1ASN2 DS    A                       Dataspace 1 ASN PASN
DSA1ASD2 DS    A                       Dataspace 2 ASN DU
         DS    A
         DS    A
*
DSAECBWT DS    A                       ECB for WTOR
*
         DS    0D
DSAWK256 DS    CL256                   GP Workarea
DSAASN2E DS    CL128                   ASN 2ND Level Entry
*
** Define list Forms of IBM Macros - Uck! A Necessary Evil.
*
         DS    0D
DSAWTOR  DS    XL(RWTORL)'0'           MF=L for WTOR
         DS    0D
*
DSAALE   DS    XL(ALEMODLL)            Space for ALESERV List Form
         DSPSERV MF=(L,DSADSPL)
*
         DSAEND ,                      Define DSA Suffex
*
** Parameters in Dataspace
*
DSPDSECT DSECT ,
DSPNAME  DS    CL8                     Dataspace Name
DSPALTYP DS    CL8                     ALET TYPL DUAL/PASN
*
DSPWKCL8 DS    CL8                     Diaplay Char     Data
DSPWKZL8 DS    ZL8                     Display Zoned    Data
DSPWKXL8 DS    XL8                     Display Hex      Data
DSPWKPL8 DS    PL8                     Display Packed   Data
DSPWORKF DS    F                       Display Fullword Data
DSPWORKH DS    H                       Display halfword Data
         END   ,
./ ADD NAME=ARMDTR01 0100-10050-10050-1200-00355-00355-00000-RHDTST
//RDHART01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHART01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHART01 - Test Program for for ARMODE Programs with IMP=TRAP2     *
*                                                                     *
*    This program will test the situation where the data we wish      *
*  to display is in a different address space or dataspace.  This     *
*  The program will be in ARMODE when executing the #TRACE and        *
*  RDHTRACE will trigger off that bit in the PSW to determine if      *
*  it needs to go into ARMODE in order to access the data to be       *
*  written to the traces.                                             *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASVT ,                     Define ASVT DSECT
         IHAASCB ,                     Define ASCB DSECT
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     Define ASSB DSECT
         IHAASTE ,                     Define ASTE DSECT
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
         DUCDSECT                      Define DUCT DSECTs
         PRINT ON,NOGEN
*
***********************************************************************
* RDHART01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
         USING DSPDSECT,R9           Establish Addressability
*
RDHART01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=TRAP2,PRINT=GEN
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB WTOR                    Issue WTOR & Wait for Response
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
** Return to Caller
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
** Return to Caller
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** WTOR - issue WTOR & Wait for Response                              *
*=====================================================================*
*
*   This routine alllows me to stop after initializing the environment
* providing the opportunity to dump the address space and view things
* under IPCS.
*
WTOR     SUBNTRY ,
         MVC   DSAWTOR,RWTOR
*temp    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *
               DSAWORKD,8,DSAECBWT,MF=(E,DSAWTOR)
*temp    WAIT ECB=DSAECBWT           Wait for operator Response
*
** Return to Caller
*
WTOR999  DS    0H
         SUBEXIT ,
*
RWTOR    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *
               *-*,8,*-*,MF=L
RWTORL   EQU   *-RWTOR
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         GOSUB CDSP                    Create Test Dataspaces
*
         #TRACE MSG=' ',NOHEAD=YES
         #TRACE DATA=('Single STKN/ORGN/ALET 1',DSA1STKN,32),NOHEAD=YES
         #TRACE MSG=' ',NOHEAD=YES
*
** Test Printing Data From Dataspace With #TRACE
*
         GOSUB TEST                    #TRACE in ARMODE Testing Here
*
** Return to Caller
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TEST - Test #TRACE Macro in an ARMODE Program                      *
*=====================================================================*
*
TEST     SUBNTRY ,
         XGR   R2,R2                   Dataspace Starts at Loc Zero
         SAC   512                     Enter ARMADE
*
** Test DATA= Getting Data From Dataspace
*
         #TRACE MSG='Testing DATA= Parameter With Data in Dataspace.'
         LAM   AR2,AR2,DSA1ALET        Load ALET for Dataspace 1
         #TRACE DATA=('Data From Dataspace 1',0(R2),128),REGS=ALL
*
** Test MSG= Getting Variable Data From Dataspace
*
         #TRACE MSG=('Showing Dataspace CL8 Data: ',DSPWKCL8)
         #TRACE MSG=('Showing Dataspace ZL8 Data: ',DSPWKZL8)
         #TRACE MSG=('Showing Dataspace XL8 Data: ',DSPWKXL8)
         #TRACE MSG=('Showing Dataspace WKF Data: ',DSPWORKF)
         #TRACE MSG=('Showing Dataspace WKH Data: ',DSPWORKH)
         #TRACE MSG=('Showing Dataspace PL8 Data: ',DSPWKPL8)
*
         SAC   000                     Exit  ARMADE
*
** Return to Caller
*
TEST999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** CDSP - Create a Few of Data Spaces                                 *
*=====================================================================*
*
CDSP     SUBNTRY MSG='Creating Dataspaces'
*
** Build RDHDSP01 - SCOPE=SINGLE
*
         DSPSERV CREATE,           -*- Create a Data Space             *
               NAME==C'RDHDSP01',      ..Name                          *
               STOKEN=DSA1STKN,        ..Stoken Returned               *
               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *
               ORIGIN=DSA1ORGN,        ..Starting at Zero              *
               SCOPE=SINGLE,           ..Local Dataspace               *
               MF=(E,DSADSPL)
*
         LA    R3,DSA1STKN             Point at Dataspace STOKEN
         XC    DSAALE,DSAALE           Zero Parameter Area
         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *
               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *
               ALET=(R4),              Output ALET address             *
               CHKEAX=YES,             Don't check EAX table           *
               CHKPT=IGNORE,           Don't inhibit CHKPTs            *
               AL=PASN,                Create ALET on PASN list        *
               MF=(E,DSAALE)           Execute form
         ST    R4,DSA1ALET             Save ALET Value
         LR    R5,R4                   Save ALET Value
*
         LA    R3,DSA1STKN             Point at Dataspace STOKEN
         XC    DSAALE,DSAALE           Zero Parameter Area
         ALESERV ADD,              -*- Get ALET for Dataspace - DUAL   *
               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *
               ALET=(R4),              Output ALET address             *
               CHKEAX=YES,             Don't check EAX table           *
               CHKPT=IGNORE,           Don't inhibit CHKPTs            *
               AL=WORKUNIT,            Create ALET on PASN list        *
               MF=(E,DSAALE)           Execute form
         ST    R4,DSA1ALED             Save ALET Value
*
         LAM   AR0,AR15,=16A(0)    -*- Initialize The Dataspace
         SAC   512                     Shift Into AR Mode
         LAM   AR2,AR2,DSA1ALET        Get First ALET
         XR    R2,R2                   Start at Location Zero
         MVC   0(8,R2),=C'RDHDSP01'    Put Eyecatcher in Dataspace
         LAM   AR2,AR2,DSA1ALED        Get DUAL  ALET
         MVC   8(8,R2),=C'DUALALET'    Put Eyecatcher in Dataspace
         SAC   000                     Back Into Primary Mode
         GOSUB PDSP                    Populate With test Data
*
** Return To Caller
*
CDSP999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** PDSP - Populate Dataspace                                          *
*=====================================================================*
*
PDSP     SUBNTRY ,
         SAC   512
         LAM   AR9,AR9,DSA1ALET        Get First ALET
         XR    R9,R9                   At Address Zero
         MVC   DSPWKCL8,=CL8'ABCDEFGH'
         MVC   DSPWKZL8,=CL8'12345678'
         MVC   DSPWKXL8,=XL8'0102030405060708'
         ZAP   DSPWKPL8,=PL8'1235'
         MVC   DSPWORKF,=F'1222'
         MVC   DSPWORKH,=H'166'
         SAC   000
*
** Return To Caller
*
PDSP999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** DDSP - Delete Our Test Data Spaces                                 *
*=====================================================================*
*
DDSP     SUBNTRY MSG='Deleting Data Spaces'
         DSPSERV DELETE,               Delete a Data Space             *
               STOKEN=DSA1STKN,        ..Stoken for Delete Request     *
               MF=(E,DSADSPL)
*
** Return to Caller
*
DDSP999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
ALEMODL  DS    0D
         ALESERV MF=L              Access a data space
ALEMODLL EQU   *-ALEMODL
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
DSACNTRL DS    16D                     Control Registers
DSAPLAYP DS    A                       Play Page Address
DSABASTE DS    A                       Base ASTE Address
DSADUALD DS    A                       DUAL Address From DUCT
*
DSA1STKN DS    D                       Dataspace 1 STOKEN
DSA1ORGN DS    A                       Dataspace 1 Origin
DSA1ALET DS    A                       Dataspace 1 ALET PASN
DSA1ALED DS    A                       Dataspace 1 ALET DUAL
DSA1ASN2 DS    A                       Dataspace 1 ASN PASN
DSA1ASD2 DS    A                       Dataspace 2 ASN DU
         DS    A
         DS    A
*
DSAECBWT DS    A                       ECB for WTOR
*
         DS    0D
DSAWK256 DS    CL256                   GP Workarea
DSAASN2E DS    CL128                   ASN 2ND Level Entry
*
** Define list Forms of IBM Macros - Uck! A Necessary Evil.
*
         DS    0D
DSAWTOR  DS    XL(RWTORL)'0'           MF=L for WTOR
         DS    0D
*
DSAALE   DS    XL(ALEMODLL)            Space for ALESERV List Form
         DSPSERV MF=(L,DSADSPL)
*
         DSAEND ,                      Define DSA Suffex
*
** Parameters in Dataspace
*
DSPDSECT DSECT ,
DSPNAME  DS    CL8                     Dataspace Name
DSPALTYP DS    CL8                     ALET TYPL DUAL/PASN
*
DSPWKCL8 DS    CL8                     Diaplay Char     Data
DSPWKZL8 DS    ZL8                     Display Zoned    Data
DSPWKXL8 DS    XL8                     Display Hex      Data
DSPWKPL8 DS    PL8                     Display Packed   Data
DSPWORKF DS    F                       Display Fullword Data
DSPWORKH DS    H                       Display halfword Data
         END   ,
./ ADD NAME=ATBSBS01 0100-10050-10050-1200-00227-00227-00000-RHDTST
//RDHATB01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHATB01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHATB01 - Initial Test of #TRACE of Above-The-Bar (ATB) Storage   *
*                                                                     *
*    This is the first test program designed to test the DATA= and    *
*  MSG= parameters of #TRACE where the data being displayed resides   *
*  above-the-bar.                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
*
 print on,gen
         LSEDSECT ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDHATB01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
         USING ATBDSECT,R10          ATB Addressability
*
RDHATB01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R11,R12),       (Same)                            *
               IMP=BASR,PRINT=GEN    (Same)
*
** Program MainLine
*
         GOSUB INIT                  Do Init Processing
         GOSUB MAIN                  Do Main Processing
         GOSUB TERM                  Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         ESTAE 0                     Cancel ESTAE Recovery
*
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         GOSUB TEST
*
** Return to Caller
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INI7 - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
** Get Some Local Above-The-Bar Storage - Builds Region Tables
*
         LA    R2,=AD(4)               Set Number of Segments (Meg)
         IARV64 REQUEST=GETSTOR,       Get Some ATB Storage            *
               SEGMENTS=(R2),          ..Number of Segments            *
               FPROT=NO,               ..Not Fetch Protected           *
               ORIGIN=DSAATBAD,        ..Return Address Here           *
               MF=(E,DSAV64)           ..Address of List Form
         LG    R10,DSAATBAD            Establish Addressability
*
** Populate ATB Area With Data to Display Via #TRACE
*
         SAM64 ,                       Move to 64-Bit mode
         MVC   ATBEYE,=CL8'ATBDSECT'
         MVC   ATBWKCL8,=CL8'ABCDEFGH'
         MVC   ATBWKZL8,=ZL8'12345678'
         MVC   ATBWKXL8,=XL8'0102030405060708'
         ZAP   ATBWKPL8,=PL8'1235'
         MVC   ATBWORKF,=F'1222'
         MVC   ATBWORKH,=H'166'
         SAM31 ,                       Return to 31-Bit Mode
*
** Return to Caller
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
** Free Above-The-Bar Storage
*
         LA    R2,=A(1)                Set Number of Segments (Meg)
         IARV64 REQUEST=DETACH,        Free My ATB Storage             *
               MEMOBJSTART=DSAATBAD,   ..Start of Memory Object        *
               MF=(E,DSAV64)           ..Address of List Form
*
** Return to Caller
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TEST - Test #TRACE Macro in an ARMODE Program                      *
*=====================================================================*
*
TEST     SUBNTRY ,
         SAM64 ,                       Enter 64-Bit mode
*
** Test DATA= Getting Data From Dataspace
*
         #TRACE MSG='Testing DATA= Parameter With Above-The-Bar Data.'
         #TRACE DATA=('Data From Above-The-Bar',0(R10),128)
*
** Test MSG= Getting Variable Data From Dataspace
*
         #TRACE MSG=('Showing ATB CL8 Data: ',ATBWKCL8)
         #TRACE MSG=('Showing ATB ZL8 Data: ',ATBWKZL8)
         #TRACE MSG=('Showing ATB XL8 Data: ',ATBWKXL8)
         #TRACE MSG=('Showing ATB WKF Data: ',ATBWORKF)
         #TRACE MSG=('Showing ATB WKH Data: ',ATBWORKH)
         #TRACE MSG=('Showing ATB PL8 Data: ',ATBWKPL8)
*
         SAM31 ,                       Return to 31-Bit Mode
*
** Return to Caller
*
TEST999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
DSACR15  DS    A                     CR15 Value
*
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* ATBDSECT - Define The Area for my Above-The-Bar Storage             *
***********************************************************************
*
ATBDSECT DSECT ,
ATBEYE   DS    CL8                     Eye Catcher
*
ATBWKCL8 DS    CL8                     Diaplay Char     Data
ATBWKZL8 DS    ZL8                     Display Zoned    Data
ATBWKXL8 DS    XL8                     Display Hex      Data
ATBWKPL8 DS    PL8                     Display Packed   Data
ATBWORKF DS    F                       Display Fullword Data
ATBWORKH DS    H                       Display halfword Data
         END   ,
./ ADD NAME=ATBSSV01 0100-10050-10050-1200-00227-00227-00000-RHDTST
//RDHATS01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHATS01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHATS01 - Initial Test of #TRACE of Above-The-Bar (ATB) Storage   *
*                                                                     *
*    This is the first test program designed to test the DATA= and    *
*  MSG= parameters of #TRACE where the data being displayed resides   *
*  above-the-bar.                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
*
 print on,gen
         LSEDSECT ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDHATS01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
         USING ATBDSECT,R10          ATB Addressability
*
RDHATS01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=SVC,PRINT=GEN     (Same)
*
** Program MainLine
*
         GOSUB INIT                  Do Init Processing
         GOSUB MAIN                  Do Main Processing
         GOSUB TERM                  Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         ESTAE 0                     Cancel ESTAE Recovery
*
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         GOSUB TEST
*
** Return to Caller
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INI7 - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
** Get Some Local Above-The-Bar Storage - Builds Region Tables
*
         LA    R2,=AD(1)               Set Number of Segments (Meg)
         IARV64 REQUEST=GETSTOR,       Get Some ATB Storage            *
               SEGMENTS=(R2),          ..Number of Segments            *
               FPROT=NO,               ..Not Fetch Protected           *
               ORIGIN=DSAATBAD,        ..Return Address Here           *
               MF=(E,DSAV64)           ..Address of List Form
         LG    R10,DSAATBAD            Establish Addressability
*
** Populate ATB Area With Data to Display Via #TRACE
*
         SAM64 ,                       Move to 64-Bit mode
         MVC   ATBEYE,=CL8'ATBDSECT'
         MVC   ATBWKCL8,=CL8'ABCDEFGH'
         MVC   ATBWKZL8,=ZL8'12345678'
         MVC   ATBWKXL8,=XL8'0102030405060708'
         ZAP   ATBWKPL8,=PL8'1235'
         MVC   ATBWORKF,=F'1222'
         MVC   ATBWORKH,=H'166'
         SAM31 ,                       Return to 31-Bit Mode
*
** Return to Caller
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
** Free Above-The-Bar Storage
*
         LA    R2,=AD(1)                Set Number of Segments (Meg)
         IARV64 REQUEST=DETACH,        Free My ATB Storage             *
               MEMOBJSTART=DSAATBAD,   ..Start of Memory Object        *
               MF=(E,DSAV64)           ..Address of List Form
*
** Return to Caller
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TEST - Test #TRACE Macro in an ARMODE Program                      *
*=====================================================================*
*
TEST     SUBNTRY ,
         SAM64 ,                       Enter 64-Bit mode
*
** Test DATA= Getting Data From Dataspace
*
         #TRACE MSG='Testing DATA= Parameter With Above-The-Bar Data.'
         #TRACE DATA=('Data From Above-The-Bar',0(R10),128)
*
** Test MSG= Getting Variable Data From Dataspace
*
         #TRACE MSG=('Showing Dataspace CL8 Data: ',ATBWKCL8)
         #TRACE MSG=('Showing Dataspace ZL8 Data: ',ATBWKZL8)
         #TRACE MSG=('Showing Dataspace XL8 Data: ',ATBWKXL8)
         #TRACE MSG=('Showing Dataspace WKF Data: ',ATBWORKF)
         #TRACE MSG=('Showing Dataspace WKH Data: ',ATBWORKH)
         #TRACE MSG=('Showing Dataspace PL8 Data: ',ATBWKPL8)
*
         SAM31 ,                       Return to 31-Bit Mode
*
** Return to Caller
*
TEST999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
DSACR15  DS    A                     CR15 Value
*
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* ATBDSECT - Define The Area for my Above-The-Bar Storage             *
***********************************************************************
*
ATBDSECT DSECT ,
ATBEYE   DS    CL8                     Eye Catcher
*
ATBWKCL8 DS    CL8                     Diaplay Char     Data
ATBWKZL8 DS    ZL8                     Display Zoned    Data
ATBWKXL8 DS    XL8                     Display Hex      Data
ATBWKPL8 DS    PL8                     Display Packed   Data
ATBWORKF DS    F                       Display Fullword Data
ATBWORKH DS    H                       Display halfword Data
         END   ,
./ ADD NAME=ATBSTR01 0100-10050-10050-1200-00227-00227-00000-RHDTST
//RDHATT01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHATT01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHATT01 - Initial Test of #TRACE of Above-The-Bar (ATB) Storage   *
*                                                                     *
*    This is the first test program designed to test the DATA= and    *
*  MSG= parameters of #TRACE where the data being displayed resides   *
*  above-the-bar.                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
*
 print on,gen
         LSEDSECT ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDHATT01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
         USING ATBDSECT,R10          ATB Addressability
*
RDHATT01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               IMP=TRAP2,PRINT=GEN   (Same)
*
** Program MainLine
*
         GOSUB INIT                  Do Init Processing
         GOSUB MAIN                  Do Main Processing
         GOSUB TERM                  Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         ESTAE 0                     Cancel ESTAE Recovery
*
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         GOSUB TEST
*
** Return to Caller
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INI7 - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
** Get Some Local Above-The-Bar Storage - Builds Region Tables
*
         LA    R2,=AD(1)               Set Number of Segments (Meg)
         IARV64 REQUEST=GETSTOR,       Get Some ATB Storage            *
               SEGMENTS=(R2),          ..Number of Segments            *
               FPROT=NO,               ..Not Fetch Protected           *
               ORIGIN=DSAATBAD,        ..Return Address Here           *
               MF=(E,DSAV64)           ..Address of List Form
         LG    R10,DSAATBAD            Establish Addressability
*
** Populate ATB Area With Data to Display Via #TRACE
*
         SAM64 ,                       Move to 64-Bit mode
         MVC   ATBEYE,=CL8'ATBDSECT'
         MVC   ATBWKCL8,=CL8'ABCDEFGH'
         MVC   ATBWKZL8,=ZL8'12345678'
         MVC   ATBWKXL8,=XL8'0102030405060708'
         ZAP   ATBWKPL8,=PL8'1235'
         MVC   ATBWORKF,=F'1222'
         MVC   ATBWORKH,=H'166'
         SAM31 ,                       Return to 31-Bit Mode
*
** Return to Caller
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
** Free Above-The-Bar Storage
*
         LA    R2,=AD(1)                Set Number of Segments (Meg)
         IARV64 REQUEST=DETACH,        Free My ATB Storage             *
               MEMOBJSTART=DSAATBAD,   ..Start of Memory Object        *
               MF=(E,DSAV64)           ..Address of List Form
*
** Return to Caller
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TEST - Test #TRACE Macro in an ARMODE Program                      *
*=====================================================================*
*
TEST     SUBNTRY ,
         SAM64 ,                       Enter 64-Bit mode
*
** Test DATA= Getting Data From Dataspace
*
         #TRACE MSG='Testing DATA= Parameter With Above-The-Bar Data.'
         #TRACE DATA=('Data From Above-The-Bar',0(R10),128)
*
** Test MSG= Getting Variable Data From Dataspace
*
         #TRACE MSG=('Showing Dataspace CL8 Data: ',ATBWKCL8)
         #TRACE MSG=('Showing Dataspace ZL8 Data: ',ATBWKZL8)
         #TRACE MSG=('Showing Dataspace XL8 Data: ',ATBWKXL8)
         #TRACE MSG=('Showing Dataspace WKF Data: ',ATBWORKF)
         #TRACE MSG=('Showing Dataspace WKH Data: ',ATBWORKH)
         #TRACE MSG=('Showing Dataspace PL8 Data: ',ATBWKPL8)
*
         SAM31 ,                       Return to 31-Bit Mode
*
** Return to Caller
*
TEST999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
DSACR15  DS    A                     CR15 Value
*
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* ATBDSECT - Define The Area for my Above-The-Bar Storage             *
***********************************************************************
*
ATBDSECT DSECT ,
ATBEYE   DS    CL8                     Eye Catcher
*
ATBWKCL8 DS    CL8                     Diaplay Char     Data
ATBWKZL8 DS    ZL8                     Display Zoned    Data
ATBWKXL8 DS    XL8                     Display Hex      Data
ATBWKPL8 DS    PL8                     Display Packed   Data
ATBWORKF DS    F                       Display Fullword Data
ATBWORKH DS    H                       Display halfword Data
         END   ,
./ ADD NAME=BASTST01 0100-10050-10050-1200-00215-00215-00000-RHDTST
//RDHBST01 JOB (0,0),'HARPER',REGION=4M,
//    CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)
//*
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHBST01
//ASM.SYSIN    DD  *
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHBST01 - Program to Test Tracing Facility                        *
*                                                                     *
*    This test simply does some basic testing of the label level      *
*  tracing facility and is used for regression testing and new        *
*  features are implemented in the product.                           *
*                                                                     *
***********************************************************************
*
RDHBST01 PGMNTRY TYPE=MAIN,           Define Program Entry Code        *
               BASE=(R12),            Constant base Register           *
               PRINT=GEN,             Constant base Register           *
               LEN=32,IMP=BASR        Get 32K Propogated DSA
*
         #TRACE REGS=ALL              Show Regs After PGMNTRY
*
         PRINT GEN
         LR    R10,R1                 Save parameter Register
         GOSUB OPEN                   Open Output Datasets
         GOSUB PARM                   Go Process PARM=
         GOSUB LEVEL1                 Do Levels
         GOSUB DEEPL1                 Do Levels in Overflow
         GOSUB CLOS                   Close Output Datasets
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                  Define Program Exit Code

         PRINT GEN
         PRINT NOGEN
***********************************************************************
* OPEN Test of the TYPE=OPEN form.
***********************************************************************
*
OPEN     SUBNTRY MSG='On Subroutine Entry',REGS=(R2,R3,R15)
       MVC DSAWKCL9,=CL9'    12345'
TMPARM #TRACE MSG=('WKCL9=',DSAWKCL9)
         SUBEXIT MSG='On Subroutine Exit',REGS=(R2,R3,R15)
*
***********************************************************************
* PARM - Test of variious and sundry parameter values.
***********************************************************************
*
PARM     SUBNTRY DATA=('Our Save Area',0(R13),72)
         LM     R14,R1,=A(1,2,3,4)
         LM     R2,R5,=A(5,6,7,8)
         LAM    R0,R6,=A(1,2,3,4,5,6)
         LAM    R14,R15,=A(14,15)
*
TRCREGS  #TRACE REGS=(R0,R1,R14,R15)
*
TRCPT1   #TRACE DATA=('This Data is Mine.',DAT1,L'DAT1),               *
               MSG='Print This Message Too.',REGS=ALL
*
         #TRACE MSG='This trap got hit.',REGS=(R0,R1,R14,R15)
         #TRACE MSG=('Show Me Data: ',DAT2)
TRMSG3   #TRACE MSG=('More Data Halfword: ',DATH)
TRMSG4   #TRACE MSG=('More Data Fullword: ',DATF)
TRMSG5   #TRACE MSG=('More Data Zoned: ',DATZ)
TRMSG6   #TRACE MSG=('More Data Adcon: ',DATA)
TRMSG7   #TRACE MSG=('More Data Hex: ',DATX,' More Data: ',DAT2)
*
         SUBEXIT ,

DAT1  DC  C'ABCDE1111111111111111111111111111111111111111111111111111'
      DC  128C'1234'
DAT2  DC  X'ABCDEF'
DATH  DC  H'32767'
DATF  DC  F'56781234'
DATZ  DC  Z'777888223'
DATA  DC  A(CLOS)
DATX  DC  X'01FFAABBCCDDEE'
*
***********************************************************************
* Test of Close Function
***********************************************************************
*
CLOS     SUBNTRY ,
         SUBEXIT ,
*
***********************************************************************
* Tracing Levels
***********************************************************************
*
LEVEL1   SUBNTRY ,
         GOSUB LEVEL2
         SUBEXIT ,
*
LEVEL2   SUBNTRY MSG='Show All PARM Types',REGS=ALL,                   *
               DATA=('Just Some Junk Data',DAT1,L'DAT1)
         GOSUB LEVEL3
         SUBEXIT ,
*
LEVEL3   SUBNTRY ,
         GOSUB LEVEL4
         SUBEXIT MSG='Exiting From Level4.'
*
LEVEL4   SUBNTRY ,
PREGS4   #TRACE REGS=(R0,R1,R14,R15)
*
PDATA4   #TRACE DATA=('This Data is Mine.',DAT1,L'DAT1),               *
               MSG='Print This Message Too.',REGS=ALL
         SUBEXIT ,
*
***********************************************************************
* Going DEEP to Test Indention Maximum of 10 levels.
***********************************************************************
*
DEEPL1   SUBNTRY MSG='Get Ready to Go Deep.'
         GOSUB DEEPL2
         SUBEXIT MSG='Yes We Can!'
*
DEEPL2   SUBNTRY ,
         GOSUB DEEPL3
         SUBEXIT ,
*
DEEPL3   SUBNTRY ,
         GOSUB DEEPL4
         SUBEXIT ,
*
DEEPL4   SUBNTRY ,
         GOSUB DEEPL5
         SUBEXIT ,
*
DEEPL5   SUBNTRY ,
         GOSUB DEEPL6
         SUBEXIT ,
*
DEEPL6   SUBNTRY ,
         GOSUB DEEPL7
         SUBEXIT ,
*
DEEPL7   SUBNTRY ,
         GOSUB DEEPL8
         SUBEXIT ,
*
DEEPL8   SUBNTRY ,
         GOSUB DEEPL9
         SUBEXIT ,
*
DEEPL9   SUBNTRY ,
         GOSUB DEEPL10
         SUBEXIT ,
*
DEEPL10  SUBNTRY ,
         GOSUB DEEPL11
         SUBEXIT ,
*
DEEPL11  SUBNTRY ,
         GOSUB DEEPL12
         SUBEXIT ,
*
DEEPL12  SUBNTRY MSG='We Got this Far, But Can We Make it Back in Good *
               Order?',DATA=('Show Some Data',0(R13),72),REGS=ALL
         SUBEXIT ,

***********************************************************************
*  Literials and Constants
***********************************************************************
*
         CONBEG ,                      Begin Constant Area
         LTORG ,                       Define literal Pool
         CONEND ,                      EenOf Constant Area

***********************************************************************
* Define DSECT Areas
***********************************************************************
*
         PRINT NOGEN
         DCBD DSORG=PS
         PRINT GEN
*
***********************************************************************
* Define Dynamic Storage Area - DSA
***********************************************************************
*
         DSABEG ,                 <*** Begin Dynamic Storage Area
*
         DSAEND ,                 <*** End Dynamic Storage Area
         END ,
./ ADD NAME=BASTST02 0100-10050-10050-1200-00169-00169-00000-RHDTST
//RDHBST02 JOB (0,0),'ASSEMBLE',
//             CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHBST02
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHBST02 - Test Dynamic Allocation #DD Macro
*                                                                     *
*    At this point #DD only supports the allocation of SYSOUT         *
*  datasets and is used in RDHTRACE.  It may be expanded in the       *
*  future.  This program is now used for regression testing of the    *
*  label level tracing facility.                                      *
*                                                                     *
***********************************************************************
*
RDHBST02 PGMNTRY TYPE=MAIN,BASE=(R12),                                 *
               OPSYN20=YES
         ST    R1,DSASAVR1             Save parameter Register
*
         BAS   R14,INIT                Perform Initialization
         BAS   R14,MAIN                Do Main Processing
         BAS   R14,TERM                Do Termination Processing
*
** Return to Caller
*
MAINEXIT DS    0H
         PGMEXIT RC=0                  Define Program Exit Code

***********************************************************************
* MAIN- Program Main Processing                                       *
***********************************************************************
*
MAIN     SUBNTRY DATA=('PARMV Value',DSAPARMV,L'DSAPARMV)
*
*
 PRINT GEN
         MVC   DSAWKCL9,=CL9' '
         #DD   ALLOC,SYSOUT=A,FREE=CLOSE,RTDDN=DSAWKCL9
 PRINT NOGEN
SHOWRC   #TRACE MSG=('DDNAME Returned: ',DSAWKCL9),REGS=(R15)
*
** Return to Caller
*
MAINEND  DS    0H
         SUBEXIT ,

***********************************************************************
* INIT - Perform Program Initialization                               *
***********************************************************************
*
INIT     SUBNTRY DATA=('More Data to Display',MAIN,128)
*
** Return to Caller
*
INITEND  DS    0H
         SUBEXIT ,

***********************************************************************
* TERM - Perform Program Termination                                  *
***********************************************************************
*
TERM     SUBNTRY DATA=('This is Data',MDLRPL,64)
*
** Return to Caller
*
TERMEND  DS    0H
         SUBEXIT ,

***********************************************************************
*  Messages                                                           *
***********************************************************************
*
MSG001I  SUBNTRY ,
         SUBEXIT ,

***********************************************************************
*  Literials and Constants                                            *
***********************************************************************
*
         CONBEG ,                      Begin Constant Area
*
CON0001I DC    CL121' MSG0001I: Invalid Data on PARM= Parameter.'
*
MDLOPL   OPEN  (*-*,(OUTPUT)),MF=L
MDLOPLL  EQU   *-MDLOPL
*
MDLCLL   CLOSE (*-*),MF=L
MDLCLLL  EQU   *-MDLCLL
*
MDLRPL   RPL   AREALEN=4000,KEYLEN=10,                                 *
               OPTCD=(KEY,DIR,UPD,MVE),RECLEN=4000
MDLRPLL  EQU   *-MDLRPL
*
MDLACB   ACB   DDNAME=SYSUT2,          Define SYSUT2 DCB               *
               MACRF=(KEY,DIR,OUT)     (Same)
MDLACBL  EQU   *-MDLACB
*
MDLDCB   DCB   DDNAME=SYSPRINT,        Define SYSPRINT DCB             *
               LRECL=121,BLKSIZE=121,  (Same)                          *
               RECFM=FA,DSORG=PS,      (Same)                          *
               MACRF=PM                (Same)
MDLDCBL  EQU   *-MDLDCB
*
         CONEND ,                      End Of Constant Area

***********************************************************************
* Define DSECT Areas                                                  *
***********************************************************************
*
         PRINT NOGEN
         IHAPSA LIST=NO                Define PSA Control Block
         IKJTCB ,                      Define TCB Control Block
         DCBD   DSORG=PS               Define DCB Control Block
         IEZDEB LIST=NO                Define DEB Control Block
         IHACDE ,                      Define CDE Control Block
         IEFTIOT1 ,                    Define TIOT Control Block
         PRINT GEN

***********************************************************************
* Define Dynamic Storage Area - DSA                                   *
***********************************************************************
*
         DSABEG ,                 <*** Begin Dynamic Storage Area
*
DSABUFER DS    F                       (Same)
DSARC    DS    F                       Return Code
*
DSARPLAD DS    A                       Address of RPL
*
DSAPARMV DS    CL128                   PARM= Data
DSAPLINE DS    CL121                   Print Line
*
         DS    0D
DSADCB   DS    XL(MDLDCBL)             Reserve Space for DCB
         DS    0D
DSAOPL   DS    XL(MDLOPLL)             Reserve Space for OPEN Parm
         DS    0D
DSACLL   DS    XL(MDLCLLL)             Reserve Space for CLOSE Parm
         DS    0D
DSASAVR1 DS    F                       R1 Value on Entry
*
         DSAEND ,                 <*** End Dynamic Storage Area
         END ,
./ ADD NAME=BASTST03 0100-10050-10050-1200-00079-00079-00000-RHDTST
//RDHBST03 JOB 'DSA Test Job',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHBST03
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHBST03 - Basic test of multiple CSECT program.
*                                                                     *
*    This is another bassic test of the label level tracing facility  *
*  used for regression testing.  In this case we have multiple        *
*  PGMNTRY programs in the same source moduole.                       *
*                                                                     *
***********************************************************************
*
         PRINT ON,GEN
RDHBST03 PGMNTRY TYPE=MAIN,PRINT=GEN,CBAS=(R12)
         L     R15,=V(DSASUB1)
         BASR  R14,R15
         PGMEXIT RC=0
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,
DSATST1  DS     D
         DSAEND ,
*
** First Subprogram
*
DSASUB1  PGMNTRY TYPE=SUB,PRINT=GEN,CBAS=(R12)
         L     R15,=V(DSASUB2)
         BASR  R14,R15
         PGMEXIT RC=0
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,
DSADAT1  DS     D
         DSAEND ,
*
** Second Subprogram
*
DSASUB2  PGMNTRY TYPE=SUB,PRINT=GEN,CBAS=(R12)
         PGMEXIT RC=0
*
         CONBEG ,
         CONEND ,
*
         DSABEG ,
DSADAT2  DS     D
         DSAEND ,
         END    ,
./ ADD NAME=BASTST04 0100-10050-10050-1200-00126-00126-00000-RHDTST
//RDHBST04 JOB (0,0),'HARPER',REGION=4M,
//    CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)
//*
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHBST04
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHBST03 - Basic test - Locate Our Tracing SVC.                    *
*                                                                     *
*    This is another bassic test of the label level tracing facility  *
*  used for regression testing.  In this case we are attempting to    *
*  locate our own SVC in teh SVC Table.  This code is now in PGMNTRY. *
*                                                                     *
***********************************************************************
*
         PRINT GEN
RDHBST04 PGMNTRY TYPE=MAIN,CBAS=(R12)  Define Program Entry Code
*
         LR    R10,R1                  Save parameter Register
         BAS   R14,OPEN                Open Output Datasets
         BAS   R14,PARM                Go Process PARM=
         BAS   R14,CLOS                Close Output Datasets
*
** Return to Caller
*
MAINEXIT DS    0H
         PGMEXIT RC=0                  Define Program Exit Code

***********************************************************************
*
***********************************************************************
*
OPEN     SUBNTRY ,
         L     R14,16                   Get CVT Address
         USING CVT,R14                  Change Addressability
         L     R14,CVTABEND             Get Address of SCVT
         USING SCVTSECT,R14             Change Addressability
*
         L  R14,SCVTSVCT                Get Address of SVCTABLE
         AH R14,=Y(255*8)               Point at SVC 255
         LA R15,255                     Loop All SVC Table Entries
*
         DO FROM=(R15)                  Loop Through SVC Table
            L  R1,0(,R14)               Get SVC Entry Point
            LA R1,0(,R1)
            DOEXIT (CLC,=C'RDHTRSVC',EQ,4(R1))
            AHI R14,-8                  Bump to Prev SVCTABLE Entry
         ENDDO ,                        -> Loop
*
         IF (CLC,=C'RDHTRSVC',EQ,4(R1)) Found Our SVC?
            #TRACE MSG='SVC Found',REGS=ALL
         ELSE ,
            #TRACE MSG='SVC Not Found',REGS=ALL
         ENDIF ,
*
OPEN999  DS    0H
         SUBEXIT ,

***********************************************************************
*
***********************************************************************
*
PARM     SUBNTRY ,
PARM999  DS    0H
         SUBEXIT ,

***********************************************************************
*
***********************************************************************
*
CLOS     SUBNTRY ,
CLOS999  DS    0H
         SUBEXIT ,

***********************************************************************
*  Literials and Constants
***********************************************************************
*
         CONBEG ,
         CONEND ,

***********************************************************************
* Define DSECT Areas
***********************************************************************
*
         PRINT NOGEN
         CVT DSECT=YES                 Define CVT Control Block
         IHASCVT ,                     Define SCVT Control Block
         DCBD DSORG=PS
         PRINT GEN

***********************************************************************
* Define Dynamic Storage Area - DSA
***********************************************************************
*
         DSABEG ,                 <*** Begin Dynamic Storage Area
*
*
         DSAEND ,                 <*** End Dynamic Storage Area
         END ,
./ ADD NAME=BASTST05 0100-10050-10050-1200-00151-00151-00000-RHDTST
//RDHBST05 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHBST05
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHBST05 - Test for Buffering Support for a Single Task            *
*                                                                     *
*    This is a test that uses buffering support.  Trace data will be  *
*  stored in an in storage buffer written round-robin and printed at  *
*  task termination in the Resource Manager Exit.                     *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
***********************************************************************
* RDHBST05 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHBST05 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               BUFFDAT=YES,          Initiate Buffering of Data        *
               BUFFMAX=1000,         Number of Lines to Buffer         *
               PRINT=GEN
*
** Program MainLine - Gen 6000 Lines of Trace Output - Print Last 1000
*
         LH R2,=Y(1000)              Times Through Loop
         DO FROM=(R2)                Generate Some Trace Data
            GOSUB INIT                  Do Init Processing
            GOSUB MAIN                  Do Main Processing
            GOSUB TERM                  Do Term Processing
         ENDDO ,                     -> Loop
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
*
         DSAEND ,                    Define DSA Suffex
         END   ,
./ ADD NAME=BSRTST01 0100-10050-10050-1200-00156-00156-00000-RHDTST
//RDHBSR01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHBSR01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHBSR01 - Test Program Forcing BASR Implementation                *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
***********************************************************************
* RDHBSR01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHBSR01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12),           (Same)                            *
               ABAS=(R11),           (Same)                            *
               AMODE=64,             (Same)                            *
               OPSYN20=YES,          (Same)                            *
               KILLBDD=NO,           (Same)                            *
               IMP=BASR,PRINT=GEN    (Same)
*
** Program MainLine - Gen 6000 Lines of Trace Output - Print Last 1000
*
         GOSUB INIT                  Do Init Processing
         GOSUB MAIN                  Do Main Processing
         GOSUB TERM                  Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
         CONEND ,
SIZEXXX DS H'0'
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
*
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* Define Above-The-Bar Storage Area                                   *
***********************************************************************
*
         ATBBEG ,                    Define ATB Prefix
*
*
         ATBEND ,                    Define ATB Suffex
         END   ,
./ ADD NAME=ESTABS01 0100-10050-10050-1200-00154-00154-00000-RHDTST
//RDHEST01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHEST01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHEST01 - Test Recovery When ESTAE Specified on PGMNTRY           *
*                                                                     *
*    This program is designed to test the ESTAE recovery built into   *
*  PGMNTRY by specifying ESTAE=YES on the Entry Macro.                *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
         IHASDWA ,                     SDWA Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
***********************************************************************
* RDHEST01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDHEST01 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               BASE=(R12,R11),         (Same)                          *
               ESTAE=YES,              (Same)                          *
               IMP=BASR,PRINT=GEN      (Same)
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         ESTAE 0                       Cancel ESTAE Recovery
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         #TRACE MSG='Setting Retry Address and Forcing Abend.',REGS=ALL
*
         MVC   DSARETRY,=A(MAIN010)    Set Retry Address
         EX    0,*                     Force S0C3 Abend
*
MAIN010  DS    0H
         #TRACE MSG='Recovery Was Successful.',REGS=ALL
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
*
         DSAEND ,                      Define DSA Suffex
         END   ,
./ ADD NAME=INDTST01 0100-10050-10050-1200-00250-00250-00000-RHDTST
//RDHIND01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHIND01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHIND01 - Test the indirection capabilities of the DATA=          *
*             parameter of #TRACE                                     *
*    This job test the indirect address for the address portion of    *
*  the triplets specified on teh DATA= parameter os the #TRACE        *
*  MACRO.  It's a pretty simple test testing the 24/31/64 bit         *
*  indirection when the address is prefixed with a %/?/! respectively.*
*    There is also a test of the length value of the triplet when     *
*  the value is enclosed in parans.  As in (14), which would indicate *
*  that the length is in R14.                                         *
*    This also test the @ Indirection where the address specified in  *
*  DATA= triplet, if prefixed with an @ will be taken as a real       *
*  storage address, and the real storage will be displayed.           *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
         IHAASTE ,                     Define ASTE DSECT
         IHASDWA ,
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
*
         DUCDSECT ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDHIND01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDHIND01 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               AMODE=64,               Runs AMODE(64)                  *
               RMODE=ANY,              Runs RMODE(24)                  *
               LEN=16,                 Obtain 16K for Stacking DSA     *
               CBAS=(R12),             Define Constant Base Register   *
               ABAS=(R11),             Define ATB Base Register        *
               ESTAE=YES,              No ESTAE Support Needed         *
               IMP=BASR,               Traces are BASR Implementation  *
               PRINT=GEN,                                              *
               MSG='Entering RDHIND01 Model Program With 1 Task'
*

         L     R14,0(,R1)              Get MVE PARM=Data
         NILH  R14,X'7FFF'             Strip High Bit
         LH    R15,0(,R14)             Get Length of PARM=Data
         IF (LTR,R15,R15,NZ)           If We Have Data-Print it
            LA R15,2(,R15)                Increace Length by Halfword
            #TRACE REGS=ALL,DATA=('Data Off R1',0(R14),(R15))
         ELSE ,
            #TRACE MSG='No PARM=Data was specified.'
         ENDIF ,
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         STCTG R0,R15,DSACTRL
         #TRACE DATA=('Control Registers',DSACTRL,128)
*
** Show ASTE from CR5 and DUCT from CR2
*
         STCTG CR5,CR5,DSAWORKD        Store Control Register
         LG    R2,DSAWORKD
         #TRACE DATA=('ASTE From CR5',@0(R2),64),REGS=(R2)
*
         STCTG CR2,CR2,DSAWORKD        Store Control Register
         LG    R2,DSAWORKD
         #TRACE DATA=('DUCT From CR2',@0(R2),DUCTLNTH),REGS=(R2)
*
** Show PASN-AL
*
         L     R10,PSAAOLD             Get Current ASCB Address
         USING ASCB,R10                & Addressability
         L     R10,ASCBASTE            Get Base ASTE Address
         USING ASTE,R10                & Addressability
         #TRACE DATA=('Base ASTE From ASCBASTE',0(R10),64),REGS=(R10)
*
** Show PASN-AL Using MFREAL Method
*
         L     R3,ASTEPALD             PASN Access list
         N     R3,=A(X'7FFFFF80')      (Same)
         LA    R2,DSAPLAYP             Set To Address
         LH    R4,=Y(1024)             Set Length
         MFREAL 0(R2),0(R3),           Show me the Segment Table       *
               LEN=(R4)                (Same)
         #TRACE DATA=('ASTEPALD - USING MFREAL',0(R2),1024),           *
               REGS=(R2,R3,R4)
*
** Show PASN-AL Using Indirection in DATA= Parameter
*
         #TRACE DATA=('ASTEPALD - USING Indirect',@0(R3),1024),        *
               REGS=(R2,R3,R4)
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
         MVC   ATBCONA,HEXTAB
         LAY   R2,ATBCONA
         STG   R2,DSAWORKD
         LA    R3,L'HEXTAB
*
         #TRACE DATA=('24-Bit Redirection test.',%CONHEXA,16),         *
               PRINT=GEN
*
         #TRACE DATA=('31-Bit Redirection test.',?CONHEXA,16),         *
               PRINT=GEN
*
         #TRACE DATA=('64-Bit Redirection test.',!CONHEXAD,16),        *
               PRINT=GEN
*
         #TRACE DATA=('64-Bit Redirection test.',ATBCONA,16),          *
               PRINT=GEN
*
         #TRACE DATA=('64-Bit Redirection test.',!DSAWORKD,16),        *
               PRINT=GEN
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
         MVC   DSARETRY,=A(TERM999)
         DC    H'0'
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
CONHEXA  DC    A(HEXTAB)
CONHEXAD DC    AD(HEXTAB)
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
*
         CONEND ,
         COPY PGMGBLAS
*
         ORG &CASECT+(*-&CASECT+255)/256*256
         DS  0H
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
DSACTRL  DS     16D
DSAPLAYP DS     XL1024
*
         DSAEND ,                      Define DSA Suffex
*
***********************************************************************
* Define Above-The-Bar Storage Area                                   *
***********************************************************************
*
         ATBBEG ,                      Define ATB Prefix
*
ATBCONA  DS    CL16
*
         ATBEND ,                      Define ATB Suffex
         END   ,
./ ADD NAME=LNKTST01 0100-10050-10050-1200-00248-00248-00000-RHDTST
//RDHLNK01 JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHLNK01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHLNK01 - Program to Test #CALL & #GPRM in Various SYSTATEs       *
*                                                                     *
*    ..                                                               *
*  ....                                                               *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
***********************************************************************
* RDHLNK01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHLNK01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               AMODE=64,             ..64-Bit Addressing Mode          *
               ASCENV=P,             ..Put us in Access Mode           *
               RMODE=ANY,            ..Between Line and Bar            *
               CBAS=(R12),           ..Constant Base Register          *
               ABAS=(R11),           ..ATB Base Register               *
               ESTAE=NO,             ..Estea Support-DSARETRY          *
               IMP=BASR,             ..Estea Support-DSARETRY          *
               PRINT=GEN
*
** Program MainLine
*
         SAM31
         SAC   000
         SYSSTATE ASCENV=P,AMODE64=NO
         PRINT GEN
         #CALL RDHC31PR,(CONP1,CONP2,CONP3,CONP4,CONP5)
         PRINT NOGEN
*
         SAM31
         SAC   512
         SYSSTATE ASCENV=AR,AMODE64=NO
         PRINT GEN
         #CALL RDHC31AR,(CONP1,CONP2,CONP3,CONP4,CONP5)
         PRINT NOGEN
*
         SAM64
         SAC   000
         SYSSTATE ASCENV=P,AMODE64=YES
         PRINT GEN
         #CALL RDHC64PR,(CONP1,CONP2,CONP3,CONP4,CONP5)
         PRINT NOGEN
*
         SAM64
         SAC   512
         SYSSTATE ASCENV=AR,AMODE64=YES
         PRINT GEN
         #CALL RDHC64AR,(CONP1,CONP2,CONP3,CONP4,CONP5)
         PRINT NOGEN
*
** Return to Caller
*
         SAM31
         SAC   000
         SYSSTATE ASCENV=P,AMODE64=NO
EXIT     DS    0H
 PRINT GEN
         PGMEXIT RC=0                Return to Caller
 PRINT NOGEN
*
 print gen
         CONBEG ,
CONP1    DC     CL16'AAAAAAAAAAAAAAAA'
CONP2    DC     CL16'BBBBBBBBBBBBBBBB'
CONP3    DC     CL16'CCCCCCCCCCCCCCCC'
CONP4    DC     CL16'DDDDDDDDDDDDDDDD'
CONP5    DC     CL16'EEEEEEEEEEEEEEEE'
         CONEND ,
         DSABEG ,
DSAP1    DS     CL16
DSAP2    DS     CL16
DSAP3    DS     CL16
DSAP4    DS     CL16
DSAP5    DS     CL16
         DSAEND ,
         ATBBEG ,
         ATBEND ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDHC64PR - Program AMODE(31) Primary                                *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHC31PR PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               AMODE=31,             ..64-Bit Addressing Mode          *
               RMODE=ANY,            ..Between Line and Bar            *
               CBAS=(R12),           ..Constant Base Register          *
               ESTAE=NO,             ..Estea Support-DSARETRY          *
               IMP=BASR,             ..Estea Support-DSARETRY          *
               PRINT=NOGEN
*
         PRINT GEN
         #GPRM ((1,R2,'Data Area 1',16),                               *
               (2,R3,'Data Area 2',16),                                *
               (3,R4,'Data Area 3',16))
         PRINT NOGEN
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHC64AR - Program AMODE(31) AR Mode                                *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHC31AR PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               AMODE=31,             ..64-Bit Addressing Mode          *
               RMODE=ANY,            ..Between Line and Bar            *
               ASCENV=AR,            ..Indicate Control in AR Mode     *
               CBAS=(R12),           ..Constant Base Register          *
               ESTAE=NO,             ..Estea Support-DSARETRY          *
               IMP=BASR,             ..Estea Support-DSARETRY          *
               PRINT=NOGEN
*
         PRINT GEN
         #GPRM ((1,R2,'Data Area 1',16),                               *
               (2,R3,'Data Area 2',16),                                *
               (3,R4,'Data Area 3',16))
         PRINT NOGEN
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
*
***********************************************************************
* RDHC64PR - Program AMODE(64) Primary                                *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHC64PR PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               AMODE=64,             ..64-Bit Addressing Mode          *
               RMODE=ANY,            ..Between Line and Bar            *
               CBAS=(R12),           ..Constant Base Register          *
               ABAS=(R11),           ..ATB Base Register               *
               ESTAE=NO,             ..Estea Support-DSARETRY          *
               IMP=BASR,             ..Estea Support-DSARETRY          *
               PRINT=GEN
*
         PRINT GEN
         #GPRM ((1,R2,'Data Area 1',16),                               *
               (2,R3,'Data Area 2',16),                                *
               (3,R4,'Data Area 3',16))
         PRINT NOGEN
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
         ATBBEG ,                    Define ATB Prefix
         ATBEND ,                    Define ATB Suffex
*
***********************************************************************
* RDHC64AR - Program AMODE(64) AR Mode                                *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHC64AR PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               AMODE=64,             ..64-Bit Addressing Mode          *
               RMODE=ANY,            ..Between Line and Bar            *
               ASCENV=AR,            ..Indicate Control in AR Mode     *
               CBAS=(R12),           ..Constant Base Register          *
               ABAS=(R11),           ..ATB Base Register               *
               ESTAE=NO,             ..Estea Support-DSARETRY          *
               IMP=BASR,             ..Estea Support-DSARETRY          *
               PRINT=NOGEN
*
         PRINT GEN
         #GPRM ((1,R2,'Data Area 1',16),                               *
               (2,R3,'Data Area 2',16),                                *
               (3,R4,'Data Area 3',16))
         PRINT NOGEN
*
         PGMEXIT RC=0                Return to Caller
*
         CONBEG ,
         CONEND ,
         DSABEG ,                    Define DSA Prefix
         DSAEND ,                    Define DSA Suffex
         ATBBEG ,                    Define ATB Prefix
         ATBEND ,                    Define ATB Suffex
         END   ,
./ ADD NAME=MDLSIMPL 0100-10050-10050-1200-00070-00070-00000-RHDTST
//RDHMDLSM JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHMDLSM
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
* RDHMDLSM - Program Main Entry Point                                 *
***********************************************************************
*
RDHMDLSM PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               AMODE=64,               Runs AMODE(64)                  *
               RMODE=ANY,              Runs AMODE(64)                  *
               CBAS=(R12),             Define Constant Base Register   *
               ABAS=(R11),             Define ATB Base Register        *
               IMP=BASR,               Traces are BASR Implementation  *
               PRINT=GEN,                                              *
               MSG='Entering RDHMDLSM Model Program'
*
** Program MainLine
*
         GOSUB MAIN                    Do Main Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
         CONBEG ,                      Define Constant Prefix
         CONEND ,                      Define Constant Suffix
*
         DSABEG ,                      Define DSA Prefix
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
         ATBEND ,                      Define ATB Suffex
         END    ,
./ ADD NAME=MDL1TASK 0100-10050-10050-1200-00192-00192-00000-RHDTST
//RDHMDL1T JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHMDL1T
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHMDL1T -                                                         *
*                                                                     *
*    ..                                                               *
*  ....                                                               *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
***********************************************************************
* RDHMDL1T - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDHMDL1T PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               AMODE=64,               Runs AMODE(64)                  *
               RMODE=ANY,              Runs AMODE(64)                  *
               LEN=16,                 Obtain 16K for Stacking DSA     *
               CBAS=(R12),             Define Constant Base Register   *
               ABAS=(R11),             Define ATB Base Register        *
               ESTAE=NO,               No ESTAE Support Needed         *
               IMP=BASR,               Traces are BASR Implementation  *
               PRINT=GEN,                                              *
               MSG='Entering RDHMDL1T Model Program With 1 Task'
*

         L     R14,0(,R1)              Get MVE PARM=Data
         NILH  R14,X'7FFF'             Strip High Bit
         LH    R15,0(,R14)             Get Length of PARM=Data
         IF (LTR,R15,R15,NZ)           If We Have Data-Print it
            LA R15,2(,R15)                Increace Length by Halfword
            #TRACE REGS=ALL,DATA=('Data Off R1',0(R14),(R15))
         ENDIF
            #TRACE MSG='No PARM=Data was specified.'
         ENDIF
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
         MVC   ATBCONA,HEXTAB
         LAY   R2,ATBCONA
         STG   R2,DSAWORKD
         LA    R3,L'HEXTAB
*
*        #TRACE DATA=('24-Bit Redirection test.',%CONHEXA,16),         *
               PRINT=GEN
*
         #TRACE DATA=('31-Bit Redirection test.',?CONHEXA,16),         *
               PRINT=GEN
*
         #TRACE DATA=('64-Bit Redirection test.',!CONHEXAD,16),        *
               PRINT=GEN
*
         #TRACE DATA=('64-Bit Redirection test.',ATBCONA,16),          *
               PRINT=GEN
*
         #TRACE DATA=('64-Bit Redirection test.',!DSAWORKD,16),        *
               PRINT=GEN
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY SAVE=(R2,R6),AMODE=31,ASCENV=AR
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
CONHEXA  DC    A(HEXTAB)
CONHEXAD DC    AD(HEXTAB)
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
*
         DSAEND ,                      Define DSA Suffex
*
***********************************************************************
* Define Above-The-Bar Storage Area                                   *
***********************************************************************
*
         ATBBEG ,                      Define ATB Prefix
*
ATBCONA  DS    CL16
*
         ATBEND ,                      Define ATB Suffex
         END   ,
./ ADD NAME=MDL3TASK 0100-10050-10050-1200-00392-00392-00000-RHDTST
//RDHMDL3T JOB 'DUCT Test 1',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHMDL3T
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHMDL3T - Model Program With Two Subtasks                         *
*                                                                     *
*    ..                                                               *
*  ....                                                               *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHASDWA ,                     SDWA Mapping macro
SDWLEN   EQU   SDWAEND-SDWA               ..Length of SDWA
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
***********************************************************************
* RDHMDL3T - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDHMDL3T PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               IMP=BASR,                                               *
               BASE=(R12,R11)          (Same)
*
** Program MainLine
*
         GOSUB INIT                    Do Initialization Processing
         GOSUB WAIT                    Wait for Post
         GOSUB TERM                    Do Termination Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
         GETMAIN RU,LV=COMDSLEN,       Obtain Buffer for Communications*
               BNDRY=PAGE              (Same)
         LR    R10,R1                  Setup Addressability
         USING COMDSECT,R10            (Same)
         ST    R1,DSACOMMN             Save Address
         OI    DSACOMMN,HEX80          Set VL Bit
         MVC   COMID,=C'DUCTCOMN'      Set Eyecatcher
         MVC   COMLNGTH,=A(COMDSLEN)   Save Size for Freemain
*
** Identify Entry Points for the Subtasks
*
         L     R2,=A(RDHSTSKA)         Get Address of Writer Subtask
         IDENTIFY EP=RDHSTSKA,         Identify Entry point            *
               ENTRY=(R2)              (Same)
         L     R2,=V(RDHSTSKB)         Get Address of Disposition STask
         IDENTIFY EP=RDHSTSKB,         Identify Entry point            *
               ENTRY=(R2)              (Same)
*
** Attach The Subtask A
*
         MVC   DSAATTA,ATTACH          Move MF=L Form to DSA
         ATTACH EP=RDHSTSKA,           Attach A Subtask                *
               ECB=DSAECBA,            (Same)                          *
               MF=(E,DSACOMMN),        (Same)                          *
               SF=(E,DSAATTA)          (Same)
         ST     R1,DSATCBA             Save TCB Address for Detach
         #TRACE MSG='ATTACH of RDHSTSKA.',REGS=(R1,R15)
*
** Attach The Subtask B
*
         MVC   DSAATTB,ATTACH          Move MF=L form to DSA
         ATTACH EP=RDHSTSKB,           Attach B Subtask                *
               ECB=DSAECBB,            (Same)                          *
               MF=(E,DSACOMMN),        (Same)                          *
               SF=(E,DSAATTB)          (Same)
         ST     R1,DSATCBB             Save TCB Address for Detach
         #TRACE MSG='ATTACH of RDHSTSKB.',REGS=(R1,R15)
*
** Build ECB List
*
*
         MVC   DSAWTOR,RWTOR
*temp    WTOR  'RDH0001: MDL3 Test job Waiting to Continue.',          *
               DSAWORKD,8,DSAECBW,MF=(E,DSAWTOR)
*
         LA R14,DSAECBW                Build ECB List To Wait On
         ST R14,DSAECBL                (Same)
         LA R14,DSAECBA                (Same)
         ST R14,DSAECBL+4              (Same)
         LA R14,DSAECBB                (Same)
         ST R14,DSAECBL+8              (Same)
         OI DSAECBL+8,X'80'            (Same)
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
         DETACH DSATCBA                Detach A Subtask
         DETACH DSATCBB                Detach B Subtask
*
         FREEMAIN RU,LV=COMDSLEN,      Free Storage for Common Area    *
               A=(R10)                 (Same)
         XR    R10,R10                 Zero Addressability
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** WAIT - Wait for Subtasks to Complete                               *
*=====================================================================*
*
WAIT     SUBNTRY ,                 -*- Cheap Wait Logic
*temp    WAIT ECBLIST=DSAECBL          Wait on ECB List
*
** Terminate The Subtasks
*
         POST COMDECBA                 Terminate A Subtask
         POST COMDECBB                 Terminate B Subtask
*
         WAIT ECB=DSAECBA              Wait for A Subtask
         WAIT ECB=DSAECBB              Wait for B Subtask
*
WAIT999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constant Area
*
ATTACH   ATTACH SF=L                   Define ATTACH Parameter List
ATTACHL  EQU    *-ATTACH               (Same)
*
RWTOR    WTOR  'RDH0001: MDL3 Test Job Reply U to Terminate.',         *
               *-*,8,*-*,MF=L
RWTORL   EQU   *-RWTOR
*
** Equates
*
HEXFF    EQU   X'FF'                   Define Common Equates
HEX80    EQU   X'80'                   (Same)
HEX40    EQU   X'40'                   (Same)
HEX00    EQU   X'00'                   (Same)
*
         CONEND ,                      Define End of Constant Area
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
DSACOMMN DS    A                       Addr of Communications Area
*
DSATCBA  DS    A                       TCB Addr for A Subtask
DSATCBB  DS    A                       TCB Addr for B Subtask
*
DSAECBW  DS    A                       ECB Posted for WTOR
DSAECBA  DS    A                       Term ECB for A Subtask
DSAECBB  DS    A                       Term ECB for B Subtask
DSAECBL  DS    3A                      ECBLIST for Wait
*
         DS    0D
DSAATTA  DS    XL(ATTACHL)             Attach PLIST for A Subtask
         DS    0D
DSAATTB  DS    XL(ATTACHL)             Attach PLIST for B Subtask
*
         DS    0D
DSAWTOR  DS    XL(RWTORL)'0'           MF=L for WTOR
*
         DSAEND ,                      Define DSA Suffix
*
***********************************************************************
*                                                                     *
** RDHSTSKA - First Subtask                                           *
*                                                                     *
*                                                                     *
***********************************************************************
*
RDHSTSKA PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               IMP=BASR,                                               *
               MSG='Initiating First Subtask',                         *
               BASE=(R12,R11)          Base Registers
*
         L     R10,0(,R1)              Get Address of Common Area
         LA    R10,0(,R10)             Zero High Bit for Cleanliness
         USING COMDSECT,R10            & Addressability
         #TRACE REGS=(R1,R10),         Trace Common Area               *
               DATA=('Common Area input',0(R10),COMUSEDL)
*
** Program MainLine
*
         GOSUB AINI                    Do Initialization Processing
         GOSUB AMAN                    Do Main Processing
         GOSUB ATRM                    Do Termination Processing
*                                      Do Termination Processing
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** AINI - Do Initialization Processing                                *
*=====================================================================*
*
AINI     SUBNTRY ,
*
AINI999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** ATRM - Do Termination Processing                                   *
*=====================================================================*
*
ATRM     SUBNTRY ,
*
*
ATRM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** AMAN - Do Main Processing                                          *
*=====================================================================*
*
AMAN     SUBNTRY ,
         WAIT ECB=COMDECBA             Wait For Main Task Post
*
*
*
AMAN999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constant Area
*
*
         CONEND ,                      Define End of Constant Area
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
*
         DSAEND ,                      Define DSA Suffix
*
***********************************************************************
*                                                                     *
** RDHSTSKB - Second Subtask                                          *
*                                                                     *
*                                                                     *
***********************************************************************
*
RDHSTSKB PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               IMP=BASR,                                               *
               MSG='Initiating Second Subtask',                        *
               BASE=(R12,R11)          Base Registers
*
         L     R10,0(,R1)              Get Address of Common Area
         LA    R10,0(,R10)             Zero High Bit for Cleanliness
         USING COMDSECT,R10            & Addressability
         #TRACE REGS=(R1,R10),         Trace Common Area               *
               DATA=('Common Area input',0(R10),COMUSEDL)
*
** Program MainLine
*
         GOSUB BINI                    Do Initialization Processing
         GOSUB BMAN                    Do Main Prrocessing
         GOSUB BTRM                    Do Termination Processing
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** BINI - Do Initialization Processing                                *
*=====================================================================*
*
BINI     SUBNTRY ,
*
*
BINI999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** BTRM - Do Termination Processing                                   *
*=====================================================================*
*
BTRM     SUBNTRY ,
*
*
BTRM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** DSPT -                                                             *
*=====================================================================*
*
BMAN     SUBNTRY DATA=('Common Area',0(R10),COMUSEDL)
*
         WAIT ECB=COMDECBB             Wait For Main Task Post
*
BMAN999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,                      Define Constant Area
*
         CONEND ,                      Define End of Constant Area
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
*
         DSAEND ,                      Define DSA Suffix
*
***********************************************************************
* COMDSECT - Intertask Communications Area                            *
***********************************************************************
*
COMDSECT DSECT ,                       Save Area for CTOKENS
COMID    DS    CL8'COMMON'             Set ID in Area
COMLNGTH DS    F                       Length of COMDSECT for Freemain
*
COMDECBA DS    A                       ECB Posted to Terminate A
COMDECBB DS    A                       ECB Posted to Terminate B
*
         DS    0D
COMUSEDL EQU   *-COMDSECT              Length of Area Used
         ORG   COMDSECT+4096           Force to 1-Page Area
COMDSLEN EQU   *-COMDSECT              Length of Token Entry
*
         END   ,
./ ADD NAME=RDHGATBS 0100-10050-10050-1200-00342-00342-00000-RHDTST
//RDHGATBS JOB 'RDHGATB Branch Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHGATBS
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHGATBS - Test Program for RDHGATB - #GETATB and #FREATB Macros   *
*                                                                     *
*    This program was written for the purpose of testing RDHGATB.     *
*  That program is the core program that supports getmain and         *
*  freemain of above-the-bar storage.  It is entered via the #GETATB  *
*  and #FREATB macros.                                                *
*    These macros typically will issue SVC 167 to process the callers *
*  requests for storage above-the-bar.  But it may also be entered    *
*  via a branch entry request if BRANCH=YES is specifiec on the       *
*  macros.                                                            *
*    This version of the test program uses the SVC entry for the      *
*  #GATBATB and #FREATB macros.                                       *
*                                                                     *
*                                                                     *
***********************************************************************
*
RDHGATBS PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               AMODE=64,               Runs AMODE(64)                  *
               RMODE=ANY,              Runs AMODE(64)                  *
               CBAS=(R12),             Define Constant Base Register   *
               ABAS=(R11),             Define ATB Base Register        *
               IMP=SVC,                Traces are BASR Implementation  *
               PRINT=GEN,                                              *
               MSG='Entering RDHGATBS Test Program'
*
** Program MainLine
*
*        GOSUB TST01                   Basic Test of #GETATB Macro
         GOSUB TST02                   Basic Getmain & Freemain
*        GOSUB TST03                   Test of Abend Codes
*        GOSUB TST04                   Merging Free VAS After No Merge
*        GOSUB TST05                   Test Double Merge Path
*        GOSUB TST06                   Use All Space Free in Rev Order
*        GOSUB TST07                   Use All Space Free step Order
*        GOSUB TST08                   Use All Space 1 Lst On Chn Path
*        GOSUB TST09                   Use All Space 2 Lst On Chn Path
*        GOSUB TST10                   Use All Space Free Hopscotch
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** TST01 - Test the #GETATB Macro                                     *
*=====================================================================*
*
TST01    SUBNTRY ,
         #GETATB RU,LV=64
         #TRACE REGS=(R0,R1,R15)
*
         #GETATB RU,LV=32
*
         #GETATB RU,LV=32,KEY=2
*
TST019   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST02 - Test Basic Getmain and Freemain                            *
*=====================================================================*
*
TST02    SUBNTRY ,
*
** Test Merging With Free VAS Before
*
 print gen
         #GETATB RU,LV=64              Get some ATB Storage
         #FREATB RU,LV=64,A=(R1)       Free The Storage We Got
 print nogen
*
*
TST029   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST03 - Test the #GETATB Macro Abend Codes                         *
*=====================================================================*
*
TST03    SUBNTRY ,
*
** Test Abend Codes
*
*
         L     R2,=A(1024*1024+1)      More than 1 Meg         U167/0C
*        #GETATB RU,LV=(R2)
*
*        #GETATB RU,LV=64              Get some ATB Storage
         LA R1,2(,R1)                  Test with Wrong Address
*        #FREATB RU,LV=64,A=(R1)       Free The Storage We Got U167/10
*
         #GETATB RU,LV=64              Get some ATB Storage
         LA R2,32                      Test with Wrong Length
         #FREATB RU,LV=(R2),A=(R1)     Free The Storage We Got U167/14
*
*
TST039   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST04 - Test Merging Free VAS After no Merge                       *
*=====================================================================*
*
TST04    SUBNTRY ,
         #GETATB RU,LV=64              Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=64              Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=64              Get some ATB Storage
*
         #FREATB RU,LV=64,A=(R2)       Free The Storage We Got
         #FREATB RU,LV=64,A=(R3)       Free The Storage We Got
*
TST049   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST05 - Test Double Merge - Free (Aloc) Free Aloc                  *
*=====================================================================*
*
TST05    SUBNTRY ,
         #GETATB RU,LV=64              Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=64              Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=64              Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=64              Get some ATB Storage
         LGR R5,R1
*
         #FREATB RU,LV=64,A=(R2)       Free The Storage We Got
         #FREATB RU,LV=64,A=(R4)       Free The Storage We Got
*
         #FREATB RU,LV=64,A=(R3)       Free The Storage We Got
         #FREATB RU,LV=64,A=(R5)       Free Last Gotten Storage
*
TST059   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST06 - Freemain Test - Get All Space Freemain in Reverse Order    *
*=====================================================================*
*
TST06    SUBNTRY ,
         LLGT  R9,=A(1024*256)
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R5,R1
*
         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R4)     Free The Storage We Got
*
         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R2)     Free Last Gotten Storage
*
*
TST069   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST07 - Freemain Test - Get All Space Free in Step Order           *
*=====================================================================*
*
TST07    SUBNTRY ,
         LLGT  R9,=A(1024*256)
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R5,R1
*
         #FREATB RU,LV=(R9),A=(R4)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got
*
         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R2)     Free Last Gotten Storage
*
*
TST079   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST08 - Freemain Test - Get All Space Free in Step Order           *
*=====================================================================*
*
TST08    SUBNTRY ,
         LLGT  R9,=A(1024*256)
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R5,R1
*
         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got
*
         #FREATB RU,LV=(R9),A=(R4)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R2)     Free Last Gotten Storage
*
*
TST089   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST09 - Freemain Test - 2 Lst On Chain Path                        *
*=====================================================================*
*
TST09    SUBNTRY ,
         LLGT  R9,=A(1024*128)
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R5,R1
*
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R6,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R7,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R8,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R10,R1
*
         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got
*
         #FREATB RU,LV=(R9),A=(R7)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R10)    Free Last Gotten Storage
*
*
TST099   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST10 - Freemain Test - 2 Lst On Chain Path - Free All             *
*=====================================================================*
*
TST10    SUBNTRY ,
         LLGT  R9,=A(1024*128)
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R5,R1
*
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R6,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R7,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R8,R1
         #GETATB RU,LV=(R9)              Get some ATB Storage
         LGR R10,R1
*
         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got
*
         #FREATB RU,LV=(R9),A=(R7)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R10)    Free Last Gotten Storage
*
** Free The Rest Last Freemain should show 1Meg Length
*
         #FREATB RU,LV=(R9),A=(R2)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R4)     Free The Storage We Got
*
         #FREATB RU,LV=(R9),A=(R6)     Free The Storage We Got
         #FREATB RU,LV=(R9),A=(R8)     Free Last Gotten Storage
*
*
TST109   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST09 - Freemain Test -                                            *
*=====================================================================*
*
TST99    SUBNTRY ,
*
*
TST999   DS    0H
         SUBEXIT ,
*
*=====================================================================*
*
         CONBEG ,                      Define Constant Prefix
         CONEND ,                      Define Constant Suffix
*
         DSABEG ,                      Define DSA Prefix
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
         ATBEND ,                      Define ATB Suffex
         END   ,
./ ADD NAME=RDHGATBT 0100-10050-10050-1200-00400-00400-00000-RHDTST
//RDHGATBT JOB 'RDHGATB Branch Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHGATBT
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHGATBT - Test Program for RDHGATB - #GETATB and #FREATB Macros   *
*                                                                     *
*    This program was written for the purpose of testing RDHGATB.     *
*  That program is the core program that supports getmain and         *
*  freemain of above-the-bar storage.  It is entered via the #GETATB  *
*  and #FREATB macros.                                                *
*    These macros typically will issue SVC 167 to process the callers *
*  requests for storage above-the-bar.  But it may also be entered    *
*  via a branch entry request if BRANCH=YES is specifiec on the       *
*  macros.                                                            *
*    This is the first test program to test this facility.  It was    *
*  written prior to the SVC wraparound code for RDHGATB and as such   *
*  uses the BRANCH=YES form of these macros.  However, it is a pretty *
*  comprehensive series of test to validate the functionality of the  *
*  services provided.                                                 *
*                                                                     *
*                                                                     *
***********************************************************************
*
RDHGATBT PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               AMODE=64,               Runs AMODE(64)                  *
               RMODE=ANY,              Runs AMODE(64)                  *
               CBAS=(R12),             Define Constant Base Register   *
               ABAS=(R11),             Define ATB Base Register        *
               IMP=BASR,               Traces are BASR Implementation  *
               PRINT=GEN,                                              *
               MSG='Entering RDHGATBT Test Program'
*
** Program MainLine
*
*        GOSUB CALL                    Test With #CALL Macro
*        GOSUB TST01                   Basic Test of #GETATB Macro
         GOSUB TST02                   Basic Getmain & Freemain
*        GOSUB TST03                   Test of Abend Codes
*        GOSUB TST04                   Merging Free VAS After No Merge
*        GOSUB TST05                   Test Double Merge Path
*        GOSUB TST06                   Use All Space Free in Rev Order
*        GOSUB TST07                   Use All Space Free step Order
*        GOSUB TST08                   Use All Space 1 Lst On Chn Path
*        GOSUB TST09                   Use All Space 2 Lst On Chn Path
*        GOSUB TST10                   Use All Space Free Hopscotch
*
** Return to Caller
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** CALL - Initial Test With Branch Entry                              *
*=====================================================================*
*
CALL     SUBNTRY ,
*
         LG    R0,=AD(64)              Get 64 Bytes of ATB
         XGR   R1,R1                   Indicate Getmain
         #CALL RDHGATB
*
         LG    R0,=AD(64)              Get 64 Bytes of ATB
         XGR   R1,R1                   Indicate Getmain
         #CALL RDHGATB
*
         MODESET EXTKEY=KEY2,WORKREG=(2)
         LG    R0,=AD(64)              Get 64 Byte ATB
         XGR   R1,R1                   Indicate Getmain
         #CALL RDHGATB
         MODESET KEY=ZERO
*
CALL999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST01 - Test the #GETATB Macro                                     *
*=====================================================================*
*
TST01    SUBNTRY ,
         #GETATB RU,LV=64,BRANCH=YES
         #TRACE REGS=(R0,R1,R15)
*
         #GETATB RU,LV=32,BRANCH=YES
*
         #GETATB RU,LV=32,KEY=2,BRANCH=YES
*
TST019   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST02 - Test Basic Getmain and Freemain                            *
*=====================================================================*
*
TST02    SUBNTRY ,
*
** Test Merging With Free VAS Before
*
         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
         #FREATB RU,LV=64,A=(R1),      Free The Storage We Got         *
               BRANCH=YES              Merging With VAS After Aloc VAS
*
*
TST029   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST03 - Test the #GETATB Macro Abend Codes                         *
*=====================================================================*
*
TST03    SUBNTRY ,
*
** Test Abend Codes
*
*
         L     R2,=A(1024*1024+1)      More than 1 Meg         U167/0C
*Works   #GETATB RU,LV=(R2),BRANCH=YES
*
*works   #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
         LA R1,2(,R1)                  Test with Wrong Address
*Works   #FREATB RU,LV=64,A=(R1),      Free The Storage We Got U167/10 *
               BRANCH=YES              (Same)
*
         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
         LA R2,32                      Test with Wrong Length
         #FREATB RU,LV=(R2),A=(R1),    Free The Storage We Got U167/14 *
               BRANCH=YES              (Same)
*
*
TST039   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST04 - Test Merging Free VAS After no Merge                       *
*=====================================================================*
*
TST04    SUBNTRY ,
         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
*
         #FREATB RU,LV=64,A=(R2),      Free The Storage We Got         *
               BRANCH=YES              No Merging With a Free VAS Path
         #FREATB RU,LV=64,A=(R3),      Free The Storage We Got         *
               BRANCH=YES              Merging With VAS Befor Aloc VAS
*
TST049   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST05 - Test Double Merge - Free (Aloc) Free Aloc                  *
*=====================================================================*
*
TST05    SUBNTRY ,
         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage
         LGR R5,R1
*
         #FREATB RU,LV=64,A=(R2),      Free The Storage We Got         *
               BRANCH=YES              No Merging With a Free VAS Path
         #FREATB RU,LV=64,A=(R4),      Free The Storage We Got         *
               BRANCH=YES              No Merging With a Free VAS Path
*
         #FREATB RU,LV=64,A=(R3),      Free The Storage We Got         *
               BRANCH=YES              Double Merge Test
         #FREATB RU,LV=64,A=(R5),      Free Last Gotten Storage        *
               BRANCH=YES              Double Merge Test
*
TST059   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST06 - Freemain Test - Get All Space Freemain in Reverse Order    *
*=====================================================================*
*
TST06    SUBNTRY ,
         LLGT  R9,=A(1024*256)
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R5,R1
*
         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R4),    Free The Storage We Got         *
               BRANCH=YES
*
         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R2),    Free Last Gotten Storage        *
               BRANCH=YES
*
*
TST069   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST07 - Freemain Test - Get All Space Free in Step Order           *
*=====================================================================*
*
TST07    SUBNTRY ,
         LLGT  R9,=A(1024*256)
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R5,R1
*
         #FREATB RU,LV=(R9),A=(R4),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *
               BRANCH=YES
*
         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R2),    Free Last Gotten Storage        *
               BRANCH=YES
*
*
TST079   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST08 - Freemain Test - Get All Space Free in Step Order           *
*=====================================================================*
*
TST08    SUBNTRY ,
         LLGT  R9,=A(1024*256)
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R5,R1
*
         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *
               BRANCH=YES
*
         #FREATB RU,LV=(R9),A=(R4),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R2),    Free Last Gotten Storage        *
               BRANCH=YES
*
*
TST089   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST09 - Freemain Test - 2 Lst On Chain Path                        *
*=====================================================================*
*
TST09    SUBNTRY ,
         LLGT  R9,=A(1024*128)
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R5,R1
*
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R6,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R7,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R8,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R10,R1
*
         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *
               BRANCH=YES
*
         #FREATB RU,LV=(R9),A=(R7),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R10),   Free Last Gotten Storage        *
               BRANCH=YES
*
*
TST099   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST10 - Freemain Test - 2 Lst On Chain Path - Free All             *
*=====================================================================*
*
TST10    SUBNTRY ,
         LLGT  R9,=A(1024*128)
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R2,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R3,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R4,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R5,R1
*
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R6,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R7,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R8,R1
         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage
         LGR R10,R1
*
         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *
               BRANCH=YES
*
         #FREATB RU,LV=(R9),A=(R7),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R10),   Free Last Gotten Storage        *
               BRANCH=YES
*
** Free The Rest Last Freemain should show 1Meg Length
*
         #FREATB RU,LV=(R9),A=(R2),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R4),    Free The Storage We Got         *
               BRANCH=YES
*
         #FREATB RU,LV=(R9),A=(R6),    Free The Storage We Got         *
               BRANCH=YES
         #FREATB RU,LV=(R9),A=(R8),    Free Last Gotten Storage        *
               BRANCH=YES
*
*
TST109   DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST09 - Freemain Test -                                            *
*=====================================================================*
*
TST99    SUBNTRY ,
*
*
TST999   DS    0H
         SUBEXIT ,
*
*=====================================================================*
*
         CONBEG ,                      Define Constant Prefix
         CONEND ,                      Define Constant Suffix
*
         DSABEG ,                      Define DSA Prefix
         DSAEND ,                      Define DSA Suffex
*
         ATBBEG ,                      Define ATB Prefix
         ATBEND ,                      Define ATB Suffex
         END   ,
./ ADD NAME=SSYTST01 0100-10050-10050-1200-00198-00198-00000-RHDTST
//RDHSSY1T JOB 'MOD1T Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHSSY1T
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHSSY1T - Program Designed to Test The SSY Macro Instructions     *
*                                                                     *
*    The idea here is that we need to replace the entire SS           *
*  instruction set with SSY macros so that we can finally take        *
*  full advantage of the 20-Bit displacement reality that is now      *
*  possible within Zos.                                               *
*    Most of the old BDDD instructions, RX and RS have already        *
*  been replaced with a new set of instructions that use a BDDDDD     *
*  displacement providing direct addressability to a megabyte for     *
*  a single base register.                                            *
*    And the only thing still tying us to BDDD is the SS instruction  *
*  set.  This cannot be done in hardware because that would require   *
*  an 8-Byte instruction and the box is not designed for that.  So    *
*  the solution is to replicate the functionality using macros.       *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         COPY  #MAC64                  Copy 64-Bit Support Macros
*
         PRINT OFF
         IHAPSA  ,                     PSA  Deect
         CVT   DSECT=YES               CVT  Dsect
         IHASCVT ,                     SCVT Dsect
*
         IHAASCB ,                     ASCB Dsect
         IHAASXB ,                     ASXB Dsect
         IHAASSB ,                     ASSB Dsect
*
         IKJTCB  ,                     TCB  Dsect
         IHASTCB ,                     STCB Dsect
         IHARB   ,                     PRB  Dsect
         PRINT ON,NOGEN
*
***********************************************************************
* RDHSSY1T - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Establish Addressability
*
RDHSSY1T PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *
               IMP=BASR,                                               *
               AMODE=64,                                               *
               ABAS=(R10),                                             *
               BASE=(R12,R11)          (Same)
*
** Program MainLine
*
         GOSUB INIT                    Do Init Processing
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         ESTAE 0                       Cancel ESTAE Recovery
*
         PGMEXIT RC=0                  Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         GOSUB TST1                    Do Initial Test MVCY
*
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TST1 - initial Test of Concept                                     *
*=====================================================================*
*
TST1     SUBNTRY ,
         PRINT GEN
         MVC   DSAFR,=C'TST1MVCY'
         MVCY  DSATO,DSAFR             Test Macro
         PRINT NOGEN
         #TRACE MSG=('MVCY Fr: ',DSAFR,' To: ',DSATO)
*
         PRINT GEN
         MVC   DSAFR,=C'TST2MVCY'
         MVCY  DSATO,DSAFR,SAVE=YES    Test Macro Saving R14,R15
         PRINT NOGEN
         #TRACE MSG=('MVCY Fr: ',DSAFR,' To: ',DSATO)
*
         PRINT GEN
         MVC   DSAFR,=C'TST3MVCY'
         MVCY  DSATO,DSAFR,WKREG=R2    Test Macro Saving With WorkReg
         PRINT NOGEN
         #TRACE MSG=('MVCY Fr: ',DSAFR,' To: ',DSATO)
*
*
TST1999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
*
** Equates
*
HEXFF    EQU   X'FF'                   Common Equates
HEX00    EQU   X'00'                   (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                      Define DSA Prefix
*
DSAFR    DS     CL8
DSATO    DS     CL8
*
         DSAEND ,                      Define DSA Suffex
*
***********************************************************************
* Define Above-The-Bar (ATB) Storage                                  *
***********************************************************************
*
         ATBBEG ,                      Define ATB Prefix
*
         ATBEND ,                      Define ATB Suffex
         END   ,
./ ADD NAME=SVCTST01 0100-10050-10050-1200-00139-00139-00000-RHDTST
//RDHSVT01 JOB 'Tracing Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHSVT01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHSVT01 - Test Label Level Tracing Using IMP=SVC                  *
*                                                                     *
*    This program was created to provide a basic test for IMP=SVC,    *
*  testing the SVC implementation of the traces.                      *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,
         CVT   DSECT=YES
         IHASCVT ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDHSVT01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHSVT01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               TRACE=YES,            (Same)                            *
               IMP=SVC,              (Same)                            *
               MSG='Test program that uses IMP=SVC.'
*
** Program MainLine
*
         GOSUB INIT                  Do Init Processing
         GOSUB MAIN                  Do Main Processing
         GOSUB TERM                  Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
         LTORG ,                     Define Literial Pool
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
*
         DSAEND ,                    Define DSA Suffex
         END   ,
./ ADD NAME=TRPTST01 0100-10050-10050-1200-00143-00143-00000-RHDTST
//RDHTRP01 JOB 'Tracing Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHTRP01
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHTRP01 - Test Label Level Tracing Using IMP=TRAP2                *
*                                                                     *
*    This program was created to provide a basic test for IMP=TRAP2,  *
*  testing the DUCT implementation of the traces. This is a basic     *
*  test used for regression testing.                                  *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,
         CVT   DSECT=YES
         IHASCVT ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDHTRP01 - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHTRP01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),       (Same)                            *
               TRACE=YES,            (Same)                            *
               IMP=TRAP2,            (Same)                            *
               PRINT=GEN,            (Same)                            *
               MSG='Test program that uses IMP=TRAP2.'
*
** Program MainLine
*
         GOSUB INIT                  Do Init Processing
         GOSUB MAIN                  Do Main Processing
         GOSUB TERM                  Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         L     R1,=C'TRAP'
*        SVC   166
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
         LTORG ,                     Define Literial Pool
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
*
         DSAEND ,                    Define DSA Suffex
         END   ,
./ ADD NAME=TSTSVC1  0100-10050-10050-1200-00133-00133-00000-RHDTST
//RDHTSSVC JOB (0,0),'HARPER',REGION=4M,
//    CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)
//*
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCL,MOD=RDHTSSVC
//ASM.SYSIN    DD  *
***********************************************************************
* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHTSSVC - Test SVC to Test Label Level Tracing in an SVC          *
*                                                                     *
*    This program uses IMP=BASR implementation of the traces to test  *
*  the SVCNTRY/SVCEXIT code and the execution of the traces within    *
*  an SVC.                                                            *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
          PRINT OFF
          IHAPSA ,                     Define PSA DSECT Area
          PRINT ON
*
***********************************************************************
* RDHTSSVC - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                  Define PSA Addressability
*
RDHTSSVC SVCNTRY SVCNO=230,            Program Entry Code              *
               BASE=(R12,R11),         Use Standard Bases              *
               PRINT=GEN,              (Same)                          *
               IMP=BASR                (Same)
*
         GOSUB INIT                    Perform Initialization
         GOSUB MAIN                    Do Main Processing
         GOSUB TERM                    Do Termination Processing
*
** Return to Caller
*
MAINEXIT DS    0H
         SVCEXIT RC=0                  Define Program Exit Code
*
***********************************************************************
* MAIN- Program Main Processing                                       *
***********************************************************************
*
MAIN     SUBNTRY ,
*
** Return to Caller
*
MAINEND  DS    0H
         SUBEXIT ,

*
***********************************************************************
* INIT - Perform Program Initialization                               *
***********************************************************************
*
INIT     SUBNTRY ,                 -*- Open SYSPRINT File
*
** Return to Caller
*
INITEND  DS    0H
         SUBEXIT ,
*
***********************************************************************
* TERM - Perform Program Termination                                  *
***********************************************************************
*
TERM     SUBNTRY ,
*
** Return to Caller
*
TERMEND  DS    0H
         SUBEXIT ,

***********************************************************************
*  Literials and Constants                                            *
***********************************************************************
*
         CONBEG ,
*
HEXFF    EQU   X'FF'
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area - DSA                                   *
***********************************************************************
*
         DSABEG ,                 <*** Begin Dynamic Storage Area
*
DSARC    DS    F                       Return Code
DSAPRWD1 DS    F                       SVRB Address
*
DSAFLAG  DS    B                       Flag Byte
*
         DSAEND ,                 <*** End Dynamic Storage Area
         END ,
//*
//** Insert TEST SVC
//*
//*NSERT    EXEC PGM=RDHINSTL,PARM='INSERT,RDHTSSVC,230'
//REPLACE   EXEC PGM=RDHINSTL,PARM='REPLACE,RDHTSSVC,230'
//STEPLIB  DD  DISP=SHR,DSN=RDH.$TLS.LOD
//SYSPRINT DD  SYSOUT=*
./ ADD NAME=TSTSVC1P 0100-10050-10050-1200-00148-00148-00000-RHDTST
//RDHTTSVC JOB 'RTM Test',
//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A
//*
//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')
//*
//ASMXIT  EXEC RASMCLG,MOD=RDHTTSVC
//ASM.SYSIN DD *
***********************************************************************
* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *
***********************************************************************
*                                                                     *
*   This file is part of Richard Harper's Private Development         *
* Platform (PDP).                                                     *
*                                                                     *
*   Richard Harper's PDP is free software: you can redistribute       *
* it and/or modify it under the terms of the GNU General Public       *
* License as published by the Free Software Foundation, either        *
* version 3 of the License, or (at your option) any later version.    *
*                                                                     *
*   Richard Harper's PDP is distributed in the hope that it will      *
* be useful, but WITHOUT ANY WARRANTY; without even the implied       *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *
* See the GNU General Public License for more details.                *
*                                                                     *
*   You should have received a copy of the GNU General Public         *
* License along with Richard harper's PDP.  If not, see               *
* <http://www.gnu.org/licenses/>.                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
*                                                                     *
** RDHTTSVC - Test Label Level Tracing Within an SVC                  *
*                                                                     *
*    This test program is intended to test the traces within an SVC   *
*  environment.  This program issues an SVC 230, which should be      *
*  RDHTSSVC, which is a test SVC usng a BASR implementation of the    *
*  traces.  Its a very simple program, but an important test.         *
*    This program also has tracing active, so both programs will      *
*  write trace output to the TRCPRINT DD in the JCL.                  *
*                                                                     *
*                                                                     *
***********************************************************************
*
*---------------------------------------------------------------------*
* Define MVS System Data Areas                                        *
*---------------------------------------------------------------------*
*
         PRINT OFF
         IHAPSA  ,
         PRINT ON,NOGEN
*
***********************************************************************
* RDHTTSVC - Program Main Entry Point                                 *
***********************************************************************
*
         USING PSA,R0                Establish Addressability
*
RDHTTSVC PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *
               BASE=(R12,R11),PRINT=GEN,IMP=BASR
*
** Program MainLine
*
*        GOSUB INIT                  Do Init Processing
         GOSUB MAIN                  Do Main Processing
*        GOSUB TERM                  Do Term Processing
*
** Return to Caller
*
EXIT     DS    0H
         PGMEXIT RC=0                Return to Caller
*
*=====================================================================*
** MAIN - Main Processing Routine                                     *
*=====================================================================*
*
MAIN     SUBNTRY ,
         LM    R2,R5,=A(1,2,3,4)
         LA    R1,*+6
         SVC   230
*
MAIN999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** INIT - Do Initialization Processing                                *
*=====================================================================*
*
INIT     SUBNTRY ,
*
*
INIT999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** TERM - Do Termination Processing                                   *
*=====================================================================*
*
TERM     SUBNTRY ,
*
*
TERM999  DS    0H
         SUBEXIT ,
*
*=====================================================================*
** SUBR - Model Subroutine for Replication                            *
*=====================================================================*
*
SUBR     SUBNTRY ,
*
*
SUBR999  DS    0H
         SUBEXIT ,
*
***********************************************************************
* Define Literials and Constants                                      *
***********************************************************************
*
         CONBEG ,
         LTORG ,                     Define Literial Pool
*
** Equates
*
HEXFF    EQU   X'FF'                 Common Equates
HEX00    EQU   X'00'                 (Same)
*
** Constants
*
HEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table
*
         CONEND ,
*
***********************************************************************
* Define Dynamic Storage Area                                         *
***********************************************************************
*
         DSABEG ,                    Define DSA Prefix
*
** MF=L Work Areas
*
         DS    0D                    Define Area for ESTAE
DSAESTA0 DS    XL(ESTAE0L)           (Same)
DSARETRY DS    A                     Retry Address or Zero for Perc
*
DSAPLIST DS    4F                    Parameter List Work area
*
         DSAEND ,                    Define DSA Suffex
         END   ,
