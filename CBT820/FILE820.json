{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012855000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 8935472, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE820.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 8935472, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 8935472, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE820.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x88\\x08'", "DS1TRBAL": "b'5\\x86'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x9b\\x00\\x03\\x05\\xa4\\x00\\x04\\x00\\x89'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04R\\x004\\x01\\x11\\t\\x0f\\x01\\x11\\t\\x0f\\x13#\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf2@@@'", "ispf": {"version": "04.82", "flags": 0, "createdate": "2011-03-31T00:00:00", "modifydate": "2011-03-31T13:23:34", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-482"}, "text": "REGULAR CBT TAPE - VERSION 482    FILE:  820\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT482.FILE820\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 29 MEMBERS COUNTED; CUMULATIVE SIZE IS 84,414 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/31/11    13:23:34    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PDSLOAD": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x02\\x01\\x026_\\x01\\x11\\t\\x0f\\x13\\x00\\x00$\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2011-03-31T13:00:02", "lines": 36, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*    PDSLOAD JOB TO CREATE INSTALL LIBRARIES\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT482.FILE820(PDSLOAD)')\n   DSN (yourid.your.loadlib) VOL(volser)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT482.FILE820',      <=== CHANGE\n//             OPRE=SBGOLOB,\n//             QUAL=SUTL,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=DATA04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=yourid.your.loadlib\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=MACLIB\n//S002 EXEC PDSLOAD,MEMB=TST\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@@@DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x11?\\x01\\x10\\x11?\\x12F\\x9b\\x8d\\x9b\\x8d\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-04-23T00:00:00", "modifydate": "2010-04-23T12:46:00", "lines": 39821, "newlines": 39821, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@@@PDF": {"ttr": 16646, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x11?\\x01\\x10\\x11?\\x12FA(A(\\x00\\x00\\xd7\\xc4\\xc6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-04-23T00:00:00", "modifydate": "2010-04-23T12:46:00", "lines": 16680, "newlines": 16680, "modlines": 0, "user": "PDF"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "@@NOTE1": {"ttr": 23553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x007\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x16T\\x00\\xa0\\x00\\xa0\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T16:54:37", "lines": 160, "newlines": 160, "modlines": 0, "user": "SBGOLOB"}, "text": "   This text comes from the @@DOC member of this pds.\n\n   Welcome to my world.\n\n   What I'm about to show you in the pages that follow is my\n   Personal 64/20 z/OS Assembly Language Development Platform.\n   The 64 in the name refers to having full support for 64-bit\n   z/Architecture.  And the 20 represents the 20-Bit\n   displacement instruction set with the 'Y' and 'G'\n   instructions.   Those 20-bit instructions are awesomely\n   powerful in that they allow for direct addressability of one\n   megabyte of storage.  So, if we limit our coding to these\n   instructions we can have 256 base registers for the price of\n   one.  To support this reality, this system includes the SSY\n   macros to be used as a replacement for the SS instruction\n   set, which cannot be converted to 20-bit instructions due to\n   the limitations of the hardware.  It would require 8-byte\n   instructions and the hardware won't support that, because the\n   PSW cannot represent an 8-byte instruction in the ILC, the\n   Instruction Length Code.\n\n   There are many features to this system, including Stacking DSA\n   for your below-the-line storage, Stacking ATB for your\n   above-the-bar storage, and label level tracing is built into\n   the system, which makes debugging and maintenance a breeze.\n   These traces support multiple TCBs with a separate SYSOUT\n   dataset being dynamically allocated for each task in the\n   address space.  And full support for programs running in\n   ARMODE is also provided.\n\n   So, it's a pretty robust system.  And it's the only true\n   64/20 Development Platform in the world.  I know, because I\n   had to write GETMAIN and FREEMAIN for above-the-bar storage,\n   and you can't have a truly effective 64/20 system without\n   that.  In ten years IBM has failed to produce that result, so\n   I had to do it myself.  It's part of this system.   I hope\n   you will find it as useful as I do.\n\nWhat You Can and Cannot Do With This System\n\n    You have to understand that this system, as distributed is\n    subject to the GNU-GPL license, which means that it cannot be\n    used to write or develop commercial code, which is to say\n    code intended for sale or production use by any company.  You\n    can't do that, the GNU-GPL precludes that, which is why I\n    distributed it this way.\n\n\nWhat you can't do.\n\n    This is a macro based system, and as such anything you write\n    using this platform will inherently include code that I have\n    written which is subject to GNU-GPL and this makes anything\n    that you write using this platform also subject to GNU-GPL.\n    And what that means is that anything you write using this\n    platform cannot be sold, it must be given away for free, as\n    Free Software.  Understand?\n\n    But even more than that, as I understand the GNU-GPL license,\n    nothing that you write using this platform can be linked-in\n    or included into any commercial application, because if it\n    is, the entire application cannot be sold and must be given\n    away for free, as Free Software.\n\n    So, this is something you need to be very careful of, as a\n    developer.  You cannot use the Free Software version of this\n    code to write a subroutine or sub-program and include the\n    object module into ANY commercial code.  So, if you do your\n    boss will very likely be really pissed off and you will\n    likely be fired, and rightfully so.  So don't do that.\n\n    Now, with respect to this matter, I have a word to say to the\n    Manager.  If somebody under you were to do something as\n    stupid as this, placing my code into a production product,\n    you have two options.  You really need to rebuke that boy or\n    girl, and firing them would not be an inappropriate response.\n    And while I do not require that, they have put your Company\n    and your product at risk, and as such they would need to be\n    called on the carpet-at the very least.\n\n    So, in that event your two options are, remove the code from\n    the commercial product and move on, or if it was really good\n    code that you want to keep, you can purchase a commercial\n    license for this development platform from me or my\n    representative.  We'll talk about that in a separate section.\n    But those are your two options in this case.\n\n    Another thing that you can't do, well it's not that you can't\n    do, but it would be very unwise to do, is to write any\n    production code with this system.  You see, anything written\n    with the GNU-GPL version of this code is by definition \"Free\n    Software.\"  So, if you're working for a bank and write\n    something cool like an Investment Portfolio System, which I\n    did once long ago, and use this system to do it?  Well, it's\n    free software.  So any employee can take that code and give\n    it away to any competitor for free.  Understand?  So, you\n    really don't want use this system for production code.  In\n    that event the company needs to purchase a Commercial License\n    from me or my representative.\n\nWhat you can do.\n\n    Now that said, there are a lot of reasons to use this\n    platform.  Any code that is not for sale or for production\n    use is not a problem.  You can do whatever you want as long\n    as you're not intending to sell what you write with this\n    platform.  So, let's talk about what you can do.\n\n    You can write any kind of test program that you like, and we\n    all need to write test programs to test out our production\n    code.  Well, I'm distributing some 30+ such programs with\n    this system in the /TST library.\n\n    When I was working with JES2, that group had two people where\n    there whole job was to write test programs to test out new\n    interfaces placed into the component, such as SAPI, Extended\n    Status, and the like.  Such testers can certainly use this\n    system to develop these kinds of programs, since they were\n    never intended for sale in the first place.  And this is true\n    for any company and any developer anywhere.  Yes, it's Free\n    Software, but who gives a damn, it's a bloody test program.\n\n    And this is a sanctioned use for the GNU-GPL version of this\n    system.  You, as the developer will likely find yourself many\n    times more productive than the developer sitting in the\n    cubicle next to you, if you learn this system and use it.\n    And in todays job market that can only work to your\n    advantage, as it will benefit you and your company.\n\n    The other really important use for this system is for your\n    own education or edification.  We all have to remain current\n    in our knowledge and understanding of the z/OS Operating\n    System.  It's our job and continuing education is a part of\n    that job.  Every few years IBM comes out with a new version\n    of POPs (Principles of Operations), and every time a new\n    version comes out you need to read it, and I mean cover to\n    cover.  They're constantly adding new instructions.  I'm\n    still not really clear about the damn PLO instruction.\n\n    But this is a system that allows you to test out new\n    instructions where you can use the #TRACE macro to get a\n    clear and distinct understanding of how these new\n    instructions work.  But it's not just new instructions.  If\n    you haven't done an MGCR, write a test program that uses it.\n    If you haven't written an SRB, do so.  If you haven't written\n    a PC, write one, and use this system to do it.  You will\n    learn more quickly for it.  Ongoing education is important,\n    and something you need to do committedly if you're working in\n    this field.  So, this is another legitimate and sanctioned\n    use of this system.\n\n    Another thing you can do is use it to debug your production\n    code.  Then you can cut and paste the debugged code into your\n    production code, as long as you don't include any of my\n    macros in that production code.  This platform can help you\n    to diagnose problems much more quickly, and help you to be\n    much more productive than the other developers in your shop.\n    And this is also a sanctioned use of the GNU-GPL version of\n    this code.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE820": {"ttr": 23557, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04R\\x00(\\x01\\x11\\t\\x0f\\x01\\x11\\t\\x0f\\x13#\\x00\\xb0\\x00\\xb0\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf2@@@'", "ispf": {"version": "04.82", "flags": 0, "createdate": "2011-03-31T00:00:00", "modifydate": "2011-03-31T13:23:28", "lines": 176, "newlines": 176, "modlines": 0, "user": "CBT-482"}, "text": "//***FILE 820 is from Richard D. Harper and contains his \"Private   *   FILE 820\n//*           64/20 z/OS Assembly Language Development Platform\".   *   FILE 820\n//*                                                                 *   FILE 820\n//*           email:  mrharper@emailhosting.com                     *   FILE 820\n//*                                                                 *   FILE 820\n//*     Partial Description of this Package. For a full             *   FILE 820\n//*     descripton please see member @@@DOC which is in MSWORD      *   FILE 820\n//*     format.  (It must be downloaded in Binary to a PC.)         *   FILE 820\n//*                                                                 *   FILE 820\n//*     Also included is the same doc as member @@@PDF, which       *   FILE 820\n//*     is in PDF format.                                           *   FILE 820\n//*                                                                 *   FILE 820\n//*     This text comes from the @@@DOC member of this pds.         *   FILE 820\n//*                                                                 *   FILE 820\n//*     Welcome to my world.                                        *   FILE 820\n//*                                                                 *   FILE 820\n//*     What I'm about to show you in the pages that follow is      *   FILE 820\n//*     my Personal 64/20 z/OS Assembly Language Development        *   FILE 820\n//*     Platform.  The 64 in the name refers to having full         *   FILE 820\n//*     support for 64-bit z/Architecture.  And the 20              *   FILE 820\n//*     represents the 20-Bit displacement instruction set          *   FILE 820\n//*     with the 'Y' and 'G' instructions.   Those 20-bit           *   FILE 820\n//*     instructions are awesomely powerful in that they allow      *   FILE 820\n//*     for direct addressability of one megabyte of storage.       *   FILE 820\n//*     So, if we limit our coding to these instructions we         *   FILE 820\n//*     can have 256 base registers for the price of one.  To       *   FILE 820\n//*     support this reality, this system includes the SSY          *   FILE 820\n//*     macros to be used as a replacement for the SS               *   FILE 820\n//*     instruction set, which cannot be converted to 20-bit        *   FILE 820\n//*     instructions due to the limitations of the hardware.        *   FILE 820\n//*     It would require 8-byte instructions and the hardware       *   FILE 820\n//*     won't support that, because the PSW cannot represent        *   FILE 820\n//*     an 8-byte instruction in the ILC, the Instruction           *   FILE 820\n//*     Length Code.                                                *   FILE 820\n//*                                                                 *   FILE 820\n//*     There are many features to this system, including           *   FILE 820\n//*     Stacking DSA for your below-the-line storage, Stacking      *   FILE 820\n//*     ATB for your above-the-bar storage, and label level         *   FILE 820\n//*     tracing is built into the system, which makes debugging     *   FILE 820\n//*     and maintenance a breeze.  These traces support multiple    *   FILE 820\n//*     TCBs with a separate SYSOUT dataset being dynamically       *   FILE 820\n//*     allocated for each task in the address space.  And full     *   FILE 820\n//*     support for programs running in ARMODE is also provided.    *   FILE 820\n//*                                                                 *   FILE 820\n//*     So, it's a pretty robust system.  And it's the only         *   FILE 820\n//*     true 64/20 Development Platform in the world.  I know,      *   FILE 820\n//*     because I had to write GETMAIN and FREEMAIN for             *   FILE 820\n//*     above-the-bar storage, and you can't have a truly           *   FILE 820\n//*     effective 64/20 system without that.  In ten years IBM      *   FILE 820\n//*     has failed to produce that result, so I had to do it        *   FILE 820\n//*     myself.  It's part of this system.   I hope you will        *   FILE 820\n//*     find it as useful as I do.                                  *   FILE 820\n//*                                                                 *   FILE 820\n//*  What You Can and Cannot Do With This System                    *   FILE 820\n//*                                                                 *   FILE 820\n//*      You have to understand that this system, as                *   FILE 820\n//*      distributed is subject to the GNU-GPL license, which       *   FILE 820\n//*      means that it cannot be used to write or develop           *   FILE 820\n//*      commercial code, which is to say code intended for         *   FILE 820\n//*      sale or production use by any company.  You can't do       *   FILE 820\n//*      that, the GNU-GPL precludes that, which is why I           *   FILE 820\n//*      distributed it this way.                                   *   FILE 820\n//*                                                                 *   FILE 820\n//*  What you can do.                                               *   FILE 820\n//*                                                                 *   FILE 820\n//*      Now that said, there are still a lot of reasons to use     *   FILE 820\n//*      this platform.  Any code that is not for sale or for       *   FILE 820\n//*      production use is not a problem.  You can do whatever      *   FILE 820\n//*      you want as long as you're not intending to sell what      *   FILE 820\n//*      you write with this platform.  So, let's talk about        *   FILE 820\n//*      what you can do.                                           *   FILE 820\n//*                                                                 *   FILE 820\n//*      You can write any kind of test program that you like,      *   FILE 820\n//*      and we all need to write test programs to test out         *   FILE 820\n//*      our production code.  Well, I'm distributing some 30+      *   FILE 820\n//*      such programs with this system in the /TST library.        *   FILE 820\n//*                                                                 *   FILE 820\n//*      When I was working with JES2, that group had two           *   FILE 820\n//*      people where there whole job was to write test             *   FILE 820\n//*      programs to test out new interfaces placed into the        *   FILE 820\n//*      component, such as SAPI, Extended Status, and the          *   FILE 820\n//*      like.  Such testers can certainly use this system to       *   FILE 820\n//*      develop these kinds of programs, since they were           *   FILE 820\n//*      never intended for sale in the first place.  And this      *   FILE 820\n//*      is true for any company and any developer anywhere.        *   FILE 820\n//*      Yes, it's Free Software, but who gives a damn, it's a      *   FILE 820\n//*      bloody test program.                                       *   FILE 820\n//*                                                                 *   FILE 820\n//*      And this is a sanctioned use for the GNU-GPL version       *   FILE 820\n//*      of this system.  You, as the developer will likely         *   FILE 820\n//*      find yourself many times more productive than the          *   FILE 820\n//*      developer sitting in the cubicle next to you, if you       *   FILE 820\n//*      learn this system and use it.  And in today's job          *   FILE 820\n//*      market that can only work to your advantage, as it         *   FILE 820\n//*      will benefit you and your company.                         *   FILE 820\n//*                                                                 *   FILE 820\n//*      The other really important use for this system is for      *   FILE 820\n//*      your own education or edification.  We all have to         *   FILE 820\n//*      remain current in our knowledge and understanding of       *   FILE 820\n//*      the z/OS Operating System.  It's our job and               *   FILE 820\n//*      continuing education is a part of that job.  Every         *   FILE 820\n//*      few years IBM comes out with a new version of POPs         *   FILE 820\n//*      (Principles of Operations), and every time a new           *   FILE 820\n//*      version comes out you need to read it, and I mean          *   FILE 820\n//*      cover to cover.  They're constantly adding new             *   FILE 820\n//*      instructions.  I'm still not really clear about the        *   FILE 820\n//*      damn PLO instruction.                                      *   FILE 820\n//*                                                                 *   FILE 820\n//*      But this is a system that allows you to test out new       *   FILE 820\n//*      instructions where you can use the #TRACE macro to         *   FILE 820\n//*      get a clear and distinct understanding of how these        *   FILE 820\n//*      new instructions work.  But it's not just new              *   FILE 820\n//*      instructions.  If you haven't done an MGCR, write a        *   FILE 820\n//*      test program that uses it.  If you haven't written an      *   FILE 820\n//*      SRB, do so.  If you haven't written a PC, write one,       *   FILE 820\n//*      and use this system to do it.  You will learn more         *   FILE 820\n//*      quickly for it.  Ongoing education is important, and       *   FILE 820\n//*      something you need to do committedly if you're             *   FILE 820\n//*      working in this field.  So, this is another                *   FILE 820\n//*      legitimate and sanctioned use of this system.              *   FILE 820\n//*                                                                 *   FILE 820\n//*      Another thing you can do is use it to debug your           *   FILE 820\n//*      production code.  Then you can cut and paste the           *   FILE 820\n//*      debugged code into your production code, as long as        *   FILE 820\n//*      you don't include any of my macros in that production      *   FILE 820\n//*      code.  This platform can help you to diagnose              *   FILE 820\n//*      problems much more quickly, and help you to be much        *   FILE 820\n//*      more productive than the other developers in your          *   FILE 820\n//*      shop.  And this is also a sanctioned use of the            *   FILE 820\n//*      GNU-GPL version of this code.                              *   FILE 820\n//*                                                                 *   FILE 820\n//*  What you can't do.                                             *   FILE 820\n//*                                                                 *   FILE 820\n//*      This is a macro based system, and as such anything         *   FILE 820\n//*      you write using this platform will inherently include      *   FILE 820\n//*      code that I have written which is subject to GNU-GPL       *   FILE 820\n//*      and this makes anything that you write using this          *   FILE 820\n//*      platform also subject to GNU-GPL.  And what that           *   FILE 820\n//*      means is that anything you write using this platform       *   FILE 820\n//*      cannot be sold, it must be given away for free, as         *   FILE 820\n//*      Free Software.  Understand?                                *   FILE 820\n//*                                                                 *   FILE 820\n//*      But even more than that, as I understand the GNU-GPL       *   FILE 820\n//*      license, nothing that you write using this platform        *   FILE 820\n//*      can be linked-in or included into any commercial           *   FILE 820\n//*      application, because if it is, the entire application      *   FILE 820\n//*      cannot be sold and must be given away for free, as         *   FILE 820\n//*      Free Software.                                             *   FILE 820\n//*                                                                 *   FILE 820\n//*      So, this is something you need to be very careful of,      *   FILE 820\n//*      as a developer.  You cannot use the Free Software          *   FILE 820\n//*      version of this code to write a subroutine or              *   FILE 820\n//*      sub-program and include the object module into ANY         *   FILE 820\n//*      commercial code.  So, if you do your boss will very        *   FILE 820\n//*      likely be really mad.  So don't do that.                   *   FILE 820\n//*                                                                 *   FILE 820\n//*      So, in that event your two options are, remove the         *   FILE 820\n//*      code from the commercial product and move on, or if        *   FILE 820\n//*      it was really good code that you want to keep, you         *   FILE 820\n//*      can purchase a commercial license for this                 *   FILE 820\n//*      development platform from me or my representative.         *   FILE 820\n//*                                                                 *   FILE 820\n//*      Another thing that you can't do, well it's not that        *   FILE 820\n//*      you can't do, but it would be very unwise to do, is        *   FILE 820\n//*      to write any production code with this system.  You        *   FILE 820\n//*      see, anything written with the GNU-GPL version of          *   FILE 820\n//*      this code is by definition \"Free Software.\"  So, if        *   FILE 820\n//*      you're working for a bank and write something cool         *   FILE 820\n//*      like an Investment Portfolio System, which I did once      *   FILE 820\n//*      long ago, and use this system to do it?  Well, it's        *   FILE 820\n//*      free software.  So any employee can take that code and     *   FILE 820\n//*      give it away to any competitor for free.  So, you          *   FILE 820\n//*      really don't want use this system for production code.     *   FILE 820\n//*      In that event the company needs to purchase a              *   FILE 820\n//*      Commercial License from me or my representative.           *   FILE 820\n//*                                                                 *   FILE 820\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@GNUGPL": {"ttr": 23561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x002\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12(\\x02\\xa2\\x02\\xa2\\x00\\x00\\xd3\\xc9\\xc3\\xc5\\xd5\\xe2\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:28:32", "lines": 674, "newlines": 674, "modlines": 0, "user": "LICENSE"}, "text": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@RDHRES": {"ttr": 23816, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12$\\x04-\\x04-\\x00\\x00\\xd9\\xc5\\xe2\\xe4\\xd4\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:24:00", "lines": 1069, "newlines": 1069, "modlines": 0, "user": "RESUME"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "ASMCL": {"ttr": 24326, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x03\\x01\\x10\\x06\\x0f\\x01\\x11\\t\\x0f\\x129\\x00&\\x00*\\x00\\x08\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2010-03-01T00:00:00", "modifydate": "2011-03-31T12:39:03", "lines": 38, "newlines": 42, "modlines": 8, "user": "SBGOLOB"}, "text": "//ASMCL  PROC MOD=             Load & Object Module Name\n//*\n//** Assemble a Source Program and Link into $APF.LOD\n//*\n//*\n//ASM     EXEC PGM=ASMA90,REGION=0M,\n//             PARM='NODECK,XREF(SHORT),SIZE(MAX)'\n//SYSLIB    DD DISP=(,PASS),DSN=&&TEMP,\n//             SPACE=(TRK,(2,1,1)),UNIT=SYSDA,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920,DSORG=PO)\n//          DD DISP=SHR,DSN=SBGOLOB.RDH.MACLIB\n//          DD DISP=SHR,DSN=HLA.SASMMAC2\n//          DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//*\n//SYSUT1    DD DSN=&&SYSUT1,UNIT=SYSALLDA,SPACE=(1700,(2400,600))\n//SYSUT2    DD DSN=&&SYSUT2,UNIT=SYSALLDA,SPACE=(1700,(2400,600))\n//SYSUT3    DD DSN=&&SYSUT3,UNIT=SYSALLDA,SPACE=(1700,(2400,600))\n//SYSPRINT  DD SYSOUT=*,FREE=CLOSE\n//SYSABEND  DD SYSOUT=*\n//*\n//SYSIN     DD DYNAM\n//*YSPUNCH  DD DISP=SHR,DSN=SBGOLOB.RDH.OBJ(&MOD.)\n//SYSLIN    DD DISP=SHR,DSN=SBGOLOB.RDH.OBJ(&MOD.)\n//*\n//** Link Object Module\n//*\n//LKED  EXEC PGM=HEWLH096,\n//         PARM='XREF,LIST,MAP,LET,RENT,AC=1',\n//         REGION=0M\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=(SYSDA,SEP=(SYSLMOD,SYSLIN)),\n//         SPACE=(1024,(200,20))\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.RDH.OBJ\n//*\n//SYSLIN   DD  DISP=SHR,DSN=SBGOLOB.RDH.OBJ(&MOD.)\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.RDH.LOAD(&MOD.)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACLIB": {"ttr": 24328, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12X%\\xf1%\\xf1\\x00\\x00\\xd4\\xc1\\xc3\\xd3\\xc9\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:58:00", "lines": 9713, "newlines": 9713, "modlines": 0, "user": "MACLIB"}, "text": "./ ADD NAME=#CALL    0100-10050-10050-1200-00182-00182-00000-RHDMAC\n         MACRO ,\n&LBL     #CALL &PGM,                  Program to Call                  *\n               &PARMS,                Parmaeters Passed                *\n               &LAEY=LAE              Instruction to Use in AR Mode\n.*\n.**********************************************************************\n.* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #CALL - Issue CALL Interface to Another Program                   *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and local Variables\n.*\n         COPY  PGMGBLAS                Copy Globals\n.*\n         LCLA  &CNT                    Count of parameters\n         LCLA  &AOFF,&AOFFST           AR Offset\n         LCLA  &GOFF                   GR Offset\n         LCLC  &DSAL02,&DSAL01         Labels in DSA\n         LCLC  &VCON                   Address of VCON\n.*\n         LCLA  &I,&K,&J                Work Variables\n         LCLC  &S\n.*\n.** Generate LBL if Specified\n.*\n         AIF   ('&LBL' EQ '').VAL000\n&LBL     DS    0H\n.*\n.** Validate Input Parameters & Set Variables\n.*\n.VAL000  ANOP\n&DSAL01  SETC  'D10'.'&SYSNDX'         Build Some Labels to Use\n&DSAL02  SETC  'D20'.'&SYSNDX'         (Same)\n.*\n.** Allocate Storage in DSA\n.*\n&CNT     SETA  N'&PARMS                Number of Parms to Process\n&AOFF    SETA  0                       Set Initial Offsets\n&GOFF    SETA  0                       (Same)\n.*\n         AIF   (&CNT EQ 0).PLS100      No Parameteres passes?\n&LCDSB         LOCTR ,                 Place PLIST in DSA LOCTR\n         AIF   ('&SYSAM64' NE 'YES').PLS010\n&DSAL01  DS    &CNT.AD                 Reserve Space fo GR Regs\n&AOFF    SETA  &CNT*8                  Set Initial Offsets\n&AOFFST  SETA  &AOFF                   (Same)\n         AGO   .PLS020\n.PLS010  ANOP\n&DSAL01  DS    &CNT.A                  Space fo GR Regs\n&AOFF    SETA  &CNT*4                  Set Initial Offsets\n&AOFFST  SETA  &AOFF                   (Same)\n.*\n.PLS020  ANOP\n         AIF   ('&SYSASCE' NE 'AR').PLS100\n&DSAL02  DS    &CNT.A                  Space fo AR Regs\n.*\n.** Build PLIST in DSA\n.*\n.PLS100  ANOP\n&LCSCT         LOCTR ,                 Reset to Code LOCTR\n.*\n.** When No Parameters to be Passed\n.*\n         AIF   (&CNT NE 0).PLS110\n         AGO   .CAL100                 -> Done\n.*\n.** When Parameter to be Passed\n.*\n.PLS110  ANOP\n&I       SETA  1                       Start With 1st Parm\n&K       SETA  &CNT                    Number of Parms to Process\n.*\n.** Process One Parameter at a Time\n.*\n         LAY   R1,&DSAL01              Get  Address of PLIST for GPRs\n         LAMY  R1,R1,=A(0)             Set  AR for Primary ASCE\n.*\n.PLS120  ANOP\n         AIF   ('&PARMS(&I)' EQ '').PLS130  If Not Specified?\n         LBIN  R0,&PARMS(&I),LAEY=&LAEY Load Parameter Address\n         AGO   .PLS140                  ->\n.PLS130  ANOP\n         AIF   ('&SYSASCE' NE 'AR').PLS135\n         LAMY  R0,R0,=A(0)             Zero Access Register\n.PLS135  ANOP\n         XGR   R0,R0                   Parm Not Specified\n.*\n.PLS140  ANOP\n.*\n.** Store Values in PLIST for GPRs\n.*\n.PLS200  ANOP\n         AIF   ('&SYSAM64' EQ 'YES').PLS230\n         STY   R0,&GOFF.(,R1)          Save This Parameter\n&GOFF    SETA  &GOFF+4                 Increment Offset\n         AGO   .PLS300\n.PLS230  ANOP\n         STG   R0,&GOFF.(,R1)          Save This Parameter\n&GOFF    SETA  &GOFF+8                 Increment Offset\n.*\n.** Store Values in PLIST for ARs\n.*\n.PLS300  ANOP\n         AIF   ('&SYSASCE' NE 'AR').PLS400 If Not ARMODE?\n         STAMY R0,R0,&AOFF.(R1)        Store Access Registers\n&AOFF    SETA  &AOFF+4                 Increment Offset\n.PLS320  ANOP\n.*\n.PLS400  ANOP\n&CNT     SETA  &CNT-1                  Decrement Count\n&I       SETA  &I+1                    Increment Index Value\n         AIF   (&CNT GT 0).PLS120      -> Loop\n.*\n.** Generate Program Linkage Code\n.*\n.CAL100  ANOP\n         AIF   ('&PGM' EQ '(15)').CAL130    If in Proper Register?\n         AIF   ('&PGM'(1,1) NE '(').CAL110  If Not in Register&\n         LGR   R15,&PGM                Load Program Address\n         AGO   .CAL130\n.CAL110  ANOP\n         CNOP  0,4                     Get  Proper Alignment\n         J     *+8                     Jmp  Around VCON\n&VCON    DC    V(&PGM)                 Gen  Program VCON\n         LARL  R15,*-4                 Load Address of Program VCON\n         L     R15,0(,R15)             Load Program VCON\n.*\n.CAL130  ANOP\n         AIF   ('&SYSASCE' NE 'AR').CAL140\n         LAY   R0,&AOFFST.(,R1)        Point R0 at AR Registers\n         AGO   .CAL150\n.CAL140  ANOP\n*Del     XGR   R0,R0                   Zero R0\n.CAL150  ANOP\n         BASPM R14,R15                 Call Program\n*\n         AGO   .MEND                   -> Exit Macro\n*\n** Do Other MF=L Stuff Here\n*\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE01 ANOP\n         MNOTE 8,'#CALL: ?'\n         AGO   .MEND\n.*\n.** Exit Macro\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=#CPYRGT  0100-10050-10050-1200-00050-00050-00000-RHDMAC\n         MACRO\n&LBL     #CPYRGT ,                     Copyright Info\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #CPYRGT - Macro to Generate GNU GPL Notice.                       *\n.*                                                                    *\n.*    This macro will generate a a notification for all to see that   *\n.*  any code written using Richard Harper's Private Development       *\n.*  Platform shall be subject to the GNU General Public License.      *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n&LBL     DS    0H\n.*\n         DC    0H,C'Free Software: Subject to the GNU General '\n         DC    C'Public License.'\n         DC    0H\n.*\n         MEND ,\n./ ADD NAME=#DD      0100-10050-10050-1200-00272-00272-00000-RHDMAC\n         MACRO\n&LBL     #DD   &TYPE,                  ALLOC/UNALLOC/CONCAT/DECON Etc. *\n               &FLG11=,                Flag Byte #1                    *\n               &FLG12=,                Flag Byte #2                    *\n               ,                                                       *\n               ,          Sysout Dynalloc Text Units                   *\n               ,                                                       *\n               &SYSOUT=,               SYSOUT Dataset Class            *\n               &SPGNM=,                SYSOUT Program Name             *\n               &FORM#=,                Forms Code for SYSOUT           *\n               &OUTLM=,                Output limit Assigned to Sysout *\n               &FREE=,                 Allocate with FREE=CLOSE        *\n               &HOLD=,                 YES - Put Output in Hold Queue  *\n               &USRID=,                USERID for This Dataset         *\n               ,                                                       *\n               ,          DSNAME Allocation Text units                 *\n               ,                                                       *\n               &DDNAM=,                DDNAME to Use For Allocation    *\n               &DSNAM=,                DSNAME to Allocate              *\n               &MEMBR=,                Member Name to Alllocate        *\n               &STATS=,                Disposition SHR/OLD/MOD         *\n               &NDISP=,                Normal Disposition              *\n               &CDISP=,                Conditional Disposition         *\n               ,                                                       *\n               ,          Retrieve Dynalloc Text Units                 *\n               ,                                                       *\n               &RTDDN=,                Return DDNAME                   *\n               &RTDSN=,                Return Dataset Name             *\n               &RTMEM=                 Return Member Name\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DD     - Interface to Dynamic Allocation - SVC 99                *\n.*                                                                    *\n.*    DDNAM   - DDNAME to Process                                     *\n.*                                                                    *\n.*    DSNAM   - Dataset name or HFS File to Allocate                  *\n.*                                                                    *\n.*    RTDDN   - DDNAME Returned for DSNAME or SYSOUT Allocation       *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program Management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &PGM000,&PGM010     Program Labels\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.** Define LOCTR's for #DD\n.*\n&LCCTP   SETC   '&LCCN1'           Set as 1st Constant LOCTR\n&LCCTU   SETC   '&LCCN2'           Set as 2st Constant LOCTR\n&LCDTP   SETC   '&LCDSB'           Set as 1st DSA LOCTR\n&LCDTU   SETC   '&LCDSC'           Set as 2st DSA LOCTR\n.*\n&PGM000  SETC  'P00'.'&SYSNDX'         Build Required Labels\n.*\n.** Define Label if Specified\n.*\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n.*\n.** Move Parameters to Global Variables\n.*\n\n&DDSYSOU SETC  '&SYSOUT'               Do Sysout Parameters\n&DDSPGNM SETC  '&SPGNM'                (Same)\n&DDOUTLM SETC  '&OUTLM'                (Same)\n&DDCLOSE SETC  '&FREE'                 (Same)\n&DDSHOLD SETC  '&HOLD'                 (Same)\n&DDSFMNO SETC  '&FORM#'                (Same)\n&DDUSRID SETC  '&USRID'                (Same)\n.*\n&DDDDNAM SETC  '&DDNAM'                Do DSNAME Allocation Parms\n&DDDSNAM SETC  '&DSNAM'                (Same)\n&DDMEMBR SETC  '&MEMBR'                (Same)\n&DDSTATS SETC  '&STATS'                (Same)\n&DDNDISP SETC  '&NDISP'                (Same)\n&DDCDISP SETC  '&CDISP'                (Same)\n.*\n&DRRTDDN SETC  '&RTDDN'                Do Retrieve Parameters\n&DRRTDSN SETC  '&RTDSN'                (Same)\n&DRRTMEM SETC  '&RTMEM'                (Same)\n.*\n.*====================================================================*\n.* Generate Dynalloc Parameter List\n.*====================================================================*\n.*\n.** Define LOCTRS and Build Request Block\n.*\n         #DD$  TYPE=&TYPE,             Pass Type of Request            *\n               FLG11=&FLG11,           Pass Flag Byte #1               *\n               FLG12=&FLG12            Pass Flag Byte #2\n         AIF   (&DDERR).MEND           Exit on Error\n.*\n.** Generate Text Units for Allocation\n.*\n         AIF   (&DDVERB NE 1).DD010\n         #DDA  ,                       Allocation\n         AGO   .DD100\n.*\n.** Generate Text Units for Deallocation\n.*\n.DD010   ANOP\n         AIF   (&DDVERB NE 2).DD020\n         #DDB  ,                       Unallocation\n         AGO   .DD100\n.*\n.** Generate Text Units for Concatenation\n.*\n.DD020   ANOP\n         AIF   (&DDVERB NE 3).DD030\n         #DDC  ,                       Concatenation\n         AGO   .DD100\n.*\n.** Generate Text Units for Deconcatenation\n.*\n.DD030   ANOP\n         AIF   (&DDVERB NE 4).DD040\n         #DDD  ,                       Deconcatenation\n         AGO   .DD100\n.*\n.** Generate Text Units for In-Use Processing\n.*\n.DD040   ANOP\n         AIF   (&DDVERB NE 5).DD050\n         #DDI  ,                       In-Use Processing\n         AGO   .DD100\n.*\n.** Generate Text Units for DDNAME Allocation\n.*\n.DD050   ANOP\n         AIF   (&DDVERB NE 6).DD060\n         #DDN  ,                       DDNAME Allocation\n         AGO   .DD100\n.*\n.** Generate Text Units for Status or Information Retrieval\n.*\n.DD060   ANOP\n         AIF   (&DDVERB NE 7).DD100\n         #DDS  ,                       Pass in Parameter Values\n         AGO   .DD100\n.*\n.*====================================================================*\n.* Generate Dynalloc Relocation Code\n.*====================================================================*\n.*\n.DD100   ANOP\n*        #DDRETRN ,                    Process Text Units to Return\n         #DDRETRN ,\n.*\n&LCCTP   LOCTR ,                       PLIST LOCTR\n&PLNGTH  EQU  *-&CTUPL                 Get Length of PLIST\n&PCOUNT  EQU  (*-&CTUPL)/4             Get Count  of PLIST Entries\n&LCCTU   LOCTR ,                       Text Unit LOCTR\n&TLNGTH  EQU  *-&CTUNIT                Get Length of Text Units\n&LCSCT   LOCTR ,                       Back to CSECT LOCTR\n*\n** Relocate Request Block Pointers\n*\n         MVC  &DRBPTR.(S99RBPL+S99RBL+S99RBXL),&CRBPTR Move RB to DSA\n*\n         LA   R1,&DRB                  Request Block Pointer\n         ST   R1,&DRBPTR               Set DSA Address in Pointer\n         OI   &DRBPTR,X'80'            Set VL Bit\n*\n         LA   R15,&DRB                 Get Address of RB\n         PUSH  USING                   Save Previous Usings\n         USING S99RB,R15               Establish Temp Addressability\n         LA   R1,&DTUPL                Get Addr of Text Unit Pointers\n         ST   R1,S99TXTPP              Set Addr in Request Block\n         LA   R1,&DRBX                 Get RB Extention\n         ST   R1,S99S99X               Set Addr in RB\n         DROP R15                      Drop Temp Addressability\n         POP  USING                    Restore Usings\n*\n** Move Text Unites and Pointers to DSA\n*\n         LAY  R0,&CTUPL                Load Plist Pointer\n         LAY  R1,&PLNGTH               Load Length for Move\n         LAY  R14,&DTUPL               Set To Address in DSA\n         LR   R15,R1                   Set To Length\n         MVCL R14,R0                   Move Plist to DSA\n*\n         LAY  R0,&CTUNIT               Load Text Unit Pointer\n         LAY  R1,&TLNGTH               Load Length for Move\n         LAY  R14,&DTUNIT              Set To Address in DSA\n         LR   R15,R1                   Set To Length\n         MVCL R14,R0                   Move Plist to DSA\n*\n** Relocate Text Unit Pointers\n*\n         LAY   R14,&DTUPL              Get Addr of DSA PLIST\n         LAY   R15,&PCOUNT             Get Count of Entries\n*\n&PGM000  LAY   R1,&DTUNIT              Get Addr of Text Units\n         AL    R1,0(,R14)              Plus Offset This Pointer\n         ST    R1,0(,R14)              Save Relocated Address\n         LA    R14,4(,R14)             Bump Position\n         BCT   R15,&PGM000             -> Loop\n         AHI   R14,-4                  Point Back at last Entry\n         OI    0(R14),X'80'            And Set VL Bit\n*\n*        #DDRESET ,                    Set Inputs At Exec Time\n         #DDRESET ,\n*\n** Issue Dynamic Allocation Macro\n*\n         LA    R1,&DRBPTR              Get DYNALLOC PLIST\n*        DYNALLOC ,                    Issue DYNALLOC Request\n         DYNALLOC ,\n*\n         LA   R1,&DRB                  Get Address of RB\n         PUSH  USING                   Save Previous Usings\n         USING S99RB,R1                Establish Temp Addressability\n         ICM  R0,B'1111',S99RSC        Get Reason Codes if Any\n         DROP R1                       Drop Temp Addressability\n         POP  USING                    Restore Usings\n*\n** Process Return Pointers\n*\n*        #DDRETRV ,                    Process Text Units to Retrieve\n         #DDRETRV ,\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DD: '\n         AGO .MEND\n.*\n.** Return to Caller\n.*\n.MEND    ANOP\n&LCSCT   LOCTR ,                       Leave Us in CSECT LOCTR\n         MEND\n./ ADD NAME=#DD$     0100-10050-10050-1200-00357-00357-00000-RHDMAC\n         MACRO\n&LBL     #DD$  &TYPE=,                 ALLOC/UNALLOC                   *\n               &FLG11=,                Flag Byte #1                    *\n               &FLG12=                 Flag Byte #2\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DD$ - Build Initial Request Block for Dynamic Allocation         *\n.*                                                                    *\n.*    This macro is is the first macro called for a Dynamic           *\n.*  allocation request via the #DD macro.  It's purpose is to         *\n.*  establish the environment by defining all necessary LOCTR         *\n.*  location counters that will be used by subsequent lower           *\n.*  level macros.                                                     *\n.*    If the mapping macros have not been defined by a previous       *\n.*  invocation of the #DD macro, it will define them here and make    *\n.*  a note of that in a global variable.                              *\n.*    Then it defines the initial Request Blocks for this request.    *\n.*  This includes the Request Block pointer, the Request Block        *\n.*  itself, and the Request Block Extention.                          *\n.*                                                                    *\n.*  Input Parameters                                                  *\n.*  ================                                                  *\n.*                                                                    *\n.*  &TYPE   - This positional parameter defines the type of Dynamic   *\n.*            allocation request, or what is known as the Verb Code.  *\n.*            The valid operands values for this macro are:           *\n.*                                                                    *\n.*            ALLOC   - Allocate a dataset by DSNAME or PATHNAME      *\n.*            UNALLOC - Unallocate a previously allocated dataset     *\n.*            CONCAT  - Concatinate another dataset to a DDNAME       *\n.*            DECON   - Deconatinate a dataset by DDNAME              *\n.*            INUSE   - Remove In-Use attribute based on task-ID      *\n.*            DDNAM   - DDNAME Allocation                             *\n.*            STATUS  - Allocation Information Retrieval Request      *\n.*                                                                    *\n.*  &FLG11  - Flags that may be specified for the S99FLG11 flag byte  *\n.*            in the Request Block.  This parameter is specified      *\n.*            as a sublist, consisting of none or more of the         *\n.*            following operands.  If not specified, the default      *\n.*            is: FLG11=(NOCNV,NOMNT,NOMIG)                           *\n.*                                                                    *\n.*            ONCNV - Do not use an existing allocation that does     *\n.*                    not have the convertable Attribute to satisfy   *\n.*                    the request.                                    *\n.*            NOCNV - Do not use an existing allocation to satisfy    *\n.*                    the request.                                    *\n.*                                                                    *\n.*            NOMNT - Do not mount volumes or offline units to        *\n.*                    satisfy the request.                            *\n.*            JBSYS - Request is to allocate a SYSOUT Dataset         *\n.*            CNENQ - Issue a conditional ENQ on the TIOT resource.   *\n.*            GDCNT - Ignore GDG Name Table. Do LOCATE for base GDG.  *\n.*            MSGL0 - Ignore MSGLEVEL in JCT. Use MSGLEVEL=(,0)       *\n.*            NOMIG - Do not recall migrated datasets.                *\n.*                                                                    *\n.*  &FLG12  - Flags that may be specified for the S99FLG12 flag byte  *\n.*            in the Request Block.  This parameter is specified      *\n.*            as a sublist, consisting of none or more of the         *\n.*            following operands.                                     *\n.*                                                                    *\n.*            NOSYM - Allocate or unallocate information retrieval.   *\n.*            ACUCB - Allocate function, use actual UCB addresses.    *\n.*            DSABA - Request that the DSAB for this allocation be    *\n.*                    placed above the line.                          *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Progtam Management Globals\n         COPY #DDGBLAS             Copy in #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n         LCLC  &VERB,&BYT11,&BYT12 Verb and Flag Bytes\n.*\n.** Do Basic Validation for &TYPE\n.*\n         AIF   ('&TYPE' EQ 'ALLOC').VTYP010\n         AIF   ('&TYPE' EQ 'UNALLOC').VTYP020\n         AIF   ('&TYPE' EQ 'CONCAT').VTYP030\n         AIF   ('&TYPE' EQ 'DECON').VTYP040\n         AIF   ('&TYPE' EQ 'INUSE').VTYP050\n         AIF   ('&TYPE' EQ 'DDNAM').VTYP060\n         AIF   ('&TYPE' EQ 'STATUS').VTYP070\n         AGO   .MNOTE1             Issue Error Message\n.*\n.VTYP010 ANOP\n&DDVERB  SETA  1\n         AGO   .V11F000\n.VTYP020 ANOP\n&DDVERB  SETA  2\n         AGO   .V11F000\n.VTYP030 ANOP\n&DDVERB  SETA  3\n         AGO   .V11F000\n.VTYP040 ANOP\n&DDVERB  SETA  4\n         AGO   .V11F000\n.VTYP050 ANOP\n&DDVERB  SETA  5\n         AGO   .V11F000\n.VTYP060 ANOP\n&DDVERB  SETA  6\n         AGO   .V11F000\n.VTYP070 ANOP\n&DDVERB  SETA  7\n.*\n.** Do Basic Validation for &FLG11=\n.*\n.V11F000 ANOP\n&B(1)    SETB  0                   Initialize Bit Switches\n&B(2)    SETB  0                   (Same)\n&B(3)    SETB  0                   (Same)\n&B(4)    SETB  0                   (Same)\n&B(5)    SETB  0                   (Same)\n&B(6)    SETB  0                   (Same)\n&B(7)    SETB  0                   (Same)\n&B(8)    SETB  0                   (Same)\n.*\n         AIF   ('&FLG11' NE '').V11F010\n&B(2)    SETB  1                   Set Default Values\n&B(3)    SETB  1                   (Same)\n&B(8)    SETB  1                   (Same)\n.*\n.V11F010 ANOP\n&I       SETA  1                   Index for Sublist\n&J       SETA  N'&FLG11            Number of Entries in Sublist\n.*\n.V11F020 ANOP                  -*- Loop to Here\n         AIF   (&I GT &J).V11F300  If Past End-of-List, Done\n         AIF   ('&FLG11' EQ 'ONCNV').V11F100\n         AIF   ('&FLG11' EQ 'NOCNV').V11F110\n         AIF   ('&FLG11' EQ 'NOMNT').V11F120\n         AIF   ('&FLG11' EQ 'JBSYS').V11F130\n         AIF   ('&FLG11' EQ 'CNENQ').V11F140\n         AIF   ('&FLG11' EQ 'GDCNT').V11F150\n         AIF   ('&FLG11' EQ 'MSGL0').V11F160\n         AIF   ('&FLG11' EQ 'NOMIG').V11F170\n         AGO   .MNOTE2             Issue Error Message\n.*\n.V11F100 ANOP                      Bit 0\n&B(1)    SETB  1                   ..Indicate ONCNV\n         AGO   .V11F200\n.V11F110 ANOP                      Bit 1\n&B(2)    SETB  1                   ..Indicate NOCNV\n         AGO   .V11F200\n.V11F120 ANOP                      Bit 2\n&B(3)    SETB  1                   ..Indicate NOMNT\n         AGO   .V11F200\n.V11F130 ANOP                      Bit 3\n&B(4)    SETB  1                   ..Indicate JBSYS\n         AGO   .V11F200\n.V11F140 ANOP                      Bit 4\n&B(5)    SETB  1                   ..Indicate CNENQ\n         AGO   .V11F200\n.V11F150 ANOP                      Bit 5\n&B(6)    SETB  1                   ..Indicate GDCNT\n         AGO   .V11F200\n.V11F160 ANOP                      Bit 6\n&B(7)    SETB  1                   ..Indicate MSGL0\n         AGO   .V11F200\n.V11F170 ANOP                      Bit 7\n&B(8)    SETB  1                   ..Indicate NOMIG\n         AGO   .V11F200\n.*\n.V11F200 ANOP\n&I       SETA  &I+1                Point at Next Parameter\n         AGO   .V11F020            -> Loop\n.V11F300 ANOP\n&BYT11   SETC  '&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'\n.*\n.** Do Basic Validation for &FLG12=\n.*\n.V12F000 ANOP\n&B(1)    SETB  0                   Initialize Bit Switches\n&B(2)    SETB  0                   (Same)\n&B(3)    SETB  0                   (Same)\n&B(4)    SETB  0                   (Same)\n&B(5)    SETB  0                   (Same)\n&B(6)    SETB  0                   (Same)\n&B(7)    SETB  0                   (Same)\n&B(8)    SETB  0                   (Same)\n.*\n.V12F010 ANOP\n&I       SETA  1                   Index for Sublist\n&J       SETA  N'&FLG12            Number of Entries in Sublist\n.*\n.V12F020 ANOP                  -*- Loop to Here\n         AIF   (&I GT &J).V12F300  If Past End-of-List, Done\n         AIF   ('&FLG12' EQ 'NOSYM').V12F100\n         AIF   ('&FLG12' EQ 'ACUCB').V12F110\n         AIF   ('&FLG12' EQ 'DSABA').V12F120\n         AGO   .MNOTE2             Issue Error Message\n.*\n.V12F100 ANOP                      Bit 0\n&B(1)    SETB  1                   ..Indicate ONCNV\n         AGO   .V12F200\n.V12F110 ANOP                      Bit 1\n&B(2)    SETB  1                   ..Indicate NOCNV\n         AGO   .V12F200\n.V12F120 ANOP                      Bit 2\n&B(3)    SETB  1                   ..Indicate NOMNT\n         AGO   .V12F200\n.*\n.V12F200 ANOP\n&I       SETA  &I+1                Point at Next Parameter\n         AGO   .V12F020            -> Loop\n.V12F300 ANOP\n&BYT12   SETC  '&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'\n.*\n.** Build Labels\n.*\n&C       SETC  'DD'.'&SYSNDX'      Build Labels for Constant Area\n&CRBPTR  SETC  '&C'.'CON_RBPTR'    (Same)\n&CRB     SETC  '&C'.'CON_RB'       (Same)\n&CRBX    SETC  '&C'.'CON_RBX'      (Same)\n&CTUPL   SETC  '&C'.'CON_TUPL'     (Same)\n&CTUNIT  SETC  '&C'.'CON_TUNIT'    (Same)\n&DRBPTR  SETC  '&C'.'DSA_RBPTR'    Build Labels for DSA Area\n&DRB     SETC  '&C'.'DSA_RB'       (Same)\n&DRBX    SETC  '&C'.'DSA_RBX'      (Same)\n&DTUPL   SETC  '&C'.'DSA_TUPL'     (Same)\n&DTUNIT  SETC  '&C'.'DSA_TUNIT'    (Same)\n&PLNGTH  SETC  '&C'.'PLNTH'        Length of Storage For PLIST\n&PCOUNT  SETC  '&C'.'PCONT'        Count  of PLIST Entries\n&TLNGTH  SETC  '&C'.'TLNTH'        Length of Storage For Text Units\n.*\n.*\n.** Generate Mapping Macros if Necessary\n.*\n         AIF   (&DDMC).DD010       If Macros Not Yet Generated...\n&DDMC    SETB  1                   ..Indicate Macros Generated\n         PUSH  PRINT\n         PRINT OFF\n         IEFZB4D0                  SVC99 Parameter List\n         IEFZB4D2                  SVC99 Key Definition Table\n         POP   PRINT\n.*\nS99RBPL  EQU   4                   Length of Request Block Pointer\nS99RBL   EQU   S99RBEND-S99RB      Length of Request Block\nS99RBXL  EQU   36                  Length of request Block Extention\n.*\n&LCSCT   LOCTR ,                   Assure Proper Location Counter\n.*\n.*\n.** Define Storage for This Request in Constant and DSA Areas\n.*\n.DD010   ANOP ,                -*- Define Storage in Constant Area\n&LCCON   LOCTR ,                   Position us in Constant Area\n&CRBPTR  DC    0D,XL(S99RBPL)'0'   Reserve Storage\n&CRB     DC    0D,XL(S99RBL)'0'    (Same)\n&CRBX    DC    0D,XL(S99RBXL)'0'   (Same)\n.*\n&LCCTP   LOCTR ,                   LOCTR for Text Pointers in Constants\n&CTUPL   DS    0D                  ..Generate a Label\n&LCCTU   LOCTR ,                   LOCTR for Text Units in Constants\n&CTUNIT  DS    0D                  ..Generate a Label\n.*\n&LCDSA   LOCTR ,                   Position us in Dynamic Storage Area\n&DRBPTR  DS    0D,XL(S99RBPL)      Reserve Storage\n&DRB     DS    0D,XL(S99RBL)       (Same)\n&DRBX    DS    0D,XL(S99RBXL)      (Same)\n.*\n&LCDTP   LOCTR ,                   LOCTR for Text Pointers in DSA\n&DTUPL   DS    0D                  ..Generate a Label\n&LCDTU   LOCTR ,                   LOCTR for Text Units in DSA\n&DTUNIT  DS    0D                  ..Generate a Label\n.*\n&LCSCT   LOCTR ,                   Put us in CSECT Location Counter\n.*\n.** Fill in the Request Block\n.*\n&LCCON   LOCTR ,                   Put us in Constant Area\n         ORG   &CRBPTR             Overlay S99RBPTR\n         DC    A(&CRB-&CRBPTR)     Use Offset\n.*\n         ORG   &CRB                Overlay S99RB\n         DC    YL1(S99RBL)         Set Length of Request Block\n         DC    AL1(&DDVERB)        Set Verb Code\n         DC    AL1(&BYT11)         Generate Flag Byte #1\n         DC    AL1(&BYT12)         Generate Flag Byte #2\n         DC    Y(0),Y(0)           Error and info Codes\n         DC    A(&CTUPL-&CRBPTR)   Offset to Text Pointers\n         DC    A(&CRBX-&CRBPTR)    Offset to Request Block Extention\n         DC    XL4'0'              Flags2\n.*\n         ORG   &CRBX               Overlay S99RBX\n         DC    XL(S99RBXL)'00'     ..With Zeros\n         ORG   &CRBX\n         DC    C'S99RBX'           Set RBX ID\n         DC    YL1(S99RBXVR)       Set Version Number\n         DC    YL1(S99ERMSG)       Say Return Messages in Storage\n         ORG   ,\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DD$001: The value specified for the allocation type *\n               is invalid.  Valid '\n         MNOTE *,'     values are: ALLOC, UNALLOC, CONCAT, DECON, INUSE*\n               , DDNAM, and STATUS.'\n         AGO .MERR\n.*\n.MNOTE2  ANOP\n         MNOTE 8,'#DD$002: The value specified for the FLAG11= paramete*\n               r is invalid.  Valid '\n         MNOTE *,'     values are: ONCNV, NOCNV, NOMNT, JBSYS, CNENQ, G*\n               DCNT, MSGL0, NOMIG.'\n         AGO .MERR\n.*\n.MNOTE3  ANOP\n         MNOTE 8,'#DD$002: The value specified for the FLAG12= paramete*\n               r is invalid.  Valid '\n         MNOTE *,'     values are: NOSYM, ACUCB, DSABA.'\n         AGO .MERR\n.*\n.** Return to Caller\n.*\n.MERR    ANOP\n&DDERR   SETB  1                       Indicate MNOTE Issued\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDA     0100-10050-10050-1200-00091-00091-00000-RHDMAC\n         MACRO\n         #DDA  ,                       DSNAME or HFS File Allocation\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDA    - Inner Macro to Drive the Allocation Function            *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program Management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.** Process a SYSOUT Dataset Allocation\n.*\n.DD000   ANOP\n         AIF   ('#DDSYSOU' EQ '').DD020\n         #DDASOU ,                     Process a SYSOUT Allocation\n         AGO  .MEND\n.*\n.** Process an HFS Pathname Allocation\n.*\n.DD010   ANOP\n         #DDAHFS ,                     Process an HFS Allocation\n         AGO  .MEND\n.*\n.** Process DSNAME or DDNAME Allocation Request\n.*\n.DD020   ANOP\n  MNOTE ,'Calling #DDASHR'\n         #DDASHR ,                     Process Basic Text Units\n         AGO   .MEND\n         AIF  (&DDERR).MEND            Terminate on Error\n.*\n         #DDADCB.                      Process DCB Text Units\n         AIF  (&DDERR).MEND            Terminate on Error\n.*\n         #DDASPC                       Process SPACE= Text Units\n         AIF  (&DDERR).MEND            Terminate on Error\n.*\n         #DDAMISC ,                    Process Misc Text Units\n         AIF  (&DDERR).MEND            Terminate on Error\n.*\n         #DDASMS ,                     Process SMS Text Units\n         AIF  (&DDERR).MEND            Terminate on Error\n         AGO  .MEND                    -> Done\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDA001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDASHR  0100-10050-10050-1200-00137-00137-00000-RHDMAC\n         MACRO\n         #DDASHR ,                     Allocate a SYSOUT Dataset\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDSHR  - Inner Macro to Generate The Text Units for DSNAME       *\n.*            allocation of DISP=SHR/OLD/MOD Datasets. The following  *\n.*            text units are supported.                               *\n.*                                                                    *\n.*  DALDDNAM - 0001 - DDNAME to Use For Allocation                    *\n.*  DALDSNAM - 0002 - DSNAME to Allocate                              *\n.*  DALMEMBR - 0003 - Member Name to Alllocate                        *\n.*  DALSTATS - 0004 - Disposition SHR/OLD/MOD                         *\n.*  DALNDISP - 0005 - Normal Disposition                              *\n.*  DALCDISP - 0006 - Conditional Disposition                         *\n.*                                                                    *\n.*    Each of these text units also have a corresponding global       *\n.*  variable in #DDGBLAS with teh same name as the text unit but      *\n.*  prefixed with #DD instead of DAL.                                 *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.*====================================================================*\n.** Process the Text Units\n.*====================================================================*\n.*\n.DD0100  ANOP\n  MNOTE *,'STATS=&DDSTATS'\n         AIF   ('&DDDDNAM' EQ '').DD0110\n&K       SETA  K'&DDDDNAM\n         #DDTUN0 DALDDNAM,1,&K,CL8'&DDDDNAM',8\n.*\n.DD0110  ANOP\n         AIF   ('&DDDSNAM' EQ '').DD0120\n&K       SETA  K'&DDDSNAM\n         #DDTUN0 DALDSNAM,1,&K,CL44'&DDDSNAM',44\n.*\n.DD0120  ANOP\n         AIF   ('&DDMEMBR' EQ '').DD0130\n&K       SETA  K'&DDMEMBR\n         #DDTUN0 DALMEMBR,1,&K,CL8(&DDMEMBR),8\n.*\n.*\n.DD0130  ANOP\n         AIF   ('&DDSTATS' EQ '').DD0140\n&C       SETC  '01'\n         AIF   ('&DDSTATS' EQ 'OLD').DD0131\n&C       SETC  '02'\n         AIF   ('&DDSTATS' EQ 'MOD').DD0131\n&C       SETC  '04'\n         AIF   ('&DDSTATS' EQ 'NEW').DD0131\n&C       SETC  '08'\n         AIF   ('&DDSTATS' EQ 'SHR').MNOTE1\n.DD0131  ANOP\n         #DDTUN0 DALSTATS,1,1,X'&C',1\n.*\n.DD0140  ANOP\n         AIF   ('&DDNDISP' EQ '').DD0150\n&C       SETC  '01'\n         AIF   ('&DDNDISP' EQ 'UNCATLG').DD0141\n&C       SETC  '02'\n         AIF   ('&DDNDISP' EQ 'CATLG').DD0141\n&C       SETC  '04'\n         AIF   ('&DDNDISP' EQ 'DELETE').DD0141\n&C       SETC  '08'\n         AIF   ('&DDNDISP' EQ 'KEEP').MNOTE2\n.DD0141  ANOP\n         #DDTUN0 DALNDISP,1,1,X'&C',1\n.*\n.DD0150  ANOP\n         AIF   ('&DDCDISP' EQ '').DD0160\n&C       SETC  '01'\n         AIF   ('&DDCDISP' EQ 'UNCATLG').DD0151\n&C       SETC  '02'\n         AIF   ('&DDCDISP' EQ 'CATLG').DD0151\n&C       SETC  '04'\n         AIF   ('&DDCDISP' EQ 'DELETE').DD0151\n&C       SETC  '08'\n         AIF   ('&DDCDISP' EQ 'KEEP').MNOTE2\n.DD0151  ANOP\n         #DDTUN0 DALCDISP,1,1,X'&C',1\n.*\n.DD0160  ANOP\n         AGO   .MEND                    -> Done\n\n.*====================================================================*\n.** Macro Error Conditions\n.*====================================================================*\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDS001: STATS is Invalid'\n         AGO .MEND\n.*\n.MNOTE2  ANOP\n         MNOTE 8,'#DDS002: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDASOU  0100-10050-10050-1200-00124-00124-00000-RHDMAC\n         MACRO\n         #DDASOU ,                     Allocate a SYSOUT Dataset\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDSOU  - Inner Macro to Generate The Text Units for SYSOUT       *\n.*            Dataset Allocation The following text units may         *\n.*            be generated by this macro:                             *\n.*                                                                    *\n.*  DALSYSOU - 0018 - Allocate a SYSOUT dataset and specify           *\n.*                    SUSOUT class.                                   *\n.*  DALSPGNM - 0019 - Specifies the SYSOUT program name.              *\n.*  DALSFMNO - 001A - Specifies the sysout form number.               *\n.*  DALOUTLM - 001B - Specifies the output limit to be assigned.      *\n.*  DALCLOSE - 001C - Indicates the dataset is to be freed on close.  *\n.*  DALSHOLD - 0059 - Specifies the dataset be placed in the hold     *\n.*                    queue when deallocated.                         *\n.*  DALUSRID - 0063 - Specifies that the sysout dataset be routed     *\n.*                    to this user.                                   *\n.*                                                                    *\n.*    Each of these text units also have a corresponding global       *\n.*  variable in #DDGBLAS with teh same name as the text unit but      *\n.*  prefixed with #DD instead of DAL.                                 *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.*====================================================================*\n.** Process the DALSYSOU Text Unit\n.*====================================================================*\n.*\n.DD0100  ANOP\n         AIF   ('&DDSYSOU' EQ '').MEND\n*temp    #DDTNUL (&DDSTATS,&DDNDISP,&DDCDISP,&DDVLSER,&DDPRIVT,        *\n               &DDVLSEQ,&DDVLCNT,&DDVLRDS,&DDQNAME,&DDSSNM,&DDSPRM,    *\n               &DDSSATT)\n         AIF   (&DDNUL).MNOTE1\n.*\n         AIF   ('&DDSYSOU' NE '*').DD0105\n         #DDTUN0 DALSYSOU,0,0\n         AGO   .DD0110\n.DD0105  ANOP\n         #DDTUN0 DALSYSOU,1,1,CL1'&DDSYSOU',1\n.*\n.DD0110  ANOP\n         AIF   ('&DDSPGNM' EQ '').DD0120\n&K       SETA  K'&DDSPGNM\n         #DDTUN0 DALSPGNM,1,&K,CL8'&DDSPGNM',8\n.*\n.DD0120  ANOP\n         AIF   ('&DDOUTLM' EQ '').DD0130\n         #DDTUN0 DALOUTLM,1,3,AL3(&DDOUTLM),3\n.*\n.DD0130  ANOP\n         AIF   ('&DDCLOSE' EQ '').DD0140\n         #DDTUN0 DALCLOSE,0,0\n.*\n.DD0140  ANOP\n         AIF   ('&DDSHOLD' EQ '').DD0150\n         #DDTUN0 DALSHOLD,0,0\n.*\n.DD0150  ANOP\n         AIF   ('&DDSFMNO' EQ '').DD0160\n&K       SETA  K'&DDSFMNO\n         #DDTUN0 DALSFMNO,1,&K,CL4'&DDSFMNO',4\n.*\n.DD0160  ANOP\n         AIF   ('&DDUSRID' EQ '').MEND\n&K       SETA  K'&DDUSRID\n         #DDTUN0 DALUSRID,1,&K,CL8'&DDUSRID',8\n         AGO   .MEND                    -> Done\n\n.*====================================================================*\n.** Macro Error Conditions\n.*====================================================================*\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDS001: Mutually exclusive parameters specified with*\n                SYSOUT= parameter.'\n         AGO .MEND\n.*\n.MNOTE2  ANOP\n         MNOTE 8,'#DDS002: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDB     0100-10050-10050-1200-00064-00064-00000-RHDMAC\n         MACRO\n         #DDB  DSNAM=,                 DSNAME or HFS File to Allocate  *\n               &DDNAM=,                DDNAME to Process               *\n               &RTDDN=,                Return DDNAME                   *\n               &SYSOUT=                SYSOUT Dataset Class\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDB    - Inner Macro to Drive the Deallocation Function          *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.**\n.*\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDB001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDC     0100-10050-10050-1200-00064-00064-00000-RHDMAC\n         MACRO\n         #DDC  DSNAM=,                 DSNAME or HFS File to Allocate  *\n               &DDNAM=,                DDNAME to Process               *\n               &RTDDN=,                Return DDNAME                   *\n               &SYSOUT=                SYSOUT Dataset Class\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDC    - Inner Macro to Drive the Concatenation Function         *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.**\n.*\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDC001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDD     0100-10050-10050-1200-00064-00064-00000-RHDMAC\n         MACRO\n         #DDD  DSNAM=,                 DSNAME or HFS File to Allocate  *\n               &DDNAM=,                DDNAME to Process               *\n               &RTDDN=,                Return DDNAME                   *\n               &SYSOUT=                SYSOUT Dataset Class\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDD    - Inner Macro to Drive the Deconcatenation Function       *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.**\n.*\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDD001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDGBLAS 0100-10050-10050-1200-00112-00112-00000-RHDMAC\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDGBLAS - Global Variable Definations for #DD Macro              *\n.*                                                                    *\n.*    This member was create for use with the #DD macro and contains  *\n.*  all global variable definitions used in teh system.               *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Globals for #DD Macro\n.*\n         GBLB  &DDMC                   On - Mapping Macros Generated\n         GBLB  &DDERR                  On - An MNOTE Has Been Issued\n         GBLB  &DDNUL                  On - A Global in List Not Null\n.*\n         GBLC &LCCTP                   LOCTR for Text Pointers in CON\n         GBLC &LCCTU                   LOCTR for Text Units in CON\n         GBLC &LCDTP                   LOCTR for Text Pointers in DSA\n         GBLC &LCDTU                   LOCTR for Text Units in DSA\n.*\n         GBLA &DDVERB                  Verb Code\n         GBLC &DDSYS                   SYSOUT=something\n.*\n.*                                 -*- Labels for Constant Area\n         GBLC  &CRBPTR                 Request Block Pointer\n         GBLC  &CRB                    Request Block\n         GBLC  &CRBX                   Request Block Extention\n         GBLC  &CTUPL                  Text Unit Plist\n         GBLC  &CTUNIT                 Text Units Defined\n.*                                 -*- Labels for Dynamic Storage Area\n         GBLC  &DRBPTR                 Request Block Pointer\n         GBLC  &DRB                    Request Block\n         GBLC  &DRBX                   Request Block Extention\n         GBLC  &DTUPL                  Text Unit Plist\n         GBLC  &DTUNIT                 Text Units Defined\n.*\n         GBLC  &PLNGTH                 Length of PLIST\n         GBLC  &PCOUNT                 Count  of PLIST Entries\n         GBLC  &TLNGTH                 Length of Text Units\n.*\n.*                                 -*- Text Units for Sysout Allocation\n         GBLC  &DDSYSOU                SYSOUT= Output Class or *\n         GBLC  &DDSPGNM                SYSOUT Program Name\n         GBLC  &DDOUTLM                Output Limit to Assign\n         GBLC  &DDCLOSE                Free Dataset on Close\n         GBLC  &DDSHOLD                Hold Dataset on Deallocation\n         GBLC  &DDSFMNO                Form Number\n         GBLC  &DDUSRID                User ID to Assign\n.*\n.*                                 -*- Text Units for DSNAME Allocation\n         GBLC  &DDDDNAM                DDNAME to Use For Allocation\n         GBLC  &DDDSNAM                DSNAME to Allocate\n         GBLC  &DDMEMBR                Member Name to Alllocate\n         GBLC  &DDSTATS                Disposition SHR/OLD/MOD\n         GBLC  &DDNDISP                Normal Disposition\n         GBLC  &DDCDISP                Conditional Disposition\n.*\n.*                                 -*- Information Retrieval Variables\n         GBLC  &DRDDNAM,&TRDDNAM       DDNAME To Retrive Info About\n         GBLC  &DRDSNAM,&TRDSNAM       DSNAME To Retrive Info About\n.*\n.*   The &DR variable names are those that the invoker specified\n.* on the macro to indicate the variable they wish the data to be\n.* returned in.  Te &TR variable is the label in DSA where DYNALLOC\n.* returns the data which will have an &SYSNDX generated name.  After\n.* the allocation request, this macro system will move the data from\n.* the &SYSNDX generated name to the invokers desired data area.\n.*\n         GBLC  &DRRTDDN,&TRRTDDN       Return DDNAME\n         GBLC  &DRRTDSN,&TRRTDSN       Return Dataset Name\n         GBLC  &DRRTMEM,&TRRTMEM       Return Member Name\n.*\n.*\n.*\n         GBLC  &DDVLSER\n         GBLC  &DDPRIVT\n         GBLC  &DDVLSEQ\n         GBLC  &DDVLCNT\n         GBLC  &DDVLRDS\n         GBLC  &DDQNAME\n         GBLC  &DDSSNM\n         GBLC  &DDSSPRM\n         GBLC  &DDSSATT\n./ ADD NAME=#DDI     0100-10050-10050-1200-00064-00064-00000-RHDMAC\n         MACRO\n         #DDI  DSNAM=,                 DSNAME or HFS File to Allocate  *\n               &DDNAM=,                DDNAME to Process               *\n               &RTDDN=,                Return DDNAME                   *\n               &SYSOUT=                SYSOUT Dataset Class\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDA    - Inner Macro to Drive the In-Use Processing Function     *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.**\n.*\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDI001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDN     0100-10050-10050-1200-00064-00064-00000-RHDMAC\n         MACRO\n         #DDN  DSNAM=,                 DSNAME or HFS File to Allocate  *\n               &DDNAM=,                DDNAME to Process               *\n               &RTDDN=,                Return DDNAME                   *\n               &SYSOUT=                SYSOUT Dataset Class\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDN    - Inner Macro to Drive the DDNAME Allocation Function     *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.**\n.*\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDN001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDO     0100-10050-10050-1200-00064-00064-00000-RHDMAC\n         MACRO\n         #DDO  DSNAM=,                 DSNAME or HFS File to Allocate  *\n               &DDNAM=,                DDNAME to Process               *\n               &RTDDN=,                Return DDNAME                   *\n               &SYSOUT=                SYSOUT Dataset Class\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDO    - Inner Macro to Drive the Non-JCL Functions              *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.**\n.*\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDO001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDRESET 0100-10050-10050-1200-00107-00107-00000-RHDMAC\n         MACRO\n         #DDRESET ,                    Initialize at Execution Time\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDRESET - Text Units to be Initialized at Execution Time         *\n.*                                                                    *\n.*    This macro is executed prior to the invokation of DYNALLOC at   *\n.*  execution time to initialize the input variables to the desired   *\n.*  values of the invoker.                                            *\n.*    I'm only doing those parameters that are needed as I continue   *\n.*  to code the macro system.  If the value of the parameter is       *\n.*  specified as a sublist, which is to say in parans then the value  *\n.*  the variable is to be moved from the specified label to the       *\n.*  DSA defined field at execution time.                              *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n         LCLC  &LBL1,&LBL2,&LBL3   General Character Workarea\n\n.*====================================================================*\n.** Move Data to Fields in DSA Prior to Dynalloc\n.*====================================================================*\n.*\n&LBL1    SETC  'L1'.'&SYSNDX'\n&LBL2    SETC  'L2'.'&SYSNDX'\n&LBL3    SETC  'L3'.'&SYSNDX'\n.*\n.DD0100  ANOP\n         AIF   ('&DRDDNAM' EQ '').DD0110\n         AIF   ('&DRDDNAM'(1,1) NE '(').DD0110\n         MVC   &TRDDNAM,&DRDDNAM(1)     Move DINDDNAM to DSA\n         LA    R15,&TRDDNAM             Get Count of Characters\n         JAS   R14,&LBL1                (Same)\n         STH   R1,&TRDDNAM-2            (Same)\n.*\n.DD0110  ANOP\n         AIF   ('&DRDSNAM' EQ '').DD0990\n         AIF   ('&DRDSNAM'(1,1) NE '(').DD0990\n         MVC   &TRDSNAM,&DRSDNAM(1)     Move DINDSNAM to DSA\n         LA    R15,&TRDSNAM             Get Count of Characters\n         JAS   R14,&LBL1                (Same)\n         STH   R1,&TRDSNAM-2            (Same)\n.*\n.DD0990  ANOP\n         B     &LBL3                   -> Branch Around\n*\n&LBL1    DS    0H                  -*- Find First Blank From R15\n         XR    R1,R1                   Zero Work Register\n&LBL2    DS    0H\n         CLI   0(R15),C' '             Found a Blank?\n         BER   R14                     Yes -> Return\n         LA    R1,1(,R1)               Increment Count\n         LA    R15,1(,R15)             Increment Position\n         B     &LBL2                   -> Loop\n&LBL3    DS    0H\n.*====================================================================*\n.** Return to Caller\n.*====================================================================*\n.*\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDB001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDRETRN 0100-10050-10050-1200-00186-00186-00000-RHDMAC\n         MACRO\n         #DDRETRN ,                    Text Units to be Returned\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDRETRN - Reserve Space to Variables to be Returned              *\n.*                                                                    *\n.*    This macro is executed prior to the invokation of DYNALLOC to   *\n.*  reserve space in the Text pointer list and teh Text Unit area     *\n.*  for those data items that have been requested to be returned by   *\n.*  this Dynamic Allocation request.                                  *\n.*    After allocation the macro #DDRETRV is called to move the data  *\n.*  from these areas to where the invoker specified they should be    *\n.*  returned.                                                         *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n         LCLC  &LBLDDN,&LBLDSN\n         LCLC  &LBLMEM\n\n.*====================================================================*\n.** Process the DINDDNAM Text Unit\n.*====================================================================*\n.*\n.DD0100  ANOP\n         AIF   ('&DRDDNAM' EQ '').DD0200\n&LBLDDN  SETC  'DDN'.'&SYSNDX'\n&TRDDNAM SETC  '&LBLDDN'                Save Label to #DDRETRV\n&C       SETC  '&DRDDNAM'\n         AIF   ('&DRDDNAM'(1,1) NE '(').DD0110\n&C       SETC  ' '\n.DD0110  ANOP\n*\n&LCCTP   LOCTR ,                        Text Pointers for Constants\n         DC    A(&LBLDDN-&CTUNIT)            Offset to Text Unit\n.*\n&LCDTP   LOCTR ,                        Text Pointers for DSA\n         DS    A                        Space for DALSPGNM Text Pointer\n.*\n&LCCTU   LOCTR                          Text Units for Constants\n&K       SETA  K'&C                     Get Count of Characters\n&LBLDDN  DC    Y(DINDDNAM,1,&K),CL8'&C',C' '\n.*\n&LCDTU   LOCTR                          Text Units for DSA\n         DS    0H,XL(6+8+1)             Space for DALSPGNM Text Unit\n\n.*====================================================================*\n.** Process the DINDSNAM Text Unit\n.*====================================================================*\n.*\n.DD0200  ANOP\n         AIF   ('&DRDSNAM' EQ '').DD0300\n&LBLDSN  SETC  'DSN'.'&SYSNDX'\n&TRDSNAM SETC  '&LBLDSN'                Save Label to #DDRETRV\n&C       SETC  '&DRDSNAM'\n         AIF   ('&DRDSNAM'(1,1) NE '(').DD0210\n&C       SETC  ' '\n.DD0210  ANOP\n*\n&LCCTP   LOCTR ,                        Text Pointers for Constants\n         DC    A(&LBLDSN-&CTUNIT)            Offset to Text Unit\n.*\n&LCDTP   LOCTR ,                        Text Pointers for DSA\n         DS    A                        Space for DALSPGNM Text Pointer\n.*\n&LCCTU   LOCTR                          Text Units for Constants\n&K       SETA  K'&C                     Get Count of Characters\n&LBLDSN  DC    Y(DINDSNAM,1,&K),CL44'&C',C' '\n.*\n&LCDTU   LOCTR                          Text Units for DSA\n         DS    0H,XL(6+44)              Space for DALSPGNM Text Unit\n\n.*====================================================================*\n.** Process the DALRTDDN Text Unit\n.*====================================================================*\n.*\n.DD0300  ANOP\n         AIF   ('&DRRTDDN' EQ '').DD0400\n&LBLRTD  SETC  'RTD'.'&SYSNDX'\n&TRRTDDN SETC  'RTR'.'&SYSNDX'          Save Label to #DDRETRV\n*\n&LCCTP   LOCTR ,                        Text Pointers for Constants\n         DC    A(&LBLRTD-&CTUNIT)            Offset to Text Unit\n.*\n&LCDTP   LOCTR ,                        Text Pointers for DSA\n         DS    A                        Space for DINRTDDN Text Pointer\n.*\n&LCCTU   LOCTR                          Text Units for Constants\n&LBLRTD  DC    Y(DALRTDDN,1,8),CL8' '\n.*\n&LCDTU   LOCTR                          Text Units for DSA\n&TRRTDDN DS    0H,XL(6+8)               Space for DINRTDDN Text Unit\n\n.*====================================================================*\n.** Process the DINRTDSN Text Unit\n.*====================================================================*\n.*\n.DD0400  ANOP\n         AIF   ('&DRRTDSN' EQ '').DD0500\n&LBLRDS  SETC  'RDS'.'&SYSNDX'\n&TRRTDSN SETC  '&LBLRDS'                Save Label to #DDRETRV\n*\n&LCCTP   LOCTR ,                        Text Pointers for Constants\n         DC    A(&LBLRDS-&CTUNIT)            Offset to Text Unit\n.*\n&LCDTP   LOCTR ,                        Text Pointers for DSA\n         DS    A                        Space for DINRTDSN Text Pointer\n.*\n&LCCTU   LOCTR                          Text Units for Constants\n&LBLRDS  DC    Y(DINRTDSN,1,255),CL255' '\n.*\n&LCDTU   LOCTR                          Text Units for DSA\n         DS    0H,XL(6+255)             Space for DINRTDSN Text Unit\n\n.*====================================================================*\n.** Process the DINRTMEM Text Unit\n.*====================================================================*\n.*\n.DD0500  ANOP\n         AIF   ('&DRRTMEM' EQ '').DD0600\n&LBLRME  SETC  'RME'.'&SYSNDX'\n&TRRTMEM SETC  '&LBLRME'                Save Label to #DDRETRV\n*\n&LCCTP   LOCTR ,                        Text Pointers for Constants\n         DC    A(&LBLRME-&CTUNIT)            Offset to Text Unit\n.*\n&LCDTP   LOCTR ,                        Text Pointers for DSA\n         DS    A                        Space for DINRTMEM Text Pointer\n.*\n&LCCTU   LOCTR                          Text Units for Constants\n&LBLRME  DC    Y(DINRTMEM,1,8),CL8' '\n.*\n&LCDTU   LOCTR                          Text Units for DSA\n         DS    0H,XL(6+8)               Space for DINRTMEM Text Unit\n\n.*\n.** Return to Caller\n.*\n.DD0600  ANOP\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDB001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDRETRV 0100-10050-10050-1200-00076-00076-00000-RHDMAC\n         MACRO\n         #DDRETRV ,                    Pass Return Variables to Caller\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDRETRV - Pass Return Variables to Invoker                       *\n.*                                                                    *\n.*    This inner macro is called after the completion of the Dynalloc *\n.*  macro to place any return variables in the data areas specified   *\n.*  by the invoker at assembly time.                                  *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n\n.*====================================================================*\n.** Process the DINDSNAM Text Unit\n.*====================================================================*\n.*\n.DD0100  ANOP\n         AIF   ('&DRRTDDN' EQ '').DD0110\n         MVC   &DRRTDDN,&TRRTDDN+6     Return DDNAME to Caller\n.*\n.DD0110  ANOP\n         AIF   ('&DRRTDSN' EQ '').DD0120\n         MVC   &DRRTDSN,&TRRTDSN+6     Return Dataset Name to Caller\n.*\n.DD0120  ANOP\n         AIF   ('&DRRTMEM' EQ '').MEND\n         MVC   &DRRTMEM,&TRRTMEM+6     Return Member Name to Caller\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDB001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDS     0100-10050-10050-1200-00061-00061-00000-RHDMAC\n         MACRO\n         #DDS  ,                       DSNAME or HFS File to Allocate\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDS    - Inner Macro to Drive the Statue Function                *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.**\n.*\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDS001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDTNUL  0100-10050-10050-1200-00075-00075-00000-RHDMAC\n         MACRO\n         #DDTNUL &P1\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDTNUL - Check List of Globals for Non-Null Member               *\n.*                                                                    *\n.*    This inner macro is used to check for mutually exclusice        *\n.*  parameters have been specified.                                   *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.**\n.*\n.DD0100  ANOP\n  MNOTE ,'ENTERING #DDTNUL'\n&DDNUL   SETB  0                  Assume All Are Nulls\n&I       SETA  N'&P1              Get Count of Entries\n&J       SETA  0\n.DD0110  ANOP\n         AIF   ('&P1(&J)' NE '').DD0200\n&J       SETA  &J+1\n         AIF   (&J GT &I).MEND\n         AGO   .DD0100\n.DD0200  ANOP\n&DDNUL   SETB  1                  Indicate Non-null Found\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDS001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#DDTUN0  0100-10050-10050-1200-00087-00087-00000-RHDMAC\n         MACRO\n         #DDTUN0 &P1,&P2,&P3,&P4,&P5\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #DDTUN0 - Inner Macro to Define Text Units                        *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY PGMGBLAS             Copy Program management Globals\n         COPY #DDGBLAS             Copy #DD Specific Globals\n.*\n         LCLC  &C,&D,&E            General Character Workarea\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.**\n.*\n.DD0100  ANOP\n&LBLTU0  SETC  'TU0'.'&SYSNDX'\n*\n&LCCTP   LOCTR ,                             Text Ptrs for Constants\n         DC    A(&LBLTU0-&CTUNIT)            Offset to Text Unit\n.*\n&LCDTP   LOCTR ,                             Text Pointers for DSA\n         DS    A                             Space for Text Pointer\n.*\n&LCCTU   LOCTR                               Text Units for Constants\n         AIF   ('&P4' EQ '').#DD110\n&LBLTU0  DC    Y(&P1,&P2,&P3),&P4            Define Text Unit\n         AGO   .#DD120\n.#DD110  ANOP\n&LBLTU0  DC    Y(&P1,&P2,&P3)                Define Text Unit\n.#DD120  ANOP\n         DS    0H\n.*\n&LCDTU   LOCTR                               Text Units for DSA\n         AIF   ('&P5' NE '').#DD130\n         DS    0H,XL(6)                      Space for Text Unit\n         DS    0H\n         AGO  .MEND\n.#DD130  ANOP\n         DS    0H,XL(6+&P5)                  Space for Text Unit\n         DS    0H\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#DDS001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#FREATB  0100-10050-10050-1200-00116-00116-00000-RHDMAC\n         MACRO\n&LBL     #FREATB &P,                   Above-The-Bar Getmain           *\n               &LV=,                   Length of Area Requested        *\n               &A=,                    Address of Area to Free         *\n               &KEY=,                  Key of Storage Requested        *\n               &SVC=167,               SVC Number to Use               *\n               &BRANCH=NO              YES Indicates Branch Entry\n.*\n.**********************************************************************\n.* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #FREATB - Freemain for Above-The-Bar Storage                      *\n.*                                                                    *\n.*    This macro provides an interface to the RDHGATB callable        *\n.*  service.  APF Authorized callers may use a branch entry to        *\n.*  the service by coding BRANCH=YES on the macro.  All others        *\n.*  must use the SVC entry to the service.                            *\n.*    This is a simple for of a freemain. There are no subpools,      *\n.*  though you may request a specific key. When you free storage\n.*  acquired via #GETATB you must free the same length as was         *\n.*  originally acquired at that addreee partial freemains are         *\n.*  not supported.                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLC  &K                      Specific key requested\n         LCLA  &I                      Work Variables\n.*\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n.*\n.** Do Validation\n.*\n         AIF   ('&P' EQ 'R').ATB010\n         AIF   ('&P' EQ 'RU').ATB010\n         AGO   .MNOTE1                 Issue Error Message\n.ATB010  ANOP\n         AIF   ('&LV' EQ '').MNOTE2\n.*\n.** Generate Macro Code\n.*\n         LBIN  R1,&A                   Get Address of Area to Free\n         LBIN  R0,&LV                  Put Length Value in R0\n.*\n&I       SETA  1024                    Indicate Freemain\n&K       SETC  '0'\n         AIF   ('&KEY' EQ '').ATB020   If Key Not Specified\n&I       SETA  &I+256                  Set Indicator Bit\n&K       SETC  '&KEY'\n.ATB020  ANOP\n         AIF   ('&P' NE 'RC').ATB030\n&I       SETA  &I+512                  Set Indicator Bit\n.ATB030  ANOP\n.*\n         AIF   (&I EQ 0).ATB040        Skip if Nothing Special\n         IIHL  R0,&I+&K*16             Put Key in And Flag Register\n.ATB040  ANOP\n.*\n         AIF   ('&BRANCH' NE 'YES').ATB050\n         LLGT  R15,=V(RDHGATB)         Callable Service Address\n         BASPM R14,R15                 Call Service\n         AGO   .MEND\n.*\n.ATB050  ANOP\n         SVC   &SVC                    Issue SVC Call to Service\n         AGO   .MEND\n.*\n.** Error Messages\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#FREATB: Positional parameter invlid. Must be R or RU*\n               .'\n         AGO   .MEND\n.*\n.MNOTE2  ANOP\n         MNOTE 8,'#FREATB: LV= Parameter was not specified and is requi*\n               red.'\n         AGO   .MEND\n.*\n.MNOTE3  ANOP\n         MNOTE 8,'#FREATB: A= Parameter was not specified and is requir*\n               ed.'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND ,\n./ ADD NAME=#GETATB  0100-10050-10050-1200-00118-00118-00000-RHDMAC\n         MACRO\n&LBL     #GETATB &P,                   Above-The-Bar Getmain           *\n               &LV=,                   Length of Area Requested        *\n               &KEY=,                  Key of Storage Requested        *\n               &SVC=167,               SVC Number to Use               *\n               &BRANCH=NO              YES Indicates Branch Entry\n.*\n.**********************************************************************\n.* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #GETATB - Getmain for Above-The-Bar Storage                       *\n.*                                                                    *\n.*    This macro provides an interface to the RDHGATB callable        *\n.*  service.  APF Authorized callers may use a branch entry to        *\n.*  the service by coding BRANCH=YES on the macro.  All others        *\n.*  must use the SVC entry to the service.                            *\n.*    This is a simple for of a getmain.  There are no subpools,      *\n.*  though you may request a specific key. All storage returned       *\n.*  is non-fetch protected.  The storage address returned will        *\n.*  always be on a 32-byte boundry with the length rounded up to      *\n.*  a multiple of 32.  And when you free the storage, you must        *\n.*  free the same length that was originally requested.  Partial      *\n.*  freemains are not allowed.                                        *\n.*    Conditional requests for storage will be honored if you         *\n.*  specify the RC for of the macro.  If storage is not available     *\n.*  R1 will be zero on the return and R15 will have a return code     *\n.*  of 8.                                                             *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLC  &K                      Specific key requested\n         LCLA  &I                      Work Variables\n.*\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n.*\n.** Do Validation\n.*\n         AIF   ('&P' EQ 'R').ATB010\n         AIF   ('&P' EQ 'RU').ATB010\n         AIF   ('&P' EQ 'RC').ATB010\n         AGO   .MNOTE1                 Issue Error Message\n.ATB010  ANOP\n         AIF   ('&LV' EQ '').MNOTE2\n.*\n.** Generate Macro Code\n.*\n         XGR   R1,R1                   Indicates Getmain Request\n         LBIN  R0,&LV                  Put Length Value in R0\n.*\n&I       SETA  0\n&K       SETC  '0'\n         AIF   ('&KEY' EQ '').ATB020   If Key Not Specified\n&I       SETA  &I+256                  Set Indicator Bit\n&K       SETC  '&KEY'\n.ATB020  ANOP\n         AIF   ('&P' NE 'RC').ATB030\n&I       SETA  &I+512                  Set Indicator Bit\n.ATB030  ANOP\n.*\n         AIF   (&I EQ 0).ATB040        Skip if Nothing Special\n         IIHL  R0,&I+&K*16             Put Key in And Flag Register\n.ATB040  ANOP\n.*\n         AIF   ('&BRANCH' NE 'YES').ATB050\n         LLGT  R15,=V(RDHGATB)         Callable Service Address\n         BASPM R14,R15                 Call Service\n         AGO   .MEND\n.*\n.ATB050  ANOP\n         SVC   &SVC                    Issue SVC Call to Service\n         AGO   .MEND\n.*\n.** Error Messages\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#GETATB: Positional parameter invlid. Must be R, RC, *\n               or RU.'\n         AGO   .MEND\n.*\n.MNOTE2  ANOP\n         MNOTE 8,'#GETATB: LV= Parameter was not specified and is requi*\n               red.'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND ,\n./ ADD NAME=#GPRM    0100-10050-10050-1200-00214-00214-00000-RHDMAC\n         MACRO ,\n&LBL     #GPRM &A,                    Program to Call                  *\n               &TRACE=YES             Traces PARMS\n.*\n.**********************************************************************\n.* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #GPRM - Load Parameter Addresses Into Registers                   *\n.*                                                                    *\n.*    This macro was written to be used in conjunction with the       *\n.*  #CALL macro, which places the input parameters into DSA and       *\n.*  is AMODE(31/64) and ARMODE(P/AR).                                 *\n.*    The macro is operand is specified as a sublist of triplets      *\n.*  in the following format:                                          *\n.*                                                                    *\n.*              A B  C         D                                      *\n.*       GPRM  (1,R2,'Comment',Len),  -Or-                            *\n.*                                                                    *\n.*       GPRM ((1,R2,'Comment',Len),                                  *\n.*             (2,R3,'Comment',Len),                                  *\n.*             (3,R4,'Comment',Len),                                  *\n.*             (4,R5,'Comment',Len))                                  *\n.*                                                                    *\n.*     Where: A - Is the sequential number of the parameter           *\n.*                specified as a numeric digit from1 to N.            *\n.*            B - Is the register to load the parameter address       *\n.*                into.                                               *\n.*            C - Is a comment that may be used to describe the       *\n.*                data at the address the parameter points to.        *\n.*            D - Is the length of the data at the address that       *\n.*                the parameter points to.                            *\n.*                                                                    *\n.*    Upon execution of the macro, the indicated registers will       *\n.*  be loaded with the values from the parameter list pointed to      *\n.*  by R1.  If SYSSTATE is AMODE(31), the four byte values will       *\n.*  be loaded. If SYSTATE indicates AMODE(64), the eight byte         *\n.*  values will be loaded into the 64-Bit registers specified.        *\n.*    If SYSTATE indicates ARMODE, then the access registers will     *\n.*  also be loaded from the corresponding address pointed to by R0.   *\n.*    After the registers are loaded then a #TRACE macro is           *\n.*  internally generated to display the input parameters to           *\n.*  TRCPRINT.                                                         *\n.*                                                                    *\n.*                                                                    *\n.*  Note:                                                             *\n.*    R0 and R1 must contain the access and GP registers as they      *\n.*  were on input to the program when this macro is executed.  Also   *\n.*  this macro uses R14 and r15 as work registers.                    *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and local Variables\n.*\n         COPY  PGMGBLAS                Copy Globals\n.*\n         LCLA  &I,&K,&J                Work Variables\n         LCLA  &CNT                    Count of Sublists\n         LCLC  &C                      (Same)\n.*\n         LCLA  &PN                     Parameter Number\n         LCLC  &PR                     Parameter Register\n         LCLC  &PC                     Parameter Comment\n         LCLC  &PL                     Parameter Length\n         LCLC  &DATA                   DATA= Parm For #TRACE\n.*\n         LCLA  &AOFF                   Offset to AR Register\n         LCLA  &GOFF                   Offset to GP Register\n.*\n.** Generate LBL if Specified\n.*\n         AIF   ('&LBL' EQ '').VAL000\n&LBL     DS    0H\n.*\n.** Validate Input Parameters For Single Entry\n.*\n.VAL000  ANOP\n         AIF   ('&A'(1,2) EQ '((').VAL100\n         AIF   (N'&A NE 4).MNOTE01\n         AIF   ('&A(3)'(1,1) NE '''').MNOTE02\n.*\n.VAL010  ANOP\n&PN      SETA  &A(1)                   Extract Values\n&PR      SETC  '&A(2)'                 (Same)\n&PC      SETC  '&A(3)'(2,K'&A(3)-2)    (Same)\n&PC      SETC  'Parm&PN.: &PC'         (Same)\n&PL      SETC  '&A(4)'                 (Same)\n&DATA    SETC  '(''&PC'',0(&PR.),&PL.)'\n.*\n.** Generate Text for a Single Parameter\n.*\n         EREGG R0,R1                   Get Parameter Regs From Stack\n         LGR   R14,R0                  Get Address of Parm Value\n         AIF   ('&SYSAM64' EQ 'YES').VAL020\n&GOFF    SETA  4*&PN-4                 Get Offset to GR Register\n         L     &PR,&GOFF.(,R1)         Load parameter Value\n         AGO   .VAL030\n.*\n.VAL020  ANOP\n&GOFF    SETA  8*&PN-8                 Get Offset to GR Register\n         LG    &PR,&GOFF.(,R1)         Load parameter Value\n.*\n.VAL030  ANOP\n         AIF   ('&SYSASCE' NE 'AR').VAL040\n&AOFF    SETA  4*&PN-4                 Get Offset to AR Register\n         LAMY  &PR,&PR,&AOFF.(R14)     Load Access Register\n.*\n.VAL040  ANOP\n*        #TRACE MSG='Parms Passed Into: &CASECT',NOHEAD=YES\n         #TRACE MSG='Parms Passed Into: &CASECT',NOHEAD=YES\n         #TRACE MSG='===========================',NOHEAD=YES\n         #TRACE DATA=&DATA,NOHEAD=YES\n         AGO   .MEND\n.*\n.** Generate Text for Sublist Within Sublist\n.*\n.VAL100  ANOP\n&CNT     SETA  N'&A\n&I       SETA  1\n&DATA    SETC  '('\n.* MNOTE *,'CNT=&CNT'\n.*\n.*\n         EREGG R0,R1                   Get Partameter Regs From Stack\n         LGR   R14,R0                  Get Address of Parm Values\n.VAL110  ANOP\n         AIF   (N'&A(&I) NE 4).MNOTE01\n         AIF   ('&A(&I,3)'(1,1) NE '''').MNOTE02\n.*\n&PN      SETA  &A(&I,1)                    Extract Values\n&PR      SETC  '&A(&I,2)'                  (Same)\n&PC      SETC  '&A(&I,3)'(2,K'&A(&I,3)-2)  (Same)\n&PC      SETC  'Parm&PN.: &PC'             (Same)\n&PL      SETC  '&A(&I,4)'                  (Same)\n.*\n&DATA    SETC  '&DATA.(''&PC'',0(&PR.),&PL.),'\n.* MNOTE *,'PN=&PN, PR=&PR, PC=&PC, PL=&PL'\n.* MNOTE *,'DATA=&DATA'\n.*\n         AIF   ('&SYSAM64' EQ 'YES').VAL120\n&GOFF    SETA  4*&PN-4                 Get Offset to GR Register\n         L     &PR,&GOFF.(,R1)         Load parameter Value\n         AGO   .VAL130\n.*\n.VAL120  ANOP\n&GOFF    SETA  8*&PN-8                 Get Offset to GR Register\n         LG    &PR,&GOFF.(,R1)         Load parameter Value\n.*\n.VAL130  ANOP\n         AIF   ('&SYSASCE' NE 'AR').VAL140\n&AOFF    SETA  4*&PN-4                 Get Offset to AR Register\n         LAMY  &PR,&PR,&AOFF.(R14)     Load Access Register\n.*\n.VAL140  ANOP\n.*\n.VAL999  ANOP\n&I       SETA  &I+1                    Increment to Next Sublist\n.* MNOTE *,'I=&I, CNT=&CNT'\n         AIF   (&I LE &CNT).VAL110     -> Loop\n.*\n.** Issue #TRACE Macro to Show Paramaters Input\n.*\n&DATA    SETC  '&DATA'(1,K'&DATA-1)\n&DATA    SETC  '&DATA.)'\n.* MNOTE *,'DATA=&DATA'\n*        #TRACE MSG='Parms Passed Into: &CASECT',NOHEAD=YES\n         #TRACE MSG='Parms Passed Into: &CASECT',NOHEAD=YES\n         #TRACE MSG='===========================',NOHEAD=YES\n         #TRACE DATA=&DATA,NOHEAD=YES\n         AGO   .MEND                   -> Exit Macro\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE01 ANOP\n         MNOTE 8,'#GPRM: Sublist must have 4 parameters.'\n         AGO   .MEND\n.*\n.MNOTE02 ANOP\n         MNOTE 8,'#GPRM: Sublist parameter 3 must be quoted.'\n         AGO   .MEND\n.*\n.** Exit Macro\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=#MAC64   0100-10050-10050-1200-00892-00892-00000-RHDMAC\n*\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n*                                                                     *\n** #MAC64 - Copybook to Provide Support Macros for 64-Bit Programs    *\n*                                                                     *\n*    The following macros are provided in support of 64-bit programs  *\n*  that call other programs, either 31-bit or 64-bit.  There is a     *\n*  problem with BASR in that while it sets the AMODE bit bit-32 to    *\n*  one for a 31-bit return address, it does no set the AMODE bit,     *\n*  bit-63 to one for a 64-bit return address.  This failure will      *\n*  cause a BAKR/PR sequence to return to the 64-bit program in        *\n*  24-bit AMODE.  So, these macros were developed to resolve this     *\n*  issue by assuring the AMODE bit, bit-63 is properly set when a     *\n*  64-bit program issues a call to a program that returns via PR.     *\n*                                                                     *\n*    BASPM - Branch and Save and Preserve Amode                       *\n*    BAS31 - Branch and Save to a Program in that runs in AMODE(31)   *\n*    BAS64 - Branch and Save to a Program in that runs in AMODE(64)   *\n*                                                                     *\n*    The following macros were developed to fill in a gap in the      *\n*  Zos instruction set for the SS instructions.  Most of the older    *\n*  RX and RS instructions which use a BDDD base and displacement      *\n*  have been replaced by the Y and G instructions which allow for     *\n*  a BDDDDD base and displacement.  However, the SS instruction set   *\n*  which is very commonly used have not, and cannot be replaced as    *\n*  that would require an 8-byte instruction and the hardware just     *\n*  can't support that.                                                *\n*    So, in order to make full use of the 20-bit displacement base    *\n*  registers, allowing direct addressability of a megabyte of         *\n*  storage, it was necessary to provide a replacement for the SS      *\n*  instruction set via these macros.                                  *\n*    These macros will generate a sequence of instructions similar    *\n*  to those shown below.  They use R14 and R15 as work registers.     *\n*  if you need to preserve these work registers specify SAVE=YES      *\n*  on the MACRO.                                                      *\n*                     LAY R14,&A                                      *\n*                     LAY R15,&B                                      *\n*                     MVC 0(L'&A,R14),0(R15)                          *\n*                                                                     *\n*    The following macros are provided in this copybook.              *\n*                                                                     *\n*                                                                     *\n*    CLCY   - Compare Logical Character W/20-Bit Displacements        *\n*    MVCY   - Move Character                                          *\n*    MVNY   - Move Numerics                                           *\n*    MVZY   - Move Zones                                              *\n*    MVOY   - Move With Offset                                        *\n*    XCY    - Exclusive Or Character                                  *\n*    NCY    - And Character                                           *\n*    OCY    - Or Character                                            *\n*    TRY    - Translate                                               *\n*    TRTY   - Translate and Test                                      *\n*                                                                     *\n*    APY    - Add Packed                                              *\n*    CPY    - Compare Packed                                          *\n*    DPY    - Divide Packed                                           *\n*    MPY    - Multiply Packed                                         *\n*    SPY    - Subtract Packed                                         *\n*    SRPY   - Shift and Round Packed                                  *\n*    ZAPY   - Zero and Add Packed                                     *\n*    EDY    - Edit                                                    *\n*    EDMKY  - Edit and Mark                                           *\n*    PACKY  - Pack                                                    *\n*    UNPKY  - Unpack                                                  *\n*                                                                     *\n*    MVCKY  - Move With Key                                           *\n*    MVCPY  - Move to Primary                                         *\n*    MVCSY  - Move to Secondary                                       *\n*    MVCDKY - Move With Destination Key                               *\n*    MVCSKY - Move With Source Key                                    *\n*    MVCOSY - Move With Optional Specifications                       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* Date     Developer Cng# Comments                                    *\n* ======== ========= ==== ==========================================  *\n* 00/00/00 R.Harper  M000 Macro Developed                             *\n*                                                                     *\n***********************************************************************\n*\n*\n*--------------------------------------------------------------------*\n* BASPM - Branch and Save And Preserve Amode                         *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         BASPM &A,&B                   Branch & Save & Preserve Amode\n         BSM   &B,0                    Set AMode Bits in Target Addr\n         BASSM &A,&B                   Set AMode Bits in Return Addr\n         MEND\n*\n*--------------------------------------------------------------------*\n* BAS31 - Branch and Save To a 31-Bit Program                        *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         BAS31 &A,&B                   Branch & Save to 31-Bit Program\n         NILL  &B,X'FFFE'              Assure Bit63 is Zero in Target\n         OILH  &B,X'8000'              Assure Bit32 is One  in Target\n         BASSM &A,&B                   Set Return Amode, & 31-Bit Call\n         MEND\n*\n*--------------------------------------------------------------------*\n* BAS64 - Branch and Save To a 64-Bit Program                        *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         BAS64 &A,&B                   Branch & Save to 64-Bit Program\n         OILL  &B,X'0001'              Assure Bit63 is One in Target\n         BASSM &A,&B                   Set Return Amode, & 64-Bit Call\n         MEND\n*\n*--------------------------------------------------------------------*\n* CLCY - Compare Logical Character With 20-Bit Displacement          *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         CLCY  &A,&B,                  20-Bit MVC Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').CLCY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.CLCY010 ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         CLC   0(L'&A,&R1),0(&R2)      Compare Data\n.*\n         AIF   ('&SAVE' NE 'YES').CLCY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.CLCY020 ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVCY - Move Character With 20-Bit Displacement                     *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVCY  &A,&B,                  20-Bit MVC Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVCY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVCY010 ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVC   0(L'&A,&R1),0(&R2)      Move Data\n.*\n         AIF   ('&SAVE' NE 'YES').MVCY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVCY020 ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVNY - Move Numerics With 20-Bit Displacement                      *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVNY  &A,&B,                  20-Bit MVN Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVNY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVNY010 ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVN   0(L'&A,&R1),0(&R2)      Move Data\n.*\n         AIF   ('&SAVE' NE 'YES').MVNY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVNY020 ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVZY - Move Zones With 20-Bit Displacement                         *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVZY  &A,&B,                  20-Bit MVZ Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVZY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVZY010 ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVZ   0(L'&A,&R1),0(&R2)      Move Data\n.*\n         AIF   ('&SAVE' NE 'YES').MVZY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVZY020 ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVOY - Move With Offset With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVOY  &A,&B,                  20-Bit MVO Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVO010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVO010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVO   0(L'&A,&R1),0(L'&B,&R2) Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').MVO020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVO020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* XCY - Exclusive OR Character Zones With 20-Bit Displacement        *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         XCY   &A,&B,                  20-Bit XC Macro                 *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').XCY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.XCY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         XC    0(L'&A,&R1),0(&R2)      Move Data\n.*\n         AIF   ('&SAVE' NE 'YES').XCY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.XCY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* OCY -  OR Character Zones With 20-Bit Displacement                 *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         OCY   &A,&B,                  20-Bit OC Macro                 *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').OCY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.OCY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         OC    0(L'&A,&R1),0(&R2)      Move Data\n.*\n         AIF   ('&SAVE' NE 'YES').OCY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.OCY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* NCY - AND Character Zones With 20-Bit Displacement                 *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         NCY   &A,&B,                  20-Bit NC Macro                 *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').NCY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.NCY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         NC    0(L'&A,&R1),0(&R2)      Move Data\n.*\n         AIF   ('&SAVE' NE 'YES').NCY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.NCY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* TRY - Translate With 20-Bit Displacement                           *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         TRY   &A,&B,                  20-Bit TR Macro                 *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').TRY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.TRY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         TR    0(L'&A,&R1),0(&R2)      Move Data\n.*\n         AIF   ('&SAVE' NE 'YES').TRY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.TRY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* TRTY - Translate and Test With 20-Bit Displacement                 *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         TRTY  &A,&B,                  20-Bit TRT Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').TRT010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.TRT010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         TRT   0(L'&A,&R1),0(&R2)      TRT Data\n.*\n         AIF   ('&SAVE' NE 'YES').TRT020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.TRT020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* APY  - Add Packed With 20-Bit Displacement                         *\n*--------------------------------------------------------------------*\n*\n         MACRO\n         APY   &A,&B,                  20-Bit AP  Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').APY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.APY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         AP    0(L'&A,&R1),0(L'&B,&R2) Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').APY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.APY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* CPY  - Compare Packed With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         CPY   &A,&B,                  20-Bit CP  Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').CPY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.CPY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         CP    0(L'&A,&R1),0(L'&B,&R2) Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').APY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.CPY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* DPY  - Divide Packed With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         DPY   &A,&B,                  20-Bit DP  Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').DPY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.DPY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         DP    0(L'&A,&R1),0(L'&B,&R2) Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').DPY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.DPY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MPY  - Multiply Packed With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MPY   &A,&B,                  20-Bit MP  Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MPY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MPY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MP    0(L'&A,&R1),0(L'&B,&R2) Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').MPY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MPY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* SPY  - Subtract Packed With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         SPY   &A,&B,                  20-Bit SP  Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').SPY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.SPY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         SP    0(L'&A,&R1),0(L'&B,&R2) Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').SPY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.SPY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* SRPY - Shift Packed With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         SRPY  &A,&B,                  20-Bit SRP Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').SRP010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.SRP010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         SRP   0(L'&A,&R1),0(L'&B,&R2) Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').SRP020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.SRP020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* ZAPY - Shift Packed With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         ZAPY  &A,&B,                  20-Bit ZAP Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').ZAP010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.ZAP010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         ZAP   0(L'&A,&R1),0(L'&B,&R2) Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').ZAP020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.ZAP020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* EDY  - Edit With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         EDY   &A,&B,                  20-Bit ZAP Macro                *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').EDY010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.EDY010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         ED    0(L'&A,&R1),0(&R2)      Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').EDY020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.EDY020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* EDMKY - Edit With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         EDMKY &A,&B,                  20-Bit EDMK Macro               *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').EDM010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.EDM010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         EDMK  0(L'&A,&R1),0(&R2)      Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').EDM020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.EDM020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* PACKY - Pack With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         PACKY &A,&B,                  20-Bit PACK Macro               *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').PAK010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.PAK010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         PACK  0(L'&A,&R1),0(&R2)      Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').PAK020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.PAK020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* UNPKY - UNPK With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         UNPKY &A,&B,                  20-Bit UNPK Macro               *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').UNP010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.UNP010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         UNPK  0(L'&A,&R1),0(&R2)      Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').UNP020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.UNP020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVCDKY - MVCDK With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVCDKY &A,&B,                 20-Bit MVCDK Macro              *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVC010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVC010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVCDK 0(L'&A,&R1),0(&R2)      Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').MVC020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVC020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVCSKY - MVCSK With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVCSKY &A,&B,                 20-Bit MVCDK Macro              *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVC010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVC010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVCSK 0(L'&A,&R1),0(&R2)      Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').MVC020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVC020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVCPY - MVCP With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVCPY &A,&B,&C,               20-Bit MVCP  Macro              *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVC010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVC010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVCP  0(L'&A,&R1),0(&R2),&C   Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').MVC020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVC020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVCSY - MVCS With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVCSY &A,&B,&C,               20-Bit MVCS  Macro              *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVC010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVC010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVCS  0(L'&A,&R1),0(&R2),&C   Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').MVC020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVC020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVCKY - MVCK With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVCKY &A,&B,&C,               20-Bit MVCK  Macro              *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVC010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVC010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVCK  0(L'&A,&R1),0(&R2),&C   Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').MVC020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVC020  ANOP\n.*\n         MEND\n*\n*--------------------------------------------------------------------*\n* MVCOSY - MVCOS With 20-Bit Displacement\n*--------------------------------------------------------------------*\n*\n         MACRO\n         MVCOSY &A,&B,&C,              20-Bit MVCOS Macro              *\n               &SAVE=NO,               To Save or Not to Save?         *\n               &WKREG=R14,             Even/Odd Pair of Work Registers *\n               &WKDSA=DSASAVER         2-Doubleword Savearea\n.*\n         LCLC  &R1,&R2                 Work Variables\n&R1      SETC  '&WKREG'                Set Register Values\n&R2      SETC  '&WKREG+1'              (Same)\n.*\n         AIF   ('&SAVE' NE 'YES').MVC010\n         STMG  &R1,&R2,&WKDSA          Save Original Values\n.MVC010  ANOP\n.*\n         LAY   &R1,&A                  Get Address of Target\n         LAY   &R2,&B                  Get Address of Source\n         MVCOS 0(L'&A,&R1),0(&R2),&C   Do Instruction\n.*\n         AIF   ('&SAVE' NE 'YES').MVC020\n         LMG   &R1,&R2,&WKDSA          Load Original Values\n.MVC020  ANOP\n.*\n         MEND\n./ ADD NAME=#MSG     0100-10050-10050-1200-00091-00091-00000-RHDMAC\n         MACRO\n&LBL     #MSG  &MSG,                   Message Macro Text              *\n               &MSGID=,                Message ID AAA9999X             *\n               &DD=MSGPRINT,           DDNAME for SYSOUT               *\n               &SQUEEZE=YES,           Squeeze Out Multiple Blanks     *\n               &PRINT=NOGEN            Print Option GEN/NOGEN\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #MSG - Issue a Message to a DDNAME                                *\n.*                                                                    *\n.*                                                                    *\n.*      &MSG = Specifies a message to be printed allowinf for         *\n.*             embedded variables in a sublisted string.  Variable    *\n.*             data will be printed according to the type of          *\n.*             variable.  Types C and Z are printes in character      *\n.*             format.  Types F, H and P are printed in decimal       *\n.*             format.  Everything else is printed in hex format.     *\n.*                   'This is a message'                              *\n.*                   ('The ',COLOR,' HARE ' is ',HEIGHT,' ft. tall.'  *\n.*                   ('Show savearea at: ',DSASAVEA)                  *\n.*                                                                    *\n.*                                                                    *\n.*    &MSGID = Specifies a standard ZOS Message ID to identify the    *\n.*             message to other products or components.  Should be    *\n.*             unique and is useful for interfacing with automation   *\n.*             products.  The form is: AAA9999X                       *\n.*                                                                    *\n.*             Where: AAA  - is a 3 Char Product Identifier           *\n.*                    9999 - is a 4 Digit Message Number              *\n.*                    X    - is an Action Code: I - Informational     *\n.*                                              A - Action Required   *\n.*                                              E - Error Condition   *\n.*                                                                    *\n.*                                                                    *\n.*     &DD   = Specifies the DDNAME of the output dataset on Open     *\n.*             or Close. If not specified one will be dynamically     *\n.*             allocated. Only one sysout dataset can exist per task. *\n.*                                                                    *\n.*    &PRINT = GEN/NOGEN. Defined the PRINT Control for This Macro    *\n.*                                                                    *\n.*                                                                    *\n.*  &SQUEEZE = YES/NO.  A value of YES indicates that multiple        *\n.*             consequative space characters are to be removed        *\n.*             from the final output before printing.                 *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Issue Call to #MSGI Common Message Macro\n.*\n&LBL     #MSGI MSG,                    Indicate Invoked by #MSG        *\n               &MSG,                   Message Macro Text              *\n               MSGID=&MSGID,           Message ID AAA9999X             *\n               DD=&DD,                 DDNAME for SYSOUT               *\n               SQUEEZE=&SQUEEZE,       Squeeze Out Multiple Blanks     *\n               ROUTCDE=,               (Unused) Routing Codes          *\n               RALEN=,                 (Unused) Reply Area Length      *\n               RAADR=,                 (Unused) Reply Area Address     *\n               RAECB=,                 (Unused) Reply ECB Address      *\n               PRINT=&PRINT            Print Option GEN/NOGEN\n.*\n         MEND ,\n./ ADD NAME=#MSGI    0100-10050-10050-1200-00407-00407-00000-RHDMAC\n         MACRO\n&LBL     #MSGI &TYPE,                  Message Type MSG/WTO/WTOR       *\n               &MSG,                   Message Macro Text              *\n               &MSGID=,                Message ID AAA9999X             *\n               &DD=,                   DDNAME for #MSG SYSOUT          *\n               &ROUTCDE=,              Routing Codes                   *\n               &RALEN=,                Reply Area Length               *\n               &RAADR=,                Reply Area Address              *\n               &RAECB=,                Reply ECB Address               *\n               &SQUEEZE=YES,           Squeeze Out Multiple Blanks     *\n               &PRINT=NOGEN            Print Option GEN/NOGEN\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #MSG - Issue a Message to a DDNAME                                *\n.*                                                                    *\n.*    &TYPE  = Indicates Invoker: #MSG, #WTO, #WTOR                   *\n.*                                                                    *\n.*    &MSGID = Specifies a standard ZOS Message ID to identify the    *\n.*             message to other products or components.  Should be    *\n.*             unique and is useful for interfacing with automation   *\n.*             products.  The form is: AAA9999X                       *\n.*                                                                    *\n.*             Where: AAA  - is a 3 Char Product Identifier           *\n.*                    9999 - is a 4 Digit Message Number              *\n.*                    X    - is an Action Code: I - Informational     *\n.*                                              A - Action Required   *\n.*                                              E - Error Condition   *\n.*                                                                    *\n.*      &MSG = Specifies a message to be printed allowinf for         *\n.*             embedded variables in a sublisted string.  Variable    *\n.*             data will be printed according to the type of          *\n.*             variable.  Types C and Z are prints in character       *\n.*             format.  Types F, H and P are printed in decimal       *\n.*             format.  Everything else is printed in hex format.     *\n.*                   'This is a message'                              *\n.*                   ('The ',COLOR,' HARE ' is ',HEIGHT,' ft. tall.'  *\n.*                   ('Show savearea at: ',DSASAVEA)                  *\n.*                                                                    *\n.*       &DD = Specifies the DDNAME of the output dataset on Open     *\n.*             or Close. If not specified one will be dynamically     *\n.*             allocated. Only one sysout dataset can exist per task. *\n.*                                                                    *\n.*  &ROUTCDE = WTO/WTOR Routing Codes                                 *\n.*                                                                    *\n.*    &RALEN = Reply Area Length                                      *\n.*                                                                    *\n.*    &RAADR = Reply Area Address                                     *\n.*                                                                    *\n.*    &RAECB = Reply ECB Address                                      *\n.*                                                                    *\n.*    &PRINT = GEN/NOGEN. Defined the PRINT Control for This Macro    *\n.*                                                                    *\n.*                                                                    *\n.*  &SQUEEZE = YES/NO.  A value of YES indicates that multiple        *\n.*             consequative space characters are to be removed        *\n.*             from the final output before printing.                 *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS             Copy Globals\n         LCLC  &MSGLBL              Internal Label Names\n         LCLC  &MSGARE              (Same)\n         LCLC  &MSGLEN              (Same)\n         LCLC  &MSGCOD              (Same)\n         LCLC  &RCDE1,&RCDE2        (Same)\n         LCLC  &C                   Work Variables\n.*\n         LCLA  &K,&J,&N             Work Variables\n.*\n         LCLB  &M,&W,&R,&S,&I,&L    Flag Bit Values\n         LCLB  &B(16)               (Same)\n.*\n.** Define Internal Labels\n.*\n&MSGLBL  SETC  'MSG'.'&SYSNDX'\n&MSGARE  SETC  'MSG'.'&SYSNDX'.'A'\n&MSGLEN  SETC  'MSG'.'&SYSNDX'.'L'\n&MSGCOD  SETC  'MSG'.'&SYSNDX'.'C'\n.*\n.*--------------------------------------------------------------------*\n.** Do Basic Validation of Parameters\n.*--------------------------------------------------------------------*\n.*\n         AIF   ('&TYPE' EQ 'MSG').VAL010\n         AIF   ('&TYPE' EQ 'WTO').VAL010\n         AIF   ('&TYPE' EQ 'WTOR').VAL010\n         AGO   .MNOTE1\n.*\n.VAL010  ANOP\n         AIF   ('&MSG' EQ '').MNOTE2\n         AIF   ('&MSG' NE 'CLOSE').VAL015\n&L       SETB  1\n.VAL015  ANOP\n.*\n         AIF   ('&PRINT' EQ 'GEN').VAL020\n         AIF   ('&PRINT' EQ 'NOGEN').VAL020\n         AGO   .MNOTE3\n.*\n.VAL020  ANOP\n         AIF   ('&SQUEEZE' EQ 'YES').VAL025\n         AIF   ('&SQUEEZE' EQ 'NO').VAL030\n         AGO   .MNOTE4\n.VAL025  ANOP\n&S       SETB  1\n.*\n.** Validate #MSG Macro\n.*\n.VAL030  ANOP\n         AIF   ('&TYPE' NE 'MSG').VAL040\n         AIF   ('&DD' EQ '').MNOTE5\n         AIF   ('&ROUTCDE' NE '').MNOTE6\n         AIF   ('&RALEN' NE '').MNOTE7\n         AIF   ('&RAADR' NE '').MNOTE8\n         AIF   ('&RAECB' NE '').MNOTE9\n&M       SETB  1\n         AGO   .VAL060\n.*\n.** Validate #WTO Macro\n.*\n.VAL040  ANOP\n         AIF   ('&TYPE' NE 'WTO').VAL050\n         AIF   ('&DD' NE '').MNOTE10\n         AIF   ('&RALEN' NE '').MNOTE7\n*temp    AIF   ('&RAADR' NE '').MNOTE8\n         AIF   ('&RAECB' NE '').MNOTE9\n&W       SETB  1\n         AGO   .VAL060\n.*\n.** Validate #WTOR Macro\n.*\n.VAL050  ANOP\n         AIF   ('&TYPE' NE 'WTOR').VAL060\n         AIF   ('&DD' NE '').MNOTE10\n         AIF   ('&RALEN' EQ '').MNOTE11\n         AIF   ('&RAADR' EQ '').MNOTE12\n         AIF   ('&RAECB' EQ '').MNOTE13\n&R       SETB  1\n         AGO   .VAL060\n.*\n.** Validate &MSGID parameter if Specified\n.*\n.VAL060  ANOP\n         AIF   ('&MSGID' EQ '').VAL070\n         AIF   ('&MSGID'(1,1) LT 'A').MNOTE14\n         AIF   ('&MSGID'(1,1) GT 'Z').MNOTE14\n         AIF   ('&MSGID'(2,1) LT 'A').MNOTE14\n         AIF   ('&MSGID'(2,1) GT 'Z').MNOTE14\n         AIF   ('&MSGID'(3,1) LT 'A').MNOTE14\n         AIF   ('&MSGID'(3,1) GT 'Z').MNOTE14\n.*\n         AIF   ('&MSGID'(4,1) LT '0').MNOTE14\n         AIF   ('&MSGID'(4,1) GT '9').MNOTE14\n         AIF   ('&MSGID'(5,1) LT '0').MNOTE14\n         AIF   ('&MSGID'(5,1) GT '9').MNOTE14\n         AIF   ('&MSGID'(6,1) LT '0').MNOTE14\n         AIF   ('&MSGID'(7,1) GT '9').MNOTE14\n         AIF   ('&MSGID'(7,1) LT '0').MNOTE14\n         AIF   ('&MSGID'(7,1) GT '9').MNOTE14\n.*\n         AIF   ('&MSGID'(8,1) EQ 'I').VAL100\n         AIF   ('&MSGID'(8,1) EQ 'A').VAL100\n         AIF   ('&MSGID'(8,1) EQ 'E').VAL100\n         AGO   .MNOTE14\n.VAL070  ANOP\n&I       SETB  1\n.*\n.** Decipher ROUTCDE Parameter\n.*\n.VAL100  ANOP\n&RCDE1   SETC  '0'\n&RCDE2   SETC  '0'\n         AIF   (T'&ROUTCDE EQ 'O').CON000\n         AIF   ('&ROUTCDE'(1,1) NE '(').MNOTE15\n&J       SETA  N'&ROUTCDE           Get Count of Entries in Sublist\n&N       SETA  1                    Beginning of Sublist\n.*\n.VAL110  ANOP\n         AIF   (&N GT &J).VAL120    -> Done\n&K       SETA  &ROUTCDE(&N)         Get Routcode Value\n&B(&K)   SETB  1                    Indicate Routcode\n&N       SETA  &N+1\n         AGO   .VAL110              -> Loop\n.*\n.VAL120  ANOP\n&RCDE1   SETC  '&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'\n&RCDE2   SETC  '&B(9)&B(10)&B(11)&B(12)&B(13)&B(14)&B(15)&B(16)'\n.*\n.*--------------------------------------------------------------------*\n.** Generate Parameter List in Constant Area\n.*--------------------------------------------------------------------*\n.*\n.CON000  ANOP\n         J     &MSGCOD                 Branch Around Inline Parms\n         DS    0D                      Align Message Parms\n.*\n&C       SETC  '&M&W&R&S&I&L'.'00'\n&MSGLBL  DS    0H                      Define Message Parms\n         DC    CL8'&MSGID '            Define MSGID if Present\n         DC    B'&C'                   Define Bit Settings\n         DC    B'0'                    (Reserved)\n.*\n         AIF   ('&TYPE' NE 'MSG').CON010\n         DC    CL8'&DD '               Define DDNAME\n         AGO  .MSG000                  ->\n.*\n.CON010  ANOP\n         DC    B'&RCDE1'               ROUTCDE Value\n         DC    B'&RCDE2'               ROUTCDE Value\n         AIF   ('&TYPE' EQ 'WTOR').CON100\n\n         DC    Y(0)                    (Reserved)\n         AIF   (T'&RAADR EQ 'O').CON020\n         DC    S(&RAADR)               Place to Put Output Line\n         AGO   .CON030\n.CON020  ANOP\n         DC    Y(0)                    Optional Parm not Specified\n.CON030  ANOP\n         DC    Y(0)                    (Reserved)\n         AGO   .MSG000                 ->\n.*\n.CON100  ANOP\n         DC    Y(&RALEN)               Reply Area Length\n         DC    S(&RAADR)               Reply Area Address\n         DC    S(&RAECB)               Reply ECB Address\n.*\n.*--------------------------------------------------------------------*\n.** Process the &MSG Parameter\n.*--------------------------------------------------------------------*\n.*\n.MSG000  ANOP\n         AIF   ('&MSG' NE 'CLOSE').MSG010\n&MSGARE  DS    0H\n         DC    YL2(2)                  Set Length of Message\n         DC    CL2' '                  Store Message\n         AGO   .MSG999\n.MSG010  ANOP\n&MSGARE  DS    0H\n&J       SETA  N'&MSG                  Get Count of Entries in Sublist\n         AIF   (&J NE 1).MSG020        -> Sublist Indicated\n         AIF   ('&MSG'(1,1) NE '''').MSG020\n         DC    YL2(&MSGLEN)            Set Length of Message\n         DC    C&MSG                   Store Message\n         AGO   .MSG999                 -> Simple Version\n.*\n.** Sublist Indicated\n.*\n.MSG020  ANOP\n         DC    YL2(&MSGLEN)            Set Length of Message\n&N       SETA  1                       Beginning of Sublist\n.*\n.** Process Text Data\n.*\n.MSG030  ANOP\n         AIF   (&N GT &J).MSG999    -> Done\n         AIF   ('&MSG(&N)'(1,1) NE '''').MSG100\n         DC    C&MSG(&N)               Store Message\n&N       SETA  &N+1                    (Same)\n         AGO   .MSG030\n.*\n.** Process Imbedded Variable\n.*\n.MSG100  ANOP\n         DC    X'FE'                   Indicate Imbedded Variable\n         AIF   (T'&MSG(&N) NE 'C').MSG110\n         DC    C'C'                    Indicate Character\n         AGO   .MSG160\n.MSG110  ANOP\n         AIF   (T'&MSG(&N) NE 'Z').MSG120\n         DC    C'Z'                    Indicate Zoned\n         AGO   .MSG160\n.MSG120  ANOP\n         AIF   (T'&MSG(&N) NE 'F').MSG130\n         DC    C'F'                    Indicate Fullword\n         AGO   .MSG160\n.MSG130  ANOP\n         AIF   (T'&MSG(&N) NE 'H').MSG140\n         DC    C'H'                    Indicate Halfword\n         AGO   .MSG160\n.MSG140  ANOP\n         AIF   (T'&MSG(&N) NE 'P').MSG150\n         DC    C'P'                    Indicate Packed\n         AGO   .MSG160\n.MSG150  ANOP\n         DC    C'X'                    Indicate Hexadecmil\n.MSG160  ANOP\n         DC    YL1(L'&MSG(&N))         Store Length Value\n         DC    SL2(&MSG(&N))           Store Address of Data\n.*\n&N       SETA  &N+1\n         AGO   .MSG030\n.*\n.MSG999  ANOP\n         DC    C' '                    Last Blank As Terminator\n&MSGLEN  EQU   *-&MSGARE               Length of Message Area\n         DS    0H                      Force Alignment\n.*\n.*----7---------------------------------------------------------------*\n.** Generate Code to Call RDHMSGS\n.*--------------------------------------------------------------------*\n.*\n.COD000  ANOP\n.*\n&MSGCOD  DS    0H\n         LARL  R1,&MSGLBL              Get Parameter List Input\n         L     R15,=V(RDHMSGS)         Get Message Processor Address\n         BAS31 R14,R15                 Issue Message\n         AGO   .MEND                   -> Done\n.*\n.*--------------------------------------------------------------------*\n.** Issue Error Messages\n.*--------------------------------------------------------------------*\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#MSGI: Invalid TYPE specified on invokation.'\n         AGO   .MEND\n.*\n.MNOTE2  ANOP\n         MNOTE 8,'#MSGI: No message text specified.'\n         AGO   .MEND\n.*\n.MNOTE3  ANOP\n         MNOTE 8,'#MSGI: PRINT= invalid must be GEN/NOGEN.'\n         AGO   .MEND\n.*\n.MNOTE4  ANOP\n         MNOTE 8,'#MSGI: SQUEEZE= is invalid must be YES/NO.'\n         AGO   .MEND\n.*\n.MNOTE5  ANOP\n         MNOTE 8,'#MSGI: DD= is required and not specified.'\n         AGO   .MEND\n.*\n.MNOTE6  ANOP\n         MNOTE 8,'#MSGI: ROUTCDE= specified and not allowed.'\n         AGO   .MEND\n.*\n.MNOTE7  ANOP\n         MNOTE 8,'#MSGI: RALEN= specified and not allowed.'\n         AGO   .MEND\n.*\n.MNOTE8  ANOP\n         MNOTE 8,'#MSGI: RAADR= specified and not allowed.'\n         AGO   .MEND\n.*\n.MNOTE9  ANOP\n         MNOTE 8,'#MSGI: RAECB= specified and not allowed.'\n         AGO   .MEND\n.*\n.MNOTE10 ANOP\n         MNOTE 8,'#MSGI: DD= specified and not allowed.'\n         AGO   .MEND\n.*\n.MNOTE11 ANOP\n         MNOTE 8,'#MSGI: RALEN= was not specified and is required.'\n         AGO   .MEND\n.*\n.MNOTE12 ANOP\n         MNOTE 8,'#MSGI: RAADR= was not specified and is required.'\n         AGO   .MEND\n.*\n.MNOTE13 ANOP\n         MNOTE 8,'#MSGI: RAECB= was not specified and is required.'\n         AGO   .MEND\n.*\n.MNOTE14 ANOP\n         MNOTE 8,'#MSGI: MSGID= is in invalid format. Should be AAA9999*\n               X.'\n         AGO   .MEND\n.*\n.MNOTE15 ANOP\n         MNOTE 8,'#MSGI: ROUTCDE= Value is not a sublist.'\n         AGO   .MEND\n.*\n.** Exit Macro\n.*\n.MEND    ANOP\n         MEND ,\n./ ADD NAME=#OPSYN20 0100-10050-10050-1200-00079-00079-00000-RHDMAC\n**********************************************************************\n* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n*                                                                    *\n** #OPSYB20 - Generate 20-Bit OPSYNs for BDDD Instructions           *\n*                                                                    *\n*    This is a copybook that is included in the program by the       *\n*  PGMNTRY macro when the user specifies the OPSYN20=YES parameter.  *\n*  The default for this parameter is YES but it may be turned off    *\n*  by specifying NO.                                                 *\n*    The intent is to add instructions to this list as needed to     *\n*  support macros that still use the 12-Bit instructions.            *\n*                                                                    *\n*                                                                    *\n** Change History                                                    *\n*                                                                    *\n* Date     Developer Cng# Comments                                   *\n* ======== ========= ==== ========================================== *\n* 00/00/00 R.Harper  M000 Macro Developed                            *\n*                                                                    *\n**********************************************************************\n*\nA        OPSYN AY                      Add\nAH       OPSYN AHY                     Add Halfword\nAL       OPSYN ALY                     Add Logical\nN        OPSYN NY                      And\nC        OPSYN CY                      Compare\nCS       OPSYN CSY                     Compare and Swap\nCDS      OPSYN CDSY                    Compare Double and Swap\nCH       OPSYN CHY                     Compare Halfword\nCL       OPSYN CLY                     Compare Logical\nCLM      OPSYN CLMY                    Compare Logical Under Mask\nCVB      OPSYN CVBY                    Convert to Binary\nCVD      OPSYN CVDY                    Convert to Decimal\nX        OPSYN XY                      Exclusive Or\nIC       OPSYN ICY                     Insert Character\n*ICM     OPSYN ICMY                    Insert Character Under Mask\nL        OPSYN LY                      Load\nLAM      OPSYN LAMY                    Load Access Multiple\nLA       OPSYN LAY                     Load Address\n*LAE     OPSYN LAEY                    Load Address Extended\nLH       OPSYN LHY                     Load Halfword\nLM       OPSYN LMY                     Load Multiple\nMVI      OPSYN MVIY                    Move Immediate\nMH       OPSYN MHY                     Multiply Halfword\nM        OPSYN MFY                     Multiply Fullword\nO        OPSYN OY                      Or\nST       OPSYN STY                     Store\nSTAM     OPSYN STAMY                   Store Access Multiple\nSTC      OPSYN STCY                    Store Character\nSTCM     OPSYN STCMY                   Store Character Under Mask\nSTH      OPSYN STHY                    Store Halfword\nSTM      OPSYN STMY                    Store Multiple\nS        OPSYN SY                      Subtract\nSH       OPSYN SHY                     Subtract Halfword\nSL       OPSYN SLY                     Subtract Logical\n*\n**********************************************************************\n./ ADD NAME=#SUICIDE 0100-10050-10050-1200-00071-00071-00000-RHDMAC\n         MACRO\n&LBL     #SUICIDE &MSG='NONE'        Message to Follow S0C3\n.*\n.**********************************************************************\n.* Copyright (c) 2008 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #SUICIDE - Kill the Program Here With Message Pointed to by PSW   *\n.*                                                                    *\n.*    This macro created to issue a fatal error message.  It issues   *\n.*  an EX 0,* instruction which is immediately followed by the text   *\n.*  presented by the MSG= parameter.  This is a simple technique      *\n.*  that is frequently used in \"should not occur\" situations.         *\n.*    It was placed in a macro so that at some later date it can be   *\n.*  enhanced to issue that message to the Console in a WTO, issued    *\n.*  to a message log, or the JES2 joblog.                             *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 10/04/08 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS             Copy Gglobals\n.*\n         LCLC  &C                   Local Variables\n         LCLA  &I,&J                (Same)\n.*\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n.*\n.** Issue an EXecute\n.*\n         BASR  R14,0                Establish Temp Addressability\n         EX    0,0(,R14)            EXecute Yourself - S0C3\n         DC    C&MSG                PSW Points to Message for Fatal Err\n         DS    0H                   Assure Halfword Allignment\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'DSAEND: ..'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=#TRACE   0100-10050-10050-1200-00608-00608-00000-RHDMAC\n         MACRO\n&LBL     #TRACE &TYPE=TRAP,            PGME/PGMX/SUBE/SUBX/TRAP        *\n               &DD=TRCPRINT,           DDNAME for SYSOUT               *\n               &REGS=NONE,             Register Values to Print        *\n               &MSG=,                  Message to Output               *\n               &DATA=,                 Data Area in Hex Dump Format    *\n               &PARM=,                 Input Parameters for PGME       *\n               &SQUEEZE=YES,           Squeeze Out Multiple Blanks     *\n               &NOHEAD=NO,             Print Trap Heading              *\n               &BUFFDAT=NO,            Buffer Trace Data YES/NO        *\n               &BUFFMAX=1000,          Max Print Lines to Buffer       *\n               &PRINT=NOGEN,           Print Option GEN/NOGEN          *\n               &NAME=                  Forced Name for Trace Point\n.*\n.**********************************************************************\n.* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #TRACE - Process a Trace Point Trap                               *\n.*                                                                    *\n.*     &TYPE = PGME  - Generate Trace Point for Program Entry         *\n.*             PGMX  - Generate Trace Point for Program Exit          *\n.*             SUBX  - Generate Trace Point for Subroutine Entry      *\n.*             SUBX  - Generate Trace Point for Subroutine Exit       *\n.*             TRAP  - Indicate a Trace Point Trap                    *\n.*                                                                    *\n.*     &REGS = A sublist of register values that indicate the         *\n.*             registers to be printed when this trap point is        *\n.*             executed.  They may be specifies as the values         *\n.*             0 through 15, or R0 through R15.                       *\n.*             (e.g. REGS=(0,3,5,R12,R14,R15) or REGS=ALL or          *\n.*             REGS=NONE)                                             *\n.*                                                                    *\n.*      &MSG = Specifies a message to be printed allowinf for         *\n.*             embedded variables in a sublisted string.  Variable    *\n.*             data will be printed according to the type of          *\n.*             variable.  Types C and Z are printes in character      *\n.*             format.  Types F, H and P are printed in decimal       *\n.*             format.  Everything else is printed in hex format.     *\n.*               MSG='This is a message'                              *\n.*               MSG=('The ',COLOR,' HARE ' is ',HEIGHT,' ft. tall.'  *\n.*               MSG=('Show savearea at: ',DSASAVEA)                  *\n.*                                                                    *\n.*     &DATA = Specifies an area in storage that is to be displayed   *\n.*             in hex dump format. An optional title may be specified *\n.*             to identify the area being displayed.  The areas to be *\n.*             displayed must be specified as a sublist within a      *\n.*             sublist.                                               *\n.*               DATA=('My DSA Area',0(R13),DSALNGTH)                 *\n.*               DATA=(('Previous SA in Chain',0(R6),SALNGTH),        *\n.*                     ('Next SA in Chain,',0(R5),(R2))               *\n.*                                                                    *\n.*     &DD   = Specifies the DDNAME of the output dataset on Open     *\n.*             or Close. If not specified one will be dynamically     *\n.*             allocated. Only one sysout dataset can exist per task. *\n.*                                                                    *\n.*    &PRINT = GEN/NOGEN. Defined the PRINT Control for This Macro    *\n.*                                                                    *\n.*  &BUFFDAT = YES/NO. Specifying YES indicates that data is to be    *\n.*             bufferred and written to sysout only at termination.   *\n.*                                                                    *\n.*  &BUFFMAX = Number < 64000. The number of print lines to be        *\n.*             maintained in the buffer above-the-line in a wrap      *\n.*             around table.                                          *\n.*                                                                    *\n.*  &SQUEEZE = YES/NO.  A value of YES indicates that multiple        *\n.*             consequative space characters are to be removed        *\n.*             from the final output before printing.                 *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/04/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS             Copy Globals\n.*\n         LCLC  &TROPN,&TROPNL       Internal Label Names\n         LCLC  &TRDAT,&TRDATL       (Same)\n         LCLC  &TRMSG,&TRMSGL       (Same)\n         LCLC  &TRDDT,&TRDDTL       (Same)\n.*\n         LCLC  &NAM                 Name of Trap From &LBL or &NAME\n         LCLC  &TRPNAM              Name of DSA Trap Point to EX\n         LCLC  &C,&CREGS,&R(16)\n         LCLC  &BYTE1,&BYTE2,&BYTE3 Flag Bytes\n         LCLA  &I,&J,&N\n         LCLB  &BUFF,&SQZE,&NOHD\n         LCLB  &MS,&RG,&DT\n         LCLB  &B                   Bit Flag\n         LCLB  &B1(8),&B2(8),&B3(8) Flag Bytes\n.*\n.** Define Internal Labels\n.*\n&TROPN   SETC  'OPN'.'&SYSNDX'\n&TROPNL  SETC  'OPN'.'&SYSNDX'.'L'\n&TRDAT   SETC  'TRP'.'&SYSNDX'\n&TRDATL  SETC  'TRP'.'&SYSNDX'.'L'\n&TRMSG   SETC  'TRN'.'&SYSNDX'\n&TRMSGL  SETC  'TRN'.'&SYSNDX'.'L'\n&TRDDT   SETC  'TRD'.'&SYSNDX'\n&TRDDTL  SETC  'TRD'.'&SYSNDX'.'L'\n.*\n         PUSH PRINT\n.*\n.** Input Parameter Validation\n.*\n         AIF   (NOT &PTRACE).MEND    -> If TRACE=NO on PGMNTRY\n.*\n         AIF   ('&NAME' EQ '').VALD010\n&NAM     SETC  '&NAME'               NAME= Takes Precedence\n         AGO   .VALD030\n.VALD010 ANOP\n         AIF   ('&LBL' EQ '').VALD020\n&NAM     SETC  '&LBL'\n         AGO   .VALD030\n.VALD020 ANOP\n&NAM     SETC  'TRP'.'&SYSNDX'.'N'   Generated Name\n.VALD030 ANOP\n         AIF   (K'&NAM GT 8).MNOTE5\n.*\n         AIF   ('&PRINT' EQ 'GEN').VALD040\n         AIF   ('&PRINT' NE 'NOGEN').MNOTE7\n.*\n.VALD040 ANOP\n         PRINT &PRINT\n.*\n.VALD050 ANOP\n         AIF   ('&BUFFDAT' EQ 'YES').VALD060\n         AIF   ('&BUFFDAT' NE 'NO').MNOTE6\n.*\n.VALD060 ANOP\n&BUFF    SETB  ('&BUFFDAT' EQ 'YES')\n&SQZE    SETB  ('&SQUEEZE' EQ 'YES')\n&NOHD    SETB  ('&NOHEAD' EQ 'YES')\n&MS      SETB  ('&MSG' NE '')\n&RG      SETB  ('&REGS' NE '' AND '&REGS' NE 'NONE')\n&DT      SETB  ('&DATA' NE '')\n.*\n.*\n         AIF   ('&SQUEEZE' EQ 'YES').VALD070\n         AIF   ('&SQUEEZE' NE 'NO').MNOTE3\n.*\n.** Determine Type of Trap\n.*\n.VALD070 ANOP\n&B1(1)   SETB  0\n&B1(2)   SETB  0\n&B1(3)   SETB  0\n&B1(4)   SETB  0\n&B1(5)   SETB  0\n&B1(6)   SETB  0\n&B1(7)   SETB  0\n&B1(8)   SETB  0\n.*\n&B2(1)   SETB  0\n&B2(2)   SETB  0\n&B2(3)   SETB  0\n&B2(4)   SETB  0\n&B2(5)   SETB  0\n&B2(6)   SETB  0\n&B2(7)   SETB  0\n&B2(8)   SETB  0\n.*\n.** Primary Entry and Exit Protocals\n.*\n         AIF   ('&TYPE' NE 'TRAP').VALD090\n&TRPNAM  SETC  'DSATRTRC'\n&B1(1)   SETB  1\n         AGO   .VALD999\n.*\n.VALD090 ANOP\n         AIF   ('&TYPE' NE 'PGME').VALD100\n&TRPNAM  SETC  'DSATRPGM'\n&B1(2)   SETB  1\n&B2(1)   SETB  1\n         AGO   .VALD999\n.*\n.VALD100 ANOP\n         AIF   ('&TYPE' NE 'PGMX').VALD110\n&TRPNAM  SETC  'DSATRPGM'\n&B1(3)   SETB  1\n         AGO   .VALD999\n.*\n.VALD110 ANOP\n         AIF   ('&TYPE' NE 'SUBE').VALD120\n&TRPNAM  SETC  'DSATRSUB'\n&B1(4)   SETB  1\n         AGO   .VALD999\n.*\n.VALD120 ANOP\n         AIF   ('&TYPE' NE 'SUBX').VALD130\n&TRPNAM  SETC  'DSATRSUB'\n&B1(5)   SETB  1\n         AGO   .VALD999\n.*\n.** Remember Type of Protocol\n.*\n.VALD130 ANOP\n         AIF   ('&TYPE' NE 'SVCE').VALD140\n&TRPNAM  SETC  'DSATRPGM'\n&B1(2)   SETB  1\n&B2(2)   SETB  1\n         AGO   .VALD999\n.*\n.VALD140 ANOP\n         AIF   ('&TYPE' NE 'SVCX').VALD150\n&TRPNAM  SETC  'DSATRPGM'\n&B1(3)   SETB  1\n         AGO   .VALD999\n.*\n.VALD150 ANOP\n         AIF   ('&TYPE' NE 'ESTE').VALD160\n&TRPNAM  SETC  'DSATRPGM'\n&B1(2)   SETB  1\n&B2(3)   SETB  1\n         AGO   .VALD999\n.*\n.VALD160 ANOP\n         AIF   ('&TYPE' NE 'ESTX').VALD170\n&TRPNAM  SETC  'DSATRPGM'\n&B1(3)   SETB  1\n         AGO   .VALD999\n.*\n.VALD170 ANOP\n         AIF   ('&TYPE' NE 'SRBE').VALD180\n&TRPNAM  SETC  'DSATRPGM'\n&B1(2)   SETB  1\n&B2(4)   SETB  1\n         AGO   .VALD999\n.*\n.VALD180 ANOP\n         AIF   ('&TYPE' NE 'SRBX').VALD190\n&TRPNAM  SETC  'DSATRPGM'\n&B1(3)   SETB  1\n         AGO   .VALD999\n.*\n.VALD190 ANOP\n         AIF   ('&TYPE' NE 'PCE').VALD200\n&TRPNAM  SETC  'DSATRPGM'\n&B1(2)   SETB  1\n&B2(5)   SETB  1\n         AGO   .VALD999\n.*\n.VALD200 ANOP\n         AIF   ('&TYPE' NE 'PCX').MNOTE10\n&TRPNAM  SETC  'DSATRPGM'\n&B1(3)   SETB  1\n         AGO   .VALD999\n.*\n.** Build Flag Byte Values\n.*\n.VALD999 ANOP\n&BYTE1   SETC '&B1(1).&B1(2).&B1(3).&B1(4).&B1(5).&B1(6).&B1(7).&B1(8)'\n&BYTE2   SETC '&B2(1).&B2(2).&B2(3).&B2(4).&B2(5).&B2(6).&B2(7).&B2(8)'\n.*\n.*--------------------------------------------------------------------*\n.** Build Data Area RSECT For This CSECT on PGMNTRY\n.*--------------------------------------------------------------------*\n.*\n.BILD000 ANOP\n         AIF   ('&TYPE' NE 'PGME').TRAP010\n.*\n.** Generate Data Segment For First Trap of Each RSECT\n.*\n&DASECT  RSECT ,                    Move to Data RSECT\n&DASECT  AMODE 31\n&DASECT  RMODE ANY\n&TROPN   DS    0X               -*- Trap Data Descriptor\n         DC    CL8'&NAM'            Trap Name\n         DC    B'&BYTE1'            Flag Byte - Indicate Open Entry\n         DC    B'0'                 Flag Byte\n         DC    AL2(&TROPNL)         Length of Trap Area\n         DC    AL4(&DASECT)         Address of TRPDSECT Area\n         DC    AL2(&NAM-&SYSECT)    Offset to This Trap\n         DC    AL2(0)               Reserved - REGS in TRAP Entry\n*                               -*- Open Segment\n         DC    AL1(&BUFF*4)         Flag Byte - Indicate Buffering\n         DC    B'&BYTE2'            Flag Byte\n         DC    AL2(0&BUFFMAX)       Max Lines to Buffer\n         DC    CL8'&DD '            DDNAME for Sysout\n         DC    CL8'&SYSECT '        RSECT Name\n&TROPNL  EQU   *-&TROPN             Length of Trace Trap Data\n&SYSECT  RSECT ,                    Restore Currect RSECT\n.BILD020 ANOP\n.*\n.*--------------------------------------------------------------------*\n.** Process a Generic TRAP Request\n.*--------------------------------------------------------------------*\n.*\n.TRAP010 ANOP\n&NAM     DS    0H\n         STMG  R14,R1,DSASAVER      Save Volital Registers\n         BAS   R1,*+8               Branch Around Data R1=Parm\n         DC    AL4(&TRDAT)          ..Address of Trap Description\n         L     R15,DSATRCEP         Get Trap Processor Address\n         EX    0,&TRPNAM            Call Trap Processor\n         LMG   R14,R1,DSASAVER      Load Volital Registers\n.*\n.** Generate Trap Data Description\n.*\n&BYTE3   SETC  '&SQZE&NOHD.00&RG&MS&DT.0'\n.*\n&DASECT  RSECT ,                    Move to Data RSECT\n&TRDAT   DS    0H               -*- Trap Data Descriptor\n         DC    CL8'&NAM'            Trap Name\n         DC    BL1'&BYTE1'          Flag Byte 1\n         DC    BL1'&BYTE3'          Flag Byte 2\n         DC    AL2(&TRDATL)         Length of Trap Area\n         DC    AL4(&DASECT)         Address of TRPDSECT Area\n         DC    AL2(&NAM-&SYSECT)    Offset to This Trap\n.*\n.*--------------------------------------------------------------------*\n.** Process Registers\n.*--------------------------------------------------------------------*\n.*\n.REG000  ANOP\n         AIF   (T'&REGS EQ 'O').REG010\n         AIF   ('&REGS' EQ 'NONE').REG010\n         AIF   ('&REGS' NE 'ALL').REG020\n         DC    XL2'FFFF'            Print All Registers\n         AGO   .MSG010\n.REG010  ANOP\n         DC    XL2'0000'            Print No Registers\n         AGO   .MSG010\n.REG020  ANOP\n&N       SETA  1                    Initialize Reg Array With Zeros\n.REG030  ANOP                       (Same)\n&R(&N)   SETC  '0'                  (Same)\n&N       SETA  &N+1                 (Same)\n         AIF   (&N LT 17).REG030    (Same)\n.*\n&N       SETA  1                         Extract Registers to Show\n.REG040  ANOP                            (Same)\n         AIF   ('&REGS' EQ '').REG060    (Same)\n&C       SETC  '&REGS(&N)'               (Same)\n         AIF   ('&C'(1,1) NE 'R').REG050 (Same)\n&C       SETC  '&C'(2,K'&C-1)            Strip R From Reg Notation\n.REG050  ANOP\n&J       SETA  &C\n&R(&J+1) SETC  '1'\n&N       SETA  &N+1\n         AIF   ('&REGS(&N)' EQ '').REG060 Check For End\n         AIF   (&N LT 17).REG040          -> Loop\n.REG060  ANOP\n&C       SETC  '&R(1)&R(2)&R(3)&R(4)&R(5)&R(6)&R(7)&R(8)'\n         DC    B'&C'                Registers to Print 0-7\n&C       SETC  '&R(9)&R(10)&R(11)&R(12)&R(13)&R(14)&R(15)&R(16)'\n         DC    B'&C'                Registers to Print 8-15\n.*\n.*--------------------------------------------------------------------*\n.** Process the MSG= Parameter\n.*--------------------------------------------------------------------*\n.*\n.MSG010  ANOP\n         AIF   (T'&MSG EQ 'O').DAT000\n&J       SETA  N'&MSG               Get Count of Entries in Sublist\n&TRMSG   DS    0H                   Begin Message Construct\n         AIF   (&J NE 1).MSG020            -> Sublist Indicated\n         AIF   ('&MSG'(1,1) NE '''').MSG020   Not Quoted\n         DC    YL2(&TRMSGL)         Set Length of Message\n         DC    C&MSG                Store Message\n         AGO   .MSG999              -> Simple Version\n.*\n.** Sublist Indicated\n.*\n.MSG020  ANOP\n         DC    YL2(&TRMSGL)         Set Length of Message\n&N       SETA  1                    Beginning of Sublist\n.*\n.** Process Text Data\n.*\n.MSG030  ANOP\n         AIF   (&N GT &J).MSG999    -> Done\n         AIF   ('&MSG(&N)'(1,1) NE '''').MSG100\n         DC    C&MSG(&N)            Store Message\n&I       SETA  K'&MSG(&N)/2*2\n         AIF   (K'&MSG(&N) EQ &I).MSG040  An Even Character Count?\n         DC    X'FD'                Add Filler Byte\n.MSG040  ANOP\n&N       SETA  &N+1                 (Same)\n         AGO   .MSG030\n.*\n.** Process Imbedded Variable\n.*\n.MSG100  ANOP\n         SLAG  0,0,&MSG(&N)         Extract B+DL+DH SCON Value\n         ORG   *-6                  And Overlay\n         DC    X'FE'                Indicate Imbedded Variable\n         AIF   (T'&MSG(&N) NE 'C').MSG110\n         DC    C'C'                 Indicate Character\n         AGO   .MSG160\n.MSG110  ANOP\n         AIF   (T'&MSG(&N) NE 'Z').MSG120\n         DC    C'Z'                 Indicate Zoned\n         AGO   .MSG160\n.MSG120  ANOP\n         AIF   (T'&MSG(&N) NE 'F').MSG130\n         DC    C'F'                 Indicate Fullword\n         AGO   .MSG160\n.MSG130  ANOP\n         AIF   (T'&MSG(&N) NE 'H').MSG140\n         DC    C'H'                 Indicate Halfword\n         AGO   .MSG160\n.MSG140  ANOP\n         AIF   (T'&MSG(&N) NE 'P').MSG150\n         DC    C'P'                 Indicate Packed\n         AGO   .MSG160\n.MSG150  ANOP\n         DC    C'X'                 Indicate Hexadecmil\n.MSG160  ANOP\n         DS    SL2(&MSG(&N))        Store Address of Data SCON\n         DS    BL1'0'               Store DH Part of SCON\n         DC    YL1(L'&MSG(&N))      Store Length of Data to Print\n.*\n&N       SETA  &N+1\n         AGO   .MSG030\n.*\n.MSG999  ANOP\n         DS    0H                   End On Halfword\n&TRMSGL  EQU   *-&TRMSG\n.*\n.*--------------------------------------------------------------------*\n.** Process DATA= Parameter\n.*--------------------------------------------------------------------*\n.*\n.DAT000  ANOP\n         AIF   ('&DATA' EQ '').DAT999\n         AIF   ('&DATA'(1,1) NE '(').MNOTE8\n         AIF   ('&DATA'(1,2) EQ '((').DAT020\n.*\n.** Process Single Entry - DATA=('Heading',DAT1,L'DATA1)\n.*\n.DAT010  ANOP\n&TRDDT   DS    0H                   Begin Data Construct\n         DC    YL2(&TRDDTL)         Set Length of DATA\n         DC    AL2(1)               Count of Repitations\n.*\n&C       SETC  '&DATA(2)'           Assume Not Indirect\n&B1(1)   SETB  ('&DATA(3)'(1,1) EQ '(')    - Length in Register\n&B1(2)   SETB  ('&DATA(2)'(1,1) EQ '!')    - Redirection 64-Bit\n&B1(3)   SETB  ('&DATA(2)'(1,1) EQ '?')    - Redirection 31-Bit\n&B1(4)   SETB  ('&DATA(2)'(1,1) EQ '%')    - Redirection 24-Bit\n&B1(5)   SETB  ('&DATA(2)'(1,1) EQ '@')    - Real Address\n&B       SETB  (&B1(2) OR &B1(3) OR &B1(4) OR &B1(5))\n         AIF   (NOT &B).DAT015\n&K       SETA  K'&C-1\n&C       SETC  '&C'(2,&K)\n.*\n.DAT015  ANOP\n.*\n.*\n.*\n         AIF   (K'&DATA(1) NE 0).DAT016\n&J       SETA  1                    No Heading\n         AGO   .DAT018\n.DAT016  ANOP\n&J       SETA  (K'&DATA(1)-2)/2*2+1 Force to Odd Number\n.DAT018  ANOP\n.*\n         SLAG  0,0,&C               Get 3-Byte SCON - DL+DH Format\n         ORG   *-6\n         DC    B'&B1(1)&B1(2)&B1(3)&B1(4)&B1(5).000'\n         DC    AL1(&J)              Length of Heading\n         DS    AL3                  Space for SCON\n         DC    YL2(&DATA(3))        Length of Data to Print\n&C       SETC  '&DATA(1)'           Generate Heading Length\n         AIF   (&J EQ 1).DAT019\n         DC    CL&J&C               Generate Heading\n         AGO   .DAT019A\n.DAT019  ANOP\n         DC    C' '                 Generate Null Heading\n.DAT019A ANOP\n         AGO   .DAT990              -> Exit\n.*\n.** Print Multiple Entries - DATA=(('DAT1',A,L'A),('DAT2',B,12))\n.*\n.DAT020  ANOP\n&I       SETA  1\n&N       SETA  N'&DATA              Number of Triplets\n.DAT030  ANOP\n         AIF   (N'&DATA(&I) NE 3).MNOTE8\n&I       SETA  &I+1                 Loop Through Triplets\n         AIF   (&I LE &N).DAT030\n.*\n&TRDDT   DS    0H                   Begin Data Construct\n         DC    YL2(&TRDDTL)         Set Length of DATA\n.*&J     SETA  N'&DATA(1)\n         DC    AL2(&N)              Count of Repititions - Triplets\n.*\n.*\n.*\n&I       SETA  1                    Loop Through Triplets\n.*&N     SETA  N'&DATA\n.DAT040  ANOP\n&C       SETC  '&DATA(&I,2)'        Assume Not Indirect\n&B1(1)   SETB  ('&DATA(&I,3)'(1,1) EQ '(')  - Length in Register\n&B1(2)   SETB  ('&DATA(&I,2)'(1,1) EQ '!')  - Redirection 64-Bit\n&B1(3)   SETB  ('&DATA(&I,2)'(1,1) EQ '?')  - Redirection 31-Bit\n&B1(4)   SETB  ('&DATA(&I,2)'(1,1) EQ '%')  - Redirection 24-Bit\n&B1(5)   SETB  ('&DATA(&I,2)'(1,1) EQ '@')  - Real Address\n&B       SETB  (&B1(2) OR &B1(3) OR &B1(4) OR &B1(5))\n         AIF   (NOT &B).DAT045\n&K       SETA  K'&C-1\n&C       SETC  '&C'(2,&K)\n.*\n.DAT045  ANOP\n         AIF   (K'&DATA(&I,1) NE 0).DAT050\n&J       SETA  1                    No Heading\n         AGO   .DAT060\n.DAT050  ANOP\n&J       SETA  (K'&DATA(&I,1)-2)/2*2+1  Force to Odd Number\n.*\n.DAT060  ANOP\n         SLAG  0,0,&C               Get 3-Byte SCON - DL+DH Format\n         ORG   *-6\n         DC    B'&B1(1)&B1(2)&B1(3)&B1(4)&B1(5).000'\n         DC    AL1(&J)              Length of Heading\n         DS    AL3                  Space for SCON\n         DC    YL2(&DATA(&I,3))     Length of Data to Print\n&C       SETC  '&DATA(&I,1)'\n         AIF   (&J EQ 1).DAT080\n         DC    CL&J&C               Generate Heading\n         AGO  .DAT080\n.DAT070  ANOP\n         DC    C' '                 Generate Null Heading\n.DAT080  ANOP\n         DS    0H                   End on Halfword\n&I       SETA  &I+1\n         AIF   (&I LE &N).DAT040\n         AGO   .DAT990              -> Exit\n.*\n.DAT990  ANOP\n         DS    0H                   End on Halfword\n&TRDDTL  EQU   *-&TRDDT             Length of Data= Data Area\n.*\n.DAT999  ANOP\n&TRDATL  EQU   *-&TRDAT             Length of Trace Trap Area\n         AGO   .MEND\n.*\n.*--------------------------------------------------------------------*\n.** ERROR MESSAGES\n.*--------------------------------------------------------------------*\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'#TRACE: Either Label or NAME= must be specified.'\n         AGO   .MEND\n.*\n.MNOTE2  ANOP\n         AGO   .MEND\n.*\n.MNOTE3  ANOP\n         MNOTE 8,'#TRACE: SQUEEZE= MUST SPECIFY YES OR NO.'\n         AGO   .MEND\n.*\n.MNOTE4  ANOP\n         MNOTE 8,'#TRACE: TYPE= IS INVALID MUST BE TRAP/OPEN/CLOSE.'\n         AGO   .MEND\n.*\n.MNOTE5  ANOP\n         MNOTE 8,'#TRACE: LABEL LENGTH CANNOT BE GREATER THAN 8.'\n         AGO   .MEND\n.*\n.MNOTE6  ANOP\n         MNOTE 8,'#TRACE: BUFFDAT= MUST SPECIFY YES OR NO.'\n         AGO   .MEND\n.*\n.MNOTE7  ANOP\n         MNOTE 8,'#TRACE: PRINT= Must specify GEN/NOGEN.'\n         AGO   .MEND\n.*\n.MNOTE8  ANOP\n         MNOTE 8,'#TRACE: SYNTAX ERROR in DATA= parameter.'\n         AGO   .MEND\n.*\n.MNOTE10 ANOP\n         MNOTE 8,'#TRACE: TYPE=&TYPE is INVALID.'\n         AGO   .MEND\n.*\n.** End of Macro\n.*\n.MEND    ANOP\n&SYSECT  RSECT ,                    Return to Original RSECT\n         POP   PRINT\n         MEND ,\n./ ADD NAME=#WTO     0100-10050-10050-1200-00088-00088-00000-RHDMAC\n         MACRO\n&LBL     #WTO  &MSG,                   Message Macro Text              *\n               &MSGID=,                Message ID AAA9999X             *\n               &ROUTCDE=,              Routing Codes                   *\n               &SQUEEZE=YES,           Squeeze Out Multiple Blanks     *\n               &PLINE=,                Area to Place Formated Line     *\n               &PRINT=NOGEN            Print Option GEN/NOGEN\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #WTO - Issue a Message to the Console or Log                      *\n.*                                                                    *\n.*                                                                    *\n.*      &MSG = Specifies a message to be printed allowinf for         *\n.*             embedded variables in a sublisted string.  Variable    *\n.*             data will be printed according to the type of          *\n.*             variable.  Types C and Z are printes in character      *\n.*             format.  Types F, H and P are printed in decimal       *\n.*             format.  Everything else is printed in hex format.     *\n.*                   'This is a message'                              *\n.*                   ('The ',COLOR,' HARE ' is ',HEIGHT,' ft. tall.'  *\n.*                   ('Show savearea at: ',DSASAVEA)                  *\n.*                                                                    *\n.*    &MSGID = Specifies a standard ZOS Message ID to identify the    *\n.*             message to other products or components.  Should be    *\n.*             unique and is useful for interfacing with automation   *\n.*             products.  The form is: AAA9999X                       *\n.*                                                                    *\n.*             Where: AAA  - is a 3 Char Product Identifier           *\n.*                    9999 - is a 4 Digit Message Number              *\n.*                    X    - is an Action Code: I - Informational     *\n.*                                              A - Action Required   *\n.*                                              E - Error Condition   *\n.*                                                                    *\n.*                                                                    *\n.*  &ROUTCDE = WTO/WTOR Routing Codes                                 *\n.*                                                                    *\n.*  &SQUEEZE = YES/NO.  A value of YES indicates that multiple        *\n.*             consequative space characters are to be removed        *\n.*             from the final output before printing.                 *\n.*                                                                    *\n.*    &PRINT = GEN/NOGEN. Defined the PRINT Control for This Macro    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Issue Call to #MSGI Common Message Macro\n.*\n&LBL     #MSGI WTO,                    Indicate Invoked by #WTO        *\n               &MSG,                   Message Macro Text              *\n               MSGID=&MSGID,           Message ID AAA9999X             *\n               DD=,                    (Unused) DDNAME for SYSOUT      *\n               SQUEEZE=&SQUEEZE,       Squeeze Out Multiple Blanks     *\n               ROUTCDE=&ROUTCDE,       Routing Codes                   *\n               RALEN=,                 (Unused) Reply Area Length      *\n               RAADR=&PLINE,           Place to Put Formatted Line     *\n               RAECB=,                 (Unused) Reply ECB Address      *\n               PRINT=&PRINT            Print Option GEN/NOGEN\n.*\n         MEND ,\n./ ADD NAME=#WTOR    0100-10050-10050-1200-00093-00093-00000-RHDMAC\n         MACRO\n&LBL     #WTOR &MSG,                   Message Macro Text              *\n               &MSGID=,                Message ID AAA9999X             *\n               &REPLY=,                Reply Area Address              *\n               &ECB=,                  Reply ECB Address               *\n               &SQUEEZE=YES,           Squeeze Out Multiple Blanks     *\n               &PRINT=NOGEN            Print Option GEN/NOGEN\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** #WTOR - Issue a Message to the Console or Log                     *\n.*                                                                    *\n.*                                                                    *\n.*      &MSG = Specifies a message to be printed allowinf for         *\n.*             embedded variables in a sublisted string.  Variable    *\n.*             data will be printed according to the type of          *\n.*             variable.  Types C and Z are printes in character      *\n.*             format.  Types F, H and P are printed in decimal       *\n.*             format.  Everything else is printed in hex format.     *\n.*                   'This is a message'                              *\n.*                   ('The ',COLOR,' HARE ' is ',HEIGHT,' ft. tall.'  *\n.*                   ('Show savearea at: ',DSASAVEA)                  *\n.*                                                                    *\n.*    &MSGID = Specifies a standard ZOS Message ID to identify the    *\n.*             message to other products or components.  Should be    *\n.*             unique and is useful for interfacing with automation   *\n.*             products.  The form is: AAA9999X                       *\n.*                                                                    *\n.*             Where: AAA  - is a 3 Char Product Identifier           *\n.*                    9999 - is a 4 Digit Message Number              *\n.*                    X    - is an Action Code: I - Informational     *\n.*                                              A - Action Required   *\n.*                                              E - Error Condition   *\n.*                                                                    *\n.*  &ROUTCDE = WTO/WTOR Routing Codes                                 *\n.*                                                                    *\n.*    &RALEN = Reply Area Length                                      *\n.*                                                                    *\n.*    &RAADR = Reply Area Address                                     *\n.*                                                                    *\n.*    &RAECB = Reply ECB Address                                      *\n.*                                                                    *\n.*  &SQUEEZE = YES/NO.  A value of YES indicates that multiple        *\n.*             consequative space characters are to be removed        *\n.*             from the final output before printing.                 *\n.*                                                                    *\n.*    &PRINT = GEN/NOGEN. Defined the PRINT Control for This Macro    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Issue Call to #MSGI Common Message Macro\n.*\n&LBL     #MSGI WTOR,                   Indicate Invoked by #WTOR       *\n               &MSG,                   Message Macro Text              *\n               MSGID=&MSGID,           Message ID AAA9999X             *\n               DD=,                    (Unused) DDNAME for SYSOUT      *\n               SQUEEZE=&SQUEEZE,       Squeeze Out Multiple Blanks     *\n               ROUTCDE=,               Routing Codes                   *\n               RALEN=L'&REPLY,         Reply Area Length               *\n               RAADR=&REPLY,           Reply Area Address              *\n               RAECB=&ECB,             Reply ECB Address               *\n               PRINT=&PRINT            Print Option GEN/NOGEN\n.*\n         MEND ,\n./ ADD NAME=ATBBEG   0100-10050-10050-1200-00058-00058-00000-RHDMAC\n         MACRO ,\n         ATBBEG ,\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** Beginning of Above-The-Bar Storage Area - (ATB)                   *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and local Variables\n.*\n         COPY  PGMGBLAS             Copy Gglobals\n.*\n.** Macro Code\n.*\n&DSATB   LOCTR ,                    Reestablish the ATB DSECT\n.*\n.** Do Other MF=L Stuff Here\n.*\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'ATBBEG: ?'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=ATBDSECT 0100-10050-10050-1200-00057-00057-00000-RHDMAC\n         MACRO ,\n         ATBDSECT ,                 Define ATB Prefix\n.**********************************************************************\n.* Copyright (c) 2008 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** Beginning of Above-Thr-Bar Storage Area - (ATB)                   *\n.*                                                                    *\n.*    This DSECT provides a mapping of the ATB prefix generated via   *\n.*  the PGMNTRY macro.  This program management system uses what is   *\n.*  essentially an Upstack, which says any called program will use    *\n.*  storage or allocate their ATB after the last ATB address of the   *\n.*  calling program.                                                  *\n.*    Each program called in succession will have their own ATB       *\n.*  prefix area. The pointer to this area, length and residual        *\n.*  length of available ATB are maintained in DSA mapped by DSADSECT. *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\nATB      DSECT ,                    Establish The DSECT\nATBEYECT DS    CL8                  Eye Catcher\nATBCSECT DS    CL8                  Owning Csect name\nATBSIZE  DS    AD                   Size of This Programs ATB\n         DS    5D                   (Reserved)\n*\n         ORG   ATB+((*-ATB+15)/16*16) End on 16-Byte Boundry\nATBPGMDT DS    0D                   Start of Program Data\nATBPFXLN EQU   *-ATB                Length of ATB Prefix\n.*\n         MEND  ,\n./ ADD NAME=ATBEND   0100-10050-10050-1200-00071-00071-00000-RHDMAC\n         MACRO ,\n         ATBEND\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** End of Above-The-Bar Storage Area - (ATB)                         *\n.*                                                                    *\n.*    Do Housekeeping and Cleanup for the ATB                         *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS             Copy Gglobals\n.*\n         LCLA  &I,&J                Local Variables\n         LCLC  &ATBLEN              Length of ATB\n         LCLC  &OVCHK               Overlay Ckeck Variable\n         LCLC  &ENDCT               Ending Eye Catcher\n.*\n&ATBLEN  SETC  '&LCATB'.'L'         Set Label Small Footprint\n&OVCHK   SETC  '&LCATB'.'_OVCHK'    Set Label for Overlay Check\n&ENDCT   SETC  '&LCATB'.'_ENDCT'    Set Label For Ending Eye Catcher\n*\n** Define End of ATB\n*\n&LCATE   LOCTR ,                    Position Us at ATB End\n         ORG   &DSATB+((*-&DSATB+255)/256*256)  End on 256-Byte Bndry\n         ORG   *-16\n&OVCHK   DS    D                    (Reserved)\n         DS    F                    Address of ATB - Overlay Prot\n&ENDCT   DS    CL4                  Ending EyeCatcher\n&ATBLEN  EQU   *-&DSATB             Get Length as Equate\n*\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'DSAEND: ..'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=CONBEG   0100-10050-10050-1200-00061-00061-00000-RHDMAC\n         MACRO ,\n         CONBEG ,\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** CONBEG - Define Beginning of Constant Area for Baseless Programs  *\n.*                                                                    *\n.*    This macro established a seperately addressabile area for       *\n.*  for constants literals, and MF=L constructs. It also provides     *\n.*  a common area that can be easilty modified without having to      *\n.*  modify actual program code later.                                 *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS             Copy Gglobals\n.*\n         LCLC  &C                   Local Variables\n         LCLA  &I,&J                (Same)\n*\n** Switch to the Constant Location Counter\n*\n&LCCON   LOCTR ,                    Put Constants in Constant Area\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'DSAEND: ..'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=CONEND   0100-10050-10050-1200-00067-00067-00000-RHDMAC\n         MACRO ,\n         CONEND ,\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** CONEND - Define End of Constant Area for Baseless Programs        *\n.*                                                                    *\n.*    This macro established a seperately addressabile area for       *\n.*  for constants literals, and MF=L constructs. It also provides     *\n.*  a common area that can be easilty modified without having to      *\n.*  modify actual program code later.                                 *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS             Copy Gglobals\n.*\n         LCLC  &C                   Local Variables\n         LCLA  &I,&J                (Same)\n.*\n.** Switch to the Constant Location Counter\n.*\n&LCCON   LOCTR ,                    Put Constants in Constant Area\n         LTORG ,                    Generate Any Undeposited Literals\n*\n&LCTRC   LOCTR ,                        Get Last LOCTR for CSECT\n         ORG &CASECT+(*-&CASECT+255)/256*256\n         DS  0H\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'DSAEND: ..'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=DSABEG   0100-10050-10050-1200-00079-00079-00000-RHDMAC\n         MACRO ,\n         DSABEG ,\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** Beginning of Dynamic Storage Area - (DSA)                         *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.* 10/04/08 R.Harper  M000 Changed to support DSADSECT                *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and local Variables\n.*\n         COPY  PGMGBLAS             Copy Gglobals\n.*\n         LCLA  &I,&K\n         LCLC  &S\n.*\n.** Macro Code\n.*\n.DSA100  ANOP\n*\n** Define Subroutine Saveareas\n*\n.DSA200  ANOP\n&LCDSA   LOCTR ,                    Reestablish the DSA DSECT\n*\n         AIF   (&SUBH EQ 0).MEND    Any Subroutines Defined?\n&I       SETA  1                    Get Beginning Count\n.DSA210  ANOP\n         AIF   ('&SUBN(&I)' EQ '').MEND\n&S       SETC  '$&SUBN(&I)'         Get Name of Subroutine\n&S       DS    AD                   Doubleword Savearea\n         AIF   (&SUBC(&I) EQ 0).DSA220\n&K       SETA  &SUBC(&I)            Get Register Count Saved\n         DS    &K.AD                Space for Saved Registers\n.DSA220  ANOP\n&I       SETA  &I+1\n         AGO   .DSA210\n*\n** Do Other MF=L Stuff Here\n*\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'DSABEG: ?'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=DSADSECT 0100-10050-10050-1200-00136-00136-00000-RHDMAC\n         MACRO ,\n         DSADSECT ,                 Define DSA Prefix\n.**********************************************************************\n.* Copyright (c) 2008 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** Beginning of Dynamic Storage area - (DSA)                         *\n.*                                                                    *\n.*    This DSECT provides a mapping of the DSA prefix generated via   *\n.*  the PGMNTRY macro.  This program management system uses what is   *\n.*  essentially an Upstack, which says any called program will use    *\n.*  storage or allocate their DSA after the last DSA address of the   *\n.*  calling program.                                                  *\n.*    Each program called in succession will have their own DSA       *\n.*  prefix area, all tied togwther by the savearea backward and       *\n.*  forward pointers.                                                 *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 10/04/08 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Define Standard z/OS Savearea\n.*\nDSA      DSECT ,                    Establish The DSECT\nDSASAVEA DS    18F                  Standard MVS Sarearea\n         ORG   DSASAVEA             Reset location Counter\nDSAEYECT DS    CL3'DSA'             ..Word 0/EyeCatcher - DSA Upstk ID\nDSASVC#  DS    AL1                  ..Type of Traces Indicator\nDSASVNOP EQU   X'00'                  ..Traces Not in Effect\nDSASVBRE EQU   X'01'                  ..Branch Entry Traces in Effect\nDSASVSVC EQU   X'02'                  ..SVC Traces in Effect\nDSASVTRP EQU   X'03'                  ..TRAP2 Traces in Effect\n*\nDSASVBCK DS    F                    ..Backward Pointer\nDSASVFWD DS    F                    ..Forward Pointer\nDSASVR14 DS    F                    ..Return Address\nDSASVR15 DS    F                    ..Entry Point/Return Code\nDSASVR0  DS    F                    ..Input Param/Reason Code\nDSASVR1  DS    F                    ..Input Param\n         ORG   ,                    Reset Location Counter\n*\nDSADSAID DS    CL8              Identify Our Savearea Type\nDSASTKAD DS    A                    Pointer to Stack Entry - If F1SA\nDSARETRY DS    F                    Retry Address if PGMNTRY ESTAE=YES\n*\n** Define Storage Area for Managing the DSA Upstack\n*\nDSAFLAG1 DS    B                    Flag Byte\nDSAOWNER EQU   X'80'                ..This Program Getmained DSA\nDSAATBOW EQU   X'40'                ..This Program Acquired  ATB\nDSAATBUS EQU   X'20'                ..This Program Uses ATB Storage\n         DS    BL3                  (Reserved)\nDSARESID DS    F                    Residual Storage in This Block\nDSALENTH DS    F                    Length of Getmained Area\nDSALNGTH DS    F                    Length of Our Area Used\n*\n         IARV64 MF=(L,DSAV64)       MF=L For IARV64\nDSAATBAD DS    AD                   ATB Storage if 64-Bit Main Pgm\nDSAATBPC DS    AD                   Page Count for ATB Storage Freemain\nDSAATBSZ DS    AD                   Size of ATB Used by This Program\nDSAATBRS DS    AD                   Residual ATB Storage Available\nDSAATBUT DS    AD                   ATB User Token\n         DS   3D                    (Reserved)\n*\nDSA$RC   DS    F                    Program Return Code\nDSA$RS   DS    F                    Program Reason Code\n*\nDSAPLIST DS    0F                   Call Parameter List Area\nDSASAVER DS   4D                    Trap Default Savearea IMP=BASR\n*\nDSAWORKD DS    D                    General Purpose Work Areas\nDSAWORKF DS    F                    (Same)\nDSAWORKH DS    H                    (Same)\nDSAWKCL9 DS    CL9                  (Same)\n*\nDSASVCNO DS    X                    RDHTRSVC SVC Number-IMP=SVC/TRAP2\n*\n** Define Propogated Storage Area\n*\n*    Propogated Storage is passed from the Calling Program to Sub-Pgms\n*  At the same labels within the PGMNTRY Macro.  When a program is\n*  called the PGMNTRY macro will copy the DSAPROPA area from the\n*  calling program into the DSAPROPA of the called program.  This\n*  supports the traces, and allows another means to pass parameters\n*  from one program to another.\n*\nDSAPROPA DS    0F                   Begin Propogated Storage\nDSATRCEP DS    F                    EP for RDHTRACE for BASR Traces\n*\nDSATRAPS DS    0XL8                 Set Trap Trace Entry Points\nDSATRPGM DS    H                    ..Trap for PGMNTRY/PGMEXIT\nDSATRSUB DS    H                    ..TRAP for SUBNTRY/SUBEXIT\nDSATRTRC DS    H                    ..Generic Trace Point Trap\nDSATRSPM DS    H                    ..Structured Macros Trap (Maybe)\n*\nDSAPROPS DS    0F                   Propogated Storage Addresses\nDSAPROP1 DS    A                    ..Reserved for User Programs\nDSAPROP2 DS    A                    ..Reserved\nDSAPROP3 DS    A                    ..Reserved\nDSAPROP4 DS    A                    ..Reserved\n         DS    6A                   ..Reserved\nDSAPROPL EQU   *-DSAPROPA           Length of Propogated Storage\n*\n         ORG   DSA+((*-DSA+15)/16*16) End on 16-Byte Boundry\nDSAPGMDT DS    0D                   Start of Program Data\nDSAPFXLN EQU   *-DSA                Length of DSA Prefix\n.*\nDSAD     EQU   DSA+4096             Start of 2nd DSA Base\n.*\n         MEND  ,\n./ ADD NAME=DSAEND   0100-10050-10050-1200-00081-00081-00000-RHDMAC\n         MACRO ,\n         DSAEND\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** End of Dynamic Storage Area - (DSA)                               *\n.*                                                                    *\n.*    Do Housekeeping and Cleanup for the DSA                         *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS             Copy Gglobals\n.*\n         LCLA  &I,&J                Local Variables\n         LCLC  &DSALEN              Length of DSA\n         LCLC  &OVCHK               Overlay Ckeck Variable\n         LCLC  &ENDCT               Ending Eye Catcher\n.*\n&DSALEN  SETC  '&LCDSA'.'L'         Set Label Small Footprint\n&OVCHK   SETC  '&LCDSA'.'_OVCHK'    Set Label for Overlay Check\n&ENDCT   SETC  '&LCDSA'.'_ENDCT'    Set Label For Ending Eye Catcher\n*\n** Define End of DSA\n*\n&LCDSE   LOCTR ,                    Position Us at DSA End\n         ORG   &LCDSA+((*-&LCDSA+15)/16*16)  End on 16-Byte Boundry\n         DS    D                    (Reserved)\n&OVCHK   DS    F                    Address of DSA - Overlay Prot\n&ENDCT   DS    CL4                  Ending EyeCatcher\n&DSALEN  EQU   *-&DSDSA             Get Length as Equate\n*\n** Delete Subroutine Saveareas\n*\n         AIF   (&SUBH EQ 0).MEND    Any Subroutines Defined?\n&I       SETA  1                    Get Beginning Count\n&J       SETA  &SUBH                Get Beginning Count\n&SUBH    SETA  0\n.DSA010  ANOP\n         AIF   (&I EQ &J).MEND\n&SUBN(&I) SETC  ''\n&I       SETA  &I+1\n         AGO   .DSA010\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'DSAEND: ..'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=DUCDSECT 0100-10050-10050-1200-00191-00191-00000-RHDMAC\n          MACRO\n&LBL      DUCDSECT ,\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n*                                                                     *\n* DUCDSECT - This macro maps the data areas used by the               *\n*            Dispatchable Unit Control Table (DUCT)                   *\n*                                                                     *\n*   This macro generates dsects for the three data area integral to   *\n* the DUCT.  This includes the DUCT Origin pointed to by control      *\n* register CR2, the DUCT Trap Control Block pointed to by DUCTO       *\n* and the DUCT Trap Save Area.                                        *\n*                                                                     *\n*                                                                     *\n*   DUCTO - DUCT Origin pointed to by CR2                             *\n*                                                                     *\n*       The DUCT Origin is pointed to by Control Register CR2 and     *\n*     exists in DAT(OFF) storage that is not accessable to DAT(ON)    *\n*     programs.  All executing dispatchable units, which includes     *\n*     TCB's and SRB's point to a DUCT provided by the operating       *\n*     system that is unique to that dispatchable unit. Initially      *\n*     the pointer to the Trap Control Block is zero and must be       *\n*     populated before issueing a TRAP2/TRAP4 instruction, else       *\n*     these instruction will result in a S0D3 a Special Operation     *\n*     Exception.                                                      *\n*                                                                     *\n*                                                                     *\n*   DUCCTRCB - The DUCT Trap Control Block                            *\n*                                                                     *\n*       The Trap Control Block is mapped by this DSECT pointed to     *\n*     by a virtual address in DUCTO.  It contains two bit settings    *\n*     that indicate how the PSW and General Registers are to be       *\n*     stored, upon execution of the TRAP2/4 instructions.  It also    *\n*     contains the virtual address pointer to the DUCT Trap Save      *\n*     Area.                                                           *\n*                                                                     *\n*                                                                     *\n*   DUCSAVEA - The DUCT Trap Save Area                                *\n*                                                                     *\n*       The DUCT Trap Save Area is pointed to by the Trap Control     *\n*     Block and is the area where the Operating System stores the     *\n*     PSW and General Registers that were in effect at the time       *\n*     the TRAP2/4 was executed.                                       *\n*                                                                     *\n*                                                                     *\n* DATE     DEVELOPER CNG# COMMENTS                                    *\n* ======== ========= ==== =========================================== *\n* 00/00/00 R.HARPER  M000 MACRO DEVELOPED                             *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n** DUCTO - DUCT origin - Pointed to by Control Register 2\n*\nDUCTO    DSECT ,\nDUCTBAST DS    A                        BASTEO  - Base ASTE Origin Real\nDUCTSFLG DS    B                        Flag Bit\nDUCTSA   EQU   X'80'                    ..Subspace Active Bit\nDUCTSAST DS    AL3                      SSASTEO - Subspace ASTE Origin\n         DS    F                        (Reserved)\nDUCTSASN DS    A                        SSASTESN- Subspace ASTE Seq #\nDUCTDUAL DS    A                        DUALD\nDUCTPSKM DS    Y                        PSW Key Mask\n         DS    B                        (Reserved)\nDUCTPSWK DS    B                        PSW Key Byte\nDUCTKEY  EQU   B'11110000'              ..PSW Key Value\nDUCTRA   EQU   B'00001000'              ..RA - Reduced Authority - BSA\nDUCTP    EQU   X'00000001'              ..Problem State\n         DS    2F                       (Reserved)\n*\nDUCTRT64 DS    0D                       64-Bit Return Address\n         DS    F                        (Same)\nDUCTRTNA DS    A                        31-Bit Return Address\n         DS    F                        (Reserved)\n*\nDUCTTRPC DS    0A                       Trap Control Block Address\n         DS    BL3                      (Same)\nDUCTTFLG DS    B                        Flag Bit\nDUCTE    EQU   X'01'                    ..E - Enable TRAP2/4 Instrs\n         DS    3F                       (Reserved)\nDUCTLNTH EQU   *-DUCTO                  Length of DUCT - 64-Bytes\n*\n*---------------------------------------------------------------------*\n* Trap Control Block - Pointed to By DUCTTRPC                         *\n*---------------------------------------------------------------------*\n*\nDUCCTRCB DSECT ,                        DUCT Trap Control Block\n         DS    B                        (Reserved)\nDUCCFLAG DS    B                        Flag Byte\nDUCCP    EQU   B'00000100'              ..Bit 13 = PSW Control Bit\n*                                         0 - Store  64-Bit PSW\n*                                         1 - Store 128-Bit PSW\nDUCCR    EQU   B'00000010'              ..Bit 14 = GRS Control Bit\n*                                         0 - 32-Bit Registers Saved\n*                                         1 - 64-Bit Registers Saved\n         DS    2F                       (Reserved)\nDUCCSAVA DS    A                        Trap Save Area Address\n         DS    F                        (Reserved)\nDUCCTRPA DS    A                        Trap Program Virtual Address\nDUCCUWD1 DS    A                        User Word 1\nDUCCUWD2 DS    A                        User Word 2\n         ORG   DUCCTRCB+64              (Reserved)\nDUCCTRLN EQU   *-DUCCTRCB               Length of Trap CB - 64-Bytes\n*\n*---------------------------------------------------------------------*\n* Trap Save Area - Status at time of TRAP2/4 Instruction              *\n*---------------------------------------------------------------------*\n*\nDUCSAVEA DSECT ,                        DUCT Save Area\nDUCSFLG1 DS    B                        Flag Byte 1\nDUCS1EX  EQU   B'10000000'              ..TRAP Target of Execute\nDUCS1T4  EQU   B'01000000'              ..TRAP is TRAP4 (Not TRAP2)\nDUCSFLG2 DS    B                        Flag Byte 2\nDUCSILC  EQU   B'00000110'              ..Bits for ILC\n         DS    2B                       (Reserved)\n         DS    F                        (Reserved)\nDUCS4ADR DS    A                        TRAP4 operand Address\nDUCSAR15 DS    A                        Access Register 15 Value\n*\nDUCSPSW  DS    0D                       PSW Value\nDUCSPSW1 DS    A                        ..PSW Word 1\nDUCSPSW2 DS    A                        ..PSW Word 2\nDUCSPSW3 DS    A                        ..PSW Word 3\nDUCSPSW4 DS    A                        ..PSW Word 4\n*\nDUCSREGS DS    0D                       Register Save Areas\nDUCS4R0  DS    A                        4-Byte Register Values\nDUCS4R1  DS    A                        (Same)\nDUCS4R2  DS    A                        (Same)\nDUCS4R3  DS    A                        (Same)\nDUCS4R4  DS    A                        (Same)\nDUCS4R5  DS    A                        (Same)\nDUCS4R6  DS    A                        (Same)\nDUCS4R7  DS    A                        (Same)\nDUCS4R8  DS    A                        (Same)\nDUCS4R9  DS    A                        (Same)\nDUCS4R10 DS    A                        (Same)\nDUCS4R11 DS    A                        (Same)\nDUCS4R12 DS    A                        (Same)\nDUCS4R13 DS    A                        (Same)\nDUCS4R14 DS    A                        (Same)\nDUCS4R15 DS    A                        (Same)\n*\n         ORG   DUCSREGS\nDUCS8R0  DS    D                        8-Byte Register Values\nDUCS8R1  DS    D                        (Same)\nDUCS8R2  DS    D                        (Same)\nDUCS8R3  DS    D                        (Same)\nDUCS8R4  DS    D                        (Same)\nDUCS8R5  DS    D                        (Same)\nDUCS8R6  DS    D                        (Same)\nDUCS8R7  DS    D                        (Same)\nDUCS8R8  DS    D                        (Same)\nDUCS8R9  DS    D                        (Same)\nDUCS8R10 DS    D                        (Same)\nDUCS8R11 DS    D                        (Same)\nDUCS8R12 DS    D                        (Same)\nDUCS8R13 DS    D                        (Same)\nDUCS8R14 DS    D                        (Same)\nDUCS8R15 DS    D                        (Same)\n*\nDUCSUWD1 DS    A                        User Word 1\nDUCSUWD2 DS    A                        User Word 2\nDUCSAVE4 DS    4A                       Access Register Savearea 14-1\n*\n         ORG   DUCSAVEA+256             Reserved Space\nDUCSAVLN EQU   *-DUCSAVEA               Length of DUCT Save Area\n         MEND\n./ ADD NAME=GOSUB    0100-10050-10050-1200-00052-00052-00000-RHDMAC\n         MACRO ,\n&LBL     GOSUB &LOC,&REG=R14\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** GOSUB - Establish Linkage to a Subroutine                         *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS             Copy Gglobals\n.*\n         LCLC  &P                   Local Variables\n.*\n.** Do a Simple Jump and Save\n.*\n         JAS   &REG,&LOC            Link to a Subroutine\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'GOSUB: ..'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=IFNTIOT  0100-10050-10050-1200-00101-00101-00000-RHDMAC\n         MACRO\n&LBL     IFNTIOT &P,&DDNAME=,&DDADDR=\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** IFNTIOT - Determine if the DDNAME is in the TIOT                  *\n.*                                                                    *\n.*    P       - Positional parameter.  NOT - Generates a NE instead   *\n.*              of an EQ condition for subsequent processing.         *\n.*                                                                    *\n.*    DDNAME= - Specifies a character string for the DDNAME to search *\n.*              for in the TIOT.                                      *\n.*                                                                    *\n.*    DDADDR= - Specifies the address of a DDNAME to search for in    *\n.*              the TIOT.  It may be specified as a register (R2)     *\n.*              or as a relocatable address 0(R2) or MYDDNAM.         *\n.*                                                                    *\n.*  Resrtictions:                                                     *\n.*    This macro destroys the contents of Registers R14-R1.           *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&LBL' EQ '').NOLBL\n&LBL     DS    0H\n.NOLBL   ANOP\n.*\n.** Get DDNAME to Search For\n.*\n         AIF   ('&DDNAME' NE '').DDN3\n         AIF   ('&DDADDR' EQ '').MNOTE1\n         AIF   ('&DDADDR(1,1)' NE '(').DDN1\n         LR    R15,&DDADDR(1)       Get Address of DDNAME\n         AGO   .DDN4\n.DDN1    ANOP\n         LA    R14,&DDADDR          Get Address of DDNAME\n.DDN2    ANOP\n         AGO   .DDN4\n.*\n.DDN3    ANOP\n         AIF   ('&DDADDR' NE '').MNOTE2\n         LA    R15,=C'&DDNAME'      Get Address of DDNAME\n.DDN4    ANOP\n.*\n.** Locate DD in TIOT - If it's There\n.*\n         L    R1,PSATOLD-PSA           Get PSATOLD Value - Our TCB\n         L    R1,TCBTIO-TCB(,R1)       Get Address of TIOT\n         XR   R0,R0                         Zero Work Register\n         ICM  R0,B'0001',TIOELNGH-TIOT1(R1) Get Length of This Entry\n         BZ   *+4+6+4+2+4                   -> To LTR - Set Not-Equal\n         CLC  0(8,R15),TIOEDDNM-TIOT1(R1)   Is This Our DD Entry?\n         BE   *+4+2+4+2                     Yes -> Exit\n         ALR  R1,R0                    Point at Next Entry\n         B    *-2-4-6-4-4              -> Loop Back to ICM\n         LTR  R1,R1                    Force Non-Zero/Not Equal\n.*\n         AIF  ('&P' EQ 'NOT').DDN5\n         IF   (EQ)                     If Found - Do Stuff\n         AGO  .MEND\n.DDN5    ANOP\n         IF   (NE)                     If Not Found - Do Stuff\n         AGO  .MEND\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'DDNAME= or DDADDR= must be specified.'\n         AGO .MEND\n.*\n.MNOTE2  ANOP\n         MNOTE 8,'DDNAME= or DDADDR= must be specified, but not both.'\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=LBIN     0100-10050-10050-1200-00136-00136-00000-RHDMAC\n         MACRO\n         LBIN  &R,&D,                                                  *\n               &LAEY=LAE             Instruction to Use in AR Mode\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** LBIN - Load Binary Value Into Register                            *\n.*                                                                    *\n.*    The purpose of this macro is to be used as an inner macro to    *\n.*  load a parameter value into a register.  It does this by using    *\n.*  the length value provided by the assembler to determine how to    *\n.*  load the value.                                                   *\n.*                                                                    *\n.*    LBIN  Rx,(Rx)        Generates LR                               *\n.*    LBIN  Rx,TERM        Generates LAY/LEAY Based on &SYSASCE       *\n.*    LBIN  Rx,(*,TERM)    Generates L/LG Based on L'TERM             *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 04/20/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY PGMGBLAS             Copy Program Management Globals\n.*\n         LCLA  &I,&K,&J            General Numeric Workarea\n         LCLB  &A(8),&B(8)         General Binary Workarea\n.*\n.** Load Value From Register\n.*\n         AIF   ('&D'(1,2) EQ '(*').LBIN040    If Actual Value Desired?\n         AIF   ('&D'(1,1) NE '(').LBIN020     If Not In a Register?\n         AIF   ('&SYSAM64' EQ 'YES').LBIN010  If 64-Bit Amode...\n         LGR   &R,&D(1)                Load Value From Register\n         AGO   .MEND                   ->Done\n.LBIN010 ANOP\n         LGR   &R,&D(1)                Load 64-Bit Value From Register\n         AGO   .MEND                   -> Done\n.*\n.** Load The Address of the Value\n.*\n.LBIN020 ANOP\n         AIF   ('&SYSASCE' EQ 'AR').LBIN030 If in ARMODE\n         LAY   &R,&D                   Load Address of Value\n         AGO   .MEND\n.LBIN030 ANOP\n         &LAEY &R,&D                   Load Address of Value\n         AGO   .MEND\n.*\n.** Load Value Based on Length\n.*\n.LBIN040 ANOP\n         AIF  (L'&D(2) EQ 8).LBIN180\n         AIF  (L'&D(2) EQ 7).LBIN170\n         AIF  (L'&D(2) EQ 6).LBIN160\n         AIF  (L'&D(2) EQ 5).LBIN150\n         AIF  (L'&D(2) EQ 4).LBIN140\n         AIF  (L'&D(2) EQ 3).LBIN130\n         AIF  (L'&D(2) EQ 2).LBIN120\n.LBIN110 ANOP\n         XGR   &R,&R                   Zero 64-Bit Work Register\n         ICY  &R,&D(2)                 Load 1-Byte Value Into Register\n         AGO  .MEND                    -> Done\n.*\n.LBIN120 ANOP\n         XGR   &R,&R                   Zero 64-Bit Work Register\n         ICMY &R,B'0011',&D(2)         Load 2-Byte Value Into Register\n         AGO  .MEND                    -> Done\n.*\n.LBIN130 ANOP\n         XGR   &R,&R                   Zero 64-Bit Work Register\n         ICMY &R,B'0111',&D(2)         Load 3-Byte Value Into Register\n         AGO  .MEND                    -> Done\n.*\n.LBIN140 ANOP\n         XGR   &R,&R                   Zero 64-Bit Work Register\n         ICMY &R,B'1111',&D(2)         Load 4-Byte Value Into Register\n         AGO  .MEND                    -> Done\n.*\n.LBIN150 ANOP\n         XGR   &R,&R                   Zero 64-Bit Work Register\n         ICMH &R,B'1000',&D(2)         Load 5-Byte Value Into Register\n         ICMY &R,B'1111',&D(2)+4       (Same)\n         AGO  .MEND                    -> Done\n.*\n.LBIN160 ANOP\n         XGR   &R,&R                   Zero 64-Bit Work Register\n         ICMH &R,B'0011',&D(2)         Load 6-Byte Value Into Register\n         ICMY &R,B'1111',&D(2)+4       (Same)\n         AGO  .MEND                    -> Done\n.*\n.LBIN170 ANOP\n         XGR   &R,&R                   Zero 64-Bit Work Register\n         ICMH &R,B'0111',&D(2)         Load 7-Byte Value Into Register\n         ICMY &R,B'1111',&D(2)+4       (Same)\n         AGO  .MEND                    -> Done\n.*\n.LBIN180 ANOP\n         ICMH &R,B'1111',&D(2)         Load 8-Byte Value Into Register\n         ICMY &R,B'1111',&D(2)+4       (Same)\n         AGO  .MEND                    -> Done\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'LBIN001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=LSEDSECT 0100-10050-10050-1200-00120-00120-00000-RHDMAC\n         MACRO ,\n         LSEDSECT ,\n.**********************************************************************\n.* Copyright (c) 2008 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** LSEDSECT - Linkage Stack Entry DSECT(s)                           *\n.*                                                                    *\n.*    This dsect is used to define the linkage stack entries.         *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 10/12/08 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\nLSED     DSECT ,                        Linkage Stack Entry Descripter\nLSEDTYPE DS    B                        Type of Stack Entry\nLSEDTUSB EQU   X'80'                    ..Unstack Supression Bit\nLSEDTHDR EQU   B'0001001'               ..Header Entry\nLSEDTTRL EQU   B'0001010'               ..Trailer Entry\nLSEDTBKR EQU   B'0001100'               ..BAKR Entry\nLSEDTPCE EQU   B'0001101'               ..PC Entry\nLSEDSI   DS    X                        Section Identification\nLSEDRFS  DS    H                        Remaining Free Space\nLSEDNES  DS    H                        Next Entry Size\nLSEDRES  DS    H                        (Reserved)\nLSEDLNTH EQU   *-LSED                   Length of Descripter\n*\nLSHD     DSECT ,                        Linkage Stack Header Entry\n         DS    3F                       (Reeserved)\nLSHDPREV DS    A                        Previous Page\nLSHDLNTH EQU   *-LSHD                   Length of Header Entry\n*\nLSEN     DSECT ,                        PC/BAKR Entryes\nLSENGRGS DS    0XL128                   GP Registers in Stack 64-bit\nLSENGR0  DS    D                        ..General Register R0\nLSENGR1  DS    D                        ..General Register R1\nLSENGR2  DS    D                        ..General Register R2\nLSENGR3  DS    D                        ..General Register R3\nLSENGR4  DS    D                        ..General Register R4\nLSENGR5  DS    D                        ..General Register R5\nLSENGR6  DS    D                        ..General Register R6\nLSENGR7  DS    D                        ..General Register R7\nLSENGR8  DS    D                        ..General Register R8\nLSENGR9  DS    D                        ..General Register R9\nLSENGR10 DS    D                        ..General Register R10\nLSENGR11 DS    D                        ..General Register R11\nLSENGR12 DS    D                        ..General Register R12\nLSENGR13 DS    D                        ..General Register R13\nLSENGR14 DS    D                        ..General Register R14\nLSENGR15 DS    D                        ..General Register R15\n*\nLSENSTAT DS    0D                       Other Status Information\nLSENPKM  DS    Y                        ..PSW KEY MASK Keys in CR3\nLSENSASN DS    Y                        ..Secondary ASN in CR3\nLSENEAX  DS    Y                        ..Extended Authorization Ndx\nLSENPASN DS    Y                        ..Primary ASN ub CR4\nLSENPSW1 DS    D                        ..Extended PSW Bits 0-63\nLSENBRAD DS    0D                       ..Branch Address if 64-bit\nLSENSPID DS    F                        ....Called Space ID 64-bit PC\nLSENPCNB DS    F                        ....PC Number idf PC Entry PC\n*                                       ....Branch Address if BAKR\nLSEN31BT EQU   X'80'                    ....31-Bit Mode Indicator\nLSENMODA DS    0D                       ..Modifiable Area\nLSENMOD1 DS    A                        ..Modifiable Area - Word1\nLSENMOD2 DS    A                        ..Modifiable Area - Word2\n         DS    D                        ..(Reserved)\nLSENPSW2 DS    D                        ..Extended PSW Bits 64-127\nLSENSAST DS    F                        ..Secondary ASTEIN\nLSENPAST DS    F                        ..Primary   ASTEIN\n         DS    5D                       ..(Reserved)\n*\nLSENARGS DS    0XL64                    AR Registers in Stack 32-bit\nLSENAR0  DS    F                        ..Access Register R0\nLSENAR1  DS    F                        ..Access Register R1\nLSENAR2  DS    F                        ..Access Register R2\nLSENAR3  DS    F                        ..Access Register R3\nLSENAR4  DS    F                        ..Access Register R4\nLSENAR5  DS    F                        ..Access Register R5\nLSENAR6  DS    F                        ..Access Register R6\nLSENAR7  DS    F                        ..Access Register R7\nLSENAR8  DS    F                        ..Access Register R8\nLSENAR9  DS    F                        ..Access Register R9\nLSENAR10 DS    F                        ..Access Register R10\nLSENAR11 DS    F                        ..Access Register R11\nLSENAR12 DS    F                        ..Access Register R12\nLSENAR13 DS    F                        ..Access Register R13\nLSENAR14 DS    F                        ..Access Register R14\nLSENAR15 DS    F                        ..Access Register R15\n*\nLSENLNTH EQU   *-LSEN                   Length of Entry\n.*\n.MEND    ANOP\n         MEND  ,\n*\n./ ADD NAME=MFREAL   0100-10050-10050-1200-00077-00077-00000-RHDMAC\n         MACRO\n         MFREAL &TO,&FR,&LEN=\n.*\n.**********************************************************************\n.* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** MFREAL - Move Data From Real Storage Address                      *\n.*                                                                    *\n.*    This macro was written to provide an easy mechanism for moving  *\n.*  data to DAT(ON) storage from a Real Storage address that may not  *\n.*  be accessible to DAT(ON) program, as in the DUCT and the ASCEs.   *\n.*    The Length attribute for the &TO area is used as the length     *\n.*  for the move, and must be a multiple of four bytes.  Data is      *\n.*  moved 4-bytes at a time and there is no serialization performed   *\n.*  by this macro.                                                    *\n.*                                                                    *\n.*  Work Registers: R0, R1, R14, R15                                  *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Move Data From Real Storage\n.*\n         AIF ('&LEN' EQ '').L1\n         LBIN R1,&LEN                   Load Length of Data to move\n         SRL R1,2                       Divided By 4 = # Words\n         AGO .L2\n.L1      ANOP\n         LA R1,L'&TO/4                  Words to Move\n.L2      ANOP\n.*\n         LA R14,&TO                     To Address Virtual\n         LA R15,&FR                     From Address Real\n         DO FROM=(R1)                   Loop 16 words\n            LURA R0,R15                 ..Load a Word\n            ST   R0,0(,R14)             ..Store a Word\n            AHI  R14,4                  ..Bump Pointers\n            AHI  R15,4                  ..(Same)\n         ENDDO ,                        -> Loop\n         AGO  .MEND                    -> Done\n.*\n.** Macro Error Conditions\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'MFRL001: '\n         AGO .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=MSGDSECT 0100-10050-10050-1200-00083-00083-00000-RHDMAC\n         MACRO ,\n&LBL     MSGDSECT ,\n.**********************************************************************\n.* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** MSGDSECT - Define Input Data to RDHMSGS                           *\n.*                                                                    *\n.*    This dsect defines the data area generated by the #MSG, #WTO or *\n.*  #WTOR Macros as input to the RDHMSGS message processor. These     *\n.*  macros build this parameter list inline and pass the address to   *\n.*  RDHMSGS via standard call linkage for execution.                  *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\nMSGDSECT DSECT ,\nMSGID    DS    0CL8                 Message ID: AAA9999X\nMSGIPRD  DS    CL3                  ..Product Identifier\nMSGINBR  DS    ZL4                  ..Message Number\nMSGITYP  DS    CL1                  ..Message Type I/E/A\n*\nMSGFLAG1 DS    B                    Flag Byte\nMSG1MSG  EQU   X'80'                ..#MSG Generated This Area\nMSG1WTO  EQU   X'40'                ..#WTO Processing\nMSG1WTOR EQU   X'20'                ..#WTOR Processing\nMSG1SQEZ EQU   X'10'                ..SQUEEZE=YES Specified\nMSG1MID  EQU   X'08'                ..MSGID Not Specified\nMSG1CLOS EQU   X'04'                ..CLOSE Processing Requested\nMSGFLAG2 DS    B                    Flag Byte\n*\nMSGTAREA DS    0H               -*- Type #WTO/#WTOR\nMSGWRCDE DS    H                    #WTO/R - Routing Codes\nMSGWRLEN DS    H                    #WTOR  - Reply Area Length\nMSGWRADR DS    S                    #WTOR  - Reply Area Address\nMSGWRECB DS    S                    #WTOR  - ECB Address\n*\n         ORG   MSGTAREA         -*- Type #MSG\nMSGDDNAM DS    CL8                  #MSG - DDNAME - DFLT(MSGPRINT)\n         ORG   ,\n*\nMSGMSG   DS    0H               -*- Message Area Variable Segment\nMSGMLNTH DS    YL2                  Length of MSG= Segment\nMSGMDATA DS    0H                   Beginning of Message Data\n*\nMSGEVAR  DSECT ,                    Embedded Variable Description\nMSGEVID  DS    X                    Donates Beginning of Variable\nMSGEVVAR EQU   X'FE'                ..Variable indicater\nMSGETYP  DS    C                    Type of Constant to Insert\nMSGETYPC EQU   C'C'                 ..C - Character Data\nMSGETYPZ EQU   C'Z'                 ..Z - Zoned Data\nMSGETYPF EQU   C'F'                 ..F - Fullword Data\nMSGETYPH EQU   C'H'                 ..H - Halfword Data\nMSGETYPP EQU   C'P'                 ..P - Packed Data\nMSGETYPX EQU   C'X'                 ..X - Hexadecmil Data\nMSGEDLEN DS    YL1                  Length of Variable\nMSGESCON DS    SL2                  SCON Address of Data to Insert\nMSGESLEN EQU   *-MSGEVAR            Length of a Variable Area (6)\n         MEND ,\n./ ADD NAME=PGMBASE  0100-10050-10050-1200-00077-00077-00000-RHDMAC\n         MACRO\n&LBL     PGMBASE &BASE=,               Initial Base Address            *\n               &REGS=                  Sublist of Base Registers\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** PGMNTRY - Establish a New CSECT Within a Source Module            *\n.*                                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS                Copy Global Variables\n.*\n.** Build Base Register Code\n.*\n.B000    ANOP\n         AIF   ('&REGS(1)' EQ '').B005  -> If No Base Registers\n         LAY   &REGS(1),&BASE           Initial Base Addressability\n         AIF   ('&REGS(2)' EQ '').B004\n         LGR   &REGS(2),&REGS(1)        2nd Base Register\n         AHI   &REGS(2),4096            (Same)\n         AIF   ('&REGS(3)' EQ '').B003\n         LGR   &REGS(3),&REGS(2)        3rd Base Register\n         AHI   &REGS(3),4096            (Same)\n         AIF   ('&REGS(4)' EQ '').B002\n         LGR   &REGS(4),&REGS(3)        4th Base Register\n         AHI   &REGS(4),4096            (Same)\n         USING &LBL,&REGS(1),&REGS(2),&REGS(3),&REGS(4)\n         AIF   ('&REGS(5)' NE '').MNOTE1\n.B001    ANOP\n         AGO   .B005\n.*\n.B002    ANOP\n         USING &LBL,&REGS(1),&REGS(2),&REGS(3)\n         AGO   .B005\n.B003    ANOP\n         USING &LBL,&REGS(1),&REGS(2)\n         AGO   .B005\n.B004    ANOP\n         USING &LBL,&REGS(1)\n.B005    ANOP\n         AGO   .MEND\n.*\n.** Error Conditions Detected\n.*\n.MNOTE1   MNOTE 8,'PGMBASE: More than four registers specified.'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=PGMESTAE 0100-10050-10050-1200-00180-00180-00000-RHDMAC\n         MACRO ,\n         PGMESTAE ,\n.**********************************************************************\n.* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** PGMESTAE - Inner Macro for PGMNTRY to Generate Basic ESTAE Support*\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 04/08/09 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Global and Local Variables\n.*\n         COPY  PGMGBLAS                Copy Gglobals\n.*\n         LCLC  &EST000,&EST010,&EST020 Program Labels\n         LCLC  &ESTPRM                 (Same)\n.*\n.** Generate Lables Needed for PGMNTRY\n.*\n&EST000  SETC  'P00'.'&SYSNDX'         Build Required Labels\n&EST010  SETC  'P10'.'&SYSNDX'         (Same)\n&EST020  SETC  'P20'.'&SYSNDX'         (Same)\n&ESTPRM  SETC  'PRM'.'&SYSNDX'         (Same)\n.*\n.*====================================================================*\n.** Generate Header Code Within PGMNTRY\n.*====================================================================*\n.*\n.EST100  ANOP\n*\n** Establish Recovery\n*\n         LAY   R2,&EST000              Address of Abend Recovery RTN\n         LAY   R3,DSARETRY             Pass Address of Retry Rtn\n         ESTAEX (2),CT,                Exit Routine Address            *\n               PARAM=(3),              Pass Retry Address              *\n               XCTL=NO,                XCTL Cancels ESTAE Exit         *\n               PURGE=NONE,             Do Not Purge I/O on Abend       *\n               ASYNCH=YES,             Allow ASYNC to Continue         *\n               TERM=YES,               Don't Enter if Task Ccanceled   *\n               MF=(E,&ESTPRM)          Point at List Form\n*\n.*\n.*====================================================================*\n.** Generate Needed Data Areas in DSA LOCTR\n.*====================================================================*\n.*\n.EST200  ANOP\n&LCDSD   LOCTR ,                       Last LOCTR in DSA Area\n*\n&ESTPRM  ESTAEX ,CT,                   Exit Routinr Address, Not Here  *\n               XCTL=NO,                XCTL Cancels ESTAE Exit         *\n               PURGE=NONE,             Do Not Purge I/O on Abend       *\n               ASYNCH=YES,             Allow ASYNC to Continue         *\n               TERM=NO,                Don't Enter if Task Cancelled   *\n               MF=L                    This is List Form\n*\n.*\n.*====================================================================*\n.** Generate ESTAE Processing Code in Last CSECT LOCTR\n.*====================================================================*\n.*\n.EST800  ANOP\n&LCSPG   LOCTR ,                       Generate at End of Code\n***********************************************************************\n*                                                                     *\n*  PGMESTAE - ESTAE to Activate DSARETRY for PGMNTRY Programs         *\n*                                                                     *\n*            This routine gets control in the event of an abend       *\n*          situation. This is some simple basic recovery logic that   *\n*          can be activated by specifying ESTAE=YES on the PGMNTRY    *\n*          macro.                                                     *\n*            If entered as the result of a program check, DSARETRY    *\n*          has a non-zero value recovery will be attempted at that    *\n*          address.  If on entry DSARETRY is zero, percolation will   *\n*          result. Percolation will also result in the event that     *\n*          no SWDA is available.                                      *\n*            A more robust ESTAE recovery routine can be written      *\n*          using the ESTNTRY and ESTEXIT Macros.                      *\n*                                                                     *\n*                                                                     *\n*          Input Parameters:                                          *\n*            R0 - Code, 12 If no SDWA & No Savearea                   *\n*            R1 - Address of SDWA                                     *\n*            R2 - Parameter Value Specified on EXTAEX Macro           *\n*           R13 - Savearea Address                                    *\n*           R14 - Return Address                                      *\n*           R15 - Entry Point Address                                 *\n*                                                                     *\n*          OUTPUT:                                                    *\n*           R15 - RETURN CODE, 0-Continue W/Termination               *\n*                              4-Recovery, R0=Retry Address           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         PUSH  USING                   Save Current Status\n         DROP  ,                       Drop Everything\n*\n&EST000  DS    0H\n         CHI   R0,12                   Is SDWA Available?\n         BZR   R14                     No  -> Percolate\n*\n         STMG  R14,R12,8(R13)          Save Registers\n         LGR   R12,R15                 Load Base Register\n         SRL   R12,1                   Zero Low Bit For 64Bit ESTAEX\n         SLL   R12,1                   (Same)\n         USING &EST000,R12             Establish Addressability\n*\n         LGR   R9,R1                   Get SDWA Address\n         USING SDWA,R9                 And Addressability\n         LGR   R10,R2                  Get DSARETRY Address\n         CLC   0(4,R10),=F'0'          Was a Recovery Rtn Specified?\n         JZ    &EST020                 No  -> Percolate\n*\n** Set Up For Recovery\n*\n&EST010  DS    0H                  -*- Recover From Abend\n         L     R2,0(,R10)              Get Recovery Address\n         XC    0(4,R10),0(R10)         Zero Retry Address\n*        SETRP RC=4,                   Return to Supervisor            *\n               DUMP=NO,                No Dump                         *\n               RETADDR=(2),            Recovery Routine Address        *\n               RETREGS=YES,            Restore Registers               *\n               FRESDWA=YES             Free SDWA, No Longer Needed\n         SETRP RC=4,                   Return to Supervisor            *\n               DUMP=NO,                No Dump                         *\n               RETADDR=(2),            Recovery Routine Address        *\n               RETREGS=NO,             Restore Registers               *\n               FRESDWA=YES             Free SDWA, No Longer Needed\n         LMG   R14,R12,8(R13)          Restore Registers\n         BR    R14                     -> Return With Recovery\n*\n&EST020  DS    0H                  -*- Continue With termination\n*        SETRP RC=0\n         SETRP RC=0\n         LMG   R14,R12,8(R13)          Restore Registers\n         XGR   R15,R15                 Percolate\n         BR    R14                     -> Return\n*\n&LCSCT   LOCTR ,                       Reestablish PGM LOCTR\n         POP   USING                   Reset Current Status\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'DSAEST: ?'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=PGMEXIT  0100-10050-10050-1200-00157-00157-00000-RHDMAC\n         MACRO\n&LBL     PGMEXIT &RC=,&RS=,&R1=,       Parameter Registers             *\n               &MSG=,                  Message to Print                *\n               &REGS=ALL,              Registers to Print              *\n               &DATA=                  Data to Print\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** PGMEXIT - Exit The Program and Return to Caller                   *\n.*                                                                    *\n.*    This macro exists for the purpose of manifesting a common       *\n.*  way of exiting a program within the system. It provides basic     *\n.*  exit linkage the programs and aa trace point trap to be executed  *\n.*  at that time.                                                     *\n.*                                                                    *\n.*  Parameters:                                                       *\n.*    RC=   - Return Code Passed in R15                               *\n.*    RS=   - Reason Code Passed in R0                                *\n.*    MSG=  - Unique Message to Print in the Traces                   *\n.*    REGS= - Registers to Print to Traces                            *\n.*    DATA= - Additional Data to Snap to the Traces                   *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.* 10/04/08 R.Harper  M000 Updated for SVC Implementation             *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS\n.*\n         LCLC  &PGM000,&PGM010,&PGM020 Program Labels\n.*\n&PGM000  SETC  'P00'.'&SYSNDX'         Build Required Labels\n&PGM010  SETC  'P10'.'&SYSNDX'         (Same)\n&PGM020  SETC  'P20'.'&SYSNDX'         (Same)\n.*\n         AIF   ('&LBL' EQ '').L001\n&LBL     DS    0H\n.L001    ANOP\n.*\n.** Get Return Code\n.*\n         EREGG R0,R1                   Reload Regs From Stack\n         AIF   ('&RC' EQ '').GEN010\n         LBIN  R15,&RC                 Load Return Code\n.GEN010  ANOP\n.*\n.** Get Reason Code\n.*\n         AIF   ('&RS' EQ '').GEN020\n         LBIN  R0,&RS                  Load Reason Code\n.GEN020  ANOP\n.*\n         AIF   ('&R1' EQ '').GEN030\n         LBIN  R1,&R1                  Load R1 if Requested\n.GEN030  ANOP\n.*\n         AIF   ('&XTRC' NE 'YES').GEN040\n*        #TRACE TYPE=PGMX,             Indicate Program Exit Call      *\n               MSG=&MSG,               Print PGMEXIT Message           *\n               REGS=&REGS,             Print Desired Regs              *\n               DATA=&DATA              Print Any Desired Data\n&PGM000  #TRACE TYPE=PGMX,                                             *\n               MSG=&MSG,                                               *\n               REGS=&REGS,                                             *\n               DATA=&DATA\n.*\n.GEN040  ANOP\n         LGR   R2,R15                  Save for Final Display\n         LGR   R3,R0                   (Same)\n         LGR   R4,R1                   (Same)\n.*\n.** Cancel User ESTAE if Generated in PGMNTRY\n.*\n         AIF   (NOT &PESTAE).GEN190\n*        ESTAEX 0                      Cancel User Program ESTAE\n         ESTAEX 0                      Cancel User Program ESTAE\n.*\n.** If MAIN Program - Cancel Abend ESTAE\n.*\n.GEN190  ANOP\n         AIF   (NOT &PMAIN).GEN200\n*        ESTAEX 0                      Cancel Abend Diagnostic ESTAE\n         ESTAEX 0                      Cancel Abend Diagnostic ESTAE\n.GEN200  ANOP\n.*\n.** Free ATB Storage if Necessary\n.*\n         AIF   ('&PAMODE' NE '64').GEN210\n         TM    DSAFLAG1,DSAATBOW       Do We Own This Storage?\n         BZ    &PGM010                 No  ->\n*        IARV64 REQUEST=DETACH,        Get Some ATB Storage\n*              MEMOBJSTART=DSAATBAD,   ..Address of Storage to Free\n*              USERTKN=DSAATBUT,       ..Indicate User Token This Pgm\n*              MF=(E,DSAV64)           ..Address of List Form\n         IARV64 REQUEST=DETACH,        Get Some ATB Storage            *\n               MEMOBJSTART=DSAATBAD,   ..Address of Storage to Free    *\n               USERTKN=DSAATBUT,       ..Indicate User Token This Pgm  *\n               MF=(E,DSAV64)           ..Address of List Form\n&PGM010  DS    0H\n.GEN210  ANOP\n.*\n.** Free DSA Storage if Necessary\n.*\n.GEN220  ANOP\n         TM    DSAFLAG1,DSAOWNER       Do We Own This Storage?\n         BZ    &PGM020                 No  ->\n         LR    R1,R13                  Free Our Savearea\n         L     R0,DSALENTH             Get Length to Freemain\n*        STORAGE RELEASE,ADDR=(1),     Free Storage for DSA\n*              SP=&SP,                 (Same)\n*              SP=&KEY,                (Same)\n*              LENGTH=(0)              (Same)\n         STORAGE RELEASE,ADDR=(1),     Free Storage for DSA            *\n               SP=&SSP,                (Same)                          *\n               KEY=&SKY,               (Same)                          *\n               LENGTH=(0)              (Same)\n*\n&PGM020  DS    0H\n         LGR   R15,R2                  Set Return Code\n         LGR   R0,R3                   Set Reacon Code\n         LGR   R1,R4                   Set R1\n         EREG  R13,R13                 Restore Caller's R13\n         XC    8(4,R13),8(R13)         Zero Forward Pointer\n         PR    ,                       Return to Caller\n.*\n.** Exit Macro\n.*\n.EXIT    ANOP\n         MEXIT ,\n         MEND\n./ ADD NAME=PGMGBINI 0100-10050-10050-1200-00072-00072-00000-RHDMAC\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** PGMGBINI - Program Management Global Variable Initialization      *\n.*                                                                    *\n.*    This member is intended to be copied by the PGMNTRY macro to    *\n.*  do any initialization required upon the establishment of a new    *\n.*  CSECT within a given source module.  The GLOBALs themselves are   *\n.*  defined in the PGMGBLAS macro which is copied into every macro    *\n.*  in this program management system.                                *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.** Setup LOCTR's For This CSECT\n.*\n&LCSCT   SETC  '&CASECT'.'_LCSCT'       Set LOCTR For CSECT\n&LCSC1   SETC  '&CASECT'.'_LCSC1'       Set LOCTR Middle 1 CSECT\n&LCSC2   SETC  '&CASECT'.'_LCSC2'       Set LOCTR Middle 2 CSECT\n&LCSPG   SETC  '&CASECT'.'_LCSPG'       Set LOCTR For SUB Programs\n.*\n&LCCON   SETC  '&CASECT'.'_LCCON'       Set LOCTR For Constants\n&LCCN1   SETC  '&CASECT'.'_LCCN1'       (Same)\n&LCCN2   SETC  '&CASECT'.'_LCCN2'       (Same)\n.*\n&LCTRC   SETC  '&CASECT'.'_LCTRC'       Set LOCTR For Trace Data\n.*\n&DSDSA   SETC  '&CASECT'.'_DSA'         Set DSECT For Dynamic Storage\n&LCDSA   SETC  '&CASECT'.'_LCDSA'       Set LOCTR For Dynamic Storage\n&LCDSB   SETC  '&CASECT'.'_LCDSB'       Set LOCTR Middle 1 DSA\n&LCDSC   SETC  '&CASECT'.'_LCDSC'       Set LOCTR Middle 2 DSA\n&LCDSD   SETC  '&CASECT'.'_LCDSD'       Set LOCTR Middle 3 DSA\n&LCDSE   SETC  '&CASECT'.'_LCDSE'       Set LOCTR Ending DSA\n.*\n&DSATB   SETC  '&CASECT'.'_ATB'         Set DSECT Above-The-Bar Storage\n&LCATA   SETC  '&CASECT'.'_LCATA'       Set LOCTR For Dynamic ATB\n&LCATB   SETC  '&CASECT'.'_LCATB'       Set LOCTR Middle 1 ATB\n&LCATC   SETC  '&CASECT'.'_LCATC'       Set LOCTR Middle 2 ATB\n&LCATD   SETC  '&CASECT'.'_LCATD'       Set LOCTR Middle 3 ATB\n&LCATE   SETC  '&CASECT'.'_LCATE'       Set LOCTR Ending ATB\n.*\n.** Reset Globals For New Program\n.*\n&PESTAE  SETB  0                        Off - No ESTAE Support\n./ ADD NAME=PGMGBLAS 0100-10050-10050-1200-00095-00095-00000-RHDMAC\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** PGMGBLAS - Program Management Global Variables                    *\n.*                                                                    *\n.*    This member is intended to be copied iunto all the macros in    *\n.*  this program management system.  A seperate related macro         *\n.*  PGMGBINI is called only by PGMNTRY for the purpose of doing any   *\n.*  required initialization for this system whenever a new CSECT is   *\n.*  established.                                                      *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.* 10/04/08 R.Harper  M000 Updated for SVC Implementation             *\n.*                                                                    *\n.**********************************************************************\n.*\n.*                                 -*- SYSSTATE Values\n         GBLC  &SYSAM64                YES/NO - For Amode(64)\n         GBLA  &SYSALVL                0/1/2  - For Architecture Level\n         GBLC  &SYSASCE                P/AR   - For Primary or AR Mode\n.*\n         GBLC  &LCSCT                  SCT LOCTR - Main CSECT\n         GBLC  &LCSC1                  SCT LOCTR - Middle 1 CSECT\n         GBLC  &LCSC2                  SCT LOCTR - Middle 2 CSECT\n         GBLC  &LCSPG                  SPG LOCTR - SUB Programs\n.*\n         GBLC  &LCCON                  CON LOCTR - For Constants\n         GBLC  &LCCN1                  CON LOCTR 1 For Constants\n         GBLC  &LCCN2                  CON LOCTR 2 For Constants\n         GBLC  &LCTRC                  TRC LOCTR - For Trace Data\n.*\n         GBLC  &DSDSA                  DSA DSECT - For Dynamic Storage\n         GBLC  &LCDSA                  DSA LOCTR - For Dynamic Storage\n         GBLC  &LCDSB                  DSA LOCTR - For Middle 1 DSA\n         GBLC  &LCDSC                  DSA LOCTR - For Middle 2 DSA\n         GBLC  &LCDSD                  DSA LOCTR - For Middle 3 DSA\n         GBLC  &LCDSE                  DSA LOCTR - For End of DSA\n.*\n         GBLC  &DSATB                  ATB DSECT - Above-The-Bar Storag\n         GBLC  &LCATA                  ATB LOCTR - For Dynamic Storage\n         GBLC  &LCATB                  ATB LOCTR - For Middle 1 ATB\n         GBLC  &LCATC                  ATB LOCTR - For Middle 2 ATB\n         GBLC  &LCATD                  ATB LOCTR - For Middle 3 ATB\n         GBLC  &LCATE                  ATB LOCTR - For End of ATB\n.*\n         GBLA  &PAMODE                 PGMNTRY Amode Value 24/31/64\n         GBLC  &PPRINT                 PGMNTRY PRINT= Value GEN/NOGEN\n         GBLB  &PMAIN                  PGMNTRY 1 if TYPE=MAIN Program\n         GBLB  &PTRACE                 PGMNTRY 1 if TRACE=YES Specified\n.*\n         GBLC  &XTRC                   Suppress Tracing Specified\n         GBLC  &XOPN                   OPEN Has Been Done\n.*\n         GBLA  &SUBH                   Total Subroutines Defined\n         GBLC  &SUBN(200)              Subroutine Names\n         GBLA  &SUBC(200)              Count of Regs on SAVE=\n         GBLC  &SUBS(200)              VALUE on SAVE= From SUBNTRY\n         GBLC  &SUBA(200)              YES/NO &SYSAM64 Value\n         GBLC  &SUBM(200)              ASCENV Mode P/AR\n.*\n         GBLC  &CASECT                 Current CSECT Name\n         GBLC  &DASECT                 Current TRPCSECT Name\n         GBLC  &SSP                    SP= Value for Getmain/Freemain\n         GBLC  &SKY                    KEY= Value for Getmain/Freemain\n.*\n         GBLC  &MACS                   Have Macros Been included? - Y\n.*\n         GBLB  &PESTAE                 On - ESTAE=YES Specified\n./ ADD NAME=PGMNTRY  0100-10050-10050-1200-00730-00730-00000-RHDMAC\n         MACRO\n&LBL     PGMNTRY &IMP=SVC,             Implimentation: BASR/SVC/TRAP2  *\n               &BASE=,                 Program Base Registers          *\n               &CBAS=,                 Constant Base Registers         *\n               &DBAS=,                 Dynamic Storage Base Registers  *\n               &ABAS=,                 Above-The-Bar Base Register     *\n               &DSANAM=,               Short Name for DSA-If Desired   *\n               &TYPE=SUBR,             Type of Entry MAIN/SUBR         *\n               &LEN=4,                 Length for DSA Getmain          *\n               &AMODE=31,              Default Amode 31/64             *\n               &RMODE=ANY,             Default Rmode                   *\n               &ESTAE=NO,              Y0S/NO - Activates DSARETRY     *\n               &DREG=YES,              Generate ASMDREG                *\n               &BRC=YES,               Generate IEABRC                 *\n               &OPSYN20=NO,            Generate 20-Bit OPSYNs          *\n               &KILLBDD=NO,            YES/NO - Kill BDDD Instructions *\n               &PARM=,                 Input Parameters to Print       *\n               ,                   -*- Key/Subpool for DSA/ATB Getmain *\n               &KEY=8,                 Storage Key                     *\n               &SP=0,                  Subpool                         *\n               ,                   -*- SYSSTATE Macro Parameters       *\n               &ASCENV=P,              P/AR   - Access Register Mode   *\n               &ARCHLVL=2,             0/1/2  - Zos Macro Level=2      *\n               ,                                                       *\n               &TRACE=YES,             Allow Program Traces            *\n               &BUFFDAT=NO,            YES/NO to Buffer Trace Data     *\n               &BUFFMAX=1000,          Number of Lines to Buffer       *\n               &MSG=,                  Message to Print                *\n               &REGS=ALL,              Registers to Print              *\n               &DATA=,                 Data to Print                   *\n               &TRCDD=TRCPRINT,        Trace DDNAME                    *\n               &TRCPGM=RDHTRACG,       Trace Program Name - IMP=BASR   *\n               ,                                                       *\n               &PRINT=NOGEN            PRINT MODE GEN/NOGEN\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** PGMNTRY - Establish a New CSECT Within a Source Module            *\n.*                                                                    *\n.*    This macro is the foundation for the entire program management  *\n.*  system.  Everything begins here.  It does several things.  It     *\n.*  establishes the basic structure of the CSECT, the various LOCTR's *\n.*  to be used by other macros in the system. It does the basic stuff *\n.*  like setting up addressability, a patch area, and the MVS save    *\n.*  area.  But it also determines whether tracing is in effect and    *\n.*  initializes the trace facility if the are.                        *\n.*                                                                    *\n.** The Input Parameters Are:                                         *\n.*                                                                    *\n.*    BASE=   - Specified as a sublist the base registers to be       *\n.*              used for this CSECT. The default value is R12,R11.    *\n.*    CBAS=   - Specified as a sublist the base registers to be       *\n.*              used for this CSECTs Constant Area.                   *\n.*    DBAS=   - Specified as a sublist the base registers to be       *\n.*              used for this CSECTs Dynamic Storage Area. This       *\n.*              would be in addition to R13 whcich is always the      *\n.*              primary DSA base register.                            *\n.*    ABAS=   - Specified as a sublist the base registers to be       *\n.*              used for this CSECTs Above-The-Line Storage Area.     *\n.*                                                                    *\n.*    DSANAM= - The generated primary DSECT name for DSA for a given  *\n.*              CSECT in the assembly will always be the CSECT name   *\n.*              with an '_DSA' appended.  This is necessary to assure *\n.*              a unique DSA DSECT name for all invokations of the    *\n.*              PGMNTRY Macro.  However, this causes a problem when   *\n.*              one wishes to use hard coded DSA offsets as in        *\n.*              DSAWORKD-DSA(R3).  It means that one would have to    *\n.*              code: DSAWORKD-CSECTNAM_DSA(R3) which is a little     *\n.*              verbose.  So, I added this parameter so I could       *\n.*              provide a short name that will become the name of     *\n.*              the DSA DSECT for a given invokation of PGMNTRY.      *\n.*              It must be unique for a given CSECT within a single   *\n.*              assembly.  We suggest: DSA, DSB, DSC, DSD, etc.       *\n.*                                                                    *\n.*    TYPE=   - SUBR/MAIN.  The difference here is that TYPE=MAIN     *\n.*              Will allways do a STORAGE OBTAIN to acquire it's      *\n.*              own DSA Upstack seperate from the caller.  The        *\n.*              TYPE=SUBR will use the Upstack of the caller for      *\n.*              his DSA if there is sufficient room available.  If    *\n.*              there is not sufficient room available the macro      *\n.*              will obtain a seperate 4K Upstack DSA to use.         *\n.*    LEN=    - Specified as a decimal number that represents the     *\n.*              length of the DSA Upstack to OBTAIN.  The default     *\n.*              is 4K, and it should be specified as a decimal        *\n.*              number in a multple of 4K. LEN=4 means 4K.            *\n.*    AMODE=  - This value specifies the addressing mode for the      *\n.*              program.  It may be specified as 24, 31, or 64.  The  *\n.*              default value is 31.                                  *\n.*    RMODE=  - This parameter specifies the residency mode for the   *\n.*              program.  This can be 24, 31, or ANY.  The default    *\n.*              value is ANY.                                         *\n.*    PRINT=  - This parameter determines whether the source code     *\n.*              generated by these program management macros will     *\n.*              be generated in the listing. The default is NOGEN.    *\n.*              It is provided for debugging purposes.  If PRINT=GEN  *\n.*              is specified the macros will expand during assembly.  *\n.*                                                                    *\n.*    TRACE=  - This parameter indicates whether or not tracing       *\n.*              should be active for this program.  The default       *\n.*              value is YES but may be specified as NO to disable    *\n.*              all tracing for this CSECT.                           *\n.*    MSG=      Specifies a message to be printed allowinf for        *\n.*              embedded variables in a sublisted string.  Variable   *\n.*              data will be printed according to the type of         *\n.*              variable.  Types C and Z are printes in character     *\n.*              format.  Types F, H and P are printed in decimal      *\n.*              format.  Everything else is printed in hex format.    *\n.*               MSG='This is a message'                              *\n.*               MSG=('The ',COLOR,' HARE ' is ',HEIGHT,' ft. tall.'  *\n.*               MSG=('Show savearea at: ',DSASAVEA)                  *\n.*    DATA=   - Specifies an area in storage that is to be displayed  *\n.*              in hex dump format. An optional title may be specified*\n.*              to identify the area being displayed.  The areas to be*\n.*              displayed must be specified as a sublist within a     *\n.*              sublist.                                              *\n.*               DATA=('My DSA Area',0(R13),DSALNGTH)                 *\n.*               DATA=(('Previous SA in Chain',0(R6),SALNGTH),        *\n.*                     ('Next SA in Chain,',0(R5),(R2))               *\n.*    PARM=   - Not Currently Supported                               *\n.*                                                                    *\n.*   BUFFDAT= - YES/NO. Specifying YES indicates that trace data be   *\n.*              bufferred and written to sysout only at termination.  *\n.*   BUFFMAX= - Number < 64000. The number of print lines to be       *\n.*              maintained in the buffer above-the-line in a wrap     *\n.*              around table for storage of trace output.             *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS                Copy Global Variables\n.*\n         LCLC  &PGMBGN                 Program Labels\n         LCLC  &PGM000,&PGM010,&PGM020 (Same)\n         LCLC  &PGM030,&PGM040,&PGM050 (Same)\n         LCLC  &PGM060,&PGM070,&PGM999 (Same)\n         LCLC  &DSALEN,&OVCHK,&ENDCT\n         LCLC  &ATBLEN,&ATBOV,&ATBND\n         LCLC  &SAM,&ASCE              AMODE and ASCENV\n.*\n         LCLC  &D                      DSA Prefix\n         LCLA  &L                      DSA Length for Getmain\n.*\n         LCLC  &ATB                    ATB Address\n         LCLA  &ATBL                   ATB Length for Getmain\n.*\n.** Save Current RSECT Name and Generate TRACE Constant LOCTR Name\n.*\n&CASECT  SETC  '&LBL'                   Set Current RSECT Name\n         AIF   (K'&CASECT LT 6).BILD010 Build LOCTR Name for Traces\n&N       SETA  K'&CASECT+3-8+1          (Same)\n&C       SETC '&CASECT'(&N,9-&N)        (Same)\n.BILD010 ANOP                           (Same)\n&DASECT  SETC  '@#$'.'&C'               Set Trace Constant LOCTR Name\n.*\n         COPY  PGMGBINI                Initialize Glogal Variables\n.*\n.** Initialize Global Variables\n.*\n         AIF   ('&DSANAM' EQ '').NODNM DSANAM= Not Provided\n&DSDSA   SETC  '&DSANAM'               Use Invoker's DSA Name\n.NODNM   ANOP\n.*\n&D       SETC  '&LCDSA'                Set DSA Prefix-Small Footprint\n&DSALEN  SETC  '&LCDSA'.'L'            Set Label Small Footprint\n&OVCHK   SETC  '&LCDSA'.'_OVCHK'       Set Label for Overlay Check\n&ENDCT   SETC  '&LCDSA'.'_ENDCT'       Set Label Ending Eye Catcher\n.*\n&ATB     SETC  '&LCATB'                Set DSA Prefix-Small Footprint\n&ATBLEN  SETC  '&LCATB'.'L'            Set Label Small Footprint\n&ATBOV   SETC  '&LCATB'.'_OVCHK'       Set Label for Overlay Check\n&ATBND   SETC  '&LCATB'.'_ENDCT'       Set Label Ending Eye Catcher\n.*\n&PMAIN   SETB  ('&TYPE' EQ 'MAIN')     Remember TYPE=MAIN Programs\n&PAMODE  SETA  &AMODE                  Save AMODE Value\n&PPRINT  SETC  '&PRINT'                Save PRINT Value\n.*\n&L       SETA  &LEN*1024\n&DSAL    SETA  &L                      Save for PGMEXIT Macro\n&SUBH    SETA  1                       Initialize Subr Count\n.*\n.** Generate Lables Needed for PGMNTRY\n.*\n&PGMBGN  SETC  'PBG'.'&SYSNDX'         Start of CSECT\n&PGM000  SETC  'P00'.'&SYSNDX'         Build Required Labels\n&PGM010  SETC  'P10'.'&SYSNDX'         (Same)\n&PGM020  SETC  'P20'.'&SYSNDX'         (Same)\n&PGM030  SETC  'P30'.'&SYSNDX'         (Same)\n&PGM040  SETC  'P40'.'&SYSNDX'         (Same)\n&PGM050  SETC  'P50'.'&SYSNDX'         (Same)\n&PGM060  SETC  'P60'.'&SYSNDX'         (Same)\n&PGM999  SETC  'P99'.'&SYSNDX'         (Same)\n.*\n.** Generate RSECT Prior to PRINT So 1st Instruction Shows EP on NOGEN\n.*\n&LBL     RSECT ,\n&PGMBGN  J     &PGM010                  Branch Around EyeCatcher\n.*\n.** Generate Copybooks ASMMSP, IEABRC, ASMDREG,\n.**      and DSADSECT if First Time Entry\n.*\n         PRINT OFF\n         AIF   ('&MACS' EQ 'Y').NOMAC  Have macros Been Included?\n.*\n         COPY  ASMMSP                  Structured Programming Macs\n         COPY  #MAC64                  64-Bit Support Macros\n         DSADSECT                      Bring in DSA Prefix\n         ATBDSECT                      Bring in ATB Prefix\n.*\n         AIF   ('&OPSYN20' NE 'YES').NOOPS OPSYNs Wanted?\n         COPY  #OPSYN20                Include 20-Bit OPSYNs\n.NOOPS   ANOP\n.*\n&MACS    SETC  'Y'\n         AIF   ('&BRC' NE 'YES').NOBRC Generate IEABRC?\n         COPY  IEABRC                  Branch Relative Instrs\n.NOBRC   ANOP\n.*\n         AIF   ('&DREG' NE 'YES').NODREG Generate ASMDREG?\n         ASMDREG ,                     Define Register Equates\n.NODREG  ANOP\n.*\n.NOMAC   ANOP                          Include Macros Only Once\n         PRINT ON,&PRINT\n.*\n.*--------------------------------------------------------------------*\n.** Setup Basic RSECT and LOCTR Structure                             *\n.*--------------------------------------------------------------------*\n.*\n&LBL     RSECT ,\n&LBL     AMODE &AMODE                   Establish AMODE\n&LBL     RMODE &RMODE                   Establish RMODE\n*\n** Define LOCTRs for This Program\n*\n&LCSCT         LOCTR ,                  SCT LOCTR - Main CSECT\n&LCSC1         LOCTR ,                  SCT LOCTR - Middle 1 CSECT\n&LCSC2         LOCTR ,                  SCT LOCTR - Middle 2 CSECT\n&LCSPG         LOCTR ,                  SPG LOCTR - SUB Programs\n*\n** Define LOCTRs for Constant Area\n*\n&LCCON         LOCTR ,                  CON LOCTR - For Constants\n&LCCN1         LOCTR ,                  CON LOCTR 1 For Constants\n&LCCN2         LOCTR ,                  CON LOCTR 2 For Constants\n&LCTRC         LOCTR ,                  TRC LOCTR - For Trace Data\n*\n** Define LOCTRs for DSA, Dynamic Storage Area\n*\n&DSDSA         DSECT ,                  Setup Primary DSA LOCTR\n         DS    XL(DSAPFXLN)             Reserve Space for DSA Prefix\n&LCDSA         LOCTR ,                  Setup Primary DSA LOCTR\n&LCDSB         LOCTR ,                  Setup Middle1 DSA LOCTR\n&LCDSC         LOCTR ,                  Setup Middle2 DSA LOCTR\n&LCDSD         LOCTR ,                  Setup Middle3 DSA LOCTR\n&LCDSE         LOCTR ,                  Setup Ending  DSA LOCTR\n*\n** Define LOCTRs for ATB, Above-The-Bar Storage Area\n*\n&DSATB         DSECT ,                  Setup Primary ATB LOCTR\n         DS    XL(ATBPFXLN)             Reserve Space for ATB Prefix\n&LCATA         LOCTR ,                  Setup Primary ATB LOCTR\n&LCATB         LOCTR ,                  Setup Middle1 ATB LOCTR\n&LCATC         LOCTR ,                  Setup Middle2 ATB LOCTR\n&LCATD         LOCTR ,                  Setup Middle3 ATB LOCTR\n&LCATE         LOCTR ,                  Setup Ending  ATB LOCTR\n.*\n.*--------------------------------------------------------------------*\n.** Setup Base Registers - if Requested                               *\n.*--------------------------------------------------------------------*\n.*\n&LCSCT   LOCTR ,                        Reset LOCTR For This CSECT\n         USING &PGMBGN,R15              Temp Addressability\n         DC    YL1(&PGM000-*-2)     @+4 Length of EyeCatcher\n         DC    CL8'&LBL'                Place CSECT Name\n         DC    CL64' Assembled on, &SYSDATE, &SYSTIME '\n&PGM000  DS    0H\n         #CPYRGT                        Generate Copyright Notice\n.*\n.** BAKR, Fudge R15 for 64-Bit Callers & Zero Registers Except (0,1)\n.*\n&PGM010  DS    0H\n         AIF   ('&AMODE' NE '64').A000  Note: Initiator Calls 64-Bit\n.*       AIF   ('&TYPE' NE 'MAIN').A000 Programs With Bad Value in R15\n         BSM   R14,0\n         LARL  R15,&PGMBGN              Get Initial Base - 64-Bit Req\n.A000    ANOP\n         BAKR  R14,0                    Save Caller's Registers\n         EPSW  R2,R3                    Get True PSW for 64-Bit Callers\n         MSTA  R2                       Save in Stack\n         SAM31 ,                        Run PGMNTRY in 31-Bit Always\n         SAC   000                      Run PGMNTRY in Primary Mode\n.*\n         LA    R15,0(,R15)              Strip 31-Bit Addr Mode Bit\n         NILL  R15,X'FFFE'              Strip 64-Bit Addr Mode Bit\n         LMH   R2,R15,=14A(0)           Zero High Words of GPRs\n         LAMY  AR2,AR15,=14A(0)         Set Primary ASID for All\n         DROP  R15                      Drop Temp Addressability\n.*\n.** Build Program Base Registers\n.*\n         AIF   ('&BASE' EQ '').A030\n&LBL     PGMBASE REGS=&BASE,BASE=0(,R15)\n.A030    ANOP\n.*\n.** Setup Constant Base Registers if Requested\n.*\n         AIF   ('&CBAS' EQ '').A040\n         USING &PGMBGN,R15              Temp Addressability\n         LAY   R15,&LCCON               Get First Base Address\n         DROP  R15                      Drop Temp Addressability\n&LCCON   PGMBASE REGS=&CBAS,BASE=0(,R15)\n.A040    ANOP\n.*\n.*--------------------------------------------------------------------*\n.** Obtain and Establish Addressability to Upstack DSA                *\n.*--------------------------------------------------------------------*\n.*\n.** Determine Key and Subpool to Use\n.*\n&SSP     SETC  '&SP'                    Defautl: 0\n&SKY     SETC  '&KEY'                   Default: 8\n.*\n         AIF   ('&IMP' EQ 'SVC').D010   IMP=BASR/TRAP2 Must be MODE=SUP\n*        MODESET MODE=SUP,KEY=ZERO      Supervisor State for IMP=BASR\n         MODESET MODE=SUP,KEY=ZERO      Must be in Supervisor State\n         AIF   ('&SP' NE '0').D010      -> If User Specified\n&SSP     SETC  '240'                    Set Subpool to Use For APF Pgms\n&SKY     SETC  '0'                      Set Default Key for APF Pgms\n.D010    ANOP\n.*\n         USING &DSDSA,R13               Setup DSA Addressability\n         USING DSA,&DSDSA               (Same)\nC        USING DSA,R2                   Our Temp Addressabilty\n*\n.*\n.** Obtain DSA Storage\n.*\n         AIF   ('&TYPE' EQ 'MAIN').D070\n         CLC   =CL3'DSA',0(R13)         Is it Our Format?\n         JNE   &PGM020                  No  ->\n         CLC   =A(&DSALEN),DSARESID     Is There Enough Residule?\n         JH    &PGM020                  No  ->\n         J     &PGM030                  Yes ->\n*\n.D070    ANOP\n*        SYSSTATE AMODE64=&SAM,ASCENV=&ASCE\n&SYSALVL SETA  2\n&PGM020  DS    0H - R2=Ours R13=His\n*        STORAGE OBTAIN,                Obtain Storage for DSA\n*              LENGTH=&L,               (Same)\n*              SP=&SP,                  (Same)\n*              SP=&KEY,                 (Same)\n*              CALLRKY=YES,             (Same)\n*              LOC=(24,31),BNDRY=PAGE   (Same)\n         LLGT  R0,=A(&L)                Get length to Obtain\n         STORAGE OBTAIN,                Obtain Storage for DSA         *\n               SP=&SSP,                 (Same)                         *\n               KEY=&SKY,                (Same)                         *\n               LENGTH=(0),              (Same)                         *\n               LOC=24                   (Same)\n*\n         LGR   R2,R1                    Save DSA Address\n         LGR   R3,R1\n         LGR   R0,R1                    Assure Zero Filled DSA\n         LLGT  R1,=A(&L)                (Same)\n         XR    R14,R14                  (Same)\n         XR    R15,R15                  (Same)\n         MVCL  R0,R14                   (Same)\n*\n         OI    C.DSAFLAG1,DSAOWNER      Indicate We own it\n         MVCY  C.DSALENTH,=A(&L)        Save Length for Freemain\n         LLGT  R1,=A(&L)                Get Residual Length\n         SHY   R1,=Y(&DSALEN)           (Same)\n         ST    R1,C.DSARESID            Save in Our DSA\n         J     &PGM040\n.*\n         AIF   ('&TYPE' EQ 'MAIN').B090\n*\n** Use Caller's DSA - R2=Ours R13=His\n*\n&PGM030  DS    0H\n         LA    R2,0(,R13)               Get Callers DSA Address\n         A     R2,DSALNGTH              ..Plus His Length is Ours\n         LR    R0,R2                    Set to Zero Fill Our DSA\n         L     R1,=A(&DSALEN)           (Same)\n         XR    R14,R14                  (Same)\n         XR    R15,R15                  (Same)\n         MVCL  R0,R14                   Zero Fill Area\n         L     R1,DSARESID              Get Callers Residual\n         S     R1,=A(&DSALEN)           ..Minus Our Length\n         ST    R1,C.DSARESID            Save Our Residual in Our DSA\n*\n         MVC   C.DSAATBAD,DSAATBAD      Copy ATB Data Forward - If Any\n         MVC   C.DSAATBSZ,DSAATBSZ      (Same)\n         MVC   C.DSAATBRS,DSAATBRS      (Same)\n.B090    ANOP\n*\n** Iniitialize DSA R13=His R2=Ours\n*\n&PGM040  DS    0H\n         ST    R13,4(,R2)               Connect Save Areas\n         ST    R2,8(,R13)               (Same)\n         LR    R13,R2                   Get Our DSA Addressability\n         L     R2,4(,R13)               Use R2 For Caller Now\n.*\n.*--------------------------------------------------------------------*\n.** Generate Additional Bases for DSA if Reqested                     *\n.*--------------------------------------------------------------------*\n.*\n.** Setup Any Additional DSA Base Registers\n.*\nDSAD     PGMBASE REGS=&DBAS,BASE=4096(R13)\n.*\n.** Fill In DSA Prefix & Suffix Data\n.*\n         MVCY  DSAEYECT,=CL4'DSA'       Set DSA EyeCatcher\n         MVCY  DSADSAID,=CL8'&CASECT'   Set CSECT Name of Owner\n         MVCY  DSASVBCK,=CL4'F1SA'      Indicate BAKR Entry\n         MVCY  &ENDCT,=CL4'DSAE'        Set DSA Ending EyeCatcher\n         LAY   R14,&OVCHK               Set up Overlay Check\n         STY   R14,&OVCHK               (Same)\n         MVCY  DSALNGTH,=A(&DSALEN)     Set Length of Our DSA\n         AIF   ('&TYPE' EQ 'MAIN').D106\n         MVC   DSAPROPA(DSAPROPL),C.DSAPROPA\n.D106    ANOP\n         DROP  C                        Drop Callers Savearea\n.*\n.*--------------------------------------------------------------------*\n.** Fillin Support for Traces in DSA                                  *\n.*--------------------------------------------------------------------*\n.*\n         MVCY  DSATRAPS,=4X'0700'       Assume No Traps at Present\n.*\n         AIF   ('&TRACE' NE 'YES').T999 Determine Type of Traces\n&PTRACE  SETB  1                        Indicate TRACE=YES Specified\n         AIF   ('&IMP' EQ 'TRAP2').T300 Determine TRAP Type\n         AIF   ('&IMP' EQ 'SVC').T200   (Same)\n         AIF   ('&IMP' EQ 'BASR').T100  (Same)\n         AGO   .MNOTE4\n.*\n.T100    ANOP                           Process if IMP=BASR Traces\n         MVCY  DSATRAPS,=4X'0CEF'       Set Target EX as: BASSM 14,15\n         MVCY  DSATRCEP,=V(&TRCPGM.)    Set Entry Point to Trace Pgm\n         OI    DSATRCEP,X'80'           Set Mode Bit for BASSM\n         AGO   .T999\n.*\n.T200    ANOP                           Process if IMP=SVC Traces\n         XGR R14,R14                    Zero Work Register\n         L   R14,16                     Get CVT Address\n         L   R14,200(,R14)              Get Address of SCVT\n*\n         L   R14,132(,R14)              Get Address of SVCTABLE\n         AHI R14,255*8                  Point at SVC 255\n         LA  R15,255                    Loop All SVC Table Entries\n*\n         DO FROM=(R15)                  Loop Through SVC Table\n            L  R1,0(,R14)               Get SVC Entry Point\n            NILH R1,X'7FFF'             Strip High Bit For 64-Bit Amode\n            CLCY =C'RDHTRSVC',4(R1),SAVE=YES\n            DOEXIT (EQ)                 Found Our SVC?\n            AHI R14,-8                  Bump to Prev SVCTABLE Entry\n         ENDDO ,                        -> Loop\n*\n         CLCY =C'RDHTRSVC',4(R1),SAVE=YES\n         IF (EQ)                        Found Our SVC??\n            STC R15,DSASVCNO            Save SVC Number\n            MVCY DSATRAPS,=4X'0A00',SAVE=YES Set Target of EX as: SVC #\n            STC R15,DSATRPGM+1          Set SVC Number to Use\n            STC R15,DSATRSUB+1          (Same)\n            STC R15,DSATRTRC+1          (Same)\n            STC R15,DSATRSPM+1          (Same)\n         ELSE ,\n            DC H'0'\n            DC C'RDHTRSVC SVC is not Installed.'\n         ENDIF ,\n         AGO   .T999\n.*\n.T300    ANOP                           Process if IMP=TRAP2 Traces\n         L     R14,16                   Get CVT Address\n         L     R14,200(,R14)            Get Address of SCVT\n*\n         L   R14,132(,R14)              Get Address of SVCTABLE\n         AHI R14,255*8                  Point at SVC 255\n         LA  R15,255                    Loop All SVC Table Entries\n*\n         DO FROM=(R15)                  Loop Through SVC Table\n            L  R1,0(,R14)               Get SVC Entry Point\n            NILH R1,X'7FFF'             Strip High Bit For 64-Bit Amode\n            CLCY =C'RDHTRSVC',4(R1),SAVE=YES\n            DOEXIT (EQ)                 Found Our SVC?\n            AHI R14,-8                  Bump to Prev SVCTABLE Entry\n         ENDDO ,                        -> Loop\n*\n         CLCY =C'RDHTRSVC',4(R1),SAVE=YES\n         IF (EQ)                        Found Our SCV?\n            STC R15,DSASVCNO            Save SVC Number\n            MVCY DSAWORKF,=X'0A000000',SAVE=YES  Target of EX as: SVC #\n            STC R15,DSAWORKF+1          Set SVC Number to Use\n            L R1,=CL4'TRAP'             Request DUCT Installation\n            EX 0,DSAWORKF               Issue Our SVC\n         ELSE ,\n            DC H'0'\n            DC C'RDHTRSVC SVC is not Installed.'\n         ENDIF ,\n.*\n         MVCY  DSATRAPS,=4X'01FF'       Set Target of EX as: TRAP2\n         AGO   .T999\n\n.T999    ANOP\n.*\n.*--------------------------------------------------------------------*\n.** Set AMODE and ASCENV                                              *\n.*--------------------------------------------------------------------*\n.*\n.MOD010  ANOP\n&SAM     SETC  'NO'\n         AIF  ('&AMODE' EQ '').MOD100\n         AIF  ('&AMODE' NE '64').MOD100\n&SAM     SETC  'YES'\n         SAM64 ,                        Change State\n.*\n&ASCE    SETC  'P'\n.MOD100  ANOP\n         AIF  ('&ASCENV' EQ '').MOD120\n         AIF  ('&ASCENV' NE 'AR').MOD120\n&ASCE    SETC  'AR'\n         SAC   512                      Change Current State\n.MOD120  ANOP\n         SYSSTATE AMODE64=&SAM,ASCENV=&ASCE\n.*\n.*--------------------------------------------------------------------*\n.** Generate Stacking ATB if MAIN and AMODE(64)                       *\n.*--------------------------------------------------------------------*\n.*\n.F000    ANOP\n         AIF   ('&AMODE' NE '64').F999\n         ST    R13,DSAATBUT+4          Set DSA Address as User Token\n         AIF   ('&IMP' EQ 'SVC').F010  IMP=BASR/TRAP2 Must be MODE=SUP\n         OI    DSAATBUT+3,X'FE'        Non-Zero for SUPR Pgms\n.F010    ANOP\n.*\n         IF (CLC,DSAATBRS,LT,=AD(&ATBLEN)) Get it if We Need it?\n            MVCY DSAATBPC,=AD(1)       Save Page Count for Freemain\n            LA  R2,DSAATBPC            Set Number of Segments (Meg)\n.*\n*           IARV64 REQUEST=GETSTOR,    Get Some ATB Storage            *\n               SEGMENTS=(R2),          ..Number of Segments            *\n               FPROT=NO,               ..Not Fetch Protected           *\n               ORIGIN=DSAATBAD,        ..Return Address Here           *\n               USERTKN=DSAATBUT,       ..Indicate User Token           *\n               MF=(E,DSAV64)           ..Address of List Form\n            IARV64 REQUEST=GETSTOR,    Get Some ATB Storage            *\n               SEGMENTS=(R2),          ..Number of Segments            *\n               FPROT=NO,               ..Not Fetch Protected           *\n               ORIGIN=DSAATBAD,        ..Return Address Here           *\n               USERTKN=DSAATBUT,       ..Indicate User Token           *\n               MF=(E,DSAV64)           ..Address of List Form\n            OI  DSAFLAG1,DSAATBOW      Indicate We Own it\n            OI  DSAFLAG1,DSAATBUS      Indicate We Use it\n*\n            MVCY DSAATBSZ,=AD(&ATBLEN)  Set Size Used From ATBEND Macro\n            LG  R2,DSAATBPC            Get Page Count\n            MSG R2,=AD(1024*1024)      Get Bytes Available\n            SG  R2,DSAATBSZ            Subtract What We Need\n            STG R2,DSAATBRS            Save Residual\n         ELSE ,\n            OI  DSAFLAG1,DSAATBUS      Indicate We Use it\n            LG  R2,DSAATBAD            Get Callers ATB Address\n            XGR R1,R1                  Zero Work Register\n            LG  R1,DSAATBSZ            Get Amount He Used\n            AGR R2,R1                  Get Our ATB Address in Stack\n            STG R2,DSAATBAD            Save Address in DSA\n            MVCY DSAATBSZ,=AD(&ATBLEN)  Set Size Used From ATBEND Macro\n            LG  R1,DSAATBRS            Get Callers Residual ATB\n            SG  R1,DSAATBSZ            Minus What We Need\n            STG R1,DSAATBRS            Set New Residual\n         ENDIF ,\n.*\n.** Setup Base Addressability to &ABAS\n.*\n         LG R2,DSAATBAD                Load ATB Address\n*DSATB   PGMBASE BASE=0(R2),REGS=&ABAS Load Base Regs & Usings\n&DSATB   PGMBASE BASE=0(R2),REGS=&ABAS Load Base Regs & Usings\n         USING ATB,&DSATB              ATB Prefix Addressability\n.*\n.** Fill in ATB Prefix and Suffix Data\n.*\n         MVCY ATBEYECT,=C'ATBDSECT'    Set Eye Catcher\n         MVCY ATBCSECT,=CL8'&CASECT'   Set CSECT Name of Owner\n         MVC  ATBSIZE,DSAATBSZ         Set Size of Area\n         MVCY &ATBND,=CL4'ATBE'        Set DSA Ending EyeCatcher\n         LAY  R14,&ATBOV               Set up Overlay Check\n         STG  R14,&ATBOV               (Same)\n.F999    ANOP\n.*\n.*--------------------------------------------------------------------*\n.** Generate Traces if Requested                                      *\n.*--------------------------------------------------------------------*\n.*\n         AIF   (NOT &PMAIN).G010\n*                                  -*- ESTAE for Abend Diagnostics\n         LA    R14,X'101'              Load identifier\n         LAY   R15,=A(X'07FE0000')     Address of Abend Recovery RTN\n*                                      ..Will Be Filled in in RDHTRACE\n*        ESTAEX (R15),CT,              Exit Routine Address            *\n               PARAM=(R14),            Parm Passed to RTN              *\n               XCTL=NO,                XCTL Cancels ESTAE Exit         *\n               PURGE=NONE,             Do Not Purge I/O on Abend       *\n               ASYNCH=YES,             Allow ASYNC to Continue         *\n               TERM=YES,               Enter Even on Cancel            *\n               MF=(E,DSAPLIST)         Point at List Form\n         ESTAEX (R15),CT,              Exit Routine Address            *\n               PARAM=(R14),            Parm Passed to RTN              *\n               XCTL=NO,                XCTL Cancels ESTAE Exit         *\n               PURGE=NONE,             Do Not Purge I/O on Abend       *\n               ASYNCH=YES,             Allow ASYNC to Continue         *\n               TERM=YES,               Enter Even on Cancel            *\n               MF=(E,DSAPLIST)         Point at List Form\n*\n.G010    ANOP\n.*\n&XTRC    SETC  'NO'                    Note Value in GBLC for PGMEXIT\n         AIF   ('&TRACE' NE 'YES').G020\n&XTRC    SETC  'YES'\n*\n*        #TRACE TYPE=PGME,             Indicate Program Entry Call     *\n               BUFFDAT=&BUFFDAT,       Buffer Trace Data YES/NO        *\n               BUFFMAX=&BUFFMAX,       Buffer Size in Lines            *\n               MSG=&MSG,               Print Desired message           *\n               REGS=&REGS,             Print Desired message           *\n               DATA=&DATA,             Print Any Desired Data          *\n               DD=&TRCDD,              DDNAME for Traces               *\n               PARM=&PARM              Print Input Parameters\n&PGM060  #TRACE TYPE=PGME,                                             *\n               BUFFDAT=&BUFFDAT,                                       *\n               BUFFMAX=&BUFFMAX,                                       *\n               MSG=&MSG,                                               *\n               REGS=&REGS,                                             *\n               DATA=&DATA,                                             *\n               DD=&TRCDD,                                              *\n               PARM=&PARM\n.*\n.** Generate ESTAE Support if Requested\n.*\n.G020    ANOP\n         AIF   ('&ESTAE' NE 'YES').G030\n&PESTAE  SETB  1                       Tell PGMEXIT to Cancel ESTAE\n         PGMESTAE ,                    Gen Support for DSARETRY\n.*\n.G030    ANOP\n         EREGG R14,R3                  Restore Param Address From Stk\n         LAMY  AR2,AR3,=14A(0)         Set Primary ASID for All\n         LMH   R2,R3,=14A(0)           Zero High Words of GPRs\n*\n.*\n.*--------------------------------------------------------------------*\n.** KILBDD - Add Fluff to Data Areas to Disable BDDD Instruction Set  *\n.*--------------------------------------------------------------------*\n.*\n.KIL000  ANOP\n         J     &PGM999                  -> Done\n         AIF   ('&KILLBDD' NE 'YES').KIL999\n&LCDSA         LOCTR ,                  Setup Primary DSA LOCTR\n         DS    XL4096                   Add Fluff Area\n*\n&LCATA         LOCTR ,                  Setup Primary ATB LOCTR\n         DS    XL4096                   Add Fluff Area\n*\n&LCCON         LOCTR ,                  CON LOCTR - For Constants\n         DS    XL4096                   Add Fluff Area\n*\n&LCSCT         LOCTR ,                  SCT LOCTR - Main CSECT\n         DS    XL4096                   Add Fluff Area\n*\n.KIL999  ANOP\n&PGM999  DS    0H\n         AGO   .EXIT\n.*\n.*--------------------------------------------------------------------*\n.** MNOTE Error Messages                                              *\n.*--------------------------------------------------------------------*\n.*\n.MNOTE1  MNOTE 8,'PGMNTRY: More than four registers for BASE='\n         AGO   .EXIT\n.*\n.MNOTE2  MNOTE 8,'PGMNTRY: More than four registers for CBAS='\n         AGO   .EXIT\n.*\n.MNOTE3  MNOTE 8,'PGMNTRY: More than four registers for DBAS='\n         AGO   .EXIT\n.*\n.MNOTE4  MNOTE 8,'PGMNTRY: IMP=value invalid. Must be BRANCH, SVC, or T*\n               RAP2.'\n         AGO   .EXIT\n.*\n.** Exit Macro\n.*\n.EXIT    ANOP\n         MEXIT ,\n         MEND\n\n./ ADD NAME=RMEDSECT 0100-10050-10050-1200-00053-00053-00000-RHDMAC\n         MACRO ,\n&LBL     RMEDSECT ,\n***********************************************************************\n* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n*                                                                     *\n** RMEDSECT - DSECT Area for chain of Task Related RESMGR Exits       *\n*                                                                     *\n*                                                                     *\n*    This DSECT area is pointed to by STCBRMEF in the STCB and is     *\n*  a chain of task related RME control blocks representing the        *\n*  resource manager exit routines in effect for the task.             *\n*                                                                     *\n*                                                                     *\n* Date     Developer Cng# Comments                                    *\n* ======== ========= ==== =========================================== *\n* 00/00/00 R.Harper  M000 Macro Developed                             *\n*                                                                     *\n***********************************************************************\n*\nRMEDSECT DSECT ,                       RME DSECT AREA\nRMEID    DS    CL4'RME'                RME Identifier\n         DS    F                       ..Unknown\nRMEBCKPT DS    A                       ..Prev RME on Chain or Zero\nRMEFWDPT DS    A                       ..Next RME on Chain or Zero\n         DS    F                       ..Unknown\nRMERESID DS    CL8                     ..Name of RESMGR Exit\n         DS    2F                      ..Unknown\nRMEPARAM DS    2F                      ..Parameter passed to Exit\n         DS    F                       ..Unknown\nRMELNGTH EQU   *-RMEDSECT              Length of DSECT Area\n         MEND ,\n./ ADD NAME=SQUEEZE  0100-10050-10050-1200-00262-00262-00000-RHDMAC\n         MACRO\n&LBL     SQUEEZE &BEG=,             Beginning Address                  *\n               &END=,               Last Address of Area               *\n               &MF=E,               MF=E OR MF=L                       *\n               &P=SQZ               Label Prefix to use for expansion\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*\n.** SQEEZE - Remove multiple occurances of blanks fomm a string\n.*           allowing only one blank between non-blank characters.\n.*\n.** Input Parameters\n.*\n.* BEG=     - Beginning Address\n.* END=     - Ending    Address Plus 1\n.* MF=      - MF=E/L\n.* &P=      - Prefix to use for macro labels\n.*\n.*\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*\n.**********************************************************************\n.*\n.** Define Variables\n.*\n         COPY PGMGBLAS              Get Program Globals\n         GBLB &SQZTBLS              On - Tables Have Been Generated\n.*\n.** Validate Input\n.*\n         AIF   ('&MF' NE 'E' AND '&MF' NE 'L').MNOTE3\n         AIF   ('&MF' EQ 'L').MFl\n         AIF   ('&BEG' EQ '').MNOTE1\n         AIF   ('&END' EQ '').MNOTE2\n.*\n.** Generate Code\n.*\n         STM   14,2,&P.$SAVE        Preserve Volital Registers\n.*\n.**      Get Starting and Ending Addresses\n.*\n         AIF   (T'&BEG EQ 'A').GEN010\n         AIF   (T'&BEG EQ 'F').GEN010\n         AIF   (T'&BEG NE 'V').GEN020\n.GEN010  ANOP\n         L     14,&BEG              Get Start Address\n         AGO   .GEN035\n.GEN020  ANOP\n         AIF   ('&BEG(1)' EQ '&BEG').GEN030\n         LR    14,&BEG(1)           Get Start Address\n         AGO   .GEN035\n.GEN030  ANOP\n         LA    14,&BEG              Get Start Address\n.*\n.GEN035  ANOP\n         AIF   (T'&END EQ 'A').GEN040\n         AIF   (T'&END NE 'V').GEN050\n.GEN040  ANOP\n         L     15,&END              Get End Address\n         AGO   .GEN070\n.GEN050  ANOP\n         AIF   ('&BEG(1)' EQ '&BEG').GEN060\n         LR    15,&END(1)           Get End Address\n         AGO   .GEN070\n.GEN060  ANOP\n         LA    15,&END              Get End Address\n.GEN070  ANOP\n         XC    &P.$DATA(&P.$DATL),&P.$DATA  Zero Data Area\n         MVC   &P.$EYE,=C'SQZ$DATA'  Set Eys Catcher\n         ST    14,&P.$BEG           Save Beg Address\n         ST    14,&P.$CUR           Save Current Address\n         ST    15,&P.$END           Save End Address\n*\n** Squeeze Blanks From an Area\n*\n&P.SQ010 DS    0H               -*- Main Loop\n         L     14,&P.$CUR           Load Current Address\n         L     15,&P.$END           Load Ending  Address\n         SLR   15,14                Get Residual Length\n         CH    15,=H'256'           More Than Max for TRT?\n         BNH   &P.SQ020             No  ->\n         LH    15,=H'256'           Set to Use Max for TRT\n&P.SQ020 DS    0H\n         LTR   15,15                Are We Done?\n         BZ    &P.DONE              Yes ->\n         BCTR  15,0                 Decrement for Assembler\n*\n         CLI   0(14),C' '           Are we Pointing at a Blank?\n         BE    &P.SQ050             Yes ->\n*\n** Pointing at Non-blank\n*\n&P.SQ030 DS    0H               -*- Search for a Blank\n         LARL  3,&P.TABLB           Get Address of Table\n         EX    15,&P.EXTRB          Via Executed TRT\n         BNZ   &P.SQ040             Yes -> Found\n         LA    14,1(14,15)          Bump Current 256-Bytes\n         ST    14,&P.$CUR           Save Position\n         B     &P.SQ010             -> Loop\n*\n&P.SQ040 DS    0H               -*- Found a Blank or Quote\n         CLM   2,B'0001',=C''''     Found Quote?\n         BE    &P.SQ100             Yes -> Go Process Quote\n         LA    1,0(,1)              Clear High bit/byte\n         ST    1,&P.$CUR            Save New Current Position\n         B     &P.SQ010             -> Loop\n*\n** Pointing at a Blank\n*\n&P.SQ050 DS    0H               -*- Must be at Least Two Blanks\n         CLC   0(2,14),=CL2' '      Are there at least two?\n         BE    &P.SQ060             Yes ->\n         LA    14,1(,14)            Point at non-blank\n         ST    14,&P.$CUR           And save as current\n         B     &P.SQ010             ->\n*\n&P.SQ060 DS    0H               -*- Search for First Non-Blank\n         LA    1,1(14,15)           Point Past Last Byte\n         LARL  3,&P.TABLC           Get Address of Table\n         EX    15,&P.EXTRC          Look for Non-Blank Char\n         BNZ   &P.SQ070             Yes -> Found\n*\n         CH    15,=H'255'           Were We Doing Max?\n         BL    &P.DONE              Yes -> Done\n*\n&P.SQ070 DS    0H               -*- Squeeze Out Blanks Via MVCL\n         LR    0,1                  Set From Pointer\n         L     1,&P.$END            Get End Pointer\n         SR    1,0                  Get length to Move From\n         ICM   1,B'1000',=C' '      Set Fill Character\n         LA    14,1(,14)            Set To Pointer as $CUR+1\n         ST    14,&P.$CUR           Set As New Current Pointer\n         L     15,&P.$END           Get From Pointer\n         SR    15,14                Get From Length\n         BZ    &P.DONE              -> Done\n         MVCL  14,0                 Squeeze Out Blanks\n*\n         CLM   2,B'0001',=C''''     Was Non-Blank a Quote?\n         BE    &P.SQ100             Yes -> Go Process Quote\n         B     &P.SQ010             -> Loop\n*\n** Within Quoted String - Entered When Quote Encountered\n*\n&P.SQ100 DS    0H                   R1 = Current\n         L     14,&P.$CUR           Load Current Position -> Quote\n         LA    14,1(,14)            Point Past Quote\n*\n&P.SQ110 DS    0H               -*- Search for Ending Quote\n         L     15,&P.$END           Get Ending Address\n         SLR   15,14                Get Residual Length\n         CH    15,=H'256'           More than Max for TRT?\n         BNH   &P.SQ120             Yes ->\n         LH    15,=H'256'           Set to search Max\n&P.SQ120 DS    0H\n         BCTR  15,0                 Decrement for Assembler\n         LARL  3,&P.TABLQ           Get Address of Table\n         EX    15,&P.EXTRQ          Look for Ending Quote\n         BNZ   &P.SQ130             Yes -> Found Ending Quote\n         LA    14,1(14,15)          Bump Pointer\n         B     &P.SQ110             -> Try Again\n*\n&P.SQ130 DS    0H               -*- Found Ending Quote\n         LA    14,1(,1)             Point After Ending Quote\n         ST    14,&P.$CUR           Save as Current Position\n         B     &P.SQ010             -> Loop\n*\n&P.DONE  DS    0H\n         LM    14,2,&P.$SAVE        Refresh Volital Registers\n.*\n.**      Generate Tables\n.*\n         AIF   (&SQZTBLS).NOTBLS    Do We Generate Tables?\n&SQZTBLS SETB  1                    ..Don't Generate Twice\n.*\n.** Define Tables\n.*\n         B     &P.TABND             Branch Around Tables\n*\n** TRT Tables Generated for SQUEEZE Macro\n*\n&LCCN1         LOCTR ,              Generate in Constant Area\n*\n&P.EXTRB TRT   0(*-*,14),0(R3)      Look for Blanks\n&P.EXTRC TRT   0(*-*,14),0(R3)      Look for Characters\n&P.EXTRQ TRT   0(*-*,14),0(R3)      Look for Quote\n*\n         DS    0D\n&P.TABLB DC    256X'00'         -*- Table to Scan For Blanks\n         ORG   &P.TABLB+C' '        Point at porper Slot\n         DC    C' '                 Find This Character - Space\n         ORG   &P.TABLB+C''''       Point at porper Slot\n         DC    C''''                Find This Character - Quote\n         ORG   ,\n*\n         DS    0D\n&P.TABLC DC    256X'01'         -*- Table to Scan For Non-Blanks\n         ORG   &P.TABLC+C' '        Point at Proper Slot\n         DC    X'00'                Skip This Character - Space\n         ORG   ,\n*\n         DS    0D\n&P.TABLQ DC    256X'00'         -*- Table to Scan Quotes\n         ORG   &P.TABLQ+C''''       Point at Proper Slot\n         DC    C''''                Find This Character - Quote\n         ORG   ,\n&LCSCT         LOCTR ,              Reset to Program LOCTR\n&P.TABND DS    0H\n.*\n.NOTBLS  ANOP\n         AGO   .MEXIT               -> Done\n\n.*\n.** Generate List Form for SQEEZE Macro\n.*\n.MFL     ANOP                       Generate List Form\n&P.$DATA DS    0D                   Doubleword Alligned\n&P.$EYE  DS    CL8                  Eye Catcher C'SQZDATA'\n&P.$SAVE DS    6F                   Reg Save Area R14,R15,R0,R1,R2,R3\n&P.$BEG  DS    A                    Beginning Address\n&P.$CUR  DS    A                    Current Address\n&P.$END  DS    A                    Ending Address\n&P.$DATL EQU   *-&P.$DATA           Length of Area\n         AGO   .MEXIT\n*\n** Define MNOTE Errors\n*\n.MNOTE1  MNOTE 8,'SQZ0001 BEG= parameter was not specified.'\n         AGO   .MEXIT\n.MNOTE2  MNOTE 8,'SQZ0002 END= parameter was not specified.'\n         AGO   .MEXIT\n.MNOTE3  MNOTE 8,'SQZ0003 MF= invalid, must be E or L.'\n         AGO   .MEXIT\n*\n** Exit Macro\n*\n.MEXIT   ANOP\n         MEND\n./ ADD NAME=SUBEXIT  0100-10050-10050-1200-00117-00117-00000-RHDMAC\n         MACRO ,\n&LBL     SUBEXIT &MSG=,&REGS=,&DATA=,&PRINT=NOGEN\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** SUBEXIT -Exit Linkage for a Subroutine                            *\n.*                                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS             Copy Globlas\n.*\n         LCLC &L                    Generated Label if Not Specified\n         LCLC &S,&SAVE\n         LCLC &AM,&AR               Amode and AR Values\n.*\n&S       SETC '&SUBN(&SUBH)'\n&SAVE    SETC '&SUBS(&SUBH)'\n&AM      SETC '&SUBA(&SUBH)'        Get AMODE Value\n&AR      SETC '&SUBM(&SUBH)'        Get AR Value\n.*                                   `\n&L       SETC  '&S'.'X'\n         AIF   ('&LBL' EQ '').SUB000\n&LBL     DS    0H\n.*\n.** Restore SYSSTATE AMODE and ASCENV Status\n.*\n.SUB000  ANOP\n         AIF   (('&AM' EQ '') AND ('&AR' EQ '')).SUB100\n         AIF   ('&AR' EQ '').SUB020\n         AIF   ('&AR' EQ 'AR').SUB010\n         SAC   000                     Reset Back to Primary Mode\n         AGO   .SUB020\n.SUB010  ANOP\n         SAC   512                     Reset Back to AR Mode\n.*\n.SUB020  ANOP\n         AIF   ('&AM' EQ '').SUB040\n         AIF   ('&AM' EQ 'NO').SUB030\n         SAM64 ,                       Reset to AMODE=64\n         AGO   .SUB040\n.SUB030  ANOP\n         SAM31 ,                       Reset to AMODE=31\n.*\n.SUB040  ANOP\n*        SYSSTATE AMODE64=&AM,ASCENV=&AR Reset SYSSTATE Value\n         SYSSTATE AMODE64=&AM,ASCENV=&AR\n.*\n.** Restore Any Saved Register from SAVE= on SUBNTRY Macro\n.*\n.SUB100  ANOP\n         AIF   ('&SAVE' EQ '').SUB120\n         AIF   (&SUBC(&SUBH) EQ 1).SUB110\n         LMG   &SAVE,$&S+8             Load Saved Registers\n         AGO   .SUB120\n.SUB110  ANOP\n         LG    &SAVE,$&S+8             Load Saved Register\n.*\n.** Restore Return Linkage\n.*\n.SUB120  ANOP\n         LG    R14,$&S                 Load Return Address\n.*\n.** Generate SUBEXIT Trace Point\n.*\n         AIF   ('&XTRC' NE 'YES').SUB130\n*        #TRACE TYPE=SUBX,             Indicate Program Exit Call      *\n               MSG=&MSG,               Print PGMEXIT Message           *\n               REGS=&REGS,             Print Desired Regs              *\n               DATA=&DATA              Print Any Desired Data\n&L       #TRACE TYPE=SUBX,                                             *\n               MSG=&MSG,                                               *\n               REGS=&REGS,                                             *\n               DATA=&DATA,                                             *\n               PRINT=&PRINT\n.*\n.** Return to Caller\n.*\n.SUB130  ANOP\n         BR    R14                  -> Return\n&SUBH    SETA  &SUBH+1\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE1  ANOP\n         MNOTE 8,'SUBEXIT: ..'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND ,\n./ ADD NAME=SUBNTRY  0100-10050-10050-1200-00191-00191-00000-RHDMAC\n         MACRO ,\n&LBL     SUBNTRY &SAVE=,               Registers to Save On Entry      *\n               &AMODE=,                31/64 to Specify AMODE          *\n               &ASCENV=,               P/AR, Primary or AR Mode        *\n               &MSG=,                  Tracing Parameters              *\n               &REGS=,                 (Same)                          *\n               &DATA=,                 (Same)                          *\n               &PRINT=NOGEN\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** SUBNTRY - Entry Linkage for Subroutines                           *\n.*                                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS                Copy Globals\n.*\n         LCLC  &S,&L,&R\n         LCLC  &SAM,&ASCE\n         LCLA  &I,&P,Q,&K\n&L       SETC  '&LBL'.'E'\n.*\n&SAM     SETC  ''\n&ASCE    SETC  ''\n.*\n.** Save Return Linkage\n.*\n         AIF   ('&LBL' EQ '').MNOTE01\n&I       SETA  &SUBH\n&SUBN(&I) SETC '&LBL'                  Save Name of Subroutine\n&S       SETC  '&SUBN(&I)'\n*\n&SUBC(&I) SETA 0                       Initialize Count of Saved Regs\n&SUBS(&I) SETC ''                      Pass This to SUBEXIT\n&SUBA(&I) SETC ''                      Initialize State\n&SUBM(&I) SETC ''                      (Same)\n.*\n&LBL     DS    0H\n         STG   R14,$&S                 Save Return Address\n.*\n.*--------------------------------------------------------------------*\n.** SAVE Additional Registers\n.*--------------------------------------------------------------------*\n.*\n         AIF   ('&SAVE' EQ '').SAV999\n         AIF   (N'&SAVE NE 2).MNOTE02\n         AIF   ('&SAVE'(1,1) NE '(').MNOTE02\n.*\n         AIF   ('&SAVE(1)'(1,1) NE 'R').SAV010\n&K       SETA  K'&SAVE(1)-1\n&R       SETC  '&SAVE(1)'(2,&K)\n&P       SETA  &R\n         AGO   .SAV020\n.SAV010  ANOP\n&P       SETA  &SAVE(1)\n.SAV020  ANOP\n.*\n         AIF   ('&SAVE(2)'(1,1) NE 'R').SAV030\n&K       SETA  K'&SAVE(2)-1\n&R       SETC  '&SAVE(2)'(2,&K)\n&Q       SETA  &R\n         AGO   .SAV040\n.SAV030  ANOP\n&Q       SETA  &SAVE(2)\n.SAV040  ANOP\n.*\n&K       SETA  1\n         AIF   (&P EQ &Q).SAV200       Save 1 Register\n         AIF   (&P GT &Q).SAV100       Over R15\n&K       SETA  &Q-&P+1                 Get Count of Regs\n         AGO   .SAV110\n.*\n.SAV100  ANOP                          1st Reg Gt 2nd Reg\n&K       SETA  16-&P                   Get Count of Regs\n&K       SETA  &K+&Q+1                 (Same)\n.SAV110  ANOP                          1st Reg Gt 2nd Reg\n&SUBC(&I) SETA &K                      Count of Saved Regs For SUBEXIT\n.*\n         STMG  &SAVE(1),&SAVE(2),$&S+8 Save Volitale Registers\n&SUBS(&I) SETC '&SAVE(1)'.',&SAVE(2)'  Pass This to SUBEXIT\n         AGO   .SAV999\n.*\n.SAV200  ANOP\n         STG   &SAVE(1),$&S+8          Save Volitale Rewgister\n&SUBS(&I) SETC '&SAVE(1)'              Pass This to SUBEXIT\n.*\n.SAV999  ANOP\n.*\n.*--------------------------------------------------------------------*\n.** Set AMODE and ASCENV                                              *\n.*--------------------------------------------------------------------*\n.*\n         AIF  (('&AMODE' EQ '') AND ('&ASCENV' EQ '')).TRC000\n.*\n.MOD010  ANOP\n         AIF  ('&AMODE' EQ '').MOD100\n&SUBA(&I) SETC '&SYSAM64'               Save Current State\n         AIF  ('&AMODE' EQ '31').MOD020\n&SAM     SETC  'YES'\n         SAM64 ,                        Change State\n         AGO   .MOD100\n.MOD020  ANOP\n&SAM     SETC  'NO'\n         SAM31 ,                        Change State\n.*\n.MOD100  ANOP\n         AIF  ('&ASCENV' EQ '').MOD120\n&SUBM(&I) SETC '&SYSASCE'               Save Current State\n         AIF  ('&ASCENV' EQ 'AR').MOD110\n&ASCE    SETC  'P'\n         SAC   000                      Change Current State\n         AGO  .MOD120\n.MOD110  ANOP\n&ASCE    SETC  'AR'\n         SAC   512                      Change Current State\n.*\n.*--------------------------------------------------------------------*\n.** Generate SYSTATE Macro\n.*--------------------------------------------------------------------*\n.*\n.MOD120  ANOP\n         AIF   (('&SAM' EQ '') OR ('&ASCE' EQ '')).MOD130\n         SYSSTATE AMODE64=&SAM,ASCENV=&ASCE\n         AGO   .MOD150\n.MOD130  ANOP\n         AIF   ('&ASCE' NE '').MOD140\n         SYSSTATE AMODE64=&SAM\n         AGO   .MOD150\n.MOD140  ANOP\n         SYSSTATE ASCENV=&ASCE\n.MOD150  ANOP\n.*\n.*--------------------------------------------------------------------*\n.** Generate Subroutine Trace Point\n.*--------------------------------------------------------------------*\n.*\n.TRC000  ANOP\n         AIF   ('&XTRC' NE 'YES').SUBX020\n*        #TRACE TYPE=SUBE,              Indicate Program Exit Call     *\n               MSG=&MSG,                Print PGMEXIT Message          *\n               REGS=&REGS,              Print Desired Regs             *\n               DATA=&DATA               Print Any Desired Data\n&L       #TRACE TYPE=SUBE,                                             *\n               MSG=&MSG,                                               *\n               REGS=&REGS,                                             *\n               DATA=&DATA,                                             *\n               PRINT=&PRINT\n.*\n.SUBX020 ANOP\n*\n         AGO   .MEND\n.*\n.** ERROR MESSAGES\n.*\n.MNOTE01 ANOP\n         MNOTE 8,'SUBNTRY: LABEL WAS NOT PROVIDED AND IS REQUIRED.'\n         AGO   .MEND\n.MNOTE02 ANOP\n         MNOTE 8,'SUBNTRY: SAVE= Parameter is not a sublist (x,y).'\n         AGO   .MEND\n.*\n.MEND    ANOP\n         MEND  ,\n./ ADD NAME=SVCEXIT  0100-10050-10050-1200-00150-00150-00000-RHDMAC\n         MACRO\n&NAME    SVCEXIT &RC=,&RS=,            Return Code                     *\n               &R1=,                   Other Parameter Register        *\n               &MSG=,                  Message to Print                *\n               &REGS=ALL,              Registers to Print              *\n               &DATA=                  Data to Print\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** SVCEXIT - Define Exit for an SVC                                  *\n.*                                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 00/00/00 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS\n.*\n.** Generate Label Field if Present\n.*\n         AIF   ('&NAME' EQ '').SVX005\n&NAME    DS    0H\n.*\n.** Process Return Code\n.*\n.SVX005  ANOP\n         AIF   (T'&RC EQ 'O').SVX030   If Parameter Omitted?\n         AIF   ('&RC' NE '*').SVX010   If Value Not Asterisk?\n         L     R15,RBSAVR15            Restore Original Value\n         AGO   .SVX100                 ->\n.SVX010  ANOP\n         AIF   ('&RC' EQ '&RC(1)').SVX020 If not a Register Value?\n         AIF   ('&RC' EQ '15' OR '&RC' EQ 'R15').SVX100\n         LR    R15,&RC                 Use Value From Register\n         AGO   .SVX100                 ->\n.SVX020  ANOP\n         LA    15,&RC                  Use Value From Parameter\n         AGO   .SVX100                 ->\n.SVX030  ANOP\n         L     R15,DSA$RC              Use Default Value\n.*\n.** Process Reason Code\n.*\n.SVX100  ANOP\n         AIF   (T'&RS EQ 'O').SVX130   If Parameter Omitted?\n         AIF   ('&RS' NE '*').SVX110   If Value Not Asterisk?\n         L     R0,RBSAVR0              Restore Original Value\n         AGO   .SVX200                 ->\n.SVX110  ANOP\n         AIF   ('&RS' EQ '&RS(1)').SVX120 If not a Register Value?\n         AIF   ('&RS' EQ '0' OR '&RS' EQ 'R0').SVX200\n         LR    R0,&RS                  Use Value From Register\n         AGO   .SVX200                 ->\n.SVX120  ANOP\n         LA    R0,&RS                  Use Value From Storage\n         AGO   .SVX200                 ->\n.SVX130  ANOP\n         L     R0,DSA$RS               Use Default Value\n.*\n.** Process R1 Parameter Register\n.*\n.SVX200  ANOP\n         AIF   (T'&R1 EQ 'O').SVX230   If Parameter Omitted?\n         AIF   ('&R1' NE '*').SVX210   If Value Not Asterisk?\n         L     R1,RBSAVR1              Restore Original Value\n         AGO   .SVX250                 ->\n.SVX210  ANOP\n         AIF   ('&R1' EQ '&R1(1)').SVX220 If not a Register Value?\n         AIF   ('&R1' EQ '1' OR '&R1' EQ 'R1').SVX250\n         LR    R1,&R1                  Use Value From Register\n         AGO   .SVX250                 ->\n.SVX220  ANOP\n         L     R1,&R1                  Use Value From Storage\n         AGO   .SVX250                 ->\n.SVX230  ANOP\n         XR    R1,R1                   Zero Register On Return\n.*\n.** Generate Traces if Desired\n.*\n.SVX250  ANOP\n         AIF   ('&XTRC' NE 'YES').SVX300\n*        #TRACE TYPE=PGMX,              Indicate Program Exit Call     *\n               MSG=&MSG,                Print SVCEXIT Message          *\n               REGS=&REGS,              Print Desired Regs             *\n               DATA=&DATA               Print Any Desired Data\n         #TRACE TYPE=PGMX,                                             *\n               MSG=&MSG,                                               *\n               REGS=&REGS,                                             *\n               DATA=&DATA\n.*\n.** Freemain Dynamic Storage\n.*\n.SVX300  ANOP\n         L     14,RBSAVR14             Restore Return Address\n         STM   14,1,RBSAVR14           Save Return Codes\n*        SETLOCK OBTAIN,TYPE=LOCAL,    Obtain Local Lock for Branch\n*              MODE=UNCOND,REGS=USE    ..Entry Freemain\n         SETLOCK OBTAIN,TYPE=LOCAL,    Obtain Local Lock for Branch    *\n               MODE=UNCOND,REGS=USE    ..Entry Freemain\n*\n         LR    R1,R13                  Get Address of Area to Free\n         L     R0,DSALENTH             Get length of Area\n*\n         L     R4,RBSAVR4              Reload TCB Address\n         L     R7,RBSAVR7              Reload ASCB Address\n*        FREEMAIN RU,LV=(0),A=(1),     Free Dynamic Storage\n*              SP=230,                 (Same)\n*              BRANCH=YES              (Same)\n         FREEMAIN RU,LV=(0),A=(1),     Free Dynamic Storage            *\n               SP=230,                 (Same)                          *\n               BRANCH=YES              (Same)\n*\n*        SETLOCK RELEASE,TYPE=LOCAL,  Free Local Lock\n*              REGS=USE                (Same)\n         SETLOCK RELEASE,TYPE=LOCAL,  Free Local Lock                  *\n               REGS=USE                (Same)\n.*\n.** Return to Caller\n.*\n         SPKA 0                        Set Key of Zero\n         LM    R14,R1,RBSAVR14         Restore Return Address and Codes\n         BR    R14                     -> Exit SVC\n.*\n.MEND    ANOP\n         MEND\n./ ADD NAME=SVCNTRY  0100-10050-10050-1200-00587-00587-00000-RHDMAC\n         MACRO\n&LBL     SVCNTRY &SVCNO=,              SVC Number for Protocol         *\n               &SVTYP=4,               Type of SVC                     *\n               &TYPE=USER,             USER SVC or HOOK                *\n               &BASE=(R6),             Program Base Registers          *\n               &CBAS=,                 Constant Base Registers         *\n               &DBAS=,                 Extra DSA Bases After R13       *\n               &LEN=4,                 Number of K for DSA             *\n               &AMODE=31,              Program AMODE                   *\n               &RMODE=ANY,             Program RMODE                   *\n               &TRACE=YES,             Allow Program Traces            *\n               &IMP=BASR,              #TRACE Implementation           *\n               &BUFFDAT=NO,            YES/NO to Buffer Trace Data     *\n               &BUFFMAX=,              Number of Lines to Buffer       *\n               &MSG=,                  Message to Print                *\n               &REGS=ALL,              Registers to Print              *\n               &DATA=,                 Data to Print                   *\n               &PRINT=NOGEN            PRINT MODE GEN/NOGEN\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*                                                                    *\n.** SVCNTRY - Define Entry Protocol for an SVC                        *\n.*                                                                    *\n.*    This macro is the foundation for SCVs and SVC hooks. It         *\n.*  establishes the basic structure of the CSECT, the various LOCTR's *\n.*  to be used by other macros in the system. It does the basic stuff *\n.*  like setting up addressability, a patch area, and the MVS save    *\n.*  area.  But it also determines whether tracing is in effect and    *\n.*  initializes the trace facility if the are.                        *\n.*                                                                    *\n.** The Input Parameters Are:                                         *\n.*                                                                    *\n.*    SVCNO   - This parameter defines the SVC number to be used      *\n.*              and places this number in the protocol at the         *\n.*              beginning of the program.                             *\n.*    SVTYP   - This parameter defines the type of SVC which should   *\n.*              be 2/3/4/6, but I've only a 4 to this point.          *\n.*    BASE=   - Specified as a sublist the base registers to be       *\n.*              used for this CSECT. The default value is R12,R11.    *\n.*    CBAS=   - Specified as a sublist the base registers to be       *\n.*              used for this CSECTs Constant Area.                   *\n.*    DBAS=   - Specified as a sublist the base registers to be       *\n.*              used for this CSECTs Dynamic Storage Area. This       *\n.*              would be in addition to R13 whcich is always the      *\n.*              primary DSA base register.                            *\n.*                                                                    *\n.*    TYPE=   - SUBR/MAIN.  The difference here is that TYPE=MAIN     *\n.*              Will allways do a STORAGE OBTAIN to acquire it's      *\n.*              own DSA Upstack seperate from the caller.  The        *\n.*              TYPE=SUBR will use the Upstack of the caller for      *\n.*              his DSA if there is sufficient room available.  If    *\n.*              there is not sufficient room available the macro      *\n.*              will obtain a seperate 4K Upstack DSA to use.         *\n.*    LEN=    - Specified as a decimal number that represents the     *\n.*              length of the DSA Upstack to OBTAIN.  The default     *\n.*              is 4K, and it should be specified as a decimal        *\n.*              number in a multple of 4K. LEN=4 means 4K.            *\n.*    AMODE=  - This value specifies the addressing mode for the      *\n.*              program.  It may be specified as 24, 31, or 64.  The  *\n.*              default value is 31.                                  *\n.*    RMODE=  - This parameter specifies the residency mode for the   *\n.*              program.  This can be 24, 31, or ANY.  The default    *\n.*              value is ANY.                                         *\n.*    PRINT=  - This parameter determines whether the source code     *\n.*              generated by these program management macros will     *\n.*              be generated in the listing. The default is NOGEN.    *\n.*              It is provided for debugging purposes.  If PRINT=GEN  *\n.*              is specified the macros will expand during assembly.  *\n.*                                                                    *\n.*    TRACE=  - This parameter indicates whether or not tracing       *\n.*              should be active for this program.  The default       *\n.*              value is YES but may be specified as NO to disable    *\n.*              all tracing for this CSECT.                           *\n.*    MSG=      Specifies a message to be printed allowinf for        *\n.*              embedded variables in a sublisted string.  Variable   *\n.*              data will be printed according to the type of         *\n.*              variable.  Types C and Z are printes in character     *\n.*              format.  Types F, H and P are printed in decimal      *\n.*              format.  Everything else is printed in hex format.    *\n.*               MSG='This is a message'                              *\n.*               MSG=('The ',COLOR,' HARE ' is ',HEIGHT,' ft. tall.'  *\n.*               MSG=('Show savearea at: ',DSASAVEA)                  *\n.*    DATA=   - Specifies an area in storage that is to be displayed  *\n.*              in hex dump format. An optional title may be specified*\n.*              to identify the area being displayed.  The areas to be*\n.*              displayed must be specified as a sublist within a     *\n.*              sublist.                                              *\n.*               DATA=('My DSA Area',0(R13),DSALNGTH)                 *\n.*               DATA=(('Previous SA in Chain',0(R6),SALNGTH),        *\n.*                     ('Next SA in Chain,',0(R5),(R2))               *\n.*   BUFFDAT= - YES/NO. Specifying YES indicates that trace data be   *\n.*              bufferred and written to sysout only at termination.  *\n.*   BUFFMAX= - Number < 64000. The number of print lines to be       *\n.*              maintained in the buffer above-the-line in a wrap     *\n.*              around table for storage of trace output.             *\n.*                                                                    *\n.*                                                                    *\n.** Change History                                                    *\n.*                                                                    *\n.* Date     Developer Cng# Comments                                   *\n.* ======== ========= ==== ========================================== *\n.* 03/30/07 R.Harper  M000 Macro Developed                            *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*\n.**********************************************************************\n.* Define Variables                                                   *\n.**********************************************************************\n.*\n         COPY  PGMGBLAS                Copy Global Variables\n.*\n         LCLC  &USING                  USING Statment Build Area\n         LCLC  &START                  Label For Housekeeping Code\n         LCLC  &LBL1,&LBL2,&LBL3       Generic Labels\n         LCLC  &DSALEN,&OVCHK,&ENDCT\n.*\n         LCLC  &D                      DSA Prefix\n         LCLA  &L                      DSA Length for Getmain\n.*\n         LCLC  &A,&B,&C                General Work Variables\n         LCLA  &X,&Y,&Z,&N             General Work Variables\n.*\n         LCLC  &PGM000,&PGM010,&PGM020 Program Labels\n         LCLC  &PGM030,&PGM040,&PGM050 (Same)\n         LCLC  &PGM060,&PGM070,&PGM080 (Same)\n.*\n.** Save Current RSECT Name and Generate TRACE Constant LOCTR Name\n.*\n&CASECT  SETC  '&LBL'                   Set Current RSECT Name\n         AIF   (K'&CASECT LT 6).BILD010 Build LOCTR Name for Traces\n&N       SETA  K'&CASECT+3-8+1          (Same)\n&C       SETC '&CASECT'(&N,9-&N)        (Same)\n.BILD010 ANOP                           (Same)\n&DASECT  SETC  '@#$'.'&C'               Set Trace Constant LOCTR Name\n.*\n.** Initialize Global Variables\n.*\n         COPY  PGMGBINI                Initialize Glogal Variables\n.*\n&D       SETC  '&LCDSA'                Set DSA Prefix-Small Footprint\n&DSALEN  SETC  '&LCDSA'.'L'            Set Label Small Footprint\n&OVCHK   SETC  '&LCDSA'.'_OVCHK'       Set Label for Overlay Check\n&ENDCT   SETC  '&LCDSA'.'_ENDCT'       Set Label Ending Eye Catcher\n.*\n&PAMODE  SETA  &AMODE                  Save AMODE Value\n&PPRINT  SETC  '&PRINT'                Save PRINT Value\n.*\n&L       SETA  &LEN*1024\n&DSAL    SETA  &L                      Save for PGMEXIT Macro\n&SUBH    SETA  1                       Initialize Subr Count\n.*\n.** Generate Lables Needed for PGMNTRY\n.*\n&PGM000  SETC  'P00'.'&SYSNDX'         Build Required Labels\n&PGM010  SETC  'P10'.'&SYSNDX'         (Same)\n&PGM020  SETC  'P20'.'&SYSNDX'         (Same)\n&PGM030  SETC  'P30'.'&SYSNDX'         (Same)\n&PGM040  SETC  'P40'.'&SYSNDX'         (Same)\n&PGM050  SETC  'P50'.'&SYSNDX'         (Same)\n&PGM060  SETC  'P60'.'&SYSNDX'         (Same)\n.*\n         AIF   ('&MACS' EQ 'Y').NOMAC  Have macros Been Included?\n&MACS    SETC  'Y'\n         PUSH  PRINT\n         PRINT OFF\n         COPY  ASMMSP                  Structured Programming Macs\n         COPY  IEABRC                  Branch Relative Instrs\n         ASMDREG ,                     Define Register Equates\n         DSADSECT                      Bring in DSA Prefix\n         POP   PRINT\n.NOMAC   ANOP\n         PRINT ON,&PRINT\n.*\n.**********************************************************************\n.* Basic Validation of Required Parameters                            *\n.**********************************************************************\n.*\n         AIF   ('&LBL' EQ '').MNOTE5\n         AIF   (T'&SVCNO EQ 'O').MNOTE6\n         AIF   (('&SVTYP' NE '2') AND ('&SVTYP' NE '3') AND            *\n               ('&SVTYP' NE '4') AND ('&SVTYP' NE '6')).MNOTE9\n         AIF   (('&TYPE' NE 'USER') AND ('&TYPE' NE 'HOOK')).MNOTE8\n.*\n.**********************************************************************\n.* Setup Basic RSECT and LOCTR Structure                              *\n.**********************************************************************\n.*\n&LBL     RSECT ,\n&LBL     AMODE &AMODE                   Establish AMODE\n&LBL     RMODE &RMODE                   Establish RMODE\n.*\n&LCSCT         LOCTR ,                  SCT LOCTR - Main CSECT\n&LCSC1         LOCTR ,                  SCT LOCTR - Middle 1 CSECT\n&LCSC2         LOCTR ,                  SCT LOCTR - Middle 2 CSECT\n&LCSPG         LOCTR ,                  SPG LOCTR - SUB Programs\n*\n&LCCON         LOCTR ,                  CON LOCTR - For Constants\n&LCCN1         LOCTR ,                  CON LOCTR 1 For Constants\n&LCCN2         LOCTR ,                  CON LOCTR 2 For Constants\n&LCTRC         LOCTR ,                  TRC LOCTR - For Trace Data\n*\n&DSDSA         DSECT ,                  Setup Primary DSA LOCTR\n         DS    XL(DSAPFXLN)             Reserve Space for DSA Prefix\n&LCDSA         LOCTR ,                  Setup Primary DSA LOCTR\n&LCDSB         LOCTR ,                  Setup Middle1 DSA LOCTR\n&LCDSC         LOCTR ,                  Setup Middle2 DSA LOCTR\n&LCDSD         LOCTR ,                  Setup Middle3 DSA LOCTR\n&LCDSE         LOCTR ,                  Setup Ending  DSA LOCTR\n.*\n.**********************************************************************\n.*  Setup Initial SVC Addressability                                  *\n.**********************************************************************\n.*\n&LCSCT   LOCTR ,                       Reset LOCTR For This CSECT\n         USING &LBL,R6                 SVCs Use R6 as Initial Base\n&START   SETC  'SVE&SYSNDX'            Generate a Branch Label\n         J     &START                  Branch to Housekeeping Code\n.*\n.**********************************************************************\n.*  Define SVC Protocol                                               *\n.**********************************************************************\n.*                                  -*- Define SVC Protocol\nPROTOCOL DS    0F                      Dynamic SVC Protocol\nPROTNAME DC    CL8'&LBL'               ..User SVC/Hook Name\nPROTLNTH DC    F'0'                    ..Length for Freemain\nPROTNEXT DC    A(0)                    ..Previous SVC Entry Point\nPROTTPLK DC    A(0)                    ..Previous SVC Type & Locks Word\nPROTTYPE DC    C'&SVTYP'               ..SVC Type, 2/3/4/6\nPROTSVCN DC    AL1(&SVCNO)             ..SVC Number to Use\n         DC    XL2'0'                  ..(Reserved)\n         DC    4F'0'                   ..(Reserved)\n.*\n.**********************************************************************\n.*  Define Patch Area                                                 *\n.**********************************************************************\n.*\n         DC    CL64'&LBL Assembled on, &SYSDATE, &SYSTIME '\n         #CPYRGT                       Generate Copyright Notice\n         DROP  R6                      Drop Temp Base\n.*\n.**********************************************************************\n.* Define Required DSECT Areas                                        *\n.**********************************************************************\n.*\n          PUSH  PRINT\n          PRINT OFF\n          IKJTCB ,\n          USING TCB,R4\n          IHARB DSECT=YES\n          ORG   RBEXSAVE+0\nRBSAVR13 DS    F\nRBSAVR14 DS    F\nRBSAVR15 DS    F\nRBSAVR0  DS    F\nRBSAVR1  DS    F\nRBSAVR2  DS    F\nRBSAVR3  DS    F\nRBSAVR4  DS    F\nRBSAVR5  DS    F\nRBSAVR6  DS    F\nRBSAVR7  DS    F\nRBSAVEA  EQU   RBEXSAVE,*-RBEXSAVE,C'X'\n         USING RBBASIC,R5\n.*\n.**********************************************************************\n.*  SPECIAL REGISTER EQUATES FOR SUPERVISOR SERVICE                   *\n.**********************************************************************\n.*\nRCVT     EQU   R3                      CVT  Pointer On Entry\nRTCB     EQU   R4                      TCB  Pointer On Entry\nRSRB     EQU   R5                      SVRB Pointer On Entry\nRASB     EQU   R7                      ASCB Pointer On Entry\n         POP   PRINT\n.*\n.**********************************************************************\n.* Setup Program Addressability                                       *\n.**********************************************************************\n.*\n&LCSCT   LOCTR ,\n&START   DS    0H\n         STM   R13,R7,RBEXSAVE         Save Registers\n.*\n.** Setup Program Bases - If Requested\n.*\n.B000    ANOP\n         AIF   ('&BASE(1)' EQ '').B005  -> If No Base Registers\n         LR    &BASE(1),R6              Setup Program Addressability\n         AIF   ('&BASE(2)' EQ '').B001\n         LA    &BASE(2),2048(,&BASE(1)) 2nd Base Register\n         LA    &BASE(2),2048(,&BASE(2)) (Same)\n         AIF   ('&BASE(3)' EQ '').B001\n         LA    &BASE(3),2048(,&BASE(2)) 3rd Base Register\n         LA    &BASE(3),2048(,&BASE(3)) (Same)\n         AIF   ('&BASE(4)' EQ '').B001\n         LA    &BASE(4),2048(,&BASE(3)) 4th Base Register\n         LA    &BASE(4),2048(,&BASE(4)) (Same)\n         AIF   ('&BASE(5)' NE '').MNOTE1\n.*\n.B001    ANOP\n         AIF   ('&BASE(4)' EQ '').B002\n         USING &LBL,&BASE(1),&BASE(2),&BASE(3),&BASE(4)\n         AGO   .B005\n.B002    ANOP\n         AIF   ('&BASE(3)' EQ '').B003\n         USING &LBL,&BASE(1),&BASE(2),&BASE(3)\n         AGO   .B005\n.B003    ANOP\n         AIF   ('&BASE(2)' EQ '').B004\n         USING &LBL,&BASE(1),&BASE(2)\n         AGO   .B005\n.B004    ANOP\n         AIF   ('&BASE(1)' EQ '').B005\n         USING &LBL,&BASE(1)\n.B005    ANOP\n.*\n.** Setup Constant Base Registers if Requested\n.*\n         AIF   ('&CBAS(1)' EQ '').C001\n         LARL  &CBAS(1),&CONPFX         Setup Constant Addressability\n         AIF   ('&CBAS(2)' EQ '').C001\n         LA    &CBAS(2),2048(,&CBAS(1)) 2nd Base Register\n         LA    &CBAS(2),2048(,&CBAS(2)) (Same)\n         AIF   ('&CBAS(3)' EQ '').C001\n         LA    &CBAS(3),2048(,&CBAS(2)) 3rd Base Register\n         LA    &CBAS(3),2048(,&CBAS(3)) (Same)\n         AIF   ('&CBAS(4)' EQ '').C001\n         LA    &CBAS(4),2048(,&CBAS(3)) 4th Base Register\n         LA    &CBAS(4),2048(,&CBAS(4)) (Same)\n         AIF   ('&CBAS(5)' NE '').MNOTE2\n.*\n.C001    ANOP\n         AIF   ('&CBAS(4)' EQ '').C002\n         USING &CONP,&CBAS(1),&CBAS(2),&CBAS(3),&CBAS(4)\n         AGO   .C005\n.C002    ANOP\n         AIF   ('&CBAS(3)' EQ '').C003\n         USING &CONP,&CBAS(1),&CBAS(2),&CBAS(3)\n         AGO   .C005\n.C003    ANOP\n         AIF   ('&CBAS(2)' EQ '').C004\n         USING &CONP,&CBAS(1),&CBAS(2)\n         AGO   .C005\n.C004    ANOP\n         AIF   ('&CBAS(1)' EQ '').C005\n         USING &CONP,&CBAS(1)\n         AGO   .C005\n.C005    ANOP\n         LAM   AR0,AR15,=16A(0)         Set Primary ASID for All\n         LMH   R0,R15,=16A(0)           Zero High Words of GPRs\n.*\n.*--------------------------------------------------------------------*\n.** Obtain and Establish Addressability to Upstack DSA                *\n.*--------------------------------------------------------------------*\n.*\n         USING &DSDSA,R13               Setup DSA Addressability\n         USING DSA,&DSDSA               (Same)\n*\n** Getmain DSA Storage in Key of Caller\n*\n*        SETLOCK OBTAIN,TYPE=LOCAL,    Obtain Local Lock for\n*              MODE=UNCOND,REGS=USE    ..Branch Entry Getmain\n         SETLOCK OBTAIN,TYPE=LOCAL,    Obtain Local Lock for           *\n               MODE=UNCOND,REGS=USE    ..Branch Entry Getmain\n*\n         L     R2,=A(&L)               Get Length of initial DSA\n         LA    R2,4095(,R2)            (Same)\n         SRL   R2,12                   (Same)\n         SLL   R2,12                   (Same)\n         LR    R0,R2                   (Same)\n*\n*        GETMAIN RU,LV=(0),SP=230,     Issue Branch Entry Getmain\n*              KEY=(R3),LOC=BELOW,     For Dynamic Storage Area\n*              BNDRY=DBLWD,            (Same)\n*              BRANCH=YES              (Same)\n         GETMAIN RU,LV=(0),SP=230,     Issue Branch Entry Getmain      *\n               LOC=BELOW,              For Dynamic Storage Area        *\n               BNDRY=DBLWD,            (Same)                          *\n               BRANCH=YES              (Same)\n         LR    R13,R1                  R13 -> DSA\n*\n*        SETLOCK RELEASE,TYPE=LOCAL,   Release Local Lock\n*              REGS=SAVE               (Same)\n         SETLOCK RELEASE,TYPE=LOCAL,   Release Local Lock              *\n               REGS=SAVE               (Same)\n*\n         LR    R0,R1                    Assure Zero Filled DSA\n         L     R1,=A(&L)                (Same)\n         XR    R14,R14                  (Same)\n         XR    R15,R15                  (Same)\n         MVCL  R0,R14                   (Same)\n*\n         OI    DSAFLAG1,DSAOWNER        Indicate We own it\n         MVC   DSALENTH,=A(&L)          Save Length for Freemain\n         L     R1,=A(&L)                Get Residual Length\n         SH    R1,=Y(&D.L)              (Same)\n         ST    R1,DSARESID              Save in Our DSA\n.*\n.*--------------------------------------------------------------------*\n.** Generate Additional Bases for DSA if Reqested                     *\n.*--------------------------------------------------------------------*\n.*\n         AIF   ('&DBAS(1)' EQ '').D004\n         LA    &DBAS(1),2048(,R13)      2nd DSA Base Register\n         LA    &DBAS(1),2048(,&DBAS(1)) (Same)\n         AIF   ('&DBAS(2)' EQ '').D001\n         LA    &DBAS(2),2048(,&DBAS(1)) 3rd DSA Base Register\n         LA    &DBAS(2),2048(,&DBAS(2)) (Same)\n         AIF   ('&DBAS(3)' EQ '').D001\n         LA    &DBAS(3),2048(,&DBAS(2)) 4th DSA Base Register\n         LA    &DBAS(3),2048(,&DBAS(3)) (Same)\n         AIF   ('&DBAS(4)' NE '').MNOTE3\n.*\n.D001    ANOP\n         AIF   ('&DBAS(3)' EQ '').D002\n         USING &DSDSA,R13,&DBAS(1),&DBAS(2),&DBAS(3)\n         AGO   .D005\n.D002    ANOP\n         AIF   ('&DBAS(2)' EQ '').D003\n         USING &DSDSA,R13,&DBAS(1),&DBAS(2)\n         AGO   .D005\n.D003    ANOP\n         AIF   ('&DBAS(1)' EQ '').D004\n         USING &DSDSA,R13,&DBAS(1)      DSA Addressability\n         AGO   .D005\n.D004    ANOP\n         USING &DSDSA,R13               DSA Addressability\n.D005    ANOP\n         USING DSA,&DSDSA               DSA Prefix Addressability\n*\n         MVC   DSAEYECT,=CL4'DSA'       Set DSA EyeCatcher\n         MVC   &ENDCT,=CL4'DSAE'        Set DSA Ending EyeCatcher\n         LA    R14,&OVCHK               Set up Overlay Check\n         ST    R14,&OVCHK               (Same)\n         MVC   DSALNGTH,=A(&D.L)        Set Length of Our DSA\n         MVC   DSATRAPS,=4X'0700'       Assume No Traps at Present\n*temp    ST    R5,DSAPRWD1              Save SVRB Address\n.*\n.*--------------------------------------------------------------------*\n.** Fillin Support for Traces in DSA                                  *\n.*--------------------------------------------------------------------*\n.*\n         MVC   DSATRAPS,=4X'0700'       Assume No Traps at Present\n.*\n         AIF   ('&TRACE' NE 'YES').T999 Determine Type of Traces\n&PTRACE  SETB  1                        Indicate TRACE=YES Specified\n         AIF   ('&IMP' EQ 'TRAP2').T300 (Same)\n         AIF   ('&IMP' EQ 'SVC').T200   (Same)\n         AIF   ('&IMP' EQ 'BASR').T100  (Same)\n         AGO   .MNOTE4\n.*\n.T100    ANOP                           Process if IMP=BASR Traces\n         MVC   DSATRAPS,=4X'0DEF'       Set Target of EX as: BASR 14,15\n         MVC   DSATRCEP,=V(RDHTRACG)    Set Entry Point to Trace Pgm\n         AGO   .T999\n.*\n.T200    ANOP                           Process if IMP=SVC Traces\n         L     R14,16                   Get CVT Address\n         USING CVT,R14                  Change Addressability\n         L     R14,CVTABEND             Get Address of SCVT\n         USING SCVTSECT,R14             Change Addressability\n*\n         L  R14,SCVTSVCT                Get Address of SVCTABLE\n         AH R14,=Y(255*8)               Point at SVC 255\n         LA R15,255                     Loop All SVC Table Entries\n*\n         DO FROM=(R15)                  Loop Through SVC Table\n            L  R1,0(,R14)               Get SVC Entry Point\n            LA R1,0(,R1)\n            DOEXIT (CLC,=C'RDHTRSVC',EQ,4(R1))\n            AHI R14,-8                  Bump to Prev SVCTABLE Entry\n         ENDDO ,                        -> Loop\n*\n         IF (CLC,=C'RDHTRSVC',EQ,4(R1)) Found Our SVC?\n            STC R15,DSASVCNO            Save SVC Number\n            MVC DSATRAPS,=4X'0A00'      Set Target of EX as: SVC #\n            STC R15,DSATRPGM+1          Set SVC Number to Use\n            STC R15,DSATRSUB+1          (Same)\n            STC R15,DSATRTRC+1          (Same)\n            STC R15,DSATRSPM+1          (Same)\n         ELSE ,\n            EX 0,*\n            DC 'RDHTRSVC SVC is not Installed.'\n         ENDIF ,\n         AGO   .T999\n.*\n.T300    ANOP                           Process if IMP=TRAP2 Traces\n         MVC   DSATRAPS,=6X'01FF'       Set Target of EX as: TRAP2\n         AGO   .T999\n\n.T999    ANOP\n         LM    R14,R7,RBEXSAVE+4       Save Registers\n.*\n.*--------------------------------------------------------------------*\n.** Generate Traces if Requested                                      *\n.*--------------------------------------------------------------------*\n.*\n&XTRC    SETC  'NO'                     Note Value in GBLC for PGMEXIT\n         AIF   ('&TRACE' NE 'YES').EXIT\n&XTRC    SETC  'YES'\n*\n*        #TRACE TYPE=PGME,              Indicate Program Entry Call    *\n               BUFFDAT=&BUFFDAT,        Buffer Data YES/NO             *\n               BUFFMAX=&BUFFMAX,        Lines to Buffer                *\n               MSG=&MSG,                Print Desired Message          *\n               REGS=&REGS,              Print Desired Registers        *\n               DATA=&DATA,              Print Any Desired Data         *\n               PRINT=&PRINT             Print Any Desired Data\n&PGM060  #TRACE TYPE=PGME,                                             *\n               BUFFDAT=&BUFFDAT,                                       *\n               BUFFMAX=&BUFFMAX,                                       *\n               MSG=&MSG,                                               *\n               REGS=&REGS,                                             *\n               DATA=&DATA,                                             *\n               PRINT=&PRINT\n         AGO   .EXIT                   -> Done\n.*\n.**********************************************************************\n.* Error Messages                                                     *\n.**********************************************************************\n.*\n.MNOTE1   MNOTE 8,'PGMNTRY: More than four registers for BASE='\n         AGO   .EXIT\n.*\n.MNOTE2   MNOTE 8,'PGMNTRY: More than four registers for CBAS='\n         AGO   .EXIT\n.*\n.MNOTE3  MNOTE 8,'PGMNTRY: More than four registers for DBAS='\n         AGO   .EXIT\n.*\n.MNOTE4  MNOTE 8,'PGMNTRY: IMP=value invalid. Must be BRANCH, SVC, or T*\n               RAP2.'\n         AGO   .EXIT\n.*\n.MNOTE5  ANOP ,\n         MNOTE 8,'SVCNTRY: Csect name not specified and is required.'\n         AGO   .EXIT\n.*\n.MNOTE6  ANOP ,\n         MNOTE 8,'SVCNTRY: SVCNO= not specified and is required.'\n         AGO   .EXIT\n.*\n.MNOTE7  ANOP ,\n         MNOTE 8,'SVCNTRY: AMODE/RMODE parameter conflict, AMODE=&AMODE*\n               ,RMODE=&RMODE'\n         AGO   .EXIT\n.MNOTE8  ANOP ,\n         MNOTE 8,'SVCNTRY: TYPE=&TYPE is invalid.  Must be USER/HOOK.'\n         AGO   .EXIT\n.*\n.MNOTE9  ANOP ,\n         MNOTE 8,'SVCNTRY: SVTYP=&SVTYP is invalid.  Must be 2/3/4/6.'\n         AGO   .EXIT\n.*\n.MNOTE10 ANOP ,\n         MNOTE 8,'SVCNTRY: No base registers were specified.'\n         AGO   .EXIT\n.*\n.** Exit Macro\n.*\n.EXIT    ANOP\n         MEND\n\n./ ADD NAME=TRCDSECT 0100-10050-10050-1200-00222-00222-00000-RHDMAC\n         MACRO\n&LBL     TRCDSECT ,\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n*                                                                     *\n** TRCDSECT - Primary Data Repository for the RDHTRACE System         *\n*                                                                     *\n*    This data area contains all the data necessary to provide        *\n*  support for the Label level Tracing Facility.  It is task          *\n*  related, which is to say one of these data areas exist for         *\n*  each MVS Task gbeing traced within the address space.              *\n*    It is Anchored off of RMEPARAM, the parameter passed into        *\n*  RESMGR.  Thr RME data areas are a forward/backward chained         *\n*  set of control blocks pointed to by STCBRMEF.                      *\n*    This control block is created the first time a #TRACE Macro      *\n*  is executed under any subtask within the address space, and        *\n*  freed by the resource manager exit RDHRESEX at task termination.   *\n*  RDHRESEX is located within RDHTRACE.                               *\n*                                                                     *\n* Date     Developer Cng# Comments                                    *\n* ======== ========= ==== =========================================== *\n* 00/00/00 R.Harper  M000 Macro Developed                             *\n*                                                                     *\n***********************************************************************\n*\nTRCDSECT DSECT ,                       Define TRC Persistant Data Area\nTRCEYECT DS    CL8                     Eye Catcher C'TRCDSECT'\nTRCCDATE DS    CL8                     Date Initiated\nTRCCTIME DS    CL8                     Time Initiated\nTRCTCBAC DS    CL8                     TCB Address in Character\nTRCRC    DS    F                       Return Code\nTRCRS    DS    F                       Reason Code\n*\nTRCPFLAG DS    B                       Processing Flag\nTRCPDDSO EQU   X'80'                   ..TRCPRINT is SYSOUT\nTRCPDDPS EQU   X'40'                   ..TRCPRINT is PS\nTRCPDDPO EQU   X'20'                   ..TRCPRINT is PO\n*\nTRCBFLAG DS    B                       Buffering Flags\nTRCBBFON EQU   X'80'                   ..Buffering is Indicated\nTRCBBATL EQU   X'40'                   ..Buffer is Above-The-Line\nTRCBBATB EQU   X'20'                   ..Buffer is Above-The-Bar\n*\n         DS    BL7                     (Reserved) - For More Flags\n*\nTRCTCBAD DS    A                       TCB Address That Own This Area\nTRCPARMA DS    A                       R1 Value On Entry\nTRCTRPAD DS    A                       Address of Current TRPDSECT\nTRCENDAT DS    A                       Address of End of DATA\nTRCDADDR DS    A                       Address of TRCDAREA Data Area\n*\nTRCBUFAD DS    A                       Address of Print Buffer\nTRCBUFLN DS    F                       Length of Print Buffer\nTRCBUFND DS    A                       Address of End of Buffer\nTRCBUFCR DS    A                       Current Position in Buffer\n*\nTRCDDNAM DS    CL8                     DDNAME for This TCB\nTRCDSNAM DS    CL44                    TRCPRINT DSNAME\n*\nTRCHEADT DS    CL8                     Type of Trap Heading\nTRCNAME  DS    CL8                     Name For Trap Heading\n*\n         DS    0D\nTRCPNTRY DS    XL(TRCDLNTH)            Previous Save Area Entry\n         DS    0D\nTRCCNTRY DS    XL(TRCDLNTH)            Current  Save Area Entry\n*\nTRCREG#  DS    PL2                     Current Register Number\nTRCPTKEY DS    XL1                     Current Key\nTRCWKCL9 DS    CL9                     General Work Area\nTRCWKC16 DS    XL16                    (Same)\nTRCWORKC DS    XL20                    (Same)\nTRCWORKX DS    XL32                    (Same)\n*\nTRCSAVE4 DS    4A                      Register Save Area\nTRCWORKD DS    D                       General Purpose Workarea\nTRCWORKF DS    F                       (Same)\nTRCLMOD  DS    CL8                     Load Module Name\nTRCLMODC DS    CL8                     Load Module For Calling Procram\n*\nTRCPLINE DS    CL128                   Print Line\nTRCMSGWK DS    CL255                   MSG= Work Area\n*\n** Estae Recovery Variables for TRCESTAE - RDHTRACE Recovery Program\n*\nTRCRETRY DS    F                       Address of Recovery RTN or Zero\nTRCEFAIL DS    F                       Address of Fail Recovery Rtn\nTRCEACNT DS    H                       Count of Abends\nTRCEACMP DS    XL3                     Abend Completion Code\nTRCEPSW  DS    2F                      PSW at Time of Error\nTRCEREGS DS    16F                     Registers at Time of Abend 0-15\n*\n** Abend Recovery Variables for TRCABEND - Print Abend Diagnostics\n*\nTRCABSAV DS    9D                      Register Savearea\nTRCPLIST DS    4F                      PLIST for CALL Macro\n*\n***********************************************************************\n*\n** Indention Levels\n*\n*    Each time a subroutine is called we increase the level of\n*  indention by three bytes on the output to increase readabillity.\n*  We allow a maximum of ten levels of indention within a program.\n*  After that we stop indenting, as we've used up thirty bytes.\n*   The low order byte of the TRCINDNT entry is used to maintain\n*  the current number of bytes to indent.  The high order byte is\n*  used to maintain the number of times we have entered a new\n*  subroutine after we have overflowed.  In this way we can always\n*  return to the proper indention level for the calling program upon\n*  return from a called program.\n*    This whole mechanism allows for 265 levels of nested subroutines\n*  within a program and one hundred levels of nested programs per\n*  task being traced. That should be enough.\n*    Each time we enter a new program, we start again left justified\n*  on the page and move to a new counter in TRCINDNT by incrementing\n*  TRCINCUR.  When we exit a program we zero out that entry in\n*  TRCINDNT and decrement TRCINCUR which should ultimately return to\n*  zero upon return to MVS.\n*\nTRCINLVL DS    H                       Indention Level for This Call\n*\nTRCINCUR DS    H                       Index to Current Program in Tbl\nTRCINDNT DS    100H                    Indention Levels for 100 Pgms\n*\n***********************************************************************\n*\n***********************************************************************\n* Define Space for MF=L Constructs                                    *\n***********************************************************************\n*\n*\n         DS   0D\nTRCDCB   DS   XL(MDLDCBL)              Reserve Space for DCB\nTRCDCBID DS   CL4                      Trace DCB Ident C'TRAC'     @RDH\n*\nTRCRJFCL DS   F                        Reserve Space for RDJFCB MF=L\nTRCEXLST DS   F                        Space for DCB EXLST\nTRCJFCB  DS   0D,CL176                 Reserve Space for JFCB\n*\n         DS   0D\nTRCOPL   DS   XL(MDLOPLL)              Reserve Space for OPEN Parm\n         DS   0D\nTRCCLL   DS   XL(MDLCLLL)              Reserve Space for CLOSE Parm\n*\n         DS   0D\nTRCRESM  DS   XL(MDLRESML)             Reserve Space for RESMGR\nTRCRESMP DS   D                        Parm Passed to Resource Manager\nTRCRESMT DS   F                        Token From RESMGR\n*\nTRCESTAL ESTAEX ,CT,                   Exit Routine Address, Not Here  X\n               XCTL=NO,                XCTL Cancels ESTAE Exit         X\n               PURGE=NONE,             Do Not Purge I/O on Abend       X\n               ASYNCH=YES,             Allow ASYNC to Continue         X\n               TERM=NO,                Don't Enter if Task Cancelled   X\n               MF=L                    This is List Form\n*\n         SQUEEZE MF=L                  Get Data Areas for SQUEEZE\nTRCTMFL  TIME LINKAGE=SYSTEM,MF=L\n*\n         DS    0D\nTRCLNGTH EQU   *-TRCDSECT              Length of Data Area\n*\n***********************************************************************\n* TRCDAREA - Savearea Info DSECT - Pointed to by TRCDADDR             *\n***********************************************************************\n*\n*   This area is filled in by TRCDSAVE on each call to RDHTRACE and\n* any call to TRCADIAG during an abend.  It contains all the data\n* related to programs in the savearea chain or linkage stack entries.\n*\nTRCDAREA DSECT ,\nTRCDEYE  DS    CL8                     Eye Catcher\nTRCDLEN  DS    A                       Length of Area for Freemain\nTRCDCNT  DS    F                       Count of Enties in Table\nTRCPLTH  EQU   *-TRCDAREA              Length of Prefix Area\n*\nTRCDNTRY DS    0D                      Initial CSECT Entry\nTRCDLMOD DS    CL8                     LMOD Name\nTRCDEPAD DS    A                       EP Address\n         DS    A\n*\nTRCDCSCT DS    CL8                     CSECT Name\nTRCDCSEP DS    A                       CSECT EP Address - R15 on Entry\nTRCDCOFS DS    A                       CSECT Offset From LMOD\n*\nTRCDRTLM DS    CL8                     Return LMOD  Name\nTRCDRTCS DS    CL8                     Return CSECT Name\nTRCDRTAD DS    A                       Return Address\nTRCDROFS DS    A                       Offset Into CSECT\n*\nTRCDLSEN DS    A                       Linkage Stack Entry Address\nTRCDR13  DS    A                       R13 Value\n*\nTRCDPGID DS    CL32                    Program ID Data\nTRCDLNTH EQU   *-TRCDNTRY              Length of Each Entry\n*\nTRCDSIZE EQU   12*1024                 Size for Getmain - 12K\nTRCDMAXC EQU   TRCDSIZE/TRCDLNTH       Max Entries in Table\n         MEND  ,\n./ ADD NAME=TRGDSECT 0100-10050-10050-1200-00091-00091-00000-RHDMAC\n         MACRO\n&LBL     TRGDSECT ,\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n*                                                                     *\n** TRGDSECT - #TRACE Glue Code Data Area                              *\n*                                                                     *\n*   This DSECT area defines the machine status at the time of the     *\n* execution of the #TRACE macro.  This includes the PSW, GP Registers *\n* Access Registers, and Control Register in effect and is the primary *\n* input to the tracing program RDHTRACE which produces the diagnostic *\n* output.                                                             *\n*                                                                     *\n*                                                                     *\n* Date     Developer Cng# Comments                                    *\n* ======== ========= ==== =========================================== *\n* 00/00/00 R.Harper  M000 Macro Developed                             *\n*                                                                     *\n***********************************************************************\n*\nTRGDSECT DSECT ,\nTRGEYECT DS    CL8'TRGDSECT'         EyeCatcher\n*\nTRGFLAG1 DS    B                     Flag Byte #1\nTRG1SRBM EQU   X'80'                 ..Running in SRB Mode\nTRG1SVCI EQU   X'40'                 ..IMP=SVC\nTRG1TRPI EQU   X'20'                 ..IMP=TRAP2\nTRG1BSRI EQU   X'10'                 ..IMP=BASR\nTRG1ARMD EQU   X'08'                 ..ARMODE PSW\nTRG1AM64 EQU   X'04'                 ..AMODE=64\nTRG1AM31 EQU   X'02'                 ..AMODE=31\nTRG1AM24 EQU   X'01'                 ..AMODE=24\n         DS    BL3                   (Reserved)\n*\nTRGASCB  DS    A                     Current ASCB Address\nTRGTCB   DS    A                     Current TCB  Address\n*\nTRGTRPAD DS    A                     Addr of TRPDSECT This Trace Point\nTRGPLIST DS    2F                    PLIST Area\nTRGHLNTH EQU   *-TRGDSECT            Header Length\n*\n** Define Space for Copy of Linkage Stack Entry\n*\nTRGLSEN  DS    XL(LSENLNTH)          Space for Linkage Stack Entry\n*\n** Define Space for Control Registers\n*\nTRGCNTRL DS    0D                    Control Registers in Effect\nTRGCR0   DS    D                     (Same)\nTRGCR1   DS    D                     (Same) - PASN ASCE\nTRGCR2   DS    D                     (Same) - DUCT Origin\nTRGCR3   DS    D                     (Same)\nTRGCR4   DS    D                     (Same)\nTRGCR5   DS    D                     (Same)\nTRGCR6   DS    D                     (Same)\nTRGCR7   DS    D                     (Same) - SASN ASCE\nTRGCR8   DS    D                     (Same)\nTRGCR9   DS    D                     (Same)\nTRGCR10  DS    D                     (Same)\nTRGCR11  DS    D                     (Same)\nTRGCR12  DS    D                     (Same)\nTRGCR13  DS    D                     (Same) - HASN ASCE\nTRGCR14  DS    D                     (Same)\nTRGCR15  DS    D                     (Same) - Linkage Stack Pointer\n*\n         DS    0D                    Doubleword Aligned\nTRGLNGTH EQU   *-TRGDSECT            Length of User Area\n         MEND  ,\n./ ADD NAME=TRPDSECT 0100-10050-10050-1200-00116-00116-00000-RHDMAC\n         MACRO ,\n&LBL     TRPDSECT ,\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n*                                                                     *\n** TRPDSECT - Define a Trace Point Trap                               *\n*                                                                     *\n*    This dsect defines the data area generated by the #TRACE macro.  *\n*  It's pretty much variable in nature depending upon what was        *\n*  specified on the macro.  The data area, the data area title or     *\n*  the message area may of may not exist.                             *\n*                                                                     *\n*                                                                     *\n* Date     Developer Cng# Comments                                    *\n* ======== ========= ==== =========================================== *\n* 00/00/00 R.Harper  M000 Macro Developed                             *\n*                                                                     *\n***********************************************************************\n*\nTRPDSECT DSECT ,\nTRPNAME  DS    CL8                  Name of This Trap\nTRPFLAG1 DS    B                    Flag Byte\nTRPFTRAP EQU   X'80'                ..Trace Point Trap\nTRPFPGME EQU   X'40'                ..Program Entry Trap\nTRPFPGMX EQU   X'20'                ..Program Exit  Trap\nTRPFSUBE EQU   X'10'                ..Subroutine Entry Trap\nTRPFSUBX EQU   X'08'                ..Subroutine Exit  Trap\nTRPFLAG2 DS    B                    Flag Byte\nTRPFSQEZ EQU   X'80'                ..SQUEEZE=YES Specified\nTRPFNOHD EQU   X'40'                ..NOHEAD=YES Specified\nTRPFREGS EQU   X'08'                ..REGS= Was Specified\nTRPFMSGS EQU   X'04'                ..MSG=  Was Specified\nTRPFDATA EQU   X'02'                ..DATA= Was Specified\nTRPLNGTH DS    HL2                  Length of This Trap\nTRPTRPAD DS    AL4                  Addr of TRPDSECT+00 Open Segment\nTRPOFFST DS    XL2                  Offset Into CSECT in Hex\nTRPPREGS DS    BL2                  Registers to Display 0-15\nTRPHLNTH EQU   *-TRPDSECT           Length of Header Area\n*\nTRPOPENA DS    0X               -*- Define Open Segment - 1st Segment\nTRPOFLG1 DS    B                    Flag Byte - Same as TRPFLAG1\nTRPOBUFF EQU   X'04'                ..Buffering is in Effect\nTRPOFLG2 DS    B                    Protocol Type\nTRPOPGME EQU   X'80'                ..PGME\nTRPOSVCE EQU   X'40'                ..SVCE\nTRPOESTE EQU   X'20'                ..ESTAE\nTRPOSRBE EQU   X'10'                ..SRBE\nTRPOPCE  EQU   X'08'                ..PCE\nTRPOBMAX DS    HL2                  Max Lines to Buffer\nTRPDDNAM DS    CL8                  DDNAME Used\nTRPCSECT DS    CL8                  CSECT Name of Program\nTRPOLNTH EQU   *-TRPOPENA           Length of Open Area\n*\n         ORG   TRPOPENA             Overlay The Open Stuff\nTRPMSG   DS    0H               -*- Message Area Variable Segment\nTRPMLNTH DS    YL2                  Length of MSG= Segment\nTRPMDATA EQU   *                    Beginning of Message Data\n*\nTRPEVAR  DSECT ,                    Embedded Variable Description\nTRPEVID  DS    X                    Donates Beginning of Variable\nTRPEVVAR EQU   X'FE'                ..Variable indicater\nTRPEVFIL EQU   X'FD'                ..Filler Byte - For Alignment\nTRPETYP  DS    C                    Type of Constant to Insert\nTRPETYPC EQU   C'C'                 ..C - Character Data\nTRPETYPZ EQU   C'Z'                 ..Z - Zoned Data\nTRPETYPF EQU   C'F'                 ..F - Fullword Data\nTRPETYPH EQU   C'H'                 ..H - Halfword Data\nTRPETYPP EQU   C'P'                 ..P - Packed Data\nTRPETYPX EQU   C'X'                 ..X - Hexadecmil Data\nTRPESCON DS    SL2                  SCON Address of Data to Insert\nTRPESCDH DS    BL1                  DH Part of SCON\nTRPEDLEN DS    YL1                  Length of Variable\nTRPESLEN EQU   *-TRPEVAR            Length of a Variable Area (6)\n*\nTRPDDATA DSECT ,                -*- Data Area Description\nTRPDLNTH DS    H                    LENGTH of DATA= Area\nTRPDCNT  DS    AL2                  Count of DATA= Entries (1,2,3)\n*\nTRPDSTRT DS    0X                   Start of One Segment\nTRPDHDR  DS    0X                   Start of Area Heading\nTRPDFLAG DS    B                    Flag Byte\nTRPDFREG EQU   X'80'                ..Length is in Register\nTRPDFRDR EQU   X'70'                ..Redirection in Effect\nTRPDF64R EQU   X'40'                ..Addr is !64-Bit Redirect\nTRPDF31R EQU   X'20'                ..Addr is ?31-Bit Redirect\nTRPDF24R EQU   X'10'                ..Addr is %24-Bit Redirect\nTRPDFRAD EQU   X'08'                ..Addr is is a Real Address\nTRPDTLEN DS    AL1                  Length of Title\nTRPDADRL DS    SL2                  BDDD Address of Area\nTRPDADRH DS    BL1                  DH   Address of Area\nTRPDATLN DS    FL2                  Length of Area to Print\nTRPDTITL DS    0X                   Title For Area\nTRPDSLEN EQU   *-TRPDSTRT           Length of DATA= Segment\n         MEND ,\n./ ADD NAME=VSGDSECT 0100-10050-10050-1200-00103-00103-00000-RHDMAC\n          MACRO ,\n          VSGDSECT\n.*\n.**********************************************************************\n.* Copyright (c) 2007 - Richard D. Harper, All Rights Reserved        *\n.**********************************************************************\n.*                                                                    *\n.*   This file is part of Richard Harper's Private Development        *\n.* Platform (PDP).                                                    *\n.*                                                                    *\n.*   Richard Harper's PDP is free software: you can redistribute      *\n.* it and/or modify it under the terms of the GNU General Public      *\n.* License as published by the Free Software Foundation, either       *\n.* version 3 of the License, or (at your option) any later version    *\n.*                                                                    *\n.*   Richard Harper's PDP is distributed in the hope that it will     *\n.* be useful, but WITHOUT ANY WARRANTY; without even the implied      *\n.* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   *\n.* See the GNU General Public License for more details.               *\n.*                                                                    *\n.*   You should have received a copy of the GNU General Public        *\n.* License along with Richard harper's PDP.  If not, see              *\n.* <http://www.gnu.org/licenses/>.                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n*                                                                     *\n** VSGDSECT - Virtual Storage Control Block Definations               *\n*                                                                     *\n*    This macro is provided to define the structure of the virtual    *\n*  storage table entries.  Three different DSECTs are generated by    *\n*  this macro.  These include:                                        *\n*                                                                     *\n*    RGNDSECT - Defines the Region Table Entry structure.             *\n*    SEGDSECT - Defines the Segment Table Entry structure.            *\n*    PAGDSECT - Defines the Page Table Entry structure.               *\n*                                                                     *\n*                                                                     *\n* Date     Developer Cng# Comments                                    *\n* ======== ========= ==== =========================================== *\n* 00/00/00 R.Harper  M000 Macro Developed                             *\n*                                                                     *\n***********************************************************************\n*\n** Region Table DSECT Area\n*\nRGNDSECT DSECT ,                       Define Region Table Entry\nRGNORIGN DS    0D                      Next Table Origin\nRGNORMSK EQU   X'FFFFF000'             Mask for Stripping Flag Bits\nRGNFLMSK EQU   X'00000FFF'             Mask for Stripping Addr Bits\n         DS    XL6                     Place Holder\nRGNFLAG1 DS    B                       Flag Byte #1\nRGN1P    EQU   X'02'                   ..DAT Protection Applies\nRGNFLAG2 DS    B                       Flag Byte #2\nRGN2TF   EQU   X'C0'                   ..TF - Table Offset *4096\nRGN2I    EQU   X'20'                   ..I  - Region Invalid Bit\nRGN2TT   EQU   X'0C'                   ..TT - Region Table Type 3-1\nRGN2TT11 EQU   X'0C'                   ..TT - Region First Table\nRGN2TT10 EQU   X'08'                   ..TT - Region Second Table\nRGN2TT01 EQU   X'04'                   ..TT - Region Third Table\nRGN2TT00 EQU   X'00'                   ..TT - Segment Table\nRGN2TL   EQU   X'03'                   ..TL - Region Table Length\nRGNLNGTH EQU   *-RGNDSECT              Length of DSECT (8-Bytes)\n*\n** Segment Table DSECT Area\n*\nSEGDSECT DSECT ,                       Define Region Table Entry\nSEGORIGN DS    0D                      Next Table Origin\nSEGOMSK0 EQU   X'FFFFF800'             Mask to Strip Flag Bits - FC=0\nSEGFMSK0 EQU   X'000007FF'             Mask to Strip Addr Bits - FC=0\nSEGOMSK1 EQU   X'FFF00000'             Mask to Strip Flag Bits - FC=1\nSEGFMSK1 EQU   X'000FFFFF'             Mask to Strip Addr Bits - FC=1\n         DS    XL5                     Place Holder\nSEGFLAG1 DS    B                       Flag Byte #1\nSEG1AV   EQU   X'01'                   ..Acc Cntrl Validty Bit - FC=1\nSEGFLAG2 DS    B                       Flag Byte #2\nSEG2ACC  EQU   X'F0'                   ..Acc Cntrl Storage Key - FC=1\nSEG2F    EQU   X'08'                   ..F  - Fetch Protection Bit\nSEG2FC   EQU   X'04'                   ..FC - Page or 1=Segment Addr\nSEG2P    EQU   X'02'                   ..P  - DAT Protection Bit\nSEG2CO   EQU   X'01'                   ..CO - Change Recording Overide\nSEGFLAG3 DS    B                       Flag Byte #2\nSEG2I    EQU   X'20'                   ..I  - Segment Invalid Bit\nSEG2C    EQU   X'10'                   ..C  - Common Segment Bit\nSEG2TT   EQU   X'0C'                   ..TT - Segment Table Type '00'\nSEGLNGTH EQU   *-SEGDSECT              Length of DSECT (8-Bytes)\n*\n** Page Table DSECT Area\n*\nPAGDSECT DSECT ,                       Define Region Table Entry\nPAGORMSK EQU   X'FFFFF000'             Mask for Stripping Flag Bits\nPAGFLMSK EQU   X'00000FFF'             Mask for Stripping Addr Bits\n         DS    XL6                     Place Holder\nPAGFLAG1 DS    B                       Flag Byte #1\nPAG1I    EQU   X'04'                   ..I  - Page Invalid Bit\nPAG1P    EQU   X'02'                   ..P  - DAT Protection Bit\nPAG1CO   EQU   X'01'                   ..CO - Change Recording Overide\nPAGFLAG2 DS    B                       Flag Byte #2\nPAG2ACC  EQU   X'F0'                   ..Acc Cntrl Storage Key 0-F\nPAG2F    EQU   X'08'                   ..F  - Fetch Protection Bit\nPAGLNGTH EQU   *-PAGDSECT              Length of DSECT (8-Bytes)\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD": {"ttr": 28417, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x7f\\x01\\x01\\x15\\x7f\\x156\\x00e\\x00e\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-06T00:00:00", "modifydate": "2001-06-06T15:36:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RASMCL": {"ttr": 28420, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x00)\\x00)\\x00\\x00\\xd9\\xc4\\xc8\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:47", "lines": 41, "newlines": 41, "modlines": 0, "user": "RDHJCL"}, "text": "//RASMCL  PROC MOD=,            Load & Object Module Name\n//             HLQ=RDH          High Level Qualifier\n//*\n//*===================================================================*\n//** Assemble a Source Program and Link into hlq.$TLS.LOD\n//*===================================================================*\n//*\n//ASM     EXEC PGM=ASMA90,REGION=0M,\n//             PARM='NODECK,XREF(SHORT),SIZE(MAX)'\n//SYSLIB    DD DISP=(,PASS),DSN=&&TEMP,\n//             SPACE=(TRK,(2,1,1)),UNIT=SYSDA,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920,DSORG=PO)\n//          DD DISP=SHR,DSN=&HLQ..$TLS.MAC\n//          DD DISP=SHR,DSN=HLA.SASMMAC2\n//          DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//*\n//SYSUT1    DD DSN=&&SYSUT1,UNIT=SYSVIO,SPACE=(1700,(2400,600))\n//SYSUT2    DD DSN=&&SYSUT2,UNIT=SYSVIO,SPACE=(1700,(2400,600))\n//SYSUT3    DD DSN=&&SYSUT3,UNIT=SYSVIO,SPACE=(1700,(2400,600))\n//SYSPRINT  DD SYSOUT=*,FREE=CLOSE\n//SYSABEND  DD SYSOUT=*\n//*\n//SYSIN     DD DYNAM\n//SYSLIN    DD DISP=SHR,DSN=&HLQ..$TLS.OBJ(&MOD.)\n//*\n//*===================================================================*\n//** Link Object Module\n//*===================================================================*\n//*\n//LKED   EXEC PGM=HEWLH096,\n//            PARM='XREF,LIST,MAP,LET,RENT,CALL,AC=1',\n//            REGION=0M\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=(SYSDA,SEP=(SYSLMOD,SYSLIN)),\n//            SPACE=(1024,(200,20))\n//*\n//SYSLIB   DD DISP=SHR,DSN=&HLQ..$TLS.OBJ\n//*\n//SYSLIN   DD DISP=SHR,DSN=&HLQ..$TLS.OBJ(&MOD.)\n//SYSLMOD  DD DISP=SHR,DSN=&HLQ..$TLS.LOD(&MOD.)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RASMCLG": {"ttr": 28422, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x003\\x003\\x00\\x00\\xd9\\xc4\\xc8\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:47", "lines": 51, "newlines": 51, "modlines": 0, "user": "RDHJCL"}, "text": "//RASMCLG PROC MOD=,            Load & Object Module Name\n//             HLQ=RDH          High Level Qualifier\n//*\n//*===================================================================*\n//** Assemble a Source Program and Link into hlq.$TLS.LOD\n//*===================================================================*\n//*\n//ASM     EXEC PGM=ASMA90,REGION=0M,\n//             PARM='NODECK,XREF(SHORT),SIZE(MAX)'\n//SYSLIB    DD DISP=(,PASS),DSN=&&TEMP,\n//             SPACE=(TRK,(2,1,1)),UNIT=SYSDA,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920,DSORG=PO)\n//          DD DISP=SHR,DSN=&HLQ..$TLS.MAC\n//          DD DISP=SHR,DSN=HLA.SASMMAC2\n//          DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//*\n//SYSUT1    DD DSN=&&SYSUT1,UNIT=SYSVIO,SPACE=(1700,(2400,600))\n//SYSUT2    DD DSN=&&SYSUT2,UNIT=SYSVIO,SPACE=(1700,(2400,600))\n//SYSUT3    DD DSN=&&SYSUT3,UNIT=SYSVIO,SPACE=(1700,(2400,600))\n//SYSPRINT  DD SYSOUT=*,FREE=CLOSE\n//SYSABEND  DD SYSOUT=*\n//*\n//SYSIN     DD DYNAM\n//SYSLIN    DD DISP=SHR,DSN=&HLQ..$TLS.OBJ(&MOD.)\n//*\n//*===================================================================*\n//** Link Object Module\n//*===================================================================*\n//*\n//LKED   EXEC PGM=HEWLH096,\n//            PARM='XREF,LIST,MAP,LET,RENT,CALL,AC=1',\n//            REGION=0M\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=(SYSDA,SEP=(SYSLMOD,SYSLIN)),\n//            SPACE=(1024,(200,20))\n//*\n//SYSLIB   DD DISP=SHR,DSN=&HLQ..$TLS.OBJ\n//*\n//SYSLIN   DD DISP=SHR,DSN=&HLQ..$TLS.OBJ(&MOD.)\n//SYSLMOD  DD DISP=SHR,DSN=&HLQ..$TLS.LOD(&MOD.)\n//*\n//*===================================================================*\n//** Run The Program\n//*===================================================================*\n//*\n//RUN    EXEC PGM=&MOD,REGION=0M\n//STEPLIB  DD DISP=SHR,DSN=&HLQ..$TLS.LOD\n//TRCPRINT DD SYSOUT=*\n//MSGPRINT DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHAPSVC": {"ttr": 28424, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00X\\x01\\x10\\x06\\x0f\\x01\\x11\\t\\x0f\\x13\\x08\\x00\\x94\\x00\\x94\\x00\\x00\\xd9\\xc4\\xc8\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-03-01T00:00:00", "modifydate": "2011-03-31T13:08:58", "lines": 148, "newlines": 148, "modlines": 0, "user": "RDHSRC"}, "text": "//RDHAPSVC JOB (0,0),'HARPER',REGION=4M,\n//    CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)\n//*\n//JCLLIB  JCLLIB ORDER=('SBGOLOB.CBT482.FILE820')\n//*\n//****************************************\n//*       ASM STEP\n//****************************************\n//*\n//ASM     EXEC ASMCL,MOD=RDHAPSVC\n//ASM.SYSIN    DD  *\n*\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHAPSVC - TSO APF Authorization SVC - 168                         *\n*                                                                     *\n*    This program is an MVS SVC that is used by MERLIN for the        *\n*  purpose of obtaining APF Authorization within a TSO/ISPF           *\n*  environment.                                                       *\n*                                                                     *\n*                                                                     *\n*  Date     FIX-ID Programmer Description                             *\n*  ======== ====== ========== ======================================= *\n*  02/02/06  M001  R. Harper  Module Developed                        *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT  OFF\n         IHAPSA ,                     Define PSA DSECT Area\n         PRINT  ON\n*\n***********************************************************************\n* RDHAPSVC - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING  PSA,R0                  Define PSA Addressability\n*\nRDHAPSVC SVCNTRY SVCNO=168,PRINT=GEN,TRACE=NO Program Entry Code\n*\n         GOSUB INIT                    Perform Initialization\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Termination Processing\n*\n** Return to Caller\n*\nMAINEXIT DS    0H\n         SVCEXIT RC=0                  Define Program Exit Code\n\n***********************************************************************\n* MAIN- Program Main Processing                                       *\n***********************************************************************\n*\nMAIN     SUBNTRY ,\n         LM R0,R1,RBEXSAVE+12          Reload parameter Regs\n         IF (C,R1,EQ,=A(C'AUTH'))      Request for Authorization?\n            L R4,PSATOLD               Get our TCB Address\n            L R4,TCBJSTCB              Get job Step TCB Addreee\n            L R14,TCBJSCB              Get JSCB Address\n            USING IEZJSCB,R14          & Addressability\n            IF (CH,R0,EQ,=Y(1))        If Request to Authorize?\n               OI JSCBOPTS,JSCBAUTH       Authorize This Task\n            ELSE ,                     Else\n               NI JSCBOPTS,HEXFF-JSCBAUTH Remove Authorizationre\n            ENDIF ,\n         ELSE ,\n         ENDIF ,\n*\n** Return to Caller\n*\nMAINEND  DS    0H\n         SUBEXIT ,\n         DROP R14                      Drop Temp bases\n\n***********************************************************************\n* INIT - Perform Program Initialization                               *\n***********************************************************************\n*\nINIT     SUBNTRY ,                 -*- Open SYSPRINT File\n*\n** Return to Caller\n*\nINITEND  DS    0H\n         SUBEXIT ,\n***********************************************************************\n* TERM - Perform Program Termination                                  *\n***********************************************************************\n*\nTERM     SUBNTRY ,\n*\n** Return to Caller\n*\nTERMEND  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n*  Literials and Constants                                            *\n***********************************************************************\n*\nHEXFF    EQU   X'FF'\n*\n         LTORG ,                       Define literal Pool\n\n***********************************************************************\n* Define DSECT Areas                                                  *\n***********************************************************************\n*\n         IEZJSCB ,                     Define JSCB Control Block\n\n***********************************************************************\n* Define Dynamic Storage Area - DSA                                   *\n***********************************************************************\n*\n         DSABEG ,                 <*** Begin Dynamic Storage Area\n*\nDSARC    DS    F                       Return Code\nDSAPRWD1 DS    F\n*\nDSAFLAG  DS    B                       Flag Byte\n*\n         DSAEND ,                 <*** End Dynamic Storage Area\n         END ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHDPALO": {"ttr": 28428, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x00>\\x00>\\x00\\x00\\xd9\\xc4\\xc8\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:47", "lines": 62, "newlines": 62, "modlines": 0, "user": "RDHJCL"}, "text": "//RDHDPALO JOB (0,0),'HARPER',REGION=4M,\n//    CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)\n//*\n//*===================================================================*\n//** DEFINE INLINE PROCEDURE FOR DATASET ALLOCATION\n//*===================================================================*\n//*\n//RDHALOC  PROC HLQ=,                  DEFINE HIGH LEVEL QUALIFIER\n//             VOL=,                   VOLSER TO USE FOR ALLOCATIONS\n//             UNIT=                   UNIT FOR ALLOCATIONS\n//*\n//** DELETE DATASETS IF THEY EXIST\n//*\n//STEP1DEL EXEC IEFBR14\n//DD1      DD  DSN=&HLQ..$TLS.SRC,DISP=(MOD,DELETE),\n//             SPACE=(TRK,(1))\n//DD2      DD  DSN=&HLQ..$TLS.MAC,DISP=(MOD,DELETE),\n//             SPACE=(TRK,(1))\n//DD3      DD  DSN=&HLQ..$TLS.TST,DISP=(MOD,DELETE),\n//             SPACE=(TRK,(1))\n//DD4      DD  DSN=&HLQ..$TLS.JCL,DISP=(MOD,DELETE),\n//             SPACE=(TRK,(1))\n//DD5      DD  DSN=&HLQ..$TLS.OBJ,DISP=(MOD,DELETE),\n//             SPACE=(TRK,(1))\n//DD6      DD  DSN=&HLQ..$TLS.LOD,DISP=(MOD,DELETE),\n//             SPACE=(TRK,(1))\n//*\n//** CATALOG THE DATASETS\n//*\n//STEP2CAT EXEC IEFBR14\n//DD1      DD  DSN=&HLQ..$TLS.SRC,DISP=(,CATLG),\n//             UNIT=&UNIT,VOL=SER=&VOL,SPACE=(TRK,(60,5,30)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6000)\n//*\n//DD2      DD  DSN=&HLQ..$TLS.MAC,DISP=(,CATLG),\n//             UNIT=&UNIT,VOL=SER=&VOL,SPACE=(TRK,(60,5,30)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6000)\n//*\n//DD3      DD  DSN=&HLQ..$TLS.TST,DISP=(,CATLG),\n//             UNIT=&UNIT,VOL=SER=&VOL,SPACE=(TRK,(30,5,30)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6000)\n//*\n//DD4      DD  DSN=&HLQ..$TLS.JCL,DISP=(,CATLG),\n//             UNIT=&UNIT,VOL=SER=&VOL,SPACE=(TRK,(15,5,30)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6000)\n//*\n//DD5      DD  DSN=&HLQ..$TLS.OBJ,DISP=(,CATLG),\n//             UNIT=&UNIT,VOL=SER=&VOL,SPACE=(TRK,(30,5,30)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6000)\n//*\n//DD6      DD  DSN=&HLQ..$TLS.LOD,DISP=(,CATLG),\n//             UNIT=&UNIT,VOL=SER=&VOL,SPACE=(TRK,(30,5,30)),\n//             DCB=(DSORG=PO,RECFM=U,BLKSIZE=32760)\n//         PEND\n//*\n//*===================================================================*\n//** DELETE AND DEFINE THE DATASETS\n//*===================================================================*\n//*\n//DEFINE   EXEC RDHALOC,HLQ=RDH,\n//             VOL=STORAG,\n//             UNIT=3390\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RDHDPASM": {"ttr": 28430, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x00;\\x00;\\x00\\x00\\xd9\\xc4\\xc8\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:47", "lines": 59, "newlines": 59, "modlines": 0, "user": "RDHJCL"}, "text": "//RDHPDASM JOB 'Assemble SRC',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A\n//*\n//*===================================================================*\n//** Define an Inline PROC for Assemblies\n//*===================================================================*\n//*\n//ASMCL  PROC MOD=,            Load & Object Module Name\n//            HLQ=RDH          High Level Qualifier\n//*\n//** Assemble a Source Program and Link into $APF.LOD\n//*\n//ASM     EXEC PGM=ASMA90,REGION=0M,\n//             PARM='NODECK,XREF(SHORT),SIZE(MAX)'\n//SYSLIB    DD DISP=(,PASS),DSN=&&TEMP,\n//             SPACE=(TRK,(2,1,1)),UNIT=SYSDA,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920,DSORG=PO)\n//          DD DISP=SHR,DSN=&HLQ..$TLS.MAC\n//          DD DISP=SHR,DSN=HLA.SASMMAC2\n//          DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//*\n//SYSUT1    DD DSN=&&SYSUT1,UNIT=SYSVIO,SPACE=(1700,(2400,600))\n//SYSUT2    DD DSN=&&SYSUT2,UNIT=SYSVIO,SPACE=(1700,(2400,600))\n//SYSUT3    DD DSN=&&SYSUT3,UNIT=SYSVIO,SPACE=(1700,(2400,600))\n//SYSPRINT  DD SYSOUT=*,FREE=CLOSE\n//SYSABEND  DD SYSOUT=*\n//*\n//SYSIN     DD DISP=SHR,DSN=&HLQ..$TLS.SRC(&MOD.)\n//SYSLIN    DD DISP=SHR,DSN=&HLQ..$TLS.OBJ(&MOD.)\n//*\n//** Link Object Module\n//*\n//LKED  EXEC PGM=HEWLH096,\n//         PARM='XREF,LIST,MAP,LET,RENT,AC=1',\n//         REGION=0M\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=(SYSDA,SEP=(SYSLMOD,SYSLIN)),\n//         SPACE=(1024,(200,20))\n//*\n//SYSLIB   DD  DISP=SHR,DSN=&HLQ..$TLS.OBJ\n//*\n//SYSLIN   DD  DISP=SHR,DSN=&HLQ..$TLS.OBJ(&MOD.)\n//SYSLMOD  DD  DISP=SHR,DSN=&HLQ..$TLS.LOD(&MOD.)\n//         PEND\n//*\n//*===================================================================*\n//** Assemble the Source\n//*===================================================================*\n//*\n//ASM1    EXEC ASMCL,MOD=RDHMSGS\n//ASM2    EXEC ASMCL,MOD=RDHTRACE\n//ASM3    EXEC ASMCL,MOD=RDHTRACG\n//ASM4    EXEC ASMCL,MOD=RDHTRAPI\n//ASM5    EXEC ASMCL,MOD=RDHTRSVC\n//ASM6    EXEC ASMCL,MOD=RDHINSTL\n//ASM7    EXEC ASMCL,MOD=RDHGATB\n//ASM8    EXEC ASMCL,MOD=RDHGASVC\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHDPATB": {"ttr": 28432, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xd9\\xc4\\xc8\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:47", "lines": 23, "newlines": 23, "modlines": 0, "user": "RDHJCL"}, "text": "//RDHDPINS JOB (0,0),'TEST',\n//             CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)\n//*\n//** INSERT/REMOVE/REPLACE the #GETATB/#FREATB SVC\n//*\n//*    This job was created for the purpose of testing the SVC\n//*  install program.  This jobstream installs RDHGASVC which is\n//*  the SVC supporting GETMAIN and FREEMAIN for above-the-bar\n//*  storage macros #GETATB and #FREATB.\n//*\n//*    We use SVC 167 as it is not currently used in z/OS.  You\n//*  may use the DUMP function to view the SVCTABLE prior to\n//*  choosing an SVC to use.  It can be any number  not used by zOS.\n//*\n//*DUMP    EXEC PGM=RDHINSTL,PARM=DUMP\n//*REMOVE  EXEC PGM=RDHINSTL,PARM='REMOVE,RDHTRSVC,167'\n//*REPLACE EXEC PGM=RDHINSTL,PARM='REPLACE,RDHTRSVC,167'\n//*\n//INSERT   EXEC PGM=RDHINSTL,PARM='INSERT,RDHTRSVC,167'\n//STEPLIB  DD  DISP=SHR,DSN=RDH.$TLS.LOD\n//TRCPRINT DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHDPCAT": {"ttr": 28434, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd9\\xc4\\xc8\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:47", "lines": 14, "newlines": 14, "modlines": 0, "user": "RDHJCL"}, "text": "//RDHDPCAT JOB 'RDHD DEFINE USER CATALOG',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//** Define an Alias: RDH\n//*\n//DEFALIAS EXEC PGM=IDCAMS,REGION=0M\n//SYSPRINT DD  SYSOUT=*\n//VOL1     DD  VOL=SER=volser,DISP=OLD,UNIT=unit\n//SYSIN    DD  *\n  DEFINE ALIAS                      -\n        (NAME(RDH)                  -\n       RELATE(user.catalog))\n  LISTCAT UCAT ALL\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHDPIGA": {"ttr": 28436, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xd9\\xc4\\xc8\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:47", "lines": 22, "newlines": 22, "modlines": 0, "user": "RDHJCL"}, "text": "//RDHDPIGA JOB (0,0),'TEST',\n//             CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)\n//*\n//** INSERT/REMOVE/REPLACE SVC 167 support for #GETATB/#FREATB Services\n//*\n//*    This job was created for the purpose of installing the SVC\n//*  that supports #GETATB and #FREATB macros.  These macros provide\n//*  getmain and freemain services for above-the-bar storage.\n//*\n//*    We use SVC 167 for this purpose.  It's not currently used\n//*  by IBM.  You may use another SVC if you like but then you will\n//*  have to change the default in the macros #GETATB and #FREATB.\n//*\n//*DUMP    EXEC PGM=RDHINSTL,PARM=DUMP\n//*REMOVE  EXEC PGM=RDHINSTL,PARM='REMOVE,RDHGASVC,167'\n//*REPLACE EXEC PGM=RDHINSTL,PARM='REPLACE,RDHGASVC,167'\n//*\n//INSERT   EXEC PGM=RDHINSTL,PARM='INSERT,RDHGASVC,167'\n//STEPLIB  DD  DISP=SHR,DSN=RDH.$TLS.LOD\n//TRCPRINT DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHDPINS": {"ttr": 28673, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xd9\\xc4\\xc8\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:47", "lines": 23, "newlines": 23, "modlines": 0, "user": "RDHJCL"}, "text": "//RDHDPINS JOB (0,0),'TEST',\n//             CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)\n//*\n//** INSERT/REMOVE/REPLACE the Tracing SVC\n//*\n//*    This job was created for the purpose of testing the SVC\n//*  install program.  This jobstream installs RDHTRSVC which is\n//*  the SVC supporting the SVC and TRAP2 implementations of the\n//*  Richard Harper's Private Development Platform.\n//*\n//*    We use SVC 166 as it is not currently used in z/OS.  You\n//*  may use the DUMP function to view the SVCTABLE prior to\n//*  choosing an SVC to use.  It can be any number  not used by zOS.\n//*\n//*DUMP    EXEC PGM=RDHINSTL,PARM=DUMP\n//*REMOVE  EXEC PGM=RDHINSTL,PARM='REMOVE,RDHTRSVC,166'\n//*REPLACE EXEC PGM=RDHINSTL,PARM='REPLACE,RDHTRSVC,166'\n//*\n//INSERT   EXEC PGM=RDHINSTL,PARM='INSERT,RDHTRSVC,166'\n//STEPLIB  DD  DISP=SHR,DSN=RDH.$TLS.LOD\n//TRCPRINT DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHGASVC": {"ttr": 28675, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x00b\\x00b\\x00\\x00\\xd9\\xc4\\xc8\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:00", "lines": 98, "newlines": 98, "modlines": 0, "user": "RDHSRC"}, "text": "***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHGASVC - Support SVC for RDHGATB - #GETATB/#FREATB Macros        *\n*                                                                     *\n*    This program is simply a shell that passes control to RDHGATB    *\n*  which does the work to support #GETATB and #FREATB.  The primary   *\n*  purpose is to provide above-the-bar getmain and freemain services  *\n*  for problem state key(8) programs.                                 *\n*                                                                     *\n*                                                                     *\n*  Date     FIX-ID Programmer Description                             *\n*  ======== ====== ========== ======================================= *\n*  00/00/00  M001  R. Harper  Module Developed                        *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                   PSA  Mapping Macro\n         PRINT ON,NOGEN\n*\n*\n***********************************************************************\n* RDHGASVC - Program Main Entry Point                                 *\n***********************************************************************\n*\nRDHGASVC SVCNTRY SVCNO=167,            Program Entry Code              *\n               BASE=(R11),             (Same)                          *\n               TRACE=NO,               (Same)                          *\n               IMP=BASR                (Same)\n*\n** Program Mainline\n*\n         GOSUB MAIN                    Do Main Processing\n*\n** Return to Caller\n*\nMAINEXIT DS    0H\n         SVCEXIT RC=0                  Define Program Exit Code\n*\n***********************************************************************\n* MAIN- Program Main Processing                                       *\n***********************************************************************\n*\nMAIN     SUBNTRY REGS=(R0,R1)\n         CALL RDHGATB,                 RDHGATB Does The Processing     *\n               MF=(E,DSAPLIST)         ..R0/R1 Passed Through\n*\n** Return to Caller\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constant Area\n*\nHEXFF    EQU   X'FF'\n*\n         CONEND ,                      Define End of Constant Area\n*\n***********************************************************************\n* Define Dynamic Storage Area - DSA                                   *\n***********************************************************************\n*\n         DSABEG ,\n*\n*\n         DSAEND ,\n         END ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHGATB": {"ttr": 28678, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x04\\x9c\\x04\\x9c\\x00\\x00\\xd9\\xc4\\xc8\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:00", "lines": 1180, "newlines": 1180, "modlines": 0, "user": "RDHSRC"}, "text": "***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHGATB - Support Module for the #GETATB and #FREATB Macros        *\n*                                                                     *\n*    This program is entered via the execution of a #GETATB/#FREATB   *\n*  to perform GETMAIN and FREEMAIN services for Above-The-Bar         *\n*  storage in increments of less than a megabyte.  It allows the      *\n*  user programs to obtain and release storage above-the-bar in       *\n*  quadword increments, making better use of the storage available.   *\n*    Storage is obtained in the key of the caller and anchored off    *\n*  a task related RME (Resource Manager Exit).                        *\n*                                                                     *\n*                                                                     *\n*  Abend Codes - S0A7   Reason Codes Below                            *\n*  =======================================                            *\n*  08 - Max Storage Requests exceeded (22,000+)                       *\n*  0C - Attempt to obtain more tha one meg or storage                 *\n*  10 - Attempt to freemain storage not allocated                     *\n*  14 - Freemain request not equal to length of getmain               *\n*                                                                     *\n*                                                                     *\n*    This is a simple implementation of getmain and freemain services *\n*  for above-the-bar storage and it does have some limitations.  It   *\n*  can only handle about 22,000 getmains, it's task related meaning   *\n*  that each task gets a new set of storage areas, so that's 22,000   *\n*  getmains per task.  It doesn't support subpools, though it does    *\n*  support keyed storage.  And it does not support fetch or store     *\n*  protected storage.                                                 *\n*    It returns storage on a 32-byte boundry, so whatever length is   *\n*  specified on the request will be rounded up to a 32-byte voundry.  *\n*  And you cannot freemain a portion of the storage that was          *\n*  previously acquired.  The freemain must match the Length of the    *\n*  getmain.                                                           *\n*    So, while the functionality of this service could be increased   *\n*  it's good enough for now as it allows the developer to develop     *\n*  fully functional 64(ANY) programs and systems. It allows the       *\n*  developer to rise above 31-Bit.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  Date     FIX-ID Programmer Description                             *\n*  ======== ====== ========== ======================================= *\n*  00/00/00  M001  R. Harper  Module Developed                        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n         IHASDWA ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n*---------------------------------------------------------------------*\n* Define Internal RDHGATB Data Areas                                  *\n*---------------------------------------------------------------------*\n*\n         PRINT GEN\n         RMEDSECT ,                    Define RMEDSECT Area\n         LSEDSECT ,                    Define Linkage Stack Area\n*\n** Virtual Above-The-Bar Storage Management DSECT Areas\n*\n*\n*  VABDSECT - Virtual ATB Primary Anchor, Exists Below the Line and\n*             is pointed to by an RME\n*  VAADSECT - Virtual ATB Primary Anchor Page, exists above teh bar\n*             and is pointed to by VABANCOR.\n*  VAKDSECT - Virtual ATB Anchor for a Given Key, space is defined\n*             within VAA at VAASTKEY, 16 copies are defined, one\n*             for each possible key.\n*\n*  VASDSECT - Storage Entry, defines characteristics of allocated\n*             or free storage pages.\n*\n*--------------------------------------------------------------------*\n* VABDSECT - Define below the line Anchor Block pointed to by RME\n*--------------------------------------------------------------------*\n*\nVABDSECT DSECT ,\nVABEYECT DS    CL8                     EyeCatcher 'VABDSECT'\nVABTCBAD DS    A                       TCB Address\nVABLENTH DS    F                       Length of This Area\n*\n         DS    0D\nVABRESMP DS    D                       Parm Passed to Resource Manager\nVABRESMT DS    F                       Token From RESMGR Delete\nVABRESM  DS    XL(MDLRESML)            Reserve Space for RESMGR\n*\nVABPAGCT DS    D                       Count of ATB Pages (1)\nVABANCOR DS    AD                      1st ATB Page on Chain\nVABANTOK DS    AD                      User Token for IARV64\n*\n         DS    0D                      End on Doubleword\nVABLNGTH EQU   *-VABDSECT              Length of Area\n*\n*--------------------------------------------------------------------*\n* VAADSECT - Primary Above the Bar Anchor Page\n*--------------------------------------------------------------------*\n*\nVAADSECT DSECT ,                   -*- ATB Task Anchor Dsect\nVAAEYECT DS    CL8                     EyeCatcher 'VAADSECT'\nVAATCBAD DS    A                       TCB Address\nVAAPAGCT DS    F                       Count of Pages in This Extent\nVAANEXTA DS    AD                      Next VAADSECT Extent\n*\nVAASTABL DS    AD                      Beg of Storage Entry Table\nVAASTCHN DS    AD                      Chain of Free Table Entries\n         DS   3D                       (Reserved)\n*\n         DS    0D                      On Doubleword Boundry\nVAASTKEY DS    16XL(VAKLNGTH)          One Entry Per Possible Key\n*\n         DS    0D\nVAALNGTH EQU   *-VAADSECT              Length of Area\nVAAMAXNT EQU   (1024*1024-VAALNGTH)/VASLNGTH   Max Entries Per Page\n*\n*--------------------------------------------------------------------*\n* VAKDSECT - Define Pointers to Alloc/Free storage by Key\n*--------------------------------------------------------------------*\n*\n*   There are 16 VAKDSECT entries defined one for each possible key.\n* these areas are defined within VAADSECT at label VAASTKEY.\n*\n*   This table contains three chains of of VASDSECT entries that\n* define areas of allocated or free storage within ATB pages we\n* have acquired on behalf of the caller.\n*\n* VAKSTPAG - Will point at a VAS that have the address of a page\n*            of ATB Storage we have acquired to fill a request. We\n*            monitor this so we can free the storage at task term.\n*\n* VAKSTFRE - Points to a chain of VAS entries that represent areas\n*            of storage within an ATB page that is free and available\n*            for allocation.\n*\n* VAKSTALO - Points to a chain of VAS Entries that represent areas\n*            of storage within an ATB page that is currently allocated.\n*\n*\nVAKDSECT DSECT ,                   -*- ATB Per Key Storage Entry\nVAKEYECT DS    CL3                     VAK Eye Catcher\nVAKSTKEY DS    X                       Storage Key For This Entry\n         DS    F\nVAKSTPAG DS    AD                      Chain of Gotten Page   Entries\nVAKSTFRE DS    AD                      Chain of Free  Storage Entries\nVAKSTALO DS    AD                      Chain of Alloc Storage Entries\n*\n         DS    0D                      End on Doubleword\nVAKLNGTH EQU   *-VAKDSECT              Length of Area - 32 -Bytes\n*\n*--------------------------------------------------------------------*\n* VASDSECT - Define a Storage Entry for a Page, Allocated or Free Area\n*--------------------------------------------------------------------*\n*\nVASDSECT DSECT ,                   -*- Storage Entry - Aloc/Free\nVASEYECT DS    CL3                     VAS Eye Catcher\nVASSTKEY DS    X                       Storage Key For This Entry\nVAS1FLAG DS    B                       Flag Byte\nVAS1NUSE EQU   X'80'                   This Storage Entry is In Use\nVAS1SPAG EQU   X'40'                   Entry for Gotten Pages Chain\nVAS1SFRE EQU   X'20'                   Entry for Free Space Chain\nVAS1SALO EQU   X'10'                   Entry for Aloc Space Chain\n         DS    BL3\nVASCHAIN DS    AD                      Pointer to Next Entry Aloc/Free\nVASSTPTR DS    AD                      Pointer to Storage Area\nVASSTSIZ DS    A                       Size of Storage Area\nVASPSWAD DS    A                       Return PSW From #GETATB\n         DS    0D                      End on Doubleword\nVASLNGTH EQU   *-VASDSECT              Length of Area - 32-Bytes\n*\n***********************************************************************\n* RDHGATBT - Test Program for RDHGATB                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\n*\n***********************************************************************\n* RDHGATB - Program Main Entry Point                                  *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n         USING VABDSECT,R9             VABDSECT Addressability\n         USING VAADSECT,R8             VAADSECT Addressability\n         USING VAKDSECT,R7             VAKDSECT Addressability\n         USING VASDSECT,R6             VASDSECT Addressability\n*\nRDHGATB  PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               AMODE=64,               Runs AMODE(64)                  *\n               RMODE=ANY,              Runs RMODE(ANY)                 *\n               CBAS=(R12),             Define Constant Base Register   *\n               ABAS=(R11),             Define ATB Base Register        *\n               ESTAE=NO,               No ESTAE Support Needed         *\n               TRACE=NO,               No Traces As Distributed        *\n               IMP=BASR,               Traces are BASR Implementation  *\n               PRINT=GEN,                                              *\n               MSG='Entering RDHGATB #GETATB/#FREATB Support Module.'\n*\n** Save Input Parameters in DSA\n*\n         STG   R0,DSAWORKD             Get Macro Operands\n         MVC   DSAOPFLG(2),DSAWORKD+2  Get Options and Key\n         AHI   R0,31                   Round to 32 Byte Boundry\n         SRL   R0,5                    (Same)\n         SLL   R0,5                    (Same)\n         STY   R0,DSAGLNTH             Save Length of Area to Get/Free\n         STG   R1,DSAGADDR             Save Address if Freemain\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=(*,DSA$RC),        Return to Caller                *\n               R1=(*,DSARAREA)         Return Address\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         XGR   R7,R7                   Zero Work Register\n         IC    R7,DSAGKEY              Get Key of Storage\n         SRL   R7,4                    Put in Low Nibble\n         MH    R7,=Y(VAKLNGTH)         Times Entry Length\n         LA    R7,VAASTKEY(R7)         Point at Proper VAK Entry\n*\n         IF (TM,DSAOPFLG,DSAOPFRE,Z)   If Getmain Request?\n            GOSUB GETMAIN              ..Get Some Storage\n         ELSE ,                        Else\n            GOSUB FREMAIN              ..Free The Storage\n         ENDIF ,\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         ENQ (CONMAJOR,CONMINOR,E,8,STEP) Get Exclusive Control\n*\n         GOSUB LOCVAB                  Locate VABDSECT for Task\n         LGR R9,R1                     Get Address of VABDSECT\n         IF (LTR,R9,R9,Z)              If Not There Yet?\n            GOSUB OPEN                 ..Build it on First Call\n         ENDIF\n         LG  R8,VABANCOR               Get Address of VAADSECT\n*\n** If We're Under an SVRB Get Key of Caller From SVRB\n*\n         LLGT  R2,PSATOLD              Get our TCB Address\n         USING TCB,R2                  And Addressability\n         LLGT  R2,TCBRBP               Get PRB/SVRB Address\n         USING RBBASIC,R2              And Addressability\n         IF (TM,RBSTAB1,RBFTSVRB,O)    If We're Under an SVRB?\n            MVC DSAPSW1,RBOPSW         Save PSW in DSA\n            MVC DSAPSW2,RBOPSW         (Same)\n            MVC DSAGKEY,DSAPSW1+1      Get Key of Caller\n            NI  DSAGKEY,X'F0'          And Unused Bits\n         ELSE ,\n*\n** Get Key of Caller From Linkage Stack\n*\n            STCTG CR15,CR15,DSAWORKD   Get Linkage Stack Address\n            LG R15,DSAWORKD            (Same)\n            SH R15,=Y(LSENLNTH)\n            USING LSEN,R15             Get Temp Addressability\n            MVC DSAPSW1,LSENPSW1       Save PSW in DSA\n            MVC DSAPSW2,LSENPSW2       (Same)\n            MVC DSAGKEY,DSAPSW1+1      Get Key of Caller\n            NI  DSAGKEY,X'F0'          And Unused Bits\n         ENDIF ,\n*\n** If Caller Specified Key= Use the Key He Requested\n*\n         IF (TM,DSAOPFLG,DSAOPKEY,O)   Did Caller Speecify KEY=?\n            MVC DSAGKEY,DSAOKEY        ..Give Him What he Wants\n         ENDIF ,\n** Return to Caller\n*\nINIT999  DS    0H\n         SUBEXIT ,\n         DROP  R15                     Drop Temp Addressability\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n         DEQ (CONMAJOR,CONMINOR,8,STEP) Free Exclusive Control\n*\n** Return to Caller\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** GETMAIN - Obtain Storage Area for Caller                           *\n*=====================================================================*\n*\nGETMAIN  SUBNTRY DATA=('VAKDSECT Area',0(R7),VAKLNGTH)\n         IF (CLC,DSAGLNTH,GT,=A(1024*1024))  If More tha a meg?\n            IF (TM,DSAOPFLG,DSAOPRC,O) Conditional Getmain?\n               MVC DSA$RC,=F'8'        ..Set Bad Return Code\n               B GETM999               ..Exit\n            ELSE ,\n               B ABEND00C                    ..Abend the Task\n            ENDIF ,\n         ENDIF\n*\n         IF (OC,VAKSTPAG,VAKSTPAG,Z)   If First Request This Key\n            GOSUB GETPAGE              ..Get a Page for This Key\n         ENDIF ,\n*\n         GOSUB GETFREE                 Locate Available Free Space\n         GOSUB ASSIGN                  Assign Storage to Caller\n*\n** Return to Caller\n*\nGETM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** FREEMAIN - Free Storage Area for Caller                            *\n*=====================================================================*\n*\nFREMAIN  SUBNTRY DATA=('VAKDSECT Area',0(R7),VAKLNGTH)\n*\n         GOSUB SHOFREE\n         GOSUB LOCALOC                 Locate Allocated Stor VAS Entry\n         GOSUB FREESTR                 Freemain The Storage\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n*=====================================================================*\n*                                                                     *\n** OPEN - Build Initial Data Areas for Managing ATB Storage           *\n*                                                                     *\n*    This routine obtains storage below the line for the VABDSECT     *\n*  area, and the first page of ATB Storage above the bar.  This\n*  first page is contains the VAADSECT area followed by as many       *\n*  VASDSECT areas that will fit in that page, about 22,000.  This     *\n*  first page is used to manage allocated and free storage above      *\n*  the bar.  Another page will later be obtained for a VAKDSECT       *\n*  of the key requested by that caller and storage in that second     *\n*  page will be assigned and returned to the caller.                  *\n*    Doing it this way keeps my control block that I need to have     *\n*  to manage these requests seperate from the storage that I then     *\n*  assign to the user seperate and less likely that they will         *\n*  overlay my control blocks.  It should be in fetch protected and    *\n*  in a supervisor key.  Maybe I'll do that later.  For now it's      *\n*  non-fetch protected and in key zero storage.                       *\n*    It also establishes a Resource Manager Exit so we can locate the\n*  area on subsequent calls, and free the storage at\n*  Task termination.                                                  *\n*                                                                     *\n*=====================================================================*\n*\nOPEN     SUBNTRY ,\n*\n** Obtain Storage for VABDSECT Area Below-The-Line\n*\n         STORAGE OBTAIN,               Obtain Storage for VAB          *\n               LENGTH=4096,            (Same)                          *\n               LOC=(24,31),BNDRY=PAGE  (Same) - Below The Line\n*\n         LR  R9,R1                     Get Address of VABDSECT\n         MVCY VABEYECT,=C'VABDSECT'    Place Eye Catcher\n         MVC VABTCBAD,PSATOLD          Save TCB Address\n         MVC VABLENTH,=A(4096)         Save Length for Freemain\n         #TRACE MSG='VABDSECT Address in R1',REGS=(R1)\n*\n** Obtain Storage for VAADSECT Area Above-The-Bar\n*\n         MVC  VABANTOK+4(4),PSATOLD    Set DSA Address as User Token\n         OI   VABANTOK+3,X'FF'         Non-Zero for SUPR Pgms\n         MVCY VABPAGCT,=AD(1)          Save Page Count for Freemain\n         LA   R2,VABPAGCT              Set Number of Segments (Meg)\n         IARV64 REQUEST=GETSTOR,       Get Some ATB Storage            *\n               SEGMENTS=(R2),          ..Number of Segments            *\n               FPROT=NO,               ..Not Fetch Protected           *\n               KEY=DSAGKEY,            ..Storage Key of Page           *\n               ORIGIN=VABANCOR,        ..Return Address Here           *\n               USERTKN=VABANTOK,       ..Indicate User Token           *\n               MF=(E,DSAV64)           ..Address of List Form\n         LG R8,VABANCOR                Get Address of Anchor Page VAA\n*\n         MVCY  VAAEYECT,=C'VAADSECT'   Set Eye Catcher\n         MVC   VAATCBAD,PSATOLD        Save TCB Address\n         MVC   VAAPAGCT,VABPAGCT+4     Save Page Count\n         LA    R15,VAALNGTH(,R8)       Get Start of Storage Entries\n         STG   R15,VAASTABL            Save in VAADSECT\n         STG   R15,VAASTCHN            Chain of Available Entries\n*\n** Populate the VAK Entries in the VAA\n*\n         LA  R7,VAASTKEY               Get Key Table Address\n         USING VAKDSECT,R7             Temp Addressability\n         LA  R2,16                     Process 16 Table Entries\n         XGR R1,R1                     Initial Key Value\n         DO FROM=(R2)                  Loop Through table\n            MVC VAKEYECT,=C'VAK'       Set Eye Catcher\n            LR  R0,R1                  Put in Proper Format\n            SLL R0,4                   (Same)\n            STC R0,VAKSTKEY            Set Key This Entry\n            LA  R1,1(,R1)              Bump to Next Key\n            LA  R7,VAKLNGTH(,R7)       Bump to Next Table Entry\n         ENDDO ,                       -> Loop\n*\n** Populate the VAS Entries and Build Initial Chain\n*\n         LG    R6,VAASTABL             Save in VAADSECT\n         L     R14,=A(VAAMAXNT)        Get Count of Entries Per Page\n         DO FROM=(R14)                 Build Initial Free Chain\n            MVC VASEYECT,=C'VAS'       Set Eye Catcher\n            LA  R1,VASLNGTH(,R6)       Point at Next Entry\n            STG R1,VASCHAIN            Set as Next Entry-Chain Forward\n            LGR R6,R1                  Point at Next Entry\n         ENDDO ,                       -> Loop\n*\n         SHY R6,=Y(VASLNGTH)           Back Up to Last Entry\n         XC  VASCHAIN,VASCHAIN         Zero Chain Ptr in Last Entry\n*\n** Establish a Resourge Manager Exit for This Task if Not Present\n*\n         L     R2,=A(RDHVABEX)             Identify The EP for LINK\n         IDENTIFY EP=RDHVABEX,ENTRY=(R2)   (Same)\n*\n         MVC   VABRESMP(4),=C'VABP'    Set Identifier in Param\n         ST    R9,VABRESMP+4           Addr of VABDSECT for This Task\n         MVC   VABRESM,MDLRESM         Set List Form in Storage\n*\n         SAM31                         Downgrade to 31-Bit\n         LG    R3,=VD(RDHVABEX)\n         RESMGR ADD,TYPE=TASK,         Establish RESMGR Exit This Task *\n               ASID=CURRENT,              ..And This Address Space     *\n               ROUTINE=(BRANCH,(R3)),     ..RSM Routine Under an RB    *\n               PARAM=VABRESMP,            ..Parameter Input            *\n               TOKEN=VABRESMT,            ..Token for DELETE           *\n               MF=(E,VABRESM)             ..Point to List Form\n*\n         IF (LTR,R15,R15,NZ)           Established Properly?\n            #SUICIDE MSG='RDHT0001: RESMGR Macro Failed.'\n         ENDIF ,\n         SAM64                         Reset Proper Amode\n*\n** Show Your Work\n*\n         #TRACE DATA=('VABDSECT Data Area',0(R9),VABLNGTH)\n         #TRACE DATA=('VAADSECT Data Area',0(R8),VAALNGTH)\n         #TRACE DATA=('VASDSECT Beg Areas',VAALNGTH(R8),64)\n*\n         LGR R2,R8                     Get End Address of Page\n         AG  R2,=AD(1024*1024-64)      (Same)\n         #TRACE REGS=(R2,R8,R9)\n         #TRACE DATA=('VASDSECT End Areas',0(R2),64)\n*\n** Return to Caller\n*\nOPEN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n*                                                                     *\n** LOCVAB - Locate the VABDSECT AREA for the Current Task             *\n*                                                                     *\n*   This routine will loop through the RME DSECTS for the current     *\n* TCB looking for the Entry for RDHVABEX.  If found it will return    *\n* the address of VABDSECT in R1.  If not found R1 will be zero on     *\n* exit.                                                               *\n*                                                                     *\n*=====================================================================*\n*\n         USING TCB,R14                 TCB  Addressability\n         USING STCB,R15                STCB Addressability\n         USING RMEDSECT,R1             RME  Addressability\n*\nLOCVAB   SUBNTRY ,\n         LY R14,PSATOLD                Address of our TCB\n         LY R15,TCBSTCB                Address of STCB\n         LY R1,STCBRMEF                Get RESMGR Queue\n*\n         DO WHILE=(LTR,R1,R1,NZ)       Loop RME Chain\n            CLCY RMEPARAM,=C'VABP',SAVE=YES 20-Bit Complient\n            IF (EQ)                    If This is Our Exit...\n               DOEXIT ,                     ..And Exit\n            ENDIF\n            LY R1,RMEFWDPT             Get Next RME on Chain\n         ENDDO ,                       -> Loop\n*\n         IF (LTR,R1,R1,NZ)             If We Found Our Anchor\n            LY R1,RMEPARAM+4           ..Get Address of VABDSECT\n         ENDIF ,                       Else, Return Zero\n*\n** Return to Caller\n*\n         SUBEXIT MSG='VABDSECT Address Returned in R1.',REGS=(R1)\n*\n         DROP  R14,R15,R1              Drop Temp Addressability\n*\n*=====================================================================*\n** GETPAGE - Get a Page for a VAK of a Specific Key                   *\n*=====================================================================*\n*\nGETPAGE  SUBNTRY\n         MVC  DSAANTOK+4(4),PSATOLD    Set TCB Address as User Token\n         OI   DSAANTOK+3,X'FF'         Non-Zero for SUPR Pgms\n         MVCY DSAPAGCT,=AD(1)          Obtain 1 Page at a Time\n         LA   R2,DSAPAGCT              Set Number of Segments (Meg)\n         IARV64 REQUEST=GETSTOR,       Get Some ATB Storage            *\n               SEGMENTS=(R2),          ..Number of Segments            *\n               FPROT=NO,               ..Not Fetch Protected           *\n               ORIGIN=DSAANCOR,        ..Return Address Here           *\n               KEY=VAKSTKEY,           ..Specify Storage Key           *\n               USERTKN=DSAANTOK,       ..Indicate User Token           *\n               MF=(E,DSAV64)           ..Address of List Form\n*\n** Get a VAS Entry to a Page for VAK\n*\n         GOSUB GETFVAS                 Get as Available VAS\n         LGR R6,R1                     And Addressability\n*\n** Fill in VAS Dsect for a Gotten ATB Page\n*\n         XC VASDSECT(VASLNGTH),VASDSECT Start Fresh\n         MVCY VASEYECT,=C'VAS'          Set Sys Catcher\n         MVCY VASSTKEY,VAKSTKEY         Set Storage Key\n         OI  VAS1FLAG,VAS1SPAG          Indicate Gotten Page Chain\n         MVC VASCHAIN,VAKSTPAG          Insert This One First\n         STG R6,VAKSTPAG                (Same)\n         MVC VASSTPTR,DSAANCOR          Set New Page Address\n         MVC VASSTSIZ,=A(1024*1024)     Size is One Meg\n*\n** Get a VAS Entry For Free Storage Area\n*\n         GOSUB GETFVAS                 Get as Available VAS\n         LGR R6,R1                     And Addressability\n*\n** Fill in VAS Dsect for a Free Storage Entry\n*\n         XC VASDSECT(VASLNGTH),VASDSECT Start Fresh\n         MVC VASEYECT,=C'VAS'           Set Sys Catcher\n         MVC VASSTKEY,VAKSTKEY          Set Storage Key\n         OI  VAS1FLAG,VAS1SFRE          Indicate Gotten Page Chain\n         MVC VASCHAIN,VAKSTFRE          Insert This One First\n         STG R6,VAKSTFRE                (Same)\n         MVC VASSTPTR,DSAANCOR          Set New Page Address\n         MVC VASSTSIZ,=A(1024*1024)     Size is One Meg\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n*=====================================================================*\n** GETFREE - Get VAS Free Space Entry That Will Satisfy The Request   *\n*=====================================================================*\n*\nS        USING VASDSECT,R5             Previous VAS Area\n*\nGETFREE  SUBNTRY\n         LA R5,VAKSTFRE-(VASCHAIN-VASDSECT) Set 1st Forward Pointer\n         LG R6,VAKSTFRE                Get 1st Free Space Entry\n         DO WHILE=(LTR,R6,R6,NZ)       Loop Through Free Stor Chain\n            DOEXIT (CLC,DSAGLNTH,LE,VASSTSIZ) Exit if We Fit...\n            LGR R5,R6                  Save Previous Entry\n            LG  R6,VASCHAIN            Get Next Entry on Chain\n         ENDDO ,\n*\n         IF (LTR,R6,R6,Z)              If No Free Space Large Enough\n            GOSUB GETPAGE              ..Get Another Page\n            LG  R6,VAKSTFRE            ..And Return This Entry\n            MVC VAKSTFRE,VASCHAIN      ..And Pop it Off Chain\n         ELSE ,\n            MVC S.VASCHAIN,VASCHAIN    Pop This One Off Chain\n         ENDIF ,                       By Chaining Next VAS to Prev\n         XC  VASCHAIN,VASCHAIN         And Note We're Unchained\n*\n         #TRACE DATA=('Found Free Space VAS',0(R6),VASLNGTH),          *\n               MSG=('VAKSTFRE: ',VAKSTFRE)\n*\n** Return to Caller\n*\n         SUBEXIT ,\n         DROP  S                       Drop Temp Addressability\n*\n*=====================================================================*\n** ASSIGN - Assign This Storage to Caller\n*=====================================================================*\n*\n* R6 -> VAS Free Space Entry That Has Been Popped off the Free Chain\n*\nS        USING VASDSECT,R5             Allocated Space Entry\n*\nASSIGN   SUBNTRY\n         GOSUB GETFVAS                 Get an Available VAS\n         LGR R5,R1                     And Addressability\n         #TRACE DATA=('VAKDSECT On Entry',0(R7),VAKLNGTH)\n         #TRACE DATA=('Free Space VAS On Entry',0(R6),VASLNGTH)\n*\n** Fill in VAS Dsect for an Allocated Storage Entry\n*\n         XC  S.VASDSECT(VASLNGTH),S.VASDSECT  Start Fresh\n         MVC S.VASEYECT,=C'VAS'        Set Sys Catcher\n         MVC S.VASSTKEY,VAKSTKEY       Set Storage Key\n         OI  S.VAS1FLAG,VAS1SALO       Indicate Gotten Page Chain\n         LG  R14,VASSTPTR              Get Free Storage Pointer\n         STG R14,S.VASSTPTR            Set Allocated Addr in S.VAS\n         MVC S.VASSTSIZ,DSAGLNTH       Size User Requests\n         MVC S.VASPSWAD,DSAPSW2+4      Save Callers Address\n         MVC DSARAREA,S.VASSTPTR       Pass Address to Caller\n*\n         MVC S.VASCHAIN,VAKSTALO       Add Entry to Allocated Chain\n         STG R5,VAKSTALO               (Same)\n*\n** Update the Free Space VAS and Put it Back on the Free Space Chain\n*\n         LG  R14,VASSTPTR              Get Free Storage Pointer\n         A   R14,DSAGLNTH              Add Length of Area to Get\n         STG R14,VASSTPTR              Set New Free Space Address\n         LLGT R15,VASSTSIZ             Get Free Area Size\n         S   R15,DSAGLNTH              Sub Length of Area to Get\n         ST  R15,VASSTSIZ              Set New Free Space Length\n*\n         IF (LTR,R15,R15,NZ)           If Free Space Not Exhausted?\n            MVC VASCHAIN,VAKSTFRE      ..Put VAS Back on Free Chain\n            STG R6,VAKSTFRE            ..(Same)\n         ELSE ,                        Else\n            XC  VASDSECT(VASLNGTH),VASDSECT Re-Initialize VAS\n            MVC VASEYECT,=C'VAS'            (Same)\n            MVC VASCHAIN,VAASTCHN      And Put it on Free VAS Chain\n            STG R6,VAASTCHN            (Same)\n         ENDIF\n*\n         #TRACE DATA=('VAKDSECT Area',0(R7),VAKLNGTH)\n         #TRACE DATA=('New Free Space VAS',0(R6),VASLNGTH)\n         #TRACE DATA=('New Alloc Space VAS',0(R5),VASLNGTH)\n*\n** Return to Caller\n*\n         SUBEXIT ,\n         DROP  S                       Drop Temp Addressability\n*\n*=====================================================================*\n** GETFVAS - Get a Free VAS Entry From the Free Chain - Pop Off Chain *\n*=====================================================================*\n*\n*  On Exit R1 -> Free VAS Entry to Use\n*\nS        USING VASDSECT,R1             VAS Temp Addressability\n*\nGETFVAS  SUBNTRY ,\n         LG   R1,VAASTCHN              Get Chain of Available VAS\n         IF (LTR,R1,R1,Z)              If None Left?\n            B ABEND008                 ..Force an Abend\n         ENDIF ,\n*\n         LG R1,VAASTCHN                Get First Free VAS Entry\n         DO UNTIL=(CSG,R1,R2,Z,VAASTCHN) Catch it if you Can\n            LG R2,S.VASCHAIN           Get Forward Pointer\n         ENDDO ,                       -> Try Again - Spin loop\n*\n** Return to Caller\n*\n         SUBEXIT ,\n         DROP  S                       Drop Temp Addresability\n*\n*=====================================================================*\n** LOCALOC - Locate Callers Allocated Storage VAS for Freemain        *\n*=====================================================================*\n*\n*    This routine will runn the allocated storage chain of VASDSECTs\n*  and locate teh entry created when the storage was getmained.  It\n*  will then pop it off the chain and return the address in R6.\n*    In the unlikely event that we do not find a allocate storage\n*  VAS that matches the address passed in by the caller, we will\n*  terminate the task with a U0167 abend RS=16.\n*\nS        USING VASDSECT,R5             Allocated Space Entry\n*\nLOCALOC  SUBNTRY\n         LA R5,VAKSTALO-(VASCHAIN-VASDSECT)   Set 1st Forward Pointer\n         LG R6,VAKSTALO                       Get Alloc Storage Head\n         DO WHILE=(LTR,R6,R6,NZ)              Run The Chain\n            DOEXIT (CLC,DSAGADDR,EQ,VASSTPTR) -> Exit When Found\n            LGR R5,R6                         Save Previous Entry\n            LG  R6,VASCHAIN                   Get Next Entry on Chain\n         ENDDO ,                              -> Loop\n*\n         IF (LTR,R6,R6,Z)              If We Didn't Find It\n            B ABEND010                 ..Abend The Bad Boy\n         ELSE ,\n            IF (CLC,DSAGLNTH,NE,VASSTSIZ)  If Not Same Size?\n               B ABEND014                  ..Abend the Caller U167/20\n            ENDIF\n            MVC S.VASCHAIN,VASCHAIN    Pop This One Off Chain\n         ENDIF ,                       By Chaining Next VAS to Prev\n         XC  VASCHAIN,VASCHAIN         And Note We're Unchained\n*\n** Return to Caller\n*\n         SUBEXIT DATA=('Found ALOC Space VAS',0(R6),VASLNGTH),         *\n               MSG=('VAKSTALO: ',VAKSTALO)\n         DROP S                        Drop Temmp Addressability\n*\n*=====================================================================*\n** FREESTR - Freemain the Storage Requested By Caller                 *\n*=====================================================================*\n*\n* R6 -> VAS Allocated Space Entry That Has Been Popped off the Chain\n*\n*   At this point the storage has actually already been freed in\n* that the allocated storage has been located and the associated\n* VAS has been popped off the allocated storage chain.  What we\n* need to do now is to locate any free space entry on the free\n* space chain, if there is one, and merge them together so we\n* don't get too fragmented.\n*\nS        USING VASDSECT,R5             Previous Free Space VAS\nA        USING VASDSECT,R4             Allocated Space Entry\n*\nFREESTR  SUBNTRY DATA=('Allocated Space VAS Input',0(R6),VASLNGTH)\n         MVI DSAMERGE,C'N'             Set Indicator Negative\n         LGR R4,R6                     Save Allocated Space VAS\n*\n** Attempt to Merge Allocated Space VAS with a Free Space VAS\n*\n         LG  R2,A.VASSTPTR             Get The Ending Address\n         AGF R2,A.VASSTSIZ             (Same)\n*\n         LA R5,VAKSTFRE-(VASCHAIN-VASDSECT) Set 1st Forward Pointer\n         LG R6,VAKSTFRE                Get 1st Free Space Entry\n         DO WHILE=(LTR,R6,R6,NZ)       Loop Through Free Stor Chain\n            IF (CG,R2,EQ,VASSTPTR)     If AloEnd=FreBeg?\n               #TRACE DATA=('Merging Before Free VAS',0(R6),VASLNGTH)\n               MVC VASSTPTR,A.VASSTPTR ..Free Space Entry Has New Beg\n               LLGT R14,VASSTSIZ       ..And Grew a Little Bigger\n               A    R14,A.VASSTSIZ     ..(Same)\n               ST   R14,VASSTSIZ       ..Save Result\n               MVI  DSAMERGE,C'Y'      ..Indicate Merge\n               LGR R5,R6               Position Between Prev & Next\n               LG  R6,VASCHAIN         To See if They Can Now Merge\n               #TRACE DATA=('Free VAS After Merge',0(R6),VASLNGTH)\n            ENDIF ,\n*\n            LG  R3,VASSTPTR            Get The Ending Addr of Free VAS\n            AGF R3,VASSTSIZ            (Same)\n            IF (CG,R3,EQ,A.VASSTPTR)   If FreBeg=AloEnd?\n               #TRACE DATA=('Merging After Free VAS',0(R6),VASLNGTH)\n               LGF R14,VASSTSIZ        ..Get Previous Free VAS Size\n               A   R14,A.VASSTSIZ      ..And Add Size of Aloc VAS\n               ST  R14,VASSTSIZ        ..Save Result\n               MVI DSAMERGE,C'Y'       ..Indicate Merge\n               LGR R5,R6               Position Between Prev & Next\n               LG  R6,VASCHAIN         To See if They Can Now Merge\n               #TRACE DATA=('Free VAS After Merge',0(R5),VASLNGTH)\n               #TRACE DATA=('Next VAS After Merge',0(R6),VASLNGTH)\n            ENDIF ,\n*\n            DOEXIT (CLI,DSAMERGE,EQ,C'Y')   -> Exit if Done\n            LGR R5,R6                  Save Previous Entry\n            IF (LTR,R6,R6,NZ)          If More Than 1 Entry?\n               LG R6,VASCHAIN          Get Next Entry on Chain\n            ENDIF ,\n         ENDDO ,\n*\n** Dispose of the Allocated Space VAS If We Merged\n*\n         IF (CLI,DSAMERGE,EQ,C'Y')     If we Merged With a Free VAS\n            MVC A.VASEYECT,=C'VAS'     Set Eye Catcher\n            MVC A.VASCHAIN,VAASTCHN    Add Entry to Free VAS Chain\n            STG R4,VAASTCHN            (Same)\n*\n*                                  -*- Check for Double Mergings\n            LG  R2,S.VASSTPTR          Get The Ending Address For Prev\n            AGF R2,S.VASSTSIZ          (Same)\n            #TRACE MSG='We Did Merge',REGS=(R2,R6)\n            GOSUB SHOFREE\n            IF (LTR,R6,R6,NZ),AND,     If PrevEnd=NextBeg?             *\n               (CG,R2,EQ,VASSTPTR)\n               #TRACE DATA=(('Double Merge Prev',0(R5),VASLNGTH),      *\n               ('Double Merge Next',0(R6),VASLNGTH))\n               LGF R14,S.VASSTSIZ      ..Get Prev VAS Size\n               A   R14,VASSTSIZ        ..And Add Size of Next VAS\n               ST  R14,S.VASSTSIZ      ..Save Result\n               MVC S.VASCHAIN,VASCHAIN ..Chain Prev to Next Next\n               #TRACE DATA=('After Double Merge',0(R5),VASLNGTH)\n*\n               XC  VASDSECT(VASLNGTH),VASDSECT Indicate Free\n               MVC VASEYECT,=C'VAS'    Set Eye Catcher\n               MVC VASCHAIN,VAASTCHN   Add Entry to Free VAS Chain\n               STG R6,VAASTCHN         (Same)\n               LGR R6,R5               Make Merged one Current\n            ENDIF ,\n         ENDIF ,\n*\n** Check For Empty Page - Can it Be Freed?\n*\n         IF (CLC,VASSTSIZ,EQ,=A(1024*1024)) Is This Page Empty?\n            GOSUB FREPAGE                   ..Yes -> Free The Storage\n         ENDIF ,\n*\n** Dispose of the Allocated Space VAS When We Didn't Merge\n*        Allocated VAS is Now a Free VAS - Insert in Free Chain\n*\n         IF (CLI,DSAMERGE,EQ,C'N')     If We Didn't Merge?\n            #TRACE MSG='We Did Not Merge'\n            GOSUB SHOFREE\n*\n            XGR R5,R5                  Set Zero Prev\n            LG  R6,VAKSTFRE            Get 1st Free Space Entry\n            #TRACE MSG=('VASSTPTR: ',VASSTPTR),REGS=(R4,R6)\n            IF (CLC,A.VASSTPTR,LT,VASSTPTR), If We're First?           *\n               AND,(LTR,R6,R6,NZ)            ..And Not None\n               MVC A.VASCHAIN,VAKSTFRE       ..Make It So\n               STG R4,VAKSTFRE               ..(Same)\n*\n               #TRACE DATA=('1st On Chain',0(R4),VASLNGTH),REGS=(R4,R6)\n               #TRACE DATA=('Nxt On Chain',0(R6),VASLNGTH)\n            ELSE ,\n             IF (LTR,R6,R6,NZ)\n               IF (OC,VASCHAIN,VASCHAIN,Z) If Only 1 Entry on Chain?\n                  STG R4,VASCHAIN             ..Point Last One At Us\n                  MVC A.VASCHAIN,=AD(0)       ..We're Last\n*\n                  #TRACE DATA=('1 Lst On Chain',0(R6),VASLNGTH)\n                  #TRACE DATA=('1 Alo On Chain',0(R4),VASLNGTH)\n               ELSE ,\n*                                  -*- Insert in The Middle\n                  LGR R5,R6            Bump to Next Entry - Beginning\n                  LG R6,VASCHAIN       (Same)\n                  GOSUB INSERT         Insert AloVas Onto Free Chain\n               ENDIF ,\n             ELSE ,\n                  STG R4,VAKSTFRE             ..We Are First On Chain\n                  MVC A.VASCHAIN,=AD(0)       ..No Next\n                  #TRACE DATA=('Only On Chain',0(R4),VASLNGTH)\n             ENDIF ,\n            ENDIF ,\n         ENDIF ,\n*\n*temp    GOSUB SHOALOC\n*temp    GOSUB SHOFREE\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n*=====================================================================*\n** INSERT - Insert Allocated VAS on Free Chain After Freemain         *\n*=====================================================================*\n*\nINSERT   SUBNTRY REGS=(R4,R5,R6)\n         LG R14,A.VASSTPTR             Get Addr End of AloVas\n         A  R14,A.VASSTSIZ             (Same)\n*\n         DO WHILE=(LTR,R6,R6,NZ)       Loop Through Free Stor Chain\n*\n** Insert After Lesser Address Entry And Before Greater\n*\n            LG R15,S.VASSTPTR          Get End of Previous VAS\n            A  R15,S.VASSTSIZ          S(ame)\n*           *\n            #TRACE REGS=(R15,R15)\n            IF (CG,R15,LT,A.VASSTPTR),AND,  If Prev End LT Our Addr?   *e\n               (CG,R14,LT,VASSTPTR)         ..And Our End LT Nxt Addr?\n               MVC A.VASCHAIN,S.VASCHAIN    ..Insert Us Here\n               STG R4,S.VASCHAIN            ..(Same)\n*\n               #TRACE DATA=('Prv On Chain',0(R5),VASLNGTH)\n               #TRACE DATA=('Alo On Chain',0(R4),VASLNGTH)\n               #TRACE DATA=('Nxt On Chain',0(R6),VASLNGTH)\n               DOEXIT ,\n            ENDIF ,\n*\n** Check If Inserting After Last Free Space Entry\n*\n            IF (OC,VASCHAIN,VASCHAIN,Z) If We're Last?\n               STG R4,VASCHAIN                ..Point Last One At Us\n               MVC A.VASCHAIN,=AD(0)          ..We're Last\n*\n               #TRACE DATA=('2 Lst On Chain',0(R6),VASLNGTH)\n               #TRACE DATA=('2 Alo On Chain',0(R4),VASLNGTH)\n               DOEXIT ,                       -> Done\n            ENDIF ,\n*\n            LGR R5,R6                  Save Previous Entry\n            LG  R6,VASCHAIN            Get Next Entry on Chain\n         ENDDO ,\n*\n** Return to Caller\n*\n         SUBEXIT ,\n         DROP A,S                      Drop Temmp Addressability\n*\n*=====================================================================*\n** FREPAGE - Freemain Emptied the ATB Page - Free The Page            *\n*=====================================================================*\n*\nFREPAGE  SUBNTRY\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n*=====================================================================*\n** SHOALOC - Show Allocated Chain for VAK                             *\n*=====================================================================*\n*\nSHOALOC  SUBNTRY\n         LG   R14,VAKSTALO             Get Head of Chain\n         DO WHILE=(LTR,R14,R14,NZ)\n            #TRACE DATA=('Alocated Storage Chain',0(R14),VASLNGTH),    *\n               NOHEAD=YES\n            LG R14,VASCHAIN-VASDSECT(,R14)\n         ENDDO\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n*=====================================================================*\n** SHOFREE - Show Free Chain for VAK                                  *\n*=====================================================================*\n*\nSHOFREE  SUBNTRY\n         LG R14,VAKSTFRE               Get Head of Chain\n         IF (LTR,R14,R14,NZ)\n            LA R15,5\n            DO FROM=(R15)\n               #TRACE DATA=('Free Storage Chain',0(R14),VASLNGTH),     *\n               NOHEAD=YES\n               LG R14,VASCHAIN-VASDSECT(,R14)\n            DOEXIT (LTR,R14,R14,Z)\n            ENDDO\n         ENDIF\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n***********************************************************************\n** ABENDS Supported by this program.                                  *\n***********************************************************************\n*\nABEND008 DS    0H\n         #WTO MSGID=RDH9001A,ROUTCDE=(11),                             *\n               'Max ATB Getmains have been exceeded.  '\n         ABEND 167,REASON=8         ...Terminate for Now\n*\nABEND00C DS    0H\n         #WTO MSGID=RDH9002A,ROUTCDE=(11),                             *\n               'Attempt to obtain more than 1 meg of ATB storage.'\n         ABEND 167,REASON=12        ...Terminate for Now\n*\nABEND010 DS    0H\n         #WTO MSGID=RDH9003A,ROUTCDE=(11),                             *\n               'Attempt to freemain ATB storage not allocated.'\n         ABEND 167,REASON=16        ...Terminate for Now\n*\nABEND014 DS    0H\n         #WTO MSGID=RDH9004A,ROUTCDE=(11),                             *\n               'Freemain request not equal in length to getmain.'\n         ABEND 167,REASON=16        ...Terminate for Now\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\nCONMAJOR DC    CL8'SYSATB'             Serialization Enqueue\nCONMINOR DC    CL8'STORAGE'            (Same)\n*\nMDLRESM  RESMGR ADD,TYPE=ADDRSPC,      Define Model for RESMGR         *\n               ROUTINE=(LINK,*-*),     (Same)                          *\n               PARAM=*-*,              (Same)                          *\n               TOKEN=*-*,MF=L          (Same)\nMDLRESML EQU   *-MDLRESM               (Same)\n*\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSAMERGE DS    C                       Merge indicator Y/N\nDSAAB$RS DS    X                       ABEND Reason Code\n*\nDSAOPFLG DS    B                       Option Flags Bits 24-31 of R0\nDSAOPFRE EQU   X'04'                   ..Call is for Freemain\nDSAOPRC  EQU   X'02'                   ..Conditional Getmain Request\nDSAOPKEY EQU   X'01'                   ..Key Specified on Macro\nDSAOKEY  DS    X                       Key if Specified on Macro\n*\nDSAGADDR DS    AD                      Address of Area to Free\nDSAGLNTH DS    A                       Length of Storage to Obtain\nDSAGKEY  DS    X                       Storage Key to Obtain\n*\nDSARAREA DS    AD                      Address of Area Returned\n*\nDSAPSW1  DS    D                       Z/PSW\nDSAPSW2  DS    D                       Z/PSW\n*\nDSAANTOK DS    D\nDSAPAGCT DS    D\nDSAANCOR DS    D\n*\n         DSAEND ,                      Define DSA Suffex\n*\n***********************************************************************\n* Define Above-The-Bar Storage Area                                   *\n***********************************************************************\n*\n         ATBBEG ,                      Define ATB Prefix\n*\n*\n         ATBEND ,                      Define ATB Suffex\n*\n***********************************************************************\n*                                                                     *\n** RDHRESEX - Resource Manager Exit Routine                           *\n*                                                                     *\n*    This routine was needed to perform cleanup at End-Of-Task.  It's *\n*  probably not really necessary, because the Above-The-Bar storage   *\n*  that we acquire is task related and I expect the operating system  *\n*  will happily do the cleanup for us.  However, if I choose to       *\n*  support common storage above-the-bar it may be required.  Anyway,  *\n*  it's here if I need it later.                                      *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n         USING VABDSECT,R9             VABDSCET Addressability\n         USING VAADSECT,R8             VAADSCET Addressability\n*\nRDHVABEX PGMNTRY TYPE=MAIN,                                            *\n               CBAS=(R12),             Define Constant Base            *\n               ABAS=(R11),             Define ATB Base                 *\n               AMODE=31,               Define Addressing Mode          *\n               RMODE=ANY,              Define Residency Mode           *\n               TRACE=NO,               Define Residency Mode           *\n               ESTAE=YES               Define ESTAE Support\n*\n         MVC   DSARETRY,=A(RDHVABND)   If Error Just Exit\n         L     R9,4(,R1)               Get Address of 8-Byte Param\n         L     R9,4(,R9)               Get Address of VABDSECT\n         MODESET MODE=SUP,KEY=ZERO\n*\n** RESMGR Exit Mainline\n*\n         GOSUB CLOS                    Close Up Shop and Free Storage\n*\n** Return to Caller\n*\nRDHVABND DS    0H\n         PGMEXIT RC=8,                 Return to Caller                *\n               RS=1                    ..Terminate RESMGR Exit\n*\n*=====================================================================*\n** CLOS - Close Processing for ATB Storage For This Task              *\n*=====================================================================*\n*\nCLOS     SUBNTRY ,\n         RESMGR DELETE,TYPE=TASK,      Delete RESMGR Exit This Task    *\n               ASID=CURRENT,           ..And This Address Space        *\n               TOKEN=VABRESMT,         ..Token for DELETE              *\n               MF=(E,VABRESM)          ..Point to List Form\n*\n** Free Storage For VAADSECT Area\n*\n         IARV64 REQUEST=DETACH,        Get Some ATB Storage            *\n               MEMOBJSTART=VABANCOR,   ..Address of Storage to Free    *\n               USERTKN=VABANTOK,       ..Indicate User Token This Pgm  *\n               MF=(E,DSAV64)           ..Address of List Form\n*\n** Free Storage for TRCDSECT\n*\n         L     R0,VABLENTH             Length of VABDSECT Area\n         STORAGE RELEASE,              Free Storage for VABDSECT       *\n               ADDR=(R9),              (Same)                          *\n               LENGTH=(0)              (Same)\n*\n** Return to Caller\n*\nCLOS999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n** Define Constant Area                                               *\n***********************************************************************\n*\n         CONBEG ,\n*\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,\n*\n         DSAEND ,\n*\n***********************************************************************\n* Define Above-The-Bar Storage Area                                   *\n***********************************************************************\n*\n         ATBBEG ,                      Define ATB Prefix\n*\n*\n         ATBEND ,                      Define ATB Suffex\n         END   ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHINSTL": {"ttr": 29187, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x02m\\x02m\\x00\\x00\\xd9\\xc4\\xc8\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:00", "lines": 621, "newlines": 621, "modlines": 0, "user": "RDHSRC"}, "text": "***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHINSTL - Install and Remove an SVC From the SVC Table            *\n*                                                                     *\n*                                                                     *\n*  Date     FIX-ID Programmer Description                             *\n*  ======== ====== ========== ======================================= *\n*  00/00/00  M001  R. Harper  Module Developed                        *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Define PSA Addressability\n*\nRDHINSTL PGMNTRY TYPE=MAIN,            Define Program Entry Code       *\n               BASE=(R11,R12),                                         *\n               TRACE=NO,                                               *\n               IMP=BASR,                                               *\n               PRINT=GEN\n*\n         GOSUB INIT                    Perform Initialization\n         IF (CLC,DSARC,EQ,=F'0')       If Initialized\n            GOSUB MAIN                 Do Main Processing\n         ENDIF ,\n         GOSUB TERM                    Do Termination Processing\n*\n** Return to Caller\n*\nMAINEXIT DS    0H\n         PGMEXIT RC=0                  Define Program Exit Code\n\n***********************************************************************\n* MAIN- Program Main Processing                                       *\n***********************************************************************\n*\nMAIN     SUBNTRY ,\n         IF (TM,DSAFLAG,DSADMP,O)\n            GOSUB DUMP\n         ELSEIF (TM,DSAFLAG,DSAINS,O)\n            GOSUB INSERT\n            GOSUB DUMP\n         ELSEIF (TM,DSAFLAG,DSAREM,O)\n            GOSUB REMOVE\n            GOSUB DUMP\n         ELSEIF (TM,DSAFLAG,DSAREP,O)\n            GOSUB DUMP\n            GOSUB REPLACE\n            GOSUB DUMP\n         ENDIF ALL\n*\n** Return to Caller\n*\nMAINEND  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n* INSERT - Add an SVC to the SVC Table                                *\n***********************************************************************\n*\nINSERT   SUBNTRY ,\n         L     R3,16                    Get CVT Address\n         USING CVT,R3                   Change Addressability\n         L     R3,CVTABEND              Get Address of SCVT\n         USING SCVTSECT,R3              Change Addressability\n*\n** Build Table of Unique SVC Entry Points\n*\n         L  R3,SCVTSVCT                 Get Address of SVCTABLE\n         LA R4,256                      Loop All SVC Table Entries\n         DO FROM=(R4)                   (Same)\n            LA R5,DSASVCTB              SVC Addr Counts A(Addr,Cnt)\n            LA R6,256                   (Same)\n            DO FROM=(R6)                (Same)\n               IF (CLC,0(4,R5),EQ,0(R3))    If Entry Found\n                  L  R1,4(,R5)              Increment The Count\n                  LA R1,1(,R1)              (Same)\n                  ST R1,4(,R5)              (Same)\n                  DOEXIT ,                  -> Done This SVC\n               ELSEIF (CLC,=F'0',EQ,0(R5))  If at End of Table\n                  MVC 0(4,R5),0(R3)         Add New Entry This SVC Addr\n                  MVC 4(4,R5),=F'1'         Set Count to One\n                  DOEXIT ,                  -> Done This SVC\n               ELSE ,\n                  LA R5,8(,R5)          Bump to Next SVC Counter\n               ENDIF ALL\n            ENDDO ,                     -> Loop\n            LA R3,8(,R3)                Bump to Next SVCTABLE Entry\n         ENDDO ,                        -> Loop\n*\n** Get Address of Free SVC Entry\n*\n         LA R5,DSASVCTB                Get SVC Addr Count Talbe\n         LA R6,256                     Max Count of Entries\n         L  R7,4(,R5)                  Get Count For This SVC\n         DO FROM=(R6)                  Loop All Entries\n            IF (C,R7,LT,4(,R5))        This Entry Have Larger Count?\n               L R7,4(,R5)             The Use This One\n               MVC DSAFRSVC,0(R5)      Save Free SVC Address\n            ENDIF ,\n            IF (CLC,=F'0',EQ,0(R5))    If at End of Table?\n               DOEXIT ,                -> Exit\n            ENDIF ,\n            LA R5,8(,R5)               Bump to Next Entry\n         ENDDO ,\n*\n** Locate The SVC and See if It's a Free One\n*\n         L     R3,16                   Get CVT Address\n         USING CVT,R3                  Change Addressability\n         L     R3,CVTABEND             Get Address of SCVT\n         USING SCVTSECT,R3             Change Addressability\n         L  R3,SCVTSVCT                Get Address of SVCTABLE\n         LH R4,DSABSVC                 Get Binary SVC Number\n         SLL R4,3                      Times 8 For Offset\n         LA  R4,0(R3,R4)               Point at SVC Entry\n         IF (CLC,DSAFRSVC,NE,0(R4))    If SVC Was Not Free?\n            GOSUB MSG002I              ...Issue Message\n            MVC DSARC,=F'12'           ...Set Return Code\n         ELSE ,\n            GOSUB LOADSVC              Load the SVC Into Storage\n            LH R2,DSABSVC              Get Binary SVC Number\n            L  R3,DSASVCAD             Get Address of SVC\n            O  R3,=A(X'80000000')      Set for 31-Bit Mode\n            LA R4,DSASVCNM             Get Name of SVC\n            MVC DSASVCU(CONSVCUL),CONSVCU  Set PLIST in DSA\n            SVCUPDTE (R2),             Replace Existing SVC Entry      *\n               EP=(R3),                (Same)                          *\n               MF=(E,DSASVCU)          (Same)\n         ENDIF ,\n*\n** Return to Caller\n*\nINSEND   DS    0H\n         SUBEXIT ,\n         DROP R3                       Drop Temp Addressability\n\n***********************************************************************\n* LOADSVC - Load the SVC Into CSA Storage                             *\n***********************************************************************\n*\nLOADSVC  SUBNTRY ,\n         MVC DSASDCB(STPDCBL),STPDCB    Move DCB to Common\n         MVC DSAOPL(CONOPLL),CONOPL    Move Open Parm to Common\n         OPEN (DSASDCB,(INPUT)),       Open Sysout Dataset             *\n               MF=(E,DSAOPL)           (Same)\n*\n         MVC   DSALOAD1(LOAD1L),LOAD1  Move List Form to DSA\n         LOAD  EPLOC=DSASVCNM,         Initial Load of SVC             *\n               SF=(E,DSALOAD1)         (Same)\n*\n** Obtain Length of SVC for Getmain\n*\n         L     R3,PSATOLD              Get Our TCB Address\n         USING TCB,R3                  And Addressability\n         L     R3,TCBLLS               Get Load List Ellement Chain\n         USING LLE,R3                  And Addressability\n         L     R4,LLECDPT              Get CDE for LLE\n         USING CDENTRY,R4              And Addressability\n*\n         DO INF                             Loop Forever\n            IF (CLC,CDNAME,EQ,DSASVCNM)     Found Our SVC?\n               L R14,CDXLMJP                Get Extent List Pointer\n               USING XTLST,R14              And Addressability\n               XR  R1,R1                    Zero Work Register\n               ICM R1,B'0111',XTLMSBLN      Get Length of SVC\n               ST  R1,DSASVCLN              Set Length of SVC\n               DOEXIT ,                     -> Done\n            ENDIF ,\n            L  R3,LLECHN                    Get Next LLE\n            IF (LTR,R3,R3,Z)                If Last LLE...\n               MVC DSARC,=F'12'             Issue Bad RC\n               GOSUB MSG003I                And Message\n               DOEXIT ,                     -> Done\n            ELSE ,\n               L R4,LLECDPT                 Get CDE for LLE\n            ENDIF ,\n         ENDDO ,\n*\n** Get Storage for SVC in Subpool 241 CSA Common\n*\n         IF (CLC,DSARC,EQ,=F'0')       If Good Thus Far?\n            L R0,DSASVCLN              Get Length of SVC\n            STORAGE OBTAIN,            Obtain Storage for SVC          *\n               LENGTH=(0),             (Same)                          *\n               SP=241,                 (Same)                          *\n               BNDRY=PAGE,             (Same)                          *\n               LOC=(31,ANY)            (Same)\n            ST R1,DSASVCAD             Save Address to Load SVC\n         ENDIF ,\n*\n** Load SVC into Subpool 241 Storage\n*\n         IF (CLC,DSARC,EQ,=F'0')       If Good Thus Far?\n            MVC DSALOAD1(LOAD1L),LOAD1 Move List Form to DSA\n            L   R2,DSASVCAD            Get SVC Address\n            LOAD EPLOC=DSASVCNM,       Final Load of SVC Into CSA      *\n               ADDR=(2),               (Same)                          *\n               DCB=DSASDCB,            (Same)                          *\n               SF=(E,DSALOAD1)         (Same)\n            MVC 12(4,R2),DSASVCLN      Save Old SVC Addr in Protocol\n            MVC 16(4,R2),DSAFRSVC      Save Old SVC Addr in Protocol\n         ENDIF ,\n*\n         MVC DSACLO(CONCLOL),CONCLO   Move Close Parm to Common\n         CLOSE (DSASDCB),             Close Sysout Dataset             *\n               MF=(E,DSACLO)          (Same)\n*\n** Return to Caller\n*\nLOADEND  DS    0H\n         SUBEXIT ,\n         DROP  R3,R4,R14               Drop Temp Addressability\n\n***********************************************************************\n* REMOVE - Remove an SVC From the SVC Table                           *\n***********************************************************************\n*\nREMOVE   SUBNTRY ,\n*\n** Locate The SVC to Remove\n*\n         L     R3,16                   Get CVT Address\n         USING CVT,R3                  Change Addressability\n         L     R3,CVTABEND             Get Address of SCVT\n         USING SCVTSECT,R3             Change Addressability\n         L  R3,SCVTSVCT                Get Address of SVCTABLE\n         LH R4,DSABSVC                 Get Binary SVC Number\n         SLL R4,3                      Times 8 For Offset\n         LA  R4,0(R3,R4)               Point at SVC Entry\n         L   R5,0(,R4)                 Get EP Address of SVC\n         ST  R5,DSASVCAD               And Save it\n         MVC DSASVCLN,12(R5)           Set Size in DSA\n         IF (CLC,DSASVCNM,NE,4(R5))    If This Not Our SVC?\n            GOSUB MSG004I              ...Issue Message\n            MVC DSARC,=F'12'           ...Set Return Code\n         ELSE ,\n            LH R2,DSABSVC              Get Binary SVC Number\n            L  R3,DSASVCAD             Get Address of SVC\n            L  R3,16(,R3)              Get Previous SVC Address\n            LA R4,DSASVCNM             Get Name of SVC\n            MVC DSASVCU(CONSVCUL),CONSVCU  Set PLIST in DSA\n            SVCUPDTE (R2),             Replace Existing SVC Entry      *\n               EP=(R3),                (Same)                          *\n               MF=(E,DSASVCU)          (Same)\n            GOSUB MSG005I              Issue Waiting Message\n            STIMER WAIT,               Wait for 30 Seconds             *\n               BINTVL=WAITTIME         (Same)\n         ENDIF ,\n*\n** Free Storage for SVC\n*\n         IF (CLC,DSARC,EQ,=F'0')       If Good Thus Far?\n            L R0,DSASVCLN              Get Length of SVC\n            L R1,DSASVCAD              Save Address to Load SVC\n            STORAGE RELEASE,            Obtain Storage for SVC         *\n               LENGTH=(0),              (Same)                         *\n               ADDR=(1),                (Same)                         *\n               SP=241                   (Same)\n            GOSUB MSG006I               Issue Done Message\n         ENDIF ,\n*\n** Return to Caller\n*\nREMOVEND DS    0H\n         SUBEXIT ,\n*\nWAITTIME DC    F'500'                 Wait for 5 Seconds\n\n***********************************************************************\n* REPLACE - Replace the Current SVC With a New Version                *\n***********************************************************************\n*\nREPLACE  SUBNTRY ,\n         GOSUB REMOVE                  Remove the Existing SVC\n         GOSUB INSERT                  And Insert the New Version\n*\n** Return to Caller\n*\nREPLAEND DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n* DUMP - Dump the SVC Table to SYSPRINT                               *\n***********************************************************************\n*\nDUMP     SUBNTRY ,\n         L     R3,16                    Get CVT Address\n         USING CVT,R3                   Change Addressability\n         L     R3,CVTABEND              Get Address of SCVT\n         USING SCVTSECT,R3              Change Addressability\n         L     R3,SCVTSVCT              Get Address of SVCTABLE\n         ST    R3,DSAWORKF              Get Address in Char\n         UNPK  DSAWKCL9,DSAWORKF(5)     (Same)\n         TR    DSAWKCL9(8),HEXTABLE-240 (Same)\n*\n         MVC   DSAPLINE,CONHEAD1        Prepare Print Line\n         MVC   DSAPLINE+39(8),DSAWKCL9  (Same)\n         PUT   DSADCB,DSAPLINE          Print 1st Heading\n         MVC   DSAPLINE,=CL121' '       Print Blank Line\n         PUT   DSADCB,DSAPLINE          Print 1st Heading\n         MVC   DSAPLINE,CONHEAD2        Second Heading\n         PUT   DSADCB,DSAPLINE          Print 1st Heading\n         MVC   DSAPLINE,CONHEAD3        Third Heading\n         PUT   DSADCB,DSAPLINE          Print 2nd Heading\n*\nSVCT     #TRACE DATA=('SVCTABLE',0(R3),256*8)\n*\n** Print SVC Table\n*\n         LA R4,128                   Number of lines to Print\n         XR R5,R5                    Initial Offset\n         XR R6,R6                    Initial SVC Number\n         DO FROM=(R4)                Loop Through Table\n            MVC DSAPLINE,CDATA       Initialize Line\n*\n            ST R5,DSAWORKF                Get Offset in Char\n            UNPK DSAWKCL9,DSAWORKF(5)     (Same)\n            TR DSAWKCL9(8),HEXTABLE-240   (Same)\n            MVC DSAPLINE+2(4),DSAWKCL9+4  (Same)\n*\n            CVD R6,DSAWORKD               Get SVC No in Char\n            UNPK DSAWKCL9(3),DSAWORKD+6(2)   (Same)\n            OC  DSAWKCL9(3),=3C'0'        (Same)\n            MVC DSAPLINE+10(3),DSAWKCL9   (Same)\n*\n            MVC DSAWORKF,0(R3)          Get Data in Char\n            UNPK DSAWKCL9,DSAWORKF(5)   (Same)\n            TR DSAWKCL9(8),HEXTABLE-240 (Same)\n            MVC DSAPLINE+17(8),DSAWKCL9 (Same)\n*\n            MVC DSAWORKF,4(R3)          Get Data in Char\n            UNPK DSAWKCL9,DSAWORKF(5)   (Same)\n            TR DSAWKCL9(8),HEXTABLE-240 (Same)\n            MVC DSAPLINE+26(8),DSAWKCL9 (Same)\n*\n            MVC DSAWORKF,8(R3)          Get Data in Char\n            UNPK DSAWKCL9,DSAWORKF(5)   (Same)\n            TR DSAWKCL9(8),HEXTABLE-240 (Same)\n            MVC DSAPLINE+39(8),DSAWKCL9 (Same)\n*\n            MVC DSAWORKF,12(R3)         Get Data in Char\n            UNPK DSAWKCL9,DSAWORKF(5)   (Same)\n            TR DSAWKCL9(8),HEXTABLE-240 (Same)\n            MVC DSAPLINE+48(8),DSAWKCL9 (Same)\n*\n            PUT DSADCB,DSAPLINE      Print Line\n            LA  R5,16(,R5)           Bump Offset\n            LA  R6,2(,R6)            Bump SVC No\n            LA  R3,16(,R3)           Bump Position\n         ENDDO ,\n*\n** Return to Caller\n*\nDUMPEND  DS    0H\n         SUBEXIT ,\n         DROP R3                        Drop Temp Addressability\nCDATA    DC    CL121'  0000    111    00000000 00000000     00000000 00*\n               000000'\n\n***********************************************************************\n* INIT - Perform Program Initialization                               *\n***********************************************************************\n*\nINIT     SUBNTRY ,                 -*- Open SYSPRINT File\n         ST R1,DSASAVR1                 Save Parm Value\n         IFNTIOT DDNAME=SYSPRINT       Is it Allocated?\n            MVC DSADCB(CONDCBL),CONDCB Move DCB to Common\n            MVC DSAOPL(CONOPLL),CONOPL Move Open Parm to Common\n            OPEN (DSADCB,(OUTPUT)),    Open Sysout Dataset             *\n               MF=(E,DSAOPL)           (Same)\nOPENS    #TRACE MSG='DCB HAS Been Opened.',REGS=(R15)\n         ENDIF ,\n*                                  -*- Check for PARM= Data\n         L  R2,DSASAVR1                Get Parameter Address\n         L  R2,0(,R2)                  Get Address of PARM Values\n         XR R3,R3                      Zero Work Register\n         IC R3,1(,R2)                  Get Length of Data\n         LA R2,2(,R2)                  Point at Actual Data\n         IF (LTR,R2,R2,NZ)             If We Have PARM= Data\n            GOSUB PARM                 ..Go Process It\n         ENDIF ,\n*\n** Return to Caller\n*\nINITEND  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n* PARM - Retreive Values from PARM= Parameter                         *\n*                                                                     *\n*        On Entry - R2 -> Address of PARM= Data                       *\n*                   R3 -> Length  of PARM= Data                       *\n*                                                                     *\n*        PARM='INSERT,SVCNAME,999'                                    *\n*                                                                     *\n***********************************************************************\n*\nPARM     SUBNTRY ,\n         BCTR R3,0                     Decrement Length for Assembler\n         MVC DSAPARMV(*-*),0(R2)       Move PARM= Data to DSA\n         EX  R3,*-6                    (Same)\n         LA  R2,DSAPARMV               Set New Beginning Address\n         LA  R3,1(,R3)                 Restore Proper Length\n         OC  DSAPARMV,=CL128' '        Assure Upper Case\nPPARM    #TRACE MSG=('PARM: ',DSAPARMV,' ')\n*\n         IF (CLC,=C'INSERT,',EQ,0(R2))     Insert a New SVC?\n            LA  R2,7(,R2)                  Point Past Command\n            AHI R3,-7                      Decrement Length\n            OI DSAFLAG,DSAINS              Indicate Insert Request\n         ELSEIF (CLC,=C'REMOVE,',EQ,0(R2)) Remove and SVC?\n            LA  R2,7(,R2)                  Point Past Command\n            AHI R3,-7                      Decrement Length\n            OI DSAFLAG,DSAREM              Indicate a Remove Request\n         ELSEIF (CLC,=C'REPLACE,',EQ,0(R2)) Replace and SVC?\n            LA  R2,8(,R2)                  Point Past Command\n            AHI R3,-8                      Decrement Length\n            OI DSAFLAG,DSAREP              Indicate a Remove Request\n         ELSEIF (CLC,=C'DUMP',EQ,0(R2))    Dump SVCTABLE Request?\n            OI DSAFLAG,DSADMP              Indicate a Dump Request\n         ENDIF ALL\nSFLAG    #TRACE MSG=('Flag: ',DSAFLAG,' '),DATA=('DATA',0(R2),44)\n*\n** Extract Program Name and SVC Number\n*\n         MVC DSACSVC,=C'000'           Prep Receiving Field\n         IF (TM,DSAFLAG,DSADMP,Z),AND, If Nor a Dump Request           *\n               (CLC,DSARC,EQ,=F'0')    And Not Previous Failure\n            MVC DSASVCNM,=8C' '        Zero Work Area\n            LA R4,DSASVCNM             Point at Workarea\n            DO FROM=(R3)               Loop Residual Length\n               IF (CLI,0(R2),NE,C',')  Search for Comma\n                  MVC 0(1,R4),0(R2)    Save SVC LMOD Name\n                  LA R2,1(,R2)         Bump Input Pointer\n                  LA R4,1(,R4)         Bump Output Pointer\n               ELSE ,\n                  MVC DSACSVC,1(R2)    Move 3-Digit SVC Number\n                  PACK DSAWORKD,DSACSVC Get SVC Number as Packed\n                  CVB R1,DSAWORKD      Get it in Binary\n                  STH R1,DSABSVC       Save Binary Value\n                  DOEXIT ,             -> Exit\n               ENDIF ,\n            ENDDO ,\n         ENDIF ,\n*\n         IF (TM,DSAFLAG,DSADMP,Z),AND, If Nor a Dump Request           *\n               (CLC,DSACSVC,EQ,=C'000')   And Not Have SVC #\n            MVC DSARC,=F'12'              Indicate This\n            GOSUB MSG001I                 And Tell User\n         ENDIF ,\n*\n** Return to Caller\n*\nPARMEND  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n* TERM - Perform Program Termination                                  *\n***********************************************************************\n*\nTERM     SUBNTRY ,\n         LA  R1,DSADCB                 Get Address of SYSPRINT DCB\n         USING IHADCB,R1               & Addressability\n         IF (TM,DCBOFLGS,DCBOFOPN,O)   If DCB is OPEN\n            MVC DSACLO(CONCLOL),CONCLO Move Close Parm to Common\n            CLOSE (DSADCB),            Close Sysout Dataset            *\n               MF=(E,DSACLO)          (Same)\n         ENDIF ,\n*\n** Return to Caller\n*\nTERMEND  DS    0H\n         SUBEXIT ,\n         DROP  R1                      Drop Temp Addressability\n\n***********************************************************************\n*  Messages                                                           *\n***********************************************************************\n*\nMSG001I  SUBNTRY ,\n         MVC DSAPLINE,CON0001I         Message to Print\n         PUT DSADCB,DSAPLINE           Print Message\n         SUBEXIT ,\n*\nMSG002I  SUBNTRY ,\n         MVC DSAPLINE,CON0002I         Message to Print\n         PUT DSADCB,DSAPLINE           Print Message\n         SUBEXIT ,\n*\nMSG003I  SUBNTRY ,\n         MVC DSAPLINE,CON0003I         Message to Print\n         PUT DSADCB,DSAPLINE           Print Message\n         SUBEXIT ,\n*\nMSG004I  SUBNTRY ,\n         MVC DSAPLINE,CON0004I         Message to Print\n         PUT DSADCB,DSAPLINE           Print Message\n         SUBEXIT ,\n*\nMSG005I  SUBNTRY ,\n         MVC DSAPLINE,CON0005I         Message to Print\n         PUT DSADCB,DSAPLINE           Print Message\n         SUBEXIT ,\n*\nMSG006I  SUBNTRY ,\n         MVC DSAPLINE,CON0006I         Message to Print\n         PUT DSADCB,DSAPLINE           Print Message\n         SUBEXIT ,\n\n***********************************************************************\n*  Literials and Constants                                            *\n***********************************************************************\n*\nCON0001I DC    CL121' MSG0001I: Invalid Data on PARM= Parameter.'\nCON0002I DC    CL121' MSG0002I: Install Failed, Slot Not Available.'\nCON0003I DC    CL121' MSG0003I: Unable to Load SVC.'\nCON0004I DC    CL121' MSG0004I: Attempt to Free an SVC not installed.'\nCON0005I DC    CL121' MSG0005I: SVC Removed.  Waiting 5 Seconds to Free*\n                the storage.'\nCON0006I DC    CL121' MSG0006I: SVC Removed and Storage Freed.'\n*\nCONHEAD1 DC    CL121'                  SVCTABLE Located At: '\nCONHEAD2 DC    CL121' Offset  Number  SVC Entry             SVC Entry'\nCONHEAD3 DC    58C'=',80C' '\n*\nLOAD1    LOAD  EPLOC=*,SF=L            List Form of LOAD\nLOAD1L   EQU   *-LOAD1                 Length of List Form\n*\nCONDCB   DCB   DDNAME=SYSPRINT,RECFM=F,LRECL=121,DSORG=PS,MACRF=PM\nCONDCBL  EQU   *-CONDCB\n*\nSTPDCB   DCB   DDNAME=STEPLIB,RECFM=FB,DSORG=PO,MACRF=E\nSTPDCBL  EQU   *-STPDCB\n*\nCONOPL   OPEN  (*-*,(OUTPUT)),MF=L     Open PLIST\nCONOPLL  EQU   *-CONOPL\nCONCLO   CLOSE (*-*),MF=L              Close PLIST\nCONCLOL  EQU   *-CONCLO\n*\nCONSVCU  SVCUPDTE 0,REPLACE,TYPE=4,MF=L\nCONSVCUL EQU   *-CONSVCU\n*\nHEXTABLE DC    C'0123456789ABCDEF'\n*\n         LTORG ,                       Define literal Pool\n\n***********************************************************************\n* Define DSECT Areas                                                  *\n***********************************************************************\n*\n         PRINT NOGEN\n         IHAPSA LIST=NO                Define PSA Control Block\n         CVT DSECT=YES                 Define CVT Control Block\n         IHASCVT ,                     Define SCVT Control Block\n         IKJTCB ,                      Define TCB Control Block\n         DCBD   DSORG=PS               Define DCB Control Block\n         IEZDEB LIST=NO                Define DEB Control Block\n         IHACDE ,                      Define CDE Control Block\n         IHALLE ,                      Define LLE Control Block\n         IHAXTLST ,                    Define XTLST Control Block\n         IEFTIOT1 ,                    Define TIOT Control Block\n         PRINT GEN\n\n***********************************************************************\n* Define Dynamic Storage Area - DSA                                   *\n***********************************************************************\n*\n         DSABEG ,                 <*** Begin Dynamic Storage Area\n*\nDSASAVR1 DS    F                       R1 Value on Entry\nDSARC    DS    F                       Return Code\n*\nDSAFLAG  DS    B                       Flag Byte\nDSAINS   EQU   X'80'                   ..Insert Request\nDSAREM   EQU   X'40'                   ..Remove Request\nDSAREP   EQU   X'20'                   ..Replace Request\nDSADMP   EQU   X'10'                   ..Dump Request\n*\nDSACSVC  DS    CL3                     Character SVC Value\nDSABSVC  DS    H                       Binary SVC Number\nDSASVCNM DS    CL8                     Name of SVC to Load\nDSASVCLN DS    F                       Length of Our SVC\nDSASVCAD DS    F                       Address of Our SVC\nDSAFRSVC DS    F                       Address of Free SVC Pointer\n*\nDSALOAD1 DS    0D,XL(LOAD1L)           Define Area For List Form\nDSAOPL   DS    0D,XL(CONOPLL)          Define Space for OPEN PLIST\nDSACLO   DS    0D,XL(CONCLOL)          Define Space for CLOSE PLIST\nDSADCB   DS    0D,XL(CONDCBL)          Define Space for SYSPRINT DCB\nDSASDCB  DS    0D,XL(STPDCBL)          Define Space for STEPLIB DCB\nDSASVCU  DS    0D,XL(CONSVCUL)         Define Space for SVCUPDTE PLIST\n*\nDSAPARMV DS    CL128                   PARM= Data\nDSAPLINE DS    CL121                   Print Line\n*\nDSASVCTB DS 256D                       SVC Count Table\n*\n         DSAEND ,                 <*** End Dynamic Storage Area\n         END ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHMSGS": {"ttr": 29443, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x034\\x034\\x00\\x00\\xd9\\xc4\\xc8\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:00", "lines": 820, "newlines": 820, "modlines": 0, "user": "RDHSRC"}, "text": "***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHMSGS - Driver Program for #MSG/#WTO/#WTOR Macros                *\n*                                                                     *\n*    This program is entered via a BASR R14,R15 to process a message  *\n*  described by MSGDSECT and write the output to a SYSOUT dataset,    *\n*  which defaults to MSGPRINT or the console.                         *\n*    The MSGDSECT data area is generated by the macros #MSG, #WTO or  *\n*  #WTOR.  For details of the parameters available on these macros    *\n*  please read the prolog within the macro.                           *\n*                                                                     *\n*  On Entry:                                                          *\n*     R1  - Points to a MSGDSECT Data Area Built by #MSG/#WTO/#WTOR   *\n*     R14 - Contains the Return Address                               *\n*     R15 - Contains the Entry Point of this Program                  *\n*                                                                     *\n*                                                                     *\n*  Date     FIX-ID Programmer Description                             *\n*  ======== ====== ========== ======================================= *\n*  02/25/09  M001  R. Harper  Module Developed                        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT NOGEN\n*\n         IHAPSA ,                      Define PSA Control Block\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n         IKJTCB ,                      Define TCB Control Block\n         IHASTCB ,                     Define STCB Control Block\n         DCBD   DSORG=PS               Define DCB Control Block\n         IEZDEB LIST=YES               Define DEB Control Block\n         IHACDE ,                      Define CDE Control Block\n         IHASDWA ,                     Define CDE Control Block\n         IEFTIOT1 ,                    Define TIOT Control Block\n         IHAXTLST ,                    Define XTLST Control Block\nJFCB     DSECT    ,                    Define JFCB Control Block\n         IEFJFCBN ,                    (Same)\n         IHAEXLST ,                    Define EXLST Data Area\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** RMEDSECT - DSECT Area for chain of Task Related RESMGR Exits       *\n*                                                                     *\n*    This DSECT is pointed to by STCBRMEF and is an Undocumented      *\n*  IBM Data Area.  I found What I Needed.                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\nRMEDSECT DSECT ,                       RME DSECT AREA\nRMEID    DS    CL4'RME'                RME Identifier\n         DS    F                       ..Unknown\nRMEBCKPT DS    A                       ..Prev RME on Chain or Zero\nRMEFWDPT DS    A                       ..Next RME on Chain or Zero\n         DS    F                       ..Unknown\nRMERESID DS    CL8                     ..Name of RESMGR Exit\n         DS    2F                      ..Unknown\nRMEPARAM DS    2CL4                    ..Parameter Passed to Exit\n         DS    F                       ..Unknown\nRMELNGTH EQU   *-RMEDSECT              Length of DSECT Area\n         PRINT GEN\n*\n*---------------------------------------------------------------------*\n* Define Our Own Internal Dsect Areas                                 *\n*---------------------------------------------------------------------*\n*\n         LSEDSECT ,                    Define Linkage Stack DSECT\n         MSGDSECT ,                    Define Message DSECT\n*\nMMGDSECT DSECT                         Dsect for #MSG Anchor\nMMGEYECT DS    CL8'MMGDSECT'           Define Eye Catcher\nMMGTCBAD DS    CL8                     TCB Address\nMMGDDNAM DS    CL8                     DDNAME of SYSOUT Dataset\n*\nMMGPFLAG DS    B                       Processing Flag\nMMGPDDSO EQU   X'80'                   ..MSGPRINT is SYSOUT\nMMGPDDPS EQU   X'40'                   ..MSGPRINT is PS\nMMGPDDPO EQU   X'20'                   ..MSGPRINT is PO\n*\n         DS    0D\nMMGDCB   DS    XL(MDLDCBL)             Reserve Space for DCB\nMMGDCBID DS    CL4                     DCB Identifier\n*\n         DS   0D                       End on Doubleword\nMMGLNGTH EQU   *-MMGDSECT              Length of DSECT Area\n*\n***********************************************************************\n* RDHMSGS - Program Main Entry Point                                  *\n***********************************************************************\n*\n         USING PSA,R0                  Define PCA Addressability\n         USING MSGDSECT,R10            Define MSG Addressability\n*\nRDHMSGS  PGMNTRY BASE=(R12,R11),       Define Program Entry Code       *\n               AMODE=31,               Define Addressing Mode          *\n               RMODE=ANY,PRINT=GEN,    Define Residency Mode           *\n               TYPE=MAIN,              Define As Main Program for DSA  *\n               ESTAE=YES,              Define ESTAE Recovery Support   *\n               TRACE=NO ,IMP=BASR\n*\n         LR    R10,R1                  Point at MSGDSECT Area\n         IF (TM,MSGFLAG1,MSG1CLOS,O)   If CLOSE Requested?\n            GOSUB CLOSE                ...Do CLOSE Processing\n         ELSE ,                        Else\n            IF (TM,MSGFLAG1,MSG1MSG,O) If #MSG Macro?\n               GOSUB PMSG              ...Process a #MSG Macro\n            ELSE ,                     Else\n               IF (TM,MSGFLAG1,MSG1WTO,O) If #WTO Macro?\n                  GOSUB PWTO           ...Process a #WTO Macro\n               ELSE ,\n                  GOSUB PWTR           ...Process a #WTOR Macro\n               ENDIF ,\n            ENDIF ,\n         ENDIF ,\n*\n** Return to Caller\n*\nMSGRETRY DS    0H\n         PGMEXIT RC=0                  Define Program Exit Code\n*\n*---------------------------------------------------------------------*\n* PMSG - Process a #MSG Construct                                     *\n*---------------------------------------------------------------------*\n*\n** #MSG requires a SYSOUT dataset, which means we have to open and\n*       close that dataset.  This means we need an anchor to place\n*       the DCB for the dataset and a task related Resource Manager\n*       Exit routine to close that dataset at task termination.\n*\nPMSG     SUBNTRY ,\n         BAS R14,LDCB                  Find MMGDSECT if its There\n         #TRACE REGS=(R9),MSG='MMGDSECT=R9'\n         USING MMGDSECT,R9             #MSG Persistant Data Area\n         IF (LTR,R9,R9,Z)              If Not Already Open\n            GOSUB OPEN                 ...Open The SYSOUT Dataset\n         ENDIF ,\n         #TRACE REGS=(R9),MSG='MMGDSECT=R9'\n*\n         GOSUB BUILD                   Build Message to Write in DSA\n*\n         LA R2,MMGDCB                  Get Address of DCB\n         PUT (R2),DSAPLINE             Write Message to SYSOUT\n*\n** Return to Caller\n*\nPMSG999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n* PWTO - Process a #WTO Construct                                     *\n*---------------------------------------------------------------------*\n*\nPWTO     SUBNTRY ,\n         GOSUB BUILD                   Build Message to Write in DSA\n*\n** Print WTO to Console\n*\n         LA R2,DSAPLINE+L'DSAPLINE-1   Point at Last Char\n         DO WHILE=(CLI,0(R2),EQ,C' ')  Loop to Last Char\n            AHI R2,-1                  Decrement\n         ENDDO\n         LA R2,1(,R2)                  Point Past Last Byte\n*\n         LA    R3,DSAPLINE             Get Length of Message\n         SR    R2,R3                   (Same)\n         LA    R2,4(,R2)               Add Prefix Length\n         STH   R2,DSAWLEN              Save Messave Length\n         MVC   DSAWRCDE,MSGWRCDE       Set Route Codes\n*\n** Set Return Address\n*\n         IF (CLC,MSGWRADR,NE,=Y(0))    If Return Area Specified?\n            XR  R14,R14                Zero Work Register\n            XR  R15,R15                (Same)\n            ICM R14,B'0011',MSGWRADR   Get SCON Address of Data\n            SRDL R14,12                Seperate B and DDD\n            SRL R15,20                 (Same)\n            SLL R14,3                  Base Times 8\n            LG  R14,DSAREGS(R14)       Lift The Proper Base Reg\n            ALR R14,R15                Add Base and Displacement\n            ST  R14,DSARADDR           Set Reply Address\n         ENDIF ,\n*\n** Write WTOR to Console\n*\n         #TRACE DATA=('WTO Print Line',DSAWLINE,132)\n*\n         L  R14,DSARADDR               Set Reply Address\n         IF (CLC,MSGWRADR,NE,=Y(0))    If Return Area Specified?\n            MVC 0(128,R14),DSAPLINE    Return Data to Callers Area\n         ELSE ,\n            LA R1,DSAWLINE             Point at WTO Line Built\n            SVC 35                     Issue WTO\n         ENDIF ,\n*\n** Return to Caller\n*\nPWTO999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n* PWTR _ Process a #WTOR Construct                                    *\n*---------------------------------------------------------------------*\n*\nPWTR     SUBNTRY ,\n         GOSUB BUILD                   Build Message to Write in DSA\n*\n** Write WTOR to Console\n*\n         LA R2,DSAPLINE+L'DSAPLINE-1   Point at Last Char\n         DO WHILE=(CLI,0(R2),EQ,C' ')  Loop to Last Char\n            AHI R2,-1                  Decrement\n         ENDDO\n         LA R2,1(,R2)                  Point Past Last Byte\n*\n         LA    R3,DSAPLINE             Get Length of Message\n         SR    R2,R3                   (Same)\n         LA    R2,4(,R2)               Add Prefix Length\n         STH   R2,DSAWLEN              Save Messave Length\n         MVC   DSAWLEN(1),MSGWRLEN+1   Set Reply Length\n*\n** Set ECB Address\n*\n         XR  R14,R14                   Zero Work Register\n         XR  R15,R15                   (Same)\n         ICM R14,B'0011',MSGWRECB      Get SCON Address of Data\n         SRDL R14,12                   Seperate B and DDD\n         SRL R15,20                    (Same)\n         SLL R14,3                     Base Times 8\n         LG  R14,DSAREGS(R14)          Lift The Proper Base Reg\n         ALR R14,R15                   Add Base and Displacement\n         ST  R14,DSARECBA              Set ECB Address\n*\n** Set Reply Address\n*\n         XR  R14,R14                   Zero Work Register\n         XR  R15,R15                   (Same)\n         ICM R14,B'0011',MSGWRADR      Get SCON Address of Data\n         SRDL R14,12                   Seperate B and DDD\n         SRL R15,20                    (Same)\n         SLL R14,3                     Base Times 8\n         LG  R14,DSAREGS(R14)          Lift The Proper Base Reg\n         ALR R14,R15                   Add Base and Displacement\n         ST  R14,DSARADDR              Set Reply Address\n         OI  DSARADDR,DSARWTOR         Indicate WTOR\n*\n #TRACE DATA=('WTOR Print Line',DSARLINE,140)\n*\n** Write WTOR to Console\n*\n         LA R1,DSARLINE                Point at WTO Line Built\n         SVC 35                        Issue WTO\n*\n** Return to Caller\n*\nPWTR999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** OPEN - Do Open Processing for #MSG Macro                           *\n*                                                                     *\n*    Since the #MSG Macro requires a persistent storage area for      *\n*  the DCB it is necessary to open that DCB on the initial call and   *\n*  provide a place to locate that persistent storage area on each     *\n*  subsequent call.                                                   *\n*    Since we want to remain able to operate in Key 8, we cannot use  *\n*  a Resource manager Exit here.  Under most circumstances that is    *\n*  not a problem because the operating System will write the final    *\n*  buffers, close the datasets and free our storage for us.           *\n*    However, there may be some situations where we want to close     *\n*  these datasets.  So, close processing can be invokes by issueing   *\n*  #MSG CLOSE macro.                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nOPEN     SUBNTRY ,\n*\n** Get Storage for MMGDSECT Persistant Storage or DSA for This TCB\n*\n         STORAGE OBTAIN,               Obtain Storage for MMG          *\n               LENGTH=4096,            (Same)                          *\n               LOC=(24,31),BNDRY=PAGE  (Same) - Below The Line\n*\n         LR    R9,R1                   Get Address of MMGDSECT\n         MVC   MMGEYECT,=C'MMGDSECT'   Place Eye Catcher\n         MVC   MMGDDNAM,MSGDDNAM       Set DD Name in DSECT Area\n         MVC   MMGTCBAD,PSATOLD        Save TCB Address\n*\n** Read in JFCB for DDNAME\n*\n         LA R1,DSAJFCB                 Build Exit List\n         ST R1,DSAEXLST                (Same)\n         OI DSAEXLST,EXLLASTE+EXLRJFCB (Same)\n*\n         LA R1,MMGDCB                  Build RDJFCB MF=L\n         USING IHADCB,R1               And Temp Addressability\n         MVC MMGDCB,MDLDCB             Move DCB to Common\n         MVC DCBDDNAM,MSGDDNAM   '     Set DDNAME in DCB\n         LA R14,DSAEXLST               Put EXLST Address in DCB\n         ST R14,DCBEXLST               (Same)\n*\n         OI DSARJFCL,X'80'             Set Option Byte\n         RDJFCB (MMGDCB),              Load JFCB for Dataset           *\n               MF=(E,DSARJFCL)         (Same)\n         IF (LTR,R15,R15,NZ)           If RDJFCB Failed\n            EX 0,*                      ..Terminate\n            DC C'RDHT0001 RDJFCB for MSGPRINT has Failed.',0H\n         ENDIF\n*\n** Extract Data From JFCB\n*\n         LA R2,DSAJFCB                 Load JSCB Address\n         USING JFCB,R2                 Setup Addressability\n         IF (TM,JFCBTSDM,JFCSDS,O)     If This is a SYSOUT Dataset\n            OI MMGPFLAG,MMGPDDSO       ...Indicate SYSOUT\n         ELSE ,\n            IF (TM,JFCBIND1,JFCPDS,O)  If This is a PDS\n               OI MMGPFLAG,MMGPDDPO    ...Indicate PDS\n            ELSE ,                     Else\n               OI MMGPFLAG,MMGPDDPS    ...Indicate PS\n            ENDIF\n         ENDIF\n         DROP R2\n*\n** Open Message Sysout DCB - Default(MSGPRINT)\n*\n         LA  R1,MMGDCB                 Get DCB Address\n         USING IHADCB,R1               And Temp Addressability\n         MVC MMGDCB,MDLDCB             Move DCB to Common\n         MVC MMGDCBID,=C'RDHM'         Set DCB Identifier\n         MVC DCBDDNAM,MSGDDNAM         Set DDNAME in DCB\n         MVC DSAOPL,MDLOPL             Move Open Parm to Common\n         OPEN  (MMGDCB,(OUTPUT)),      Open Sysout Dataset             *\n               MF=(E,DSAOPL)            (Same)\n*\n         LA R1,MMGDCB                  Get DCB Address\n         IF (TM,DCBOFLGS,DCBOFOPN,Z)   If Open Failed...\n            #SUICIDE MSG='RDHM0001 Open failure for message Dataset.'\n         ENDIF\n*\n         #TRACE DATA=('MMGDSECT Area Obtained',0(R9),MMGLNGTH)\n*\n** Return to Caller\n*\nOPEN999  DS    0H\n         SUBEXIT ,\n         DROP R1                       Drop Temp Addressability\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** CLOSE - Close All Open SYSOUT Datasets and Free Storage            *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nCLOSE    SUBNTRY ,\n         DO UNTIL=(LTR,R9,R9,Z)        Find All Open Datasets\n            GOSUB LDCB                 Get Next SYSOUT Dataset\n            IF (LTR,R9,R9,NZ)          If We Found one?\n               GOSUB CMMG              Do Cleanup Processing\n            ENDIF ,\n         ENDDO ,\n*\n** Return to Caller\n*\nCLOSE99  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** CMMG - Close the SYSOUT Dataset and do cleanup for this task       *\n*                                                                     *\n*    Close processing is done within the RESMGR exit to close         *\n*  the trace output dataset and freemain the storage for MMGDSECT.    *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nCMMG     SUBNTRY ,\n*\n** Close Open Dataset For This Task\n*\n         MVC DSACLL,MDLCLL             Move Close Parm to Common\n         CLOSE (MMGDCB),               Close Sysout Dataset            *\n               MF=(E,DSACLL)            (Same)\n*\n** Free Storage for MMGDSECT\n*\n         STORAGE RELEASE,              Free Storage for MMGDSECT       *\n               ADDR=(R9),              (Same)                          *\n               LENGTH=4096             (Same)\n*\n** Return to Caller\n*\nCMMG999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** BUILD - Build the Message Text in DSAPLINE                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nBUILD    SUBNTRY ,\n*\n** Get Callers Registers From Stack\n*\n         PUSH  USING                         Save Current USING Status\n         EREGG R0,R7                         Get First Half\n         STMG  R0,R7,DSAREGS                 (Same)\n         STMG  R9,R13,DSASAVE5               Save Base Registers\n         DROP  ,                             Drop All Bases\n*\n         LR    R2,R13                        Setup Temp Addressability\n         USING RDHMSGS_DSA,R2                (Same)\n         EREGG R8,R15                        Get Second Half\n         STMG  R8,R15,DSAREGS+64             (Same)\n         LMG   R9,R13,DSASAVE5               Restore Bases\n         DROP  R2                            Drop temp Addressability\n         POP   USING                         Load Previous USING Status\n*\n** Go Build The Message in MMGDSECT\n*\n         GOSUB MSGS                     Process the Message\n*\n** Return to Caller\n*\nBUILD999 DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** MSGS - Build The Message Requested by This Trap                    *\n*                                                                     *\n*    This routine will format the message data, which consists as a   *\n*  sublist intermixed with both text data and variable data.  The     *\n*  variable data will be converted to printable form based upon the   *\n*  T' type for that variable.  Some examples are:                     *\n*                                                                     *\n*         'This is a message'                                         *\n*         ('The ',COLOR,',HARE,' is ',HEIGHT,' ft. tall.'             *\n*         ('Show savearea at: ',DSASAVEA)                             *\n*                                                                     *\n*  COLOR  DC C'BLUE'                                                  *\n*  HEIGHT DC H'5'                                                     *\n*                                                                     *\n*    The primary input for this routine is the MSGDSECT area.         *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nMSGS     SUBNTRY ,\n         MVI DSAMSGWK,C' '             Space Fill Work Area\n         MVC DSAMSGWK+1(L'DSAMSGWK-1),DSAMSGWK\n         MVI DSAPLINE,C' '             Space Fill Print Line\n         MVC DSAPLINE+1(L'DSAPLINE-1),DSAPLINE\n*\n         LA  R2,DSAMSGWK               Init Current Output Position\n         MVI DSAMSGWK,C' '             Space Fill Area\n         MVC 1(L'DSAMSGWK-1,R2),0(R2)  (Same)\n         LA  R3,MSGMSG                 Point at Pre-formated Message\n         XR  R4,R4                     Zero Work Register\n         ICM R4,B'0011',MSGMLNTH       Get Length of Message\n         LA  R3,2(,R3)                 Point Past Length at Message\n         AHI R4,-2\n*\n** Process MSGID= Value if Present\n*\n         IF (TM,MSGFLAG1,MSG1MID,Z)    If MSDID is Present?\n            MVC DSAMSGWK(8),MSGID      Set Message ID in Output Area\n            LA  R2,9(,R2)              Point Past Message ID\n         ENDIF ,\n*\n** Loop Through Message and Build Text\n*\n         DO FROM=(R4)                  Loop For Count in Message\n            IF (CLI,0(R3),EQ,MSGEVVAR) Do We Have A Variable?\n               IF (CH,R4,LE,=H'0')     If VAR is Last Thing?\n                  DOEXIT ,\n               ENDIF ,\n               BAS R14,FVAR            Format Variable for Printing\n            ELSE ,                 -*- Move Message Text\n               MVC 0(1,R2),0(R3)       Move a Byte\n               LA  R2,1(,R2)           Bump Output Pointer\n               LA  R3,1(,R3)           Bump Input Pointer\n            ENDIF ,\n            LA R14,DSAMSGWK+L'DSAMSGWK-1 Get End of Buffer\n            IF (CR,R14,NH,R2),OR,      Have We Move to End?            *\n               (LTR,R4,R4,Z)           (Same)\n               DOEXIT ,                Yes -> Quit\n            ENDIF ,\n         ENDDO ,                       -> Loop (BCT)\n*\n         IF (TM,MSGFLAG1,MSG1SQEZ,NZ)     Sqeeze Buffer?\n            SQUEEZE BEG=DSAMSGWK,         Remove Double Blanks         *\n               END=DSAMSGWK+L'DSAMSGWK-1,MF=E\n         ENDIF ,\n*\n         MVC   DSAPLINE,DSAMSGWK       Move to Print Area\n*\n** Return to Caller\n*\nMSGS999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** FVAR - Format a MSG= Variable for Printing                         *\n*                                                                     *\n*    This routine takes in the address of the current variable        *\n*  defination from the input MSG= data and formats that data          *\n*  according to the data type.  This formated data is passed back     *\n*  to the caller in the current position within DSAMSGWK, with the    *\n*  current positions of from and to data bumped appropriately and     *\n*  the current length drecemented.                                    *\n*                                                                     *\n*    Inputs:                                                          *\n*            R2 = Output Pointer, Current Position in DSAMSGWK        *\n*            R3 = Input  Pointer, Current Position in MSGMSG          *\n*                 This will also be the pointer to the MSGEVAR entry  *\n*                 to process.                                         *\n*            R4 = Residual length of total MSG= data.                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         USING MSGEVAR,R3              Establish Temp Addressability\n*\nFVAR     SUBNTRY ,\n         XR  R14,R14                   Zero Work Register\n         XR  R15,R15                   (Same)\n         ICM R14,B'0011',MSGESCON      Get SCON Address of Data\n         SRDL R14,12                   Seperate B and DDD\n         SRL R15,20                    (Same)\n         SLL R14,3                     Base Times 8\n*\n         LG  R14,DSAREGS(R14)          Lift The Proper Base Reg\n         ALR R14,R15                   Add Base and Displacement\n         XR  R15,R15                   Zero Work Register\n         IC  R15,MSGEDLEN              Get Length of Data\n*\n         MVC  DSARETRY,=A(FVARRTY)     Set Retry Routine\n         IF (CLI,MSGETYP,EQ,C'C')  -*- For Character Data\n            BCTR R15,0                 Decrement for Assembler\n            MVC 0(*-*,R2),0(R14)       Move Data to Print Line\n            EX  R15,*-6                (Same)\n            LA  R2,1(R15,R2)           Point Past Data\n            LA  R3,MSGESLEN(,R3)       Point Past Var Entry\n            SH  R4,=Y(MSGESLEN-1)      Decrement Count\n         ENDIF ,\n*\n         IF (CLI,MSGETYP,EQ,C'Z')  -*- For Zoned Decimal\n            BCTR R15,0                 Decrement for Assembler\n            MVC 0(*-*,R2),0(R14)       Move Data to Print Line\n            EX R15,*-6                 (Same)\n            LA R2,0(R15,R2)            Point Past Data\n            OI 0(R2),X'F0'             Set Sign in Last Byte\n            LA R2,1(,R2)               Point to next Blank\n            LA R3,MSGESLEN(,R3)        Point Past Var Entry\n            SH R4,=Y(MSGESLEN-1)       Decrement Count\n         ENDIF ,\n*\n         IF (CLI,MSGETYP,EQ,C'F')  -*- For Fullword Data\n            ICM R15,B'1111',0(R14)     Get Data to Print\n            CVD R15,MMGWORKD           Get Data in Decimal\n            MVC DSAWORKC,CONECON       Set ED Constant\n            ED  DSAWORKC,MMGWORKD      Get Character Numbers\n            MVC 0(L'CONECON,R2),DSAWORKC\n            LA  R2,L'CONECON(,R2)      Bump Output Pointer\n            LA  R3,MSGESLEN(,R3)       Point Past Var Entry\n            SH  R4,=Y(MSGESLEN-1)      Decrement Count\n         ENDIF ,\n*\n         IF (CLI,MSGETYP,EQ,C'H')  -*- For Fullword Data\n               XR  R15,R15             Zero Work Register\n               ICM R15,B'0011',0(R14)  Get Data to Print\n               CVD R15,MMGWORKD        Get Data in Decimal\n               MVC DSAWORKC,CONECON    Set ED Constant\n               ED  DSAWORKC,MMGWORKD   Get Character Numbers\n               MVC 0(L'CONECON,R2),DSAWORKC\n               LA  R2,L'CONECON(,R2)   Bump Output Pointer\n               LA  R3,MSGESLEN(,R3)    Point Past Var Entry\n               SH  R4,=Y(MSGESLEN-1)   Decrement Count\n         ENDIF ,\n*\n         IF (CLI,MSGETYP,EQ,C'P')  -*- For Packed Decimal\n            BCTR R15,0                 Decrement for Assembler\n            O  R15,=A(X'70')           Set Length of To Field\n            EX R15,FVARZAP             Zap Data into MMGWORKD\n            MVC DSAWORKC,CONECON       Set ED Constant\n            ED  DSAWORKC,MMGWORKD      Get Character Numbers\n            MVC 0(L'CONECON,R2),DSAWORKC\n            LA  R2,L'CONECON(,R2)      Bump Output Pointer\n            LA  R3,MSGESLEN(,R3)       Point Past Var Entry\n            SH  R4,=Y(MSGESLEN-1)      Decrement Count\n         ENDIF ,\n*\n         IF (CLI,MSGETYP,EQ,C'X')  -*- For Hexidecimal\n            N   R15,=A(X'0F')          Allow Max 16-Bytes\n            LR  R5,R15                 Get Output Length\n            SLL R5,1                   (Same)\n            MVC DSAWORKX,=32C' '       Space Fill Result\n            LA R1,DSAWORKX             Get Output Location\n            XC MMGWORKD,MMGWORKD       Zero Fill Work Area\n            DO FROM=(R15)              Loop All Digits to Translate\n               UNPK MMGWORKD(3),0(2,R14)    Unpack a Byte\n               TR  MMGWORKD(2),HEXTABL-240  In Char Format\n               MVC 0(2,R1),MMGWORKD         Put Output\n               LA  R14,1(,R14)              Bump Input Ptr\n               LA  R1,2(,R1)                Bump Output Ptr\n            ENDDO ,\n            MVC 0(L'DSAWORKX,R2),DSAWORKX\n            LA R2,0(R5,R2)             Bump Output Pointer\n            LA R3,MSGESLEN(,R3)        Point Past Var Entry\n            SH R4,=Y(MSGESLEN-1)       Decrement Count\n         ENDIF ,\nFVARRTY  DS    0H\n         XC    DSARETRY,DSARETRY       Set for no Retry\n*\nFVAR999  DS    0H\n         SUBEXIT ,\n*\nFVARZAP  ZAP   MMGWORKD(*-*),0(R14)    Executed Instruction\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** LDCB - Locate Our Open DCB by running the DEB Chain off the TCB    *\n*                                                                     *\n*   This routine will loop through the DEB chain off the current TCB  *\n* looking for an open DCB that belong to this Tracing Facility.  If   *\n* found it will locate the address of the TRC Persistant Data Area,   *\n* within which the DCB resides, and return that address in R9.        *\n*                                                                     *\n** Note: This routine is no longer executed.  It is left here for     *\n*        reference purposes only.  It has been replaced with LTRC     *\n*        which provides a better means of locating the TRCDSECT area  *\n*        for the current task.                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         USING DEBBASIC,R1             ..And Addressability\n         USING IHADCB,R2               Get DCB Addressability\n         USING TCB,R14                 ..And Addressability\n*\nLDCB     SUBNTRY ,\n         XR R9,R9                      Zero Innitial Pointer\n         XR R1,R1                      Zero Work Register\n         XR R2,R2                      (Same)\n         L  R14,PSATOLD                Load Our TCB Address\n*\n         IF (ICM,R1,7,TCBDEB+1,NZ)     Get Address of 1st DEB?\n            DO WHILE=(LTR,R1,R1,NZ)    Loop Thru DEB Chain\n               ICM R2,B'0111',DEBECBB  Load DCB Address\n*\n               LA R3,MMGDCBID-MMGDCB(,R2)   Get Addr of Idetifier\n            #TRACE REGS=(R1,R2,R3),DATA=('DCB Addr',0(R2),128)\n               IF (CLC,=C'RDHM',EQ,0(R3))   Is This Our DCB?\n            #TRACE 'FOUND DCB'\n                  LR R9,R2                  Get Address of MMGDSECT\n                  SH R9,=Y(MMGDCB-MMGDSECT) Get MMGDSECT Address\n                  IF (TM,MSGFLAG1,MSG1CLOS,Z)   If Not CLOSE Request?\n                     IF (CLC,MSGDDNAM,EQ,MMGDDNAM) If For This DD?\n                        DOEXIT ,              ..And Exit\n                     ELSE ,\n                        XR R9,R9              ..Still Not Found\n                     ENDIF\n                  ENDIF\n               ENDIF\n*\n               ICM R1,B'0111',DEBDEBB  Get Next DEB on Chain\n            ENDDO\n         ENDIF\n #TRACE REGS=(R9)\n*\n** Exit LDCB\n*\nLDCB999  DS    0H\n         SUBEXIT ,\n         DROP  R1,R2                   Drop Temp Addressability\n*\n***********************************************************************\n*  Literials and Constants\n***********************************************************************\n*\n         CONBEG ,                      Define literal Pool\n*\nHEXTABL  DC    C'0123456789ABCDEF'     Hex Translate Table\n*\nMDLRDJSC RDJFCB (*-*),MF=L             Define model for RDJFCB\nMDLRDJSL EQU  *-MDLRDJSC               (Same)\n*\nMDLOPL   OPEN  (*-*,(OUTPUT)),MF=L     Define Model for OPEN\nMDLOPLL  EQU   *-MDLOPL                (Same)\n*\nMDLCLL   CLOSE (*-*),MF=L\nMDLCLLL  EQU   *-MDLCLL\n*\nMDLDCB   DCB   DDNAME=MSGPRINT,        Define Trace DCB                *\n               LRECL=128,BLKSIZE=1280, (Same)                          *\n               RECFM=FB,DSORG=PS,      (Same)                          *\n               MACRF=PM,EXLST=*-*      (Same)\nMDLDCBL  EQU   *-MDLDCB                (Same)\n*\nMDLRESM  RESMGR ADD,TYPE=ADDRSPC,      Define Model for RESMGR         *\n               ROUTINE=(LINK,*-*),     (Same)                          *\n               PARAM=*-*,              (Same)                          *\n               TOKEN=*-*,MF=L          (Same)\nMDLRESML EQU   *-MDLRESM               (Same)\n*\nCONECON  DC    X'402020206B2020206B2020206B2020206B202120'\n*                    12345678901234567890123456789012345678901234567890\n*              23456789012345678901234567890123456789012345678901234567\n*              90123456789012345678\nCONTITLE DC    CL128'00/00/00         SYS00000 - Label Level Tracing - *\n               TCB: 00000000'\nCONABEND DC    CL128'    ***> An abend occured while attempting to acce*\n               ss this data.'\nCONHEAD1 DC    CL128'    Address Offset'\nCONHEAD2 DC    0CL128\n         DC    CL4' ',72C'=',CL52' '\n*\n         DS    0D\nTRTABL   DS    256C'.'                 Translate Table\n         ORG   TRTABL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   TRTABL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   TRTABL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   TRTABL+C'a'\n         DC    C'abcdefghi'\n         ORG   TRTABL+C'j'\n         DC    C'jklnmopqr'\n         ORG   TRTABL+C's'\n         DC    C'stuvwxyz'\n         ORG   TRTABL+C'0'\n         DC    C'0123456789'\n         ORG   TRTABL+C'@'\n         DC    C'@'\n         ORG   TRTABL+C'#'\n         DC    C'#'\n         ORG   TRTABL+C'$'\n         DC    C'$'\n         ORG   TRTABL+C','\n         DC    C','\n         ORG   ,\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area - DSA\n***********************************************************************\n*\n         DSABEG ,                 <*** Begin Dynamic Storage Area\n*\n         DS    0D\nDSARESM  DS    XL(MDLRESML)            Reserve Space for RESMGR\n*\nDSASAVE5 DS    5D                      Save Base Registers\n*\nDSAESTAE DS    F            <Keep    > Address of Recovery RTN or Zero\nDSAEACNT DS    F            <Together> Count of Abends\n*\nDSARJFCL DS    F                       Reserve Space for RDJFCB MF=L\nDSAEXLST DS    F                       Space for DCB EXLST\nDSAJFCB  DS    0D,CL176                Reserve Space for JFCB\n*\n         DS    0D\nDSAOPL   DS    XL(MDLOPLL)             Reserve Space for OPEN Parm\n         DS    0D\nDSACLL   DS    XL(MDLCLLL)             Reserve Space for CLOSE Parm\n*\nDSAREGS  DS    16D                     Callers Registers R0-R15\n*\nDSARLINE DS    0D                      WTOR Print Area\nDSARADDR DS    A                       Reply Address\nDSARWTOR EQU   X'80'                   High Bit Means WTOR\nDSARECBA DS    A                       ECB Address\nDSAWLINE DS    0D                      WTO Print Area\nDSAWLEN  DS    H                       Length of WTO\nDSAWRCDE DS    2B                      Route Codes\nDSAPLINE DS    CL128                   Print Line\nDSAPNT   DS    0CL80\nDSAMSGWK DS    CL255                   MSG= Work Area\n*\nMMGWORKD DS    D                       General Purpose Workarea\nDSAWORKC DS    XL20                    (Same)\nDSAWORKX DS    XL32                    (Same)\n*\n         SQUEEZE MF=L                  Get Data Areas for SQUEEZE\n*\n         DSAEND ,                 <*** End Dynamic Storage Area\n         DROP ,                        Drop Everything\n         END ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHTRACE": {"ttr": 29702, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\r\\xf8\\r\\xf8\\x00\\x00\\xd9\\xc4\\xc8\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:00", "lines": 3576, "newlines": 3576, "modlines": 0, "user": "RDHSRC"}, "text": "***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHTRACE - Program Tracing Facility for the #TRACE Macro           *\n*                                                                     *\n*    This program is the BASR implementation of the tracing facility. *\n*  It is entered via a BASR R14,R15 generated by the #TRACE macro in  *\n*  the callers code.  There are many potential operands in the #TRACE *\n*  macro, and you can look at the Porlog there for a description of   *\n*  all.  I'm just going to describe here the main four that will      *\n*  most often be used.                                                *\n*                                                                     *\n*                                                                     *\n*     &TYPE = PGME  - Call Generated on Program Entry                 *\n*             PGMX  - Call Generated on Program Exit                  *\n*             SUBE  - Call Generated on Subroutine Entry              *\n*             SUBX  - Call Generated on Subroutine Exit               *\n*             TRAP  - Indicate a Trace Point Trap                     *\n*                                                                     *\n*     &REGS = A sublist of register values that indicate the          *\n*             registers to be printed when this trap point is         *\n*             executed.  They may be specifies as the values          *\n*             0 through 15, or R0 through R15.                        *\n*             (e.g. REGS=(0,3,5,R12,R14,R15) or REGS=ALL or           *\n*             REGS=NONE)                                              *\n*                                                                     *\n*      &MSG = Specifies a message to be printed allowinf for          *\n*             embedded variables in a sublisted string.  Variable     *\n*             data will be printed according to the type of           *\n*             variable.  Types C and Z are printes in character       *\n*             format.  Types F, H and P are printed in decimal        *\n*             format.  Everything else is printed in hex format.      *\n*               MSG='This is a message'                               *\n*               MSG=('The ',COLOR,' HARE ' is ',HEIGHT,' ft. tall.'   *\n*               MSG=('Show savearea at: ',DSASAVEA)                   *\n*                                                                     *\n*     &DATA = Specifies an area in storage that is to be displayed    *\n*             in hex dump format. An optional title may be specified  *\n*             to identify the area being displayed.  The areas to be  *\n*             displayed must be specified as a sublist within a       *\n*             sublist.                                                *\n*               DATA=('My DSA Area',0(R13),DSALNGTH)                  *\n*               DATA=(('Previous SA in Chain',0(R6),SALNGTH),         *\n*                     ('Next SA in Chain,',0(R5),(R2))                *\n*                                                                     *\n*  Restrictions:                                                      *\n*       For BASR Implementation, this program must be entered in      *\n*     Supervisor State.                                               *\n*       For TRAP2 Implementation, no SVCs can be executed while       *\n*     processing a Trace Trap Point, as we may be in cross memory     *\n*     mode, or SRB mode.                                              *\n*                                                                     *\n*                                                                     *\n*  On Entry:                                                          *\n*     R1  - Points to a fullword address of TRPDSECT which contains   *\n*           additional specific information about the trace point.    *\n*     R14 - Contains the Return Address                               *\n*     R15 - Contains the Entry Point of this Program                  *\n*                                                                     *\n*                                                                     *\n*  Date     FIX-ID Programmer Description                             *\n*  ======== ====== ========== ======================================= *\n*  02/02/06  M001  R. Harper  Module Developed                        *\n*  10/04/07  M002  R. Harper  Added Support for EX Tracepoints        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT NOGEN\n         COPY  PGMGBLAS\n*\n         IHAPSA ,                      Define PSA Control Block\n         IKJTCB ,                      Define TCB Control Block\n         IHASTCB ,                     Define STCB Control Block\n         DCBD   DSORG=PS               Define DCB Control Block\n         IEZDEB LIST=YES               Define DEB Control Block\n         IHACDE ,                      Define CDE Control Block\n         IHASCB ,                      Define SCB Control Block\n         IHASDWA ,                     Define CDE Control Block\nSDWLEN   EQU   SDWAEND-SDWA            Get Me The Length\n         IEFTIOT1 ,                    Define TIOT Control Block\n         IHAXTLST ,                    Define XTLST Control Block\nJFCB     DSECT    ,                    Define JFCB Control Block\n         IEFJFCBN ,                    (Same)\n         IHAEXLST ,                    Define EXLST Data Area\n         CVT   DSECT=YES\n         IHASCVT ,\n*\n*---------------------------------------------------------------------*\n* Define Internal RDHTRACE Data Areas                                 *\n*---------------------------------------------------------------------*\n*\n         PRINT GEN\n         RMEDSECT ,                    Define RMEDSECT Area\n         LSEDSECT ,                    Define Linkage Stack Entry\n         TRCDSECT ,                    Define TRCDSECT Data Area\n         TRPDSECT ,                    Define Trap Data Areas\n         TRGDSECT ,                    Define Trap Glue Data Area\n*\n***********************************************************************\n* RDHTRACE - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Define PCA Addressability\n         USING TRGDSECT,R10            Trap Glue Data Area - Status\n         USING LSEN,TRGLSEN            Linkage Stack Entry\n         USING TRPDSECT,R9             Trap Trace Point Data\n         USING TRCDSECT,R8             TRC Persistant Data Area\n*\n*\nRDHTRACE PGMNTRY TYPE=MAIN,            Define Program Entry Code       *\n               CBAS=(R12,R11),         Define Constant Base            *\n               AMODE=31,               Define Addressing Mode          *\n               RMODE=ANY,              Define Residency Mode           *\n               ESTAE=YES,              Define ESTAE Support            *\n               OPSYN20=NO,             Do No Redefine RS/RX            *\n               TRACE=NO,PRINT=GEN      Traces Not Available Here\n*\nC        USING TRCDNTRY,TRCCNTRY       Current TRCDAREA Entry\nP        USING TRCDNTRY,TRCPNTRY       Previous TRCDAREA Entry\n*\n         L     R10,0(,R1)              Get TRGDSECT Address\n         LA    R10,0(,R10)             Clear high Bit\n*\n         MODESET EXTKEY=ZERO,          Assure we are in Key Zero       *\n               SAVEKEY=DSASVKEY,                                       *\n               WORKREG=3\n*\n         IFNTIOT DDNAME=TRCPRINT       If TRCPRINT is Present\n            L  R9,TRGTRPAD             Get R1 at Trace Point\n            L  R9,0(,R9)               Get TRPDSECT Address\n*\n            JAS R14,LTRC               Find TRCDSECT if its There\n            IF (LTR,R8,R8,Z)              And Not Already Open\n               JAS R14,OPEN               ...Open a SYSOUT Dataset\n            ENDIF ,\n            ST R9,TRCTRPAD             Save TRPDSECT Address\n*\n            JAS R14,TRACE              Process the TRACE Request\n         ENDIF\n*\n** Return to Caller\n*\nTRCEXIT  DS    0H\n         MODESET KEYADDR=DSASVKEY,     Restore Callers Key             *\n               WORKREG=3\n         PGMEXIT RC=0                  Define Program Exit Code\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** OPEN - Do Open Processing for Program Tracing Facility             *\n*                                                                     *\n*    Since this version of the tracing facility is self-contained     *\n*  meaning that the #TRACE macro is the only macro in the present     *\n*  system, it is necessary to provide a means to perform our          *\n*  initialization processing, through this macro and give over        *\n*  unto the user of the system the responsibillity for determining    *\n*  where this initialization code should go.                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nOPEN     SUBNTRY ,\n*\n** Get Storage for TRCDSECT Persistant Storage or DSA for This TCB\n*\n         STORAGE OBTAIN,               Obtain Storage for TRC          *\n               LENGTH=4096,            (Same)                          *\n               LOC=(24,31),BNDRY=PAGE  (Same) - Below The Line\n*\n         LR  R8,R1                     Get Address of TRCDSECT\n         MVC TRCEYECT,=C'TRCDSECT'     Place Eye Catcher\n         MVC TRCTCBAD,PSATOLD          Save TCB Address\n         UNPK TRCWKCL9,TRCTCBAD(5)     In Hexadecimal\n         TR  TRCWKCL9(8),HEXTABL-240   (Same)\n         MVC TRCTCBAC,TRCWKCL9         Save In Character Format\n*\n         STORAGE OBTAIN,               Obtain Storage for TRCDAREA     *\n               SP=240,                 (Same)                          *\n               LENGTH=TRCDSIZE,        (Same)                          *\n               LOC=31                  (Same)\n         ST    R1,TRCDADDR             (Same)\n         USING TRCDAREA,R1             And Addressability\n         MVC   TRCDEYE,=C'TRCDAREA'    Set Eye Catcher\n         MVC   TRCDLEN,=A(TRCDSIZE)    Save Size in Header\n         DROP  R1                      Drop Temp Addressability\n*\n** Establish a Resourge Manager Exit for This Task if Not Present\n*\n         L     R2,=A(RDHRESEX)             Identify The EP for LINK\n         IDENTIFY EP=RDHRESEX,ENTRY=(R2)   (Same)\n*\n         MVC   TRCRESMP(4),=C'RDHT'    Set Identifier in Param\n         MVC   TRCRESM,MDLRESM         Set List Form in Storage\n         ST    R8,TRCRESMP+4           Addr of TRCDSECT for This Task\n*\n         L     R3,=V(RDHRESEX)\n         RESMGR ADD,TYPE=TASK,         Establish RESMGR Exit This Task *\n               ASID=CURRENT,              ..And This Address Space     *\n               ROUTINE=(BRANCH,(R3)),           Routine Under an RB    *\n               PARAM=TRCRESMP,            ..Parameter Input            *\n               TOKEN=TRCRESMT,            ..Token for DELETE           *\n               MF=(E,TRCRESM)             ..Point to List Form\n*\n         IF (LTR,R15,R15,NZ)           Established Properly?\n            #SUICIDE MSG='RDHT0001: RESMGR Macro Failed.'\n         ENDIF ,\n\n*\n** Read in JFCB for TRCPRINT\n*\n         LA R1,TRCJFCB                 Build Exit List\n         ST R1,TRCEXLST                (Same)\n         OI TRCEXLST,EXLLASTE+EXLRJFCB (Same)\n*\n         LA R1,TRCDCB                  Build RDJFCB MF=L\n         USING IHADCB,R1               And Temp Addressability\n         MVC TRCDCB,MDLDCB             Move DCB to Common\n         MVC DCBDDNAM,=C'TRCPRINT'     Set DDNAME in DCB\n         LA R14,TRCEXLST               Put EXLST Address in DCB\n         ST R14,DCBEXLST               (Same)\n*\n         OI TRCRJFCL,X'80'             Set Option Byte\n         RDJFCB (TRCDCB),              Load JFCB for Dataset           *\n               MF=(E,TRCRJFCL)         (Same)\n         IF (LTR,R15,R15,NZ)           If RDJFCB Failed\n            #SUICIDE MSG'RDHT0001: RDJFCB for TRCPRINT has Failed.'\n         ENDIF\n*\n** Extract Data From JFCB\n*\n         LA R2,TRCJFCB                 Load JSCB Address\n         USING JFCB,R2                 Setup Addressability\n         IF (TM,JFCBTSDM,JFCSDS,O)     If This is a SYSOUT Dataset\n            OI TRCPFLAG,TRCPDDSO       ...Indicate SYSOUT\n         ELSE ,\n            IF (TM,JFCBIND1,JFCPDS,O)  If This is a PDS\n               OI TRCPFLAG,TRCPDDPO    ...Indicate PDS\n            ELSE ,                     Else\n               OI TRCPFLAG,TRCPDDPS    ...Indicate PS\n            ENDIF\n         ENDIF\n         DROP R2\n*\n** Allocate a Sysout Dataset for This TCB if Necessary\n*\n         L R1,PSATOLD                  Get our TCB Address\n         USING TCB,R1                  And Temp Addressability\n         MVC TRCDDNAM,=C'TRCPRINT'     Assume Writing to TRCPRINT\n*\n         IF (TM,TRCPFLAG,TRCPDDSO,O)   If We're Using SYSOUT\n            IF (C,R1,NE,TCBJSTCB)         If We Are NOT Job Step TCB?\n               MVC TRCDDNAM,=8C' '        ..Space Fill Receiving Field\n               #DD ALLOC,                 ..Allocate a Sysout Dataset  *\n               SYSOUT=A,                  ....Default Sysout Class     *\n               FREE=CLOSE,                ....Deallocate at Close      *\n               RTDDN=TRCDDNAM             ....Save DDNAME for Open\n            ENDIF\n         ENDIF\n*\n** Open Trace Sysout DCB\n*\n         LA  R1,TRCDCB                 Get DCB Address\n         USING IHADCB,R1               And Temp Addressability\n         MVC TRCDCB,MDLDCB             Move DCB to Common\n         MVC DCBDDNAM,TRCDDNAM         Set DDNAME in DCB\n         MVC TRCOPL,MDLOPL             Move Open Parm to Common\n         OPEN  (TRCDCB,(OUTPUT)),      Open Sysout Dataset             *\n               MF=(E,TRCOPL)            (Same)\n*\n         LA R1,TRCDCB                  Get DCB Address\n         IF (TM,DCBOFLGS,DCBOFOPN,Z)   If Open Failed...\n            #SUICIDE MSG='Open failure for Trace Sysout Dataset.'\n         ENDIF\n*\n         MVC   TRCDCBID,=C'TRAC'       Indicate Our DCB            @RDH\n         DROP R1                       Drop Temp Addressability\n*\n** Obtain Storage for Buffer if Requested\n*\n         L  R14,TRPTRPAD               Get Address of Open Segment\nO        USING TRPDSECT,R14            ..And Addressability\n         IF (TM,O.TRPOFLG1,TRPOBUFF,O) If Buffering requested\n            LH  R2,O.TRPOBMAX          Get Line Count\n            MH  R2,=Y(L'TRCPLINE)      Length of a Print Line\n            AH  R2,=Y(4096)            Round to Page Boundry\n            SRL R2,12                  (Same)\n            SLL R2,12                  (Same)\n            STORAGE OBTAIN,            Obtain Storage for Buffer       *\n               LENGTH=(R2),            (Same)                          *\n               LOC=31,BNDRY=PAGE       (Same)\n            ST R1,TRCBUFAD             Save Address\n            ST R2,TRCBUFLN             Save Length\n            ST R1,TRCBUFCR             Current Position\n            AR R2,R1                   Point Past End\n            ST R2,TRCBUFND             Save End Pointer\n            OI TRCBFLAG,TRCBBFON       Indicate Buffering in Effect\n            OI TRCBFLAG,TRCBBATB       In Above-The-Line Storage\n         ENDIF\n*\n** Print Title Line\n*\n         XC   TRCWKC16,TRCWKC16        Assure Workarea is Zero\n         TIME DEC,TRCWKC16,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY,           *\n               MF=(E,TRCTMFL)\n         L    R0,TRCWKC16\n         L    R1,TRCWKC16+8\n*\n         ST   R1,TRCWORKF\n         UNPK TRCWKCL9,TRCWORKF(5)     Get Date in Character\n         MVC TRCCDATE,=C'00/00/00' `   Set Template\n         OC  TRCWKCL9(8),=8C'0'        (Same)\n         MVC TRCCDATE(2),TRCWKCL9      Build Character Form\n         MVC TRCCDATE+3(2),TRCWKCL9+2  (Same)\n         MVC TRCCDATE+6(2),TRCWKCL9+6  (Same)\n*\n         SRL R0,8                       Get Only HHMMSS\n         ST  R0,TRCWORKF                (Same)\n         UNPK TRCWORKD(7),TRCWORKF+1(4) (Same)\n         OC  TRCWORKD,=8C'0'            (Same)\n         MVC TRCCTIME,=C'00:00:00'      Set Template\n         MVC TRCCTIME(2),TRCWORKD       Build Character Form\n         MVC TRCCTIME+3(2),TRCWORKD+2   (Same)\n         MVC TRCCTIME+6(2),TRCWORKD+4   (Same)\n*\n         MVC TRCPLINE,CONTITLE         Set Title in Print Area\n         MVC TRCPLINE(8),TRCCDATE      Set Date in Title\n         MVC TRCPLINE+17(8),TRCDDNAM   Set DDNAME in Title\n         MVC TRCPLINE+55(8),TRCTCBAC   Set TCB Address in Title\n         MVC TRCPLINE+72(8),TRCCTIME   Set Time in Title\n         GOSUB PRNT                    Write Title Line\n         MVC TRCPLINE,=CL128' '        Print Vertical Seperator\n         GOSUB PRNT                    Print the Line\n*\n** Establish Recovery Processing for Printing Abend Diagnostics\n*\n         L     R14,PSATOLD             Get Current TCB Address\n         USING TCB,R14                 And Addressability\n         XR    R15,R15                 Get Current SCB Address\n         ICM   R15,B'0111',TCBSTABB    (Same)\n         USING SCB,R15                 And Addressability\n*\n         DO UNTIL=(LTR,R15,R15,Z)      Loop Through SCB's\n            L R14,SCBXPTR                   ..Get SCBX Address\n            USING SCBX,R14                  ..And Addressability\n            IF (CLC,SCBXALET,EQ,=A(X'101')) And Ours From TYPE=MAIN?\n               XC SCBXALET,SCBXALET         ..AR Mode Callers\n               MVC SCBXPARM,=A(X'101')      ..(Same)\n            ENDIF\n            IF (CLC,SCBXPARM,EQ,=A(X'101')) And Ours From TYPE=MAIN?\n               L  R1,=A(RDHABEND)           ..Get Address of ESTAE Rtn\n               ST R1,SCBEXIT                ..Save it in SCB\n               ST R8,SCBXPARM               ..Pass Address of TRCDSECT\n               OI SCBFLGS2,SCBSUPER         ..Exit Runs in Supr State\n               OI SCBFLGS2,SCBKEY0          ..Exit Runs in Key 0\n               NI SCBPARMA,255-SCBAM64      ..31-Bit Estae\n               MVI SCBPKEY,0                ..---->Yes REALLY\n            ENDIF ,\n            L R15,SCBCHAIN                  Get Next SCB on Chain\n         ENDDO ,\n*\n** Return to Caller\n*\nOPEN999  DS    0H\n         SUBEXIT ,\n         DROP  O,R14,R15               Drop Temp Addressabilty\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** TRACE - Process a Trace Point Trap Request                         *\n*                                                                     *\n*    The function of this routine is to break out all the various     *\n*  types of trace points that I have envisioned for this system in    *\n*  the future. Not all of this is implemented at present, but it      *\n*  does provide a basic structure for future enhancements.            *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nTRACE    SUBNTRY ,\n         LA  R14,TRCINDNT               Get Current Indention Level\n         LH  R15,TRCINCUR               Get Current Table Entry #\n         SLL R15,1                      (Same)\n         LA  R14,0(R14,R15)             Point at Current Entry\n         MVC TRCINLVL,0(R14)            Get Current Indention\n         MVI TRCINLVL,X'00'             Zero Overflow - If Present\n*\n** Build TRCDAREA - Savearea and Linkage Stack Chain\n*\n         CALL  RDHDSAVE,                Build TRCDAREA For This Call   *\n               ((R8)),                  Passing TRCDSECT Address       *\n               MF=(E,DSAPLIST)          (Same)\n*\n** Get Caller's Registers\n*\n         L     R1,TRCDADDR              Get TRCDAREA Address\n         USING TRCDAREA,R1              And Temp Addressability\n         L     R14,TRCDCNT              Get Last TRCDAREA Entry-Current\n         SH    R14,=Y(1)                (Same)\n         MH    R14,=Y(TRCDLNTH)         (Sama)\n         LA    R14,TRCPLTH(R14,R1)      (Same)\n         MVC   TRCCNTRY,0(R14)          (Same)\n         L     R15,TRCDCNT              Get Prev TRCDSECT Entry-Caller\n         SH    R15,=Y(2)                (Same)\n         MH    R15,=Y(TRCDLNTH)         (Same)\n         LA    R15,TRCPLTH(R15,R1)      (Same)\n         MVC   TRCPNTRY,0(R15)          (Same)\n         DROP  R1                       Drop Temp Addressability\n*\n** Set ARMODE Flags\n*\n         IF (TM,LSENPSW1+2,X'40',O)        If We Were in ARMODE?\n            OI TRGFLAG1,TRG1ARMD           ..Indicate ARMODE\n         ENDIF\n*\n         NI TRGFLAG1,255-(TRG1AM64+TRG1AM31+TRG1AM24) Reset\n         IF (TM,LSENPSW1+3,X'01',O)        If We Were in AMODE=64?\n            OI TRGFLAG1,TRG1AM64           ..Indicate AMODE=64\n         ELSE ,\n            IF (TM,LSENPSW1+4,X'80',O)     If We Were in AMODE=31?\n               OI TRGFLAG1,TRG1AM31        ..Indicate AMODE=31\n            ELSE ,\n               OI TRGFLAG1,TRG1AM24        ..Indicate AMODE=24\n            ENDIF\n         ENDIF\n*\n** Process by Type of Trap\n*\n         MVC TRCNAME,TRPNAME              Set Default Trap Name\n         IF (TM,TRPFLAG1,TRPFPGME,O)      If Program Entry?\n            BAS R14,PGME\n         ELSEIF (TM,TRPFLAG1,TRPFPGMX,O)  If Program Exit?\n            BAS R14,PGMX\n         ELSEIF (TM,TRPFLAG1,TRPFSUBE,O)  If Subroutine Entry?\n            BAS R14,SUBE\n         ELSEIF (TM,TRPFLAG1,TRPFSUBX,O)  If Subroutine Exit?\n            BAS R14,SUBX\n         ELSEIF (TM,TRPFLAG1,TRPFTRAP,O)  If Generic Trap?\n            BAS R14,TRAP\n         ELSE ,\n            MVC TRCRC,=F'16'              No  -> Set Bad RC\n            MVC TRCRS,=F'4'               Set bad RS\n         ENDIF ALL\n*\n** Return to Caller\n*\nTRACE999 DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** PGME - Process a Program Entry Trace Point Request                 *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nPGME     SUBNTRY ,\n         ICM R2,B'1111',TRPTRPAD             Get Addr of Open Segment\n         MVC TRCNAME,TRPCSECT-TRPDSECT(R2)   Use CSECT Name\n         MVC TRCHEADT,=C'P) PGME:'           Set Trap Type\n*\n         GOSUB PLSE                    Get Previous LSEN Entry\n*\n         MVI TRCPLINE,C' '             Space Fill Print Line\n         MVC TRCPLINE+1(L'TRCPLINE-1),TRCPLINE\n         GOSUB PRNT                    Print the Line\n*\n         IF (TM,TRPFLAG2,TRPFNOHD,Z)   Are Trap Headings Requested?\n            BAS R14,HEAD               Yes -> Show Heading Line\n            BAS R14,SPSW                      And PSW Status\n         ENDIF\n*\n         IF (TM,TRPFLAG2,TRPFMSGS,O)   Was MSG= Specified?\n            BAS R14,MSGS               Yes ->\n         ENDIF\n         IF (TM,TRPFLAG2,TRPFREGS,O)   Was REGS= Specified?\n            BAS R14,REGS               Yes ->\n         ENDIF\n         IF (TM,TRPFLAG2,TRPFDATA,O)   Was DATA= Specified?\n            BAS R14,DATA               Yes ->\n         ENDIF\n*\nPGME999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** PLSE - Get Previous LSEN Dsect Entry                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nPLSE     SUBNTRY ,\n         LG    R3,TRGCR15              Load Control Register 15\n         SH    R3,=Y(LSENLNTH)         Back up to BAKR Entry\n         SH    R3,=Y(LSEDLNTH)         ..Back up to Descripter\n         USING LSED,R3                 & Addressability\n*\n         MVC DSALSTPP,LSEDTYPE         Get Entry Type\n         NI  DSALSTPP,X'7F'            Strip High Bit\n         IF (CLI,DSALSTPP,EQ,LSEDTHDR) If Header Entry..\n            SH R3,=Y(LSHDLNTH)         ..Back up to Entry\n            USING LSHD,R3              Obtain Addressability\n            L  R3,LSHDPREV             Get Previous Entry Ptr\n            SH R3,=Y(LSEDLNTH)         ..Back up to Descripter\n         ENDIF ,\n*\n         SH R3,=Y(LSENLNTH)            Back up to Entry We Want\n*\n         LR    R0,R3                   Get Linkage Stack Address\n         LA    R1,L'TRGLSEN            Length for MVCL\n         LA    R14,TRGLSEN             Set To Address\n         LR    R15,R1                  Set To Length\n         MVCL  R14,R0                  Move Linkage Stack Entry\n         MVC   DSAEPSW1,LSENMODA *TEMP Save PSW Status On Entry\n*\nPLSE999  DS    0H\n         SUBEXIT ,\n         DROP  R3                      Drop Temp Addressability\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** PGMX - Process a Program Exit Trace Point Request                  *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nPGMX     SUBNTRY ,\n         MVI TRCPLINE,C' '             Space Fill Print Line\n         MVC TRCPLINE+1(L'TRCPLINE-1),TRCPLINE\n         GOSUB PRNT                    Print the Line\n*\n         ICM R2,B'1111',TRPTRPAD           Get Addr of Open Segment\n         MVC TRCNAME,TRPCSECT-TRPDSECT(R2) Use CSECT Name\n         MVC TRCHEADT,=C'P) PGMX:'         Set Trap Type\n*\n         IF (TM,TRPFLAG2,TRPFNOHD,Z)       Are Trap Headings Requested?\n            BAS R14,HEAD                   Yes -> Print Headings\n            MVC DSAEPSW1,LSENMODA  *TEMP   Save PSW Status On Exit\n            BAS R14,SPSW                   And PSW Status\n         ENDIF\n*\n         IF (TM,TRPFLAG2,TRPFMSGS,O)   Was MSG= Specified?\n            BAS R14,MSGS               Yes ->\n         ENDIF\n*\n         IF (TM,TRPFLAG2,TRPFREGS,O)   Was REGS= Specified?\n            BAS R14,REGS               Yes ->\n         ENDIF\n*\n         IF (TM,TRPFLAG2,TRPFDATA,O)   Was DATA= Specified?\n            BAS R14,DATA               Yes ->\n         ENDIF\n*\nPGMX999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** SUBE - Process a Subroutine Entry Trace Point Request              *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nSUBE     SUBNTRY ,                  -*- Increment Indention Level\n         LA  R14,TRCINDNT               Get Current Indention Level\n         LH  R15,TRCINCUR               Get Current Table Entry #\n         SLL R15,1                      (Same)\n         LA  R14,0(R14,R15)             Point at Current Entry\n         IF (CLI,0(R14),EQ,X'00'),AND,  If not in Overflow             *\n               (CLI,1(R14),LT,30)\n            LH R1,0(R14)                Get Current Indention Level\n            LA R1,3(,R1)                Increment Indention\n            STH R1,0(R14)               (Same)\n         ELSE ,\n            XR R1,R1                    Zero Work Register\n            IC R1,0(R14)                Get Overflow Count\n            LA R1,1(,R1)                Increment Count\n            STC R1,0(,R14)              (Same)\n         ENDIF  ,\n         MVC TRCINLVL,0(R14)            Get Current Indention\n         MVI TRCINLVL,X'00'             Zero Overflow - If Present\n\n*\n** Build Name for Trace Point\n*\n         MVC TRCWKCL9,=CL9' '          Space Fill Area\n         MVC TRCWKCL9(8),TRCNAME       Get Trace Point Name\n         LA R1,TRCWKCL9                Get Address of Name\n         DO WHILE=(CLI,0(R1),NE,C' ')  Locate First Space\n            LA R1,1(,R1)               (Same)\n         ENDDO ,\n         BCTR R1,0                     Point at Last Character C'E'\n         MVI  0(R1),C' '               ..And Wipe it Out\n         MVC TRCNAME,TRCWKCL9          Set Subr Name\n         MVC TRCHEADT,=C'S) SUBE:'     Set Trap Type\n*\n** Process Trap Parameters\n*\n         IF (TM,TRPFLAG2,TRPFNOHD,Z)   Are Trap Headings Requested?\n            BAS R14,HEAD               Yes ->\n         ENDIF\n         IF (TM,TRPFLAG2,TRPFMSGS,O)   Was MSG= Specified?\n            BAS R14,MSGS               Yes ->\n         ENDIF\n         IF (TM,TRPFLAG2,TRPFREGS,O)   Was REGS= Specified?\n            BAS R14,REGS               Yes ->\n         ENDIF\n         IF (TM,TRPFLAG2,TRPFDATA,O)   Was DATA= Specified?\n            BAS R14,DATA               Yes ->\n         ENDIF\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** SUBX - Process a Subroutine Exit Trace Point Request               *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nSUBX     SUBNTRY ,                 -*- Build Trap Name\n         MVC TRCWKCL9,=CL9' '          Space Fill Area\n         MVC TRCWKCL9(8),TRCNAME       Get Trace Point Name\n         LA R1,TRCWKCL9                Get Address of Name\n         DO WHILE=(CLI,0(R1),NE,C' ')  Locate First Space\n            LA R1,1(,R1)               (Same)\n         ENDDO ,\n         BCTR R1,0                     Point at Last Character C'E'\n         MVI  0(R1),C' '               ..And Wipe it Out\n         MVC  TRCNAME,TRCWKCL9         Set Subr name\n*\n** Process Trap Parameters\n*\n         MVC TRCHEADT,=C'S) SUBX:'     Set Trap Type\n         IF (TM,TRPFLAG2,TRPFNOHD,Z)   Are Trap Headings Requested?\n            BAS R14,HEAD               Yes ->\n         ENDIF\n         IF (TM,TRPFLAG2,TRPFMSGS,O)   Was MSG= Specified?\n            BAS R14,MSGS               Yes ->\n         ENDIF\n         IF (TM,TRPFLAG2,TRPFREGS,O)   Was REGS= Specified?\n            BAS R14,REGS               Yes ->\n         ENDIF\n         IF (TM,TRPFLAG2,TRPFDATA,O)   Was DATA= Specified?\n            BAS R14,DATA               Yes ->\n         ENDIF\n*\n** Decrement Indention Level\n*\n         LA  R14,TRCINDNT               Get Current Indention Level\n         LH  R15,TRCINCUR               Get Current Table Entry #\n         SLL R15,1                      (Same)\n         LA  R14,0(R14,R15)             Point at Current Entry\n         IF (CLI,0(R14),EQ,X'00')       If not in Overflow\n            LH  R1,0(R14)               Get Current Indention Level\n            AHI R1,-3                   Decrement Indention\n            STH R1,0(R14)               (Same)\n         ELSE ,\n            XR  R1,R1                   Zero Work Register\n            ICM R1,B'0011',0(R14)       Get Overflow Count\n            AHI R1,-256                 Subtract One Overflow Level\n            STCM R1,B'0011',0(R14)      (Same)\n         ENDIF  ,\n*\n** Return to Caller\n*\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** TRAP - Process a Generic Trace Point Request                       *\n*                                                                     *\n*    This routine is the generic trap processor. It's function is to  *\n*  generate the data for all macro parameters that are common to all  *\n*  traps.  Specifically, MSG=, REGS= and DATA=.                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nTRAP     SUBNTRY ,\n         LH  R1,TRCINLVL               Get Indention Level\n         LA  R1,3(,R1)                 Increment indention for TRAP\n         STH R1,TRCINLVL               Set Indention Level\n*\n         MVC TRCHEADT,=C'T) Trap:'     Set Trap Type\n         IF (TM,TRPFLAG2,TRPFNOHD,Z)   Are Trap Headings Requested?\n            BAS R14,HEAD               Yes ->\n         ENDIF\n*\n         IF (TM,TRPFLAG2,TRPFMSGS,O)   Was MSG= Specified?\n            BAS R14,MSGS               Yes ->\n         ENDIF\n*\n         IF (TM,TRPFLAG2,TRPFREGS,O)   Was REGS= Specified?\n            BAS R14,REGS               Yes ->\n         ENDIF\n*\n         IF (TM,TRPFLAG2,TRPFDATA,O)   Was DATA= Specified?\n            BAS R14,DATA               Yes ->\n         ENDIF\n*\n         LH  R1,TRCINLVL               Get Indention Level\n         LA  R1,3(,R1)                 Decrement Indention After\n         STH R1,TRCINLVL               Set Indention Level\n*\nTRAP999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** HEAD - Process Process Trap Heading with Identifier                *\n*                                                                     *\n*    This routine will produce the trace point heading line as        *\n*  indicated below.  If NOHEAD=YES was specified on the #TRACE        *\n*  macro, this routine will not be called.                            *\n*                                                                     *\n*    T) Trap: TRAPNAME At: LMOD.CSECT+DDDD\n*    P) Entr: PGRMNAME At: LMOD.CSECT+DDDD, Fr: LMOD.CSECT+DDDD\n*    P) Exit: PRGMNAME At: LMOD.CSECT+DDDD, Fr: LMOD.CSECT+DDDD\n*    S) Entr: SUBRNAME At: LMOD.CSECT+DDDD, Fr: LMOD.CSECT+DDDD\n*    S) Exit: SUBRNAME At: LMOD.CSECT+DDDD, Fr: LMOD.CSECT+DDDD\n*\n*---------------------------------------------------------------------*\n*\nO        USING TRPDSECT,R14            Temp Addressability\n*\nHEAD     SUBNTRY ,\n         MVI TRCPLINE,C' '             Space Fill Print Line\n         MVC TRCPLINE+1(L'TRCPLINE-1),TRCPLINE\n*\n** Do Initial Part With At:\n*\n         LH  R1,TRCINLVL               Get Indention Level\n         LA  R1,TRCPLINE(R1)           Get Address of Print Line\n         MVC 1(8,R1),TRCHEADT          Set Trap Type\n         LA  R1,10(,R1)                Bump Pointer to Blank\n         MVC 0(8,R1),TRCNAME           Set Trap Name\n         BAS R14,FBLNK                 Find Next Blank\n         MVC 1(3,R1),=C'At:'           Set Next Literal\n         LA  R1,5(,R1)                 Bump Pointer\n*\n         IF (CLI,C.TRCDLMOD,NE,C' ')   If Found LMOD\n            MVC 0(8,R1),C.TRCDLMOD     Set LMOD Name\n            BAS R14,FBLNK              Find Next Blank\n            MVI 0(R1),C'.'             Set Seperator\n         ELSE\n            SH R1,=Y(1)                Compensate\n         ENDIF\n*\n         ICM   R7,B'1111',TRPTRPAD     Get Address of Open Segment\n         MVC   1(8,R1),TRPCSECT-TRPDSECT(R7)\n         LA    R1,1(,R1)               Point at First Character\n         BAS   R14,FBLNK               Find Next Blank\n         MVI   0(R1),C'+'              Set Seperator\n*\n         IF (TM,TRPFLAG1,TRPFPGME,O)    If Program Entry?\n            MVC 1(4,R1),=C'0000'           Move to Print Line\n         ELSE ,\n            UNPK TRCWORKD+0(5),TRPOFFST(3) Get Offset in Hex\n            TR TRCWORKD+0(5),HEXTABL-240   (Same)\n            MVC 1(4,R1),TRCWORKD           Move to Print Line\n         ENDIF ,\n*\n         IF (TM,TRPFLAG1,TRPFTRAP,O)   If Generic Trap Trace point?\n            GOSUB PRNT                 Print the Line\n            B HEAD999                  -> Done\n         ENDIF ,\n*\n** Process PGME Entries\n*\n         XC  DSAPADDR,DSAPADDR         Zero Output Fields\n         XC  DSAPOFST,DSAPOFST         (Same)\n         MVC DSAPCNAM,=CL8' '          (Same)\n*\n         IF (TM,TRPFLAG1,TRPFPGME,O)   If PGM Entry?\n            BAS R14,FBLNK              Find Next Blank\n            MVC 0(5,R1),=C', Fr:'      Set Next Literal\n            LA R1,6(,R1)               Bump Pointer\n            MVC DSAPLNAM,C.TRCDRTLM    Set Lmod\n            MVC DSAPCNAM,C.TRCDRTCS    Set Csect\n            MVC DSAPOFST,C.TRCDROFS    Set Offset\n         ENDIF ,\n*\n** Process PGMX Entries\n*\n         IF (TM,TRPFLAG1,TRPFPGMX,O)   If PGM Entry?\n            BAS R14,FBLNK              Find Next Blank\n            MVC 0(5,R1),=C', To:'      Set Next Literal\n            LA R1,6(,R1)               Bump Pointer\n            MVC DSAPLNAM,C.TRCDRTLM    Set Lmod\n            MVC DSAPCNAM,C.TRCDRTCS    Set Csect\n            MVC DSAPOFST,C.TRCDROFS    Set Offset\n         ENDIF ,\n*\n** Process SUBE Entries\n*\n         IF (TM,TRPFLAG1,TRPFSUBE,O)   If SUB Entry?\n            BAS R14,FBLNK              Find Next Blank\n            MVC 0(5,R1),=C', Fr:'      Set Next Literal\n            LA R1,6(,R1)               Bump Pointer\n*\n            MVC DSAPLNAM,C.TRCDLMOD    Set Current Lmod\n            MVC DSAPCNAM,C.TRCDCSCT    Set Current Csect\n            L  R14,LSENGR14+4          Get Return Point\n            LA R14,0(,R14)\n            S  R14,C.TRCDCSEP          Minus Entry Point\n            ST R14,DSAPOFST            Set Offset\n         ENDIF ,\n*\n** Process SUBX Entries\n*\n         IF (TM,TRPFLAG1,TRPFSUBX,O)   If SUB Entry?\n            BAS R14,FBLNK              Find Next Blank\n            MVC 0(5,R1),=C', To:'      Set Next Literal\n            LA R1,6(,R1)               Bump Pointer\n*\n            MVC DSAPLNAM,C.TRCDLMOD    Set Current Lmod\n            MVC DSAPCNAM,C.TRCDCSCT    Set Current Csect\n            L  R14,LSENGR14+4          Get Return Point\n            LA R14,0(,R14)\n            S  R14,C.TRCDCSEP          Minus Entry Point\n            ST R14,DSAPOFST            Set Offset\n         ENDIF ,\n*\n** Finish Up Line\n*\n         IF (CLI,DSAPLNAM,NE,C' ')      If Found Callers LMOD\n            MVC 0(8,R1),DSAPLNAM        Set LMOD Name\n            BAS R14,FBLNK               Find Next Blank\n            IF (CLC,=C'Zos',NE,DSAPLNAM)   If Not Initiator?\n               MVI 0(R1),C'.'              ..Set Seperator\n            ENDIF\n         ELSE\n            SH R1,=Y(1)                Compensate\n            MVI 0(R1),C' '             (Same)\n         ENDIF\n*\n         IF  (CLC,=C'Zos',NE,DSAPLNAM) If Not From Zos?\n            IF (CLI,DSAPCNAM,NE,C' ')  If we Have Csect Name?\n              MVC 1(8,R1),DSAPCNAM        Add CSECT Name\n              LA R1,1(,R1)             Point at First Character\n              BAS R14,FBLNK            Find Next Blank\n              MVI 0(R1),C'+'           Set Seperator\n            ENDIF ,\n*\n            UNPK TRCWORKD+0(5),DSAPOFST+2(3)   Get Offset in Hex\n            TR TRCWORKD+0(5),HEXTABL-240       (Same)\n            MVC 1(4,R1),TRCWORKD               Move to Print Line\n         ENDIF ,\n*\n         GOSUB PRNT                    Print the Line\n*\n** Return to Caller\n*\nHEAD999  DS    0H\n         SUBEXIT ,                     Return to Caller\n         DROP  O                       Drop Temp Bases\n*\n** FBLNK - Find the Next Blank\n*\nFBLNK    DS    0H                  -*- Tiny Little Subroutine\n         CLI   0(R1),C' '              Found a Blank\n         BER   R14                     -> Goback\n         LA    R1,1(,R1)               Bump by a Character\n         B     FBLNK                   -> And Try Again\n*\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** SPSW - Show PSW Status at Program Entry                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nSPSW     SUBNTRY ,\n         MVI TRCPLINE,C' '             Space Fill Print Line\n         MVC TRCPLINE+1(L'TRCPLINE-1),TRCPLINE\n*\n         LH  R2,TRCINLVL               Get Indention Level\n         LA  R2,TRCPLINE+10(R2)        Get Address of Print Line\n*\n*                                  -*- Set State Value\n         MVC 0(6,R2),=C'State('        Set State Header\n         LA  R2,6(,R2)                 (Same)\n         IF  (TM,DSAEPSW1+1,X'01',O)   If Problem State?\n             MVC 0(9,R2),=C'Problem),' ...Indicate Problem State\n             LA  R2,10(,R2)            ...Bump Pointer\n         ELSE ,                        Else\n             MVC 0(12,R2),=C'Supervisor),' ...Indicate Supervisor State\n             LA  R2,13(,R2)                ...Bump Pointer\n         ENDIF ,\n*\n         XR  R14,R14               -*- Set Key Value\n         IC  R14,DSAEPSW1+1            Get PSW Key\n         SRL R14,4                     (Same)\n         IF  (C,R14,LT,=F'10')         If Single Digit Key?\n           O   R14,=A(X'000000F0')     (Same)\n           MVC 0(4,R2),=C'Key('        Set Key Header\n           LA  R2,4(,R2)               (Same)\n           STC R14,0(,R2)              Set Key\n           MVC 1(2,R2),=C'),'          (Same)\n           LA  R2,4(,R2)               (Same)\n         ELSE  ,\n           S   R14,=F'10'              Get Double Digit Key\n           O   R14,=A(X'000000F0')     (Same)\n           MVC 0(5,R2),=C'Key(1'       Set Key Header\n           LA  R2,5(,R2)               (Same)\n           STC R14,0(,R2)              Set Key\n           MVC 1(2,R2),=C'),'          (Same)\n           LA  R2,5(,R2)               (Same)\n         ENDIF ,\n*\n         MVC 0(5,R2),=C'Mode('      -*- Set Mode Header\n         LA  R2,5(,R2)                  (Same)\n         IF (TM,DSAEPSW1+2,X'80',Z)     If Primary or Access?\n            IF (TM,DSAEPSW1+2,X'40',Z)     If Primary Mode?\n               MVC 0(9,R2),=C'Primary),'   ...Indicate Primary Mode\n               LA  R2,10(,R2)              ...Bump Pointer\n            ELSE ,                         Else\n               MVC 0(8,R2),=C'Access),'    ...Indicate Access Mode\n               LA  R2,9(,R2)               ...Bump Pointer\n            ENDIF ,\n         ELSE ,                         If Home or Secondary?\n            IF (TM,DSAEPSW1+2,X'40',Z)     If Secondary Mode?\n               MVC 0(9,R2),=C'Secondary),' ...Indicate Primary Mode\n               LA  R2,10(,R2)              ...Bump Pointer\n            ELSE ,                         Else\n               MVC 0(6,R2),=C'Home),'      ...Indicate Home Mode\n               LA  R2,7(,R2)               ...Bump Pointer\n            ENDIF ,\n         ENDIF ,\n*\n         MVC 0(6,R2),=C'Amode('     -*- Set Amode Header\n         LA  R2,6(,R2)                  (Same)\n         IF  (TM,DSAEPSW1+3,X'01',O)    If Amode(64)?\n             MVC 0(3,R2),=C'64)'        ...Indicate Amode(64)\n         ELSE ,                         Else\n            IF (TM,DSAEPSW1+4,X'80',O)  If Amode(31)?\n                MVC 0(3,R2),=C'31)'     ...Indicate Amode(31)\n            ELSE ,\n                MVC 0(3,R2),=C'24)'     ...Indicate Amode(24)\n            ENDIF ,\n         ENDIF ,\n*\n         GOSUB PRNT                     Print Line\n*\nSPSW999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** FCDE - Locate CDE and Extent List for Address                      *\n*                                                                     *\n*    This routine is given an storage address and attempts to find    *\n*  the load module that is loaded at that address.  It runs the CDE   *\n*  chain to the extent list and and checks the address against the    *\n*  storage extent.                                                    *\n*                                                                     *\n*  On Input:  R1      -> Address to Locate                            *\n*  On Output: TRCLMOD -> CDNAME of LMOD or Blanks                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         USING TCB,R14                 Get TCB Addressability\n         USING CDENTRY,R15             Get CDE Addressability\n         USING XTLST,R2                Get XTLST Addressability\n*\nFCDE     SUBNTRY ,\n         MVC TRCLMOD,=CL8' '           Space Fill Receiving Field\n*\n         L  R14,PSATOLD                Load Our TCB Address\n         L  R14,TCBJSTCB               CDE's Are Anchored Off JSTCB\n         IF (ICM,R15,15,TCBJPQ,NZ)     Get First CDE on Chain\n            DO INF                     Do Forever...\n               L  R2,CDXLMJP           Get Extent Pointer\n               XR R14,R14              Zero Work Register\n               ICM R14,7,XTLMSBLN      Get Length of Extent\n               AL  R14,XTLMSBAD        Plus Address for End Pointer\n*\n               IF (C,R1,GE,XTLMSBAD)   If Greater Than Beginning\n                  IF (CR,R1,LT,R14)    And Less Than End\n                     MVC TRCLMOD,CDNAME   Save CDNAME\n                     DOEXIT ,             -> Done\n                  ENDIF\n               ENDIF\n*\n               L  R15,CDCHAIN          Get next CDE Entry\n               IF (LTR,R15,R15,Z)      End of Chain?\n                  DOEXIT ,             Yes -> Done\n               ENDIF\n            ENDDO\n         ENDIF\n*\nFCDE999  DS    0H\n         SUBEXIT ,\n         DROP  R14,R15,R2              Drop Temp Bases\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** REGS - Print Registers Requested by This Trap                      *\n*                                                                     *\n*    This routine print the values of the callers registers at the    *\n*  point the trap was taken.  Any combination of registers may be     *\n*  specified on the #TRACE macro and will be printed as shown below.  *\n*                                                                     *\n*    R08 - 008F0760  R09 - 008FF6F8  R10 - 00000000  R11 - 00008470   *\n*    R12 - 80007470  R13 - 00008000  R14 - 800075DA  R15 - 000076F0   *\n*                                                                     *\n*    R00 - FD000008  R01 - 800075E6  R14 - 800075F2  R15 - 000076F0   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nREGS     SUBNTRY ,\n         XGR R0,R0                     Zero Work Registers\n         XGR R1,R1                     (Same)\n         ZAP TRCREG#,=P'0'             1st Register to Print\n         ICM R1,B'1100',TRPPREGS       Get Registers to Print\n         LH  R2,TRCINLVL               Get Indention Level\n         LA  R2,TRCPLINE+4(R2)         Output - Print Line Position\n         LA  R14,LSENARGS              Input  - Access  Register Values\n         LA  R15,LSENGRGS              Input  - General Register Values\n*\n         DO FROM=(R3,8)                Loop Max Eight Lines\n            MVI TRCPLINE,C' '          Space Fill Print Line\n            MVC TRCPLINE+1(L'TRCPLINE-1),TRCPLINE\n*\n            DO FROM=(R4,2)            -*- Loop Max Two Regs\n               DO INF                 -*- Inner Loop\n                  SLDL R0,1               Get Register to Print\n                  IF (LTR,R0,R0,NZ)       Print This Register?\n                     XR R0,R0                   Zero For Next Time\n                     UNPK TRCWORKD(3),TRCREG#   Get Register Number\n                     OC   TRCWORKD(3),=C'000'   (Same)\n                     MVI  0(R2),C'R'            Register Indicater\n                     MVC  1(2,R2),TRCWORKD+1    Register Number\n                     MVI  4(R2),C'-'            Seperater\n*\n                     UNPK TRCWKCL9,0(5,R14)       Get Access Reg\n                     TR   TRCWKCL9(8),HEXTABL-240 (Same)\n                     MVC  6(8,R2),TRCWKCL9        Register Value\n                     MVI  14(R2),C'/'             Set Seperator\n*\n                     UNPK TRCWKCL9,0(5,R15)       Get High Word\n                     TR   TRCWKCL9(8),HEXTABL-240 (Same)\n                     MVC  15(8,R2),TRCWKCL9       Register Value\n                     MVI  23(R2),C'_'             Set Seperator\n*\n                     UNPK TRCWKCL9,4(5,R15)       Get Low Word\n                     TR   TRCWKCL9(8),HEXTABL-240 (Same)\n                     MVC  24(8,R2),TRCWKCL9       Register Value\n*\n                     LA R2,35(,R2)     Bump Line Position\n                     AP TRCREG#,=P'1'  Bump Register Number\n                     LA R14,4(,R14)    Point at Next Access  Register\n                     LA R15,8(,R15)    Point at Next General Register\n                     DOEXIT ,\n                  ELSE\n                     AP TRCREG#,=P'1'  Bump Register Number\n                     LA R14,4(,R14)    Point at Next Access  Register\n                     LA R15,8(,R15)    Point at Next General Register\n                  ENDIF\n               ENDDO\n               IF (LTR,R1,R1,Z)        If At End?\n                  DOEXIT ,             -> Exit\n               ENDIF\n            ENDDO\n*\n            STM R14,R1,TRCSAVE4        Save Registers Over PUT\n            GOSUB PRNT                 Print the Line\n            LM  R14,R1,TRCSAVE4        Load Registers After PUT\n            LH  R2,TRCINLVL            Get Indention Level\n            LA  R2,TRCPLINE+4(R2)      Reset Print Line Position\n            IF (LTR,R1,R1,Z)           If At End?\n               DOEXIT ,                -> Exit\n            ENDIF\n         ENDDO\n*\n         MVI TRCPLINE,C' '             Space Fill Print Line\n         MVC TRCPLINE+1(L'TRCPLINE-1),TRCPLINE\n         GOSUB PRNT                    Print the Line\n*\nREGS999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** MSGS - Print The Message Requested by This Trap                    *\n*                                                                     *\n*    This routine will format the MSG= data, which consists as a      *\n*  sublist intermixed with both text data and variable data.  The     *\n*  variable data will be converted to printable form based upon the   *\n*  T' type for that variable.  Some examples are:                     *\n*                                                                     *\n*     MSG='This is a message'                                         *\n*     MSG=('The ',COLOR,' HARE ' is ',HEIGHT,' ft. tall.'             *\n*     MSG=('Show savearea at: ',DSASAVEA)                             *\n*                                                                     *\n*  COLOR  DC C'BLUE'                                                  *\n*  HEIGHT DC H'5'                                                     *\n*                                                                     *\n*    The primary input for this routine is the TRPDSECT area.         *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nMSGS     SUBNTRY ,\n         MVI TRCPLINE,C' '             Space Fill Print Line\n         MVC TRCPLINE+1(L'TRCPLINE-1),TRCPLINE\n*\n         LA  R2,TRCMSGWK               Init Current Output Position\n         MVI TRCMSGWK,C' '             Space Fill Area\n         MVC 1(L'TRCMSGWK-1,R2),0(R2)  (Same)\n         LA  R3,TRPMSG                 Point at Pre-formated Message\n         XR  R4,R4                     Zero Work Register\n         ICM R4,B'0011',TRPMLNTH       Get Length of Message\n         LA  R3,2(,R3)                 Point Past Length at Message\n         AHI R4,-2\n*\n** Loop Through Message and Build Text\n*\n         DO FROM=(R4)                  Loop For Count in Message\n            IF (CLI,0(R3),EQ,TRPEVVAR) Do We Have A Variable?\n               IF (CH,R4,LE,=H'0')     If VAR is Last Thing?\n                  DOEXIT ,\n               ENDIF ,\n               BAS R14,FVAR            Format Variable for Printing\n            ELSE ,                 -*- Move Message Text\n               IF (CLI,0(R3),EQ,TRPEVFIL) Is This a Filler Byte?\n                  LA R2,1(,R2)            ..Ignore This Byte\n                  LA R3,1(,R3)            ..(Same)\n               ELSE ,                     Else\n                  MVC 0(1,R2),0(R3)       ..Move a Byte\n                  LA R2,1(,R2)            ..Bump Output Pointer\n                  LA R3,1(,R3)            ..Bump Input Pointer\n               ENDIF ,\n            ENDIF ,\n            LA R14,TRCMSGWK+L'TRCMSGWK-1 Get End of Buffer\n            IF (CR,R14,NH,R2),OR,      Have We Move to End?            *\n               (LTR,R4,R4,Z)           (Same)\n               DOEXIT ,                Yes -> Quit\n            ENDIF ,\n         ENDDO ,                       -> Loop (BCT)\n*\n** Print Formated Message\n*\n         IF (TM,TRPFLAG2,TRPFSQEZ,NZ)     Sqeeze Buffer?\n            LARL R3,RDHTRACE              We Need Temp Addressabliity\n            USING RDHTRACE,R3             (Same)\n            SQUEEZE BEG=TRCMSGWK,         Remove Double Blanks         *\n               END=TRCMSGWK+L'TRCMSGWK-1,MF=E\n            DROP R3                       Drop Temp Addressability\n         ENDIF ,\n         LH  R15,TRCINLVL              Get Index Level\n         LA  R15,TRCPLINE(R15)         Index to Area\n         MVC 4(124,R15),TRCMSGWK       Indent Message Text\n         GOSUB PRNT                    Print the Line\n*\nMSGS999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** FVAR - Format a MSG= Variable for Printing                         *\n*                                                                     *\n*    This routine takes in the address of the current variable        *\n*  defination from the input MSG= data and formats that data          *\n*  according to the data type.  This formated data is passed back     *\n*  to the caller in the current position within TRCMSGWK, with the    *\n*  current positions of from and to data bumped appropriately and     *\n*  the current length drecemented.                                    *\n*                                                                     *\n*    Inputs:                                                          *\n*            R2 = Output Pointer, Current Position in TRCMSGWK        *\n*            R3 = Input  Pointer, Current Position in TRPMSG          *\n*                 This will also be the pointer to the TRPEVAR entry  *\n*                 to process.                                         *\n*            R4 = Residual length of total MSG= data.                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         USING TRPEVAR,R3              Establish Temp Addressability\n*\nFVAR     SUBNTRY ,\n         XGR  R14,R14                  Zero Work Register\n         XGR  R15,R15                  (Same)\n         ICM  R14,B'0011',TRPESCON     Get SCON Address of Data\n         SRDL R14,12                   Seperate B and DDD\n*\n         SRL R15,16                    Get DH+DL Displacement Fr SL3\n         ICM R15,B'0100',TRPESCDH      (Same)\n         SRL R15,4                     (Same)\n*\n         SLL  R14,2                    Base Register Times*4\n         L    R1,LSENARGS(R14)         Load Access Aegister\n         ST   R1,DSAWORKF              Save in Work Area\n         LAM  R14,R14,DSAWORKF         Load Access Aegister\n         SLL  R14,1                    Base Register Times*8\n         LG   R14,LSENGRGS(R14)        Get Base Address\n*\n** Set ARMODE and AMODE for Proper Access to Data\n*\n         IF (TM,LSENPSW1+2,X'40',O)    If We Were in ARMODE?\n            SAC 512                    ..Sac In - To Get Data\n         ENDIF\n*                                      In The Beginning We're 31-Bit\n         IF (TM,TRGFLAG1,TRG1AM64,O)     If AMODE=64?\n            SAM64 ,                         Put us in 64-Bit Mode\n         ELSE ,\n            IF (TM,TRGFLAG1,TRG1AM24,O)  If AMODE=24?\n               N R14,=A(X'00FFFFFF')        And Strip High Byte\n            ENDIF ,\n         ENDIF ,\n*\n** Process Variable By Data Type\n*\n         ALGR R14,R15                  Add Base and Displacement\n         XGR  R15,R15                  Zero Work Register\n         IC   R15,TRPEDLEN             Get Length of Data\n*\n         MVC  DSARETRY,=A(FVARRTY)     Set Retry Routine\n         IF (CLI,TRPETYP,EQ,C'C')  -*- For Character Data\n            BCTR R15,0                 Decrement for Assembler\n            EX  R15,CONMVC1            Move data to Print Line\n            LA  R2,1(R15,R2)           Point Past Data\n            LA  R3,TRPESLEN(,R3)       Point Past Var Entry\n            SH  R4,=Y(TRPESLEN-1)      Decrement Count\n         ENDIF ,\n*\n         IF (CLI,TRPETYP,EQ,C'Z')  -*- For Zoned Decimal\n            BCTR R15,0                 Decrement for Assembler\n            EX R15,CONMVC1             Move Data to Print Line\n            LA R2,0(R15,R2)            Point Past Data\n            OI 0(R2),X'F0'             Set Sign in Last Byte\n            LA R2,1(,R2)               Point to next Blank\n            LA R3,TRPESLEN(,R3)        Point Past Var Entry\n            SH R4,=Y(TRPESLEN-1)       Decrement Count\n         ENDIF ,\n*\n         IF (CLI,TRPETYP,EQ,C'F')  -*- For Fullword Data\n            ICM R15,B'1111',0(R14)     Get Data to Print\n            CVD R15,TRCWORKD           Get Data in Decimal\n            MVC TRCWORKC,TRCECON       Set ED Constant\n            ED  TRCWORKC,TRCWORKD      Get Character Numbers\n            MVC 0(L'TRCECON,R2),TRCWORKC\n            LA  R2,L'TRCECON(,R2)      Bump Output Pointer\n            LA  R3,TRPESLEN(,R3)       Point Past Var Entry\n            SH  R4,=Y(TRPESLEN-1)      Decrement Count\n         ENDIF ,\n*\n         IF (CLI,TRPETYP,EQ,C'H')  -*- For Fullword Data\n               XR  R15,R15             Zero Work Register\n               ICM R15,B'0011',0(R14)  Get Data to Print\n               CVD R15,TRCWORKD        Get Data in Decimal\n               MVC TRCWORKC,TRCECON    Set ED Constant\n               ED  TRCWORKC,TRCWORKD   Get Character Numbers\n               MVC 0(L'TRCECON,R2),TRCWORKC\n               LA  R2,L'TRCECON(,R2)   Bump Output Pointer\n               LA  R3,TRPESLEN(,R3)    Point Past Var Entry\n               SH  R4,=Y(TRPESLEN-1)   Decrement Count\n         ENDIF ,\n*\n         IF (CLI,TRPETYP,EQ,C'P')  -*- For Packed Decimal\n            BCTR R15,0                 Decrement for Assembler\n            O  R15,=A(X'70')           Set Length of To Field\n            EX R15,FVARZAP             Zap Data into TRCWORKD\n            MVC TRCWORKC,TRCECON       Set ED Constant\n            ED  TRCWORKC,TRCWORKD      Get Character Numbers\n            MVC 0(L'TRCECON,R2),TRCWORKC\n            LA  R2,L'TRCECON(,R2)      Bump Output Pointer\n            LA  R3,TRPESLEN(,R3)       Point Past Var Entry\n            SH  R4,=Y(TRPESLEN-1)      Decrement Count\n         ENDIF ,\n*\n         IF (CLI,TRPETYP,EQ,C'X')  -*- For Hexidecimal\n            N   R15,=A(X'0F')          Allow Max 16-Bytes\n            LR  R5,R15                 Get Output Length +1\n            SLL R5,1                   (Same)\n            LA  R5,1(,R5)              (Same)\n            MVC TRCWORKX,=32C' '       Space Fill Result\n            LA R1,TRCWORKX             Get Output Location\n            XC TRCWORKD,TRCWORKD       Zero Fill Work Area\n            DO FROM=(R15)              Loop All Digits to Translate\n               UNPK TRCWORKD(3),0(2,R14)    Unpack a Byte\n               TR  TRCWORKD(2),HEXTABL-240  In Char Format\n               MVC 0(2,R1),TRCWORKD         Put Output\n               LA  R14,1(,R14)              Bump Input Ptr\n               LA  R1,2(,R1)                Bump Output Ptr\n            ENDDO ,\n            MVC 0(L'TRCWORKX,R2),TRCWORKX\n            LA R2,0(R5,R2)             Bump Output Pointer\n            LA R3,TRPESLEN(,R3)        Point Past Var Entry\n            SH R4,=Y(TRPESLEN-1)       Decrement Count\n         ENDIF ,\n*\nFVARRTY  DS    0H\n         SAM31 ,                       We Run in 31-Bit Amode\n         IF (TM,LSENPSW1+2,X'40',O)    If We Were in ARMODE?\n            SAC 000                    ..Sac Out - Back to Primary\n         ENDIF\n         LAM   R14,R14,=A(0)           Reset to Primary\n         XC DSARETRY,DSARETRY          Set for no Retry\n*\nFVAR999  DS    0H\n         SUBEXIT ,\n*\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** DATA - Print The Data Areas Requested by This Trap                 *\n*                                                                     *\n*    This routine will print the data areas specified on the DATA=    *\n*  parameter.  There may be multiple areas and each may have a title  *\n*  to be printed priot to the title.  The data is formated in 16-byte *\n*  hex dump format, so that it may easily be viewed on an 80-byte     *\n*  wide screen.                                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         USING TRPDDATA,R4             Set Temp Addressability\n*\nDATA     SUBNTRY ,\n         LA  R4,TRPMSG                 Point at Pre-formated Message\n         XR  R3,R3                     Zero Work Register\n         IF  (TM,TRPFLAG2,TRPFMSGS,O)  If MSG= Was Specified...\n            ICM R3,B'0011',TRPMLNTH    Get Length of Message\n         ENDIF ,\n         LA  R4,0(R4,R3)               Point at Data Segment\n*\n         XR R5,R5                      Zero Work Register\n         LH R5,TRPDCNT                 Count of DATA= Entries\n         DO FROM=(R5)                  Loop For Each Entry\n            MVC TRCPLINE,=CL256' '     Print Vertical Seperator\n            GOSUB PRNT                 Print the Line\n*\n            MVC TRCPLINE,CONHEAD1      Set Heading Constant\n            XGR R1,R1                  Zero Work Register\n            IC  R1,TRPDTLEN            Get Length of Title\n            IF  (LTR,R1,R1,NZ)         If We have a Heading?\n               BCTR R1,0                  Decrement for Assembler\n               EX R1,CONMVC2              Move in Heading\n            ENDIF ,\n            MVC TRCMSGWK,=CL256' '     Space Fill Area\n            LH  R15,TRCINLVL           Get Index Level\n            LA  R15,TRCMSGWK(R15)      Index to Area\n            MVC 0(128,R15),TRCPLINE    Indent Message Text\n            MVC TRCPLINE,TRCMSGWK      (Same)\n            GOSUB PRNT                 Print the Line\n*\n            MVC TRCPLINE,CONHEAD2      Set heading Constant\n            MVC TRCMSGWK,=CL256' '     Space Fill Area\n            LH  R15,TRCINLVL           Get Index Level\n            LA  R15,TRCMSGWK(R15)      Index to Area\n            MVC 0(128,R15),TRCPLINE    Indent Message Text\n            MVC TRCPLINE,TRCMSGWK      (Same)\n            GOSUB PRNT                 Print the Line\n*\n            XGR R2,R2                  Zero Work Register\n            XGR R3,R3                  (Same)\n            ICM R2,B'0011',TRPDADRL    Get SCON Address of Data\n            SRDL R2,12                 Get Displacement in R3\n            SLL R2,2                   Base Register Times*4 in R2\n            SRL R3,16                  Get DH+DL Displacement Fr SL3\n            ICM R3,B'0100',TRPDADRH    (Same)\n            SRL R3,4                   (Same)\n            L   R1,LSENARGS(R2)        Load Access Register\n            ST  R1,DSAWORKF            (Same)\n            LAM AR2,AR2,DSAWORKF       (Same)\n            SLL R2,1                   Base Register Times*8\n            LG  R2,LSENGRGS(R2)        Get Base Address\n            IF (TM,TRGFLAG1,TRG1AM31,O) If Caller in 31-Bit?\n               LA R2,0(,R2)                Strip High Bit\n            ENDIF ,\n*                                   -*- Get Address of Data to Print\n            AGR R2,R3                   Get Base Plus Dispamcement\n            IF (TM,TRPDFLAG,TRPDFRDR,NZ)   If Redirection in Effect?\n               IF (TM,TRPDFLAG,TRPDF64R,O) If 64-Bit Redirection?\n                  LG R2,0(,R2)                Load Redirected Address\n               ENDIF ,\n               IF (TM,TRPDFLAG,TRPDF31R,O) If 31-Bit Redirection?\n                  LGR R1,R2                   Move to Work Register\n                  XGR R2,R2                   Xero high Word\n                  L   R2,0(,R1)               Load Redirected Address\n                  LA  R2,0(,R2)               Zero High Bit\n               ENDIF ,\n               IF (TM,TRPDFLAG,TRPDF24R,O) If 24-Bit Redirection?\n                  LGR R1,R2                   Move to Work Register\n                  XGR R2,R2                   Xero high Word\n                  ICM R2,B'0111',1(R1)        Load Redirected Address\n               ENDIF ,\n            ENDIF ,\n*                                   -*- Get Length of Data to Print\n            XGR R3,R3                   Zero Work Register\n            ICM R3,B'0011',TRPDATLN     Get Length of Data\n            IF (TM,TRPDFLAG,TRPDFREG,O) If Length in Register?\n               SLL R3,3                    Reg # Time*8\n               LG  R3,LSENGRGS(R3)         Load Actual Length From GPR\n            ENDIF ,\n*\n            BAS R14,PDAT               Print Data\n*\n            XGR R14,R14                Zero Work Register\n            IC  R14,TRPDTLEN           Length of Title\n            LA  R4,TRPDSLEN(R14,R4)    Point at Next Entry - If Any\n         ENDDO ,\n*\n         MVC TRCPLINE,=CL128' '        Print Vertical Seperator\n         GOSUB PRNT                    Print the Line\n*\nDATA999  DS    0H\n         LAM   R2,R2,=A(0)             Reset to Primary\n         SUBEXIT ,\n         DROP  R3                      Drop Tempm Addressability\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** PDAT - Print Data for DATA= Parameter                              *\n*                                                                     *\n*    This routine prints the storage area requested on the DATA=      *\n*  parameter in a hex dump format with 16-bytes per line.  The        *\n*  format is the following:                                           *\n*                                                                     *\n*     Address  Offs Data in Hex                          Data in Char *\n*     =============================================================== *\n*  D) 00010340 0010 00000000 11111111 00000000 11111111  *abcd..wxyz* *\n*  D) 00010350 0020 00000000 11111111 00000000 11111111  *abcd..wxyz* *\n*  D) 00010360 0020 00000000 11111111 00000000 11111111  *abcd..wxyz* *\n*                                                                     *\n*  Inputs:  R2 - Address of Data to Print                             *\n*           R3 - Length  of Data to Print                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nPDAT     SUBNTRY ,\n         XR R6,R6                          Zero Work Register\n         LR R1,R2                          Get Address of End of Area\n         AR R1,R3                          (Same)\n         ST R1,TRCENDAT                    (Same)\n         XC TRCEACMP,TRCEACMP              Indicate No Abends\n         XC TRCEACNT,TRCEACNT              (Same)\n*\n         DO INF\n            MVI TRCPLINE,C' '              Space Fill Print Line\n            MVC TRCPLINE+1(L'TRCPLINE-1),TRCPLINE\n*\n*                                      -*- Export Address\n            STG  R2,TRCWORKD               Get Address of Area\n            UNPK TRCWKCL9,TRCWORKD(5)      In Hexadecimal\n            TR   TRCWKCL9(8),HEXTABL-240   (Same)\n            MVC  TRCPLINE+4(8),TRCWKCL9    Move to Print Line\n            MVI  TRCPLINE+12,C'_'          Set Seperator\n*\n            UNPK TRCWKCL9,TRCWORKD+4(5)    In Hexadecimal\n            TR   TRCWKCL9(8),HEXTABL-240   (Same)\n            MVC  TRCPLINE+13(8),TRCWKCL9   Move to Print Line\n*\n*                                      -*- Export Offset\n            ST   R6,TRCWORKF               Get Address of Area\n            UNPK TRCWKCL9,TRCWORKF(5)      In Hexadecimal\n            TR   TRCWKCL9(8),HEXTABL-240   (Same)\n            MVC  TRCPLINE+22(4),TRCWKCL9+4 Move to Print Line\n*\n** Get a Line of Data to Print\n*\n            XC TRCWKC16,TRCWKC16       Get Data to Print\n            LA R14,TRCWKC16            Output Pointer\n            LA R15,TRCPLINE+28         Output Pointer\n*\n            DO FROM=(R7,4)             Loop 4 Times Max\n               XC  TRCWORKF,TRCWORKF       Begin With Zeros\n*\n               MVC DSARETRY,=A(PDATR) *tempSet Retry Routine\n               IF (TM,LSENPSW1+2,X'40',O)  If We Were in ARMODE?\n                  SAC 512                  ..Sac In - To Get Data\n               ENDIF\n               IF (TM,TRGFLAG1,TRG1AM64,O) If AMODE=64?\n                  SAM64 ,                     Put us in 64-Bit Mode\n               ELSE ,\n                  IF (TM,TRGFLAG1,TRG1AM24,O) If AMODE=24?\n                     N R14,=A(X'00FFFFFF')    And Strip High Byte\n                  ENDIF ,\n               ENDIF ,\n*\n               IF (TM,TRPDFLAG,TRPDFRAD,O) If A Real Storage Address?\n                  LURA R1,R2               ..Move From Real Address\n                  ST   R1,0(R14)           ..(Same)\n               ELSE ,                      Else\n                  MVC 0(1,R14),0(R2)       ..Move From Virtual Address\n                  MVC 1(1,R14),1(R2)       ..(Same)\n                  MVC 2(1,R14),2(R2)       ..(Same)\n                  MVC 3(1,R14),3(R2)       ..(Same)\n               ENDIF ,\n*\n               XC DSARETRY,DSARETRY        Set for no Retry\n               SAM31 ,                     We Run in 31-Bit Amode\n               IF (TM,LSENPSW1+2,X'40',O)  If We Were in ARMODE?\n                  SAC 000                  ..Sac Out - Back to Primary\n               ENDIF\n*\n               MVC TRCWORKF,0(R14)         (Same)\n               UNPK TRCWKCL9,TRCWORKF(5)   In Hexadecimal\n               TR  TRCWKCL9(8),HEXTABL-240 (Same)\n               MVC 0(8,R15),TRCWKCL9       Move to Print Line\n\n               IF (CLC,TRCEACMP,NE,=3X'0') If We've Abended\n                  DOEXIT ,                 -> We're Done\n               ENDIF\n*\n               LA  R2,4(,R2)           Bump Input Pointer\n               IF (C,R2,GE,TRCENDAT)   If Past End\n                  DOEXIT ,             -> Done\n               ENDIF ,\n               LA  R14,4(,R14)         Bump Output Pointer\n               LA  R15,9(,R15)         Bump Output Pointer\n            ENDDO ,\n*\n            MVI TRCPLINE+65,C'*'       Set Seperator\n            TR  TRCWKC16,TRTABL        Make Data Printable\n            MVC TRCPLINE+66(16),TRCWKC16   Move Data to PLINE\n            MVI TRCPLINE+82,C'*'       Set Seperator\n            MVC TRCMSGWK,=CL256' '     Space Fill Area\n            LH  R15,TRCINLVL           Get Index Level\n            LA  R15,TRCMSGWK(R15)      Index to Area\n            MVC 0(128,R15),TRCPLINE    Indent Message Text\n            MVC TRCPLINE,TRCMSGWK      (Same)\n            GOSUB PRNT                 Print the Line\n*\n            IF (CLC,TRCEACMP,NE,=3X'0')  If We've Abended\n               GOSUB PRNT                Print the Line\n               DOEXIT ,                  -> We're Done\n            ENDIF\n            AH R6,=Y(16)               Bump Offset\n            SH R3,=Y(16)               Decr Length\n            IF (CH,R3,LE,=H'0')        If At End of Data?\n               DOEXIT ,                Yes -> Done\n            ENDIF ,\n         ENDDO ,\n         B  PDAT999                    -> Done\n*\n** Here on Bad Data\n*\nPDATR    DS 0H                         Retry Address\n         XC DSARETRY,DSARETRY          ..Set for no Retry\n         SAM31 ,                       ..We Run in 31-Bit Amode\n         SAC 000                       ..Back to Primary\n*\n         LA  R15,TRCPLINE+28           Output Pointer\n         MVC 0(36,R15),=CL36'(Bad Address Encountered)'\n         LH  R15,TRCINLVL              Get Index Level\n         LA  R15,TRCMSGWK(R15)         Index to Area\n         MVC 0(128,R15),TRCPLINE       Indent Message Text\n         MVC TRCPLINE,TRCMSGWK         (Same)\n         GOSUB PRNT                    Print the Line\n*\n** Return to Caller\n*\nPDAT999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** PRNT - Write a Line of Output                                      *\n*                                                                     *\n*    This routine is called to write a line of output.  That output   *\n*  line may be written to the sysout dataset for the task, or to the  *\n*  print buffer if BUFFER=YES was specified on the OPEN request.      *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nPRNT     SUBNTRY ,\n         IF (TM,TRCBFLAG,TRCBBFON,Z)    If Not Buffering?\n            PUT TRCDCB,TRCPLINE         Yes -> Print Line\n         ELSE\n            L   R1,TRCBUFCR               Get Current Position\n            MVC 0(L'TRCPLINE,R1),TRCPLINE Move Line to Buffer\n            LA  R1,L'TRCPLINE(,R1)        Point at Next Slot\n            IF (C,R1,LT,TRCBUFND)       Past End of Buffer\n               ST R1,TRCBUFCR           Set Next Slot Pointer\n            ELSE\n               MVC TRCBUFCR,TRCBUFAD    Set First Slot as Next\n            ENDIF\n         ENDIF\n*\nPRNT999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** LTRC - Locate the TRCDSECT AREA for the Current Task if it Exists  *\n*                                                                     *\n*   This routine will loop through the RME DSECTS for the current     *\n* TCB looking for the Entry for RDHRESEX.  If found it will return    *\n* the address of TRCDSECT in R8.  If not found R8 will be zero on     *\n* exit.                                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         USING TCB,R14                 TCB  Addressability\n         USING STCB,R15                STCB Addressability\n         USING RMEDSECT,R1             RME  Addressability\n*\nLTRC     SUBNTRY ,\n         XR    R8,R8                   Assume Not Found\n*\n         L     R14,PSATOLD             Address of our TCB\n         L     R15,TCBSTCB             Address of STCB\n         L     R1,STCBRMEF             Get RESMGR Queue\n*\n         DO WHILE=(LTR,R1,R1,NZ)       Loop RME Chain\n            IF (CLC,RMEPARAM,EQ,=C'RDHT')   If This is Our Exit...\n               L  R8,RMEPARAM+4             ..Get Address of TRCDSECT\n               DOEXIT ,                     ..And Exit\n            ENDIF\n            L  R1,RMEFWDPT             Get Next RME on Chain\n         ENDDO ,                       -> Loop\n*\n** Exit LDCB\n*\nLTRC999  DS    0H\n         SUBEXIT ,\n         DROP  R14,R15,R1              Drop Temp Addressability\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** LDCB - Locate Our Open DCB by running the DEB Chain off the TCB    *\n*                                                                     *\n*   This routine will loop through the DEB chain off the current TCB  *\n* looking for an open DCB that belong to this Tracing Facility.  If   *\n* found it will locate the address of the TRC Persistant Data Area,   *\n* within which the DCB resides, and return that address in R8.        *\n*                                                                     *\n** Note: This routine is no longer executed.  It is left here for     *\n*        reference purposes only.  It has been replaced with LTRC     *\n*        which provides a better means of locating the TRCDSECT area  *\n*        for the current task.                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         USING DEBBASIC,R1             ..And Addressability\n         USING IHADCB,R2               Get DCB Addressability\n         USING TCB,R14                 ..And Addressability\n*\nLDCB     SUBNTRY ,\n         XR R8,R8                      Zero Innitial Pointer\n         XR R1,R1                      Zero Work Register\n         XR R2,R2                      (Same)\n         L  R14,PSATOLD                Load Our TCB Address\n*\n         IF (ICM,R1,7,TCBDEB+1,NZ)     Get Address of 1st DEB?\n            DO WHILE=(LTR,R1,R1,NZ)    Loop Thru DEB Chain\n               ICM R2,B'0111',DEBECBB  Load DCB Address\n*\n               LA R3,TRCDCBID-TRCDCB(,R2)   Get Addr of Idetifier @RDH\n               IF (CLC,=C'TRAC',EQ,0(R3))   Is This Our DCB?      @RDH\n                  LR R8,R2                  Get Address of TRCDSECT\n                  SH R8,=Y(TRCDCB-TRCDSECT) Get TRCDSECT Address\n                  DOEXIT ,                  -> Done\n               ENDIF\n*\n               ICM R1,B'0111',DEBDEBB  Get Next DEB on Chain\n            ENDDO\n         ENDIF\n*\n** Exit LDCB\n*\nLDCB999  DS    0H\n         SUBEXIT ,\n         DROP  R1,R2                   Drop Temp Addressability\n*\n***********************************************************************\n*  Literials and Constants\n***********************************************************************\n*\n         CONBEG ,                      Define literal Pool\n*\n*\nCONMVC1  MVC 0(*-*,R2),0(R14)          Move Data to Print Line\nCONMVC2  MVC TRCPLINE+28(*-*),TRPDTITL Move Title\nFVARZAP  ZAP TRCWORKD(*-*),0(*-*,R14)  Executed Instruction\n*\nMDLRDJSC RDJFCB (*-*),MF=L             Define model for RDJFCB\nMDLRDJSL EQU  *-MDLRDJSC               (Same)\n*\nMDLOPL   OPEN  (*-*,(OUTPUT)),MF=L     Define Model for OPEN\nMDLOPLL  EQU   *-MDLOPL                (Same)\n*\nMDLDCB   DCB   DDNAME=TRCPRINT,        Define Trace DCB                *\n               LRECL=128,BLKSIZE=1280, (Same)                          *\n               RECFM=FB,DSORG=PS,      (Same)                          *\n               MACRF=PM,EXLST=*-*      (Same)\nMDLDCBL  EQU   *-MDLDCB                (Same)\n*\nMDLRESM  RESMGR ADD,TYPE=ADDRSPC,      Define Model for RESMGR         *\n               ROUTINE=(LINK,*-*),     (Same)                          *\n               PARAM=*-*,              (Same)                          *\n               TOKEN=*-*,MF=L          (Same)\nMDLRESML EQU   *-MDLRESM               (Same)\n*\nTRCECON  DC    X'402020206B2020206B2020206B2020206B202120'\n*                    12345678901234567890123456789012345678901234567890\n*              23456789012345678901234567890123456789012345678901234567\n*              90123456789012345678\nCONTITLE DC    CL128'00/00/00         SYS00000 - Label Level Tracing - *\n               TCB: 00000000'\nCONABEND DC    CL128'    ***> An abend occured while attempting to acce*\n               ss this data.'\nCONHEAD1 DC    CL128'    64-Bit Address    Ofst '\nCONHEAD2 DC    0CL128\n         DC    CL4' ',79C'=',CL43' '\n*\n         DS    0D\nTRTABL   DS    256C'.'                 Translate Table\n         ORG   TRTABL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   TRTABL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   TRTABL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   TRTABL+C'a'\n         DC    C'abcdefghi'\n         ORG   TRTABL+C'j'\n         DC    C'jklmnopqr'\n         ORG   TRTABL+C's'\n         DC    C'stuvwxyz'\n         ORG   TRTABL+C'0'\n         DC    C'0123456789'\n         ORG   TRTABL+C'@'\n         DC    C'@'\n         ORG   TRTABL+C'#'\n         DC    C'#'\n         ORG   TRTABL+C'$'\n         DC    C'$'\n         ORG   TRTABL+C','\n         DC    C','\n         ORG   TRTABL+C'/'\n         DC    C'/'\n         ORG   TRTABL+C'-'\n         DC    C'-'\n         ORG   TRTABL+C':'\n         DC    C':'\n         ORG   ,\n*\nHEXTABL  DC    C'0123456789ABCDEF'     Hex Translate Table\n*\n print gen\n         CONEND ,\n print nogen\n*\n***********************************************************************\n* Define Dynamic Storage Area - DSA\n***********************************************************************\n*\n         DSABEG ,                 <*** Begin Dynamic Storage Area\n*\nDSATRGAD DS    A                       Addr of TRGDSECT Area\nDSASVKEY DS    X                       Key of Calling Program\nDSALSTPP DS    B                       Linkage Stack Type\n*\nDSASAVR1 DS    A                       Register Save Area\nDSAPADDR DS    A                       Address of Fr: Point\nDSAPOFST DS    A                       Offset  of Fr: Point\nDSAPLNAM DS    CL8                     Load Module Name\nDSAPCNAM DS    CL8                     CSECT Name\nDSAPEP   DS    A                       Entry Point Address\nDSAEPSW1 DS    CL8                     PGME PSW On Entryss\n*\n         DSAEND ,                 <*** End Dynamic Storage Area\n         DROP ,                        Drop Everything\n*\n***********************************************************************\n*                                                                     *\n** RDHDSAVE - Build TRCDAREA Dsect for Savearea Chain/Stack Entries   *\n*                                                                     *\n*    This program is called by RDHTRACE and RDHADIAG to obtain a      *\n*  table of all saveareas or linkage stack entries in the chain.      *\n*  The results of this call are placed into TRCDAREA pointed to by    *\n*  TRCDADDR in TRCDSECT.                                              *\n*                                                                     *\n*  On Entry: R1 -> TRCDSECT                                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                Setup PSA      Addressability\n*\nRDHDSAVE PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               ESTAE=YES,            (Same)                            *\n               TRACE=NO,PRINT=GEN\n*\n         L     R10,0(,R1)            Get TRCDSECT Address\n         ST    R10,DSATADDR          Save Address in DSA\n*\n         GOSUB DBLD                  Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** DBLD - Build TRCDAREA Area From Savearea Chain - TCBFSA            *\n*=====================================================================*\n*\n* R10 - Current Linkage Stack Entry\n* R9  - Current Savearea Address\n* R8  - Current Position in TRCDAREA Table\n* R7  - Current Count of Entries Processed\n* R6  - Previous Linkage Stack Entry\n*\n         USING LSED,R10                Current LSED Entry\n         USING LSEN,LSED+LSEDLNTH      Current LSEN Addressabliity\n         USING TRCDAREA,R8             And Addressability\n*\nDBLD     SUBNTRY ,\n         L     R8,DSATADDR               Get TRCDSECT Address\n         L     R8,TRCDADDR-TRCDSECT(,R8) Get TRCDAREA Address\n         XR    R7,R7                     Start With Zero Count\n*\n         LA    R14,TRCDNTRY              Get Address of 1st Entry\n         L     R15,=A(TRCDSIZE-TRCPLTH) Get Length to Clear\n         XR    R0,R0                     Zero Work Registers\n         XR    R1,R1                     (Same)\n         MVCL  R14,R0                    Clear Storage - Start Fresh\n         XC    TRCDCNT,TRCDCNT           (Same)\n*\n         L  R14,PSATOLD                Get Current TCB Addreee\n         USING TCB,R14                 And Addressability\n         L  R15,TCBSTCB                Get STCB Address\n         USING STCB,R15                And Addressability\n*\n         L  R9,TCBFSA                  Get First Savearea\n         L  R10,STCBESTK               Get Linkate Stack Address\n*\n         MVC TRCDLMOD,=CL8'Zos'        Initialize First Entry\n         MVC TRCDEPAD,12(R9)           Save Return Address\n         MVC TRCDCSCT,=CL8'Zos'        (Same)\n         MVC TRCDCSEP,12(R9)           Save Return Address\n         MVC TRCDRTLM,=CL8'Zos'        (Same)\n         MVC TRCDRTCS,=CL8'Zos'        (Same)\n         MVC TRCDRTAD,12(R9)           Save Return Address\n         NI  TRCDRTAD,X'7F'            Strip High Bit\n         NI  TRCDRTAD+3,X'FE'          Strip Low Bit For 64-Bit\n         ST  R9,TRCDR13                Save R13 Address\n         LA  R7,1(,R7)                 First Savearea Always There\n         LA  R8,TRCDLNTH(,R8)          Bump to Next TRCDAREA Area\n         L   R9,8(,R9)                 Get First Pgm Savearea\n*\n** Loop Through All Saveareas from TCBFSA\n*\n         DO UNTIL=(LTR,R9,R9,Z)        Loop to End of Chain?\n            IF (CLC,=C'F1SA',EQ,4(R9)) If Regs on Linkage Stack?\n               GOSUB DLNS              Get TRCDAREA Data from LSEN\n               LR R6,R10               Save Prev LSEN Entry\n               AH R10,LSEDNES          Bump to next Stack Entry\n               L  R9,8(,R9)            Bump to Next Savearea\n            ELSE ,\n               GOSUB DSAV              Get TRCDAREA Data From Savearea\n               L  R9,8(,R9)            Bump to Next Savearea\n            ENDIF ,\n*\n*\n            LA R8,TRCDLNTH(,R8)          Bump to Next TRCDAREA Area\n            LA R7,1(,R7)                 Increment Count\n         DOEXIT (CH,R7,GE,=Y(TRCDMAXC))  Exit if Maxed Out\n         ENDDO ,\n*\n** Show Table Built in Traces\n*\n         L     R8,DSATADDR               Get TRCDSECT Address\n         L     R8,TRCDADDR-TRCDSECT(,R8) Get TRCDAREA Address\n         ST    R7,TRCDCNT                Save Count\n*\nDBLD999  DS    0H\n         SUBEXIT ,\n         DROP  R14,R15                 Drop temp Addressability\n*\n*=====================================================================*\n** DLNS - Get Data From Linkage Stack Entry                           *\n*=====================================================================*\n*\nDLNS     SUBNTRY ,\n         XC    TRCDNTRY(TRCDLNTH),TRCDNTRY Initialize Entry\n*\n         MVC TRCDCSEP,LSENGR15+4       Get EP Address\n         NI  TRCDCSEP,X'7F'            Strip High Bit\n         MVC TRCDRTAD,LSENGR14+4       Get Return Address\n         NI  TRCDRTAD,X'7F'            Strpi High Bit\n         NI  TRCDRTAD+3,X'FE'          Strip Low Bit For 64-Bit\n         MVC TRCDCSCT,=CL8'UNKNOWN'    Initialize Csect Name\n         ST  R10,TRCDLSEN              Save Linkage Stack Entry Addr\n*\n         MVC DSARETRY,=A(DLNSRTR1)     Establish Recovery\n         L   R1,TRCDCSEP               Get Csect Entry Point\n         IF (CLI,0(R1),EQ,X'47'),OR,   If Standard Branch Around EYE   *\n               (CLI,0(R1),EQ,X'A7')    (Same)\n            MVC TRCDCSCT,5(R1)         Get Csect Name\n            MVC TRCDPGID,=32C' '       Space Fill Receiving Field\n            XR  R14,R14                Zero Work Register\n            IC  R14,4(,R1)             Get Length Of Program ID\n            BCTR R14,0                 Decrement for Assembler\n            IF (CH,R14,GT,=Y(L'TRCDPGID-1)) If Greater than Max?\n               LH R14,=Y(L'TRCDPGID-1)      ..Use Max\n            ENDIF\n            EX  R14,CONMVC3            Move Program ID Data\n         ELSE  ,\nDLNSRTR1    DS  0H                     Recover Here on Abend\n            MVC TRCDCSEP,=A(0)         Set TRCCSEP to ZERO\n         ENDIF ,\n         MVC DSARETRY,=A(0)            Terminate Recovery\n*\n         GOSUB DCDS                    Get LMOD Name & EP Address\n         MVC TRCDLMOD,DSACLMOD         Set LMOD Name\n         MVC TRCDEPAD,DSACEPAD         Set LMOD EP Address\n*\n         L  R1,TRCDRTAD                Load return Address\n         IF (CLC,=X'0A03',EQ,0(R1))    If Initiator Return?\n            MVC TRCDRTLM,=CL8'Zos'     ...Indicate Return to Zos\n            MVC TRCDROFS,=F'0'         ...(Same)\n         ELSE ,\n            L  R1,TRCDCSEP             Get Csect Offset Into LMOD\n            S  R1,TRCDEPAD             (Same)\n            ST R1,TRCDCOFS             (Same)\n         ENDIF\n*\n** Do Return Addresses\n*\n         L  R2,LSENGR13+4              Get Callers R13\n         L  R2,8(,R2)                  Get F1SA Savearea Address\n         ST R2,TRCDR13                 Save Address in TRCDAREA\n*\n         L  R1,TRCDRTAD                Get Csect Entry Point\n         IF (CLC,=X'0A03',EQ,0(R1))    If Initiator Return?\n            MVC TRCDRTLM,=CL8'Zos'     ...Indicate Return to Zos\n            MVC TRCDRTCS,=CL8' '       ...(Same)\n            MVC TRCDROFS,=F'0'         ...(Same)\n         ELSE ,\n            L  R1,TRCDRTAD               Get Return Address\n            GOSUB DCDS                   Get LMOD Name & EP Address\n            MVC TRCDRTLM,DSACLMOD        Set Return LMOD Name\n*\n            L R14,TRCDR13                Savearea Address\n            IF (CLC,=C'F1SA',EQ,4(R14))  If Callers Caller in F1SA?\n               L R15,LSENGR15-LSEN+8+4(R6)\n            ELSE ,                       Else\n               L R15,4(,R14)             ...Get His EP From Savearea\n               L R15,16(,R15)            ...(Same)\n            ENDIF ,\n\n            MVC DSARETRY,=A(DLNSRTR2)    Establish Recovery\n            IF (CLI,0(R15),EQ,X'47'),OR, If Standard Branch Around EYE *\n               (CLI,0(R15),EQ,X'A7')     (Same)\n               MVC TRCDRTCS,5(R15)       Get Csect Name\n               L  R14,TRCDRTAD           Get Offset Into LMOD\n               SR R14,R15                (Same)\n               ST R14,TRCDROFS           (Same)\n            ELSE  ,\nDLNSRTR2       DS  0H                    Recover Here on Abend\n               MVC TRCDROFS,=A(0)        Set TRCDROFS to Zero\n            ENDIF ,\n            MVC DSARETRY,=A(0)           Terminate Recovery\n         ENDIF\n*\n** Return to Caller\n*\nDLNS999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DSAV - Get Data From Standard O/S Savearea                         *\n*=====================================================================*\n*\nD        USING DSA,R14                 Callers DSA  Addressability\n*\nDSAV     SUBNTRY ,\n         XC    TRCDNTRY(TRCDLNTH),TRCDNTRY Initialize Entry\n*\n** Get Csect information\n*\n         L   R14,4(,R9)                Get Previous Savearea\n         ST  R9,TRCDR13                Set R13 Value Callers Savearea\n         MVC TRCDCSEP,D.DSASVR15       Get EP Address\n         NI  TRCDCSEP,X'7F'            Strpi High Bit\n         MVC TRCDRTAD,D.DSASVR14       Get Return Address\n         NI  TRCDRTAD,X'7F'            Strpi High Bit\n         NI  TRCDRTAD+3,X'FE'          Strip Low Bit For 64-Bit\n         MVC TRCDCSCT,=CL8'UNKNOWN'    Initialize Csect Name\n         L   R1,TRCDCSEP               Get Csect Entry Point\n         IF (CLI,0(R1),EQ,X'47'),OR,   If Standard Branch Around EYE   *\n               (CLI,0(R1),EQ,X'A7')    (Same)\n            MVC TRCDCSCT,5(R1)         Get Csect Name\n            MVC TRCDPGID,=32C' '       Space Fill Receiving Field\n            XR  R14,R14                Zero Work Register\n            IC  R14,4(,R1)             Get Length Of Program ID\n            BCTR R14,0                 Decrement for Assembler\n            IF (CH,R14,GT,=Y(L'TRCDPGID-1)) If Greater than Max?\n               LH R14,=Y(L'TRCDPGID-1)      ..Use Max\n            ENDIF\n            MVC TRCDPGID(*-*),5(R1)    Get Program ID Area\n            EX  R14,*-6                Move Program ID Data\n         ENDIF ,\n*\n         L   R1,TRCDCSEP               Get Csect Entry Point\n         GOSUB DCDS                    Get LMOD Name & EP Address\n         MVC TRCDLMOD,DSACLMOD         Set LMOD Name\n         MVC TRCDEPAD,DSACEPAD         Set LMOD EP Address\n         L  R1,TRCDCSEP                Get Csect Offset Into LMOD\n         S  R1,DSACEPAD                (Same)\n         ST R1,TRCDCOFS                (Same)\n*\n** Do Return Addresses\n*\n         L   R1,TRCDRTAD               Get Csect Entry Point\n         IF (CLC,=X'0A03',EQ,0(R1))    If Initiator Return?\n            MVC TRCDRTLM,=CL8'Zos'     ...Indicate Return to Zos\n            MVC TRCDRTCS,=CL8' '       ...(Same)\n            MVC TRCDROFS,=F'0'         ...(Same)\n         ELSE ,\n            L  R1,TRCDRTAD               Get Return Address\n            GOSUB DCDS                   Get LMOD Name & EP Address\n            MVC TRCDRTLM,DSACLMOD        Set Return LMOD Name\n*\n            L R14,4(,R9)                 Get Previous Savearea\n            L R14,TRCDR13                Savearea Address\n            IF (CLC,=C'F1SA',EQ,4(R14))  If Callers Caller in F1SA?\n               L R15,LSENGR15-LSEN+8+4(R6)\n            ELSE ,                       Else\n               L R15,4(,R14)             ...Get His EP From Savearea\n               L R15,16(,R15)            ...(Same)\n            ENDIF ,\n\n            IF (CLI,0(R15),EQ,X'47'),OR, If Standard Branch Around EYE *\n               (CLI,0(R15),EQ,X'A7')     (Same)\n               MVC TRCDRTCS,5(R15)       Get Csect Name\n               L R14,TRCDRTAD            Get Offset Into LMOD\n               SR R14,R15                (Same)\n               ST R14,TRCDROFS           (Same)\n            ENDIF ,\n         ENDIF\n*\n** Return to Caller\n*\nDSAV999  DS    0H\n         SUBEXIT ,\n         DROP  D                       Drop Temp Addressability\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** DCDS - Locate CDE and Extent List for Address                      *\n*                                                                     *\n*    This routine is given an storage address and attempts to find    *\n*  the load module that is loaded at that address.  It runs the CDE   *\n*  chain to the extent list and and checks the address against the    *\n*  storage extent.                                                    *\n*                                                                     *\n*  On Input:  R1       -> Address to Locate                           *\n*  On Output: DSACLMOD -> CDNAME of LMOD or Blanks                    *\n*  On Output: DSACEPAD -> Entry Point Address of LMOD or Zero         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         USING TCB,R14                 Get TCB Addressability\n         USING CDENTRY,R15             Get CDE Addressability\n         USING XTLST,R2                Get XTLST Addressability\n*\nDCDS     SUBNTRY ,\n         MVC DSACLMOD,=CL8' '          Space Fill Receiving Field\n         MVC DSACEPAD,=F'0'            (Same)\n*\n         L  R14,PSATOLD                Load Our TCB Address\n         L  R14,TCBJSTCB               CDE's Are Anchored Off JSTCB\n         IF (ICM,R15,15,TCBJPQ,NZ)     Get First CDE on Chain\n            DO INF                     Do Forever...\n               L  R2,CDXLMJP           Get Extent Pointer\n               XR R14,R14              Zero Work Register\n               ICM R14,7,XTLMSBLN      Get Length of Extent\n               AL  R14,XTLMSBAD        Plus Address for End Pointer\n*\n               IF (C,R1,GE,XTLMSBAD)   If Greater Than Beginning\n                  IF (CR,R1,LT,R14)    And Less Than End\n                     MVC DSACLMOD,CDNAME   Save CDNAME\n                     MVC DSACEPAD,CDENTPT  Save EP Address\n                     NI  DSACEPAD,X'7F'    Strip High Bit\n                     DOEXIT ,              -> Done\n                  ENDIF\n               ENDIF\n*\n               L  R15,CDCHAIN          Get next CDE Entry\n               IF (LTR,R15,R15,Z)      End of Chain?\n                  DOEXIT ,             Yes -> Done\n               ENDIF\n            ENDDO\n         ENDIF\n*\nDCDS999  DS    0H\n         SUBEXIT ,\n         DROP  R14,R15,R2              Drop Temp Bases\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\nCONMVC3  MVC TRCDPGID(*-*),5(R1)    Get Program ID Area\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSALSTYP DS    X                       Linkage Stack Type PC/BAKR\nDSATADDR DS    A                       Address of TRCDSECT\nDSACLMOD DS    CL8                     DCDE - CLMOD Name\nDSACEPAD DS    A                       DCDE - EP Address\n*\n         DSAEND ,                      Define DSA Suffix\n         DROP ,                        Drop Everything\n*\n***********************************************************************\n*                                                                     *\n*  RDHABEND - Print ABEND Diagnostics - Covers 1st TYPE=MAIN Program  *\n*                                                                     *\n*            This routine gets control in the event of an abend       *\n*          situation in the initiating program.  The ESTAE is         *\n*          initiated for the first TYPE=MAIN program to be executed   *\n*          for the current task when the TRCDSECT is built.  Any      *\n*          subsequent TYPE=MAIN program will be covered by the        *\n*          initial ESTAE.                                             *\n*            The purpose of this recovery routine is to print         *\n*          diagnostics for the ABEND to TRCPRINT to assist the user   *\n*          to diagnose the problem in their code.                     *\n*            There is no attempt to recover from the error.           *\n*            On Entry SDWAPARM will contain the address of the        *\n*          TRCDSECT for the current task which is needed to get to    *\n*          the TRCPRINT DCB or the in-storage buffer address if       *\n*          buffering is in effect.                                    *\n*            There is no need to clean up at this point because the   *\n*          Resource Manager will perform those duties shortly after   *\n*          the completion of this function.                           *\n*                                                                     *\n*          Input Parameters:                                          *\n*            R0 - Code, 12 If no SDWA                                 *\n*            R1 - Address of SDWA                                     *\n*           R13 - Savearea Address                                    *\n*           R14 - Return Address                                      *\n*           R15 - Entry Point Address                                 *\n*                                                                     *\n*          OUTPUT:                                                    *\n*           R15 - RETURN CODE, 0-Continue W/Termination               *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nRDHABEND CSECT ,                        Define Control Section\nRDHABEND AMODE 31\nRDHABEND RMODE ANY\n         CHI   R0,12                    Is SDWA Available?\n         BZR   R14                      No -> Percolate\n*\n** Have SDWA Continue Processing\n*\n         STMG  R14,R12,16(R13)          Save Registers\n         LGR   R12,R15                  Load Base Register\n         SRL   R12,1                    Zero Low Bit For 64Bit ESTAEX\n         SLL   R12,1                    (Same)\n         USING RDHABEND,R12             (Same)\n*\n         LGR   R9,R1                    Get SDWA Address\n         USING SDWA,R9                  And Addressability\n         LGR   R10,R2                   Get TRCDSECT Address\n         USING TRCDSECT,R10             And Addressability\n*\n         SAM31 ,                        We Run in 31\n         LA    R11,TRCABSAV             Get Our Savearea Address\n         ST    R13,4(,R11)              Store His in Ours\n         ST    R11,8(,R13)              Store Ours in His\n         LR    R13,R11                  Setup Our Standard Savearea\n*\n** Call RDHADIAG to Print Abend Diagnostics\n*\n         CALL  RDHDSAVE,                Build TRCDAREA For This Call   *\n               ((R10)),                 Passing TRCDSECT Address       *\n               MF=(E,TRCPLIST)          (Same)\n*\n         CALL  RDHADIAG,                Call Diagnostic Program        *\n               ((R10)),VL,              Pass SDWA Address              *\n               MF=(E,TRCPLIST)\n         L     R13,4(,R13)              Restore Savearea on Entry\n         LR    R1,R9                    Restore SDWA Address\n*\n** Return to Caller - Percolate\n*\nTRCATERM DS    0H                   -*- Continue With Termination\n         SETRP RC=0                     Return to Supervisor\n         LMG   R14,R12,16(R13)          Restore Registers\n         XGR   R15,R15                  Percolate\n         BR    R14                      -> Return\n*\n         LTORG ,\n*\n         ORG RDHABEND+(*-RDHABEND+255)/256*256 Round to 256-Byte Bndry\n         DS  0H\n         DROP ,\n*\n***********************************************************************\n** RTM2WA - RTM 2nd level Workatea - No DSECT Available - Fake it     *\n***********************************************************************\n*\nRTM2WA   DSECT ,\nRTM2PREV EQU   RTM2WA+X'162',4,C'A'  Address of Previous RTM2WA\nRTM2SDW1 EQU   RTM2WA+X'354',4,C'A'  Address of Related SDWA\nRTM2ANCH EQU   RTM2WA+X'3E4',4,C'A'  Address of Original RTM2WA\n*\n***********************************************************************\n*                                                                     *\n** RDHADIAG - Print Diagnostics for Abending Program                  *\n*                                                                     *\n*    This program is called from RDHABEND to print diagnostics for    *\n*  the abending program to TRCPRINT.                                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  PSA  Addressability\n         USING TRCDSECT,R10            TRC  Main Data Area\n         USING RTM2WA,R9               RTM2WA  Addressability\n         USING SDWA,R8                 SDWA Addressability\n*\nRDHADIAG PGMNTRY TYPE=MAIN,TRACE=NO,   Establish Program Linkage       *\n               ESTAE=YES,              ESTAE Recovery Support          *\n               BASE=(R12,R11,R7)\n*\nC        USING TRCDNTRY,TRCCNTRY       Current TRCDAREA Entry\nP        USING TRCDNTRY,TRCPNTRY       Previous TRCDAREA Entry\n*\n         L     R10,0(,R1)              Get Address of TRCDSECT\n*\n         GOSUB DINIT                   Do Initialization\n         GOSUB DPROC                   Go Print Diagnostics\n         GOSUB DTERM                   Do Termination\n*\n  MVC DSARETRY,=A(TRCAD999) *temp\n  DC H'0'\n*\n** Return From Here to Percolate\n*\nTRCAD999 DS    0H\n         PGMEXIT RC=0\n*\n*=====================================================================*\n** DINIT - Do Initialization Processing                               *\n*=====================================================================*\n*\nDINIT    SUBNTRY ,\n*\n** Get Caller's Registers\n*\n         L     R1,TRCDADDR              Get TRCDAREA Address\n         USING TRCDAREA,R1              And Temp Addressability\n         L     R14,TRCDCNT              Get Last TRCDAREA Entry-Current\n         SH    R14,=Y(1)                (Same)\n         MH    R14,=Y(TRCDLNTH)         (Sama)\n         LA    R14,TRCPLTH(R14,R1)      (Same)\n         MVC   TRCCNTRY,0(R14)          (Same)\n         L     R15,TRCDCNT              Get Prev TRCDSECT Entry-Caller\n         SH    R15,=Y(2)                (Same)\n         MH    R15,=Y(TRCDLNTH)         (Same)\n         LA    R15,TRCPLTH(R15,R1)      (Same)\n         MVC   TRCPNTRY,0(R15)          (Same)\n         DROP  R1                       Drop Temp Addressability\n*\n** Return to Caller\n*\nDINIT99  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DTERM - Do Termination Processing                                  *\n*=====================================================================*\n*\nDTERM    SUBNTRY ,\n*\n** Return to Caller\n*\nDTERM99  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DPROC - Do Main Processing                                         *\n*=====================================================================*\n*\nDPROC    SUBNTRY ,\n         L     R14,PSATOLD             Get Address of TCB\n         USING TCB,R14                 (Same)\n         L     R9,TCBRTWA              Get RTM2WA Address\n*\n         DO WHILE=(LTR,R9,R9,NZ)       Loop All RTM2WA Areas\n            L  R8,RTM2SDW1             Get SDWA Address This RTM2WA\n*\n            GOSUB DSDWA                Move SDWA Stuff to DSA\n            GOSUB DRTM2                Process an RTM2WA Workarea\n*\n            ICM R9,B'1111',RTM2PREV    Get Prev RTM2WA Address\n         ENDDO ,\n*\n** Return To Caller\n*\nDPROC99  DS    0H\n         SUBEXIT ,\n         DROP  R14                     Drop Temp Bases\n*\n*=====================================================================*\n** DSDWA - Move Stuff From SDWA Fields to DSA - Save The Bases        *\n*=====================================================================*\n*\n         USING SDWAPTRS,R1             SDWAPTRS Addressability\n         USING SDWARC1,R14             SDWARC1 Addressability\n         USING SDWARC4,R15             SDWARC4 Addressability\n*\nDSDWA    SUBNTRY ,\n         L     R1,SDWAXPAD             Get Address of SDWAPTRS\n         L     R14,SDWASRVP            Get Access Regs\n         L     R15,SDWAXEME            Get 64-Bit Regs\n*\n         IF (LTR,R15,R15,NZ)           Have 64-Bit Regs?\n            MVC DSAGR64,SDWAG64        Grab 64-Bit Regs\n         ELSE ,\n            XC  DSAGR64,DSAGR64        Zero High Words\n            MVC DSAGR0+4(4),SDWAGR00   Grab 31-Bit Registers\n            MVC DSAGR1+4(4),SDWAGR01   (Same)\n            MVC DSAGR2+4(4),SDWAGR02   (Same)\n            MVC DSAGR3+4(4),SDWAGR03   (Same)\n            MVC DSAGR4+4(4),SDWAGR04   (Same)\n            MVC DSAGR5+4(4),SDWAGR05   (Same)\n            MVC DSAGR6+4(4),SDWAGR06   (Same)\n            MVC DSAGR7+4(4),SDWAGR07   (Same)\n            MVC DSAGR8+4(4),SDWAGR08   (Same)\n            MVC DSAGR9+4(4),SDWAGR09   (Same)\n            MVC DSAGR10+4(4),SDWAGR10  (Same)\n            MVC DSAGR11+4(4),SDWAGR11  (Same)\n            MVC DSAGR12+4(4),SDWAGR12  (Same)\n            MVC DSAGR13+4(4),SDWAGR13  (Same)\n            MVC DSAGR14+4(4),SDWAGR14  (Same)\n            MVC DSAGR15+4(4),SDWAGR15  (Same)\n         ENDIF ,\n*\n         MVC  DSAACRS,SDWAARER         Grab Access Registers\n         MVC  DSACREGS,SDWACRER        Grab Control Registers\n         MVC  DSARSC,SDWACRC           Extract Reason Code\n*\n         IF (LTR,R15,R15,NZ)           If We have 64-Bit Extension?\n            MVC DSAPSW,SDWAPSW16       Move PSW to DSA\n         ELSE\n            XC  DSAPSW,DSAPSW          Reformat EC PSW\n            MVC DSAPSW(4),SDWAEC1      (Same)\n            MVC DSAPSW+12(4),SDWAEC1+4 (Same)\n            IF  (TM,DSAPSW+12,X'80',O) (Same)\n                OI DSAPSW+4,X'80'      (Same)\n                NI DSAPSW+12,X'7F'     (Same)\n            ENDIF ,\n         ENDIF\n*\n** Return To Caller\n*\nDSDWA99  DS    0H\n         SUBEXIT ,\n         DROP  R1,R14,R15              Drop Temp Addressability\n*\n*=====================================================================*\n** DRTM2 - Processing for the Current RTM2WA Work Area                *\n*=====================================================================*\n*\nDRTM2    SUBNTRY ,\n*\n** Print Program Abended Header\n*\n         #WTO ' ',PLINE=TRCPLINE       Print a Few Spaces\n         GOSUB PPRNT                   (Same)\n         GOSUB PPRNT                   (Same)\n         GOSUB PPRNT                   (Same)\n*\n         #WTO (CL80AST),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO (CL80TTL),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO (CL80AST),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         ST   R9,DSAWXL4A              Save RTM2WA Addr for Print\n         #WTO '*',PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('** Diagnostics for RTM2WA at: ',DSAWXL4A),             *\n               PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO '*',PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Print Abend Diagnostics\n*\n         GOSUB DPSW                    Display PSW at Abend\n         GOSUB DGREG                   Display Registers at Abend\n         GOSUB DCREG                   Display Control Regs At Abend\n         GOSUB DCHN                    Print Savearea Chain\n*\n         GOSUB DSDWA                   Restore Abend PSW & Regs\n*\n** Return to Caller\n*\nDRTM299  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DPSW - Display PSW At Entry to Abend                               *\n*=====================================================================*\n*\nDPSW     SUBNTRY ,\n         MVC DSAWORKF,SDWACMPC         Get Completion Code\n         IF (NC,DSAWORKF(2),=X'FFF0',Z)    If User Abend?\n            XR  R14,R14                    ..Zero Work Register\n            ICM R14,B'0111',SDWACMPC       ..Get User Abend Code\n            N   R14,=A(X'00000FFF')        ..(Same)\n            CVD R14,DSAWORKD               ..User Code in Decimal\n            OI  DSAWORKD+7,X'0F'           ..(Same)\n            UNPK DSAWORKD(5),DSAWORKD+5(3) ..(Same)\n            MVI DSACMP,C'U'                ..(Same)\n            MVC DSACMP+1(4),DSAWORKD+1     ..(Same)\n         ELSE ,                            Else\n            UNPK DSAWORKD(5),SDWACMPC(3)   ..Extract System Code\n            MVI DSACMP,C'S'                ..(Same)\n            MVC DSACMP+1(3),DSAWORKD       ..(Same)\n            TR  DSACMP+1(3),HEXTABA-240    ..(Same)\n         ENDIF ,\n*\n         XR   R2,R2                    Zero Work Register\n         IC   R2,SDWAILC1              Get ILC\n         N    R2,=A(X'06')             (Same)\n         STC  R2,DSAILC                In Character\n         OI   DSAILC,C'0'              (Same)\n*\n         #WTO ('  ABEND CODE: ',DSACMP,'   REASON CODE:  ',DSARSC,     *\n               '   ILC: ',DSAILC),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         #WTO ('         PSW: ',DSAPSW1,' ',DSAPSW2,                   *\n               '   ',DSAPSW3,' ',DSAPSW4),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Print DATA at PSW line\n*\n         L    R14,DSAPSW+12            Get PSW Address\n         SR   R14,R2                   Get Prev instruction\n         SRL  R14,2                    To Fullword Boundry\n         SLL  R14,2                    (Same)\n         ST   R14,DSADAPAD             Save Address of Data At PSW\n*\n         MVC  DSARETRY,=A(DPSW010)     Could Abend Here\n         L    R14,DSADAPAD             Get Data At PSW\n         MVC  DSADAPSW,0(R14)          (Same)\nDPSW010  DS   0H\n         XC   DSARETRY,DSARETRY        Release Retry\n         #WTO ('  DATA @ PSW:          ',DSADAPAD,' -',                *\n               ' ',DSADAPS1,' ',DSADAPS2,                              *\n               ' ',DSADAPS3,' ',DSADAPS4),                             *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Display PSW Status\n*\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         MVI TRCPLINE,C' '             Space Fill Print Line\n         MVC TRCPLINE+1(L'TRCPLINE-1),TRCPLINE\n*\n         LA  R2,TRCPLINE+2         -*- Set State Value\n         MVC 0(6,R2),=C'State('        Set State Header\n         LA  R2,6(,R2)                 (Same)\n         IF  (TM,DSAPSW1+1,X'01',O)    If Problem State?\n             MVC 0(9,R2),=C'Problem),' ...Indicate Problem State\n             LA  R2,10(,R2)            ...Bump Pointer\n         ELSE ,                        Else\n             MVC 0(12,R2),=C'Supervisor),' ...Indicate Supervisor State\n             LA  R2,13(,R2)                ...Bump Pointer\n         ENDIF ,\n*\n         XR  R14,R14               -*- Set Key Value\n         IC  R14,DSAPSW1+1             Get PSW Key\n         SRL R14,4                     (Same)\n         IF  (C,R14,LT,=F'10')         If Single Digit Key?\n           O   R14,=A(X'000000F0')     (Same)\n           MVC 0(4,R2),=C'Key('        Set Key Header\n           LA  R2,4(,R2)               (Same)\n           STC R14,0(,R2)              Set Key\n           MVC 1(2,R2),=C'),'          (Same)\n           LA  R2,4(,R2)               (Same)\n         ELSE  ,\n           S   R14,=F'10'              Get Double Digit Key\n           O   R14,=A(X'000000F0')     (Same)\n           MVC 0(5,R2),=C'Key(1'       Set Key Header\n           LA  R2,5(,R2)               (Same)\n           STC R14,0(,R2)              Set Key\n           MVC 1(2,R2),=C'),'          (Same)\n           LA  R2,5(,R2)               (Same)\n         ENDIF ,\n*\n         MVC 0(5,R2),=C'Mode('      -*- Set Mode Header\n         LA  R2,5(,R2)                  (Same)\n         IF (TM,DSAPSW1+2,X'80',Z)      If Primary or Access?\n            IF (TM,DSAPSW1+2,X'40',Z)      If Primary Mode?\n               MVC 0(9,R2),=C'Primary),'   ...Indicate Primary Mode\n               LA  R2,10(,R2)              ...Bump Pointer\n            ELSE ,                         Else\n               MVC 0(8,R2),=C'Access),'    ...Indicate Access Mode\n               LA  R2,9(,R2)               ...Bump Pointer\n            ENDIF ,\n         ELSE ,                         If Home or Secondary?\n            IF (TM,DSAPSW1+2,X'40',Z)      If Secondary Mode?\n               MVC 0(9,R2),=C'Secondary),' ...Indicate Primary Mode\n               LA  R2,10(,R2)              ...Bump Pointer\n            ELSE ,                         Else\n               MVC 0(6,R2),=C'Home),'      ...Indicate Home Mode\n               LA  R2,7(,R2)               ...Bump Pointer\n            ENDIF ,\n         ENDIF ,\n*\n         MVC 0(6,R2),=C'Amode('     -*- Set Amode Header\n         LA  R2,6(,R2)                  (Same)\n         IF  (TM,DSAPSW1+3,X'01',O)     If Amode(64)?\n             MVC 0(3,R2),=C'64)'        ...Indicate Amode(64)\n         ELSE ,                         Else\n            IF (TM,DSAPSW1+4,X'80',O)   If Amode(31)?\n                MVC 0(3,R2),=C'31)'     ...Indicate Amode(31)\n            ELSE ,\n                MVC 0(3,R2),=C'24)'     ...Indicate Amode(24)\n            ENDIF ,\n         ENDIF ,\n*\n         GOSUB PPRNT\n*\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Display Active Load Module Line\n*\n         L     R1,DSAPSW+12            Get PSW Address\n         GOSUB DCDE                    Get Data to Print\n         IF (CLI,DSADLMOD,NE,C' ')     If We Found it?\n            #WTO ('  Active Load Module: ',DSADLMOD,', EP: ',          *\n               DSADEPAD,', Offset: ',DSADOFS1),                        *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n         ELSE ,\n            #WTO '  No Active Load Module.',                           *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n         ENDIF ,\n*\n** Display Active Csect Line\n*\n         IF (CLI,DSADCSCT,NE,C' ')     If We Found it?\n            #WTO ('       Current Csect: ',DSADCSCT,', EP: ',          *\n               DSADCSEP,', Offset: ',DSADCOF1),                        *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n         ENDIF ,\n*\n** Return to Caller\n*\nDPSW999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DGREG - Display General Registers                                  *\n*=====================================================================*\n*\nDGREG    SUBNTRY ,\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO '    AR/GR Registers at Entry to Abend',SQUEEZE=NO,      *\n               PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO '    ---------------------------------',SQUEEZE=NO,      *\n               PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         LA R4,DSAACRS                 Access Registers to Print\n         LA R5,DSAGR64                 General Registers 64-Bit\n         LA R2,8                       Print Eight lines\n         XR R3,R3                      Curr Register Number\n*\n         DO FROM=(R2)                  Loop Through Lines to Print\n            MVC  DSAPAR,0(R4)          1st Access Reg This Line\n            MVC  DSAPGH,0(R5)          1st High GPR   This Line\n            MVC  DSAPGL,4(R5)          1st Low GPR    This Line\n            MVC  DSAQAR,4(R4)          2nd Access Reg This Line\n            MVC  DSAQGH,8(R5)          2nd High GPR   This Line\n            MVC  DSAQGL,12(R5)         2nd Low GPR    This Line\n*\n            STC  R3,DSACL1A            Get 1st Register Number\n            LA   R3,1(,R3)             (Same)\n            OI   DSACL1A,X'F0'         (Same)\n            TR   DSACL1A,HEXTABA-240   (Same)\n            STC  R3,DSACL1B            Get 2nd Register Number\n            OI   DSACL1B,X'F0'         (Same)\n            TR   DSACL1B,HEXTABA-240   (Same)\n            LA   R3,1(,R3)             (Same)\n*\n            #WTO ('    ',DSACL1A,': ',DSAPAR,'/',DSAPGH,'_',DSAPGL,    *\n               '    ',DSACL1B,': ',DSAQAR,'/',DSAQGH,'_',DSAQGL),      *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n*\n            LA R4,8(,R4)               Next Access Register\n            LA R5,16(,R5)              Next General Register\n         ENDDO ,                       -> Loop\n*\n** Return to Caller\n*\nDGREG999 DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DCREG - Show Control Registers at Abend                            *\n*=====================================================================*\n*\nDCREG    SUBNTRY ,\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO '    Control Registers at Entry to Abend',SQUEEZE=NO,    *\n               PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO '    -----------------------------------',SQUEEZE=NO,    *\n               PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         #WTO ('    CR0-3:   ',DSACR0,'  ',DSACR1,'  ',                *\n               '  ',DSACR2,'  ',DSACR3),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('    CR4-7:   ',DSACR4,'  ',DSACR5,'  ',                *\n               '  ',DSACR6,'  ',DSACR6),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('    CR8-11:  ',DSACR8,'  ',DSACR9,'  ',                *\n               '  ',DSACR10,'  ',DSACR11),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('    CR12-15: ',DSACR12,'  ',DSACR13,'  ',              *\n               '  ',DSACR14,'  ',DSACR15),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Return to Caller\n*\nDCREG999 DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DCHN - Show Save Area Chain in Reverse Order                       *\n*=====================================================================*\n*\n         USING TRCDAREA,R4\n         USING LSED,R3\n*\nDCHN     SUBNTRY ,\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n         GOSUB PPRNT\n         #WTO '    Save Area Chain in Reverse Order',                  *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO '    --------------------------------',                  *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         L  R4,TRCDADDR                Get Address of TRCDAREA\n         L  R5,TRCDCNT                 Get Count of Entries\n         LR R14,R5                     Point at Last Entry\n         SH R14,=Y(1)                  (Same)\n         MH R14,=Y(TRCDLNTH)           (Same)\n         LA R4,0(R4,R14)               Point at Last Entry\n         DO FROM=(R5)                  Loop Through Entry in Table\n            IF (CLC,TRCDLSEN,NE,=A(0))    If Linkage Stack Entry\n               L R3,TRCDLSEN              Get Linkage Stack Address\n               IF (TM,LSEDTYPE,LSEDTPCE,O)  If PC Entry?\n                  NI DSAFLAG,X'FF'-DSABAKR  ..Remove BAKR Flag\n                  OI DSAFLAG,DSAPC          ..Indicate PC Entry\n               ELSE ,                       Else\n                  NI DSAFLAG,X'FF'-DSAPC    ..Remove PC Flag\n                  OI DSAFLAG,DSABAKR        ..Indicate BAKR Entry\n               ENDIF ,\n*\n               LA R3,8(,R3)               ..Point At LSEN Entry\n               GOSUB DLNKE                ..Print Entry\n            ELSE ,                        Else\n               L R3,TRCDR13               ..Get R13 Value\n               GOSUB DSAVE                ..Print O/S Savearea\n            ENDIF\n*\n            L R3,TRCDR13               Get Current R13 Savearea\nD           USING DSA,R3               Temp Addressability\n            IF (CLC,0(3,R3),EQ,=C'DSA')      If This is Our DSA?\n               GOSUB DDSAE                   ..Print Whole DSA\n               IF (TM,D.DSAFLAG1,DSAATBUS,O) If Using ATB Storage?\n                  GOSUB DATBE                ..Print Whole ATB\n               ENDIF\n            ENDIF ,\n*\n            SH R4,=Y(TRCDLNTH)            Get Previous Entry\n         ENDDO ,                       -> Loop\n*\n** Return to Caller\n*\nDCHN999  DS    0H\n         SUBEXIT ,\n         DROP  D                       Drop temp Addressability\n*\n*=====================================================================*\n** DLNKE - Print a Linkage Stack Entry\n*=====================================================================*\n*\n         USING LSEN,R3                Linkage Stack Addressability\n*\nDLNKE    SUBNTRY ,\n         STM   R3,R6,DSASAVE4         Save Callers Registers\n*\n         ST    R3,DSAWXL4A            Save LESN Address\n\n         IF (TM,DSAFLAG,DSABAKR,O)    If BAKR Entry?\n            #WTO ' ',PLINE=TRCPLINE\n            GOSUB PPRNT\n            #WTO ('      LS BAKR Entry At: ',DSAWXL4A,                 *\n               ', For: ',TRCDCSCT),                                    *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n            #WTO  '      -----------------------------------------',   *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n         ELSE ,\n            #WTO ' ',PLINE=TRCPLINE\n            GOSUB PPRNT\n            #WTO ('      LS PC Entry At: ',DSAWXL4A,                   *\n               ', For: ',TRCDCSCT),                                    *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n            #WTO  '      ---------------------------------------',     *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n         ENDIF ,\n*\n         MVC DSAGR64,LSENGRGS          Get GR Registers\n         MVC DSAACRS,LSENARGS          Get Access Registers\n*\n** Print PSW and Other Stuff\n*\n         MVC  DSAPSW(8),LSENPSW1       Move PSW to DSA\n         MVC  DSAPSW+8(8),LSENPSW2     (Same)\n         #WTO ('      PSW:  ',DSAPSW1,' ',DSAPSW2,                     *\n               '   ',DSAPSW3,' ',DSAPSW4),                             *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('      MSTK: ',LSENMOD1,' ',LSENMOD2,                   *\n               '   F1SA: ',TRCDR13),                                   *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('      PASN: ',LSENPASN,'   SASN: ',LSENSASN,           *\n               '   PKM:  ',LSENPKM,' EAX: ',LSENEAX),                  *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Print AR/GR Registers For Stack Entry\n*\n         LA R4,DSAACRS                  Access Registers\n         LA R5,DSAGR64                  General Registers, 64-Bit\n         LA R2,8                        Print Eight Lines\n         XR R3,R3                       Current register Number\n*\n         DO FROM=(R2)\n            MVC  DSAPAR,0(R4)          1st Access Reg This Line\n            MVC  DSAPGH,0(R5)          1st High GPR   This Line\n            MVC  DSAPGL,4(R5)          1st Low GPR    This Line\n            MVC  DSAQAR,4(R4)          2nd Access Reg This Line\n            MVC  DSAQGH,8(R5)          2nd High GPR   This Line\n            MVC  DSAQGL,12(R5)         2nd Low GPR    This Line\n*\n            STC  R3,DSACL1A            Get 1st Register Number\n            LA   R3,1(,R3)             (Same)\n            OI   DSACL1A,X'F0'         (Same)\n            TR   DSACL1A,HEXTABA-240   (Same)\n            STC  R3,DSACL1B            Get 2nd Register Number\n            OI   DSACL1B,X'F0'         (Same)\n            TR   DSACL1B,HEXTABA-240   (Same)\n            LA   R3,1(,R3)             (Same)\n*\n            #WTO ('         ',DSACL1A,': ',                            *\n               DSAPAR,'/',DSAPGH,'_',DSAPGL,                           *\n               '    ',DSACL1B,': ',                                    *\n               DSAQAR,'/',DSAQGH,'_',DSAQGL),                          *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n*\n            LA R4,8(,R4)               Next Access Register\n            LA R5,16(,R5)              Next General Register\n         ENDDO ,\n*\n** Return to Caller\n*\nDLNKE999 DS    0H\n         LM    R3,R6,DSASAVE4          Save Callers Registers\n         SUBEXIT ,\n         DROP R3\n*\n*=====================================================================*\n** DSAVE - Print Zos Savearea to TRCPRINT                             *\n*=====================================================================*\n*\n* R3 -> R13 Savearea Address to Print\n*\nDSAVE    SUBNTRY ,\n         STM  R3,R6,DSASAVE4           Save Callers Registers\n         ST   R3,DSAWXL4A              Savearea Address to Print\n*\n** Print Savearea Header\n*\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('      Zos Standard Savearea At: ',DSAWXL4A,            *\n               ', For: ',TRCDCSCT),                                    *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('      -----------------------------------------',      *\n               '--------'),                                            *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Print Register Savearea\n*\n         LA  R4,4                      Divided by 16\n         LR  R5,R3                     Address of Area to Print\n         DO FROM=(R4)                  Loop Through DSA Area\n            ST  R5,DSAWKADR            Save Address of This Data\n            MVC DSAWCL16,0(R5)         Get Character Data\n            TR  DSAWCL16,TRTABLE       In Printable Format\n            MVC DSAWXL4A,0(R5)         Get Hex Data Word 1\n            MVC DSAWXL4B,4(R5)         Get Hex Data Word 2\n            MVC DSAWXL4C,8(R5)         Get Hex Data Word 3\n            MVC DSAWXL4D,12(R5)        Get Hex Data Word 4\n*\n            #WTO ('      ',DSAWKADR,'  ',                              *\n               DSAWXL4A,' ',DSAWXL4B,' ',                              *\n               DSAWXL4C,' ',DSAWXL4D,'  ',                             *\n               '*',DSAWCL16,'*'),                                      *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n*\n            LA  R5,16(,R5)             Bump Input Pointer\n         ENDDO ,\n*\n         ST  R5,DSAWKADR               Save Address of This Data\n         MVC DSAWCL16,=16C' '          Space out Field\n         MVC DSAWCL16(8),0(R5)         Get Character Data\n         TR  DSAWCL16,TRTABLE          In Printable Format\n         MVC DSAWXL4A,0(R5)            Get Hex Data Word 1\n         MVC DSAWXL4B,4(R5)            Get Hex Data Word 2\n*\n         #WTO ('      ',DSAWKADR,'  ',                                 *\n               DSAWXL4A,' ',DSAWXL4B,' ',                              *\n               '                   ',                                  *\n               '*',DSAWCL16,'*'),                                      *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Return to Caller\n*\nDSAVE999 DS    0H\n         LM    R3,R6,DSASAVE4          Save Callers Registers\n         SUBEXIT ,\n*\n*=====================================================================*\n** DDSAE  - Display a DSA Entry Off R13                               *\n*=====================================================================*\n*\n* R3 -> R13 Savearea Address to Print\n*\nDDSAE    SUBNTRY ,\n         ST   R3,DSAWXL4A              Savearea Address to Print\n         STM  R3,R6,DSASAVE4           Save Callers Registers\n*\n         MVC  DSADCNAM,TRCDCSCT        Save CSECT Name\n*\n** Print DSA Header\n*\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('         Dymamic Storage At: ',DSAWXL4A,               *\n               ', For: ',DSADCNAM),                                    *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO  '         ------------------------------------------',  *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Print DSA Prefix\n*\nD        USING DSA,R3                  Temp Addressability\n         #WTO '         DSA Prefix',                                   *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         LA  R4,DSAPFXLN/16            Get Length of DSA Prefix\n         LR  R5,R3                     Address of Area to Print\n         DO FROM=(R4)                  Loop Through DSA Area\n            ST  R5,DSAWKADR            Save Address of This Data\n            MVC DSAWCL16,0(R5)         Get Character Data\n            TR  DSAWCL16,TRTABLE       In Printable Format\n            MVC DSAWXL4A,0(R5)         Get Hex Data Word 1\n            MVC DSAWXL4B,4(R5)         Get Hex Data Word 2\n            MVC DSAWXL4C,8(R5)         Get Hex Data Word 3\n            MVC DSAWXL4D,12(R5)        Get Hex Data Word 4\n*\n            #WTO ('         ',DSAWKADR,'  ',                           *\n               DSAWXL4A,' ',DSAWXL4B,' ',                              *\n               DSAWXL4C,' ',DSAWXL4D,'  ',                             *\n               '*',DSAWCL16,'*'),                                      *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n*\n            LA  R5,16(,R5)             Bump Input Pointer\n         ENDDO ,\n*\n** Print User Program DSA Area\n*\n         #WTO ' ',                                                     *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         L   R4,D.DSALNGTH             Get Length of DSA\n         SH  R4,=Y(DSAPFXLN+16)        Minus Prefix + Suffix\n         IF (LTR,R4,R4,NZ)             If We Have Data to Print\n            #WTO '         Program DSA Storage',                       *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n            SRL R4,4                   Divided by 16\n            LR R5,R3                   Address of Area to Print\n            AH R5,=Y(DSAPFXLN)         Plus Prefix\n            DO FROM=(R4)               Loop Through DSA Area\n               ST R5,DSAWKADR          Save Address of This Data\n               MVC DSAWCL16,0(R5)      Get Character Data\n               TR DSAWCL16,TRTABLE     In Printable Format\n               MVC DSAWXL4A,0(R5)      Get Hex Data Word 1\n               MVC DSAWXL4B,4(R5)      Get Hex Data Word 2\n               MVC DSAWXL4C,8(R5)      Get Hex Data Word 3\n               MVC DSAWXL4D,12(R5)     Get Hex Data Word 4\n*\n               #WTO ('         ',DSAWKADR,'  ',                        *\n               DSAWXL4A,' ',DSAWXL4B,' ',                              *\n               DSAWXL4C,' ',DSAWXL4D,'  ',                             *\n               '*',DSAWCL16,'*'),                                      *\n               SQUEEZE=NO,PLINE=TRCPLINE\n               GOSUB PPRNT\n*\n               LA R5,16(,R5)           Bump Input Pointer\n            ENDDO ,\n         ELSE ,\n            #WTO '         Program Has No DSA Data',                   *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n         ENDIF ,\n*\n** Print DSA Suffix\n*\n         #WTO ' ',                                                     *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO '         DSA Suffix',                                   *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         LR  R5,R3                     Address of Area to Print\n         A   R5,D.DSALNGTH             Point After DSA\n         SH  R5,=Y(16)                 Length of Suffix\n         ST  R5,DSAWKADR               Save Address of This Data\n         MVC DSAWCL16,0(R5)            Get Character Data\n         TR  DSAWCL16,TRTABLE          In Printable Format\n         MVC DSAWXL4A,0(R5)            Get Hex Data Word 1\n         MVC DSAWXL4B,4(R5)            Get Hex Data Word 2\n         MVC DSAWXL4C,8(R5)            Get Hex Data Word 3\n         MVC DSAWXL4D,12(R5)           Get Hex Data Word 4\n*\n         #WTO ('         ',DSAWKADR,'  ',                              *\n               DSAWXL4A,' ',DSAWXL4B,' ',                              *\n               DSAWXL4C,' ',DSAWXL4D,'  ',                             *\n               '*',DSAWCL16,'*'),                                      *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ' ',                                                     *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Return to Caller\n*\nDDSAE999 DS    0H\n         LM    R3,R6,DSASAVE4          Save Callers Registers\n         SUBEXIT ,\n         DROP  D                       Drop Temp Addressability\n*\n*=====================================================================*\n** DATBE  - Display a ATB Entry Off DAS in R13                        *\n*=====================================================================*\n*\n* R3 -> R13 DSA Savearea Address to Print\n*\nD        USING DSA,R3                  Temp Addressability\nA        USING ATB,R6                  Temp Addressability\n*\nDATBE    SUBNTRY ,\n         STM  R3,R6,DSASAVE4           Save Callers Registers\n*\n         MVC  DSAWXL4A,D.DSAATBAD      Get ATB Address for Print\n         MVC  DSAWXL4B,D.DSAATBAD+4    (Same)\n*\n         MVC  DSADCNAM,TRCDCSCT        Save CSECT Name\n*\n** Print DSA Header\n*\n         #WTO ' ',PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ('         Above-The-Bar Storage At: ',DSAWXL4A,         *\n               '_',DSAWXL4B,', For: ',DSADCNAM),                       *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO  ('         -------------------------------------------',*\n               '---------------'),SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Print ATB Prefix\n*\n         #WTO '         ATB Prefix',                                   *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n         LG  R6,D.DSAATBAD             Get ATB Address\n         LA  R4,ATBPFXLN/16            Get Length of DSA Prefix\n         LGR R5,R6                     Address of Area to Print\n*\n         DO FROM=(R4)                  Loop Through DSA Area\n            SAM64 ,                    Must be in 64-Bit mode\n            STG R5,DSAWKADR            Save Address of This Data\n            MVC DSAWCL16,0(R5)         Get Character Data\n            TR  DSAWCL16,TRTABLE       In Printable Format\n            MVC DSAWXL4A,0(R5)         Get Hex Data Word 1\n            MVC DSAWXL4B,4(R5)         Get Hex Data Word 2\n            MVC DSAWXL4C,8(R5)         Get Hex Data Word 3\n            MVC DSAWXL4D,12(R5)        Get Hex Data Word 4\n*\n            SAM31 ,                    Back to 31-Bit Amode For #WTO\n            #WTO ('         ',DSAWKADR,'_',DSAWKAD2,'  ',              *\n               DSAWXL4A,' ',DSAWXL4B,' ',                              *\n               DSAWXL4C,' ',DSAWXL4D,'  ',                             *\n               '*',DSAWCL16,'*'),                                      *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n            SAM64 ,                    Must be in 64-Bit mode\n*\n            LA  R5,16(,R5)             Bump Input Pointer\n         ENDDO ,\n*\n** Print User Program ATB Area\n*\n         SAM31 ,                       Back to 31-Bit Amode For #WTO\n         #WTO ' ',                                                     *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         SAM64 ,                       Must be in 64-Bit mode\n*\n         LG  R4,D.DSAATBSZ             Get Length of DSA\n         SH  R4,=Y(ATBPFXLN+16)        Minus Prefix + Suffix\n         IF (LTR,R4,R4,NZ)             If We Have Data to Print\n            SAM31 ,                    Back to 31-Bit Amode For #WTO\n            #WTO '         Program ATB Storage',                       *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n            SAM64 ,                    Must be in 64-Bit mode\n*\n            SRL R4,4                   Divided by 16\n            LGR R5,R6                  Address of Area to Print\n            AH R5,=Y(ATBPFXLN)         Plus Prefix\n            DO FROM=(R4)               Loop Through DSA Area\n               STG R5,DSAWKADR         Save Address of This Data\n               MVC DSAWCL16,0(R5)      Get Character Data\n               TR  DSAWCL16,TRTABLE    In Printable Format\n               MVC DSAWXL4A,0(R5)      Get Hex Data Word 1\n               MVC DSAWXL4B,4(R5)      Get Hex Data Word 2\n               MVC DSAWXL4C,8(R5)      Get Hex Data Word 3\n               MVC DSAWXL4D,12(R5)     Get Hex Data Word 4\n*\n               SAM31 ,                 Back to 31-Bit Amode For #WTO\n               #WTO ('         ',DSAWKADR,'_',DSAWKAD2,'  ',           *\n               DSAWXL4A,' ',DSAWXL4B,' ',                              *\n               DSAWXL4C,' ',DSAWXL4D,'  ',                             *\n               '*',DSAWCL16,'*'),                                      *\n               SQUEEZE=NO,PLINE=TRCPLINE\n               GOSUB PPRNT\n               SAM64 ,                 Must be in 64-Bit mode\n*\n               LA R5,16(,R5)           Bump Input Pointer\n            ENDDO ,\n         ELSE ,\n            SAM31 ,                    Back to 31-Bit Amode For #WTO\n            #WTO '         Program Has No ATB Data',                   *\n               SQUEEZE=NO,PLINE=TRCPLINE\n            GOSUB PPRNT\n            SAM64 ,                    Must be in 64-Bit mode\n         ENDIF\n*\n** Print DSA Suffix\n*\n         SAM31 ,                       Back to 31-Bit Amode For #WTO\n         #WTO ' ',                                                     *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO '         ATB Suffix',                                   *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         SAM64 ,                       Must be in 64-Bit mode\n*\n         LGR R5,R6                     Address of Area to Print\n         AG  R5,D.DSAATBSZ             Point After DSA\n         AGHI R5,-16                   Length of Suffix\n         STG R5,DSAWKADR               Save Address of This Data\n         MVC DSAWCL16,0(R5)            Get Character Data\n         TR  DSAWCL16,TRTABLE          In Printable Format\n         MVC DSAWXL4A,0(R5)            Get Hex Data Word 1\n         MVC DSAWXL4B,4(R5)            Get Hex Data Word 2\n         MVC DSAWXL4C,8(R5)            Get Hex Data Word 3\n         MVC DSAWXL4D,12(R5)           Get Hex Data Word 4\n*\n         SAM31 ,                       Back to 31-Bit Amode For #WTO\n         #WTO ('         ',DSAWKADR,'_',DSAWKAD2,'  ',                 *\n               DSAWXL4A,' ',DSAWXL4B,' ',                              *\n               DSAWXL4C,' ',DSAWXL4D,'  ',                             *\n               '*',DSAWCL16,'*'),                                      *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n         #WTO ' ',                                                     *\n               SQUEEZE=NO,PLINE=TRCPLINE\n         GOSUB PPRNT\n*\n** Return to Caller\n*\nDATBE999 DS    0H\n         SAM31 ,                       Back to 31-Bit Amode\n         LM    R3,R6,DSASAVE4          Save Callers Registers\n         SUBEXIT ,\n         DROP  D,A                     Drop Temp Addressability\n*\n*\n*=====================================================================*\n*                                                                     *\n** DCDE - Locate CDE and Extent List for Address                      *\n*                                                                     *\n*    This routine is given an storage address and attempts to find    *\n*  the load module that is loaded at that address.  It runs the CDE   *\n*  chain to the extent list and and checks the address against the    *\n*  storage extent.                                                    *\n*                                                                     *\n*  On Input:  R1       -> Address to Locate                           *\n*  On Output: DSADLMOD -> CDNAME of LMOD or Blanks                    *\n*                                                                     *\n*=====================================================================*\n*\n         USING TCB,R14                 Get TCB Addressability\n         USING CDENTRY,R15             Get CDE Addressability\n         USING XTLST,R2                Get XTLST Addressability\n*\nDCDE     SUBNTRY ,\n         MVC DSADLMOD,=CL8' '          Space Fill Receiving Field\n         MVC DSADEPAD,=F'0'            (Same)\n         MVC DSADOFST,=F'0'            (Same)\n         MVC DSADCSCT,=CL8' '          Space Fill Receiving Field\n         MVC DSADCSEP,=F'0'            (Same)\n*\n         L  R14,PSATOLD                Load Our TCB Address\n         L  R14,TCBJSTCB               CDE's Are Anchored Off JSTCB\n         IF (ICM,R15,15,TCBJPQ,NZ)     Get First CDE on Chain\n            DO INF                     Do Forever...\n               L  R2,CDXLMJP           Get Extent Pointer\n               XR R14,R14              Zero Work Register\n               ICM R14,7,XTLMSBLN      Get Length of Extent\n               AL  R14,XTLMSBAD        Plus Address for End Pointer\n*\n               IF (C,R1,GE,XTLMSBAD)      If Greater Than Beginning\n                  IF (CR,R1,LT,R14)       And Less Than End\n                     MVC DSADLMOD,CDNAME     Save CDNAME\n                     MVC DSADEPAD,CDENTPT    Save EP Address\n                     NI DSADEPAD,X'7F'       Strip High Bit\n                     NI DSADEPAD+3,X'FE'     Strip Low Bit When 64-Bit\n                     L  R2,DSAPSW+12         Get Offset Value\n                     S  R2,DSADEPAD          (Same)\n                     ST R2,DSADOFST          (Same)\n*\n                     MVC DSADCSCT,C.TRCDCSCT Get Current Csect Name\n                     MVC DSADCSEP,C.TRCDCSEP Get Current Csect EP\n                     L  R2,DSAPSW+12         Get Offset Value\n                     S  R2,DSADCSEP          (Same)\n                     ST R2,DSADCOFS          (Same)\n                     DOEXIT ,             -> Done\n                  ENDIF\n               ENDIF\n*\n               L  R15,CDCHAIN          Get next CDE Entry\n               IF (LTR,R15,R15,Z)      End of Chain?\n                  DOEXIT ,             Yes -> Done\n               ENDIF\n            ENDDO\n         ENDIF\n*\nDCDE999  DS    0H\n         SUBEXIT ,\n         DROP  R14,R15,R2              Drop Temp Bases\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n** PPRNT - Write a Line of Output                                     *\n*                                                                     *\n*    This routine is called to write a line of output.  That output   *\n*  line may be written to the sysout dataset for the task, or to the  *\n*  print buffer if BUFFER=YES was specified on the OPEN request.      *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nPPRNT    SUBNTRY ,\n         IF (TM,TRCBFLAG,TRCBBFON,Z)    If Not Buffering?\n            PUT TRCDCB,TRCPLINE         Yes -> Print Line\n         ELSE\n            L   R1,TRCBUFCR               Get Current Position\n            MVC 0(L'TRCPLINE,R1),TRCPLINE Move Line to Buffer\n            LA  R1,L'TRCPLINE(,R1)        Point at Next Slot\n            IF (C,R1,LT,TRCBUFND)       Past End of Buffer\n               ST R1,TRCBUFCR           Set Next Slot Pointer\n            ELSE\n               MVC TRCBUFCR,TRCBUFAD    Set First Slot as Next\n            ENDIF\n         ENDIF\n*\nPPRNT999 DS    0H\n         SUBEXIT ,\n*\n*---------------------------------------------------------------------*\n** Define Constants and Literials                                     *\n*---------------------------------------------------------------------*\n*\n** Define Literals and Constants\n*\n         CONBEG ,\n         DS    0D\nTRTABLE  DS    256C'.'                 Translate Table\n         ORG   TRTABLE+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   TRTABLE+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   TRTABLE+C'S'\n         DC    C'STUVWXYZ'\n         ORG   TRTABLE+C'a'\n         DC    C'abcdefghi'\n         ORG   TRTABLE+C'j'\n         DC    C'jklnmopqr'\n         ORG   TRTABLE+C's'\n         DC    C'stuvwxyz'\n         ORG   TRTABLE+C'0'\n         DC    C'0123456789'\n         ORG   TRTABLE+C'@'\n         DC    C'@'\n         ORG   TRTABLE+C'#'\n         DC    C'#'\n         ORG   TRTABLE+C'$'\n         DC    C'$'\n         ORG   TRTABLE+C','\n         DC    C','\n         ORG   ,\n*\nHEXTABA  DC    CL16'0123456789ABCDEF'\n*\nCL80AST  DC    0CL80,80C'*'\nCL80TTL  DC    CL80'*                           -> Program Abended <-'\n         ORG   *-1\n         DC    C'*'\n*\nCONEST   ESTAEX MF=L\nCONESTL  EQU   *-CONEST\n*\n         CONEND ,\n*\n*---------------------------------------------------------------------*\n** Define Dynamic Storage Area                                        *\n*---------------------------------------------------------------------*\n*\n         DSABEG ,\n*\nDSASAVE4 DS    4A                      Register Save Area - PLNK\n*\nDSACMP   DS    CL5                     Current Completion Code\nDSARSC   DS    A                       Current Reason Code\nDSAILC   DS    CL1                     Current Instruction Length Code\n*\nDSACL1A  DS    CL1                     1st Register Number\nDSACL1B  DS    CL1                     2nd Register Number\nDSAPAR   DS    A                       1st Access  Reg Print Area\nDSAPGH   DS    A                       1st General Reg High Word\nDSAPGL   DS    A                       1st General Reg Low  Word\nDSAQAR   DS    A                       2nd Access  Reg Print Area\nDSAQGH   DS    A                       2nd General Reg High Word\nDSAQGL   DS    A                       2nd General Reg Low  Word\n*\nDSADLMOD DS    CL8                     Current LMOD  Name\nDSADEPAD DS    A                       Current LMOD EP Address\nDSADOFST DS    A                       Current LMOD Offset to PSW Ad\nDSADOFS1 EQU   DSADOFST+1,3,C'X'       (Same)\n*\nDSADCSCT DS    CL8                     Current Csect Name\nDSADCSEP DS    A                       Current Csect EP\nDSADCOFS DS    A                       Current Csect OFfset\nDSADCOF1 EQU   DSADCOFS+1,3,C'X'       (Same)\n*\nDSADCNAM DS    CL8                     Current CSECT Name\n*\n         DS    0D                <===* Keep Together\nDSAWKADR DS    XL4                   * Address of Data to Print\nDSAWKAD2 DS    XL4               <===* (Same)\n*\nDSAWXL4A DS    XL4                     4-Byte Work Areas for Print\nDSAWXL4B DS    XL4                     (Same)\nDSAWXL4C DS    XL4                     (Same)\nDSAWXL4D DS    XL4                     (Same)\nDSAWCL16 DS    CL16                    16-Byte Work Area\n*\nDSALSTP  DS    B                       Linkage Stack Type\nDSAFLAG  DS    B                       General Flag Byte\nDSAPC    EQU   X'80'                   ..LSEN is PC Entry\nDSABAKR  EQU   X'40'                   ..LSEN is BAKR Entry\n*\n         DS    0D\nDSAPSW   DS    0XL16                   PSW to Print\nDSAPSW1  DS    A                       (Same)\nDSAPSW2  DS    A                       (Same)\nDSAPSW3  DS    A                       (Same)\nDSAPSW4  DS    A                       (Same)\n*\nDSADAPAD DS    A                       Address of Data At PSW\nDSADAPSW DS    0XL16                   Data At PSW\nDSADAPS1 DS    XL4                     (Same)\nDSADAPS2 DS    XL4                     (Same)\nDSADAPS3 DS    XL4                     (Same)\nDSADAPS4 DS    XL4                     (Same)\n*\n*\n** Current Register Values for Printing\n*\n         DS    0D\nDSAACRS  DS    XL64                  Access Registers\n*\n         DS    0D\nDSAGR64  DS    0XL128                64-Bit Registers\nDSAGR0   DS    D                     (Same)\nDSAGR1   DS    D                     (Same)\nDSAGR2   DS    D                     (Same)\nDSAGR3   DS    D                     (Same)\nDSAGR4   DS    D                     (Same)\nDSAGR5   DS    D                     (Same)\nDSAGR6   DS    D                     (Same)\nDSAGR7   DS    D                     (Same)\nDSAGR8   DS    D                     (Same)\nDSAGR9   DS    D                     (Same)\nDSAGR10  DS    D                     (Same)\nDSAGR11  DS    D                     (Same)\nDSAGR12  DS    D                     (Same)\nDSAGR13  DS    D                     (Same)\nDSAGR14  DS    D                     (Same)\nDSAGR15  DS    D                     (Same)\n*\n         DS    0D\nDSACREGS DS    0XL64                 Control Registers at Abend\nDSACR0   DS    A                     (Same)\nDSACR1   DS    A                     (Same)\nDSACR2   DS    A                     (Same)\nDSACR3   DS    A                     (Same)\nDSACR4   DS    A                     (Same)\nDSACR5   DS    A                     (Same)\nDSACR6   DS    A                     (Same)\nDSACR7   DS    A                     (Same)\nDSACR8   DS    A                     (Same)\nDSACR9   DS    A                     (Same)\nDSACR10  DS    A                     (Same)\nDSACR11  DS    A                     (Same)\nDSACR12  DS    A                     (Same)\nDSACR13  DS    A                     (Same)\nDSACR14  DS    A                     (Same)\nDSACR15  DS    A                     (Same)\n*\n         DS    0D\nDSAPNTRY DS    XL(TRCDLNTH)            Previous Save Area Entry\n         DS    0D\nDSACNTRY DS    XL(TRCDLNTH)            Current  Save Area Entry\n*\n         DSAEND ,\n         DROP   ,                    Drop Everything\n*\n***********************************************************************\n*                                                                     *\n** RDHRESEX - Resource Manager Exit Routine                           *\n*                                                                     *\n*    This routine was required to support buffering of sysout data    *\n*  for this trace facility.  The data is buffered in a round robin    *\n*  in storage table and printed at end of task.                       *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n         USING TRCDSECT,R9             TRCDSCET Addressability\n         USING SDWA,R7                 SDWA Addressability\n*\nRDHRESEX PGMNTRY TYPE=MAIN,                                            *\n               BASE=(R12,R11),                                         *\n               AMODE=31,               Define Addressing Mode          *\n               RMODE=ANY,              Define Residency Mode           *\n               ESTAE=YES,              Define ESTAE Support            *\n               TRACE=NO\n*\n         L     R9,4(,R1)               Get Address of 8-Byte Param\n         L     R9,4(,R9)               Get Address of TRCDSECT\n         MODESET MODE=SUP,KEY=ZERO\n*\n** RESMGR Exit Mainline\n*\n         MVC   DSARETRY,=A(RDHRETRY)   Set Retry Address\n         GOSUB CLOS                    Close SYSOUT & Free Storage\n*\n** Retry Here on Error\n*\nRDHRETRY DS    0H\n*\n** Return to Caller\n*\nRDHRESND DS    0H\n         PGMEXIT RC=8,                 Return to Caller                *\n               RS=1                    ..Terminate RESMGR Exit\n*\n*=====================================================================*\n** CLOS - Close the SYSOUT Dataset and do cleanup for this task       *\n*=====================================================================*\n*\nCLOS     SUBNTRY ,\n         RESMGR DELETE,TYPE=TASK,      Delete RESMGR Exit This Task    *\n               ASID=CURRENT,           ..And This Address Space        *\n               TOKEN=TRCRESMT,         ..Token for DELETE              *\n               MF=(E,TRCRESM)          ..Point to List Form\n*\n         IF (CLC,=F'0',NE,TRCBUFAD)    If Buffering Was Requested\n            BAS R14,PBFR               Write Out Buffered Data\n            L  R1,TRCBUFAD             Save Address\n            L  R0,TRCBUFLN             Save Length\n            STORAGE RELEASE,           Release Storage for Buffer      *\n               LENGTH=(0),             (Same)                          *\n               ADDR=(1)                (Same)\n         ENDIF\n*\n** Close Open Dataset For This Task\n*\n         MVC TRCCLL,MDLCLL             Move Close Parm to Common\n         CLOSE (TRCDCB),               Close Sysout Dataset            *\n               MF=(E,TRCCLL)            (Same)\n*\n** Free Storage For TRCDAREA\n*\n         L     R1,TRCDADDR             Get Address of Area to Free\n         STORAGE RELEASE,ADDR=(1),     Free Storage for TRCDAREA       *\n               SP=240,                 (Same)                          *\n               LENGTH=TRCDSIZE         (Same)\n*\n** Free Storage for TRCDSECT\n*\n         STORAGE RELEASE,              Free Storage for TRCDSECT       *\n               ADDR=(R9),              (Same)                          *\n               LENGTH=4096             (Same)\n*\n** Return to Caller\n*\nCLOS999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** PBFR - Print the Buffered Output to SYSOUT                         *\n*=====================================================================*\n*\nPBFR     SUBNTRY ,\n         L  R2,TRCBUFCR                 Get Current Position\n         IF (CLI,0(R2),NE,X'00')        If We've Filled Buffer?\n            DO WHILE=(C,R2,LT,TRCBUFND) Loop Through Buffer to End\n               IF (CLI,0(R2),EQ,X'00')  If at End?\n                  DOEXIT ,              -> Done\n               ENDIF ,\n               MVC TRCPLINE,0(R2)      Move Data to DSA\n               LA R2,L'TRCPLINE(,R2)   Bump Pointer\n               PUT TRCDCB,TRCPLINE     Print Line to SYSOUT\n            ENDDO ,                    -> Loop\n         ENDIF ,\n*\n         L  R2,TRCBUFAD                Start From Beginning\n         DO WHILE=(C,R2,LT,TRCBUFCR)   Loop Through to End Pointer\n            IF (CLI,0(R2),EQ,X'00')    If at End?\n               DOEXIT ,                -> Done\n            ENDIF ,\n            MVC TRCPLINE,0(R2)         Move Data to DSA\n            LA  R2,L'TRCPLINE(,R2)     Bump Pointer\n            PUT TRCDCB,TRCPLINE        Print Line to SYSOUT\n         ENDDO ,                       -> Loop\n*\nPBFR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n** Define Constant Area & Dynamic Storage Area\n***********************************************************************\n*\n** Define Literials and Constants\n*\n         CONBEG ,\nMDLCLL   CLOSE (*-*),MF=L\nMDLCLLL  EQU   *-MDLCLL\n         CONEND ,\n*\n** Define Dynamic Storage\n*\n         DSABEG ,\n*\n         DSAEND ,\n         DROP ,\n         END ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHTRACG": {"ttr": 31236, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x00\\xbf\\x00\\xbf\\x00\\x00\\xd9\\xc4\\xc8\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:00", "lines": 191, "newlines": 191, "modlines": 0, "user": "RDHSRC"}, "text": "***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHTRACG - Glue Code for #TRACE BASR Implementation                *\n*                                                                     *\n*    This program gets control via BASR from the execution of a       *\n*  #TRACE Macro.  It's sole purpose for existence is to fill in       *\n*  the TRGDSECT area and call RDHTRACE to process the #TRACE trace    *\n*  point.                                                             *\n*    The TRGDSECT area is common for all implementations of #TRACE    *\n*  including BASR, SVC and TRAP2.  This glue code allows RDHTRACE     *\n*  to be independent of the implementation being used.                *\n*                                                                     *\n*                                                                     *\n*  Date     FIX-ID Programmer Description                             *\n*  ======== ====== ========== ======================================= *\n*  02/02/06  M001  R. Harper  Module Developed                        *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                   PSA  Mapping Macro\n         CVT   DSECT=YES             CVT  Mapping Macro\n         IKJTCB  ,                   TCB  Mapping Macro\n         IHASTCB ,                   STCB Mapping macro\n         IHARB ,                     PRB  Mapping macro\n         IHAXSB ,                    XSB  Mapping macro\n         DCBD DSORG=PS               DCB  Mapping Macto\n         IHASDWA ,                   SDWA Mapping macro\nSDWLEN   EQU   SDWAEND-SDWA               ..Length of SDWA\n*\n         PRINT ON,NOGEN\n         LSEDSECT ,                  Linkage Stack Entry DSECT\n         TRPDSECT ,                  #TRACE Trap Point Dsect\n         TRGDSECT ,                  #TRACE Glue DSECT Area\n*\n***********************************************************************\n* RDHTRACG - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n         USING TRGDSECT,R10          Trace TRG Addressability\n         USING LSEN,TRGLSEN          Linkage Stack Entry\n         USING TRPDSECT,R9           Trace TRP Addressability\n*\nRDHTRACG PGMNTRY TYPE=SUB,           Establish Main Entry Point        *\n               BASE=(R12,R11),       Base Registers                    *\n               TRACE=NO,PRINT=GEN    No Traces Here - Just Yet\n*\n** Program MainLine\n*\n         LR    R14,R13               Save Our DSA Address\n         EREG  R13,R13               Restore Caller's R13\n         XC    8(4,R13),8(R13)       Zero Forward Pointer\n         LR    R13,R14               Load Our DSA Address\n*\n         LA    R10,DSATRG            Get TRGDSECT Addressability\n         ST    R1,TRGTRPAD           Save Input Parms\n         LR    R9,R1                 Get TRPDSECT Addressability\n*\n         GOSUB INIT                  Do Initialization Processing\n         GOSUB MAIN                  Do Main Processing\n*\n** Return to Caller\n*\n         LG    R0,LSENGR0            Restore General Registers\n         LG    R1,LSENGR1            (Same)\n         LG    R14,LSENGR14          (Same)\n         LG    R15,LSENGR15          (Same)\n         LAM   AR0,AR15,LSENAR0      Restore Access Registers\n*\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nL        USING LSEN,R2               Real Linkage Stacl Address\n*\nINIT     SUBNTRY ,\n         MVC   TRGEYECT,=C'TRGDSECT' Set Eye Catcher\n         STCTG CR0,CR15,TRGCNTRL     Get Control Registers\n*\n** Assure Stack Entry is 64-Bit if Current PSW is 64-Bit\n*\n*    There is s problem with the linkage stack entry in 64-bit mode\n*  in that the addressing mode bits in the return PSW are set to\n*  zero by the BAKR and not preserved.  So if we are entered in\n*  64-Bit mode we have to set the addressing mode bits in PSW in\n*  the linkage stack entry.  Failing to do that will result in the\n*  program receiving control in 24-Bit Mode upon the execution of\n*  the PR instruction.  This is not good, therefore this workaround.\n*\n*\n         EPSW  R14,R15               Get Current PSW First 64 Bits\n         STM   R14,R15,DSAPSW        (Same)\n         L     R2,TRGCR15+4          Get Linkage Stack Address\n         SH    R2,=Y(LSENLNTH)       Back up to BAKR Entry\n         IF (TM,DSAPSW+3,X'01',O)       If We're in Z-Arch Mode?\n*temp       OC L.LSENPSW1+3(2),=X'0180'    Set AMODE=64 in Return PSW\n         ENDIF\n         DROP  L\n*\n** Extract Copy of Linkage Stack Entry\n*\n         L     R0,TRGCR15+4          Get Linkage Stack Address\n         SH    R0,=Y(LSENLNTH)       Back up to BAKR Entry\n         LA    R1,L'TRGLSEN          Length for MVCL\n         LA    R14,TRGLSEN           Set To Address\n         LR    R15,R1                Set To Length\n         MVCL  R14,R0                Move Linkage Stack Entry\n*\n         LG    R2,LSENGR13               Get Callers R13\nC        USING DSA,R2                    & Addressability\n         MVC   LSENGR14(16),C.DSASAVER   Get Real Values for 14-1\n         MVC   LSENGR0(16),C.DSASAVER+16 (Same)\n*\n         MVC TRGASCB,PSAAOLD         Address of Current ASCB\n         MVC TRGTCB,PSATOLD          Address of Current TCB or Zero\n         OI  TRGFLAG1,TRG1BSRI       Indicate BASR Implementation\n         IF (OC,TRGTCB,TRGTCB,Z)     Are We in SRB Mode?\n            OI TRGFLAG1,TRG1SRBM     Yes -> Indicate This\n         ENDIF ,\n*\n** Return to Caller\n*\nINIT999  DS    0H\n         SUBEXIT ,\n         DROP  C                     Drop Temp Addressability\n*\n*=====================================================================*\n** MAIN - Do Main Processing                                          *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         SAM31                       Enter RDHTRACE in 31-Bit Mode\n         CALL  RDHTRACE,             Call Trace Point Processor        *\n               ((R10)),VL,           Pass TRGDSECT Address             *\n               MF=(E,DSAPLIST)\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                    Define Constant Area\n*\n*\n         CONEND ,                    Define End of Constant Area\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\nDSAPSW   DS    D                     PSW On Entry\n*\n         DS    0D                    Doubleword Aligned\nDSATRG   DS    XL(TRGLNGTH)          Space for TRGDSECT\n*\n         DSAEND ,                    Define DSA Suffix\n         END   ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHTRAPI": {"ttr": 31240, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x01\\xdd\\x01\\xdd\\x00\\x00\\xd9\\xc4\\xc8\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:00", "lines": 477, "newlines": 477, "modlines": 0, "user": "RDHSRC"}, "text": "***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHTRAPI - DUCT Trap Routine Installer                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  Date     FIX-ID Programmer Description                             *\n*  ======== ====== ========== ======================================= *\n*  03/09/09  M001  R. Harper  Module Developed                        *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                   PSA  Mapping Macro\n         CVT   DSECT=YES             CVT  Mapping Macro\n         IKJTCB  ,                   TCB  Mapping Macro\n         IHASTCB ,                   STCB Mapping macro\n         IHARB ,                     PRB  Mapping macro\n         IHAXSB ,                    XSB  Mapping macro\n         DCBD DSORG=PS               DCB  Mapping Macto\n         IHASDWA ,                   SDWA Mapping macro\nSDWLEN   EQU   SDWAEND-SDWA               ..Length of SDWA\n*\n         PRINT ON,NOGEN\n         DUCDSECT ,                  Map the DUCT Control Blocks\n         TRGDSECT ,                  Trace Glue Area\n         LSEDSECT ,                  Linkage Stack Entry DSECT\n*\n***********************************************************************\n* RDHTRAPI - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\n         USING TSVDSECT,R8           Establish Addressability\n         USING TRGDSECT,TSVTRGAR     Establish Addressability\n         USING DUCCTRCB,TSVTRPCB     DUCT Control Block\n         USING DUCSAVEA,TSVTRPSV     DUCT Save Area\n         USING DUCTO,R9              DUCT in Real Storage\n*\nRDHTRAPI PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       Base Registers                    *\n               PRINT=GEN,            (Can Use Traces Here)             *\n               TRACE=NO,IMP=BASR     (Can Use Traces Here)\n*\n** Program MainLine\n*\n         STCTL CR2,CR2,DSACR2          Get Real Address of DUCT\n         L     R9,DSACR2               Load Control Register 2\n         SRL   R9,6                    Strip Low Six Bits\n         SLL   R9,6                    (Same)\n         LA    R5,DUCTTRPC             Point Reg at Word to Update\n         LURA  R2,R5                   Load Trap Control Block Addr\n*\n         IF (LTR,R2,R2,Z)              If the DUCT Not Installed?\n            GOSUB INIT                 Do Initialization\n            GOSUB HDCT                 Hook the DUCT\n*\n*temp       GOSUB TEST                 Test Glue Code\n         ENDIF\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n** Issue Storage Obtain LINKAGE=BRANCH\n*\n         SETLOCK OBTAIN,TYPE=LOCAL,     Get Local Lock                 X\n               MODE=UNCOND,REGS=STDSAVE (Same)\n*\n         XR    R4,R4                    Indicate Current TCB\n         L     R7,PSAAOLD               Address of Current ASCB\n         STORAGE OBTAIN,                Get Storage for Work Area      *\n               LENGTH=TSVLNGTH,         (Same)                         *\n               SP=252,                  (Same)                         *\n               KEY=0,                   (Same)                         *\n               LOC=(31,31),             (Same)                         *\n               BNDRY=PAGE,              (Same)                         *\n               LINKAGE=BRANCH           (Same)\n         LR    R8,R1\n         MVC   TSVEYECT,=C'TSV '        Set Eye Catcher\n         MVC   TRGEYECT,=C'TRGDSECT'    Set Eye Catcher\n*\n         SETLOCK RELEASE,TYPE=LOCAL,    Release Local Lock             X\n               REGS=STDSAVE             (Same)\n*\n         #TRACE DATA=('STORAGE SP252 Storage',0(R8),64),REGS=(R15)\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TEST - Test Glue Code                                              *\n*=====================================================================*\n*\nTEST     SUBNTRY ,\n         LM    R1,R9,=A(1,2,3,4,5,6,7,8,9)\n         LAM   R0,R15,=16A(3)\n         #TRACE REGS=ALL\n*\n         #TRACE REGS=ALL\n         LM    R1,R9,=A(1,2,3,4,5,6,7,8,9)\n         LAM   R0,R15,=16A(3)\n         TRAP2 ,                        Test Installation\n         STAM  R0,R15,DSAARS\n         #TRACE REGS=ALL,DATA=('Access Regs',DSAARS,64)\n*\nTEST999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** HDCT - Hook Our Trap Routine into the DUCT                         *\n*=====================================================================*\n*\n         USING DUCTO,R9                 DUCT in Real Storage\n*\nHDCT     SUBNTRY ,                  -*- Get Address of DUCTO From CR2\n         STCTL CR2,CR2,DSACR2           Get Real Address of DUCT\n         L     R9,DSACR2                Load Control Register 2\n         SRL   R9,6                     Strip Low Six Bits\n         SLL   R9,6                     (Same)\n*\n         LA    R4,TSVTRPCB+1            Get TRAP Save Area + (E)\n         LA    R5,DUCTTRPC              Point Reg at Word to Update\n         STURA R4,R5                    Set Trap CB in DUCT\n*\n** Initialize Trap Control Block\n*\n         OI    DUCCFLAG,DUCCR+DUCCP     Say 64-bit Registers & PSW\n         LA    R14,TSVTRPSV             Get TRAP Savearea Address\n         ST    R14,DUCCSAVA             Set in DSATRPCB\n         L     R14,=V(RDHTRAPG)         Get Trap Processing Program\n         ST    R14,DUCCTRPA             Set in DSATRPCB\n         LR    R14,R8                   Get TSVDSECT Address\n         ST    R14,DUCCUWD1             Set in DSATRPCB\n*\n** Move DUCT to DSA for Display\n*\n         LA R1,16                       Words to Move\n         LA R14,DSADUCT                 To Address Virtual\n         LR R15,R9                      From Address Real\n         DO FROM=(R1)                   Loop 16 words\n            LURA R2,R15                 ..Load a Word\n            ST   R2,0(,R14)             ..Store a Word\n            AHI  R14,4                  ..Bump Pointers\n            AHI  R15,4                  ..(Same)\n         ENDDO ,                        -> Loop\n*\n** Show Your Work\n*\n         #TRACE DATA=('DUCT from CR2',DSADUCT,L'DSADUCT)\n         #TRACE DATA=('DUCT Control Block',TSVTRPCB,L'TSVTRPCB)\n         #TRACE DATA=('TRAP Save Area',TSVTRPSV,L'TSVTRPSV)\n*\n** Return to Caller\n*\nHDCT999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                    Define Constant Area\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Define Common Equates\nHEX80    EQU   X'80'                 (Same)\nHEX40    EQU   X'40'                 (Same)\nHEX00    EQU   X'00'                 (Same)\n*\n         CONEND ,                    Define End of Constant Area\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\n*\nDSAPASID DS    H\n*\n*\nDSACR2   DS    A                     Control Register 2\nDSADUCT  DS    XL64\nDSAARS   DS    XL64\n*\n         DSAEND ,                    Define DSA Suffix\n         DROP  ,                     Drop Everything\n*\n***********************************************************************\n*                                                                     *\n** RDHTRAPG - Glue Code for DUCT Trap Routine                         *\n*                                                                     *\n*    This program gets control as a result of the execution of a      *\n*  TRAP2/4 instruction.  It is entered DAT(ON), Enabled, AMODE(31/64) *\n*  Primary Mode, in Supervisor State, KEY(0).                         *\n*    Access registers AR1 is always zero indicating primary or PASN   *\n*  home address space and AR15 Has A(2) indicating HASN.  R15 points  *\n*  to the Trap Control Block and the real value of R15 and AR15 are   *\n*  in that control block.  AR2-AR14 contain the values at the moment  *\n*  of the TRAP2/4 instruction.                                        *\n*                                                                     *\n*    The glue gode here is needed because we don't have a valid       *\n*  savearea in R13.  DUCCUWD1 has the address of the TSVDSECT and     *\n*  we use the first 9D words as a savearea for this glue code         *\n*  routine.  It then calls RDHTRAP which does all processing for      *\n*    It fills in the TRVDSECT area with all the information required  *\n*  by the TRAP Exit Routine, including the Linkage Stack Entry on     *\n*  Entry to this routine, and the current Control Registers. The      *\n*  TRAP Control Block and the TRAP Savearea are embedded within the   *\n*  TSVDSECT for this Dispatchable Unit.                               *\n*    It then calls RDHTRAP which does all processing for the TRAP     *\n*  request during testing, or RDHTRACE to process the trace point.    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\n         USING TSVDSECT,R13            User Area Address\n         USING TRGDSECT,TSVTRGAR       Establish Addressability\n         USING DUCCTRCB,R10            Control Block Address\n         USING DUCSAVEA,R9             Save Area Address\n*\n         USING RDHTRAPG,R12            Get Program Addressability\n*\nRDHTRAPG RSECT ,\nRDHTRAPG AMODE 31\nRDHTRAPG RMODE ANY\n         BAKR  R0,R0                   Save Current Status on Stack\n         LARL  R12,RDHTRAPG            Initialize Base Register\n         LR    R10,R15                 Get Trap Control Block Address\n*\n         EPSW  R14,R15                 Load Current PSW Status\n         SAM31 ,                       Assure We're in 31-Bit mode\n         L     R9,DUCCSAVA             Get Trap Save Area Address\n         L     R13,DUCCUWD1            Get Save Area Address\n         STM   R14,R15,TSVPSW          Save Incomming PSW Status\n*\n         ST    R1,TRGTRPAD             Save Input Parms\n*\n** Save Control Registers and Copy Linkage Stack Entry\n*\n         STCTG CR0,CR15,TRGCNTRL       Save Control Regs for Traces\n*\n         L     R14,TRGCR15+4           Get Addr of Real LSEN Entry\n         SH    R14,=Y(LSENLNTH)        Back up to BAKR Entry\n         USING LSEN,R14                Obtain Addressability\n*\n         MVC   LSENAR15,DUCSAR15       Reset AR15 in LSEN\n         MVC   LSENGRGS,DUCSREGS       Get Regs From DUCT\n         MVC   LSENPSW1,DUCSPSW        Put Return PSW in Linkage Stk\n         MVC   LSENPSW2,DUCSPSW+8      (Same)\n         DROP  R14                     Drop Temp Addressability\n*\n         L     R0,TRGCR15+4            Save Linkage Stack for Traces\n         SH    R0,=Y(LSENLNTH)         Back up to BAKR Entry\n         LA    R1,L'TRGLSEN            Length for MVCL\n         LA    R14,TRGLSEN             Set To Address\n         LR    R15,R1                  Set To Length\n         MVCL  R14,R0                  Move Linkage Stack Entry\n*\n** Update PSW in Linkage Stack Entry to Point After TRAP2 Instruction\n*\n         MVC TRGASCB,PSAAOLD           Address of Current ASCB\n         MVC TRGTCB,PSATOLD            Address of Current TCB or Zero\n         OI  TRGFLAG1,TRG1TRPI         Indicate TRAP2 Implementation\n         IF (OC,TRGTCB,TRGTCB,Z)       Are We in SRB Mode?\n            OI TRGFLAG1,TRG1SRBM       Yes -> Indicate This\n         ENDIF ,\n*\n** Call Test Program to Test Linkage\n*\n*        LR    R1,R13                  Pass TSVDSECT Area\n*        L     R15,=V(RDHTRAP)         Get Address of Main Program\n*        BASR  R14,R15                 Call RDHTRAP\n*\n** Call RDHTRACE to Process Trace Point\n*\n         LA    R8,TSVTRGAR             Pass TRGDSECT Address\n         CALL  RDHTRACE,               Call Trace Point Processor      *\n               ((R8)),VL,              Pass TRGDSECT Address           *\n               MF=(E,TRGPLIST)\n*\n** Return to Invoker after TRAP2 Via PR\n*\n         USING LSEN,TRGLSEN            Obtain Addressability\n         LAM   AR0,AR1,LSENAR0         Reload Access Registers\n         LAM   AR14,AR15,LSENAR14      (Same)\n         LMG   R0,R1,LSENGR0           Reload General Registers\n         LMG   R14,R15,LSENGR14        (Same)\n*\n         PR                            No Operands -> After TRAP2\n*\n         LTORG ,                       Define Literal Pool\n*\n         ORG RDHTRAPG+(*-RDHTRAPG+255)/256*256 Round to 256-Byte Bndry\n         DS  0H\n         DROP  ,                       Drop All Bases\n*\n***********************************************************************\n*                                                                     *\n** RDHTRAP - DUCT Trap Main Entry Point - For Testing Interface       *\n*                                                                     *\n*    This program gets control as a result of the execution of a      *\n*  TRAP2/4 instruction.  It is entered DAT(ON), Enabled, AMODE(31/64) *\n*  Primary Mode, in Supervisor State, KEY(0), and all Access          *\n*  Registers contain F'0', except AR0 which has garbage.              *\n*                                                                     *\n*    There does exist a problem here in that the access reisters      *\n*  are not saved in the DUCT Trap Save Area, So, I added a Work       *\n*  Area pointed to off DUCCUWD1 to hold that information, be used as  *\n*  the MVS Savearea for the glue code and perhaps other usefull       *\n*  things.                                                            *\n*                                                                     *\n*    We have to determine if we are in 64-bit mode or just force      *\n*  us into 31-bit mode.                                               *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\n         USING TSVDSECT,R10          Trap TSV Addressability\n         USING TRGDSECT,TSVTRGAR     Establish Addressability\n         USING DUCCTRCB,TSVTRPCB     DUCT Control Block\n         USING DUCSAVEA,TSVTRPSV     DUCT Save Area\n         USING LSEN,TRGLSEN          Obtain Addressability\n*\nRDHTRAP  PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               MSG='DUCT Trap Main Entry Point',                       *\n               BASE=(R12,R11),       Base Registers                    *\n               TRACE=NO,                                               *\n               PRINT=GEN\n         LR    R10,R1                Get TSV Addressability\n*\n** Program MainLine\n*\n         GOSUB TINI                  Do Initialization Processing\n         GOSUB TMAN                  Do Main Processing\n         GOSUB TTRM                  Do Termination Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** TINI - Do Initialization Processing                                *\n*=====================================================================*\n*\nTINI     SUBNTRY ,\n         MVC TRGASCB,PSAAOLD         Address of Current ASCB\n         MVC TRGTCB,PSATOLD          Address of Current TCB or Zero\n         IF (OC,TRGTCB,TRGTCB,Z)     Are We in SRB Mode?\n            OI TRGFLAG1,TRG1SRBM     Yes -> Indicate This\n         ENDIF ,\n*\n         #TRACE DATA=('Control Registers',TRGCNTRL,128)\n         #TRACE DATA=('DUCT Control Block',TSVTRPCB,DUCCTRLN)\n         #TRACE DATA=('TRAP Save Area',TSVTRPSV,DUCSAVLN)\n         #TRACE DATA=('Linkage Stack Entry',TRGLSEN,L'TRGLSEN)\n*\n*\n*\nTINI999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TTRM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTTRM     SUBNTRY ,\n*\n*\nTTRM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TMAN - Do Main Processing                                          *\n*=====================================================================*\n*\nTMAN     SUBNTRY ,\n*\nTMAN999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                    Define Constant Area\n*\n*\n         CONEND ,                    Define End of Constant Area\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\nDSAREGS  DS     8D                   AR Registers On Entry\nDSTPSW   DS     D\n*\n         DSAEND ,                    Define DSA Suffix\n*\n***********************************************************************\n* TSVDSECT - Trap Program Save Area -> DUCSUWD1                       *\n***********************************************************************\n*\n*   This area is defined is the standard MVS Savearea for the initial\n* entry point to the Trap Exit Routine.  It's address is in DUCSUWD1\n* in the trap control block.  It contain the Savearea, the Trap\n* Control Block, the Trap Save Area and whatever the hell else I see\n* need to put there for use by the Trap Exit routine.\n*   This sorage is in Subpool(252), Key(0) storage, is owned by the\n* Job Step task, and will be freed by the RDHTRACE Resource Manager\n* Exit Routine, or the Operating System at Job Step Termination.\n*\n*\nTSVDSECT DSECT ,\nTSVEYECT DS    CL4'TSV '             EyeCatcher\n         ORG   TSVDSECT              Reset\nTSVSAVEA DS    9D                    Standard Savearea - Trap Glue Code\nTSVPSW   DS    D                     1St Half PSW At Entry to Glue Code\n*\n         DS    0D\nTSVTRPCB DS    XL(DUCCTRLN)          Space for Trap Control Block\n         DS    0D\nTSVTRPSV DS    XL(DUCSAVLN)          Space for Trap Save Area\n         DS    0D\nTSVTRGAR DS    XL(TRGLNGTH)          Space for TRG Dsect Area\n*\n         DS    0D\nTSVLENTH EQU   *-TSVDSECT            Show length Used\n         ORG   TSVDSECT+4096         Allocate a Whole Page\n         DS    0D                    End on Doubleword\nTSVLNGTH EQU   *-TSVDSECT            Length of User Area\n         END   ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RDHTRSVC": {"ttr": 31492, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12\\x00\\x01\\x13\\x01\\x13\\x00\\x00\\xd9\\xc4\\xc8\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:00:00", "lines": 275, "newlines": 275, "modlines": 0, "user": "RDHSRC"}, "text": "***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHTRSVC - Label Level Tracing SVC Glue Code                       *\n*                                                                     *\n*    This program gets control via SVC from the execution of a        *\n*  #TRACE Macro.  It's primary purpose for existence is to fill in    *\n*  the TRGDSECT area and call RDHTRACE to process the #TRACE trace    *\n*  point.                                                             *\n*    The TRGDSECT area is common for all implementations of #TRACE    *\n*  including BASR, SVC and TRAP2.  This glue code allows RDHTRACE     *\n*  to be independent of the implementation being used.  And having    *\n*  multiple implementations allows me to use one stable version       *\n*  to test a working version of RDHTRACE, or using the traces to      *\n*  trace the traces.                                                  *\n*                                                                     *\n*                                                                     *\n*  Date     FIX-ID Programmer Description                             *\n*  ======== ====== ========== ======================================= *\n*  02/02/06  M001  R. Harper  Module Developed                        *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n*\n         IHAPSA  ,                   PSA  Mapping Macro\n         CVT   DSECT=YES             CVT  Mapping Macro\n         IHASTCB ,                   STCB Mapping macro\n         IHAXSB ,                    XSB  Mapping macro\n         DCBD DSORG=PS               DCB  Mapping Macto\n         IHASDWA ,                   SDWA Mapping macro\n*\n         LSEDSECT ,                  Linkage Stack Entry DSECT\n         TRGDSECT ,                  #TRACE Glue DSECT Area\n*\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHTRSVC - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Define PSA Addressability\n         USING TRGDSECT,R10            Trace TRG Addressability\n         USING LSEN,TRGLSEN            Linkage Stack Entry\n*\nRDHTRSVC SVCNTRY SVCNO=166,            Program Entry Code              *\n               BASE=(R11),             (Same)                          *\n               TRACE=NO,               (Same)                          *\n               IMP=BASR                (Same)\n*\n         LA    R10,DSATRG              Get TRGDSECT Addressability\n         ST    R1,TRGTRPAD             Save Input Parms\n*\n** Program Mainline\n*\n         GOSUB INIT                    Perform Initialization\n         GOSUB MAIN                    Do Main Processing\n*\n** Return to Caller\n*\nMAINEXIT DS    0H\n         SVCEXIT RC=0                  Define Program Exit Code\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         MVC   TRGEYECT,=C'TRGDSECT'   Set Eye Catcher\n*\n         GOSUB BLSE                    Build Linkage Stack Entry\n*\n         OI  TRGFLAG1,TRG1SVCI         Indicate SVC Implementation\n         MVC TRGASCB,PSAAOLD           Address of Current ASCB\n         MVC TRGTCB,PSATOLD            Address of Current TCB or Zero\n*\n** Return to Caller\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* MAIN- Program Main Processing                                       *\n***********************************************************************\n*\nMAIN     SUBNTRY ,\n         IF (CLC,TRGTRPAD,EQ,=C'TRAP') Called to Install DUCT Trap Rtn?\n            CALL RDHTRAPI,             Install DUCT at PGMNTRY         *\n               ((R10)),VL,             Pass TRGDSECT Address           *\n               MF=(E,DSAPLIST)\n         ELSE ,\n            CALL RDHTRACE,             Call Trace Point Processor      *\n               ((R10)),VL,             Pass TRGDSECT Address           *\n               MF=(E,DSAPLIST)\n         ENDIF ,\n*\n** Pop Off The Fake Linkage Stack Entry\n*\n         STCTG CR15,CR15,DSACR15       Get Linkage Stack Pointer\n         LG    R2,DSACR15              (Same)\n         SH    R2,=Y(LSENLNTH)         Back up to BAKR Entry\n*\n         LR    R0,R2                   Restore Saved Stack Entry\n         LH    R1,=Y(LSENLNTH)         (Same)\n         LA    R14,DSASLSEN            (Same)\n         LR    R15,R1                  (Same)\n         MVCL  R0,R14                  (Same)\n*\nL        USING LSEN,R2                 Obtain Addressability\n         LARL  R15,MAIN999\n         ST    R15,L.LSENPSW2+4        Set Address ot return to\n         NC    L.LSENPSW1(2),=X'FF0E'  Return in Key0 Supervisor State\n         PR    ,                       Pop The Stack\n*\n** Return to Caller\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n         DROP  L                       Drop Temp Addressability\n*\n***********************************************************************\n* BLSE- Build Linkage Stack Entry                                     *\n***********************************************************************\n*\n*   The IMP=SVC glue code is different than the glue code for BASR\n* and TRAP2 implementations, in that these latter implementations\n* get control at the point of the trap and the first thing they do\n* is to push an entry onto the linkage stack to save the current\n* status so it can be reenstated after the trap.\n*   The SVC implementation does not do this, the status is stored\n* in the SVRB and the XSB so in order to keep the environment the\n* same from the point of view of RDHTRACE, who does not know how\n* he was entered, we build a stack entry the way it would have\n* looked just prior to the execution of the SVC.\n*   This way the code in RDHTRACE does not have to be aware of how\n* it was entered.  Upon return from RDHTRACE we pop the linkage\n* stack entry and return to the caller via the standard SVC path.\n*\n*\n         USING RBSECT,R5               SVRB Addressability\nP        USING RBSECT,R3               PRB  Addressability\n         USING XSB,R4                  XSB  Addressability\n*\nBLSE     SUBNTRY ,\n         LR    R4,R5                   Get XSB Addressability\n         SH    R4,=Y(32)               (Same)\n         L     R4,0(,R4)               (Same)\n         L     R3,RBLINK               Get Address of PRB\n*\n** Obtain Old PSW\n*\n         MVC   LSENPSW1(4),P.RBOPSW      Get 1st Half of PSW\n         MVC   LSENPSW2+4(4),P.RBOPSW+4  Get 2nd Half of PSW\n         IF (TM,LSENPSW2+4,128,O)        If 31 Bit Address\n            NI LSENPSW2+4,X'7F'          ..Turn Off Bit Here\n            OI LSENPSW1+4,X'80'          ..Turn On  Bit Here\n         ENDIF ,\n*\n** Obtain Access and General Registers\n*\n         MVC   LSENARGS,XSBARS         Get Access Registers\n*\n         MVC   LSENGR0(4),XSBG64H0     Get High Register Halfs\n         MVC   LSENGR1(4),XSBG64H1     (Same)\n         MVC   LSENGR2(4),XSBG64H2     (Same)\n         MVC   LSENGR3(4),XSBG64H3     (Same)\n         MVC   LSENGR4(4),XSBG64H4     (Same)\n         MVC   LSENGR5(4),XSBG64H5     (Same)\n         MVC   LSENGR6(4),XSBG64H6     (Same)\n         MVC   LSENGR6(4),XSBG64H7     (Same)\n         MVC   LSENGR8(4),XSBG64H8     (Same)\n         MVC   LSENGR9(4),XSBG64H9     (Same)\n         MVC   LSENGR10(4),XSBG64HA    (Same)\n         MVC   LSENGR11(4),XSBG64HB    (Same)\n         MVC   LSENGR12(4),XSBG64HC    (Same)\n         MVC   LSENGR13(4),XSBG64HD    (Same)\n         MVC   LSENGR14(4),XSBG64HE    (Same)\n         MVC   LSENGR15(4),XSBG64HF    (Same)\n*\n         MVC   LSENGR0+4(4),RBGRS0     Get Low Register Halfs\n         MVC   LSENGR1+4(4),RBGRS1     (Same)\n         MVC   LSENGR2+4(4),RBGRS2     (Same)\n         MVC   LSENGR3+4(4),RBGRS3     (Same)\n         MVC   LSENGR4+4(4),RBGRS4     (Same)\n         MVC   LSENGR5+4(4),RBGRS5     (Same)\n         MVC   LSENGR6+4(4),RBGRS6     (Same)\n         MVC   LSENGR7+4(4),RBGRS7     (Same)\n         MVC   LSENGR8+4(4),RBGRS8     (Same)\n         MVC   LSENGR9+4(4),RBGRS9     (Same)\n         MVC   LSENGR10+4(4),RBGRS10   (Same)\n         MVC   LSENGR11+4(4),RBGRS11   (Same)\n         MVC   LSENGR12+4(4),RBGRS12   (Same)\n         MVC   LSENGR13+4(4),RBGRS13   (Same)\n         MVC   LSENGR14+4(4),RBGRS14   (Same)\n         MVC   LSENGR15+4(4),RBGRS15   (Same)\n*\n** Copy Our Fake Stack Entry Onto Linkage Stack\n*\n         BAKR  R0,R0                   Push an Entry Onto The Stack\n         STCTG CR15,CR15,DSACR15       Get Linkage Stack Pointer\n         L     R2,DSACR15+4            (Same)\n         SH    R2,=Y(LSENLNTH)         Back up to BAKR Entry\n*\n         LR    R0,R2                   Load Fr Address\n         LH    R1,=Y(LSENLNTH)         Load Fr Length\n         LA    R14,DSASLSEN            Load To Address\n         LR    R15,R1                  Load To Lentgth\n         MVCL  R14,R0                  Save This Stack Entry in DSA\n*\n         LR    R0,R2                   Load To Address\n         LH    R1,=Y(LSENLNTH)         Load To Length\n         LA    R14,LSEN                Load Fr Address\n         LR    R15,R1                  Load Fr Lentgth\n         MVCL  R0,R14                  Overlay Linkage Stack Entry\n*\n** Obtain Control Registers\n*\n         STCTG CR0,CR15,TRGCNTRL       Get Control Registers\n*\n** Return to Caller\n*\nBLSE999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constant Area\n*\nHEXFF    EQU   X'FF'\n*\n         CONEND ,                      Define End of Constant Area\n*\n***********************************************************************\n* Define Dynamic Storage Area - DSA                                   *\n***********************************************************************\n*\n         DSABEG ,\n*\nDSACR15  DS    AD                      Control Register CR15 - Stack\nDSAPRWD1 DS    F\n         DS    0D                      Doubleword Aligned\nDSASLSEN DS    XL(LSENLNTH)            LSEN Save Area\n         DS    0D                      Doubleword Aligned\nDSATRG   DS    XL(TRGLNGTH)            Space for TRGDSECT\n*\n         DSAEND ,\n         END ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TST": {"ttr": 31497, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x05\\x0f\\x01\\x10\\x05\\x0f\\x12X = =\\x00\\x00\\xe3\\xe2\\xe3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-19T00:00:00", "modifydate": "2010-02-19T12:58:00", "lines": 8253, "newlines": 8253, "modlines": 0, "user": "TST"}, "text": "./ ADD NAME=ABNDBS01 0100-10050-10050-1200-00220-00220-00000-RHDTST\n//RDHABBS1 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHABND1\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHABND1 - Program to test Abend Diagnostics using IMP=BASR        *\n*                                                                     *\n*             *** Program Specifically Intended to Abend ***          *\n*                                                                     *\n*    This program is s series of Csects some using PGMNTRY and some   *\n*  simple O/S Savearea Csects.  This test will abend after the last   *\n*  called program to demonstrate that the savearea chains, linkage    *\n*  stack entries are all being properly printed for in the abend      *\n*  diagnostics.                                                       *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n         IHACDE ,                      Define CDE Control Block\n         IHAXTLST ,                    Define XTLST Control Block\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n         LSEDSECT ,                    Linkage Stack Dsect\n*\n***********************************************************************\n* RDHABND1 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHABND1 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=BASR\n*\n** Program MainLine\n*\n #TRACE MSG='We Are Here1'\n         L     R15,=A(RDHCALL1)      Load Next Program\n         BASR  R14,R15               Call Program\n #TRACE MSG='We Are Here2'\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHCALL1 - Called program 1 - Has Linkage Stack - TYPE=SUB          *\n***********************************************************************\n*\nRDHCALL1 PGMNTRY TYPE=SUB,           Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=BASR\n*\n** Program MainLine\n*\n\n         LA    R1,DSA2SAVE           Pass Temp Savearea\n         L     R15,=A(RDHCALL2)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\nDSA2SAVE DS    9D                    Temp Savearea for RDHCALL2\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHCALL2 - Called Program 3 - Standard O/S Savearea                 *\n***********************************************************************\n*\nRDHCALL2 CSECT ,\n         J     CALL2STM              Branch Around Standard ID Area\n         DC    YL1(L'CALL2ID)        Length of ID Area\nCALL2ID  DC    C'RDHCALL2 - Assembled: &SYSDATE, &SYSTIME'\nCALL2STM DS    0H\n         STM   R14,R12,12(R13)       Save Callers Registers\n         LR    R12,R15               Get base Register\n         USING RDHCALL2,R12          (Same)\n         LR    R11,R1                Get Temp Savearea From Caller\n         ST    R11,8(,R13)           Save Ours in His\n         ST    R13,4(,R11)           Save His in Ours\n         LR    R13,R11               Set Our Save Area\n*\n         L     R15,=A(RDHCALL3)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n         L     R13,4(,R13)           Reload Callers Savearea\n         LM    R14,R12,12(R13)       Load Callers Registers\n         BR    R14                   -> Return\n*\n         LTORG ,                     Define Literal Pool\n*\n***********************************************************************\n* RDHCALL3 - Called Program 3 - Has Linkage Stack - TYPE=MAIN         *\n***********************************************************************\n*\nRDHCALL3 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=BASR\n*\n** Program MainLine\n*\n         LA    R1,DSA4SAVE           Pass Temp Savearea\n         L     R15,=A(RDHCALL4)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\nDSA4SAVE DS    9D                    Temp Savearea for RDHCALL2\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHCALL4 - Called Program 4 - Standard O/S Savearea                 *\n***********************************************************************\n*\nRDHCALL4 CSECT ,\n         J     CALL4STM              Branch Around Standard ID Area\n         DC    YL1(L'CALL2ID)        Length of ID Area\nCALL4ID  DC    C'RDHCALL4 - Assembled: &SYSDATE, &SYSTIME'\nCALL4STM DS    0H\n         STM   R14,R12,12(R13)       Save Callers Registers\n         LR    R12,R15               Get base Register\n         USING RDHCALL4,R12          (Same)\n         LR    R11,R1                Get Temp Savearea From Caller\n         ST    R11,8(,R13)           Save Ours in His\n         ST    R13,4(,R11)           Save His in Ours\n         LR    R13,R11               Set Our Save Area\n*\n         L     R15,=A(RDHCALL5)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n         L     R13,4(,R13)           Reload Callers Savearea\n         LM    R14,R12,12(R13)       Load Callers Registers\n         BR    R14                   -> Return\n*\n         LTORG ,                     Define Literal Pool\n*\n***********************************************************************\n* RDHCALL5 - Called Program 5 - Has Linkage Stack - TYPE=MAIN         *\n***********************************************************************\n*\n*\nRDHCALL5 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=BASR,PRINT=GEN\n*\n** Program MainLine\n*\n         #TRACE MSG='We Have Entered RDHCALL5.'\n*\n** Return to Caller\n*\n         EX 0,*                ====> Force an Abend Here\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n         END   ,\n./ ADD NAME=ABNDSV01 0100-10050-10050-1200-00221-00221-00000-RHDTST\n//RDHABSV1 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHABND1\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHABND1 - Program to test Abend Diagnostics using IMP=SVC         *\n*                                                                     *\n*             *** Program Specifically Intended to Abend ***          *\n*                                                                     *\n*    This program is s series ofCsects some using PGMNTRY and some    *\n*  simple O/S Savearea Csects.  This test will abend after the last   *\n*  called program to demonstrate that the savearea chains, linkage    *\n*  stack entries are all being properly printed.                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n         IHACDE ,                      Define CDE Control Block\n         IHAXTLST ,                    Define XTLST Control Block\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n         LSEDSECT ,                    Linkage Stack Dsect\n*\n***********************************************************************\n* RDHABND1 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHABND1 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               PRINT=GEN,            (Same)                            *\n               IMP=SVC\n*\n** Program MainLine\n*\n #TRACE MSG='We Are Here1'\n         L     R15,=A(RDHCALL1)      Load Next Program\n         BASR  R14,R15               Call Program\n #TRACE MSG='We Are Here2'\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHCALL1 - Called program 1 - Has Linkage Stack - TYPE=SUB          *\n***********************************************************************\n*\nRDHCALL1 PGMNTRY TYPE=SUB,           Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=SVC\n*\n** Program MainLine\n*\n\n         LA    R1,DSA2SAVE           Pass Temp Savearea\n         L     R15,=A(RDHCALL2)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\nDSA2SAVE DS    9D                    Temp Savearea for RDHCALL2\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHCALL2 - Called Program 3 - Standard O/S Savearea                 *\n***********************************************************************\n*\nRDHCALL2 CSECT ,\n         J     CALL2STM              Branch Around Standard ID Area\n         DC    YL1(L'CALL2ID)        Length of ID Area\nCALL2ID  DC    C'RDHCALL2 - Assembled: &SYSDATE, &SYSTIME'\nCALL2STM DS    0H\n         STM   R14,R12,12(R13)       Save Callers Registers\n         LR    R12,R15               Get base Register\n         USING RDHCALL2,R12          (Same)\n         LR    R11,R1                Get Temp Savearea From Caller\n         ST    R11,8(,R13)           Save Ours in His\n         ST    R13,4(,R11)           Save His in Ours\n         LR    R13,R11               Set Our Save Area\n*\n         L     R15,=A(RDHCALL3)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n         L     R13,4(,R13)           Reload Callers Savearea\n         LM    R14,R12,12(R13)       Load Callers Registers\n         BR    R14                   -> Return\n*\n         LTORG ,                     Define Literal Pool\n*\n***********************************************************************\n* RDHCALL3 - Called Program 3 - Has Linkage Stack - TYPE=MAIN         *\n***********************************************************************\n*\nRDHCALL3 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=SVC\n*\n** Program MainLine\n*\n         LA    R1,DSA4SAVE           Pass Temp Savearea\n         L     R15,=A(RDHCALL4)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\nDSA4SAVE DS    9D                    Temp Savearea for RDHCALL2\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHCALL4 - Called Program 4 - Standard O/S Savearea                 *\n***********************************************************************\n*\nRDHCALL4 CSECT ,\n         J     CALL4STM              Branch Around Standard ID Area\n         DC    YL1(L'CALL2ID)        Length of ID Area\nCALL4ID  DC    C'RDHCALL4 - Assembled: &SYSDATE, &SYSTIME'\nCALL4STM DS    0H\n         STM   R14,R12,12(R13)       Save Callers Registers\n         LR    R12,R15               Get base Register\n         USING RDHCALL4,R12          (Same)\n         LR    R11,R1                Get Temp Savearea From Caller\n         ST    R11,8(,R13)           Save Ours in His\n         ST    R13,4(,R11)           Save His in Ours\n         LR    R13,R11               Set Our Save Area\n*\n         L     R15,=A(RDHCALL5)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n         L     R13,4(,R13)           Reload Callers Savearea\n         LM    R14,R12,12(R13)       Load Callers Registers\n         BR    R14                   -> Return\n*\n         LTORG ,                     Define Literal Pool\n*\n***********************************************************************\n* RDHCALL5 - Called Program 5 - Has Linkage Stack - TYPE=MAIN         *\n***********************************************************************\n*\n*\nRDHCALL5 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=SVC\n*\n** Program MainLine\n*\n         #TRACE MSG='We Have Entered RDHCALL5.'\n*\n** Return to Caller\n*\n         EX 0,*                ====> Force an Abend Here\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n         END   ,\n./ ADD NAME=ABNDTR01 0100-10050-10050-1200-00220-00220-00000-RHDTST\n//RDHABTR1 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHABND1\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHABND1 - Program to test Abend Diagnostics using IMP=TRAP2       *\n*                                                                     *\n*             *** Program Specifically Intended to Abend ***          *\n*                                                                     *\n*    This program is s series ofCsects some using PGMNTRY and some    *\n*  simple O/S Savearea Csects.  This test will abend after the last   *\n*  called program to demonstrate that the savearea chains, linkage    *\n*  stack entries are all being properly printed.                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n         IHACDE ,                      Define CDE Control Block\n         IHAXTLST ,                    Define XTLST Control Block\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n         LSEDSECT ,                    Linkage Stack Dsect\n*\n***********************************************************************\n* RDHABND1 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHABND1 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=TRAP2,PRINT=GEN\n*\n** Program MainLine\n*\n #TRACE MSG='We Are Here1'\n         L     R15,=A(RDHCALL1)      Load Next Program\n         BASR  R14,R15               Call Program\n #TRACE MSG='We Are Here2'\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHCALL1 - Called program 1 - Has Linkage Stack - TYPE=SUB          *\n***********************************************************************\n*\nRDHCALL1 PGMNTRY TYPE=SUB,           Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=TRAP2\n*\n** Program MainLine\n*\n\n         LA    R1,DSA2SAVE           Pass Temp Savearea\n         L     R15,=A(RDHCALL2)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\nDSA2SAVE DS    9D                    Temp Savearea for RDHCALL2\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHCALL2 - Called Program 3 - Standard O/S Savearea                 *\n***********************************************************************\n*\nRDHCALL2 CSECT ,\n         J     CALL2STM              Branch Around Standard ID Area\n         DC    YL1(L'CALL2ID)        Length of ID Area\nCALL2ID  DC    C'RDHCALL2 - Assembled: &SYSDATE, &SYSTIME'\nCALL2STM DS    0H\n         STM   R14,R12,12(R13)       Save Callers Registers\n         LR    R12,R15               Get base Register\n         USING RDHCALL2,R12          (Same)\n         LR    R11,R1                Get Temp Savearea From Caller\n         ST    R11,8(,R13)           Save Ours in His\n         ST    R13,4(,R11)           Save His in Ours\n         LR    R13,R11               Set Our Save Area\n*\n         L     R15,=A(RDHCALL3)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n         L     R13,4(,R13)           Reload Callers Savearea\n         LM    R14,R12,12(R13)       Load Callers Registers\n         BR    R14                   -> Return\n*\n         LTORG ,                     Define Literal Pool\n*\n***********************************************************************\n* RDHCALL3 - Called Program 3 - Has Linkage Stack - TYPE=MAIN         *\n***********************************************************************\n*\nRDHCALL3 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=TRAP2\n*\n** Program MainLine\n*\n         LA    R1,DSA4SAVE           Pass Temp Savearea\n         L     R15,=A(RDHCALL4)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\nDSA4SAVE DS    9D                    Temp Savearea for RDHCALL2\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHCALL4 - Called Program 4 - Standard O/S Savearea                 *\n***********************************************************************\n*\nRDHCALL4 CSECT ,\n         J     CALL4STM              Branch Around Standard ID Area\n         DC    YL1(L'CALL2ID)        Length of ID Area\nCALL4ID  DC    C'RDHCALL4 - Assembled: &SYSDATE, &SYSTIME'\nCALL4STM DS    0H\n         STM   R14,R12,12(R13)       Save Callers Registers\n         LR    R12,R15               Get base Register\n         USING RDHCALL4,R12          (Same)\n         LR    R11,R1                Get Temp Savearea From Caller\n         ST    R11,8(,R13)           Save Ours in His\n         ST    R13,4(,R11)           Save His in Ours\n         LR    R13,R11               Set Our Save Area\n*\n         L     R15,=A(RDHCALL5)      Load Next Program\n         BASR  R14,R15               Call Program\n*\n         L     R13,4(,R13)           Reload Callers Savearea\n         LM    R14,R12,12(R13)       Load Callers Registers\n         BR    R14                   -> Return\n*\n         LTORG ,                     Define Literal Pool\n*\n***********************************************************************\n* RDHCALL5 - Called Program 5 - Has Linkage Stack - TYPE=MAIN         *\n***********************************************************************\n*\n*\nRDHCALL5 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=TRAP2\n*\n** Program MainLine\n*\n         #TRACE MSG='We Have Entered RDHCALL5.'\n*\n** Return to Caller\n*\n         EX 0,*                ====> Force an Abend Here\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n         END   ,\n./ ADD NAME=ABND64B1 0100-10050-10050-1200-00274-00274-00000-RHDTST\n//RDH64AB1 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDH64AB1\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDH64AB1 - Test 64-Bit Abend Diagnostics                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         COPY  #MAC64\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         IHASDWA ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDH64AB1 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64AB1 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=R10,               (Same)                          *\n               AMODE=64,               (Same)                          *\n               RMODE=ANY,              (Same)                          *\n               IMP=BASR,PRINT=GEN\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n print gen\n         CALL  RDH64SB1,               Call TYPE=SUB Program           *\n               (CONPARM1,              Passing Parameters              *\n               CONPARM2,               (Same)                          *\n               DSAPARM1),              (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DSMPLIST)\n         ORG *-2\n         BASPM R14,R15\n*\n print nogen\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         MVC ATBP1,=CL64'Data in ATB Storage ATBP1.'\n         MVC ATBP2,=CL64'Data in ATB Storage ATBP2.'\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n         LG  R10,DSAATBAD\n         #TRACE DATA=('ATB Storage',0(R10),256)\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nCONPARM1 DC    CL20'This is a Parameter'\nCONPARM2 DC    AD(TERM)\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSMPLIST DS     4AD\nDSAPARM1 DS     D\n*\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\nATBP1    DS    CL64\nATBP2    DS    CL64\n         ATBEND ,                      Define ATB Suffix\n         DROP   ,                      Drop Everything\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB1 - Sub-Program 1                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               AMODE=31,IMP=BASR,      (Same)                          *\n               RMODE=ANY,PRINT=GEN     (Same)\n*\n         LG    R10,DSAATBAD            Get ATB Storage Address\n*\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n*\n** Program MainLine\n*\n         GOSUB SUB1                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB1     SUBNTRY ,\n         CALL  RDH64SB2,               Call TYPE=SUB Program           *\n               ((R10),                 Passing Parameters              *\n               MYDATA),                (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DS1PLIST)\n         ORG *-2\n         BASPM R14,R15\n*\n*\nSUB1999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\nMYDATA   DC    CL8'My Data'\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\nDS1PLIST DS    4AD\n         DSAEND ,                      Define DSA Suffix\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB2 - Sub-Program 2                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=R10,               (Same)                          *\n               AMODE=64,IMP=BASR,      (Same)                          *\n               RMODE=ANY               (Same)\n*\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n*\n** Program MainLine\n*\n         GOSUB SUB2                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB2     SUBNTRY ,\n         MVC ATBS1,=CL64'Data in ATB Storage ATBS1.'\n         MVC ATBS2,=CL64'Data in ATB Storage ATBS2.'\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n         LG  R10,DSAATBAD\n         #TRACE DATA=('ATB Storage',0(R10),256)\n ex 0,*\n*\n*\nSUB2999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\nATBS1    DS    CL64\nATBS2    DS    CL64\n         ATBEND ,                      Define ATB Suffix\n         END   ,\n./ ADD NAME=AM64BS01 0100-10050-10050-1200-00289-00289-00000-RHDTST\n//RDH64AB1 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDH64AB1\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDH64AB1 - 64-Bit Adend Diagnostics Test Program                   *\n*                                                                     *\n*             *** This Program Intended to Abend ***                  *\n*                                                                     *\n*    This is a test program to test abend diagnostics for programs    *\n*  running in AMODE(64).  In these cases we not only want to see the  *\n*  standard diagnostics that we see with 31-bit programs which        *\n*  includes DSA for all programs in the chain, we also want to see    *\n*  the ATB storage for all programs in the chain.                     *\n*    This program starts with an AMODE(64) TYPE=MAIN program that     *\n*  then calls an AMODE(31) TYPE=SUB program sharing DSA, that then    *\n*  calls an AMODE(64) TYPE=SUB program sharing DSA and sharing ATB    *\n*  with the original TYPE=MAIN program.                               *\n*    At that point we abend the program with a S0C3 and view the      *\n*  abend diagnostics in TRCPRINT.                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         IHASDWA ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDH64AB1 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64AB1 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=R10,               (Same)                          *\n               AMODE=64,               (Same)                          *\n               RMODE=ANY,              (Same)                          *\n               IMP=BASR,PRINT=GEN\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         CALL  RDH64SB1,               Call TYPE=SUB Program           *\n               (CONPARM1,              Passing Parameters              *\n               CONPARM2,               (Same)                          *\n               DSAPARM1),              (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DSMPLIST)\n         ORG *-2\n         BASPM R14,R15\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         MVC    ATBP1,=CL64'This is Data in ATBP1'\n         MVC    ATBP2,=CL64'This is More Data in ATBP2'\n*\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n         #TRACE DATA=('ATB Storage',0(R10),256)\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nCONPARM1 DC    CL20'This is a Parameter'\nCONPARM2 DC    AD(TERM)\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSMPLIST DS     4AD\nDSAPARM1 DS     D\n*\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\nATBP1    DS    CL64\nATBP2    DS    CL64\n         ATBEND ,                      Define ATB Suffix\n         DROP   ,                      Drop Everything\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB1 - Sub-Program 1                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               AMODE=31,IMP=BASR,      (Same)                          *\n               RMODE=ANY,PRINT=GEN     (Same)\n*\n         LG    R10,DSAATBAD            Get ATB Storage Address\n*\n         #TRACE DATA=('Parameters Input',0(R1),32)\n         #TRACE MSG='Propogating ATB Storage Over an AMODE(31) Pgm.',  *\n               REGS=(R10)\n*\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n         SAM64\n         #TRACE DATA=('ATB Storage',0(R10),256)\n         SAM31\n*\n** Program MainLine\n*\n         GOSUB SUB1                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB1     SUBNTRY ,\n         CALL  RDH64SB2,               Call TYPE=SUB Program           *\n               ((R10),                 Passing Parameters              *\n               MYDATA),                (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DS1PLIST)\n         ORG *-2\n         BASPM R14,R15\n*\n*\nSUB1999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\nMYDATA   DC    CL8'My Data'\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\nDS1PLIST DS    4AD\n         DSAEND ,                      Define DSA Suffix\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB2 - Sub-Program 2                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=R10,               (Same)                          *\n               AMODE=64,IMP=BASR,      (Same)                          *\n               RMODE=ANY,PRINT=GEN     (Same)\n*\n         MVC   ATBS1,=CL64'This is Data in ATBP1'\n         MVC   ATBS2,=CL64'This is More Data in ATBP2'\n*\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n         #TRACE DATA=('ATB Storage',0(R10),256)\n*\n** Program MainLine\n*\n         GOSUB SUB2                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB2     SUBNTRY ,\n         #SUICIDE  MSG='Mercy Killing'\n*\n*\nSUB2999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\nATBS1    DS    CL64\nATBS2    DS    CL64\n         ATBEND ,                      Define ATB Suffix\n         END   ,\n./ ADD NAME=AM64BS02 0100-10050-10050-1200-00288-00288-00000-RHDTST\n//RDH64B02 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDH64B02\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDH64B02 - 64-Bit Program Calling Subroutines                      *\n*                                                                     *\n*    This is a test to exercise the code when a 64-bit program        *\n*  calls other TYPE=SUB and TYPE=MAIN programs.                       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         COPY  #MAC64\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         IHASDWA ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDH64B02 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64B02 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               AMODE=64,               (Same)                          *\n               ABAS=(R10),             (Same)                          *\n               RMODE=ANY,              (Same)                          *\n               IMP=BASR\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         ESTAE 0                       Cancel ESTAE Recovery\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         CALL  RDH64SB1,               Call TYPE=SUB Program           *\n               ((R10),                 Passing Parameters              *\n               CONPARM1,               (Same)                          *\n               CONPARM2,               (Same)                          *\n               DSAPARM1),              (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DSMPLIST)\n         ORG *-2\n         BASPM R14,R15\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         MVC   ATBAREA1,=CL64'This is My ATB Storage.'\n         MVC   ATBAREA2,HEXTAB\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nCONPARM1 DC    CL20'This is a Parameter'\nCONPARM2 DC    AD(TERM)\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSMPLIST DS     4AD\nDSAPARM1 DS     D\n*\n         DSAEND ,                      Define DSA Suffex\n*\n***********************************************************************\n* Define Above-The-Bar Stroage                                        *\n***********************************************************************\n*\n         ATBBEG ,                      Define DSA Prefix\n*\nATBAREA1 DS     CL64\nATBAREA2 DS     CL64\n*\n         ATBEND ,                      Define DSA Suffex\n         DROP   ,                      Drop Everything\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB1 - Sub-Program 1                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=(R10),             (Same)                          *\n               AMODE=64,IMP=BASR,      (Same)                          *\n               RMODE=ANY,PRINT=GEN     (Same)\n*\n         MVC ATBAREA3,=CL64'This is my ATB Area.'\n         MVC ATBAREA4,=CL64'This is my ATB Area.'\n         #TRACE DATA=('Parameters Input',0(R1),32),REGS=ALL\n         #TRACE DATA=('ATB Storage',0(R10),256)\n*\n** Program MainLine\n*\n         GOSUB SUB1                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB1     SUBNTRY ,\n         CALL  RDH64SB2,               Call TYPE=SUB Program           *\n               ((R10),                 Passing Parameters              *\n               MYDATA),                (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DS1PLIST)\n         ORG *-2\n         BASPM R14,R15\n*\n*\nSUB1999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\nMYDATA   DC    CL8'My Data'\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\nDS1PLIST DS    4AD\n         DSAEND ,                      Define DSA Suffex\n*\n print gen\n         ATBBEG ,                      Define DSA Prefix\nATBAREA3 DS     CL64\nATBAREA4 DS     CL64\n         ATBEND ,                      Define DSA Suffex\n print nogen\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB2 - Sub-Program 2                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=(R10),             (Same)                          *\n               AMODE=64,IMP=BASR,      (Same)                          *\n               RMODE=ANY               (Same)\n*\n         MVC ATBAREA5,=CL64'This is my ATB Area.'\n         MVC ATBAREA6,=CL64'This is my ATB Area.'\n         #TRACE DATA=('Parameters Input',0(R1),16),REGS=ALL\n         #TRACE DATA=('ATB Storage',0(R10),256)\n*\n** Program MainLine\n*\n         GOSUB SUB2                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB2     SUBNTRY ,\n*ex 0,*\n*\n*\nSUB2999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define DSA Prefix\nATBAREA5 DS     CL64\nATBAREA6 DS     CL64\n         ATBEND ,                      Define DSA Suffex\n*\n         END   ,\n./ ADD NAME=AM64BS03 0100-10050-10050-1200-00454-00454-00000-RHDTST\n//RDH64B03 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDH64B03\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDH64B03 - 64-Bit Program Calling Subroutines                      *\n*                                                                     *\n*    This is a test to exercise the code when a 64-bit program        *\n*  calls other programs.                                              *\n*    I discovered many things about 64-bit communications during this *\n*  investigation, bu the end result were the BASPM, BAS31 and BAS64   *\n*  macro constructs that are now in the #MAC64 copybook.              *\n*                                                                     *\n*  ==> Mission Accomplished <===                                      *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         COPY  #MAC64                  Copy 64-Bit Support Macros\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         IHASDWA ,\n*\n         LSEDSECT ,                    Linkage Stack Dsect\n*\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDH64B03 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64B03 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=(R10),             (Same)                          *\n               AMODE=64,               (Same)                          *\n               RMODE=ANY,              (Same)                          *\n               IMP=BASR,ESTAE=YES,     (Same)                          *\n               PRINT=GEN               (Same)\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n*temp    GOSUB TST1                    Basic Testing of 64-Bit Calls\n*temp    GOSUB TST2                    Test for BASR W/Bit63 Set\n*temp    GOSUB TST3                    Test for BAKR/PR Sequence\n*temp    GOSUB TST4                    Can Key8 Modify LSEN?\n*temp    GOSUB TST5                    Does VD Set Bit63 at Runtime?\n         GOSUB TST6                    Test BASPM Concept\n*\n*\n*\n** Return to Caller\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST1 - First Testing  Processing                                   *\n*=====================================================================*\n*\n*    What we're looking for here is the value of R14 after the\n*  execution of a branch instruction when the program PSW is in\n*  64-Bit amode.  What we want is for the return register to have\n*  bit-63 set to one, but it seems that only the BASSM instruction\n*  is working as expected.  The rest fail to set Bit-63.\n*\n*\nTST1     SUBNTRY ,\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n         #TRACE MSG=('PSW in 64-Bit Mode: ',DSAWORKD)\n*\n         BAS   R14,TST1010\nTST1010  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n         #TRACE MSG=('PSW After a BAS: ',DSAWORKD),REGS=(R14)\n*\n*\n         LG    R15,=AD(TST1020)\n         BASR  R14,R15\nTST1020  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n         #TRACE MSG=('PSW After a BASR: ',DSAWORKD),REGS=(R14,R15)\n*\n*\n         BAS   R14,TST1025\nTST1025  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n         #TRACE MSG=('PSW After a BAS: ',DSAWORKD),REGS=(R14)\n*\n*\n         LAY   R15,TST1030\n         BALR  R14,R15\nTST1030  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n        #TRACE MSG=('PSW After a BALR + LAY: ',DSAWORKD),REGS=(R14,R15)\n*\n*\n         BAL   R14,TST1035\nTST1035  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n        #TRACE MSG=('PSW After a BAL: ',DSAWORKD),REGS=(R14)\n*\n*\n         LAE   R15,TST1040\n         BASR  R14,R15\nTST1040  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n        #TRACE MSG=('PSW After a BASR + LAE: ',DSAWORKD),REGS=(R14,R15)\n*\n*\n         LARL  R15,TST1050\n         BASR  R14,R15\nTST1050  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n       #TRACE MSG=('PSW After a BASR + LARL: ',DSAWORKD),REGS=(R14,R15)\n*\n*\n** BASSM works as expected.\n*\n         LG    R15,=AD(TST1060+1)\n         BASSM R14,R15\nTST1060  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n       #TRACE MSG=('PSW After a BASSM + LG: ',DSAWORKD),REGS=(R14,R15)\n*\n*\nTST1999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST2 - Test Using BASR but Setting Bit63                           *\n*=====================================================================*\n*\n*    This did not go well.  It seems that we can set bit63 in this\n*  way, but when you return via BR instead of a PR you fail in a\n*  specification.  Unless you clear bit63 before returning.\n*\n*\nTST2     SUBNTRY ,\n         LG    R15,=AD(TST2010)\n         BASR  R14,0\n         LA    R14,7(,R14)\n         BASR  0,R15\nTST2010  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n     #TRACE MSG=('PSW After a BASR W/B63-1: ',DSAWORKD),REGS=(R14,R15)\n*\n** Test Return to Odd Address Via BR - Fails S0C6 On Return\n*\n         LG    R15,=AD(TST2BR14)\n         BASR  R14,0\n         LA    R14,7(,R14)\n*temp    BASR  0,R15\nTST2020  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n     #TRACE MSG=('PSW After a BASR W/B63-2: ',DSAWORKD),REGS=(R14,R15)\n*\n** Test Return to Odd Address Via LA & BR - Fails\n*        LA does clear Bit 31 but does not zero Bit63\n*\n         LG    R15,=AD(TST2LABR)\n         BASR  R14,0\n         LA    R14,7(,R14)\n*temp    BASR  0,R15\nTST2030  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n     #TRACE MSG=('PSW After a BASR W/B63-2: ',DSAWORKD),REGS=(R14,R15)\n*\n** Test Return to Odd Address Via NI & BR - Works.\n*\n*    This option works but is undesirable.  I had it in mind to\n*  OPSYN out BASR and replace BASR with a macro.  But the fact that\n*  you get a S0C6 on return if you don't zero bit63 is a problem.\n*    So, What's Next?\n*\n*\n         LG    R15,=AD(TST2NIBR)\n         BASR  R14,0\n         LA    R14,7(,R14)\n         BASR  0,R15\nTST2040  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n     #TRACE MSG=('PSW After a BASR W/B63-3: ',DSAWORKD),REGS=(R14,R15)\n*\n*\nTST2999  DS    0H\n         SUBEXIT ,\n*\nTST2BR14 BR    R14\n*\nTST2LABR LA    R14,0(,R14)\n         BR    R14\n*\nTST2NIBR NILL  R14,X'FFFE'\n         BR    R14\n*\n*=====================================================================*\n** TST3 - Test With BAKR Issueing the Call                            *\n*=====================================================================*\n*\n*    This works but is also not a desirable method because it requires\n*  different calling mechanisms for 64-64, 64-31, 31-64 and 31-31.\n*  When what is desired is one method that would work for all amodes.\n*\nTST3     SUBNTRY ,\n         XGR   R14,R14\n         LG    R15,=AD(TST3PR1)\n         BAKR  0,R15\nTST3010  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n     #TRACE MSG=('PSW After a BAKR W/B63-1: ',DSAWORKD),REGS=(R14,R15)\n*\n*\n*\nTST3999  DS    0H\n         SUBEXIT ,\n*\nTST3PR1  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n     #TRACE MSG=('PSW After a BAKR-1: ',DSAWORKD),REGS=(R14,R15)\n         PR\n*\n*=====================================================================*\n** TST4 - Can a Key8 PROB Program Modify The Linkage Stack?           *\n*=====================================================================*\n*\n*  Answer: No, can't do STCTL, privalaged Instruction\n*\n*\nTST4     SUBNTRY ,\n         MODESET KEY=NZERO,MODE=PROB   Chunk Down\n*\n         STCTL CR15,CR15,DSACR15       Get CR15 - Linkage Stack Ptr\n         L     R15,DSACR15\n         SH    R15,=Y(LSENLNTH)        Point at Our Entry\n         #TRACE DATA=('LSEN Entry',0(R15),LSENLNTH)\n*\n*\nTST4999  DS    0H\n         MODESET KEY=ZERO,MODE=SUP     Chunk Up\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST5 - Does VC Set Bit63 at Runtime?                               *\n*=====================================================================*\n*\nTST5     SUBNTRY ,\n*\n         L     R15,TESTVD1\n         BSM   R15,0\n         #TRACE REGS=(R15),MSG='4-Byte VCON in R15'\n*\n         LG    R15,TESTVD2\n         BSM   R15,0\n         #TRACE REGS=(R15),MSG='8-Byte VCON in R15'\n*\nTST5999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST6 - Test BASPM - Branch & Save & Preseve Mode Concept           *\n*=====================================================================*\n*\nTST6     SUBNTRY ,\n*\n** BASPM When AMODE=64\n*\n         PRINT GEN\n         LG    R15,=AD(TST6010)\n         BASPM R14,R15\n         PRINT NOGEN\nTST6010  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n         #TRACE MSG=('PSW After a BASPM 14,15 in AMODE64: ',DSAWORKD), *\n               REGS=(R14,R15)\n*\n** BASPM When AMODE=31\n*\n         SAM31 ,\n         PRINT GEN\n         LG    R15,=AD(TST6020)\n         BASPM R14,R15\n         PRINT NOGEN\nTST6020  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n         #TRACE MSG=('PSW After a BASPM 14,15 in AMODE31: ',DSAWORKD), *\n               REGS=(R14,R15)\n         SAM64 ,\n*\n** BAS31 To Call a 31-Bit Program From 64-Bit\n*\n         PRINT GEN\n         LG    R15,=AD(TST6030)\n         BAS31 R14,R15\n         PRINT NOGEN\nTST6030  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n         #TRACE MSG=('PSW After a BAS31 14,15 in AMODE64: ',DSAWORKD), *\n               REGS=(R14,R15)\n*\n** BAS64 To Call a 64-Bit Program From 31-Bit\n*\n         PRINT GEN\n         LG    R15,=AD(TST6040)\n         BAS64 R14,R15\n         PRINT NOGEN\nTST6040  DS    0H\n         EPSW  R0,R1\n         STM   R0,R1,DSAWORKD\n         #TRACE MSG=('PSW After a BAS64 14,15 in AMODE31: ',DSAWORKD), *\n               REGS=(R14,R15)\n         SAM64 ,\n*\n*\nTST6999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nCONPARM1 DC    CL20'This is a Parameter'\nCONPARM2 DC    AD(TERM)\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\n*        DC    AD(TESTAD+1)            Test Constant Generation\nTESTAD   DC    AD(TESTAD+1)            AD - Works\n*TESTVD  DC    VD(RDH64B03+1)          VD - Fails\nTESTVD1  DC    V(RDH64B03)\nTESTVD2  DC    VD(RDH64B03)\n*\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSMPLIST DS    4AD\nDSAPARM1 DS    D\n*\nDSACR15  DS    A\n*\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\n         ATBEND ,                      Define ATB Suffex\n*\n         END   ,\n./ ADD NAME=AM64BS04 0100-10050-10050-1200-00265-00265-00000-RHDTST\n//RDH64B04 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDH64B04\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDH64B04 - 64-Bit Program Calling Subroutines                      *\n*                                                                     *\n*    This is a test for a MAIN(64) program calling a SUB(31) program  *\n*  which calls a SUB(64) program, with IMP=BASR.                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         IHASDWA ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDH64B04 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64B04 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=(R10),             (Same)                          *\n               AMODE=64,               (Same)                          *\n               RMODE=ANY,              (Same)                          *\n               IMP=BASR,PRINT=GEN\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         ESTAE 0                       Cancel ESTAE Recovery\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         CALL  RDH64SB1,               Call TYPE=SUB Program           *\n               ((R10),                 Passing Parameters              *\n               CONPARM1,               (Same)                          *\n               CONPARM2,               (Same)                          *\n               DSAPARM1),              (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DSMPLIST)\n         ORG *-2\n         BASPM 14,15\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n         #TRACE DATA=('ATB Storage',0(R10),256)\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nCONPARM1 DC    CL20'This is a Parameter'\nCONPARM2 DC    AD(TERM)\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSMPLIST DS     4AD\nDSAPARM1 DS     D\n*\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\nATBPLIS1 DS    4AD\n         ATBEND ,                      Define ATB Suffix\n         DROP   ,                      Drop Everything\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB1 - Sub-Program 1                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               AMODE=31,IMP=BASR,      (Same)                          *\n               RMODE=ANY,PRINT=GEN     (Same)\n*\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n*\n** Program MainLine\n*\n         GOSUB SUB1                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB1     SUBNTRY ,\n         CALL  RDH64SB2,               Call TYPE=SUB Program           *\n               ((R10),                 Passing Parameters              *\n               MYDATA),                (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DS1PLIST)\n         ORG *-2\n         BASPM 14,15\n*\n*\nSUB1999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\nMYDATA   DC    CL8'My Data'\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\nDS1PLIST DS    4AD\n         DSAEND ,                      Define DSA Suffex\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB2 - Sub-Program 2                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=(R10),             (Same)                          *\n               AMODE=64,IMP=BASR,      (Same)                          *\n               RMODE=ANY               (Same)\n*\n         #TRACE DATA=('Parameters Input',0(R1),16),REGS=ALL\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n         #TRACE DATA=('ATB Storage',0(R10),256)\n*\n** Program MainLine\n*\n         GOSUB SUB2                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB2     SUBNTRY ,\n*ex 0,*\n*\n*\nSUB2999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\nATBPLIS2 DS    4AD\n         ATBEND ,                      Define ATB Suffix\n         END   ,\n./ ADD NAME=AM64BS05 0100-10050-10050-1200-00263-00263-00000-RHDTST\n//RDH64B05 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDH64B05\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDH64B05 - 64-Bit Program Calling Subroutines                      *\n*                                                                     *\n*    This is a test for a MAIN(31) program calling a SUB(64) program  *\n*  which calls a SUB(31) program, with IMP=BASR.                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         COPY  #MAC64\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         IHASDWA ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDH64B05 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64B05 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               AMODE=31,               (Same)                          *\n               RMODE=ANY,              (Same)                          *\n               IMP=BASR,PRINT=GEN\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         ESTAE 0                       Cancel ESTAE Recovery\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         CALL  RDH64SB1,               Call TYPE=SUB Program           *\n               (CONPARM1,              Passing Parameters              *\n               CONPARM2,               (Same)                          *\n               DSAPARM1),              (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DSMPLIST)\n         ORG *-2\n         BASPM 14,15\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nCONPARM1 DC    CL20'This is a Parameter'\nCONPARM2 DC    AD(TERM)\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSMPLIST DS     4AD\nDSAPARM1 DS     D\n*\n         DSAEND ,                      Define DSA Suffex\n         DROP   ,                      Drop Everything\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB1 - Sub-Program 1                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB1 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ABAS=(R10),             (Same)                          *\n               AMODE=64,IMP=BASR,      (Same)                          *\n               RMODE=ANY,PRINT=GEN     (Same)\n*\n         MVC   0(8,R10),=C'ATBDSECT'\n         MVC   16(16,R10),HEXTAB\n*\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n         #TRACE DATA=('Parameters Input',0(R1),32),REGS=ALL\n         #TRACE DATA=('ATB Storage',0(R10),256)\n*\n** Program MainLine\n*\n         GOSUB SUB1                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB1     SUBNTRY ,\n         CALL  RDH64SB2,               Call TYPE=SUB Program           *\n               ((R10),                 Passing Parameters              *\n               MYDATA),                (Same)                          *\n               LINKINST=BASSM,         Needed for 64-Bit Called Pgm    *\n               MF=(E,DS1PLIST)\n         ORG *-2\n         BASPM 14,15\n*\n*\nSUB1999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\nMYDATA   DC    CL8'My Data'\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\nDS1PLIST DS    4AD\n         DSAEND ,                      Define DSA Suffix\n*\n         ATBBEG ,                      Define ATB Prefix\nATBPLIST DS    4AD\n         ATBEND ,                      Define ATB Suffix\n*\n***********************************************************************\n*                                                                     *\n** RDH64SB2 - Sub-Program 2                                           *\n*                                                                     *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDH64SB2 PGMNTRY TYPE=SUB,             Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               AMODE=31,IMP=BASR,      (Same)                          *\n               RMODE=ANY               (Same)\n*\n         #TRACE DATA=('DSA Storage',0(R13),DSAPFXLN)\n*\n** Program MainLine\n*\n         GOSUB SUB2                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** SUB1 - Main Processing Routine                                     *\n*=====================================================================*\n*\nSUB2     SUBNTRY ,\n*ex 0,*\n*\n*\nSUB2999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constants Prefix\n         CONEND ,                      Define Constants Suffix\n*\n         DSABEG ,                      Define DSA Prefix\n         DSAEND ,                      Define DSA Suffex\n         END   ,\n./ ADD NAME=ARMDBS01 0100-10050-10050-1200-00616-00616-00000-RHDTST\n//RDHARB01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHARB01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHARB01 - Test Program for for ARMODE Programs with IMP=BASR      *\n*                                                                     *\n*    This program will test the situation where the data we wish      *\n*  to display is in a different address space or dataspace.  This     *\n*  The program will be in ARMODE when executing the #TRACE and        *\n*  RDHTRACE will trigger off that bit in the PSW to determine if      *\n*  it needs to go into ARMODE in order to access the data to be       *\n*  written to the traces.                                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASVT ,                     Define ASVT DSECT\n         IHAASCB ,                     Define ASCB DSECT\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     Define ASSB DSECT\n         IHAASTE ,                     Define ASTE DSECT\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n         DUCDSECT                      Define DUCT DSECTs\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHARB01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n         USING DSPDSECT,R9           Establish Addressability\n*\nRDHARB01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=BASR\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB WTOR                    Issue WTOR & Wait for Response\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\n*   We have to first obtain a Play Page to move data from real\n* storage locations where this data is stored because the #TRACE\n* macro has yet to be enhanced to display real storage locations\n* or to access data in AR mode.\n*\nINIT     SUBNTRY ,\n         GETMAIN RU,LV=PLAYPGLN,       Obtain 4K for a Play Page       *\n               BNDRY=PAGE              (Same)\n         ST    R1,DSAPLAYP             Save Play Page Address\n*\n** Show ASTE from CR5 and DUCT from CR2\n*\n         STCTG CR0,CR15,DSACNTRL       Store Control Registers\n         #TRACE DATA=('Control Registers On Entry',DSACNTRL,16*8)\n*\n         LG    R3,DSACNTRL+5*8         Get Address of Primary ASCE\n         L     R2,DSAPLAYP             Set To Address\n         LH    R4,=Y(64)               Set Length\n         MFREAL 0(R2),0(R3),           Show me the Segment Table       *\n               LEN=(R4)                (Same)\n         #TRACE DATA=('ASTE From CR5',0(R2),64),REGS=(R3)\n*\n         LG    R3,DSACNTRL+2*8         Get Address of DUCT\n         L     R2,DSAPLAYP             Set To Address\n         LH    R4,=Y(DUCTLNTH)         Set Length\n         MFREAL 0(R2),0(R3),           Show me the Segment Table       *\n               LEN=(R4)                (Same)\n         L     R3,DUCTDUAL-DUCTO(,R2)  Get Real Address of DUAL\n         ST    R3,DSADUALD             Address of DUAL From Duct\n*\n** Make Us non-Swapable - Required for Common Dataspaces\n*\n         XR    R1,R1                   Swapping Out This ASID\n         SYSEVENT TRANSWAP             Make Us Noon-Swapable\n*\n** Return to Caller\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\nK        EQU   1024\nPLAYPGLN EQU   4*K\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n         SYSEVENT OKSWAP               Remove Non-Swappability\n*\n         L     R2,DSAPLAYP             Get Play Page Address\n         FREEMAIN RU,LV=PLAYPGLN,      Free Storage for Segment Table  *\n               A=(R2)                  (Same)\n*\n         GOSUB DDSP                    Delete Test Dataspaces\n*\n** Return to Caller\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** WTOR - issue WTOR & Wait for Response                              *\n*=====================================================================*\n*\n*   This routine alllows me to stop after initializing the environment\n* providing the opportunity to dump the address space and view things\n* under IPCS.\n*\nWTOR     SUBNTRY ,\n         MVC   DSAWTOR,RWTOR\n*temp    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *\n               DSAWORKD,8,DSAECBWT,MF=(E,DSAWTOR)\n*temp    WAIT ECB=DSAECBWT           Wait for operator Response\n*\n** Return to Caller\n*\nWTOR999  DS    0H\n         SUBEXIT ,\n*\nRWTOR    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *\n               *-*,8,*-*,MF=L\nRWTORL   EQU   *-RWTOR\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         GOSUB DASTB                   Display Tables Before\n         GOSUB CDSP                    Create Test Dataspaces\n         GOSUB DASTA                   Display Tables After\n*\n         #TRACE MSG=' ',NOHEAD=YES\n         #TRACE DATA=('Single STKN/ORGN/ALET 1',DSA1STKN,32),NOHEAD=YES\n         #TRACE DATA=('Common STKN/ORGN/ALET 2',DSA2STKN,32),NOHEAD=YES\n         #TRACE DATA=('All    STKN/ORGN/ALET 3',DSA3STKN,32),NOHEAD=YES\n         #TRACE MSG=' ',NOHEAD=YES\n*\n** Test Printing Data From Dataspace With #TRACE\n*\n         GOSUB TEST                    #TRACE in ARMODE Testing Here\n*\n** Return to Caller\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TEST - Test #TRACE Macro in an ARMODE Program                      *\n*=====================================================================*\n*\nTEST     SUBNTRY ,\n         XGR   R2,R2                   Dataspace Starts at Loc Zero\n         SAC   512                     Enter ARMADE\n*\n** Test DATA= Getting Data From Dataspace\n*\n         #TRACE MSG='Testing DATA= Parameter With Data in Dataspace.'\n         LAM   AR2,AR2,DSA1ALET        Load ALET for Dataspace 1\n         #TRACE DATA=('Data From Dataspace 1',0(R2),128)\n*\n         LAM   AR2,AR2,DSA2ALET        Load ALET for Dataspace 2\n         #TRACE DATA=('Data From Dataspace 2',0(R2),128)\n*\n         LAM   AR2,AR2,DSA3ALET        Load ALET for Dataspace 3\n         #TRACE DATA=('Data From Dataspace 3',0(R2),128)\n*\n** Test MSG= Getting Variable Data From Dataspace\n*\n         #TRACE MSG=('Showing Dataspace CL8 Data: ',DSPWKCL8)\n         #TRACE MSG=('Showing Dataspace ZL8 Data: ',DSPWKZL8)\n         #TRACE MSG=('Showing Dataspace XL8 Data: ',DSPWKXL8)\n         #TRACE MSG=('Showing Dataspace WKF Data: ',DSPWORKF)\n         #TRACE MSG=('Showing Dataspace WKH Data: ',DSPWORKH)\n*\n         #TRACE MSG=('Showing Dataspace PL8 Data: ',DSPWKPL8) Bug\n*\n         SAC   000                     Exit  ARMADE\n*\n** Return to Caller\n*\nTEST999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** CDSP - Create a Few of Data Spaces                                 *\n*=====================================================================*\n*\nCDSP     SUBNTRY MSG='Creating Dataspaces'\n*\n** Build RDHDSP01 - SCOPE=SINGLE\n*\n         DSPSERV CREATE,           -*- Create a Data Space             *\n               NAME==C'RDHDSP01',      ..Name                          *\n               STOKEN=DSA1STKN,        ..Stoken Returned               *\n               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *\n               ORIGIN=DSA1ORGN,        ..Starting at Zero              *\n               SCOPE=SINGLE,           ..Local Dataspace               *\n               MF=(E,DSADSPL)\n*\n         LA    R3,DSA1STKN             Point at Dataspace STOKEN\n         XC    DSAALE,DSAALE           Zero Parameter Area\n         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *\n               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *\n               ALET=(R4),              Output ALET address             *\n               CHKEAX=NO,              Don't check EAX table           *\n               CHKPT=IGNORE,           Don't inhibit CHKPTs            *\n               AL=PASN,                Create ALET on PASN list        *\n               MF=(E,DSAALE)           Execute form\n         ST    R4,DSA1ALET             Save ALET Value\n*\n         LA    R3,DSA1STKN             Point at Dataspace STOKEN\n         XC    DSAALE,DSAALE           Zero Parameter Area\n         ALESERV ADD,              -*- Get ALET for Dataspace - DUAL   *\n               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *\n               ALET=(R4),              Output ALET address             *\n               CHKEAX=NO,              Don't check EAX table           *\n               CHKPT=IGNORE,           Don't inhibit CHKPTs            *\n               AL=WORKUNIT,            Create ALET on PASN list        *\n               MF=(E,DSAALE)           Execute form\n         ST    R4,DSA1ALED             Save ALET Value\n*\n         LAM   AR0,AR15,=16A(0)    -*- Initialize The Dataspace\n         SAC   512                     Shift Into AR Mode\n         LAM   AR2,AR2,DSA1ALET        Get First ALET\n         XR    R2,R2                   Start at Location Zero\n         MVC   0(8,R2),=C'RDHDSP01'    Put Eyecatcher in Dataspace\n         LAM   AR2,AR2,DSA1ALED        Get DUAL  ALET\n         MVC   8(8,R2),=C'DUALALET'    Put Eyecatcher in Dataspace\n         LAE   R9,0(,R2)\n         GOSUB PDSP                    Populate With test Data\n         SAC   000                     Back Into Primary Mode\n*\n** BUILD RDHDSP02 - SCOPE=COMMON\n*\n         DSPSERV CREATE,           -*- Create a Data Space             *\n               NAME==C'RDHDSP02',      ..Name                          *\n               STOKEN=DSA2STKN,        ..Stoken Returned               *\n               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *\n               ORIGIN=DSA2ORGN,        ..Starting at Zero              *\n               SCOPE=COMMON,           ..Common Database               *\n               MF=(E,DSADSPL)\n*\n         LA    R3,DSA2STKN             Point at Dataspace STOKEN\n         XC    DSAALE,DSAALE           Zero Parameter Area\n         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *\n               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *\n               ALET=(R4),              Output ALET address             *\n               CHKEAX=NO,              Don't check EAX table           *\n               CHKPT=IGNORE,           Don't inhibit CHKPTs            *\n               AL=PASN,                Create ALET on PASN list        *\n               MF=(E,DSAALE)           Execute form\n         ST    R4,DSA2ALET             Save ALET Value\n*\n         SAC   512                 -*- Initialize the Dataspace\n         LAM   AR2,AR2,DSA2ALET        Get First ALET\n         XR    R2,R2                   Start at Location Zero\n         MVC   0(8,R2),=C'RDHDSP02'    Put Eyecatcher in Dataspace\n         MVC   8(8,R2),=C'PASNALET'    Put Eyecatcher in Dataspace\n         LAE   R9,0(,R2)\n         GOSUB PDSP                    Populate With test Data\n         SAC   000                     Back Into Primary Mode\n*\n** BUILD RDHDSP03 - SCOPE=ALL\n*\n         DSPSERV CREATE,           -*- Create a Data Space             *\n               NAME==C'RDHDSP03',      ..Name                          *\n               STOKEN=DSA3STKN,        ..Stoken Returned               *\n               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *\n               ORIGIN=DSA3ORGN,        ..Starting at Zero              *\n               SCOPE=ALL,              ..An All Dataspace              *\n               MF=(E,DSADSPL)\n*\n         LA    R3,DSA3STKN             Point at Dataspace STOKEN\n         XC    DSAALE,DSAALE           Zero Parameter Area\n         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *\n               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *\n               ALET=(R4),              Output ALET address             *\n               CHKEAX=NO,              Don't check EAX table           *\n               CHKPT=IGNORE,           Don't inhibit CHKPTs            *\n               AL=PASN,                Create ALET on PASN list        *\n               MF=(E,DSAALE)           Execute form\n         ST    R4,DSA3ALET             Save ALET Value\n*\n         LA    R3,DSA3STKN             Point at Dataspace STOKEN\n         XC    DSAALE,DSAALE           Zero Parameter Area\n         ALESERV ADD,              -*- Get ALET for Dataspace - DUAL   *\n               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *\n               ALET=(R4),              Output ALET address             *\n               CHKEAX=NO,              Don't check EAX table           *\n               CHKPT=IGNORE,           Don't inhibit CHKPTs            *\n               AL=WORKUNIT,            Create ALET on PASN list        *\n               MF=(E,DSAALE)           Execute form\n         ST    R4,DSA3ALED             Save ALET Value\n*\n         SAC   512                 -*- Initialize the Dataspace\n         LAM   AR2,AR2,DSA3ALET        Get First ALET\n         XR    R2,R2                   Start at Location Zero\n         MVC   0(8,R2),=C'RDHDSP03'    Put Eyecatcher in Dataspace\n         LAM   AR2,AR2,DSA3ALED        Get DUAL  ALET\n         MVC   8(8,R2),=C'DUALALET'    Put Eyecatcher in Dataspace\n         LAE   R9,0(,R2)\n         GOSUB PDSP                    Populate With test Data\n         SAC   000                     Back Into Primary Mode\n*\n** Return To Caller\n*\nCDSP999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** PDSP - Populate Dataspace                                          *\n*=====================================================================*\n*\nPDSP     SUBNTRY ,\n         MVC   DSPWKCL8,=CL8'ABCDEFGH'\n         MVC   DSPWKZL8,=CL8'12345678'\n         MVC   DSPWKXL8,=XL8'0102030405060708'\n         ZAP   DSPWKPL8,=PL8'1235'\n         MVC   DSPWORKF,=F'1222'\n         MVC   DSPWORKH,=H'166'\n*\n** Return To Caller\n*\nPDSP999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DDSP - Delete Our Test Data Spaces                                 *\n*=====================================================================*\n*\nDDSP     SUBNTRY MSG='Deleting Data Spaces'\n         DSPSERV DELETE,               Delete a Data Space             *\n               STOKEN=DSA1STKN,        ..Stoken for Delete Request     *\n               MF=(E,DSADSPL)\n*\n         DSPSERV DELETE,               Delete a Data Space             *\n               STOKEN=DSA2STKN,        ..Stoken for Delete Request     *\n               MF=(E,DSADSPL)\n*\n         DSPSERV DELETE,               Delete a Data Space             *\n               STOKEN=DSA3STKN,        ..Stoken for Delete Request     *\n               MF=(E,DSADSPL)\n*\n** Return to Caller\n*\nDDSP999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DASTB - Display Tables Before Dataspace Create                     *\n*=====================================================================*\n*\nDASTB    SUBNTRY ,\n         #TRACE MSG=' ',NOHEAD=YES\n         #TRACE MSG='===================================',NOHEAD=YES\n         #TRACE MSG='***> Before Dataspace Creation <***',NOHEAD=YES\n         #TRACE MSG='===================================',NOHEAD=YES\n         #TRACE MSG=' ',NOHEAD=YES\n*\n         L     R10,PSAAOLD             Get Current ASCB Address\n         USING ASCB,R10                & Addressability\n         L     R10,ASCBASTE            Get Base ASTE Address\n         USING ASTE,R10                & Addressability\n         #TRACE DATA=('Base ASTE From ASCBASTE',0(R10),64),REGS=(R10)\n*\n         L     R3,ASTEATO              Auth Table Origin\n         N     R3,=A(X'7FFFFFFC')      (Same)\n         L     R2,DSAPLAYP             Set To Address\n         LH    R4,=Y(768)              Set Length\n         MFREAL 0(R2),0(R3),           Show me the Authorization Table *\n               LEN=(R4)                (Same)\n*temp    #TRACE DATA=('ASTE ATO',0(R2),768),REGS=(R2,R3,R4)\n*\n         L     R3,ASTEPALD             PASN Access list\n         N     R3,=A(X'7FFFFF80')      (Same)\n         L     R2,DSAPLAYP             Set To Address\n         LH    R4,=Y(1024)             Set Length\n         MFREAL 0(R2),0(R3),           Show me the Segment Table       *\n               LEN=(R4)                (Same)\n         #TRACE DATA=('ASTEPALD - PASN-AL Before',0(R2),1024),         *\n               REGS=(R2,R3,R4)\n*\n         LG    R3,DSACNTRL+2*8         Get Address of DUCT\n         L     R2,DSAPLAYP             Set To Address\n         LH    R4,=Y(DUCTLNTH)         Set Length\n         MFREAL 0(R2),0(R3),           Show me the Segment Table       *\n               LEN=(R4)                (Same)\n         #TRACE DATA=('DUCT From CR2',0(R2),DUCTLNTH),REGS=(R3)\n*\n         L     R2,DSAPLAYP             Set To Address\n         L     R3,DUCTDUAL-DUCTO(,R2)  Get Real Address of DUAL\n         LH    R4,=Y(512)              Set Length\n         MFREAL 0(R2),0(R3),           Show me the Segment Table       *\n               LEN=(R4)                (Same)\n         #TRACE DATA=('DU-AL From DUCT Before',0(R2),256),REGS=(R3)\n*\n** Return to Caller\n*\nDASTB99  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DASTA - Display Table After Dataspace Create                       *\n*=====================================================================*\n*\nDASTA    SUBNTRY ,\n         #TRACE MSG=' ',NOHEAD=YES\n         #TRACE MSG='==================================',NOHEAD=YES\n         #TRACE MSG='***> After Dataspace Creation <***',NOHEAD=YES\n         #TRACE MSG='==================================',NOHEAD=YES\n         #TRACE MSG=' ',NOHEAD=YES\n*\n         L     R10,PSAAOLD             Get Current ASCB Address\n         USING ASCB,R10                & Addressability\n         L     R10,ASCBASTE            Get Base ASTE Address\n         USING ASTE,R10                & Addressability\n         #TRACE DATA=('Base ASTE From ASCBASTE',0(R10),64),REGS=(R10)\n*\n         L     R3,ASTEATO              Auth Table Origin\n         N     R3,=A(X'7FFFFFFC')      (Same)\n         L     R2,DSAPLAYP             Set To Address\n         LH    R4,=Y(768)              Set Length\n         MFREAL 0(R2),0(R3),           Show me the Authorization Table *\n               LEN=(R4)                (Same)\n*temp    #TRACE DATA=('ASTE ATO',0(R2),768),REGS=(R2,R3,R4)\n*\n         L     R3,ASTEPALD             PASN Access list\n         N     R3,=A(X'7FFFFF80')      (Same)\n         L     R2,DSAPLAYP             Set To Address\n         LH    R4,=Y(1024)             Set Length\n         MFREAL 0(R2),0(R3),           Show me the Segment Table       *\n               LEN=(R4)                (Same)\n         #TRACE DATA=('ASTE PSALD After',0(R2),1024),REGS=(R2,R3,R4)\n*\n         LG    R3,DSACNTRL+2*8         Get Address of DUCT\n         L     R2,DSAPLAYP             Set To Address\n         LH    R4,=Y(DUCTLNTH)         Set Length\n         MFREAL 0(R2),0(R3),           Show me the Segment Table       *\n               LEN=(R4)                (Same)\n         #TRACE DATA=('DUCT From CR2',0(R2),DUCTLNTH),REGS=(R3)\n         L     R3,DUCTDUAL-DUCTO(,R2)  Get Real Address of DUAL\n         ST    R3,DSADUALD             Address of DUAL From Duct\n*\n         L     R2,DSAPLAYP             Set To Address\n         L     R3,DSADUALD             Address of DUAL From Duct\n         LH    R4,=Y(512)              Set Length\n         MFREAL 0(R2),0(R3),           Show me the Segment Table       *\n               LEN=(R4)                (Same)\n         #TRACE DATA=('DU-AL From DUCT After',0(R2),256),REGS=(R3)\n*\n** Show ALET's Returned\n*\n         #TRACE MSG=' ',NOHEAD=YES\n         #TRACE DATA=('Single STKN/ORGN/ALET 1',DSA1STKN,24),NOHEAD=YES\n         #TRACE DATA=('Common STKN/ORGN/ALET 2',DSA2STKN,24),NOHEAD=YES\n         #TRACE DATA=('All    STKN/ORGN/ALET 3',DSA3STKN,24),NOHEAD=YES\n         #TRACE MSG=' ',NOHEAD=YES\n*\n** Return to Caller\n*\nDASTA99  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nALEMODL  DS    0D\n         ALESERV MF=L              Access a data space\nALEMODLL EQU   *-ALEMODL\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\nDSACNTRL DS    16D                     Control Registers\nDSAPLAYP DS    A                       Play Page Address\nDSABASTE DS    A                       Base ASTE Address\nDSADUALD DS    A                       DUAL Address From DUCT\n*\nDSA1STKN DS    D                       Dataspace 1 STOKEN\nDSA1ORGN DS    A                       Dataspace 1 Origin\nDSA1ALET DS    A                       Dataspace 1 ALET PASN\nDSA1ALED DS    A                       Dataspace 1 ALET DUAL\nDSA1ASN2 DS    A                       Dataspace 1 ASN PASN\nDSA1ASD2 DS    A                       Dataspace 2 ASN DU\n         DS    A\n*\nDSA2STKN DS    D                       Dataspace 2 STOKEN\nDSA2ORGN DS    A                       Dataspace 2 Origin\nDSA2ALET DS    A                       Dataspace 2 ALET PASN\nDSA2ALED DS    A                       Dataspace 2 ALET DUAL\nDSA2ASN2 DS    A                       Dataspace 2 ASN PASN\nDSA2ASD2 DS    A                       Dataspace 2 ASN DU\n         DS    A\n*\nDSA3STKN DS    D                       Dataspace 3 STOKEN\nDSA3ORGN DS    A                       Dataspace 3 Origin\nDSA3ALET DS    A                       Dataspace 3 ALET PASN\nDSA3ALED DS    A                       Dataspace 3 ALET DUAL\nDSA3ASN2 DS    A                       Dataspace 3 ASN PASN\nDSA3ASD2 DS    A                       Dataspace 3 ASN DU\n         DS    A\n*\nDSAECBWT DS    A                       ECB for WTOR\n*\n         DS    0D\nDSAWK256 DS    CL256                   GP Workarea\nDSAASN2E DS    CL128                   ASN 2ND Level Entry\n*\n** Define list Forms of IBM Macros - Uck! A Necessary Evil.\n*\n         DS    0D\nDSAWTOR  DS    XL(RWTORL)'0'           MF=L for WTOR\n         DS    0D\n*\nDSAALE   DS    XL(ALEMODLL)            Space for ALESERV List Form\n         DSPSERV MF=(L,DSADSPL)\n*\n         DSAEND ,                      Define DSA Suffex\n*\n** Parameters in Dataspace\n*\nDSPDSECT DSECT ,\nDSPNAME  DS    CL8                     Dataspace Name\nDSPALTYP DS    CL8                     ALET TYPL DUAL/PASN\n*\nDSPWKCL8 DS    CL8                     Diaplay Char     Data\nDSPWKZL8 DS    ZL8                     Display Zoned    Data\nDSPWKXL8 DS    XL8                     Display Hex      Data\nDSPWKPL8 DS    PL8                     Display Packed   Data\nDSPWORKF DS    F                       Display Fullword Data\nDSPWORKH DS    H                       Display halfword Data\n         END   ,\n./ ADD NAME=ARMDSV01 0100-10050-10050-1200-00368-00368-00000-RHDTST\n//RDHARS01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHARS01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHARS01 - Test Program for for ARMODE Programs with IMP=SVC       *\n*                                                                     *\n*    This program will test the situation where the data we wish      *\n*  to display is in a different address space or dataspace.  This     *\n*  The program will be in ARMODE when executing the #TRACE and        *\n*  RDHTRACE will trigger off that bit in the PSW to determine if      *\n*  it needs to go into ARMODE in order to access the data to be       *\n*  written to the traces.                                             *\n*                                                                     *\n*                          *** Note ***                               *\n*                                                                     *\n*    There is a problem with having the traces run in Key(8), Problem *\n*  State in ARMODE.  While you can create a dataspace in problem      *\n*  state, you cannot issue an SVC when also in ARMODE.  This means    *\n*  that these traces are not functional in this environment.  To      *\n*  run and trace a problem state program while in ARMODE it will be   *\n*  necessary to utilize the TRAP2 version of the traces.              *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASVT ,                     Define ASVT DSECT\n         IHAASCB ,                     Define ASCB DSECT\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     Define ASSB DSECT\n         IHAASTE ,                     Define ASTE DSECT\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n         DUCDSECT                      Define DUCT DSECTs\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHARS01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n         USING DSPDSECT,R9           Establish Addressability\n*\nRDHARS01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=SVC,PRINT=GEN\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB WTOR                    Issue WTOR & Wait for Response\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n** Return to Caller\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n** Return to Caller\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** WTOR - issue WTOR & Wait for Response                              *\n*=====================================================================*\n*\n*   This routine alllows me to stop after initializing the environment\n* providing the opportunity to dump the address space and view things\n* under IPCS.\n*\nWTOR     SUBNTRY ,\n         MVC   DSAWTOR,RWTOR\n*temp    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *\n               DSAWORKD,8,DSAECBWT,MF=(E,DSAWTOR)\n*temp    WAIT ECB=DSAECBWT           Wait for operator Response\n*\n** Return to Caller\n*\nWTOR999  DS    0H\n         SUBEXIT ,\n*\nRWTOR    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *\n               *-*,8,*-*,MF=L\nRWTORL   EQU   *-RWTOR\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         GOSUB CDSP                    Create Test Dataspaces\n*\n         #TRACE MSG=' ',NOHEAD=YES\n         #TRACE DATA=('Single STKN/ORGN/ALET 1',DSA1STKN,32),NOHEAD=YES\n         #TRACE MSG=' ',NOHEAD=YES\n*\n** Test Printing Data From Dataspace With #TRACE\n*\n         GOSUB TEST                    #TRACE in ARMODE Testing Here\n*\n** Return to Caller\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TEST - Test #TRACE Macro in an ARMODE Program                      *\n*=====================================================================*\n*\nTEST     SUBNTRY ,\n B TEST999 ===> Cannot xeecute an SVC in ARMODE\n*          ===> Must Use TRAP2 or BASR Implemetnations\n*\n*\n         XGR   R2,R2                   Dataspace Starts at Loc Zero\n         SAC   512                     Enter ARMADE\n*\n** Test DATA= Getting Data From Dataspace\n*\n         #TRACE MSG='Testing DATA= Parameter With Data in Dataspace.'\n         LAM   AR2,AR2,DSA1ALET        Load ALET for Dataspace 1\n         #TRACE DATA=('Data From Dataspace 1',0(R2),128)\n*\n** Test MSG= Getting Variable Data From Dataspace\n*\n         #TRACE MSG=('Showing Dataspace CL8 Data: ',DSPWKCL8)\n         #TRACE MSG=('Showing Dataspace ZL8 Data: ',DSPWKZL8)\n         #TRACE MSG=('Showing Dataspace XL8 Data: ',DSPWKXL8)\n         #TRACE MSG=('Showing Dataspace WKF Data: ',DSPWORKF)\n         #TRACE MSG=('Showing Dataspace WKH Data: ',DSPWORKH)\n*\n         #TRACE MSG=('Showing Dataspace PL8 Data: ',DSPWKPL8) Bug\n*\n         SAC   000                     Exit  ARMADE\n*\n** Return to Caller\n*\nTEST999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** CDSP - Create a Few of Data Spaces                                 *\n*=====================================================================*\n*\nCDSP     SUBNTRY MSG='Creating Dataspaces'\n*\n** Build RDHDSP01 - SCOPE=SINGLE\n*\n         DSPSERV CREATE,           -*- Create a Data Space             *\n               NAME==C'RDHDSP01',      ..Name                          *\n               STOKEN=DSA1STKN,        ..Stoken Returned               *\n               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *\n               ORIGIN=DSA1ORGN,        ..Starting at Zero              *\n               SCOPE=SINGLE,           ..Local Dataspace               *\n               MF=(E,DSADSPL)\n*\n         LA    R3,DSA1STKN             Point at Dataspace STOKEN\n         XC    DSAALE,DSAALE           Zero Parameter Area\n         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *\n               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *\n               ALET=(R4),              Output ALET address             *\n               CHKEAX=YES,             Don't check EAX table           *\n               CHKPT=IGNORE,           Don't inhibit CHKPTs            *\n               AL=PASN,                Create ALET on PASN list        *\n               MF=(E,DSAALE)           Execute form\n         ST    R4,DSA1ALET             Save ALET Value\n         LR    R5,R4                   Save ALET Value\n*\n         LA    R3,DSA1STKN             Point at Dataspace STOKEN\n         XC    DSAALE,DSAALE           Zero Parameter Area\n         ALESERV ADD,              -*- Get ALET for Dataspace - DUAL   *\n               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *\n               ALET=(R4),              Output ALET address             *\n               CHKEAX=YES,             Don't check EAX table           *\n               CHKPT=IGNORE,           Don't inhibit CHKPTs            *\n               AL=WORKUNIT,            Create ALET on PASN list        *\n               MF=(E,DSAALE)           Execute form\n         ST    R4,DSA1ALED             Save ALET Value\n*\n         LAM   AR0,AR15,=16A(0)    -*- Initialize The Dataspace\n         SAC   512                     Shift Into AR Mode\n         LAM   AR2,AR2,DSA1ALET        Get First ALET\n         XR    R2,R2                   Start at Location Zero\n         MVC   0(8,R2),=C'RDHDSP01'    Put Eyecatcher in Dataspace\n         LAM   AR2,AR2,DSA1ALED        Get DUAL  ALET\n         MVC   8(8,R2),=C'DUALALET'    Put Eyecatcher in Dataspace\n         SAC   000                     Back Into Primary Mode\n         GOSUB PDSP                    Populate With test Data\n*\n** Return To Caller\n*\nCDSP999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** PDSP - Populate Dataspace                                          *\n*=====================================================================*\n*\nPDSP     SUBNTRY ,\n         SAC   512\n         LAM   AR9,AR9,DSA1ALET        Get First ALET\n         XR    R9,R9                   At Address Zero\n         MVC   DSPWKCL8,=CL8'ABCDEFGH'\n         MVC   DSPWKZL8,=CL8'12345678'\n         MVC   DSPWKXL8,=XL8'0102030405060708'\n         ZAP   DSPWKPL8,=PL8'1235'\n         MVC   DSPWORKF,=F'1222'\n         MVC   DSPWORKH,=H'166'\n         SAC   000\n*\n** Return To Caller\n*\nPDSP999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DDSP - Delete Our Test Data Spaces                                 *\n*=====================================================================*\n*\nDDSP     SUBNTRY MSG='Deleting Data Spaces'\n         DSPSERV DELETE,               Delete a Data Space             *\n               STOKEN=DSA1STKN,        ..Stoken for Delete Request     *\n               MF=(E,DSADSPL)\n*\n** Return to Caller\n*\nDDSP999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nALEMODL  DS    0D\n         ALESERV MF=L              Access a data space\nALEMODLL EQU   *-ALEMODL\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\nDSACNTRL DS    16D                     Control Registers\nDSAPLAYP DS    A                       Play Page Address\nDSABASTE DS    A                       Base ASTE Address\nDSADUALD DS    A                       DUAL Address From DUCT\n*\nDSA1STKN DS    D                       Dataspace 1 STOKEN\nDSA1ORGN DS    A                       Dataspace 1 Origin\nDSA1ALET DS    A                       Dataspace 1 ALET PASN\nDSA1ALED DS    A                       Dataspace 1 ALET DUAL\nDSA1ASN2 DS    A                       Dataspace 1 ASN PASN\nDSA1ASD2 DS    A                       Dataspace 2 ASN DU\n         DS    A\n         DS    A\n*\nDSAECBWT DS    A                       ECB for WTOR\n*\n         DS    0D\nDSAWK256 DS    CL256                   GP Workarea\nDSAASN2E DS    CL128                   ASN 2ND Level Entry\n*\n** Define list Forms of IBM Macros - Uck! A Necessary Evil.\n*\n         DS    0D\nDSAWTOR  DS    XL(RWTORL)'0'           MF=L for WTOR\n         DS    0D\n*\nDSAALE   DS    XL(ALEMODLL)            Space for ALESERV List Form\n         DSPSERV MF=(L,DSADSPL)\n*\n         DSAEND ,                      Define DSA Suffex\n*\n** Parameters in Dataspace\n*\nDSPDSECT DSECT ,\nDSPNAME  DS    CL8                     Dataspace Name\nDSPALTYP DS    CL8                     ALET TYPL DUAL/PASN\n*\nDSPWKCL8 DS    CL8                     Diaplay Char     Data\nDSPWKZL8 DS    ZL8                     Display Zoned    Data\nDSPWKXL8 DS    XL8                     Display Hex      Data\nDSPWKPL8 DS    PL8                     Display Packed   Data\nDSPWORKF DS    F                       Display Fullword Data\nDSPWORKH DS    H                       Display halfword Data\n         END   ,\n./ ADD NAME=ARMDTR01 0100-10050-10050-1200-00355-00355-00000-RHDTST\n//RDHART01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHART01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHART01 - Test Program for for ARMODE Programs with IMP=TRAP2     *\n*                                                                     *\n*    This program will test the situation where the data we wish      *\n*  to display is in a different address space or dataspace.  This     *\n*  The program will be in ARMODE when executing the #TRACE and        *\n*  RDHTRACE will trigger off that bit in the PSW to determine if      *\n*  it needs to go into ARMODE in order to access the data to be       *\n*  written to the traces.                                             *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASVT ,                     Define ASVT DSECT\n         IHAASCB ,                     Define ASCB DSECT\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     Define ASSB DSECT\n         IHAASTE ,                     Define ASTE DSECT\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n         DUCDSECT                      Define DUCT DSECTs\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHART01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n         USING DSPDSECT,R9           Establish Addressability\n*\nRDHART01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=TRAP2,PRINT=GEN\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB WTOR                    Issue WTOR & Wait for Response\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n** Return to Caller\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n** Return to Caller\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** WTOR - issue WTOR & Wait for Response                              *\n*=====================================================================*\n*\n*   This routine alllows me to stop after initializing the environment\n* providing the opportunity to dump the address space and view things\n* under IPCS.\n*\nWTOR     SUBNTRY ,\n         MVC   DSAWTOR,RWTOR\n*temp    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *\n               DSAWORKD,8,DSAECBWT,MF=(E,DSAWTOR)\n*temp    WAIT ECB=DSAECBWT           Wait for operator Response\n*\n** Return to Caller\n*\nWTOR999  DS    0H\n         SUBEXIT ,\n*\nRWTOR    WTOR  'RDH0001: RDHTPALV waiting to terminate.',              *\n               *-*,8,*-*,MF=L\nRWTORL   EQU   *-RWTOR\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         GOSUB CDSP                    Create Test Dataspaces\n*\n         #TRACE MSG=' ',NOHEAD=YES\n         #TRACE DATA=('Single STKN/ORGN/ALET 1',DSA1STKN,32),NOHEAD=YES\n         #TRACE MSG=' ',NOHEAD=YES\n*\n** Test Printing Data From Dataspace With #TRACE\n*\n         GOSUB TEST                    #TRACE in ARMODE Testing Here\n*\n** Return to Caller\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TEST - Test #TRACE Macro in an ARMODE Program                      *\n*=====================================================================*\n*\nTEST     SUBNTRY ,\n         XGR   R2,R2                   Dataspace Starts at Loc Zero\n         SAC   512                     Enter ARMADE\n*\n** Test DATA= Getting Data From Dataspace\n*\n         #TRACE MSG='Testing DATA= Parameter With Data in Dataspace.'\n         LAM   AR2,AR2,DSA1ALET        Load ALET for Dataspace 1\n         #TRACE DATA=('Data From Dataspace 1',0(R2),128),REGS=ALL\n*\n** Test MSG= Getting Variable Data From Dataspace\n*\n         #TRACE MSG=('Showing Dataspace CL8 Data: ',DSPWKCL8)\n         #TRACE MSG=('Showing Dataspace ZL8 Data: ',DSPWKZL8)\n         #TRACE MSG=('Showing Dataspace XL8 Data: ',DSPWKXL8)\n         #TRACE MSG=('Showing Dataspace WKF Data: ',DSPWORKF)\n         #TRACE MSG=('Showing Dataspace WKH Data: ',DSPWORKH)\n         #TRACE MSG=('Showing Dataspace PL8 Data: ',DSPWKPL8)\n*\n         SAC   000                     Exit  ARMADE\n*\n** Return to Caller\n*\nTEST999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** CDSP - Create a Few of Data Spaces                                 *\n*=====================================================================*\n*\nCDSP     SUBNTRY MSG='Creating Dataspaces'\n*\n** Build RDHDSP01 - SCOPE=SINGLE\n*\n         DSPSERV CREATE,           -*- Create a Data Space             *\n               NAME==C'RDHDSP01',      ..Name                          *\n               STOKEN=DSA1STKN,        ..Stoken Returned               *\n               BLOCKS==A(10),          ..Get 40K 10-4K Blocks          *\n               ORIGIN=DSA1ORGN,        ..Starting at Zero              *\n               SCOPE=SINGLE,           ..Local Dataspace               *\n               MF=(E,DSADSPL)\n*\n         LA    R3,DSA1STKN             Point at Dataspace STOKEN\n         XC    DSAALE,DSAALE           Zero Parameter Area\n         ALESERV ADD,              -*- Get ALET for Dataspace - PASN   *\n               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *\n               ALET=(R4),              Output ALET address             *\n               CHKEAX=YES,             Don't check EAX table           *\n               CHKPT=IGNORE,           Don't inhibit CHKPTs            *\n               AL=PASN,                Create ALET on PASN list        *\n               MF=(E,DSAALE)           Execute form\n         ST    R4,DSA1ALET             Save ALET Value\n         LR    R5,R4                   Save ALET Value\n*\n         LA    R3,DSA1STKN             Point at Dataspace STOKEN\n         XC    DSAALE,DSAALE           Zero Parameter Area\n         ALESERV ADD,              -*- Get ALET for Dataspace - DUAL   *\n               STOKEN=0(R3),           STOKEN from MVS DSPSERV         *\n               ALET=(R4),              Output ALET address             *\n               CHKEAX=YES,             Don't check EAX table           *\n               CHKPT=IGNORE,           Don't inhibit CHKPTs            *\n               AL=WORKUNIT,            Create ALET on PASN list        *\n               MF=(E,DSAALE)           Execute form\n         ST    R4,DSA1ALED             Save ALET Value\n*\n         LAM   AR0,AR15,=16A(0)    -*- Initialize The Dataspace\n         SAC   512                     Shift Into AR Mode\n         LAM   AR2,AR2,DSA1ALET        Get First ALET\n         XR    R2,R2                   Start at Location Zero\n         MVC   0(8,R2),=C'RDHDSP01'    Put Eyecatcher in Dataspace\n         LAM   AR2,AR2,DSA1ALED        Get DUAL  ALET\n         MVC   8(8,R2),=C'DUALALET'    Put Eyecatcher in Dataspace\n         SAC   000                     Back Into Primary Mode\n         GOSUB PDSP                    Populate With test Data\n*\n** Return To Caller\n*\nCDSP999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** PDSP - Populate Dataspace                                          *\n*=====================================================================*\n*\nPDSP     SUBNTRY ,\n         SAC   512\n         LAM   AR9,AR9,DSA1ALET        Get First ALET\n         XR    R9,R9                   At Address Zero\n         MVC   DSPWKCL8,=CL8'ABCDEFGH'\n         MVC   DSPWKZL8,=CL8'12345678'\n         MVC   DSPWKXL8,=XL8'0102030405060708'\n         ZAP   DSPWKPL8,=PL8'1235'\n         MVC   DSPWORKF,=F'1222'\n         MVC   DSPWORKH,=H'166'\n         SAC   000\n*\n** Return To Caller\n*\nPDSP999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DDSP - Delete Our Test Data Spaces                                 *\n*=====================================================================*\n*\nDDSP     SUBNTRY MSG='Deleting Data Spaces'\n         DSPSERV DELETE,               Delete a Data Space             *\n               STOKEN=DSA1STKN,        ..Stoken for Delete Request     *\n               MF=(E,DSADSPL)\n*\n** Return to Caller\n*\nDDSP999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nALEMODL  DS    0D\n         ALESERV MF=L              Access a data space\nALEMODLL EQU   *-ALEMODL\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\nDSACNTRL DS    16D                     Control Registers\nDSAPLAYP DS    A                       Play Page Address\nDSABASTE DS    A                       Base ASTE Address\nDSADUALD DS    A                       DUAL Address From DUCT\n*\nDSA1STKN DS    D                       Dataspace 1 STOKEN\nDSA1ORGN DS    A                       Dataspace 1 Origin\nDSA1ALET DS    A                       Dataspace 1 ALET PASN\nDSA1ALED DS    A                       Dataspace 1 ALET DUAL\nDSA1ASN2 DS    A                       Dataspace 1 ASN PASN\nDSA1ASD2 DS    A                       Dataspace 2 ASN DU\n         DS    A\n         DS    A\n*\nDSAECBWT DS    A                       ECB for WTOR\n*\n         DS    0D\nDSAWK256 DS    CL256                   GP Workarea\nDSAASN2E DS    CL128                   ASN 2ND Level Entry\n*\n** Define list Forms of IBM Macros - Uck! A Necessary Evil.\n*\n         DS    0D\nDSAWTOR  DS    XL(RWTORL)'0'           MF=L for WTOR\n         DS    0D\n*\nDSAALE   DS    XL(ALEMODLL)            Space for ALESERV List Form\n         DSPSERV MF=(L,DSADSPL)\n*\n         DSAEND ,                      Define DSA Suffex\n*\n** Parameters in Dataspace\n*\nDSPDSECT DSECT ,\nDSPNAME  DS    CL8                     Dataspace Name\nDSPALTYP DS    CL8                     ALET TYPL DUAL/PASN\n*\nDSPWKCL8 DS    CL8                     Diaplay Char     Data\nDSPWKZL8 DS    ZL8                     Display Zoned    Data\nDSPWKXL8 DS    XL8                     Display Hex      Data\nDSPWKPL8 DS    PL8                     Display Packed   Data\nDSPWORKF DS    F                       Display Fullword Data\nDSPWORKH DS    H                       Display halfword Data\n         END   ,\n./ ADD NAME=ATBSBS01 0100-10050-10050-1200-00227-00227-00000-RHDTST\n//RDHATB01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHATB01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHATB01 - Initial Test of #TRACE of Above-The-Bar (ATB) Storage   *\n*                                                                     *\n*    This is the first test program designed to test the DATA= and    *\n*  MSG= parameters of #TRACE where the data being displayed resides   *\n*  above-the-bar.                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n*\n print on,gen\n         LSEDSECT ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHATB01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n         USING ATBDSECT,R10          ATB Addressability\n*\nRDHATB01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R11,R12),       (Same)                            *\n               IMP=BASR,PRINT=GEN    (Same)\n*\n** Program MainLine\n*\n         GOSUB INIT                  Do Init Processing\n         GOSUB MAIN                  Do Main Processing\n         GOSUB TERM                  Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         ESTAE 0                     Cancel ESTAE Recovery\n*\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         GOSUB TEST\n*\n** Return to Caller\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INI7 - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n** Get Some Local Above-The-Bar Storage - Builds Region Tables\n*\n         LA    R2,=AD(4)               Set Number of Segments (Meg)\n         IARV64 REQUEST=GETSTOR,       Get Some ATB Storage            *\n               SEGMENTS=(R2),          ..Number of Segments            *\n               FPROT=NO,               ..Not Fetch Protected           *\n               ORIGIN=DSAATBAD,        ..Return Address Here           *\n               MF=(E,DSAV64)           ..Address of List Form\n         LG    R10,DSAATBAD            Establish Addressability\n*\n** Populate ATB Area With Data to Display Via #TRACE\n*\n         SAM64 ,                       Move to 64-Bit mode\n         MVC   ATBEYE,=CL8'ATBDSECT'\n         MVC   ATBWKCL8,=CL8'ABCDEFGH'\n         MVC   ATBWKZL8,=ZL8'12345678'\n         MVC   ATBWKXL8,=XL8'0102030405060708'\n         ZAP   ATBWKPL8,=PL8'1235'\n         MVC   ATBWORKF,=F'1222'\n         MVC   ATBWORKH,=H'166'\n         SAM31 ,                       Return to 31-Bit Mode\n*\n** Return to Caller\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n** Free Above-The-Bar Storage\n*\n         LA    R2,=A(1)                Set Number of Segments (Meg)\n         IARV64 REQUEST=DETACH,        Free My ATB Storage             *\n               MEMOBJSTART=DSAATBAD,   ..Start of Memory Object        *\n               MF=(E,DSAV64)           ..Address of List Form\n*\n** Return to Caller\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TEST - Test #TRACE Macro in an ARMODE Program                      *\n*=====================================================================*\n*\nTEST     SUBNTRY ,\n         SAM64 ,                       Enter 64-Bit mode\n*\n** Test DATA= Getting Data From Dataspace\n*\n         #TRACE MSG='Testing DATA= Parameter With Above-The-Bar Data.'\n         #TRACE DATA=('Data From Above-The-Bar',0(R10),128)\n*\n** Test MSG= Getting Variable Data From Dataspace\n*\n         #TRACE MSG=('Showing ATB CL8 Data: ',ATBWKCL8)\n         #TRACE MSG=('Showing ATB ZL8 Data: ',ATBWKZL8)\n         #TRACE MSG=('Showing ATB XL8 Data: ',ATBWKXL8)\n         #TRACE MSG=('Showing ATB WKF Data: ',ATBWORKF)\n         #TRACE MSG=('Showing ATB WKH Data: ',ATBWORKH)\n         #TRACE MSG=('Showing ATB PL8 Data: ',ATBWKPL8)\n*\n         SAM31 ,                       Return to 31-Bit Mode\n*\n** Return to Caller\n*\nTEST999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\nDSACR15  DS    A                     CR15 Value\n*\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* ATBDSECT - Define The Area for my Above-The-Bar Storage             *\n***********************************************************************\n*\nATBDSECT DSECT ,\nATBEYE   DS    CL8                     Eye Catcher\n*\nATBWKCL8 DS    CL8                     Diaplay Char     Data\nATBWKZL8 DS    ZL8                     Display Zoned    Data\nATBWKXL8 DS    XL8                     Display Hex      Data\nATBWKPL8 DS    PL8                     Display Packed   Data\nATBWORKF DS    F                       Display Fullword Data\nATBWORKH DS    H                       Display halfword Data\n         END   ,\n./ ADD NAME=ATBSSV01 0100-10050-10050-1200-00227-00227-00000-RHDTST\n//RDHATS01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHATS01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHATS01 - Initial Test of #TRACE of Above-The-Bar (ATB) Storage   *\n*                                                                     *\n*    This is the first test program designed to test the DATA= and    *\n*  MSG= parameters of #TRACE where the data being displayed resides   *\n*  above-the-bar.                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n*\n print on,gen\n         LSEDSECT ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHATS01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n         USING ATBDSECT,R10          ATB Addressability\n*\nRDHATS01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=SVC,PRINT=GEN     (Same)\n*\n** Program MainLine\n*\n         GOSUB INIT                  Do Init Processing\n         GOSUB MAIN                  Do Main Processing\n         GOSUB TERM                  Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         ESTAE 0                     Cancel ESTAE Recovery\n*\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         GOSUB TEST\n*\n** Return to Caller\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INI7 - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n** Get Some Local Above-The-Bar Storage - Builds Region Tables\n*\n         LA    R2,=AD(1)               Set Number of Segments (Meg)\n         IARV64 REQUEST=GETSTOR,       Get Some ATB Storage            *\n               SEGMENTS=(R2),          ..Number of Segments            *\n               FPROT=NO,               ..Not Fetch Protected           *\n               ORIGIN=DSAATBAD,        ..Return Address Here           *\n               MF=(E,DSAV64)           ..Address of List Form\n         LG    R10,DSAATBAD            Establish Addressability\n*\n** Populate ATB Area With Data to Display Via #TRACE\n*\n         SAM64 ,                       Move to 64-Bit mode\n         MVC   ATBEYE,=CL8'ATBDSECT'\n         MVC   ATBWKCL8,=CL8'ABCDEFGH'\n         MVC   ATBWKZL8,=ZL8'12345678'\n         MVC   ATBWKXL8,=XL8'0102030405060708'\n         ZAP   ATBWKPL8,=PL8'1235'\n         MVC   ATBWORKF,=F'1222'\n         MVC   ATBWORKH,=H'166'\n         SAM31 ,                       Return to 31-Bit Mode\n*\n** Return to Caller\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n** Free Above-The-Bar Storage\n*\n         LA    R2,=AD(1)                Set Number of Segments (Meg)\n         IARV64 REQUEST=DETACH,        Free My ATB Storage             *\n               MEMOBJSTART=DSAATBAD,   ..Start of Memory Object        *\n               MF=(E,DSAV64)           ..Address of List Form\n*\n** Return to Caller\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TEST - Test #TRACE Macro in an ARMODE Program                      *\n*=====================================================================*\n*\nTEST     SUBNTRY ,\n         SAM64 ,                       Enter 64-Bit mode\n*\n** Test DATA= Getting Data From Dataspace\n*\n         #TRACE MSG='Testing DATA= Parameter With Above-The-Bar Data.'\n         #TRACE DATA=('Data From Above-The-Bar',0(R10),128)\n*\n** Test MSG= Getting Variable Data From Dataspace\n*\n         #TRACE MSG=('Showing Dataspace CL8 Data: ',ATBWKCL8)\n         #TRACE MSG=('Showing Dataspace ZL8 Data: ',ATBWKZL8)\n         #TRACE MSG=('Showing Dataspace XL8 Data: ',ATBWKXL8)\n         #TRACE MSG=('Showing Dataspace WKF Data: ',ATBWORKF)\n         #TRACE MSG=('Showing Dataspace WKH Data: ',ATBWORKH)\n         #TRACE MSG=('Showing Dataspace PL8 Data: ',ATBWKPL8)\n*\n         SAM31 ,                       Return to 31-Bit Mode\n*\n** Return to Caller\n*\nTEST999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\nDSACR15  DS    A                     CR15 Value\n*\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* ATBDSECT - Define The Area for my Above-The-Bar Storage             *\n***********************************************************************\n*\nATBDSECT DSECT ,\nATBEYE   DS    CL8                     Eye Catcher\n*\nATBWKCL8 DS    CL8                     Diaplay Char     Data\nATBWKZL8 DS    ZL8                     Display Zoned    Data\nATBWKXL8 DS    XL8                     Display Hex      Data\nATBWKPL8 DS    PL8                     Display Packed   Data\nATBWORKF DS    F                       Display Fullword Data\nATBWORKH DS    H                       Display halfword Data\n         END   ,\n./ ADD NAME=ATBSTR01 0100-10050-10050-1200-00227-00227-00000-RHDTST\n//RDHATT01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHATT01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHATT01 - Initial Test of #TRACE of Above-The-Bar (ATB) Storage   *\n*                                                                     *\n*    This is the first test program designed to test the DATA= and    *\n*  MSG= parameters of #TRACE where the data being displayed resides   *\n*  above-the-bar.                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n*\n print on,gen\n         LSEDSECT ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHATT01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n         USING ATBDSECT,R10          ATB Addressability\n*\nRDHATT01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               IMP=TRAP2,PRINT=GEN   (Same)\n*\n** Program MainLine\n*\n         GOSUB INIT                  Do Init Processing\n         GOSUB MAIN                  Do Main Processing\n         GOSUB TERM                  Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         ESTAE 0                     Cancel ESTAE Recovery\n*\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         GOSUB TEST\n*\n** Return to Caller\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INI7 - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n** Get Some Local Above-The-Bar Storage - Builds Region Tables\n*\n         LA    R2,=AD(1)               Set Number of Segments (Meg)\n         IARV64 REQUEST=GETSTOR,       Get Some ATB Storage            *\n               SEGMENTS=(R2),          ..Number of Segments            *\n               FPROT=NO,               ..Not Fetch Protected           *\n               ORIGIN=DSAATBAD,        ..Return Address Here           *\n               MF=(E,DSAV64)           ..Address of List Form\n         LG    R10,DSAATBAD            Establish Addressability\n*\n** Populate ATB Area With Data to Display Via #TRACE\n*\n         SAM64 ,                       Move to 64-Bit mode\n         MVC   ATBEYE,=CL8'ATBDSECT'\n         MVC   ATBWKCL8,=CL8'ABCDEFGH'\n         MVC   ATBWKZL8,=ZL8'12345678'\n         MVC   ATBWKXL8,=XL8'0102030405060708'\n         ZAP   ATBWKPL8,=PL8'1235'\n         MVC   ATBWORKF,=F'1222'\n         MVC   ATBWORKH,=H'166'\n         SAM31 ,                       Return to 31-Bit Mode\n*\n** Return to Caller\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n** Free Above-The-Bar Storage\n*\n         LA    R2,=AD(1)                Set Number of Segments (Meg)\n         IARV64 REQUEST=DETACH,        Free My ATB Storage             *\n               MEMOBJSTART=DSAATBAD,   ..Start of Memory Object        *\n               MF=(E,DSAV64)           ..Address of List Form\n*\n** Return to Caller\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TEST - Test #TRACE Macro in an ARMODE Program                      *\n*=====================================================================*\n*\nTEST     SUBNTRY ,\n         SAM64 ,                       Enter 64-Bit mode\n*\n** Test DATA= Getting Data From Dataspace\n*\n         #TRACE MSG='Testing DATA= Parameter With Above-The-Bar Data.'\n         #TRACE DATA=('Data From Above-The-Bar',0(R10),128)\n*\n** Test MSG= Getting Variable Data From Dataspace\n*\n         #TRACE MSG=('Showing Dataspace CL8 Data: ',ATBWKCL8)\n         #TRACE MSG=('Showing Dataspace ZL8 Data: ',ATBWKZL8)\n         #TRACE MSG=('Showing Dataspace XL8 Data: ',ATBWKXL8)\n         #TRACE MSG=('Showing Dataspace WKF Data: ',ATBWORKF)\n         #TRACE MSG=('Showing Dataspace WKH Data: ',ATBWORKH)\n         #TRACE MSG=('Showing Dataspace PL8 Data: ',ATBWKPL8)\n*\n         SAM31 ,                       Return to 31-Bit Mode\n*\n** Return to Caller\n*\nTEST999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\nDSACR15  DS    A                     CR15 Value\n*\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* ATBDSECT - Define The Area for my Above-The-Bar Storage             *\n***********************************************************************\n*\nATBDSECT DSECT ,\nATBEYE   DS    CL8                     Eye Catcher\n*\nATBWKCL8 DS    CL8                     Diaplay Char     Data\nATBWKZL8 DS    ZL8                     Display Zoned    Data\nATBWKXL8 DS    XL8                     Display Hex      Data\nATBWKPL8 DS    PL8                     Display Packed   Data\nATBWORKF DS    F                       Display Fullword Data\nATBWORKH DS    H                       Display halfword Data\n         END   ,\n./ ADD NAME=BASTST01 0100-10050-10050-1200-00215-00215-00000-RHDTST\n//RDHBST01 JOB (0,0),'HARPER',REGION=4M,\n//    CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)\n//*\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHBST01\n//ASM.SYSIN    DD  *\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHBST01 - Program to Test Tracing Facility                        *\n*                                                                     *\n*    This test simply does some basic testing of the label level      *\n*  tracing facility and is used for regression testing and new        *\n*  features are implemented in the product.                           *\n*                                                                     *\n***********************************************************************\n*\nRDHBST01 PGMNTRY TYPE=MAIN,           Define Program Entry Code        *\n               BASE=(R12),            Constant base Register           *\n               PRINT=GEN,             Constant base Register           *\n               LEN=32,IMP=BASR        Get 32K Propogated DSA\n*\n         #TRACE REGS=ALL              Show Regs After PGMNTRY\n*\n         PRINT GEN\n         LR    R10,R1                 Save parameter Register\n         GOSUB OPEN                   Open Output Datasets\n         GOSUB PARM                   Go Process PARM=\n         GOSUB LEVEL1                 Do Levels\n         GOSUB DEEPL1                 Do Levels in Overflow\n         GOSUB CLOS                   Close Output Datasets\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                  Define Program Exit Code\n\n         PRINT GEN\n         PRINT NOGEN\n***********************************************************************\n* OPEN Test of the TYPE=OPEN form.\n***********************************************************************\n*\nOPEN     SUBNTRY MSG='On Subroutine Entry',REGS=(R2,R3,R15)\n       MVC DSAWKCL9,=CL9'    12345'\nTMPARM #TRACE MSG=('WKCL9=',DSAWKCL9)\n         SUBEXIT MSG='On Subroutine Exit',REGS=(R2,R3,R15)\n*\n***********************************************************************\n* PARM - Test of variious and sundry parameter values.\n***********************************************************************\n*\nPARM     SUBNTRY DATA=('Our Save Area',0(R13),72)\n         LM     R14,R1,=A(1,2,3,4)\n         LM     R2,R5,=A(5,6,7,8)\n         LAM    R0,R6,=A(1,2,3,4,5,6)\n         LAM    R14,R15,=A(14,15)\n*\nTRCREGS  #TRACE REGS=(R0,R1,R14,R15)\n*\nTRCPT1   #TRACE DATA=('This Data is Mine.',DAT1,L'DAT1),               *\n               MSG='Print This Message Too.',REGS=ALL\n*\n         #TRACE MSG='This trap got hit.',REGS=(R0,R1,R14,R15)\n         #TRACE MSG=('Show Me Data: ',DAT2)\nTRMSG3   #TRACE MSG=('More Data Halfword: ',DATH)\nTRMSG4   #TRACE MSG=('More Data Fullword: ',DATF)\nTRMSG5   #TRACE MSG=('More Data Zoned: ',DATZ)\nTRMSG6   #TRACE MSG=('More Data Adcon: ',DATA)\nTRMSG7   #TRACE MSG=('More Data Hex: ',DATX,' More Data: ',DAT2)\n*\n         SUBEXIT ,\n\nDAT1  DC  C'ABCDE1111111111111111111111111111111111111111111111111111'\n      DC  128C'1234'\nDAT2  DC  X'ABCDEF'\nDATH  DC  H'32767'\nDATF  DC  F'56781234'\nDATZ  DC  Z'777888223'\nDATA  DC  A(CLOS)\nDATX  DC  X'01FFAABBCCDDEE'\n*\n***********************************************************************\n* Test of Close Function\n***********************************************************************\n*\nCLOS     SUBNTRY ,\n         SUBEXIT ,\n*\n***********************************************************************\n* Tracing Levels\n***********************************************************************\n*\nLEVEL1   SUBNTRY ,\n         GOSUB LEVEL2\n         SUBEXIT ,\n*\nLEVEL2   SUBNTRY MSG='Show All PARM Types',REGS=ALL,                   *\n               DATA=('Just Some Junk Data',DAT1,L'DAT1)\n         GOSUB LEVEL3\n         SUBEXIT ,\n*\nLEVEL3   SUBNTRY ,\n         GOSUB LEVEL4\n         SUBEXIT MSG='Exiting From Level4.'\n*\nLEVEL4   SUBNTRY ,\nPREGS4   #TRACE REGS=(R0,R1,R14,R15)\n*\nPDATA4   #TRACE DATA=('This Data is Mine.',DAT1,L'DAT1),               *\n               MSG='Print This Message Too.',REGS=ALL\n         SUBEXIT ,\n*\n***********************************************************************\n* Going DEEP to Test Indention Maximum of 10 levels.\n***********************************************************************\n*\nDEEPL1   SUBNTRY MSG='Get Ready to Go Deep.'\n         GOSUB DEEPL2\n         SUBEXIT MSG='Yes We Can!'\n*\nDEEPL2   SUBNTRY ,\n         GOSUB DEEPL3\n         SUBEXIT ,\n*\nDEEPL3   SUBNTRY ,\n         GOSUB DEEPL4\n         SUBEXIT ,\n*\nDEEPL4   SUBNTRY ,\n         GOSUB DEEPL5\n         SUBEXIT ,\n*\nDEEPL5   SUBNTRY ,\n         GOSUB DEEPL6\n         SUBEXIT ,\n*\nDEEPL6   SUBNTRY ,\n         GOSUB DEEPL7\n         SUBEXIT ,\n*\nDEEPL7   SUBNTRY ,\n         GOSUB DEEPL8\n         SUBEXIT ,\n*\nDEEPL8   SUBNTRY ,\n         GOSUB DEEPL9\n         SUBEXIT ,\n*\nDEEPL9   SUBNTRY ,\n         GOSUB DEEPL10\n         SUBEXIT ,\n*\nDEEPL10  SUBNTRY ,\n         GOSUB DEEPL11\n         SUBEXIT ,\n*\nDEEPL11  SUBNTRY ,\n         GOSUB DEEPL12\n         SUBEXIT ,\n*\nDEEPL12  SUBNTRY MSG='We Got this Far, But Can We Make it Back in Good *\n               Order?',DATA=('Show Some Data',0(R13),72),REGS=ALL\n         SUBEXIT ,\n\n***********************************************************************\n*  Literials and Constants\n***********************************************************************\n*\n         CONBEG ,                      Begin Constant Area\n         LTORG ,                       Define literal Pool\n         CONEND ,                      EenOf Constant Area\n\n***********************************************************************\n* Define DSECT Areas\n***********************************************************************\n*\n         PRINT NOGEN\n         DCBD DSORG=PS\n         PRINT GEN\n*\n***********************************************************************\n* Define Dynamic Storage Area - DSA\n***********************************************************************\n*\n         DSABEG ,                 <*** Begin Dynamic Storage Area\n*\n         DSAEND ,                 <*** End Dynamic Storage Area\n         END ,\n./ ADD NAME=BASTST02 0100-10050-10050-1200-00169-00169-00000-RHDTST\n//RDHBST02 JOB (0,0),'ASSEMBLE',\n//             CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHBST02\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHBST02 - Test Dynamic Allocation #DD Macro\n*                                                                     *\n*    At this point #DD only supports the allocation of SYSOUT         *\n*  datasets and is used in RDHTRACE.  It may be expanded in the       *\n*  future.  This program is now used for regression testing of the    *\n*  label level tracing facility.                                      *\n*                                                                     *\n***********************************************************************\n*\nRDHBST02 PGMNTRY TYPE=MAIN,BASE=(R12),                                 *\n               OPSYN20=YES\n         ST    R1,DSASAVR1             Save parameter Register\n*\n         BAS   R14,INIT                Perform Initialization\n         BAS   R14,MAIN                Do Main Processing\n         BAS   R14,TERM                Do Termination Processing\n*\n** Return to Caller\n*\nMAINEXIT DS    0H\n         PGMEXIT RC=0                  Define Program Exit Code\n\n***********************************************************************\n* MAIN- Program Main Processing                                       *\n***********************************************************************\n*\nMAIN     SUBNTRY DATA=('PARMV Value',DSAPARMV,L'DSAPARMV)\n*\n*\n PRINT GEN\n         MVC   DSAWKCL9,=CL9' '\n         #DD   ALLOC,SYSOUT=A,FREE=CLOSE,RTDDN=DSAWKCL9\n PRINT NOGEN\nSHOWRC   #TRACE MSG=('DDNAME Returned: ',DSAWKCL9),REGS=(R15)\n*\n** Return to Caller\n*\nMAINEND  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n* INIT - Perform Program Initialization                               *\n***********************************************************************\n*\nINIT     SUBNTRY DATA=('More Data to Display',MAIN,128)\n*\n** Return to Caller\n*\nINITEND  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n* TERM - Perform Program Termination                                  *\n***********************************************************************\n*\nTERM     SUBNTRY DATA=('This is Data',MDLRPL,64)\n*\n** Return to Caller\n*\nTERMEND  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n*  Messages                                                           *\n***********************************************************************\n*\nMSG001I  SUBNTRY ,\n         SUBEXIT ,\n\n***********************************************************************\n*  Literials and Constants                                            *\n***********************************************************************\n*\n         CONBEG ,                      Begin Constant Area\n*\nCON0001I DC    CL121' MSG0001I: Invalid Data on PARM= Parameter.'\n*\nMDLOPL   OPEN  (*-*,(OUTPUT)),MF=L\nMDLOPLL  EQU   *-MDLOPL\n*\nMDLCLL   CLOSE (*-*),MF=L\nMDLCLLL  EQU   *-MDLCLL\n*\nMDLRPL   RPL   AREALEN=4000,KEYLEN=10,                                 *\n               OPTCD=(KEY,DIR,UPD,MVE),RECLEN=4000\nMDLRPLL  EQU   *-MDLRPL\n*\nMDLACB   ACB   DDNAME=SYSUT2,          Define SYSUT2 DCB               *\n               MACRF=(KEY,DIR,OUT)     (Same)\nMDLACBL  EQU   *-MDLACB\n*\nMDLDCB   DCB   DDNAME=SYSPRINT,        Define SYSPRINT DCB             *\n               LRECL=121,BLKSIZE=121,  (Same)                          *\n               RECFM=FA,DSORG=PS,      (Same)                          *\n               MACRF=PM                (Same)\nMDLDCBL  EQU   *-MDLDCB\n*\n         CONEND ,                      End Of Constant Area\n\n***********************************************************************\n* Define DSECT Areas                                                  *\n***********************************************************************\n*\n         PRINT NOGEN\n         IHAPSA LIST=NO                Define PSA Control Block\n         IKJTCB ,                      Define TCB Control Block\n         DCBD   DSORG=PS               Define DCB Control Block\n         IEZDEB LIST=NO                Define DEB Control Block\n         IHACDE ,                      Define CDE Control Block\n         IEFTIOT1 ,                    Define TIOT Control Block\n         PRINT GEN\n\n***********************************************************************\n* Define Dynamic Storage Area - DSA                                   *\n***********************************************************************\n*\n         DSABEG ,                 <*** Begin Dynamic Storage Area\n*\nDSABUFER DS    F                       (Same)\nDSARC    DS    F                       Return Code\n*\nDSARPLAD DS    A                       Address of RPL\n*\nDSAPARMV DS    CL128                   PARM= Data\nDSAPLINE DS    CL121                   Print Line\n*\n         DS    0D\nDSADCB   DS    XL(MDLDCBL)             Reserve Space for DCB\n         DS    0D\nDSAOPL   DS    XL(MDLOPLL)             Reserve Space for OPEN Parm\n         DS    0D\nDSACLL   DS    XL(MDLCLLL)             Reserve Space for CLOSE Parm\n         DS    0D\nDSASAVR1 DS    F                       R1 Value on Entry\n*\n         DSAEND ,                 <*** End Dynamic Storage Area\n         END ,\n./ ADD NAME=BASTST03 0100-10050-10050-1200-00079-00079-00000-RHDTST\n//RDHBST03 JOB 'DSA Test Job',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHBST03\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHBST03 - Basic test of multiple CSECT program.\n*                                                                     *\n*    This is another bassic test of the label level tracing facility  *\n*  used for regression testing.  In this case we have multiple        *\n*  PGMNTRY programs in the same source moduole.                       *\n*                                                                     *\n***********************************************************************\n*\n         PRINT ON,GEN\nRDHBST03 PGMNTRY TYPE=MAIN,PRINT=GEN,CBAS=(R12)\n         L     R15,=V(DSASUB1)\n         BASR  R14,R15\n         PGMEXIT RC=0\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,\nDSATST1  DS     D\n         DSAEND ,\n*\n** First Subprogram\n*\nDSASUB1  PGMNTRY TYPE=SUB,PRINT=GEN,CBAS=(R12)\n         L     R15,=V(DSASUB2)\n         BASR  R14,R15\n         PGMEXIT RC=0\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,\nDSADAT1  DS     D\n         DSAEND ,\n*\n** Second Subprogram\n*\nDSASUB2  PGMNTRY TYPE=SUB,PRINT=GEN,CBAS=(R12)\n         PGMEXIT RC=0\n*\n         CONBEG ,\n         CONEND ,\n*\n         DSABEG ,\nDSADAT2  DS     D\n         DSAEND ,\n         END    ,\n./ ADD NAME=BASTST04 0100-10050-10050-1200-00126-00126-00000-RHDTST\n//RDHBST04 JOB (0,0),'HARPER',REGION=4M,\n//    CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)\n//*\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHBST04\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHBST03 - Basic test - Locate Our Tracing SVC.                    *\n*                                                                     *\n*    This is another bassic test of the label level tracing facility  *\n*  used for regression testing.  In this case we are attempting to    *\n*  locate our own SVC in teh SVC Table.  This code is now in PGMNTRY. *\n*                                                                     *\n***********************************************************************\n*\n         PRINT GEN\nRDHBST04 PGMNTRY TYPE=MAIN,CBAS=(R12)  Define Program Entry Code\n*\n         LR    R10,R1                  Save parameter Register\n         BAS   R14,OPEN                Open Output Datasets\n         BAS   R14,PARM                Go Process PARM=\n         BAS   R14,CLOS                Close Output Datasets\n*\n** Return to Caller\n*\nMAINEXIT DS    0H\n         PGMEXIT RC=0                  Define Program Exit Code\n\n***********************************************************************\n*\n***********************************************************************\n*\nOPEN     SUBNTRY ,\n         L     R14,16                   Get CVT Address\n         USING CVT,R14                  Change Addressability\n         L     R14,CVTABEND             Get Address of SCVT\n         USING SCVTSECT,R14             Change Addressability\n*\n         L  R14,SCVTSVCT                Get Address of SVCTABLE\n         AH R14,=Y(255*8)               Point at SVC 255\n         LA R15,255                     Loop All SVC Table Entries\n*\n         DO FROM=(R15)                  Loop Through SVC Table\n            L  R1,0(,R14)               Get SVC Entry Point\n            LA R1,0(,R1)\n            DOEXIT (CLC,=C'RDHTRSVC',EQ,4(R1))\n            AHI R14,-8                  Bump to Prev SVCTABLE Entry\n         ENDDO ,                        -> Loop\n*\n         IF (CLC,=C'RDHTRSVC',EQ,4(R1)) Found Our SVC?\n            #TRACE MSG='SVC Found',REGS=ALL\n         ELSE ,\n            #TRACE MSG='SVC Not Found',REGS=ALL\n         ENDIF ,\n*\nOPEN999  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n*\n***********************************************************************\n*\nPARM     SUBNTRY ,\nPARM999  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n*\n***********************************************************************\n*\nCLOS     SUBNTRY ,\nCLOS999  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n*  Literials and Constants\n***********************************************************************\n*\n         CONBEG ,\n         CONEND ,\n\n***********************************************************************\n* Define DSECT Areas\n***********************************************************************\n*\n         PRINT NOGEN\n         CVT DSECT=YES                 Define CVT Control Block\n         IHASCVT ,                     Define SCVT Control Block\n         DCBD DSORG=PS\n         PRINT GEN\n\n***********************************************************************\n* Define Dynamic Storage Area - DSA\n***********************************************************************\n*\n         DSABEG ,                 <*** Begin Dynamic Storage Area\n*\n*\n         DSAEND ,                 <*** End Dynamic Storage Area\n         END ,\n./ ADD NAME=BASTST05 0100-10050-10050-1200-00151-00151-00000-RHDTST\n//RDHBST05 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHBST05\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHBST05 - Test for Buffering Support for a Single Task            *\n*                                                                     *\n*    This is a test that uses buffering support.  Trace data will be  *\n*  stored in an in storage buffer written round-robin and printed at  *\n*  task termination in the Resource Manager Exit.                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHBST05 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHBST05 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               BUFFDAT=YES,          Initiate Buffering of Data        *\n               BUFFMAX=1000,         Number of Lines to Buffer         *\n               PRINT=GEN\n*\n** Program MainLine - Gen 6000 Lines of Trace Output - Print Last 1000\n*\n         LH R2,=Y(1000)              Times Through Loop\n         DO FROM=(R2)                Generate Some Trace Data\n            GOSUB INIT                  Do Init Processing\n            GOSUB MAIN                  Do Main Processing\n            GOSUB TERM                  Do Term Processing\n         ENDDO ,                     -> Loop\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\n*\n         DSAEND ,                    Define DSA Suffex\n         END   ,\n./ ADD NAME=BSRTST01 0100-10050-10050-1200-00156-00156-00000-RHDTST\n//RDHBSR01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHBSR01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHBSR01 - Test Program Forcing BASR Implementation                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHBSR01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHBSR01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12),           (Same)                            *\n               ABAS=(R11),           (Same)                            *\n               AMODE=64,             (Same)                            *\n               OPSYN20=YES,          (Same)                            *\n               KILLBDD=NO,           (Same)                            *\n               IMP=BASR,PRINT=GEN    (Same)\n*\n** Program MainLine - Gen 6000 Lines of Trace Output - Print Last 1000\n*\n         GOSUB INIT                  Do Init Processing\n         GOSUB MAIN                  Do Main Processing\n         GOSUB TERM                  Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n         CONEND ,\nSIZEXXX DS H'0'\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\n*\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* Define Above-The-Bar Storage Area                                   *\n***********************************************************************\n*\n         ATBBEG ,                    Define ATB Prefix\n*\n*\n         ATBEND ,                    Define ATB Suffex\n         END   ,\n./ ADD NAME=ESTABS01 0100-10050-10050-1200-00154-00154-00000-RHDTST\n//RDHEST01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHEST01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHEST01 - Test Recovery When ESTAE Specified on PGMNTRY           *\n*                                                                     *\n*    This program is designed to test the ESTAE recovery built into   *\n*  PGMNTRY by specifying ESTAE=YES on the Entry Macro.                *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n         IHASDWA ,                     SDWA Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHEST01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDHEST01 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               BASE=(R12,R11),         (Same)                          *\n               ESTAE=YES,              (Same)                          *\n               IMP=BASR,PRINT=GEN      (Same)\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         ESTAE 0                       Cancel ESTAE Recovery\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         #TRACE MSG='Setting Retry Address and Forcing Abend.',REGS=ALL\n*\n         MVC   DSARETRY,=A(MAIN010)    Set Retry Address\n         EX    0,*                     Force S0C3 Abend\n*\nMAIN010  DS    0H\n         #TRACE MSG='Recovery Was Successful.',REGS=ALL\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\n*\n         DSAEND ,                      Define DSA Suffex\n         END   ,\n./ ADD NAME=INDTST01 0100-10050-10050-1200-00250-00250-00000-RHDTST\n//RDHIND01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHIND01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHIND01 - Test the indirection capabilities of the DATA=          *\n*             parameter of #TRACE                                     *\n*    This job test the indirect address for the address portion of    *\n*  the triplets specified on teh DATA= parameter os the #TRACE        *\n*  MACRO.  It's a pretty simple test testing the 24/31/64 bit         *\n*  indirection when the address is prefixed with a %/?/! respectively.*\n*    There is also a test of the length value of the triplet when     *\n*  the value is enclosed in parans.  As in (14), which would indicate *\n*  that the length is in R14.                                         *\n*    This also test the @ Indirection where the address specified in  *\n*  DATA= triplet, if prefixed with an @ will be taken as a real       *\n*  storage address, and the real storage will be displayed.           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n         IHAASTE ,                     Define ASTE DSECT\n         IHASDWA ,\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n*\n         DUCDSECT ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHIND01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDHIND01 PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               AMODE=64,               Runs AMODE(64)                  *\n               RMODE=ANY,              Runs RMODE(24)                  *\n               LEN=16,                 Obtain 16K for Stacking DSA     *\n               CBAS=(R12),             Define Constant Base Register   *\n               ABAS=(R11),             Define ATB Base Register        *\n               ESTAE=YES,              No ESTAE Support Needed         *\n               IMP=BASR,               Traces are BASR Implementation  *\n               PRINT=GEN,                                              *\n               MSG='Entering RDHIND01 Model Program With 1 Task'\n*\n\n         L     R14,0(,R1)              Get MVE PARM=Data\n         NILH  R14,X'7FFF'             Strip High Bit\n         LH    R15,0(,R14)             Get Length of PARM=Data\n         IF (LTR,R15,R15,NZ)           If We Have Data-Print it\n            LA R15,2(,R15)                Increace Length by Halfword\n            #TRACE REGS=ALL,DATA=('Data Off R1',0(R14),(R15))\n         ELSE ,\n            #TRACE MSG='No PARM=Data was specified.'\n         ENDIF ,\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         STCTG R0,R15,DSACTRL\n         #TRACE DATA=('Control Registers',DSACTRL,128)\n*\n** Show ASTE from CR5 and DUCT from CR2\n*\n         STCTG CR5,CR5,DSAWORKD        Store Control Register\n         LG    R2,DSAWORKD\n         #TRACE DATA=('ASTE From CR5',@0(R2),64),REGS=(R2)\n*\n         STCTG CR2,CR2,DSAWORKD        Store Control Register\n         LG    R2,DSAWORKD\n         #TRACE DATA=('DUCT From CR2',@0(R2),DUCTLNTH),REGS=(R2)\n*\n** Show PASN-AL\n*\n         L     R10,PSAAOLD             Get Current ASCB Address\n         USING ASCB,R10                & Addressability\n         L     R10,ASCBASTE            Get Base ASTE Address\n         USING ASTE,R10                & Addressability\n         #TRACE DATA=('Base ASTE From ASCBASTE',0(R10),64),REGS=(R10)\n*\n** Show PASN-AL Using MFREAL Method\n*\n         L     R3,ASTEPALD             PASN Access list\n         N     R3,=A(X'7FFFFF80')      (Same)\n         LA    R2,DSAPLAYP             Set To Address\n         LH    R4,=Y(1024)             Set Length\n         MFREAL 0(R2),0(R3),           Show me the Segment Table       *\n               LEN=(R4)                (Same)\n         #TRACE DATA=('ASTEPALD - USING MFREAL',0(R2),1024),           *\n               REGS=(R2,R3,R4)\n*\n** Show PASN-AL Using Indirection in DATA= Parameter\n*\n         #TRACE DATA=('ASTEPALD - USING Indirect',@0(R3),1024),        *\n               REGS=(R2,R3,R4)\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         MVC   ATBCONA,HEXTAB\n         LAY   R2,ATBCONA\n         STG   R2,DSAWORKD\n         LA    R3,L'HEXTAB\n*\n         #TRACE DATA=('24-Bit Redirection test.',%CONHEXA,16),         *\n               PRINT=GEN\n*\n         #TRACE DATA=('31-Bit Redirection test.',?CONHEXA,16),         *\n               PRINT=GEN\n*\n         #TRACE DATA=('64-Bit Redirection test.',!CONHEXAD,16),        *\n               PRINT=GEN\n*\n         #TRACE DATA=('64-Bit Redirection test.',ATBCONA,16),          *\n               PRINT=GEN\n*\n         #TRACE DATA=('64-Bit Redirection test.',!DSAWORKD,16),        *\n               PRINT=GEN\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n         MVC   DSARETRY,=A(TERM999)\n         DC    H'0'\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\nCONHEXA  DC    A(HEXTAB)\nCONHEXAD DC    AD(HEXTAB)\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n*\n         CONEND ,\n         COPY PGMGBLAS\n*\n         ORG &CASECT+(*-&CASECT+255)/256*256\n         DS  0H\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSACTRL  DS     16D\nDSAPLAYP DS     XL1024\n*\n         DSAEND ,                      Define DSA Suffex\n*\n***********************************************************************\n* Define Above-The-Bar Storage Area                                   *\n***********************************************************************\n*\n         ATBBEG ,                      Define ATB Prefix\n*\nATBCONA  DS    CL16\n*\n         ATBEND ,                      Define ATB Suffex\n         END   ,\n./ ADD NAME=LNKTST01 0100-10050-10050-1200-00248-00248-00000-RHDTST\n//RDHLNK01 JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHLNK01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHLNK01 - Program to Test #CALL & #GPRM in Various SYSTATEs       *\n*                                                                     *\n*    ..                                                               *\n*  ....                                                               *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHLNK01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHLNK01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               AMODE=64,             ..64-Bit Addressing Mode          *\n               ASCENV=P,             ..Put us in Access Mode           *\n               RMODE=ANY,            ..Between Line and Bar            *\n               CBAS=(R12),           ..Constant Base Register          *\n               ABAS=(R11),           ..ATB Base Register               *\n               ESTAE=NO,             ..Estea Support-DSARETRY          *\n               IMP=BASR,             ..Estea Support-DSARETRY          *\n               PRINT=GEN\n*\n** Program MainLine\n*\n         SAM31\n         SAC   000\n         SYSSTATE ASCENV=P,AMODE64=NO\n         PRINT GEN\n         #CALL RDHC31PR,(CONP1,CONP2,CONP3,CONP4,CONP5)\n         PRINT NOGEN\n*\n         SAM31\n         SAC   512\n         SYSSTATE ASCENV=AR,AMODE64=NO\n         PRINT GEN\n         #CALL RDHC31AR,(CONP1,CONP2,CONP3,CONP4,CONP5)\n         PRINT NOGEN\n*\n         SAM64\n         SAC   000\n         SYSSTATE ASCENV=P,AMODE64=YES\n         PRINT GEN\n         #CALL RDHC64PR,(CONP1,CONP2,CONP3,CONP4,CONP5)\n         PRINT NOGEN\n*\n         SAM64\n         SAC   512\n         SYSSTATE ASCENV=AR,AMODE64=YES\n         PRINT GEN\n         #CALL RDHC64AR,(CONP1,CONP2,CONP3,CONP4,CONP5)\n         PRINT NOGEN\n*\n** Return to Caller\n*\n         SAM31\n         SAC   000\n         SYSSTATE ASCENV=P,AMODE64=NO\nEXIT     DS    0H\n PRINT GEN\n         PGMEXIT RC=0                Return to Caller\n PRINT NOGEN\n*\n print gen\n         CONBEG ,\nCONP1    DC     CL16'AAAAAAAAAAAAAAAA'\nCONP2    DC     CL16'BBBBBBBBBBBBBBBB'\nCONP3    DC     CL16'CCCCCCCCCCCCCCCC'\nCONP4    DC     CL16'DDDDDDDDDDDDDDDD'\nCONP5    DC     CL16'EEEEEEEEEEEEEEEE'\n         CONEND ,\n         DSABEG ,\nDSAP1    DS     CL16\nDSAP2    DS     CL16\nDSAP3    DS     CL16\nDSAP4    DS     CL16\nDSAP5    DS     CL16\n         DSAEND ,\n         ATBBEG ,\n         ATBEND ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHC64PR - Program AMODE(31) Primary                                *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHC31PR PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               AMODE=31,             ..64-Bit Addressing Mode          *\n               RMODE=ANY,            ..Between Line and Bar            *\n               CBAS=(R12),           ..Constant Base Register          *\n               ESTAE=NO,             ..Estea Support-DSARETRY          *\n               IMP=BASR,             ..Estea Support-DSARETRY          *\n               PRINT=NOGEN\n*\n         PRINT GEN\n         #GPRM ((1,R2,'Data Area 1',16),                               *\n               (2,R3,'Data Area 2',16),                                *\n               (3,R4,'Data Area 3',16))\n         PRINT NOGEN\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHC64AR - Program AMODE(31) AR Mode                                *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHC31AR PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               AMODE=31,             ..64-Bit Addressing Mode          *\n               RMODE=ANY,            ..Between Line and Bar            *\n               ASCENV=AR,            ..Indicate Control in AR Mode     *\n               CBAS=(R12),           ..Constant Base Register          *\n               ESTAE=NO,             ..Estea Support-DSARETRY          *\n               IMP=BASR,             ..Estea Support-DSARETRY          *\n               PRINT=NOGEN\n*\n         PRINT GEN\n         #GPRM ((1,R2,'Data Area 1',16),                               *\n               (2,R3,'Data Area 2',16),                                *\n               (3,R4,'Data Area 3',16))\n         PRINT NOGEN\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n*\n***********************************************************************\n* RDHC64PR - Program AMODE(64) Primary                                *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHC64PR PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               AMODE=64,             ..64-Bit Addressing Mode          *\n               RMODE=ANY,            ..Between Line and Bar            *\n               CBAS=(R12),           ..Constant Base Register          *\n               ABAS=(R11),           ..ATB Base Register               *\n               ESTAE=NO,             ..Estea Support-DSARETRY          *\n               IMP=BASR,             ..Estea Support-DSARETRY          *\n               PRINT=GEN\n*\n         PRINT GEN\n         #GPRM ((1,R2,'Data Area 1',16),                               *\n               (2,R3,'Data Area 2',16),                                *\n               (3,R4,'Data Area 3',16))\n         PRINT NOGEN\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n         ATBBEG ,                    Define ATB Prefix\n         ATBEND ,                    Define ATB Suffex\n*\n***********************************************************************\n* RDHC64AR - Program AMODE(64) AR Mode                                *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHC64AR PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               AMODE=64,             ..64-Bit Addressing Mode          *\n               RMODE=ANY,            ..Between Line and Bar            *\n               ASCENV=AR,            ..Indicate Control in AR Mode     *\n               CBAS=(R12),           ..Constant Base Register          *\n               ABAS=(R11),           ..ATB Base Register               *\n               ESTAE=NO,             ..Estea Support-DSARETRY          *\n               IMP=BASR,             ..Estea Support-DSARETRY          *\n               PRINT=NOGEN\n*\n         PRINT GEN\n         #GPRM ((1,R2,'Data Area 1',16),                               *\n               (2,R3,'Data Area 2',16),                                *\n               (3,R4,'Data Area 3',16))\n         PRINT NOGEN\n*\n         PGMEXIT RC=0                Return to Caller\n*\n         CONBEG ,\n         CONEND ,\n         DSABEG ,                    Define DSA Prefix\n         DSAEND ,                    Define DSA Suffex\n         ATBBEG ,                    Define ATB Prefix\n         ATBEND ,                    Define ATB Suffex\n         END   ,\n./ ADD NAME=MDLSIMPL 0100-10050-10050-1200-00070-00070-00000-RHDTST\n//RDHMDLSM JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHMDLSM\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n* RDHMDLSM - Program Main Entry Point                                 *\n***********************************************************************\n*\nRDHMDLSM PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               AMODE=64,               Runs AMODE(64)                  *\n               RMODE=ANY,              Runs AMODE(64)                  *\n               CBAS=(R12),             Define Constant Base Register   *\n               ABAS=(R11),             Define ATB Base Register        *\n               IMP=BASR,               Traces are BASR Implementation  *\n               PRINT=GEN,                                              *\n               MSG='Entering RDHMDLSM Model Program'\n*\n** Program MainLine\n*\n         GOSUB MAIN                    Do Main Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n         CONBEG ,                      Define Constant Prefix\n         CONEND ,                      Define Constant Suffix\n*\n         DSABEG ,                      Define DSA Prefix\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\n         ATBEND ,                      Define ATB Suffex\n         END    ,\n./ ADD NAME=MDL1TASK 0100-10050-10050-1200-00192-00192-00000-RHDTST\n//RDHMDL1T JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHMDL1T\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHMDL1T -                                                         *\n*                                                                     *\n*    ..                                                               *\n*  ....                                                               *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHMDL1T - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDHMDL1T PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               AMODE=64,               Runs AMODE(64)                  *\n               RMODE=ANY,              Runs AMODE(64)                  *\n               LEN=16,                 Obtain 16K for Stacking DSA     *\n               CBAS=(R12),             Define Constant Base Register   *\n               ABAS=(R11),             Define ATB Base Register        *\n               ESTAE=NO,               No ESTAE Support Needed         *\n               IMP=BASR,               Traces are BASR Implementation  *\n               PRINT=GEN,                                              *\n               MSG='Entering RDHMDL1T Model Program With 1 Task'\n*\n\n         L     R14,0(,R1)              Get MVE PARM=Data\n         NILH  R14,X'7FFF'             Strip High Bit\n         LH    R15,0(,R14)             Get Length of PARM=Data\n         IF (LTR,R15,R15,NZ)           If We Have Data-Print it\n            LA R15,2(,R15)                Increace Length by Halfword\n            #TRACE REGS=ALL,DATA=('Data Off R1',0(R14),(R15))\n         ENDIF\n            #TRACE MSG='No PARM=Data was specified.'\n         ENDIF\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         MVC   ATBCONA,HEXTAB\n         LAY   R2,ATBCONA\n         STG   R2,DSAWORKD\n         LA    R3,L'HEXTAB\n*\n*        #TRACE DATA=('24-Bit Redirection test.',%CONHEXA,16),         *\n               PRINT=GEN\n*\n         #TRACE DATA=('31-Bit Redirection test.',?CONHEXA,16),         *\n               PRINT=GEN\n*\n         #TRACE DATA=('64-Bit Redirection test.',!CONHEXAD,16),        *\n               PRINT=GEN\n*\n         #TRACE DATA=('64-Bit Redirection test.',ATBCONA,16),          *\n               PRINT=GEN\n*\n         #TRACE DATA=('64-Bit Redirection test.',!DSAWORKD,16),        *\n               PRINT=GEN\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY SAVE=(R2,R6),AMODE=31,ASCENV=AR\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\nCONHEXA  DC    A(HEXTAB)\nCONHEXAD DC    AD(HEXTAB)\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\n*\n         DSAEND ,                      Define DSA Suffex\n*\n***********************************************************************\n* Define Above-The-Bar Storage Area                                   *\n***********************************************************************\n*\n         ATBBEG ,                      Define ATB Prefix\n*\nATBCONA  DS    CL16\n*\n         ATBEND ,                      Define ATB Suffex\n         END   ,\n./ ADD NAME=MDL3TASK 0100-10050-10050-1200-00392-00392-00000-RHDTST\n//RDHMDL3T JOB 'DUCT Test 1',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHMDL3T\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHMDL3T - Model Program With Two Subtasks                         *\n*                                                                     *\n*    ..                                                               *\n*  ....                                                               *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHASDWA ,                     SDWA Mapping macro\nSDWLEN   EQU   SDWAEND-SDWA               ..Length of SDWA\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHMDL3T - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDHMDL3T PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               IMP=BASR,                                               *\n               BASE=(R12,R11)          (Same)\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Initialization Processing\n         GOSUB WAIT                    Wait for Post\n         GOSUB TERM                    Do Termination Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n         GETMAIN RU,LV=COMDSLEN,       Obtain Buffer for Communications*\n               BNDRY=PAGE              (Same)\n         LR    R10,R1                  Setup Addressability\n         USING COMDSECT,R10            (Same)\n         ST    R1,DSACOMMN             Save Address\n         OI    DSACOMMN,HEX80          Set VL Bit\n         MVC   COMID,=C'DUCTCOMN'      Set Eyecatcher\n         MVC   COMLNGTH,=A(COMDSLEN)   Save Size for Freemain\n*\n** Identify Entry Points for the Subtasks\n*\n         L     R2,=A(RDHSTSKA)         Get Address of Writer Subtask\n         IDENTIFY EP=RDHSTSKA,         Identify Entry point            *\n               ENTRY=(R2)              (Same)\n         L     R2,=V(RDHSTSKB)         Get Address of Disposition STask\n         IDENTIFY EP=RDHSTSKB,         Identify Entry point            *\n               ENTRY=(R2)              (Same)\n*\n** Attach The Subtask A\n*\n         MVC   DSAATTA,ATTACH          Move MF=L Form to DSA\n         ATTACH EP=RDHSTSKA,           Attach A Subtask                *\n               ECB=DSAECBA,            (Same)                          *\n               MF=(E,DSACOMMN),        (Same)                          *\n               SF=(E,DSAATTA)          (Same)\n         ST     R1,DSATCBA             Save TCB Address for Detach\n         #TRACE MSG='ATTACH of RDHSTSKA.',REGS=(R1,R15)\n*\n** Attach The Subtask B\n*\n         MVC   DSAATTB,ATTACH          Move MF=L form to DSA\n         ATTACH EP=RDHSTSKB,           Attach B Subtask                *\n               ECB=DSAECBB,            (Same)                          *\n               MF=(E,DSACOMMN),        (Same)                          *\n               SF=(E,DSAATTB)          (Same)\n         ST     R1,DSATCBB             Save TCB Address for Detach\n         #TRACE MSG='ATTACH of RDHSTSKB.',REGS=(R1,R15)\n*\n** Build ECB List\n*\n*\n         MVC   DSAWTOR,RWTOR\n*temp    WTOR  'RDH0001: MDL3 Test job Waiting to Continue.',          *\n               DSAWORKD,8,DSAECBW,MF=(E,DSAWTOR)\n*\n         LA R14,DSAECBW                Build ECB List To Wait On\n         ST R14,DSAECBL                (Same)\n         LA R14,DSAECBA                (Same)\n         ST R14,DSAECBL+4              (Same)\n         LA R14,DSAECBB                (Same)\n         ST R14,DSAECBL+8              (Same)\n         OI DSAECBL+8,X'80'            (Same)\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n         DETACH DSATCBA                Detach A Subtask\n         DETACH DSATCBB                Detach B Subtask\n*\n         FREEMAIN RU,LV=COMDSLEN,      Free Storage for Common Area    *\n               A=(R10)                 (Same)\n         XR    R10,R10                 Zero Addressability\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** WAIT - Wait for Subtasks to Complete                               *\n*=====================================================================*\n*\nWAIT     SUBNTRY ,                 -*- Cheap Wait Logic\n*temp    WAIT ECBLIST=DSAECBL          Wait on ECB List\n*\n** Terminate The Subtasks\n*\n         POST COMDECBA                 Terminate A Subtask\n         POST COMDECBB                 Terminate B Subtask\n*\n         WAIT ECB=DSAECBA              Wait for A Subtask\n         WAIT ECB=DSAECBB              Wait for B Subtask\n*\nWAIT999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constant Area\n*\nATTACH   ATTACH SF=L                   Define ATTACH Parameter List\nATTACHL  EQU    *-ATTACH               (Same)\n*\nRWTOR    WTOR  'RDH0001: MDL3 Test Job Reply U to Terminate.',         *\n               *-*,8,*-*,MF=L\nRWTORL   EQU   *-RWTOR\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                   Define Common Equates\nHEX80    EQU   X'80'                   (Same)\nHEX40    EQU   X'40'                   (Same)\nHEX00    EQU   X'00'                   (Same)\n*\n         CONEND ,                      Define End of Constant Area\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSACOMMN DS    A                       Addr of Communications Area\n*\nDSATCBA  DS    A                       TCB Addr for A Subtask\nDSATCBB  DS    A                       TCB Addr for B Subtask\n*\nDSAECBW  DS    A                       ECB Posted for WTOR\nDSAECBA  DS    A                       Term ECB for A Subtask\nDSAECBB  DS    A                       Term ECB for B Subtask\nDSAECBL  DS    3A                      ECBLIST for Wait\n*\n         DS    0D\nDSAATTA  DS    XL(ATTACHL)             Attach PLIST for A Subtask\n         DS    0D\nDSAATTB  DS    XL(ATTACHL)             Attach PLIST for B Subtask\n*\n         DS    0D\nDSAWTOR  DS    XL(RWTORL)'0'           MF=L for WTOR\n*\n         DSAEND ,                      Define DSA Suffix\n*\n***********************************************************************\n*                                                                     *\n** RDHSTSKA - First Subtask                                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nRDHSTSKA PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               IMP=BASR,                                               *\n               MSG='Initiating First Subtask',                         *\n               BASE=(R12,R11)          Base Registers\n*\n         L     R10,0(,R1)              Get Address of Common Area\n         LA    R10,0(,R10)             Zero High Bit for Cleanliness\n         USING COMDSECT,R10            & Addressability\n         #TRACE REGS=(R1,R10),         Trace Common Area               *\n               DATA=('Common Area input',0(R10),COMUSEDL)\n*\n** Program MainLine\n*\n         GOSUB AINI                    Do Initialization Processing\n         GOSUB AMAN                    Do Main Processing\n         GOSUB ATRM                    Do Termination Processing\n*                                      Do Termination Processing\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** AINI - Do Initialization Processing                                *\n*=====================================================================*\n*\nAINI     SUBNTRY ,\n*\nAINI999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** ATRM - Do Termination Processing                                   *\n*=====================================================================*\n*\nATRM     SUBNTRY ,\n*\n*\nATRM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** AMAN - Do Main Processing                                          *\n*=====================================================================*\n*\nAMAN     SUBNTRY ,\n         WAIT ECB=COMDECBA             Wait For Main Task Post\n*\n*\n*\nAMAN999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constant Area\n*\n*\n         CONEND ,                      Define End of Constant Area\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\n*\n         DSAEND ,                      Define DSA Suffix\n*\n***********************************************************************\n*                                                                     *\n** RDHSTSKB - Second Subtask                                          *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nRDHSTSKB PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               IMP=BASR,                                               *\n               MSG='Initiating Second Subtask',                        *\n               BASE=(R12,R11)          Base Registers\n*\n         L     R10,0(,R1)              Get Address of Common Area\n         LA    R10,0(,R10)             Zero High Bit for Cleanliness\n         USING COMDSECT,R10            & Addressability\n         #TRACE REGS=(R1,R10),         Trace Common Area               *\n               DATA=('Common Area input',0(R10),COMUSEDL)\n*\n** Program MainLine\n*\n         GOSUB BINI                    Do Initialization Processing\n         GOSUB BMAN                    Do Main Prrocessing\n         GOSUB BTRM                    Do Termination Processing\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** BINI - Do Initialization Processing                                *\n*=====================================================================*\n*\nBINI     SUBNTRY ,\n*\n*\nBINI999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** BTRM - Do Termination Processing                                   *\n*=====================================================================*\n*\nBTRM     SUBNTRY ,\n*\n*\nBTRM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** DSPT -                                                             *\n*=====================================================================*\n*\nBMAN     SUBNTRY DATA=('Common Area',0(R10),COMUSEDL)\n*\n         WAIT ECB=COMDECBB             Wait For Main Task Post\n*\nBMAN999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,                      Define Constant Area\n*\n         CONEND ,                      Define End of Constant Area\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\n*\n         DSAEND ,                      Define DSA Suffix\n*\n***********************************************************************\n* COMDSECT - Intertask Communications Area                            *\n***********************************************************************\n*\nCOMDSECT DSECT ,                       Save Area for CTOKENS\nCOMID    DS    CL8'COMMON'             Set ID in Area\nCOMLNGTH DS    F                       Length of COMDSECT for Freemain\n*\nCOMDECBA DS    A                       ECB Posted to Terminate A\nCOMDECBB DS    A                       ECB Posted to Terminate B\n*\n         DS    0D\nCOMUSEDL EQU   *-COMDSECT              Length of Area Used\n         ORG   COMDSECT+4096           Force to 1-Page Area\nCOMDSLEN EQU   *-COMDSECT              Length of Token Entry\n*\n         END   ,\n./ ADD NAME=RDHGATBS 0100-10050-10050-1200-00342-00342-00000-RHDTST\n//RDHGATBS JOB 'RDHGATB Branch Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHGATBS\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHGATBS - Test Program for RDHGATB - #GETATB and #FREATB Macros   *\n*                                                                     *\n*    This program was written for the purpose of testing RDHGATB.     *\n*  That program is the core program that supports getmain and         *\n*  freemain of above-the-bar storage.  It is entered via the #GETATB  *\n*  and #FREATB macros.                                                *\n*    These macros typically will issue SVC 167 to process the callers *\n*  requests for storage above-the-bar.  But it may also be entered    *\n*  via a branch entry request if BRANCH=YES is specifiec on the       *\n*  macros.                                                            *\n*    This version of the test program uses the SVC entry for the      *\n*  #GATBATB and #FREATB macros.                                       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nRDHGATBS PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               AMODE=64,               Runs AMODE(64)                  *\n               RMODE=ANY,              Runs AMODE(64)                  *\n               CBAS=(R12),             Define Constant Base Register   *\n               ABAS=(R11),             Define ATB Base Register        *\n               IMP=SVC,                Traces are BASR Implementation  *\n               PRINT=GEN,                                              *\n               MSG='Entering RDHGATBS Test Program'\n*\n** Program MainLine\n*\n*        GOSUB TST01                   Basic Test of #GETATB Macro\n         GOSUB TST02                   Basic Getmain & Freemain\n*        GOSUB TST03                   Test of Abend Codes\n*        GOSUB TST04                   Merging Free VAS After No Merge\n*        GOSUB TST05                   Test Double Merge Path\n*        GOSUB TST06                   Use All Space Free in Rev Order\n*        GOSUB TST07                   Use All Space Free step Order\n*        GOSUB TST08                   Use All Space 1 Lst On Chn Path\n*        GOSUB TST09                   Use All Space 2 Lst On Chn Path\n*        GOSUB TST10                   Use All Space Free Hopscotch\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** TST01 - Test the #GETATB Macro                                     *\n*=====================================================================*\n*\nTST01    SUBNTRY ,\n         #GETATB RU,LV=64\n         #TRACE REGS=(R0,R1,R15)\n*\n         #GETATB RU,LV=32\n*\n         #GETATB RU,LV=32,KEY=2\n*\nTST019   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST02 - Test Basic Getmain and Freemain                            *\n*=====================================================================*\n*\nTST02    SUBNTRY ,\n*\n** Test Merging With Free VAS Before\n*\n print gen\n         #GETATB RU,LV=64              Get some ATB Storage\n         #FREATB RU,LV=64,A=(R1)       Free The Storage We Got\n print nogen\n*\n*\nTST029   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST03 - Test the #GETATB Macro Abend Codes                         *\n*=====================================================================*\n*\nTST03    SUBNTRY ,\n*\n** Test Abend Codes\n*\n*\n         L     R2,=A(1024*1024+1)      More than 1 Meg         U167/0C\n*        #GETATB RU,LV=(R2)\n*\n*        #GETATB RU,LV=64              Get some ATB Storage\n         LA R1,2(,R1)                  Test with Wrong Address\n*        #FREATB RU,LV=64,A=(R1)       Free The Storage We Got U167/10\n*\n         #GETATB RU,LV=64              Get some ATB Storage\n         LA R2,32                      Test with Wrong Length\n         #FREATB RU,LV=(R2),A=(R1)     Free The Storage We Got U167/14\n*\n*\nTST039   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST04 - Test Merging Free VAS After no Merge                       *\n*=====================================================================*\n*\nTST04    SUBNTRY ,\n         #GETATB RU,LV=64              Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=64              Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=64              Get some ATB Storage\n*\n         #FREATB RU,LV=64,A=(R2)       Free The Storage We Got\n         #FREATB RU,LV=64,A=(R3)       Free The Storage We Got\n*\nTST049   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST05 - Test Double Merge - Free (Aloc) Free Aloc                  *\n*=====================================================================*\n*\nTST05    SUBNTRY ,\n         #GETATB RU,LV=64              Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=64              Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=64              Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=64              Get some ATB Storage\n         LGR R5,R1\n*\n         #FREATB RU,LV=64,A=(R2)       Free The Storage We Got\n         #FREATB RU,LV=64,A=(R4)       Free The Storage We Got\n*\n         #FREATB RU,LV=64,A=(R3)       Free The Storage We Got\n         #FREATB RU,LV=64,A=(R5)       Free Last Gotten Storage\n*\nTST059   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST06 - Freemain Test - Get All Space Freemain in Reverse Order    *\n*=====================================================================*\n*\nTST06    SUBNTRY ,\n         LLGT  R9,=A(1024*256)\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R5,R1\n*\n         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R4)     Free The Storage We Got\n*\n         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R2)     Free Last Gotten Storage\n*\n*\nTST069   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST07 - Freemain Test - Get All Space Free in Step Order           *\n*=====================================================================*\n*\nTST07    SUBNTRY ,\n         LLGT  R9,=A(1024*256)\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R5,R1\n*\n         #FREATB RU,LV=(R9),A=(R4)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got\n*\n         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R2)     Free Last Gotten Storage\n*\n*\nTST079   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST08 - Freemain Test - Get All Space Free in Step Order           *\n*=====================================================================*\n*\nTST08    SUBNTRY ,\n         LLGT  R9,=A(1024*256)\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R5,R1\n*\n         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got\n*\n         #FREATB RU,LV=(R9),A=(R4)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R2)     Free Last Gotten Storage\n*\n*\nTST089   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST09 - Freemain Test - 2 Lst On Chain Path                        *\n*=====================================================================*\n*\nTST09    SUBNTRY ,\n         LLGT  R9,=A(1024*128)\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R5,R1\n*\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R6,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R7,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R8,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R10,R1\n*\n         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got\n*\n         #FREATB RU,LV=(R9),A=(R7)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R10)    Free Last Gotten Storage\n*\n*\nTST099   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST10 - Freemain Test - 2 Lst On Chain Path - Free All             *\n*=====================================================================*\n*\nTST10    SUBNTRY ,\n         LLGT  R9,=A(1024*128)\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R5,R1\n*\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R6,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R7,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R8,R1\n         #GETATB RU,LV=(R9)              Get some ATB Storage\n         LGR R10,R1\n*\n         #FREATB RU,LV=(R9),A=(R3)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R5)     Free The Storage We Got\n*\n         #FREATB RU,LV=(R9),A=(R7)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R10)    Free Last Gotten Storage\n*\n** Free The Rest Last Freemain should show 1Meg Length\n*\n         #FREATB RU,LV=(R9),A=(R2)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R4)     Free The Storage We Got\n*\n         #FREATB RU,LV=(R9),A=(R6)     Free The Storage We Got\n         #FREATB RU,LV=(R9),A=(R8)     Free Last Gotten Storage\n*\n*\nTST109   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST09 - Freemain Test -                                            *\n*=====================================================================*\n*\nTST99    SUBNTRY ,\n*\n*\nTST999   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n*\n         CONBEG ,                      Define Constant Prefix\n         CONEND ,                      Define Constant Suffix\n*\n         DSABEG ,                      Define DSA Prefix\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\n         ATBEND ,                      Define ATB Suffex\n         END   ,\n./ ADD NAME=RDHGATBT 0100-10050-10050-1200-00400-00400-00000-RHDTST\n//RDHGATBT JOB 'RDHGATB Branch Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHGATBT\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHGATBT - Test Program for RDHGATB - #GETATB and #FREATB Macros   *\n*                                                                     *\n*    This program was written for the purpose of testing RDHGATB.     *\n*  That program is the core program that supports getmain and         *\n*  freemain of above-the-bar storage.  It is entered via the #GETATB  *\n*  and #FREATB macros.                                                *\n*    These macros typically will issue SVC 167 to process the callers *\n*  requests for storage above-the-bar.  But it may also be entered    *\n*  via a branch entry request if BRANCH=YES is specifiec on the       *\n*  macros.                                                            *\n*    This is the first test program to test this facility.  It was    *\n*  written prior to the SVC wraparound code for RDHGATB and as such   *\n*  uses the BRANCH=YES form of these macros.  However, it is a pretty *\n*  comprehensive series of test to validate the functionality of the  *\n*  services provided.                                                 *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nRDHGATBT PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               AMODE=64,               Runs AMODE(64)                  *\n               RMODE=ANY,              Runs AMODE(64)                  *\n               CBAS=(R12),             Define Constant Base Register   *\n               ABAS=(R11),             Define ATB Base Register        *\n               IMP=BASR,               Traces are BASR Implementation  *\n               PRINT=GEN,                                              *\n               MSG='Entering RDHGATBT Test Program'\n*\n** Program MainLine\n*\n*        GOSUB CALL                    Test With #CALL Macro\n*        GOSUB TST01                   Basic Test of #GETATB Macro\n         GOSUB TST02                   Basic Getmain & Freemain\n*        GOSUB TST03                   Test of Abend Codes\n*        GOSUB TST04                   Merging Free VAS After No Merge\n*        GOSUB TST05                   Test Double Merge Path\n*        GOSUB TST06                   Use All Space Free in Rev Order\n*        GOSUB TST07                   Use All Space Free step Order\n*        GOSUB TST08                   Use All Space 1 Lst On Chn Path\n*        GOSUB TST09                   Use All Space 2 Lst On Chn Path\n*        GOSUB TST10                   Use All Space Free Hopscotch\n*\n** Return to Caller\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** CALL - Initial Test With Branch Entry                              *\n*=====================================================================*\n*\nCALL     SUBNTRY ,\n*\n         LG    R0,=AD(64)              Get 64 Bytes of ATB\n         XGR   R1,R1                   Indicate Getmain\n         #CALL RDHGATB\n*\n         LG    R0,=AD(64)              Get 64 Bytes of ATB\n         XGR   R1,R1                   Indicate Getmain\n         #CALL RDHGATB\n*\n         MODESET EXTKEY=KEY2,WORKREG=(2)\n         LG    R0,=AD(64)              Get 64 Byte ATB\n         XGR   R1,R1                   Indicate Getmain\n         #CALL RDHGATB\n         MODESET KEY=ZERO\n*\nCALL999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST01 - Test the #GETATB Macro                                     *\n*=====================================================================*\n*\nTST01    SUBNTRY ,\n         #GETATB RU,LV=64,BRANCH=YES\n         #TRACE REGS=(R0,R1,R15)\n*\n         #GETATB RU,LV=32,BRANCH=YES\n*\n         #GETATB RU,LV=32,KEY=2,BRANCH=YES\n*\nTST019   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST02 - Test Basic Getmain and Freemain                            *\n*=====================================================================*\n*\nTST02    SUBNTRY ,\n*\n** Test Merging With Free VAS Before\n*\n         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n         #FREATB RU,LV=64,A=(R1),      Free The Storage We Got         *\n               BRANCH=YES              Merging With VAS After Aloc VAS\n*\n*\nTST029   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST03 - Test the #GETATB Macro Abend Codes                         *\n*=====================================================================*\n*\nTST03    SUBNTRY ,\n*\n** Test Abend Codes\n*\n*\n         L     R2,=A(1024*1024+1)      More than 1 Meg         U167/0C\n*Works   #GETATB RU,LV=(R2),BRANCH=YES\n*\n*works   #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n         LA R1,2(,R1)                  Test with Wrong Address\n*Works   #FREATB RU,LV=64,A=(R1),      Free The Storage We Got U167/10 *\n               BRANCH=YES              (Same)\n*\n         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n         LA R2,32                      Test with Wrong Length\n         #FREATB RU,LV=(R2),A=(R1),    Free The Storage We Got U167/14 *\n               BRANCH=YES              (Same)\n*\n*\nTST039   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST04 - Test Merging Free VAS After no Merge                       *\n*=====================================================================*\n*\nTST04    SUBNTRY ,\n         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n*\n         #FREATB RU,LV=64,A=(R2),      Free The Storage We Got         *\n               BRANCH=YES              No Merging With a Free VAS Path\n         #FREATB RU,LV=64,A=(R3),      Free The Storage We Got         *\n               BRANCH=YES              Merging With VAS Befor Aloc VAS\n*\nTST049   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST05 - Test Double Merge - Free (Aloc) Free Aloc                  *\n*=====================================================================*\n*\nTST05    SUBNTRY ,\n         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=64,BRANCH=YES   Get some ATB Storage\n         LGR R5,R1\n*\n         #FREATB RU,LV=64,A=(R2),      Free The Storage We Got         *\n               BRANCH=YES              No Merging With a Free VAS Path\n         #FREATB RU,LV=64,A=(R4),      Free The Storage We Got         *\n               BRANCH=YES              No Merging With a Free VAS Path\n*\n         #FREATB RU,LV=64,A=(R3),      Free The Storage We Got         *\n               BRANCH=YES              Double Merge Test\n         #FREATB RU,LV=64,A=(R5),      Free Last Gotten Storage        *\n               BRANCH=YES              Double Merge Test\n*\nTST059   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST06 - Freemain Test - Get All Space Freemain in Reverse Order    *\n*=====================================================================*\n*\nTST06    SUBNTRY ,\n         LLGT  R9,=A(1024*256)\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R5,R1\n*\n         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R4),    Free The Storage We Got         *\n               BRANCH=YES\n*\n         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R2),    Free Last Gotten Storage        *\n               BRANCH=YES\n*\n*\nTST069   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST07 - Freemain Test - Get All Space Free in Step Order           *\n*=====================================================================*\n*\nTST07    SUBNTRY ,\n         LLGT  R9,=A(1024*256)\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R5,R1\n*\n         #FREATB RU,LV=(R9),A=(R4),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *\n               BRANCH=YES\n*\n         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R2),    Free Last Gotten Storage        *\n               BRANCH=YES\n*\n*\nTST079   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST08 - Freemain Test - Get All Space Free in Step Order           *\n*=====================================================================*\n*\nTST08    SUBNTRY ,\n         LLGT  R9,=A(1024*256)\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R5,R1\n*\n         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *\n               BRANCH=YES\n*\n         #FREATB RU,LV=(R9),A=(R4),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R2),    Free Last Gotten Storage        *\n               BRANCH=YES\n*\n*\nTST089   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST09 - Freemain Test - 2 Lst On Chain Path                        *\n*=====================================================================*\n*\nTST09    SUBNTRY ,\n         LLGT  R9,=A(1024*128)\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R5,R1\n*\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R6,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R7,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R8,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R10,R1\n*\n         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *\n               BRANCH=YES\n*\n         #FREATB RU,LV=(R9),A=(R7),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R10),   Free Last Gotten Storage        *\n               BRANCH=YES\n*\n*\nTST099   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST10 - Freemain Test - 2 Lst On Chain Path - Free All             *\n*=====================================================================*\n*\nTST10    SUBNTRY ,\n         LLGT  R9,=A(1024*128)\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R2,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R3,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R4,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R5,R1\n*\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R6,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R7,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R8,R1\n         #GETATB RU,LV=(R9),BRANCH=YES   Get some ATB Storage\n         LGR R10,R1\n*\n         #FREATB RU,LV=(R9),A=(R3),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R5),    Free The Storage We Got         *\n               BRANCH=YES\n*\n         #FREATB RU,LV=(R9),A=(R7),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R10),   Free Last Gotten Storage        *\n               BRANCH=YES\n*\n** Free The Rest Last Freemain should show 1Meg Length\n*\n         #FREATB RU,LV=(R9),A=(R2),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R4),    Free The Storage We Got         *\n               BRANCH=YES\n*\n         #FREATB RU,LV=(R9),A=(R6),    Free The Storage We Got         *\n               BRANCH=YES\n         #FREATB RU,LV=(R9),A=(R8),    Free Last Gotten Storage        *\n               BRANCH=YES\n*\n*\nTST109   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST09 - Freemain Test -                                            *\n*=====================================================================*\n*\nTST99    SUBNTRY ,\n*\n*\nTST999   DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n*\n         CONBEG ,                      Define Constant Prefix\n         CONEND ,                      Define Constant Suffix\n*\n         DSABEG ,                      Define DSA Prefix\n         DSAEND ,                      Define DSA Suffex\n*\n         ATBBEG ,                      Define ATB Prefix\n         ATBEND ,                      Define ATB Suffex\n         END   ,\n./ ADD NAME=SSYTST01 0100-10050-10050-1200-00198-00198-00000-RHDTST\n//RDHSSY1T JOB 'MOD1T Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=I\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHSSY1T\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHSSY1T - Program Designed to Test The SSY Macro Instructions     *\n*                                                                     *\n*    The idea here is that we need to replace the entire SS           *\n*  instruction set with SSY macros so that we can finally take        *\n*  full advantage of the 20-Bit displacement reality that is now      *\n*  possible within Zos.                                               *\n*    Most of the old BDDD instructions, RX and RS have already        *\n*  been replaced with a new set of instructions that use a BDDDDD     *\n*  displacement providing direct addressability to a megabyte for     *\n*  a single base register.                                            *\n*    And the only thing still tying us to BDDD is the SS instruction  *\n*  set.  This cannot be done in hardware because that would require   *\n*  an 8-Byte instruction and the box is not designed for that.  So    *\n*  the solution is to replicate the functionality using macros.       *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         COPY  #MAC64                  Copy 64-Bit Support Macros\n*\n         PRINT OFF\n         IHAPSA  ,                     PSA  Deect\n         CVT   DSECT=YES               CVT  Dsect\n         IHASCVT ,                     SCVT Dsect\n*\n         IHAASCB ,                     ASCB Dsect\n         IHAASXB ,                     ASXB Dsect\n         IHAASSB ,                     ASSB Dsect\n*\n         IKJTCB  ,                     TCB  Dsect\n         IHASTCB ,                     STCB Dsect\n         IHARB   ,                     PRB  Dsect\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHSSY1T - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Establish Addressability\n*\nRDHSSY1T PGMNTRY TYPE=MAIN,            Establish Main Entry Point      *\n               IMP=BASR,                                               *\n               AMODE=64,                                               *\n               ABAS=(R10),                                             *\n               BASE=(R12,R11)          (Same)\n*\n** Program MainLine\n*\n         GOSUB INIT                    Do Init Processing\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         ESTAE 0                       Cancel ESTAE Recovery\n*\n         PGMEXIT RC=0                  Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         GOSUB TST1                    Do Initial Test MVCY\n*\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TST1 - initial Test of Concept                                     *\n*=====================================================================*\n*\nTST1     SUBNTRY ,\n         PRINT GEN\n         MVC   DSAFR,=C'TST1MVCY'\n         MVCY  DSATO,DSAFR             Test Macro\n         PRINT NOGEN\n         #TRACE MSG=('MVCY Fr: ',DSAFR,' To: ',DSATO)\n*\n         PRINT GEN\n         MVC   DSAFR,=C'TST2MVCY'\n         MVCY  DSATO,DSAFR,SAVE=YES    Test Macro Saving R14,R15\n         PRINT NOGEN\n         #TRACE MSG=('MVCY Fr: ',DSAFR,' To: ',DSATO)\n*\n         PRINT GEN\n         MVC   DSAFR,=C'TST3MVCY'\n         MVCY  DSATO,DSAFR,WKREG=R2    Test Macro Saving With WorkReg\n         PRINT NOGEN\n         #TRACE MSG=('MVCY Fr: ',DSAFR,' To: ',DSATO)\n*\n*\nTST1999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                   Common Equates\nHEX00    EQU   X'00'                   (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'     Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                      Define DSA Prefix\n*\nDSAFR    DS     CL8\nDSATO    DS     CL8\n*\n         DSAEND ,                      Define DSA Suffex\n*\n***********************************************************************\n* Define Above-The-Bar (ATB) Storage                                  *\n***********************************************************************\n*\n         ATBBEG ,                      Define ATB Prefix\n*\n         ATBEND ,                      Define ATB Suffex\n         END   ,\n./ ADD NAME=SVCTST01 0100-10050-10050-1200-00139-00139-00000-RHDTST\n//RDHSVT01 JOB 'Tracing Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHSVT01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHSVT01 - Test Label Level Tracing Using IMP=SVC                  *\n*                                                                     *\n*    This program was created to provide a basic test for IMP=SVC,    *\n*  testing the SVC implementation of the traces.                      *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,\n         CVT   DSECT=YES\n         IHASCVT ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHSVT01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHSVT01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               TRACE=YES,            (Same)                            *\n               IMP=SVC,              (Same)                            *\n               MSG='Test program that uses IMP=SVC.'\n*\n** Program MainLine\n*\n         GOSUB INIT                  Do Init Processing\n         GOSUB MAIN                  Do Main Processing\n         GOSUB TERM                  Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n         LTORG ,                     Define Literial Pool\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\n*\n         DSAEND ,                    Define DSA Suffex\n         END   ,\n./ ADD NAME=TRPTST01 0100-10050-10050-1200-00143-00143-00000-RHDTST\n//RDHTRP01 JOB 'Tracing Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHTRP01\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHTRP01 - Test Label Level Tracing Using IMP=TRAP2                *\n*                                                                     *\n*    This program was created to provide a basic test for IMP=TRAP2,  *\n*  testing the DUCT implementation of the traces. This is a basic     *\n*  test used for regression testing.                                  *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,\n         CVT   DSECT=YES\n         IHASCVT ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHTRP01 - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHTRP01 PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),       (Same)                            *\n               TRACE=YES,            (Same)                            *\n               IMP=TRAP2,            (Same)                            *\n               PRINT=GEN,            (Same)                            *\n               MSG='Test program that uses IMP=TRAP2.'\n*\n** Program MainLine\n*\n         GOSUB INIT                  Do Init Processing\n         GOSUB MAIN                  Do Main Processing\n         GOSUB TERM                  Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         L     R1,=C'TRAP'\n*        SVC   166\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n         LTORG ,                     Define Literial Pool\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\n*\n         DSAEND ,                    Define DSA Suffex\n         END   ,\n./ ADD NAME=TSTSVC1  0100-10050-10050-1200-00133-00133-00000-RHDTST\n//RDHTSSVC JOB (0,0),'HARPER',REGION=4M,\n//    CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1)\n//*\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCL,MOD=RDHTSSVC\n//ASM.SYSIN    DD  *\n***********************************************************************\n* Copyright (c) 2006 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHTSSVC - Test SVC to Test Label Level Tracing in an SVC          *\n*                                                                     *\n*    This program uses IMP=BASR implementation of the traces to test  *\n*  the SVCNTRY/SVCEXIT code and the execution of the traces within    *\n*  an SVC.                                                            *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n          PRINT OFF\n          IHAPSA ,                     Define PSA DSECT Area\n          PRINT ON\n*\n***********************************************************************\n* RDHTSSVC - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                  Define PSA Addressability\n*\nRDHTSSVC SVCNTRY SVCNO=230,            Program Entry Code              *\n               BASE=(R12,R11),         Use Standard Bases              *\n               PRINT=GEN,              (Same)                          *\n               IMP=BASR                (Same)\n*\n         GOSUB INIT                    Perform Initialization\n         GOSUB MAIN                    Do Main Processing\n         GOSUB TERM                    Do Termination Processing\n*\n** Return to Caller\n*\nMAINEXIT DS    0H\n         SVCEXIT RC=0                  Define Program Exit Code\n*\n***********************************************************************\n* MAIN- Program Main Processing                                       *\n***********************************************************************\n*\nMAIN     SUBNTRY ,\n*\n** Return to Caller\n*\nMAINEND  DS    0H\n         SUBEXIT ,\n\n*\n***********************************************************************\n* INIT - Perform Program Initialization                               *\n***********************************************************************\n*\nINIT     SUBNTRY ,                 -*- Open SYSPRINT File\n*\n** Return to Caller\n*\nINITEND  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* TERM - Perform Program Termination                                  *\n***********************************************************************\n*\nTERM     SUBNTRY ,\n*\n** Return to Caller\n*\nTERMEND  DS    0H\n         SUBEXIT ,\n\n***********************************************************************\n*  Literials and Constants                                            *\n***********************************************************************\n*\n         CONBEG ,\n*\nHEXFF    EQU   X'FF'\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area - DSA                                   *\n***********************************************************************\n*\n         DSABEG ,                 <*** Begin Dynamic Storage Area\n*\nDSARC    DS    F                       Return Code\nDSAPRWD1 DS    F                       SVRB Address\n*\nDSAFLAG  DS    B                       Flag Byte\n*\n         DSAEND ,                 <*** End Dynamic Storage Area\n         END ,\n//*\n//** Insert TEST SVC\n//*\n//*NSERT    EXEC PGM=RDHINSTL,PARM='INSERT,RDHTSSVC,230'\n//REPLACE   EXEC PGM=RDHINSTL,PARM='REPLACE,RDHTSSVC,230'\n//STEPLIB  DD  DISP=SHR,DSN=RDH.$TLS.LOD\n//SYSPRINT DD  SYSOUT=*\n./ ADD NAME=TSTSVC1P 0100-10050-10050-1200-00148-00148-00000-RHDTST\n//RDHTTSVC JOB 'RTM Test',\n//           MSGCLASS=H,MSGLEVEL=(1,1),CLASS=A\n//*\n//JCLLIB  JCLLIB ORDER=('RDH.$TLS.JCL')\n//*\n//ASMXIT  EXEC RASMCLG,MOD=RDHTTSVC\n//ASM.SYSIN DD *\n***********************************************************************\n* Copyright (c) 2009 - Richard D. Harper, All Rights Reserved         *\n***********************************************************************\n*                                                                     *\n*   This file is part of Richard Harper's Private Development         *\n* Platform (PDP).                                                     *\n*                                                                     *\n*   Richard Harper's PDP is free software: you can redistribute       *\n* it and/or modify it under the terms of the GNU General Public       *\n* License as published by the Free Software Foundation, either        *\n* version 3 of the License, or (at your option) any later version.    *\n*                                                                     *\n*   Richard Harper's PDP is distributed in the hope that it will      *\n* be useful, but WITHOUT ANY WARRANTY; without even the implied       *\n* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    *\n* See the GNU General Public License for more details.                *\n*                                                                     *\n*   You should have received a copy of the GNU General Public         *\n* License along with Richard harper's PDP.  If not, see               *\n* <http://www.gnu.org/licenses/>.                                     *\n*                                                                     *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n** RDHTTSVC - Test Label Level Tracing Within an SVC                  *\n*                                                                     *\n*    This test program is intended to test the traces within an SVC   *\n*  environment.  This program issues an SVC 230, which should be      *\n*  RDHTSSVC, which is a test SVC usng a BASR implementation of the    *\n*  traces.  Its a very simple program, but an important test.         *\n*    This program also has tracing active, so both programs will      *\n*  write trace output to the TRCPRINT DD in the JCL.                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*---------------------------------------------------------------------*\n* Define MVS System Data Areas                                        *\n*---------------------------------------------------------------------*\n*\n         PRINT OFF\n         IHAPSA  ,\n         PRINT ON,NOGEN\n*\n***********************************************************************\n* RDHTTSVC - Program Main Entry Point                                 *\n***********************************************************************\n*\n         USING PSA,R0                Establish Addressability\n*\nRDHTTSVC PGMNTRY TYPE=MAIN,          Establish Main Entry Point        *\n               BASE=(R12,R11),PRINT=GEN,IMP=BASR\n*\n** Program MainLine\n*\n*        GOSUB INIT                  Do Init Processing\n         GOSUB MAIN                  Do Main Processing\n*        GOSUB TERM                  Do Term Processing\n*\n** Return to Caller\n*\nEXIT     DS    0H\n         PGMEXIT RC=0                Return to Caller\n*\n*=====================================================================*\n** MAIN - Main Processing Routine                                     *\n*=====================================================================*\n*\nMAIN     SUBNTRY ,\n         LM    R2,R5,=A(1,2,3,4)\n         LA    R1,*+6\n         SVC   230\n*\nMAIN999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** INIT - Do Initialization Processing                                *\n*=====================================================================*\n*\nINIT     SUBNTRY ,\n*\n*\nINIT999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** TERM - Do Termination Processing                                   *\n*=====================================================================*\n*\nTERM     SUBNTRY ,\n*\n*\nTERM999  DS    0H\n         SUBEXIT ,\n*\n*=====================================================================*\n** SUBR - Model Subroutine for Replication                            *\n*=====================================================================*\n*\nSUBR     SUBNTRY ,\n*\n*\nSUBR999  DS    0H\n         SUBEXIT ,\n*\n***********************************************************************\n* Define Literials and Constants                                      *\n***********************************************************************\n*\n         CONBEG ,\n         LTORG ,                     Define Literial Pool\n*\n** Equates\n*\nHEXFF    EQU   X'FF'                 Common Equates\nHEX00    EQU   X'00'                 (Same)\n*\n** Constants\n*\nHEXTAB   DC    C'0123456789ABCDEF'   Hex Conversion Table\n*\n         CONEND ,\n*\n***********************************************************************\n* Define Dynamic Storage Area                                         *\n***********************************************************************\n*\n         DSABEG ,                    Define DSA Prefix\n*\n** MF=L Work Areas\n*\n         DS    0D                    Define Area for ESTAE\nDSAESTA0 DS    XL(ESTAE0L)           (Same)\nDSARETRY DS    A                     Retry Address or Zero for Perc\n*\nDSAPLIST DS    4F                    Parameter List Work area\n*\n         DSAEND ,                    Define DSA Suffex\n         END   ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT820/FILE820.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT820", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}