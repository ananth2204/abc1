{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011802000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE332.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE332.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x02'", "DS1TRBAL": "b'\\xd8\\x9e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x7f\\x00\\x08\\x02\\x80\\x00\\x01\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\t/\\x01\\x01\\t/\\x15\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-04-02T00:00:00", "modifydate": "2001-04-02T15:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 433    FILE:  332\n\n    ORIGINAL DSNAME:  WSBG.CBT433.FILE332\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    27920   PO\n\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,604 RECORDS\n\nTIME THIS PDS WAS SHIPPED:   04/02/01    15:00:23    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$EPILOG": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88!\\x0f\\x00\\x88!\\x0f\\x18\\x13\\x00\\r\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf3\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-07-28T00:00:00", "modifydate": "1988-07-28T18:13:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "FILE332"}, "text": "         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PROLOG": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88!\\x0f\\x00\\x88!\\x0f\\x18\\x13\\x00\\\\\\x00\\\\\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf3\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-07-28T00:00:00", "modifydate": "1988-07-28T18:13:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "FILE332"}, "text": "         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$STCK": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88!\\x0f\\x00\\x88!\\x0f\\x18\\x13\\x00m\\x00m\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf3\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-07-28T00:00:00", "modifydate": "1988-07-28T18:13:00", "lines": 109, "newlines": 109, "modlines": 0, "user": "FILE332"}, "text": "         MACRO\n&LABEL   $STCK  &NOGEN\n         LCLC   &L\n.**********************************************************************\n.****                                                             *****\n.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****\n.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****\n.****                                                             *****\n.****    IF INVOKED WITHOUT THE OPTIONAL 'NOGEN' KEYWORD, THE     *****\n.****    CONSTANTS NAMED BELOW WILL BE GENERATED.  IF THE         *****\n.****    'NOGEN' KEYWORD IS USED, THE USER MUST PROVIDE THIS      *****\n.****    ROUTINE WITH ADDRESSABILITY TO THEM AS PRE-DEFINED       *****\n.****    CONSTANTS.                                               *****\n.****                                                             *****\n.****    DAY    DS   X      A BINARY NUMBER (HEX) RELATIVE TO     *****\n.****                       THE DAY OF THE WEEK AS FOLLOWS        *****\n.****                       0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,     *****\n.****                       3=THURSDAY, 4=FRIDAY,                 *****\n.****                       5=SATURDAY, 6=SUNDAY                  *****\n.****                                                             *****\n.****    DATE   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE DATE IN MM/DD/YY FORMAT           *****\n.****                                                             *****\n.****    TIME   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE TIME IN HH:MM:SS FORMAT           *****\n.****                                                             *****\n.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****\n.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****\n.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****\n.****                                                             *****\n.**********************************************************************\n&L       SETC  '&SYSNDX'\n&LABEL   STCK  8(13)              STORE THE TIME-OF-DAY CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n         L     15,16              GET CVT ADDRESS\n         A     0,304(15)          ADD LOCAL TIME DEVIATION\n         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS\n         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES AFT EPOCH)\n         LR    15,0               COPY REMAINDER OF MICS TO GET SECS\n         SR    14,14              CLEAR FOR DIVIDE\n         D     14,=F'951424'      DIVIDE TO GET REMAINING SECONDS (R5)\n         LR    14,15              COPY TO WORK REG\nS&L.B    SL    14,=F'60'          DECREMENT BY 60 SECONDS\n         BM    S&L.S              LESS THAN SIXTY, CONTINUE\n         SL    15,=F'60'          MORE THAN SIXTY, ADJUST FOR LEAP\n         AL    1,=F'1'            BUMP MINUTES\n         B     S&L.B              CHECK AGAIN\nS&L.S    CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT\n         UNPK  24(4,13),14(2,13)  UNPACK SECONDS FOR PRINT\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+6(2),26(13)   MOVE THE SECONDS\n         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT\n         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES\n         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+3(2),26(13)   MOVE THE MINUTES\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS\n         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME(2),26(13)     MOVE THE HOURS\n         MVI   TIME+2,C':'        ADD COLIN\n         MVI   TIME+5,C':'        ADD COLIN\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK\n         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER\n         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY\n         STC   0,DAY              SET RELATIVE DAY OF WEEK\n         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS\n         L     1,16               GET CVT ADDRESS\n         MVC   24(4,13),57(1)     MOVE CVT DATE TO WORK AREA\n         ZAP   8(8,13),=P'0'      ZERO WORK AREA\n         MVO   14(2,13),24(1,13)  MOVE YEAR PORTION\n         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA\n         LA    15,S&L.T           LOAD ADDR OF TABLE\n         CVB   1,8(13)            CONVERT TO BIN\n         SLL   1,30               SHIFT ALL BUT LAST TWO\n         LTR   1,1                TEST RESIDUAL\n         BNZ   *+8                NOT 0, BRANCH\n         LA    15,S&L.TL          LEAP YEAR\n         LR    14,15              SAVE TABLE IN USE\n         ZAP   8(8,13),25(2,13)   MOVE DAY PORTION\n         CVB   0,8(13)            CONVERT TO BIN\n         SR    1,1                CLEAR REG\n         IC    1,0(15)            LOAD CHAR FROM TABLE\n         LA    15,1(15)           INDEX TABLE POINTER\n         SR    0,1                SUBTRACT FROM WORK VALUE\n         BP    *-10               STILL POSITIVE, DO AGAIN\n         AR    0,1                ELSE, ADD IT BACK\n         CVD   0,8(13)            CONVERT TO DEC\n         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT\n         SR    15,14              FIND VALUE OF CURRENT INDEX\n         CVD   15,8(13)           CONVERT TO DEC\n         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT\n         OI    DATE+1,C'0'        INSURE NUMERICS\n         OI    DATE+4,C'0'        INSURE NUMERICS\n         OI    DATE+7,C'0'        INSURE NUMERICS\n         MVI   DATE+2,C'/'        ADD SLASH\n         MVI   DATE+5,C'/'        ADD SLASH\n         B     S&L.E              BRANCH AROUND CONSTANTS\nS&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nS&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\n         AIF    (T'&NOGEN NE 'O').NOGEN   NOGEN SPECIFIED, SKIP\nDAY      DC    XL1'00'            RELATIVE DAY OF THE WEEK\nDATE     DC    C'  /  /  '        CURRENT DATE\nTIME     DC    C'  :  :  '        CURRENT TIME\n.NOGEN   ANOP\nS&L.E    DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUTO": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88!\\x0f\\x00\\x88!\\x0f\\x18\\x13\\x03\\xf4\\x03\\xf4\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf3\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-07-28T00:00:00", "modifydate": "1988-07-28T18:13:00", "lines": 1012, "newlines": 1012, "modlines": 0, "user": "FILE332"}, "text": "*----------------------------------------------------------------------\n*\n*        THIS ROUTINE PROVIDES FOR JOB SUBMISSION AND AUTOMATIC\n*        COMMANDS IN AN MVS/JES2 ENVIRONMENT.  IT'S FUNCTIONS\n*        ARE THREE-FOLD AND ARE EXPLAINED BELOW.\n*\n*\n*        1=RDR  ALLOW AN EASY WAY OF PRESENTING JOBS TO JES2 VIA AN\n*               OPERATOR MODIFY COMMAND.\n*\n*        2=CMD  ALLOW AN EASY WAY OF PRESENTING MULTIPLE COMMANDS TO\n*               MVS/JES2 VIA AN OPERATOR MODIFY COMMAND.\n*\n*        3=AUTO ALLOW FOR TIME-OF-DAY/DAY-OF-WEEK AUTOMATIC COMMANDS\n*\n*\n*        THE USER MUST PROVIDE A STARTED TASK PROCEDURE IN SYS1.PROCLIB\n*        WHICH IS STARTED AT IPL TIME.  ONCE ACTIVE, IT WILL PROCESS\n*        USER DEFINED COMMANDS BY DAY OF WEEK (USER DEFINED).\n*        ALSO, IT WILL SUPPORT OPERATOR MODIFY COMMANDS (DEMAND)\n*        EITHER SUBMIT JOBS (MEMBERS) TO THE INTERNAL READER OR\n*        EXECUTE COMMANDS (MEMBER LISTS).\n*\n*        FOR THE JOB SUBMISSION FEATURE, ONE OR MORE PARTITIONED\n*        DATASET(S) ARE USED.  FOR THE COMMAND/AUTO-COMMAND\n*        FUNCTIONS, ANOTHER PARTITIONED DATASET IS USED.  EACH\n*        ARE DESCRIBED BELOW (BY DDNAME).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*\n*\n*        DDNAME     USE AND FUNCTION\n*        --------   -------------------------------------------------\n*\n*\n*        INTRDR     REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE JES2 INTERNAL\n*                   READER.\n*\n*        JOB00      REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE NAME OF A\n*                   PARTITIONED DATASET WHICH CONTAINS MEMBERS\n*                   TO BE SUBMITTED TO JES2.\n*\n*        JOB??      OPTIONAL WHEN THE JOB-SUBMISSION FUNCTION IS USED.\n*                   ANY NUMBER OF ADDITIONAL 'JOB??' DDCARDS MAY BE\n*                   USED TO ALLOW FOR SPECIALIZED FUNCTION (WITH\n*                   DUPLICATE MEMBER NAMES).  THIS OPTION IS SIMILAR\n*                   TO THE MULTIPLE 'PROC??' DDCARDS WITHIN THE JES2\n*                   STARTUP PROC.  USE OF THESE OPTIONAL LIBRARIES\n*                   IS CONTROLED BY THE OPERATOR (VIA THE 'D=??'\n*                   KEYWORD, AS DETAILED BELOW).\n*\n*        COMMANDS   THIS DD STATEMENT IS REQUIRED FOR EITHER THE\n*                   OPERATOR COMMAND-LIST OR THE AUTO-COMMAND\n*                   FUNCTION.  IT SHOULD CONTAIN MEMBERS (LISTS\n*                   OF COMMANDS) IN THE FORMAT DESCRIBED UNDER THE\n*                   HEADING 'COMMAND RECORD SYNTAX' BELOW.\n*\n*\n*        THE FOLLOWING IS AN EXAMPLE OF THE TYPE OF PROC TO\n*        BE ADDED TO YOUR SYS1.PROCLIB.  NOTE THAT THE 'JOB00'\n*        DDNAME IS REQUIRED TO USE THE JOB SUBMISSION FUNCTION\n*        WHILE 'JOB01' AND 'JOB02' ARE OPTIONAL (USED IN THIS\n*        CASE AS REMOTE JOB CONTROL LIBRARIES).\n*\n*        //AUTO     EXEC PGM=AUTO,TIME=1440,DPRTY=(7,9)\n*        //STEPLIB  DD DISP=SHR,DSN=USER.LIBRARY    <---- AUTHORIZED\n*        //INTRDR   DD SYSOUT=(A,INTRDR)\n*        //COMMANDS DD DISP=SHR,DSN=SYS1.COMMANDS\n*        //JOB00    DD DISP=SHR,DSN=RMT0.JCL.LIB\n*        //JOB01    DD DISP=SHR,DSN=RMT1.JCL.LIB\n*        //JOB02    DD DISP=SHR,DSN=RMT2.JCL.LIB\n*\n*        USE OF THE OPTIONAL 'JOB??' DDNAMES IS SPECIFIED BY THE\n*        OPERATOR USING THE 'D=' OPERAND (DETAILED BELOW).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF NORMAL OPERATOR COMMANDS\n*        JOB SUBMISSION USE:\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        START     S AUTO.A     NORMAL OPERATOR START-UP.  THE FIRST\n*                               AUTOMATIC COMMAND TO BE PROCESSED\n*                               WILL BE THE MEMBER WITH A NAME THAT\n*                               SPECIFIED A TIME GREATER THAN CURRENT.\n*                               HOWEVER, DEMAND COMMAND EXECUTION\n*                               AS WELL AS JOB SUBMISSION IS AVAILABLE\n*                               IMMEDIATELY.\n*\n*        IPL       S AUTO.A,PARM=IPLMEM\n*                               SAME AS ABOVE, EXCEPT THAT THE COMMAND\n*                               MEMBER NAMED IN THE PARM FIELD WILL BE\n*                               EXECUTED BEFORE ANY OTHER REQUESTS\n*                               (AUTOMATIC OR OPERATOR REQUESTED\n*                               COMMAND).  THIS PROVIDES AN ALTERNATIVE\n*                               TO THE 'SYS1.PARMLIB(COMMND??)' OPTION\n*                               PROVIDED BY MVS.  IT ALSO PROVIDES FOR\n*                               ANY TYPE OF COMMAND (JES2 COMMANDS AS\n*                               WELL AS MVS COMMANDS).\n*\n*        SUBMIT    F A,MEMBER1  SUBMIT 'MEMBER1' TO THE JES2 INTERNAL\n*                               READER.  SINCE THE 'D=??' OPTION WAS\n*                               NOT USED, THE MEMBER WILL BE READ FROM\n*                               THE 'JOB00' DD (WHICH WILL REMAIN OPEN\n*                               OPEN UNTIL SOMETHING OTHER UNTIL 'D=??'\n*                               IS SPECIFIED AND IS NOT THE SAME AS THE\n*                               ONE USED PREVIOUSLY).\n*\n*        SUBMIT    F A,MEMBER1,MEMBER2,....,MEMBERN\n*                               SUBMIT MULTIPLE MEMBERS TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=??' WAS NOT\n*                               SPECIFIED, THE 'JOB00' IS AGAIN USED.\n*\n*        SUBMIT    F A,MEMBER1,D=01\n*                               SUBMIT A MEMBER (JOB) TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=01' WAS\n*                               SPECIFIED, THE 'JOB00' FILE IS CLOSED\n*                               AND THE 'JOB01' FILE IS OPENED TO\n*                               READ THE MEMBER.  THIS FILE WILL\n*                               REMAIN OPEN UNTIL THE 'D=??' IS\n*                               CHANGED (FROM 'D=01') OR IS NOT\n*                               SPECIFIED ('D=00' IS THE DEFAULT).\n*\n*        SUBMIT    F A,MEMBER1,MEMBER02,.....,MEMBERN,D=01\n*                               SAME AS THE ABOVE, HOWEVER, MULTIPLE\n*                               MEMBERS WILL BE READ FROM THE 'JOB01'\n*                               FILE AND SUBMITTED.  NOTE THAT THE\n*                               'D=??' KEYWORD MUST BE SPECIFIED AS\n*                               THE LAST OPTION.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF OPERATOR COMMANDS TO SCHEDULE\n*        COMMAND LISTS.\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        COMMAND   F A,-MEMBER1 CAUSE A LIST OF COMMANDS TO BE EXECUTED\n*                               BY MVS (OR JES2).  NOTE THAT THE DASH\n*                               (HYPHEN) AS A PREFIX TO THE MEMBER\n*                               NAME IDENTIFIES THE REQUEST AS A\n*                               COMMAND REQUEST (DEMAND).  THE NAMED\n*                               MEMBER WILL BE READ FROM THE FILE\n*                               IDENTIFIED BY THE DD 'COMMANDS'.  EACH\n*                               COMMAND READ WILL BE EXECUTED IF RE-\n*                               QUESTED FOR THE CURRENT DAY (THE SYNTAX\n*                               SYNTAX OF THE 'COMMANDS' RECORDS ARE\n*                               DEFINED BELOW UNDER 'COMMAND RECORD\n*                               SYNTAX').\n*\n*        COMMAND   F A,-MEMBER1,MEMBER2,.....,MEMBERN\n*                               CAUSE A LIST OF MEMBERS TO BE PROCESSED\n*                               BY MVS (OR JES2).  EACH MEMBER MAY\n*                               CONTAIN MULTIPLE COMMANDS. AGAIN NOTE\n*                               THAT THE DASH IDENTIFIES THE REQUEST\n*                               AS A DEMAND COMMAND REQUEST.\n*\n*        SHUTDOWN  P A          TO TERMINATE THIS ROUTINE, SIMPLY\n*                               ENTER AN OPERATOR STOP COMMAND.\n*\n*        SHUTDOWN  F A,-SHUTDOWN\n*                               TO ALLOW A LIST OF 'SHUTDOWN' COMMANDS\n*                               TO BE EXECUTED PRIOR TO STOPPING THIS\n*                               ROUTINE (SUCH AS $PI, I SMF, P RMF ETC)\n*                               THE 'P A' COMMAND MAY BE ADDED TO THE\n*                               END OF THE SHUTDOWN MEMBER.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE AUTOMATIC COMMAND FUNCTION IS NOT CONTROLLED BY THE\n*        OPERATOR.  INSTEAD, IT OPERATES ON A 1440 MINUTE CYCLE\n*        (60 MINUTES/HOUR AND 24 HOURS/DAY) WITHIN DAY-OF-WEEK\n*        AND MONTH-OF-YEAR CYCLES.  THIS MEANS THAT COMMANDS MAY\n*        BE SCHEDULED AT A SPECIFIED TIME OF DAY ON ANY (OR ALL)\n*        DAY(S) OF THE WEEK OR ANY DAY OF THE MONTH.\n*\n*        COMMANDS TO BE EXECUTED ARE CONATAINED IN MEMBERS THAT\n*        RESIDE IN THE 'COMMANDS' LIBRARY.  EACH MEMBER TO BE\n*        AUTOMATICALLY PROCESSED IS NAMED AS FOLLOWS.\n*\n*            @0100   THIS LIST OF COMMANDS IS TO BE PROCESSED AT\n*                    1:00 IN THE MORNING.\n*            @1423   THIS MEMBER WILL BE PROCESSED AT 2:23 PM.\n*\n*            @0000   THIS MEMBER WILL BE PROCESSED AT MIDNIGHT.\n*\n*        NOTE THAT THE MEMBER NAMES TO BE PROCESSED AUTOMATICALLY\n*        MUST BE PREFIXED WITH THE 'AT SIGN' (@), HOWEVER, THESE\n*        MEMBERS ARE NOT RESTRICTED FROM 'DEMAND' USE.\n*\n*\n*        COMMAND RECORD SYNTAX\n*\n*        EACH MEMBER CONTAINED IN THE 'COMMANDS' LIBRARY MUST FOLLOW\n*        THE SYNTAX DEFINED BELOW.  THIS IS TRUE FOR BOTH DEMAND\n*        COMMAND LISTS AS WELL AS AUTOMATIC COMMAND LISTS.\n*\n*        AN ASTERISK (*) IN COLUMN 1 DENOTES A COMMENT RECORD AND IS\n*        IGNORED BY THE PROCESSOR.  COMMANDS (RECORDS) ARE PROCESSED\n*        ONLY ON SPECIFIED DAYS OF THE WEEK AS INDICATED IN THE DAYS\n*        FIELD.  DAYS OF THE WEEK MUST BE IN THE ORDER SHOWN.\n*\n*        A NON-BLANK IN THE 'DAY-OF-THE-WEEK' FIELD REQUESTS PROCESSING\n*        ON THAT DAY.\n*\n*        FORMAT:\n*\n*        1    ===>BLANK            (AN ASTERISK SIGNIFIES A COMMENT)\n*        2-6  ===>MM/DD            (MONTH/DAY SPEC - SLASH REQ'D!)\n*        15   ===>(BLANK)\n*        8-14 ===>MTWTFSS          (DAY-OF-WEEK SPECIFICATION)\n*        15   ===>(BLANK)\n*        16   ===>COMMAND DATA     (THROUGH COLUMN 71)\n*        72   ===>CONTINUATION     (ONLY ONE CONTINUATION ALLOWED)\n*\n*        AN ASTERISK IN EITHER THE MM FIELD OR THE DD FIELD ALLOWS\n*        EXECUTION FOR ALL MONTHS OR ALL DAYS.  ASTERISKS IN BOTH\n*        FIELDS EFFECTIVELY NULLIFIES DAY-WITHIN-MONTH CRITERIA\n*        (IF '**/**' IS SPECIFIED, THE COMMAND IS SUBJECT ONLY TO\n*        DAY OF WEEK CRITERIA WHICH IS THE SAME AS ALL BLANKS IN\n*        THE MM/DD FIELD).  IF THE MM/DD FIELD IS NON-BLANK,\n*        THE REQUEST WILL BE PROCESSED ON THE MONTH/DAY SPECIFIED\n*        BUT IS ALSO SUBJECT TO DAY OF WEEK SPECIFICATIONS.\n*        IF A REQUEST IS TO BE PROCESSED ON THE SAME DAY OF EVERY\n*        MONTH, SPECIFY THE MONTH AS ASTERISKS ('**/05').  IF A\n*        REQUEST IS TO BE PROCESSED EVERY DAY OF A GIVEN MONTH,\n*        SPECIFY THE DAY AS ASTERISKS ('09/**').\n*\n*        CONTINUATION IS SUPPORTED ONLY IF THE SUBSEQUENT RECORD\n*        HAS 'ALL' BLANKS IN COLUMNS 1 THROUGH 15 AND CONTINUED\n*        DATA BEGINS IN COLUMN 16.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF AUTOMATIC COMMANDS:\n*\n*   COLUMNS:  1      8       16                                   71\n*             ..     .       .                                    .\n*   COL-1---->*MM/DD MTWTFSS COMMAND------------------------------>72\n*\n* MEMBER=@0300\n*   COL-1---->       XXXXXX  F A,BACKUP1,BACKUP2,BACKUP3\n*   COL-1---->             X F A,BACKUPWK\n*   COL-1----> **/01 ******* F A,MONTH01\n*   COL-1----> **/01      S  F A,FIRSTSAT  SCHEDULE JOB ONLY ON THE\n*   COL-1----> **/02      S  F A,FIRSTSAT  1ST SATURDAY OF THE MONTH\n*   COL-1----> **/03      S  F A,FIRSTSAT            \"\n*   COL-1----> **/04      S  F A,FIRSTSAT            \"\n*   COL-1----> **/05      S  F A,FIRSTSAT            \"\n*   COL-1----> **/06      S  F A,FIRSTSAT            \"\n*   COL-1----> **/07      S  F A,FIRSTSAT            \"\n* MEMBER=@0755\n*   COL-1---->       MTWTF   START TCAM\n* MEMBER=@0800\n*   COL-1---->       MTWTF   F TCAM,TS=START\n*   COL-1---->       MTWTF   $HQ,P\n*   COL-1---->       MTWTF   $AQ,T\n* MEMBER=@0900\n*   COL-1---->       -       SEND 'TODAY IS BLUE MONDAY...KEEP SMILING*\n*   COL-1---->               '\n*   COL-1---->        -      SEND 'TODAY IS TUESDAY...FOUR MORE TO GO'\n*   COL-1---->         -     SEND 'TODAY IS WEDNESDAY...YOUR HALF WAY'\n*   COL-1---->          -    SEND 'TODAY IS THURSDAY...HANG IN THERE'\n*   COL-1---->           -   SEND 'THANK GOD IT''S FRIDAY'\n*   COL-1---->            -  SEND 'IT''S SATURDAY... DIDN''T YOU FINIS*\n*   COL-1---->               H?'\n*   COL-1---->             - SEND 'WOW... EVEN SUNDAY YOU WORK!!!!!!'\n* MEMBER=@1645\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN AT FIVE SHARP'\n* MEMBER=@1655\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN IN FIVE MINUTE*\n*   COL-1---->               S'\n* MEMBER=@1659\n*   COL-1---->       MTWTF   SE '**** TSO IS GOING DOWN IN ONE MINUTE X\n*   COL-1---->               ****'\n*   COL-1---->       MTWTF   SE '****   YOU WILL RECEIVE NO WARNING   X\n*   COL-1---->               ****'\n* MEMBER=@1700\n*   COL-1---->       MTWTF   F TCAM,TS=STOP\n*   COL-1---->       MTWTF   $HQ,T\n*   COL-1---->       MTWTF   $AQ,P\n*   COL-1----> 05/17 ******* F A,TESTJOB  SCHEDULE ONLY ON MAY 17\n*   COL-1----> 05/16 *****   F A,TESTWKDY SCHEDULE ONLY ON MAY 16 WD\n*   COL-1----> 05/16      ** F A,TESTWKND SCHEDULE ONLY ON MAY 16 WE\n* MEMBER=@1702\n*   COL-1---->       MTWTF   Z TP\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF OPERATOR 'DEMAND' COMMANDS:\n*\n*   COL-1---->*      MTWTFSS COMMAND--------------------------->72\n*\n* MEMBER=IPL                            (  S AUTO.A,PARM=IPL  )\n*   COL-1---->       XXXXXXX S RMF.RMF\n*   COL-1---->       XXXXXXX S OPSWTR.OPSWTR\n*   COL-1---->       XXXXXXX F A,-VARYCONS,VARYALL,SETJES\n* MEMBER=SETJES                         (  F A,-SETJES )\n*   COL-1---->       XXXXXXX $TPRT1,Q=A\n*   COL-1---->       XXXXXXX $TI9,Z\n*   COL-1---->       XXXXXXX $SI9\n*   COL-1---->       XXXXXXX $SPRT1\n* MEMBER=SHUTDOWN                       (  F A,-SHUTDOWN  )\n*   COL-1---->       XXXXXXX $P\n*   COL-1---->       XXXXXXX $IPRT1\n*   COL-1---->       XXXXXXX $PLNE1\n*   COL-1---->       XXXXXXX $ELNE1\n*   COL-1---->       XXXXXXX P OPSWTR\n*   COL-1---->       XXXXXXX P RMF\n*   COL-1---->       XXXXXXX P A\n* MEMBER=UNLOAD                         (  F A,-UNLOAD  )\n*   COL-1---->       XXXXXXX U 180\n*   COL-1---->       XXXXXXX U 181\n*   COL-1---->       XXXXXXX U 182\n* MEMBER=VARYALL                        (  F A,-VARYALL  )\n*   COL-1---->       XXXXXXX V 180-188,ONLINE\n*   COL-1---->       XXXXXXX V 150-158,OFFLINE\n*   COL-1---->       XXXXXXX V 160-16F,ONLINE\n* MEMBER=VARYCONS                       (  F A,-VARYCONS  )\n*   COL-1---->       XXXXXXX V 120,CONSOLE,ROUT=(1,2,8,9,10,12,13,14,1*\n*   COL-1---->               5)\n*   COL-1---->       XXXXXXX V 121,CONSOLE,ROUT=(3,4,5,6)\n*   COL-1---->       XXXXXXX V 122,CONSOLE,ROUT=(7)\n*   COL-1---->       XXXXXXX V O-123,CONSOLE,ROUT=ALL\n* MEMBER=VARYOFF                        (  F A,-VARYOFF  )\n*   COL-1----> 09/**      XX V 150-158,OFFLINE  ONLY FOR SEPT WKEND\n*   COL-1---->       XXXXXXX V 160-168,OFFLINE\n*   COL-1---->       XXXXXXX V 170-178,OFFLINE\n*\n*  NOTE THAT THE COMMAND-LIST MEMBER MAY INCLUDE COMMANDS FOR THIS\n*  ROUTINE AS WELL.  THIS MAY OR MAY NOT BE DESIRABLE SINCE IF NOT\n*  CAUTIOUS, A LOOP COULD RESULT.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THIS ROUTINE IS 'NOT' RE-ENTRANT AND MUST BE LINKED AS\n*        'AUTHORIZED'.\n*\n*        BOB BECKER MAY ,1979  ALLEN-BRADLEY COMPANY .. MILWAUKEE\n*\n*        MODIFIED:\n*\n*        GERALD URBANEK JANUARY, 1988 WESTERN ATLAS INTERNATIONAL ..\n*        HOUSTON, TEXAS\n*\n*        CORRECTED TIMING PROBLEMS AT MIDNIGHT ON LIGHTLY LOADED\n*        HIGH SPEED PROCESSORS.\n*\n*\n*\n*\n*\n*        REGISTER USAGE\n*\n*        R0   - WORK\n*        R1   - WORK\n*        R2   - WORK\n*        R3   - WORK\n*        R4   - WORK\n*        R5   - WORK\n*        R6   - WORK\n*        R7   - WORK\n*        R8   - UNUSED\n*        R9   - QEDIT ORIGIN BASE\n*        R10  - DCBS\n*        R11  - BASE # 1\n*        R12  - BASE # 2\n*        R13  - SAVE AREA\n*        R14  - BAL\n*        R15  - WORK\n*\n*----------------------------------------------------------------------\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZATION\n*\n*----------------------------------------------------------------------\nAUTO     $PROLOG R11,R12          ENTRY LINKAGE\n         USING IHADCB,R10         DCB DSECT\nENTRY010 DS    0H\n         L     R1,0(R1)           PARM POINTER\n         XR    R2,R2              CLEAR R2\n         ICM   R2,3,0(R1)         ANY PARM ?\n         BZ    BBB010             NO - NOT STARTED AT IPL\n         CH    R2,=H'8'           MAX PARM LENGTH ?\n         BNH   AAA010             NO - OK\n         WTO   '** AUTO ** - INVALID PARM LENGTH, IGNORED'\n         B     BBB010\nAAA010   EQU   *\n         BCTR  R2,R0              DECR FOR EXECUTE\n         EX    R2,MVC010          MOVE PARM TO MEMBER\nBBB010   EQU   *\n         OPEN  (COMMANDS,,DIR,,INTRDR,(OUTPUT))\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  IS IT OPEN ?\n         BZ    ERROR1             NO - ERROR\n         BAL   R14,ENTRY999       SET UP THE DATE/TIME/DAY FIELDS\n         L     R0,BUFSIZE         MAX BLKSIZE\n         GETMAIN R,LV=(0)\n         ST    R1,BUFFER          STORE FOR USE AS READ BUFFER\nEXIT010  EQU   *\n         B     ENTRY020\n         LTORG\nMVC010   MVC   MEMBER(0),2(R1)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZE CONSOLE COMMUNICATION INTERFACE\n*\n*----------------------------------------------------------------------\nENTRY020 DS    0H\n         EXTRACT COMM,'S',FIELDS=(COMM)\n         L     R1,COMM            GET ADDRESS OF COMMUNICATIONS FIELDS\n         L     R0,0(R1)           GET COMMUNICATIONS ECB ADDRESS\n         ST    R0,COMMECB         SAVE ECB ADDRESS IN WAIT LIST\n         LA    R9,4(R1)           GET ORIGIN ADDRESS FOR QEDIT\n         ICM   R1,15,0(R9)        IS THERE A START COMMAND CIB WAITING\n         BZ    AAA020             NO, MUST BE BATCH EXECUTION\n         QEDIT ORIGIN=(R9),BLOCK=(R1)  YES, FREE START COMMAND CIB\nAAA020   EQU   *\n         QEDIT ORIGIN=(R9),CIBCTR=255  ALLOW STACKED COMMANDS (255)\nEXIT020  EQU   *\n         B     ENTRY030\nCOMM     DC    F'0'\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        IPL COMMAND EXECUTION\n*\n*----------------------------------------------------------------------\nENTRY030 DS    0H\n         CLC   MEMBER,BLANKS      ANY PARM ?\n         BE    EXIT030            NO - THIS IS NOT IPL START\n         BAL   R14,ENTRY900       PROCESS IPL MEMBER\nEXIT030  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SET UP TIMER\n*\n*----------------------------------------------------------------------\nENTRY040 DS    0H\n         POINT DIR,=X'00000100'   POINT TO FIRST RECORD IN DIRECTORY\n         USING DIRDSECT,R3\n         TIME  DEC\n         STCM  R0,12,HHMM         STORE TIME HHMM\n         UNPK  @TIME(5),HHMM      MOVE TO STIMER TIME FIELD\n         MVC   @TIME+4(2),=2C'0'\nAAA040   EQU   *\n         L     R3,BUFFER          ADDR OF BUFFER\n         READ  DIRDECB,SF,DIR,(R3),'S'  READ DIRECTORY\n         CHECK DIRDECB            AND OF COURSE WAIT\n         XR    R1,R1              CLEAR A WORK REG\n         ICM   R1,3,0(R3)         LNGTH OF DATA IN DIR BLK\n         LA    R5,0(R1,R3)        END OF DATA IN DIR BLK\n         LA    R3,2(R3)           INCR TO FIRST MEMBER NAME\nLOOP040A EQU   *\n         CLC   DIRNAME,=8X'FF'    END OF MEMBERS ?\n         BE    DDD040             YES - CHECK FOR LO MEMBER\n         CLI   DIRNAME,C'@'       TOD MEMBER ?\n         BNE   CCC040             NO -SKIP IT\n         LA    R1,DIRNAME+1       SECOND BYTE OF DIRNAME\n         LA    R15,4              LOOP CONTROL - HHMM\nLOOP040B EQU   *\n         TM    0(R1),X'F0'        NUMERIC ?\n         BNO   CCC040             NO - SKIP THIS MEMBER\n         LA    R1,1(R1)           BUMP TO NEXT BYTE\n         BCT   R15,LOOP040B\n         CLC   DIRNAME+6(2),BLANKS  MUST BE BLANKS\n         BE    BBB040             YES - OK\n         MVC   WTO040+28(8),DIRNAME  NO - INFORM OPER\nWTO040   WTO   '** AUTO ** - MEMBER //////// INVALID FOR TOD PROCESSINGX\n               , IGNORED'\n         B     CCC040\nBBB040   EQU   *\n         CLC   DIRNAME+1(4),@TIME  MUST BE HIGHER\n         BH    GGG040             PROCESS THIS MEMBER\nCCC040   EQU   *\n         NI    DIRC,X'1F'         TURN OFF UNNEEDED BITS\n         XR    R1,R1              CLEAR R1\n         IC    R1,DIRC            NUMBER OF USER HALFWORDS\n         SLL   R1,1               NUMBER OF USER BYTES\n         LA    R3,12(R1,R3)       INCR TO NEXT DIR ENTRY\n         CR    R3,R5              PAST END OF DIR BLOCK ?\n         BL    LOOP040A           NO - CHECK THIS DIR ENTRY\n         B     AAA040             YES - GET NEXT DIR BLOCK\nDDD040   EQU   *                  ALSO EODAD FOR DIR READS\n         AP    HHMM,=P'1000'      ADD 1 HOUR\n         MVI   HHMM+1,X'00'       CLEAR MM\n         CP    HHMM,=P'24000'     MIDNITE ?\n         BL    EEE040             NO - OK\n*    FOLLOWING TWO INSTRUCTIONS ADDED TO CORRECT TIMING PROBLEMS AT\n*    MIDNIGHT ON LIGHTLY LOADED HIGH SPEED PROCESSORS\n*\n         CLC   @TIME(4),=C'2359'  IS IT MIDNIGHT  ????      GRU 01/88\n         BE    ENTRY040           YES GET PAST MIDNIGHT     GRU 01/88\n*\n*\n         MVC   @TIME,=C'23595999' SET MIDNIGHT AS TIMER VALUE\n         B     III040             GO TO IT\nEEE040   EQU   *\n         UNPK  @TIME(5),HHMM      SET DEFAULT TO CHECK AGAIN NEXT HOUR\n         B     HHH040\nGGG040   EQU   *\n         MVC   @TIME(4),DIRNAME+1  YES - NEW TIMER VALUE\nHHH040   EQU   *\n         MVC   @TIME+4(4),=4C'0'\nIII040   EQU   *\n         XC    TIMEECB,TIMEECB\n         STIMER  REAL,ENTRY950,TOD=@TIME\nEXIT040  EQU   *\n         B     ENTRY050\n         DROP  R3\n         LTORG\nHHMM     DC    PL3'0'\n@TIME    DC    D'0'\n         EJECT\n*----------------------------------------------------------------------\n*\n*        WAIT FOR MODIFY OR TIMER POP\n*\n*----------------------------------------------------------------------\nENTRY050 DS    0H\n         WAIT  1,ECBLIST=ECBLIST,LONG=YES  WAIT UNTIL AN ECB IS POSTED\n         L     R1,COMMECB         ADDR OF COMMUNICATIONS ECB\n         CLI   0(R1),X'00'        CHECK FOR OPERATOR REQUEST\n         BNE   ENTRY060           YES--GO TO PROCESS OPER REQ\n         CLI   TIMEECB,X'00'      DID THE TIMER POP ?\n         BNE   ENTRY300           YES--GO PROCESS TIME REQUEST\n         B     ENTRY050           HMMM.. DON'T KNOW, RETRY\n         LTORG\nECBLIST  DS    0F\nCOMMECB  DC    A(0)\n         DC    X'80',AL3(TIMEECB)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        CHECK FOR OPERATOR REQUEST\n*\n*----------------------------------------------------------------------\nENTRY060 DS    0H\n         L     R3,0(R9)           GET ADDRESS OF THE CIB\n         USING CIBSECT,R3         ALLOW ADDRESSABILITY\n         CLI   CIBVERB,X'40'      IS IT THE STOP COMMAND ?\n         BE    RETURN             YES - TO CLEAN UP ROUTINE\n         MVC   COMMDATA,BLANKS    CLEAR THE DATA BUFFER\n         IC    R15,CIBDSIZE+1     GET SIZE OF MODIFY DATA\n         BCTR  R15,R0             DECREMENT FOR EXECUTE\n         EX    R15,MOVE060        MOVE TO COMMDATA\n         QEDIT ORIGIN=(R9),BLOCK=(R3)  FREE THE CIB\n         OC    COMMDATA,BLANKS    UPPER CASE\n         CLI   COMMDATA,C'-'      IS IT A COMMAND REQUEST ?\n         BE    ENTRY200           YES - PROCESS IT\n         B     ENTRY100           NO - ASSUME JOB\n         LTORG\nMOVE060  MVC   COMMDATA(0),CIBDATA  MOVE DATA TO WORK AREA\n         DROP  R3                 FREE THE USING REGISTER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DETERMINE WHICH DDNAME TO USE FOR SUBMIT\n*\n*----------------------------------------------------------------------\nENTRY100 DS    0H\n         LA    R10,JOBDCB         ADDR OF JOB DCB\n         LA    R3,COMMDATA        ADDR OF INPUT DATA\nLOOP100A EQU   *\n         CLI   0(R3),C' '         END OF DATA ?\n         BE    AAA100             YES - DEFAULT DDNAME\n         CLC   0(3,R3),=C',D='    IS THIS DDNAME OVERRIDE?\n         BE    BBB100             NO, CONTINUE UNTIL ONE IS FOUND\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         B     LOOP100A           BRANCH BACK\nAAA100   EQU   *\n         MVC   0(5,R3),=C',D=00'  ASSUME DEFAULT\nBBB100   EQU   *\n         TM    DCBOFLGS,DCBOFOPN  JOB CNTL DCB OPEN ?\n         BZ    CCC100             NO - OPEN IT\n         CLC   OPENDCB,3(R3)      SAME AS LAST ONE ?\n         BE    EXIT100            YES - OK\n         CLOSE ((R10))            NO - CLOSE IT\n         XC    OPENDCB,OPENDCB    CLEAR LAST OPENED\nCCC100   EQU   *\n         MVC   DADNJCL+3(2),3(R3)   MODIFY DYNAMIC ALLOCATION PARMS\n         LA    R4,DSNTABLE          TABLE OF DSNS TO DDNAMES\nCCC100L  DS    0H\n         CLC   0(2,R4),3(R3)        RIGHT DDNAME SUFFIX ?\n         BE    CCC100A              GO DO ALLOCATION\n         CLC   0(2,R4),=X'FFFF'     END OF TABLE ?\n         BNE   CCC100B              NO BUMP TO NEXT ENTRY\n         MVC   CCC100M+33(2),3(R3)  MOVE DD SUFFIX TO WTO\n*               89012345678901234567890123456789012345678901234567890\nCCC100M  WTO   '** AUTO ** DDNAME SUFFIX // NOT DEFINED IN TABLE USING X\n               00 AS A DEFAULT'\n         MVC   3(2,R3),=C'00'       SET UP DEFAULT\n         B     CCC100\nCCC100B  DS    0H\n         LA    R4,46(R4)            NEXT ENTRY IN TABLE PLEASE.\n         B     CCC100L              TRY THAT ENTRY ON FOR SIZE\nCCC100A  DS    0H\n         MVC   DADSJCL(44),2(R4)    SAVE THE DATASET TO ALLOCATE.\n         LA    R1,JCLALOC\n         DYNALLOC\n         LTR   R15,R15              ALLOCATION GOOD ?\n         BZ    CCC100D\n         MVC   DATASET(44),DADSJCL MOVE DSNAME TO TITLE\n         WTO   MF=(E,TITLE)\n         LH    R6,TITLE            GET LENGTH OF WTO.\n         LH    R7,TITLE+2          GET MCS FLAGS FROM WTO\n         SH    R6,HALF4            GET LENGTH OF MESSAGE TEXT\n         STC   R6,TITLE+3          SAVE LENGTH FOR SDUMP\n         SDUMP HDRAD=TITLE+3\n         STH   R7,TITLE+2          RESTORE MCS FLAGS FROM WTO.\n         B     ENTRY050            GO WAIT FOR MORE WORK\nCCC100D  DS    0H\n         MVC   DCBDDNAM+3(2),3(R3)  MODIFY DDNAME\n         OPEN  ((R10))\n         TM    DCBOFLGS,DCBOFOPN  DID IT OPEN THIS TIME ?\n         BZ    ERROR2             NO - ERROR\n         MVC   OPENDCB,3(R3)      SAVE LAST OPENED\nEXIT100  EQU   *\n         MVC   0(5,R3),=CL5' '    CLEAR THE 'D=XX' PARM\n         B     ENTRY110\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SUBMIT EACH MEMBER SPECIFIED IN THE PARMLIST\n*\n*----------------------------------------------------------------------\nENTRY110 DS    0H\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  IS THE INTRDR OPEN ?\n         BZ    ENTRY050           NO, IGNORE REQUEST\n         LA    R3,COMMDATA        ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA110   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP110  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB110             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB110             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP110        BACK TO CHECK NEXT CHAR\n         B     ERROR3             MEMBER NAME LONGER THAN 8 CHARS\nBBB110   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE110        MOVE MEMBER NAME\n         FIND  ((R10)),MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    CCC110             YES - OK\n         MVC   WTO110+25(8),MEMBER\n*               890123456789012345\nWTO110   WTO   '** AUTO ** - JOB //////// NOT FOUND'\n         B     EEE110             GO TO EODAD ROUTINE\nCCC110   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  READDECB,SF,(R10),(R5),'S'\n         CHECK READDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,READDECB+16     ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nDDD110   EQU   *\n         PUT   INTRDR,(R5)        SUBMIT JCL\n         BXLE  R5,R6,DDD110       BUMP TO NEXT REC IN BLOCK AND PUT\n         B     CCC110             READ ANOTHER BLOCK\nEEE110   EQU   *\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   FFF110             NO, FLUSH THE INTERNAL READER\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA110             NO, PROCESS IT\nFFF110   EQU   *\n         PUT   INTRDR,EOF         /*EOF\nEXIT110  EQU   *                  END OF ALL SUBMITS\n         CLOSE ((R10))            CLOSE AND DE-ALLOCATE JOBDCB.\n         B     ENTRY050           CHECK FOR ANY MORE COMMANDS\nMOVE110  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMAND EXECUTION REQUEST BY OPERATOR\n*\n*----------------------------------------------------------------------\nENTRY200 DS    0H\n         LA    R3,COMMDATA+1      ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA200   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP200  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB200             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB200             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP200        BACK TO CHECK NEXT CHAR\n         B     ERROR4             MEMBER NAME LONGER THAN 8 CHARS\nBBB200   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE200        MOVE MEMBER NAME\n         BAL   R14,ENTRY900       PROCESS COMMAND\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   EXIT200            NO, DONE\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA200             NO, PROCESS IT\nEXIT200  EQU   *\n         B     ENTRY050\n         LTORG\nMOVE200  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS TIME INTERVAL REQUESTS (THE TIMER HAS POPPED)\n*\n*----------------------------------------------------------------------\nENTRY300 DS    0H\n         MVC   MEMBER,BLANKS      CLEAR\n         MVI   MEMBER,C'@'        PREFIX\n         MVC   MEMBER+1(4),@TIME  BUILD NAME\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BNZ   EXIT300            NO, MUST BE NULL TIMER\n         BAL   R14,ENTRY900\nEXIT300  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMANDS\n*\n*----------------------------------------------------------------------\nENTRY900 DS    0H\n         ST    R14,ST900          SAVE RETURN ADDR\n         LA    R10,COMMANDS       DCB ADDR\n         TM    DCBOFLGS,DCBOFOPN  IS THE COMMANDS OPEN ?\n         BZ    EXIT900            NO, IGNORE REQUEST\n         BAL   R14,ENTRY999       RE-ESTABLISH DATE, TIME, AND DAY\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    AAA900             YES - PROCESS IT\n         MVC   WTO900+25(8),MEMBER\nWTO900   WTO   '** AUTO ** - CMD //////// NOT FOUND'\n         B     EXIT900            GO TO EODAD ROUTINE\nAAA900   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  CMDDECB,SF,(R10),(R5),'S'\n         CHECK CMDDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,CMDDECB+16      ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nBBB900   EQU   *\n         CLI   CONTFLAG,X'FF'     IS THE CONTINUATION FLAG ON ?\n         BNE   EEE900             NO, NORMAL PROCESSING\n         CLC   0(15,R5),BLANKS    IS IT A VALID CONT RECORD ?\n         BE    DDD900             YES, OK\nCCC900   EQU   *\n         MVC   WTO900A+25(8),MEMBER MOVE MEMBER NAME\nWTO900A  WTO   '** AUTO ** - CMD //////// INVALID CONTINUATION, SKIP'\n         MVI   CONTFLAG,X'00'     RESET CONT FLAG\n         B     JJJ900             SKIP THE RECORD\nDDD900   EQU   *\n         MVC   CMDBUF+56(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BNE   CCC900             YES - ERROR ONLY ONE CONT ALLOWED\n         MVI   CONTFLAG,X'00'     RESET THE CONTINUATION FLAG\n         B     III900             PROCESS COMPLETE COMMAND\nEEE900   EQU   *\n         CLI   0(R5),C'*'         COMMENT ?\n         BE    KKK900             YES - SKIP IT\n         CLC   1(5,R5),BLANKS     ANY MONTH/DAY PROCESSING?\n         BE    HHH900             NO, PROCESS DAY OF WEEK ONLY\n         CLI   3(R5),C'/'         VALID MONTH/DAY SPECIFICATION?\n         BE    FFF900             YES - OK\n         MVC   WTO900B+25(8),MEMBER MOVE MEMBER NAME\nWTO900B  WTO   '** AUTO ** - CMD //////// INVALID MONTH/DAY, SKIPPED'\n         B     KKK900             SKIP THE RECORD\nFFF900   EQU   *\n         CLC   1(5,R5),=C'**/**'  ANY MONTH/DAY PROCESSING?\n         BE    HHH900             YES, PROCESS DAY OF WEEK ONLY\n         CLC   1(5,R5),DATE       IS THIS A HIT?\n         BE    HHH900             YES, CHECK FOR CORRECT DAY OF WEEK\n         CLC   4(2,R5),=C'**'     WAS ANY DAY SPECIFIED ?\n         BNE   GGG900             NO, CHECK FOR ANY MONTH\n         CLC   1(2,R5),DATE       YES, IS THIS THE CORRECT MONTH\n         BE    HHH900             YES, PROCESS DAY OF WEEK NEXT\n         B     KKK900             NO - SKIP IT\nGGG900   EQU   *\n         CLC   1(2,R5),=C'**'     WAS ANY MONTH SPECIFIED ?\n         BNE   KKK900             NO - SKIP IT\n         CLC   4(2,R5),DATE+3     YES, IS THIS THE CORRECT DAY\n         BNE   KKK900             NO - SKIP IT\nHHH900   EQU   *\n         SR    R1,R1              CLEAR FOR DAY INDEX\n         IC    R1,DAY             GET DAY INDEX\n         LA    R1,7(R5,R1)        POINT TO TODAYS PROCESS FLAG\n         CLI   0(R1),C' '         PROCESS FLAG ON FOR TODAY ?\n         BE    KKK900             NO -SKIP IT\n         MVC   CMDBUF(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BE    III900             NO - PROCESS COMMAND\n         MVI   CONTFLAG,X'FF'     SET THE CONTINUATION FLAG\n         B     KKK900             GET NEXT RECORD\nIII900   MODESET KEY=ZERO         GET KEY ZERO AND AUTH\n         LM    R0,R1,SVCREGS      GET SVC 34 REGS\n         SVC   34                 SCHEDULE COMMAND\n         MODESET KEY=NZERO        RELEASE AUTHORIZATION\nJJJ900   EQU   *\n         MVC   CMDBUF(115),BLANKS CLEAR THE COMMAND BUFFER\nKKK900   EQU   *\n         BXLE  R5,R6,BBB900       BUMP TO NEXT REC IN BLOCK\n         B     AAA900             READ ANOTHER BLOCK\nEXIT900  EQU   *                  EODAD\n         L     R14,ST900          RETURN ADDR\n         BR    R14\n         LTORG\nST900    DC    F'-1'\nCONTFLAG DC    X'00'\nSVCREGS  DC    F'0'               REG 0 FOR SVC 34\n         DC    A(SVCCIB)          REG 1 FOR SVC 34\nSVCCIB   DC    AL2(118)           MAXIMUM LENGHT OF COMMAND\n         DC    H'0'               SVC 34 PADDING\nCMDBUF   DC    CL120' '           COMMAND BUFFER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        TIMER EXIT\n*\n*----------------------------------------------------------------------\nENTRY950 DS    0H\n         USING *,R15\n         STM   R14,R12,4(R13)     SAVE REGS\n         L     R12,=A(AUTO)\n         DROP  R15\n         POST  TIMEECB\n         LM    R14,R12,4(R13)     RESTORE REGS\nEXIT950  EQU   *\n         BR    R14\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DAY/DATE ROUTINE (FROM THE MACHINE CLOCK)\n*\n*----------------------------------------------------------------------\nENTRY999 DS    0H\n         ST    R14,SAVE999        SAVE BAL REG\n         $STCK NOGEN              GENERATE THE DATE, TIME AND DAY\nEXIT999  EQU   *\n         L     R14,SAVE999        RELOAD BAL REG\n         BR    R14\n         LTORG\nSAVE999  DC    F'-1'\nDAY      DC    X'99'              RELATIVE DAY OF WEEK (0=MONDAY)\nDATE     DC    D'0'               DATE MM/DD/YY\nTIME     DC    D'0'               TIME HH:MM:SS\n         EJECT\n*----------------------------------------------------------------------\n*\n*        END OF JOB\n*\n*----------------------------------------------------------------------\nRETURN   DS    0H\n         TM    DCBOFLGS,DCBOFOPN  IS THE JCL DCB OPEN?\n         BZ    AAARET             NO, SKIP THE CLOSE\n         CLOSE ((10))             CLOSE THE DCB\nAAARET   EQU   *\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  COMMANDS OPEN ?\n         BZ    BBBRET             NO, SKIP THE CLOSE\n         CLOSE (COMMANDS,,DIR)    CLOSE BOTH DCBS\nBBBRET   EQU   *\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  HOW ABOUT THE INTRDR ?\n         BZ    CCCRET             NO, SKIP THAT CLOSE\n         CLOSE (INTRDR)           CLOSE THE INTERNAL READER\nCCCRET   EQU   *\n         L     R1,BUFFER\n         L     R0,BUFSIZE\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15            CLEAR RETCODE\n         $EPILOG\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        ERROR ROUTINES\n*\n*----------------------------------------------------------------------\nERROR1   DS    0H\n         WTO   '** AUTO ** - COMMANDS DD CARD MISSING, TERMINATING'\n         B     RETURN\n*----------------------------------------------------------------------\nERROR2   DS    0H\n         MVC   WTO2+23(2),3(R3)\nWTO2     WTO   '** AUTO ** - D=// OPEN ERROR, JOB NOT SUBMITTED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR3   DS    0H\n         MVC   WTO3+25(8),0(R4)\nWTO3     WTO   '** AUTO ** - JOB //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR4   DS    0H\n         MVC   WTO4+25(8),0(R4)\nWTO4     WTO   '** AUTO ** - CMD //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n         EJECT\n*----------------------------------------------------------------------\n*\n*        STORAGE AREAS\n*\n*----------------------------------------------------------------------\nBUFSIZE  DC    F'32760'\nTIMEECB  DC    F'0'\nBUFFER   DC    F'0'\nMEMBER   DC    CL8' '\nOPENDCB  DC    CL2' '\nHOLDCIB  DC    CL256' '\nCOMMDATA DC    CL256' '\nBLANKS   DC    CL256' '\n*                        1         2         3         4         5\n*               123456789012345678901234567890123456789012345678901234\nTITLE    WTO   '                                             CAN NOT BEX\n                ALLOCATED AT THIS TIME TRY LATER',                     X\n               ROUTCDE=(1,2,11),MF=L\nDATASET  EQU   TITLE+4\nHALF4    DC    H'4'\nEOF      DC    CL80'/*EOF'\nDSNTABLE DS    0F\n         DC    C'00',CL44'SYST.JOB.CNTL'\n         DC    C'01',CL44'CIW.JCLLIB'\n         DC    C'02',CL44'GP5GTM.JOB.CNTL'\n         DC    C'03',CL44'GP5CLT.JOB.CNTL'\n         DC    C'04',CL44'IPO1.OPERLIB'\n         DC    C'05',CL44'SYS1.PUTPDS'\n         DC    C'06',CL44'NCP.GENLIB'\n         DC    C'07',CL44'NCP.JCLLIB'\n         DC    C'08',CL44' '\n         DC    C'09',CL44' '\n         DC    C'10',CL44' '\n         DC    X'FFFF'\nJCLALOC  DA    DDN=JOB00,                                              X\n               DSN=CIW.JCLLIB,                                         X\n               STATUS=SHR,                                             X\n               UNQSUF=JCL,                                             X\n               FREE=CLOSE\n         EJECT\n         PRINT NOGEN\nCOMMANDS DCB   DDNAME=COMMANDS,DSORG=PO,MACRF=R,EODAD=EXIT900\nDIR      DCB   DDNAME=COMMANDS,DSORG=PS,MACRF=RP,EODAD=DDD040,         X\n               LRECL=256,BLKSIZE=256,RECFM=FB\nJOBDCB   DCB   DDNAME=JOB00,DSORG=PO,MACRF=R,EODAD=EEE110\nINTRDR   DCB   DDNAME=INTRDR,DSORG=PS,MACRF=PM,                        X\n               LRECL=80,BLKSIZE=80,RECFM=F\n         EJECT\nCIBSECT  DSECT ,                  COMMAND INPUT BUFFER MAPPING\nCIBCIB   DS    F                  ADDRESS OF NEXT CIB IN CHAIN\nCIBVERB  DS    C                  CIB VERB CODE\nCIBSIZE  DS    C                  SIZE OF THE COMMAND INPUT BUFFER\nCIBRSVD1 DS    H                  RESERVED\nCIBRSVD2 DS    C                  RESERVED\nCIBTSOID DS    CL3                TSO TERMINAL ID\nCIBCONID DS    C                  CONSOLE ID OF STARTED TASK\nCIBRSVD3 DS    C                  RESERVED\nCIBDSIZE DS    H                  SIZE OF USER DATA WITHIN CIB\nCIBDATA  DS    C                  COMMAND DATA AS ENTERED BY OPERATOR\nDIRDSECT DSECT\nDIRNAME  DS    CL8\nDIRTTR   DS    CL3\nDIRC     DS    CL1\n         DCBD  DSORG=PO\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DA": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88!\\x0f\\x00\\x88!\\x0f\\x18\\x13\\x01t\\x01t\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf3\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-07-28T00:00:00", "modifydate": "1988-07-28T18:13:00", "lines": 372, "newlines": 372, "modlines": 0, "user": "FILE332"}, "text": "*          DATA SET SFALLOC    AT LEVEL 006 AS OF 05/17/78\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*               DDDDDDDDD                     AAAAAAAAAA              *\n*              DDDDDDDDDD                   AAAAAAAAAAAA              *\n*             DD       DD                  AA        AA               *\n*            DD        DD                 AA        AA                *\n*           DD        DD                 AA        AA                 *\n*          DD        DD                 AAAAAAAAAAAA                  *\n*         DD        DD                 AAAAAAAAAAAA                   *\n*        DD        DD                 AA        AA                    *\n*       DD        DD                 AA        AA                     *\n*      DD        DD                 AA        AA                      *\n*     DDDDDDDDDDD                  AA        AA                       *\n*    DDDDDDDDDD                   AA        AA                        *\n*                                                                     *\n* 1978                                                                *\n*        USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE        *\n*              PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'    *\n*              PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST    *\n*              CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.          *\n*              EX. -      PARMLIB   DA  DSN='SYS1.PARMLIB'            *\n*                                   ... ANY OTHER CODE                *\n*                                   LA  R1,PARMLIB                    *\n*                                   SVC 99                            *\n*                                   ... ANY OTHER CODE                *\n*        DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY    *\n*              PARMETERS THAT WILL BE GENERATED FOR DYNAMIC           *\n*              ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.  *\n*              THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO     *\n*              ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE     *\n*              PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF     *\n*              ALLOCATING IT.                                         *\n*                                                                     *\n*        LABELS - LABELS HAVE BEEN PROVIDED FOR OFTEN USED FIELDS.    *\n*              SOME OF THESE ARE :                                    *\n*                      1. DAER    WHICH  POINTS TO THE ERROR CODE     *\n*                                       FROM SVC 99                   *\n*                      2. DAIN    WHICH  POINTS TO THE INFORMATION    *\n*                                       CODE FROM SVC 99              *\n*              ALSO, EACH VALUE SUCH AS THE DSNAME TO ALLOCATE        *\n*              HAS A LABEL ASSOCIATED WITH IT FOR EASY REFERENCE.     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         MACRO\n&NAME    DA    &DSN=,              THE DATASET NAME                    X\n               &DDN=,              DDNAME TO ALLOCATE OR DEALLOCATE    X\n               &MEM=,              MEMBER NAME FOR PDS OR BIAS FOR GDG X\n               &STATUS=,           PRIMARY DISPOSITION                 X\n               &DISP=,             DISPOSITION IF NORMAL EOJ           X\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         X\n               &SPACE=,            PRIMARY SPACE REQUIREMENT           X\n               &TYPSP=,            TYPE OF SPACE TO ALLOCATE           X\n               &SECSP=,            SECONDARY SPACE REQUIREMENT         X\n               &VOLSER=,           VOLUME SERIAL #                     X\n               &UNIT=,             UNIT DESIGNATION                    X\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      X\n               &FREE=,             DEALLOCATE AT CLOSE                 X\n               &COPIES=,           COPIES OF YOUR SYSOUT               X\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             X\n               &EXPDT=,            EXPIDATION DATE                     X\n               &RETPD=,            RETENTION PERIOD                    X\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           X\n               &BLKSIZE=,          BLOCK SIZE                          X\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       X\n               &FORM=,             FORM NAME SPECIFICATION.            X\n               &LRECL=,            LOGICAL RECORD LENGTH               X\n               &DIRSP=,            # OF DIRECTORY BLOCKS OR INDEX SPACEX\n               &RLSE=,             TO REQUEST THE RELEASE OF UNUSED SP X\n               &UNQSUF=,           UNIQUE SUFFIX FOR LABEL NAMES LEN=4 X\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   X\n               &DEALLOC=\n         LCLA  &A,&K,&A2\n         LCLC  &X,&NM\n&X       SETC  '&UNQSUF'\n&NAME    DS    0F\n         DC    X'80'\n         DC    AL3(DARB&X)\nDARB&X   DS    0F\n         DC    AL1(20)\n         AIF   (T'&DEALLOC EQ 'O').ALLOC\n         DC    AL1(02)             THIS CONTROL BLOCK IS FOR DEALLOCATE\n         AGO   .PAST\n.ALLOC   DC    AL1(01)             THIS CONTROL IS FOR ALLOCATION\n.PAST    DC    AL2(0)\nDAER&X   DC    AL2(0)              ERROR CODE FROM DYNAMIC ALLOCATION\nDAIN&X   DC    AL2(0)              INFORMATION CODE FROM DYNALLOC\n         DC    A(TS&X)             POINTER TO CALL LIST FOR SVC 99\n         DC    XL8'0'              RESERVED\n&A       SETA  1\n         DS    0F                  FULLWORD ALIGNED\nTS&A&X   DC    X'0001'             KEY FOR DDNAME SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&DDN\n         DC    XL2'&K'             LENGTH OF DDNAME SPECIFIED\nDADN&X   DC    C'&DDN'             DDNAME PLUGGED IN HERE\n&A       SETA  &A+1\n         AIF   (T'&DSN EQ 'O').A\n         DS    0F\nTS&A&X   DC    X'0002'             KEY FOR DSNAME SPECIFICATION\n         DC    XL2'1'\n         DC    AL2(44)             LENGTH OF DSNAME MAX IS 44\nDADS&X   DC    CL44'&DSN'          DSNAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.A       AIF   (T'&MEM EQ 'O').B\n         DS    0F\nTS&A&X   DC    X'0003'             KEY FOR MEMBER OR GDG SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&MEM\n         DC    XL2'&K'             LENGTH OF SPECFIED MEMBER NAME\nDAMB&X   DC    C'&MEM'             THE MEMBER NAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.B       AIF   (T'&STATUS EQ 'O').C\n         DS    0F\nTS&A&X   DC    X'0004'             KEY FOR PRIMARY DISPOSITION OF DDN\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE CODE\n&A       SETA  &A+1\n         AIF   ('&STATUS' EQ 'OLD').B1       OLD = X'01'\n         AIF   ('&STATUS' EQ 'MOD').B2       MOD = X'02'\n         AIF   ('&STATUS' EQ 'NEW').B3       NEW = X'04'\n         AIF   ('&STATUS' EQ 'SHR').B4       SHR = X'08'\n         MNOTE 8,'&STATUS INVALID FOR STATUS'\n         AGO   .C\n.B1      DC    X'1'                CONSTANT FOR DISP=OLD\n         AGO   .C\n.B2      DC    X'2'                CONSTANT FOR DISP=MOD\n         AGO   .C\n.B3      DC    X'4'                CONSTANT FOR DISP=NEW\n         AGO   .C\n.B4      DC    X'8'                CONSTANT FOR DISP=SHR\n         AGO   .C\n.C       AIF   (T'&DISP EQ 'O').D\n         DS    0F\nTS&A&X   DC    X'0005'             KEY FOR NORMAL EOJ SPECIFICATION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS WILL ALWAYS BE A ONE BYTE KEY\n         AIF   ('&DISP' EQ 'UNCATLG').C1     UNCATLG = X'01'\n         AIF   ('&DISP' EQ 'CATLG').C2       CATLG   = X'02'\n         AIF   ('&DISP' EQ 'DELETE').C3      DELETE  = X'04'\n         AIF   ('&DISP' EQ 'KEEP').C4        KEEP    = X'08'\n         MNOTE 8,'&DISP INVALID FOR DISP'    ALL ELSE IS WRONG\n         AGO   .D\n.C1      DC    X'1'                CONSTANT FOR UNCATLG AT NORMAL EOJ\n         AGO   .D\n.C2      DC    X'2'                CONSTANT FOR CATLG  AT NORMAL EOJ\n         AGO   .D\n.C3      DC    X'4'                CONSTANT FOR DELETE AT NORMAL EOJ\n         AGO   .D\n.C4      DC    X'8'                CONSTANT FOR KEEP   AT NORMAL EOJ\n         AGO   .D\n.D       AIF   (T'&CDISP EQ 'O').E\n         DS    0F\nTS&A&X   DC    X'0006'             KEY FOR ABNORMAL EOJ DISPOSITION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE KEY\n         AIF   ('&CDISP' EQ 'UNCATLG').D1      UNCATLG = X'01'\n         AIF   ('&CDISP' EQ 'CATLG').D2        CATLG   = X'02'\n         AIF   ('&CDISP' EQ 'DELETE').D3       DELETE  = X'04'\n         AIF   ('&CDISP' EQ 'KEEP').D4         KEEP    = X'08'\n         MNOTE 8,'&CDISP INVALID FOR DISP'     ALL ELSE IS WRONG\n         AGO   .E\n.D1      DC    X'1'                CONSTANT FOR UNCATLG IF ABEND\n         AGO   .E\n.D2      DC    X'2'                CONSTANT FOR CATLG  IF ABEND\n         AGO   .E\n.D3      DC    X'4'                CONSTANT FOR DELETE IF ABEND\n         AGO   .E\n.D4      DC    X'08'               CONSTANT FOR KEEP   IF ABEND\n         AGO   .E\n.E       AIF   (T'&TYPSP EQ 'O').I\n         DS    0F\n         AIF   ('&TYPSP' EQ 'TRK').E1  IF TYPE OF SPACE SPECIFICATION\n         AIF   ('&TYPSP' EQ 'CYL').E2  IS NOT TRACKS OR CYLINDERS THEN\nTS&A&X   DC    X'0009'                 IT MUST BE IN BLOCKS\n         DC    XL1'1'\n         DC    XL1'3'\n         DC    AL3(&TYPSP)\n&A       SETA  &A+1\n         AGO   .F\n.E1      ANOP\nTS&A&X   DC    X'0007'             SPACE IS TO BE ALLOCATED IN TRKS\n         DC    XL2'0'\n&A       SETA  &A+1\n         AGO   .F\n.E2      ANOP\nTS&A&X   DC    X'0008'             SPACE IS TO BE ALLOCATED IN CYLS\n         DC    XL2'0'\n&A       SETA  &A+1\n.F       AIF   (T'&SPACE EQ 'O').FO\n         DS    0F\nTS&A&X   DC    X'000A'             KEY TO SPECIFY PRIMARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASP&X   DC    AL3(&SPACE)\n&A       SETA  &A+1\n         AGO   .G\n.FO      MNOTE 8,'PRIMARY SPACE OMITTED'   TYPSP REQUIRES AT LEAST\n         AGO   .I                  THE PRIMARY SPACE SPECIFICATION\n.G       AIF   (T'&SECSP EQ 'O').H\n         DS    0F\nTS&A&X   DC    X'000B'             KEY TO SPECIFY SECONDARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASS&X   DC    AL3(&SECSP)\n&A       SETA  &A+1\n.H       AIF   (T'&DIRSP EQ 'O').I\n         DS    0F\nTS&A&X   DC    X'000C'             KEY TO SPECIFY DIRECTORY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDADI&X   DC    AL3(&DIRSP)\n&A       SETA  &A+1\n.I       AIF   (T'&VOLSER EQ 'O').J\n         DS    0F\nTS&A&X   DC    X'0010'             KEY TO SPECIFY A PARTICULAR VOLSER\n         DC    XL2'1'\n&K       SETA  K'&VOLSER           PICK UP LENGTH OF NAME SPECIFIED\n         DC    XL2'&K'             AND USE THAT LENGTH\nDAVO&X   DC    C'&VOLSER'          AND NAME\n&A       SETA  &A+1\n.J       AIF   (T'&UNIT EQ 'O').K\n         DS    0F\nTS&A&X   DC    X'0015'             KEY FOR UNIT SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&UNIT             PICK UP LENGTH OF UNIT NAME GIVEN\n         DC    AL2(&K)             THEN USE THAT LENGTH\nDAUN&X   DC    C'&UNIT'            AND NAME\n&A       SETA  &A+1\n.K       AIF   (T'&SYSOUT EQ 'O').L\n         DS    0F\nTS&A&X   DC    X'0018'             KEY FOR SYSOUT CLASS SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&SYSOUT\n         DC    AL2(&K)\nDASY&X   DC    C'&SYSOUT'\n&A       SETA  &A+1\n.L       AIF   (T'&FORM EQ 'O').M\n         DS    0F\nTS&A&X   DC    X'001A'             KEY FOR FORMS ID SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&FORM             PICK UP LENGTH OF FORMS ID\n         DC    AL2(&K)             AND USE THAT LENGTH\nDAFM&X   DC    C'&FORM'            AND THAT FORM NUMBER\n&A       SETA  &A+1\n.M       AIF   (T'&FREE EQ 'O').N\n         AIF   ('&FREE' NE 'CLOSE').M2\n         DS    0F\nTS&A&X   DC    X'001C'             KEY TO SPECIFY FREE=CLOSE\nDACL&X   DC    XL2'0'              MUST BE CODED FREE=CLOSE\n&A       SETA  &A+1                ALL ELSE WILL GENERATE MNOTE\n         AGO   .N\n.M2      MNOTE 8,'&FREE INVALID FOR FREE'\n.N       AIF   (T'&COPIES EQ 'O').O\n         DS    0F\nTS&A&X   DC    X'001D'             KEY TO SPECIFY MULTIPLE COPIES\n         DC    XL2'1'              OF OUTPUT.\n         DC    XL2'1'\nDACO&X   DC    AL1(&COPIES)        NUMBER OF COPIES REQUESTED\n&A       SETA  &A+1\n.O       AIF   (T'&LABEL EQ 'O').P\n         DS    0F\nTS&A&X   DC    X'001E'             KEY TO SPECIFY TYPE LABEL\n         DC    XL2'1'\n         DC    XL2'1'              LENGTH OF THIS FIELD IS ALWAYS ONE\n&A       SETA  &A+1\n         AIF   ('&LABEL' EQ 'NL').O1     NL  = X'01'\n         AIF   ('&LABEL' EQ 'SL').O2     SL  = X'02'\n         AIF   ('&LABEL' EQ 'NSL').O3    NSL = X'04'\n         AIF   ('&LABEL' EQ 'SUL').O4    SUL = X'08'\n         AIF   ('&LABEL' EQ 'BLP').O5    BLP = X'10'\n         AIF   ('&LABEL' EQ 'LTM').O6    LTM = X'21'\n         AIF   ('&LABEL' EQ 'AL').O7     AL  = X'40'\n         AIF   ('&LABEL' EQ 'AUL').O8    AUL = X'48'\n         MNOTE 8,'&LABEL INVALID FOR LABEL'\n         AGO   .P\n.O1      DC    X'1'               LABEL = NL\n         AGO   .P\n.O2      DC    X'2'                LABEL = SL\n         AGO   .P\n.O3      DC    X'04'               LABEL = NSL\n         AGO   .P\n.O4      DC    X'08'               LABEL = SUL\n         AGO   .P\n.O5      DC    X'10'               LABEL = BLP\n         AGO   .P\n.O6      DC    X'21'               LABEL = LTM\n         AGO   .P\n.O7      DC    X'40'               LABEL = AL\n         AGO   .P\n.O8      DC    X'48'               LABEL = AUL\n         AGO   .P\n.P       AIF   (T'&EXPDT EQ 'O').Q\n         DS    0F\nTS&A&X   DC    X'0022'             KEY TO SPECIFY EXPIRATION DATE\n         DC    XL2'1'\n         DC    XL2'5'              FIELD IS FIVE NUMERICS\nDAEX&X   DC    CL5'&EXPDT'         AND IS PUT IN HERE\n&A       SETA  &A+1\n.Q       AIF   (T'&RETPD EQ 'O').R\n         DS    0F\nTS&A&X   DC    X'0023'             KEY TO SPECIFY A RETENTION PERIOD\n         DC    XL2'1'\n         DC    XL2'2'              MAXIMUM LENGTH IS TWO\nDARP&X   DC    AL2(&RETPD)         AND IS PLACED HERE.\n&A       SETA  &A+1\n.R       AIF   (T'&DUMMY EQ 'O').S\n         DS    0F\nTS&A&X   DC    X'0024'             KEY TO ALLOCATE A DUMMY DATA SET\n         DC    XL2'0'\n         DC    XL2'0'\n         DC    X'0'\n&A       SETA  &A+1\n.S       AIF   (T'&BLKSIZE EQ 'O').T\n         DS    0F\nTS&A&X   DC    X'0030'             KEY TO SPECIFY THE BLOCKSIZE\n         DC    XL2'1'\n         DC    XL2'2'\nDABS&X   DC    AL2(&BLKSIZE)\n&A       SETA  &A+1\n.T       AIF   (T'&FUNC EQ 'O').U\n         DS    0F\n         AIF   ('&FUNC' EQ 'I').T2\n         MNOTE 8,'&FUNC INVALID FOR FUNC'\n         AGO   .U\n.T2      ANOP\nTS&A&X   DC    X'005A'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    X'80'\n&A       SETA  &A+1\n.U       AIF   (T'&LRECL EQ 'O').V\n         DS    0F\nTS&A&X   DC    X'0042'             KEY TO SPECIFY THE LRECL\n         DC    XL2'1'\n         DC    XL2'2'\n         DC    AL2(&LRECL)\n&A       SETA  &A+1\n.V       AIF   (T'&RLSE EQ 'O').W\n         DS    0F\nTS&A&X   DC    X'000D'             KEY  TO SPECIFY RELEASE SPACE\n         DC    XL2'0'\n&A       SETA  &A+1\n.W       AIF   (T'&DCB EQ 'O').X\n         DS    0F\nTS&A&X   DC    X'002C' KEY TO SPECIFY DCB REFERENCE NAME\n         DC    XL2'1'\n&K       SETA  K'&DCB\n         DC    XL2'&K'             LENGTH OF DSN SPECIFIED\nDCB&X    DC    C'&DCB'             DSNAME TO COPY DCB FROM\n&A       SETA  &A+1\n.X       ANOP\n.*\n.*\n.*\n.*\n         DS    0F\n&A2      SETA  1\n&A       SETA  &A-1\n&NM      SETC  'TS&X'\n.CM1     AIF   (&A2 EQ &A).CM2\n&NM      DC    A(TS&A2&X)\n&NM      SETC  ' '\n&A2      SETA  &A2+1\n         AGO   .CM1\n.CM2     DC    X'80'\n         DC    AL3(TS&A2&X)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OTTO$": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x03\\x1f\\x01\\x01\\x03\\x1f\\x19\\x14\\x00\\n\\x00\\n\\x00\\x00`@@@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-31T00:00:00", "modifydate": "2001-01-31T19:14:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "-"}, "text": " The member called OTTO# contains an implementation of AUTO that is\n actually used somewhere.  Multiple systems each run a copy of OTTO.\n\n These files have been included to:\n\n 1 - Help you set up a proc over multiple systems.\n\n 2 - Show you how to take advantage of dynamic allocation of libraries.\n\n Best of luck.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OTTO#": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x03\\x1f\\x01\\x01\\x03\\x1f\\x19\\x14\\x07\\xc0\\x07\\xc0\\x00\\x00`@@@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-31T00:00:00", "modifydate": "2001-01-31T19:14:00", "lines": 1984, "newlines": 1984, "modlines": 0, "user": "-"}, "text": "./ ADD NAME=OTTO     0100-87275-99328-1055-01634-01634-00000-ADDITON\n*----------------------------------------------------------------------\n*\n*        OTTO\n*\n*           TEC/10-22-86/CBTMODS.FILE332.PDS\n*\n*           ALL MACROS HAVE BEEN COPIED INSTREAM.\n*           I'VE ALTERED THE $PROLOG MACRO TO HAVE HARD CODED\n*           REGISTER EQUATES\n*\n*           TEC/10-23-86/MODIFIED THE DYNAMIC ALLOC TABLE\n*           JRG/11-05-86/MODIFIED THE DYNAMIC ALLOC TABLE\n*           JRG/11-20-86/MODIFIED OTTO TO MAKE DEFAULT FOR\n*           JRG/06-09-87/MODIFIED OTTO FOR SITE OPERATION\n*           JRG/06-23-87/MODIFIED OTTO FOR JOB00 CONCATENATION\n*           JRG/11-16-88/MODIFIED OTTO TO FIX BUG AT MIDNIGHT\n*\n*----------------------------------------------------------------------\n*\n*        THIS ROUTINE PROVIDES FOR JOB SUBMISSION AND AUTOMATIC\n*        COMMANDS IN AN MVS/JES2 ENVIRONMENT.  IT'S FUNCTIONS\n*        ARE THREE-FOLD AND ARE EXPLAINED BELOW.\n*\n*\n*        1=RDR  ALLOW AN EASY WAY OF PRESENTING JOBS TO JES2 VIA AN\n*               OPERATOR MODIFY COMMAND.\n*\n*        2=CMD  ALLOW AN EASY WAY OF PRESENTING MULTIPLE COMMANDS TO\n*               MVS/JES2 VIA AN OPERATOR MODIFY COMMAND.\n*\n*        3=AUTO ALLOW FOR TIME-OF-DAY/DAY-OF-WEEK AUTOMATIC COMMANDS\n*\n*\n*        THE USER MUST PROVIDE A STARTED TASK PROCEDURE IN SYS1.PROCLIB\n*        WHICH IS STARTED AT IPL TIME.  ONCE ACTIVE, IT WILL PROCESS\n*        USER DEFINED COMMANDS BY DAY OF WEEK (USER DEFINED).\n*        ALSO, IT WILL SUPPORT OPERATOR MODIFY COMMANDS (DEMAND)\n*        EITHER SUBMIT JOBS (MEMBERS) TO THE INTERNAL READER OR\n*        EXECUTE COMMANDS (MEMBER LISTS).\n*\n*        FOR THE JOB SUBMISSION FEATURE, ONE OR MORE PARTITIONED\n*        DATASET(S) ARE USED.  FOR THE COMMAND/AUTO-COMMAND\n*        FUNCTIONS, ANOTHER PARTITIONED DATASET IS USED.  EACH\n*        ARE DESCRIBED BELOW (BY DDNAME).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*\n*\n*        DDNAME     USE AND FUNCTION\n*        --------   -------------------------------------------------\n*\n*\n*        INTRDR     REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE JES2 INTERNAL\n*                   READER.\n*\n*        JOB00      REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE NAME OF A\n*                   PARTITIONED DATASET WHICH CONTAINS MEMBERS\n*                   TO BE SUBMITTED TO JES2.\n*\n*        JOB??      OPTIONAL WHEN THE JOB-SUBMISSION FUNCTION IS USED.\n*                   ANY NUMBER OF ADDITIONAL 'JOB??' DDCARDS MAY BE\n*                   USED TO ALLOW FOR SPECIALIZED FUNCTION (WITH\n*                   DUPLICATE MEMBER NAMES).  THIS OPTION IS SIMILAR\n*                   TO THE MULTIPLE 'PROC??' DDCARDS WITHIN THE JES2\n*                   STARTUP PROC.  USE OF THESE OPTIONAL LIBRARIES\n*                   IS CONTROLED BY THE OPERATOR (VIA THE 'D=??'\n*                   KEYWORD, AS DETAILED BELOW).\n*\n*        COMMANDS   THIS DD STATEMENT IS REQUIRED FOR EITHER THE\n*                   OPERATOR COMMAND-LIST OR THE AUTO-COMMAND\n*                   FUNCTION.  IT SHOULD CONTAIN MEMBERS (LISTS\n*                   OF COMMANDS) IN THE FORMAT DESCRIBED UNDER THE\n*                   HEADING 'COMMAND RECORD SYNTAX' BELOW.\n*\n*\n*        THE FOLLOWING IS AN EXAMPLE OF THE TYPE OF PROC TO\n*        BE ADDED TO YOUR SYS1.PROCLIB.  NOTE THAT THE 'JOB00'\n*        DDNAME IS REQUIRED TO USE THE JOB SUBMISSION FUNCTION\n*        WHILE 'JOB01' AND 'JOB02' ARE OPTIONAL (USED IN THIS\n*        CASE AS REMOTE JOB CONTROL LIBRARIES).\n*\n*        //OTTO     EXEC PGM=OTTO,TIME=1440,DPRTY=(7,9)\n*        //STEPLIB  DD DISP=SHR,DSN=USER.LIBRARY    <---- AUTHORIZED\n*        //INTRDR   DD SYSOUT=(A,INTRDR)\n*        //COMMANDS DD DISP=SHR,DSN=SYS1.COMMANDS\n*        //JOB00    DD DISP=SHR,DSN=RMT0.JCL.LIB\n*        //JOB01    DD DISP=SHR,DSN=RMT1.JCL.LIB\n*        //JOB02    DD DISP=SHR,DSN=RMT2.JCL.LIB\n*\n*        USE OF THE OPTIONAL 'JOB??' DDNAMES IS SPECIFIED BY THE\n*        OPERATOR USING THE 'D=' OPERAND (DETAILED BELOW).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF NORMAL OPERATOR COMMANDS\n*        JOB SUBMISSION USE:\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        START     S OTTO.O     NORMAL OPERATOR START-UP.  THE FIRST\n*                               AUTOMATIC COMMAND TO BE PROCESSED\n*                               WILL BE THE MEMBER WITH A NAME THAT\n*                               SPECIFIED A TIME GREATER THAN CURRENT.\n*                               HOWEVER, DEMAND COMMAND EXECUTION\n*                               AS WELL AS JOB SUBMISSION IS AVAILABLE\n*                               IMMEDIATELY.\n*\n*        IPL       S OTTO.O,PARM=IPLMEM\n*                               SAME AS ABOVE, EXCEPT THAT THE COMMAND\n*                               MEMBER NAMED IN THE PARM FIELD WILL BE\n*                               EXECUTED BEFORE ANY OTHER REQUESTS\n*                               (AUTOMATIC OR OPERATOR REQUESTED\n*                               COMMAND).  THIS PROVIDES AN ALTERNATIVE\n*                               TO THE 'SYS1.PARMLIB(COMMND??)' OPTION\n*                               PROVIDED BY MVS.  IT ALSO PROVIDES FOR\n*                               ANY TYPE OF COMMAND (JES2 COMMANDS AS\n*                               WELL AS MVS COMMANDS).\n*\n*        SUBMIT    F O,MEMBER1  SUBMIT 'MEMBER1' TO THE JES2 INTERNAL\n*                               READER.  SINCE THE 'D=??' OPTION WAS\n*                               NOT USED, THE MEMBER WILL BE READ FROM\n*                               THE 'JOB00' DD (WHICH WILL REMAIN OPEN\n*                               OPEN UNTIL SOMETHING OTHER UNTIL 'D=??'\n*                               IS SPECIFIED AND IS NOT THE SAME AS THE\n*                               ONE USED PREVIOUSLY).\n*\n*        SUBMIT    F O,MEMBER1,MEMBER2,....,MEMBERN\n*                               SUBMIT MULTIPLE MEMBERS TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=??' WAS NOT\n*                               SPECIFIED, THE 'JOB00' IS AGAIN USED.\n*\n*        SUBMIT    F O,MEMBER1,D=01\n*                               SUBMIT A MEMBER (JOB) TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=01' WAS\n*                               SPECIFIED, THE 'JOB00' FILE IS CLOSED\n*                               AND THE 'JOB01' FILE IS OPENED TO\n*                               READ THE MEMBER.  THIS FILE WILL\n*                               REMAIN OPEN UNTIL THE 'D=??' IS\n*                               CHANGED (FROM 'D=01') OR IS NOT\n*                               SPECIFIED ('D=00' IS THE DEFAULT).\n*\n*        SUBMIT    F O,MEMBER1,MEMBER02,.....,MEMBERN,D=01\n*                               SAME AS THE ABOVE, HOWEVER, MULTIPLE\n*                               MEMBERS WILL BE READ FROM THE 'JOB01'\n*                               FILE AND SUBMITTED.  NOTE THAT THE\n*                               'D=??' KEYWORD MUST BE SPECIFIED AS\n*                               THE LAST OPTION.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF OPERATOR COMMANDS TO SCHEDULE\n*        COMMAND LISTS.\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        COMMAND   F O,-MEMBER1 CAUSE A LIST OF COMMANDS TO BE EXECUTED\n*                               BY MVS (OR JES2).  NOTE THAT THE DASH\n*                               (HYPHEN) AS A PREFIX TO THE MEMBER\n*                               NAME IDENTIFIES THE REQUEST AS A\n*                               COMMAND REQUEST (DEMAND).  THE NAMED\n*                               MEMBER WILL BE READ FROM THE FILE\n*                               IDENTIFIED BY THE DD 'COMMANDS'.  EACH\n*                               COMMAND READ WILL BE EXECUTED IF RE-\n*                               QUESTED FOR THE CURRENT DAY (THE SYNTAX\n*                               SYNTAX OF THE 'COMMANDS' RECORDS ARE\n*                               DEFINED BELOW UNDER 'COMMAND RECORD\n*                               SYNTAX').\n*\n*        COMMAND   F O,-MEMBER1,MEMBER2,.....,MEMBERN\n*                               CAUSE A LIST OF MEMBERS TO BE PROCESSED\n*                               BY MVS (OR JES2).  EACH MEMBER MAY\n*                               CONTAIN MULTIPLE COMMANDS. AGAIN NOTE\n*                               THAT THE DASH IDENTIFIES THE REQUEST\n*                               AS A DEMAND COMMAND REQUEST.\n*\n*        SHUTDOWN  P O          TO TERMINATE THIS ROUTINE, SIMPLY\n*                               ENTER AN OPERATOR STOP COMMAND.\n*\n*        SHUTDOWN  F O,-SHUTDOWN\n*                               TO ALLOW A LIST OF 'SHUTDOWN' COMMANDS\n*                               TO BE EXECUTED PRIOR TO STOPPING THIS\n*                               ROUTINE (SUCH AS $PI, I SMF, P RMF ETC)\n*                               THE 'P A' COMMAND MAY BE ADDED TO THE\n*                               END OF THE SHUTDOWN MEMBER.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE AUTOMATIC COMMAND FUNCTION IS NOT CONTROLLED BY THE\n*        OPERATOR.  INSTEAD, IT OPERATES ON A 1440 MINUTE CYCLE\n*        (60 MINUTES/HOUR AND 24 HOURS/DAY) WITHIN DAY-OF-WEEK\n*        AND MONTH-OF-YEAR CYCLES.  THIS MEANS THAT COMMANDS MAY\n*        BE SCHEDULED AT A SPECIFIED TIME OF DAY ON ANY (OR ALL)\n*        DAY(S) OF THE WEEK OR ANY DAY OF THE MONTH.\n*\n*        COMMANDS TO BE EXECUTED ARE CONATAINED IN MEMBERS THAT\n*        RESIDE IN THE 'COMMANDS' LIBRARY.  EACH MEMBER TO BE\n*        AUTOMATICALLY PROCESSED IS NAMED AS FOLLOWS.\n*\n*            @0100   THIS LIST OF COMMANDS IS TO BE PROCESSED AT\n*                    1:00 IN THE MORNING.\n*            @1423   THIS MEMBER WILL BE PROCESSED AT 2:23 PM.\n*\n*            @0000   THIS MEMBER WILL BE PROCESSED AT MIDNIGHT.\n*\n*        NOTE THAT THE MEMBER NAMES TO BE PROCESSED AUTOMATICALLY\n*        MUST BE PREFIXED WITH THE 'AT SIGN' (@), HOWEVER, THESE\n*        MEMBERS ARE NOT RESTRICTED FROM 'DEMAND' USE.\n*\n*\n*        COMMAND RECORD SYNTAX\n*\n*        EACH MEMBER CONTAINED IN THE 'COMMANDS' LIBRARY MUST FOLLOW\n*        THE SYNTAX DEFINED BELOW.  THIS IS TRUE FOR BOTH DEMAND\n*        COMMAND LISTS AS WELL AS AUTOMATIC COMMAND LISTS.\n*\n*        AN ASTERISK (*) IN COLUMN 1 DENOTES A COMMENT RECORD AND IS\n*        IGNORED BY THE PROCESSOR.  COMMANDS (RECORDS) ARE PROCESSED\n*        ONLY ON SPECIFIED DAYS OF THE WEEK AS INDICATED IN THE DAYS\n*        FIELD.  DAYS OF THE WEEK MUST BE IN THE ORDER SHOWN.\n*\n*        A NON-BLANK IN THE 'DAY-OF-THE-WEEK' FIELD REQUESTS PROCESSING\n*        ON THAT DAY.\n*\n*        FORMAT:\n*\n*        1    ===>BLANK            (AN ASTERISK SIGNIFIES A COMMENT)\n*        2-6  ===>MM/DD            (MONTH/DAY SPEC - SLASH REQ'D!)\n*        15   ===>(BLANK)\n*        8-14 ===>MTWTFSS          (DAY-OF-WEEK SPECIFICATION)\n*        15   ===>(BLANK)\n*        16   ===>COMMAND DATA     (THROUGH COLUMN 71)\n*        72   ===>CONTINUATION     (ONLY ONE CONTINUATION ALLOWED)\n*\n*        AN ASTERISK IN EITHER THE MM FIELD OR THE DD FIELD ALLOWS\n*        EXECUTION FOR ALL MONTHS OR ALL DAYS.  ASTERISKS IN BOTH\n*        FIELDS EFFECTIVELY NULLIFIES DAY-WITHIN-MONTH CRITERIA\n*        (IF '**/**' IS SPECIFIED, THE COMMAND IS SUBJECT ONLY TO\n*        DAY OF WEEK CRITERIA WHICH IS THE SAME AS ALL BLANKS IN\n*        THE MM/DD FIELD).  IF THE MM/DD FIELD IS NON-BLANK,\n*        THE REQUEST WILL BE PROCESSED ON THE MONTH/DAY SPECIFIED\n*        BUT IS ALSO SUBJECT TO DAY OF WEEK SPECIFICATIONS.\n*        IF A REQUEST IS TO BE PROCESSED ON THE SAME DAY OF EVERY\n*        MONTH, SPECIFY THE MONTH AS ASTERISKS ('**/05').  IF A\n*        REQUEST IS TO BE PROCESSED EVERY DAY OF A GIVEN MONTH,\n*        SPECIFY THE DAY AS ASTERISKS ('09/**').\n*\n*        CONTINUATION IS SUPPORTED ONLY IF THE SUBSEQUENT RECORD\n*        HAS 'ALL' BLANKS IN COLUMNS 1 THROUGH 15 AND CONTINUED\n*        DATA BEGINS IN COLUMN 16.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF AUTOMATIC COMMANDS:\n*\n*   COLUMNS:  1      8       16                                   71\n*             ..     .       .                                    .\n*   COL-1---->*MM/DD MTWTFSS COMMAND------------------------------>72\n*\n* MEMBER=@0300\n*   COL-1---->       XXXXXX  F O,BACKUP1,BACKUP2,BACKUP3\n*   COL-1---->             X F O,BACKUPWK\n*   COL-1----> **/01 ******* F O,MONTH01\n*   COL-1----> **/01      S  F O,FIRSTSAT  SCHEDULE JOB ONLY ON THE\n*   COL-1----> **/02      S  F O,FIRSTSAT  1ST SATURDAY OF THE MONTH\n*   COL-1----> **/03      S  F O,FIRSTSAT            \"\n*   COL-1----> **/04      S  F O,FIRSTSAT            \"\n*   COL-1----> **/05      S  F O,FIRSTSAT            \"\n*   COL-1----> **/06      S  F O,FIRSTSAT            \"\n*   COL-1----> **/07      S  F O,FIRSTSAT            \"\n* MEMBER=@0755\n*   COL-1---->       MTWTF   START TCAM\n* MEMBER=@0800\n*   COL-1---->       MTWTF   F TCAM,TS=START\n*   COL-1---->       MTWTF   $HQ,P\n*   COL-1---->       MTWTF   $AQ,T\n* MEMBER=@0900\n*   COL-1---->       -       SEND 'TODAY IS BLUE MONDAY...KEEP SMILING*\n*   COL-1---->               '\n*   COL-1---->        -      SEND 'TODAY IS TUESDAY...FOUR MORE TO GO'\n*   COL-1---->         -     SEND 'TODAY IS WEDNESDAY...YOUR HALF WAY'\n*   COL-1---->          -    SEND 'TODAY IS THURSDAY...HANG IN THERE'\n*   COL-1---->           -   SEND 'THANK GOD IT''S FRIDAY'\n*   COL-1---->            -  SEND 'IT''S SATURDAY... DIDN''T YOU FINIS*\n*   COL-1---->               H?'\n*   COL-1---->             - SEND 'WOW... EVEN SUNDAY YOU WORK!!!!!!'\n* MEMBER=@1645\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN AT FIVE SHARP'\n* MEMBER=@1655\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN IN FIVE MINUTE*\n*   COL-1---->               S'\n* MEMBER=@1659\n*   COL-1---->       MTWTF   SE '**** TSO IS GOING DOWN IN ONE MINUTE X\n*   COL-1---->               ****'\n*   COL-1---->       MTWTF   SE '****   YOU WILL RECEIVE NO WARNING   X\n*   COL-1---->               ****'\n* MEMBER=@1700\n*   COL-1---->       MTWTF   F TCAM,TS=STOP\n*   COL-1---->       MTWTF   $HQ,T\n*   COL-1---->       MTWTF   $AQ,P\n*   COL-1----> 05/17 ******* F O,TESTJOB  SCHEDULE ONLY ON MAY 17\n*   COL-1----> 05/16 *****   F O,TESTWKDY SCHEDULE ONLY ON MAY 16 WD\n*   COL-1----> 05/16      ** F O,TESTWKND SCHEDULE ONLY ON MAY 16 WE\n* MEMBER=@1702\n*   COL-1---->       MTWTF   Z TP\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF OPERATOR 'DEMAND' COMMANDS:\n*\n*   COL-1---->*      MTWTFSS COMMAND--------------------------->72\n*\n* MEMBER=IPL                            (  S OTTO.O,PARM=IPL  )\n*   COL-1---->       XXXXXXX S RMF.RMF\n*   COL-1---->       XXXXXXX S OPSWTR.OPSWTR\n*   COL-1---->       XXXXXXX F O,-VARYCONS,VARYALL,SETJES\n* MEMBER=SETJES                         (  F O,-SETJES )\n*   COL-1---->       XXXXXXX $TPRT1,Q=A\n*   COL-1---->       XXXXXXX $TI9,Z\n*   COL-1---->       XXXXXXX $SI9\n*   COL-1---->       XXXXXXX $SPRT1\n* MEMBER=SHUTDOWN                       (  F O,-SHUTDOWN  )\n*   COL-1---->       XXXXXXX $P\n*   COL-1---->       XXXXXXX $IPRT1\n*   COL-1---->       XXXXXXX $PLNE1\n*   COL-1---->       XXXXXXX $ELNE1\n*   COL-1---->       XXXXXXX P OPSWTR\n*   COL-1---->       XXXXXXX P RMF\n*   COL-1---->       XXXXXXX P A\n* MEMBER=UNLOAD                         (  F O,-UNLOAD  )\n*   COL-1---->       XXXXXXX U 180\n*   COL-1---->       XXXXXXX U 181\n*   COL-1---->       XXXXXXX U 182\n* MEMBER=VARYALL                        (  F O,-VARYALL  )\n*   COL-1---->       XXXXXXX V 180-188,ONLINE\n*   COL-1---->       XXXXXXX V 150-158,OFFLINE\n*   COL-1---->       XXXXXXX V 160-16F,ONLINE\n* MEMBER=VARYCONS                       (  F O,-VARYCONS  )\n*   COL-1---->       XXXXXXX V 120,CONSOLE,ROUT=(1,2,8,9,10,12,13,14,1*\n*   COL-1---->               5)\n*   COL-1---->       XXXXXXX V 121,CONSOLE,ROUT=(3,4,5,6)\n*   COL-1---->       XXXXXXX V 122,CONSOLE,ROUT=(7)\n*   COL-1---->       XXXXXXX V O-123,CONSOLE,ROUT=ALL\n* MEMBER=VARYOFF                        (  F O,-VARYOFF  )\n*   COL-1----> 09/**      XX V 150-158,OFFLINE  ONLY FOR SEPT WKEND\n*   COL-1---->       XXXXXXX V 160-168,OFFLINE\n*   COL-1---->       XXXXXXX V 170-178,OFFLINE\n*\n*  NOTE THAT THE COMMAND-LIST MEMBER MAY INCLUDE COMMANDS FOR THIS\n*  ROUTINE AS WELL.  THIS MAY OR MAY NOT BE DESIRABLE SINCE IF NOT\n*  CAUTIOUS, A LOOP COULD RESULT.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THIS ROUTINE IS 'NOT' RE-ENTRANT AND MUST BE LINKED AS\n*        'AUTHORIZED'.\n*\n*        BOB BECKER MAY ,1979  ALLEN-BRADLEY COMPANY .. MILWAUKEE\n*\n*        REGISTER USAGE\n*\n*        R0   - WORK\n*        R1   - WORK\n*        R2   - WORK\n*        R3   - WORK\n*        R4   - WORK\n*        R5   - WORK\n*        R6   - WORK\n*        R7   - WORK\n*        R8   - UNUSED\n*        R9   - QEDIT ORIGIN BASE\n*        R10  - DCBS\n*        R11  - BASE # 1\n*        R12  - BASE # 2\n*        R13  - SAVE AREA\n*        R14  - BAL\n*        R15  - WORK\n*\n*----------------------------------------------------------------------\n         EJECT\n*----------------------------------------------------------------------\n*\n*        MACROS\n*\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n*        $REGS       TEC/10-22-86 ++ HARDCODED\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*                     TEC/10-22-86 ++ HARDCODED\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n         EJECT\n         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n         EJECT\n         MACRO\n&LABEL   $STCK  &NOGEN\n         LCLC   &L\n.**********************************************************************\n.****                                                             *****\n.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****\n.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****\n.****                                                             *****\n.****    IF INVOKED WITHOUT THE OPTIONAL 'NOGEN' KEYWORD, THE     *****\n.****    CONSTANTS NAMED BELOW WILL BE GENERATED.  IF THE         *****\n.****    'NOGEN' KEYWORD IS USED, THE USER MUST PROVIDE THIS      *****\n.****    ROUTINE WITH ADDRESSABILITY TO THEM AS PRE-DEFINED       *****\n.****    CONSTANTS.                                               *****\n.****                                                             *****\n.****    DAY    DS   X      A BINARY NUMBER (HEX) RELATIVE TO     *****\n.****                       THE DAY OF THE WEEK AS FOLLOWS        *****\n.****                       0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,     *****\n.****                       3=THURSDAY, 4=FRIDAY,                 *****\n.****                       5=SATURDAY, 6=SUNDAY                  *****\n.****                                                             *****\n.****    DATE   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE DATE IN MM/DD/YY FORMAT           *****\n.****                                                             *****\n.****    TIME   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE TIME IN HH:MM:SS FORMAT           *****\n.****                                                             *****\n.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****\n.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****\n.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****\n.****                                                             *****\n.**********************************************************************\n&L       SETC  '&SYSNDX'\n&LABEL   STCK  8(13)              STORE THE TIME-OF-DAY CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n         L     15,16              GET CVT ADDRESS\n         A     0,304(15)          ADD LOCAL TIME DEVIATION\n         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS\n         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES AFT EPOCH)\n         LR    15,0               COPY REMAINDER OF MICS TO GET SECS\n         SR    14,14              CLEAR FOR DIVIDE\n         D     14,=F'951424'      DIVIDE TO GET REMAINING SECONDS (R5)\n         LR    14,15              COPY TO WORK REG\nS&L.B    SL    14,=F'60'          DECREMENT BY 60 SECONDS\n         BM    S&L.S              LESS THAN SIXTY, CONTINUE\n         SL    15,=F'60'          MORE THAN SIXTY, ADJUST FOR LEAP\n         AL    1,=F'1'            BUMP MINUTES\n         B     S&L.B              CHECK AGAIN\nS&L.S    CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT\n         UNPK  24(4,13),14(2,13)  UNPACK SECONDS FOR PRINT\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+6(2),26(13)   MOVE THE SECONDS\n         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT\n         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES\n         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+3(2),26(13)   MOVE THE MINUTES\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS\n         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME(2),26(13)     MOVE THE HOURS\n         MVI   TIME+2,C':'        ADD COLIN\n         MVI   TIME+5,C':'        ADD COLIN\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK\n         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER\n         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY\n         STC   0,DAY              SET RELATIVE DAY OF WEEK\n         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS\n         L     1,16               GET CVT ADDRESS\n         MVC   24(4,13),57(1)     MOVE CVT DATE TO WORK AREA\n         ZAP   8(8,13),=P'0'      ZERO WORK AREA\n         MVO   14(2,13),24(1,13)  MOVE YEAR PORTION\n         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA\n         LA    15,S&L.T           LOAD ADDR OF TABLE\n         CVB   1,8(13)            CONVERT TO BIN\n         SLL   1,30               SHIFT ALL BUT LAST TWO\n         LTR   1,1                TEST RESIDUAL\n         BNZ   *+8                NOT 0, BRANCH\n         LA    15,S&L.TL          LEAP YEAR\n         LR    14,15              SAVE TABLE IN USE\n         ZAP   8(8,13),25(2,13)   MOVE DAY PORTION\n         CVB   0,8(13)            CONVERT TO BIN\n         SR    1,1                CLEAR REG\n         IC    1,0(15)            LOAD CHAR FROM TABLE\n         LA    15,1(15)           INDEX TABLE POINTER\n         SR    0,1                SUBTRACT FROM WORK VALUE\n         BP    *-10               STILL POSITIVE, DO AGAIN\n         AR    0,1                ELSE, ADD IT BACK\n         CVD   0,8(13)            CONVERT TO DEC\n         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT\n         SR    15,14              FIND VALUE OF CURRENT INDEX\n         CVD   15,8(13)           CONVERT TO DEC\n         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT\n         OI    DATE+1,C'0'        INSURE NUMERICS\n         OI    DATE+4,C'0'        INSURE NUMERICS\n         OI    DATE+7,C'0'        INSURE NUMERICS\n         MVI   DATE+2,C'/'        ADD SLASH\n         MVI   DATE+5,C'/'        ADD SLASH\n         B     S&L.E              BRANCH AROUND CONSTANTS\nS&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nS&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\n         AIF    (T'&NOGEN NE 'O').NOGEN   NOGEN SPECIFIED, SKIP\nDAY      DC    XL1'00'            RELATIVE DAY OF THE WEEK\nDATE     DC    C'  /  /  '        CURRENT DATE\nTIME     DC    C'  :  :  '        CURRENT TIME\n.NOGEN   ANOP\nS&L.E    DS    0H\n         MEND\n         EJECT\n*          DATA SET SFALLOC    AT LEVEL 006 AS OF 05/17/78\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*               DDDDDDDDD                     AAAAAAAAAA              *\n*              DDDDDDDDDD                   AAAAAAAAAAAA              *\n*             DD       DD                  AA        AA               *\n*            DD        DD                 AA        AA                *\n*           DD        DD                 AA        AA                 *\n*          DD        DD                 AAAAAAAAAAAA                  *\n*         DD        DD                 AAAAAAAAAAAA                   *\n*        DD        DD                 AA        AA                    *\n*       DD        DD                 AA        AA                     *\n*      DD        DD                 AA        AA                      *\n*     DDDDDDDDDDD                  AA        AA                       *\n*    DDDDDDDDDD                   AA        AA                        *\n*                                                                     *\n* 1978                                                                *\n*        USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE        *\n*              PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'    *\n*              PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST    *\n*              CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.          *\n*              EX. -      PARMLIB   DA  DSN='SYS1.PARMLIB'            *\n*                                   ... ANY OTHER CODE                *\n*                                   LA  R1,PARMLIB                    *\n*                                   SVC 99                            *\n*                                   ... ANY OTHER CODE                *\n*        DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY    *\n*              PARMETERS THAT WILL BE GENERATED FOR DYNAMIC           *\n*              ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.  *\n*              THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO     *\n*              ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE     *\n*              PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF     *\n*              ALLOCATING IT.                                         *\n*                                                                     *\n*        LABELS - LABELS HAVE BEEN PROVIDED FOR OFTEN USED FIELDS.    *\n*              SOME OF THESE ARE :                                    *\n*                      1. DAER    WHICH  POINTS TO THE ERROR CODE     *\n*                                       FROM SVC 99                   *\n*                      2. DAIN    WHICH  POINTS TO THE INFORMATION    *\n*                                       CODE FROM SVC 99              *\n*              ALSO, EACH VALUE SUCH AS THE DSNAME TO ALLOCATE        *\n*              HAS A LABEL ASSOCIATED WITH IT FOR EASY REFERENCE.     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         MACRO\n&NAME    DA    &DSN=,              THE DATASET NAME                    X\n               &DDN=,              DDNAME TO ALLOCATE OR DEALLOCATE    X\n               &MEM=,              MEMBER NAME FOR PDS OR BIAS FOR GDG X\n               &STATUS=,           PRIMARY DISPOSITION                 X\n               &DISP=,             DISPOSITION IF NORMAL EOJ           X\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         X\n               &SPACE=,            PRIMARY SPACE REQUIREMENT           X\n               &TYPSP=,            TYPE OF SPACE TO ALLOCATE           X\n               &SECSP=,            SECONDARY SPACE REQUIREMENT         X\n               &VOLSER=,           VOLUME SERIAL #                     X\n               &UNIT=,             UNIT DESIGNATION                    X\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      X\n               &FREE=,             DEALLOCATE AT CLOSE                 X\n               &COPIES=,           COPIES OF YOUR SYSOUT               X\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             X\n               &EXPDT=,            EXPIDATION DATE                     X\n               &RETPD=,            RETENTION PERIOD                    X\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           X\n               &BLKSIZE=,          BLOCK SIZE                          X\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       X\n               &FORM=,             FORM NAME SPECIFICATION.            X\n               &LRECL=,            LOGICAL RECORD LENGTH               X\n               &DIRSP=,            # OF DIRECTORY BLOCKS OR INDEX SPACEX\n               &RLSE=,             TO REQUEST THE RELEASE OF UNUSED SP X\n               &UNQSUF=,           UNIQUE SUFFIX FOR LABEL NAMES LEN=4 X\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   X\n               &DEALLOC=\n         LCLA  &A,&K,&A2\n         LCLC  &X,&NM\n&X       SETC  '&UNQSUF'\n&NAME    DS    0F\n         DC    X'80'\n         DC    AL3(DARB&X)\nDARB&X   DS    0F\n         DC    AL1(20)\n         AIF   (T'&DEALLOC EQ 'O').ALLOC\n         DC    AL1(02)             THIS CONTROL BLOCK IS FOR DEALLOCATE\n         AGO   .PAST\n.ALLOC   DC    AL1(01)             THIS CONTROL IS FOR ALLOCATION\n.PAST    DC    AL2(0)\nDAER&X   DC    AL2(0)              ERROR CODE FROM DYNAMIC ALLOCATION\nDAIN&X   DC    AL2(0)              INFORMATION CODE FROM DYNALLOC\n         DC    A(TS&X)             POINTER TO CALL LIST FOR SVC 99\n         DC    XL8'0'              RESERVED\n&A       SETA  1\n         DS    0F                  FULLWORD ALIGNED\nTS&A&X   DC    X'0001'             KEY FOR DDNAME SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&DDN\n         DC    XL2'&K'             LENGTH OF DDNAME SPECIFIED\nDADN&X   DC    C'&DDN'             DDNAME PLUGGED IN HERE\n&A       SETA  &A+1\n         AIF   (T'&DSN EQ 'O').A\n         DS    0F\nTS&A&X   DC    X'0002'             KEY FOR DSNAME SPECIFICATION\n         DC    XL2'1'\n         DC    AL2(44)             LENGTH OF DSNAME MAX IS 44\nDADS&X   DC    CL44'&DSN'          DSNAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.A       AIF   (T'&MEM EQ 'O').B\n         DS    0F\nTS&A&X   DC    X'0003'             KEY FOR MEMBER OR GDG SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&MEM\n         DC    XL2'&K'             LENGTH OF SPECFIED MEMBER NAME\nDAMB&X   DC    C'&MEM'             THE MEMBER NAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.B       AIF   (T'&STATUS EQ 'O').C\n         DS    0F\nTS&A&X   DC    X'0004'             KEY FOR PRIMARY DISPOSITION OF DDN\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE CODE\n&A       SETA  &A+1\n         AIF   ('&STATUS' EQ 'OLD').B1       OLD = X'01'\n         AIF   ('&STATUS' EQ 'MOD').B2       MOD = X'02'\n         AIF   ('&STATUS' EQ 'NEW').B3       NEW = X'04'\n         AIF   ('&STATUS' EQ 'SHR').B4       SHR = X'08'\n         MNOTE 8,'&STATUS INVALID FOR STATUS'\n         AGO   .C\n.B1      DC    X'1'                CONSTANT FOR DISP=OLD\n         AGO   .C\n.B2      DC    X'2'                CONSTANT FOR DISP=MOD\n         AGO   .C\n.B3      DC    X'4'                CONSTANT FOR DISP=NEW\n         AGO   .C\n.B4      DC    X'8'                CONSTANT FOR DISP=SHR\n         AGO   .C\n.C       AIF   (T'&DISP EQ 'O').D\n         DS    0F\nTS&A&X   DC    X'0005'             KEY FOR NORMAL EOJ SPECIFICATION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS WILL ALWAYS BE A ONE BYTE KEY\n         AIF   ('&DISP' EQ 'UNCATLG').C1     UNCATLG = X'01'\n         AIF   ('&DISP' EQ 'CATLG').C2       CATLG   = X'02'\n         AIF   ('&DISP' EQ 'DELETE').C3      DELETE  = X'04'\n         AIF   ('&DISP' EQ 'KEEP').C4        KEEP    = X'08'\n         MNOTE 8,'&DISP INVALID FOR DISP'    ALL ELSE IS WRONG\n         AGO   .D\n.C1      DC    X'1'                CONSTANT FOR UNCATLG AT NORMAL EOJ\n         AGO   .D\n.C2      DC    X'2'                CONSTANT FOR CATLG  AT NORMAL EOJ\n         AGO   .D\n.C3      DC    X'4'                CONSTANT FOR DELETE AT NORMAL EOJ\n         AGO   .D\n.C4      DC    X'8'                CONSTANT FOR KEEP   AT NORMAL EOJ\n         AGO   .D\n.D       AIF   (T'&CDISP EQ 'O').E\n         DS    0F\nTS&A&X   DC    X'0006'             KEY FOR ABNORMAL EOJ DISPOSITION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE KEY\n         AIF   ('&CDISP' EQ 'UNCATLG').D1      UNCATLG = X'01'\n         AIF   ('&CDISP' EQ 'CATLG').D2        CATLG   = X'02'\n         AIF   ('&CDISP' EQ 'DELETE').D3       DELETE  = X'04'\n         AIF   ('&CDISP' EQ 'KEEP').D4         KEEP    = X'08'\n         MNOTE 8,'&CDISP INVALID FOR DISP'     ALL ELSE IS WRONG\n         AGO   .E\n.D1      DC    X'1'                CONSTANT FOR UNCATLG IF ABEND\n         AGO   .E\n.D2      DC    X'2'                CONSTANT FOR CATLG  IF ABEND\n         AGO   .E\n.D3      DC    X'4'                CONSTANT FOR DELETE IF ABEND\n         AGO   .E\n.D4      DC    X'08'               CONSTANT FOR KEEP   IF ABEND\n         AGO   .E\n.E       AIF   (T'&TYPSP EQ 'O').I\n         DS    0F\n         AIF   ('&TYPSP' EQ 'TRK').E1  IF TYPE OF SPACE SPECIFICATION\n         AIF   ('&TYPSP' EQ 'CYL').E2  IS NOT TRACKS OR CYLINDERS THEN\nTS&A&X   DC    X'0009'                 IT MUST BE IN BLOCKS\n         DC    XL1'1'\n         DC    XL1'3'\n         DC    AL3(&TYPSP)\n&A       SETA  &A+1\n         AGO   .F\n.E1      ANOP\nTS&A&X   DC    X'0007'             SPACE IS TO BE ALLOCATED IN TRKS\n         DC    XL2'0'\n&A       SETA  &A+1\n         AGO   .F\n.E2      ANOP\nTS&A&X   DC    X'0008'             SPACE IS TO BE ALLOCATED IN CYLS\n         DC    XL2'0'\n&A       SETA  &A+1\n.F       AIF   (T'&SPACE EQ 'O').FO\n         DS    0F\nTS&A&X   DC    X'000A'             KEY TO SPECIFY PRIMARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASP&X   DC    AL3(&SPACE)\n&A       SETA  &A+1\n         AGO   .G\n.FO      MNOTE 8,'PRIMARY SPACE OMITTED'   TYPSP REQUIRES AT LEAST\n         AGO   .I                  THE PRIMARY SPACE SPECIFICATION\n.G       AIF   (T'&SECSP EQ 'O').H\n         DS    0F\nTS&A&X   DC    X'000B'             KEY TO SPECIFY SECONDARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASS&X   DC    AL3(&SECSP)\n&A       SETA  &A+1\n.H       AIF   (T'&DIRSP EQ 'O').I\n         DS    0F\nTS&A&X   DC    X'000C'             KEY TO SPECIFY DIRECTORY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDADI&X   DC    AL3(&DIRSP)\n&A       SETA  &A+1\n.I       AIF   (T'&VOLSER EQ 'O').J\n         DS    0F\nTS&A&X   DC    X'0010'             KEY TO SPECIFY A PARTICULAR VOLSER\n         DC    XL2'1'\n&K       SETA  K'&VOLSER           PICK UP LENGTH OF NAME SPECIFIED\n         DC    XL2'&K'             AND USE THAT LENGTH\nDAVO&X   DC    C'&VOLSER'          AND NAME\n&A       SETA  &A+1\n.J       AIF   (T'&UNIT EQ 'O').K\n         DS    0F\nTS&A&X   DC    X'0015'             KEY FOR UNIT SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&UNIT             PICK UP LENGTH OF UNIT NAME GIVEN\n         DC    AL2(&K)             THEN USE THAT LENGTH\nDAUN&X   DC    C'&UNIT'            AND NAME\n&A       SETA  &A+1\n.K       AIF   (T'&SYSOUT EQ 'O').L\n         DS    0F\nTS&A&X   DC    X'0018'             KEY FOR SYSOUT CLASS SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&SYSOUT\n         DC    AL2(&K)\nDASY&X   DC    C'&SYSOUT'\n&A       SETA  &A+1\n.L       AIF   (T'&FORM EQ 'O').M\n         DS    0F\nTS&A&X   DC    X'001A'             KEY FOR FORMS ID SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&FORM             PICK UP LENGTH OF FORMS ID\n         DC    AL2(&K)             AND USE THAT LENGTH\nDAFM&X   DC    C'&FORM'            AND THAT FORM NUMBER\n&A       SETA  &A+1\n.M       AIF   (T'&FREE EQ 'O').N\n         AIF   ('&FREE' NE 'CLOSE').M2\n         DS    0F\nTS&A&X   DC    X'001C'             KEY TO SPECIFY FREE=CLOSE\nDACL&X   DC    XL2'0'              MUST BE CODED FREE=CLOSE\n&A       SETA  &A+1                ALL ELSE WILL GENERATE MNOTE\n         AGO   .N\n.M2      MNOTE 8,'&FREE INVALID FOR FREE'\n.N       AIF   (T'&COPIES EQ 'O').O\n         DS    0F\nTS&A&X   DC    X'001D'             KEY TO SPECIFY MULTIPLE COPIES\n         DC    XL2'1'              OF OUTPUT.\n         DC    XL2'1'\nDACO&X   DC    AL1(&COPIES)        NUMBER OF COPIES REQUESTED\n&A       SETA  &A+1\n.O       AIF   (T'&LABEL EQ 'O').P\n         DS    0F\nTS&A&X   DC    X'001E'             KEY TO SPECIFY TYPE LABEL\n         DC    XL2'1'\n         DC    XL2'1'              LENGTH OF THIS FIELD IS ALWAYS ONE\n&A       SETA  &A+1\n         AIF   ('&LABEL' EQ 'NL').O1     NL  = X'01'\n         AIF   ('&LABEL' EQ 'SL').O2     SL  = X'02'\n         AIF   ('&LABEL' EQ 'NSL').O3    NSL = X'04'\n         AIF   ('&LABEL' EQ 'SUL').O4    SUL = X'08'\n         AIF   ('&LABEL' EQ 'BLP').O5    BLP = X'10'\n         AIF   ('&LABEL' EQ 'LTM').O6    LTM = X'21'\n         AIF   ('&LABEL' EQ 'AL').O7     AL  = X'40'\n         AIF   ('&LABEL' EQ 'AUL').O8    AUL = X'48'\n         MNOTE 8,'&LABEL INVALID FOR LABEL'\n         AGO   .P\n.O1      DC    X'1'               LABEL = NL\n         AGO   .P\n.O2      DC    X'2'                LABEL = SL\n         AGO   .P\n.O3      DC    X'04'               LABEL = NSL\n         AGO   .P\n.O4      DC    X'08'               LABEL = SUL\n         AGO   .P\n.O5      DC    X'10'               LABEL = BLP\n         AGO   .P\n.O6      DC    X'21'               LABEL = LTM\n         AGO   .P\n.O7      DC    X'40'               LABEL = AL\n         AGO   .P\n.O8      DC    X'48'               LABEL = AUL\n         AGO   .P\n.P       AIF   (T'&EXPDT EQ 'O').Q\n         DS    0F\nTS&A&X   DC    X'0022'             KEY TO SPECIFY EXPIRATION DATE\n         DC    XL2'1'\n         DC    XL2'5'              FIELD IS FIVE NUMERICS\nDAEX&X   DC    CL5'&EXPDT'         AND IS PUT IN HERE\n&A       SETA  &A+1\n.Q       AIF   (T'&RETPD EQ 'O').R\n         DS    0F\nTS&A&X   DC    X'0023'             KEY TO SPECIFY A RETENTION PERIOD\n         DC    XL2'1'\n         DC    XL2'2'              MAXIMUM LENGTH IS TWO\nDARP&X   DC    AL2(&RETPD)         AND IS PLACED HERE.\n&A       SETA  &A+1\n.R       AIF   (T'&DUMMY EQ 'O').S\n         DS    0F\nTS&A&X   DC    X'0024'             KEY TO ALLOCATE A DUMMY DATA SET\n         DC    XL2'0'\n         DC    XL2'0'\n         DC    X'0'\n&A       SETA  &A+1\n.S       AIF   (T'&BLKSIZE EQ 'O').T\n         DS    0F\nTS&A&X   DC    X'0030'             KEY TO SPECIFY THE BLOCKSIZE\n         DC    XL2'1'\n         DC    XL2'2'\nDABS&X   DC    AL2(&BLKSIZE)\n&A       SETA  &A+1\n.T       AIF   (T'&FUNC EQ 'O').U\n         DS    0F\n         AIF   ('&FUNC' EQ 'I').T2\n         MNOTE 8,'&FUNC INVALID FOR FUNC'\n         AGO   .U\n.T2      ANOP\nTS&A&X   DC    X'005A'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    X'80'\n&A       SETA  &A+1\n.U       AIF   (T'&LRECL EQ 'O').V\n         DS    0F\nTS&A&X   DC    X'0042'             KEY TO SPECIFY THE LRECL\n         DC    XL2'1'\n         DC    XL2'2'\n         DC    AL2(&LRECL)\n&A       SETA  &A+1\n.V       AIF   (T'&RLSE EQ 'O').W\n         DS    0F\nTS&A&X   DC    X'000D'             KEY  TO SPECIFY RELEASE SPACE\n         DC    XL2'0'\n&A       SETA  &A+1\n.W       AIF   (T'&DCB EQ 'O').X\n         DS    0F\nTS&A&X   DC    X'002C' KEY TO SPECIFY DCB REFERENCE NAME\n         DC    XL2'1'\n&K       SETA  K'&DCB\n         DC    XL2'&K'             LENGTH OF DSN SPECIFIED\nDCB&X    DC    C'&DCB'             DSNAME TO COPY DCB FROM\n&A       SETA  &A+1\n.X       ANOP\n.*\n.*\n.*\n.*\n         DS    0F\n&A2      SETA  1\n&A       SETA  &A-1\n&NM      SETC  'TS&X'\n.CM1     AIF   (&A2 EQ &A).CM2\n&NM      DC    A(TS&A2&X)\n&NM      SETC  ' '\n&A2      SETA  &A2+1\n         AGO   .CM1\n.CM2     DC    X'80'\n         DC    AL3(TS&A2&X)\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZATION\n*\n*              ACTUAL PROGRAM BEGINS\n*\n*----------------------------------------------------------------------\nOTTO     $PROLOG R11,R12          ENTRY LINKAGE\n         USING IHADCB,R10         DCB DSECT\nENTRY010 DS    0H\n         L     R1,0(R1)           PARM POINTER\n         XR    R2,R2              CLEAR R2\n         ICM   R2,3,0(R1)         ANY PARM ?\n         BZ    BBB010             NO - NOT STARTED AT IPL\n         CH    R2,=H'8'           MAX PARM LENGTH ?\n         BNH   AAA010             NO - OK\n         WTO   '** OTTO ** - INVALID PARM LENGTH, IGNORED'\n         B     BBB010\nAAA010   EQU   *\n         BCTR  R2,R0              DECR FOR EXECUTE\n         EX    R2,MVC010          MOVE PARM TO MEMBER\nBBB010   EQU   *\n         OPEN  (COMMANDS,,DIR,,INTRDR,(OUTPUT))\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  IS IT OPEN ?\n         BZ    ERROR1             NO - ERROR\n         BAL   R14,ENTRY999       SET UP THE DATE/TIME/DAY FIELDS\n         L     R0,BUFSIZE         MAX BLKSIZE\n         GETMAIN R,LV=(0)\n         ST    R1,BUFFER          STORE FOR USE AS READ BUFFER\nEXIT010  EQU   *\n         B     ENTRY020\n         LTORG\nMVC010   MVC   MEMBER(0),2(R1)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZE CONSOLE COMMUNICATION INTERFACE\n*\n*----------------------------------------------------------------------\nENTRY020 DS    0H\n         EXTRACT COMM,'S',FIELDS=(COMM)\n         L     R1,COMM            GET ADDRESS OF COMMUNICATIONS FIELDS\n         L     R0,0(R1)           GET COMMUNICATIONS ECB ADDRESS\n         ST    R0,COMMECB         SAVE ECB ADDRESS IN WAIT LIST\n         LA    R9,4(R1)           GET ORIGIN ADDRESS FOR QEDIT\n         ICM   R1,15,0(R9)        IS THERE A START COMMAND CIB WAITING\n         BZ    AAA020             NO, MUST BE BATCH EXECUTION\n         QEDIT ORIGIN=(R9),BLOCK=(R1)  YES, FREE START COMMAND CIB\nAAA020   EQU   *\n         QEDIT ORIGIN=(R9),CIBCTR=255  ALLOW STACKED COMMANDS (255)\nEXIT020  EQU   *\n         B     ENTRY030\nCOMM     DC    F'0'\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        IPL COMMAND EXECUTION\n*\n*----------------------------------------------------------------------\nENTRY030 DS    0H\n         CLC   MEMBER,BLANKS      ANY PARM ?\n         BE    EXIT030            NO - THIS IS NOT IPL START\n         BAL   R14,ENTRY900       PROCESS IPL MEMBER\nEXIT030  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SET UP TIMER\n*\n*----------------------------------------------------------------------\nENTRY040 DS    0H\n         POINT DIR,=X'00000100'   POINT TO FIRST RECORD IN DIRECTORY\n         USING DIRDSECT,R3\n         TIME  DEC\n         STCM  R0,12,HHMM         STORE TIME HHMM\n         UNPK  @TIME(5),HHMM      MOVE TO STIMER TIME FIELD\n         MVC   @TIME+4(2),=2C'0'\nAAA040   EQU   *\n         L     R3,BUFFER          ADDR OF BUFFER\n         READ  DIRDECB,SF,DIR,(R3),'S'  READ DIRECTORY\n         CHECK DIRDECB            AND OF COURSE WAIT\n         XR    R1,R1              CLEAR A WORK REG\n         ICM   R1,3,0(R3)         LNGTH OF DATA IN DIR BLK\n         LA    R5,0(R1,R3)        END OF DATA IN DIR BLK\n         LA    R3,2(R3)           INCR TO FIRST MEMBER NAME\nLOOP040A EQU   *\n         CLC   DIRNAME,=8X'FF'    END OF MEMBERS ?\n         BE    DDD040             YES - CHECK FOR LO MEMBER\n         CLI   DIRNAME,C'@'       TOD MEMBER ?\n         BNE   CCC040             NO -SKIP IT\n         LA    R1,DIRNAME+1       SECOND BYTE OF DIRNAME\n         LA    R15,4              LOOP CONTROL - HHMM\nLOOP040B EQU   *\n         TM    0(R1),X'F0'        NUMERIC ?\n         BNO   CCC040             NO - SKIP THIS MEMBER\n         LA    R1,1(R1)           BUMP TO NEXT BYTE\n         BCT   R15,LOOP040B\n         CLC   DIRNAME+6(2),BLANKS  MUST BE BLANKS\n         BE    BBB040             YES - OK\n         MVC   WTO040+28(8),DIRNAME  NO - INFORM OPER\nWTO040   WTO   '** OTTO ** - MEMBER //////// INVALID FOR TOD PROCESSINGX\n               , IGNORED'\n         B     CCC040\nBBB040   EQU   *\n         CLC   DIRNAME+1(4),@TIME  MUST BE HIGHER\n         BH    GGG040             PROCESS THIS MEMBER\nCCC040   EQU   *\n         NI    DIRC,X'1F'         TURN OFF UNNEEDED BITS\n         XR    R1,R1              CLEAR R1\n         IC    R1,DIRC            NUMBER OF USER HALFWORDS\n         SLL   R1,1               NUMBER OF USER BYTES\n         LA    R3,12(R1,R3)       INCR TO NEXT DIR ENTRY\n         CR    R3,R5              PAST END OF DIR BLOCK ?\n         BL    LOOP040A           NO - CHECK THIS DIR ENTRY\n         B     AAA040             YES - GET NEXT DIR BLOCK\nDDD040   EQU   *                  ALSO EODAD FOR DIR READS\n         AP    HHMM,=P'1000'      ADD 1 HOUR\n         MVI   HHMM+1,X'00'       CLEAR MM\n         CP    HHMM,=P'24000'     MIDNITE ?\n         BL    EEE040             NO - OK\n         MVC   @TIME(4),=C'2400'  SET STIMER PHONY MIDNIGHT AS VALUE\n         B     HHH040\nEEE040   EQU   *\n         UNPK  @TIME(5),HHMM      SET DEFAULT TO CHECK AGAIN NEXT HOUR\n         B     HHH040\nGGG040   EQU   *\n         MVC   @TIME(4),DIRNAME+1  YES - NEW TIMER VALUE\nHHH040   EQU   *\n         MVC   @TIME+4(4),=4C'0'\nIII040   EQU   *\n         XC    TIMEECB,TIMEECB\n         STIMER  REAL,ENTRY950,TOD=@TIME\nEXIT040  EQU   *\n         B     ENTRY050\n         DROP  R3\n         LTORG\nHHMM     DC    PL3'0'\n@TIME    DC    D'0'\n         EJECT\n*----------------------------------------------------------------------\n*\n*        WAIT FOR MODIFY OR TIMER POP\n*\n*----------------------------------------------------------------------\nENTRY050 DS    0H\n         WAIT  1,ECBLIST=ECBLIST,LONG=YES  WAIT UNTIL AN ECB IS POSTED\n         L     R1,COMMECB         ADDR OF COMMUNICATIONS ECB\n         CLI   0(R1),X'00'        CHECK FOR OPERATOR REQUEST\n         BNE   ENTRY060           YES--GO TO PROCESS OPER REQ\n         CLI   TIMEECB,X'00'      DID THE TIMER POP ?\n         BE    ENTRY050           HMMM.. DON'T KNOW, RETRY\n         CLC   @TIME(4),=C'2400'  YES--IS THIS STIMER PHONY MIDNIGHT?\n         BNE   ENTRY300           NO--GO PROCESS TIME REQUEST\n         MVC   @TIME(4),=4C'0'    YES--CHANGE TO REAL MIDNIGHT\n         B     ENTRY300           GO PROCESS TIME REQUEST\n         LTORG\nECBLIST  DS    0F\nCOMMECB  DC    A(0)\n         DC    X'80',AL3(TIMEECB)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        CHECK FOR OPERATOR REQUEST\n*\n*----------------------------------------------------------------------\nENTRY060 DS    0H\n         L     R3,0(R9)           GET ADDRESS OF THE CIB\n         USING CIBSECT,R3         ALLOW ADDRESSABILITY\n         CLI   CIBVERB,X'40'      IS IT THE STOP COMMAND ?\n         BE    RETURN             YES - TO CLEAN UP ROUTINE\n         MVC   COMMDATA,BLANKS    CLEAR THE DATA BUFFER\n         IC    R15,CIBDSIZE+1     GET SIZE OF MODIFY DATA\n         BCTR  R15,R0             DECREMENT FOR EXECUTE\n         EX    R15,MOVE060        MOVE TO COMMDATA\n         QEDIT ORIGIN=(R9),BLOCK=(R3)  FREE THE CIB\n         OC    COMMDATA,BLANKS    UPPER CASE\n         CLI   COMMDATA,C'-'      IS IT A COMMAND REQUEST ?\n         BE    ENTRY200           YES - PROCESS IT\n         B     ENTRY100           NO - ASSUME JOB\n         LTORG\nMOVE060  MVC   COMMDATA(0),CIBDATA  MOVE DATA TO WORK AREA\n         DROP  R3                 FREE THE USING REGISTER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DETERMINE WHICH DDNAME TO USE FOR SUBMIT\n*\n*----------------------------------------------------------------------\nENTRY100 DS    0H\n         LA    R10,JOBDCB         ADDR OF JOB DCB\n         LA    R3,COMMDATA        ADDR OF INPUT DATA\nLOOP100A EQU   *\n         CLI   0(R3),C' '         END OF DATA ?\n         BE    AAA100             YES - DEFAULT DDNAME\n         CLC   0(3,R3),=C',D='    IS THIS DDNAME OVERRIDE?\n         BE    BBB100             NO, CONTINUE UNTIL ONE IS FOUND\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         B     LOOP100A           BRANCH BACK\nAAA100   EQU   *\n         MVC   0(5,R3),=C',D=00'  ASSUME DEFAULT (OF CONCATENATION)\nBBB100   EQU   *\n         TM    DCBOFLGS,DCBOFOPN  JOB CNTL DCB OPEN ?\n         BZ    CCC100             NO - OPEN IT\n         CLC   OPENDCB,3(R3)      SAME AS LAST ONE ?\n         BE    EXIT100            YES - OK\n         CLOSE ((R10))            NO - CLOSE IT\n         XC    OPENDCB,OPENDCB    CLEAR LAST OPENED\nCCC100   EQU   *\n         CLC   3(2,R3),=C'00'     IS THIS CONCATENATION?\n         BE    CCC100D            YES, SKIP DYNALLOC\n         MVC   DADNJCL+3(2),3(R3)   MODIFY DYNAMIC ALLOCATION PARMS\n         LA    R4,DSNTABLE          TABLE OF DSNS TO DDNAMES\nCCC100L  DS    0H\n         CLC   0(2,R4),3(R3)        RIGHT DDNAME SUFFIX ?\n         BE    CCC100A              GO DO ALLOCATION\n         CLC   0(2,R4),=X'FFFF'     END OF TABLE ?\n         BNE   CCC100B              NO BUMP TO NEXT ENTRY\n         MVC   CCC100M+33(2),3(R3)  MOVE DD SUFFIX TO WTO\n*               89012345678901234567890123456789012345678901234567890\nCCC100M  WTO   '** OTTO ** DDNAME SUFFIX // NOT DEFINED IN TABLE USING X\n               00 AS A DEFAULT'\n         MVC   3(2,R3),=C'00'       SET UP DEFAULT\n         B     CCC100D              GO OPEN CONCATENATION\nCCC100B  DS    0H\n         LA    R4,46(R4)            NEXT ENTRY IN TABLE PLEASE.\n         B     CCC100L              TRY THAT ENTRY ON FOR SIZE\nCCC100A  DS    0H\n         MVC   DADSJCL(44),2(R4)    SAVE THE DATASET TO ALLOCATE.\n         LA    R1,JCLALOC\n         DYNALLOC\n         LTR   R15,R15              ALLOCATION GOOD ?\n         BZ    CCC100D\n         MVC   DATASET(44),DADSJCL MOVE DSNAME TO TITLE\n         WTO   MF=(E,TITLE)\n         LH    R6,TITLE            GET LENGTH OF WTO.\n         LH    R7,TITLE+2          GET MCS FLAGS FROM WTO\n         SH    R6,HALF4            GET LENGTH OF MESSAGE TEXT\n         STC   R6,TITLE+3          SAVE LENGTH FOR SDUMP\n         SDUMP HDRAD=TITLE+3\n         STH   R7,TITLE+2          RESTORE MCS FLAGS FROM WTO.\n         B     ENTRY050            GO WAIT FOR MORE WORK\nCCC100D  DS    0H\n         MVC   DCBDDNAM+3(2),3(R3)  MODIFY DDNAME\n         OPEN  ((R10))\n         TM    DCBOFLGS,DCBOFOPN  DID IT OPEN THIS TIME ?\n         BZ    ERROR2             NO - ERROR\n         MVC   OPENDCB,3(R3)      SAVE LAST OPENED\nEXIT100  EQU   *\n         MVC   0(5,R3),=CL5' '    CLEAR THE 'D=XX' PARM\n         B     ENTRY110\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SUBMIT EACH MEMBER SPECIFIED IN THE PARMLIST\n*\n*----------------------------------------------------------------------\nENTRY110 DS    0H\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  IS THE INTRDR OPEN ?\n         BZ    ENTRY050           NO, IGNORE REQUEST\n         LA    R3,COMMDATA        ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA110   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP110  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB110             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB110             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP110        BACK TO CHECK NEXT CHAR\n         B     ERROR3             MEMBER NAME LONGER THAN 8 CHARS\nBBB110   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE110        MOVE MEMBER NAME\n         FIND  ((R10)),MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    CCC110             YES - OK\n         MVC   WTO110+25(8),MEMBER\n*               890123456789012345\nWTO110   WTO   '** OTTO ** - JOB //////// NOT FOUND'\n         B     EEE110             GO TO EODAD ROUTINE\nCCC110   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  READDECB,SF,(R10),(R5),'S'\n         CHECK READDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,READDECB+16     ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nDDD110   EQU   *\n         PUT   INTRDR,(R5)        SUBMIT JCL\n         BXLE  R5,R6,DDD110       BUMP TO NEXT REC IN BLOCK AND PUT\n         B     CCC110             READ ANOTHER BLOCK\nEEE110   EQU   *\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   FFF110             NO, FLUSH THE INTERNAL READER\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA110             NO, PROCESS IT\nFFF110   EQU   *\n         PUT   INTRDR,EOF         /*EOF\nEXIT110  EQU   *                  END OF ALL SUBMITS\n         CLOSE ((R10))            CLOSE AND DE-ALLOCATE JOBDCB.\n         B     ENTRY050           CHECK FOR ANY MORE COMMANDS\nMOVE110  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMAND EXECUTION REQUEST BY OPERATOR\n*\n*----------------------------------------------------------------------\nENTRY200 DS    0H\n         LA    R3,COMMDATA+1      ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA200   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP200  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB200             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB200             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP200        BACK TO CHECK NEXT CHAR\n         B     ERROR4             MEMBER NAME LONGER THAN 8 CHARS\nBBB200   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE200        MOVE MEMBER NAME\n         BAL   R14,ENTRY900       PROCESS COMMAND\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   EXIT200            NO, DONE\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA200             NO, PROCESS IT\nEXIT200  EQU   *\n         B     ENTRY050\n         LTORG\nMOVE200  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS TIME INTERVAL REQUESTS (THE TIMER HAS POPPED)\n*\n*----------------------------------------------------------------------\nENTRY300 DS    0H\n         MVC   MEMBER,BLANKS      CLEAR\n         MVI   MEMBER,C'@'        PREFIX\n         MVC   MEMBER+1(4),@TIME  BUILD NAME\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BNZ   EXIT300            NO, MUST BE NULL TIMER\n         BAL   R14,ENTRY900\nEXIT300  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMANDS\n*\n*----------------------------------------------------------------------\nENTRY900 DS    0H\n         ST    R14,ST900          SAVE RETURN ADDR\n         LA    R10,COMMANDS       DCB ADDR\n         TM    DCBOFLGS,DCBOFOPN  IS THE COMMANDS OPEN ?\n         BZ    EXIT900            NO, IGNORE REQUEST\n         BAL   R14,ENTRY999       RE-ESTABLISH DATE, TIME, AND DAY\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    AAA900             YES - PROCESS IT\n         MVC   WTO900+25(8),MEMBER\nWTO900   WTO   '** OTTO ** - CMD //////// NOT FOUND'\n         B     EXIT900            GO TO EODAD ROUTINE\nAAA900   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  CMDDECB,SF,(R10),(R5),'S'\n         CHECK CMDDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,CMDDECB+16      ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nBBB900   EQU   *\n         CLI   CONTFLAG,X'FF'     IS THE CONTINUATION FLAG ON ?\n         BNE   EEE900             NO, NORMAL PROCESSING\n         CLC   0(15,R5),BLANKS    IS IT A VALID CONT RECORD ?\n         BE    DDD900             YES, OK\nCCC900   EQU   *\n         MVC   WTO900A+25(8),MEMBER MOVE MEMBER NAME\nWTO900A  WTO   '** OTTO ** - CMD //////// INVALID CONTINUATION, SKIP'\n         MVI   CONTFLAG,X'00'     RESET CONT FLAG\n         B     JJJ900             SKIP THE RECORD\nDDD900   EQU   *\n         MVC   CMDBUF+56(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BNE   CCC900             YES - ERROR ONLY ONE CONT ALLOWED\n         MVI   CONTFLAG,X'00'     RESET THE CONTINUATION FLAG\n         B     III900             PROCESS COMPLETE COMMAND\nEEE900   EQU   *\n         CLI   0(R5),C'*'         COMMENT ?\n         BE    KKK900             YES - SKIP IT\n         CLC   1(5,R5),BLANKS     ANY MONTH/DAY PROCESSING?\n         BE    HHH900             NO, PROCESS DAY OF WEEK ONLY\n         CLI   3(R5),C'/'         VALID MONTH/DAY SPECIFICATION?\n         BE    FFF900             YES - OK\n         MVC   WTO900B+25(8),MEMBER MOVE MEMBER NAME\nWTO900B  WTO   '** OTTO ** - CMD //////// INVALID MONTH/DAY, SKIPPED'\n         B     KKK900             SKIP THE RECORD\nFFF900   EQU   *\n         CLC   1(5,R5),=C'**/**'  ANY MONTH/DAY PROCESSING?\n         BE    HHH900             YES, PROCESS DAY OF WEEK ONLY\n         CLC   1(5,R5),DATE       IS THIS A HIT?\n         BE    HHH900             YES, CHECK FOR CORRECT DAY OF WEEK\n         CLC   4(2,R5),=C'**'     WAS ANY DAY SPECIFIED ?\n         BNE   GGG900             NO, CHECK FOR ANY MONTH\n         CLC   1(2,R5),DATE       YES, IS THIS THE CORRECT MONTH\n         BE    HHH900             YES, PROCESS DAY OF WEEK NEXT\n         B     KKK900             NO - SKIP IT\nGGG900   EQU   *\n         CLC   1(2,R5),=C'**'     WAS ANY MONTH SPECIFIED ?\n         BNE   KKK900             NO - SKIP IT\n         CLC   4(2,R5),DATE+3     YES, IS THIS THE CORRECT DAY\n         BNE   KKK900             NO - SKIP IT\nHHH900   EQU   *\n         SR    R1,R1              CLEAR FOR DAY INDEX\n         IC    R1,DAY             GET DAY INDEX\n         LA    R1,7(R5,R1)        POINT TO TODAYS PROCESS FLAG\n         CLI   0(R1),C' '         PROCESS FLAG ON FOR TODAY ?\n         BE    KKK900             NO -SKIP IT\n         MVC   CMDBUF(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BE    III900             NO - PROCESS COMMAND\n         MVI   CONTFLAG,X'FF'     SET THE CONTINUATION FLAG\n         B     KKK900             GET NEXT RECORD\nIII900   MODESET KEY=ZERO         GET KEY ZERO AND AUTH\n         LM    R0,R1,SVCREGS      GET SVC 34 REGS\n         SVC   34                 SCHEDULE COMMAND\n         MODESET KEY=NZERO        RELEASE AUTHORIZATION\nJJJ900   EQU   *\n         MVC   CMDBUF(115),BLANKS CLEAR THE COMMAND BUFFER\nKKK900   EQU   *\n         BXLE  R5,R6,BBB900       BUMP TO NEXT REC IN BLOCK\n         B     AAA900             READ ANOTHER BLOCK\nEXIT900  EQU   *                  EODAD\n         L     R14,ST900          RETURN ADDR\n         BR    R14\n         LTORG\nST900    DC    F'-1'\nCONTFLAG DC    X'00'\nSVCREGS  DC    F'0'               REG 0 FOR SVC 34\n         DC    A(SVCCIB)          REG 1 FOR SVC 34\nSVCCIB   DC    AL2(118)           MAXIMUM LENGHT OF COMMAND\n         DC    H'0'               SVC 34 PADDING\nCMDBUF   DC    CL120' '           COMMAND BUFFER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        TIMER EXIT\n*\n*----------------------------------------------------------------------\nENTRY950 DS    0H\n         USING *,R15\n         STM   R14,R12,4(R13)     SAVE REGS\n         L     R11,=A(OTTO)       SET UP BASE REGISTERS\n         LA    R12,2048(R11)\n         LA    R12,2048(R12)\n         DROP  R15\n         POST  TIMEECB\n         LM    R14,R12,4(R13)     RESTORE REGS\nEXIT950  EQU   *\n         BR    R14\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DAY/DATE ROUTINE (FROM THE MACHINE CLOCK)\n*\n*----------------------------------------------------------------------\nENTRY999 DS    0H\n         ST    R14,SAVE999        SAVE BAL REG\n         $STCK NOGEN              GENERATE THE DATE, TIME AND DAY\nEXIT999  EQU   *\n         L     R14,SAVE999        RELOAD BAL REG\n         BR    R14\n         LTORG\nSAVE999  DC    F'-1'\nDAY      DC    X'99'              RELATIVE DAY OF WEEK (0=MONDAY)\nDATE     DC    D'0'               DATE MM/DD/YY\nTIME     DC    D'0'               TIME HH:MM:SS\n         EJECT\n*----------------------------------------------------------------------\n*\n*        END OF JOB\n*\n*----------------------------------------------------------------------\nRETURN   DS    0H\n         TM    DCBOFLGS,DCBOFOPN  IS THE JCL DCB OPEN?\n         BZ    AAARET             NO, SKIP THE CLOSE\n         CLOSE ((10))             CLOSE THE DCB\nAAARET   EQU   *\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  COMMANDS OPEN ?\n         BZ    BBBRET             NO, SKIP THE CLOSE\n         CLOSE (COMMANDS,,DIR)    CLOSE BOTH DCBS\nBBBRET   EQU   *\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  HOW ABOUT THE INTRDR ?\n         BZ    CCCRET             NO, SKIP THAT CLOSE\n         CLOSE (INTRDR)           CLOSE THE INTERNAL READER\nCCCRET   EQU   *\n         L     R1,BUFFER\n         L     R0,BUFSIZE\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15            CLEAR RETCODE\n         $EPILOG\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        ERROR ROUTINES\n*\n*----------------------------------------------------------------------\nERROR1   DS    0H\n         WTO   '** OTTO ** - COMMANDS DD CARD MISSING, TERMINATING'\n         B     RETURN\n*----------------------------------------------------------------------\nERROR2   DS    0H\n         MVC   WTO2+23(2),3(R3)\nWTO2     WTO   '** OTTO ** - D=// OPEN ERROR, JOB NOT SUBMITTED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR3   DS    0H\n         MVC   WTO3+25(8),0(R4)\nWTO3     WTO   '** OTTO ** - JOB //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR4   DS    0H\n         MVC   WTO4+25(8),0(R4)\nWTO4     WTO   '** OTTO ** - CMD //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n         EJECT\n*----------------------------------------------------------------------\n*\n*        STORAGE AREAS\n*\n*----------------------------------------------------------------------\nBUFSIZE  DC    F'32760'\nTIMEECB  DC    F'0'\nBUFFER   DC    F'0'\nMEMBER   DC    CL8' '\nOPENDCB  DC    CL2' '\nHOLDCIB  DC    CL256' '\nCOMMDATA DC    CL256' '\nBLANKS   DC    CL256' '\n*                        1         2         3         4         5\n*               123456789012345678901234567890123456789012345678901234\nTITLE    WTO   '                                             CAN NOT BEX\n                ALLOCATED AT THIS TIME TRY LATER',                     X\n               ROUTCDE=(1,2,11),MF=L\nDATASET  EQU   TITLE+4\nHALF4    DC    H'4'\nEOF      DC    CL80'/*EOF'\n*\n*        JRG/11-05-86\n*\nDSNTABLE DS    0F\n         DC    C'01',CL44'W$$.JOBSTREM'\n         DC    C'02',CL44'P$.SITE.JOBSTREM'\n         DC    C'03',CL44' '\n         DC    C'04',CL44' '\n         DC    C'05',CL44' '\n         DC    C'06',CL44' '\n         DC    C'07',CL44' '\n         DC    C'08',CL44' '\n         DC    C'09',CL44' '\n         DC    C'10',CL44' '\n         DC    X'FFFF'\nJCLALOC  DA    DDN=JOB00,                                              X\n               DSN=CIW.JCLLIB,                                         X\n               STATUS=SHR,                                             X\n               UNQSUF=JCL,                                             X\n               FREE=CLOSE\n         EJECT\n         PRINT NOGEN\nCOMMANDS DCB   DDNAME=COMMANDS,DSORG=PO,MACRF=R,EODAD=EXIT900\nDIR      DCB   DDNAME=COMMANDS,DSORG=PS,MACRF=RP,EODAD=DDD040,         X\n               LRECL=256,BLKSIZE=256,RECFM=FB\nJOBDCB   DCB   DDNAME=JOB00,DSORG=PO,MACRF=R,EODAD=EEE110\nINTRDR   DCB   DDNAME=INTRDR,DSORG=PS,MACRF=PM,                        X\n               LRECL=80,BLKSIZE=80,RECFM=F\n         EJECT\nCIBSECT  DSECT ,                  COMMAND INPUT BUFFER MAPPING\nCIBCIB   DS    F                  ADDRESS OF NEXT CIB IN CHAIN\nCIBVERB  DS    C                  CIB VERB CODE\nCIBSIZE  DS    C                  SIZE OF THE COMMAND INPUT BUFFER\nCIBRSVD1 DS    H                  RESERVED\nCIBRSVD2 DS    C                  RESERVED\nCIBTSOID DS    CL3                TSO TERMINAL ID\nCIBCONID DS    C                  CONSOLE ID OF STARTED TASK\nCIBRSVD3 DS    C                  RESERVED\nCIBDSIZE DS    H                  SIZE OF USER DATA WITHIN CIB\nCIBDATA  DS    C                  COMMAND DATA AS ENTERED BY OPERATOR\nDIRDSECT DSECT\nDIRNAME  DS    CL8\nDIRTTR   DS    CL3\nDIRC     DS    CL1\n         DCBD  DSORG=PO\n         END\n**ELIPS***\n./ ADD NAME=OTTOBLD  0100-87275-99328-1318-00009-00009-00000-ADDITON\n//WPMCOTTO JOB  ,CANNONE,MSGCLASS=X,NOTIFY=WPMC,CLASS=S\n//*\n//*\n//S1       EXEC  ASMACL,COND.LKED=(4,LT)\n//ASM.SYSIN DD DSN=S$$.SOURCE.LIBR(OTTO),SUBSYS=LAM\n//LKED.SYSLMOD  DD  DISP=SHR,DSN=WPMC.TEST.LINKLIB\n//LKED.SYSIN  DD  *\n  SETCODE  AC(1)\n  NAME     OTTO(R)\n./ ADD NAME=SIDRC    0100-98342-00014-1038-00272-00272-00000-ADDITON\nSID$     TITLE 'SID$ - GENERAL PURPOSE SMFSID ROUTINE'\n*--------------------------------------------------------------------\n*\n*  03-02-87   SMFSID   TEC\n*  12-08-1998          RLR .CHANGED SMF IDS AND KEY VALUES\n*  01-20-1999          RLR .REMOVED TOR1,5 VALUE FROM SIDTAB\n*  11-13-1999          RLR .CHANGE COL1 TO COLC\n*  12-01-1999          RLR .CHANGE MON1 TO MONA\n*  01-14-2000          RLR .CHANGE MON2 TO MONB\n*\n*\n*  INTENDED AS A GENERAL PURPOSE ROUTINE FOR THE CALLER TO IDENTIFY\n*  THE CPU ON WHICH IT IS RUNNING,  THE PROGRAM'S BEHAVIOR DEPENDS\n*  ON WHICH ENTRY POINT IS TAKEN, AS TABULATED BELOW:\n*\n*  ENTRY    ACTION\n*  .......  .........................................................\n*\n*  SIDMONA  - RC 0 AT SID 'MONA' ELSE RC 16   (        : PROD 1 LPAR)\n*\n*  SIDMONB  - RC 0 AT SID 'MONB' ELSE RC 16   (        : PROD 2 LPAR)\n*\n*  SIDCOLC  - RC 0 AT SID 'COLC' ELSE RC 16   (        : PROD 1 LPAR)\n*\n*  SIDCOLD  - RC 0 AT SID 'COLD' ELSE RC 16   (        : PROD 2 LPAR)\n*\n*  SIDWIZ1  - RC 0 AT SID 'WIZ1' ELSE RC 16   (        : SYSPROG LPAR)\n*\n*  SIDWIZ3  - RC 0 AT SID 'WIZ3' ELSE RC 16   (        : SYSPROG LPAR)\n*\n*  SIDSUBR  - RETURNS THE 4 CHARACTER SMFSID TO THE CALLING\n*             PROGRAM.\n*           - A COBOL PROGRAM MIGHT CALL THIS SUBROUTINE\n*             LIKE THIS:\n*\n*               WORKING-STORAGE SECTION.\n*               77  SMFSID  PIC X(4).\n*\n*               PROCEDURE DIVISION.\n*                   CALL 'SIDSUBR' USING SMFSID.\n*\n*  SIDRC    - LOOKS UP THE SMFSID IN AN INTERNAL TABLE AND\n*             SELECTS THE ASSOCIATED RETURN CODE.\n*           - THE RETURN CODES FOR EACH SMFSID ARE:\n*\n*               'MONA', 1\n*               'MONB', 2\n*               'COLC', 3\n*               'COLD', 4\n*               'WIZ1', 6\n*               'WIZ3', 7\n*\n*           - IF NO TABLE ENTRY MATCHES THE RETURN CODE WILL\n*             BE SET TO 16.\n*           - THE RETURN CODES ARE SELECTED TO MATCH THE\n*             JES2 MASDEF SID NUMBERS.\n*           - THE TABLE IS ASSEMBLED IN THE LOAD MODULE AT\n*             LABEL 'SIDTAB'.\n*\n*--------------------------------------------------------------------\n*\n*        REGISTER USAGE\n*           R2    FUNCTION INDICATOR\n*           R3    POINTER TO SOURCE SMFSID\n*           R4    RETURN CODE HOLDER\n*           R5    LOOKUP TABLE POINTER OR POINTER TO RETURN DATA AREA\n*           R6    LOOPUP TABLE LOOP CONTROL\n*           R12   BASE\n*\n*        THE PROGRAM REQUIRES THE MACROS: CVT AND IEESMCA\n*        FROM AMODGEN\n*\n*        NOTE THAT THE ENTRY POINTS SIDMONA THROUGH SIDWIZ3 ARE\n*        DEPENDENT ON THE SID TABLE TO MAP THE ENTRY POINT NAME\n*        AGAINST A DESIRED SID.\n*\n*        BASED ON THE PRC PROGRAM SID\n*        FROM FILE 369 OF THE CBT MODS TAPE\n*\n*--------------------------------------------------------------------\n         EJECT\n         PUNCH '  ALIAS SIDRC        '\n         PUNCH '  ALIAS SIDSUBR      '\n         PUNCH '  ALIAS SIDMONA      '\n         PUNCH '  ALIAS SIDMONB      '\n         PUNCH '  ALIAS SIDCOLC      '\n         PUNCH '  ALIAS SIDCOLD      '\n         PUNCH '  ALIAS SIDWIZ1      '\n         PUNCH '  ALIAS SIDWIZ3      '\n*--------------------------------------------------------------------\n&RETCFLG SETA  255                     FUNCTION BRANCH CONTROL\n&SUBRFLG SETA  254                     FUNCTION BRANCH CONTROL\n*--------------------------------------------------------------------\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*--------------------------------------------------------------------\n         EJECT\nSID$     CSECT\n*--------------------------------------------------------------------\n*        VARIOUS ENTRY POINTS\n*--------------------------------------------------------------------\n         ENTRY SIDRC                   SET RETURN CODE VIA SMFSID\nSIDRC    EQU   *\n         SAVE  (14,12)\n         LA    R2,&RETCFLG             SET FUNCTION INDICATOR\n         LA    R15,SIDCM-SIDRC(R15)    SET BRANCH TO REAL ENTRY\n         BR    R15\n*--------------------------------------------------------------------\n         ENTRY SIDSUBR                 SUBROUTINE TO RETURN SMFSID\nSIDSUBR  EQU   *\n         SAVE  (14,12)\n         LR    R5,R1                   SAVE THE DATA AREA POINTER\n         LA    R2,&SUBRFLG             SET FUNCTION INDICATOR\n         LA    R15,SIDCM-SIDSUBR(R15)  SET BRANCH TO REAL ENTRY\n         BR    R15\n*--------------------------------------------------------------------\n         ENTRY SIDMONA                 TEST FOR SMFSID=MONA\nSIDMONA  EQU   *\n         SAVE  (14,12)\n         LA    R2,0*SIDLENT            SET FUNCTION INDICATOR\n         LA    R15,SIDCM-SIDMONA(R15)  SET BRANCH TO REAL ENTRY\n         BR    R15\n*--------------------------------------------------------------------\n         ENTRY SIDMONB                 TEST FOR SMFSID=MONB\nSIDMONB  EQU   *\n         SAVE  (14,12)\n         LA    R2,1*SIDLENT            SET FUNCTION INDICATOR\n         LA    R15,SIDCM-SIDMONB(R15)  SET BRANCH TO REAL ENTRY\n         BR    R15\n*--------------------------------------------------------------------\n         ENTRY SIDCOLC                 TEST FOR SMFSID=COLC\nSIDCOLC  EQU   *\n         SAVE  (14,12)\n         LA    R2,2*SIDLENT            SET FUNCTION INDICATOR\n         LA    R15,SIDCM-SIDCOLC(R15)  SET BRANCH TO REAL ENTRY\n         BR    R15\n*--------------------------------------------------------------------\n         ENTRY SIDCOLD                 TEST FOR SMFSID=COLD\nSIDCOLD  EQU   *\n         SAVE  (14,12)\n         LA    R2,3*SIDLENT            SET FUNCTION INDICATOR\n         LA    R15,SIDCM-SIDCOLD(R15)  SET BRANCH TO REAL ENTRY\n         BR    R15\n*--------------------------------------------------------------------\n         ENTRY SIDWIZ1                 TEST FOR SMFSID=WIZ1\nSIDWIZ1  EQU   *\n         SAVE  (14,12)\n         LA    R2,5*SIDLENT            SET FUNCTION INDICATOR\n         LA    R15,SIDCM-SIDWIZ1(R15)  SET BRANCH TO REAL ENTRY\n         BR    R15\n*--------------------------------------------------------------------\n         ENTRY SIDWIZ3                 TEST FOR SMFSID=WIZ3\nSIDWIZ3  EQU   *\n         SAVE  (14,12)\n         LA    R2,6*SIDLENT            SET FUNCTION INDICATOR\n         LA    R15,SIDCM-SIDWIZ3(R15)  SET BRANCH TO REAL ENTRY\n         BR    R15\n*--------------------------------------------------------------------\n*        COMMON CODE BEGINS\n*--------------------------------------------------------------------\nSIDCM    LR    R12,R15\n         USING SIDCM,R12\n         LA    R0,SIDDLEN\n         GETMAIN  R,LV=(R0)\n         ST    R13,4(R1)\n         ST    R1,8(R13)\n         LR    R13,R1\n*--------------------------------------------------------------------\n*        SNAG THE SMFSID\n*--------------------------------------------------------------------\n         L     R3,CVTPTR               POINT TO THE CVT\n         USING CVT,R3\n         L     R3,CVTSMCA              POINT TO SMCA\n         DROP  R3\n         USING SMCABASE,R3\n         LA    R3,SMCASID              POINT TO SMFSID\n         DROP  R3\n*--------------------------------------------------------------------\n         USING SIDDSECT,R13\n         MVC   SIDSID,0(R3)            EXTRANOUS AS HELL\n         DROP  R13\n*--------------------------------------------------------------------\n*        SELECT THE PROCESS OPTION\n*--------------------------------------------------------------------\n         C     R2,SUBRFLG              ARE WE RETURNING THE DATA?\n         BE    SUBRCODE                  SO BRANCH\n         C     R2,RETCFLG              ARE WE SETTING A RETURN CODE?\n         BE    RETCCODE                  SO BRANCH\n*--------------------------------------------------------------------\n*        CHECK ENTRY NAME AGAINST SMFSID\n*--------------------------------------------------------------------\n         LA    R4,0                    PRESET GOOD RETURN CODE\n         LA    R2,SIDTAB(R2)           POINT INTO THE TABLE\n         CLC   0(4,R3),0(R2)           CHECK SMFSID VS: TABLE ENTRY\n         BE    RETURN                  BACK WITH GOOD RETURN CODE\n         LA    R4,16                   SET BAD RETURN CODE\n         B     RETURN                  BACK WITH BAD RETURN CODE\n*--------------------------------------------------------------------\n*        SUBROUTINE CALL TO RETURN THE DATA\n*--------------------------------------------------------------------\nSUBRCODE L     R5,0(R5)                POINT TO THE DATA RETURN AREA\n         MVC   0(4,R5),0(R3)           MOVE DATA TO CALLER'S AREA\n         LA    R4,0                    SET A NICE RETURN CODE\n         B     RETURN\n*--------------------------------------------------------------------\n*        SET RETURN CODE TO INDICATE THE SMFSID\n*--------------------------------------------------------------------\nRETCCODE LA    R5,SIDTAB               POINT TO THE TABLE\n         LA    R6,SID#ENT              SET LOOP CONTROL WITH COUNT\nRETCLOOP CLC   0(4,R3),0(R5)           COMPARE SYSTEM ID WITH TABLE\n         BE    RETCHIT                   BRANCH IF FOUND\n         LA    R5,SIDLENT(,R5)         INCREMENT TABLE POINTER\n         BCT   R6,RETCLOOP             LOOP CONTROLLER\nRETCHIT  L     R4,4(,R5)               LOAD THE RETURN INDICATOR\n         B     RETURN\n*--------------------------------------------------------------------\n*        RETURN LINKAGE\n*--------------------------------------------------------------------\nRETURN   LR    R1,R13\n         LA    R0,SIDDLEN\n         L     R13,4(R13)\n         FREEMAIN  R,LV=(R0),A=(R1)\n         L     R14,12(R13)\n         LR    R15,R4\n         LM    R0,R12,20(R13)\n         BR    R14\n*--------------------------------------------------------------------\n*        TABLE OF SMF SYSTEM IDS\n*--------------------------------------------------------------------\nSIDTAB   DS    0F\n         DC    CL4'MONA',F'1'\nSIDLENT  EQU   *-SIDTAB\n         DC    CL4'MONB',F'2'\n         DC    CL4'COLC',F'3'\n         DC    CL4'COLD',F'4'\n         DC    CL4'    ',F'5'\n         DC    CL4'WIZ1',F'6'\n         DC    CL4'WIZ3',F'7'\n*        DC    CL4'    ',F'8'\nSIDLEN   EQU   *-SIDTAB\nSID#ENT  EQU   SIDLEN/SIDLENT\n         DC    CL4'    ',F'16'\n*--------------------------------------------------------------------\n*        ASSORTED DATA ITEMS\n*--------------------------------------------------------------------\nRETCFLG  DC    F'&RETCFLG'             FUNCTION BRANCH CONTROL\nSUBRFLG  DC    F'&SUBRFLG'             FUNCTION BRANCH CONTROL\n*--------------------------------------------------------------------\nSIDDSECT DSECT                         GET SOME WORKING STORAGE\nSIDSAVE  DS    18F                     SAVE AREA\nSIDSID   DS    CL4                     MEANINGLESS TEMPORARY DATA AREA\nSIDDLEN  EQU   *-SIDDSECT\n*--------------------------------------------------------------------\n         PRINT OFF\n         CVT   DSECT=YES,LIST=NO\n         IEESMCA\n         PRINT ON\n         END\n./ ADD NAME=SOTTO    0100-01031-01031-1835-00058-00058-00000-ADDITON\n//SOTTO    PROC P=OTTO\n//*\n//* ****** OTTO - AUTOMATIC GROCERY STORE CLERK ***********************\n//*                                REMOVED P$.SITE.JOBTRI/TEC/05-14-90\n//*                             REMOVED S$.TRIAL.JOBSTREM/FAN/02-13-91\n//*                              CONVERTED TO 3 STEP PROC/PMC/10-05-93\n//*             ADDED ALTERNATE SITE JOBSTREM FOR LEVEL 3/PMC/10-14-93\n//*       MOVED S$.JOBSTREM TO TOP OF JOB00 CONCATENATION/PMC/10-14-93\n//*              CHANGED TO P$.(MON,COL,TOR).OTTO.CNTLLIB/PMC/06-14-94\n//*              CHANGED COND=(5.. TO COND=(2.. NEW MON2 /RLR/01-19-99\n//*                   &GAPSYS TO ALL APPROPRIATE DD STMTS/RLR/11-17-99\n//*\n//OTTO0005 EXEC  PGM=SIDRC\n//*\n//OTTO0010 EXEC PGM=&P,TIME=1440,COND=(1,NE,OTTO0005)     *MONA*\n//COMMANDS DD  DISP=SHR,DSN=P$.MON&GAPSYS..OTTO.CNTLLIB   *P$.MONA\n//         DD  DISP=SHR,DSN=S$&GAPSYS..OTTO.CNTLLIB       *S$A.\n//ENQEXCL  DD  DISP=OLD,DSN=ONLY.ONE.OTTO,                *ONLY.ONE\n//             VOL=REF=SYS1.LINKLIB,UNIT=SYSDA\n//INTRDR   DD  SYSOUT=(A,INTRDR)\n//JOB00    DD  DISP=SHR,DSN=S$$.JOBSTREM                  *S$$.\n//         DD  DISP=SHR,DSN=P$.MON.JOBSTREM               *P$.MON\n//         DD  DISP=SHR,DSN=P$.COL.JOBSTREM               *P$.COL\n//SYSUDUMP DD  SYSOUT=X\n//*\n//OTTO0020 EXEC PGM=&P,TIME=1440,COND=(2,NE,OTTO0005)     *MONB*\n//COMMANDS DD  DISP=SHR,DSN=P$.MON&GAPSYS..OTTO.CNTLLIB   *P$.MONB\n//         DD  DISP=SHR,DSN=S$&GAPSYS..OTTO.CNTLLIB       *S$A.\n//ENQEXCL  DD  DISP=OLD,DSN=ONLY.ONE.OTTO,                *ONLY.ONE\n//             VOL=REF=SYS1.LINKLIB,UNIT=SYSDA\n//INTRDR   DD  SYSOUT=(A,INTRDR)\n//JOB00    DD  DISP=SHR,DSN=S$$.JOBSTREM                  *S$$.\n//         DD  DISP=SHR,DSN=P$.MON.JOBSTREM               *P$.MON\n//         DD  DISP=SHR,DSN=P$.COL.JOBSTREM               *P$.COL\n//SYSUDUMP DD  SYSOUT=X\n//*\n//OTTO0030 EXEC PGM=&P,TIME=1440,COND=(3,NE,OTTO0005)     *COLC*\n//COMMANDS DD  DISP=SHR,DSN=P$.COL&GAPSYS..OTTO.CNTLLIB   *P$.COLC\n//         DD  DISP=SHR,DSN=S$&GAPSYS..OTTO.CNTLLIB       *S$C.\n//ENQEXCL  DD  DISP=OLD,DSN=ONLY.ONE.OTTO,                *ONLY.ONE\n//             VOL=REF=SYS1.LINKLIB,UNIT=SYSDA\n//INTRDR   DD  SYSOUT=(A,INTRDR)\n//JOB00    DD  DISP=SHR,DSN=S$$.JOBSTREM                  *S$$.\n//         DD  DISP=SHR,DSN=P$.COL.JOBSTREM               *P$.COL\n//         DD  DISP=SHR,DSN=P$.MON.JOBSTREM               *P$.MON\n//SYSUDUMP DD  SYSOUT=X\n//*\n//OTTO0040 EXEC PGM=&P,TIME=1440,COND=(4,NE,OTTO0005)     *COLD*\n//COMMANDS DD  DISP=SHR,DSN=P$.COL&GAPSYS..OTTO.CNTLLIB   *P$.COLD\n//         DD  DISP=SHR,DSN=S$&GAPSYS..OTTO.CNTLLIB       *S$D.\n//ENQEXCL  DD  DISP=OLD,DSN=ONLY.ONE.OTTO,                *ONLY.ONE\n//             VOL=REF=SYS1.LINKLIB,UNIT=SYSDA\n//INTRDR   DD  SYSOUT=(A,INTRDR)\n//JOB00    DD  DISP=SHR,DSN=S$$.JOBSTREM                  *S$$.\n//         DD  DISP=SHR,DSN=P$.COL.JOBSTREM               *P$.COL\n//         DD  DISP=SHR,DSN=P$.MON.JOBSTREM               *P$.MON\n//SYSUDUMP DD  SYSOUT=X\n//*\n./ ADD NAME=SYMBOLS  0101-01031-01031-1906-00006-00005-00000-ADDITON\n*  Example of some installation-defined symbols you'll see in SOTTO.\n&GAPLOC.   MON        STATIC\n&GAPSYS.   A          STATIC\n&SYSCLONE. NA         STATIC\n&SYSNAME.  MONA       STATIC\n&SYSPLEX.  LOCAL      STATIC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT332/FILE332.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT332", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}