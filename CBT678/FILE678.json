{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012601000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE678.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE678.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x05'", "DS1TRBAL": "b'\\xb2\\xa2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xc2\\x00\\x0b\\x04\\xc3\\x00\\x01\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04B\\x00\\x00\\x01\\x04\\x15\\x1f\\x01\\x04\\x15\\x1f\\t&\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf6@@@'", "ispf": {"version": "04.66", "flags": 0, "createdate": "2004-05-30T00:00:00", "modifydate": "2004-05-30T09:26:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-466"}, "text": "REGULAR CBT TAPE - VERSION 466    FILE:  678\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT466.FILE678\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   9 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,823 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/30/04    09:26:59    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x15\\x1f\\x01\\x04\\x15\\x1f\\t\\x02\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-30T00:00:00", "modifydate": "2004-05-30T09:02:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SOMITCW"}, "text": "        ADRUIXIT    ADRDSSU exit to authorize AWSADR\n        AWSADR      ADRDSSU Front-end that writes and reads AWS\n                    tape images\n        AWSADRJ     Sample DUMP JCL for AWSADR\n        AWSADRJ2    Sample RESTORE JCL for AWSADR\n        AWSDSSU     JCL to link ADRDSSU as AWSDSSU with exit\n                    ADRUIXIT in it\n        AWSADROL    ADRDSSU Front-end that writes and reads AWS\n                    tape images - old version\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE678": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04B\\x00\\x00\\x01\\x04\\x15\\x1f\\x01\\x04\\x15\\x1f\\t&\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf6@@@'", "ispf": {"version": "04.66", "flags": 0, "createdate": "2004-05-30T00:00:00", "modifydate": "2004-05-30T09:26:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "CBT-466"}, "text": "//***FILE 678 is a series of programs and DFDSS exits, so that      *   FILE 678\n//*           a DFDSS dump will write its output to an AWS-format   *   FILE 678\n//*           disk file, instead of to a tape.                      *   FILE 678\n//*                                                                 *   FILE 678\n//*       PDS members:                                              *   FILE 678\n//*                                                                 *   FILE 678\n//*     ADRUIXIT    ADRDSSU exit to authorize AWSADR                *   FILE 678\n//*     AWSADR      ADRDSSU Front-end that writes and reads AWS     *   FILE 678\n//*                 tape images                                     *   FILE 678\n//*     AWSADRJ     Sample DUMP JCL for AWSADR                      *   FILE 678\n//*     AWSADRJ2    Sample RESTORE JCL for AWSADR                   *   FILE 678\n//*     AWSDSSU     JCL to link ADRDSSU as AWSDSSU with exit        *   FILE 678\n//*                 ADRUIXIT in it                                  *   FILE 678\n//*     AWSADROL    ADRDSSU Front-end that writes and reads AWS     *   FILE 678\n//*                 tape images - old version                       *   FILE 678\n//*                                                                 *   FILE 678\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADRUIXIT": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x15\\x1f\\x01\\x04\\x15\\x1f\\t\\x02\\x00f\\x00f\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-30T00:00:00", "modifydate": "2004-05-30T09:02:00", "lines": 102, "newlines": 102, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWA JOB (xxxxxxxx,xxxx,1439,9999,9999),ADRUIXIT-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,COND=(4,LT)\n//*\n//* This must assemble and link before AWSDSSU links.\n//* If using LLA data sets, don't forget to update or\n//* refresh after JOBs.\n//*\n//* This is an exit to ADRDSSU to allow program AWSADR\n//* to convert ADRDSSU DUMP output to AWS format and to\n//* allow ADRDSSU RESTORE to read an AWS file and give\n//* ADRDSSU the ADRDSSU format data.\n//*\n//* This exit must be linked into ADRDSSU to work.\n//* See JCL AWSDSSU to link this exit, ADRDSSU and\n//* create a new program called AWSDSSU that is\n//* called by AWSADR.\n//*\n//HLASMCL  EXEC HLASMCL,PARM.C=(RENT,OBJECT,NODECK,TERM),\n//             PARM.L=RENT\n//SYSLIB   DD\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\n* ADRUIXIT User Exit.\n*\n* If a DUMP operation starting, turns on the UFNOOUT bit flag\n*   which will allow output DUMP records to not be written to\n*   the normal output when written to the output AWS file.\n*\n* If a RESTORE operation starting, turns on UFNOIN bit flag\n*   which allows records to be supplied from the AWS input\n*   file instead of an ADRDSSU DUMP format data set.\n*\n* If either bit is set, a return code of four tells ADRDSSU.\n*\n* Written: 2003-6-11\n* Problems: somitcw@erols.com\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * *\nADRUIXIT CSECT ,\nADRUIXIT AMODE 31                 ADRDSSU requires 31 bit addressing\nADRUIXIT RMODE ANY                ADRDSSU doesn't care about RMODE\n         SAVE  (14,12),,'ADRUIXIT.&SYSDATE..&SYSTIME'  Save registers\n         LR    R12,R15            Set a base register\n         USING ADRUIXIT,R12       Set addressability to the exit\n         USING ADRUFOB,R1         Set addressability to ADRUFO\n         TM    UFFUNCT1,UFFUDUMP  See if a DUMP function\n         BO    DUMP               Is DUMP, go set delete allow bit\n         TM    UFFUNCT1,UFFUREST  See if a RESTORE function\n         BZ    NOTSET             Is not RESTORE, go skip change\n         OI    UFAIFLGS,UFNOIN    Turn on \"No RESTORE input tape\" bit\n         WTO   'ADRUIXIT set UFNOIN bit to allow RESTORE' Debug\n         B     SET                Go indicate change and exit\nDUMP     DS    0H\n         OI    UFAIFLGS,UFNOOUT   Turn on \"No DUMP output tape\" bit\n         WTO   'ADRUIXIT set UFNOOUT bit to allow DUMP' Debug\nSET      DS    0H\n         LM    R14,R12,12(R13)    Restore other registers\n         LA    R15,4              Indicate that a bit was changed\n         BR    R14                Return to AWSDSSU\nNOTSET   DS    0H\n         LM    R14,R12,12(R13)    Restore other registers\n         SLR   R15,R15            Indicate that nothing was touched\n         BR    R14                Return to AWSDSSU\n         LTORG  ,                 Keep literals in their own CSECT\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* DSECT for ADRUIXIT\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n         ADRUFO ,                 Include the ADRUFO mapping DSECT\n*\nADRUIXIT CSECT ,                  Resume the main CSECT\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* Register equates\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\nR0       EQU   0                  Register equate for register 0\nR1       EQU   1                  Register equate for register 1\nR2       EQU   2                  Register equate for register 2\nR3       EQU   3                  Register equate for register 3\nR4       EQU   4                  Register equate for register 4\nR5       EQU   5                  Register equate for register 5\nR6       EQU   6                  Register equate for register 6\nR7       EQU   7                  Register equate for register 7\nR8       EQU   8                  Register equate for register 8\nR9       EQU   9                  Register equate for register 9\nR10      EQU   10                 Register equate for register 10\nR11      EQU   11                 Register equate for register 11\nR12      EQU   12                 Register equate for register 12\nR13      EQU   13                 Register equate for register 13\nR14      EQU   14                 Register equate for register 14\nR15      EQU   15                 Register equate for register 15\n         END   ,\n//L.SYSLMOD DD DSN=USER.LINKLIB,DISP=SHR,SPACE=\n   NAME ADRUIXIT(R)\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AWSADR": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x17\\x01\\x04\\x15\\x1f\\x01\\x04\\x15\\x1f\\t \\x033\\x033\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-05-30T00:00:00", "modifydate": "2004-05-30T09:20:17", "lines": 819, "newlines": 819, "modlines": 0, "user": "SOMITCW"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "AWSADRJ": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x15\\x1f\\x01\\x04\\x15\\x1f\\t\\x02\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-30T00:00:00", "modifydate": "2004-05-30T09:02:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWA JOB (xxxxxxxx,xxxx,1439,9999,9999),AWSADRJ-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW\n//*\n//* Sample JCL for DUMP with AWSADR\n//*\n//FINDSPC EXEC PGM=IEFBR14\n//DDONLY   DD  UNIT=SYSDA,SPACE=(TRK,45)  BELOW IS (15,15)\n//*\n//AWSADR  EXEC PGM=AWSADR\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n DUMP DATASET(INCLUDE(SOMITCW.TEST.AWSADR)) -\n OUTDDNAME(ONETRACK)   /* Fake OUTPUT for ADRDSSU    */ -\n COMPRESS              /* AWS is not HET             */\n//ONETRACK DD  DSN=SOMITCW.TEST.AWSADR.ONETRACK,DISP=OLD\n//* ONETRACK DD  DSN=SOMITCW.TEST.AWSADR.ONETRACK,DISP=(,CATLG,DELETE),\n//*            UNIT=SYSDA,SPACE=(TRK,(15,15),RLSE),\n//*            DSORG=PS,RECFM=U,LRECL=0,BLKSIZE=27998\n//O0000001 DD  DSN=SOMITCW.TEST.AWSADR.AWS,DISP=(,CATLG,DELETE),\n//             VOL=REF=*.FINDSPC.DDONLY,\n//             SPACE=(TRK,(15,15),RLSE),\n//             RECFM=U,LRECL=0,BLKSIZE=27998\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AWSADRJ2": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x15\\x1f\\x01\\x04\\x15\\x1f\\t\\x02\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-30T00:00:00", "modifydate": "2004-05-30T09:02:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWA JOB (xxxxxxxx,xxxx,1439,9999,9999),AWSADRJ2-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW\n//*\n//* Sample JCL for RESTORE with AWSADR\n//*\n//FINDSPC EXEC PGM=IEFBR14\n//DDONLY   DD  UNIT=SYSDA,SPACE=(TRK,45)\n//*\n//AWSADR  EXEC PGM=AWSADR\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n RESTORE -\n CATALOG -\n DATASET(INCLUDE(SOMITCW.TEST.AWSADR)) -\n INDDNAME(EXTRADD)    /* Fake input for ADRDSSU    */ -\n OUTDDNAME(OUTPUTDD)  /* output disk volume        */ -\n RENAMEUNCONDITIONAL((SOMITCW.TEST.AWSADR,        -\n                      SOMITCW.TEST.AWSADR.RESTORED))\n//EXTRADD  DD  DISP=SHR,DSN=SOMITCW.TEST.AWSADR.AWS  Fake input\n//I0000001 DD  DISP=OLD,DSN=SOMITCW.TEST.AWSADR.AWS  Real input\n//*            DSORG=PS,RECFM=U,LRECL=0,BLKSIZE=27998  both inputs\n//OUTPUTDD DD  DISP=SHR,VOL=REF=*.FINDSPC.DDONLY     Output disk volume\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AWSADROL": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x15\\x1f\\x01\\x04\\x15\\x1f\\t\\x02\\x03\\x12\\x03\\x12\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-30T00:00:00", "modifydate": "2004-05-30T09:02:00", "lines": 786, "newlines": 786, "modlines": 0, "user": "SOMITCW"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "AWSDSSU": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x15\\x1f\\x01\\x04\\x15\\x1f\\t\\x02\\x00 \\x00 \\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-30T00:00:00", "modifydate": "2004-05-30T09:02:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWA JOB (xxxxxxxx,xxxx,1439,9999,9999),AWSDSSU-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW\n//*\n//* This must link after ADRUIXIT assembles and links.\n//* If using LLA data sets, don't forget to update or\n//* refresh after JOBs.\n//*\n//* This JCL is used to link an updated ADRUIXIT into ADRDSSU\n//* to allow program AWSADR to bypass writing records for a\n//* DUMP operation and allow inserting records for a RESTORE\n//* operation.  AWSADR translates ADRDSSU type records to\n//* and from AWS tape format, so must insert and delete.\n//*\n//* The output of this JCL is a program named AWSDSSU instead\n//* ADRDSSU.  Program AWSADR calls AWSDSSU.\n//* There shouldn't be any reason to execute AWSDSSU from JCL.\n//*\n//HEWL    EXEC PGM=HEWL,\n//  PARM=(RENT,REUS,'AMODE=31',NCAL,LIST,LET,XREF,MAP)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=V3390,SPACE=(CYL,(10,10))\n//TEMPLIB  DD  DSN=USER.LINKLIB,DISP=SHR   Input ADRUIXIT\n//LINKLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR   Input ADRDSSU\n//SYSLIN   DD  *\n  SETCODE  AC(1)\n  ORDER    ADRDSSU(P)\n INCLUDE TEMPLIB(ADRUIXIT)\n INCLUDE LINKLIB(ADRDSSU)\n ENTRY ADRDSSU\n NAME AWSDSSU(R)\n//SYSLMOD  DD  DSN=USER.LINKLIB,DISP=SHR   Output AWSDSSU\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT678/FILE678.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT678", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}