*          PPPP  DDDD   SSSS  CCCC L     EEEEE   A   N   N            *
*          P   P D   D S     C     L     E      A A  NN  N            *
*          PPPP  D   D  SSS  C     L     EEEE  A   A N N N            *
*          P     D   D     S C     L     E     AAAAA N  NN            *
*          P     DDDD  SSSS   CCCC LLLLL EEEEE A   A N   N            *
*                                                                     *
         TITLE 'PDSCLEAN - PDS/PDSE UTILITY PROGRAM'
PDSCLEAN  CSECT
PDSCLEAN  AMODE 31
PDSCLEAN  RMODE 24
***********************************************************************
*                                                                     *
*  THIS PROGRAM WAS PICKED UP FROM THE CBT TAPE (CBT FILE 040 FROM    *
*  PEOPLES NATIONAL BANK OF WASHINGTON).                              *
*                                                                     *
*  ADDED CODE TO CLEAN A PDS/E AND CHANGE THE INPUT TO A SYSIN FILE.  *
*  ADDED CODE TO CHANGE THE INPUT TO PROCESSING A SYSIN FILE.         *
*                              - TKMILLE/RLRICE 09/01/2004            *
*  ADDED CODE TO COMPRESS A PDS DATASET.                              *
*                              - TKMILLE        10/27/2004            *
*  MADE THE PROGRAM REENTRANT AND AMODE 31.                           *
*                              - TKMILLE        06/09/2009            *
*  CHANGED PROGRAM TO USE THE UNIVERSAL DATASET CONVERSION ROUTINE    *
*     CVTPCNVT (IECPCNVT) TO ACCOMODATE PDS DATASETS HAVING MORE      *
*     THAN 65,635 TRACKS IN THE ALTERDIR FUNCTION. CHANGED PROGRAM    *
*     TO USE ENTRY POINT AT OFFSET +12 FROM THE ADDRESS IN CVTPCNVT   *
*     PER THE IBM DOCUMENT SC26-7400-07 (DFSMSdfp Advanced Services   *
*     Manual).                 - TKMILLE        06/23/2009            *
*                                                                     *
*  THIS PROGRAM WILL PERFORM THREE (3) FUNCTIONS:                     *
*  1) REINITIALIZE ONE OR MORE PARTIONED DATASETS (OR PDSE'S)         *
*  2) INCREASE THE NUMBER OF DIRECTORY BLOCKS FOR A PARTITIONED       *
*     DATASET.                                                        *
*  3) COMPRESS A PDS DATASET.                                         *
*                                                                     *
*  BY REINITIALIZE IT IS MEANT THAT THE DIRECTORY BLOCKS WILL         *
*  BE REWRITTEN TO ZEROS AND THE NEXT AVAILABLE POINTER RESET         *
*  TO THE START OF THE DIRECTORY.                                     *
*  ALSO THE NEXT AVAILABLE DATA AREA POINTER IS RESET TO FOLLOW       *
*  DIRECTORY AREA.                                                    *
*  THE ADVANTAGE OF THIS METHOD IS THAT THE DATA SET                  *
*  DOES NOT HAVE TO BE SCRATCHED AND REALLOCATED THEREBY              *
*  PRESERVING THE ALLOCATED AREA.                                     *
*                                                                     *
*  FOR PDS/E DATASETS, THE STOW MACRO IS USED TO INITIALIZE THE       *
*  MEMBERS OF THE DATASET.  UNLESS IBM APAR OA13224 IS IMPLEMENTED,   *
*  THE DISPOSITION IN THE JCL MUST BE SET TO EITHER DISP=MOD          *
*  OR DISP=OLD FOR PDS/E DATASETS (IT IS A GOOD IDEA TO USE           *
*  EXCLUSIVE SERIALIZATION ANYWAY FOR THE 'PDSCLEAN' FUNCTIONS TO     *
*  GUARANTEE DATA INTEGRITY FOR ALL USING THE LIBRARIES INVOLVED).    *
*                                                                     *
*  INPUT SYSIN RECORDS IN ONE OF THESE THREE COMMAND FORMATS:         *
*  (THE FUNCTION VERB CAN START IN ANY COLUMN)                        *
*                                                                     *
*  ZErodir  DDNAME                                                    *
*  COmpress DDNAME                                                    *
*  ALterdir DDNAME +NNNN  (WHERE NNNN IS ADDITIONAL DIRECTORY BLOCKS  *
*                          NNNN IS A NUMERIC NUMBER FROM 1-8 DIGITS.  *
*                          NEGATIVE DIRBLKS VALUES ARE NOT ALLOWED.   *
*                          NNNN CAN ALSO BE CODED WITHOUT THE '+'     *
*                          SIGN.)                                     *
*                                                                     *
*  THE FOLLOWING DDNAMES MUST BE ADDED TO THE JCL WHEN USING          *
*  THE 'ALTERDIR' OR 'COMPRESS' FUNCTION.  THESE 3 ADDITIONAL DDNAMES *
*  ARE USED TO CALL IEBCOPY TO UNLOAD/RELOAD THE PDS MEMBERS:         *
*                                                                     *
*  //UNLOAD      DD UNIT=SYSALLDA,SPACE=(CYL,(050,050))               *
*  //SYSUT1      DD UNIT=SYSALLDA,SPACE=(CYL,(050,050))               *
*  //SYSUT2      DD UNIT=SYSALLDA,SPACE=(CYL,(050,050))               *
*                                                                     *
*  THE 'ALTERDIR' COMMAND FUNCTION ALSO COMPRESSES PDS DATASETS USING *
*  'IEBCOPY' UNLOAD/RELOAD TO/FROM A TEMP FILE.  IT IS THEREFORE A    *
*  GOOD IDEA TO USE DISP=OLD ON THE FILE ALLOCATION FOR 'ALTERDIR',   *
*  'COMPRESS', AND 'ZERODIR' FUNCTIONS.                               *
*                                                                     *
*  IF THE IEBCOPY RELOAD PROCESS FAILS FOR LACK OF SPACE TO RELOAD    *
*  THE MEMBERS, THE DIRECTORY BLOCKS ARE RESET TO THEIR ORIGINAL      *
*  ALLOCATION VALUE AND THE PDS IS RELOADED WITH THE UNLOAD IMAGE     *
*  TO RESTORE THE PDS TO ITS ORIGINAL STATE (SEE RECOV_FL).           *
*                                                                     *
*  THE NUMBER OF DIRECTORY BLOCKS CAN BE INCREASED (NOT DECREASED)    *
*  BY RESPECIFYING THE ADDITIONAL AMOUNT OF BLOCKS ON THE 'ALTERDIR'  *
*  STATEMENT (DOES NOT APPLY TO PDS/ES).                              *
*                                                                     *
*  SAMPLE JCL:                                                        *
*  //PDSCLEAN EXEC PGM=PDSCLEAN                                       *
*  //SYSPRINT DD SYSOUT=*                                             *
*  //$SYSPRT$ DD SYSOUT=*                                             *
*  //SYSUDUMP DD SYSOUT=*                                             *
*  //DD1      DD DISP=OLD,DSN=MY.PDS1                                 *
*  //DD2      DD DISP=OLD,DSN=MY.PDS2                                 *
*  //DD3      DD DISP=OLD,DSN=MY.PDSE1                                *
*  //DD4      DD DISP=SHR,DSN=MY.PDSE2   OK WITH APAR OA13224 APPLIED *
*  //DD5      DD DISP=OLD,DSN=MY.PDS3                                 *
*  //DD6      DD DISP=OLD,DSN=MY.UNCOMPR.PDS                          *
*  //UNLOAD   DD UNIT=SYSALLDA,SPACE=(CYL,(050,050))                  *
*  //SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,(050,050))                  *
*  //SYSUT2   DD UNIT=SYSALLDA,SPACE=(CYL,(050,050))                  *
*  //SYSIN    DD *                                                    *
*     ZERODIR  DD1                                                    *
*     ZE       DD2                                                    *
*     ALTERDIR DD2 +7                                                 *
*     ZERODIR  DD3                                                    *
*     ZERODIR  DD4                                                    *
*     AL       DD5  6                                                 *
*     COMPRESS DD5                                                    *
*     CO       DD6                                                    *
*     ALTERDIR DD6 +0    (SAME EFFECT AS A COMPRESS)                  *
*  /*                                                                 *
*                                                                     *
*  NOTES:                                                             *
*   (1) IN THE SAMPLE JCL LISTED ABOVE, DDNAMES                       *
*       "DD1", "DD2", "DD3" AND "DD4" WILL BE CLEANED (EMPTIED).      *
*       (DDNAMES "DD3" AND "DD4" ARE PDSES).                          *
*   (2) DDNAME "DD2" WILL ALSO HAVE ITS DIRECTORY BLOCK ALLOCATION    *
*       VALUE CHANGE TO OLD ALLOCATION VALUE + 7 BLOCKS.              *
*   (3) DDNAME "DD5" WILL ALSO HAVE ITS DIRECTORY BLOCK ALLOCATION    *
*       VALUE CHANGE TO OLD ALLOCATION VALUE + 6 BLOCKS.              *
*   (4) YOU CANNOT SPECIFY A NEGATIVE DIRECTORY BLOCK CHANGE ON THE   *
*       'ALTERDIR' COMMAND STATEMENT.                                 *
*   (5) YOU CANNOT USE ANY OF THE FOLLOWING DDNAMES WITH YOUR         *
*       COMMANDS BECAUSE THEY ARE ALREADY USED BY PDSCLEAN:           *
*          UNLOAD  SYSUT1  SYSUT2                                     *
*   (6) THE COMMANDS 'EMPTYO' AND 'EMPTY' CAN BE USED IN LIEU OF      *
*       'ZERODIR'.  THESE ARE ALIASES THAT SOME PEOPLE ARE USED TO    *
*       USING IN PLACE OF 'ZERODIR'.                                  *
*   (7) DISP=OLD MUST BE USED TO 'ZERODIR' PDS/E DATASETS UNLESS IBM  *
*       APAR OA13224 IS APPLIED.  THIS IS A GOOD IDEA ANYWAY TO       *
*       ENSURE DATA INTEGRITY, BUT IT IS NOT MANDATORY. EXCLUSIVE     *
*       SERIALIZATION SHOULD BE USED FOR ALL OF THE 'PDSCLEAN'        *
*       FUNCTIONS IF POSSIBLE.                                        *
*   (8) IF A DIRECTORY BLOCKS VALUE IS CODED ON THE 'ZERODIR'         *
*       COMMAND, IT IS IGNORED.                                       *
*   (9) COMMENTS ARE ALLOWED TO BE CODED AFTER THE COMMANDS.  THESE   *
*       MUST BE DELIMITED WITH A TRAILING BLANK BEHIND THE COMMAND.   *
*       BLANK LINES ARE ALSO ALLOWED.  OTHER THAN THIS, COMMENTS ARE  *
*       NOT ALLOWED IN THE FORM OF LEADING "/*" OR "*".               *
*                                                                     *
*  REGISTER USAGE:                                                    *
*                                                                     *
*  R0-R4   - WORK REGISTERS                                           *
*  R5      - MAPS CVT DSECT                                           *
*  R6      - MAPS EXCP DCB                                            *
*  R7      - WORK REGISTER                                            *
*  R8      - THIRD PROGRAM BASE REGISTER CHAINED TO R10               *
*  R9      - MAPS TCB DSECT                                           *
*  R10     - SECOND PROGRAM BASE REGISTER CHAINED TO R12              *
*  R11     - MAPS IOB DSECT (STANDARD SECTION)                        *
*  R12     - FIRST PROGRAM BASE REGISTER                              *
*  R13     - MAPS OBTAINED SAVEAREA                                   *
*  R14-R15 - WORK REGISTERS                                           *
*                                                                     *
*  RETURN CODES FROM PDSCLEAN:                                        *
*                                                                     *
*  0      => SUCCESSFULL CALL TO PDSCLEAN                             *
*  4      => MINOR ERROR IN PDSCLEAN SYSIN INPUT COMMANDS (WARNING)   *
*  8      => COMMAND CODE IS MISSING OR INVALID ON SYSIN RECORD       *
*            DDNAME IS MISSING OR INVALID ON SYSIN RECORD             *
*            DIRECTORY BLOCKS VALUE MISSING OR INVALID ON SYSIN       *
*                RECORD ON THE 'ALTERDIR' COMMAND                     *
*            BAD RETURN CODE FROM STOW MACRO                          *
*            TRIED TO ISSUE 'ALTERDIR' FUNCTION AGAINST A PDS/E FILE  *
*            DDNAME SPECIFIED ON SYSIN RECORD NOT FOUND IN TIOT TABLE *
* 16      => SEVERE ERROR - TERMINATES ALL SYSIN PROCESSING           *
*                                                                     *
*                                                                     *
*  CERTIFICATION                                                      *
*  -------------                                                      *
*                                                                     *
*  THE SOURCE CODE FOR 'PDSCLEAN' MUST BE ASSEMBLED WITH              *
*  THE HIGH-LEVEL ASSEMBLER.                                          *
*                                                                     *
*  THE 'PDSCLEAN' MODULE MUST RESIDE IN AN APF-AUTHORIZED             *
*  LIBRARY WITH AUTHORIZATION CODE 001 (AC=1).                        *
*                                                                     *
*  THE 'PDSCLEAN' MODULE MUST RESIDE IN THE IKJTSO00 MEMBER IN THE    *
*  'AUTHPGM' SECTION IF THIS PROGRAM IS CALLED FROM A TSO REXX        *
*  EXEC (SUCH AS 'ALTERDIR', 'COMPRESS', AND 'ZERODIR' WHICH COME     *
*  ALONG WITH THIS PROGRAM ON THE CBT TAPE - FILE 693).               *
*                                                                     *
***********************************************************************
*                                                                     *
***********************************************************************
*                                                                     *
*        HOUSEKEEPING                                                 *
*                                                                     *
***********************************************************************
         SAVE  (14,12),,PDSCLEAN_ASSEMBLED_ON_&SYSDATC._&SYSTIME
         LR    R12,R15              Load entry address
         LA    R10,2048(,R12)       Chain R10 to R12 Base
         LA    R10,2048(,R10)
         LA    R8,2048(,R10)        Chain R8  to R10 Base
         LA    R8,2048(,R8)
         USING PDSCLEAN,R12,R10,R8  Declare entry base registers
         LR    R5,R1                Preserve passed parmlist address
         LR    R6,R13               Store SAVEAREA Backward link
         L     R3,=A(STORSIZE)      Size of storage to obtain
         STORAGE OBTAIN,LENGTH=(R3),LOC=(BELOW)
         ST    R1,8(,R13)           Set SAVEAREA Forward link
         LR    R13,R1               Address of obtained area
         USING STORAREA,R13         Addressability to obtained area
INITOBTN DS    0H                  Initialize the obtained storage area
         LR    R2,R13               Address of target of move (obtnd)
         L     R3,=A(STORSIZE)      Length of the target of move
         XR    R14,R14             From address (irrelevant with len=0)
         XR    R15,R15              Pad/Length to propagate in odd reg
         MVCL  R2,R14          Propagate binary zeroes in obtained area
         L     R1,0(,R5)            Pick up address of parm field
         ST    R1,PARMADDR          Store passed pointer to parms
         ST    R6,4(,R13)           Set SAVEAREA Backward link
*********************************************************************
         TITLE 'HOUSEKEEPING AND INITIALIZATION'
*********************************************************************
         ZAP   SYSINCNT,ZEROPK                    INITIALIZE
         ZAP   VALIDCNT,ZEROPK                    INITIALIZE
         ZAP   INVLDCNT,ZEROPK                    INITIALIZE
         ZAP   ERRORCNT,ZEROPK                    INITIALIZE
         ZAP   CLEANCNT,ZEROPK                    INITIALIZE
         ZAP   COMPRSCT,ZEROPK                    INITIALIZE
         ZAP   DIRCHGCT,ZEROPK                    INITIALIZE
         MVC   PGMECB,=A(0)                       INITIALIZE
         MVC   PGMTCB,=A(0)                       INITIALIZE
         MVC   FUNCTION,BLANKLIN                  INITIALIZE
         MVC   DDNAME,BLANKLIN                    INITIALIZE
         MVC   ABENDCD,BLANKLIN                   INITIALIZE
         MVI   ABENDCD1,C'0'                      INITIALIZE
         MVC   HEADING1(HEADING1L),BLANKLIN       INITIALIZE
         MVC   H1LIT1,=CL9'PDSCLEAN '             INITIALIZE
         MVC   H1LIT2,=CL42'  PDS/PDSE CLEAN/ALTER/COMPRESS PROGRAM   '
         MVC   TRAILER1(TRAILER1L),BLANKLIN       INITIALIZE
         MVC   T1LIT1,=CL4' => '                  INITIALIZE
         MVC   SYSINLN(SYSINLNL),BLANKLIN         INITIALIZE
         MVC   SYSRECMS,=CL13'SYSIN REC => '      INITIALIZE
         MVC   MSGTXTLN(MSGTXTL),BLANKLIN         INITIALIZE
         MVC   READCCW(READCCWL),READCCWI         RELOCATE READCCW
         LA    R0,IDSEARCH
         STCM  R0,7,READCCW+1
         LA    R0,READCCW
         STCM  R0,7,READCCW+9
         LA    R0,COUNT
         STCM  R0,7,READCCW+17
         MVC   WRITECCW(WRITCCWL),WRITCCWI        RELOCATE WRITECCW
         LA    R0,IDSEARCH
         STCM  R0,7,WRITECCW+1
         LA    R0,WRITECCW
         STCM  R0,7,WRITECCW+9
         LA    R0,COUNT
         STCM  R0,7,WRITECCW+17
         MVC   EOFCCW(EOFCCWL),EOFCCWI            RELOCATE EOFCCW
         LA    R0,IDSEARCH
         STCM  R0,7,EOFCCW+1
         LA    R0,EOFCCW
         STCM  R0,7,EOFCCW+9
         LA    R0,COUNT
         STCM  R0,7,EOFCCW+17
         MVC   IEBCOPY_OPTLIST(IEBCOPY_OPTLISTL),IEBCOPY_OPTLISTI
         MVC   IEBCOPY_DDNMLIST(IEBCOPY_DDNMELSL),IEBCOPY_DDNMELST
         MVI   IEBCOPY_FUNCTION,C' '              INITIALIZE
         MVC   SYSPRINT(SYSPRINL),SYSPRINI       RELOCATE SYSPRINT DCB
         MVC   SYSIN(SYSINIL),SYSINI             RELOCATE SYSIN    DCB
         MVC   EXCPDCB(EXCPDCBL),EXCPDCBI        RELOCATE EXCPDCB  DCB
         MVC   PDSEDCB(PDSEDCBL),PDSEDCBI        RELOCATE PDSEDCB  DCB
*
         B     HOUSE_CONT
***********************************************************************
***********************************************************************
MOD_LEVEL  DC  CL9'V01.01.08'      PROGRAM VERSION RELEASE MOD. LEVEL
***********************************************************************
*********************************************************************
*        Main routine
*********************************************************************
HOUSE_CONT DS  0H
         MVC   H1VERS,MOD_LEVEL  PROGRAM MAINTENANCE LEVEL VERS.REL.MOD
         TIME  ,                   GET CURRENT DATE AND TIME
         STM   R0,R1,CURRTIME       STORE THE CURRENT TIME AND JULDATE
         CLI   CURRDATE+1,X'80'
         BH    CENT20
         MVI   CURRDATE+0,X'20'
         B     UNPKJDAT
CENT20   DS    0H
         MVI   CURRDATE+0,X'19'
UNPKJDAT DS    0H
         UNPK  JULIANDT(7),CURRDATE(4)       STORE THE JULIAN DATE
         OI    JULIANDT+6,X'F0'              FIX THE SIGN
         MVC   H1DATE(4),JULIANDT
         MVI   H1DATE+4,C'.'
         MVC   H1DATE+5(3),JULIANDT+4
         MVC   DATEXXXX(7),JULIANDT
         MVC   STORTIME,CURRTIME
         MVI   STORTMSG,X'0F'
         UNPK  TIME9(9),STORTIME(5)          UNPACK THE TIME
         MVC   DISPTMHH(2),TIME9
         MVI   DISPTMC1,C':'
         MVC   DISPTMMM(2),TIME9+2
         MVI   DISPTMC2,C':'
         MVC   DISPTMSS(2),TIME9+4
         MVC   H1TIME(8),DISPTIME
         LA    R3,SYSPRINT                 DCB to open
         MVC   WKOPENCL(OPENIL),OPENI
         LA    R4,WKOPENCL                 OPEN/CLOSE WORK AREA
         OPEN  ((R3),OUTPUT),MODE=31,MF=(E,(R4))   OPEN SYSPRINT DCB
         PUT   SYSPRINT,HEADING1   OUTPUT HEADING LINE 1
*---------------------------------------------------------------------*
*                                                                     *
*  PROCESS THE SYSIN RECORDS AND PARSE OUT THE TOKEN KEYWORDS         *
*                                                                     *
*  REGISTER USAGE:                                                    *
*                                                                     *
*   R2  - CHARACTER POINTER WITHIN SYSIN RECORD                       *
*   R3  - FIRST SIGNIFICANT CHAR WITHIN CURRENT TOKEN BEING PARSED    *
*   R4  - LENGTH OF TOKEN CURRENTLY BEING PARSED                      *
*   R5  - POINTS TO THE SYSIN INPUT RECORD BUFFER AREA                *
*   R6  - RIGHT JUSTIFIER INDEX REGISTER FOR DIR BLOCKS FIELD ON THE  *
*         'ALTERDIR' COMMAND.                                         *
*         ALSO USED TO PASS RETURN CODE TO MAX RETURN CODE ROUTINE    *
*                                                                     *
*  INPUT SYSIN RECORDS (ONE OF THESE THREE FORMATS):                  *
*                                                                     *
*  ZERODIR  DDNAME                                                    *
*  COMPRESS DDNAME                                                    *
*  ALTERDIR DDNAME +NNNN  (WHERE NNNN IS ADDITIONAL DIRECTORY BLOCKS  *
*                          NNNN IS A NUMERIC NUMBER FROM 1-8 DIGITS.  *
*                          NEGATIVE DIRBLKS VALUES ARE CHANGED TO     *
*                          THEIR POSITIVE ABSOLUTE VALUE SINCE THEY   *
*                          (NEGATIVES) ARE NOT ALLOWED.               *
*                                                                     *
*---------------------------------------------------------------------*
         TITLE 'TEST THE APF AUTHORIZATION - PROCEDURE'
*---------------------------------------------------------------------*
TEST_APF DS  0H
         TESTAUTH                  CHECK APF AUTHORIZATION
         LTR   R15,R15             APF AUTHORIZED ?
         BZ    OPEN_SYSIN          YES - SKIP
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,NOTAUTHM     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,BLANKLIN
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
OPEN_SYSIN DS  0H
*---------------------------------------------------------------------*
         TITLE 'PROCESS SYSIN RECORD - PROCEDURE'
         LA    R3,SYSIN                DCB to open
         MVC   WKOPENCL(OPENIL),OPENI
         LA    R4,WKOPENCL             OPEN/CLOSE WORK AREA
         OPEN  ((R3),INPUT),MODE=31,MF=(E,(R4))   OPEN SYSIN DCB
         MVI   OPENED_SYSIN,C'Y'
*---------------------------------------------------------------------*
GET_SYSIN  DS  0H
         GET   SYSIN,SYSINREC
         LA    R5,SYSINREC
         CLC   SYSINREC(SYSINRCL),BLANKLIN  IS THIS A BLANK SYSIN LINE?
         BE    GET_SYSIN                    YES - IGNORE IT
         MVI   HAVE_FUNC,C'N'
         MVI   HAVE_DDN,C'N'
         MVI   HAVE_DB,C'N'
         AP    SYSINCNT,ONEPK          INCREMENT SYSIN INPUT REC COUNT
         PUT   SYSPRINT,BLANKLIN       OUTPUT BLANK LINE
         MVC   SYSRECRD,SYSINREC
         PUT   SYSPRINT,SYSINLN        OUTPUT SYSIN RECORD
         LA    R2,SYSINREC-1
**********************************************************************
*** FUNCTION LOOP (GET FUNCTION TOKEN) *******************************
**********************************************************************
FUNC_LOOP  DS  0H
         LA    R2,1(,R2)
         LA    R1,SYSINRCL(,R5)
         CR    R2,R1               EXCEEDED SYSIN RECORD LENGTH ?
         BH    ASSESS_TOKENS       YES - REACHED END OF RECORD
         CLI   0(R2),C' '           HAVE A BLANK DELIMITER ?
         BE    FL_01                YES - THEN VALIDATE THE TOKEN
         CLI   0(R2),X'00'          HAVE A NULL DELIMITER ?
         BE    FL_01                YES - THEN VALIDATE THE TOKEN
         CLI   HAVE_FUNC,C'Y'
         BE    FUNC_LOOP
         MVI   HAVE_FUNC,C'Y'
         LR    R3,R2                R3 POINTS TO START OF INPUT TOKEN
         B     FUNC_LOOP
FL_01    DS    0H                  HAVE A BLANK OR NULL CHARACTER
         CLI   HAVE_FUNC,C'Y'
         BNE   FUNC_LOOP           HAVEN'T HAD 1ST TOKEN YET (FUNCTION)
         LR    R4,R2
         LR    R1,R3
         SR    R4,R1               GET LENGTH OF FUNCTION TOKEN
         ST    R4,FUNCTLN          STORE LENGTH OF FUNCTION TOKEN
         BCTR  R4,0                SUBTRACT 1 FOR EX OPCODE
         MVC   FUNCTION,BLANKLIN
         MVC   MSGDSN,BLANKLIN
         EX    R4,MVINVMSG
         EX    R4,MVFUNCTN
         CLC   FUNCTLN,=A(2)       IS LENGTH OF TOKEN < 2 ?
         BL    TOKNLNER            FUNCTION LENGTH ERROR
         LA    R1,8(,R3)
         CR    R2,R1               EXCEEDED FUNCTION LENGTH (8 CHARS)?
         BH    INVFUNCN
         EX    R4,CMPZEROD         COMMAND FUNCTION = 'ZERODIR' ?
         BE    LDZERDIR            YES - VALID FUNCTION - MOVE ON
         EX    R4,CMPALTDR         COMMAND FUNCTION = 'ALTERDIR' ?
         BE    LDALTDIR            YES - VALID FUNCTION - MOVE ON
         EX    R4,CMPCOMPR         COMMAND FUNCTION = 'COMPRESS' ?
         BE    LDCOMPRS            YES - VALID FUNCTION - MOVE ON
         EX    R4,CMPEMPTY         COMMAND FUNCTION = 'EMPTY' ?
         BE    LDZERDIR            YES - REPLACE WITH 'ZERODIR' - GO ON
         EX    R4,CMPEMPTO         COMMAND FUNCTION = 'EMPTYO' ?
         BE    LDZERDIR            YES - REPLACE WITH 'ZERODIR' - GO ON
         EX    R4,CMPEMPDR         COMMAND FUNCTION = 'EMPTYDIR' ?
         BE    LDZERDIR            YES - REPLACE WITH 'ZERODIR' - GO ON
         B     INVFUNCN
MVFUNCTN DS    0H
         MVC   FUNCTION(0),0(R3)
CMPZEROD DS    0H
         CLC   0(0,R3),ZERODIR
CMPALTDR DS    0H
         CLC   0(0,R3),ALTERDIR
CMPCOMPR DS    0H
         CLC   0(0,R3),COMPRESS
CMPEMPTY DS    0H
         CLC   0(0,R3),EMPTY
CMPEMPTO DS    0H
         CLC   0(0,R3),EMPTYO
CMPEMPDR DS    0H
         CLC   0(0,R3),EMPTYDIR
MVINVMSG DS    0H
         MVC   MSGDSN(0),0(R3)
LDALTDIR DS   0H
         MVC   FUNCTION,ALTERDIR    LOAD FUNCTION "ALTERDIR"
         B     DDNAME_LOOP
LDZERDIR DS   0H
         MVC   FUNCTION,ZERODIR     LOAD FUNCTION "ZERODIR"
         B     DDNAME_LOOP
LDCOMPRS DS   0H
         MVC   FUNCTION,COMPRESS    LOAD FUNCTION "COMPRESS"
**********************************************************************
*** DDNAME LOOP (GET DDNAME TOKEN) ***********************************
**********************************************************************
DDNAME_LOOP    DS 0H
         LA    R2,1(,R2)
         LA    R1,SYSINRCL(,R5)
         CR    R2,R1               EXCEEDED SYSIN RECORD LENGTH ?
         BH    ASSESS_TOKENS       YES - REACHED THE END OF RECORD
         CLI   0(R2),C' '           HAVE A BLANK DELIMITER ?
         BE    DD_01                YES - THEN VALIDATE THE TOKEN
         CLI   0(R2),X'00'          HAVE A NULL DELIMITER ?
         BE    DD_01                YES - THEN VALIDATE THE TOKEN
         CLI   HAVE_DDN,C'Y'
         BE    DDNAME_LOOP
         MVI   HAVE_DDN,C'Y'
         LR    R3,R2                R3 POINTS TO START OF INPUT TOKEN
         B     DDNAME_LOOP
DD_01    DS    0H                  HAVE A BLANK OR NULL CHARACTER
         CLI   HAVE_DDN,C'Y'
         BNE   DDNAME_LOOP         HAVEN'T HAD 2ND TOKEN YET (DDNAME)
         LR    R4,R2
         LR    R1,R3
         SR    R4,R1               GET LENGTH OF DDNAME TOKEN
         ST    R4,DDNAMELN         STORE LENGTH OF DDNAME TOKEN
         BCTR  R4,0                SUBTRACT 1 FOR EX OPCODE
         MVC   DDNAME,BLANKLIN
         MVC   MSGDSN,BLANKLIN
         EX    R4,MVDDNME
         LA    R1,8(,R3)
         EX    R4,MVDDMSG
         CR    R2,R1               EXCEEDED DDNAME LENGTH (8 DIGITS)?
         BH    INVDDNME
         EX    R4,CMPUNLOD
         BE    INVDDNME
         EX    R4,CMPSYUT1
         BE    INVDDNME
         EX    R4,CMPSYUT2
         BE    INVDDNME
         B     DIRBLK_LOOP
MVDDNME  DS    0H
         MVC   DDNAME(0),0(R3)
MVDDMSG  DS    0H
         MVC   MSGDSN(0),0(R3)
CMPUNLOD DS    0H
         CLC   0(0,R3),DDUNLOAD
CMPSYUT1 DS    0H
         CLC   0(0,R3),DDSYSUT1
CMPSYUT2 DS    0H
         CLC   0(0,R3),DDSYSUT2
**********************************************************************
* DIRECTORY BLOCKS LOOP (GET DIRECTORY BLOCKS FOR ALTERDIR FUNCTION) *
**********************************************************************
DIRBLK_LOOP DS 0H
         MVI   NEG_DB,C'N'          RESET NEGATIVE DIRBLKS INDICATOR
         MVI   NONUM_DB,C'N'        RESET NON-NUMERIC DIRBLKS INDIC.
         CLC   FUNCTION,ALTERDIR    IS THIS FUNCTION=ALTERDIR REC ?
         BE    DIRBL_CNT1           YES - GET DIRECTORY BLOCKS
         MVC   DIRBLKS,=8CL1'0'     NO - IGNORE DIR BLOCKS
         LA    R1,0
         ST    R1,DIRBLKFW          LOAD ZEROS FOR DIR BLKS - NOT USED
         B     ASSESS_TOKENS        END OF LOOKING AT THIS RECORD
DIRBL_CNT1  DS 0H
         LA    R2,1(,R2)
         LA    R1,SYSINRCL(,R5)
         CR    R2,R1               EXCEEDED SYSIN RECORD LENGTH ?
         BH    ASSESS_TOKENS       YES - REACHED END OF RECORD
         CLI   0(R2),C' '           HAVE A ' ' ?
         BE    DB_01                YES - CHECK FOR END OF TOKEN
         CLI   0(R2),X'00'          HAVE A NULL DELIMITER ?
         BE    DB_01                YES - CHECK FOR END OF TOKEN
         CLI   0(R2),C'+'           HAVE A '+' SIGN ?
         BE    DIRBL_CNT1           YES - IGNORE IT AND STRIP IT OFF
         CLI   0(R2),C'-'           HAVE A '-' NEGATIVE SIGN ?
         BNE   NUM_CHK1             NO - CHECK FOR NUMERIC
         MVI   NEG_DB,C'Y'          YES - INDICATE NEGATIVE DIRBLKS
         B     DIRBL_CNT2
NUM_CHK1 DS    0H
         CLI   0(R2),C'0'           LESS THAN NUMERIC CHAR ?
         BNL   NUM_CHK2             NO  - CHECK HIGH END OF NUM RANGE
         MVI   NONUM_DB,C'Y'        YES - INDICATE NON-NUMERIC DIRBLKS
         B     DIRBL_CNT2
NUM_CHK2 DS    0H
         CLI   0(R2),C'9'           GREATER THAN NUMERIC CHAR ?
         BNH   DIRBL_CNT2           NO - OK ON HIGH END
         MVI   NONUM_DB,C'Y'        YES - INDICATE NON-NUMERIC DIRBLKS
DIRBL_CNT2  DS 0H
         CLI   HAVE_DB,C'Y'
         BE    DIRBL_CNT1
         MVI   HAVE_DB,C'Y'
         LR    R3,R2                R3 POINTS TO START OF INPUT TOKEN
         B     DIRBL_CNT1
DB_01    DS    0H                  HAVE A BLANK OR NULL CHARACTER
         CLI   HAVE_DB,C'Y'
         BNE   DIRBL_CNT1          HAVEN'T HAD 3RD TOKEN YET (DIRBLKS)
         LR    R4,R2
         LR    R1,R3
         SR    R4,R1               GET LENGTH OF DIRBLKS TOKEN
         ST    R4,DIRBLKLN         SAVE LENGTH OF DIRBLKS
         BCTR  R4,0                SUBTRACT 1 FOR EX OPCODE
         LA    R1,8(,R3)
         MVC   DIRBLKS,=8CL1'0'
         MVC   MSGDSN,BLANKLIN
         EX    R4,MVDBMSG
         CLI   NEG_DB,C'Y'        NEGATIVE DIRECTORY BLOCKS VALUE ?
         BE    NEGDIRBL             YES - NEGATIVE DIRBLKS NOT ALLOWED
         CLI   NONUM_DB,C'Y'      NON-NUMERIC DIRECTORY BLOCKS VALUE ?
         BE    DBNOTNUM             YES - NON-NUMERICS NOT ALLOWED
         CR    R2,R1               EXCEEDED DIRBLKS LENGTH (8 DIGITS)?
         BH    INVDIRBL
         L     R4,DIRBLKLN         RESTORE LENGTH OF DIRBLKS TOKEN
         LA    R6,8                SET TOTAL LENGTH OF DISPLAY FIELD
         SR    R6,R4            GET INDEX DISPLACEMENT & RIGHT JUSTIFY
         LA    R1,DIRBLKS
         AR    R1,R6
         BCTR  R4,0
         EX    R4,MVDIRBLK
         PACK  DOUBLE,DIRBLKS      CONVERT DIBLKS TO FULL WORD BINARY
         CVB   R1,DOUBLE
         ST    R1,DIRBLKFW
         B     ASSESS_TOKENS
MVDIRBLK DS    0H
         MVC   0(0,R1),0(R3)
MVDBMSG  DS    0H
         MVC   MSGDSN(0),0(R3)
**********************************************************************
*** WE HAVE HIT THE END OF SYSIN RECORD PARSE      *******************
*** SEE IF ALL OF THE SYSIN REC TOKENS ARE PRESENT *******************
**********************************************************************
ASSESS_TOKENS DS 0H
         CLI   HAVE_FUNC,C'Y'
         BNE   MISSFUNC
CHK_DDN  DS    0H
         CLI   HAVE_DDN,C'Y'
         BNE   MISSDDNM
CHK_DBLKS DS    0H
         CLC   FUNCTION,ALTERDIR
         BNE   FINISH_SYSIN_REC
         CLI   HAVE_DB,C'Y'
         BNE   MISSDIRB
**********************************************************************
*** FINISH PROCESSING THE SYSIN RECORD - GOOD OR BAD ? ***************
**********************************************************************
FINISH_SYSIN_REC DS 0H
         CLI   HAVE_FUNC,C'Y'
         BNE   INVLD_SYSIN            NO - INVALID TOKEN
         CLI   HAVE_DDN,C'Y'
         BNE   INVLD_SYSIN            NO - INVALID TOKEN
         CLC   FUNCTION,ALTERDIR      IS THIS FUNCTION=ALTERDIR REC ?
         BNE   GOOD_SYSIN             NO - GOOD TOKEN
         CLI   HAVE_DB,C'Y'
         BE    GOOD_SYSIN             YES - GOOD TOKEN
INVLD_SYSIN DS 0H
         AP    INVLDCNT,ONEPK        INCREMENT INVALID SYSIN REC COUNT
GOOD_SYSIN DS  0H
         AP    VALIDCNT,ONEPK        INCREMENT VALID SYSIN REC COUNT
         B     SRCH4_DD              SEARCH TIOT DD ENTRIES FOR DDNAME
END_SYSIN  DS   0H
         LA    R3,SYSIN             DCB to close
         MVC   WKOPENCL(OPENIL),OPENI
         LA    R4,WKOPENCL          OPEN/CLOSE WORK AREA
         CLOSE ((R3)),MODE=31,MF=(E,(R4))   CLOSE SYSIN DCB
         B     PRINT_SUMMARY         ALL DONE - PRINT SUMMARY
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
         EJECT
         TITLE 'PDSCLEAN - SCAN TIOT FOR DDNAME'
***********************************************************************
*                                                                     *
*    1)  SCAN TIOT FOR DDNAME MATCH AGAINST CURRENT SYSIN FUNCTION'S  *
*        DDNAME.                                                      *
*    2)  WHEN FINDING ONE, EITHER CLEAN IT OR ALTER THE DIRECTORY     *
*        BLOCKS OR COMPRESS THE DATASET DEPENDING ON THE FUNCTION     *
*        CODE PASSED.                                                 *
*                                                                     *
***********************************************************************
SRCH4_DD DS    0H
         LA    R2,TIOTADDR
         MVC   EXTRACTW(EXTRACTL),EXTRACTI   RELOCATE EXTRACT MACRO
         EXTRACT (R2),FIELDS=TIOT,MF=(E,EXTRACTW) GET ADDR OF TIOT AREA
         L     R2,TIOTADDR         LOAD ADDRESS OF TIOT INTO R2
         USING TIOT1,R2            MAP THE START OF THE TIOT
         LA    R2,TIOENTRY         POINT TO FIRST DD ENTRY
         DROP  R2                  DONE WITH TIOT BASE
         USING TIOENTRY,R2         MAP THE DD ENTRIES IN THE TIOT
         SR    R3,R3               CLEAR R3 (WILL HOLD TIOT DD ENT LEN)
TIOTSCAN DS    0H
         IC    R3,TIOELNGH         1 BYTE - LENTH OF THIS TIOT DD ENTRY
         LTR   R3,R3               0 = END OF TIOT
         BZ    TIOTDDNF            ERROR - DID NOT FIND DDNAME IN TIOT
         CLC   DDNAME,TIOEDDNM  |- TIOT DDNAME = SYSIN RECORD DDNAME ?
         LA    R2,TIOENTRY(R3)  |  ADDRESS OF NEXT TIOT ENTRY
         BNE   TIOTSCAN         |- NO - CHECK NEXT TIOT DDNAME
         DROP  R2                  DONE WITH TIOT ENTRIES
***********************************************************************
*        HAVE A DDNAME ENTRY MATCH ON SYSIN DDNAME                    *
***********************************************************************
         L     R5,16               CVT ADDRESS
         USING CVT,R5              MAP CVT
         LA    R6,EXCPDCB          DCB ADDRESS
         USING IHADCB,R6           MAP DCB
         MVC   DCBDDNAM,DDNAME     MOVE CURRENT DDNAME TO DCB
READJFCB DS    0H
         MVC   JFCBLIST(JFCBLSTL),JFCBLSTI   RELOCATE JFCB EXIT LIST
         MVC   WKRDJFCB(RDJFCBIL),RDJFCBI    RELOCATE JFCB MACRO LIST
         LA    R0,JFCBLIST
         STCM  R0,7,DCBEXLSA                 LOAD EXIT LIST ADDRESS
         LA    R0,JFCBAR
         STCM  R0,7,JFCBLIST+1               LOAD JFCB BUFFER ADDRESS
*
         RDJFCB ((R6)),MF=(E,WKRDJFCB)       READ IN JFCB
*
         LTR   R15,R15             TEST FOR GOOD READ
         BNZ   JFCBERR             SHOULD NEVER HAPPEN
FMT1DSCB DS    0H
         MVC   CAMPRMLS(CAMLSTIL),CAMLSTI   INITIALIZE OBTAIN PARMLIST
         LA    R0,JFCBDSNM
         ST    R0,CAMLDSN
         LA    R0,JFCBVOLS
         ST    R0,CAMLVOL
         LA    R0,CAMWORK
         ST    R0,CAMLWRK
         LA    R0,CAMPRMLS
*
         OBTAIN CAMPRMLS           READ IN THE FORMAT 1 DSCB VTOC REC
*
         LTR   R15,R15             VTOC READ SUCCESSFUL?
         BNZ   OBTNERR             NO - ERROR ON OBTAIN
***********************************************************************
*        HAVE A DSORG=PO (OR POE) DATASET ? IF NOT - ERROR SITUATION  *
***********************************************************************
         TM    DS1DSORG,DS1DSGPO   IS THIS A DSORG=PO (OR POE) DATASET?
         BNO   DSORGERR            NO  - INCORRECT DSORG - ERROR
         TM    DS1SMSFG,DS1PDSE    IS THIS A PDS/E FILE ?
         BO    HAVEPDSE            YES - THIS IS A PDS/E FILE
         CLC   FUNCTION,COMPRESS   NO  - COMPRESS FUNCTION ?
         BE    COMPRS00            YES - PROCESS IEBCOPY COMPRESS
         B     TIOTCONT            NO  - NOT A COMPRESS FUNCTION
HAVEPDSE DS    0H
         CLC   FUNCTION,COMPRESS   COMPRESS FUNCTION ?
         BE    COMPRERR            YES - DON'T NEED TO COMPRESS PDSE'S
***********************************************************************
*        HAVE A PDSE/DATASET - CHECK FUNCTION TYPE FOR 'ZERODIR'      *
***********************************************************************
         BAS   R14,PDSE0000        YES - PROCESS PDS/E FILE
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,PDSECLMS     LOAD PDS/E-WAS-CLEANED MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    CLEANCNT,ONEPK      INCREMENT CLEAN COUNTER
         B     GET_SYSIN           GET NEXT SYSIN INPUT RECORD
TIOTCONT DS    0H
         LA    R11,EXCPIOB         ADDRESSABILITY TO IOB STANDARD AREA
         USING IOBSTDRD,R11        MAP STANDARD SECTION OF IOB DSECT
         BAS   R14,BLDIOB          RE-INITIALIZE IOB
         MVI   CTR,X'01'           RECORD 1
         MVI   CTKL,X'08'          8   BYTE KEY/BLOCK
         MVC   CTDL,=H'256'        256 BYTES/DIRECTORY BLOCK
         BAS   R14,BALFACT         GET FACTORS FOR TRACK BALANCING
         OI    JFCBTSDM,JFCNDCB    DO NOT MERGE DCB INTO JFCB
         SR    R4,R4               CLEAR REG4
         CLC   FUNCTION,ALTERDIR   IS THIS AN ALTERDIR FUNCTION ?
         BE    DIRECT00            YES - UNLOAD PDS FIRST
READDIRB DS    0H
         TITLE 'PDSCLEAN - COUNT DIRECTORY BLOCKS BEFORE ALTERDIR'
         MVC   WKOPENCL(OPENIL),OPENI   OPEN EXCPDCB TO READ DIRECTORY
         LA    R3,WKOPENCL                 OPEN/CLOSE WORK AREA
         OPEN  ((R6),INPUT),MODE=24,TYPE=J,MF=(E,(R3))  OPEN EXCPDCB
         SR    R4,R4          CLEAR REG4 FOR DIR BLOCK COUNTER
         TM    DCBOFLGS,DCBOFOPN      GOOD OPEN ?
         BZ    OPENERR                NO - OPEN ERROR
         LA    R0,READCCW
         ST    R0,IOBSTART
         MVI   GETPUT_FUNCTION,C'G'
GETLOOP  DS    0H
         BAS   R14,DOIO       GET NEXT DIR BLK
         LTR   R15,R15        CHECK RETURN CODE
         BNZ   CLOSEIN        4 -- I/O ERROR - TREAT AS EOF
         CLI   CTKL,X'08'     CORRECT KEY LENGTH
         BNE   CLOSEIN        NO -- TREAT AS EOF
         CLC   CTDL,=H'0'     EOF DATA LENGTH
         BE    CLOSEIN        YES
         CLC   CTDL,=H'256'   REC TOO LONG ? (PAST DIR RECS ?)
         BH    CLOSEIN        YES -- TREAT AS EOF
         LA    R4,1(,R4)      NO - INCREMENT DIRECTORY BLOCK COUNT
         BAS   R14,BUMPTTTR   BUMP TO NEXT DIRECTORY RECORD
         B     GETLOOP        READ TO EOF ON DIRECTORY
CLOSEIN  DS    0H
         MVC   WKOPENCL(OPENIL),OPENI
         ST    R4,OLDDIRBL         STORE THE OLD DIR BLK ALLOC VALUE
         LA    R3,WKOPENCL         OPEN/CLOSE WORK AREA
         CLOSE ((R6)),MODE=24,MF=(E,(R3))  CLOSE EXCPDCB
         CVD   R4,DOUBLE
         UNPK  DIRBLKDI,DOUBLE  UNPACK THE # OF DIRECTORY BLOCKS
         OI    DIRBLKDI+6,X'F0'  FIX THE SIGN NIBBLE
         CLC   FUNCTION,ALTERDIR   IS THIS AN ALTERDIR FUNCTION?
         BNE   REWRITE          NO - ZERODIR FUNCTION
         CLI   RECOV_FL,C'Y'    RECOVER PROCESS GOING ON ?
         BNE   CLOSEIN2         NO - SKIP RESTORE PROCESS LOGIC
RECOVER  DS    0H               YES - PROCESS RECOVERY NOW
         L     R1,NEWDIRBL      LOAD THE NEW DIR BLOCK VALUE IN R1
         L     R4,OLDDIRBL      LOAD THE OLD DIR BLOCK VALUE IN R4
         ST    R4,NEWDIRBL      RESTORE THE OLD DIRECTORY BLOCK VALUE
         ST    R1,OLDDIRBL      SAVE NEW AS OLD DIRECTORY BLOCK VALUE
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,PDSRECM1     LOAD PDS-IS-BEING-RECOVERED MESSAGE1
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         MVC   MSGTXT,PDSRECM2     LOAD PDS-IS-BEING-RECOVERED MESSAGE2
         MVC   MSGDSN,BLANKLIN
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         MVC   MSGTXT,PDSRECM3     LOAD PDS-IS-BEING-RECOVERED MESSAGE3
         MVC   MSGDSN,BLANKLIN
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         MVC   MSGTXT,PDSRECM4     LOAD PDS-IS-BEING-RECOVERED MESSAGE3
         MVC   MSGDSN,BLANKLIN
         MVC   MSGDSN(4),ABENDCD   LOAD ABEND CODE INTO MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    ERRORCNT,ONEPK
         B     REWRITE          RESTORE DIRECTORY BLOCK COUNT & ZEROEM
CLOSEIN2 DS    0H
         L     R1,DIRBLKFW      LOAD THE ADDITIONAL DIR BLOCK VALUE
         AR    R1,R4            GET THE NEW DIR BLK ALLOCATION VALUE
         ST    R1,NEWDIRBL      SAVE THE NEW DIRECTORY BLOCK VALUE
         CR    R1,R4            DID DIRECTORY BLOCKS DECREASE ?
         BL    DIRBLDEC              YES - DON'T ALLOW THIS
         L     R4,NEWDIRBL      LOAD THE NEW DIR BLOCK VALUE IN R4
*                                                                     *
***********************************************************************
*                                                                     *
*        R4 CONTAINS THE NUMBER OF DIRECTORY BLOCKS TO BE WRITTEN     *
*                                                                     *
***********************************************************************
*                                                                     *
         TITLE 'PDSCLEAN - WRITE NEW DIRECTORY'
REWRITE  DS    0H
         C     R4,=A(0)       ANY DIR BLKS ?
         BE    DIRCTERR       NO
         ST    R4,DIRBLKSF    STORE THE # OF DIRECTORY BLOCKS
         MVC   WKOPENCL(OPENIL),OPENI    OPEN EXCPDCB TO WRITE NEW DIR
         LA    R3,WKOPENCL         OPEN/CLOSE WORK AREA
         OPEN  ((R6),OUTPUT),MODE=24,TYPE=J,MF=(E,(R3)) WRITE NEW DIRS
         TM    DCBOFLGS,DCBOFOPN      GOOD OPEN ?
         BZ    OPENERR                NO - OPEN ERROR
         XC    DCBTRBAL,DCBTRBAL  CLEAR TRACK BALANCE FIELD
         BAS   R14,BLDIOB     RE-INITIALIZE IOB
         LA    R0,WRITECCW
         ST    R0,IOBSTART
         MVC   KEY,=XL8'FFFFFFFFFFFFFFFF'
         XC    DATAX,DATAX
         MVC   DATAX(10),=XL10'000EFFFFFFFFFFFFFFFF'
         MVI   CTKL,X'08'
         MVC   CTDL,=H'256'
         MVI   GETPUT_FUNCTION,C'P'
PUTLOOP  DS    0H
         BAS   R14,DOIO       WRITE NEXT DIR BLK
         LTR   R15,R15        CHECK RETURN CODE
         BNZ   WRITEERR       4 -- I/O ERROR
         BAS   R14,UPDDCB     UPDATE DCB FIELDS
         XC    KEY,KEY
         XC    DATAX,DATAX
         BAS   R14,BUMPTTTR   BUMP TO NEXT REC
         BCT   R4,PUTLOOP          KEEP GOING
         LA    R0,EOFCCW
         ST    R0,IOBSTART
         MVI   CTKL,X'00'     ZERO KEY LEN FOR EOF REC
         MVC   CTDL,=H'0'     ZERO DATA LEN FOR EOF REC
         BAS   R14,DOIO       WRITE EOF REC
         LTR   R15,R15        CHECK RETURN CODE
         BNZ   EOFERR         4 -- I/O ERROR
         BAS   R14,UPDDCB     UPDATE DCB
         MVC   WKOPENCL(OPENIL),OPENI
         LA    R3,WKOPENCL         OPEN/CLOSE WORK AREA
         CLOSE ((R6)),MODE=24,MF=(E,(R3))  CLOSE EXCPDCB
         CLC   FUNCTION,ALTERDIR   IS THIS AN ALTERDIR FUNCTION?
         BE    PUTL_ALT            YES - PRINT DIRECTORY UPDT MSGS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,PDSCLNMS     LOAD PDS-WAS-CLEANED MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    CLEANCNT,ONEPK      INCREMENT CLEAN COUNTER
         B     GET_SYSIN           GET NEXT SYSIN INPUT RECORD
PUTL_ALT DS    0H
         CLI   RECOV_FL,C'Y'     RECOVERY PROCESS IN PROGRESS ?
         BE    PUTL_AL2          YES - SKIP TO RESET ALTERATION MSG
*
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,PDSALTMS     LOAD PDS-WAS-ALTERED MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
*
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,ORIGBLKS     LOAD ORIGINAL DIR BLK VALUE MESSAGE
         MVC   MSGDSN,BLANKLIN
         MVC   MSGDSN(7),DIRBLKDI  LOAD ORIGINAL # OF DIRECTORY BLOCKS
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
*
         AP    DIRCHGCT,ONEPK    INCREMENT DIRECTORIES-CHANGED COUNTER
         MVI   ALTER_SUCC,C'Y'   INDICATE SUCCESSFUL ALTERATION
*
         MVC   MSGTXT,PDSALTTO     LOAD PDS-DIR-WAS-ALTERED MESSAGE
         B     PUTL_AL3
PUTL_AL2 DS    0H
         MVC   MSGTXT,PDSRESET     LOAD PDS-DIR-WAS-RESET   MESSAGE
PUTL_AL3 DS    0H
         L     R1,NEWDIRBL
         CVD   R1,DOUBLE
         UNPK  DIRBLKDI,DOUBLE     UNPACK THE # OF DIRECTORY BLOCKS
         OI    DIRBLKDI+6,X'F0'    FIX THE SIGN NIBBLE
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGDSN,BLANKLIN
         MVC   MSGDSN(7),DIRBLKDI  LOAD NEW # OF DIRECTORY BLOCKS
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
*
***********************************************************************
* CALL 'IEBCOPY' A SECOND TIME TO RELOAD THE UNLOAD IMAGE FROM A
*   TEMPORARY WORK FILE.
***********************************************************************
RELOADIE DS    0H
         MVC   IEBCOPY_OPTLIST(IEBCOPY_OPTLISTL),IEBCOPY_OPTLISTI
         MVC   IEBCOPY_DDNMLIST(IEBCOPY_DDNMELSL),IEBCOPY_DDNMELST
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDINPUT-IEBCOPY_DDNMELST(8),=CL+
               8'UNLOAD  '                          LOAD INPUT  DDNAME
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDOUTPUT-IEBCOPY_DDNMELST(8),DD+
               NAME                                 LOAD OUTPUT DDNAME
         MVI   IEBCOPY_FUNCTION,C'R'          INDICATE RELOAD FUNCTION
         BAS   R14,IEBCPY00     BRANCH TO IEBCOPY ROUTINE TO RELOAD PDS
*
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,RELOADMS     LOAD PDS RELOADED SUCCESSFULLY MSG
         MVC   MSGDSN,BLANKLIN
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
*
         CLI   RECOV_FL,C'Y'     RECOVERY PROCESS IN PROGRESS ?
         BNE   RESETIEB          NO - EXIT AND GET NEXT SYSIN RECORD
RECVFIN  DS    0H                YES - FINISH RECOVERY PROCESS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,RECPDSMS     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,BLANKLIN BLANK OUT THE DSN IN MSG
         MVC   MSGDSN,JFCBAR       MOVE IN DSNAME INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         LA    R15,8                SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
*
RESETIEB DS    0H
         MVI   RECOV_FL,C'N'       RESET THE RECOVERY FLAG
         MVC   IEBCOPY_OPTLIST(IEBCOPY_OPTLISTL),IEBCOPY_OPTLISTI
         MVC   IEBCOPY_DDNMLIST(IEBCOPY_DDNMELSL),IEBCOPY_DDNMELST
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDINPUT-IEBCOPY_DDNMELST(8),BLA+
               NKLIN                           BLANK OUT INPUT  DDNAME
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDOUTPUT-IEBCOPY_DDNMELST(8),BL+
               ANKLIN                          BLANK OUT OUTPUT DDNAME
         MVI   IEBCOPY_FUNCTION,C' '           BLANK OUT FUNCTION
         B     GET_SYSIN           GET NEXT SYSIN INPUT RECORD
***********************************************************************
*        SET THE MAXIMUM RETURN CODE FOR THIS PROGRAM EXECUTION       *
***********************************************************************
SET_RC   DS    0H
         L     R1,MAX_RC
         CR    R15,R1              R15 HAS TEMP RC VALUE - > MAX RC ?
         BNH   SET_RCEX            NO - DON'T THEN ALTER MAX RC - EXIT
         ST    R15,MAX_RC          UPDATE MAXIMUM RETURN CODE
SET_RCEX DS    0H
         BR    R14
*
PRINT_SUMMARY DS  0H
         TITLE 'PDSCLEAN - END OF JOB LOGIC - PRINT SUMMARY'
*
         UNPK  T1COUNT,SYSINCNT    TOTAL NUMBER OF SYSIN INPUT RECS
         OI    T1COUNT+6,X'F0'
         MVC   T1MSG,SYSINMS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         PUT   SYSPRINT,TRAILER1   OUTPUT THE TRAILER RECORD
*
         UNPK  T1COUNT,INVLDCNT    NUMBER OF INVALID SYSIN RECS
         OI    T1COUNT+6,X'F0'
         MVC   T1MSG,INVSYSMS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         PUT   SYSPRINT,TRAILER1   OUTPUT THE TRAILER RECORD
*
         UNPK  T1COUNT,VALIDCNT    NUMBER OF VALID SYSIN RECS
         OI    T1COUNT+6,X'F0'
         MVC   T1MSG,VLDSYSMS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         PUT   SYSPRINT,TRAILER1   OUTPUT THE TRAILER RECORD
*
         UNPK  T1COUNT,ERRORCNT    NUMBER OF LOGIC ERRORS
         OI    T1COUNT+6,X'F0'
         MVC   T1MSG,ERRORSMS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         PUT   SYSPRINT,TRAILER1   OUTPUT THE TRAILER RECORD
*
         UNPK  T1COUNT,CLEANCNT    NUMBER OF DSNS CLEANED (EMPTIED)
         OI    T1COUNT+6,X'F0'
         MVC   T1MSG,CLNCNTMS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         PUT   SYSPRINT,TRAILER1   OUTPUT THE TRAILER RECORD
*
         UNPK  T1COUNT,DIRCHGCT    NUMBER OF DSNS ALTERED (DIR BLKS)
         OI    T1COUNT+6,X'F0'
         MVC   T1MSG,ALTCNTMS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         PUT   SYSPRINT,TRAILER1   OUTPUT THE TRAILER RECORD
*
         UNPK  T1COUNT,COMPRSCT    NUMBER OF LIBS COMPRESSED
         OI    T1COUNT+6,X'F0'
         MVC   T1MSG,COMCNTMS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         PUT   SYSPRINT,TRAILER1   OUTPUT THE TRAILER RECORD
*
         L     R1,MAX_RC
         CVD   R1,DOUBLE
         UNPK  MAX_RC_DI,DOUBLE    UNPACK THE MAXIMUM RETURN CODE
         OI    MAX_RC_DI+6,X'F0'   FIX THE SIGN NIBBLE
         MVC   T1COUNT,MAX_RC_DI
         MVC   T1MSG,MAXRCMSG
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         PUT   SYSPRINT,TRAILER1   OUTPUT THE TRAILER RECORD
*
         LA    R3,SYSPRINT          DCB to close
         MVC   WKOPENCL(OPENIL),OPENI
         LA    R4,WKOPENCL         OPEN/CLOSE WORK AREA
         CLOSE ((R3)),MODE=31,MF=(E,(R4))  CLOSE SYSPRINT DCB
*
         L     R4,MAX_RC            Load the maximum return code
*
RETURN   DS    0H
         LR    R2,R13               Pointer to storage area
         L     R3,=A(STORSIZE)      Size of storage obtained
         L     R13,4(,R13)          Restore Caller's SAVEAREA address
         STORAGE RELEASE,LENGTH=(R3),ADDR=(R2)
         L     R14,12(,R13)         Restore R14
         LR    R15,R4               Set Return Code
         LM    R0,R12,20(R13)       Restore caller's registers
         BSM   0,R14                Return to caller
*
TOKNLNER DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,TOKLENMS     LOAD APPROPRIATE MESSAGE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    INVLDCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
INVFUNCN DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,INVFUNMS     LOAD APPROPRIATE MESSAGE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    INVLDCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
INVDDNME DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,INVDDNMS     LOAD APPROPRIATE MESSAGE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    INVLDCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
DBNOTNUM DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,NOTNUMMS     LOAD APPROPRIATE MESSAGE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    INVLDCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
INVDIRBL DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,INVDBLMS     LOAD APPROPRIATE MESSAGE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    INVLDCNT,ONEPK
         LA    R15,8                SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
NEGDIRBL DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,NEGDBLMS     LOAD APPROPRIATE MESSAGE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    INVLDCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
MISSFUNC DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,NOFUNCMS     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,BLANKLIN     BLANK OUT DSN FIELD IN MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         MVC   MSGTXT,NOFUNCM2     LOAD APPROPRIATE MESSAGE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    INVLDCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
MISSDDNM DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,NODDNMMS     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,BLANKLIN     BLANK OUT DSN FIELD IN MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    INVLDCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
MISSDIRB DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,NODRBLMS     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,BLANKLIN     BLANK OUT DSN FIELD IN MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         MVC   MSGTXT,NODRBLM2     LOAD APPROPRIATE MESSAGE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    INVLDCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
DSORGERR DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,DSORGERM     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    ERRORCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN
*
OBTNERR  DS    0H
         ST    R15,SAVER15         SAVE R15 CONTENTS
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,OBTNERRM     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         MVC   MSGTXT,RETREASM     LOAD APPROPRIATE MESSAGE
         UNPK  UNPKAREA(9),SAVER15(5)     GET RETURN CODE
         MVZ   UNPKAREA(9),HEXZERO
         TR    UNPKAREA(9),HEXCHAR
         MVC   MSGDSN,BLANKLIN
         MVC   MSGDSN(8),UNPKAREA  LOAD THE RETURN CODE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
STOWERR  DS    0H
         ST    R0,SAVER0           SAVE R0  CONTENTS
         ST    R15,SAVER15         SAVE R15 CONTENTS
         MVC   WKOPENCL(OPENIL),OPENI
         LA    R3,PDSEDCB
         LA    R4,WKOPENCL         OPEN/CLOSE WORK AREA
         CLOSE ((R3)),MODE=31,MF=(E,(R4))  CLOSE PDSEDCB  DCB
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,STOWERRM     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         MVC   MSGTXT,RETREASM     LOAD APPROPRIATE MESSAGE
         UNPK  UNPKAREA(9),SAVER15(5)     GET RETURN CODE
         MVZ   UNPKAREA(9),HEXZERO
         TR    UNPKAREA(9),HEXCHAR
         MVC   MSGDSN,BLANKLIN
         MVC   MSGDSN(8),UNPKAREA  LOAD THE RETURN CODE
         MVC   MSGDSN+8(3),=CL3' / '
         UNPK  UNPKAREA(9),SAVER0(5)      GET REASON CODE
         MVZ   UNPKAREA(9),HEXZERO
         TR    UNPKAREA(9),HEXCHAR
         MVC   MSGDSN+11(8),UNPKAREA  LOAD THE REASON CODE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         L     R15,SAVER15         RESTORE R15 CONTENTS (RETURN CODE)
         CH    R15,=H'20'          RETURN CODE = X'14' ?
         BNE   STOWCNT             NO
         L     R0,SAVER0           RESTORE R0 CONTENTS (REASON CODE)
         CH    R0,=H'04'           REASON CODE = X'04' ?
         BNE   STOWCNT             NO
         MVC   MSGTXT,DISPSHM1     YES - INVALID DISPOSTION ON ALLOCTN
         MVC   MSGDSN,BLANKLIN
         MVC   MSGDSN(36),DISPSHM2
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    ERRORCNT,ONEPK
         LA    R15,8               SET STOW MACRO RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN       DON'T TERMINATE - GET NEXT SYSIN RECORD
STOWCNT  DS    0H
         B     SEVERE_ERROR
*
DIRBLDEC DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,DIRBLDCG     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
DOIOERR  DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,IOERMSG      LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
* ------------------------------------------------------------------- *
* ENTER INTO RECOVERY PHASE TO RECOVER THE PDS.  THE ADDITION OF
*    DIRECTORY BLOCKS DID NOT LEAVE ROOM TO RESTORE THE PDS MEMBERS.
* ------------------------------------------------------------------- *
         MVI   RECOV_FL,C'Y'  TURN ON RECOVERY FLAG TRY TO RECOVER PDS
         B     RECOVER         RESTORE DIRECTORY BLOCKS AND DATA
*
WRITEERR DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,DIRIOMSG     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
EOFERR   DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,DIREOFMS     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
JFCBERR  DS   0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,JFCBMSG      LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
OPENERR  DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,OPENMSG      LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
DIRCTERR DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,DIRBLKMS     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
DEVDAERR DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,DEVADMSG     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
BALERR   DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,BALERMSG     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
CAPERR   DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,CAPACMSG     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR
*
TIOTDDNF DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,TIOTNFMS     LOAD APPROPRIATE MESSAGE
         MVC   MSGDSN,BLANKLIN BLANK OUT THE DSN IN MSG
         MVC   MSGDSN(8),DDNAME    MOVE IN DDNAME INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    ERRORCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN       DON'T TERMINATE - GET NEXT SYSIN RECORD
*
PDSEDIRW DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,PDSEDIRM     LOAD APPROPRIATE WARNING MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    ERRORCNT,ONEPK
         LA    R15,8               SET WARNING RETURN CODE
         BAS   R14,SET_RC          CHECK MAXIMUM RETURN CODE
         B     GET_SYSIN       DON'T TERMINATE - GET NEXT SYSIN RECORD
*
COMPRERR DS    0H
         MVC   MSG39,PDSECOMP
         MVC   MSG39(7),PDSELIT
         MVC   MSGTXT,MSG39        LOAD LIB-WAS-NOT-COMPRESSED MESSAGE
         MVC   MSGDSN,BLANKLIN BLANK OUT THE DSN IN MSG
         MVC   MSGDSN,JFCBAR       MOVE IN DSNAME INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     GET_SYSIN         EXIT AND GET NEXT SYSIN RECORD
*
ATTACHFL DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,ATTACHMS     LOAD APPROPRIATE WARNING MESSAGE
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         B     SEVERE_ERROR        TERMINATE - SEVERE ERROR
*
IEBCPYER DS    0H
         PUT   SYSPRINT,BLANKLIN   OUTPUT BLANK LINE
         MVC   MSGTXT,IEBCPYM1     LOAD APPROPRIATE ERROR MESSAGE
         CLI   IEBCOPY_FUNCTION,C'U'  JUST DID UNLOAD FUNCTION ?
         BE    COPYERMS            YES - HAPPENED ON IEBCOPY UNLOAD
         MVC   MSGTXT,IEBCPYM2     NO  - HAPPENED ON IEBCOPY RELOAD
COPYERMS DS    0H
         MVC   MSGDSN,JFCBAR       MOVE IN DSN INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
*
         MVC   MSGTXT,RETREASM     LOAD APPROPRIATE MESSAGE
         UNPK  UNPKAREA(9),IEBCOPY_RETURN_CODE(5)
         MVZ   UNPKAREA(9),HEXZERO
         TR    UNPKAREA(9),HEXCHAR
         MVC   MSGDSN,BLANKLIN
         MVC   MSGDSN(8),UNPKAREA  LOAD THE RETURN CODE
         MVC   MSGDSN+8(3),=CL3' / '
         UNPK  UNPKAREA(9),IEBCOPY_REASON_CODE(5)
         MVZ   UNPKAREA(9),HEXZERO
         TR    UNPKAREA(9),HEXCHAR
         MVC   MSGDSN+11(8),UNPKAREA  LOAD THE REASON CODE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
*
         CLC   ABENDCD(4),BLANKLIN   ABENDCD = BLANKS ?
         BE    COPYERM2
*
         MVC   MSGTXT,IEBCPYM3     LOAD ABEND CODE IF PRESENT
         MVC   MSGDSN,BLANKLIN
         MVC   MSGDSN(4),ABENDCD   LOAD THE ABEND CODE
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
COPYERM2 DS    0H
         L     R15,IEBCOPY_RETURN_CODE SET WARNING RETURN CODE
         BAS   R14,SET_RC              CHECK MAXIMUM RETURN CODE
         B     SEVERE_ERROR
*
SEVERE_ERROR  DS  0H
         LA    R15,16              SET SEVERE RETURN CODE
         BAS   R14,SET_RC          SET MAXIMUM RETURN CODE
         CLI   OPENED_SYSIN,C'Y'   HAS SYSIN FILE BEEN OPENED ?
         BE    END_SYSIN           YES - CLOSE SYSIN AND THEN TERMINATE
         B     PRINT_SUMMARY       NO  - TERMINATE
*
         TITLE 'BLDIOB'
BLDIOB   DS    0H
         XC    EXCPIOB,EXCPIOB     CLEAR EXCPIOB
         MVI   IOBFLAG1,IOBDATCH+IOBCMDCH+IOBUNREL
         LA    R0,EXCPDCB
         STCM  R0,7,IOBDCBPB
         LA    R0,EXCPECB
         STCM  R0,7,IOBECBPB
         MVC   TTTR,=X'00000001'  FIRST REC
         BR    R14
*                                                                     *
         TITLE 'DOIO Routine'
*                                                                     *
***********************************************************************
*                                                                     *
*  THIS CVTPCNVT ROUTINE (SEE DFSMSdfp Advanced Services Manual       *
*  SC26-7400-07) IS USED TO CONVERT A RELATIVE TRACK ADDRESS TO       *
*  AN ACTUAL (REAL or ABSOLUTE) TRACK ADDRESS. 06/09/2009.            *
*                                                                     *
*  CVTPCNVT (IECPCNVT) REGISTER USAGE FOR ENTRY @CVTPCNVT+12.         *
*        R0             TTTR TO BE CONVERTED (REL TRACK ADDRESS)      *
*        R1             DEB ADDR                                      *
*        R2             SEEK ADDR (MBBCCHHR TO BE COMPUTED)           *
*        R3 - R8        UNCHANGED                                     *
*        R9 - R12       ***** USED AND DESTROYED BY CVTPCNVT *****    *
*        R13            PDS CONCATENTATION NUMBER IN LOW ORDER BYTE   *
*                       ALSO DESTROYED BY CVTPCNVT.                   *
*        R14            RETURN ADDR                                   *
*        R15            ENTRY POINT/RETURN CODE FOR CVTPCNVT          *
*                                                                     *
***********************************************************************
*                                                                     *
DOIO     DS    0H
         ST    R14,DOIOR14    SAVE BAS RETURN ADDR
         L     R0,TTTR        PASS TTTR (RELATIVE TRACK/BLOCK NUMBER)
         SR    R1,R1
         ICM   R1,7,DCBDEBA   LOAD DEB ADDRESS
         LA    R2,IOBSEEK     COMPUTE SEEK ADDRESS (MBBCCHHR)
         STM   R9,R12,DOIOSAVE SAVE REGISTERS FOR CVTPCNVT CALL
         L     R15,CVTPCNVT   CVTPCNVT (IECPCNVT) ENTRY POINT
         LR    R3,R13         SAVE R13 - CVTPCNVT DESTROYS R9-R13
         SR    R13,R13        ZERO CONCATENATION VALUE LOW-ORDER BYTE
         BAS   R14,12(,R15)   CALL @CVTPCNVT + 12
         LR    R13,R3         RESTORE R13
         LM    R9,R12,DOIOSAVE
         LTR   R15,R15        CHECK RETURN CODE
         BNZ   DOIOERR        ERROR - CONVERT FAILED
         MVC   IDCC,IOBCC     SEARCH CC
         MVC   IDHH,IOBHH     SEARCH HH
         SR    R1,R1          CLEAR
         IC    R1,TTTRRECN    POST REC NUMBER
         BCTR  R1,0           LESS 1 FOR SEARCH
         STC   R1,IDR         POST SEARCH REC NUMBER
         MVC   CTCC,IOBCC
         MVC   CTHH,IOBHH
         MVC   CTR,IOBR
         XC    EXCPECB,EXCPECB  CLEAR EXCPECB
         EXCP  EXCPIOB
         WAIT  ECB=EXCPECB    WAIT FOR SUBTASK TO COMPLETE
         L     R14,DOIOR14    RESTORE BAS RETURN ADDR
         SR    R15,R15        0 RETURN CODE
**********************************************************************
* ECB Completion Codes are documented in IBM Manual SC26-7400-07,
* "DFSMSdfp Advanced Services", Chapter 4 - Executing Your Own
* Channel Programs", Page 122-123.  TKMILLE 06/09/2009
**********************************************************************
         CLI   EXCPECB,X'7F'  I/O OK ?
         BER   R14            YES RETURN WITH RC=0
         LA    R15,4          I/O ERROR RETURN CODE 4
         BR    R14            RETURN
         TITLE 'PDSCLEAN - BUMP TTTR TO NEXT REC'
BUMPTTTR DS    0H
         SR    R1,R1          CLEAR
         IC    R1,TTTRRECN    PICK UP REC NUMBER
         LA    R1,1(,R1)      BUMP
         CH    R1,RECMAX      TOO MANY ?
         BNH   BUMPEND        NO
         SR    R1,R1
         ICM   R1,7,TTTRTRK   PICK UP TRACK NUMBER (TTT)
         LA    R1,1(,R1)      BUMP
         STCM  R1,7,TTTRTRK   POST NEW TRACK NUMBER (TTT)
         LA    R1,1           RESET REC NUMBER
BUMPEND  DS    0H
         STC   R1,TTTRRECN    POST NEW REC NUMBER
         BR    R14            EXIT
         TITLE 'PDSCLEAN - COMPUTE TRACK BALANCE FACTORS'
*                                                                     *
***********************************************************************
*                                                                     *
*        THIS ROUTINE USES THE DEVTYPE AND TRKCALC MACROS WHICH       *
*        ARE DOCUMENTED IN THE IBM DFSMSdfp Advanced Services Manual  *
*        SC26-7400-07.                                                *
*                                                                     *
*        DEVTYPE GETS THE DEVICE TYPE, TRACK PER CYLINDER AND         *
*        CYLINDERS PER VOLUME.                                        *
*                                                                     *
*        TRKCALC FUNCTN=TRKCAP CALCULATES THE TRACK CAPACITY          *
*           FOR A DIRECT ACCESS DEVICE.                               *
*                                                                     *
*        TRKCALC FUNCTN=TRKBAL CALCULATES THE NEW TRACK BALANCE.      *
*                                                                     *
***********************************************************************
*                                                                     *
         TITLE 'PDSCLEAN - CALCULATE THE TRACK CAPACITY'
BALFACT  DS    0H             COMPUTE TRACK BALANCE FACTORS
         ST    R14,BALFR14         SAVE BAS RETURN ADDR
         LA    R3,DEVAREA
         USING DVAREA,R3
         DEVTYPE DDNAME,DEVAREA,DEVTAB,RPS
         CLI   DVACLASS,UCB3DACC  IS DEVICE CLASS DASD (DIRECT ACCESS)?
         BNE   DEVDAERR           NO  - SEVERE ERROR
         SPACE 2
         TRKCALC FUNCTN=TRKCAP,  GET TRACK CAPACITY IN RECORDS         +
               TYPE=DVAUNIT,     USE CURRENT DEVICE TYPE               +
               RKDD=CTRKDD,      USE STARTING ADDRESS                  +
               MF=(E,STAR),      USE STAR LIST                         +
               REGSAVE=YES       RESTORE REGISTERS
         LTR   R15,R15           IF ERROR
         BNZ   CAPERR               SEVERE ERROR
         STH   R0,RECMAX         SET MAXIMUM RECORD
         L     R14,BALFR14       RESTORE BAS RETURN ADDR
         BR    R14               RETURN
         DROP  R3
*                                                                     *
         TITLE 'PDSCLEAN - UPDATE DCBTRBAL AND DCBFDAD'
UPDDCB   DS    0H
         ST    R14,UPDDR14         STORE BAS RETURN ADDR
         LA    R3,DEVAREA
         USING DVAREA,R3
         MVC   DCBFDAD,IOBSEEK     POST FULL ADDR OF LAST REC
         TRKCALC FUNCTN=TRKBAL,    CALCULATE TRACK BALANCE             +
               TYPE=DVAUNIT,       USE CURRENT DEVICE TYPE             +
               BALANCE=DCBTRBAL,   OLD BALANCE FROM DCB                +
               RKDD=CTRKDD,        USE CURRENT RECORD ADDRESS          +
               MF=(E,STAR),        USE STAR LIST                       +
               REGSAVE=YES         RESET REGISTERS
         LTR   R15,R15           IF OVERFLOW
         BNZ   BALERR               SEVERE ERROR
         STH   R0,DCBTRBAL       RESET DCB TRACK BALANCE
         L     R14,UPDDR14       RESTORE BAS RETURN ADDR
         BR    R14               RETURN
         DROP  R3,R5,R6,R11
* ------------------------------------------------------------------- *
* PROCESS PDS/E FILES.  CALL THE STOW MACRO TO ZERO THE MEMBERS.      *
* ------------------------------------------------------------------- *
PDSE0000 DS    0H
         ST    R14,PDSER14         STORE BAS RETURN ADDR
         CLC   FUNCTION,ALTERDIR   DIRECTORY BLK CHG FUNCTION ?
         BE    PDSEDIRW            YES - PRINT WARNING AND EXIT
         LA    R3,PDSEDCB          PREPARE FOR ZERODIR FUNCTION
         USING IHADCB,R3
         MVC   DCBDDNAM,DDNAME
         MVC   WKOPENCL(OPENIL),OPENI
         LA    R4,WKOPENCL                 OPEN/CLOSE WORK AREA
         OPEN  ((R3),OUTPUT),MODE=31,MF=(E,(R4))   OPEN PDSEDCB  DCB
         STOW  PDSEDCB,,I          IBM APAR OA13224 ALLOWS DISP=SHR
         LTR   R15,R15
         BNZ   STOWERR
         CLOSE ((R3)),MODE=31,MF=(E,(R4))          CLOSE PDSEDCB DCB
         SR    R15,R15
         L     R14,PDSER14         RESTORE BAS RETURN ADDR
         BR    R14
         DROP  R3
*
* ------------------------------------------------------------------- *
* IF THE FUNCTION IS "ALTERDIR", THEN DO THE FOLLOWING:               *
* 1) CALL "IEBCOPY" PROGRAM TO UNLOAD THE PDS MEMBERS TO TEMP DSN     *
* 2) CHECK IEBCOPY RC.  IF IEBCOPY CALL IS SUCCESSFUL, CONTINUE ON.   *
* 3) BRANCH BACK TO READ THE OLD DIRECTORY BLOCKS TO COUNT THEM.      *
* TKMILLE- 09/04/2004                                                 *
* ------------------------------------------------------------------- *
         TITLE 'HAVE AN ALTERDIR OR COMPRESS FUNCTION PROCEDURE'
DIRECT00 DS    0H
*
***********************************************************************
* CALL 'IEBCOPY' THE FIRST TIME TO UNLOAD THE PDS IMAGE TO A
*   TEMPORARY WORK FILE.  THIS IMAGE WILL BE RELOADED LATER ON TO
*   COMPRESS THE PDS.
***********************************************************************
         CLI   RECOV_FL,C'Y'        IS THE RECOVERY PROCESS ACTIVE ?
         BE    DIRECT10             YES - THEN DON'T UNLOAD THE PDS
         MVC   IEBCOPY_OPTLIST(IEBCOPY_OPTLISTL),IEBCOPY_OPTLISTI
         MVC   IEBCOPY_DDNMLIST(IEBCOPY_DDNMELSL),IEBCOPY_DDNMELST
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDINPUT-IEBCOPY_DDNMELST(8),DDN+
               AME                                  LOAD INPUT  DDNAME
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDOUTPUT-IEBCOPY_DDNMELST(8),=C+
               L8'UNLOAD  '                         LOAD OUTPUT DDNAME
         MVI   IEBCOPY_FUNCTION,C'U'          INDICATE UNLOAD FUNCTION
         MVI   RECOV_FL,C'N'       RESET THE RECOVERY FLAG
         BAS   R14,IEBCPY00     BRANCH TO IEBCOPY ROUTINE TO UNLOAD PDS
         CLC   FUNCTION,COMPRESS   COMPRESS FUNCTION ?
         BE    RELOADIE            YES - PROCESS IEBCOPY RELOAD
DIRECT10 DS    0H
         B     READDIRB
*
*
         TITLE 'HAVE A COMPRESS FUNCTION PROCEDURE'
*
COMPRS00 DS    0H
*
***********************************************************************
* CALL 'IEBCOPY' TO COMPRESS THE LIBRARY (PDS OR PDS/E).
***********************************************************************
*
         MVC   IEBCOPY_OPTLIST(IEBCOPY_OPTLISTL),IEBCOPY_OPTLISTI
         MVC   IEBCOPY_DDNMLIST(IEBCOPY_DDNMELSL),IEBCOPY_DDNMELST
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDINPUT-IEBCOPY_DDNMELST(8),DDN+
               AME                                  LOAD INPUT  DDNAME
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDOUTPUT-IEBCOPY_DDNMELST(8),DD+
               NAME                                 LOAD OUTPUT DDNAME
         MVI   IEBCOPY_FUNCTION,C'C'          INDICATE UNLOAD FUNCTION
*
         BAS   R14,IEBCPY00     BRANCH TO IEBCOPY ROUTINE TO COMPRESS
*
         MVC   MSG39,COMPRSMS
         MVC   MSG39(7),PDSELIT
         TM    DS1SMSFG,DS1PDSE    IS THIS A PDS/E FILE ?
         BO    PRTCOMMS            YES - PRINT COMPRESS MESSAGE
         MVC   MSG39(7),PDSLIT
PRTCOMMS DS    0H
         MVC   MSGTXT,MSG39        LOAD LIB-WAS-COMPRESSED MESSAGE
         MVC   MSGDSN,BLANKLIN BLANK OUT THE DSN IN MSG
         MVC   MSGDSN,JFCBAR       MOVE IN DSNAME INTO SYSPRINT MSG
         PUT   SYSPRINT,MSGTXTLN   OUTPUT MESSAGE LINE
         AP    COMPRSCT,ONEPK    INCREMENT COMPRESSED LIBS COUNTER
COMPRS10 DS    0H
         B     RESETIEB          EXIT AND GET NEXT SYSIN RECORD
*
* ------------------------------------------------------------------- *
* CALL IEBCOPY TO UNLOAD/RELOAD A PDS FOR 'ALTERDIR' COMMAND FUNCTION *
*   OR TO COMPRESS A PDS OR PDS/E FOR THE 'COMPRESS' COMMAND FUNCTION *
* TKMILLE - 09/04/2004                                                *
* ------------------------------------------------------------------- *
         TITLE 'IEBCOPY  - PROCEDURE'
IEBCPY00 DS    0H
         ST    R14,IEBCR14              STORE BAS RETURN ADDR
         XC    PGMECB,PGMECB                      CLEAR ECB
         MVC   ATTACHW(ATTACHIL),ATTACHI      RELOCATE ATTACH PARMLIST
         MVC   IEBCOPY_RETURN_CODE,=A(0)      INITIALIZE
         MVC   IEBCOPY_REASON_CODE,=A(0)      INITIALIZE
         ATTACH EP=IEBCOPY,          ATTACH REQUESTED PROGRAM          +
               ECB=PGMECB,           .. ECB ADDRESS                    +
               PURGE=HALT,IEBCOPY,   .. HALT SUBTASK I/O IF IT ABENDS  +
               PARAM=(IEBCOPY_OPTLIST,IEBCOPY_DDNMLIST), IEBCOPY PARMS +
               VL=1,                                INDICATE END PARMS +
               SF=(E,ATTACHW),       .. ATTACH PARM LIST               +
               MF=(E,IEBCOPY_PLIST)  .. IEBCOPY PARM LIST
         ST    R1,PGMTCB             SAVE TCB ADDRESS
         LR    R7,R15                SAVE ATTACH RETURN CODE
IEBCPY10 DS    0H
         LTR   R7,R7                 ATTACH SUCCESSFUL?
         BNZ   ATTACHFL              NO - ATTACH FAILED
         WAIT  ECB=PGMECB            WAIT FOR SUBTASK TO COMPLETE
         L     R9,PGMTCB             TCB OF ATTACHED TASK
         USING TCB,R9                DEFINE ADDRESSABILITY
         SR    R1,R1                 CLEAR REGISTER
         ICM   R1,3,TCBCMPC          STEP COMPLETION CODE
         SRL   R1,4                  SHIFT 4 BITS
         LTR   R1,R1                 SYSTEM ABEND PRESENT ?
         BNZ   SYSABEND              YES - SYSTEM ABEND
         TM    TCBFLGS1,TCBFA        USER ABEND PRESENT ?
         DROP  R9
         BO    USERABND              YES - USER ABEND
         DETACH PGMTCB               REMOVE THE ATTACHED TASK
         L     R7,IEBCOPY_RETURN_CODE   LOAD IEBCOPY RETURN CODE
         LTR   R7,R7                 RETURN CODE = 0 ?
         MVC   ABENDCD(4),BLANKLIN   CLEAR ABENDCD
         BNZ   IEBCPYER              NO - ERROR ON IEBCOPY
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDINPUT-IEBCOPY_DDNMELST(8),BLA+
               NKLIN                           BLANK OUT INPUT  DDNAME
         MVC   IEBCOPY_DDNMLIST+IEBCOPY_DDOUTPUT-IEBCOPY_DDNMELST(8),BL+
               ANKLIN                          BLANK OUT OUTPUT DDNAME
         L     R14,IEBCR14           RESTORE BAS RETURN ADDR
         BR    R14                   YES - GOOD RETURN CODE IEBCOPY
*
USERABND DS    0H                    HAVE USER ABEND
         STH   R1,DOUBLE             SAVE ABEND CODE
         UNPK  ABENDCD(5),DOUBLE(3)  UNPACK ABEND CODE
         MVZ   ABENDCD,HEX0F0F       TURN OFF ZONES
         TR    ABENDCD,HEXCHAR       TRANSLATE TO PRINTABLE
         MVI   ABENDCD+4,C' '        RESTORE THE BLANK
         DETACH PGMTCB               REMOVE THE ATTACHED TASK
         B     IEBCPYER              NO - USER ABEND ON IEBCOPY
*
SYSABEND DS    0H                    HAVE SYSTEM ABEND
         STH   R1,DOUBLE             SAVE ABEND CODE
         UNPK  ABENDCD(5),DOUBLE(3)  UNPACK ABEND CODE
         MVZ   ABENDCD,HEX0F0F       TURN OFF ZONES
         TR    ABENDCD,HEXCHAR       TRANSLATE TO PRINTABLE
         MVI   ABENDCD+4,C' '        RESTORE THE BLANK
         CLI   IEBCOPY_FUNCTION,C'U' JUST DID UNLOAD FUNCTION ?
         DETACH PGMTCB               REMOVE THE ATTACHED TASK
         BE    IEBCPYER            YES - HAPPENED ON IEBCOPY UNLOAD
*        CLC   ABENDCD(4),=CL4'0D37'   GET S0D37 ABEND ON RELOAD ?
*        BNE   IEBCPYER              NO - USER ABEND ON IEBCOPY
* ------------------------------------------------------------------- *
* ENTER INTO RECOVERY PHASE TO RECOVER THE PDS.  THE ADDITION OF
*    DIRECTORY BLOCKS DID NOT LEAVE ROOM TO RESTORE THE PDS MEMBERS.
* ------------------------------------------------------------------- *
         CLI   RECOV_FL,C'Y'  ALREADY IN RECOVERY MODE ?
         BE    SEVERE_ERROR   YES - TERMINATE - SEVERE ERROR
TRYRECOV DS    0H                    HAVE SYSTEM ABEND
         MVI   RECOV_FL,C'Y'  TURN ON RECOVERY FLAG TRY TO RECOVER PDS
         B     RECOVER         RESTORE DIRECTORY BLOCKS AND DATA
*
**********************************************************************
*    STATIC STORAGE FOLLOWS
**********************************************************************
         LTORG
**********************************************************************
         TITLE 'IEBCOPY  - STATIC DATA AREAS'
**********************************************************************
IEBCOPY_PARMINIT      DS  0H
IEBCOPY_OPTLISTI      DC  AL2(IEBCOPY_OPTPARML)
IEBCOPY_OPTPARM       DC  C'SIZE=1M,WORK=1M,REPLACE'
IEBCOPY_OPTPARML      EQU *-IEBCOPY_OPTPARM
IEBCOPY_OPTLISTL      EQU *-IEBCOPY_OPTLISTI
*
IEBCOPY_DDNMELST      DC  AL2(IEBCOPY_DDNMPRML)
IEBCOPY_DDNMPARM      DC  4XL8'0'                   SKIP FOUR DDNAMES
IEBCOPY_SYSIN_DDNAME  DC  1CL8'$SYSIN$$' RENAME THE IEBCOPY SYSIN DDNME
IEBCOPY_SYSPRT_DDNAME DC  1CL8'$SYSPRT$' RENAME IEBCOPY SYSPRINT DDNAME
                      DC  1XL8'0'                   SKIP ONE DDNAME
IEBCOPY_DDINPUT       DC  CL8'SYSUT1  '             INPUT DDNAME
IEBCOPY_DDOUTPUT      DC  CL8'SYSUT2  '             OUTPUT DDNAME
IEBCOPY_DDNMPRML      EQU *-IEBCOPY_DDNMPARM
IEBCOPY_DDNMELSL      EQU *-IEBCOPY_DDNMELST
*
READCCWI DS    0D
         CCW   X'31',*,X'40',5      SEARCH CHAIN
         CCW   X'08',*-8,0,0               TIC
         CCW   X'1E',*,X'20',8+8+256   READ COUNT KEY DATA
READCCWL EQU   *-READCCWI
*
WRITCCWI DS    0D
         CCW   X'31',*,X'40',5      SEARCH CHAIN
         CCW   X'08',*-8,0,0               TIC
         CCW   X'1D',*,X'20',8+8+256   WRITE COUNT KEY DATA
WRITCCWL EQU   *-WRITCCWI
*
EOFCCWI  DS    0D
         CCW   X'31',*,X'40',5      SEARCH CHAIN
         CCW   X'08',*-8,0,0               TIC
         CCW   X'1D',*,X'20',8         WRITE COUNT KEY DATA
EOFCCWL  EQU   *-EOFCCWI
*
**********************************************************************
         TITLE 'PDSCLEAN - MACRO LISTS'
**********************************************************************
RDJFCBI  DS    0F
         RDJFCB  *,MF=L                   JFCB MACRO INIT AREA
RDJFCBIL EQU   *-RDJFCBI
*
OPENI    DS    0F
         OPEN  (*,OUTPUT),MODE=31,MF=L
OPENIL   EQU   *-OPENI
*
CAMLSTI  DS    0F
         CAMLST SEARCH,1,2,3        OBTAIN PARMLIST INIT AREA
CAMLSTIL EQU   *-CAMLSTI
*
EXTRACTI DS    0F
         EXTRACT MF=L               EXTRACT PARAMETER LIST
EXTRACTL EQU   *-EXTRACTI
*
ATTACHI  DS    0F
         ATTACH EP=*-*,              ATTACH REQUESTED PROGRAM          +
               ECB=*-*,              .  ECB ADDRESS                    +
               PURGE=HALT,IEBCOPY,   .. HALT SUBTASK I/O IF IT ABENDS  +
               SF=L
ATTACHIL EQU   *-ATTACHI
*
WTOI     DS    0F
         WTO   '                                                       +
                                                                       +
                              ',MF=L,ROUTCDE=(11)
WTOIL    EQU   *-WTOI
*
**********************************************************************
         TITLE 'PDSCLEAN - DCBS'
**********************************************************************
PDSEDCBI DCB   DDNAME=XXXXXXXX,                                        +
               DSORG=PO,                                               +
               MACRF=W
PDSEDCBL EQU  *-PDSEDCBI
*
EXCPDCBI DCB   DDNAME=XXXXXXXX,                                        +
               DEVD=DA,                                                +
               DSORG=PO,                                               +
               EXLST=*,                                                +
               MACRF=E
EXCPDCBL EQU  *-EXCPDCBI
*
JFCBLSTI       DS    0F
               DC    XL1'87',AL3(0)             INIT JFCB EXIT LIST
JFCBLSTL       EQU   *-JFCBLSTI
*
SYSINI   DCB   DDNAME=SYSIN,MACRF=(GM),DSORG=PS,EODAD=END_SYSIN,       +
               LRECL=80,RECFM=FB
SYSINIL  EQU  *-SYSINI
*
SYSPRINI DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,                    +
               LRECL=125,RECFM=FBA
SYSPRINL EQU  *-SYSPRINI
*
ZEROPK    DC    PL1'0'
ONEPK     DC    PL1'1'
ALTERDIR  DC    CL8'ALTERDIR'
COMPRESS  DC    CL8'COMPRESS'
EMPTYDIR  DC    CL8'EMPTYDIR'
EMPTY     DC    CL8'EMPTY   '
EMPTYO    DC    CL8'EMPTYO  '
ZERODIR   DC    CL8'ZERODIR '
DDUNLOAD  DC    CL8'UNLOAD  '
DDSYSUT1  DC    CL8'SYSUT1  '
DDSYSUT2  DC    CL8'SYSUT2  '
HEXZERO   DC    8X'00'
HEX0F0F   DC    4X'0F'                CONSTANT
HEXCHAR   DC    C'0123456789ABCDEF'   CONSTANT
PDSLIT    DC    CL7'  PDS  '
PDSELIT   DC    CL7'  PDS/E'
*
BLANKLIN  DC    CL125' '
**********************************************************************
         TITLE 'PDSCLEAN - MESSAGES'
**********************************************************************
NOTAUTHM DC    CL39'**MODULE PDSCLEAN IS NOT APF AUTHORIZED'
TOKLENMS DC    CL39'**INVALID FUNCTION (LENGTH < 2 CHARS)=>'
INVFUNMS DC    CL39'**INVALID FUNCTION                   =>'
INVDDNMS DC    CL39'**INVALID DDNAME                     =>'
INVDBLMS DC    CL39'**INVALID DIRBLKS (LENGTH > 8 CHARS) =>'
NOTNUMMS DC    CL39'**NON-NUMERIC DIRBLKS                =>'
NEGDBLMS DC    CL39'**NEGATIVE DIRBLKS                   =>'
NOFUNCMS DC    CL39'**NO FUNCTION SPECIFIED -              '
NOFUNCM2 DC    CL39'  USE ZERODIR, ALTERDIR, OR COMPRESS.  '
NODDNMMS DC    CL39'**NO DDNAME SPECIFIED                =>'
NODRBLMS DC    CL39'**DIRECTORY BLOCKS NOT SPECIFIED -     '
NODRBLM2 DC    CL39'  MUST BE INCLUDED ON "ALTERDIR" CMD.  '
PDSCLNMS DC    CL39'  PDS WAS EMPTIED                    =>'
ORIGBLKS DC    CL39'  PDS ORIGINAL DIRECTORY BLOCK COUNT =>'
PDSALTMS DC    CL39'  PDS DIRECTORY WAS ALTERED          =>'
PDSALTTO DC    CL39'  PDS DIRECTORY BLOCKS CHANGED TO    =>'
PDSRESET DC    CL39'  PDS DIRECTORY BLOCKS RESET BACK TO =>'
PDSRECM1 DC    CL39'**PDS DIRECTORY ALTERATION FAILED !  =>'
PDSRECM2 DC    CL39'  PDS IS BEING RECOVERED AFTER A       '
PDSRECM3 DC    CL39'  FAILED ATTEMPT TO INCREASE DIR BLKS. '
PDSRECM4 DC    CL39'**NOT ENOUGH SPACE TO RELOCATE MEMBERS '
RECPDSMS DC    CL39'  PDS RECOVERED BACK TO ORIGINAL STATE '
IOERMSG  DC    CL39'**TTR TRANSLATE FAILURE                '
COMPRSMS DC    CL39'        WAS COMPRESSED               =>'
PDSECLMS DC    CL39'  PDS/E WAS EMPTIED                  =>'
DSORGERM DC    CL39'**INVALID DSORG (NOT PO OR POE)      =>'
OBTNERRM DC    CL39'**INVALID CALL TO OBTAIN MACRO         '
STOWERRM DC    CL39'**INVALID CALL TO STOW MACRO           '
DISPSHM1 DC    CL39'**YOU MUST USE DISP=OLD OR DISP=MOD    '
DISPSHM2 DC    CL39'  WITH PDS/E DATASET ALLOCATIONS!      '
DIRBLDCG DC    CL39'**DIRECTORY BLOCKS WERE DECREASED!     '
RETREASM DC    CL39'  RETURN CODE / REASON CODE =          '
DIRIOMSG DC    CL39'**I/O ERROR WRITING THE DIRECTORY      '
DIREOFMS DC    CL39'**I/O ERROR WRITING THE DIRECTORY EOF  '
JFCBMSG  DC    CL39'**ERROR READING JFCB                   '
OPENMSG  DC    CL39'**ERROR OPENING FILE                   '
DIRBLKMS DC    CL39'**NO DIRECTORY BLOCKS                  '
DEVADMSG DC    CL39'**DEVICE TYPE NOT DISK                 '
BALERMSG DC    CL39'**TRACK BALANCE ERROR                  '
CAPACMSG DC    CL39'**TRACK CAPACITY ERROR                 '
TIOTNFMS DC    CL39'**DDNAME NOT FOUND - NOT ALLOCATED   =>'
PDSEDIRM DC    CL39'**YOU CANNOT ALTER PDS/E DIRECTORIES =>'
PDSECOMP DC    CL39'        DOESNT NEED TO BE COMPRESSED =>'
ATTACHMS DC    CL39'**ATTACH TO IEBCOPY PROGRAM FAILED     '
IEBCPYM1 DC    CL39'**IEBCOPY FAILED ON UNLOAD PROCESS     '
IEBCPYM2 DC    CL39'**IEBCOPY FAILED ON RELOAD PROCESS     '
IEBCPYM3 DC    CL39'**IEBCOPY PROGRAM RECEIVED ABEND CODE  '
RELOADMS DC    CL39'  PDS WAS UNLOADED/RELOADED WITH RC=0  '
SYSINMS  DC    CL50'TOTAL NUMBER OF INPUT SYSIN RECORDS PROCESSED     '
VLDSYSMS DC    CL50'TOTAL NUMBER OF VALID SYSIN RECORDS PROCESSED     '
INVSYSMS DC    CL50'TOTAL NUMBER OF INVALID SYSIN RECORDS PROCESSED   '
ERRORSMS DC    CL50'TOTAL NUMBER OF ERRORS ENCOUNTERED                '
CLNCNTMS DC    CL50'TOTAL NUMBER OF DATASETS CLEANED (EMPTIED)        '
ALTCNTMS DC    CL50'TOTAL NUMBER OF DIRECTORY BLOCK ALTERATIONS       '
COMCNTMS DC    CL50'TOTAL NUMBER OF PDS/PDSE LIBRARIES COMPRESSED     '
MAXRCMSG DC    CL50'MAXIMUM RETURN CODE ENCOUNTERED ON THIS EXECUTION '
*
**********************************************************************
*    DYNAMIC STORAGE FOLLOWS  (ACQUIRED STORAGE AREA)
**********************************************************************
         TITLE 'PDSCLEAN - DYNAMIC DATA AREAS'
**********************************************************************
STORAREA  DSECT ,                 REENTRANT STORAGE
SAVEAREA  DS    20F
PARMADDR  DS    F                 Parameter Address
SAVER0    DS    F
SAVER15   DS    F
FUNCTION  DS    CL8
FUNCTLN   DS    F
DDNAME    DS    CL8
DDNAMELN  DS    F
DIRBLKS   DS    ZL8
DIRBLKLN  DS    F
DIRBLKFW  DS    F
SYSINCNT  DS    PL4               INPUT   SYSIN RECORD COUNTER
VALIDCNT  DS    PL4                 VALID SYSIN RECORD COUNTER
INVLDCNT  DS    PL4               INVALID SYSIN RECORD COUNTER
ERRORCNT  DS    PL4               LOGIC ERRORS ENCOUNTERED COUNTER
OPENED_SYSIN DS CL1               SYSIN FILE HAS-BEEN-OPENED INDICATOR
HAVE_FUNC DS    CL1
HAVE_DDN  DS    CL1
HAVE_DB   DS    CL1
NEG_DB    DS    CL1
NONUM_DB  DS    CL1
ALTER_SUCC DS   CL1        INDICATES A SUCCESSFUL DIR BLK ALTERATION
RECOV_FL  DS    CL1        IEBCOPY RELOAD FAILED FLAG - RECOVER PDS
DOIOSAVE  DS    4F
CLEANCNT  DS    PL4               CLEAN COUNTER
COMPRSCT  DS    PL4               COMPRESSED LIBRARIES COUNTER
DIRCHGCT  DS    PL4               DIRECTORIES CHANGED COUNTER
ABENDCD   DS    CL4               ABEND CODE RETURNED FROM IEBCOPY
ABENDCD1  DS    CL1
DIRBLKSF  DS    F                 STORE THE # OF DIRECTORY BLOCKS
DIRBLKDI  DS    ZL7               STORE DISPLAY MSG # OF DIR BLOCKS
UNPKAREA  DS    CL9
DOUBLE    DS    D                 DOUBLE WORD
FULL      DS    F                 FULL WORD
MAX_RC    DS    F                 MAXIMUM RETURN CODE
MAX_RC_DI DS    ZL7               MAXIMUM RETURN CODE DISPLAY FIELD
PGMECB    DS    F                 ECB POSTED AT SUBTASK TERMINATION
PGMTCB    DS    F                 TCB ADDRESS OF ATTACHED TASK
*
***********************************************************************
         TITLE 'DIRECTXX  - DATA AREAS'
***********************************************************************
         DS    0F
OLDDIRBL DS    F
NEWDIRBL DS    F
EXCPECB  DS    F
DOIOR14  DS    F
BALFR14  DS    F
UPDDR14  DS    F
PDSER14  DS    F
IEBCR14  DS    F
TIOTADDR DS    A
RECMAX   DS    H
*
* TTRn is R0 form for entry at address CVTPCNVT+0 (old entry point)
* @CVTPCNVT entry point does not support pds datasets with more than
* 65,535 tracks.  This entry point (original entry point) is more
* restrictive so it is longer used.
*
*TTRN     DS    0F
*TTRNTRK  DS    XL2        relative track number (halfword)
*TTRNRECN DS    XL1        relative record number
*TTRNCONC DS    XL1        PDS concatenation number
*
* TTTR is R0 form for entry at CVTPCNVT+12 (for all datasets)
*
TTTR     DS    0F
TTTRTRK  DS    XL3         relative track number (for tracks > 65535)
TTTRRECN DS    XL1         relative record number
*                          PDS concatenation number is in Reg 13 (low
*                              order byte)
*
IDSEARCH DS    0XL5
IDCC     DS    XL2
IDHH     DS    XL2
IDR      DS    X
*
DEVAREA  DS    CL(DVAEND-DVAREA)
*
STAR     TRKCALC MF=D              TRKCALC LIST WITH LABELS
         DS    0D
COUNT    DS    0CL8                SEEK ADDRESS
CTCC     DS    XL2                    CYLINDER ADDRESS
CTHH     DS    XL2                    HEAD     ADDRESS
CTRKDD   DS    0XL4                   TRKCALC DATA
CTR      DS    X                         RECORD NUMBER
CTKL     DS    X                         KEY LENGTH
CTDL     DS    XL2                       DATA LENGTH
KEY      DS    XL8                 KEY
DATAX    DS    XL256               DATA
*
         DS    0D
EXCPIOB  DS    CL(IOBR-IOBSTDRD+L'IOBR)  MAP STANDARD SECTION OF IOB
*
SYSINREC  DS    80CL1
SYSINRCL  EQU   *-SYSINREC
*
***********************************************************************
* BASE SYSTEM RETURNED DATE AND TIME
***********************************************************************
         DS    0F
CURRTIME DS    F                  CURRENT TIME OF DAY HHMMSSHH (BINARY)
CURRDATE DS    PL4                CURRENT JULIAN DATE
*
DISPTIME DS    0F                    CURRENT TIME IN DISPLAY FORMAT
DISPTMHH DS    CL2                   HOURS
DISPTMC1 DS    CL1                   COLON
DISPTMMM DS    CL2                   MINUTES
DISPTMC2 DS    CL1                   COLON
DISPTMSS DS    CL2                   SECONDS
DISPTIML EQU   *-DISPTIME            LENGTH OF DISPTIME
*
TIMEXXXX DS    CL8                   CURRENT TIME HH:MM:SS
*
STORTIME DS    F                     USED TO CONVERT TO PACKED DECIMAL
STORTMSG DS    XL1                   SIGN FOR PACKED DECIMAL
TIME9    DS    CL9                   STORE PACKED-TO-ZONE CONVERSION
*
JULIANDT DS    0F                    7 DIGIT JULIAN DATE
JULCENTY DS    CL2                   JULIAN DATE'S CENTURY
JULIANYR DS    CL2                   JULIAN DATE'S YEAR
JULDAYS  DS    CL3                   JULIAN DATE'S DAYS
JULDATEL EQU   *-JULIANDT            LENGTH OF JULIANDT
*
DATEXXXX DS    CL7                   JULIAN DATE YYYYDDDD
*
**********************************************************************
         TITLE 'RELOCATED DCBS AND MACROS'
**********************************************************************
PDSEDCB   DS    0F,CL(PDSEDCBL)      PDSEDCB  DCB RELOCATE AREA
EXCPDCB   DS    0F,CL(EXCPDCBL)      EXCPDCB  DCB RELOCATE AREA
SYSIN     DS    0F,CL(SYSINIL)       SYSIN    DCB RELOCATE AREA
SYSPRINT  DS    0F,CL(SYSPRINL)      SYSPRINT DCB RELOCATE AREA
*
WKOPENCL  DS    0F,CL(OPENIL)        OPEN/CLOSE MACRO RELOCATE AREA
WKRDJFCB  DS    0F,CL(RDJFCBIL)      RDJFCB MACRO RELOCATE AREA
EXTRACTW  DS    0F,CL(EXTRACTL)      EXTRACT MACRO RELOCATE AREA
ATTACHW   DS    0F,CL(ATTACHIL)      ATTACH  MACRO LIST RELOCATE AREA
READCCW   DS    0D,CL(READCCWL)      RELOCATE READCCW
WRITECCW  DS    0D,CL(WRITCCWL)      RELOCATE WRITECCW
EOFCCW    DS    0D,CL(EOFCCWL)       RELOCATE EOFCCW
*
**********************************************************************
         TITLE 'IEBCOPY FUNCTION DATA AREAS'
**********************************************************************
IEBCOPY_PLIST    DS 2F                      RELOCATE IEBCOPY PLIST
IEBCOPY_OPTLIST  DS 0H,CL(IEBCOPY_OPTLISTL) RELOCATE IEBCOPY PARMS
                 CNOP  6,8
IEBCOPY_DDNMLIST DS 0H,CL(IEBCOPY_DDNMELSL) RELOCATE IEBCOPY PARMLIST
IEBCOPY_FUNCTION    DS  CL1     U - UNLOAD  R - RELOAD  C - COMPRESS
IEBCOPY_RETURN_CODE   DS  F
IEBCOPY_REASON_CODE   DS  F
*
GETPUT_FUNCTION       DS  XL1   DIRECTORY I/O FUNCTION - GET/PUT (G/P)
*
JFCBLIST  DS    F                    JFCB EXIT LIST RELOCATE AREA
JFCBAR    DS    CL(JFCBLGTH)         RDJFCB WORK AREA BUFFER
          ORG   JFCBAR
          IEFJFCBN LIST=YES
*
**********************************************************************
* OBTAIN SEARCH PARAMETER LIST FOLLOWS
**********************************************************************
CAMPRMLS    DS    0F                CAMLST PARAMETER LIST
CAMLFUNC    DS    X                 FUNCTION
CAML2       DS    X                 NOT USED WITH SEARCH
CAML3       DS    X                 NOT USED WITH SEARCH
CAML4       DS    X                 NOT USED WITH SEARCH
CAMLDSN     DS    F                 CAMLIST DATASET NAME
CAMLVOL     DS    F                 CAMLIST VOLSER
CAMLWRK     DS    F                 CAMLIST WORK AREA
*
CAMWORK     DS    0D,CL148
            ORG   CAMWORK-44     RECORD KEY IS NOT INPUT
            IECSDSL1 (1)         FORMAT 1 DSCB
            ORG   ,
            SPACE 3
            EJECT
*
MSG39       DS  CL39             RELOCATE ERROR MESSAGE
*
**********************************************************************
         TITLE 'SYSPRINT HEADING AND DETAIL LINES'
**********************************************************************
*
HEADING1 DS    0CL125         FIRST HEADING RECORD FOR SYSPRINT
         DS    CL1                     CARRIAGE CONTROL CHARACTER
H1LIT1   DS    CL9
H1VERS   DS    CL9             PROGRAM MAINTENANCE LEVEL VERS.REL.MOD
H1LIT2   DS    CL42
         DS    CL1
H1DATE   DS    CL8             CURRENT JULIAN DATE
         DS    CL1
H1TIME   DS    CL8             CURRENT TIME
         DS    46CL1
HEADING1L  EQU *-HEADING1
*
TRAILER1 DS    0CL125          TRAILER RECORD FOR SYSPRINT
         DS    15CL1
T1MSG    DS    CL50
T1LIT1   DS    CL4
T1COUNT  DS    ZL7             CLEAN COUNT DISPLAYED
         DS    53CL1
TRAILER1L  EQU *-TRAILER1
*
SYSINLN  DS    0CL125
         DS    CL1
SYSRECMS DS    CL13
SYSRECRD DS    CL80
         DS    30CL1
SYSINLNL   EQU *-SYSINLN
*
MSGTXTLN DS    0CL125
         DS    CL1
MSGTXT   DS    CL39
         DS    CL3
MSGDSN   DS    CL44
         DS    38CL1
MSGTXTL     EQU *-MSGTXTLN
*
EXECWTO  DS    CL(WTOIL)        WTO MESSAGE AREA
EXECWTOL EQU   *-EXECWTO
*
STORSIZE    EQU   *-STORAREA
*
**********************************************************************
         TITLE 'DSECTS'
**********************************************************************
         DCBD   DSORG=PO,DEVD=DA , | DCB DSECT
CVT      DSECT ,
         CVT  LIST=YES,DSECT=YES , | Communications Vector Table DSECT
         IKJTCB LIST=YES ,
         IEZIOB ,                  | Input/Output Block DSECT
         IHADVA ,                  | Device Type DSECT
         IEFUCBOB ,                | Unit Control Block DSECT
TIOTD    DSECT ,
         IEFTIOT1 ,                | Task Input/Output Table DSECT
         IEZWPL ,                  | WTO Parameter List DSECT
         YREGS ,                   | Register equates
         END
