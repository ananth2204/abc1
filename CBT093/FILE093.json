{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011216000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 5055596, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 21, "INMDSNAM": "CBT.V500.FILE093.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 5055596, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 5055596, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE093.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00O\\x0f'", "DS1TRBAL": "b'\\x03\\xb8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\x8e\\x00\\x07\\x00\\x93\\x00\\x0b\\x00P'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$$ADD": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01R\\x00A\\x01\\t(\\x0f\\x01\\t(\\x0f\\x00G\\x00#\\x00#\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.82", "flags": 0, "createdate": "2009-10-07T00:00:00", "modifydate": "2009-10-07T00:47:41", "lines": 35, "newlines": 35, "modlines": 0, "user": "SBGOLOB"}, "text": "//*                                                                 *   FILE 093\n//*           1.  OFFLOADW AND PDSLOADW    (MODIFIED FROM           *   FILE 093\n//*               CBT TAPE BY GREG PRICE, et al)                    *   FILE 093\n//*                                                                 *   FILE 093\n//*               These have now been fixed to handle extended      *   FILE 093\n//*               ISPF stats if they exist (from z/OS 1.11).        *   FILE 093\n//*                                                                 *   FILE 093\n//*           Extended format of the ./ ADD card:                   *   FILE 093\n//*                                                                 *   FILE 093\n//*    From columns 01 thru 68 is the old format of the ./ ADD card *   FILE 093\n//*                                                                 *   FILE 093\n//*    Column 72 has to be a space, to accommodate IEBUPDTE ./      *   FILE 093\n//*     continuations, if they exist.                               *   FILE 093\n//*                                                                 *   FILE 093\n//*    From columns 70 thru 80 is the new format, as follows:       *   FILE 093\n//*                                                                 *   FILE 093\n//*    ----+----1----+----2-                                        *   FILE 093\n//*    ./ ADD NAME=membname                                         *   FILE 093\n//*                                                                 *   FILE 093\n//*    ---+----3----+----4----+----5----+----6----+----7----+----8  *   FILE 093\n//*    vvmm-crdat-moddt-hhmm-sssss-iiiii-mmmmm-MYUSRID ss nnniiimm  *   FILE 093\n//*    ver  yyjjj yyjjj time size  init  modif userid               *   FILE 093\n//*    mod                                                          *   FILE 093\n//*                          last                                   *   FILE 093\n//*                          five   same  same                      *   FILE 093\n//*                          digits                                 *   FILE 093\n//*                                                                 *   FILE 093\n//*           where ss  is decimal digits 1-2 of seconds of time    *   FILE 093\n//*           where nnn is decimal digits 6-8 of the ISPF size      *   FILE 093\n//*                   (so maximum number is 99,999,999).            *   FILE 093\n//*           where iii is decimal digits 6-8 of the ISPF init      *   FILE 093\n//*                   (so maximum number is 99,999,999).            *   FILE 093\n//*           where mm  is decimal digits 6-7 of the ISPF modified  *   FILE 093\n//*                   (so maximum number is 9,999,999).             *   FILE 093\n//*                                                                 *   FILE 093\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$#DATE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x002\\x01 \\x11?\\x01 \\x11?#$\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-04-22T00:00:00", "modifydate": "2020-04-22T23:24:32", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-499"}, "text": "REGULAR CBT TAPE - VERSION 499    FILE:  093\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT499.FILE093\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 90 MEMBERS COUNTED; CUMULATIVE SIZE IS 47,376 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/22/20    23:24:32    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x91\\x13o\\x01\\x00)\\x9f\\x111\\x00>\\x00@\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "2000-10-25T11:31:00", "lines": 62, "newlines": 64, "modlines": 0, "user": "WSBG"}, "text": " ****   \" IEBUPDTE \" SEQUENTIALIZING OF RECFM = FB  PDS   ****\n ****            L R E C L     NOT  =   80                ****\n ****  EXTENDED RECFM=FB SEQUENTIAL-TO-PDS UNLOAD SYSTEM  ****\n ****        OR RECFM=VB  (WITH UNUPDTE-UPDTE)            ****\n\n        THIS SYSTEM SHOULD PROVE USEFUL IF YOU WANT\n        TO \"SEQUENTIALIZE\" A PDS.\n\n ----   THIS LIBRARY CONTAINS TWO PAIRS OF PROGRAMS:      ----\n\n     1.  OFFLOADW AND PDSLOADW    (MODIFIED FROM CBT TAPE)\n     2.  UNUPDTE  AND UPDTE       (FROM PL1 MODS TAPE - SPLA)\n\n ----   EACH PAIR IS A SELF-CONTAINED SYSTEM THAT IS      ----\n ----   INDEPENDENT OF THE OTHER PAIR.                    ----\n\n ----   SEE MEMBER CALLED $$$$DOC2 FOR DESCRIPTION OF     ----\n ----   UPDTE AND UNUPDTE.                                ----\n\n ----   INSTALL MEMBERS ARE PROVIDED FOR EACH OF THE      ----\n ----   FOUR PROGRAMS.  THESE MEMBERS ARE SUFFIXED BY     ----\n ----   THE STRING \"INS\".                                 ----\n\n        OFFLOADW AND PDSLOADW ALLOW IEBUPDTE-TYPE\n        UNLOADING AND RELOADING OF PDS'ES TO SEQUENTIAL\n        DATASETS.  THIS IS NOT RESTRICTED TO RECORD LENGTHS\n        OF 80 FOR THE DATA.  ANY REASONABLY-SIZED\n        FIXED-BLOCKED PDS'ES ARE ELIGIBLE FOR THIS\n        TREATMENT.  THIS OPENS IEBUPDTE-TYPE UNLOADS TO\n        TAPE OR DISK-SEQUENTIAL DATASETS TO MUCH WIDER\n        APPLICATION THAN HERETOFORE.\n\n        THE RESULT WAS ACHIEVED BY SLIGHTLY MODIFYING\n        EXISTING PROGRAMS PDSLOAD (FROM CBT TAPE FILE\n        316) AND OFFLOAD (FROM CBT TAPE FILE 225).  A\n        GLOBAL VARIABLE &LRECL WAS ADDED TO EACH\n        PROGRAM.  WHEN THIS VARIABLE IS SET TO '80', THE\n        PROGRAM ASSEMBLES AS BEFORE (EXCEPT FOR THE\n        PRESENCE OF AN EYECATCHER).  HOWEVER, IF &LRECL\n        IS SET TO A DIFFERENT VALUE (I TESTED 60 AND\n        134), DATASETS OF THAT LOGICAL RECORD SIZE CAN\n        GET THE IEBUPDTE-TYPE UNLOAD AND RELOAD\n        TREATMENT, COMPLETE WITH THE   ./ ADD NAME=\n        CONTROL CARDS.\n\n        SAMPLE JCL TO EXECUTE BOTH PROGRAMS PDSLOADW\n        AND OFFLOADW IS INCLUDED.\n\n        MUCH THANKS TO ARNIE CASINGHINO OF CBT, WHO\n        INSPIRED THIS EFFORT.  HE NEEDED TO MAKE GLOBAL\n        CHANGES TO AN ACF2 DATABASE THAT WAS DUMPED TO\n        PDS FORMAT.  THE CHANGES WOULD BE MORE EFFICIENTLY\n        DONE TO A SEQUENTIAL DATASET THAN IF EACH MEMBER\n        OF A 2000-MEMBER PDS HAD TO BE ACCESSED SEPARATELY.\n\n        GOOD LUCK.  YOU CAN CONTACT:\n\n                         SAM GOLOB\n                         P.O. BOX 906\n                         TALLMAN, NY 10982-0906\n\n        EMAIL:  SBGOLOB@ATTGLOBAL.NET   AND/OR  SBGOLOB@AOL.COM\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE02": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00$\\x00$\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "FILE093"}, "text": "                      UPDTE AND UNUPDTE PROGRAMS\n\n     The UPDTE and UNUPDTE programs were lifted from the PL1 MODS\nTAPE that can be obtained from SPLA (order number 370D-03.2.019).\n\n     These programs are more flexible than PDSLOADW and OFFLOADW in\nthat:\n\n         1.  They handle RECFM=F and also RECFM=V datasets.\n         2.  The dataset can have ANY LRECL permitted by the system.\n\n     Processing with these programs SEQUENTIALIZES A PDS by loading\neach member to a sequential dataset, preceded by a control record that\nlooks like   ./  ADD NAME=membname    , similar to an IEBUPDTE control\ncard.\n\n     The program UNUPDTE converts a partitioned dataset into sequential\nformat described by the preceding paragraph.  The program UPDTE loads\nthe sequentialized dataset of the above format back into a PDS that has\nthe same DCB attributes (except for DSORG of course).\n\n     It is also advantageous to have PDSLOADW and OFFLOADW around,\nbecause they have some options which UPDTE and UNUPDTE do not have,\nsuch as automatically converting the string ./ WITHIN a member (in\ncolumns 1-2) to some other string, such as ><.  Therefore I am including\nboth pairs of programs in this package.\n\n     JCL to run these programs is of the same format as IEBUPDTE JCL,\nto the point where each program mimics the function of IEBUPDTE.  For\ninstance, UNUPDTE, which unloads a PDS to a sequential dataset, has\nDDcards SYSPRINT, SYSUT1, and SYSUT2.  UPDTE, which does the opposite,\nhas control cards SYSPRINT, SYSIN, and SYSUT2.  You get the picture.\n\n     These four programs (two pairs) taken together, provide powerful\ntools for sequentialization of partitioned datasets.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE03": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93\\x18\\x0f\\x00\\x93\\x18\\x0f\\x19\\x13\\x00\\x15\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-06-29T00:00:00", "modifydate": "1993-06-29T19:13:00", "lines": 21, "newlines": 20, "modlines": 0, "user": "SBGCSC"}, "text": "\n          Here included is an updated source deck of OFFLOADW from\n          CBT file 93.  It should now handle any LRECL from 1 to 256\n          inclusive, and if the T=IEBUPDTE operand is specified\n          then any appropriate SSI and ISPF statistics userdata is\n          also output in IEBUPDTE/PDSLOAD format.\n\n          Just a reminder that as well as =OFFLOAD in REVIEW\n          (CBT tape file 134) there is =SEQLOAD which can\n          convert a PDS's members to a sequential data file\n          without any ./ control statements.  This is the same\n          as the OFFLOAD program when run without any T= operand\n          on its O statement.\n\n          You may want to update your VIP file 7 on the VIP tape\n          with the latest levels of PDSLOAD/OFFLOAD.  At any rate,\n          Marty Kuntz could now ship ISPF statistics on the tape\n          if he wanted to.\n\n       Greg Price      2 June, 1993\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE04": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x11\\x0f\\x00\\x99\\x13\\x9f\\x16P\\x00@\\x00;\\x00\\x00\\xe4\\xc2\\xd8\\xf0\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-04-20T00:00:00", "modifydate": "1999-05-19T16:50:00", "lines": 64, "newlines": 59, "modlines": 0, "user": "UBQ001"}, "text": "\n          PDSLOAD has now been further enhanced to handle any LRECL\n          for both fixed-length and variable-length records.  The\n          LRECL of the input sequential data set can but need not\n          match the LRECL of the output partitioned data set.\n\n          When the output PDS has fixed-length records, the input\n          file may have fixed-length or variable-length records.\n          (Text files transferred from PCs often go to variable-\n          length record files on MVS.)\n\n          When the output PDS has variable-length records, only\n          variable-length record input data is acceptable.\n\n          Undefined record format files cannot be used for input\n          or output.\n\n          The minimum input LRECL is 80.  The minimum output LRECL\n          is 1 (plus 4 for RDWs, if present).\n\n          PARM=NEW is used to specify that, like IEBUPDTE, the input\n          control+data stream is to be loaded from SYSIN, instead of\n          SYSUT1.  In any event, if an OPEN for SYSUT1 does not open\n          successfully (and no abend occurs) the OPEN is retried with\n          SYSIN as the DDname.\n\n          PARM=SPF can still be used to generate ISPF \"statistics\".\n          SSI information will be lost when this is selected.  The\n          \"userid\" of generated stats is 'PDSLOAD'.\n\n          John Kalinich's Y2K windowing fix allows for 2-digit years\n          below 66 to be deemed to belong to the 21st century.  This\n          is necessary because the PDSLOAD stats format on the ./ ADD\n          statement only allows for 2-digit years.  (Generated stats\n          did not have a Y2K bug.)\n\n          The SPF stats current record count will always be set from\n          the record count processed by PDSLOAD, even when this differs\n          from the data supplied on a ./ ADD card.  Other data will not\n          be overridden.  Apart from the userid, supplied stats are now\n          verified to consist of numeric characters.\n\n          The asterisk (*), question mark (?) and percent sign (%) are\n          now treated as generic character placeholders for member\n          selection.  The three mask characters function identically,\n          and cause a match for the corresponding byte position of\n          the member name.  Thus, S(ABC****X) will select all members\n          beginning with 'ABC' and ending in 'X' in the eighth byte,\n          and S(****) will select all members with names no longer than\n          four non-blank characters.\n\n          The IBM OS utility DDname override parameter can now be\n          used by PDSLOAD.  The SYSIN, SYSPRINT and SYSUT2 \"slots\" are\n          relevant.  (This was done to facilitate dynamic invocation\n          from the REVIEW TSO command.)  See the leading comments in\n          the source code for more information on DDname overrides.\n\n          Parameter order is 'NEW,SPF,S(********),UPDTE(><)' for\n          example.  Unwanted options can be omitted, but the order\n          is fixed.\n\n\n       Greg Price    20 April, 1999\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE05": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x04_\\x01\\x00\\x04_\\x17U\\x008\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-14T00:00:00", "modifydate": "2000-02-14T17:55:00", "lines": 56, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": " Fix for problem from STARTOOL's COMBINE subcommand.\n\n   (Henceforth from this time, STARTOOL will use the LISTPDS\n   format for expressing the ISPF stats in its COMBINE command.)\n\n           13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS\n                     ISPF STATISTICS RECORDS INTO THE ./ ADD\n                     CARDS DIFFERENTLY THAN LISTPDS AND\n                     REVIEW.  PDSLOAD IS BEING MODIFIED TO\n                     RECOGNIZE EITHER FORMAT, AND TO BE ABLE\n                     TO RE-CONSTITUTE THE ISPF STATS NO\n                     MATTER WHICH UTILITY WAS USED TO CREATE\n                     THEM, INSIDE THE ./ ADD NAME=XXXX CARDS.\n\n       WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE\n       IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"\n       ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:\n\n         CCYYDDD , INSTEAD OF YYDDD .\n\n       THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE\n       A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO\n       COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S\n       IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72\n       AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER\n       CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL\n       NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.\n\n       I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL\n       SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE\n       BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN\n       ITS FORMAT, STILL HAVE TO BE DEALT WITH.\n\n   LISTPDS format of ISPF stats in ./ ADD NAME=xxxxxxxx cards:\n\n    IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n    STATEMENT MUST LOOK LIKE THIS:\n\n       COL     DESCRIPTION\n       1-20    ./ ADD NAME=XXXXXXXX\n       21      BLANK\n       22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n               VER CREATE LASTMOD TIME SIZE INIT   MOD   ID\n\n   But STARTOOL COMBINE format that is created in the ./ ADD\n   cards looks like this:\n\n       COL     DESCRIPTION\n       1-20    ./ ADD NAME=XXXXXXXX\n       21      BLANK\n       22-75   VVMM-CCYYDDD-CCYYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n               VER  CREATE  LASTMOD TIME SIZE  INIT   MOD   ID\n\n   PDSLOAD was modified to recognize either format, and to restore\n   ISPF statistics from either format.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE06": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\t\\x13/\\x01\\t\\x13/\\x11\\x05\\x00*\\x00*\\x00\\x00\\xe3\\xc5\\xc1\\xd4`\\xc7\\xd7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-05-12T00:00:00", "modifydate": "2009-05-12T11:05:45", "lines": 42, "newlines": 42, "modlines": 0, "user": "TEAM-GP"}, "text": "Subject:    New PDSLOADW for CBT file 93\nFrom:       \"Greg Price\" <greg.price@optusnet.com.au>\nDate:       Sun, 10 May 2009 20:04:07 +1000\nTo:         \"Sam Golob\" <sbgolob@cbttape.org>\nCC:         \"Gerhard Postpischil\" <gerhard@valley.net>,\n            \"halfmeg\" <opplr@hotmail.com>\n\nHi Sam,\n\nHope you and Hindy are well.\n\nPlease find attached a zip of an xmit of an updated PDSLOADW\nintended for CBT file 93.\n\nThis version from \"Team GP\" contains a few little enhancements.\n\nGerhard's changes - chiefly done circa 2006 - add an extra parm\ncalled CTL where CTL(xy) allows the conversion of the UPDTE\ncharacters (such as ><) to characters xy (in this example)\ninstead of the usual ./ thus allowing an extra level of\nsubstitution for the IEBUPDTE-like control statement code.\n\nGerhard's changes also removed the restriction that the parms\nmust be in a certain order - they can now be supplied in any order.\n(Hooray!)\n\nIn 2008 I added a SYNAD exit for the output PDS so that an I/O\nerror message is issued to provide more details in such a case.\n\nAnd 2009 changes ensure that an alias is not created without\nits real member being loaded (thus preventing the creation of\nan invalid directory entry), as well as adding support for variable-\nlength output from fixed-length input (which also triggers the\ntruncation of trailing blanks).\n\nThis source file can be assembled with IFOX00, and is good for\nall MVS levels ever (well, 3.8 and later for sure, anyway).\n\nCheers,\nGreg\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE07": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00#\\x01\\t'\\x9f\\x01\\t'\\x9f\\x13P\\x00J\\x00J\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-10-06T00:00:00", "modifydate": "2009-10-06T13:50:23", "lines": 74, "newlines": 74, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:   Re: PDSLOAD et al\nFrom:      \"Greg Price\" <greg.price@optusnet.com.au>\nDate:      Thu, 01 Oct 2009 01:42:28 +1000\nTo:        \"sbgolob@attglobal.net\" <sbgolob@attglobal.net>,\n           \"John P Kalinich\" <jkalinic@csc.com>\n\nHi Gang,\n\nHere's my stab at updates for CBT file 93.\n\nChanged members are PDSLOADW and OFFLOADW, with a view\nto handling extended ISPF stats.\n   -------- -------- ---- -----\nThey can be assembled by IFOX00.  OFFLOADW requires macros\nfrom CBT file 93 while PDSLOADW does not.\n\nThe intermediate sequential data set (in an OFFLOAD+PDSLOAD\ncycle) now has more data in the IEBUPDTE statement comment\narea.\n\nOFFLOAD now puts the 2 seconds digits in columns 70 and 71,\nand places high-order digits in columns 73 to 80 if the offloaded\nmember had extended stats.  Note that the digits in columns 73\nto 80 may be 8 zeros if the various counters are all less than\n99,999.  All the counters may be less than 65,535 even if\nthe member has extended stats.\n\nThe seconds digits in the ./ ADD statement will be set to zero\nby OFFLOAD if they are not decimal or outside the 00-59 range,\nwhich they can be if the stats were constructed by a pre-0909\nversion of PDSLOAD and the member was loaded after a\nmember which had an SSI setting (residual data problem).\n\nIEBUPDTE will treat a non-blank in column 72 as a\ncontinuation marker for ./ statements, so that column is\nleft blank.\n\nPDSLOAD parsing requires a blank (or comma) between the\nuserid and seconds, and seconds and high-order digits if\npresent.  Note that the ISPF stats userid can never be longer\nthan 7 characters.  Original stats require 3 blanks after the\nuserid. Extended stats require 1 blank after the userid.\n\nIf there is a data item after the userid and it is not 2 bytes\nof EBCDIC decimal digits in the 00->59 range then PDSLOAD\nwill end parsing of the record.\n\nTo get the 8 high-order digits processed the 2-digit seconds\nmust be present before the 8 high-order digits.  High-order\ndigits are only processed if all 8 are present in a single string.\n\nOf the 8 contiguous high-order counter digits:\nfirst 3 ==> current count\nnext 3 ==> initial count\nlast 2 ==> modified count\n\nThese digits are prefixed to the 5 digits supplied by the old\nfields of the respective counters.  It does not give full\n(2**32)-1 coverage, but it should do for most data produced\nby ISPF Edit sessions.\n\nNow that seconds are handled, an OFFLOAD+PDSLOAD cycle\nshould mean that the old and new PDSs should compare\nequal in an IEBCOMPR\n COMPARE TYPORG=PO\ncompare, (which compares both directory entry user data and\nmember contents) assuming members have either no userdata,\nSSI userdata or ISPF stats userdata.  (IEBCOMPR will give\nCOND CODE 0000 if SYSUT1 and SYSUT2 compare equal.)\n\nCheers,\nGreg\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE08": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00$\\x01\\x12\\x00_\\x01\\x12\\x00_\\x14B\\x00\\x1f\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-01-05T00:00:00", "modifydate": "2012-01-05T14:42:24", "lines": 31, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "We are addressing a situation with the PDSLOAD member restore program.\n\n---------------------------------------------------------------------\nPDSLOAD contains member name validity checks.\nThis means that in an ./ADD NAME=mmmmmmmm card, if the member name\nmmmmmmmm is deemed \"invalid\", then that member does not get restored.\n---------------------------------------------------------------------\n\nOFFLOAD and LISTPDS do not check the validity of member names.\n\nThis situation creates a problem with restoring certain member names\nfrom the CBT Tape.\n\nThe CBT Tape (actual tape image) contains all members, as can be seen\nfrom a TAPEMAP of it.  But they do not all get restored when you\nreload the pds'es from the tape, using PDSLOAD, if the member contains\nan \"invalid character\".  The problem character that we saw, was the\nX'C0' or \"open curly bracket\".\n\nProblem was addressed as follows:\n\n  1.  X'C0' was made \"valid\" in the ALPHANUM translate table.\n\n  2.  A label BYPVALID was created in the source, after label\n        SIMPLE.  A commented instruction to branch to BYPVALID\n        can be uncommented, to get rid of this member validity\n        check altogether, if you do not want to have any member\n        validity check at all.  (Didn't uncomment in \"production\"\n        source yet.  So we still have the validity check for now.)\n\nSam Golob - 01/05/2012\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE09": {"ttr": 537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x14\\x01\\x12\\x03o\\x01\\x12\\tO\\t\\x12\\x000\\x00/\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-02-05T00:00:00", "modifydate": "2012-04-03T09:12:14", "lines": 48, "newlines": 47, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: PDSLOAD\nFrom:     \"Gerhard Postpischil\" <gerhard@valley.net>\nDate:     Sat, 07 Jan 2012 00:00:29 -0500\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nAttached is a ZIP file containing PDSLOAD.ASM, as downloaded in\nbinary using IND$FILE. In addition to the member name\nverification, I fixed a couple of other things; e.g., relying on\nSDB doesn't help turnkey-MVS users very much. As a minor benefit\nyou get the TRENT macro and sample uses.\n\nI went through an OFFLOAD/PDSLOAD/COMPARE cycle, and found no\nerrors, except that OFFLOAD used a block size of 3120 on a 3350.\nI'll look at that when I get a chance.\n\nGerhard Postpischil\nBradford, VT\n\nNote to readers from Sam Golob (Feb. 5, 2012)\n\nFor now, this version of PDSLOAD will be called PDSLOADN in File\n093.  It is a bit too different from the last PDSLOAD version\nwhich is member PDSLOADW, and it should be tested very thoroughly\nbefore it becomes eligible to become the \"default PDSLOAD source\".\n\nOf course anyone is welcome to try and test member PDSLOADN.\nIt's just that the PDSLOAD program is so pervasive in the CBT\nTape collection that I don't want to \"rock the boat\" and change\nit to this version until it is thoroughly tested.\n\nThe main problem dealt with in PDSLOAD is that it checks member\nnames for \"validity\" before it loads a new pds member with that name.\nI took a vote among two people:  Greg Price said to eliminate the\nvalidity check for member names altogether.  Gerhard Postpischil\nsaid to keep it in.  Gerhard was willing to put his money where\nhis mouth is, so he programmed a new version of PDSLOAD, here\npresented as member PDSLOADW.\n\nGerhard's new version has options.  Default is to eliminate the\nvalidity check.  Two other options are to either check the name\nin a limited manner, or check the name in a stricter manner.\n\n   PARM='NAME=ASIS'   BYPASS ALL CHECKS  (default)\n        'NAME=CHECK'  ALLOW ALL PRINTABLE CHARACTERS\n                      (EXCEPT COMMA) USING CODEPAGE 037\n        'NAME=IBM'    ENFORCE STRICT IBM JCL STANDARDS\n\nSincerely,  Sam Golob\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE10": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x009\\x01\\x13'_\\x01\\x13'_\\x12V\\x00\\x19\\x00\\x19\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-10-02T00:00:00", "modifydate": "2013-10-02T12:56:39", "lines": 25, "newlines": 25, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: TK4- beta - PDSLOAD problem\nFrom:     Gerhard Postpischil <gerhard@valley.net>\nDate:     9/29/2013 11:05 PM\nTo:       Sam Golob <sbgolob@cbttape.org>\n\nOn 9/29/2013 4:18 PM, Bert Lindeman wrote:\n> I must be doing something stupid, as I do not get it working. ;-(\n> I am using the TK4- PDSLOAD from SYS2.LINKLIB.\n\nI just found a very embarrassing error in PDSLOAD.\n\nSequence 06300000 has LH R0,80 when it should be LA R0,80 (so why\ndid it ever work?)\n\nGerhard Postpischil\nBradford, Vermont\n\nNote:  Corrected by Sam Golob in source on File 093, and in the\n       $PDSLOAD member object decks in various files on the CBT\n       tape, as best I can.  Also in File 035 and File 135.\n       Assembled location is +462.  The instruction should read:\n       4100 0050    and NOT    4800 0050, so you can zap the\n       load module as well, if that is the version of PDSLOAD\n       which you are running.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE11": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x15)\\x8f\\x01\\x15)\\x8f\"F\\x00.\\x00.\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-10-25T00:00:00", "modifydate": "2015-10-25T22:46:49", "lines": 46, "newlines": 46, "modlines": 0, "user": "SBGOLOB"}, "text": "Note about the //SYSUPLOG DD file.\n\nVersions of PDSLOADW, OFFLOADW, and LISTPDS which do this processing\nare marked as VERSION 10.0 or above.\n\nIn the report you will see:   (note the V10.0 string in the title)\n\nADS -- OFFLOAD - PDS OFFLOADING PROGRAM - V10.0\n\n       and\n\n--- PDSLOAD --- PDS MEMBER RELOAD UTILITY --- V10.0\n\n\nExplanation of processing......\n\nPDSLOADW creates a pds from a sequentialized pds, that was created\nby either IEBUPDTE, LISTPDS, or OFFLOADW.  If a MEMBER of the\noriginal pds was ITSELF an unloaded pds, then all its IEBUPDTE\ncontrol cards, prefaced by the string \"./\" in column 1, were changed\nto string \"><\" so they would not be interpreted as control cards upon\nreload of the original pds.\n\nHowever, if the original pds INITIALLY contained a record with \"><\"\nstring in column 1, this would be changed to \"./\" by PDSLOADW\nerroneously.  In order for that not to happen, such original records\nare logged in a log file.\n\nThe log file is pointed to by DD name //SYSUPLOG, which can be either\na sequential FB-80 dataset or a pds member with FB-80.\n\nIf you include a //SYSUPLOG DD card in the LISTPDS or OFFLOADW execution\nJCL, then the log file will be produced.\n\nIf you include a //SYSUPLOG DD card in the PDSLOADW execution JCL,\nthen all \"><\" cards in that file, which correspond to member cards\nin the sequential file to be loaded, will not be changed so their\nfirst two characters would become \"./\" which would create an error.\n\nWhen using PDSLOADW to reload a pds from a sequentialized PS file\n(that originally was a pds), and if you want to ensure data integrity,\nplease include the SYSUPLOG file that was originally used to create\nthe sequentialized version of the file.  If there were never originally\nany \"><\" characters in columns 1 and 2 of the original file, then you\ndon't need the SYSUPLOG file.  It will be empty.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE12": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01\\x16\\x18\\x1f\\x01\\x16\\x18\\x1f\\x130\\x00\\x04\\x00\\x04\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-06-29T00:00:00", "modifydate": "2016-06-29T13:30:36", "lines": 4, "newlines": 4, "modlines": 0, "user": "SBGOLOB"}, "text": "LISTPDS (8.2) has been fixed to accommodate extended ISPF statistics\nand the numeric counting fields have been enlarged accordingly.\n\nJune 2016.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE13": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x19\\x01\\x17\\x03/\\x01\\x17\\x03/\\x140\\x00#\\x00#\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-02-01T00:00:00", "modifydate": "2017-02-01T14:30:19", "lines": 35, "newlines": 35, "modlines": 0, "user": "SBGOLOB"}, "text": "Note on LISTPDS and 8-character ISPF userids.\n\nSeems that IBM has finally started to be serious about 8-character\nuserids.  I would think that it is difficult to implement them for\nTSO userids, because of the structure of SYS1.UADS and the PSCB\ncontrol block.  But I suppose the direction is finally going, where\nRACF-defined userids will be up to 8 bytes, whereas UADS-defined\nuserids will have to remain at 7 bytes.  (This is my guess - 02/2017)\n\nAnyway, the time seems to have arrived when ISPF userids for pds\nmembers (which are in the ISPF stats for the member) are allowed to\nbe 8-bytes long.  So we (the user-tool writing community) must fix\nLISTPDS, OFFLOAD, and PDSLOAD to accommodate this.\n\nWe have produced fixes for all of these programs, but I am not sure\nthey are ready for prime-time just yet.  The LISTPDS fix was only one\nline.  So I think it is at least as good as the old version, and I am\nputting it into \"production\" on Files 093 (source), 035, and 135\n(load).\n\nOFFLOAD was almost as simple a fix.  So that one will come next.\n\nPDSLOAD required much more work, from me, from Greg Price, and from\nits original author.  It seems to work pretty well as it is now, and\nwith a little bit more testing, I'll probably put it into production\nsoon, as well.  If you see an ISPF \"modified date\" of 2017, it will be\nthe new version, most probably.  So I won't have to update this member\nwhen that version of PDSLOAD will be put into \"production\" too.\n\nSupport:   sbgolob@cbttape.org   or   sbgolob@attglobal.net\n           (Sam Golob)\n\nPlease report any problems here.  We'll do the best we can to fix them,\nwithout a formal promise to do so.  (We try....)  All disclaimers apply.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$EPILOG": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$JCLOFFL": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x91\\x13o\\x00\\x93\\x18\\x0f\\x19\\x11\\x00\\x0b\\x00\\x10\\x00\\x0b\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1993-06-29T19:11:00", "lines": 11, "newlines": 16, "modlines": 11, "user": "SBGCSC"}, "text": "//JOBNAME  JOB (ACCOUNT#),PGMR,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1)\n//OFFLOAD EXEC PGM=OFFLOADW\n//STEPLIB  DD  DISP=SHR,DSN=YOUR.LOAD.LIBRARY\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=THE.INPUT.PDS,DISP=SHR\n//SYSUT2   DD  DSN=THE.OUTPUT.FILE,DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,SPACE=(CYL,(10,10),RLSE),\n//             DSORG=PS,RECFM=FB,LRECL=###,BLKSIZE=0\n//SYSIN    DD  *\n  O I=SYSUT1,O=SYSUT2,T=IEBUPDTE\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$JCLPDSL": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "FILE093"}, "text": "//TST2PP2L JOB ,'TECH.SUPP-SAM.GOLOB',CLASS=M,NOTIFY=TST2SSG,\n//        MSGLEVEL=(1,1),MSGCLASS=T TYPRUN=HOLD\n//*\n//******************************************************************//\n//*   PDSLOADW EXECUTION  -  LOAD PDS FROM IEBUPDTE SYSIN CARD D.S.*//\n//*    THIS VERSION WORKS FOR DATASETS WITH LRECL NOT NECESSARILY  *//\n//*    EQUAL TO 80.  SEE THE EYECATCHER IN THE LOAD MODULE PDSLOADW*//\n//*    AND IF NECESSARY REASSEMBLE, CHANGING THE GLOBAL VARIABLE   *//\n//*    CALLED &LRECL.                                              *//\n//******************************************************************//\n//*\n//S01UPDTE EXEC PGM=PDSLOADW,PARM='UPDTE(./)'\n//STEPLIB   DD  DISP=SHR,DSN=TST.TSO.CMDLIB\n//SYSPRINT  DD  SYSOUT=*\n//SYSUT1    DD  DSN=TST2SSG.FORFMID.SMTT,DISP=SHR    <=== SEQ DATASET\n//SYSUT2    DD  DSN=TST2SSG.FORFMID.TEST2,DISP=SHR   <=== TARGET PDS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$OFFLINS": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE093"}, "text": "//TST2LSG$ JOB ,'TECH-S.GOLOB',CLASS=M,NOTIFY=TST2SSG,\n//        MSGLEVEL=(1,1),MSGCLASS=T TYPRUN=HOLD\n//*******************************************************************\n//*   LINKEDIT SOFTWARE\n//*******************************************************************\n//S02ASM  EXEC ASMVCL,PARM.ASM='ALIGN',\n//        PARM.LKED='LIST,LET,XREF,NCAL'\n//ASM.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB,DCB=BLKSIZE=32760\n//       DD DSN=TSY2.ATSOMAC,DISP=SHR\n//       DD DSN=TSY2.AMODGEN,DISP=SHR\n//       DD DISP=SHR,DSN=TST2SSG.OFFLOAD.SHIP <==SPECIAL MACROS\n//       DD DISP=SHR,DSN=TST2SSG.DAVECOLE.MACLIB\n//ASM.SYSIN DD DSN=TST2SSG.OFFLOAD.SHIP(OFFLOADW),DISP=SHR\n//LKED.SYSLMOD DD DSN=TST.TSO.CMDLIB,DISP=SHR\n//LKED.SYSIN DD *\n SETCODE AC(0)\n SETSSI CC260225\n NAME OFFLOADW(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PDSLINS": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE093"}, "text": "//TST2LSG$ JOB ,'TECH-S.GOLOB',CLASS=M,NOTIFY=TST2SSG,\n//        MSGLEVEL=(1,1),MSGCLASS=T TYPRUN=HOLD\n//*******************************************************************\n//*   LINKEDIT SOFTWARE\n//*******************************************************************\n//S02ASM  EXEC ASMVCL,PARM.ASM='ALIGN',\n//        PARM.LKED='LIST,LET,XREF,NCAL'\n//ASM.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB,DCB=BLKSIZE=32760\n//       DD DSN=TSY2.ATSOMAC,DISP=SHR\n//       DD DSN=TSY2.AMODGEN,DISP=SHR\n//       DD DISP=SHR,DSN=TST2SSG.OFFLOAD.SHIP <==SPECIAL MACROS\n//ASM.SYSIN DD DSN=TST2SSG.OFFLOAD.SHIP(PDSLOADW),DISP=SHR\n//LKED.SYSLMOD DD DSN=TST.TSO.CMDLIB,DISP=SHR\n//LKED.SYSIN DD *\n SETCODE AC(0)\n SETSSI CC260316\n NAME PDSLOADW(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PROLOG": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\\\\\x00\\\\\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$REGS": {"ttr": 790, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00*\\x00*\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n         $REGS\n         GBLB  &PRORG\n         AIF   (&PRORG).MEX2\n&PRORG   SETB  1\n SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n SPACE\nREG0     EQU   0\nREG1     EQU   1\nREG2     EQU   2\nREG3     EQU   3\nREG4     EQU   4\nREG5     EQU   5\nREG6     EQU   6\nREG7     EQU   7\nREG8     EQU   8\nREG9     EQU   9\nREG10    EQU   10\nREG11    EQU   11\nREG12    EQU   12\nREG13    EQU   13\nREG14    EQU   14\nREG15    EQU   15\n SPACE\n.MEX2    ANOP\n       MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#DCBD": {"ttr": 792, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x18/\\x00\\x93\\x18/ 4\\x08\\xd6\\x08\\xd6\\x00\\x00\\xc4`\\xc3\\xd6\\xd3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-07-01T00:00:00", "modifydate": "1993-07-01T20:34:00", "lines": 2262, "newlines": 2262, "modlines": 0, "user": "D-COLE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#DSORG": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x18/\\x00\\x93\\x18/ 4\\x00<\\x00<\\x00\\x00\\xc4`\\xc3\\xd6\\xd3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-07-01T00:00:00", "modifydate": "1993-07-01T20:34:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "D-COLE"}, "text": "         MACRO\n&N       #DSORG &D\n.*\n.*\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - MACRO NAME CHANGED FROM $DSORG TO #DSORG.\n.*\n.* LAST CHANGE DATE - FEBRUARY 2, 1977\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* LAST CHANGE DATE - APRIL 1, 1975\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE. ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       809 WHITNEY AVE.\n.*       NEW HAVEN, CT. 06511\n.*\n.*\n.*\n.*   THIS MACRO WAS WRITTEN TO BE AN INNER MACRO FOR THE #DCBD MACRO.\n.* ITS SOLE PURPOSE IS TO GENERATE DSORG FIELD AND BIT NAMES FOR THE\n.* #DCBD MACRO.\n.*\n.*\n.*\n.* INNER MACROS USED - NONE\n.*\n         GBLB  &#DCBDSG\n         GBLB  &#DCBSW(150)\n         LCLC  &P\n&P       SETC  'DCB'\n         AIF   ('&N' EQ '').GOTPFIX\n&P       SETC  '&N'\n.GOTPFIX ANOP\n&P.DSORG DS    0BL2 -         DATA SET ORGANIZATION BEING USED\n&P.DSRG1 DS    BL1 -          FIRST BYTE OF DCBDSORG\n         AIF   (&#DCBDSG).SKP1\nDCBDSGIS EQU   BIT0 -         IS - INDEXED SEQUENTIAL ORGANIZATION\nDCBDSGPS EQU   BIT1 -         PS - SHYSICAL SEQUENTIAL ORGANIZATION\nDCBDSGDA EQU   BIT2 -         DA - DIRECT ORGANIZATION\nDCBDSGCX EQU   BIT3 -         CX - BTAM OR QTAM LINE GROUP\nDCBDSGCQ EQU   BIT4 -         CQ - QTAM DIRECT ACCESS MESSAGE QUEUE\nDCBDSGMQ EQU   BIT5 -         MQ - QTAM PROBLEM PROGRAM MESSAGE QUEUE\nDCBDSGPO EQU   BIT6 -         PO - PARTITIONED ORGANIZATION\nDCBDSGU  EQU   BIT7 -         U  - UNMOVABLE, THE DATA CONTAINS\n*                                  LOCATION DEPENDENT INFORMATION\n.SKP1    ANOP  ,\n&P.DSRG2 DS    BL1 -          SECOND BYTE OF DCBDSORG\n         AIF   (&#DCBDSG).SKP2\nDCBDSGGS EQU   BIT0 -         GS - GRAPHICS ORGANIZATION\nDCBDSGTX EQU   BIT1 -         TX - TCAM LINE GROUP\nDCBDSGTQ EQU   BIT2 -         TQ - TCAM MESSAGE QUEUE\nDCBACBM  EQU   BIT4 -         ACCESS METHOD CONTROL BLOCK   ICBI DCB-1\n         AIF   (&#DCBSW(44)).SKP2\n&#DCBSW(44) SETB (1)\nDCBDSGTR EQU   BIT5 -         TR - TCAM 3705                    S22024\n.SKP2    ANOP\n&#DCBDSG SETB  (1)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#ENTER": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x18/\\x00\\x93\\x18/ 4\\x03H\\x03H\\x00\\x00\\xc4`\\xc3\\xd6\\xd3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-07-01T00:00:00", "modifydate": "1993-07-01T20:34:00", "lines": 840, "newlines": 840, "modlines": 0, "user": "D-COLE"}, "text": "         MACRO\n&N       #ENTER &NME,&ESDTYPE=DEFAULT,&BASES=1,&SAVTYPE=LOCAL,&PFIX=\n.*\n.*\n.*                                                            08/85 DBC\n.* LAST CHANGE DATE - AUGUST 12, 1985                         08/85 DBC\n.*                  - THIS MACRO NO LONGER ASSUMES THAT A     08/85 DBC\n.*                    SATISFIED UNCONDITIONAL GETMAIN         08/85 DBC\n.*                    REQUEST SETS R15 TO ZERO. ONE CUSTOMER  08/85 DBC\n.*                    ACTUALLY HAD A MODIFIED GETMAIN SVC     08/85 DBC\n.*                    ROUTINE THAT INSURED THAT R15 WAS       08/85 DBC\n.*                    UNCHANGED BY GETMAIN. THIS LED TO       08/85 DBC\n.*                    DISASTEROUS RESULTS WHEN HE ATTEMPTED   08/85 DBC\n.*                    TO USE THIS MACRO IN THAT               08/85 DBC\n.*                    ENVIRONMENT. NOW, CHANGING MY MACRO     08/85 DBC\n.*                    WAS A LOT SIMPLER THAN CHANGING HIS     08/85 DBC\n.*                    ENVIRONMENT, AND THERE WAS A LOT OF     08/85 DBC\n.*                    MONEY AT STAKE, SO ...                  08/85 DBC\n.*                                                            08/84 DBC\n.* LAST CHANGE DATE - AUGUST 8, 1984                          08/84 DBC\n.*                  - WHEN BASES=* IS SPECIFIED, #ENTER NOW   08/84 DBC\n.*                    DERIVES THE DESIRED BASE ADDRESS BY     08/84 DBC\n.*                    SUBTRACTING AN OFFSET FROM THE          08/84 DBC\n.*                    CURRENT ENTRY ADDRESS. PREVIOUSLY, IT   08/84 DBC\n.*                    WAS JUST LOADING AN ADCON FOR THE       08/84 DBC\n.*                    DESIRED BASE ADDRESS. THIS CAUSED       08/84 DBC\n.*                    PROBLEMS IF THE #ENTER MACRO WAS        08/84 DBC\n.*                    LOCATED WITHIN DYNAMICALLY RELOCATED    08/84 DBC\n.*                    CODE.                                   08/84 DBC\n.*                  - SIMILARLY, WHEN SAVTYPE=(REMOTE,NME%)   08/84 DBC\n.*                    IS SPECIFIED, THE DESIRED SAVE AREA     08/84 DBC\n.*                    IS LOCATED BY ADDING AN OFFSET (WHICH   08/84 DBC\n.*                    MAY BE NEGATIVE) TO THE CURRENT ENTRY   08/84 DBC\n.*                    ADDRESS.                                08/84 DBC\n.*                                                            06/84 DBC\n.* LAST CHANGE DATE - JUNE 11, 1984                           06/84 DBC\n.*                  - ADDED \"SAVTYPE=NONE\" SUPPORT.           06/84 DBC\n.*                  - WHEN A REMOTE SAVE AREA WAS USED,       06/84 DBC\n.*                    #ENTER USE TO GENERATE A \"USING\"        06/84 DBC\n.*                    STATEMENT DECLARING R13 AS A BASE FOR   06/84 DBC\n.*                    THAT SAVE AREA. THAT \"USING\" STATEMENT  06/84 DBC\n.*                    IS NO LONGER GENERATED.                 06/84 DBC\n.*\n.* LAST CHANGE DATE - OCTOBER 18, 1983\n.*                  - MAILING ADDRESS CHANGE\n.*\n.* LAST CHANGE DATE - APRIL 27, 1983\n.*                  - MAILING ADDRESS CHANGE.\n.*                  - USE OF IBM'S \"SAVE\" MACRO HAS BEEN\n.*                    REPLACED BY LOCAL CODE.\n.*                  - THE ASSEMBLY DATE AND TIME ARE NOW\n.*                    INCLUDED IN THE MODULE IDENTIFIER\n.*                    TEXT.\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - MACRO NAME CHANGED FROM $ENTER TO #ENTER.\n.*\n.* LAST CHANGE DATE - APRIL 15, 1981\n.*                  - ADDED ENTRY LINKAGE FOR A PLI ENVIRONMENT.\n.*                  - ADDED \"#REGS GEN=NO\" SUPPORT.\n.*\n.* LAST CHANGE DATE - JULY 18, 1980\n.*                  - BUG FIXED: THE PRECEEDING MODIFICATION INTRODUCED\n.*                    AN ERROR WHICH UNDER CERTAIN CIRCUMSTANCES\n.*                    GENERATED ASSEMBLY ERRORS.\n.*\n.* LAST CHANGE DATE - JULY 10, 1980\n.*                  - FOR GETMAINED REENTRANT SAVE AREAS, CODE HAS BEEN\n.*                    ADDED TO CLEAR THE ENTIRE GETMAINED AREA TO ZEROS\n.*                    BEFORE SETING THE CHAIN FIELD.\n.*                  - INDIRECT ADDRESSING TO A REMOTE SAVE AREA IS NOW\n.*                    SIGNALLED BY A TRAILING PERCENT SIGN RATHER THAN\n.*                    A LEADING PERCENT SIGN.\n.*\n.* LAST CHANGE DATE - OCTOBER 3, 1979\n.*                  - CODE HAS BEEN ALTERED SO THAT ADDRESSABILITY TO\n.*                    A REMOTE SAVE AREA DOES NOT HAVE TO BE BASED ON\n.*                    R15 (I.E., ON THE ENTRY ADDRESS).\n.*\n.* LAST CHANGE DATE - OCTOBER 3, 1978\n.*                  - THE GETMAIN FOR THE RENTRANT SAVE AREA HAS BEEN\n.*                    CHANGED SO THAT MORE THAN 4K BYTES CAN BE GOTTEN.\n.*\n.* LAST CHANGE DATE - FEBRUARY 28, 1978\n.*                  - BUG FIXED IN REMOTE SAVE AREA HANDLING\n.*\n.* LAST CHANGE DATE - JANUARY 29, 1978\n.*                  - IN MOST CASES IT IS LOGICALLY INCONSISTANT TO\n.*                    CODE 'BASES=*' WHEN ONE OF THE OLD BASES IS R13.\n.*                    THIS PROBLEM IS NOW RECOGNIZED AND FLAGGED.\n.*\n.*                  - A REMOTE SAVE AREA'S NAME CAN NOW BE GIVEN EITHER\n.*                    WITH OR WITHOUT A PRECEEDING PERCENT (%) SIGN TO\n.*                    INDICATE WHETHER THE NAMED ADDRESS MUST BE\n.*                    REACHED BY INDIRECT ADDRESSING.\n.*\n.* LAST CHANGE DATE - NOVEMBER 4, 1977\n.*                  - SUPPORT IS ADDED FOR DEFINING A LOCAL SAVE AREA\n.*                    WHOSE LENGTH IS OTHER THAN 72 BYTES.\n.*\n.* LAST CHANGE DATE - JANUARY 13, 1977\n.*                  - THE MF= AND SVID= OPERANDS ARE REPLACED BY THE\n.*                    SAVTYPE= OPERAND.\n.*                  - SUPPORT FOR THE HANDLING OF A REMOTELY ASSEMBLED\n.*                    SAVE AREA.\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* LAST CHANGE DATE - SEPTEMBER 14, 1976\n.*                  - IMPLEMENT SUPPORT FOR \"BASES=*\" WHICH IMPLIES\n.*                    THAT BOTH THE BASE ADDRESS AND BASE REGISTERS\n.*                    DEFINED BY THE PHYSICALLY PREVIOUS USE OF THE\n.*                    #ENTER MACRO ARE TO BE REUSED.\n.*\n.* LAST CHANGE DATE - AUGUST 23, 1976\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE.  ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       RR#2 BOX 712\n.*       AFTON, VA. 22920\n.*\n.*\n.*\n.*   THIS MACRO GENERATES OS STANDARD ENTRY LINKAGE. IT WAS WRITTEN TO\n.* PROVIDE A SIMPLE, FLEXIBLE, AND COMPLETE METHOD OF GENERATING SUCH\n.* LINKAGE. IN ADDITION, FOR ALMOST ALL OPERAND COMBINATIONS, #ENTER\n.* WILL GENERATE THE ABSOLUTE MINIMUM AMOUNT OF CODE NECESSARY.\n.*\n.*   THE #ENTER MACRO WILL GENERATE THE FOLLOWING:\n.*     - A CSECT OR ENTRY CARD (IF DESIRED)\n.*     - A MODULE IDENTIFIER WHICH WILL INCLUDE THE ASSEMBLY\n.*       DATE AND TIME.\n.*     - CODE TO SAVE ALL REGISTERS IN THE HIGHER SAVE AREA\n.*     - CODE TO LOAD R13 WITH A POINTER TO A LOWER SAVE AREA\n.*     - CODE TO CROSS LINK THE LOWER SAVE AREA WITH THE HIGHER SAVE\n.*       AREA\n.*     - CODE TO LOAD ANY SET OF BASE REGISTERS\n.*     - A USING STATEMENT DECLARING THE SET OF BASE REGISTERS\n.*     - EITHER THE LOWER SAVE AREA ITSELF OR CODE TO GETMAIN A\n.*       REENTRANT SAVE AREA OF 72 OR MORE BYTES OR CODE TO LOAD THE\n.*       ADDRESS OF AN ASSEMBLED SAVE AREA THAT IS REMOTE FROM THE\n.*       MACRO EXPANSION.\n.*     - FOR A GETMAINED REENTRANT SAVE AREA, CODE TO CLEAR THE AREA TO\n.*       ZEROS.\n.*\n.* &N\n.*       THIS IS THE ONLY FIELD REQUIRED FOR THE MACRO CALL. IT MUST\n.*       SPECIFY THE DESIRED CONTROL SECTION OR ENTRY NAME.\n.*\n.* &NME\n.*       USE THIS FIELD TO SPECIFY OPTIONAL TEXT TO BE\n.*       INCLUDED INTO THE MODULE IDENTIFIER. ENCLOSING\n.*       QUOTES ARE OPTIONAL.\n.*\n.* &ESDTYPE=\n.*       THIS OPERAND CONTROLS THE TYPE OF EXTERNAL SYMBOL (IF ANY) TO\n.*       BE GENERATED USING &N. VALID VALUES FOR THIS OPERAND IMPLY THE\n.*       FOLLOWING:\n.*              -OMITTED-    ==> ESDTYPE=ENTRY IF SAVTYPE=PLI\n.*              -OMITTED-    ==> ESDTYPE=CSECT OTHERWISE\n.*             ESDTYPE=CSECT ==>\n.*                     &N       CSECT\n.*             ESDTYPE=START ==>\n.*                     &N       START\n.*             ESDTYPE=ENTRY ==>\n.*                              ENTRY &N\n.*                     &N       DS    0H\n.*             ESDTYPE=     <==>\n.*             ESDTYPE=NONE  ==>\n.*                     &N       DS    0H\n.*\n.* &BASES=\n.*       USE THIS OPERAND TO SPECIFY EITHER HOW MANY OR EXACTLY WHICH\n.*       BASE REGISTERS TO DECLARE AND LOAD. VALID VALUES FOR THIS\n.*       OPERAND ARE:\n.*             BASES= -A SINGLE SELF DEFINING NUMERIC-\n.*                   THIS REQUESTS THAT A SPECIFIC NUMBER OF BASES BE\n.*                   LOADED AND DECLARED. THE MACRO IS ALLOWED TO\n.*                   DETERMINE FOR ITSELF PRECISELY WHICH REGISERS TO\n.*                   DECLARE AS FOLLOWS. FOR SAVTYPE=LOCAL (SEE BELOW)\n.*                   THE FIRST BASE REGISTER WILL BE R13; OTHERWISE\n.*                   (I.E. FOR SAVTYPE=RENT OR SAVTYPE=REMOTE), THE\n.*                   FIRST BASE REGISTER WILL BE R12. IN EITHER CASE,\n.*                   ADDITIONAL BASES WILL BE SUCCESSIVELY LOWER\n.*                   NUMBERED REGISTERS. EXAMPLES:\n.*                   BASES=3,SAVTYPE=RENT  ==> R12, R11, AND R10.\n.*                   BASES=2,SAVTYPE=LOCAL ==> R13, AND R12.\n.*             BASES= -A SUBLIST OF ONE OR MORE REGISTER NAMES-\n.*                   THE LISTED REGISTERS ARE LOADED AND DECLARED AS\n.*                   BASES. THE LEFTMOST LISTED REGISTER IS LOADED WITH\n.*                   THE LOWEST ADDRESS. EXAMPLE:\n.*                   BASES=(R5,6,4) ==> R5, R6, AND R4 IN THAT ORDER.\n.*             BASES=*\n.*                   THE BASE ADDRESS AND BASE REGISTERS DEFINED BY THE\n.*                   PHYSICALLY PREVIOUS #ENTER MACRO ARE REUSED.\n.*          THE BASES= OPERAND MAY BE NULLIFIED BY SPECIFYING EITHER:\n.*             BASES=\n.*             BASES=0\n.*       IN THIS CASE, NO BASE REGISTERS ARE LOADED OR DECLARED.\n.*          IF THE BASES= OPERAND IS OMITTED, THEN A DEFAULT OF BASES=1\n.*       WILL BE USED.\n.*\n.* &SAVTYPE=\n.*       THIS OPERAND IDENTIFIES THE TYPE OR LOCATION OF THE SAVE AREA\n.*       TO BE GENERATED OR USED. VALID VALUES ARE:\n.*             -OMITTED-\n.*             SAVTYPE=\n.*             SAVTYPE=LOCAL\n.*             SAVTYPE=(,-SAVE AREA NAME-)\n.*             SAVTYPE=(LOCAL,-SAVE AREA NAME-)\n.*             SAVTYPE=(LOCAL,,-SAVE AREA LENGTH-)\n.*             SAVTYPE=(LOCAL,-SAVE AREA NAME-,-SAVE AREA LENGTH-)\n.*                     A STANDARD SAVE AREA IS GENERATED IN THE\n.*                     THE MACRO EXPANSION AND ITS ADDRESS IS LOADED\n.*                     INTO R13. NOTE, DEPENDING UPON THE BASES=\n.*                     OPERAND (SEE ABOVE) R13 MAY ALSO BE DECLARED AS\n.*                     A PROGRAM BASE.\n.*                        IF A -SAVE AREA NAME- IS GIVEN, THEN IT IS\n.*                     USED TO LABEL THE SAVE AREA; OTHERWISE, AN\n.*                     INTERNAL NAME IS GENERATED.\n.*                              IF -SAVE AREA LENGTH- IS GIVEN, THEN IT\n.*                              IS USED TO SET THE LENGTH OF THE SAVE\n.*                              AREA; OTHERWISE, THE DEFAULT LENGTH OF\n.*                              72 BYTES IS USED.\n.*             SAVTYPE=(REMOTE,-SAVE AREA ADDRESS-)\n.*                     THE ADDRESS OF THE REMOTE SAVE AREA IS\n.*                     LOADED INTO R13. NOTE, IN THIS CASE -SAVE AREA\n.*                     ADDRESS- IS A REQUIRED SUB-OPERAND. IT MAY BE\n.*                     EITHER AN ADDRESS LABEL OR A PARENTHESIZED\n.*                     REGISTER NAME OR AN ADDRESS LABEL FOLLOWED BY A\n.*                     PERCENT (%) SIGN. IF THE NAME IS JUST AN ADDRESS\n.*                     LABEL, THEN A 'LA' INSTRUCTION IS USED TO LOAD\n.*                     THE SAVE AREA'S ADDRESS. IF A PERCENT SIGN\n.*                     FOLLOWS THE NAME, THEN AN ADDRESS CONSTANT IS\n.*                     GENERATED AND A 'L' INSTRUCTION IS USED. IF A\n.*                     REGISTER NAME IS GIVEN, THEN A 'LR' INSTRUCTION\n.*                     IS USED UNLESS THE MACRO CAN DETERMINE THAT THE\n.*                     NAMED REGISTER IS ACTUALLY R13 IN WHICH CASE IT\n.*                     IS ASSUMED THAT THE LOWER SAVE AREA IS ALREADY\n.*                     PRESENT AND INITIALIZED, SO THE SAVING OF\n.*                     REGISTERS AND THE CROSS-CHAINING OF THE SAVE\n.*                     AREAS IS BYPASSED.\n.*             SAVTYPE=RENT\n.*             SAVTYPE=(RENT,(-LENGTH-,-SUBPOOL-),-ERROR ADDRESS-)\n.*             SAVTYPE=(RENT,(-LENGTH-,-SUBPOOL-),RETURN)\n.*                     THE MACRO EXPANSION IS TO BE REENTRANT. THE SAVE\n.*                     AREA IS TO BE GETMAINED. THE SUB-OPERANDS HAVE\n.*                     THE FOLLOWING AFFECT:\n.*                     -LENGTH- IS OPTIONAL. IF OMITTED, THEN A VALUE\n.*                              OF 72 IS USED. IF GIVEN, THEN IT\n.*                              INDICATES THE SIZE OF THE SAVE AREA TO\n.*                              BE GOTTEN. WARNING, THE VALUE OF\n.*                              -LENGTH- SHOULD NEVER BE LESS THAN 72.\n.*                     -SUBPOOL- IS OPTIONAL. IF OMITTED, THEN A VALUE\n.*                               OF 0 IS IMPLIED. IF GIVEN, THEN IT\n.*                               SPECIFIES THE SUBPOOL OUT OF WHICH THE\n.*                               SAVE AREA IS TO BE GOTTEN.\n.*                     -ERROR ADDRESS- IS OPTIONAL. IF OMITTED, THEN\n.*                                     THE SAVE AREA GETMAIN REQUEST IS\n.*                                     UNCONDITIONAL. IF GIVEN, THEN\n.*                                     THE GETMAIN IS CONDITIONAL, AND\n.*                                     IF IT FAILS, THEN CONTROL IS\n.*                                     PASSED TO THE INDICATED ADDRESS.\n.*                                     NOTE, -ERROR ADDRESS- MAY BE\n.*                                     EITHER A STATEMENT LABEL OR A\n.*                                     PARENTHESIZED REGISTER NAME.\n.*                                     WARNING, -ERROR ADDRESS- MAY BE\n.*                                     USED ONLY IN A MVS ENVIRONMENT.\n.*                                     IT IS NOT SUPPORTED UNDER MVT.\n.*                     RETURN IS A SPECIAL FORM OF -ERROR ADDRESS-\n.*                            WHICH, IF GIVEN, CAUSES CONTROL TO BE\n.*                            RETURNED IMMEDIATELY TO THE CALLER IN THE\n.*                            EVENT OF A GETMAIN FAILURE. ALL REGISTERS\n.*                            ARE RESTORED EXCEPT R15 WHICH CONTAINS\n.*                            THE RETURN CODE FROM GETMAIN.\n.*             SAVTYPE=PLI\n.*             SAVTYPE=NONE                                   06/84 DBC\n.*                     NO LOCAL LEVEL SAVEAREA IS DEFINED OR  06/84 DBC\n.*                     USED.                                  06/84 DBC\n.*             SAVTYPE=(PLI,-LENGTH-)\n.*                     THE MACRO IS TO EXPAND INTO THE FORMAT OF A PLI\n.*                     PROLOG. THE EXPANSION IS REENTRANT. THE SAVE\n.*                     AREA WILL BE A PLI DSA. IT WILL PROBABLY BE\n.*                     OBTAINED FROM PLI'S ISA. IF -LENGTH- IS GIVEN,\n.*                     THEN IT SPECIFIES THE DESIRED LENGTH OF THE DSA\n.*                     THAT THIS EXPANSION OBTAINS. WARNING, THE VALUE\n.*                     OF -LENGTH- MUST NEVER BE LESS THAN 88.\n.*\n.* &PFIX=\n.*       THE #ENTER MACRO ATTEMPTS TO USE REGISTER EQUATES IN ITS\n.*       EXPANSION WHEN REFERING TO REGISTERS. THIS IS SO THAT THE USE\n.*       OF THE REGISTERS IS INDICATED IN THE ASSEMBLER'S CROSS\n.*       REFERENCE LISTING. THE PFIX= OPERAND CAN BE USED TO CONTROL\n.*       THE SET OF EQUATES USED. FOR EXAMPLE, IF \"PFIX=GPR\" IS GIVEN,\n.*       THEN \"GPR1\" IS USED WHENEVER THE EXPANSION REFERS FO REGISTER\n.*       1.\n.*          IF THE PFIX= OPERAND IS OMITTED, THEN THE SET OF REGISTER\n.*       EQUATES DEFINED BY THE NEXT PRIOR #REGS MACRO IS USED. IF\n.*       THERE ARE NO PRIOR #REGS MACROS, THEN SELF-DEFINING NUMERICS\n.*       ARE USED.\n.*\n.* MISCELLANIOUS CONSIDERATIONS\n.*     - SINCE THE #ENTER MACRO EXPANSION USUALLY INCLUDES A CSECT\n.*       CARD, THE MACRO CALL SHOULD BE PLACED AT THE PHYSICAL\n.*       BEGINNING OF A CONTROL SECTION.\n.*     - FOR LOCAL SAVE AREAS IT IS BOTH POSSIBLE AND REASONABLE FOR\n.*       R13 TO SERVE AS BOTH THE SAVE AREA POINTER AND A PROGRAM BASE.\n.*       THERE ARE, HOWEVER, CERTAIN PRECAUTIONS THAT HAVE TO BE TAKEN\n.*       FOR VARIOUS SYSTEM EXIT ROUTINES IF THEY ARE INCLUDED IN THE\n.*       PROGRAM. HERE ARE SOME EXAMPLES:\n.*           - IOS APPENDAGE ROUTINES: NO BASE REGISTER FOR THE MAIN\n.*             PROGRAM, INCLUDING R13, IS AVAILABLE FROM WITHIN AN IOS\n.*             APPENDAGE.\n.*           - DCB OPEN EXITS: R13 REMAINS A VALID BASE REGISTER.\n.*           - EOD ROUTINES: R13 REMAINS A VALID BASE REGISTER.\n.*           - SYNAD EXITS: R13 REMAINS A VALID BASE REGISTER UNTIL A\n.*             SYNADAF MACRO IS ISSUED. AFTER A SUBSEQUENT SYNADRLS\n.*             MACRO, R13 IS AGAIN A VALID PROGRAM BASE.\n.*\n.*\n.*\n.* INNER MACROS USED - #USING, #TEST, SAVE, GETMAIN\n.*\n         GBLA  &#TESERR\n         GBLB  &#ENTRNT,&#ENTPLI,&#ENTNUN                     06/84 DBC\n         GBLC  &#TESRET(20),&#ENTSIZ,&#ENTSP,&#BS(14)\n         LCLA  &A1,&A2,&C1,&C2,&C3,&C4,&B(13),&RMTREGA\n         LCLB  &REDUN(13),&OLDBASE,&REMOTE(5),&ALIGND,&LOCAL,&LENGTH\n         LCLC  &LID,&@,&#,&N1,&N2,&W2,&W3,&R,&RMTREGC,&SAVLEN,&RMTNAME\n         LCLC  &SPOOL,&TB,&ESDT,&C                            06/84 DBC\n&#       SETC  '&SYSNDX'\n&#ENTRNT SETB  (0)\n&#ENTPLI SETB  (0)\n&#ENTNUN SETB  (0)\n&C1      SETA  11\n.*                                                            06/84 DBC\n         AIF   ('&SAVTYPE' NE 'NONE').TYPNNON                 06/84 DBC\n&#ENTNUN SETB  (1)                                            06/84 DBC\n         AGO   .PFXTST                                        06/84 DBC\n.TYPNNON ANOP                                                 06/84 DBC\n.*                                                            06/84 DBC\n         AIF   ('&SAVTYPE(1)' NE 'RENT').TYPNRNT\n&#ENTRNT SETB  (1)\n&#ENTSIZ SETC  '72'\n&#ENTSP  SETC  ''\n         #TEST DCODE=&SAVTYPE(2)\n&A1      SETA  &#TESRET(1)\n         AIF   (&A1 EQ 0).PFXTST\n         AIF   ('&#TESRET(2)' EQ '').DFLTLEN\n&#ENTSIZ SETC  '&#TESRET(2)'\n.DFLTLEN AIF   (&A1 EQ 1).PFXTST\n&#ENTSP  SETC  '&#TESRET(3)'\n         AGO   .PFXTST\n.TYPNRNT ANOP\n.*\n         AIF   ('&SAVTYPE(1)' NE 'REMOTE').TYPNRMT\n&REMOTE(1) SETB (1)\n         AIF   ('&SAVTYPE(2)' NE '').GOTRMT2\n         MNOTE 12,'ERROR - SAVTYPE(2) (REMOTE AREA''S NAME) OMITTED.'\n.GOTRMT2 AIF   ('&SAVTYPE(2)'(1,1) EQ '(').TYPLCL2\n&REMOTE(2) SETB (1)\n&RMTNAME SETC  '&SAVTYPE(2)'\n         AIF   ('&SAVTYPE(2)'(K'&SAVTYPE(2),1) NE '%').PFXTST\n&REMOTE(5) SETB (1)\n&RMTNAME SETC  '&SAVTYPE(2)'(1,K'&SAVTYPE(2)-1)\n         AGO   .PFXTST\n.TYPLCL2 #TEST DCODE=&SAVTYPE(2)\n&RMTREGC SETC  '&#TESRET(2)'\n         #TEST REGS=&RMTREGC\n         AIF   (&#TESERR NE 0).PFXTST\n&RMTREGA SETA  &#TESRET(1)\n         AIF   (&RMTREGA NE 13).PFXTST\n&REMOTE(3) SETB (1)\n         AGO   .PFXTST\n.TYPNRMT ANOP\n.*\n         AIF   ('&SAVTYPE(1)' NE 'PLI').TYPNPLI\n&#ENTPLI SETB  (1)\n&C1      SETA  10\n         AGO   .PFXTST\n.TYPNPLI ANOP\n.*\n         AIF   ('&SAVTYPE(1)' EQ '' OR '&SAVTYPE(1)' EQ 'LOCAL').TYPLCL\n         MNOTE 4,'SAVTYPE(1)=&SAVTYPE(1) IS INVALID.'\n         MNOTE 4,'SAVTYPE(1)=LOCAL ASSUMED.'\n.TYPLCL  ANOP\n&LOCAL   SETB  (1)\n&C1      SETA  12\n&LID     SETC  'E&#.SVA'\n         AIF   ('&SAVTYPE(2)' EQ '').GOTSLID\n&LID     SETC  '&SAVTYPE(2)'\n.GOTSLID ANOP\n&SAVLEN  SETC  '72'\n         AIF   ('&SAVTYPE(3)' EQ '').PFXTST\n&SAVLEN  SETC  '&SAVTYPE(3)'\n.*\n.PFXTST  ANOP\n&@       SETC  '&PFIX'\n         AIF   (K'&PFIX NE 0).GOTPFIX\n         #TEST PFIX=\n&@       SETC  '&#TESRET(1)'\n         AGO   .DONPFIX\n.GOTPFIX #REGS &PFIX,GEN=NO\n.DONPFIX ANOP\n.*                                                            06/84 DBC\n&A1      SETA  0\n         AIF   ('&BASES' NE '*').BSCLR\n.BSOLD   AIF   (&A1 EQ 13).BASEND\n&A1      SETA  &A1+1\n         AIF   ('&#BS(&A1)' EQ '').BSOLD\n         #TEST REGS=&#BS(&A1)\n&B(&A1)  SETA  16\n         AIF   (&#TESERR NE 0).BSOLD\n&B(&A1)  SETA  &#TESRET(1)\n         AIF   (&B(&A1) NE 13).BSOLD\n         AIF   (&A1 NE 13 OR '&#BS(14)' NE '&RMTNAME' OR &#ENTRNT OR &#*\n               ENTPLI).BSERROR\n&REMOTE(4) SETB (1)\n         AGO   .BSOLD\n.BSERROR ANOP\n         MNOTE 4,'THE OLD BASE REGISTER &B(&A1) CANNOT ALSO FUNCTION'\n         MNOTE 4,'AS A SAVE AREA POINTER IN THIS CONTEXT.'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n         AGO   .BSOLD\n.BSCLR   AIF   (&A1 EQ 14).BSCLRD\n&A1      SETA  &A1+1\n&#BS(&A1) SETC ''\n         AGO   .BSCLR\n.BSCLRD  AIF   (K'&BASES EQ 0).BASEND\n         AIF   ('&BASES' NE '&BASES(1)').TSTNBSE\n         #TEST NUM=&BASES\n         AIF   (&#TESERR EQ 0).BSEOKX\n         MNOTE 4,'\"BASES=&BASES\" IS INVALID.'\n         MNOTE 4,'\"BASES=1\" ASSUMED.'\n&C3      SETA  1\n         AGO   .BSESET\n.BSEOKX  ANOP\n&C3      SETA  &BASES\n         AIF   (&C3 LE &C1).BSESET\n         MNOTE 4,'\"BASES=&BASES\" IS OUTSIDE THE RANGE OF 0...&C1..'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n.BSESET  ANOP\n&C1      SETA  &C1+1\n&C3      SETA  &C1-&C3\n&C4      SETA  13\n.BOK     AIF   (&C1 LE &C3).BASEND\n&#BS(&C4) SETC '&@&C1'\n&B(&C4)  SETA  &C1\n&C1      SETA  &C1-1\n&C4      SETA  &C4-1\n         AGO   .BOK\n.TSTNBSE ANOP\n&C3      SETA  N'&BASES\n         AIF   (&C3 LE &C1).NBSOK\n         MNOTE 4,'\"BASES=&BASES\" SPECIFIES TOO MAY REGISTERS.'\n         MNOTE 4,'ONLY THE FIRST &C1 REGISTERS WILL BE USED.'\n&C3      SETA  &C1\n.NBSOK   ANOP\n&C1      SETA  &C1+1\n&C4      SETA  13\n&C2      SETA  0\n.GETBSE  AIF   (&C2 GE &C3).BASEND\n&C2      SETA  &C2+1\n         AIF   ('&BASES(&C2)' EQ '').IGNR\n         #TEST REGS=&BASES(&C2)\n&B(&C4)  SETA  16\n         AIF   (&#TESERR EQ 16).REGUNK\n         AIF   (&#TESRET(1) GE 2 AND &#TESRET(1) LE &C1).BSEOK2\n         MNOTE 4,'\"BASES(&C2)=&BASES(&C2)\" IS OUTSIDE THE RANGE OF 2...*\n               &C1..'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n         AGO   .BSEOK2\n.IGNR    AIF   (&C3 GE N'&BASES).GETBSE\n&C3      SETA  &C3+1\n         AGO   .GETBSE\n.BSEOK2  AIF   (NOT &REDUN(&#TESRET(1))).BSEOK3\n         MNOTE 4,'\"BASES(&C2)=&BASES(&C2) IS REDUNDANT.'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n.BSEOK3  ANOP\n&REDUN(&#TESRET(1)) SETB (1)\n&B(&C4)  SETA &#TESRET(1)\n.REGUNK  ANOP\n&C1      SETA  12\n&#BS(&C4) SETC '&BASES(&C2)'\n&C4      SETA  &C4-1\n         AGO   .GETBSE\n.BASEND  ANOP\n.*\n&R       SETC  '&@.1'\n&C3      SETA  0\n.WRLP    AIF   (&C3 GE 13).GOTWRG\n&C3      SETA  &C3+1\n         AIF   ('&#BS(&C3)' EQ '').WRLP\n         AIF   (&B(&C3) EQ 13).GOTWRG\n&R       SETC  '&#BS(&C3)'\n.GOTWRG  ANOP\n.*\n&ESDT    SETC  '&ESDTYPE(1)'\n         AIF   (&#ENTPLI).PLIGEN\n.*\n         AIF   ('&ESDT' NE 'DEFAULT').GOTESD\n&ESDT    SETC  'CSECT'\n.GOTESD  ANOP\n&N2      SETC  '&N'\n         AIF   ('&ESDT' EQ 'NONE' OR '&ESDT' EQ '' OR '&ESDT' EQ 'ENTRY*\n               ').NCSCETC\n         AIF   ('&ESDT' NE 'CSECT').ESDNCSC\n&N       CSECT ,                   START CONTROL SECTION\n         AGO   .ESDDONE\n.ESDNCSC AIF   ('&ESDT' NE 'START').ESDNSTA\n&N       START ,                   START CONTOL SECTION\n         AGO   .ESDDONE\n.ESDNSTA ANOP\n&W2      SETC  '&ESDT'\n&N       &W2   0H'0'               START\n.ESDDONE ANOP\n&N2      SETC  ''\n.*\n.NCSCETC AIF   ('&ESDT' NE 'ENTRY').NENTRY\n         ENTRY &N                  MAKE NAME EXTERNALLY AVAILABLE\n.NENTRY  ANOP\n.*\n         AIF   (K'&NME EQ 0 AND '&ESDT' NE 'CSECT' AND '&ESDT' NE 'STAR*\n               T').NMODID\n&N2      B     E&#.ZID-&N.(,&@.15) SKIP AROUND THE MODULE ID\n&N2      SETC  'E&#.ZID'\n         DC    AL1(&N2-E&#.MID)    LENGTH OF TEXT\nE&#.MID  DC    C'&N '              ENTRY NAME\n&W2      SETC  '&SYSDATE       '(1,8).' '\n         DC    C'&W2'              ASSEMBLY DATE\n&W2      SETC  '&SYSTIME    '(1,5)\n         AIF   (K'&NME EQ 0).NMEZ1\n&W2      SETC  '&W2 - '\n.NMEZ1   DC    C'&W2'              ASSEMBLY TIME\n         AIF   (K'&NME EQ 0).NMEZ2\n         AIF   ('&NME'(1,1) EQ '''').QNME\n         DC    C'&NME'\n         AGO   .NMEZ2\n.QNME    DC    C&NME\n.NMEZ2   ANOP\n.NMODID  ANOP\n.*\n         AIF   (&REMOTE(3)).RNTRNT1\n&W2      SETC  '&@.14,&@.12,12(&@.13)'\n&N2      STM   &W2                 SAVE CALLER'S REGISTERS\n&N2      SETC  ''\n.*\n         AIF   (&#ENTRNT OR &#ENTNUN).RNTRNT1                 06/84 DBC\n         LR    &R,&@.13            POINT TO HIGHER SA\n         AIF   (&REMOTE(1)).LRMTSV1\n&C       SETC  '&@.13,&LID-&N.(,&@.15)'                       06/84 DBC\n         LA    &C                  POINT TO LOWER SA\n         AGO   .LRMTSV2\n.LRMTSV1 AIF   (&REMOTE(2)).LRMTSV3\n         #TEST REGS=&R\n         AIF   (&RMTREGA NE &#TESRET(1)).LRMTSV4\n&A1      SETA  20+&RMTREGA*4-&RMTREGA/13*44\n         L     &@.13,&A1.(,&@.13)  POINT TO LOWER SA\n         AGO   .LRMTSV2\n.LRMTSV4 LR    &@.13,&RMTREGC      POINT TO LOWER SA\n         AGO   .LRMTSV2\n.LRMTSV3 AIF   (&REMOTE(5)).LRMTSV5\n         PUSH  USING               SAVE USING ENVIRONMENT\n         USING &N,&@.15            DECLARE TEMP BASE\n         LA    &@.13,&RMTNAME      POINT TO LOWER SA\n         POP   USING               RESTORE USING ENVIRONMENT\n         AGO   .LRMTSV2                                       06/84 DBC\n.LRMTSV5 ANOP                                                 06/84 DBC\n         LR    &@.13,&@.15         POINT TO LOWER SA          08/84 DBC\n&C       SETC  '&@.13,E&#.SAP-&N.(,&@.15)'                    06/84 DBC\n         AH    &C                                             08/84 DBC\n.LRMTSV2 ST    &@.13,8(,&R)        FORWARD CHAIN THE SAVE AREAS\n         ST    &R,4(,&@.13)        BACK CHAIN THE SAVE AREAS\n         AIF   ('&R' NE '&@.1').RNTRNT1\n         L     &@.1,24(,&@.1)      RESTORE REGISTER 1\n.RNTRNT1 AIF   ('&#BS(13)' EQ '').SKIPUSE\n&C1      SETA  13\n         AIF   ('&BASES' NE '*').BSEADR\n         AIF   (&REMOTE(4)).EQUATE\n&OLDBASE SETB  (1)\n&N2      LR    &#BS(13),&@.15      LOAD 1ST BASE REGISTER     08/84 DBC\n&N2      SETC  ''                                             08/84 DBC\n&C       SETC  '&#BS(13),E&#.BSE-&N.(,&@.15)'                 06/84 DBC\n         SH    &C                                             08/84 DBC\n         AGO   .EQUATE\n.BSEADR  ANOP\n&C2      SETA  15\n&#BS(14) SETC  '&N'\n         AIF   (&#ENTRNT OR &REMOTE(1) OR &#ENTNUN).FLDTST    06/84 DBC\n&C2      SETA  13\n&#BS(14) SETC  '&LID'\n.FLDTST  AIF   (&B(13) EQ &C2).EQUATE\n&N2      LR    &#BS(13),&@&C2      LOAD FIRST BASE REGISTER\n&N2      SETC  ''\n.EQUATE  ANOP\n&W2      SETC  '&#BS(&C1)'\n         AIF   (&C1 EQ 2).ENDLA\n&C1      SETA  &C1-1\n         AIF   ('&#BS(&C1)' EQ '').ENDLA\n&N2      LA    &#BS(&C1),X'FFF'(,&W2) LOAD NEXT BASE\n&N2      SETC  ''\n         AGO   .EQUATE\n.ENDLA   #USING\n.SKIPUSE AIF   (NOT &#ENTRNT).DATACHK\n&W2      SETC  ''\n&TB      SETC  ''\n         AIF   ('&#BS(13)' NE '').GETM2\n&N2      LR    &@.14,&@.15         LOAD TEMPORARY BASE\n&N2      SETC  ''\n         PUSH  USING               SAVE BASES\n         DROP  ,                   CLEAR BASES\n         USING &N,&@.14            DECLARE TEMPORARY BASE\n&TB      SETC  '-&N.(,&@.14)'\n.GETM2   ANOP\n&N2      L     &@.0,E&#.LEN        LOAD LENGTH (MAYBE SUBPOOL TOO)\n&N2      SETC  ''\n         AIF   ('&#ENTSP' EQ '' OR '&SAVTYPE(3)' EQ '').GETM4\n&SPOOL   SETC  ''\n         MNOTE '         GETMAIN RC,LV=(0),SP=&#ENTSP'\n         GETMAIN RC,LV=(0),SP=&#ENTSP\n         AGO   .GETM5\n.GETM4   ANOP\n&SPOOL   SETC  '&#ENTSP'\n&W3      SETC  'R'\n         AIF   ('&SAVTYPE(3)' EQ '').GETM4A\n&W3      SETC  'RC'\n.GETM4A  MNOTE '         GETMAIN &W3,LV=(0)'\n         GETMAIN &W3,LV=(0)\n.GETM5   AIF   ('&#BS(13)' NE '').GETM5A\n         POP   USING               RESTURE BASES\n.GETM5A  AIF   ('&SAVTYPE(3)' EQ '').GETM7\n         LTR   &@.15,&@.15         GETMAIN OK?\n         AIF   ('&SAVTYPE(3)' EQ 'RETURN').GETM8\n         AIF   ('&SAVTYPE(3)'(1,1) EQ '(').GETM6\n         BNZ   &SAVTYPE(3)         NO, TAKE ERROR EXIT\n         AGO   .GETM7\n.GETM6   #TEST DCODE=&SAVTYPE(3)\n         BCR   7,&#TESRET(2)       NO, TAKE ERROR EXIT\n         AGO   .GETM7\n.GETM8   ANOP\n&W2      SETC  'E&#.GO'\n         BZ    &W2&TB              YES, PROCEED\n         L     &@.14,12(,&@.13)    NO, RESTORE REGISTER\n         LM    &@.0,&@.12,20(&@.13) RESTORE REGISTERS\n         MVI   12(&@.13),X'FF'     SET RETURNED SIGNEL\n         BR    &@.14               RETURN TO CALLER\n.GETM7   ANOP\n&W2      LR    &@.0,&@.1           POINT TO AREA TO CLEAR\n         L     &@.1,E&#.LEN&TB     GET LENGTH TO CLEAR\n         LR    &@.14,&@.0          SAVE AREA POINTER\n         SLR   &@.15,&@.15         CLEAR SRC LEN AND PAD CHAR 08/85 DBC\n         MVCL  &@.0,&@.14          CLEAR THE AREA (R15 SET BY GETMAIN)\n         ST    &@.14,8(,&@.13)     FORWARD CHAIN THE SAVE AREAS\n         ST    &@.13,4(,&@.14)     BACK CHAIN THE SAVE AREAS\n         LM    &@.13,&@.1,8(&@.13) RESTORE REGS AND POINT TO LOWER SA\n.DATACHK AIF   (NOT &OLDBASE AND NOT &#ENTRNT AND NOT &REMOTE(5) AND NO*\n               T &LOCAL).ENDCHK\n         AIF   ('&#BS(13)' EQ '').NOUSING\n&N2      B     E&#.END             SKIP AROUND DATA AREA\n&N2      SETC  ''\n         AGO   .DFNDATA\n.NOUSING ANOP\n&N2      B     E&#.END-&N.(,&@.15) SKIP AROUND DATA AREA\n&N2      SETC  ''\n.DFNDATA ANOP                                                 08/84 DBC\n.*                                                            08/84 DBC\n         AIF   (NOT &OLDBASE).NOLDBSE                         08/84 DBC\nE&#.BSE  DC    Y(&N-&#BS(14))       OLD BASE ADDRESS          08/84 DBC\n.NOLDBSE ANOP                                                 08/84 DBC\n.*                                                            08/84 DBC\n         AIF   (NOT &#ENTRNT).NLENGTH                         08/84 DBC\n         AIF   ('&SPOOL' EQ '').NSUBPOO\n         AIF   (&ALIGND).ALIGND1\n         DS    0F                  ALIGNMENT\n&ALIGND  SETB  (1)\n.ALIGND1 ANOP\nE&#.LEN  DC    AL1(&SPOOL),AL3(&#ENTSIZ) SAVE AREA SUBPOOL AND LENGTH\n         AGO   .NLENGTH\n.NSUBPOO ANOP\nE&#.LEN  DC    A(&#ENTSIZ)         SAVE AREA LENGTH\n&ALIGND  SETB  (1)\n.NLENGTH AIF   (&#ENTRNT OR &#ENTNUN).NSVAREA                 06/84 DBC\n         AIF   (&REMOTE(1)).RMTSVPT\n         AIF   (&ALIGND).ALIGND2\n         DS    0F                  ALIGNMENT\n&ALIGND  SETB  (1)\n.ALIGND2 ANOP\n&LID     DC    (&SAVLEN)X'00'      LOCAL SAVE AREA\n         AGO   .NSVAREA\n.RMTSVPT ANOP                                                 08/84 DBC\n.*                                                            08/84 DBC\n         AIF   (NOT &REMOTE(5)).NSVAREA                       08/84 DBC\nE&#.SAP  DC    Y(&RMTNAME-&N)       PTR TO REMOTE SA          08/84 DBC\n.NSVAREA ANOP                                                 08/84 DBC\n.*                                                            08/84 DBC\n         AGO   .END                                           08/84 DBC\n.*\n.PLIGEN  AIF   ('&ESDT' EQ 'DEFAULT').PESDSET\n         AIF   (K'&N GT 0 OR '&ESDT' NE 'ENTRY').PESDOK1\n         MNOTE 4,'\"ESDTYPE=&ESDTYPE\" IS INVALID WHEN THE NAME FIELD IS'\n         MNOTE 4,'OMITTED FROM THE MACRO CALL.'\n         MNOTE 4,'\"ESDTYPE=NONE\" WILL BE USED INSTEAD.'\n&ESDT    SETC  'NONE'\n.PESDOK1 ANOP\n         AIF   ('&ESDT' EQ 'ENTRY' OR '&ESDT' EQ 'NONE' OR '&ESDT' EQ '*\n               ').PESDOK\n         MNOTE 4,'\"ESDTYPE=&ESDTYPE\" IS INVALID WHEN \"SAVTYPE=PLI\".'\n.PESDSET ANOP\n&ESDT    SETC  'ENTRY'\n         AIF   (K'&N GT 0).PESDOK2\n&ESDT    SETC  'NONE'\n.PESDOK2 AIF   ('&ESDTYPE' EQ 'DEFAULT').PESDOK\n         MNOTE 4,'\"ESDTYPE=&ESDT\" WILL BE USED INSTEAD.'\n.PESDOK  ANOP\n         AIF   ('&ESDT' NE 'ENTRY').PNOTENT\n         ENTRY &N                  MAKE NAME EXTERNALLY AVAILABLE\n.PNOTENT ANOP\n.*\n&N2      SETC  '&N'\n&A1      SETA  K'&N\n         AIF   (K'&NME EQ 0).GOTN2\n&N2      SETC  '&NME'\n&A1      SETA  K'&NME\n.GOTN2   ANOP\n&N2      SETC  ' '(1,1-(&A1-&A1/2*2)).'&N2'\n         DS    0H                  ALIGNMENT\n         DC    C'&N2'              ENTRY NAME\n         DC    AL1(&A1)            LENGTH OF NAME\n.*\n&N1      SETC  '&N'\n         AIF   (K'&N GT 0).PGOTN1\n&N1      SETC  'E&#.ENT'\n.PGOTN1  ANOP\n         USING &N1,&@.15           DCL LOCAL BASE\n&N1      STM   &@.14,&@.12,12(&@.13) SAVE CALLER'S REGISTERS\n.*\n         #TEST DCODE=&SAVTYPE(2)\n&A1      SETA  &#TESRET(1)\n&A2      SETA  120\n         AIF   (&A1 EQ 0).DSALLA\n         AIF   ('&#TESRET(2)' NE '&SAVTYPE(2)').DSALREG\n         #TEST NUM=&#TESRET(2)\n         AIF   (&#TESERR NE 0).DSALL\n&A2      SETA  &#TESRET(2)\n         AIF   (&A2 GE 4096-7).DSALL\n         AIF   (&A2 GE 120-7).DSALLA\n         MNOTE 4,'\"SAVTYPE(2)=&SAVTYPE(2)\" IS TOO SHORT A LENGTH.'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n.DSALLA  ANOP\n         LA    &@.0,(&A2+7)/8*8    GET DESIRED DSA LENGTH\n         AGO   .GOTDSAL\n.DSALREG #TEST REGS=&#TESRET(2)\n         AIF   (&#TESERR NE 0).DSALLR\n         AIF   (&#TESRET(1) EQ 0).GOTLLR\n.DSALLR  LR    &@.0,&#TESRET(2)    GET DESIRED DSA LENGTH\n.GOTLLR  LA    &@.14,7             ROUND UP -\n         AR    &@.0,&@.14           TO -\n         OR    &@.0,&@.14            DOUBLE WORD -\n         XR    &@.0,&@.14             LENGTH\n         AGO   .GOTDSAL\n.DSALL   ANOP\n&LENGTH  SETB  (1)\n         L     &@.0,E&#.LEN        GET DESIRED DSA LENGTH\n.GOTDSAL ANOP\n.*\n         L     &@.1,76(,&@.13)     GET NXT AVAILABLE BLOCK POINTER\n         ALR   &@.0,&@.1           --> PAST DESIRED AREA\n         CL    &@.0,12(,&@.12)     WOULD THE ISA OVERFLOW?\n         BNH   E&#.GOT             NO, PROCEED\n         L     &@.15,116(,&@.12)   YES, --> SPECIAL HANDLER\n         DROP  &@.15               RELEASE CLOBBERED BASE\n         BALR  &@.14,&@.15         GO OBTAIN DESIRED DSA FROM ELSEWHERE\nE&#.GOT  LR    &@.14,&@.1          SAVE PTR TO NEW DSA\n         LR    &@.15,&@.0          SAVE HI-BYTE OF NAB POINTER REG\n         SRL   &@.15,24            ISSOLATE IT\n         SLL   &@.15,24            RESTORE ITS POSITION. SET MVCL\n*                                  SOURCE LENGTH TO ZERO\n         SR    &@.0,&@.1           GET LENGTH OF NEW DSA\n         LR    &@.1,&@.0           COPY FOR MVCL SINK LENGTH\n         LR    &@.0,&@.14          GET MVCL SINK POINTER\n         MVCL  &@.0,&@.14          CLEAR THE NEW DSA\n         OR    &@.0,&@.15          RESTORE HI-BYTE TO NAB POINTER REG\n         LR    &@.1,&@.0           COPY NEXT AVAILABLE BLOCK POINTER\n         L     &@.15,72(,&@.13)    GET LIBRARY WORKSPACE POINTER\n         STM   &@.15,&@.1,72(&@.14) STORE INTO OUR NEW DSA\n         ST    &@.5,88(,&@.14)     STORE PASSED PARAMETERS POINTER\n         ST    &@.13,4(,&@.14)     BACK CHAIN THE DSA\n         L     &@.1,24(,&@.13)     RESTORE PLIST POINTER\n         LR    &@.13,&@.14         --> NEW DSA (R14 PURIFIED BY MVCL)\n         MVI   0(&@.13),X'80'      SET FOR -\n         MVI   1(&@.13),X'00'       PLI -\n         MVI   86(&@.13),X'91'       ERROR -\n         MVI   87(&@.13),X'C0'        HANDLING\n.*\n&N2      SETC  ''\n         AIF   ('&#BS(13)' EQ '').PSKPUSE\n&C1      SETA  13\n         AIF   ('&BASES' NE '*').PBSEADR\n&OLDBASE SETB  (1)\n         BALR  &#BS(13),0          LOAD TEMP LOCAL BASE\n         L     &#BS(13),E&#.BSE-*(,&#BS(13)) LOAD 1ST PROGRAM BASE\n         AGO   .PEQUATE\n.PBSEADR ANOP\n&N2      SETC  'E&#.BSE'\n&#BS(14) SETC  '&N2'\n         BALR  &#BS(13),0          LOAD 1ST PROGRAM BASE\n.PEQUATE ANOP\n&W2      SETC  '&#BS(&C1)'\n&C1      SETA  &C1-1\n         AIF   (&C1 EQ 1 OR '&#BS(&C1)' EQ '').PENDLA\n&N2      LA    &#BS(&C1),X'FFF'(,&W2) LOAD NEXT PROGRAM BASE\n&N2      SETC  ''\n         AGO   .PEQUATE\n.PENDLA  #USING ,\n.PSKPUSE ANOP\n.*\n         AIF   (NOT &LENGTH AND NOT &OLDBASE).ENDCHK\n         AIF   ('&#BS(13)' NE '').PGOTBAS\n&N2      BALR  &@.15,0             LOAD TEMP BASE\n&N2      SETC  ''\n         B     E&#.END-*(,&@.15)   SKIP DATA AREA\n         AGO   .PDFNDAT\n.PGOTBAS ANOP\n&N2      B     E&#.END             SKIP DATA AREA\n&N2      SETC  ''\n.PDFNDAT AIF   (NOT &LENGTH).PNOLEN\nE&#.LEN  DC    A((&SAVTYPE(2)+7)/8*8) DESIRED DSA LENGTH\n.PNOLEN  AIF   (NOT &OLDBASE).PNOOBAS\nE&#.BSE  DC    A(&#BS(14))         OLD BASE ADDRESS\n.PNOOBAS ANOP\n.*\n.END     ANOP\nE&#.END  DS    0H\n.ENDCHK  AIF   ('&N2' EQ '').MEND\n&N2      DS    0H\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#EXIT": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x18/\\x00\\x93\\x18/ 4\\x01\\x82\\x01\\x82\\x00\\x00\\xc4`\\xc3\\xd6\\xd3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-07-01T00:00:00", "modifydate": "1993-07-01T20:34:00", "lines": 386, "newlines": 386, "modlines": 0, "user": "D-COLE"}, "text": "         MACRO\n&NME     #EXIT &R,&PFIX=,&RC=,&MODE=LEAVE                     DBC 04/85\n.*\n.*\n.*                                                            DBC 04/85\n.* LAST CHANGE DATE - APRIL 29, 1985                          DBC 04/85\n.*                  - ADDED SUPPORT FOR THE \"MODE=\" OPERAND.  DBC 04/85\n.*                                                            DBC 10/84\n.* LAST CHANGE DATE - OCTOBER 1, 1984                         DBC 10/84\n.*                  - DELETED CODE THAT SET A X'FF' \"RETURN   DBC 10/84\n.*                    INDICATOR\" IN THE HI-BYTE OF DSAR14.    DBC 10/84\n.*                    IT WAS NOT APPROPRIATE FOR MVS/XA.      DBC 10/84\n.*                                                            DBC 06/84\n.* LAST CHANGE DATE - JUNE 11, 1984                           DBC 06/84\n.*                  - ADDED SUPPORT FOR \"SAVTYPE=NONE\" ON THE DBC 06/84\n.*                    #ENTER MACRO.                           DBC 06/84\n.*                  - FOR REENTRANT EXIT LINKAGE, CHANGED     DBC 06/84\n.*                    THE FREEMAIN SO THAT IT WOULD NO        DBC 06/84\n.*                    LONGER GENERATE AN INLINE PLIST.        DBC 06/84\n.*\n.* LAST CHANGE DATE - OCTOBER 18, 1983\n.*                  - MAILING ADDRESS CHANGE\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - CHANGE THE MACRO NAME FROM $EXIT TO #EXIT\n.*\n.* LAST CHANGE DATE - APRIL 15, 1981\n.*                  - ADDED EXIT LINKAGE FOR A PLI ENVIRONMENT.\n.*                  - \"#REGS GEN=NO\" SUPPORT ADDED.\n.*\n.* LAST CHANGE DATE - OCTOBER 3, 1978\n.*                  - FOR REENTRANT SAVE AREAS, THE FREEMAIN HAS BEEN\n.*                    CHANGED SO THAT MORE THAN 4K CAN BE FREED.\n.*\n.* LAST CHANGE DATE - FEBRUARY 2, 1977\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* LAST CHANGE DATE - FEBRUARY 10, 1976\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE.  ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       RR#2 BOX 712\n.*       AFTON, VA. 22920\n.*\n.*\n.*\n.*   THIS MACRO GENERATES EITHER OS STANDARD OR PLI STANDARD EXIT\n.* LINKAGE. IT WAS WRITTEN TO PROVIDE A SIMPLE, FLEXIBLE, AND COMPLETE\n.* METHOD FOR GENERATING SUCH LINKAGE. IN ADDITION, FOR ALL POSSIBLE\n.* OPERAND COMBINATIONS, #EXIT WILL GENERATE THE ABSOLUTE MINIMUM\n.* AMOUNT OF CODE NECESSARY.\n.*\n.*   THE #EXIT MACRO WILL GENERATE THE FOLLOWING:\n.* - CODE TO LOAD REGISTER 13 WITH A POINTER TO THE HIGHER OS SAVE AREA\n.*   OR PLI DATA STORAGE AREA\n.* - CODE TO RELEASE (VIA FREEMAIN) THE LOWER SAVE AREA IF THE\n.*   PRECEEDING #ENTER MACRO CALL GENERATED A REENTRANT EXPANSION\n.* - CODE TO RESTORE ANY PARTICULAR SET OF REGISTERS\n.* - CODE TO LOAD REGISTER 15 WITH A RETURN CODE THAT IS EITHER AN\n.*   ABSOLUTE VALUE OR A VALUE PRELOADED INTO ANY REGISTER\n.* - CODE TO RETURN TO THE CALLING PROGRAM VIA REGISTER 14\n.*\n.*   THE NAME FIELD\n.* USE THIS FIELD TO ASSIGN A STATEMENT LABEL TO THE FIRST MACHINE\n.* INSTRUCTION OF THE EXPANSION. IF THE NAME FIELD IS OMITTED, THEN NO\n.* STATEMENT LABEL IS ASSIGNED.\n.*\n.*   THE FIRST POSITIONAL OPERAND\n.* THIS OPERAND MUST CONSIST OF A SUB-LIST OF ANY NUMBER OF ENTRIES.\n.* EACH ENTRY MAY BE EITHER A SINGLE REGISTER NAME OR A PARENTHESIZED\n.* PAIR (SEPERATED BY A COMMA) OF REGISTER NAMES - E.G.\n.* \" (1,11,(7,9),5) \". EACH SINGLE REGISTER NAME SPECIFIES A PARTICULAR\n.* REGISTER TO BE RESTORED FROM THE HIGHER SAVE AREA. EACH\n.* PARENTHESIZED PAIR OF REGISTER NAMES SPECIFIES A RANGE OF REGISTERS\n.* TO BE RESTORED. THUS, THE ABOVE EXAMPLE WOULD CAUSE REGISTERS 1, 5,\n.* 7, 8, 9, AND 11 TO BE RESTORED.\n.*   SOME NOTES AND WARNINGS:\n.* - A REQUEST TO RESTORE REGISTER 13 IS MEANINGLESS AND IS IGNORED.\n.* - IF REGISTER 14 IS TO BE LOADED WITH THE RETURN ADDRESS FOUND IN\n.*   THE HIGHER SAVE AREA, THEN YOU MUST SPECIFICALLY REQUEST THAT IT\n.*   (REGISTER 14) BE RESTORED; OTHERWISE, WHATEVER VALUE IS FOUND IN\n.*   REGISTER 14 PRIOR TO THE MACRO CALL WILL BE USED FOR THE RETURN\n.*   ADDRESS.\n.* - TO RESTORE ALL REGISTERS FROM 14 THROUGH 12, YOU MUST CODE\n.*   \" ((14,12)) \". CODING \" (14,12) \" WILL CAUSE ONLY REGISTERS 14 AND\n.*   12 TO BE RESTORED.\n.* - THE NUMERIC VALUES OF ALL REGISTER NAMES USED IN THIS OPERAND MUST\n.*   BE DETERMINABLE AT MACRO PASS TIME. THUS, EACH REGISTER NAME USED\n.*   MUST BE EITHER A SELF-DEFINING NUMERIC OR A NAME DEFINED VIA THE\n.*   #REGS MACRO.\n.* - IF ONLY A SINGLE REGISTER IS TO BE RESTORED, THEN IT NEED NOT BE\n.*   ENCLOSED IN PARENTHESES.\n.* - IF THE FIRST POSITIONAL OPERAND IS OMITTED, THEN NO REGISTERS ARE\n.*   RESTORED.\n.*\n.*   THE RC= OPERAND\n.* THIS OPERAND MUST CONSIST OF A SINGLE VALUE EITHER WITHIN OR NOT\n.* WITHIN PARENTHESES. IF ENCLOSED WITHIN PARENTHESES, THEN THE VALUE\n.* IS TREATED AS THE NAME OF A REGISTER CONTAINING A RETURN CODE. IF\n.* NOT ENCLOSED WITHIN PARENTHESES, THEN THE VALUE IS TREATED AS BEING\n.* THE RETURN CODE ITSELF.\n.*   IF THE RC= OPERAND SPECIFIES A REGISTER NAME, THEN:\n.* - THE VALUE OF THAT NAME NEED NOT BE DETERMINABLE AT MACRO PASS\n.*   TIME;\n.* - THE REGISTER NAME MAY IDENTIFY ANY REGISTER WHATSOEVER REGUARDLESS\n.*   OF WHICH REGISTERS ARE TO BE RESTORED SINCE IN CASES OF POTENTIAL\n.*   CONFLICT, THE RETURN CODE IS COPIED INTO REGISTER 15 PRIOR TO\n.*   REGISTER RESTORATION;\n.* - IT IS ILLOGICAL FOR THE RC= OPERAND TO SPECIFY REGISTER 13.\n.* NOTE THAT IF THE RC= OPERAND IS SPECIFIED BUT THE FIRST POSITIONAL\n.* OPERAND INDICATES THAT REGISTER 15 IS ALSO TO BE RESTORED, THEN\n.* REGISTER 15 IS NOT RESTORED. INSTEAD, IT IS LOADED WITH THE RETURN\n.* CODE VALUE.\n.*   IF THE RC= OPERAND IS OMITTED, THEN NO CODE IS GENERATED TO LOAD\n.* REGISTER 15 WITH A RETURN CODE.\n.*                                                            DBC 04/85\n.*   THE MODE= OPERAND                                        DBC 04/85\n.* THIS FOR MVS/XA. IT CONTROLS WHETHER OR NOT THE #EXIT      DBC 04/85\n.* MACRO IS TO GENERATE CODE TO RESTORE THE CALLER'S          DBC 04/85\n.* ADDRESSING MODE. THE DEFAULT IS NOT TO DO SO.              DBC 04/85\n.*                                                            DBC 04/85\n.* - MODE=LEAVE                                               DBC 04/85\n.*   THIS IS THE DEFAULT. NO EXPLICIT ATTEMPT IS MADE TO      DBC 04/85\n.*   RESTORE THE CALLER'S ADDRESSING MODE.                    DBC 04/85\n.*                                                            DBC 04/85\n.* - MODE=RESTORE                                             DBC 04/85\n.*   THE #EXIT MACRO ATTEMPTS TO RESTORE THE CALLER'S         DBC 04/85\n.*   ADDRESSING MODE BASED ON THE HI-ORDER BIT OF THE         DBC 04/85\n.*   CALLER'S R14.                                            DBC 04/85\n.*\n.*   THE PFIX= OPERAND\n.* THE #EXIT MACRO ATTEMPTS TO USE REGISTER EQUATES IN ITS EXPANSION\n.* WHEN REFERING TO REGISTERS. THIS IS SO THAT THE USE OF THE REGISTERS\n.* WILL BE INDICATED IN THE CROSS REFERENCE LISTING. THE PFIX= OPERAND\n.* CAN BE USED TO CONTROL THE SET OF EQUATES USED. FOR EXAMPLE, IF\n.* \"PFIX=GPR\" IS SPECIFIED, THEN \"GPR1\" WILL BE USED WHENEVER THE\n.* EXPANSION REFERS TO REGISTER 1.\n.*   IF THE PFIX= OPERAND IS OMITTED, THEN THE SET OF EQUATES DEFINED\n.* BY THE FIRST PRIOR #REGS MACRO WILL BE USED. IF THERE IS NO PRIOR\n.* #REGS MACRO, THEN NO EQUATES WILL BE USED.\n.*\n.*   CONSIDERATIONS\n.* THE #EXIT MACRO WILL GENERATE AN EXPANSION THAT WILL ACCURATELY\n.* RESTORE ALL DESIRED REGISTERS AND SET THE RETURN CODE REGUARDLESS OF\n.* WHETHER OR NOT A FREEMAIN SVC IS ISSUED TO RELEASE THE LOWER SAVE\n.* AREA AND REGUARDLESS OF THE RELATIONSHIP BETWEEN THE RC= OPERAND AND\n.* THE SET OF REGISTERS RESTORED.\n.*\n.*\n.*\n.* INNER MACROS USED - #REGS #TEST AND FREEMAIN\n.*\n         GBLA  &#TESERR\n         GBLB  &#ENTRNT,&#ENTPLI,&#ENTNUN                     DBC 06/84\n         GBLC  &#TESRET(20),&#ENTSIZ,&#ENTSP\n         LCLA  &C1,&R1,&R2,&W1,&W2,&ERRCODE\n         LCLB  &RCLA,&RCST,&RSW(16)\n         LCLC  &LNME,&@,&RG(16),&REGNME,&RG2SAVE,&RG4SAVE,&RG5SAVE\n         LCLC  &C,&#                                          DBC 06/84\n&#       SETC  '&SYSNDX'                                      DBC 06/84\n&LNME    SETC  '&NME'\n.*\n&@       SETC  '&PFIX'\n         AIF   (K'&PFIX NE 0).GOTPFIX\n         #TEST PFIX=\n&@       SETC  '&#TESRET(1)'\n         AGO   .DONPFIX\n.GOTPFIX #REGS &PFIX,GEN=NO\n.DONPFIX ANOP\n.*\n&C1      SETA  0                                              DBC 06/84\n.RLP     AIF   (&C1 GE N'&R).RFIN\n&C1      SETA  &C1+1\n         #TEST DCODE=&R(&C1)\n         AIF   (&#TESERR NE 0).END\n&W1      SETA  &#TESRET(1)\n         AIF   (&W1 EQ 0).RLP\n&REGNME  SETC  '&#TESRET(2)'\n         #TEST REGS=&REGNME\n&ERRCODE SETA  1\n         AIF   (&#TESERR NE 0).REGERR\n.REGOK1  ANOP\n&R1      SETA  &#TESRET(1)\n&R2      SETA  &R1+3-&R1/14*16\n&RG(&R2) SETC  '&REGNME'\n&RSW(&R1+1) SETB (1)\n         AIF   (&W1 EQ 1).RLP\n         AIF   (&W1 EQ 2).TWOND\n         MNOTE 4,'\"&R(&C1)\" CONTAINS EXCESS INFORMATION.'\n.TWOND   ANOP\n&REGNME  SETC  '&#TESRET(3)'\n         #TEST REGS=&REGNME\n&ERRCODE SETA  2\n         AIF   (&#TESERR NE 0).REGERR\n.REGOK2  ANOP\n&W2      SETA  &#TESRET(1)\n&RSW(&W2+1) SETB (1)\n.ENTLP   AIF   (&R1 EQ &#TESRET(1)).ENTEND\n&R1      SETA  &R1+1\n&R2      SETA  &R2+1\n         AIF   (&R1 LE 15).R1OK\n&R1      SETA  0\n.R1OK    AIF   (&R2 LE 16).R2OK\n&R2      SETA  1\n.R2OK    ANOP\n&RG(&R2) SETC  '&@&R1'\n         AGO   .ENTLP\n.ENTEND  ANOP\n&RG(&R2) SETC  '&REGNME'\n         AGO   .RLP\n.REGERR  AIF   (&#TESRET(1) GE 0 OR &#TESRET(1) LT 0).REGVALU\n         MNOTE 0,'THE ABOVE ERROR IS NOT DUE TO A BUG IN THE MACRO.'\n         MNOTE 8,'THE VALUE OF \"&REGNME\" IS NOT DETERMINABLE.'\n         MEXIT\n.REGVALU AIF   (&#TESRET(1) GE 0 AND &#TESRET(1) LE 15).REGOK\n         MNOTE 8,'THE VALUE OF \"&REGNME\" IS OUTSIDE THE RANGE OF 0 ... *\n               15'\n         MEXIT\n.REGOK   AIF   (&ERRCODE EQ 1).REGOK1\n         AGO   .REGOK2\n.RFIN    AIF   (NOT &#ENTPLI).RGOK\n         AIF   (NOT &RSW(1)).RG0OK\n         MNOTE 4,'&RG(3) NEEDED BY THE EXIT LINKAGE - NOT RESTORED.'\n.RG0OK   AIF   (NOT &RSW(2)).RG1OK\n         MNOTE 4,'&RG(4) NEEDED BY THE EXIT LINKAGE - NOT RESTORED.'\n.RG1OK   ANOP\n&RG(3)   SETC  ''\n&RG(4)   SETC  ''\n.RGOK    ANOP\n.*\n&RG(16)  SETC  ''\n.*\n         AIF   (K'&RC EQ 0).NORC\n&RG2SAVE SETC  '&RG(2)'\n&RG(2)   SETC  ''\n         AIF   ('&RG2SAVE' NE '').RG2SOK\n&RG2SAVE SETC  '&@.15'\n.RG2SOK  ANOP\n.*\n         AIF   (NOT &RSW(16)).NOPRBLM\n         MNOTE 4,'&RG2SAVE SET TO THE RETURN CODE - NOT RESTORED.'\n.NOPRBLM ANOP\n.*\n         AIF   ('&RC' EQ '&RC(1)').RCNTRG\n         #TEST REGS=&RC(1)\n         AIF   (&#TESERR NE 0).LOADRC\n         AIF   ('&#TESRET(1)' NE '13').RCOK\n         MNOTE 4,'\"RC=&RC\" IS ILLOGICAL.'\n.RCOK    AIF   ('&#TESRET(1)' EQ '15').NORC\n.LOADRC  AIF   ('&RG(1)' EQ '' OR '&RG(3)' EQ '' OR &#ENTPLI).RCLR\n&RCST    SETB  (1)\n         AGO   .NORC\n.RCLR    ANOP\n&LNME    LR    &@.15,&RC(1)        LOAD THE RETURN CODE\n&LNME    SETC  ''\n         AGO   .NORC\n.RCNTRG  ANOP\n&RCLA    SETB  (1)\n         AIF   ('&RG(3)' EQ '' OR '&RG(1)' EQ '').NORC\n&RG(2)   SETC  '&RG2SAVE'\n.NORC    ANOP\n.*\n         AIF   (NOT &#ENTPLI).NOTPLI2\n&LNME    LR    &@.0,&@.13          COPY OUR DSA POINTER\n&LNME    SETC  ''\n.NOTPLI2 ANOP\n.*\n         AIF   (NOT &#ENTRNT OR '&RG(4)' EQ '').NOLRR1\n&LNME    LR    &@.1,&@.13          GET SAVE AREA ADDRESS FOR FREEMAIN\n&LNME    SETC  ''\n.NOLRR1  ANOP\n.*\n         AIF   (&#ENTNUN).NOLSA                               DBC 06/84\n&LNME    L     &@.13,4(,&@.13)     POINT TO THE HIGHER SAVE AREA\n&LNME    SETC  ''                                             DBC 06/84\n.NOLSA   ANOP                                                 DBC 06/84\n         AIF   (NOT &RCST).NORCST\n&LNME    ST    &RC(1),16(,&@.13)   STORE THE RC FOR LATER     DBC 06/84\n&LNME    SETC  ''                                             DBC 06/84\n&RG(2)   SETC  '&RG2SAVE'\n.NORCST  ANOP\n.*\n         AIF   (NOT &#ENTRNT).NTRENT\n         AIF   (NOT &RCLA).RG2OK\n&RG(2)   SETC  'X'\n         AIF   ('&RG(1)&RG(3)' NE '').RG2OK\n&RG(2)   SETC  ''\n.RG2OK   ANOP\n&RG4SAVE SETC  '&RG(4)'\n&RG5SAVE SETC  '&RG(5)'\n&RG(5)   SETC  'X'\n&C1      SETA  0\n.STMLP   AIF   (&C1 GE 4).STMEND\n&C1      SETA  &C1+1\n         AIF   ('&RG(&C1)' NE '').STMLP\n&R1      SETA  &C1+13-(&C1+13)/16*16\n&R2      SETA  &R1-1\n&W1      SETA  &C1*4+8\n.STMLP2  ANOP\n&R2      SETA  &R2+1\n         AIF   (&R2 LE 15).STMR2OK\n&R2      SETA  0\n.STMR2OK ANOP\n&RG(&C1) SETC  '&@&R2'\n&C1      SETA  &C1+1\n         AIF   ('&RG(&C1)' EQ '').STMLP2\n         AIF   (&R1 EQ &R2).ST\n&C       SETC  '&@&R1,&@&R2,&W1.(&@.13)'                      DBC 06/84\n&LNME    STM   &C                  SAVE AGAINST FREEMAIN      DBC 06/84\n&LNME    SETC  ''                                             DBC 06/84\n         AGO   .STMLP\n.ST      ANOP                                                 DBC 06/84\n&LNME    ST    &@&R1,&W1.(,&@.13)  SAVE AGAINST FREEMAIN      DBC 06/84\n&LNME    SETC  ''                                             DBC 06/84\n         AGO   .STMLP\n.STMEND  ANOP\n&RG(5)   SETC  '&RG5SAVE'\n.GTR1M   AIF   ('&RG4SAVE' NE '').NOGTR1\n&LNME    L     &@.1,8(,&@.13)      GET RSA PTR FOR FREEMAIN   DBC 06/84\n&LNME    SETC  ''                                             DBC 06/84\n.NOGTR1  ANOP                                                 DBC 06/84\n&LNME    L     &@.0,E&#.LEN        GET RSA LEN (AND SUBPOOL)  DBC 06/84\n&LNME    SETC  ''                                             DBC 06/84\n         MNOTE '         FREEMAIN R,A=(1),LV=(0)'             DBC 06/84\n         FREEMAIN R,A=(1),LV=(0)                              DBC 06/84\n.NTRENT  ANOP\n.*\n&C1      SETA  0\n.LMLP    AIF   (&C1 GE 16).SETRCM\n&C1      SETA  &C1+1\n         AIF   ('&RG(&C1)' EQ '').LMLP\n&R1      SETA  &C1\n&W1      SETA  &C1*4+8\n.LMLP2   ANOP\n&C1      SETA  &C1+1\n         AIF   ('&RG(&C1)' NE '').LMLP2\n         AIF   (&R1 EQ &C1-1).L\n&C       SETC  '&RG(&R1),&RG(&C1-1),&W1.(&@.13)'              DBC 06/84\n&LNME    LM    &C                  RESTORE REGISTERS          DBC 06/84\n&LNME    SETC  ''                                             DBC 06/84\n         AGO   .LMLP\n.L       ANOP                                                 DBC 06/84\n&C       SETC  '&RG(&R1),&W1.(,&@.13)'                        DBC 06/84\n&LNME    L     &C                  RESTORE THE REGISTER       DBC 06/84\n&LNME    SETC  ''                                             DBC 06/84\n         AGO   .LMLP\n.SETRCM  ANOP\n.*\n         AIF   (NOT &RCLA).RETURN\n         AIF   ('&RC' EQ '0').SR\n&LNME    LA    &@.15,&RC           GET THE RETURN CODE        DBC 06/84\n&LNME    SETC  ''                                             DBC 06/84\n         AGO   .RETURN\n.SR      ANOP                                                 DBC 06/84\n&LNME    SLR   &@.15,&@.15         ZERO THE RETURN CODE       DBC 06/84\n&LNME    SETC  ''                                             DBC 06/84\n.RETURN  ANOP\n.*\n         AIF   (NOT &#ENTPLI).NOTPLI3\n&LNME    BALR  &@.1,&@.14          RETURN TO CALLER           DBC 06/84\n         MEXIT\n.NOTPLI3 ANOP\n.*\n         AIF   ('&MODE '(1,1) EQ 'R').RETBSM                  DBC 04/85\n         AIF   ('&MODE '(1,1) EQ 'L').RETBR                   DBC 04/85\n         MNOTE 8,'\"MODE=&MODE\" NOT RECOGNIZED.'               DBC 04/85\n         MNOTE *,'\"MODE=RESTORE\" OR \"MODE=LEAVE\" WAS EXPECTED.' C 04/85\n.*                                                            DBC 04/85\n.RETBR   ANOP                                                 DBC 04/85\n&LNME    BR    &@.14               RETURN                     DBC 10/84\n&LNME    SETC  ''                                             DBC 04/85\n         AGO   .MODEZ                                         DBC 04/85\n.RETBSM  ANOP                                                 DBC 04/85\n&LNME    BSM   0,&@.14             RESTORE AMODE AND RETURN   DBC 04/85\n&LNME    SETC  ''                                             DBC 04/85\n.MODEZ   ANOP                                                 DBC 04/85\n.*                                                            DBC 06/84\n         AIF   (NOT &#ENTRNT).END                             DBC 06/84\n         AIF   ('&#ENTSP' EQ '').NOSPOOL                      DBC 06/84\n         DS    0F                  ALIGN                      DBC 06/84\n&C       SETC  'AL1(&#ENTSP),AL3(&#ENTSIZ)'                   DBC 06/84\nE&#.LEN  DC    &C                  RSA SUBPOOL AND LENGTH     DBC 06/84\n         MEXIT                                                DBC 06/84\n.NOSPOOL ANOP\nE&#.LEN  DC    A(&#ENTSIZ)         RSA LENGTH                 DBC 06/84\n.END     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#PUT": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x18/\\x00\\x93\\x18/ 4\\x00P\\x00P\\x00\\x00\\xc4`\\xc3\\xd6\\xd3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-07-01T00:00:00", "modifydate": "1993-07-01T20:34:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "D-COLE"}, "text": "         MACRO\n&NME     #PUT  &MSG,&PFIX=,&SUBAD=,&MF=\n.*\n.*\n.*\n.* LAST CHANGE DATE - OCTOBER 18, 1983\n.*                  - MAILING ADDRESS CHANGE\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - MACRO NAME CHANGED FROM $PUT TO #PUT.\n.*\n.* LAST CHANGE DATE - APRIL 20, 1981\n.*                  - \"#REGS GEN=NO\" SUPPORT ADDED.\n.*\n.* LAST CHANGE DATE - JULY 18, 1980\n.*                  - INDIRECT ADDRESSING IS NOW INDICATED BY A\n.*                    TRAILING PERCENT SIGN (%) RATHER THAN A LEADING\n.*                    ONE.\n.*\n.* LAST CHANGE DATE - JANUARY 12, 1977\n.*                  - HANDLING OF THE SUBAD= OPERAND IS REWRITTEN.\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE. ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       RR#2 BOX 712\n.*       AFTON, VA. 22920\n.*\n         GBLA  &#TESERR\n         GBLC  &#PUTSUB\n         GBLC  &#TESRET(20)\n         LCLA  &A1\n         LCLC  &@,&C1,&N\n         AIF   ('&SUBAD' EQ '').SUBOK\n         AIF   ('&SUBAD(1)' NE '&SUBAD').SUBOK\n&#PUTSUB SETC  '&SUBAD'\n.SUBOK   AIF   ('&MF(1)' EQ 'INIT').MEND\n&N       SETC  '&NME'\n.*\n&@       SETC  '&PFIX'\n         AIF   ('&PFIX' NE '').PFIXOK\n         #TEST PFIX=\n&@       SETC  '&#TESRET(1)'\n         AGO   .DONPFIX\n.PFIXOK  #REGS &PFIX,GEN=NO\n.DONPFIX ANOP\n.*\n         AIF   ('&MSG(1)' EQ '&MSG').NOTREG\n         #TEST REGS=&MSG(1)\n         AIF   (&#TESERR NE 0).LR\n         AIF   (&#TESRET(1) EQ 1).BAL\n.LR      ANOP\n&N       LR    &@.1,&MSG(1)        --> MESSAGE LENGTH FIELD\n&N       SETC  ''\n         AGO   .BAL\n.NOTREG  AIF   ('&MSG' EQ '').BAL\n         AIF   ('&MSG'(K'&MSG,1) EQ '%').MSGINDR\n&N       LA    &@.1,&MSG-1         --> MESSAGE LENGTH FIELD\n         AGO   .MSGOK\n.MSGINDR ANOP\n&C1      SETC  '&MSG'(1,K'&MSG-1)\n&N       L     &@.1,=A(&C1-1)      --> MESSAGE LENGTH FIELD\n.MSGOK   ANOP\n&N       SETC  ''\n.BAL     AIF   ('&SUBAD(1)' NE '&SUBAD').BALR\n         AIF   ('&#PUTSUB'(1,1) EQ '%').BALINDR\n&N       BAL   &@.14,&#PUTSUB      GO DISPLAY THE MESSAGE\n         AGO   .MEND\n.BALR    ANOP\n&N       BALR  &@.14,&SUBAD(1)     GO DISPLAY THE MESSAGE\n         AGO   .MEND\n.BALINDR ANOP\n&A1      SETA  0\n.LP1     ANOP\n&A1      SETA  &A1+1\n         AIF   ('&#PUTSUB'(1,&A1) NE '&#PUTSUB').LP1\n&C1      SETC  '&#PUTSUB'(2,&A1-1)\n&N       L     &@.15,=A(&C1)       --> MESSAGE PRINTING ROUTINE\n         BALR  &@.14,&@.15         GO DISPLAY THE MESSAGE\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#REGS": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x18/\\x00\\x93\\x18/ 4\\x00\\xc5\\x00\\xc5\\x00\\x00\\xc4`\\xc3\\xd6\\xd3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-07-01T00:00:00", "modifydate": "1993-07-01T20:34:00", "lines": 197, "newlines": 197, "modlines": 0, "user": "D-COLE"}, "text": "         MACRO\n         #REGS &GEN=YES\n.*\n.*\n.*                                                            09/84 DBC\n.* LAST CHANGE DATE - SEPTEMBER 11, 1984                      09/84 DBC\n.*                  - ADDED SUPPORT FOR PL/S STYLE REGISTER   09/84 DBC\n.*                    NAMES (@00, @01, ---, @15).             09/84 DBC\n.*                  - ATTEMPTS TO MULTIPLY DEFINE THE SAME    09/84 DBC\n.*                    NAME TO THE SAME VALUE WILL NOW BE      09/84 DBC\n.*                    SUPPRESSED WITHOUT ERROR.               09/84 DBC\n.*\n.* LAST CHANGE DATE - OCTOBER 18, 1983\n.*                  - MAILING ADDRESS CHANGE\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - MACRO NAME CHANGED FROM $REGS TO #REGS\n.*\n.* LAST CHANGE DATE - APRIL 20, 1981\n.*                  - SUPPORT FOR THE \"GEN={YES|NO}\" OPERAND IS ADDED.\n.*\n.* LAST CHANGE DATE - DECEMBER 5, 1977\n.*                  - SINGLE REGISTER EQUATES NOW LINE UP CORRECTLY IN\n.*                    THE LISTING.\n.*\n.* LAST CHANGE DATE - FEBRUARY 2, 1977\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* LAST CHANGE DATE - APRIL 1, 1975\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE.  ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       RR#2 BOX 712\n.*       AFTON, VA. 22920\n.*\n.*\n.*\n.*   THE #REGS MACRO HAS TWO FUNCTIONS. ITS PRIMARY\n.* PURPOSE IS TO PROVIDE A SIMPLE MEANS OF DEFINING SETS\n.* OF REGISTER NAME EQUATES. ITS SECONDARY PURPOSE IS TO\n.* CREATE AN INTERNAL TABLE OF ALL REGISTER NAMES\n.* COUPLED WITH THEIR NUMERIC VALUES. THIS TABLE IS THEN\n.* MADE AVAILABLE TO CERTAIN OTHER MACROS (E.G. #ENTER\n.* AND #EXIT) SO THAT THEY CAN DETERMINE (IF NECESSARY)\n.* THE VALUES OF ANY REGISTER NAMES THAT MIGHT BE PASSED\n.* TO THEM AS OPERANDS AND SO THAT THEY CAN USE REGISTER\n.* NAME EQUATES INSTEAD OF REGISTER NUMBERS IN THE CODE\n.* THAT THEY GENERATE. THIS IS SO THAT ALL REFERENCES TO\n.* REGISTERS WILL BE INDICATED IN THE ASSEMBLER'S CROSS\n.* REFERENCE LISTING.\n.*                                                            09/84 DBC\n.*   THE #REGS MACRO CAN BE USED ANY NUMBER OF TIMES IN\n.* AN ASSEMBLY. EACH TIME THAT IT IS USED, IT CAN BE\n.* GIVEN ANY NUMBER OF POSITIONAL OPERANDS. EACH OPERAND      09/84 DBC\n.* CAN BE EITHER A SINGLE TERM OR A SUB-LIST OF TWO\n.* TERMS.\n.*                                                            09/84 DBC\n.*   IF AN OPERAND IS A SUB-LIST OF TWO TERMS, THEN THE\n.* #REGS MACRO TREATS IT AS A REQUEST TO DEFINE A SINGLE\n.* REGISTER NAME AND IT GENERATES A STATEMENT OF THE\n.* FORM: \" TERM1 EQU TERM2 \". THE FIRST TERM MUST BE ANY\n.* VALID NAME NOT PREVIOUSLY DEFINED. THE SECOND TERM\n.* MUST BE ANY SELF-DEFINING TERM OR ANY REGISTER NAME\n.* THAT HAS BEEN PREVIOUSLY DEFINED BY THIS OR A\n.* PREVIOUS #REGS MACRO. IT SHOULD NOT BE AN EXPRESSION,\n.* AND IT SHOULD NOT BE ANY NAME NOT PREVIOUSLY DEFINED.\n.* THE VALUE OF THE SECOND TERM SHOULD FALL IN THE RANGE\n.* OF 0 THROUGH 15. IF THE SECOND TERM FITS THESE\n.* REQUIREMENTS, THEN THE REGISTER NAME IS SAVED IN AN\n.* INTERNAL TABLE FOR USE BY OTHER MACROS.\n.*                                                            09/84 DBC\n.*   IF AN OPERAND IS ONLY A SINGLE TERM, THEN THE MACRO\n.* TREATS IT AS A REQUEST TO DEFINE A FULL SET OF\n.* REGISTER NAME EQUATES WITH THE GIVEN TERM USED AS THE\n.* REGISTER NAME PREFIX. AS AN EXAMPLE, ASSUME THAT THE\n.* OPERAND IS \"GPR\". IN THIS CASE, THE #REGS MACRO WILL\n.* GENERATE EQUATES DEFINING GPR0, GPR1, ---, GPR15 AND\n.* GPRA, GPRB, ---, GPRF (EQUAVALENT TO GPR10, GPR11,\n.* ---, GPR15). IN ADDITION, THE GENERATED REGISTER\n.* NAMES ARE SAVED IN AN INTERNAL TABLE FOR USE BY OTHER\n.* MACROS.\n.*                                                            09/84 DBC\n.*   A SPECIAL CASE. IF THE SINGLE TERM IS AN \"AT SIGN\"       09/84 DBC\n.* (@), THEN THEN THE GENERATED NAMES WILL BE @00, @01,       09/84 DBC\n.* ---, @15. THIS CONFORMS TO PL/S CONVENTIONS.               09/84 DBC\n.*                                                            09/84 DBC\n.*   IF #REGS IS CALLED WITHOUT OPERANDS, THEN IT IS\n.* TREATED AS A REQUEST TO GENERATE A FULL SET OF\n.* EQUATES USING \"R\" AS THE PREFIX.\n.*\n.*\n.*\n.* GEN={YES|NO}    (DEFAULT IS GEN=YES)\n.*       THIS CONTROLS WHETHER OR NOT THIS MACRO ACTUALLY GENERATES THE\n.*       'EQU' STATEMENTS THAT CREATE THE DESIRED REGISTER NAMES. IF\n.*       \"GEN=NO\" IS GIVEN, THEN PRESUMEDLY THE DESIRED NAMES ARE\n.*       GENERATED ELSEWHERE. IN THIS CASE THE ONLY FUNCTION PERFORMED\n.*       BY THIS MACRO IS TO UPDATE INTERNAL TABLES.\n.*\n.*\n.*\n.* INNER MACROS USED - #TEST\n.*\n         GBLA  &#REGVAL(255)\n         GBLA  &#TESERR\n         GBLC  &#REGNME(255)\n         GBLC  &#TESRET(20)\n         LCLA  &ARG,&CTR,&NEXT,&A1\n         LCLB  &B1\n         LCLC  &LPFX,&C1\n&NEXT    SETA  0\n.LP1     AIF   (&NEXT GE 255).END1\n&NEXT    SETA  &NEXT+1\n         AIF   ('&#REGNME(&NEXT)' NE '').LP1\n&NEXT    SETA  &NEXT-1\n.END1    ANOP\n&ARG     SETA  0\n.LP2     AIF   (&ARG GE N'&SYSLIST).DONE\n&ARG     SETA  &ARG+1\n         AIF   (N'&SYSLIST(&ARG) EQ 0).LP2\n         AIF   (&NEXT LT 255).NOTFULL\n         MNOTE 4,'THE REGISTER NAME SAVE TABLE IS FULL.'\n         MNOTE 4,'THE MAXIMUM CAPACITY IS 255 ENTRIES.'\n.NOTFULL ANOP\n&C1      SETC  '&SYSLIST(&ARG,1)'\n         AIF   (N'&SYSLIST(&ARG) GE 2).ONEREG\n.NULL    ANOP\n&B1      SETB  (1)\n         #TEST PFIX=\n&LPFX    SETC  '&#TESRET(1)'\n.*                                                            09/84 DBC\n         AIF   ('&C1' NE '@').NOT@                            09/84 DBC\n&CTR     SETA  0-1                                            09/84 DBC\n.LP@     AIF   (&CTR EQ 15).END@                              09/84 DBC\n&CTR     SETA  &CTR+1                                         09/84 DBC\n&C1      SETC  '0&CTR'                                        09/84 DBC\n&C1      SETC  '&C1'(K'&C1-1,2)                               09/84 DBC\n         #REGS (@&C1,&LPFX&CTR)                               09/84 DBC\n         AGO   .LP@                                           09/84 DBC\n.END@    AIF   (&NEXT GE 255).LP2                             09/84 DBC\n&NEXT    SETA  &NEXT+1                                        09/84 DBC\n         AIF   ('&#REGNME(&NEXT)' NE '').END@                 09/84 DBC\n&NEXT    SETA  &NEXT-1                                        09/84 DBC\n         AGO   .LP2                                           09/84 DBC\n.NOT@    ANOP                                                 09/84 DBC\n.*                                                            09/84 DBC\n&CTR     SETA  0\n.LP2A    AIF   (&CTR GE &NEXT).PXSAVE\n&CTR     SETA  &CTR+1\n         AIF   (&#REGVAL(&CTR) LT 16 OR '&#REGNME(&CTR)' NE '&C1').LP2A\n         AGO   .LP2                                           09/84 DBC\n.PXSAVE  AIF   (&NEXT GE 255).NOSAVE1                         09/84 DBC\n&NEXT    SETA  &NEXT+1\n&#REGNME(&NEXT) SETC '&C1'\n&#REGVAL(&NEXT) SETA 16\n.NOSAVE1 AIF   ('&GEN(1)'(1,1) NE 'Y').LP2\n&CTR     SETA  0\n.LP3     AIF   (&CTR GT 15).HEX\n&C1&CTR  EQU   &LPFX&CTR\n&CTR     SETA  &CTR+1\n         AGO   .LP3\n.HEX     ANOP\n&C1.A    EQU   &C1.10\n&C1.B    EQU   &C1.11\n&C1.C    EQU   &C1.12\n&C1.D    EQU   &C1.13\n&C1.E    EQU   &C1.14\n&C1.F    EQU   &C1.15\n         AGO   .LP2\n.ONEREG  ANOP\n&B1      SETB  (1)\n         AIF   (N'&SYSLIST(&ARG) EQ 2).NOXCESS\n         MNOTE 4,'\"&SYSLIST(&ARG)\" CONTAINS EXCESS INFORMATION.'\n         MNOTE 4,'THE EXCESS WILL BE IGNORED.'\n.NOXCESS #TEST REGS=&SYSLIST(&ARG,2)\n         AIF   (&#TESERR EQ 0).REGOK\n         MNOTE 4,'THE VALUE OF \"&SYSLIST(&ARG,2)\" IS NOT DETERMINABLE.'\n         AGO   .REGEQU\n.REGOK   ANOP                                                 09/84 DBC\n&A1      SETA  &#TESRET(1)\n&CTR     SETA  0\n.LP3A    AIF   (&CTR GE &NEXT).RGSAVE\n&CTR     SETA  &CTR+1\n         AIF   (&#REGVAL(&CTR) NE &A1 OR '&#REGNME(&CTR)' NE '&C1').LP3*\n               A\n         AGO   .LP2                                           09/84 DBC\n.RGSAVE  AIF   (&NEXT GE 255).REGEQU                          09/84 DBC\n&NEXT    SETA  &NEXT+1\n&#REGNME(&NEXT) SETC '&C1'\n&#REGVAL(&NEXT) SETA &A1\n.REGEQU  AIF   ('&GEN(1)'(1,1) NE 'Y').LP2\n&C1      EQU   &SYSLIST(&ARG,2)\n         AGO   .LP2\n.DONE    ANOP\n&C1      SETC  'R'\n         AIF   (NOT &B1).NULL\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#TEST": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x18/\\x00\\x93\\x18/ 4\\x02\\x88\\x02\\x88\\x00\\x00\\xc4`\\xc3\\xd6\\xd3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-07-01T00:00:00", "modifydate": "1993-07-01T20:34:00", "lines": 648, "newlines": 648, "modlines": 0, "user": "D-COLE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#USING": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x18/\\x00\\x93\\x18/ 4\\x00*\\x00*\\x00\\x00\\xc4`\\xc3\\xd6\\xd3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-07-01T00:00:00", "modifydate": "1993-07-01T20:34:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "D-COLE"}, "text": "         MACRO\n         #USING &D\n.*\n.*\n.*\n.* LAST CHANGE DATE - OCTOBER 18, 1983\n.*                  - MAILING ADDRESS CHANGE\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - MACRO NAME CHANGED FROM $USING TO #USING.\n.*\n.* LAST CHANGE DATE - FEBRUARY 2, 1977\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* LAST CHANGE DATE - AUGUST 23, 1976\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE. ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       RR#2 BOX 712\n.*       AFTON, VA. 22920\n.*\n.*\n.*\n.*   THIS MACRO GENERATES A USING INSTRUCTION THAT REDECLARES ALL BASES\n.* (IF ANY) DECLARED BY A PRIOR #ENTER MACRO EXPANSION.\n.*\n.*\n.*\n.* INNER MACROS USED - NONE\n.*\n         GBLC  &#BS(14)\n         LCLA  &A1,&DISPL\n         AIF   ('&#BS(14)' EQ '').END\n&DISPL   SETA  &DISPL-4095\n&A1      SETA  14\n.LP      AIF   (&A1 EQ 2).END\n&A1      SETA  &A1-1\n         AIF   ('&#BS(&A1)' EQ '').LP\n&DISPL   SETA  &DISPL+4095\n         USING &#BS(14)+&DISPL,&#BS(&A1)\n         AGO   .LP\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE093": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00#\\x01 \\x11?\\x01 \\x11?#$\\x01\\x00\\x01\\x00\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-04-22T00:00:00", "modifydate": "2020-04-22T23:24:23", "lines": 256, "newlines": 256, "modlines": 0, "user": "CBT-499"}, "text": "//***FILE 093 Contains a system to sequentialize a PDS (any         *   FILE 093\n//*           LRECL) from Sam Golob.  Some of this code is from     *   FILE 093\n//*           the SHARE PL/I tape.  For additional information,     *   FILE 093\n//*           see the members called $$$$DOC and $$$$DOC2.          *   FILE 093\n//*                                                                 *   FILE 093\n//*           Gerhard Postpischil has submitted a new version       *   FILE 093\n//*           of PDSLOAD, current member PDSLOADW.  All older       *   FILE 093\n//*           versions of PDSLOAD have been renumbered in order     *   FILE 093\n//*           as follows:  PDSLOOLD, the oldest version, followed   *   FILE 093\n//*           by PDSLOAD1 thru PDSLOAD9 in date order.  PDSLOADW    *   FILE 093\n//*           is newer than all of them.  I guess that I'll         *   FILE 093\n//*           adhere to this scheme.  (SBG - 2012/02/20)            *   FILE 093\n//*                                                                 *   FILE 093\n//*           THIS SYSTEM SHOULD PROVE USEFUL IF YOU WANT           *   FILE 093\n//*           TO \"SEQUENTIALIZE\" A PDS.                             *   FILE 093\n//*                                                                 *   FILE 093\n//*           THIS LIBRARY CONTAINS TWO PAIRS OF PROGRAMS:          *   FILE 093\n//*                                                                 *   FILE 093\n//*           1.  OFFLOADW AND PDSLOADW    (MODIFIED FROM           *   FILE 093\n//*               CBT TAPE BY GREG PRICE, et al)                    *   FILE 093\n//*                                                                 *   FILE 093\n//*           2.  LISTPDS can be used instead of OFFLOADW,          *   FILE 093\n//*               and LISTPDS has just been fixed to accommodate    *   FILE 093\n//*               extended ISPF statistics.  (Version 8.2)          *   FILE 093\n//*               (June 2016)                                       *   FILE 093\n//*                                                                 *   FILE 093\n//*           See members $$NOTEnn for more history about           *   FILE 093\n//*               this file.                                        *   FILE 093\n//*                                                                 *   FILE 093\n//*     02/2017   Fixed OFFLOAD, LISTPDS for 8-character            *   FILE 093\n//*               ISPF userids in the ISPF stats.  (v10.1, v8.3)    *   FILE 093\n//*                                                                 *   FILE 093\n//*     10/2015   Fixed V10.0 - OFFLOADW optionally puts out a      *   FILE 093\n//*     V10.0     //SYSUPLOG DD name, which logs all records        *   FILE 093\n//*               in pds members that originally have string \"><\"   *   FILE 093\n//*               in column 1, so that they don't get changed       *   FILE 093\n//*               back to string \"./\" by PDSLOADW.                  *   FILE 093\n//*                                                                 *   FILE 093\n//*     09/2013   These two programs, PDSLOADW and OFFLOADW,        *   FILE 093\n//*               have now been fixed to handle extended            *   FILE 093\n//*               ISPF stats if they exist (from z/OS 1.11 on).     *   FILE 093\n//*                                                                 *   FILE 093\n//*     02/2017   Fixed PDSLOADW, OFFLOADW, and LISTPDS to handle   *   FILE 093\n//*               pds member ISPF userids of 8 characters.          *   FILE 093\n//*                                                                 *   FILE 093\n//*     11/2018   LISTPDS was fixed to punch ./ ALIAS cards if      *   FILE 093\n//*               it is run with a PARM of 'ALIAS'.                 *   FILE 093\n//*                                                                 *   FILE 093\n//*           Extended format of the ./ ADD card:                   *   FILE 093\n//*                                                                 *   FILE 093\n//*    From columns 01 thru 68 is the old format of the ./ ADD card *   FILE 093\n//*                                                                 *   FILE 093\n//*    Column 72 has to be a space, to accommodate IEBUPDTE ./      *   FILE 093\n//*     continuations, if they exist.                               *   FILE 093\n//*                                                                 *   FILE 093\n//*    From columns 70 thru 80 is the new format, as follows:       *   FILE 093\n//*                                                                 *   FILE 093\n//*    ----+----1----+----2-                                        *   FILE 093\n//*    ./ ADD NAME=membname                                         *   FILE 093\n//*                                                                 *   FILE 093\n//*    ---+----3----+----4----+----5----+----6----+----7----+----8  *   FILE 093\n//*    vvmm-crdat-moddt-hhmm-sssss-iiiii-mmmmm-MYUSRID ss nnniiimm  *   FILE 093\n//*    ver  yyjjj yyjjj time size  init  modif userid               *   FILE 093\n//*    mod                                                          *   FILE 093\n//*                          last                                   *   FILE 093\n//*                          five   same  same                      *   FILE 093\n//*                          digits                                 *   FILE 093\n//*                                                                 *   FILE 093\n//*           where ss  is decimal digits 1-2 of seconds of time    *   FILE 093\n//*           where nnn is decimal digits 6-8 of the ISPF size      *   FILE 093\n//*                   (so maximum number is 99,999,999).            *   FILE 093\n//*           where iii is decimal digits 6-8 of the ISPF init      *   FILE 093\n//*                   (so maximum number is 99,999,999).            *   FILE 093\n//*           where mm  is decimal digits 6-7 of the ISPF modified  *   FILE 093\n//*                   (so maximum number is 9,999,999).             *   FILE 093\n//*           userid can now be up to 8 characters, filling in      *   FILE 093\n//*                   the space at character 69.                    *   FILE 093\n//*                                                                 *   FILE 093\n//*           2.  UNUPDTE AND UPDTE       (FROM PL1 MODS            *   FILE 093\n//*               TAPE - SPLA.  UNUPDTE WAS ENHANCED BY ART         *   FILE 093\n//*               TANSKY OF SUNGARD.)                               *   FILE 093\n//*                                                                 *   FILE 093\n//*           Note: Small fix to PDSLOADX from Gerd Petermann:      *   FILE 093\n//*                 email:  GPetermann@horizont-it.com              *   FILE 093\n//*                                                                 *   FILE 093\n//*           EACH PAIR IS A SELF-CONTAINED SYSTEM THAT IS          *   FILE 093\n//*           INDEPENDENT OF THE OTHER PAIR.                        *   FILE 093\n//*                                                                 *   FILE 093\n//*           OFFLOADW AND PDSLOADW ALLOW IEBUPDTE-TYPE UNLOADING   *   FILE 093\n//*           AND RELOADING OF PDS'ES TO SEQUENTIAL DATASETS.       *   FILE 093\n//*           THIS IS NOT RESTRICTED TO RECORD LENGTHS OF 80 FOR    *   FILE 093\n//*           THE DATA.  ALMOST ANY PARTITIONED DATASETS ARE        *   FILE 093\n//*           ELIGIBLE FOR THIS TREATMENT.  THIS OPENS              *   FILE 093\n//*           IEBUPDTE-TYPE UNLOADS TO TAPE OR DISK-SEQUENTIAL      *   FILE 093\n//*           DATASETS TO MUCH WIDER APPLICATION THAN HERETOFORE.   *   FILE 093\n//*           (ALSO SEE THE \"=OFFLOAD\" OPTION OF THE \"REVIEW\" TSO   *   FILE 093\n//*           COMMAND THAT IS ON FILE 134 OF THIS TAPE.)            *   FILE 093\n//*                                                                 *   FILE 093\n//*           OFFLOAD AND PDSLOAD NOW AUTOMATICALLY ALLOW           *   FILE 093\n//*           FOR LRECL FROM 1 TO 256 NOW (FROM GREG PRICE)         *   FILE 093\n//*           WITH NO CONDITIONAL ASSEMBLY.                         *   FILE 093\n//*                                                                 *   FILE 093\n//*           THE RESULT WAS ACHIEVED BY SLIGHTLY MODIFYING         *   FILE 093\n//*           EXISTING PROGRAMS PDSLOAD (FROM CBT TAPE FILE         *   FILE 093\n//*           316) AND OFFLOAD (FROM CBT TAPE FILE 225).            *   FILE 093\n//*           YOU CAN GET THE IEBUPDTE-TYPE UNLOAD AND              *   FILE 093\n//*           RELOAD TREATMENT, COMPLETE WITH THE   ./ ADD          *   FILE 093\n//*           CARDS AND ISPF STATISTICS PRESERVED.  AFTER           *   FILE 093\n//*           GREG PRICE'S MODIFICATIONS, OFFLOAD AND PDSLOAD       *   FILE 093\n//*           ARE NOW A MATCHED PAIR OF PROGRAMS TO PERFORM         *   FILE 093\n//*           OPPOSITE FUNCTIONS:  OFFLOAD SEQUENTIALIZES A PDS,    *   FILE 093\n//*           AND PDSLOAD RELOADS THE PDS FROM THE SEQUENTIAL       *   FILE 093\n//*           OFFLOADED FILE.                                       *   FILE 093\n//*                                                                 *   FILE 093\n//*           THE UPDTE AND UNUPDTE PROGRAMS WERE LIFTED            *   FILE 093\n//*           FROM THE PL1 MODS TAPE THAT CAN BE OBTAINED           *   FILE 093\n//*           FROM SPLA (ORDER NUMBER 370D-03.2.019).               *   FILE 093\n//*                                                                 *   FILE 093\n//*           THESE PROGRAMS ARE MORE FLEXIBLE THAN                 *   FILE 093\n//*           PDSLOADW AND OFFLOADW IN THAT:                        *   FILE 093\n//*                                                                 *   FILE 093\n//*            1.  THEY HANDLE RECFM=F AND ALSO RECFM=V             *   FILE 093\n//*                DATASETS.                                        *   FILE 093\n//*                                                                 *   FILE 093\n//*            2.  THE DATASET CAN HAVE ANY LRECL PERMITTED         *   FILE 093\n//*                BY THE SYSTEM.                                   *   FILE 093\n//*                                                                 *   FILE 093\n//*        PROCESSING WITH THESE PROGRAMS SEQUENTIALIZES A          *   FILE 093\n//*        PDS BY LOADING EACH MEMBER TO A SEQUENTIAL               *   FILE 093\n//*        DATASET, PRECEDED BY A CONTROL RECORD THAT LOOKS         *   FILE 093\n//*        LIKE   ./ ADD NAME=MEMBNAME , SIMILAR TO AN              *   FILE 093\n//*        IEBUPDTE CONTROL CARD.                                   *   FILE 093\n//*                                                                 *   FILE 093\n//*        THE PROGRAM UNUPDTE CONVERTS A PARTITIONED               *   FILE 093\n//*        DATASET INTO SEQUENTIAL FORMAT DESCRIBED BY THE          *   FILE 093\n//*        PRECEDING PARAGRAPH.  THE PROGRAM UPDTE LOADS            *   FILE 093\n//*        THE SEQUENTIALIZED DATASET OF THE ABOVE FORMAT           *   FILE 093\n//*        BACK INTO A PDS THAT HAS THE SAME DCB ATTRIBUTES         *   FILE 093\n//*        (EXCEPT FOR DSORG OF COURSE).                            *   FILE 093\n//*                                                                 *   FILE 093\n//*        IT IS ALSO ADVANTAGEOUS TO HAVE PDSLOADW AND             *   FILE 093\n//*        OFFLOADW AROUND, BECAUSE THEY HAVE SOME OPTIONS          *   FILE 093\n//*        WHICH UPDTE AND UNUPDTE DO NOT HAVE, SUCH AS             *   FILE 093\n//*        AUTOMATICALLY CONVERTING THE STRING ./ WITHIN A          *   FILE 093\n//*        MEMBER (IN COLUMNS 1-2) TO SOME OTHER STRING,            *   FILE 093\n//*        SUCH AS ><.  THEREFORE I AM INCLUDING BOTH PAIRS         *   FILE 093\n//*        OF PROGRAMS IN THIS PACKAGE.                             *   FILE 093\n//*                                                                 *   FILE 093\n//*        JCL TO RUN THESE PROGRAMS IS OF THE SAME FORMAT          *   FILE 093\n//*        AS IEBUPDTE JCL, TO THE POINT WHERE EACH PROGRAM         *   FILE 093\n//*        MIMICS THE FUNCTION OF IEBUPDTE.  FOR INSTANCE,          *   FILE 093\n//*        UNUPDTE, WHICH UNLOADS A PDS TO A SEQUENTIAL             *   FILE 093\n//*        DATASET, HAS DDCARDS SYSPRINT, SYSUT1, AND               *   FILE 093\n//*        SYSUT2.  UPDTE, WHICH DOES THE OPPOSITE, HAS             *   FILE 093\n//*        CONTROL CARDS SYSPRINT, SYSIN, AND SYSUT2.  YOU          *   FILE 093\n//*        GET THE PICTURE.                                         *   FILE 093\n//*                                                                 *   FILE 093\n//*        THESE FOUR PROGRAMS (TWO PAIRS) TAKEN TOGETHER,          *   FILE 093\n//*        PROVIDE POWERFUL TOOLS FOR SEQUENTIALIZATION OF          *   FILE 093\n//*        PARTITIONED DATASETS.                                    *   FILE 093\n//*                                                                 *   FILE 093\n//*  -------------------------------------------------------------  *   FILE 093\n//*                                                                 *   FILE 093\n//*  PDSLOAD update notes from Greg Price:  (see File 134 - REVIEW) *   FILE 093\n//*                                                                 *   FILE 093\n//*       PDSLOAD has now been further enhanced to handle any       *   FILE 093\n//*       LRECL for both fixed-length and variable-length           *   FILE 093\n//*       records.  The LRECL of the input sequential data set      *   FILE 093\n//*       can but need not match the LRECL of the output            *   FILE 093\n//*       partitioned data set.                                     *   FILE 093\n//*                                                                 *   FILE 093\n//*       When the output PDS has fixed-length records, the input   *   FILE 093\n//*       file may have fixed-length or variable-length records.    *   FILE 093\n//*       (Text files transferred from PCs often go to variable-    *   FILE 093\n//*       length record files on MVS.)                              *   FILE 093\n//*                                                                 *   FILE 093\n//*       When the output PDS has variable-length records, only     *   FILE 093\n//*       variable-length record input data is acceptable.          *   FILE 093\n//*                                                                 *   FILE 093\n//*       Undefined record format files cannot be used for input    *   FILE 093\n//*       or output.                                                *   FILE 093\n//*                                                                 *   FILE 093\n//*       The minimum input LRECL is 80.  The minimum output        *   FILE 093\n//*       LRECL is 1 (plus 4 for RDWs, if present).                 *   FILE 093\n//*                                                                 *   FILE 093\n//*       PARM=NEW is used to specify that, like IEBUPDTE, the      *   FILE 093\n//*       input control+data stream is to be loaded from SYSIN,     *   FILE 093\n//*       instead of SYSUT1.  In any event, if an OPEN for SYSUT1   *   FILE 093\n//*       does not open successfully (and no abend occurs) the      *   FILE 093\n//*       OPEN is retried with SYSIN as the DDname.                 *   FILE 093\n//*                                                                 *   FILE 093\n//*       PARM=SPF can still be used to generate ISPF               *   FILE 093\n//*       \"statistics\".  SSI information will be lost when this     *   FILE 093\n//*       is selected.  The \"userid\" of generated stats is          *   FILE 093\n//*       'PDSLOAD'.                                                *   FILE 093\n//*                                                                 *   FILE 093\n//*       John Kalinich's Y2K windowing fix allows for 2-digit      *   FILE 093\n//*       years below 66 to be deemed to belong to the 21st         *   FILE 093\n//*       century.  This is necessary because the PDSLOAD stats     *   FILE 093\n//*       format on the ./ ADD statement only allows for 2-digit    *   FILE 093\n//*       years.  (Generated stats did not have a Y2K bug.)         *   FILE 093\n//*                                                                 *   FILE 093\n//*       The SPF stats current record count will always be set     *   FILE 093\n//*       from the record count processed by PDSLOAD, even when     *   FILE 093\n//*       this differs from the data supplied on a ./ ADD card.     *   FILE 093\n//*       Other data will not be overridden.  Apart from the        *   FILE 093\n//*       userid, supplied stats are now verified to consist of     *   FILE 093\n//*       numeric characters.                                       *   FILE 093\n//*                                                                 *   FILE 093\n//*       The asterisk (*), question mark (?) and percent sign      *   FILE 093\n//*       (%) are now treated as generic character placeholders     *   FILE 093\n//*       for member selection.  The three mask characters          *   FILE 093\n//*       function identically, and cause a match for the           *   FILE 093\n//*       corresponding byte position of the member name.  Thus,    *   FILE 093\n//*       S(ABC****X) will select all members beginning with        *   FILE 093\n//*       'ABC' and ending in 'X' in the eighth byte, and S(****)   *   FILE 093\n//*       will select all members with names no longer than four    *   FILE 093\n//*       non-blank characters.                                     *   FILE 093\n//*                                                                 *   FILE 093\n//*       The IBM OS utility DDname override parameter can now be   *   FILE 093\n//*       used by PDSLOAD.  The SYSIN, SYSPRINT and SYSUT2          *   FILE 093\n//*       \"slots\" are relevant.  (This was done to facilitate       *   FILE 093\n//*       dynamic invocation from the REVIEW TSO command.)  See     *   FILE 093\n//*       the leading comments in the source code for more          *   FILE 093\n//*       information on DDname overrides.                          *   FILE 093\n//*                                                                 *   FILE 093\n//*       Parameter order is 'NEW,SPF,S(********),UPDTE(><)' for    *   FILE 093\n//*       example.  Unwanted options can be omitted, but the        *   FILE 093\n//*       order is fixed.                                           *   FILE 093\n//*                                                                 *   FILE 093\n//*    Greg Price    20 April, 1999                                 *   FILE 093\n//*                                                                 *   FILE 093\n//*    Note from Sam Golob    03 April, 2012                        *   FILE 093\n//*                                                                 *   FILE 093\n//*     Greg Price and Gerhard Postpischil have the same initials.  *   FILE 093\n//*     Therefore, Greg refers to this \"update team\" as TEAM-GP.    *   FILE 093\n//*                                                                 *   FILE 093\n//*     One issue dealt with in PDSLOAD is that it checks           *   FILE 093\n//*     member names for \"validity\" before it loads a new pds       *   FILE 093\n//*     member with that name.  I took a vote among two people:     *   FILE 093\n//*     Greg Price said to eliminate the validity check for         *   FILE 093\n//*     member names altogether.  Gerhard Postpischil said to       *   FILE 093\n//*     keep it in.  Gerhard was willing to put his money where     *   FILE 093\n//*     his mouth is, so he programmed a new version of PDSLOAD,    *   FILE 093\n//*     now presented as member PDSLOADW.                           *   FILE 093\n//*                                                                 *   FILE 093\n//*     Gerhard's new version has options.  Default is to           *   FILE 093\n//*     eliminate the validity check.  Two other options are to     *   FILE 093\n//*     either check the name in a limited manner, or check the     *   FILE 093\n//*     name in a stricter manner.                                  *   FILE 093\n//*                                                                 *   FILE 093\n//*        PARM='NAME=ASIS'   BYPASS ALL CHECKS  (default)          *   FILE 093\n//*             'NAME=CHECK'  ALLOW ALL PRINTABLE CHARACTERS        *   FILE 093\n//*                           (EXCEPT COMMA) USING CODEPAGE 037     *   FILE 093\n//*             'NAME=IBM'    ENFORCE STRICT IBM JCL STANDARDS      *   FILE 093\n//*                                                                 *   FILE 093\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMVCL": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "FILE093"}, "text": "//ASMVCL  PROC MAC='SYS1.MACLIB',MAC1='SYS1.AMODGEN',\n//        MEMBER=\n//*\n//* DOC: THIS PROCEDURE EXECUTES THE ASSEMBLER AND THE LINKAGE EDITOR.\n//*\n//ASM     EXEC PGM=IEV90,PARM=OBJ,REGION=2048K\n//SYSLIB   DD  DSN=&MAC,DISP=SHR\n//         DD  DSN=&MAC1,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=3380,SPACE=(1700,(600,600))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=3380,SPACE=(1700,(300,300))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=3380,SPACE=(1700,(300,300))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&OBJSET,SPACE=(3120,(40,40),,,ROUND),UNIT=DISK,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3120,LRECL=80,RECFM=FBS,BUFNO=1)\n//SYSIN    DD  DSN=&&TEMP(&MEMBER),DISP=(OLD,PASS)\n//*\n//LKED    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),REGION=728K,\n//             COND=(4,LT,ASM)\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLMOD  DD  SPACE=(CYL,(1,1,1)),DSN=&LOD(X),DISP=(,PASS),\n//             UNIT=DISK,DCB=BUFNO=1\n//*YSLMOD  DD  DSN=&&GOSET(GO),UNIT=3380,SPACE=(1024,(300,90,1)),\n//*            DISP=(MOD,PASS)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=3380,SPACE=(1024,(300,90))\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS),DCB=BLKSIZE=3120\n//         DD  DDNAME=SYSIN\n//******************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAPS": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x008\\x008\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n         CAPS\n.**********************************************************************\n.*       THIS MACRO INCLUDED IN THE DEFINE CONSTANT ARE OF A          *\n.*       PROGRAM ALLOWS THE TRANSLATION OF LOWERCASE CHARACTERS       *\n.*       TO UPPERCASE CHARACTERS. CAPS IS USED AS THE SECOND OPERAND  *\n.*       OF THE TRANSLATE (TR) INSTRUCTION. THUS TO TRANSLATE         *\n.*       THE DATA AREA CALLED 'FIELD' CODE:                           *\n.*                 TR    FIELD,CAPS                                   *\n.*       THE MACRO CODED IS                                           *\n.*                 CAPS                                               *\n.*       NOTE: THE MACRO GENERATES ITS OWN CONSTANT NAME OF'CAPS'.    *\n.**********************************************************************\nCAPS     DC CL256' '         TRANSLATE TABLE TO MAKE CAPITALS\n         ORG CAPS+C'A'\n         DC C'ABCDEFGHI'\n         ORG CAPS+129        SMALL A\n         DC C'ABCDEFGHI'\n         ORG CAPS+C'J'\n         DC C'JKLMNOPQR'\n         ORG CAPS+145        SMALL J\n         DC C'JKLMNOPQR'\n         ORG CAPS+C'S'\n         DC C'STUVWXYZ'\n         ORG CAPS+162        SMALL S\n         DC C'STUVWXYZ'\n         ORG CAPS+C'0'\n         DC C'0123456789'\n         ORG CAPS+C'#'\n         DC C'#'\n         ORG CAPS+C'$'\n         DC C'$'\n         ORG CAPS+C'*'\n         DC C'*'\n         ORG CAPS+C'/'\n         DC C'/'\n         ORG CAPS+C'('\n         DC C'('\n         ORG CAPS+C')'\n         DC C')'\n         ORG CAPS+C'.'\n         DC C'.'\n         ORG CAPS+C','\n         DC C','\n         ORG CAPS+C'+'\n         DC C'+'\n         ORG CAPS+C'-'\n         DC C'-'\n         ORG CAPS+C'='\n         DC C'='\n         ORG CAPS+C''''\n         DC C''''\n         ORG CAPS+C'&&'\n         DC C'&&'\n         ORG\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMMENT": {"ttr": 2830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&NAME    COMMENT  &COM\n.**********************************************************************\n.*  WRITE A COMMENT TO THE  //MSG DD SYSOUT=A  DATASET.               *\n.*            THIS MACRO PERMITS COMMENTS TO BE WRITTEN TO THE        *\n.*       //MSG (SYSOUT) DATASET INTERSPERSED WITH THE OUTPUT (IF ANY) *\n.*       FROM \"MSG\" MACROS. IF NO FORMATTING SERVICES ARE REQUIRED,   *\n.*       THIS MACRO SHOULD BE USED IN PLACE OF THE \"MSG\" MACRO        *\n.*       BECAUSE IT ENTAILS MINIMAL OVERHEAD. REGISTERS 0, 1, 14,     *\n.*       AND 15 ARE USED BY THE MACRO AND ARE NOT RESTORED.           *\n.*        -NAME-   COMMENT '  ANY COMMENT UP TO 132 BYTES IN LENGTH'  *\n.*       NOTES:                                                       *\n.*       1. APOSTROPHIES ARE THE DELIMITERS OF THE COMMENT, WHICH     *\n.*          MAY CONTAIN A PRINTABLE CHARACTER. APOSTROPHIES AND       *\n.*          AMPERSANDS (&) INSIDE THE COMMENT MUST BE DOUBLED.        *\n.*       2. THE COMMENT MACRO WRITES BY CALLING THE SFI SUBROUTINE    *\n.*          \"MSGWRITE\".                                               *\n.**********************************************************************\n         LCLA &BLK,&REC\n         AIF ('&COM' EQ '').END\n&REC     SETA  3+K'&COM      RECORD LENGTH\n&BLK     SETA  4+&REC        BLOCK LENGTH\n&NAME    L 15,=V(MSGWRITE)   REG 15 = ENTRY POINT OF MSGWRITE ROUTINE\n         CNOP 0,4\n         BAL 1,COMM&SYSNDX   REG 1 = MESSAGE ADDRESS\n         DC H'&BLK,0,&REC,0',C'0',C&COM     MESSAGE\nCOMM&SYSNDX BALR 14,15       LINK TO MSGWRITE ROUTINE.\n.END     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CONVERT": {"ttr": 2832, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x002\\x002\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 50, "newlines": 50, "modlines": 0, "user": "FILE093"}, "text": "         MACRO                                                          0000000\n&NAME    CONVERT &EVENREG,&DIGITS,&DBLWD,&TYPE=DEC                      0000000\n.*                                                                      0000000\n.*  THIS MACRO WILL PERFORM HEX TO HEX CHARACTER OR DECIMAL             0000000\n.*  CHARACTER CONVERSIONS.  IT USES AN EVEN-ODD PAIR OF REGS            0000000\n.*  AND A DOUBLE WORD OF STORAGE TO DO ITS CALCULATIONS.                0000000\n.*                                                                      0000000\n         GBLC  &CONV                                                    0000000\n         GBLC  &P                                                       0000000\n         LCLA  &N                                                       0000000\n         LCLA  &ODDREG                                                  0000000\n         LCLA  &LCLDIGS                                                 0000000\n&N       SETA  0                                                        0000000\n&ODDREG  SETA  &EVENREG+1                                               0000000\n&LCLDIGS SETA  &DIGITS                                                  0000000\n         AIF   (T'&EVENREG NE 'N').ERR1                                 0000000\n         AIF   (T'&DIGITS NE 'N').ERR2                                  0000000\n         AIF   ('&NAME' EQ '').NONAME                                   0000000\n&NAME    EQU   *                                                        0000000\n.NONAME  ANOP                                                           0000000\n         AIF   ('&TYPE' NE 'DEC').NODEC                                 0000000\n         AIF   (&DIGITS GT 5).ERR4                                      0000000\n         CVD   &EVENREG,&DBLWD                                          0000000\n         UNPK  &DBLWD.(&DIGITS.),&DBLWD+5(3)                            0000000\n         OI    &DBLWD+&DIGITS-1,X'F0'                                   0000000\n         MEXIT                                                          0000000\n.NODEC   ANOP                                                           0000000\n         AIF   (&DIGITS GT 4).ERR3                                      0000000\n&CONV    SETC  'YES'   SO CPDATA KNOWS A HEX CONVERT WAS ISSUED         0000000\n         AIF   (&LCLDIGS EQ 0).DONE                                     0000000\n         SRDL  &EVENREG,4                                               0000000\n         SRL   &ODDREG,4                                                0000000\n&LCLDIGS SETA  &LCLDIGS-1                                               0000000\n         AGOB  .NODEC                                                   0000000\n.DONE    ANOP                                                           0000000\n         ST    &ODDREG,&DBLWD                                           0000000\n         TR    &DBLWD.(&DIGITS.),&P.CHARS                               0000000\n         MEXIT                                                          0000000\n.ERR1    ANOP                                                           0000000\n         MNOTE 8,'FIRST OPERAND NOT NUMERIC'                            0000000\n         MEXIT                                                          0000000\n.ERR2    ANOP                                                           0000000\n         MNOTE 8,'SECOND OPERAND NOT NUMERIC'                           0000000\n         MEXIT                                                          0000000\n.ERR3    ANOP                                                           0000000\n         MNOTE 8,'SECOND OPERAND > 4 ON HEX CONVERT'                    0000000\n         MEXIT                                                          0000000\n.ERR4    ANOP                                                           0000000\n         MNOTE 8,'SECOND OPERAND > 5 ON DEC CONVERT'                    0000000\n         MEND                                                           0000000\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPDATA": {"ttr": 2834, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00a\\x00a\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 97, "newlines": 97, "modlines": 0, "user": "FILE093"}, "text": "         MACRO                                                          0000000\n         CPDATA &LIST=YES                                               0000000\n         GBLC  &GIOPL                                                   0000000\n         GBLC  &DAIRFL                                                  0000000\n         GBLC  &GPCL                                                    0000000\n         GBLC  &GDYN                                                    0000000\n         GBLC  &P                                                       0000000\n         GBLC  &GNRLF                                                   0000000\n         GBLC  &CONV                                                    0000000\n         PUSH  PRINT                                                    0000000\n         PRINT GEN                                                      0000000\n         AIF   ('&CONV' EQ '').NOCONV                                   0000000\n&P.CHARS DC    C'0123456789ABCDEF'                                      0000000\n.NOCONV  ANOP                                                           0000000\n         AIF   ('&GPCL' EQ 'NONE').NOPCLDC                              0000000\n&P.PCLAD DC    A(&GPCL)                                                 0000000\n.NOPCLDC ANOP                                                           0000000\n&P.DATA  DSECT ,              DYNAMIC STORAGE AREA                      0000000\n&P.SAVE  DS    18F            SAVE AREA                                 0000000\n&P.ECB   DS    F              COMMAND PROCESSOR ECB                     0000000\n         AIF   ('&LIST' EQ 'YES').LST1                                  0000000\n         PRINT NOGEN                                                    0000000\n.LST1    ANOP                                                           0000000\n         IKJCPPL                                                        0000000\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT                     0000000\n         AIF   ('&GIOPL' EQ 'NO').NOIOPL                                0000000\n         IKJIOPL                                                        0000000\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT                     0000000\n         PRINT GEN                                                      0000000\n&P.IOPL  DS    4A             INPUT/OUTPUT PARAM LIST                   0000000\n.NOIOPL  ANOP                                                           0000000\n         AIF   ('&GPCL' EQ 'NONE').NOPCL                                0000000\n         AIF   ('&LIST' EQ 'NO').NLST2                                  0000000\n         PRINT GEN                                                      0000000\n         AGO   .LST2                                                    0000000\n.NLST2  ANOP                                                            0000000\n         PRINT NOGEN                                                    0000000\n.LST2    ANOP                                                           0000000\n         IKJPPL                                                         0000000\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT                     0000000\n         PRINT GEN                                                      0000000\n&P.PPL   DS    7A             PARSE PARAM LIST                          0000000\n&P.ANS   DS    F              POINTER TO PDL (ANSWER PLACE)             0000000\n.NOPCL   ANOP                                                           0000000\n         AIF   ('&GDYN' EQ 'NO').NODYN                                  0000000\n         AIF   ('&LIST' EQ 'NO').NLST3                                  0000000\n         PRINT GEN                                                      0000000\n         AGO   .LST3                                                    0000000\n.NLST3  ANOP                                                            0000000\n         PRINT NOGEN                                                    0000000\n.LST3    ANOP                                                           0000000\n         IEFZB4D0                                                       0000000\n         IEFZB4D2                                                       0000000\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT                     0000000\n         PRINT GEN                                                      0000000\n&P.RBPTR DS    F              DYN ALLOC RB POINTER                      0000000\n&P.RB    DS    5F             DYN ALLOC REQUEST BLOCK                   0000000\n.NODYN   ANOP                                                           0000000\n         AIF   ('&GNRLF' EQ '').NOGNRLF                                 0000000\n         AIF   ('&LIST' EQ 'NO').NLST4                                  0000000\n         PRINT GEN                                                      0000000\n         AGO   .LST4                                                    0000000\n.NLST4   ANOP                                                           0000000\n         PRINT NOGEN                                                    0000000\n.LST4    ANOP                                                           0000000\n         IKJEFFGF GFDSECT=YES                                           0000000\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT                     0000000\n         PRINT GEN                                                      0000000\n&P.GNRLF DS    F              PTR TO GNRLFAIL CONTROL BLOCK             0000000\n         DS    3F             GNRLFAIL CONTROL BLOCK                    0000000\n         DS    H                                                        0000000\n         DS    2X                                                       0000000\n         DS    2F                                                       0000000\n         DS    2H                                                       0000000\n         DS    4F                                                       0000000\n.NOGNRLF ANOP                                                           0000000\n         AIF   ('&DAIRFL' EQ '').NODF                                   0000000\n         AIF   ('&LIST' EQ 'NO').NLST5                                  0000000\n         PRINT GEN                                                      0000000\n         AGO   .LST5                                                    0000000\n.NLST5   ANOP                                                           0000000\n         PRINT NOGEN                                                    0000000\n.LST5    ANOP                                                           0000000\n         IKJEFFDF DFDSECT=YES                                           0000000\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT                     0000000\n         PRINT GEN                                                      0000000\n&P.DFPL  DS    5A             DAIRFAIL PARAMETER LIST                   0000000\n&P.DFRC  DS    F              SERVICE ROUTINE RETURN CODE               0000000\n&P.DFID  DS    H              DAIRFAIL ID                               0000000\n&P.FO2PT DS    F              DAIRFAIL IKJEFF02 POINTER                 0000000\n.NODF    ANOP                                                           0000000\n         MNOTE *,'       CVT    DSECT=YES,LIST=NO'                      0000000\n         PRINT NOGEN                                                    0000000\n         CVT   DSECT=YES,LIST=NO                                        0000000\n         POP   PRINT                                                    0000000\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT                     0000000\n         MEND                                                           0000000\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPEND": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE093"}, "text": "         MACRO                                                          0000000\n         CPEND                                                          0000000\n         GBLC  &P                                                       0000000\n&P.LEN   EQU   *-&P.DATA                                                0000000\n         MEND                                                           0000000\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPENTRY": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&L       CPENTRY   &ID=*,&STORAGE=@STORAGE,&SIZE=@SIZE,&SPN=,          +\n               &PLBASE=R9,&PL=CPPL\n.* GENE CZARCINSKI,  19MAY73\n&L       START     0\n         REGS\n         SAVE      (14,12),,&ID\n         LR        R12,R15             INIT PGM BASE REG\n         USING     &L,R12\n         LR        &PLBASE,R1          INIT PARM LIST BASE REG\n         USING     &PL,&PLBASE\n         GETMAIN   R,LV=72+&SIZE,SP=&SPN\n         ST        R13,4(R1)           INIT/LINK SAVE AREAS\n         ST        R1,8(R13)\n         LR        R13,R1\n         LA        R11,72(R1)          INIT STORAGE BASE REG\n         USING     &STORAGE,R11\n         MEND      CPENTRY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPEXIT": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\n\\x00\\n\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&L       CPEXIT    &SIZE=@SIZE,&RC=0,&SPN=\n.* GENE CZARCINSKI,  19MAY73\n** EXIT FROM A COMMAND PROCESSOR MODULE\n&L       LR        R1,R13              A(GOTTEN CORE)\n         L         R13,4(R13)          RESTORE OLD SAVEAREA PNTR\n         FREEMAIN  R,LV=72+&SIZE,A=(1),SP=&SPN\n         LA        R15,&RC             LOAD RC INTO REG 15\n         RETURN    (14,12),T,RC=(15)\n         MEND      CPEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPINIT": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00I\\x00I\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "FILE093"}, "text": "         MACRO                                                          0000000\n&NAME    CPINIT &IOPL=NO,&PCL=NONE,&DYN=NO,&PREFIX=IPG                  0000000\n         GBLC  &GIOPL                                                   0000000\n         GBLC  &GPCL                                                    0000000\n         GBLC  &GDYN                                                    0000000\n         GBLC  &P                                                       0000000\n         LCLA  &A                                                       0000000\n.*   CHECK THE VALIDITY OF THE PREFIX (MUST BE <= 3 CHARS)              0000000\n         AIF   (K'&PREFIX LE 3).PFXOK                                   0000000\n         MNOTE 8,'PREFIX > 3 CHARS, SHORTENED'                          0000000\n&P       SETC  '&PREFIX'(1,3)                                           0000000\n         AGO   .PFXEND                                                  0000000\n.PFXOK   ANOP                                                           0000000\n&P       SETC  '&PREFIX'                                                0000000\n.PFXEND  ANOP                                                           0000000\n&GIOPL   SETC  '&IOPL'                                                  0000000\n&GPCL    SETC  '&PCL'                                                   0000000\n&GDYN    SETC  '&DYN'                                                   0000000\n&NAME    CSECT                                                          0000000\n.*   GENERATE REG EQUATES                                               0000000\n&A       SETA  0                                                        0000000\n.LOOP    ANOP                                                           0000000\nR&A      EQU   &A                                                       0000000\n&A       SETA  &A+1                                                     0000000\n         AIF   (&A LT 16).LOOP                                          0000000\n.*   GENERATE THE INITIALIZATION CODE                                   0000000\n         MNOTE *,'       SAVE  (14,12),,*'                              0000000\n         SAVE  (14,12),,*                                               0000000\n         LR    R10,R15        INITIALIZE BASE REG                       0000000\n         USING &NAME,R10      ESTABLISH ADDRESSIBILITY                  0000000\n         MNOTE *,'       GETMAIN R,LV=&P.LEN,SP=0'                      0000000\n         GETMAIN R,LV=&P.LEN,SP=0                                       0000000\n         ST    R13,4(R1)     SAVE THE BACK CHAIN                        0000000\n         ST    R1,8(R13)                                                0000000\n         LR    R13,R1         R13 => DYNAMIC STORAGE                    0000000\n         USING &P.DATA,R13                                              0000000\n******************************************                              0000000\n*  INITIALIZE THE CONTROL BLOCKS         *                              0000000\n******************************************                              0000000\n         L     R1,4(R13)                                                0000000\n         L     R1,24(R1)      R1 => CPPL                                0000000\n         USING CPPL,R1                                                  0000000\n         AIF   ('&IOPL' EQ 'NO').NOIOPL                                 0000000\n*  FILL IN THE UPT, ECT, AND ECB FIELDS OF THE IOPL                     0000000\n.*   AND LEAVE THE POINTER TO THE PARM BLOCK EMPTY                      0000000\n         MVC   &P.IOPL+(IOPLUPT-IOPL)(4),CPPLUPT                        0000000\n         MVC   &P.IOPL+(IOPLECT-IOPL)(4),CPPLECT                        0000000\n         XC    &P.ECB(4),&P.ECB   ZERO THE ECB                          0000000\n         LA    R2,&P.ECB                                                0000000\n         ST    R2,&P.IOPL+(IOPLECB-IOPL)                                0000000\n.NOIOPL  ANOP                                                           0000000\n         AIF   ('&PCL' EQ 'NONE').NOPCL                                 0000000\n*  FILL IN ALL THE FIELDS OF THE PARSE PARAMETER LIST (PPL)             0000000\n         MVC   &P.PPL+(PPLUPT-PPL)(4),CPPLUPT                           0000000\n         MVC   &P.PPL+(PPLECT-PPL)(4),CPPLECT                           0000000\n         LA    R2,&P.ECB                                                0000000\n         ST    R2,&P.PPL+(PPLECB-PPL)                                   0000000\n         L     R2,&P.PCLAD                                              0000000\n         ST    R2,&P.PPL+(PPLPCL-PPL)                                   0000000\n         LA    R2,&P.ANS                                                0000000\n         ST    R2,&P.PPL+(PPLANS-PPL)                                   0000000\n         MVC   &P.PPL+(PPLCBUF-PPL),CPPLCBUF                            0000000\n         XC    &P.PPL+(PPLUWA-PPL),&P.PPL+(PPLUWA-PPL)                  0000000\n.NOPCL   ANOP                                                           0000000\n         AIF   ('&DYN' EQ 'NO').NODYN                                   0000000\n*  FILL IN THE DYNAMIC ALLOCATION REQUEST BLOCK POINTER                 0000000\n         LA    R2,&P.RB                                                 0000000\n         ST    R2,&P.RBPTR                                              0000000\n         OI    &P.RBPTR,S99RBPND                                        0000000\n.NODYN   ANOP                                                           0000000\n         DROP  R1                                                       0000000\n         EJECT                                                          0000000\n         MEND                                                           0000000\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVDT": {"ttr": 3084, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&L       CVDT  &O\n.*\n&L       XR    R15,R15\n         IC    R15,DS1&O\n         CVD   R15,DWD\n         ICM   R14,B'0011',DWD+L'DWD-2\n         ICM   R15,B'0011',DS1&O+1\n         CVD   R15,DWD\n         SRL   R14,4\n         STC   R14,DWD+5\n         ED    FMT&O,DWD+5\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVRT": {"ttr": 3086, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&L       CVRT  &O,&ADD=0,&OFFSET=0\n.*\n&L       XR    R15,R15\n         LA    R1,1\n         SLA   R1,(L'DS1&O-&OFFSET)\n         BCTR  R1,0\n         EX    R1,*+L'*+4\n         B     *+L'*+4\n         ICM   R15,*-*,DS1&O+&OFFSET\n.*\n         AIF   (&ADD EQ 0).CVD\n.*\n         LA    R15,&ADD.(R15)\n.*\n.CVD     ANOP\n.*\n         CVD   R15,DWD\n         ED    FMT&O,DWD+8-((L'FMT&O+1)/2)\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DA08BLD": {"ttr": 3088, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00>\\x00>\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&L     DA08BLD &DSN,&VOLID,&DISP=(SHR,KEEP,KEEP)\n.*\n.*   DAO8BLD IS USED TO COMPLETE A CODE 08 DAPB FROM PDE'S\n.*   RETURNED FROM IKJPARS FOR DSNAME, VOLUME SERIAL, AND\n.*   ALLOCATION DATA (NOT YET SUPPORTED).\n.*   DA08BLD ASSUMES THE ADDRESSABILITY OF THE DAPB VIA THE\n.*   FIELD NAMES DEFINED BY THE IKJDAP08 MACRO.\n.*\n*\n&L       L     R1,&DSN+0\n         L     R15,DA08PDSN\n         LH    R14,&DSN+4\n         STH   R14,0(R15)\n         BCTR  R14,0\n         EX    R14,*+L'*+4\n         B     *+L'*+6\n         MVC   2(*-*,R15),0(R1)\n         NI    DA08CTL,X'FF'-DA08UID\n         TM    &DSN+6,B'01000000'\n         BNZ   *+L'*+4\n         OI    DA08CTL,DA08UID\n         SPACE\n         TM    &DSN+14,B'10000000'\n         BZ    *+L'*+4+4+2+4+4+6\n         LH    R14,&DSN+12\n         L     R1,&DSN+8\n         BCTR  R14,0\n         EX    R14,*+L'*+4\n         B     *+L'*+6\n         MVC   DA08MNM(*-*),0(R1)\n         SPACE\n         TM    &DSN+22,B'10000000'\n         BZ    *+L'*+4+4+2+4+4+6\n         LH    R14,&DSN+20\n         L     R1,&DSN+16\n         BCTR  R14,0\n         EX    R14,*+L'*+4\n         B     *+L'*+6\n         MVC   DA08PSWD(*-*),0(R1)\n         SPACE\n         MVI   DA08DSP1,DA08&DISP(1)\n         MVI   DA08DPS2,DA08&DISP(2)\n         MVI   DA08DPS3,DA08&DISP(3)\n         SPACE\n.VOLID   AIF   (T'&VOLID EQ 'O').NEW\n.*\n         TM    &VOLID+6,B'10000000'\n         BZ    *+L'*+4+4+4+4+2+4+4+6\n         L     R1,&VOLID+0\n         LH    R14,&VOLID+4\n         CLI   0(R1),C'*'\n         BE    *+L'*+2+4+4+6\n         BCTR  R14,0\n         EX    R14,*+L'*+4\n         B     *+L'*+6\n         MVC   DA08SER(*-*),0(R1)\n         SPACE\n.*\n.NEW     AIF   (('&DISP(1)' NE 'NEW') AND ('&DISP(1)' NE 'MOD')).END\n.*       MNOTE 4,'DA08BLD - DISP=NEW NOT YET SUPPORTED'\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCS": {"ttr": 3090, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\xfd\\x00\\xfd\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 253, "newlines": 253, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&NAME    DCS\n.**********************************************************************\n.*                                                                    *\n.*        DCS  -  DEFINE CONSTANT FOR SCREEN                          *\n.*                                                                    *\n.*        WRITTEN BY BILL GODFREY                                     *\n.*        PRC COMPUTER CENTER INC, MCLEAN VA 22101                    *\n.*        DATE WRITTEN. JANUARY 8 1981.                               *\n.*        DATE UPDATED. APRIL 24 1981.  T(49) = F0                    *\n.*                                                                    *\n.*        THIS MACRO IS USED FOR CODING A FULLSCREEN 3270 DISPLAY.    *\n.*                                                                    *\n.*        SAMPLE                                                      *\n.*           DCS    AL1(WCC),SBA,1,1,RTA,7,1,X'00',IC                 *\n.*                                                                    *\n.*        IT SIMPLIFIES THE CODING OF A SCREEN IN THE FOLLOWING WAYS. *\n.*        .  BUFFER ADDRESSES ARE SPECIFIED AS ROW AND COLUMN NUM-    *\n.*           BER.  THE MACRO TRANSLATES THEM INTO THE 3270 CODE.      *\n.*        .  ORDERS ARE SPECIFIED BY NAME, SUCH AS 'SBA' AND 'SF',    *\n.*           SO YOU DONT HAVE TO KNOW THE HEX CODES FOR THEM,         *\n.*        .  COMMONLY USED ATTRIBUTE BYTES ARE SPECIFIED BY NAME      *\n.*           (A SET OF RESERVED NAMES) SO YOU DONT HAVE TO KNOW       *\n.*           THE HEX CODES FOR THEM.                                  *\n.*        .  IT SAVES A LOT OF DOCUMENTATION WORK, AND MAKES          *\n.*           THE CODE EASIER FOR OTHERS TO UNDERSTAND.                *\n.*                                                                    *\n.*        THE USER OF THE MACRO MUST STILL UNDERSTAND HOW A SCREEN    *\n.*        IS CONSTRUCTED BEFORE USING IT. THE MACRO MERELY MAKES IT   *\n.*        EASIER TO SPECIFY THE VALUES.  IT DOES VERY LITTLE ERROR    *\n.*        CHECKING.  FOR INSTANCE, IT DOES NOT CHECK TO SEE IF        *\n.*        YOU FOLLOW AN 'SBA' WITH A BUFFER ADDRESS.  IT IS POSSIBLE  *\n.*        TO CODE A THOROUGHLY INVALID SCREEN.                        *\n.*                                                                    *\n.*        THE MACRO MAY HAVE ANY NUMBER OF OPERANDS, CONSISTING OF    *\n.*        ANY COMBINATION OF THE FOLLOWING.                           *\n.*                                                                    *\n.*        .  AN ORDER.                                                *\n.*           VALID ORDERS ARE: SBA, SF, RTA, IC, PT, EUA.             *\n.*        .  A BUFFER ADDRESS.                                        *\n.*           IF AN OPERAND IS NUMERIC, IT IS ASSUMED TO BE            *\n.*           A ROW OR COLUMN NUMBER.  IT TAKES 2 OPERANDS TO          *\n.*           SPECIFY THE BUFFER ADDRESS,  THEREFORE NUMERIC           *\n.*           OPERANDS MUST ALWAYS BE SPECIFIED IN PAIRS, THE          *\n.*           FIRST BEING THE ROW AND THE SECOND BEING THE COLUMN.     *\n.*        .  AN ATTRIBUTE BYTE.                                       *\n.*           VALID ATTRIBUTE BYTES ARE:                               *\n.*           UNPLO -  UNPROTECTED NORMAL INTENSITY                    *\n.*           UNPHI  - UNPROTECTED HIGH INTENSITY                      *\n.*           UNPNP  - UNPROTECTED NO-DISPLAY                          *\n.*           PROLO  - PROTECTED NORMAL INTENSITY                      *\n.*           PROLOS - PROTECTED NORMAL INTENSITY AUTO-SKIP            *\n.*           PROHI  - PROTECTED HIGH INTENSITY                        *\n.*           PROHIS - PROTECTED HIGH INTENSITY AUTO-SKIP              *\n.*        .  A HEX, CHARACTER, OR ADDRESS CONSTANT.                   *\n.*           FOR EXAMPLE, X'00', OR C'ENTER SIGNON'                   *\n.*           THIS CAN BE USED FOR DATA WITHIN FIELDS OR FOR           *\n.*           ATTRIBUTE BYTES, ORDERS, THE 'WCC', OR BUFFER            *\n.*           ADDRESSES (IF YOU WANT TO FIGURE THEM OUT).              *\n.*                                                                    *\n.*        IF THE OPERANDS DO NOT ALL FIT ON ONE LINE, YOU CAN         *\n.*        EITHER CONTINUE THE LINE IN THE STANDARD ASSEMBLER WAY      *\n.*        OR CODE THE MACRO AGAIN ON THE NEXT LINE WITH THE           *\n.*        REMAINING OPERANDS.  THE RESULT IS THE SAME EITHER WAY.     *\n.*                                                                    *\n.*        THE BUFFER ADDRESS CONVERSIONS ARE FOR A                    *\n.*        SCREEN SIZE OF 24 ROWS BY 80 COLUMNS. FOR SCREENS           *\n.*        OF OTHER DIMENSIONS (43 BY 80, 12 BY 40) THE MACRO          *\n.*        NEEDS ONLY A FEW CHANGES.                                   *\n.*                                                                    *\n.*        WARNING: IF YOU CODE THE MACRO WITH A LABEL IN COLUMN 1,    *\n.*        AND YOU LIKE USING LENGTH ATTRIBUTES, BEWARE THAT THE       *\n.*        LENGTH ATTRIBUTE OF THE LABEL IS NOT NECESSARILY THE        *\n.*        TOTAL LENGTH OF THE DATA GENERATED BY THE MACRO.            *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &R,&C,&P,&Q\n         LCLA  &AN,&AS,&AL\n         LCLB  &B,&NUMERIC\n         LCLC  &T(64)\n         LCLC  &N,&ROW,&COL\n         LCLC  &CS,&STRING\n&T(1)    SETC  '40'\n&T(2)    SETC  'C1'\n&T(3)    SETC  'C2'\n&T(4)    SETC  'C3'\n&T(5)    SETC  'C4'\n&T(6)    SETC  'C5'\n&T(7)    SETC  'C6'\n&T(8)    SETC  'C7'\n&T(9)    SETC  'C8'\n&T(10)   SETC  'C9'\n&T(11)   SETC  '4A'\n&T(12)   SETC  '4B'\n&T(13)   SETC  '4C'\n&T(14)   SETC  '4D'\n&T(15)   SETC  '4E'\n&T(16)   SETC  '4F'\n.*\n&T(17)   SETC  '50'\n&T(18)   SETC  'D1'\n&T(19)   SETC  'D2'\n&T(20)   SETC  'D3'\n&T(21)   SETC  'D4'\n&T(22)   SETC  'D5'\n&T(23)   SETC  'D6'\n&T(24)   SETC  'D7'\n&T(25)   SETC  'D8'\n&T(26)   SETC  'D9'\n&T(27)   SETC  '5A'\n&T(28)   SETC  '5B'\n&T(29)   SETC  '5C'\n&T(30)   SETC  '5D'\n&T(31)   SETC  '5E'\n&T(32)   SETC  '5F'\n.*\n&T(33)   SETC  '60'\n&T(34)   SETC  '61'\n&T(35)   SETC  'E2'\n&T(36)   SETC  'E3'\n&T(37)   SETC  'E4'\n&T(38)   SETC  'E5'\n&T(39)   SETC  'E6'\n&T(40)   SETC  'E7'\n&T(41)   SETC  'E8'\n&T(42)   SETC  'E9'\n&T(43)   SETC  '6A'\n&T(44)   SETC  '6B'\n&T(45)   SETC  '6C'\n&T(46)   SETC  '6D'\n&T(47)   SETC  '6E'\n&T(48)   SETC  '6F'\n.*\n&T(49)   SETC  'F0'\n&T(50)   SETC  'F1'\n&T(51)   SETC  'F2'\n&T(52)   SETC  'F3'\n&T(53)   SETC  'F4'\n&T(54)   SETC  'F5'\n&T(55)   SETC  'F6'\n&T(56)   SETC  'F7'\n&T(57)   SETC  'F8'\n&T(58)   SETC  'F9'\n&T(59)   SETC  '7A'\n&T(60)   SETC  '7B'\n&T(61)   SETC  '7C'\n&T(62)   SETC  '7D'\n&T(63)   SETC  '7E'\n&T(64)   SETC  '7F'\n.*\n&N       SETC  '&NAME'\n&AN      SETA  N'&SYSLIST          NUMBER OF OPERANDS\n&AS      SETA  0\n&B       SETB  0 FALSE\n.EACH    AIF   (&AN EQ 0).EPILOG\n&AS      SETA  &AS+1\n&CS      SETC  '&AS'\n&AL      SETA  K'&SYSLIST(&AS)\n         AIF   (T'&SYSLIST(&AS) EQ 'O').NEXT\n&NUMERIC SETB  (T'&SYSLIST(&AS) EQ 'N')\n         AIF   (&NUMERIC AND '&SYSLIST(&AS)'(1,1) GE '0').ROWCOL\n         AIF   (NOT &B).ROWCOLX\n         MNOTE 4,'             &CS.) MISSING COLUMN NUMBER'\n&B       SETB  0 FALSE\n.ROWCOLX ANOP\n&STRING  SETC  '&SYSLIST(&AS)'\n.*             ORDERS\n         AIF   ('&STRING' EQ 'SBA').SBA\n         AIF   ('&STRING' EQ 'SF').SF\n         AIF   ('&STRING' EQ 'RTA').RTA\n         AIF   ('&STRING' EQ 'IC').IC\n         AIF   ('&STRING' EQ 'PT').PT\n         AIF   ('&STRING' EQ 'EUA').EUA\n.*             ATTRIBUTES\n         AIF   ('&STRING' EQ 'UNPLO').UNPLO\n         AIF   ('&STRING' EQ 'UNPHI').UNPHI\n         AIF   ('&STRING' EQ 'UNPNP').UNPNP\n         AIF   ('&STRING' EQ 'PROLO').PROLO\n         AIF   ('&STRING' EQ 'PROLOS').PROLOS\n         AIF   ('&STRING' EQ 'PROHI').PROHI\n         AIF   ('&STRING' EQ 'PROHIS').PROHIS\n.*             CONSTANTS\n.*             IF THE OPERAND IS NONE OF THE ABOVE, IT IS\n.*             PRESUMED TO BE ANY VALID 'DC' CONSTANT.\n.DC      ANOP\n&N       DC    &STRING\n         AGO   .NEXT\n.SBA     ANOP\n&N       DC    X'11'               SET BUFFER ADDRESS\n         AGO   .NEXT\n.SF      ANOP\n&N       DC    X'1D'               START FIELD\n         AGO   .NEXT\n.RTA     ANOP\n&N       DC    X'3C'               REPEAT TO ADDRESS\n         AGO   .NEXT\n.IC      ANOP\n&N       DC    X'13'               INSERT CURSOR\n         AGO   .NEXT\n.PT      ANOP\n&N       DC    X'05'               PROGRAM TAB\n         AGO   .NEXT\n.EUA     ANOP\n&N       DC    X'12'               ERASE UNPROTECTED TO ADDRESS\n         AGO   .NEXT\n.UNPLO   ANOP\n&N       DC    X'40'               UNPROTECTED NORMAL INTENSITY\n         AGO   .NEXT\n.UNPHI   ANOP\n&N       DC    X'C8'               UNPROTECTED HIGH INTENSITY\n         AGO   .NEXT\n.UNPNP   ANOP\n&N       DC    X'4C'               UNPROTECTED NO-DISPLAY\n         AGO   .NEXT\n.PROLO   ANOP\n&N       DC    X'60'               PROTECTED NORMAL INTENSITY\n         AGO   .NEXT\n.PROLOS  ANOP\n&N       DC    X'F0'               PROTECTED NORMAL INTENSITY SKIP\n         AGO   .NEXT\n.PROHI   ANOP\n&N       DC    X'E8'               PROTECTED HIGH INTENSITY\n         AGO   .NEXT\n.PROHIS  ANOP\n&N       DC    X'F8'               PROTECTED HIGH INTENSITY SKIP\n         AGO   .NEXT\n.ROWCOL  ANOP\n         AIF   (&B).COL            BRANCH IF ROW HAS BEEN CAPTURED\n&R       SETA  &SYSLIST(&AS)\n&B       SETB  1 TRUE              SET ROW-HAS-BEEN-CAPTURED\n         AGO   .NEXTR\n.COL     ANOP\n&C       SETA  &SYSLIST(&AS)\n&B       SETB  0 FALSE             RESET SWITCH\n         AIF   (&R LT 1 OR &R GT 24).ROWERR\n         AIF   (&C LT 1 OR &C GT 80).COLERR\n&P       SETA  (&R-1)*80+&C-1\n&Q       SETA  &P/64               QUOTIENT\n&R       SETA  &P-&Q*64+1          REMAINDER+1\n&Q       SETA  &Q+1                QUOTIENT+1\n&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN\n         AGO   .NEXT\n.ROWERR  MNOTE 4,'             &CS.) VALUE &R INVALID, MUST BE 1 TO 24'\n         AGO   .NEXT\n.COLERR  MNOTE 4,'             &CS.) VALUE &C INVALID, MUST BE 1 TO 80'\n.NEXT    ANOP\n&N       SETC  ''\n.NEXTR   ANOP\n&AN      SETA  &AN-1\n         AGO   .EACH\n.EPILOG  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUENT": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x003\\x003\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "FILE093"}, "text": "         MACRO                                                             1.\n&L      EQUENT &CSECT=,&ID=*,&BASEREG=12,&SA=*,                        +   2.\n               &ENTRY=NO,&SP=0,                                        +   3.\n               &XTRA=0,&XTRAREG=,&XTRAUSE=                                 4.\n.*                                                                         5.\n.* GENE CZARCINSKI,  05OCT73                                               6.\n.*                                                                         7.\n         AIF   ('&CSECT' EQ '').X0                                         8.\n&CSECT   CSECT ,                                                           9.\n.X0      AIF   ('&L' NE '').X1                                            10.\n$$$&SYSNDX DC  0H'0'                                                      11.\n.X1      AIF   ('&ENTRY' EQ 'NO').X1X                                     12.\n         AIF   ('&ENTRY' EQ 'YES').X1A                                    13.\n         MNOTE 8,'---ONLY ENTRY=YES/NO VALID'                             14.\n         MEXIT                                                            15.\n.X1A     AIF   ('&L' NE '').X1B                                           16.\n         MNOTE 8,'---A LABEL MUST BE SPECIFIED WHEN ENTRY=YES'            17.\n         MEXIT                                                            18.\n.X1B     ENTRY &L                                                         19.\n.X1X     ANOP                                                             20.\n&L       SAVE  (14,12),,&ID                                               21.\n         LR    &BASEREG,15   ESTABLISH THE PGM BASE REGISTER              22.\n         AIF   ('&L' NE '').X3                                            23.\n         USING $$$&SYSNDX,&BASEREG     AND ADDRESSABILITY.                24.\n         AGO   .X4                                                        25.\n.X3      USING &L,&BASEREG   AND ADDRESSABILITY.                          26.\n.*                                                                        27.\n.X4      AIF   ('&SA' NE '').X5                                           28.\n         MNOTE *,'---REENTRANT ENTRY CODE GENERATED.'                     29.\n         GETMAIN R,LV=72+&XTRA,SP=&SP                                     30.\n         AIF   ('&XTRAREG' EQ '').X7                                      31.\n         LA    &XTRAREG,72(0,1)        A(END OF SAVE AREA)                32.\n         AIF   ('&XTRAUSE' EQ '').X7                                      33.\n         USING &XTRAUSE,&XTRAREG                                          34.\n         AGO   .X7                                                        35.\n.X5      MNOTE *,'---NON-REENTRANT ENTRY CODE BEING GENERATED.'           36.\n         AIF   ('&SA' EQ '*').X6                                          37.\n         LA    1,&SA         ADDR OF SAVE AREA                            38.\n         AGO   .X7                                                        39.\n.X6      CNOP  4,8                                                        40.\n         BAL   1,$$$&SYSNDX.A          BRANCH AROUND                      41.\n         DC    18F'0'        INLINE SAVE AREA                             42.\n.*                                                                        43.\n$$$&SYSNDX.A DC 0H'0'                                                     44.\n.X7      ANOP                                                             45.\n         LR    15,13                                                      46.\n         ST    1,8(0,13)     LINK THE SAVE AREAS                          47.\n         ST    13,4(0,1)                                                  48.\n         LR    13,1          ADDR OF NEW SAVE AREA                        49.\n         LM    15,1,16(15)             RESTORE USED REGISTERS             50.\n         MEND  ENTER                                                      51.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUEXT": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "FILE093"}, "text": "         MACRO                                                             1.\n&L      EQUEXT &RESTORE=(14,12),&RC=0,&FREE=NO,&XTRA=0,&SP=0               2.\n.*                                                                         3.\n.* GENE CZARCINSKI,  08OCT73                                               4.\n.*                                                                         5.\n&L       DC    0H'0'                                                       6.\n         AIF   ('&FREE' EQ 'NO').X5                                        7.\n         AIF   ('&FREE' EQ 'YES').X3                                       8.\n         MNOTE 8,'---ONLY FREE=YES/NO VALID'                               9.\n         MEXIT                                                            10.\n.*                                                                        11.\n.X3      LR    1,13          POINTER TO GOTTEN CORE                       12.\n         L     13,4(0,13)    RESTORE POINTER TO OLD SAVE AREA             13.\n         AIF   ('&RC' NE '(15)').X4                                       14.\n         ST    15,16(0,13)             SAVE CONTENTS OVER FREEMAIN.       15.\n.X4      FREEMAIN R,A=(1),LV=72+&XTRA,SP=&SP                              16.\n         AIF   ('&RC' NE '(15)').X6                                       17.\n         L     15,16(0,13)             RESTORE                            18.\n         AGO   .X6                                                        19.\n.*                                                                        20.\n.X5      L     13,4(0,13)    RESTORE POINTER TO OLD SAVE AREA             21.\n.X6      AIF   ('&RC' EQ '(15)').X7                                       22.\n         LA    15,&RC        LOAD RETURN CODE INTO REG 15                 23.\n.X7      RETURN &RESTORE,T,RC=(15)                                        24.\n         MEND  EXIT                                                       25.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUREG": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n         EQUREG\nR0       EQU   0                   <>\nR1       EQU   1                 <<  >>\nR2       EQU   2               <<      >>\nR3       EQU   3             <<          >>\nR4       EQU   4           <<              >>\nR5       EQU   5         <<                  >>\nR6       EQU   6       <<                      >>\nR7       EQU   7     <<    SYMBOLIC REGISTERS    >>\nR8       EQU   8       <<                      >>\nR9       EQU   9         <<                  >>\nR10      EQU   10          <<              >>\nR11      EQU   11            <<          >>\nR12      EQU   12              <<      >>\nR13      EQU   13                <<  >>\nR14      EQU   14                  <>\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUREGS": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n         EQUREGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GNRLFAIL": {"ttr": 3337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00u\\x00u\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 117, "newlines": 117, "modlines": 0, "user": "FILE093"}, "text": "         MACRO                                                          0000000\n&NAME    GNRLFAIL &RET=,&TYPE=,&GFCB=,&CPPL=,&KEYN08=NO                 0000000\n.*                                                                      0000000\n.*  THIS MACRO IS USED TO ISSUE ERROR MESSAGES FOR CERTAIN              0000000\n.*  FAILURES.  IT IS ASSUMED THAT ON ENTRY R15 CONTAINS                 0000000\n.*  EITHER THE ERROR RETURN CODE OR ABEND CODE. THIS ROUTINE            0000000\n.*  WILL DESTROY R1.                                                    0000000\n.*                                                                      0000000\n         GBLC  &P                                                       0000000\n         GBLC  &GNRLF                                                   0000000\n         LCLC  &CALLID                                                  0000000\n         LCLC  &GNRLFCB                                                 0000000\n         LCLC  &LCLLBL                                                  0000000\n         LCLC  &GFBITS                                                  0000000\n         AIF   ('&TYPE' EQ '').ERR1   MUST SUPPLY TYPE                  0000000\n         AIF   ('&RET' EQ '').SYSLBL                                    0000000\n&LCLLBL  SETC  '&RET'                                                   0000000\n         AGO   .CONT1                                                   0000000\n.SYSLBL  ANOP                                                           0000000\n&LCLLBL  SETC  '&P'.'&SYSNDX'                                           0000000\n.CONT1   ANOP                                                           0000000\n         AIF   ('&GFCB' EQ '').NOGFCB                                   0000000\n&GNRLFCB SETC  '&GFCB'                                                  0000000\n         AGO   .CONT2                                                   0000000\n.NOGFCB  ANOP                                                           0000000\n&GNRLFCB SETC  '&P'.'GNRLF'                                             0000000\n&GNRLF   SETC  'YES'  SO CPDATA ALLOCATES CONTROL BLOCKS                0000000\n.CONT2   ANOP                                                           0000000\n.*  DETERMINE THE CORRECT GFBITS SETTING BASED UPON THE                 0000000\n.*  GNRLFAIL TYPE REQUEST AND THE PROTECT KEY                           0000000\n&GFBITS  SETC  '0'                                                      0000000\n         AIF   ('&TYPE' NE 'SSREQ' OR '&KEYN08' NE 'YES').CONT4         0000000\n&GFBITS  SETC  'GFKEYN08+GFSUBSYS'                                      0000000\n         AGO   .CONT6                                                   0000000\n.CONT4   ANOP                                                           0000000\n         AIF   ('&TYPE' NE 'SSREQ').CONT5                               0000000\n&GFBITS  SETC  'GFSUBSYS'                                               0000000\n         AGO   .CONT6                                                   0000000\n.CONT5   ANOP                                                           0000000\n         AIF   ('&KEYN08' NE 'YES').CONT6                               0000000\n&GFBITS  SETC  'GFKEYN08'                                               0000000\n.CONT6   ANOP                                                           0000000\n         AIF   ('&NAME' EQ '').NONAME                                   0000000\n&NAME    EQU   *                                                        0000000\n.NONAME  ANOP                                                           0000000\n         AIF   ('&TYPE' NE 'PARSE').NOPARS                              0000000\n         LA    R1,4           IF PARSE ERROR CODE IS 4 OR 20,           0000000\n         CR    R15,R1         ERROR MESSAGE HAS BEEN ISSUED             0000000\n         BE    &LCLLBL                                                  0000000\n         LA    R1,20                                                    0000000\n         CR    R15,R1                                                   0000000\n         BE    &LCLLBL                                                  0000000\n.NOPARS  ANOP                                                           0000000\n         LA    R1,&GNRLFCB+4   R1 => GNRLFAIL CONTROL BLOCK             0000000\n         ST    R1,&GNRLFCB                                              0000000\n         USING GFCBPTR,R1                                               0000000\n         AIF   ('&TYPE' EQ 'SSREQ').SSREQT    DON'T ZERO PTR IF SSREQ   0000000\n         XC    GFCBPTR,GFCBPTR  ZERO THE OPTIONAL POINTERS              0000000\n         AGO   .CONT3                                                   0000000\n.SSREQT  ANOP                                                           0000000\n         ST    R0,GFCBPTR     R0 => SSOB                                0000000\n.CONT3   ANOP                                                           0000000\n         XC    GF02PTR,GF02PTR   ZERO PTR TO TSO MESSAGE ISSUER         0000000\n         ST    R15,GFRCODE   STORE THE RETURN OR ABEND CODE             0000000\n         AIF   ('&TYPE' NE 'PUTLINE').NOPUTL                            0000000\n&CALLID  SETC  'GFPUTL'                                                 0000000\n         AGO   .LINK                                                    0000000\n.NOPUTL  ANOP                                                           0000000\n         AIF   ('&TYPE' NE 'PARSE').NOPRS                               0000000\n&CALLID  SETC  'GFPARSE'                                                0000000\n         AGO   .LINK                                                    0000000\n.NOPRS   ANOP                                                           0000000\n         AIF   ('&TYPE' NE 'ABEND').NOABND                              0000000\n&CALLID  SETC  'GFABEND'                                                0000000\n         AGO   .LINK                                                    0000000\n.NOABND  ANOP                                                           0000000\n         AIF    ('&TYPE' NE 'SSREQ').ERR3                               0000000\n&CALLID  SETC  'GFSSREQ'                                                0000000\n.LINK    ANOP                                                           0000000\n         LA    R15,&CALLID   SET THE FALURE CODE INTO                   0000000\n         STH   R15,GFCALLID   THE CONTROL BLOCK                         0000000\n         MVI   GFBITS,&GFBITS                                           0000000\n         XC    GFRESV1,GFRESV1                                          0000000\n         AIF   ('&CPPL' NE '').CPPL                                     0000000\n         L     R15,4(R13)                                               0000000\n         L     R15,24(R15)    R15 => CPPL                               0000000\n         AGO   .NOCPPL                                                  0000000\n.CPPL    ANOP                                                           0000000\n         L     R15,&CPPL      R15 => CPPL                               0000000\n.NOCPPL  ANOP                                                           0000000\n         ST    R15,GFCPPLP                                              0000000\n         XC    GFDSNLEN,GFDSNLEN                                        0000000\n         XC    GFPGMNL,GFPGMNL     ZERO THE PROGRAM NAME LENGTH         0000000\n         XC    GFDSNP,GFDSNP                                            0000000\n         XC    GFPGMNP,GFPGMNP                                          0000000\n         XC    GFRESV2,GFRESV2                                          0000000\n         XC    GFRESV3,GFRESV3                                          0000000\n         DROP  R1                                                       0000000\n         LA    R1,&GNRLFCB                                              0000000\n         LINK  EP=IKJEFF19                                              0000000\n         AIF   ('&RET' EQ '').GENLBL                                    0000000\n         B     &LCLLBL           GO TO ERROR LABEL                      0000000\n         AGO   .EXIT                                                    0000000\n.GENLBL  ANOP                                                           0000000\n         AIF   ('&TYPE' NE 'PARSE').EXIT                                0000000\n&LCLLBL  DS    0H                                                       0000000\n.EXIT    ANOP                                                           0000000\n         MEXIT                                                          0000000\n.ERR1    ANOP                                                           0000000\n         MNOTE 8,'TYPE PARAMETER MISSING ON GNRLFAIL'                   0000000\n         DC    F'0'                                                     0000000\n         MEXIT                                                          0000000\n.ERR3    ANOP                                                           0000000\n         MNOTE 8,'INVALID TYPE ON GNRLFAIL'                             0000000\n         DC    F'0'                                                     0000000\n         MEXIT                                                          0000000\n         MEND                                                           0000000\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JVDENTER": {"ttr": 3340, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00J\\x00J\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 74, "newlines": 74, "modlines": 0, "user": "FILE093"}, "text": "         MACRO , JVDENTER - V1M00 - 01/28/74\n&LABEL   JVDENTER                                                      +\n               &BASE=(11),                                             +\n               &REGS=(14,12),                                          +\n               &ID=,                                                   +\n               &VERSION=,                                              +\n               &DSA=72,                                                +\n               &ORIGIN=*,                                              +\n               &CFL=YES\n.*\n         LCLC  &EPID,&BASR,&START\n.*\n.BEGIN   AIF   ('&LABEL' EQ '').IDT\n.*\n         SPACE\n&LABEL   DS    0H\n         ENTRY &LABEL\n         SPACE\n.*\n.IDT     AIF   (T'&ID EQ 'O').IDD\n&EPID    SETC  '&ID'\n         AGO   .VER\n.IDD     AIF   ('&LABEL' EQ '').IDC\n&EPID    SETC  '&LABEL'\n         AGO   .VER\n.IDC     ANOP\n&EPID    SETC  '&SYSECT'\n.VER     AIF   (T'&VERSION EQ 'O').GEN\n&EPID    SETC  '&EPID-&VERSION-&SYSDATE-&SYSTIME'\n         MNOTE *,'       &EPID'\n.*\n.GEN     ANOP\n&BASR    SETC  '&BASE(1)'\n.*\n&START   SETC  '&ORIGIN'\n         AIF   ('&ORIGIN' NE '@').START\n&START   SETC  '&SYSECT'\n.START   AIF   ('&ORIGIN' EQ '*').HERE\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         BALR  &BASR,0\n         LA    14,*-&ORIGIN\n         SLR   &BASR,14\n         LR    2,13\n         SPACE\n.*\n         AGO   .GETDSA\n.HERE    ANOP\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         LR    &BASR,15\n         LR    2,13\n         SPACE\n.*\n.GETDSA  AIF   ('&DSA' EQ '0').NOCFL\n.*\n         LA    3,&DSA\n         GETMAIN R,LV=(3)\n         ST    3,0(1)\n         ST    13,4(1)\n         LR    13,1\n.*\n         AIF   ('&CFL' EQ 'NO').NOCFL\n.*\n         ST    1,8(2)\n.*\n.NOCFL   ANOP\n.*\n         LM    14,04,12(2)\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JVDEQU": {"ttr": 3343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&L       JVDEQU &O\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JVDLEAVE": {"ttr": 3345, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x007\\x007\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "FILE093"}, "text": "         MACRO , JVDLEAVE - V1M00 - 01/28/74\n&LABEL   JVDLEAVE                                                      +\n               &REGS=(14,12),                                          +\n               &RC=,                                                   +\n               &DSA=\n.*\n         LCLC  &L\n.*\n         AIF   ('&DSA' EQ '0').NODSA\n.*\n&LABEL   LH    0,2(13)\n         LR    1,13\n         L     13,4(13)\n.*\n         AIF   ('&RC' NE '(15)').FREE\n.*\n         LR    2,15\n.*\n.FREE    ANOP\n.*\n         FREEMAIN R,LV=(0),A=(1)\n.*\n.RCCHK   AIF   ('&RC' EQ '').NORC\n         AIF   ('&RC' NE '(15)').RTRN\n.*\n         LR    15,2\n.*\n         AGO   .RTRNN\n.RTRN    AIF   ('&RC'(1,1) NE '(').RTRNC\n.*\n         LR    15,&RC(1)\n.*\n.RTRNN   ANOP\n.*\n&L       RETURN &REGS,RC=(15)\n         SPACE\n.*\n         MEXIT\n.RTRNC   ANOP\n.*\n&L       RETURN &REGS,RC=&RC\n         SPACE\n.*\n         MEXIT\n.NORC    ANOP\n.*\n&L       RETURN &REGS\n         SPACE\n.*\n         MEXIT\n.NODSA   ANOP\n&L       SETC  '&LABEL'\n         AGO   .RCCHK\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LINKBACK": {"ttr": 3347, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&NAME    LINKBACK\n.**********************************************************************\n.*                 L  I  N  K  B  A  C  K                             *\n.*       LINKBACK RESTORE THE PREVIOUS SAVE AREA ADDRESS FROM R13,    *\n.*       RESTORES REGISTERS 14, AND 2-12. ALSO IT SETS THE FLAG       *\n.*       NECESSARY WHEN RETURNING TO FORTRAN AND FINALLY DOES THE     *\n.*       THE ULTIMINATE  BR 14.                                       *\n.**********************************************************************\n&NAME    L     13,4(13)                SELECT PREVIOUS SAVE AREA\n         LM    2,12,28(13)             RESTORE REG 2-12\n         L     14,12(13)               RESTORE REG 14.\n         MVI   12(13),X'FF'            SET FORTRAN FLAG\n         BR    14                      DO THE RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTPDS": {"ttr": 3349, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x06\\x00\\x933\\x0f\\x01\\x181?\\x08\\x01\\x0cT\\x0c$\\x00\\x00Ka\\xc1\\xd3\\xc9\\xc1\\xe2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1993-11-26T00:00:00", "modifydate": "2018-11-09T08:01:06", "lines": 3156, "newlines": 3108, "modlines": 0, "user": "./ALIAS"}, "text": "LPDS TITLE 'LISTPDS  --  LIST PARTITIONED DATA SET UTILITY PROGRAM'\n*\n*  THIS VERSION DOES NOT PUT A DATE-TIME STAMP INTO A GENERATED\n*  ./ ADD NAME=MEMBER   IEBUPDTE CARD, WHEN NO ISPF STATISTICS\n*  ARE PRESENT FOR THE MEMBER.  THE REASON IS THAT IF YOU CUT\n*  TWO CBT TAPES AT DIFFERENT TIMES, THEN THEY WILL BE DIFFERENT\n*  IN AN INSIGNIFICANT WAY, AND THEY CANNOT BE PROPERLY COMPARED\n*  TO EACH OTHER, EVEN IF IDENTICAL DATA WAS USED TO CREATE BOTH.\n*\n*---------------------------------------------------------------------*\n*\n* TITLE - LIST PARTITIONED DATA SET UTILITY PROGRAM\n*\n* NAME - LISTPDS,  ENTRY POINT - LISTPDS\n*\n* STATUS - VERSION 7.3,  UPDATED 27MAR78\n*          VERSION 7.3A  UPDATED 04DEC81\n*                        AIR FORCE DATA SERVICES CENTER, THE PENTAGON.\n*                        BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*          VERSION 8.0   UPDATED 01JAN94\n*                        FINANCIAL MANAGEMENT SERVICE, US TREASURY\n*                        JIM MARSHALL, CAPT, USAF-RET\n*          VERSION 8.1   UPDATED 16OCT15                          .UPL.\n*          VERSION 8.2   UPDATED 24JUN16                  .SPX.   .SEC.\n*          VERSION 8.3   UPDATED 31JAN17                          .ID8.\n*          VERSION 8.4   UPDATED 09NOV18                          .ALA.\n*\n* DEVELOPED BY . . .\n*       GENE CZARCINSKI\n*       NASA/GODDARD SPACE FLIGHT CENTER\n*       GREENBELT, MARYLAND\n*\n* FUNCTION/OPERATION - \"LISTPDS\" IS AN OS/360 DATA SET UTILITY\n*       PROGRAM FOR LISTING AND/OR PUNCHING SOURCE/OBJECT LIBRARIES\n*       (PARTITIONED DATA SETS).  ALL MEMBERS PROCESSED BY LISTPDS\n*       ARE ALWAYS OUTPUTTED IN COLLATING SEQUENCE (EXCEPT WHEN\n*       SELECTED MEMBERS ARE PROCESSED).  LISTPDS GENERATES\n*       TWO FORMATTED PRINTOUTS -\n*          1. (ON SYSPRINT) A FORMATTED LISTING OF THE PDS'S\n*             DIRECTORY TOGETHER WITH THE PAGE NUMBERS OF THE\n*             OUTPUT LISTING (FOR EACH MEMBER).\n*          2. (ON SYSLIST) A FORMATTED PRINTOUT OF THE CONTENTS\n*             OF EACH MEMBER PROCESSED.\n*\n*---------------------------------------------------------------------*\n*\n* ATTRIBUTES - ENABLED, SERIALLY REUSABLE, BLOCK LOADED,\n*       SINGLE LOAD MODULE, NO OVERLAY.\n*\n* ACCESS METHODS - QSAM LOCATE MODE (RECFM=FB) USED FOR\n*       SYSPRINT, SYSLIST, SYSPUNCH;  BSAM/BPAM USED FOR\n*       PDS I/O (SYSLIB); BSAM IS USED FOR SYSIN;\n*       AND EXCP IS USED FOR PDS-DIRECTORY READING.\n*\n*\n* NOTES -\n*       1. VERSION 6 OF \"LISTPDS\" IS A MAJOR REDESIGN OF THE\n*          PROGRAM AND REPLACES ALL PREVIOUS VERSIONS.\n*       2. ASIDE FROM THE EDIT (ED) DECIMAL INSTRUCTION, \"LISTPDS\"\n*          IS CODED ENTIRELY WITH STANDARD INSTRUCTION SET (360)\n*          INSTRUCTIONS.\n*       3. \"LISTPDS\" DOES ITS OWN DIRECTORY PROCESSING AND ALWAYS\n*          READS THE ENTIRE DIRECTORY (USING BSAM).\n*       4. DEFAULT SWITCH AND DDNAMES CAN BE CHANGED BY MODIFYING\n*          THE ASSEMBLY VARIABLES.\n*       5. THE STANDARD TRANSLATE TABLES ARE SETUP FOR 'QN'\n*          PRINT CHAIN OUTPUT.\n*       6. ALL PRINTED OUTPUT USES ASA CONTROL CHARACTERS.\n*       7. TO BE PROPERLY PROCESSED BY LISTPDS, ALL PDS\n*          DIRECTORIES *MUST* BE IN STANDARD FORMAT: THE LAST\n*          ENTRY IN EACH DIRECTORY IS HEX F'S.\n*       8. CODE HAS BEEN ADDED TO HANDLE PROCESSING OF CONCATON-\n*          ATED SYSLIB DD STATEMENTS.\n*       9. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED LAYOUT\n*          OF THE SYSLIB JFCB'S, DSCB'S AND THE \"CAMLST\" GENERATED\n*          CONTROL BLOCK FOR READING THE DSCB.\n*      10. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED OPERATION\n*          OF THE BPAM READ & FIND (C) ROUTINES FOR DIRECTORY AND\n*          MEMBER READING.\n*      11. DEFAULT BLKSIZES HAVE BEEN CHANGED FROM UNBLOCKED\n*          TO BLOCKED --\n*                 SYSPRINT - 3509\n*                 SYSLIST  - 7260\n*                 SYSPUNCH - 3200\n*                 SYSIN    - 3200\n*      12. THE DEFAULT BUFNO IS NOW SET TO 2.\n*      13. THE DEFAULT MAX LINES/PAGE IS NOW SET TO 60.\n*\n* VERSION 7.0 --\n*      14. DEFAULT MAX LINES/PAGE NOW SET TO 84.\n*      15. STAE PROCESSING HAS BEEN REMOVED.\n*      16. ALL VCONS HAVE BEEN CHANGED TO ADCONS.\n*      17. MAX OUTPUT LINE LENGTH CHANGED TO 116 CHARACTERS.\n*      18. PUNCHING ONLY OUTPUTS UP TO THE FIRST 80 BYTES OF\n*          EACH LOGICAL RECORD.\n*      19. THE XLATE (TRANSLATE) FUNCTION HAS BEEN DELETED.\n*      20. ABEND60A FIXED (BUG IN 'CLEARBUF')\n*      21. EJECT/NOEJECT FUNCTION IMPLEMENTED.\n*\n* VERSION 7.1 --\n*      22. REWORK CODE TO MAKE IT ONE CSECT\n*      23. FIX 7.0 BUG IN 'MONTHS'\n*      24. REFORMAT SOURCE CODE TO MAKE MORE READABLE.\n*      25. CHANGE PARM-ANAL TO SKIP OVER BAD KEYWORDS\n*      26. PAGE EJECT SYSLIST BETWEEN LIBRARIES\n*      27. TEST FOR 'NEAR BOTTOM' AND EJECT SYSLIST IF SO\n*      28. PUT TITLE AT TOP AND BOTTOM OF SYSLIST IF IN EJECT MODE.\n*      29. CREATE SYSPRINT HEADER PAGE AND TRAILER PAGE.\n*      30. REWORK LIB-FILE INIT CODE TO USE THE 'LCB' AREAS AND\n*          COUNT THE NUMBER OF DIR BLOCKS PER TRACK.\n*      31. REWORK DIR READ TO USE EXCP I/O.\n*      32. DEFAULT MAXLINES CHANGED TO 80.\n*      33. ADD MAXLIST, SELECT, AND EXCLUDE OPTIONS.\n*      34. CHANGE PRINT, LIST AND PUNCH TO USE QSAM MOVE I/O.\n*      35. REWORK CORE MANAGEMENT TO ISSUE ONE LARGE GETMAIN\n*          AND DO SUBALLOCATION FROM THAT AREA.\n* VERSION 7.2 --\n*      36. MAKE SELECT/EXCLUDE WORK FOR SPECIFIED MEMBERS\n*      37. REWORK LOUT SO THAT ADCON IS USED FOR LIST DCB ADDR\n*      38. REWORK LOUT SO THAT BOTTOM OF PAGE PROCESSING FOR\n*          NOEJECT MODE WORKS PROPERLY\n*      39. CHECK FOR RECFM=V/VB AND USE SECONDARY DCB IF SO\n*          TO PERFORM PROPER I/O (NO I/O ERRORS).\n*      40. CREATE S/R TO FORMAT & PRINT SYSPRINT DATA FOR\n*          FOR MEMBER SO IT CAN BE USED AFTER A MEMBER IS\n*          PROCESSED (SAVE INFO IN THE 'DIR' AREA).\n*      41. REORGANIZE CODE TO PROVIDE MORE BASE REGISTER\n*          ADDRESSABILITY BY MOVING SOME OF THE INITIALIZATION\n*          CODE INTO SEPARATELY ADDRESSABLE SUBROUTINES.\n*      42. ADD THE CAPABILITY TO LIST/PUNCH SEQUENTIAL DATASETS\n*          WHICH ARE POINTED TO BY THE SYSLIB CONCATENATION.\n*      43. CODE ADDED TO RE-INIT DCB IF RECFM CHANGES\n*          SO THAT THE DATASET WILL BE PROCESSED CORRECTLY\n*          WITH NO 'I/O ERRORS'.\n*      44. REWORK CODE SO THAT A SPECIAL END MSG WILL BE\n*          ISSUED IF PROCESSING A SEQUENTIAL DATASET.\n*      45. COUNTERS ADDED FOR PDS AND SDS PROCESSING.\n*      46. MODIFY DATASET I/O ERROR HANDLING TO LIST\n*          THE CONCATENATION SEQUENCE NUMBER SO THAT\n*          THE DATASET CAN BE IDENTIFIED AND THEN\n*          GO LIST THE PROCESSED DIRECTORY ENTRIES IF\n*          A PDS; PRODUCE AN EXTRA I/O ERROR MSG AT END\n*          OF DIRECTORY LISTING.\n*      47. CHANGE THE CODE TO ALLOCATE THE DATASET READ BUFFERS\n*          BASED ON THE SIZE OF EACH DATASET BEING PROCESSED.\n*\n* VERSION 7.3 --\n*      48. FIX RITSINFO/CRJEINFO SO DIRECTORY ENTRY IS LISTED\n*          CORRECTLY FOR RITS/CRBE/CRJE LIBRARIES.\n*      49. FIX BUG WHICH CAUSES ABEND0C0 WHEN \"EXCLUDE\" IS\n*          SPECIFIED FOR SELECTED MEMBERS.\n*\n* VERSION 7.3A -- UPDATES AT AIR FORCE DATA SERVICES CENTER, PENTAGON\n*          04 DEC 81, BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*      50. FOR DECK AND UPDTE, PUT SSI= KEYWORD AFTER THE MEMBER NAME\n*          ON THE ./ ADD STATEMENT, INSTEAD OF BEFORE.\n*      51. IF UPDTE IS SPECIFIED AND A MEMBER CONTAINS IEBUPDTE\n*          STATEMENTS, THE './' STATEMENTS WITHIN THE MEMBER WILL\n*          BE PUNCHED WITH THE './' CHANGED TO '><'. SEE NOTE 54 TOO.\n*      52. GET TIOT ADDRESS DIRECTLY INSTEAD OF GOING THRU EXTRACT SVC.\n*      53. ADD NEW PARM OPTION 'NOSEL' TO IGNORE SYSIN,\n*          SO WE CAN KEEP SYSIN ALLOCATED TO THE TERMINAL UNDER TSO.\n*      54. SPF (AN IBM PROGRAM PRODUCT) STATISTICS IN A PDS DIRECTORY\n*          WILL BE FORMATTED ON SYSPRINT AND IN THE COMMENTS AREA\n*          OF ./ ADD STATEMENTS.\n*          NOTE: WE HAVE A PROGRAM THAT WILL RE-LOAD THE IEBUPDTE DECK\n*          TO A PDS AND RESTORE THE SPF STATS FROM THE ./ ADD CARD.\n*          (AND RESTORE '><' TO './' --- SEE NOTE 51).\n*      55. IF 'NOSPF' IS SPECIFIED, OR IF NO MEMBERS IN A PDS CONTAIN\n*          SPF STATISTICS, THEN THE OLD HEX FORMATTING WILL BE USED.\n*      56. DEFAULT MAXLINES CHANGED TO 60.\n*      57. JUST PRINT HH.MM OF TIME IN HEADING, NOT HH.MM.SS\n*      58. INSTEAD OF VOL=VVVVVV, DSN=DDDDDDDDDDDDD    IN HEADINGS,\n*               PRINT - DDDDDDDDD - VOL=VVVVVV\n*      59. SUPPRESS ZEROS IN PAGE INDEX OF LISTDIR, SO PAGE 0 WILL\n*          BE PAGE BLANK.\n*      60. SUPPRESS ZEROS IN LRECL, BLKSIZE.  LEFT JUSTIFY.\n*      61. DEFAULT EJECT.\n*      62. REDUCE LINEMAX BY 1 INTERNALLY, BECAUSE WE KEEP GETTING\n*          ONE MORE LINE PER PAGE THAN THE SPECIFIED LINECNT.     .LCT.\n*      63. HEADINGS CHANGED. MEMBER NAME ON LEFT.                 .LCT.\n*\n* VERSION 8.0 --\n*      64. ADDED INTO OPTIONS LIST SPF/NOSPF.\n*      65. ADDED DSECTS WHERE EVER POSSIBLE IN PREPARATION FOR MVS/ESA.\n*      66. MADE THE CODE MORE READABLE FOR FUTURE GENERATIONS.\n*\n* VERSION 8.1 --                                                  .UPL.\n*      67. ADD SYSUPLOG FILE SHOWING ALL PLACES WHERE THE         .UPL.\n*          UPDTESUB '><' BYTES ALREADY EXIST, AND SHOULD NOT      .UPL.\n*          BE ERRONEOUSLY \"CHANGED BACK\" TO ./ BY PDSLOAD.        .UPL.\n*          COPIED FIRST 62 BYTES OF RECORD INTO CARD+17, SO       .SBG.\n*          WE CAN SEE WHAT IS GOING ON.                           .SBG.\n*\n* VERSION 8.2 -- JUNE 24 2016                                     .SEC.\n*      68. SUPPORT SECONDS IN ISPF STATS, ./ADD COLUMNS 70-71     .SEC.\n*      69. SUPPORT EXTENDED ISPF STATS, ./ ADD COLUMNS 73-80      .SPX.\n*      70. SUPPORT RECORD COUNTS > 99999 AND TOTALS > 9999999     .SUM.\n*\n* VERSION 8.3 -- JANUARY 31 2017                                  .SEC.\n*      71. SUPPORT 8TH CHARACTER IN USERID IN ISPF STATS COL 69   .ID8.\n*\n* VERSION 8.4 -- NOVEMBER 9 2018                                  .ALA.\n*      72. SUPPORT PARM=ALIAS TO PUNCH ./ ALIAS IF DECK AND UPDTE .ALA.\n*\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        LOCAL MACRO DEFINITIONS\n*---------------------------------------------------------------------*\n         MACRO\n&N       CRJE      &A,&B,&C,&D,&E\n&N       TM        &A.(R2),&B\n         BNO       X&SYSNDX\n         MVC       0(&D,R1),=C&C\n         LA        R1,&D.(R1)\n         B         &E\nX&SYSNDX EQU       *\n         MEND\n*\n         MACRO\n&A       PACL  &B,&C,&D,&E,&F,&G,&H,&J\n&A       CLC   =C'&B',0(R2)\n         BNE   Z&SYSNDX\n         LA    R2,&C.(,R2)\n         &D    &E,&F\n         AIF   (T'&G EQ 'O').A\n         &G    &H,&J\n.A       B     PAEND\nZ&SYSNDX EQU   *\n         MEND\n*\n         MACRO\n&A       P1    &B,&C,&D,&E,&BR=BZ\n&A       TM    &B,&C\n         &BR   X&SYSNDX\n         MVC   0(&E.,R2),=C'&D'\n         LA    R2,&E.(,R2)\n         BAL   R10,PRMLSTXX\nX&SYSNDX EQU   *\n         MEND\n*\n         MACRO\n&A       P2    &B,&C,&D,&E\n&A       TM    &B,&C\n         BO    X&SYSNDX\n         MVC   0(2,R2),=C'NO'\nX&SYSNDX MVC   2(&E.,R2),=C'&D'\n         LA    R2,&E.+2(,R2)\n         BAL   R10,PRMLSTXX\n         MEND\n*\n         MACRO\n&A       CC    &B,&C,&D,&E\n&A       LA    R1,&B       LINECNT\n         CLI   &C.,C'&D'   IS THE THE CHAR?\n         BE    &E          YES.\n         MEND\n         EJECT\n*---------------------------------------------------------------------*\n*        ASSEMBLY VARIABLES\n*---------------------------------------------------------------------*\n         SPACE\n         LCLC  &RELEASE,&ID,&VERSION\n         LCLC  &DDIN,&DDPRINT,&DDPUNCH,&DDLIB,&DDLIST,&DDUPLOG\n         LCLB  &A(8),&B(8)\n&RELEASE SETC  '09NOV18'           RELEASE IDENT - MAX 7 BYTES\n&VERSION SETC  '8.4'               VERSION IDENTIFICATION\n&ID      SETC  'GSFC'              'LOCAL' IDENT - 4 BYTES MAX\n&DDIN    SETC  'SYSIN'             DDNAME: CONTROL INPUT\n&DDPRINT SETC  'SYSPRINT'          DDNAME: MAIN-PRINT OUTPUT\n&DDLIST  SETC  'SYSLIST'           DDNAME: LISTING OUTPUT\n&DDPUNCH SETC  'SYSPUNCH'          DDNAME: FOR PUNCHED OUTPUT\n&DDLIB   SETC  'SYSLIB'            DDNAME: LIBRARY INPUT\n&DDUPLOG SETC  'SYSUPLOG'          DDNAME: UPDTE LOG OUTPUT       .UPL.\n&A(1)    SETB  1                   LIST\n&A(2)    SETB  0                   NODECK\n&A(3)    SETB  0                   NOT 'LIST DIR ONLY'\n&A(4)    SETB  0                   NOUPDTE\n&A(5)    SETB  0\n&A(6)    SETB  1                   EJECT           (WAS NOEJECT)  .PRC.\n&A(7)    SETB  0                   SSI\n&A(8)    SETB  1                   TRUNC\n&B(1)    SETB  0                   NODEBUG\n&B(2)    SETB  0                   NOHEXOUT\n&B(3)    SETB  0\n&B(4)    SETB  0                   NONUM\n&B(5)    SETB  0                   EROPT=TERM\n&B(6)    SETB  0                   NOALIAS                        .ALA.\n&E(1)    SETB  1                   SEL                            .SEL.\n&E(2)    SETB  1                   SPF                            .SPF.\n         EJECT\nR0       EQU   0                   OS PARM REG; WORK REG\nR1       EQU   1                   OS PARM REG; WORK REG\nR2       EQU   2                   LOCAL WORK REG\nR3       EQU   3                   LOCAL WORK REG\nR4       EQU   4\nR5       EQU   5                   LRECL CNTR FOR MEMBER\nR6       EQU   6                   BLOCK LENGTH\nR7       EQU   7                   BLOCK POINTER\nR8       EQU   8                   IHADCB BASE REG\nR9       EQU   9                   MAIN BASE REG - 3\nR10      EQU   10                  LOCAL LINK REG\nR11      EQU   11                  PROGRAM BASE REG #2\nR12      EQU   12                  MAIN BASE REG - 1\nR13      EQU   13                  POINTER TO OS SAVE AREA\nR14      EQU   14                  OS LINK REG; WORK REG\nR15      EQU   15                  OS BRANCH REG; WORK REG\nMAXLINE  EQU   60                  'DEFAULT' LINES/PAGE (WAS 80)  .PRC.\nSWA0     EQU   B'10000000'         NOLIST/LIST\nSWA1     EQU   B'01000000'         NODECK/DECK\nSWA2     EQU   B'00100000'         LIST DIRECTORY ONLY\nSWA3     EQU   B'00010000'         NOUPDTE/UPDTE\nSWA4     EQU   B'00001000'         MAXLIST SPECIFIED\nSWA5     EQU   B'00000100'         NOEJECT/EJECT\nSWA6     EQU   B'00000010'         NOSSI/SSI\nSWA7     EQU   B'00000001'         NOTRUNC/TRUNC\nSWB0     EQU   B'10000000'         NODEBUG/DEBUG\nSWB1     EQU   B'01000000'         NOHEXOUT/HEXOUT\nSWB2     EQU   B'00100000'         0: LIST=LIST,  1: LIST=PRINT\nSWB3     EQU   B'00010000'         NONUM/NUM\nSWB4     EQU   B'00001000'         EROPT=TERM/ACC\nSWB5     EQU   B'00000100'         NOALIAS/ALIAS                  .ALA.\nSWC0     EQU   B'10000000'         PARM ANALYSIS ERROR\nSWC1     EQU   B'01000000'         FLAG FOR NEW PAGE BEFORE PRINT\nSWC2     EQU   B'00100000'         1: DSORG=PS BEING PROCESSED.\nSWC3     EQU   B'00010000'         TERMINATE MODE SWITCH\nSWC7     EQU   B'00000001'         DCB EXIT TAKEN\nSWD0     EQU   B'10000000'         SELECTED NAMES SPECIFIED\nSWD1     EQU   B'01000000'         MEMBER IS AN ALIAS\nSWD2     EQU   B'00100000'         0=SELECT, 1=EXCLUDE\nSWD3     EQU   B'00010000'         SYSPRINT FIRST TIME THRU\nSWD4     EQU   B'00001000'         \"00\"=NOTHING, \"10\"=RITS,\nSWD5     EQU   B'00000100'         \"01\"=CRBE, \"11\"=CRJE.\nSWD6     EQU   B'00000010'         SYSLIST FIRST TIME THRU SWITCH\nSWD7     EQU   B'00000001'         1=RITS/CRBE/CRJE LIB BEING PROC.\nSWE0     EQU   B'10000000'         SEL                            .SEL.\nSWE1     EQU   B'01000000'         SPF                            .SPF.\nSWE2     EQU   B'00100000'         SPF STATS FOUND IN CURRENT PDS .SPF.\nSWE3     EQU   B'00010000'         SPF STATS IN ANY PDS           .SPF.\nSWE4     EQU   B'00001000'         SYSUPLOG IS OPEN               .UPL.\nOFLGS    EQU   B'00010000'         DCB OPEN ERROR FLAG\nALIAS    EQU   B'10000000'         ALIAS BIT IN DIRECTORY ENTRY\nCVTPTR   EQU   16   ... ADDR OF THE OS CVT\nCVTPCNVT EQU   X'1C' .. OFFSET IN CVT TO ADDR OF TTR/CCHHR CNVT\nJFCBDSNM EQU   0                   DSNAME OFFSET IN JFCB\nJFCBVOLS EQU   118                 VOLSER OFFSET IN JFCB\nJFCDSORG EQU   98                  DSORG  OFFSET IN JFCB\nJFCRECFM EQU   100                 RECFM  OFFSET IN JFCB\nJFCBLKSI EQU   102                 BLKSIZ OFFSET IN JFCB\nJFCLRECL EQU   104                 LRECL  OFFSET IN JFCB\nDS1DSORG EQU   82-44               DSORG  OFFSET IN DSCB\nDS1RECFM EQU   84-44               RECFM  OFFSET IN DSCB\nDS1BLKSI EQU   86-44               BLKSIZ OFFSET IN DSCB\nDS1LRECL EQU   88-44               LRECL  OFFSET IN DSCB\nDS4DEVDB EQU   75-44               DIR/TR OFFSET IN F=4 DSCB\n         EJECT\n*---------------------------------------------------------------------*\n*        MAIN PROGRAM BEGIN\n*---------------------------------------------------------------------*\nLISTPDS  AMODE 24\nLISTPDS  RMODE 24\nLISTPDS  CSECT\n         SAVE  (14,12),,LISTPDS-&VERSION\n         LR    R12,R15             INIT MAIN BASE REGS\n         LA    R11,2048\n         AR    R11,R11\n         LR    R9,R11\n         AR    R9,R9\n         AR    R11,R12\n         AR    R9,R12\n         USING LISTPDS,R12,R11,R9  AND PGM ADDRESSABILITY.\n         USING IHADCB,R8           SET DCB ADDRESSABILITY\n         LR    R4,R1               SAVE PARM LIST POINTER.\n         LA    R15,SAVEAREA        INIT SAVE AREAS\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         SPACE\n*---------------------------------------------------------------------*\n*        PROGRAM INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\nPGMINIT  EQU   *\n         XC    SWITCHES,SWITCHES   CLEAR SIWTCHES, ETC.\n         LA    R8,SYSLIB\n         MVI   DCBRECFM,0          MAKE SURE DCB IS INITIALIZED.\n         XC    DCBLRECL,DCBLRECL\n         XC    DCBBLKSI,DCBBLKSI\n         MVI   EXLST2,X'05'\n         XC    COR2,COR2\n         XC    COR7,COR7\n         XC    COR8,COR8\n         MVC   ALISTDCB,=A(SYSLIST)\n         MVI   HEAD1,C' '\n         MVC   HEAD1DAT(HEAD1NAM-HEAD1),HEAD1\n         MVC   HEAD1DSN(L'HEAD1VER),HEAD1VER\n         MVC   HEAD1(L'HEAD1R),HEAD1R  INIT HEADER LINE\n         MVC   SWA,SWAX\n         MVC   SWB,SWBX\n         MVC   SWE,SWEX\n         XC    RECORDS,RECORDS     CLEAR COUNTER\n         XC    TTRK,TTRK           FOR FIND\n         XC    RETCODE,RETCODE\n         XC    PAGENUM1,PAGENUM1\n         XC    PAGENUM2,PAGENUM2\n         XC    LINECNT1,LINECNT1\n         XC    LINECNT2,LINECNT2\n         XC    BUFFER1,BUFFER1     CLEAR BUFFERS\n         XC    BUFFER2,BUFFER2\n         LA    R15,MAXLINE         SET DEFAULT LINE COUNT\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         LA    R15,4000\n         STH   R15,LINECNT1\n         XC    TOTALREC,TOTALREC\n         XC    NAMETBL1,NAMETBL1\n         XC    NAMETBL2,NAMETBL2\n         XC    MAXLIST,MAXLIST\n         MVC   DDPRINT(RESETDDL),RESETDD\n         TM    0(R4),X'80'         ONLY EXEC PARMS SPECIFIED?\n         BO    EXTRACT             YES.\n         L     R2,4(R4)            NO, INIT THE DDNAMES.\n         LH    R3,0(R2)            GET NO. OF BYTES IN LIST\n         LTR   R3,R3               IS IT ZERO?\n         BNP   XPA2                YES, SKIP\n         CH    R3,=H'40'\n         BNH   *+8\n         LA    R3,40\n         LA    R2,2(R2)            BEGINNING OF DD LIST\n         LA    R3,2(R3,R2)         END OF DD LIST\n         LA    R1,DDPRINT          LISTPDS'S DD LIST\nXPA1     EQU   *\n         CR    R2,R3               END OF LIST?\n         BNL   XPA2                YES, GOTO NEXT ONE\n         CLI   0(R2),0             DUMMY ENTRY?\n         BE    *+10                YES, SKIP MOVE\n         MVC   0(8,R1),0(R2)\n         LA    R1,8(R1)\n         LA    R2,8(R2)\n         B     XPA1\n         SPACE\nXPA2     EQU   *\n         TM    4(R4),X'80'         END OF PARM LIST?\n         BO    EXTRACT             YES\n         L     R2,8(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM1         INITIAL PAGE NO - SYSPRINT\n         TM    8(R4),X'80'\n         BO    EXTRACT\n         L     R2,12(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM2         INITIAL PAGE NO - SYSLIST\n*XTRACT  EXTRACT TIOT,'S',FIELDS=(TIOT)                          *.PRC.\nEXTRACT  L     R1,540              PSATOLD, CURRENT TCB           .PRC.\n         L     R1,12(,R1)          GET TIOT ADDRESS FROM TCBTIO   .PRC.\n         ST    R1,TIOT             SAVE TIOT ADDRESS              .PRC.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT DATE/TIME FOR PRINTOUTS\n*---------------------------------------------------------------------*\n         SPACE\n         TIME  DEC                 GET DATE & TIME FOR HEADING\n         ST    R0,WORK1\n         XC    WORK2,WORK2         COMPUTE AND FORMAT DATE\n         ST    R1,WORK2+4\n         MVC   WORK1+5(1),WORK2+5  SAVE YEAR\n         CVB   R3,WORK2            CONVERT DATE TO BINARY\n         XR    R2,R2\n         D     R2,=F'1000'         TO SEP YEAR AND DAY\n         ST    R3,WORK2\n         LA    R3,MONTHS1          FOR STD YEAR\n         TM    WORK2+3,X'03'       LEAP YEAR?\n         BNZ   *+8                 NO\n         LA    R3,MONTHS2          FOR LEAP YEAR\n         XR    R1,R1\nPGMINITX EQU   *\n         SH    R2,0(R3)\n         BNP   PGMINITY\n         LA    R1,3(R1)\n         LA    R3,2(R3)\n         B     PGMINITX\n         SPACE\nPGMINITY EQU   *\n         AH    R2,0(R3)\n         MH    R2,=H'10'\n         CVD   R2,WORK2            FOR DAY OF MONTH\n         LA    R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC   HEAD1DAT+3(3),0(R1)\n         MVC   WORK1+4(1),WORK2+6  DAY OF MONTH\n         ED    HEAD1DAT,WORK1+4\n         CLI   HEAD1DAT+1,C' '\n         BNE   *+8\n         MVI   HEAD1DAT+1,C'0'\n         ED    HEAD1TIM,WORK1\n         CLI   HEAD1TIM+1,C' '\n         BNE   *+8\n         MVI   HEAD1TIM+1,C'0'\n         MVC   HEAD1TIM+6(3),=C'   '                              .PRC.\n         MVC   HEAD2DAT,HEAD1DAT\n         MVC   HEAD2TIM,HEAD1TIM\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE THE SYSPRINT FILE\n*---------------------------------------------------------------------*\n         SPACE\n         LA    R8,SYSPRINT         INIT THE SYSPRINT FILE\n         MVC   DCBDDNAM,DDPRINT\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    INITPR              YES.\n         L     R2,TIOT             SYSPRINT OPEN ERROR\n         MVC   WTP+17(8),0(R2)     MOVE JOBNAME TO MSG.\n         MVC   WTP+40(L'DDPRINT),DDPRINT\nWTP      EQU   *\n         WTO   'LPDS00I  JOBNAMEX OPEN ERROR ON SYSPRINT',         +++++\n               ROUTCDE=(11),DESC=7\n         TM    SWB,SWB0            DEBUG?\n         BZ    ABORT               NO\n         ABEND 20,DUMP             YES, ABEND TO GET DUMP.\nABORT    EQU   *\n         L     R13,4(R13)          ELSE ... ABORT\n         RETURN (14,12),T,RC=20\nRESETDD  DC    CL8'&DDPRINT',CL8'&DDLIST',CL8'&DDPUNCH'\n         DC    CL8'&DDLIB',CL8'&DDIN',CL8'&DDUPLOG'\nRESETDDL EQU   *-RESETDD\n         SPACE\nINITPR   DS    0H\n         MVI   LINE1,C'-'\n         BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        GO PERFORM THE PARM ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\n         L     R6,=A(PA)\n         BR    R6\n         SPACE\n*---------------------------------------------------------------------*\n*        COMPLETE THE PARM ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITA EQU   *\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         BZ    *+12                NO.\n         OI    SWD,SWD7            YES.\n         NI    SWA,255-SWA6        NO SSI IF RITS/CRBE\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST & PUNCH FILE INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWA,SWA0            LIST?\n         BZ    PGMINITC            NO.\n         LA    R8,SYSLIST\n         MVC   DCBDDNAM,DDLIST\n         OPEN  (SYSLIST,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    PGMINITC            YES.\n         NI    SWA,255-SWA0        NO, SET NOLIST.\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDLIST),DDLIST\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\nPGMINITC EQU   *\n         LA    R8,SYSPUNCH\n         MVC   DCBDDNAM,DDPUNCH\n         TM    SWA,SWA1            NODECK?\n         BZ    PGMINITD            YES.\n         OPEN  (SYSPUNCH,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    PGMINITU            YES.                           .UPL.\n         NI    SWA,255-SWA1        TURN OFF DECK OPTION\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDPUNCH),DDPUNCH\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\n         SPACE\nPGMINITU EQU   *                                                  .UPL.\n         LA    R8,SYSUPLOG                                        .UPL.\n         MVC   DCBDDNAM,DDUPLOG                                   .UPL.\n         DEVTYPE DCBDDNAM,WORK1                                   .UPL.\n         LTR   R15,R15             IF NO SYSUPLOD DD              .UPL.\n         BNZ   PGMINITD              THEN SKIP OPEN               .UPL.\n         OI    SWE,SWE4            SYSUPLOG IS OPEN               .UPL.\n         OPEN  (SYSUPLOG,OUTPUT)                                  .UPL.\n         TM    DCBOFLGS,OFLGS      OPEN OK?                       .UPL.\n         BO    PGMINITD            YES.                           .UPL.\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE MAIN WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITD EQU   *\n         GETMAIN VU,LA=COR1,A=COR2\n         L     R1,COR2\n         ST    R1,COR3\n         L     R15,COR2+4\n         LH    R0,=Y(8*1024)\n         SR    R15,R0\n         ST    R15,COR2+4\n         AR    R1,R15\n         AL    R15,COR2\n         SH    R15,=H'8'           MAKE IT LOW TO BE SAFE\n         ST    R15,COR5\n         FREEMAIN R,LV=(0),A=(1)\n         LM    R14,R15,COR2        CLEAR THE WORKAREA\nPGMINITG EQU   *\n         SH    R15,=H'256'\n         BNP   PGMINITH\n         XC    0(256,R14),0(R14)\n         LA    R14,256(,R14)\n         B     PGMINITG\n         SPACE\nPGMINITH EQU   *\n         BAL   R14,RESETHI\n         BAL   R14,RESETLO\n         L     R1,COR2+4\n         SRL   R1,10\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         MVC   LINE1(MSG7L1),MSG7\n         BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE SYSLIB AND THE LCB'S\n*---------------------------------------------------------------------*\n         SPACE\nFILEINIT EQU   *\n         LA    R8,SYSLIB\n         OPEN  (SYSLIB,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    FI07                YES.\n         MVC   LINE1(L'LPDS04I),LPDS04I\n         MVC   LINE1+L'LPDS04I(8),DDLIB\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        LCB INIT FOR SYSLIB CONCATONATION\n*---------------------------------------------------------------------*\n         SPACE\nFI07     EQU   *\n         MVC   WORK1(L'DCBTIOT),DCBTIOT  SAVE ENTRY\n         LH    R2,DCBTIOT\n         L     R3,TIOT\n         LA    R3,0(R3,R2)         PNTR TO SYSLIB ENTRY\n         LA    R0,LCBLEN           ALLOC INITIAL LCB\n         BAL   R14,GETBASE\n         LR    R4,R1\n         ST    R1,ALCB\n         USING LCB,R4\n         LA    R5,16               LIMIT MAX LIBS PROCESSED\n         LA    R0,176              SIZE OF A JFCB\n         BAL   R14,GETHI\n         ST    R1,JFCBADRS\n         MVI   JFCBADRS,X'87'\n         B     FI07B\n         SPACE\nFI07A    EQU   *\n         XR    R1,R1\n         IC    R1,0(R3)\n         LA    R2,0(R2,R1)         POINT TO NEXT ENTRY\n         LA    R3,0(R3,R1)\n         CLI   0(R3),0             END OF TIOT?\n         BE    FI07Z               YES\n         CLC   =CL8' ',4(R3)       CONCATONATION?\n         BNE   FI07Z               NO, END.\n         STH   R2,DCBTIOT\nFI07B    RDJFCB    SYSLIB\n         L     R1,JFCBADRS\n         MVC   DSNAME,JFCBDSNM(R1)\n         MVC   LCBDSNAM,JFCBDSNM(R1)\n         MVC   VOLSER,JFCBVOLS(R1)\n         MVC   LCBVOLNO,JFCBVOLS(R1)\n         MVC   LCBJFCDS,JFCDSORG(R1)\n         MVC   LCBJFCRF,JFCRECFM(R1)\n         MVC   LCBJFCBL,JFCBLKSI(R1)\n         MVC   LCBJFCLR,JFCLRECL(R1)\n         OBTAIN DSCB\n         MVC   LCBDS1DS,WORKAREA+DS1DSORG\n         MVC   LCBDS1RF,WORKAREA+DS1RECFM\n         MVC   LCBDS1BL,WORKAREA+DS1BLKSI\n         MVC   LCBDS1LR,WORKAREA+DS1LRECL\n         MVI   DSNAME,X'04'        FOR FORMAT 4 DSCB\n         MVC   DSNAME+1(43),DSNAME\n         OBTAIN DSCB\n         XR    R1,R1\n         IC    R1,WORKAREA+DS4DEVDB\n         STH   R1,LCBDIR\n         L     R15,JFCBADRS\n         LH    R1,JFCBLKSI(,R15)\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,WORKAREA+DS1BLKSI\n         LA    R0,LCBLEN\n         BAL   R14,GETBASE         WILL BE CONTIG\n         LR    R4,R1\n         XC    0(LCBLEN,R1),0(R1)\n         BCT   R5,FI07A\n         DROP  R4\nFI07Z    EQU   *\n         MVI   0(R4),X'FF'         SET END FLAG\n         MVI   JFCBADRS,X'80'      END OF JFCB INIT\n         MVC   DCBTIOT,WORK1       RESET TIOT PNTR\n         BAL   R14,RESETHI\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE SELECTED NAME TABLE\n*---------------------------------------------------------------------*\n         SPACE\n         XC    NAMETBL2,NAMETBL2   SET PNTR TO NULL.\n         TM    SWE,SWE0            SEL OR NOSEL                   .SEL.\n         BZ    BLDSEL99            NOSEL, BYPASS SYSIN            .SEL.\n         L     R2,TIOT             SCAN THE TIOT FOR MATCH\n         LA    R2,24(R2)\n         XR    R3,R3\nBLDSEL01 EQU   *\n         CLC   4(8,R2),DDIN\n         BE    BLDSEL02            MATCH.\n         CLI   0(R2),0             END OF TIOT?\n         BE    BLDSEL99            YES, RETURN.\n         IC    R3,0(R2)\n         LA    R2,0(R2,R3)\n         B     BLDSEL01\n         SPACE\nBLDSEL02 EQU   *\n         LA    R8,SYSIN\n         MVC   DCBDDNAM,DDIN\n         OPEN  (SYSIN,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BZ    BLDSEL99            NO, RETURN.\n         LH    R0,SYSIN+DCBBLKSI-IHADCB  ALLOC SYSIN BUFFER\n         BAL   R14,GETHI\n         LR    R7,R1\n         B     BLDSEL20\n         SPACE\nBLDSEL03 EQU   *\n         LA    R5,80(,R5)\n         LR    R3,R5\n         SH    R6,=H'80'\n         BNP   BLDSEL20\n         LA    R2,72(,R3)          POINT AT END OF CARD.\nBLDSEL04 EQU   *\n         CLI   0(R3),C' '          BLANK?\n         BE    BLDSEL03            YES, GO GET NEXT CARD.\n         CR    R2,R3               END OF CARD?\n         BL    BLDSEL03            YES, GO GET NEXT CARD.\n         CLI   0(R3),C','          COMMA?\n         BNE   BLDSEL05            NO.\n         LA    R3,1(R3)            YES, SKIP OVER IT.\n         B     BLDSEL04\n         SPACE\nBLDSEL05 EQU   *\n         LA    R14,WORK1\n         MVC   WORK1,=CL8' '\nBLDSEL06 EQU   *\n         CLI   0(R3),C' '          BLANK?\n         BE    BLDSEL08            YES, END OF NAME\n         CLI   0(R3),C','          COMMA?\n         BE    BLDSEL08            YES, END OF NAME\n         CR    R2,R3               END OF CARD?\n         BL    BLDSEL08            YES, END OF NAME\n         C     R14,=A(WORK1+8)     HAVE 8 BYTES BEEN PROCESSED?\n         BNL   *+16                YES.\n         IC    R15,0(R3)\n         STC   R15,0(R14)\n         LA    R14,1(R14)\n         LA    R3,1(R3)\n         B     BLDSEL06            GO GET NEXT CHAR.\n         SPACE\nBLDSEL08 EQU   *\n         LA    R0,NAMTBLXX\n         BAL   R14,GETBASE\n         XC    0(NAMTBLXX,R1),0(R1)\n         MVC   0(8,R1),WORK1\n         TM    SWD,SWD0\n         BO    BLDSEL04\n         OI    SWD,SWD0\n         ST    R1,NAMETBL2\n         B     BLDSEL04\n         SPACE\nBLDSEL20 EQU   *\n         READ  INDECB,SF,SYSIN,(R7),'S'\n         CHECK INDECB\n         LR    R5,R7\n         L     R15,INDECB+16       CALC. LENGTH OF RECORD READ\n         LH    R6,SYSIN+DCBBLKSI-IHADCB\n         SH    R6,14(,R15)\n         LA    R3,0(,R5)\n         LA    R2,72(,R3)\n         B     BLDSEL04\n         SPACE\nBLDSEL90 EQU   *\n         TM    SWD,SWD0            ANY NAMES?\n         BZ    BLDSEL95            NO\n         LA    R0,8                YES, SET END FLAG\n         BAL   R14,GETBASE\n         MVI   0(R1),X'FF'\nBLDSEL95 EQU   *\n         CLOSE SYSIN\nBLDSEL99 EQU   *\n         BAL   R14,RESETHI\n         L     R6,=A(PRMLST)\n         BR    R6\n         EJECT\nBEGIN    EQU   *\n         L     R2,ALCB\n         USING LCB,R2\n         TM    LCB,X'FF'\n         BNM   ENDRUN\n         BAL   R14,RESETLO\n         BAL   R14,RESETHI\n         XC    CURRENT2+4,CURRENT2+4\n         MVC   CURRENT2,NAMETBL2\n*        MVC   HEAD1DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD1VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD1DSN+1(65),HEDD1DSN                            .PRC.\n         MVC   HEDD1DSN+1(2),=C'--'                               .PRC.\n         MVC   HEDD1DSN+4(44),LCBDSNAM                            .PRC.\n         LA    R1,HEDD1DSN+4+43                                   .PRC.\n         CLI   0(R1),C' '                                         .PRC.\n         BNE   *+8                                                .PRC.\n         BCT   R1,*-8                                             .PRC.\n         MVC   2(2,R1),=C'--'                                     .PRC.\n         MVC   5(4,R1),HEAD1C1R+3 'VOL='                          .PRC.\n         MVC   9(6,R1),LCBVOLNO                                   .PRC.\n*        MVC   HEAD2DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD2VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD2DSN+4(58),HEDD1DSN+4                          .PRC.\n         MVC   MAXDIR,LCBDIR       UPDATE FOR DIR READ\n         LA    R1,LCBEND\n         ST    R1,ALCB\n         TM    LCBDS1DS,B'01000010' ONLY DSORG=PO/PS ARE VALID\n         BNZ   BEGIN01\n         OI    SWC,SWC1\n         MVC   LINE1(L'LPDS11I),LPDS11I\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\n         B     BEGIN\n         SPACE\nBEGIN01  EQU   *\n         NI    SWC,255-SWC2        RESET DSORG=PS SWITCH\n         TM    LCBDS1DS,B'01000000' IS THIS DSORG=PS?\n         BZ    *+8                 NO.\n         OI    SWC,SWC2            YES, FLAG IT.\n         TM    SWD,SWD0            WERE NAMES SPECIFIED VIA SYSIN?\n         BZ    BEGIN19             NO.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    BEGIN               YES, NOT PROCESSED ON SELECT.\nBEGIN09  EQU   *\n         L     R1,CURRENT2         RE-INIT THE NAME TBL2\n         USING NAMTBL,R1\nBEGIN10  EQU   *\n         CLI   NAMTBL1,X'FF'       TEST FOR END\n         BE    BEGIN19\n         XC    NAMTBL2(12),NAMTBL2\n         LA    R1,NAMTBLXX(,R1)\n         B     BEGIN10\n         SPACE\nBEGIN19  EQU   *\n         DROP  R1\n         XR    R1,R1\n         IC    R1,LCBJFCRF\n         LTR   R1,R1\n         BNZ   *+8\n         IC    R1,LCBDS1RF\n         STC   R1,SAVRECFM\n         LH    R1,LCBJFCBL\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,LCBDS1BL\n         STH   R1,SAVBLKSI\n         ST    R1,BUFFER0          SET SIZE OF BUFFER(S)\n         LH    R1,LCBJFCLR\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,LCBDS1LR\n         STH   R1,SAVLRECL\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         BZ    *+8                 NO.\n         OI    SWD,SWD7            YES, FLAG.\n         DROP  R2\n         SPACE\n         LA    R8,SYSLIB\n         LH    R15,SAVBLKSI        BLKSIZE SPECIFIED?\n         LTR   R15,R15\n         BNZ   *+24                YES.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IA),LPDS06IA\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'00000010'  MACH. CONTROL CHARS?\n         BZ    *+30                NO.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I1),LPDS06I1\n         MVC   LINE1+L'LPDS06I+L'LPDS06I1(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'11000000'\n         BO    CHKLIB11\n         TM    SAVRECFM,B'01001000'  VARIABLE SPANNED?\n         BNO   CHKLIB11            NO\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I2),LPDS06I2\n         MVC   LINE1+L'LPDS06I+L'LPDS06I2(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RITS/CRBE\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB11 EQU   *\n         TM    SWD,SWD7            RITS/CRBE/CRJE SPECIFIED?\n         BZ    CHKLIB15            NO.\n         TM    SAVRECFM,B'11000000'  YES, CHECK PARMS\n         BO    CHKLIB12            INVALID\n         TM    SAVRECFM,B'10000000'\n         BZ    CHKLIB12            INVALID\n         LH    R15,SAVLRECL\n         CH    R15,=H'88'\n         BNE   *+8\n         B     CHKLIB40\n         SPACE\nCHKLIB12 EQU   *\n         NI    SWD,255-SWD7        TURN OFF RITS/CRBE\n         OI    SWC,SWC1            FLAG REINIT SYSPRINT\n         MVC   LINE1(L'LPDS07I),LPDS07I\n         BAL   R10,PRNT\n         LA    R1,4                RC=4\n         BAL   R14,SAVERC\n         SPACE\n*---------------------------------------------------------------------*\n*        CHECK RECFM TYPES\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB15 EQU   *\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    CHKLIB16\n         TM    SAVRECFM,B'10000000'    RECFM=F?\n         BO    CHKLIB17\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    CHKLIB18\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IB),LPDS06IB\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=U\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB16 EQU   *\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         BNZ   *+8\n         LH    R15,SAVBLKSI\n         CH    R15,SAVBLKSI\n         BNH   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=F\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB17 EQU   *\n         TM    SAVRECFM,B'00010000'    BLOCKED?\n         BO    *+16\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         BNZ   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=V\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB18 EQU   *\n         TM    SAVRECFM,B'00100000'  TRACK OVERFLOW?\n         BZ    CHKLIB40            NO.\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I3),LPDS06I3\n         MVC   LINE1+L'LPDS06I+L'LPDS06I3(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LIB CHECK\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB40 EQU   *\n         LA    R8,SYSLIB\n         SPACE\n*---------------------------------------------------------------------*\n*        REINIT DCB IF NECESSARY\n*---------------------------------------------------------------------*\n         SPACE\n         CLC   SAVRECFM,DCBRECFM\n         BE    BEGIN35\n         CLOSE SYSLIB\n         MVI   EXLST2,X'00'        SUPPRESS EXIT THIS TIME\n         MVI   JFCBADRS,X'80'      SUPPRESS JFCB POINTER\n         MVC   DCBRECFM,SAVRECFM   SET RECFM\n         MVC   DCBLRECL,SAVLRECL   SET LRECL\n         MVC   DCBBLKSI,DCBBLKSI   SET BLKSIZE\n         OPEN  SYSLIB              RE-OPEN THE DATASETS\nBEGIN35  EQU   *\n         MVC   DCBLRECL,SAVLRECL   SET THE LRECL\n         MVC   DCBBLKSI,SAVBLKSI   SET THE BLKSIZE\n         XC    TTRK(2),TTRK        POINT AT NEW DIRECTORY\n         MVI   TTRK+2,1\n         XC    NAMETBL1,NAMETBL1\n         NI    SWE,255-SWE2        RESET SPF-THIS-PDS SWITCH      .SPF.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    BEGIN9              YES, SKIP DIR. BUILD\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DIRECTORY-READ WORKAREA (CHAN. PROGS., ETC.)\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R2,MAXDIR\n         LR    R0,R2\n         MH    R2,=H'8'\n         LA    R2,16(,R2)          C.P. SIZE\n         MH    R0,=H'272'          DATA AREA SIZE\n         AR    R0,R2               WORKAREA SIZE\n         BAL   R14,GETHI           GET SOME CORE\n         ST    R1,WORK1            AREA FOR THE C.P.\n         AR    R2,R1\n         ST    R2,WORK1+4          FOR THE DATA\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE CHANNEL PROGRAM\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         XC    0(16,R1),0(R1)      BUILD THE SHA AND TIC\n         LA    R0,CCHHR\n         ST    R0,0(,R1)\n         MVI   0(R1),X'39'         ...SHA\n         MVI   4(R1),X'40'\n         MVI   7(R1),4\n         ST    R1,8(,R1)\n         MVI   8(R1),X'08'         ...TIC\n         MVI   12(R1),X'40'\n         LA    R1,16(,R1)\n         LA    R14,272             ..SIZE OF DATA RECORD\nBLDNAM10 EQU   *\n         XC    0(8,R1),0(R1)\n         ST    R2,0(,R1)\n         MVI   0(R1),X'1E'         READ CKD\n         MVI   4(R1),X'60'\n         STH   R14,6(,R1)\n         LA    R1,8(,R1)\n         AR    R2,R14\n         BCT   R15,BLDNAM10\n         SH    R1,=H'4'\n         NI    0(R1),X'BF'         TURN OFF CHAINING\n         L     R1,WORK1\n         ST    R1,ACP\n         SPACE 3\nBLDNAM20 EQU   *\n         STM   R14,R12,12(R13)     SAVE REGS FOR TTR CNVT\n         L     R0,TTRK\n         LH    R1,TTRK             UPDATE FOR NEXT TIME\n         LA    R1,1(,R1)\n         STH   R1,TTRK\n         L     R1,SYSLIB+DCBDEBAD-IHADCB\n         LA    R2,MBB\n         L     R15,CVTPTR\n         L     R15,CVTPCNVT(,R15)\n         LR    R3,R13              SAVE 13 OVER CALL\n         BALR  R14,R15\n         LR    R13,R3              NOW RESTORE 13\n         LM    R14,R12,12(R13)     AND THEN THE REST\n         LH    R15,MAXDIR          NOW CLEAR THE DATA AREA\n         L     R1,WORK1+4\nBLDNAM22 EQU   *\n         XC    0(20,R1),0(R1)\n         LA    R1,272(,R1)\n         BCT   R15,BLDNAM22\n         XC    ECB,ECB\n         LA    R10,BLDNAM23\n         EXCP  IOB\n         WAIT  1,ECB=ECB\nBLDNAM23 EQU   *\n         CLI   ECB,X'7F'           I/O OK\n         BE    BLDNAM27\n         CLI   ECB,X'42'\n         BE    BLDNAM90            I/O ERROR OR BAD FORMAT\n         SPACE\n*---------------------------------------------------------------------*\n*        SHORT TRACK, FIND THE END.\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         L     R1,WORK1+4\n         XR    R5,R5\nBLDNAM25 EQU   *\n         CLC   =XL5'0',0(R1)\n         BE    BLDNAM28\n         CLC   =H'0',6(R1)         DL = 0\n         BE    BLDNAM28\n         CLC   =X'0100',6(R1)      DL = 256\n         BNE   BLDNAM90            BAD DIR FORMAT\n         LA    R1,272(,R1)\n         LA    R5,1(,R5)\n         BCT   R15,BLDNAM25\nBLDNAM27 EQU   *\n         LH    R5,MAXDIR\nBLDNAM28 EQU   *\n         L     R4,WORK1+4\nBLDNAM30 EQU   *\n         LA    R3,18(,R4)          POINT PAST COUNT, KEY, 1ST 2 DATA\n         MVC   WORK2(2),16(R4)     GET 1ST 2 BYTES OF DATA, BYTES USED\n         LH    R2,WORK2\n         SH    R2,=H'2'\nBLDNAM36 EQU   *\n         IC    R7,11(,R3)          GET USERDATA LENGTH\n         N     R7,=F'31'           ISOLATE USERDATA LENGTH BITS\n         SLL   R7,1\n         CH    R7,=H'30'           COULD THIS BE SPF STATS        .SPF.\n         BNE   BLDNAM40            NO, BRANCH                     .SPX.\n         TM    14(R3),X'20'        EXTENDED STATS IN 30 BYTES?    .SPX.\n         BZ    BLDNPSPF            NO, TREAT AS STATS             .SPX.\n         B     BLDNOSPF            YES, TREAT AS NO STATS         .SPX.\nBLDNAM40 CH    R7,=H'40'           COULD THIS BE SPF X STATS      .SPX.\n         BNE   BLDNOSPF            NO, BRANCH                     .SPX.\n         TM    14(R3),X'20'        EXTENDED STATS IN 40 BYTES?    .SPX.\n         BZ    BLDNOSPF            NO, TREAT AS NO STATS          .SPX.\nBLDNPSPF EQU   *                                                  .SPX.\n         TM    11(R3),X'60'        ANY TTR'S IN USERDATA          .SPF.\n         BNZ   BLDNOSPF            YES, NOT SPF STATS             .SPF.\n         OI    SWE,SWE2+SWE3       SPF STATS FOUND                .SPF.\nBLDNOSPF EQU   *                                                  .SPF.\n         LA    R6,DIRUSER-DIRNAME(,R7)\n         LA    R0,DIRNAME-DIR(,R6)\n         BAL   R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         OC    NAMETBL1,NAMETBL1\n         BNZ   *+8\n         ST    R1,NAMETBL1\n         STH   R7,DIRUSERL-DIR(,R1)\n         BCTR  R6,0\n         EX    R6,BLDNAMMV\n         CLI   0(R3),X'FF'         TEST FOR END\n         BE    BLDNAM95\n         LA    R6,1(,R6)\n         AR    R3,R6\n         SR    R2,R6\n         BP    BLDNAM36\n         LA    R4,272(,R4)\n         SH    R5,=H'1'\n         BP    BLDNAM30\n         B     BLDNAM20\n         SPACE\nBLDNAMMV MVC   DIRNAME-DIR(*-*,R1),0(R3)\nBLDNAM90 MVC   LINE1(L'LPDS08I),LPDS08I\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DIRECTORY.\n*---------------------------------------------------------------------*\n         SPACE\nBLDNAM95 EQU   *\n         MVC   CURRENT1,NAMETBL1\nBEGIN9   EQU   *\n         LA    R8,SYSLIB\n         OI    SWD,SWD6            FLAG FIRST EJECT ON LIST\n         LH    R1,LINEMAX          RE-INIT SYSPRINT PAGE\n         STH   R1,LINECNT1\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DATA BUFFERS\n*---------------------------------------------------------------------*\n         SPACE\n         BAL   R14,RESETHI\n         L     R0,BUFFER0\n         BAL   R14,GETHI\n         ST    R1,BUFFER1\n         CLI   SAVBUFNO,2\n         BL    BEGIN9A\n         L     R0,BUFFER0\n         BAL   R14,GETHI\n         ST    R1,BUFFER2\nBEGIN9A  EQU   *\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BZ    MAIN00              NO, GO PROCESS A PDS LIBRARY.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR DSORG=PS\n*---------------------------------------------------------------------*\n         SPACE\n         NI    SWD,255-SWD7        NO CRJE, ETC.\n         LA    R0,DIRLEN\n         BAL   R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         LR    R4,R1\n         USING DIR,R4\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN31              NO, GO PROCESS.\n         MVC   HEAD2NAM,NAME\n         MVI   LINE2,C'+'\n         BAL   R10,LOUT\n         MVC   DIRPG1,PAGENUM2\n         B     MAIN31              GO PROCESS DSORG=PS\n         SPACE\nMAIN00   EQU   *\n         NI    SWD,255-SWD1        TURN OFF ALIAS SWITCH\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         BZ    MAIN10              NO.\n         TM    SWD,SWD2            SELECT OF EXCLUDE?\n         BNZ   MAIN10              NOT SELECT.\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT NAME FROM NAMETBL2\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,CURRENT2\n         USING NAMTBL,R2\n         CLI   NAMTBL,X'FF'        END OF TABLE?\n         BE    ENDLIB              YES.\n         MVC   NAME,NAMTBL1\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         SPACE\n*---------------------------------------------------------------------*\n*        SEARCH NAMETBL1 FOR ENTRY.\n*---------------------------------------------------------------------*\n         SPACE\n         L     R4,NAMETBL1\n         USING DIR,R4\nMAIN02   EQU   *\n         CLI   DIRNAME,X'FF'       END?\n         BE    MAIN00              YES, MEMBER NOT FOUND.\n         CLC   NAMTBL1,DIRNAME     IS THIS IT?\n         BE    MAIN04              YES, FOUND IT.\n         LH    R15,DIRUSERL        UPDATE POINTER AND TRY NEXT ENTRY\n         LA    R4,DIRUSER(R15)\n         B     MAIN02\n         SPACE\nMAIN04   EQU   *\n         ST    R4,NAMTBL2          SAVE POINTER\n         LA    R1,DIRNAME          POINT TO DIR ENTRY AREA\n         B     MAIN12\n         DROP  R2\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT ENTRY FROM NAMETBL1\n*---------------------------------------------------------------------*\n         SPACE\nMAIN10   EQU   *\n         L     R4,CURRENT1\n         USING DIR,R4\n         CLI   DIRNAME,X'FF'       TEST FOR END\n         BE    ENDLIB\n         MVC   NAME,DIRNAME        SAVE NAME FOR LATER PROCESSING\n         LH    R15,DIRUSERL\n         LA    R1,DIRNAME\n         LA    R2,DIRUSER(R15)\n         ST    R2,CURRENT1\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED (EXCLUDE)?\n         BZ    MAIN12              NO\n         L     R2,NAMETBL2         CHECK FOR EXCLUDE\n         USING NAMTBL,R2\nMAIN11   EQU   *\n         CLI   NAMTBL,X'FF'        TEST FOR END OF EXCLUDED LIST\n         BE    MAIN12              NOT EXCLUDED, GO PROCESS THE MEMBER\n         CLC   NAMTBL1,DIRNAME\n         BE    MAIN10              NAME MATCH..THIS MEMBER EXCLUDED.\n         LA    R2,NAMTBLXX(,R2)\n         B     MAIN11\n         DROP  R2\n         SPACE 2\nMAIN12   EQU   *\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         BZ    MAIN20              NO, CONTINUE.\n         SPACE\n*---------------------------------------------------------------------*\n*        ALIAS ENTRY ... FIND PRIME ENTRY (IF IT EXISTS)\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,NAMETBL1\nMAIN14   EQU   *\n         CLI   DIRNAME-DIR(R2),X'FF'\n         BE    MAIN20              ..END TBL, IGNORE ALIAS\n         CLC   DIRTTR(3),DIRTTR-DIR(R2)\n         BNE   MAIN14A\n         TM    DIRTTR+3-DIR(R2),ALIAS\n         BZ    MAIN16              PRIME ENTRY FOUND FOR ALIAS\nMAIN14A  EQU   *\n         LH    R15,DIRUSERL-DIR(R2)\n         LA    R2,DIRUSER-DIR(R2,R15)\n         B     MAIN14\n         SPACE\n*---------------------------------------------------------------------*\n*        PRIME ENTRY FOUND FOR ALIAS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN16   EQU   *\n         OI    DIRFLAGS,B'11000000'    SET ALIAS FLAG\n         TM    SWD,SWD0            SELECTED NAMES SPECIFIED?\n         BO    MAIN20              YES, CONTINUE.\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         LA    R1,1(R1)\n         STH   R1,MEMCNT\n         B     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        MEMBER PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN20   EQU   *\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         LA    R1,1(R1)\n         STH   R1,MEMCNT\n         OI    DIRFLAGS,B'10000000'    FLAG MEMBER 'PROCESSED'\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN21              NO.\n         TM    SWA,SWA5            IS IT EJECT FORMAT\n         BO    MAIN20D             YES.\n         MVC   LINE2(8),=C'0MEMBER='\n         MVC   LINE2+8(8),NAME\n         BAL   R10,LOUT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\n         MVI   LINE2,C'0'\n         B     MAIN21\n         SPACE\nMAIN20D  EQU   *\n         OI    SWD,SWD6            FORCE EJECT FORMAT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVI   LINE2,C'+'\n         BAL   R10,LOUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\nMAIN21   EQU   *\n         TM    SWA,SWA2            LIST DIR ONLY?\n         BO    MAIN00              YES, SKIP PROCESSING\n         TM    SWA,SWA1+SWA3       DECK OUTPUT WITH UPDTE\n         BNO   MAIN30              NO\n* ---- >                 LEAVE OUT DATE AND TIME          BELOW\n*\n*        MVC   CARD+50(L'HEAD1DAT),HEAD1DAT\n*        MVC   CARD+50+L'HEAD1DAT(L'HEAD1TIM),HEAD1TIM\n*\n* ---- >                 LEAVE OUT DATE AND TIME          ABOVE\n         LH    R15,DIRUSERL        ANY USER INFO?\n         CH    R15,=H'4'           (MUST BE 4 BYTES)\n         BNE   *+12                NO, THERE NO SSI     (WAS BL)  .SPF.\n         TM    SWA,SWA6            SSI SPECIFIED?\n         BO    MAIN24              YES.\n         MVC   CARD(L'UPDTE1),UPDTE1  CC WITH NO SSI\n         MVC   CARD+L'UPDTE1(L'NAME),NAME\n         CH    R15,=H'30'          ARE SPF STATS PRESENT          .SPF.\n         BNE   MAIN21A                                            .SPX.\n         TM    DIRUSER+2,X'20'     EXTENDED STATS IN 30 BYTES?    .SPX.\n         BZ    MAIN21B             IF NOT, GOOD STATS             .SPX.\n         B     MAIN24A             TREAT AS NO STATS              .SPX.\nMAIN21A  CH    R15,=H'40'          ARE SPF X STATS PRESENT        .SPX.\n         BNE   MAIN24A             NO, BRANCH                     .SPF.\n         TM    DIRUSER+2,X'20'     EXTENDED STATS IN 40 BYTES?    .SPX.\n         BZ    MAIN24A             IF NOT, TREAT AS NO STATS      .SPX.\nMAIN21B  EQU   *                                                  .SPX.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         BNO   MAIN24A             NO, BRANCH                     .SPF.\n         LA    R15,L'UPDTE1+9+CARD WHERE TO PUT THEM              .SPF.\n         MVI   0(R15),C'-'         HYPHEN TO BE PROPOGATED        .SPF.\n         MVC   1(49,R15),0(R15)    FILL AREA WITH HYPHENS         .SPF.\n         SLR   R0,R0               CLEAR FOR INSERT               .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  0(2,R15),WORK1+6(2)                                .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  2(2,R15),WORK1+6(2)                                .SPF.\n         UNPK  05(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n         UNPK  11(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  17(4,R15),WORK1(3)                                 .SPF.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  22(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  28(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  34(5,R15),WORK1+5(3)                               .SPF.\n*        MVC   40(10,R15),DIRUSER+20   USER ID                   *.SEC.\n*-ID8    MVC   40(07,R15),DIRUSER+20   USER ID (7 BYTES)          .SEC.\n*-ID8    MVI   47(R15),C' '                                       .SEC.\n         MVC   40(08,R15),DIRUSER+20   USER ID (8 BYTES)          .ID8.\n         UNPK  48(3,R15),DIRUSER+3(2)  SECONDS                    .SEC.\n         MVI   50(R15),C' '                                       .SEC.\n         TM    DIRUSER+2,X'20'     EXTENDED STATS?                .SPX.\n         BZ    MAIN24A             BRANCH IF NO                   .SPX.\n         MVC   WORK1(4),DIRUSER+28 CURRENT SIZE                   .SPX.\n         L     R0,WORK1                                           .SPX.\n         CVD   R0,WORK1                                           .SPX.\n         OI    WORK1+7,X'0F'                                      .SPX.\n         UNPK  WORK2,WORK1                                        .SPX.\n         MVC   22(5,R15),WORK2+3                                  .SPX.\n         MVC   51(3,R15),WORK2     COLUMN 73-75                   .SPX.\n         MVC   WORK1(4),DIRUSER+32 INITIAL SIZE                   .SPX.\n         L     R0,WORK1                                           .SPX.\n         CVD   R0,WORK1                                           .SPX.\n         OI    WORK1+7,X'0F'                                      .SPX.\n         UNPK  WORK2,WORK1                                        .SPX.\n         MVC   28(5,R15),WORK2+3                                  .SPX.\n         MVC   54(3,R15),WORK2     COLUMN 76-78                   .SPX.\n         MVC   WORK1(4),DIRUSER+36 LINES MODIFIED                 .SPX.\n         L     R0,WORK1                                           .SPX.\n         CVD   R0,WORK1                                           .SPX.\n         OI    WORK1+7,X'0F'                                      .SPX.\n         UNPK  WORK2,WORK1                                        .SPX.\n         MVC   34(5,R15),WORK2+3                                  .SPX.\n         MVC   57(2,R15),WORK2+1   COLUMN 79-80                   .SPX.\n         B     MAIN24A\n*MAIN24  MVC   CARD(L'UPDTE2),UPDTE2  CC WITH SSI                *.PRC.\n*        MVC   CARD+L'UPDTE2(L'NAME),NAME                        *.PRC.\n*        LA    R15,11+CARD          FORMAT SSI                   *.PRC.\n*                  NEW CODE FOR ADD NAME=MEMBER,SSI=XXXXXXXX      .PRC.\n*                  INSTEAD OF   ADD SSI=XXXXXXXX,NAME=MEMBER      .PRC.\nMAIN24   EQU   *                                                  .PRC.\n         MVC   CARD(L'UPDTE1),UPDTE1                              .PRC.\n         MVC   CARD+L'UPDTE1(L'NAME),NAME                         .PRC.\n         LA    R15,CARD+L'UPDTE1+7 LAST BYTE OF NAME              .PRC.\n         CLI   0(R15),C' '         LOOK FOR LAST NONBLANK         .PRC.\n         BNE   *+8                 BRANCH IF FOUND                .PRC.\n         BCT   R15,*-8             LOOP TO CLI                    .PRC.\n         MVC   1(5,R15),=C',SSI='  APPEND KEYWORD                 .PRC.\n         LA    R15,6(,R15)         POINT PAST KEYWORD             .PRC.\n         LA    R0,4\n         LA    R1,DIRUSER\n         BAL   R10,HEXCON\nMAIN24A  EQU   *\n         BAL   R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR READING\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nMAIN30   EQU   *\n         MVC   TTRK(3),DIRTTR\nMAIN31   EQU   *\n         FIND  SYSLIB,TTRK,C\n         LM    R2,R3,BUFFER1       INIT BUFFERS\n         STM   R2,R3,BFRS\n         XR    R5,R5               CLEAR CURRENT MEM REC CNTR\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BNE   MAIN32              NO.\n         XC    PDSDECB,PDSDECB     YES, ISSUE FIRST READ.\n         READ  PDSDECB,SF,(R8),(R2),MF=E\n         SPACE\n*---------------------------------------------------------------------*\n*        READ IN NEXT BLOCK\n*---------------------------------------------------------------------*\n         SPACE\nMAIN32   EQU   *\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BE    MAIN34              YES.\n         L     R2,BFRS             NO...ISSUE READ\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),'S'\nMAIN34   EQU   *\n         LA    R10,MAIN65 .. SET E.O.F. ADDR\n         CHECK PDSDECB\n         L     R15,PDSDECB+16      COMPUTE LEN OF REC READ\n         LH    R6,DCBBLKSI\n         SH    R6,14(R15)\n         L     R7,BFRS             LOAD PNTR TO DATA\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BNE   MAIN36              NO.\n         L     R2,BFRS+4           YES, INIT NEXT READ\n         ST    R7,BFRS+4\n         ST    R2,BFRS\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),MF=E\nMAIN36   EQU   *\n         TM    SAVRECFM,B'10000000'  RECFM U OR F?\n         BO    MAIN38              YES.\n         LH    R6,0(R7)            NO, MUST BE V ...\n         LA    R7,4(R7)            PROCESS BLOCK DESCRIPTOR\n         SH    R6,=H'4'\nMAIN38   EQU   *\nMAIN40   EQU   *                   RITS/CRBE/CRJE?\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         BZ    MAIN50              NO\n         SPACE\n*---------------------------------------------------------------------*\n*        PROCESS A RITS/CRBE RECORD\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN45              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         BZ    MAIN42              NO\n         CH    R5,MAXLIST          YES, TEST FOR LIMIT.\n         BNL   MAIN45              LIMIT EXCEEDED.\nMAIN42   EQU   *\n         MVC   LINE2+1(8),0(R7)\n         MVC   LINE2+11(80),8(R7)\n         BAL   R10,LOUT            YES, OUTPUT FORMATTED LINE\nMAIN45   EQU   *\n         TM    SWA,SWA1            DECK?\n         BZ    MAIN64              NO.\n         MVC   CARD,8(R7)\n         BAL   R10,PUNCHIT         YES, OUTPUT CARD IMAGE\n         B     MAIN64\n         SPACE\n*---------------------------------------------------------------------*\n*        'LIST' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN50   EQU   *\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN60              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         BZ    MAIN50A             NO\n         CH    R5,MAXLIST          YES, AT LIMIT?\n         BNL   MAIN60              YES, SKIP LISTING\nMAIN50A  EQU   *\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    MAIN51              YES\n         LH    R3,DCBLRECL         RECFM = F OR U.\n         LA    R2,0(R7)\n         B     MAIN52\n         SPACE\nMAIN51   EQU   *\n         MVC   DCBLRECL,0(R7)\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         SH    R3,=H'4'\nMAIN52   EQU   *\n         TM    SWB,SWB1            HEXOUT?\n         BO    MAIN56              YES.\n         TM    SWB,SWB3            IS NUM SPECIFIED?\n         BO    MAIN57              YES.\nMAIN53   EQU   *\n         LR    R15,R3\n         CH    R3,=H'116'\n         BNH   *+8\n         LA    R15,116\n         BCTR  R15,0\n         LA    R1,LINE2+1\n         EX    R15,VARMVC1\nMAIN54   EQU   *\n         LA    R2,116(R2)          OUTPUT OTHER LINES\n         SH    R3,=H'116'\n         BNP   MAIN59              DONE IF NO MORE DATA\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7            TRUNC?\n         BO    MAIN59              YES, QUIT HERE\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN53              NO, LOOP TO CONTINUE OUTPUT\n         SPACE\nMAIN56   EQU   *\n         LA    R15,LINE2+5         OUTPUT LINE IN HEX\n         LR    R0,R3\n         CH    R3,=H'50'           FIFTY BYTES PER LINE\n         BNH   *+8\n         LA    R0,50\n         LR    R1,R2\n         BAL   R10,HEXCON\n         LA    R2,50(R2)           OUTPUT OTHER LINES\n         SH    R3,=H'50'\n         BNP   MAIN59              DONE\n         MVI   LINE2+120,C'*'      FLAG LINE CONTINUATION\n         TM    SWA,SWA7            IS TRUNC SPECIFIED?\n         BO    MAIN59              YES, QUIT.\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN56              LOOP\n         SPACE\nMAIN57   EQU   *\n         SH    R3,=H'8'\n         TM    SAVRECFM,B'10000000' IS IT RECFM=U/F/FB?\n         BO    MAIN57A             YES.\n         MVC   LINE2+1(8),0(R2)    NO, RECFM=V/VB\n         LA    R2,8(0,R2)\n         B     MAIN57B\n         SPACE\nMAIN57A  EQU   *\n         LA    R14,0(R2,R3)\n         MVC   LINE2+1(8),0(R14)\nMAIN57B  EQU   *\n         LA    R1,LINE2+10\n         LR    R15,R3\n         CH    R15,=H'108'\n         BNH   *+8\n         LA    R15,108\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         LA    R2,106(0,R2)\n         SH    R3,=H'106'\n         BNP   MAIN59\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7\n         BO    MAIN59\n         BAL   R10,LOUT\nMAIN58   EQU   *\n         LR    R15,R3\n         LA    R1,LINE2+10\n         CH    R15,=H'106'\n         BNH   *+8\n         LA    R15,106\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         LA    R2,106(0,R2)\n         SH    R3,=H'106'\n         BNP   MAIN59\n         MVI   LINE2+120,C'*'\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN58\n         SPACE\nMAIN59   EQU   *\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE.\n         SPACE\n*---------------------------------------------------------------------*\n*        'DECK' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN60   EQU   *\n         TM    SWA,SWA1            DECK?\n         BZ    MAIN64              NO.\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    MAIN61              YES\n         LH    R3,DCBLRECL         RECFM = U OR F\n         LA    R2,0(R7)\n         B     MAIN62\n         SPACE\nMAIN61   EQU   *\n         MVC   DCBLRECL,0(R7)      RECFM=V/VB\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         SH    R3,=H'4'\nMAIN62   EQU   *\n         LR    R15,R3\n         CH    R3,=H'80'\n         BNH   *+8\n         LA    R15,80\n         BCTR  R15,0\n         EX    R15,VARMVC3\n         TM    SWA,SWA3            UPDTE                          .PRC.\n         BNO   MAIN62A                                            .PRC.\n         CH    R3,=H'80'           IS LRECL=80                    .PRC.\n         BNE   MAIN62A                                            .PRC.\n         CLC   CARD(2),UPDTESUB    IF SUBSITUTE ALREADY THERE     .UPL.\n         BNE   NOTSUB                THEN                         .UPL.\n         TM    SWE,SWE4              IF SYSUPLOG IS OPEN          .UPL.\n         BZ    NOTSUB                   THEN                      .UPL.\n         MVC   UPCARD(8),NAME           PUT MEMBER NAME IN UPCARD .UPL.\n         LA    R15,1(,R5)               LINE NUMBER               .UPL.\n         CVD   R15,WORK1                LINE NUMBER               .UPL.\n         OI    WORK1+7,X'0F'            LINE NUMBER               .UPL.\n         UNPK  UPCARD+9(7),WORK1+4(4)   LINE NUMBER               .UPL.\n         MVC   UPCARD+17(62),CARD    COPY BEGINNING OF CARD IMAGE .SBG.\n         PUT   SYSUPLOG,UPCARD          WRITE RECORD TO SYSUPLOG  .UPL.\nNOTSUB   EQU   *                                                  .UPL.\n         CLC   CARD(2),=C'./'      IS THIS AN UPDTE STATEMENT     .PRC.\n         BNE   MAIN62A                                            .PRC.\n         MVC   CARD(2),UPDTESUB    YES, SUBSTITUTE CHARS          .PRC.\nMAIN62A  EQU   *                                                  .PRC.\n         BAL   R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LOGICAL RECORD\n*---------------------------------------------------------------------*\n         SPACE\nMAIN64   EQU   *\n         LA    R5,1(R5)            UPDATE REC COUNT\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    MAIN32              YES, GO GET NEXT BLOCK.\n         TM    SAVRECFM,B'01000000'  RECFM=V?\n         BZ    *+10                NO\n         MVC   DCBLRECL,0(R7)      YES, USE RECORD DESC. LEN\n         AH    R7,DCBLRECL         UPDATE BUFFER POINTER\n         SH    R6,DCBLRECL         UPDATE BYTES COUNT\n         BP    MAIN40              CONTINUE WITH THIS BLOCK\n         B     MAIN32              GO GET NEXT BLOCK\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF MEMBER OR SDS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN65   EQU   *\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    MAIN70              YES, GO PROCESS IT.\n         ST    R5,WORK2\n         MVC   DIRCRDCT,WORK2\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         BZ    MAIN66              NO\n         TM    SWD,SWD2            SELECT MEMBERS?\n         BNZ   MAIN66              NO.\n         L     R2,CURRENT2+4       YES, UPDATE COUNTS\n         USING NAMTBL,R2\n         MVC   NAMTBL4,DIRPG1\n         MVC   NAMTBL3,DIRCRDCT\n         DROP  R2\nMAIN66   EQU   *\n         CVD   R5,WORK2\n         AL    R5,RECORDS          UPDATE TOTAL REC COUNT\n         ST    R5,RECORDS\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN67              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERISKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG2L),MSG2\n*        ED    LINE2+L'MSG2(L'MSG2A),WORK2+5     5 DIGITS        *.SUM.\n         ED    LINE2+L'MSG2(L'MSG2A),WORK2+4     7 DIGITS         .SUM.\n         BAL   R10,LOUT\nMAIN67   EQU   *\n         TM    SWA,SWA1+SWA3       DECK + UPDTE?                  .ALA.\n         BNO   MAIN67Z             NO.                            .ALA.\n         TM    SWB,SWB5            WANT ./ ALIAS?                 .ALA.\n         BNO   MAIN67Z             NO.                            .ALA.\n         L     R2,NAMETBL1         FIND ALIASES FOR THIS MEMBER   .ALA.\nMAIN67A  CLI   DIRNAME-DIR(R2),X'FF'                              .ALA.\n         BE    MAIN67Z              ..END TBL, NO MORE ALIASES    .ALA.\n         CLC   DIRTTR(3),DIRTTR-DIR(R2)                           .ALA.\n         BNE   MAIN67B                                            .ALA.\n         TM    DIRTTR+3-DIR(R2),ALIAS                             .ALA.\n         BZ    MAIN67B              NOT AN ALIAS                  .ALA.\n         MVC   CARD(L'ALIAS1),ALIAS1  ./ ALIAS NAME=              .ALA.\n         MVC   CARD+L'ALIAS1(L'NAME),DIRNAME-DIR(R2)              .ALA.\n         BAL   R10,PUNCHIT                                        .ALA.\nMAIN67B  LH    R15,DIRUSERL-DIR(R2)                               .ALA.\n         LA    R2,DIRUSER-DIR(R2,R15)                             .ALA.\n         B     MAIN67A                                            .ALA.\nMAIN67Z  EQU   *                                                  .ALA.\n         B     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DSORG=PS DATASET.\n*---------------------------------------------------------------------*\n         SPACE\nMAIN70   EQU   *\n         ST    R5,RECORDS\n         MVC   LINE1+6(8),=8C'*'\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\n         BAL   R10,PRNT\n         BAL   R10,PRNT\n         CVD   R5,WORK2\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN72              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERISKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG9L),MSG9\n*        ED    LINE2+L'MSG9(L'MSG9A),WORK2+5                     *.SUM.\n         ED    LINE2+L'MSG9(L'MSG9A),WORK2+3                      .SUM.\n         BAL   R10,LOUT\nMAIN72   EQU   *\n         MVI   MEMCNT+1,1          \"SDS\" IS ONE MEMBER\n         CVD   R5,WORK2\n         MVC   LINE1(MSG9L),MSG9\n         MVI   LINE1,C' '\n*        ED    LINE1+L'MSG9(L'MSG9A),WORK2+5                     *.SUM.\n         ED    LINE1+L'MSG9(L'MSG9A),WORK2+3                      .SUM.\n         BAL   R10,PRNT\n         A     R5,TOTALREC\n         ST    R5,TOTALREC\n         B     ENDLIB90\n         EJECT\n*----------------------------------------------------------------------\n*        END-OF-LIBRARY\n*----------------------------------------------------------------------\nENDLIB   EQU   *\n         LA    R8,SYSLIB\n         TM    SWD,SWD0            SELECT OR EXCLUDE SPECIFIED?\n         BZ    ENDLIB05            NO\n         TM    SWD,SWD2            SELECT SPECIFIED?\n         BZ    ENDLIB20            YES.\nENDLIB05 EQU   *\n         MVC   CURRENT1,NAMETBL1\n         USING DIR,R4\nENDLIB10 EQU   *\n         L     R4,CURRENT1\n         CLI   DIRNAME,X'FF'\n         BE    ENDLIB80\n         LH    R15,DIRUSERL\n         LA    R1,DIRUSER(R15)\n         ST    R1,CURRENT1\n         TM    SWD,SWD0+SWD2       WAS SYSIN-EXCLUDE SPECIFIED?\n         BNO   ENDLIB12            NO\n         TM    DIRFLAGS,B'10000000'  ..WAS THIS MEMBER SPECIFIED?\n         BZ    ENDLIB10            NO, SKIP IT.\nENDLIB12 EQU   *\n         BAL   R10,LSTDIR\nENDLIB14 EQU   *\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         BZ    ENDLIB10            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),=8C'?'\n         L     R1,NAMETBL1\nENDLIB15 EQU   *\n         CLI   DIRNAME-DIR(R1),X'FF'\n         BE    ENDLIB18\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         BE    ENDLIB17\nENDLIB16 EQU   *\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         B     ENDLIB15\nENDLIB17 EQU   *\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         BO    ENDLIB16\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB18 EQU   *\n         BAL   R10,PRNT\n         B     ENDLIB10\nENDLIB20 EQU   *\n         MVC   CURRENT2,NAMETBL2\n         USING NAMTBL,R2\nENDLIB22 EQU   *\n         L     R2,CURRENT2\n         CLI   NAMTBL,X'FF'\n         BE    ENDLIB80\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         L     R4,NAMTBL2          GET PNTR TO DIR AREA\n         LTR   R4,R4               IS THERE ONE?\n         BNZ   ENDLIB30            YES.\n         MVC   LINE1+6(8),NAMTBL1  NO, ISSUE MSG\n         MVC   LINE1+16(L'MSG3),MSG3\n         BAL   R10,PRNT\n         B     ENDLIB22\n         SPACE\nENDLIB30 EQU   *                   MEMBER FOUND, LIST INFO.\n         MVC   DIRPG1,NAMTBL4\n         MVC   DIRCRDCT,NAMTBL3\n         BAL   R10,LSTDIR\nENDLIB34 EQU   *\n         TM    DIRFLAGS,B'11000000' IS THIS PROCESSED ALIAS?\n         BNO   ENDLIB22            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),=8C'?'\n         L     R1,NAMETBL1\nENDLIB35 EQU   *\n         CLI   DIRNAME-DIR(R1),X'FF'\n         BE    ENDLIB38\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         BE    ENDLIB37\nENDLIB36 EQU   *\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         B     ENDLIB35\n         SPACE\nENDLIB37 EQU   *\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         BO    ENDLIB36\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB38 EQU   *\n         BAL   R10,PRNT\n         B     ENDLIB22\n         SPACE\n*---------------------------------------------------------------------*\n*        ISSUE END OF LIBRARY MESSAGE\n*---------------------------------------------------------------------*\n         SPACE\nENDLIB80 EQU   *\n         MVC   LINE1(MSG1L),MSG1\n         LH    R15,MEMCNT\n         CVD   R15,WORK1\n         ED    LINE1+L'MSG1(L'MSG1A),WORK1+5\n         L     R15,RECORDS\n         CVD   R15,WORK1\n         AL    R15,TOTALREC\n         ST    R15,TOTALREC\n*        ED    LINE1+L'MSG1+L'MSG1A+L'MSG1AX(L'MSG1B),WORK1+4    *.SUM.\n         ED    LINE1+L'MSG1+L'MSG1A+L'MSG1AX(L'MSG1B),WORK1+3     .SUM.\n         BAL   R10,PRNT\nENDLIB90 EQU   *\n         XC    RECORDS,RECORDS\n         XC    MEMCNT,MEMCNT\n         IC    R15,TTRK+3\n         LA    R15,1(R15)\n         STC   R15,TTRK+3\n         B     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-RUN\n*---------------------------------------------------------------------*\n         SPACE\nENDRUN   EQU   *\n         TM    SWB,SWB0            DEBUG?\n         BO    ENDRUN10            YES, BYPASS FREE CORE\n         SPACE\n*---------------------------------------------------------------------*\n*        FREE WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\n         OC    COR2,COR2           MAKE SURE CORE WAS GOTTEN\n         BZ    ENDRUN10            NOT GOTTEN\n         FREEMAIN V,A=COR2\nENDRUN10 EQU   *\n         TM    SWC,SWC3            TERMINATE MODE?\n         BO    ENDRUN11            YES.\n         MVC   LINE1(L'ENDMSG0),ENDMSG0\n         XR    R15,R15\n         IC    R15,TTRK+3\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  LINE1+L'ENDMSG0(2),WORK1+6(2)\n         MVC   LINE1+L'ENDMSG0+2(ENDMSG1L),ENDMSG1\n         L     R15,TOTALREC\n         CVD   R15,WORK1\n*        ED    LINE1+L'ENDMSG0+L'ENDMSG1+2(L'ENDMSG1A),WORK1+4   *.SUM.\n         ED    LINE1+L'ENDMSG0+L'ENDMSG1+2(L'ENDMSG1A),WORK1+3    .SUM.\n         L     R15,COR2+4\n         SRL   R15,10              CONVERT TO 'K'\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         L     R1,COR7\n         AL    R1,COR8\n         SRL   R1,10\n         SR    R15,R1\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7B,WORK1\n         MVC   LINE1+L'ENDMSG0+ENDMSG1L+4(MSG7L2-1),MSG7+1\nENDRUN11 EQU   *\n         BAL   R10,PRNT            OUTPUT FINAL MSG\n         LA    R8,SYSPUNCH         CLOSE ALL DCBS\n         BAL   R10,TERMIO\n         LA    R8,SYSUPLOG         CLOSE ALL DCBS                 .UPL.\n         BAL   R10,TERMIO                                         .UPL.\n         TM    SWB,SWB0            DEBUG?\n         BO    ENDRUN31            YES, SKIP CLOSING SYSLIB\n         LA    R8,SYSLIB\n         CLOSE SYSLIB\nENDRUN31 EQU   *\n         LA    R8,SYSLIST\n         BAL   R10,TERMIO\n         LA    R8,SYSPRINT\n         BAL   R10,TERMIO\n         TM    SWB,SWB0            DEBUG?\n         BZ    ENDRUN99            NO\n         LH    R2,RETCODE          YES, ABEND\n         ABEND (R2),DUMP\nENDRUN99 EQU   *\n         L     R13,4(R13)\n         LH    R15,RETCODE\n         RETURN (14,12),T,RC=(15)\n         EJECT\n*---------------------------------------------------------------------*\n*        FORMAT AND PRINT THE 'SYSPRINT' LINE FOR A MEMBER\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nLSTDIR   EQU   *\n         ST    R10,SAVE10          SAVE CALLER'S RETURN\n         MVC   LINE1+6(8),DIRNAME\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         BZ    LSTDIR03            NO\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\nLSTDIR03 EQU   *\n         LA    R15,LINE1+L'CAPTIONS-12\n         LA    R0,L'DIRTTR\n         LA    R1,DIRTTR\n         BAL   R10,HEXCON\n         LH    R15,DIRUSERL\n         LTR   R15,R15\n         BNP   LSTDIR10\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         BZ    LSTDIR05            NO.\n         LA    R1,LINE1+L'CAPTIONS\n         LA    R2,DIRUSER\n         BAL   R10,RITSINFO\n         B     LSTDIR10\n         SPACE\nLSTDIR05 EQU   *\n         LA    R15,LINE1+L'CAPTIONS\n         LA    R1,DIRUSER\n         LH    R0,DIRUSERL\n         CH    R0,=H'30'           ARE SPF STATISTICS PRESENT     .SPF.\n         BE    LSTDIR06            POSSIBLY                       .SPX.\n         CH    R0,=H'40'           ARE SPF EXT STATS PRESENT      .SPX.\n         BNE   LSTSPFX             NO, BRANCH                     .SPF.\nLSTDIR06 EQU   *                                                  .SPX.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         BNO   LSTSPFX             NO, BRANCH                     .SPF.\n         TM    DIRTTR+3,X'60'      TTR'S IN USER DATA             .SPF.\n         BNZ   LSTSPFX             YES, THIS ISNT SPF DATA        .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  1(2,R15),WORK1+6(2)                                .SPF.\n         MVI   3(R15),C'.'                                        .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  4(2,R15),WORK1+6(2)                                .SPF.\n*        UNPK  11(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n*        MVC   10(2,R15),11(R15)                                  .SPF.\n*        MVI   12(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+4  YYDDD CREATED                  .SPF.\n         L     R0,WORK1            YYDDD CREATED                  .SPF.\n         BAL   R14,JULIAN                                         .SPF.\n         MVC   9(7,R15),WORK1+1                                   .SPF.\n*        UNPK  21(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n*        MVC   20(2,R15),21(R15)                                  .SPF.\n*        MVI   22(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+8  YYDDD LAST MODIFIED            .SPF.\n         L     R0,WORK1            YYDDD LAST MODIFIED            .SPF.\n         BAL   R14,JULIAN                                         .SPF.\n         MVC   19(7,R15),WORK1+1                                  .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  28(4,R15),WORK1(3)                                 .SPF.\n         MVC   27(2,R15),28(R15)                                  .SPF.\n         MVI   29(R15),C':'                                       .SPF.\n         MVI   32(R15),C':'                                       .SEC.\n         UNPK  33(3,R15),DIRUSER+3(2) SECONDS                     .SEC.\n         MVI   35(R15),C' '                                       .SEC.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   *+14                  THEN                         .SPX.\n         MVC   WORK1(4),DIRUSER+32   GET CURRENT SIZE EXTENDED    .SPX.\n         L     R0,WORK1              GET CURRENT SIZE EXTENDED    .SPX\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   32(6,R15),=X'402020202120'                         .SPF.\n*        ED    32(6,R15),WORK1+5                                  .SPF.\n         MVC   35(8,R15),=X'4020202020202120'                     .SPX.\n         ED    35(8,R15),WORK1+4                                  .SPX.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   *+14                  THEN                         .SPX.\n         MVC   WORK1(4),DIRUSER+32   GET INITIAL SIZE EXTENDED    .SPX.\n         L     R0,WORK1              GET INITIAL SIZE EXTENDED    .SPX\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   38(6,R15),=X'402020202120'                         .SPF.\n*        ED    38(6,R15),WORK1+5                                  .SPF.\n         MVC   43(8,R15),=X'4020202020202120'                     .SPX.\n         ED    43(8,R15),WORK1+4                                  .SPX.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   *+14                  THEN                         .SPX.\n         MVC   WORK1(4),DIRUSER+36   GET LINES MODIFIED EXTENDED  .SPX.\n         L     R0,WORK1              GET LINES MODIFIED EXTENDED  .SPX\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   44(6,R15),=X'402020202120'                         .SPF.\n*        ED    44(6,R15),WORK1+5                                  .SPF.\n         MVC   51(8,R15),=X'4020202020202120'                     .SPX.\n         ED    51(8,R15),WORK1+4                                  .SPX.\n*        MVC   52(10,R15),DIRUSER+20   USER ID                    .SPF.\n         MVC   61(10,R15),DIRUSER+20   USER ID                    .SPX.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   SHOWNO                NO. SHOW NO.                  SBG\n         MVC   69(2,R15),=C'  '       USER ID IS ONLY 8 BYTES     .SPX.\n         MVC   71(3,R15),=C'YES'     YES. SHOW YES.                SBG\n         B     SHOWYES                                             SBG\nSHOWNO   MVC   71(3,R15),=C'NO '                                   SBG\nSHOWYES  B     LSTDIR10                                            SBG\n         SPACE\nJULIAN   EQU   *                                                  .SPF.\n         STM   R15,R1,JULIANS                                     .SPF.\n         XC    WORK2,WORK2                                        .SPF.\n         ST    R0,WORK2+4                                         .SPF.\n         CVB   R1,WORK2            CONVERT DATE TO BINARY         .SPF.\n         XR    R0,R0                                              .SPF.\n         D     R0,=F'1000'         TO SEP YEAR AND DAY            .SPF.\n         ST    R1,WORK2            SAVE YEAR                      .SPF.\n         L     R15,=A(MONTHS1)     FOR STD YEAR                   .SPF.\n         TM    WORK2+3,X'03'       LEAP YEAR?                     .SPF.\n         BNZ   *+8                 NO                             .SPF.\n         L     R15,=A(MONTHS2)     FOR LEAP YEAR                  .SPF.\n         XR    R1,R1                                              .SPF.\nJULIANX  EQU   *                                                  .SPF.\n         SH    R0,0(R15)                                          .SPF.\n         BNP   JULIANY                                            .SPF.\n         LA    R1,3(R1)                                           .SPF.\n         LA    R15,2(R15)                                         .SPF.\n         B     JULIANX                                            .SPF.\n         SPACE 1                                                  .SPF.\nJULIANY  EQU   *                                                  .SPF.\n         AH    R0,0(R15)                                          .SPF.\n         MH    R0,=H'10'                                          .SPF.\n         CVD   R0,WORK2            FOR DAY OF MONTH               .SPF.\n         AL    R1,=A(MONTHS3)      FOR MON IN CHARS               .SPF.\n         MVC   WORK1(8),=X'4020204B4B4B2020'                      .SPF.\n         MVC   WORK1+3(3),0(R1)                                   .SPF.\n         MVC   JULIANS+4(1),WORK2+6 DAY OF MONTH DDYYDDDF         .SPF.\n         ED    WORK1(8),JULIANS+4                                 .SPF.\n         CLI   WORK1+1,C' '                                       .SPF.\n         BNE   *+8                                                .SPF.\n         MVI   WORK1+1,C'0'                                       .SPF.\n         LM    R15,R1,JULIANS                                     .SPF.\n         BR    R14                                                .SPF.\n         SPACE 1                                                  .SPF.\nLSTSPFX  EQU   *                                                  .SPF.\n         CH    R0,=H'32'\n         BNH   *+8\n         LA    R0,32\n         BAL   R10,HEXCON\nLSTDIR10 EQU   *\n         TM    SWA,SWA2            LISTDIR ONLY?\n         BO    LSTDIR90            YES\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         BZ    LSTDIR90            NO\n         MVC   WORK1(4),DIRCRDCT\n         L     R1,WORK1\n         CVD   R1,WORK1\n*        MVC   LINE1+24(L'MSG2A),MSG2A                           *.SUM.\n         MVC   LINE1+22(L'MSG2A),MSG2A                            .SUM.\n*        ED    LINE1+24(L'MSG2A),WORK1+5         5 DIGITS        *.SUM.\n         ED    LINE1+22(L'MSG2A),WORK1+4         7 DIGITS         .SUM.\nLSTDIR90 EQU   *\n         BAL   R10,PRNT\n         L     R10,SAVE10\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        UPON ENTRY, R1=A(BUFFER), R2=A(DIRECTORY ENTRY)\n*---------------------------------------------------------------------*\n         SPACE\nRITSINFO EQU   *\n         CLI   DIRUSERL+1,5        CHECK LENGTH OF USER FIELD\n         BL    UNKNOWN             SHORT.\n         MVC   0(L'PAT1,R1),PAT1\n         ED    0(L'PAT1,R1),0(R2)\n         MVC   10(L'PAT1,R1),PAT1\n         ED    10(L'PAT1,R1),3(R2)\n         XC    WORK1,WORK1\n         MVC   WORK1+2(2),6(R2)\n         L     R15,WORK1\n         CVD   R15,WORK1\n         MVC   WORK2,PAT2\n         ED    WORK2,WORK1+4\n         MVC   23(4,R1),WORK2+4\n         TM    SWD,SWD4+SWD5       CRJE?\n         BO    CRJEINFO            YES.\nCRBEINFO EQU   *\n         MVC   42(3,R1),=C'SEQ'\n         TM    9(R2),X'40'         SEQ/NOSEQ?\n         BO    *+10                SEQ.\n         MVC   40(2,R1),=C'NO'\n         MVC   52(4,R1),=C'SCAN'\n         TM    9(R2),X'80'         SCAN/NOSCAN?\n         BO    *+10\n         MVC   50(2,R1),=C'NO'\n         TM    8(R2),X'40'         FORTRAN FILE?\n         BZ    *+12                NO.\n         MVC   30(7,R1),=C'FORTRAN'\n         BR    R10\n         TM    8(R2),X'20'         OTHER FILE?\n         BZ    *+12                NO.\n         MVC   30(5,R1),=C'OTHER'\n         BR    R10\n         TM    8(R2),X'08'         FLIST FILE?\n         BZ    *+12                NO.\n         MVC   30(5,R1),=C'FLIST'\n         BR    R10\n         TM    SWD,SWD5            RITS?\n         BZ    *+20                YES\n         TM    8(R2),X'10'         OBJMOD FILE?\n         BZ    *+12                NO.\n         MVC   30(6,R1),=C'OBJMOD'\n         BR    R10\n         SPACE\nUNKNOWN  EQU   *\n         MVC   30(7,R1),=C'???????'\n         BR    R10\n         SPACE\nCRJEINFO EQU   *\n         CLI   DIRUSERL+1,11       CHECK USER LENGTH\n         BL    CRBEINFO            SHORT...HANDLE AS CRBE\n         LA    R1,30(R1)           POINT AT ATTR AREA OF LINE\n         CRJE  8,B'00100000','DATA,',5,CRJE20\n         CRJE  8,B'00010000','TEXT,',5,CRJE20\n         CRJE  8,B'00001000','DSLIST,',7,CRJE20\n         CRJE  8,B'00000100','CLIST,',6,CRJE20\n         CRJE  8,B'01000001','FORTH,',6,CRJE20\n         CRJE  8,B'01000000','FORTG,',6,CRJE20\n         CRJE  8,B'00000001','FORTE,',6,CRJE20\n         TM    8(R2),B'10000010'   PL1?\n         BNZ   CRJE15              YES.\n         MVC   0(7,R1),=C'???????' NO, UNKNOWN.\n         BR    R10                 QUIT.\n         SPACE\nCRJE15   EQU   *\n         MVC   0(7,R1),=C'PL1(  ,'\n         XR    R15,R15\n         IC    R15,13(R2)          PL1 SORMARGIN\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(2,R1),WORK1(8)\n         IC    R15,14(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  7(2,R1),WORK1(8)\n         LA    R1,10(R1)\n         CRJE  8,B'10000000','C48),',5,CRJE20\n         MVC   0(5,R1),=C'C60),'\n         LA    R1,5(R1)\nCRJE20   EQU   *\n         CRJE  9,B'10000000','SEQ,',4,CRJE21\n         MVC   0(6,R1),=C'NOSEQ,'\n         LA    R1,6(R1)\nCRJE21   EQU   *\n         TM    8(R2),B'11000011'   PL1 OR FORT?\n         BZ    CRJE22              NO...SKIP SCAN\n         CRJE  9,B'01000000','SCAN,',5,CRJE22\n         MVC   0(7,R1),=C'NOSCAN,'\n         LA    R1,7(R1)\nCRJE22   EQU   *\n         MVC   0(4,R1),=C'BLK='\n         LH    R15,20(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(4,R1),WORK1(8)\n         MVC   8(3,R1),=C',K='\n         MVC   11(3,R1),10(R2)\n         BR    R10\n         EJECT\n*---------------------------------------------------------------------*\n*        *** SUBROUTINES ****\n*---------------------------------------------------------------------*\n         SPACE\nVARMVC1  MVC   0(0,R1),0(R2)       FOR PRINTED OUTPUT\nVARMVC3  MVC   CARD(*-*),0(R2)     FOR PUNCHED OUTPUT\n         SPACE\nSAVERC   EQU   *\n         CH    R1,RETCODE          COMPARE TO CURRENT VALUE\n         BNHR  R14                 RETURN IF NOT HIGHER\n         STH   R1,RETCODE          REPLACE WITH NEW VALUE\n         BR    R14\n         SPACE\nTERMINAT EQU   *\n         LA    R13,SAVEAREA        TERMINATE PROCESSING\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BAL   R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         B     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\nPUTMSG   EQU   *\n         MVC   LINECNT1,LINEMAX    FORCE PAGE EJECT\nPUTMSGXX EQU   *\n         ST    R14,SAVE14          SETUP FOR MSG OUTPUT\n         PUT   SYSPRINT,LINE0\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         L     R14,SAVE14          AND FALL THRU TO CLEARBUF\n         BR    R14\n         SPACE\nPUNCHIT  EQU   *\n         PUT   SYSPUNCH,CARD\n         MVI   CARD,C' '\n         MVC   CARD+1(L'CARD-1),CARD\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        TERMINATE I/O:  CLOSE DCB AND FREE BUFFER POOL\n*---------------------------------------------------------------------*\n         SPACE\nTERMIO   EQU   *\n         TM    DCBOFLGS,OFLGS      DCB OPEN?\n         BZR   R10                 NO\n         CLOSE ((R8))              YES, CLOSE THE DCB\n         FREEPOOL  (R8)            AND FREE THE BUFFER POOL\n         BR    R10                 RETURN\n         SPACE\n*---------------------------------------------------------------------*\n*        STANDARD FILES DCB EXIT ROUTINES\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT1 EQU   *\n         LA    R5,3200             FOR SYSIN & SYSPUNCH\n         B     DCBEXITZ\n         SPACE\nDCBEXITA EQU   *\n         LA    R5,3509             FOR SYSPRINT\n         B     DCBEXITZ\n         SPACE\nDCBEXITB EQU   *\n         LH    R5,=Y(7260)         FOR SYSLIST\nDCBEXITZ EQU   *\n         LH    R4,DCBLRECL         GET LRECL\n         CH    R4,DCBBLKSI         BLKSIZE SPECIFIED?\n         BNH   DCBEXITY            YES.\n         STH   R5,DCBBLKSI         NO, USE DEFAULT.\nDCBEXITY EQU   *\n         XR    R2,R2               FORCE MULT BLKSIZE\n         LH    R3,DCBBLKSI\n         DR    R2,R4\n         MH    R3,DCBLRECL\n         STH   R3,DCBBLKSI\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        PDS DATA READ DCB EXIT ROUTINE\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT2 EQU   *\n         MVC   SAVBLKSI,DCBBLKSI   SAVE DCB PARMS\n         MVC   SAVLRECL,DCBLRECL\n         MVC   SAVRECFM,DCBRECFM\n         MVC   SAVBUFNO,DCBBUFNO\n         MVI   DCBBUFNO,0          BUFFERING HANDLED INTERNALLY\n         CLI   SAVBUFNO,0          IS BUFNO SPECIFIED?\n         BNER  R14                 YES.\n         MVI   SAVBUFNO,2          NO, USE DEFAULT.\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-FILE DETECTED ON SYSLIB\n*---------------------------------------------------------------------*\n         SPACE\nPDSEOF   BR    R10                 BETTER BE SET TO GOOD ADDR\n         SPACE\nSYNERR1  EQU   *\n         SYNADAF   ACSMETH=BPAM    PDS-DATA READ I/O ERROR\n         STM   R14,R12,SYNADSAV    SAVE REGS\n         LR    R2,R1               SAVE POINTER TO MESSAGE\n         BAL   R10,PRNT            --OUTPUT CURRENT LINE\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(78),50(R2)\n         BAL   R14,PUTMSG          REDO LASTLINE.\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(L'HEAD2MEM),HEAD2MEM\n         MVC   LINE0+L'LPDS02I+L'HEAD2MEM(8),NAME\n         BAL   R14,PUTMSG\n         LA    R1,8                SET THE RETURN CODE\n         BAL   R14,SAVERC\n         LM    R14,R12,SYNADSAV    RESTORE REGS\n         SYNADRLS\n         TM    SWB,SWB4            EROPT=TERM/ACC?\n         BZ    SYNERR2             FOR TERM.\n         BR    R14                 FOR ACC.\n         SPACE\nSYNERR2  EQU   *\n         LA    R13,SAVEAREA        TERMINATE PROCESSING\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BAL   R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         B     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\n*---------------------------------------------------------------------*\n*        HEX-BINARY TO HEX-CHARACTER CONVERSION ROUTINE\n*        UPON ENTRY, R0=LENGTH OF SOURCE, R1=A(SOURCE), R15=A(TARGET)\n*---------------------------------------------------------------------*\n         SPACE\nHEXCON   EQU   *\n         IC    R14,0(R1)           PROCESS FOUR LSB'S\n         N     R14,=F'15'\n         IC    R14,HEXTBL(R14)\n         STC   R14,1(R15)\n         IC    R14,0(R1)           PROCESS FOUR MSB'S\n         SRL   R14,4\n         IC    R14,HEXTBL(R14)\n         STC   R14,0(R15)\n         LA    R1,1(R1)\n         LA    R15,2(R15)\n         SH    R0,=H'1'            LOOP?\n         BP    HEXCON              YES.\n         BR    R10                 NO, RETURN.\n         SPACE\n*---------------------------------------------------------------------*\n*        OUTPUT A LINE TO SYSPRINT\n*---------------------------------------------------------------------*\n         SPACE\nPRNT     EQU   *\n         LA    R15,LINE1\n         BAL   R14,SETCC\n         LH    R15,LINECNT1\n         LA    R15,0(R15,R1)\n         STH   R15,LINECNT1\n         CH    R15,LINEMAX         AT LIMIT?\n         BNH   PRNTC               NO.\nPRNTA    EQU   *\n         LA    R15,5\n         STH   R15,LINECNT1\n         MVC   HEAD1PAG,PAGEPAT\n         LH    R15,PAGENUM1\n         LA    R15,1(R15)\n         STH   R15,PAGENUM1\n         CVD   R15,WORK1\n         ED    HEAD1PAG,WORK1+4\n         MVC   LINE0(121),HEAD1\n         BAL   R14,PUTMSGXX\n         MVI   LINE0,C'0'\n         TM    SWD,SWD3            INITIAL PAGE?\n         BZ    PRNTB               YES, SKIP CAPTIONS.\n         MVC   LINE0(L'CAPTIONS),CAPTIONS\n         TM    SWD,SWD7            RITS/CRBE?\n         BZ    *+14                NO.\n         MVC   LINE0+L'CAPTIONS(L'RITSCAP),RITSCAP\n         B     *+10\n         MVC   LINE0+L'CAPTIONS(L'USERCAP),USERCAP\n         TM    SWE,SWE1+SWE2       SPF STATS IN THIS PDS          .SPF.\n         BNO   *+10                NO.                            .SPF.\n         MVC   LINE0+L'CAPTIONS(L'SPFSCAP),SPFSCAP                .SPF.\nPRNTB    EQU   *\n         BAL   R14,PUTMSGXX\n         MVI   LINE1,C'0'\nPRNTC    EQU   *\n         MVC   LINE0,LINE1\n         BAL   R14,PUTMSGXX\n         MVI   LINE1,C' '\n         MVC   LINE1+1(L'LINE1-1),LINE1\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        'SYSLIST' OUTPUT S/R\n*---------------------------------------------------------------------*\n         SPACE\nLOUT     EQU   *\n         LA    R15,LINE2\n         BAL   R14,SETCC\n         TM    SWD,SWD6            TEST FORCE EJECT\n         BO    LOUTC               YES.\n         TM    SWA,SWA5            IS THIS 'EJECT' FORMAT\n         BZ    LOUTA               NO\n         AH    R1,LINECNT2         UPDATE LINECOUNT FOR EJECT FORMAT\n         STH   R1,LINECNT2\n         CH    R1,LINEMAX          AT BOTTOM OF PAGE?\n         BNH   LOUTE               NO\n         B     LOUTC               YES, DO PAGE EJECT AND HEADER-2\n         SPACE\nLOUTA    EQU   *\n         LH    R15,LINECNT2\n         LA    R15,0(R1,R15)\n         CLC   =C'0MEMBER=',LINE2  TEST FOR SPECIAL CASE\n         BNE   LOUTA1              NO.\n         LA    R15,2(,R15)         YES, EXTRA PADDING.\nLOUTA1   EQU   *\n         CH    R15,LINEMAX         TEST FOR LIMIT\n         BH    LOUTB               AT LIMIT\n         AH    R1,LINECNT2         UPDATE LINECNT\n         STH   R1,LINECNT2\n         B     LOUTE               AND OUTPUT THE LINE.\n         SPACE\nLOUTB    EQU   *\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         LH    R1,LINECNT2\nLOUTB1   EQU   *\n         CH    R1,LINEMAX\n         BNL   LOUTB2              PADDING DONE, GO OUTPUT HEADER\n         ST    R1,SAVELOUT\n         L     R1,ALISTDCB\n         PUT   (1),LINE0\n         L     R1,SAVELOUT\n         LA    R1,1(,R1)\n         B     LOUTB1\n         SPACE\nLOUTB2   EQU   *\n         MVI   HEAD2,C'0'\n         L     R1,ALISTDCB\n         PUT   (1),HEAD2\n         MVI   HEAD2,C'1'\nLOUTC    EQU   *\n         NI    SWD,255-SWD6        RESET SWITCH\n         LA    R15,3\n         TM    SWA,SWA5            IS THIS NOEJECT FORMAT?\n         BO    *+8                 NO, IT IS EJECT\n         LA    R15,2(,R15)         +2 FOR BOTTOM IN NOEJECT FORMAT\n         STH   R15,LINECNT2\n         MVC   HEAD2NAM,NAME\n         MVC   HEAD2PAG,PAGEPAT\n         LH    R15,PAGENUM2        UPDATE THE PAGE NUMBER\n         LA    R15,1(R15)\n         STH   R15,PAGENUM2\n         CVD   R15,WORK1\n         ED    HEAD2PAG,WORK1+4\n         L     R1,ALISTDCB\n         PUT   (1),HEAD2           OUTPUT THE PAGE HEADER\n         MVI   LINE2,C'-'\nLOUTE    EQU   *\n         L     R1,ALISTDCB\n         PUT   (1),LINE2           OUTPUT THE FORMATTED LINT\n         MVI   LINE2,C' '          THEN CLEAR THE USED LINE WORKAREA\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         BR    R10\n         SPACE\nSETCC    EQU   *\n         CC    4000,0(R15),1,SETCC9\n         CC    0,0(R15),+,SETCC9\n         CC    3,0(R15),-,SETCC9\n         CC    2,0(R15),0,SETCC9\n         LA    R1,1                FORCE 'DEFAULT'\n         MVI   0(R15),C' '\nSETCC9   EQU   *\n         BR    R14\n         SPACE\nGETLOW   EQU   *\n         L     R1,COR4\n         AR    R0,R1\n         C     R0,COR6\n         BNL   GETBAD\n         ST    R0,COR4\n         B     MAXUSED\n         SPACE\nGETHI    EQU   *\n         L     R1,COR6\n         SR    R1,R0\n         C     R1,COR4\n         BNH   GETBAD\n         ST    R1,COR6\n         L     R15,COR5\n         SR    R15,R1\n         C     R15,COR8\n         BNH   *+8\n         ST    R15,COR8\n         BR    R14\n         SPACE\nGETBASE  EQU   *\n         L     R1,COR3\n         AR    R0,R1\n         C     R0,COR5\n         BNL   GETBAD\n         ST    R0,COR3\nRESETLO  EQU   *\n         MVC   COR4,COR3\nMAXUSED  EQU   *\n         L     R15,COR4\n         SR    R15,R1\n         C     R15,COR7\n         BNH   *+8\n         ST    R15,COR7\n         BR    R14\n         SPACE\nRESETHI  EQU   *\n         MVC   COR6,COR5\n         BR    R14\n         SPACE\nGETBAD   EQU   *\n         MVC   LINE0(L'LPDS10I),LPDS10I\n         BAL   R14,PUTMSGXX\n         B     TERMINAT\n         EJECT\n*---------------------------------------------------------------------*\n*        *** STORAGE AREAS, CONSTANTS, ETC. ****\n*---------------------------------------------------------------------*\n         SPACE\nSAVEAREA DC    9D'0'               STD OS SAVE AREA\nWORK1    DC    1D'0'\nWORK2    DC    1D'0'\nSYNADSAV DC    8D'0'               TO SAVE REGS IN SYNAD EXIT\nCOR1     DC    A(10*1024,500*1024)  MIN/MAX SIZE FOR GETMAIN\nCOR2     DC    A(0,0)              RETURNED ADDR AND SIZE\nCOR3     DC    A(*-*)              BOTTOM OF AREA\nCOR4     DC    A(*-*)              START BOTTOM OF VARIABLE AREA\nCOR5     DC    A(*-*)              TOP OF AREA\nCOR6     DC    A(*-*)\nCOR7     DC    A(0)\nCOR8     DC    A(0)\nTIOT     DC    A(0)                POINTER TO TIOT\nBFRS     DC    2A(0)\nSAVELOUT DC    F'0'\nSAVE10   DC    A(0)                TO SAVE REGS 10\nSAVE14   DC    A(0)                TO SAVE REG 14\nBUFFER0  DC    A(0)                PDS BUFFER LENGTH\nBUFFER1  DC    A(0)                PDS BUFFER #1 ADDRESS\nBUFFER2  DC    A(0)                PDS BUFFER #2 ADDRESS\nTTRK     DC    F'0'                FOR FIND/POINT.\nECB      DC    F'0'\nIOB      DC    0F'0',X'42',X'000000',A(ECB)\nCSW      DC    XL8'0'\nACP      DC    A(*-*),A(SYSLIB)\n         DC    A(0),Y(0,0)\nMBB      DC    XL3'0'\nCCHHR    DC    XL5'0'\nRECORDS  DC    F'0'                COUNT OF TOTAL RECORDS IN LIB\nTOTALREC DC    F'0'                TOTAL NO. OF LRECL PROCESSED\nALCB     DC    A(*-*)\nALISTDCB DC    A(SYSLIST)\nNAMETBL1 DC    A(0)                POINTER TO DIRECTORY TABLE\nNAMETBL2 DC    A(0)                POINTER TO SELECTED NAMES\nCURRENT1 DC    2A(0)               PNTRS TO NAMETBL1 CURRENT\nCURRENT2 DC    2A(0)               PNTRS TO NAMETBL2 CURRENT\nDSCB     CAMLST SEARCH,DSNAME,VOLSER,WORKAREA\n         DC    0D'0'\nWORKAREA DC    XL160'00'           OBTAIN'S WORKAREA\nDSNAME   DC    CL44' '\nVOLSER   DC    CL6' '\nSWITCHES DC    XL5'00'             RUN SWITCHES AND FLAGS         .PRC.\n         ORG   *-5                                                .PRC.\nSWA      DS    X\nSWB      DS    X\nSWC      DS    X\nSWD      DS    X\nSWE      DS    X                                                  .PRC.\n         ORG   ,\nEXLST1   DC    0F'0',X'85',AL3(DCBEXIT1)     SYSIN & SYSPUNCH\nEXLSTA   DC    0F'0',X'85',AL3(DCBEXITA)     SYSPRINT\nEXLSTB   DC    0F'0',X'85',AL3(DCBEXITB)     SYSLIST\nEXLST2   DC    0F'0',X'05',AL3(DCBEXIT2)     FOR PDS DCB\nJFCBADRS DC    X'80',AL3(*-*)\nSAVBLKSI DC    H'0'\nSAVLRECL DC    H'0'\nSAVRECFM DC    X'00'\nSAVBUFNO DC    AL1(0)\nRETCODE  DC    H'0'                RETURN CODE\nPAGENUM1 DC    H'0'                CURRENT SYSPRINT PAGE NUMBER\nPAGENUM2 DC    H'0'                CURRENT SYSLIST  PAGE NUMBER\nLINECNT1 DC    H'0'                CURRENT SYSPRINT LINE NUMBER\nLINECNT2 DC    H'0'                CURRENT SYSLIST  LINE NUMBER\nLINEMAX  DC    H'0'                MAXIMUM LINE NUMBER\nMAXDIR   DC    H'0'\nMAXLIST  DC    H'0'\nMEMCNT   DC    H'0'\n         DC    0F'0'\nNAME2    DC    CL8' '              ALIAS NAME\nNAME     DC    CL8' '              MEMBER NAME\nDDPRINT  DC    CL8'&DDPRINT'       SYSPRINT\nDDLIST   DC    CL8'&DDLIST'        SYSLIST\nDDPUNCH  DC    CL8'&DDPUNCH'       SYSPUNCH\nDDLIB    DC    CL8'&DDLIB'         SYSLIB\nDDIN     DC    CL8'&DDIN'          SYSIN\nDDUPLOG  DC    CL8'&DDUPLOG'       SYSUPLOG                       .UPL.\nSWAX     DC    B'&A(1)&A(2)&A(3)&A(4)&A(5)&A(6)&A(7)&A(8)'\nSWBX     DC    B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'\nSWEX     DC    B'&E(1)&E(2)&E(3)&E(4)&E(5)&E(6)&E(7)&E(8)'        .PRC.\nUPDTE1   DC    C'./ ADD NAME='\nUPDTE2   DC    C'./ ADD SSI=00000000,NAME='\nUPDTESUB DC    C'><'                                              .PRC.\nALIAS1   DC    C'./ ALIAS NAME='                                  .ALA.\nPAT1     DC    X'4021204B202020'\nPAT2     DC    X'4020202020202120'\nJULIANS  DC    3F'0'\nCARD     DC    CL80' '\nUPCARD   DC    CL80' '                                            .UPL.\nLINE0    DC    CL133' '\nLINE1    DC    CL133' '\nLINE2    DC    CL133' '\n         DC     0D'0'\n         LTORG\nMONTHS1  DC    Y(31,28,31,30,31,30,31,31,30,31,30,31)\nMONTHS2  DC    Y(31,29,31,30,31,30,31,31,30,31,30,31)\nMONTHS3  DC    C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\n*        DC    C' **** &ID - LISTPDS &VERSION (&RELEASE) ****'   *.PRC.\n*        DC    C' **** GSFC - LISTPDS 7.3 (27MAR78) ****'         .PRC.\nHEAD1VER DC    C' ----------  LISTPDS  8.4  ----------- '         .PRC.\nHEXTBL   DC    CL16'0123456789ABCDEF'\nHEAD1    DC    C' '                SYSPRINT HEADING\nHEAD1DAT DC    CL8' '\nHEAD1TIM DC    CL9' '\nHEAD1C1  DC    CL7' '\nHEAD1VOL DC    CL6' '\nHEAD1C2  DC    CL6' '\nHEAD1DSN DC    CL44' ',C'   '\n         ORG   *-69                                               .PRC.\nHEDD1DSN DC    CL(4+44+8+6+7)' -- '      DSN -- VOL=XXXXXX        .PRC.\nHEAD1MEM DC    CL7' '  ... MEMBER= ON SYSLIST\nHEAD1NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         DC    CL10' ',C'PAGE'\nHEAD1PAG DC    CL8' '\nHEAD1R   DC    X'F14021204B4B4B20204021204B20204B2020'\nHEAD1C1R DC    CL7' - VOL='\nHEAD1C2R DC    CL6', DSN='\nHEAD2    DC    C'1'                SYSLIST HEADING\nHEAD2DAT DC    CL8' '\nHEAD2TIM DC    CL9' ',C' - VOL='\nHEAD2VOL DC    CL6' ',C', DSN='\nHEAD2DSN DC    CL44' ',C'   '\nHEAD2MEM DC    CL7'MEMBER='  ... MEMBER= ON SYSLIST\nXEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         ORG   *-84                                               .PRC.\n         DC    CL4' -- '                                          .PRC.\nHEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST                 .PRC.\nHEDD2DSN DC    CL72' -- '                                         .PRC.\n         DC    CL10' ',C'PAGE'\nHEAD2PAG DC    CL8' '\n*AGEPAT  DC    X'4020202020202120'                               *.PRC.\nPAGEPAT  DC    X'4020202020202020'                                .PRC.\nCAPTIONS DC    C'-     NAME       PAGE   RECORDS    T T R C    '\nRITSCAP  DC    C' CREATED  MODIFIED  ACCESSED  ATTRIBUTES'\nUSERCAP  DC    C'USER INFORMATION (HEX)'\n*PFSCAP  DC        C'VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MOD\n*                  ID'                                            .SPF.\n*                     01.00    YY/DDD    YY/DDD HH:MM  XXXX  XXXX  XXXX\n*                USERID                                           .SPF.\nSPFSCAP  DC        C'VER.MOD  CREATED      LAST MODIFIED    SIZE    INI+\n               T     MOD    ID    XTATS'                          .SPX.\n*                     01.00    YY/DDD    YY/DDD HH:MM:SS XXXXXXX XXXXXX\n*              X XXXXXXX  USERID                                  .SPX.\nLPDS01I  DC    C'0LPDS01I  DIRECTORY I/O ERROR - '\nLPDS02I  DC    C' LPDS02I  PDS DATA READ ERROR - '\nLPDS03I  DC    C'0LPDS03I  EXECUTION ABORTED.'\nLPDS04I  DC    C'0LPDS04I  OPEN ERROR FOR '\nLPDS05I  DC    C'0LPDS05I  WARNING--PARAMETER SPECIFICATION ERROR'\nLPDS06I  DC        C'0LPDS06I  INVALID DCB SPECIFICATIONS FOR &DDLIB DD+\n               .  '\nLPDS06I0 DC    C' NOT SUPPORTED.'\nLPDS06I1 DC    C'MACHINE CONTROL CHARACTERS'\nLPDS06I2 DC    C'VARIABLE SPANNED RECORDS'\nLPDS06I3 DC    C'TRACK OVERFLOW'\nLPDS06IA DC    C'BLKSIZE INVALID.'\nLPDS06IB DC    C'INVALID RECFM.'\nLPDS07I  DC        C'0LPDS07I WARNING--RITS/CRBE/CRJE PROCESSING DELETED\n               ,  LIBRARY DCB PARMS NOT COMPATABLE.'\nLPDS08I  DC    C'0LPDS08I  ERROR--PDS DIRECTORY NOT STANDARD FORMAT.'\nLPDS09I  DC    C'0LPDS09I  UNABLE TO OPEN ',CL8' '\n         DC    C'.  OPTION DELETED.'\nLPDS09IL EQU   *-LPDS09I\nLPDS10I  DC    C'0LPDS10I  WORKAREA EXCCEEDED .. RAISE REGION'\nLPDS11I  DC    C'0LPDS11I ONLY DSORG=PS OR DSORG=PO ARE VALID'\nMSG1     DC    C'0*** END OF LIBRARY *** '\nMSG1A    DC    X'402020202120'\nMSG1AX   DC    C' MEMBERS PROCESSED WITH A TOTAL OF'\n*SG1B    DC    X'4020202020202120',C' RECORDS'         7 DIGITS  *.SUM.\nMSG1B    DC    X'40202020202020202120',C' RECORDS'     9 DIGITS   .SUM.\nMSG1L    EQU   *-MSG1\nMSG2     DC    C'0*** END OF MEMBER *** '\n*SG2A    DC    X'402020202120',C' RECORDS PROCESSED   '      5   *.SUM.\nMSG2A    DC    X'4020202020202120',C' RECORDS PROCESSED   '  7    .SUM.\nMSG2L    EQU   *-MSG2\nMSG3     DC    C'****  MEMBER NOT FOUND IN LIBRARY'\nMSG4     DC    C'****  IS AN ALIAS FOR '\nMSG5     DC    C'****  ABOVE MEMBER IS AN ALIAS FOR '\nMSG6     DC    C'0SPECIFIED PARMS --'\nMSG7     DC    C'0WORKAREA SIZE: '\nMSG7A    DC    C'XXX',C'K'\nMSG7L1   EQU   *-MSG7\n         DC    C',  NEVER USED: '\nMSG7B    DC    C'XXX',C'K'\nMSG7L2   EQU   *-MSG7\nMSG8     DC    C'-LIBRARIES:'\nMSG9     DC    C'0*** END OF SEQUENTIAL DATASET *** '\n*SG9A    DC    X'402020202120',C' RECORDS PROCESSED   '        5 *.SUM.\nMSG9A    DC    X'40202020202020202120',C' RECORDS PROCESSED   ' 9 .SUM.\nMSG9L    EQU   *-MSG9\nENDMSG0  DC    C'0*** END OF RUN ***   '\nENDMSG1  DC    C' LIBRARIES PROCESSED WITH A TOTAL OF'\n*NDMSG1A DC    X'4020202020202120',C' RECORDS.'      7 DIGITS    *.SUM.\nENDMSG1A DC    X'40202020202020202120',C' RECORDS.'  9 DIGITS     .SUM.\nENDMSG1L EQU   *-ENDMSG1\nENDMSG2  DC    C' *** OPTIONS IN EFFECT *** '\nENDMSG3  DC    C'SPECIFIED-MEMBERS'\n         SPACE\n*---------------------------------------------------------------------*\n*        DCB'S FOR LISTPDS\n*---------------------------------------------------------------------*\n         SPACE\n         PRINT NOGEN\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPRINT,                +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTA\nSYSLIST  DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDLIST,                 +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTB\nSYSPUNCH DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPUNCH,                +++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\nSYSLIB   DCB   DSORG=PO,MACRF=(R),DDNAME=&DDLIB,EODAD=PDSEOF,      +++++\n               SYNAD=SYNERR1,NCP=1,EXLST=EXLST2\nSYSIN    DCB   DSORG=PS,MACRF=(R),DDNAME=&DDIN,EODAD=BLDSEL90,    ++++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\nSYSUPLOG DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDUPLOG,                +++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n         DCBD  DSORG=(PS,PO),DEVD=(DA)\n         EJECT\nLISTPDS  CSECT ,\n         SPACE\n*---------------------------------------------------------------------*\n*         PARAMETER ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\n         USING PA,R6\nPA       L     R2,0(R4)\n         LH    R1,0(R2)\n         LA    R2,2(R2)            BEGINNING OF STRING\n         LTR   R3,R1               ANY PARMS SEPECIFIED?\n         BZ    PGMINITA            NO PARMS...CONTINUE INIT\n         MVC   LINE1(L'MSG6),MSG6\n         BAL   R10,PRNT\n         LA    R1,LINE1+10\n         LR    R15,R3\n         CH    R15,=H'110'\n         BL    *+8\n         LA    R15,110\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         BAL   R10,PRNT\n         LA    R3,0(R2,R3)         END OF STRING\nPALOOP   CR    R2,R3               END OF PARMS?\n         BNL   PGMINITA            YES, GOTO COMPLETE INIT\n         CLI   0(R2),C','          NULL PARM?\n         BE    PAEND               YES.\n         CLC   =C'LINECNT=',0(R2)\n         BE    PA15\n         CLC   =C'EROPT=',0(R2)\n         BE    PA22\n         CLC   =C'MAXLIST=',0(R2)\n         BE    PA10\n         PACL  LISTDIR,7,OI,SWA,SWA2,NI,SWA,255-SWA0\n         PACL  DEBUG,5,OI,SWB,SWB0\n         PACL  NODEBUG,7,NI,SWB,255-SWB0\n         PACL  LIST,4,OI,SWA,SWA0\n         PACL  NOLIST,6,NI,SWA,255-SWA0\n         PACL  DECK,4,OI,SWA,SWA1\n         PACL  NODECK,6,NI,SWA,255-SWA1\n         PACL  UPDTE,5,OI,SWA,SWA3\n         PACL  NOUPDTE,7,NI,SWA,255-SWA3\n         PACL  ALIAS,5,OI,SWB,SWB5                                .ALA.\n         PACL  NOALIAS,7,NI,SWB,255-SWB5                          .ALA.\n         PACL  SSI,3,OI,SWA,SWA6\n         PACL  NOSSI,5,NI,SWA,255-SWA6\n         PACL  RITS,4,NI,SWD,255-SWD5,OI,SWD,SWD4\n         PACL  CRBE,4,NI,SWD,255-SWD4,OI,SWD,SWD5\n         PACL  CRJE,4,OI,SWD,SWD4+SWD5\n         PACL  TRUNC,5,OI,SWA,SWA7\n         PACL  NOTRUNC,7,NI,SWA,255-SWA7\n         PACL  HEXOUT,6,OI,SWB,SWB1\n         PACL  NOHEXOUT,8,NI,SWB,255-SWB1\n         PACL  NUM,3,OI,SWB,SWB3\n         PACL  NONUM,5,NI,SWB,255-SWB3\n         PACL  EJECT,5,OI,SWA,SWA5\n         PACL  NOEJECT,7,NI,SWA,255-SWA5\n         PACL  SELECT,6,NI,SWD,255-SWD2\n         PACL  EXCLUDE,7,OI,SWD,SWD2\n         PACL  SEL,3,OI,SWE,SWE0                                  .SEL.\n         PACL  NOSEL,5,NI,SWE,255-SWE0                            .SEL.\n         PACL  SPF,3,OI,SWE,SWE1                                  .SPF.\n         PACL  NOSPF,5,NI,SWE,255-SWE1                            .SPF.\n         OI    SWC,SWC0              FLAG BAD KEYWORK\nPABAD    CLI   0(R2),C','            FIND NEXT KEYWORK\n         BE    PALOOP\n         LA    R2,1(,R2)\n         CR    R2,R3\n         BL    PABAD\nPAERROR  OI    SWC,SWC0            FLAG PARM ERROR\n         B     PGMINITA            AND GOTO COMPLETE INIT.\nPAEND    CLI   0(R2),C','          COMMA?\n         BNE   PALOOP              NO, LOOP.\n         LA    R2,1(R2)            YES, BUMP OVER IT.\n         B     PALOOP\nPA10     LA    R2,8(,R2)\n         XR    R15,R15\n         CR    R2,R3\n         BNL   PAERROR\nPA10A    CR    R2,R3\n         BNL   PA10B\n         CLI   0(R2),C','\n         BE    PA10B\n         CLI   0(R2),C'0'\n         BL    PAERROR\n         CLI   0(R2),C'9'\n         BH    PAERROR\n         MH    R15,=H'10'\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,=F'15'           AND MASK OFF HIGH BITS\n         LA    R15,0(R1,R15)\n         LA    R2,1(R2)\n         B     PA10A\nPA10B    N     R15,=F'32767'\n         STH   R15,MAXLIST\n         OI    SWA,SWA4            FLAG MAXLIST= SPECIFIED.\n         B     PAEND\nPA15     LA    R2,8(R2)            LINECNT\n         XR    R15,R15\n         CR    R2,R3\n         BNL   PAERROR\nPA15A    CR    R2,R3\n         BNL   PA15B\n         CLI   0(R2),C','\n         BE    PA15B\n         CLI   0(R2),C'0'\n         BL    PAERROR\n         CLI   0(R2),C'9'\n         BH    PAERROR\n         MH    R15,=H'10'\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,=F'15'           AND MASK OFF HIGH BITS\n         LA    R15,0(R1,R15)\n         LA    R2,1(R2)\n         B     PA15A\nPA15B    N     R15,=F'32767'\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         B     PAEND\nPA22     LA    R2,6(R2)            EROPT=\n         PACL  TERM,4,NI,SWB,255-SWB3\n         PACL  ACC,3,OI,SWB,SWB4\n         B     PAERROR\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE RUN OPTIONS\n*---------------------------------------------------------------------*\n         SPACE\n         USING PRMLST,R6\nPRMLST   TM    SWC,SWC0            PARM ERROR?\n         BZ    PRMLST0         ... NO\n         MVC   LINE1(L'LPDS05I),LPDS05I\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\nPRMLST0  MVI   LINE1,C'-'\n         BAL   R10,PRMLSTXZ\n         P1    SWB,SWB0,DEBUG,5\n         P1    SWA,SWA2,LISTDIR,7\n         TM    SWD,SWD4+SWD5          RITS/CRBE/CRJE\n         BZ    PRMLST20               NO\n         BO    PRMLST19               YES, CRJE\n         P1    SWD,SWD4,RITS,4\n         P1    SWD,SWD5,CRBE,4\n         B     PRMLST20\nPRMLST19 P1    SWD,SWD4+SWD5,CRJE,4\nPRMLST20 TM    SWA,SWA2               LISTDIR?\n         BO    PRMLST50            YES\n         P2    SWA,SWA0,LIST,4\n         P2    SWB,SWB3,NUM,3\n         P2    SWA,SWA5,EJECT,5\n         P2    SWA,SWA7,TRUNC,5\n         P2    SWB,SWB1,HEXOUT,6\n         P2    SWA,SWA1,DECK,4\n         P2    SWA,SWA3,UPDTE,5\n         P2    SWA,SWA6,SSI,3\n         P2    SWE,SWE1,SPF,3                                    JDM1\nPRMLST50 MVC   0(8,R2),=C'LINECNT='\n         LH    R1,LINEMAX\n         LA    R1,1(,R1)                                          .LCT.\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CH    R1,=H'999'\n         BNH   *+14\n         UNPK  8(5,R2),WORK1\n         LA    R2,2(,R2)\n         LA    R2,11(,R2)\n         BAL   R10,PRMLSTXX\n         TM    SWA,SWA4\n         BZ    PRMLST55\n         MVC   0(8,R2),=C'MAXLIST='\n         LH    R1,MAXLIST\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CH    R1,=H'999'\n         BNH   *+14\n         UNPK  8(5,R2),WORK1\n         LA    R2,2(,R2)\n         LA    R2,11(,R2)\n         BAL   R10,PRMLSTXX\nPRMLST55 MVC   0(6,R2),=C'EROPT='\n         MVC   6(3,R2),=C'ACC'\n         TM    SWB,SWB4\n         BZ    *+14\n         MVC   6(4,R2),=C'TERM'\n         LA    R2,1(,R2)\n         LA    R2,9(,R2)\n         TM    SWD,SWD0            SELECTED MEMBERS?\n         BZ    PRMLST60\n         BAL   R10,PRMLSTXX\n         P1    SWD,SWD2,SELECT,6,BR=BO\n         P1    SWD,SWD2,EXCLUDE,7\n         MVC   0(L'ENDMSG3,R2),ENDMSG3\n         LA    R2,L'ENDMSG3(,R2)\nPRMLST60 BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE LCB INFO\n*---------------------------------------------------------------------*\n         SPACE\n         MVC   LINE1(L'MSG8),MSG8\n         BAL   R10,PRNT\n         MVI   LINE1,C'0'\n         XR    R3,R3         INIT LIB COUNT\n         L     R2,ALCB\n         USING LCB,R2\nLCBLST00 CLI   LCB,X'FF'\n         BE    LCBLST90\n         LA    R3,1(,R3)   INCR LIB COUNT\n         CVD   R3,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  LINE1+5(2),WORK1\n         MVI   LINE1+8,C'-'\n*        MVC   LINE1+10(4),=C'VOL='                              *.PRC.\n*        MVC   LINE1+14(6),LCBVOLNO                              *.PRC.\n*        MVC   LINE1+22(4),=C'DSN='                              *.PRC.\n*        MVC   LINE1+26(44),LCBDSNAM                             *.PRC.\n         MVC   LINE1+10(44),LCBDSNAM                              .PRC.\n         MVC   LINE1+58(6),LCBVOLNO                               .PRC.\n         MVC   LINE1+72(8),=C'DSORG=??'\n         TM    LCBDS1DS,B'10000000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'IS'\n         TM    LCBDS1DS,B'01000000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'PS'\n         TM    LCBDS1DS,B'00100000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'DA'\n         TM    LCBDS1DS,B'00000010'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'PO'\n         MVC   LINE1+82(7),=C'RECFM=?'\n         TM    LCBDS1RF,B'11000000'  FILL IN THE RECFM\n         BO    LCBLST32\n         BZ    LCBLST33\n         TM    LCBDS1RF,B'01000000'   V?\n         BO    LCBLST31               YES\n         MVI   LINE1+88,C'F'\n         B     LCBLST33\nLCBLST31 MVI   LINE1+88,C'V'\n         B     LCBLST33\nLCBLST32 MVI   LINE1+88,C'U'\nLCBLST33 TM    LCBDS1RF,B'00010000'\n         BZ    *+8\n         MVI   LINE1+89,C'B'\n         TM    LCBDS1RF,B'00001000'\n         BZ    *+8\n         MVI   LINE1+90,C'S'\n         TM    LCBDS1RF,B'00100000'\n         BZ    *+8\n         MVI   LINE1+90,C'T'\n         TM    LCBDS1RF,B'00000100'\n         BZ    *+8\n         MVI   LINE1+91,C'A'\n         TM    LCBDS1RF,B'00000010'\n         BZ    *+8\n         MVI   LINE1+91,C'M'\nLCBLST50 MVC   LINE1+94(6),=C'LRECL='\n         LH    R1,LCBDS1LR\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+100(5),WORK1                                *.PRC.\n         LA    R1,LINE1+100                                       .PRC.\n         MVC   0(7,R1),=X'40202020212040'                         .PRC.\n         ED    0(6,R1),WORK1+5                                    .PRC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         BNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         B     *-14                BACK TO CLI                    .PRC.\n         MVC   LINE1+107(8),=C'BLKSIZE='\n         LH    R1,LCBDS1BL\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+115(5),WORK1                                *.PRC.\n         LA    R1,LINE1+115                                       .PRC.\n         MVC   0(7,R1),=X'40202020212040'                         .PRC.\n         ED    0(6,R1),WORK1+5                                    .PRC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         BNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         B     *-14                BACK TO CLI                    .PRC.\n         BAL   R10,PRNT\n         LA    R2,LCBEND\n         B     LCBLST00\n         DROP  R2\nLCBLST90 EQU   *\n*\n         OI    SWD,SWD3            TURN OFF FIRST TIME SW\n         MVC   HEAD1C1,HEAD1C1R\n         MVC   HEAD1C2,HEAD1C2R\n         B     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        *** INITIALIZATION COMPLETE ****\n*---------------------------------------------------------------------*\n         SPACE\nPRMLSTXX CR    R2,R3\n         BNL   PRMLSTXY\n         MVI   0(R2),C','\n         LA    R2,1(,R2)\n         BR    R10\nPRMLSTXY ST    R10,SAVE10\n         BAL   R10,PRNT\n         L     R10,SAVE10\nPRMLSTXZ MVC   LINE1+3(L'ENDMSG2),ENDMSG2\n         LA    R2,L'ENDMSG2+LINE1+4\n         LA    R3,LINE1+70\n         BR    R10\n*\n         DC    0D'0'\n         LTORG\n         EJECT\n*---------------------------------------------------------------------*\n*        DEFINE THE DSECT'S HERE\n*---------------------------------------------------------------------*\n         SPACE\nLCB      DSECT ,\nLCBDSNAM DC    CL44' '             LIBRARY'S DATASET NAME\nLCBVOLNO DC    CL6' '              LIBRARY'S VOLUME SERIAL\nLCBJFCDS DC    X'00'               JFCB DSORG\nLCBJFCRF DC    X'00'               JFCB RECFM\nLCBJFCLR DC    H'0'                JFCB LRECL\nLCBJFCBL DC    H'0'                JFCB BLKSIZE\nLCBDS1DS DC    X'00'               DSCB DSORG\nLCBDS1RF DC    X'00'               DSCB RECFM\nLCBDS1LR DC    H'0'                DSCB LRECL\nLCBDS1BL DC    H'0'                DSCB BLKSIZE\nLCBDIR   DC    H'0'                MAX DIR-BLKSIZE/TRK ON THIS VOL\nLCBEND   DC    0F'0'\nLCBLEN   EQU   LCBEND-LCB\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nDIR      DSECT\nDIRCRDCT DC    XL4'0'              RECORD COUNT\nDIRPG1   DC    H'0'                PAGE NUMBER\nDIRFLAGS DC    B'00000000'         FLAGS\n         DC    X'00'               NOT USED\nDIRUSERL DC    H'0'                LENGTH OF USER DATA\nDIRNAME  DC    CL8' '              MEMBER NAME\nDIRTTR   DC    XL4'0'\nDIRUSER  EQU   *\nDIREND   EQU   *\nDIRLEN   EQU   *-DIR    ... PLUS LEN OF 'USER DATA'\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nNAMTBL   DSECT\nNAMTBL1  DC    CL8' '\nNAMTBL2  DC    A(*-*)\nNAMTBL3  DC    F'0'\nNAMTBL4  DC    H'0'\nNAMTBL5  DC    H'0'\nNAMTBLXX EQU   *-NAMTBL\n         SPACE\n         DC    0D'0'\n         END   LISTPDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTPDS$": {"ttr": 4619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x03\\x01\\x15(\\x7f\\x01\\x17\\x03/\\x14\\x01\\x00\\x1d\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2015-10-14T00:00:00", "modifydate": "2017-02-01T14:01:03", "lines": 29, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE093\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE093(LISTPDS)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   LISTPDS\n SETSSI  CB493093\n NAME    LISTPDS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTPDS1": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x08\\x12\\x005\\x00\\x933\\x0f\\x01\\x15)O\\x115\\x0b\\xd5\\x0b\\xa1\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xc9\\xe4\\xe2@@@'", "ispf": {"version": "08.18", "flags": 0, "createdate": "1993-11-26T00:00:00", "modifydate": "2015-10-21T11:35:35", "lines": 3029, "newlines": 2977, "modlines": 0, "user": "PREVIUS"}, "text": "LPDS TITLE 'LISTPDS  --  LIST PARTITIONED DATA SET UTILITY PROGRAM'\n*\n*  THIS VERSION DOES NOT PUT A DATE-TIME STAMP INTO A GENERATED\n*  ./ ADD NAME=MEMBER   IEBUPDTE CARD, WHEN NO ISPF STATISTICS\n*  ARE PRESENT FOR THE MEMBER.  THE REASON IS THAT IF YOU CUT\n*  TWO CBT TAPES AT DIFFERENT TIMES, THEN THEY WILL BE DIFFERENT\n*  IN AN INSIGNIFICANT WAY, AND THEY CANNOT BE PROPERLY COMPARED\n*  TO EACH OTHER, EVEN IF IDENTICAL DATA WAS USED TO CREATE BOTH.\n*\n*---------------------------------------------------------------------*\n*\n* TITLE - LIST PARTITIONED DATA SET UTILITY PROGRAM\n*\n* NAME - LISTPDS,  ENTRY POINT - LISTPDS\n*\n* STATUS - VERSION 7.3,  UPDATED 27MAR78\n*          VERSION 7.3A  UPDATED 04DEC81\n*                        AIR FORCE DATA SERVICES CENTER, THE PENTAGON.\n*                        BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*          VERSION 8.0   UPDATED 01JAN94\n*                        FINANCIAL MANAGEMENT SERVICE, US TREASURY\n*                        JIM MARSHALL, CAPT, USAF-RET\n*          VERSION 8.1   UPDATED 16OCT15                          .UPL.\n*\n* DEVELOPED BY . . .\n*       GENE CZARCINSKI\n*       NASA/GODDARD SPACE FLIGHT CENTER\n*       GREENBELT, MARYLAND\n*\n* FUNCTION/OPERATION - \"LISTPDS\" IS AN OS/360 DATA SET UTILITY\n*       PROGRAM FOR LISTING AND/OR PUNCHING SOURCE/OBJECT LIBRARIES\n*       (PARTITIONED DATA SETS).  ALL MEMBERS PROCESSED BY LISTPDS\n*       ARE ALWAYS OUTPUTTED IN COLLATING SEQUENCE (EXCEPT WHEN\n*       SELECTED MEMBERS ARE PROCESSED).  LISTPDS GENERATES\n*       TWO FORMATTED PRINTOUTS -\n*          1. (ON SYSPRINT) A FORMATTED LISTING OF THE PDS'S\n*             DIRECTORY TOGETHER WITH THE PAGE NUMBERS OF THE\n*             OUTPUT LISTING (FOR EACH MEMBER).\n*          2. (ON SYSLIST) A FORMATTED PRINTOUT OF THE CONTENTS\n*             OF EACH MEMBER PROCESSED.\n*\n*---------------------------------------------------------------------*\n*\n* ATTRIBUTES - ENABLED, SERIALLY REUSABLE, BLOCK LOADED,\n*       SINGLE LOAD MODULE, NO OVERLAY.\n*\n* ACCESS METHODS - QSAM LOCATE MODE (RECFM=FB) USED FOR\n*       SYSPRINT, SYSLIST, SYSPUNCH;  BSAM/BPAM USED FOR\n*       PDS I/O (SYSLIB); BSAM IS USED FOR SYSIN;\n*       AND EXCP IS USED FOR PDS-DIRECTORY READING.\n*\n*\n* NOTES -\n*       1. VERSION 6 OF \"LISTPDS\" IS A MAJOR REDESIGN OF THE\n*          PROGRAM AND REPLACES ALL PREVIOUS VERSIONS.\n*       2. ASIDE FROM THE EDIT (ED) DECIMAL INSTRUCTION, \"LISTPDS\"\n*          IS CODED ENTIRELY WITH STANDARD INSTRUCTION SET (360)\n*          INSTRUCTIONS.\n*       3. \"LISTPDS\" DOES ITS OWN DIRECTORY PROCESSING AND ALWAYS\n*          READS THE ENTIRE DIRECTORY (USING BSAM).\n*       4. DEFAULT SWITCH AND DDNAMES CAN BE CHANGED BY MODIFYING\n*          THE ASSEMBLY VARIABLES.\n*       5. THE STANDARD TRANSLATE TABLES ARE SETUP FOR 'QN'\n*          PRINT CHAIN OUTPUT.\n*       6. ALL PRINTED OUTPUT USES ASA CONTROL CHARACTERS.\n*       7. TO BE PROPERLY PROCESSED BY LISTPDS, ALL PDS\n*          DIRECTORIES *MUST* BE IN STANDARD FORMAT: THE LAST\n*          ENTRY IN EACH DIRECTORY IS HEX F'S.\n*       8. CODE HAS BEEN ADDED TO HANDLE PROCESSING OF CONCATON-\n*          ATED SYSLIB DD STATEMENTS.\n*       9. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED LAYOUT\n*          OF THE SYSLIB JFCB'S, DSCB'S AND THE \"CAMLST\" GENERATED\n*          CONTROL BLOCK FOR READING THE DSCB.\n*      10. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED OPERATION\n*          OF THE BPAM READ & FIND (C) ROUTINES FOR DIRECTORY AND\n*          MEMBER READING.\n*      11. DEFAULT BLKSIZES HAVE BEEN CHANGED FROM UNBLOCKED\n*          TO BLOCKED --\n*                 SYSPRINT - 3509\n*                 SYSLIST  - 7260\n*                 SYSPUNCH - 3200\n*                 SYSIN    - 3200\n*      12. THE DEFAULT BUFNO IS NOW SET TO 2.\n*      13. THE DEFAULT MAX LINES/PAGE IS NOW SET TO 60.\n*\n* VERSION 7.0 --\n*      14. DEFAULT MAX LINES/PAGE NOW SET TO 84.\n*      15. STAE PROCESSING HAS BEEN REMOVED.\n*      16. ALL VCONS HAVE BEEN CHANGED TO ADCONS.\n*      17. MAX OUTPUT LINE LENGTH CHANGED TO 116 CHARACTERS.\n*      18. PUNCHING ONLY OUTPUTS UP TO THE FIRST 80 BYTES OF\n*          EACH LOGICAL RECORD.\n*      19. THE XLATE (TRANSLATE) FUNCTION HAS BEEN DELETED.\n*      20. ABEND60A FIXED (BUG IN 'CLEARBUF')\n*      21. EJECT/NOEJECT FUNCTION IMPLEMENTED.\n*\n* VERSION 7.1 --\n*      22. REWORK CODE TO MAKE IT ONE CSECT\n*      23. FIX 7.0 BUG IN 'MONTHS'\n*      24. REFORMAT SOURCE CODE TO MAKE MORE READABLE.\n*      25. CHANGE PARM-ANAL TO SKIP OVER BAD KEYWORDS\n*      26. PAGE EJECT SYSLIST BETWEEN LIBRARIES\n*      27. TEST FOR 'NEAR BOTTOM' AND EJECT SYSLIST IF SO\n*      28. PUT TITLE AT TOP AND BOTTOM OF SYSLIST IF IN EJECT MODE.\n*      29. CREATE SYSPRINT HEADER PAGE AND TRAILOR PAGE.\n*      30. REWORK LIB-FILE INIT CODE TO USE THE 'LCB' AREAS AND\n*          COUNT THE NUMBER OF DIR BLOCKS PER TRACK.\n*      31. REWORK DIR READ TO USE EXCP I/O.\n*      32. DEFAULT MAXLINES CHANGED TO 80.\n*      33. ADD MAXLIST, SELECT, AND EXCLUDE OPTIONS.\n*      34. CHANGE PRINT, LIST AND PUNCH TO USE QSAM MOVE I/O.\n*      35. REWORK CORE MANAGEMENT TO ISSUE ONE LARGE GETMAIN\n*          AND DO SUBALLOCATION FROM THAT AREA.\n* VERSION 7.2 --\n*      36. MAKE SELECT/EXCLUDE WORK FOR SPECIFIED MEMBERS\n*      37. REWORK LOUT SO THAT ADCON IS USED FOR LIST DCB ADDR\n*      38. REWORK LOUT SO THAT BOTTOM OF PAGE PROCESSING FOR\n*          NOEJECT MODE WORKS PROPERLY\n*      39. CHECK FOR RECFM=V/VB AND USE SECONDARY DCB IF SO\n*          TO PERFORM PROPER I/O (NO I/O ERRORS).\n*      40. CREATE S/R TO FORMAT & PRINT SYSPRINT DATA FOR\n*          FOR MEMBER SO IT CAN BE USED AFTER A MEMBER IS\n*          PROCESSED (SAVE INFO IN THE 'DIR' AREA).\n*      41. REORGANIZE CODE TO PROVIDE MORE BASE REGISTER\n*          ADDRESSABILITY BY MOVING SOME OF THE INITIALIZATION\n*          CODE INTO SEPARATELY ADDRESSABLE SUBROUTINES.\n*      42. ADD THE CAPABILITY TO LIST/PUNCH SEQUENTIAL DATASETS\n*          WHICH ARE POINTED TO BY THE SYSLIB CONCATENATION.\n*      43. CODE ADDED TO RE-INIT DCB IF RECFM CHANGES\n*          SO THAT THE DATASET WILL BE PROCESSED CORRECTLY\n*          WITH NO 'I/O ERRORS'.\n*      44. REWORK CODE SO THAT A SPECIAL END MSG WILL BE\n*          ISSUED IF PROCESSING A SEQUENTIAL DATASET.\n*      45. COUNTERS ADDED FOR PDS AND SDS PROCESSING.\n*      46. MODIFY DATASET I/O ERROR HANDLING TO LIST\n*          THE CONCATENATION SEQUENCE NUMBER SO THAT\n*          THE DATASET CAN BE IDENTIFIED AND THEN\n*          GO LIST THE PROCESSED DIRECTORY ENTRIES IF\n*          A PDS; PRODUCE AN EXTRA I/O ERROR MSG AT END\n*          OF DIRECTORY LISTING.\n*      47. CHANGE THE CODE TO ALLOCATE THE DATASET READ BUFFERS\n*          BASED ON THE SIZE OF EACH DATASET BEING PROCESSED.\n*\n* VERSION 7.3 --\n*      48. FIX RITSINFO/CRJEINFO SO DIRECTORY ENTRY IS LISTED\n*          CORRECTLY FOR RITS/CRBE/CRJE LIBRARIES.\n*      49. FIX BUG WHICH CAUSES ABEND0C0 WHEN \"EXCLUDE\" IS\n*          SPECIFIED FOR SELECTED MEMBERS.\n*\n* VERSION 7.3A -- UPDATES AT AIR FORCE DATA SERVICES CENTER, PENTAGON\n*          04 DEC 81, BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*      50. FOR DECK AND UPDTE, PUT SSI= KEYWORD AFTER THE MEMBER NAME\n*          ON THE ./ ADD STATEMENT, INSTEAD OF BEFORE.\n*      51. IF UPDTE IS SPECIFIED AND A MEMBER CONTAINS IEBUPDTE\n*          STATEMENTS, THE './' STATEMENTS WITHIN THE MEMBER WILL\n*          BE PUNCHED WITH THE './' CHANGED TO '><'. SEE NOTE 54 TOO.\n*      52. GET TIOT ADDRESS DIRECTLY INSTEAD OF GOING THRU EXTRACT SVC.\n*      53. ADD NEW PARM OPTION 'NOSEL' TO IGNORE SYSIN,\n*          SO WE CAN KEEP SYSIN ALLOCATED TO THE TERMINAL UNDER TSO.\n*      54. SPF (AN IBM PROGRAM PRODUCT) STATISTICS IN A PDS DIRECTORY\n*          WILL BE FORMATTED ON SYSPRINT AND IN THE COMMENTS AREA\n*          OF ./ ADD STATEMENTS.\n*          NOTE: WE HAVE A PROGRAM THAT WILL RE-LOAD THE IEBUPDTE DECK\n*          TO A PDS AND RESTORE THE SPF STATS FROM THE ./ ADD CARD.\n*          (AND RESTORE '><' TO './' --- SEE NOTE 51).\n*      55. IF 'NOSPF' IS SPECIFIED, OR IF NO MEMBERS IN A PDS CONTAIN\n*          SPF STATISTICS, THEN THE OLD HEX FORMATTING WILL BE USED.\n*      56. DEFAULT MAXLINES CHANGED TO 60.\n*      57. JUST PRINT HH.MM OF TIME IN HEADING, NOT HH.MM.SS\n*      58. INSTEAD OF VOL=VVVVVV, DSN=DDDDDDDDDDDDD    IN HEADINGS,\n*               PRINT - DDDDDDDDD - VOL=VVVVVV\n*      59. SUPPRESS ZEROS IN PAGE INDEX OF LISTDIR, SO PAGE 0 WILL\n*          BE PAGE BLANK.\n*      60. SUPPRESS ZEROS IN LRECL, BLKSIZE.  LEFT JUSTIFY.\n*      61. DEFAULT EJECT.\n*      62. REDUCE LINEMAX BY 1 INTERNALLY, BECAUSE WE KEEP GETTING\n*          ONE MORE LINE PER PAGE THAN THE SPECIFIED LINECNT.     .LCT.\n*      63. HEADINGS CHANGED. MEMBER NAME ON LEFT.                 .LCT.\n*\n* VERSION 8.0 --\n*      64. ADDED INTO OPTIONS LIST SPF/NOSPF.\n*      65. ADDED DSECTS WHERE EVER POSSIBLE IN PREPARATION FOR MVS/ESA.\n*      66. MADE THE CODE MORE READABLE FOR FUTURE GENERATIONS.\n*\n* VERSION 8.1 --                                                  .UPL.\n*      66. ADD SYSUPLOG FILE SHOWING ALL PLACES WHERE THE         .UPL.\n*          UPDTESUB '><' BYTES ALREADY EXIST, AND SHOULD NOT      .UPL.\n*          BE ERRONEOUSLY \"CHANGED BACK\" TO ./ BY PDSLOAD.        .UPL.\n*          COPIED FIRST 62 BYTES OF RECORD INTO CARD+17, SO       .SBG.\n*          WE CAN SEE WHAT IS GOING ON.                           .SBG.\n*\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        LOCAL MACRO DEFINITIONS\n*---------------------------------------------------------------------*\n         MACRO\n&N       CRJE      &A,&B,&C,&D,&E\n&N       TM        &A.(R2),&B\n         BNO       X&SYSNDX\n         MVC       0(&D,R1),=C&C\n         LA        R1,&D.(R1)\n         B         &E\nX&SYSNDX EQU       *\n         MEND\n*\n         MACRO\n&A       PACL  &B,&C,&D,&E,&F,&G,&H,&J\n&A       CLC   =C'&B',0(R2)\n         BNE   Z&SYSNDX\n         LA    R2,&C.(,R2)\n         &D    &E,&F\n         AIF   (T'&G EQ 'O').A\n         &G    &H,&J\n.A       B     PAEND\nZ&SYSNDX EQU   *\n         MEND\n*\n         MACRO\n&A       P1    &B,&C,&D,&E,&BR=BZ\n&A       TM    &B,&C\n         &BR   X&SYSNDX\n         MVC   0(&E.,R2),=C'&D'\n         LA    R2,&E.(,R2)\n         BAL   R10,PRMLSTXX\nX&SYSNDX EQU   *\n         MEND\n*\n         MACRO\n&A       P2    &B,&C,&D,&E\n&A       TM    &B,&C\n         BO    X&SYSNDX\n         MVC   0(2,R2),=C'NO'\nX&SYSNDX MVC   2(&E.,R2),=C'&D'\n         LA    R2,&E.+2(,R2)\n         BAL   R10,PRMLSTXX\n         MEND\n*\n         MACRO\n&A       CC    &B,&C,&D,&E\n&A       LA    R1,&B       LINECNT\n         CLI   &C.,C'&D'   IS THE THE CHAR?\n         BE    &E          YES.\n         MEND\n         EJECT\n*---------------------------------------------------------------------*\n*        ASSEMBLY VARIABLES\n*---------------------------------------------------------------------*\n         SPACE\n         LCLC  &RELEASE,&ID,&VERSION\n         LCLC  &DDIN,&DDPRINT,&DDPUNCH,&DDLIB,&DDLIST,&DDUPLOG\n         LCLB  &A(8),&B(8)\n&RELEASE SETC  '12OCT15'           RELEASE IDENT - MAX 7 BYTES\n&VERSION SETC  '8.1'               VERSION IDENTIFICATION\n&ID      SETC  'GSFC'              'LOCAL' IDENT - 4 BYTES MAX\n&DDIN    SETC  'SYSIN'             DDNAME: CONTROL INPUT\n&DDPRINT SETC  'SYSPRINT'          DDNAME: MAIN-PRINT OUTPUT\n&DDLIST  SETC  'SYSLIST'           DDNAME: LISTING OUTPUT\n&DDPUNCH SETC  'SYSPUNCH'          DDNAME: FOR PUNCHED OUTPUT\n&DDLIB   SETC  'SYSLIB'            DDNAME: LIBRARY INPUT\n&DDUPLOG SETC  'SYSUPLOG'          DDNAME: UPDTE LOG OUTPUT       .UPL.\n&A(1)    SETB  1                   LIST\n&A(2)    SETB  0                   NODECK\n&A(3)    SETB  0                   NOT 'LIST DIR ONLY'\n&A(4)    SETB  0                   NOUPDTE\n&A(5)    SETB  0\n&A(6)    SETB  1                   EJECT           (WAS NOEJECT)  .PRC.\n&A(7)    SETB  0                   SSI\n&A(8)    SETB  1                   TRUNC\n&B(1)    SETB  0                   NODEBUG\n&B(2)    SETB  0                   NOHEXOUT\n&B(3)    SETB  0\n&B(4)    SETB  0                   NONUM\n&B(5)    SETB  0                   EROPT=TERM\n&E(1)    SETB  1                   SEL                            .SEL.\n&E(2)    SETB  1                   SPF                            .SPF.\n         EJECT\nR0       EQU   0                   OS PARM REG; WORK REG\nR1       EQU   1                   OS PARM REG; WORK REG\nR2       EQU   2                   LOCAL WORK REG\nR3       EQU   3                   LOCAL WORK REG\nR4       EQU   4\nR5       EQU   5                   LRECL CNTR FOR MEMBER\nR6       EQU   6                   BLOCK LENGTH\nR7       EQU   7                   BLOCK POINTER\nR8       EQU   8                   IHADCB BASE REG\nR9       EQU   9                   MAIN BASE REG - 3\nR10      EQU   10                  LOCAL LINK REG\nR11      EQU   11                  PROGRAM BASE REG #2\nR12      EQU   12                  MAIN BASE REG - 1\nR13      EQU   13                  POINTER TO OS SAVE AREA\nR14      EQU   14                  OS LINK REG; WORK REG\nR15      EQU   15                  OS BRANCH REG; WORK REG\nMAXLINE  EQU   60                  'DEFAULT' LINES/PAGE (WAS 80)  .PRC.\nSWA0     EQU   B'10000000'         NOLIST/LIST\nSWA1     EQU   B'01000000'         NODECK/DECK\nSWA2     EQU   B'00100000'         LIST DIRECTORY ONLY\nSWA3     EQU   B'00010000'         NOUPDTE/UPDTE\nSWA4     EQU   B'00001000'         MAXLIST SPECIFIED\nSWA5     EQU   B'00000100'         NOEJECT/EJECT\nSWA6     EQU   B'00000010'         NOSSI/SSI\nSWA7     EQU   B'00000001'         NOTRUNC/TRUNC\nSWB0     EQU   B'10000000'         NODEBUG/DEBUG\nSWB1     EQU   B'01000000'         NOHEXOUT/HEXOUT\nSWB2     EQU   B'00100000'         0: LIST=LIST,  1: LIST=PRINT\nSWB3     EQU   B'00010000'         NONUM/NUM\nSWB4     EQU   B'00001000'         EROPT=TERM/ACC\nSWC0     EQU   B'10000000'         PARM ANALYSIS ERROR\nSWC1     EQU   B'01000000'         FLAG FOR NEW PAGE BEFORE PRINT\nSWC2     EQU   B'00100000'         1: DSORG=PS BEING PROCESSED.\nSWC3     EQU   B'00010000'         TERMINATE MODE SWITCH\nSWC7     EQU   B'00000001'         DCB EXIT TAKEN\nSWD0     EQU   B'10000000'         SELECTED NAMES SPECIFIED\nSWD1     EQU   B'01000000'         MEMBER IS AN ALIAS\nSWD2     EQU   B'00100000'         0=SELECT, 1=EXCLUDE\nSWD3     EQU   B'00010000'         SYSPRINT FIRST TIME THRU\nSWD4     EQU   B'00001000'         \"00\"=NOTHING, \"10\"=RITS,\nSWD5     EQU   B'00000100'         \"01\"=CRBE, \"11\"=CRJE.\nSWD6     EQU   B'00000010'         SYSLIST FIRST TIME THRU SWITCH\nSWD7     EQU   B'00000001'         1=RITS/CRBE/CRJE LIB BEING PROC.\nSWE0     EQU   B'10000000'         SEL                            .SEL.\nSWE1     EQU   B'01000000'         SPF                            .SPF.\nSWE2     EQU   B'00100000'         SPF STATS FOUND IN CURRENT PDS .SPF.\nSWE3     EQU   B'00010000'         SPF STATS IN ANY PDS           .SPF.\nSWE4     EQU   B'00001000'         SYSUPLOG IS OPEN               .UPL.\nOFLGS    EQU   B'00010000'         DCB OPEN ERROR FLAG\nALIAS    EQU   B'10000000'         ALIAS BIT IN DIRECTORY ENTRY\nCVTPTR   EQU   16   ... ADDR OF THE OS CVT\nCVTPCNVT EQU   X'1C' .. OFFSET IN CVT TO ADDR OF TTR/CCHHR CNVT\nJFCBDSNM EQU   0                   DSNAME OFFSET IN JFCB\nJFCBVOLS EQU   118                 VOLSER OFFSET IN JFCB\nJFCDSORG EQU   98                  DSORG  OFFSET IN JFCB\nJFCRECFM EQU   100                 RECFM  OFFSET IN JFCB\nJFCBLKSI EQU   102                 BLKSIZ OFFSET IN JFCB\nJFCLRECL EQU   104                 LRECL  OFFSET IN JFCB\nDS1DSORG EQU   82-44               DSORG  OFFSET IN DSCB\nDS1RECFM EQU   84-44               RECFM  OFFSET IN DSCB\nDS1BLKSI EQU   86-44               BLKSIZ OFFSET IN DSCB\nDS1LRECL EQU   88-44               LRECL  OFFSET IN DSCB\nDS4DEVDB EQU   75-44               DIR/TR OFFSET IN F=4 DSCB\n         EJECT\n*---------------------------------------------------------------------*\n*        MAIN PROGRAM BEGIN\n*---------------------------------------------------------------------*\nLISTPDS  AMODE 24\nLISTPDS  RMODE 24\nLISTPDS  CSECT\n         SAVE  (14,12),,LISTPDS-&VERSION\n         LR    R12,R15             INIT MAIN BASE REGS\n         LA    R11,2048\n         AR    R11,R11\n         LR    R9,R11\n         AR    R9,R9\n         AR    R11,R12\n         AR    R9,R12\n         USING LISTPDS,R12,R11,R9  AND PGM ADDRESSABILITY.\n         USING IHADCB,R8           SET DCB ADDRESSABILITY\n         LR    R4,R1               SAVE PARM LIST POINTER.\n         LA    R15,SAVEAREA        INIT SAVE AREAS\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         SPACE\n*---------------------------------------------------------------------*\n*        PROGRAM INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\nPGMINIT  EQU   *\n         XC    SWITCHES,SWITCHES   CLEAR SIWTCHES, ETC.\n         LA    R8,SYSLIB\n         MVI   DCBRECFM,0          MAKE SURE DCB IS INITIALIZED.\n         XC    DCBLRECL,DCBLRECL\n         XC    DCBBLKSI,DCBBLKSI\n         MVI   EXLST2,X'05'\n         XC    COR2,COR2\n         XC    COR7,COR7\n         XC    COR8,COR8\n         MVC   ALISTDCB,=A(SYSLIST)\n         MVI   HEAD1,C' '\n         MVC   HEAD1DAT(HEAD1NAM-HEAD1),HEAD1\n         MVC   HEAD1DSN(L'HEAD1VER),HEAD1VER\n         MVC   HEAD1(L'HEAD1R),HEAD1R  INIT HEADER LINE\n         MVC   SWA,SWAX\n         MVC   SWB,SWBX\n         MVC   SWE,SWEX\n         XC    RECORDS,RECORDS     CLEAR COUNTER\n         XC    TTRK,TTRK           FOR FIND\n         XC    RETCODE,RETCODE\n         XC    PAGENUM1,PAGENUM1\n         XC    PAGENUM2,PAGENUM2\n         XC    LINECNT1,LINECNT1\n         XC    LINECNT2,LINECNT2\n         XC    BUFFER1,BUFFER1     CLEAR BUFFERS\n         XC    BUFFER2,BUFFER2\n         LA    R15,MAXLINE         SET DEFAULT LINE COUNT\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         LA    R15,4000\n         STH   R15,LINECNT1\n         XC    TOTALREC,TOTALREC\n         XC    NAMETBL1,NAMETBL1\n         XC    NAMETBL2,NAMETBL2\n         XC    MAXLIST,MAXLIST\n         MVC   DDPRINT(RESETDDL),RESETDD\n         TM    0(R4),X'80'         ONLY EXEC PARMS SPECIFIED?\n         BO    EXTRACT             YES.\n         L     R2,4(R4)            NO, INIT THE DDNAMES.\n         LH    R3,0(R2)            GET NO. OF BYTES IN LIST\n         LTR   R3,R3               IS IT ZERO?\n         BNP   XPA2                YES, SKIP\n         CH    R3,=H'40'\n         BNH   *+8\n         LA    R3,40\n         LA    R2,2(R2)            BEGINNING OF DD LIST\n         LA    R3,2(R3,R2)         END OF DD LIST\n         LA    R1,DDPRINT          LISTPDS'S DD LIST\nXPA1     EQU   *\n         CR    R2,R3               END OF LIST?\n         BNL   XPA2                YES, GOTO NEXT ONE\n         CLI   0(R2),0             DUMMY ENTRY?\n         BE    *+10                YES, SKIP MOVE\n         MVC   0(8,R1),0(R2)\n         LA    R1,8(R1)\n         LA    R2,8(R2)\n         B     XPA1\n         SPACE\nXPA2     EQU   *\n         TM    4(R4),X'80'         END OF PARM LIST?\n         BO    EXTRACT             YES\n         L     R2,8(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM1         INITIAL PAGE NO - SYSPRINT\n         TM    8(R4),X'80'\n         BO    EXTRACT\n         L     R2,12(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM2         INITIAL PAGE NO - SYSLIST\n*XTRACT  EXTRACT TIOT,'S',FIELDS=(TIOT)                          *.PRC.\nEXTRACT  L     R1,540              PSATOLD, CURRENT TCB           .PRC.\n         L     R1,12(,R1)          GET TIOT ADDRESS FROM TCBTIO   .PRC.\n         ST    R1,TIOT             SAVE TIOT ADDRESS              .PRC.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT DATE/TIME FOR PRINTOUTS\n*---------------------------------------------------------------------*\n         SPACE\n         TIME  DEC                 GET DATE & TIME FOR HEADING\n         ST    R0,WORK1\n         XC    WORK2,WORK2         COMPUTE AND FORMAT DATE\n         ST    R1,WORK2+4\n         MVC   WORK1+5(1),WORK2+5  SAVE YEAR\n         CVB   R3,WORK2            CONVERT DATE TO BINARY\n         XR    R2,R2\n         D     R2,=F'1000'         TO SEP YEAR AND DAY\n         ST    R3,WORK2\n         LA    R3,MONTHS1          FOR STD YEAR\n         TM    WORK2+3,X'03'       LEAP YEAR?\n         BNZ   *+8                 NO\n         LA    R3,MONTHS2          FOR LEAP YEAR\n         XR    R1,R1\nPGMINITX EQU   *\n         SH    R2,0(R3)\n         BNP   PGMINITY\n         LA    R1,3(R1)\n         LA    R3,2(R3)\n         B     PGMINITX\n         SPACE\nPGMINITY EQU   *\n         AH    R2,0(R3)\n         MH    R2,=H'10'\n         CVD   R2,WORK2            FOR DAY OF MONTH\n         LA    R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC   HEAD1DAT+3(3),0(R1)\n         MVC   WORK1+4(1),WORK2+6  DAY OF MONTH\n         ED    HEAD1DAT,WORK1+4\n         CLI   HEAD1DAT+1,C' '\n         BNE   *+8\n         MVI   HEAD1DAT+1,C'0'\n         ED    HEAD1TIM,WORK1\n         CLI   HEAD1TIM+1,C' '\n         BNE   *+8\n         MVI   HEAD1TIM+1,C'0'\n         MVC   HEAD1TIM+6(3),=C'   '                              .PRC.\n         MVC   HEAD2DAT,HEAD1DAT\n         MVC   HEAD2TIM,HEAD1TIM\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE THE SYSPRINT FILE\n*---------------------------------------------------------------------*\n         SPACE\n         LA    R8,SYSPRINT         INIT THE SYSPRINT FILE\n         MVC   DCBDDNAM,DDPRINT\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    INITPR              YES.\n         L     R2,TIOT             SYSPRINT OPEN ERROR\n         MVC   WTP+17(8),0(R2)     MOVE JOBNAME TO MSG.\n         MVC   WTP+40(L'DDPRINT),DDPRINT\nWTP      EQU   *\n         WTO   'LPDS00I  JOBNAMEX OPEN ERROR ON SYSPRINT',         +++++\n               ROUTCDE=(11),DESC=7\n         TM    SWB,SWB0            DEBUG?\n         BZ    ABORT               NO\n         ABEND 20,DUMP             YES, ABEND TO GET DUMP.\nABORT    EQU   *\n         L     R13,4(R13)          ELSE ... ABORT\n         RETURN (14,12),T,RC=20\nRESETDD  DC    CL8'&DDPRINT',CL8'&DDLIST',CL8'&DDPUNCH'\n         DC    CL8'&DDLIB',CL8'&DDIN',CL8'&DDUPLOG'\nRESETDDL EQU   *-RESETDD\n         SPACE\nINITPR   DS    0H\n         MVI   LINE1,C'-'\n         BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        GO PERFORM THE PARM ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\n         L     R6,=A(PA)\n         BR    R6\n         SPACE\n*---------------------------------------------------------------------*\n*        COMPLETE THE PARM ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITA EQU   *\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         BZ    *+12                NO.\n         OI    SWD,SWD7            YES.\n         NI    SWA,255-SWA6        NO SSI IF RITS/CRBE\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST & PUNCH FILE INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWA,SWA0            LIST?\n         BZ    PGMINITC            NO.\n         LA    R8,SYSLIST\n         MVC   DCBDDNAM,DDLIST\n         OPEN  (SYSLIST,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    PGMINITC            YES.\n         NI    SWA,255-SWA0        NO, SET NOLIST.\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDLIST),DDLIST\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\nPGMINITC EQU   *\n         LA    R8,SYSPUNCH\n         MVC   DCBDDNAM,DDPUNCH\n         TM    SWA,SWA1            NODECK?\n         BZ    PGMINITD            YES.\n         OPEN  (SYSPUNCH,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    PGMINITU            YES.                           .UPL.\n         NI    SWA,255-SWA1        TURN OFF DECK OPTION\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDPUNCH),DDPUNCH\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\n         SPACE\nPGMINITU EQU   *                                                  .UPL.\n         LA    R8,SYSUPLOG                                        .UPL.\n         MVC   DCBDDNAM,DDUPLOG                                   .UPL.\n         DEVTYPE DCBDDNAM,WORK1                                   .UPL.\n         LTR   R15,R15             IF NO SYSUPLOD DD              .UPL.\n         BNZ   PGMINITD              THEN SKIP OPEN               .UPL.\n         OI    SWE,SWE4            SYSUPLOG IS OPEN               .UPL.\n         OPEN  (SYSUPLOG,OUTPUT)                                  .UPL.\n         TM    DCBOFLGS,OFLGS      OPEN OK?                       .UPL.\n         BO    PGMINITD            YES.                           .UPL.\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE MAIN WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITD EQU   *\n         GETMAIN VU,LA=COR1,A=COR2\n         L     R1,COR2\n         ST    R1,COR3\n         L     R15,COR2+4\n         LH    R0,=Y(8*1024)\n         SR    R15,R0\n         ST    R15,COR2+4\n         AR    R1,R15\n         AL    R15,COR2\n         SH    R15,=H'8'           MAKE IT LOW TO BE SAFE\n         ST    R15,COR5\n         FREEMAIN R,LV=(0),A=(1)\n         LM    R14,R15,COR2        CLEAR THE WORKAREA\nPGMINITG EQU   *\n         SH    R15,=H'256'\n         BNP   PGMINITH\n         XC    0(256,R14),0(R14)\n         LA    R14,256(,R14)\n         B     PGMINITG\n         SPACE\nPGMINITH EQU   *\n         BAL   R14,RESETHI\n         BAL   R14,RESETLO\n         L     R1,COR2+4\n         SRL   R1,10\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         MVC   LINE1(MSG7L1),MSG7\n         BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE SYSLIB AND THE LCB'S\n*---------------------------------------------------------------------*\n         SPACE\nFILEINIT EQU   *\n         LA    R8,SYSLIB\n         OPEN  (SYSLIB,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    FI07                YES.\n         MVC   LINE1(L'LPDS04I),LPDS04I\n         MVC   LINE1+L'LPDS04I(8),DDLIB\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        LCB INIT FOR SYSLIB CONCATONATION\n*---------------------------------------------------------------------*\n         SPACE\nFI07     EQU   *\n         MVC   WORK1(L'DCBTIOT),DCBTIOT  SAVE ENTRY\n         LH    R2,DCBTIOT\n         L     R3,TIOT\n         LA    R3,0(R3,R2)         PNTR TO SYSLIB ENTRY\n         LA    R0,LCBLEN           ALLOC INITIAL LCB\n         BAL   R14,GETBASE\n         LR    R4,R1\n         ST    R1,ALCB\n         USING LCB,R4\n         LA    R5,16               LIMIT MAX LIBS PROCESSED\n         LA    R0,176              SIZE OF A JFCB\n         BAL   R14,GETHI\n         ST    R1,JFCBADRS\n         MVI   JFCBADRS,X'87'\n         B     FI07B\n         SPACE\nFI07A    EQU   *\n         XR    R1,R1\n         IC    R1,0(R3)\n         LA    R2,0(R2,R1)         POINT TO NEXT ENTRY\n         LA    R3,0(R3,R1)\n         CLI   0(R3),0             END OF TIOT?\n         BE    FI07Z               YES\n         CLC   =CL8' ',4(R3)       CONCATONATION?\n         BNE   FI07Z               NO, END.\n         STH   R2,DCBTIOT\nFI07B    RDJFCB    SYSLIB\n         L     R1,JFCBADRS\n         MVC   DSNAME,JFCBDSNM(R1)\n         MVC   LCBDSNAM,JFCBDSNM(R1)\n         MVC   VOLSER,JFCBVOLS(R1)\n         MVC   LCBVOLNO,JFCBVOLS(R1)\n         MVC   LCBJFCDS,JFCDSORG(R1)\n         MVC   LCBJFCRF,JFCRECFM(R1)\n         MVC   LCBJFCBL,JFCBLKSI(R1)\n         MVC   LCBJFCLR,JFCLRECL(R1)\n         OBTAIN DSCB\n         MVC   LCBDS1DS,WORKAREA+DS1DSORG\n         MVC   LCBDS1RF,WORKAREA+DS1RECFM\n         MVC   LCBDS1BL,WORKAREA+DS1BLKSI\n         MVC   LCBDS1LR,WORKAREA+DS1LRECL\n         MVI   DSNAME,X'04'        FOR FORMAT 4 DSCB\n         MVC   DSNAME+1(43),DSNAME\n         OBTAIN DSCB\n         XR    R1,R1\n         IC    R1,WORKAREA+DS4DEVDB\n         STH   R1,LCBDIR\n         L     R15,JFCBADRS\n         LH    R1,JFCBLKSI(,R15)\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,WORKAREA+DS1BLKSI\n         LA    R0,LCBLEN\n         BAL   R14,GETBASE         WILL BE CONTIG\n         LR    R4,R1\n         XC    0(LCBLEN,R1),0(R1)\n         BCT   R5,FI07A\n         DROP  R4\nFI07Z    EQU   *\n         MVI   0(R4),X'FF'         SET END FLAG\n         MVI   JFCBADRS,X'80'      END OF JFCB INIT\n         MVC   DCBTIOT,WORK1       RESET TIOT PNTR\n         BAL   R14,RESETHI\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE SELECTED NAME TABLE\n*---------------------------------------------------------------------*\n         SPACE\n         XC    NAMETBL2,NAMETBL2   SET PNTR TO NULL.\n         TM    SWE,SWE0            SEL OR NOSEL                   .SEL.\n         BZ    BLDSEL99            NOSEL, BYPASS SYSIN            .SEL.\n         L     R2,TIOT             SCAN THE TIOT FOR MATCH\n         LA    R2,24(R2)\n         XR    R3,R3\nBLDSEL01 EQU   *\n         CLC   4(8,R2),DDIN\n         BE    BLDSEL02            MATCH.\n         CLI   0(R2),0             END OF TIOT?\n         BE    BLDSEL99            YES, RETURN.\n         IC    R3,0(R2)\n         LA    R2,0(R2,R3)\n         B     BLDSEL01\n         SPACE\nBLDSEL02 EQU   *\n         LA    R8,SYSIN\n         MVC   DCBDDNAM,DDIN\n         OPEN  (SYSIN,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BZ    BLDSEL99            NO, RETURN.\n         LH    R0,SYSIN+DCBBLKSI-IHADCB  ALLOC SYSIN BUFFER\n         BAL   R14,GETHI\n         LR    R7,R1\n         B     BLDSEL20\n         SPACE\nBLDSEL03 EQU   *\n         LA    R5,80(,R5)\n         LR    R3,R5\n         SH    R6,=H'80'\n         BNP   BLDSEL20\n         LA    R2,72(,R3)          POINT AT END OF CARD.\nBLDSEL04 EQU   *\n         CLI   0(R3),C' '          BLANK?\n         BE    BLDSEL03            YES, GO GET NEXT CARD.\n         CR    R2,R3               END OF CARD?\n         BL    BLDSEL03            YES, GO GET NEXT CARD.\n         CLI   0(R3),C','          COMMA?\n         BNE   BLDSEL05            NO.\n         LA    R3,1(R3)            YES, SKIP OVER IT.\n         B     BLDSEL04\n         SPACE\nBLDSEL05 EQU   *\n         LA    R14,WORK1\n         MVC   WORK1,=CL8' '\nBLDSEL06 EQU   *\n         CLI   0(R3),C' '          BLANK?\n         BE    BLDSEL08            YES, END OF NAME\n         CLI   0(R3),C','          COMMA?\n         BE    BLDSEL08            YES, END OF NAME\n         CR    R2,R3               END OF CARD?\n         BL    BLDSEL08            YES, END OF NAME\n         C     R14,=A(WORK1+8)     HAVE 8 BYTES BEEN PROCESSED?\n         BNL   *+16                YES.\n         IC    R15,0(R3)\n         STC   R15,0(R14)\n         LA    R14,1(R14)\n         LA    R3,1(R3)\n         B     BLDSEL06            GO GET NEXT CHAR.\n         SPACE\nBLDSEL08 EQU   *\n         LA    R0,NAMTBLXX\n         BAL   R14,GETBASE\n         XC    0(NAMTBLXX,R1),0(R1)\n         MVC   0(8,R1),WORK1\n         TM    SWD,SWD0\n         BO    BLDSEL04\n         OI    SWD,SWD0\n         ST    R1,NAMETBL2\n         B     BLDSEL04\n         SPACE\nBLDSEL20 EQU   *\n         READ  INDECB,SF,SYSIN,(R7),'S'\n         CHECK INDECB\n         LR    R5,R7\n         L     R15,INDECB+16       CALC. LENGTH OF RECORD READ\n         LH    R6,SYSIN+DCBBLKSI-IHADCB\n         SH    R6,14(,R15)\n         LA    R3,0(,R5)\n         LA    R2,72(,R3)\n         B     BLDSEL04\n         SPACE\nBLDSEL90 EQU   *\n         TM    SWD,SWD0            ANY NAMES?\n         BZ    BLDSEL95            NO\n         LA    R0,8                YES, SET END FLAG\n         BAL   R14,GETBASE\n         MVI   0(R1),X'FF'\nBLDSEL95 EQU   *\n         CLOSE SYSIN\nBLDSEL99 EQU   *\n         BAL   R14,RESETHI\n         L     R6,=A(PRMLST)\n         BR    R6\n         EJECT\nBEGIN    EQU   *\n         L     R2,ALCB\n         USING LCB,R2\n         TM    LCB,X'FF'\n         BNM   ENDRUN\n         BAL   R14,RESETLO\n         BAL   R14,RESETHI\n         XC    CURRENT2+4,CURRENT2+4\n         MVC   CURRENT2,NAMETBL2\n*        MVC   HEAD1DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD1VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD1DSN+1(65),HEDD1DSN                            .PRC.\n         MVC   HEDD1DSN+1(2),=C'--'                               .PRC.\n         MVC   HEDD1DSN+4(44),LCBDSNAM                            .PRC.\n         LA    R1,HEDD1DSN+4+43                                   .PRC.\n         CLI   0(R1),C' '                                         .PRC.\n         BNE   *+8                                                .PRC.\n         BCT   R1,*-8                                             .PRC.\n         MVC   2(2,R1),=C'--'                                     .PRC.\n         MVC   5(4,R1),HEAD1C1R+3 'VOL='                          .PRC.\n         MVC   9(6,R1),LCBVOLNO                                   .PRC.\n*        MVC   HEAD2DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD2VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD2DSN+4(58),HEDD1DSN+4                          .PRC.\n         MVC   MAXDIR,LCBDIR       UPDATE FOR DIR READ\n         LA    R1,LCBEND\n         ST    R1,ALCB\n         TM    LCBDS1DS,B'01000010' ONLY DSORG=PO/PS ARE VALID\n         BNZ   BEGIN01\n         OI    SWC,SWC1\n         MVC   LINE1(L'LPDS11I),LPDS11I\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\n         B     BEGIN\n         SPACE\nBEGIN01  EQU   *\n         NI    SWC,255-SWC2        RESET DSORG=PS SWITCH\n         TM    LCBDS1DS,B'01000000' IS THIS DSORG=PS?\n         BZ    *+8                 NO.\n         OI    SWC,SWC2            YES, FLAG IT.\n         TM    SWD,SWD0            WERE NAMES SPECIFIED VIA SYSIN?\n         BZ    BEGIN19             NO.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    BEGIN               YES, NOT PROCESSED ON SELECT.\nBEGIN09  EQU   *\n         L     R1,CURRENT2         RE-INIT THE NAME TBL2\n         USING NAMTBL,R1\nBEGIN10  EQU   *\n         CLI   NAMTBL1,X'FF'       TEST FOR END\n         BE    BEGIN19\n         XC    NAMTBL2(12),NAMTBL2\n         LA    R1,NAMTBLXX(,R1)\n         B     BEGIN10\n         SPACE\nBEGIN19  EQU   *\n         DROP  R1\n         XR    R1,R1\n         IC    R1,LCBJFCRF\n         LTR   R1,R1\n         BNZ   *+8\n         IC    R1,LCBDS1RF\n         STC   R1,SAVRECFM\n         LH    R1,LCBJFCBL\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,LCBDS1BL\n         STH   R1,SAVBLKSI\n         ST    R1,BUFFER0          SET SIZE OF BUFFER(S)\n         LH    R1,LCBJFCLR\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,LCBDS1LR\n         STH   R1,SAVLRECL\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         BZ    *+8                 NO.\n         OI    SWD,SWD7            YES, FLAG.\n         DROP  R2\n         SPACE\n         LA    R8,SYSLIB\n         LH    R15,SAVBLKSI        BLKSIZE SPECIFIED?\n         LTR   R15,R15\n         BNZ   *+24                YES.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IA),LPDS06IA\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'00000010'  MACH. CONTROL CHARS?\n         BZ    *+30                NO.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I1),LPDS06I1\n         MVC   LINE1+L'LPDS06I+L'LPDS06I1(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'11000000'\n         BO    CHKLIB11\n         TM    SAVRECFM,B'01001000'  VARIABLE SPANNED?\n         BNO   CHKLIB11            NO\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I2),LPDS06I2\n         MVC   LINE1+L'LPDS06I+L'LPDS06I2(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RITS/CRBE\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB11 EQU   *\n         TM    SWD,SWD7            RITS/CRBE/CRJE SPECIFIED?\n         BZ    CHKLIB15            NO.\n         TM    SAVRECFM,B'11000000'  YES, CHECK PARMS\n         BO    CHKLIB12            INVALID\n         TM    SAVRECFM,B'10000000'\n         BZ    CHKLIB12            INVALID\n         LH    R15,SAVLRECL\n         CH    R15,=H'88'\n         BNE   *+8\n         B     CHKLIB40\n         SPACE\nCHKLIB12 EQU   *\n         NI    SWD,255-SWD7        TURN OFF RITS/CRBE\n         OI    SWC,SWC1            FLAG REINIT SYSPRINT\n         MVC   LINE1(L'LPDS07I),LPDS07I\n         BAL   R10,PRNT\n         LA    R1,4                RC=4\n         BAL   R14,SAVERC\n         SPACE\n*---------------------------------------------------------------------*\n*        CHECK RECFM TYPES\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB15 EQU   *\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    CHKLIB16\n         TM    SAVRECFM,B'10000000'    RECFM=F?\n         BO    CHKLIB17\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    CHKLIB18\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IB),LPDS06IB\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=U\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB16 EQU   *\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         BNZ   *+8\n         LH    R15,SAVBLKSI\n         CH    R15,SAVBLKSI\n         BNH   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=F\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB17 EQU   *\n         TM    SAVRECFM,B'00010000'    BLOCKED?\n         BO    *+16\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         BNZ   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=V\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB18 EQU   *\n         TM    SAVRECFM,B'00100000'  TRACK OVERFLOW?\n         BZ    CHKLIB40            NO.\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I3),LPDS06I3\n         MVC   LINE1+L'LPDS06I+L'LPDS06I3(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LIB CHECK\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB40 EQU   *\n         LA    R8,SYSLIB\n         SPACE\n*---------------------------------------------------------------------*\n*        REINIT DCB IF NECESSARY\n*---------------------------------------------------------------------*\n         SPACE\n         CLC   SAVRECFM,DCBRECFM\n         BE    BEGIN35\n         CLOSE SYSLIB\n         MVI   EXLST2,X'00'        SUPPRESS EXIT THIS TIME\n         MVI   JFCBADRS,X'80'      SUPPRESS JFCB POINTER\n         MVC   DCBRECFM,SAVRECFM   SET RECFM\n         MVC   DCBLRECL,SAVLRECL   SET LRECL\n         MVC   DCBBLKSI,DCBBLKSI   SET BLKSIZE\n         OPEN  SYSLIB              RE-OPEN THE DATASETS\nBEGIN35  EQU   *\n         MVC   DCBLRECL,SAVLRECL   SET THE LRECL\n         MVC   DCBBLKSI,SAVBLKSI   SET THE BLKSIZE\n         XC    TTRK(2),TTRK        POINT AT NEW DIRECTORY\n         MVI   TTRK+2,1\n         XC    NAMETBL1,NAMETBL1\n         NI    SWE,255-SWE2        RESET SPF-THIS-PDS SWITCH      .SPF.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    BEGIN9              YES, SKIP DIR. BUILD\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DIRECTORY-READ WORKAREA (CHAN. PROGS., ETC.)\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R2,MAXDIR\n         LR    R0,R2\n         MH    R2,=H'8'\n         LA    R2,16(,R2)          C.P. SIZE\n         MH    R0,=H'272'          DATA AREA SIZE\n         AR    R0,R2               WORKAREA SIZE\n         BAL   R14,GETHI           GET SOME CORE\n         ST    R1,WORK1            AREA FOR THE C.P.\n         AR    R2,R1\n         ST    R2,WORK1+4          FOR THE DATA\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE CHANNEL PROGRAM\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         XC    0(16,R1),0(R1)      BUILD THE SHA AND TIC\n         LA    R0,CCHHR\n         ST    R0,0(,R1)\n         MVI   0(R1),X'39'         ...SHA\n         MVI   4(R1),X'40'\n         MVI   7(R1),4\n         ST    R1,8(,R1)\n         MVI   8(R1),X'08'         ...TIC\n         MVI   12(R1),X'40'\n         LA    R1,16(,R1)\n         LA    R14,272             ..SIZE OF DATA RECORD\nBLDNAM10 EQU   *\n         XC    0(8,R1),0(R1)\n         ST    R2,0(,R1)\n         MVI   0(R1),X'1E'         READ CKD\n         MVI   4(R1),X'60'\n         STH   R14,6(,R1)\n         LA    R1,8(,R1)\n         AR    R2,R14\n         BCT   R15,BLDNAM10\n         SH    R1,=H'4'\n         NI    0(R1),X'BF'         TURN OFF CHAINING\n         L     R1,WORK1\n         ST    R1,ACP\n         SPACE 3\nBLDNAM20 EQU   *\n         STM   R14,R12,12(R13)     SAVE REGS FOR TTR CNVT\n         L     R0,TTRK\n         LH    R1,TTRK             UPDATE FOR NEXT TIME\n         LA    R1,1(,R1)\n         STH   R1,TTRK\n         L     R1,SYSLIB+DCBDEBAD-IHADCB\n         LA    R2,MBB\n         L     R15,CVTPTR\n         L     R15,CVTPCNVT(,R15)\n         LR    R3,R13              SAVE 13 OVER CALL\n         BALR  R14,R15\n         LR    R13,R3              NOW RESTORE 13\n         LM    R14,R12,12(R13)     AND THEN THE REST\n         LH    R15,MAXDIR          NOW CLEAR THE DATA AREA\n         L     R1,WORK1+4\nBLDNAM22 EQU   *\n         XC    0(20,R1),0(R1)\n         LA    R1,272(,R1)\n         BCT   R15,BLDNAM22\n         XC    ECB,ECB\n         LA    R10,BLDNAM23\n         EXCP  IOB\n         WAIT  1,ECB=ECB\nBLDNAM23 EQU   *\n         CLI   ECB,X'7F'           I/O OK\n         BE    BLDNAM27\n         CLI   ECB,X'42'\n         BE    BLDNAM90            I/O ERROR OR BAD FORMAT\n         SPACE\n*---------------------------------------------------------------------*\n*        SHORT TRACK, FIND THE END.\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         L     R1,WORK1+4\n         XR    R5,R5\nBLDNAM25 EQU   *\n         CLC   =XL5'0',0(R1)\n         BE    BLDNAM28\n         CLC   =H'0',6(R1)\n         BE    BLDNAM28\n         CLC   =X'0100',6(R1)\n         BNE   BLDNAM90            BAD DIR FORMAT\n         LA    R1,272(,R1)\n         LA    R5,1(,R5)\n         BCT   R15,BLDNAM25\nBLDNAM27 EQU   *\n         LH    R5,MAXDIR\nBLDNAM28 EQU   *\n         L     R4,WORK1+4\nBLDNAM30 EQU   *\n         LA    R3,18(,R4)\n         MVC   WORK2(2),16(R4)\n         LH    R2,WORK2\n         SH    R2,=H'2'\nBLDNAM36 EQU   *\n         IC    R7,11(,R3)\n         N     R7,=F'31'\n         SLL   R7,1\n         CH    R7,=H'30'           COULD THIS BE SPF STATS        .SPF.\n         BNE   BLDNOSPF            NO, BRANCH                     .SPF.\n         TM    11(R3),X'60'        ANY TTR'S IN USERDATA          .SPF.\n         BNZ   BLDNOSPF            YES, NOT SPF STATS             .SPF.\n         OI    SWE,SWE2+SWE3       SPF STATS FOUND                .SPF.\nBLDNOSPF EQU   *                                                  .SPF.\n         LA    R6,DIRUSER-DIRNAME(,R7)\n         LA    R0,DIRNAME-DIR(,R6)\n         BAL   R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         OC    NAMETBL1,NAMETBL1\n         BNZ   *+8\n         ST    R1,NAMETBL1\n         STH   R7,DIRUSERL-DIR(,R1)\n         BCTR  R6,0\n         EX    R6,BLDNAMMV\n         CLI   0(R3),X'FF'         TEST FOR END\n         BE    BLDNAM95\n         LA    R6,1(,R6)\n         AR    R3,R6\n         SR    R2,R6\n         BP    BLDNAM36\n         LA    R4,272(,R4)\n         SH    R5,=H'1'\n         BP    BLDNAM30\n         B     BLDNAM20\n         SPACE\nBLDNAMMV MVC   DIRNAME-DIR(*-*,R1),0(R3)\nBLDNAM90 MVC   LINE1(L'LPDS08I),LPDS08I\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DIRECTORY.\n*---------------------------------------------------------------------*\n         SPACE\nBLDNAM95 EQU   *\n         MVC   CURRENT1,NAMETBL1\nBEGIN9   EQU   *\n         LA    R8,SYSLIB\n         OI    SWD,SWD6            FLAG FIRST EJECT ON LIST\n         LH    R1,LINEMAX          RE-INIT SYSPRINT PAGE\n         STH   R1,LINECNT1\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DATA BUFFERS\n*---------------------------------------------------------------------*\n         SPACE\n         BAL   R14,RESETHI\n         L     R0,BUFFER0\n         BAL   R14,GETHI\n         ST    R1,BUFFER1\n         CLI   SAVBUFNO,2\n         BL    BEGIN9A\n         L     R0,BUFFER0\n         BAL   R14,GETHI\n         ST    R1,BUFFER2\nBEGIN9A  EQU   *\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BZ    MAIN00              NO, GO PROCESS A PDS LIBRARY.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR DSORG=PS\n*---------------------------------------------------------------------*\n         SPACE\n         NI    SWD,255-SWD7        NO CRJE, ETC.\n         LA    R0,DIRLEN\n         BAL   R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         LR    R4,R1\n         USING DIR,R4\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN31              NO, GO PROCESS.\n         MVC   HEAD2NAM,NAME\n         MVI   LINE2,C'+'\n         BAL   R10,LOUT\n         MVC   DIRPG1,PAGENUM2\n         B     MAIN31              GO PROCESS DSORG=PS\n         SPACE\nMAIN00   EQU   *\n         NI    SWD,255-SWD1        TURN OFF ALIAS SWITCH\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         BZ    MAIN10              NO.\n         TM    SWD,SWD2            SELECT OF EXCLUDE?\n         BNZ   MAIN10              NOT SELECT.\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT NAME FROM NAMETBL2\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,CURRENT2\n         USING NAMTBL,R2\n         CLI   NAMTBL,X'FF'        END OF TABLE?\n         BE    ENDLIB              YES.\n         MVC   NAME,NAMTBL1\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         SPACE\n*---------------------------------------------------------------------*\n*        SEARCH NAMETBL1 FOR ENTRY.\n*---------------------------------------------------------------------*\n         SPACE\n         L     R4,NAMETBL1\n         USING DIR,R4\nMAIN02   EQU   *\n         CLI   DIRNAME,X'FF'       END?\n         BE    MAIN00              YES, MEMBER NOT FOUND.\n         CLC   NAMTBL1,DIRNAME     IS THIS IT?\n         BE    MAIN04              YES, FOUND IT.\n         LH    R15,DIRUSERL        UPDATE POINTER AND TRY NEXT ENTRY\n         LA    R4,DIRUSER(R15)\n         B     MAIN02\n         SPACE\nMAIN04   EQU   *\n         ST    R4,NAMTBL2          SAVE POINTER\n         LA    R1,DIRNAME          POINT TO DIR ENTRY AREA\n         B     MAIN12\n         DROP  R2\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT ENTRY FROM NAMETBL1\n*---------------------------------------------------------------------*\n         SPACE\nMAIN10   EQU   *\n         L     R4,CURRENT1\n         USING DIR,R4\n         CLI   DIRNAME,X'FF'       TEST FOR END\n         BE    ENDLIB\n         MVC   NAME,DIRNAME        SAVE NAME FOR LATER PROCESSING\n         LH    R15,DIRUSERL\n         LA    R1,DIRNAME\n         LA    R2,DIRUSER(R15)\n         ST    R2,CURRENT1\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED (EXCLUDE)?\n         BZ    MAIN12              NO\n         L     R2,NAMETBL2         CHECK FOR EXCLUDE\n         USING NAMTBL,R2\nMAIN11   EQU   *\n         CLI   NAMTBL,X'FF'        TEST FOR END OF EXCLUDED LIST\n         BE    MAIN12              NOT EXCLUDED, GO PROCESS THE MEMBER\n         CLC   NAMTBL1,DIRNAME\n         BE    MAIN10              NAME MATCH..THIS MEMBER EXCLUDED.\n         LA    R2,NAMTBLXX(,R2)\n         B     MAIN11\n         DROP  R2\n         SPACE 2\nMAIN12   EQU   *\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         BZ    MAIN20              NO, CONTINUE.\n         SPACE\n*---------------------------------------------------------------------*\n*        ALIAS ENTRY ... FIND PRIME ENTRY (IF IT EXISTS)\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,NAMETBL1\nMAIN14   EQU   *\n         CLI   DIRNAME-DIR(R2),X'FF'\n         BE    MAIN20              ..END TBL, IGNORE ALIAS\n         CLC   DIRTTR(3),DIRTTR-DIR(R2)\n         BNE   MAIN14A\n         TM    DIRTTR+3-DIR(R2),ALIAS\n         BZ    MAIN16              PRIME ENTRY FOUND FOR ALIAS\nMAIN14A  EQU   *\n         LH    R15,DIRUSERL-DIR(R2)\n         LA    R2,DIRUSER-DIR(R2,R15)\n         B     MAIN14\n         SPACE\n*---------------------------------------------------------------------*\n*        PRIME ENTRY FOUND FOR ALIAS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN16   EQU   *\n         OI    DIRFLAGS,B'11000000'    SET ALIAS FLAG\n         TM    SWD,SWD0            SELECTED NAMES SPECIFIED?\n         BO    MAIN20              YES, CONTINUE.\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         LA    R1,1(R1)\n         STH   R1,MEMCNT\n         B     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        MEMBER PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN20   EQU   *\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         LA    R1,1(R1)\n         STH   R1,MEMCNT\n         OI    DIRFLAGS,B'10000000'    FLAG MEMBER 'PROCESSED'\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN21              NO.\n         TM    SWA,SWA5            IS IT EJECT FORMAT\n         BO    MAIN20D             YES.\n         MVC   LINE2(8),=C'0MEMBER='\n         MVC   LINE2+8(8),NAME\n         BAL   R10,LOUT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\n         MVI   LINE2,C'0'\n         B     MAIN21\n         SPACE\nMAIN20D  EQU   *\n         OI    SWD,SWD6            FORCE EJECT FORMAT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVI   LINE2,C'+'\n         BAL   R10,LOUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\nMAIN21   EQU   *\n         TM    SWA,SWA2            LIST DIR ONLY?\n         BO    MAIN00              YES, SKIP PROCESSING\n         TM    SWA,SWA1+SWA3       DECK OUTPUT WITH UPDTE\n         BNO   MAIN30              NO\n* ---- >                 LEAVE OUT DATE AND TIME          BELOW\n*\n*        MVC   CARD+50(L'HEAD1DAT),HEAD1DAT\n*        MVC   CARD+50+L'HEAD1DAT(L'HEAD1TIM),HEAD1TIM\n*\n* ---- >                 LEAVE OUT DATE AND TIME          ABOVE\n         LH    R15,DIRUSERL        ANY USER INFO?\n         CH    R15,=H'4'           (MUST BE 4 BYTES)\n         BNE   *+12                NO, THERE NO SSI     (WAS BL)  .SPF.\n         TM    SWA,SWA6            SSI SPECIFIED?\n         BO    MAIN24              YES.\n         MVC   CARD(L'UPDTE1),UPDTE1  CC WITH NO SSI\n         MVC   CARD+L'UPDTE1(L'NAME),NAME\n         CH    R15,=H'30'          ARE SPF STATS PRESENT          .SPF.\n         BNE   MAIN24A             NO, BRANCH                     .SPF.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         BNO   MAIN24A             NO, BRANCH                     .SPF.\n         LA    R15,L'UPDTE1+9+CARD WHERE TO PUT THEM              .SPF.\n         MVI   0(R15),C'-'         HYPHEN TO BE PROPOGATED        .SPF.\n         MVC   1(49,R15),0(R15)    FILL AREA WITH HYPHENS         .SPF.\n         SLR   R0,R0               CLEAR FOR INSERT               .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  0(2,R15),WORK1+6(2)                                .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  2(2,R15),WORK1+6(2)                                .SPF.\n         UNPK  05(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n         UNPK  11(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  17(4,R15),WORK1(3)                                 .SPF.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  22(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  28(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  34(5,R15),WORK1+5(3)                               .SPF.\n         MVC   40(10,R15),DIRUSER+20   USER ID                    .SPF.\n         B     MAIN24A\n*MAIN24  MVC   CARD(L'UPDTE2),UPDTE2  CC WITH SSI                *.PRC.\n*        MVC   CARD+L'UPDTE2(L'NAME),NAME                        *.PRC.\n*        LA    R15,11+CARD          FORMAT SSI                   *.PRC.\n*                  NEW CODE FOR ADD NAME=MEMBER,SSI=XXXXXXXX      .PRC.\n*                  INSTEAD OF   ADD SSI=XXXXXXXX,NAME=MEMBER      .PRC.\nMAIN24   EQU   *                                                  .PRC.\n         MVC   CARD(L'UPDTE1),UPDTE1                              .PRC.\n         MVC   CARD+L'UPDTE1(L'NAME),NAME                         .PRC.\n         LA    R15,CARD+L'UPDTE1+7 LAST BYTE OF NAME              .PRC.\n         CLI   0(R15),C' '         LOOK FOR LAST NONBLANK         .PRC.\n         BNE   *+8                 BRANCH IF FOUND                .PRC.\n         BCT   R15,*-8             LOOP TO CLI                    .PRC.\n         MVC   1(5,R15),=C',SSI='  APPEND KEYWORD                 .PRC.\n         LA    R15,6(,R15)         POINT PAST KEYWORD             .PRC.\n         LA    R0,4\n         LA    R1,DIRUSER\n         BAL   R10,HEXCON\nMAIN24A  EQU   *\n         BAL   R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR READING\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nMAIN30   EQU   *\n         MVC   TTRK(3),DIRTTR\nMAIN31   EQU   *\n         FIND  SYSLIB,TTRK,C\n         LM    R2,R3,BUFFER1       INIT BUFFERS\n         STM   R2,R3,BFRS\n         XR    R5,R5               CLEAR CURRENT MEM REC CNTR\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BNE   MAIN32              NO.\n         XC    PDSDECB,PDSDECB     YES, ISSUE FIRST READ.\n         READ  PDSDECB,SF,(R8),(R2),MF=E\n         SPACE\n*---------------------------------------------------------------------*\n*        READ IN NEXT BLOCK\n*---------------------------------------------------------------------*\n         SPACE\nMAIN32   EQU   *\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BE    MAIN34              YES.\n         L     R2,BFRS             NO...ISSUE READ\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),'S'\nMAIN34   EQU   *\n         LA    R10,MAIN65 .. SET E.O.F. ADDR\n         CHECK PDSDECB\n         L     R15,PDSDECB+16      COMPUTE LEN OF REC READ\n         LH    R6,DCBBLKSI\n         SH    R6,14(R15)\n         L     R7,BFRS             LOAD PNTR TO DATA\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BNE   MAIN36              NO.\n         L     R2,BFRS+4           YES, INIT NEXT READ\n         ST    R7,BFRS+4\n         ST    R2,BFRS\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),MF=E\nMAIN36   EQU   *\n         TM    SAVRECFM,B'10000000'  RECFM U OR F?\n         BO    MAIN38              YES.\n         LH    R6,0(R7)            NO, MUST BE V ...\n         LA    R7,4(R7)            PROCESS BLOCK DESCRIPTOR\n         SH    R6,=H'4'\nMAIN38   EQU   *\nMAIN40   EQU   *                   RITS/CRBE/CRJE?\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         BZ    MAIN50              NO\n         SPACE\n*---------------------------------------------------------------------*\n*        PROCESS A RITS/CRBE RECORD\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN45              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         BZ    MAIN42              NO\n         CH    R5,MAXLIST          YES, TEST FOR LIMIT.\n         BNL   MAIN45              LIMIT EXCEEDED.\nMAIN42   EQU   *\n         MVC   LINE2+1(8),0(R7)\n         MVC   LINE2+11(80),8(R7)\n         BAL   R10,LOUT            YES, OUTPUT FORMATTED LINE\nMAIN45   EQU   *\n         TM    SWA,SWA1            DECK?\n         BZ    MAIN64              NO.\n         MVC   CARD,8(R7)\n         BAL   R10,PUNCHIT         YES, OUTPUT CARD IMAGE\n         B     MAIN64\n         SPACE\n*---------------------------------------------------------------------*\n*        'LIST' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN50   EQU   *\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN60              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         BZ    MAIN50A             NO\n         CH    R5,MAXLIST          YES, AT LIMIT?\n         BNL   MAIN60              YES, SKIP LISTING\nMAIN50A  EQU   *\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    MAIN51              YES\n         LH    R3,DCBLRECL         RECFM = F OR U.\n         LA    R2,0(R7)\n         B     MAIN52\n         SPACE\nMAIN51   EQU   *\n         MVC   DCBLRECL,0(R7)\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         SH    R3,=H'4'\nMAIN52   EQU   *\n         TM    SWB,SWB1            HEXOUT?\n         BO    MAIN56              YES.\n         TM    SWB,SWB3            IS NUM SPECIFIED?\n         BO    MAIN57              YES.\nMAIN53   EQU   *\n         LR    R15,R3\n         CH    R3,=H'116'\n         BNH   *+8\n         LA    R15,116\n         BCTR  R15,0\n         LA    R1,LINE2+1\n         EX    R15,VARMVC1\nMAIN54   EQU   *\n         LA    R2,116(R2)          OUTPUT OTHER LINES\n         SH    R3,=H'116'\n         BNP   MAIN59              DONE IF NO MORE DATA\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7            TRUNC?\n         BO    MAIN59              YES, QUIT HERE\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN53              NO, LOOP TO CONTINUE OUTPUT\n         SPACE\nMAIN56   EQU   *\n         LA    R15,LINE2+5         OUTPUT LINE IN HEX\n         LR    R0,R3\n         CH    R3,=H'50'           FIFTY BYTES PER LINE\n         BNH   *+8\n         LA    R0,50\n         LR    R1,R2\n         BAL   R10,HEXCON\n         LA    R2,50(R2)           OUTPUT OTHER LINES\n         SH    R3,=H'50'\n         BNP   MAIN59              DONE\n         MVI   LINE2+120,C'*'      FLAG LINE CONTINUATION\n         TM    SWA,SWA7            IS TRUNC SPECIFIED?\n         BO    MAIN59              YES, QUIT.\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN56              LOOP\n         SPACE\nMAIN57   EQU   *\n         SH    R3,=H'8'\n         TM    SAVRECFM,B'10000000' IS IT RECFM=U/F/FB?\n         BO    MAIN57A             YES.\n         MVC   LINE2+1(8),0(R2)    NO, RECFM=V/VB\n         LA    R2,8(0,R2)\n         B     MAIN57B\n         SPACE\nMAIN57A  EQU   *\n         LA    R14,0(R2,R3)\n         MVC   LINE2+1(8),0(R14)\nMAIN57B  EQU   *\n         LA    R1,LINE2+10\n         LR    R15,R3\n         CH    R15,=H'108'\n         BNH   *+8\n         LA    R15,108\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         LA    R2,106(0,R2)\n         SH    R3,=H'106'\n         BNP   MAIN59\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7\n         BO    MAIN59\n         BAL   R10,LOUT\nMAIN58   EQU   *\n         LR    R15,R3\n         LA    R1,LINE2+10\n         CH    R15,=H'106'\n         BNH   *+8\n         LA    R15,106\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         LA    R2,106(0,R2)\n         SH    R3,=H'106'\n         BNP   MAIN59\n         MVI   LINE2+120,C'*'\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN58\n         SPACE\nMAIN59   EQU   *\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE.\n         SPACE\n*---------------------------------------------------------------------*\n*        'DECK' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN60   EQU   *\n         TM    SWA,SWA1            DECK?\n         BZ    MAIN64              NO.\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    MAIN61              YES\n         LH    R3,DCBLRECL         RECFM = U OR F\n         LA    R2,0(R7)\n         B     MAIN62\n         SPACE\nMAIN61   EQU   *\n         MVC   DCBLRECL,0(R7)      RECFM=V/VB\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         SH    R3,=H'4'\nMAIN62   EQU   *\n         LR    R15,R3\n         CH    R3,=H'80'\n         BNH   *+8\n         LA    R15,80\n         BCTR  R15,0\n         EX    R15,VARMVC3\n         TM    SWA,SWA3            UPDTE                          .PRC.\n         BNO   MAIN62A                                            .PRC.\n         CH    R3,=H'80'           IS LRECL=80                    .PRC.\n         BNE   MAIN62A                                            .PRC.\n         CLC   CARD(2),UPDTESUB    IF SUBSITUTE ALREADY THERE     .UPL.\n         BNE   NOTSUB                THEN                         .UPL.\n         TM    SWE,SWE4              IF SYSUPLOG IS OPEN          .UPL.\n         BZ    NOTSUB                   THEN                      .UPL.\n         MVC   UPCARD(8),NAME           PUT MEMBER NAME IN UPCARD .UPL.\n         LA    R15,1(,R5)               LINE NUMBER               .UPL.\n         CVD   R15,WORK1                LINE NUMBER               .UPL.\n         OI    WORK1+7,X'0F'            LINE NUMBER               .UPL.\n         UNPK  UPCARD+9(7),WORK1+4(4)   LINE NUMBER               .UPL.\n         MVC   UPCARD+17(62),CARD    COPY BEGINNING OF CARD IMAGE .SBG.\n         PUT   SYSUPLOG,UPCARD          WRITE RECORD TO SYSUPLOG  .UPL.\nNOTSUB   EQU   *                                                  .UPL.\n         CLC   CARD(2),=C'./'      IS THIS AN UPDTE STATEMENT     .PRC.\n         BNE   MAIN62A                                            .PRC.\n         MVC   CARD(2),UPDTESUB    YES, SUBSTITUTE CHARS          .PRC.\nMAIN62A  EQU   *                                                  .PRC.\n         BAL   R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LOGICAL RECORD\n*---------------------------------------------------------------------*\n         SPACE\nMAIN64   EQU   *\n         LA    R5,1(R5)            UPDATE REC COUNT\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    MAIN32              YES, GO GET NEXT BLOCK.\n         TM    SAVRECFM,B'01000000'  RECFM=V?\n         BZ    *+10                NO\n         MVC   DCBLRECL,0(R7)      YES, USE RECORD DESC. LEN\n         AH    R7,DCBLRECL         UPDATE BUFFER POINTER\n         SH    R6,DCBLRECL         UPDATE BYTES COUNT\n         BP    MAIN40              CONTINUE WITH THIS BLOCK\n         B     MAIN32              GO GET NEXT BLOCK\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF MEMBER OR SDS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN65   EQU   *\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    MAIN70              YES, GO PROCESS IT.\n         ST    R5,WORK2\n         MVC   DIRCRDCT,WORK2\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         BZ    MAIN66              NO\n         TM    SWD,SWD2            SELECT MEMBERS?\n         BNZ   MAIN66              NO.\n         L     R2,CURRENT2+4       YES, UPDATE COUNTS\n         USING NAMTBL,R2\n         MVC   NAMTBL4,DIRPG1\n         MVC   NAMTBL3,DIRCRDCT\n         DROP  R2\nMAIN66   EQU   *\n         CVD   R5,WORK2\n         AL    R5,RECORDS          UPDATE TOTAL REC COUNT\n         ST    R5,RECORDS\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN67              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERICKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG2L),MSG2\n         ED    LINE2+L'MSG2(L'MSG2A),WORK2+5\n         BAL   R10,LOUT\nMAIN67   EQU   *\n         B     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DSORG=PS DATASET.\n*---------------------------------------------------------------------*\n         SPACE\nMAIN70   EQU   *\n         ST    R5,RECORDS\n         MVC   LINE1+6(8),=8C'*'\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\n         BAL   R10,PRNT\n         BAL   R10,PRNT\n         CVD   R5,WORK2\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN72              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERICKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG9L),MSG9\n         ED    LINE2+L'MSG9(L'MSG9A),WORK2+5\n         BAL   R10,LOUT\nMAIN72   EQU   *\n         MVI   MEMCNT+1,1          \"SDS\" IS ONE MEMBER\n         CVD   R5,WORK2\n         MVC   LINE1(MSG9L),MSG9\n         MVI   LINE1,C' '\n         ED    LINE1+L'MSG9(L'MSG9A),WORK2+5\n         BAL   R10,PRNT\n         A     R5,TOTALREC\n         ST    R5,TOTALREC\n         B     ENDLIB90\n         EJECT\n*----------------------------------------------------------------------\n*        END-OF-LIBRARY\n*----------------------------------------------------------------------\nENDLIB   EQU   *\n         LA    R8,SYSLIB\n         TM    SWD,SWD0            SELECT OR EXCLUDE SPECIFIED?\n         BZ    ENDLIB05            NO\n         TM    SWD,SWD2            SELECT SPECIFIED?\n         BZ    ENDLIB20            YES.\nENDLIB05 EQU   *\n         MVC   CURRENT1,NAMETBL1\n         USING DIR,R4\nENDLIB10 EQU   *\n         L     R4,CURRENT1\n         CLI   DIRNAME,X'FF'\n         BE    ENDLIB80\n         LH    R15,DIRUSERL\n         LA    R1,DIRUSER(R15)\n         ST    R1,CURRENT1\n         TM    SWD,SWD0+SWD2       WAS SYSIN-EXCLUDE SPECIFIED?\n         BNO   ENDLIB12            NO\n         TM    DIRFLAGS,B'10000000'  ..WAS THIS MEMBER SPECIFIED?\n         BZ    ENDLIB10            NO, SKIP IT.\nENDLIB12 EQU   *\n         BAL   R10,LSTDIR\nENDLIB14 EQU   *\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         BZ    ENDLIB10            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),=8C'?'\n         L     R1,NAMETBL1\nENDLIB15 EQU   *\n         CLI   DIRNAME-DIR(R1),X'FF'\n         BE    ENDLIB18\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         BE    ENDLIB17\nENDLIB16 EQU   *\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         B     ENDLIB15\nENDLIB17 EQU   *\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         BO    ENDLIB16\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB18 EQU   *\n         BAL   R10,PRNT\n         B     ENDLIB10\nENDLIB20 EQU   *\n         MVC   CURRENT2,NAMETBL2\n         USING NAMTBL,R2\nENDLIB22 EQU   *\n         L     R2,CURRENT2\n         CLI   NAMTBL,X'FF'\n         BE    ENDLIB80\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         L     R4,NAMTBL2          GET PNTR TO DIR AREA\n         LTR   R4,R4               IS THERE ONE?\n         BNZ   ENDLIB30            YES.\n         MVC   LINE1+6(8),NAMTBL1  NO, ISSUE MSG\n         MVC   LINE1+16(L'MSG3),MSG3\n         BAL   R10,PRNT\n         B     ENDLIB22\n         SPACE\nENDLIB30 EQU   *                   MEMBER FOUND, LIST INFO.\n         MVC   DIRPG1,NAMTBL4\n         MVC   DIRCRDCT,NAMTBL3\n         BAL   R10,LSTDIR\nENDLIB34 EQU   *\n         TM    DIRFLAGS,B'11000000' IS THIS PROCESSED ALIAS?\n         BNO   ENDLIB22            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),=8C'?'\n         L     R1,NAMETBL1\nENDLIB35 EQU   *\n         CLI   DIRNAME-DIR(R1),X'FF'\n         BE    ENDLIB38\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         BE    ENDLIB37\nENDLIB36 EQU   *\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         B     ENDLIB35\n         SPACE\nENDLIB37 EQU   *\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         BO    ENDLIB36\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB38 EQU   *\n         BAL   R10,PRNT\n         B     ENDLIB22\n         SPACE\n*---------------------------------------------------------------------*\n*        ISSUE END OF LIBRARY MESSAGE\n*---------------------------------------------------------------------*\n         SPACE\nENDLIB80 EQU   *\n         MVC   LINE1(MSG1L),MSG1\n         LH    R15,MEMCNT\n         CVD   R15,WORK1\n         ED    LINE1+L'MSG1(L'MSG1A),WORK1+5\n         L     R15,RECORDS\n         CVD   R15,WORK1\n         AL    R15,TOTALREC\n         ST    R15,TOTALREC\n         ED    LINE1+L'MSG1+L'MSG1A+L'MSG1AX(L'MSG1B),WORK1+4\n         BAL   R10,PRNT\nENDLIB90 EQU   *\n         XC    RECORDS,RECORDS\n         XC    MEMCNT,MEMCNT\n         IC    R15,TTRK+3\n         LA    R15,1(R15)\n         STC   R15,TTRK+3\n         B     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-RUN\n*---------------------------------------------------------------------*\n         SPACE\nENDRUN   EQU   *\n         TM    SWB,SWB0            DEBUG?\n         BO    ENDRUN10            YES, BYPASS FREE CORE\n         SPACE\n*---------------------------------------------------------------------*\n*        FREE WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\n         OC    COR2,COR2           MAKE SURE CORE WAS GOTTEN\n         BZ    ENDRUN10            NOT GOTTEN\n         FREEMAIN V,A=COR2\nENDRUN10 EQU   *\n         TM    SWC,SWC3            TERMINATE MODE?\n         BO    ENDRUN11            YES.\n         MVC   LINE1(L'ENDMSG0),ENDMSG0\n         XR    R15,R15\n         IC    R15,TTRK+3\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  LINE1+L'ENDMSG0(2),WORK1+6(2)\n         MVC   LINE1+L'ENDMSG0+2(ENDMSG1L),ENDMSG1\n         L     R15,TOTALREC\n         CVD   R15,WORK1\n         ED    LINE1+L'ENDMSG0+L'ENDMSG1+2(L'ENDMSG1A),WORK1+4\n         L     R15,COR2+4\n         SRL   R15,10              CONVERT TO 'K'\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         L     R1,COR7\n         AL    R1,COR8\n         SRL   R1,10\n         SR    R15,R1\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7B,WORK1\n         MVC   LINE1+L'ENDMSG0+ENDMSG1L+4(MSG7L2-1),MSG7+1\nENDRUN11 EQU   *\n         BAL   R10,PRNT            OUTPUT FINAL MSG\n         LA    R8,SYSPUNCH         CLOSE ALL DCBS\n         BAL   R10,TERMIO\n         LA    R8,SYSUPLOG         CLOSE ALL DCBS                 .UPL.\n         BAL   R10,TERMIO                                         .UPL.\n         TM    SWB,SWB0            DEBUG?\n         BO    ENDRUN31            YES, SKIP CLOSING SYSLIB\n         LA    R8,SYSLIB\n         CLOSE SYSLIB\nENDRUN31 EQU   *\n         LA    R8,SYSLIST\n         BAL   R10,TERMIO\n         LA    R8,SYSPRINT\n         BAL   R10,TERMIO\n         TM    SWB,SWB0            DEBUG?\n         BZ    ENDRUN99            NO\n         LH    R2,RETCODE          YES, ABEND\n         ABEND (R2),DUMP\nENDRUN99 EQU   *\n         L     R13,4(R13)\n         LH    R15,RETCODE\n         RETURN (14,12),T,RC=(15)\n         EJECT\n*---------------------------------------------------------------------*\n*        FORMAT AND PRINT THE 'SYSPRINT' LINE FOR A MEMBER\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nLSTDIR   EQU   *\n         ST    R10,SAVE10          SAVE CALLER'S RETURN\n         MVC   LINE1+6(8),DIRNAME\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         BZ    LSTDIR03            NO\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\nLSTDIR03 EQU   *\n         LA    R15,LINE1+L'CAPTIONS-12\n         LA    R0,L'DIRTTR\n         LA    R1,DIRTTR\n         BAL   R10,HEXCON\n         LH    R15,DIRUSERL\n         LTR   R15,R15\n         BNP   LSTDIR10\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         BZ    LSTDIR05            NO.\n         LA    R1,LINE1+L'CAPTIONS\n         LA    R2,DIRUSER\n         BAL   R10,RITSINFO\n         B     LSTDIR10\n         SPACE\nLSTDIR05 EQU   *\n         LA    R15,LINE1+L'CAPTIONS\n         LA    R1,DIRUSER\n         LH    R0,DIRUSERL\n         CH    R0,=H'30'           ARE SPF STATISTICS PRESENT     .SPF.\n         BNE   LSTSPFX             NO, BRANCH                     .SPF.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         BNO   LSTSPFX             NO, BRANCH                     .SPF.\n         TM    DIRTTR+3,X'60'      TTR'S IN USER DATA             .SPF.\n         BNZ   LSTSPFX             YES, THIS ISNT SPF DATA        .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  1(2,R15),WORK1+6(2)                                .SPF.\n         MVI   3(R15),C'.'                                        .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  4(2,R15),WORK1+6(2)                                .SPF.\n*        UNPK  11(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n*        MVC   10(2,R15),11(R15)                                  .SPF.\n*        MVI   12(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+4  YYDDD CREATED                  .SPF.\n         L     R0,WORK1            YYDDD CREATED                  .SPF.\n         BAL   R14,JULIAN                                         .SPF.\n         MVC   9(7,R15),WORK1+1                                   .SPF.\n*        UNPK  21(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n*        MVC   20(2,R15),21(R15)                                  .SPF.\n*        MVI   22(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+8  YYDDD LAST MODIFIED            .SPF.\n         L     R0,WORK1            YYDDD LAST MODIFIED            .SPF.\n         BAL   R14,JULIAN                                         .SPF.\n         MVC   19(7,R15),WORK1+1                                  .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  28(4,R15),WORK1(3)                                 .SPF.\n         MVC   27(2,R15),28(R15)                                  .SPF.\n         MVI   29(R15),C':'                                       .SPF.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         MVC   32(6,R15),=X'402020202120'                         .SPF.\n         ED    32(6,R15),WORK1+5                                  .SPF.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         MVC   38(6,R15),=X'402020202120'                         .SPF.\n         ED    38(6,R15),WORK1+5                                  .SPF.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         MVC   44(6,R15),=X'402020202120'                         .SPF.\n         ED    44(6,R15),WORK1+5                                  .SPF.\n         MVC   52(10,R15),DIRUSER+20   USER ID                    .SPF.\n         B     LSTDIR10                                           .SPF.\n         SPACE\nJULIAN   EQU   *                                                  .SPF.\n         STM   R15,R1,JULIANS                                     .SPF.\n         XC    WORK2,WORK2                                        .SPF.\n         ST    R0,WORK2+4                                         .SPF.\n         CVB   R1,WORK2            CONVERT DATE TO BINARY         .SPF.\n         XR    R0,R0                                              .SPF.\n         D     R0,=F'1000'         TO SEP YEAR AND DAY            .SPF.\n         ST    R1,WORK2            SAVE YEAR                      .SPF.\n         L     R15,=A(MONTHS1)     FOR STD YEAR                   .SPF.\n         TM    WORK2+3,X'03'       LEAP YEAR?                     .SPF.\n         BNZ   *+8                 NO                             .SPF.\n         L     R15,=A(MONTHS2)     FOR LEAP YEAR                  .SPF.\n         XR    R1,R1                                              .SPF.\nJULIANX  EQU   *                                                  .SPF.\n         SH    R0,0(R15)                                          .SPF.\n         BNP   JULIANY                                            .SPF.\n         LA    R1,3(R1)                                           .SPF.\n         LA    R15,2(R15)                                         .SPF.\n         B     JULIANX                                            .SPF.\n         SPACE 1                                                  .SPF.\nJULIANY  EQU   *                                                  .SPF.\n         AH    R0,0(R15)                                          .SPF.\n         MH    R0,=H'10'                                          .SPF.\n         CVD   R0,WORK2            FOR DAY OF MONTH               .SPF.\n         AL    R1,=A(MONTHS3)      FOR MON IN CHARS               .SPF.\n         MVC   WORK1(8),=X'4020204B4B4B2020'                      .SPF.\n         MVC   WORK1+3(3),0(R1)                                   .SPF.\n         MVC   JULIANS+4(1),WORK2+6 DAY OF MONTH DDYYDDDF         .SPF.\n         ED    WORK1(8),JULIANS+4                                 .SPF.\n         CLI   WORK1+1,C' '                                       .SPF.\n         BNE   *+8                                                .SPF.\n         MVI   WORK1+1,C'0'                                       .SPF.\n         LM    R15,R1,JULIANS                                     .SPF.\n         BR    R14                                                .SPF.\n         SPACE 1                                                  .SPF.\nLSTSPFX  EQU   *                                                  .SPF.\n         CH    R0,=H'32'\n         BNH   *+8\n         LA    R0,32\n         BAL   R10,HEXCON\nLSTDIR10 EQU   *\n         TM    SWA,SWA2            LISTDIR ONLY?\n         BO    LSTDIR90            YES\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         BZ    LSTDIR90            NO\n         MVC   WORK1(4),DIRCRDCT\n         L     R1,WORK1\n         CVD   R1,WORK1\n         MVC   LINE1+24(L'MSG2A),MSG2A\n         ED    LINE1+24(L'MSG2A),WORK1+5\nLSTDIR90 EQU   *\n         BAL   R10,PRNT\n         L     R10,SAVE10\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        UPON ENTRY, R1=A(BUFFER), R2=A(DIRECTORY ENTRY)\n*---------------------------------------------------------------------*\n         SPACE\nRITSINFO EQU   *\n         CLI   DIRUSERL+1,5        CHECK LENGTH OF USER FIELD\n         BL    UNKNOWN             SHORT.\n         MVC   0(L'PAT1,R1),PAT1\n         ED    0(L'PAT1,R1),0(R2)\n         MVC   10(L'PAT1,R1),PAT1\n         ED    10(L'PAT1,R1),3(R2)\n         XC    WORK1,WORK1\n         MVC   WORK1+2(2),6(R2)\n         L     R15,WORK1\n         CVD   R15,WORK1\n         MVC   WORK2,PAT2\n         ED    WORK2,WORK1+4\n         MVC   23(4,R1),WORK2+4\n         TM    SWD,SWD4+SWD5       CRJE?\n         BO    CRJEINFO            YES.\nCRBEINFO EQU   *\n         MVC   42(3,R1),=C'SEQ'\n         TM    9(R2),X'40'         SEQ/NOSEQ?\n         BO    *+10                SEQ.\n         MVC   40(2,R1),=C'NO'\n         MVC   52(4,R1),=C'SCAN'\n         TM    9(R2),X'80'         SCAN/NOSCAN?\n         BO    *+10\n         MVC   50(2,R1),=C'NO'\n         TM    8(R2),X'40'         FORTRAN FILE?\n         BZ    *+12                NO.\n         MVC   30(7,R1),=C'FORTRAN'\n         BR    R10\n         TM    8(R2),X'20'         OTHER FILE?\n         BZ    *+12                NO.\n         MVC   30(5,R1),=C'OTHER'\n         BR    R10\n         TM    8(R2),X'08'         FLIST FILE?\n         BZ    *+12                NO.\n         MVC   30(5,R1),=C'FLIST'\n         BR    R10\n         TM    SWD,SWD5            RITS?\n         BZ    *+20                YES\n         TM    8(R2),X'10'         OBJMOD FILE?\n         BZ    *+12                NO.\n         MVC   30(6,R1),=C'OBJMOD'\n         BR    R10\n         SPACE\nUNKNOWN  EQU   *\n         MVC   30(7,R1),=C'???????'\n         BR    R10\n         SPACE\nCRJEINFO EQU   *\n         CLI   DIRUSERL+1,11       CHECK USER LENGTH\n         BL    CRBEINFO            SHORT...HANDLE AS CRBE\n         LA    R1,30(R1)           POINT AT ATTR AREA OF LINE\n         CRJE  8,B'00100000','DATA,',5,CRJE20\n         CRJE  8,B'00010000','TEXT,',5,CRJE20\n         CRJE  8,B'00001000','DSLIST,',7,CRJE20\n         CRJE  8,B'00000100','CLIST,',6,CRJE20\n         CRJE  8,B'01000001','FORTH,',6,CRJE20\n         CRJE  8,B'01000000','FORTG,',6,CRJE20\n         CRJE  8,B'00000001','FORTE,',6,CRJE20\n         TM    8(R2),B'10000010'   PL1?\n         BNZ   CRJE15              YES.\n         MVC   0(7,R1),=C'???????' NO, UNKNOWN.\n         BR    R10                 QUIT.\n         SPACE\nCRJE15   EQU   *\n         MVC   0(7,R1),=C'PL1(  ,'\n         XR    R15,R15\n         IC    R15,13(R2)          PL1 SORMARGIN\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(2,R1),WORK1(8)\n         IC    R15,14(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  7(2,R1),WORK1(8)\n         LA    R1,10(R1)\n         CRJE  8,B'10000000','C48),',5,CRJE20\n         MVC   0(5,R1),=C'C60),'\n         LA    R1,5(R1)\nCRJE20   EQU   *\n         CRJE  9,B'10000000','SEQ,',4,CRJE21\n         MVC   0(6,R1),=C'NOSEQ,'\n         LA    R1,6(R1)\nCRJE21   EQU   *\n         TM    8(R2),B'11000011'   PL1 OR FORT?\n         BZ    CRJE22              NO...SKIP SCAN\n         CRJE  9,B'01000000','SCAN,',5,CRJE22\n         MVC   0(7,R1),=C'NOSCAN,'\n         LA    R1,7(R1)\nCRJE22   EQU   *\n         MVC   0(4,R1),=C'BLK='\n         LH    R15,20(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(4,R1),WORK1(8)\n         MVC   8(3,R1),=C',K='\n         MVC   11(3,R1),10(R2)\n         BR    R10\n         EJECT\n*---------------------------------------------------------------------*\n*        *** SUBROUTINES ****\n*---------------------------------------------------------------------*\n         SPACE\nVARMVC1  MVC   0(0,R1),0(R2)       FOR PRINTED OUTPUT\nVARMVC3  MVC   CARD(*-*),0(R2)     FOR PUNCHED OUTPUT\n         SPACE\nSAVERC   EQU   *\n         CH    R1,RETCODE          COMPARE TO CURRENT VALUE\n         BNHR  R14                 RETURN IF NOT HIGHER\n         STH   R1,RETCODE          REPLACE WITH NEW VALUE\n         BR    R14\n         SPACE\nTERMINAT EQU   *\n         LA    R13,SAVEAREA        TERMINATE PROCESSING\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BAL   R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         B     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\nPUTMSG   EQU   *\n         MVC   LINECNT1,LINEMAX    FORCE PAGE EJECT\nPUTMSGXX EQU   *\n         ST    R14,SAVE14          SETUP FOR MSG OUTPUT\n         PUT   SYSPRINT,LINE0\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         L     R14,SAVE14          AND FALL THRU TO CLEARBUF\n         BR    R14\n         SPACE\nPUNCHIT  EQU   *\n         PUT   SYSPUNCH,CARD\n         MVI   CARD,C' '\n         MVC   CARD+1(L'CARD-1),CARD\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        TERMINATE I/O:  CLOSE DCB AND FREE BUFFER POOL\n*---------------------------------------------------------------------*\n         SPACE\nTERMIO   EQU   *\n         TM    DCBOFLGS,OFLGS      DCB OPEN?\n         BZR   R10                 NO\n         CLOSE ((R8))              YES, CLOSE THE DCB\n         FREEPOOL  (R8)            AND FREE THE BUFFER POOL\n         BR    R10                 RETURN\n         SPACE\n*---------------------------------------------------------------------*\n*        STANDARD FILES DCB EXIT ROUTINES\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT1 EQU   *\n         LA    R5,3200             FOR SYSIN & SYSPUNCH\n         B     DCBEXITZ\n         SPACE\nDCBEXITA EQU   *\n         LA    R5,3509             FOR SYSPRINT\n         B     DCBEXITZ\n         SPACE\nDCBEXITB EQU   *\n         LH    R5,=Y(7260)         FOR SYSLIST\nDCBEXITZ EQU   *\n         LH    R4,DCBLRECL         GET LRECL\n         CH    R4,DCBBLKSI         BLKSIZE SPECIFIED?\n         BNH   DCBEXITY            YES.\n         STH   R5,DCBBLKSI         NO, USE DEFAULT.\nDCBEXITY EQU   *\n         XR    R2,R2               FORCE MULT BLKSIZE\n         LH    R3,DCBBLKSI\n         DR    R2,R4\n         MH    R3,DCBLRECL\n         STH   R3,DCBBLKSI\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        PDS DATA READ DCB EXIT ROUTINE\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT2 EQU   *\n         MVC   SAVBLKSI,DCBBLKSI   SAVE DCB PARMS\n         MVC   SAVLRECL,DCBLRECL\n         MVC   SAVRECFM,DCBRECFM\n         MVC   SAVBUFNO,DCBBUFNO\n         MVI   DCBBUFNO,0          BUFFERING HANDLED INTERNALLY\n         CLI   SAVBUFNO,0          IS BUFNO SPECIFIED?\n         BNER  R14                 YES.\n         MVI   SAVBUFNO,2          NO, USE DEFAULT.\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-FILE DETECTED ON SYSLIB\n*---------------------------------------------------------------------*\n         SPACE\nPDSEOF   BR    R10                 BETTER BE SET TO GOOD ADDR\n         SPACE\nSYNERR1  EQU   *\n         SYNADAF   ACSMETH=BPAM    PDS-DATA READ I/O ERROR\n         STM   R14,R12,SYNADSAV    SAVE REGS\n         LR    R2,R1               SAVE POINTER TO MESSAGE\n         BAL   R10,PRNT            --OUTPUT CURRENT LINE\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(78),50(R2)\n         BAL   R14,PUTMSG          REDO LASTLINE.\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(L'HEAD2MEM),HEAD2MEM\n         MVC   LINE0+L'LPDS02I+L'HEAD2MEM(8),NAME\n         BAL   R14,PUTMSG\n         LA    R1,8                SET THE RETURN CODE\n         BAL   R14,SAVERC\n         LM    R14,R12,SYNADSAV    RESTORE REGS\n         SYNADRLS\n         TM    SWB,SWB4            EROPT=TERM/ACC?\n         BZ    SYNERR2             FOR TERM.\n         BR    R14                 FOR ACC.\n         SPACE\nSYNERR2  EQU   *\n         LA    R13,SAVEAREA        TERMINATE PROCESSING\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BAL   R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         B     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\n*---------------------------------------------------------------------*\n*        HEX-BINARY TO HEX-CHARACTER CONVERSION ROUTINE\n*        UPON ENTRY, R0=LENGTH OF SOURCE, R1=A(SOURCE), R15=A(TARGET)\n*---------------------------------------------------------------------*\n         SPACE\nHEXCON   EQU   *\n         IC    R14,0(R1)           PROCESS FOUR LSB'S\n         N     R14,=F'15'\n         IC    R14,HEXTBL(R14)\n         STC   R14,1(R15)\n         IC    R14,0(R1)           PROCESS FOUR MSB'S\n         SRL   R14,4\n         IC    R14,HEXTBL(R14)\n         STC   R14,0(R15)\n         LA    R1,1(R1)\n         LA    R15,2(R15)\n         SH    R0,=H'1'            LOOP?\n         BP    HEXCON              YES.\n         BR    R10                 NO, RETURN.\n         SPACE\n*---------------------------------------------------------------------*\n*        OUTPUT A LINE TO SYSPRINT\n*---------------------------------------------------------------------*\n         SPACE\nPRNT     EQU   *\n         LA    R15,LINE1\n         BAL   R14,SETCC\n         LH    R15,LINECNT1\n         LA    R15,0(R15,R1)\n         STH   R15,LINECNT1\n         CH    R15,LINEMAX         AT LIMIT?\n         BNH   PRNTC               NO.\nPRNTA    EQU   *\n         LA    R15,5\n         STH   R15,LINECNT1\n         MVC   HEAD1PAG,PAGEPAT\n         LH    R15,PAGENUM1\n         LA    R15,1(R15)\n         STH   R15,PAGENUM1\n         CVD   R15,WORK1\n         ED    HEAD1PAG,WORK1+4\n         MVC   LINE0(121),HEAD1\n         BAL   R14,PUTMSGXX\n         MVI   LINE0,C'0'\n         TM    SWD,SWD3            INITIAL PAGE?\n         BZ    PRNTB               YES, SKIP CAPTIONS.\n         MVC   LINE0(L'CAPTIONS),CAPTIONS\n         TM    SWD,SWD7            RITS/CRBE?\n         BZ    *+14                NO.\n         MVC   LINE0+L'CAPTIONS(L'RITSCAP),RITSCAP\n         B     *+10\n         MVC   LINE0+L'CAPTIONS(L'USERCAP),USERCAP\n         TM    SWE,SWE1+SWE2       SPF STATS IN THIS PDS          .SPF.\n         BNO   *+10                NO.                            .SPF.\n         MVC   LINE0+L'CAPTIONS(L'SPFSCAP),SPFSCAP                .SPF.\nPRNTB    EQU   *\n         BAL   R14,PUTMSGXX\n         MVI   LINE1,C'0'\nPRNTC    EQU   *\n         MVC   LINE0,LINE1\n         BAL   R14,PUTMSGXX\n         MVI   LINE1,C' '\n         MVC   LINE1+1(L'LINE1-1),LINE1\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        'SYSLIST' OUTPUT S/R\n*---------------------------------------------------------------------*\n         SPACE\nLOUT     EQU   *\n         LA    R15,LINE2\n         BAL   R14,SETCC\n         TM    SWD,SWD6            TEST FORCE EJECT\n         BO    LOUTC               YES.\n         TM    SWA,SWA5            IS THIS 'EJECT' FORMAT\n         BZ    LOUTA               NO\n         AH    R1,LINECNT2         UPDATE LINECOUNT FOR EJECT FORMAT\n         STH   R1,LINECNT2\n         CH    R1,LINEMAX          AT BOTTOM OF PAGE?\n         BNH   LOUTE               NO\n         B     LOUTC               YES, DO PAGE EJECT AND HEADER-2\n         SPACE\nLOUTA    EQU   *\n         LH    R15,LINECNT2\n         LA    R15,0(R1,R15)\n         CLC   =C'0MEMBER=',LINE2  TEST FOR SPECIAL CASE\n         BNE   LOUTA1              NO.\n         LA    R15,2(,R15)         YES, EXTRA PADDING.\nLOUTA1   EQU   *\n         CH    R15,LINEMAX         TEST FOR LIMIT\n         BH    LOUTB               AT LIMIT\n         AH    R1,LINECNT2         UPDATE LINECNT\n         STH   R1,LINECNT2\n         B     LOUTE               AND OUTPUT THE LINE.\n         SPACE\nLOUTB    EQU   *\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         LH    R1,LINECNT2\nLOUTB1   EQU   *\n         CH    R1,LINEMAX\n         BNL   LOUTB2              PADDING DONE, GO OUTPUT HEADER\n         ST    R1,SAVELOUT\n         L     R1,ALISTDCB\n         PUT   (1),LINE0\n         L     R1,SAVELOUT\n         LA    R1,1(,R1)\n         B     LOUTB1\n         SPACE\nLOUTB2   EQU   *\n         MVI   HEAD2,C'0'\n         L     R1,ALISTDCB\n         PUT   (1),HEAD2\n         MVI   HEAD2,C'1'\nLOUTC    EQU   *\n         NI    SWD,255-SWD6        RESET SWITCH\n         LA    R15,3\n         TM    SWA,SWA5            IS THIS NOEJECT FORMAT?\n         BO    *+8                 NO, IT IS EJECT\n         LA    R15,2(,R15)         +2 FOR BOTTOM IN NOEJECT FORMAT\n         STH   R15,LINECNT2\n         MVC   HEAD2NAM,NAME\n         MVC   HEAD2PAG,PAGEPAT\n         LH    R15,PAGENUM2        UPDATE THE PAGE NUMBER\n         LA    R15,1(R15)\n         STH   R15,PAGENUM2\n         CVD   R15,WORK1\n         ED    HEAD2PAG,WORK1+4\n         L     R1,ALISTDCB\n         PUT   (1),HEAD2           OUTPUT THE PAGE HEADER\n         MVI   LINE2,C'-'\nLOUTE    EQU   *\n         L     R1,ALISTDCB\n         PUT   (1),LINE2           OUTPUT THE FORMATTED LINT\n         MVI   LINE2,C' '          THEN CLEAR THE USED LINE WORKAREA\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         BR    R10\n         SPACE\nSETCC    EQU   *\n         CC    4000,0(R15),1,SETCC9\n         CC    0,0(R15),+,SETCC9\n         CC    3,0(R15),-,SETCC9\n         CC    2,0(R15),0,SETCC9\n         LA    R1,1                FORCE 'DEFAULT'\n         MVI   0(R15),C' '\nSETCC9   EQU   *\n         BR    R14\n         SPACE\nGETLOW   EQU   *\n         L     R1,COR4\n         AR    R0,R1\n         C     R0,COR6\n         BNL   GETBAD\n         ST    R0,COR4\n         B     MAXUSED\n         SPACE\nGETHI    EQU   *\n         L     R1,COR6\n         SR    R1,R0\n         C     R1,COR4\n         BNH   GETBAD\n         ST    R1,COR6\n         L     R15,COR5\n         SR    R15,R1\n         C     R15,COR8\n         BNH   *+8\n         ST    R15,COR8\n         BR    R14\n         SPACE\nGETBASE  EQU   *\n         L     R1,COR3\n         AR    R0,R1\n         C     R0,COR5\n         BNL   GETBAD\n         ST    R0,COR3\nRESETLO  EQU   *\n         MVC   COR4,COR3\nMAXUSED  EQU   *\n         L     R15,COR4\n         SR    R15,R1\n         C     R15,COR7\n         BNH   *+8\n         ST    R15,COR7\n         BR    R14\n         SPACE\nRESETHI  EQU   *\n         MVC   COR6,COR5\n         BR    R14\n         SPACE\nGETBAD   EQU   *\n         MVC   LINE0(L'LPDS10I),LPDS10I\n         BAL   R14,PUTMSGXX\n         B     TERMINAT\n         EJECT\n*---------------------------------------------------------------------*\n*        *** STORAGE AREAS, CONSTANTS, ETC. ****\n*---------------------------------------------------------------------*\n         SPACE\nSAVEAREA DC    9D'0'               STD OS SAVE AREA\nWORK1    DC    1D'0'\nWORK2    DC    1D'0'\nSYNADSAV DC    8D'0'               TO SAVE REGS IN SYNAD EXIT\nCOR1     DC    A(10*1024,500*1024)  MIN/MAX SIZE FOR GETMAIN\nCOR2     DC    A(0,0)              RETURNED ADDR AND SIZE\nCOR3     DC    A(*-*)              BOTTOM OF AREA\nCOR4     DC    A(*-*)              START BOTTOM OF VARIABLE AREA\nCOR5     DC    A(*-*)              TOP OF AREA\nCOR6     DC    A(*-*)\nCOR7     DC    A(0)\nCOR8     DC    A(0)\nTIOT     DC    A(0)                POINTER TO TIOT\nBFRS     DC    2A(0)\nSAVELOUT DC    F'0'\nSAVE10   DC    A(0)                TO SAVE REGS 10\nSAVE14   DC    A(0)                TO SAVE REG 14\nBUFFER0  DC    A(0)                PDS BUFFER LENGTH\nBUFFER1  DC    A(0)                PDS BUFFER #1 ADDRESS\nBUFFER2  DC    A(0)                PDS BUFFER #2 ADDRESS\nTTRK     DC    F'0'                FOR FIND/POINT.\nECB      DC    F'0'\nIOB      DC    0F'0',X'42',X'000000',A(ECB)\nCSW      DC    XL8'0'\nACP      DC    A(*-*),A(SYSLIB)\n         DC    A(0),Y(0,0)\nMBB      DC    XL3'0'\nCCHHR    DC    XL5'0'\nRECORDS  DC    F'0'                COUNT OF TOTAL RECORDS IN LIB\nTOTALREC DC    F'0'                TOTAL NO. OF LRECL PROCESSED\nALCB     DC    A(*-*)\nALISTDCB DC    A(SYSLIST)\nNAMETBL1 DC    A(0)                POINTER TO DIRECTORY TABLE\nNAMETBL2 DC    A(0)                POINTER TO SELECTED NAMES\nCURRENT1 DC    2A(0)               PNTRS TO NAMETBL1 CURRENT\nCURRENT2 DC    2A(0)               PNTRS TO NAMETBL2 CURRENT\nDSCB     CAMLST SEARCH,DSNAME,VOLSER,WORKAREA\n         DC    0D'0'\nWORKAREA DC    XL160'00'           OBTAIN'S WORKAREA\nDSNAME   DC    CL44' '\nVOLSER   DC    CL6' '\nSWITCHES DC    XL5'00'             RUN SWITCHES AND FLAGS         .PRC.\n         ORG   *-5                                                .PRC.\nSWA      DS    X\nSWB      DS    X\nSWC      DS    X\nSWD      DS    X\nSWE      DS    X                                                  .PRC.\n         ORG   ,\nEXLST1   DC    0F'0',X'85',AL3(DCBEXIT1)     SYSIN & SYSPUNCH\nEXLSTA   DC    0F'0',X'85',AL3(DCBEXITA)     SYSPRINT\nEXLSTB   DC    0F'0',X'85',AL3(DCBEXITB)     SYSLIST\nEXLST2   DC    0F'0',X'05',AL3(DCBEXIT2)     FOR PDS DCB\nJFCBADRS DC    X'80',AL3(*-*)\nSAVBLKSI DC    H'0'\nSAVLRECL DC    H'0'\nSAVRECFM DC    X'00'\nSAVBUFNO DC    AL1(0)\nRETCODE  DC    H'0'                RETURN CODE\nPAGENUM1 DC    H'0'                CURRENT SYSPRINT PAGE NUMBER\nPAGENUM2 DC    H'0'                CURRENT SYSLIST  PAGE NUMBER\nLINECNT1 DC    H'0'                CURRENT SYSPRINT LINE NUMBER\nLINECNT2 DC    H'0'                CURRENT SYSLIST  LINE NUMBER\nLINEMAX  DC    H'0'                MAXIMUM LINE NUMBER\nMAXDIR   DC    H'0'\nMAXLIST  DC    H'0'\nMEMCNT   DC    H'0'\n         DC    0F'0'\nNAME2    DC    CL8' '              ALIAS NAME\nNAME     DC    CL8' '              MEMBER NAME\nDDPRINT  DC    CL8'&DDPRINT'       SYSPRINT\nDDLIST   DC    CL8'&DDLIST'        SYSLIST\nDDPUNCH  DC    CL8'&DDPUNCH'       SYSPUNCH\nDDLIB    DC    CL8'&DDLIB'         SYSLIB\nDDIN     DC    CL8'&DDIN'          SYSIN\nDDUPLOG  DC    CL8'&DDUPLOG'       SYSUPLOG                       .UPL.\nSWAX     DC    B'&A(1)&A(2)&A(3)&A(4)&A(5)&A(6)&A(7)&A(8)'\nSWBX     DC    B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'\nSWEX     DC    B'&E(1)&E(2)&E(3)&E(4)&E(5)&E(6)&E(7)&E(8)'        .PRC.\nUPDTE1   DC    C'./ ADD NAME='\nUPDTE2   DC    C'./ ADD SSI=00000000,NAME='\nUPDTESUB DC    C'><'                                              .PRC.\nPAT1     DC    X'4021204B202020'\nPAT2     DC    X'4020202020202120'\nJULIANS  DC    3F'0'\nCARD     DC    CL80' '\nUPCARD   DC    CL80' '                                            .UPL.\nLINE0    DC    CL133' '\nLINE1    DC    CL133' '\nLINE2    DC    CL133' '\n         DC     0D'0'\n         LTORG\nMONTHS1  DC    Y(31,28,31,30,31,30,31,31,30,31,30,31)\nMONTHS2  DC    Y(31,29,31,30,31,30,31,31,30,31,30,31)\nMONTHS3  DC    C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\n*        DC    C' **** &ID - LISTPDS &VERSION (&RELEASE) ****'   *.PRC.\n*        DC    C' **** GSFC - LISTPDS 7.3 (27MAR78) ****'         .PRC.\nHEAD1VER DC    C' ----------  LISTPDS  8.1  ----------- '         .PRC.\nHEXTBL   DC    CL16'0123456789ABCDEF'\nHEAD1    DC    C' '                SYSPRINT HEADING\nHEAD1DAT DC    CL8' '\nHEAD1TIM DC    CL9' '\nHEAD1C1  DC    CL7' '\nHEAD1VOL DC    CL6' '\nHEAD1C2  DC    CL6' '\nHEAD1DSN DC    CL44' ',C'   '\n         ORG   *-69                                               .PRC.\nHEDD1DSN DC    CL(4+44+8+6+7)' -- '      DSN -- VOL=XXXXXX        .PRC.\nHEAD1MEM DC    CL7' '  ... MEMBER= ON SYSLIST\nHEAD1NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         DC    CL10' ',C'PAGE'\nHEAD1PAG DC    CL8' '\nHEAD1R   DC    X'F14021204B4B4B20204021204B20204B2020'\nHEAD1C1R DC    CL7' - VOL='\nHEAD1C2R DC    CL6', DSN='\nHEAD2    DC    C'1'                SYSLIST HEADING\nHEAD2DAT DC    CL8' '\nHEAD2TIM DC    CL9' ',C' - VOL='\nHEAD2VOL DC    CL6' ',C', DSN='\nHEAD2DSN DC    CL44' ',C'   '\nHEAD2MEM DC    CL7'MEMBER='  ... MEMBER= ON SYSLIST\nXEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         ORG   *-84                                               .PRC.\n         DC    CL4' -- '                                          .PRC.\nHEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST                 .PRC.\nHEDD2DSN DC    CL72' -- '                                         .PRC.\n         DC    CL10' ',C'PAGE'\nHEAD2PAG DC    CL8' '\n*AGEPAT  DC    X'4020202020202120'                               *.PRC.\nPAGEPAT  DC    X'4020202020202020'                                .PRC.\nCAPTIONS DC    C'-     NAME       PAGE   RECORDS    T T R C    '\nRITSCAP  DC    C' CREATED  MODIFIED  ACCESSED  ATTRIBUTES'\nUSERCAP  DC    C'USER INFORMATION (HEX)'\nSPFSCAP  DC        C'VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MOD+\n                   ID'                                            .SPF.\n*                     01.00    YY/DDD    YY/DDD HH:MM  XXXX  XXXX  XXXX\n*                USERID                                           .SPF.\nLPDS01I  DC    C'0LPDS01I  DIRECTORY I/O ERROR - '\nLPDS02I  DC    C' LPDS02I  PDS DATA READ ERROR - '\nLPDS03I  DC    C'0LPDS03I  EXECUTION ABORTED.'\nLPDS04I  DC    C'0LPDS04I  OPEN ERROR FOR '\nLPDS05I  DC    C'0LPDS05I  WARNING--PARAMETER SPECIFICATION ERROR'\nLPDS06I  DC        C'0LPDS06I  INVALID DCB SPECIFICATIONS FOR &DDLIB DD+\n               .  '\nLPDS06I0 DC    C' NOT SUPPORTED.'\nLPDS06I1 DC    C'MACHINE CONTROL CHARACTERS'\nLPDS06I2 DC    C'VARIABLE SPANNED RECORDS'\nLPDS06I3 DC    C'TRACK OVERFLOW'\nLPDS06IA DC    C'BLKSIZE INVALID.'\nLPDS06IB DC    C'INVALID RECFM.'\nLPDS07I  DC        C'0LPDS07I WARNING--RITS/CRBE/CRJE PROCESSING DELETED\n               ,  LIBRARY DCB PARMS NOT COMPATABLE.'\nLPDS08I  DC    C'0LPDS08I  ERROR--PDS DIRECTORY NOT STANDARD FORMAT.'\nLPDS09I  DC    C'0LPDS09I  UNABLE TO OPEN ',CL8' '\n         DC    C'.  OPTION DELETED.'\nLPDS09IL EQU   *-LPDS09I\nLPDS10I  DC    C'0LPDS10I  WORKAREA EXCCEEDED .. RAISE REGION'\nLPDS11I  DC    C'0LPDS11I ONLY DSORG=PS OR DSORG=PO ARE VALID'\nMSG1     DC    C'0*** END OF LIBRARY *** '\nMSG1A    DC    X'402020202120'\nMSG1AX   DC    C' MEMBERS PROCESSED WITH A TOTAL OF'\nMSG1B    DC    X'4020202020202120',C' RECORDS'\nMSG1L    EQU   *-MSG1\nMSG2     DC    C'0*** END OF MEMBER *** '\nMSG2A    DC    X'402020202120',C' RECORDS PROCESSED   '\nMSG2L    EQU   *-MSG2\nMSG3     DC    C'****  MEMBER NOT FOUND IN LIBRARY'\nMSG4     DC    C'****  IS AN ALIAS FOR '\nMSG5     DC    C'****  ABOVE MEMBER IS AN ALIAS FOR '\nMSG6     DC    C'0SPECIFIED PARMS --'\nMSG7     DC    C'0WORKAREA SIZE: '\nMSG7A    DC    C'XXX',C'K'\nMSG7L1   EQU   *-MSG7\n         DC    C',  NEVER USED: '\nMSG7B    DC    C'XXX',C'K'\nMSG7L2   EQU   *-MSG7\nMSG8     DC    C'-LIBRARIES:'\nMSG9     DC    C'0*** END OF SEQUENTIAL DATASET *** '\nMSG9A    DC    X'402020202120',C' RECORDS PROCESSED   '\nMSG9L    EQU   *-MSG9\nENDMSG0  DC    C'0*** END OF RUN ***   '\nENDMSG1  DC    C' LIBRARIES PROCESSED WITH A TOTAL OF '\nENDMSG1A DC    X'4020202020202120',C' RECORDS.'\nENDMSG1L EQU   *-ENDMSG1\nENDMSG2  DC    C' *** OPTIONS IN EFFECT *** '\nENDMSG3  DC    C'SPECIFIED-MEMBERS'\n         SPACE\n*---------------------------------------------------------------------*\n*        DCB'S FOR LISTPDS\n*---------------------------------------------------------------------*\n         SPACE\n         PRINT NOGEN\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPRINT,                +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTA\nSYSLIST  DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDLIST,                 +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTB\nSYSPUNCH DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPUNCH,                +++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\nSYSLIB   DCB   DSORG=PO,MACRF=(R),DDNAME=&DDLIB,EODAD=PDSEOF,      +++++\n               SYNAD=SYNERR1,NCP=1,EXLST=EXLST2\nSYSIN    DCB   DSORG=PS,MACRF=(R),DDNAME=&DDIN,EODAD=BLDSEL90,    ++++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\nSYSUPLOG DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDUPLOG,                +++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n         DCBD  DSORG=(PS,PO),DEVD=(DA)\n         EJECT\nLISTPDS  CSECT ,\n         SPACE\n*---------------------------------------------------------------------*\n*         PARAMETER ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\n         USING PA,R6\nPA       L     R2,0(R4)\n         LH    R1,0(R2)\n         LA    R2,2(R2)            BEGINNING OF STRING\n         LTR   R3,R1               ANY PARMS SEPECIFIED?\n         BZ    PGMINITA            NO PARMS...CONTINUE INIT\n         MVC   LINE1(L'MSG6),MSG6\n         BAL   R10,PRNT\n         LA    R1,LINE1+10\n         LR    R15,R3\n         CH    R15,=H'110'\n         BL    *+8\n         LA    R15,110\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         BAL   R10,PRNT\n         LA    R3,0(R2,R3)         END OF STRING\nPALOOP   CR    R2,R3               END OF PARMS?\n         BNL   PGMINITA            YES, GOTO COMPLETE INIT\n         CLI   0(R2),C','          NULL PARM?\n         BE    PAEND               YES.\n         CLC   =C'LINECNT=',0(R2)\n         BE    PA15\n         CLC   =C'EROPT=',0(R2)\n         BE    PA22\n         CLC   =C'MAXLIST=',0(R2)\n         BE    PA10\n         PACL  LISTDIR,7,OI,SWA,SWA2,NI,SWA,255-SWA0\n         PACL  DEBUG,5,OI,SWB,SWB0\n         PACL  NODEBUG,7,NI,SWB,255-SWB0\n         PACL  LIST,4,OI,SWA,SWA0\n         PACL  NOLIST,6,NI,SWA,255-SWA0\n         PACL  DECK,4,OI,SWA,SWA1\n         PACL  NODECK,6,NI,SWA,255-SWA1\n         PACL  UPDTE,5,OI,SWA,SWA3\n         PACL  NOUPDTE,7,NI,SWA,255-SWA3\n         PACL  SSI,3,OI,SWA,SWA6\n         PACL  NOSSI,5,NI,SWA,255-SWA6\n         PACL  RITS,4,NI,SWD,255-SWD5,OI,SWD,SWD4\n         PACL  CRBE,4,NI,SWD,255-SWD4,OI,SWD,SWD5\n         PACL  CRJE,4,OI,SWD,SWD4+SWD5\n         PACL  TRUNC,5,OI,SWA,SWA7\n         PACL  NOTRUNC,7,NI,SWA,255-SWA7\n         PACL  HEXOUT,6,OI,SWB,SWB1\n         PACL  NOHEXOUT,8,NI,SWB,255-SWB1\n         PACL  NUM,3,OI,SWB,SWB3\n         PACL  NONUM,5,NI,SWB,255-SWB3\n         PACL  EJECT,5,OI,SWA,SWA5\n         PACL  NOEJECT,7,NI,SWA,255-SWA5\n         PACL  SELECT,6,NI,SWD,255-SWD2\n         PACL  EXCLUDE,7,OI,SWD,SWD2\n         PACL  SEL,3,OI,SWE,SWE0                                  .SEL.\n         PACL  NOSEL,5,NI,SWE,255-SWE0                            .SEL.\n         PACL  SPF,3,OI,SWE,SWE1                                  .SPF.\n         PACL  NOSPF,5,NI,SWE,255-SWE1                            .SPF.\n         OI    SWC,SWC0              FLAG BAD KEYWORK\nPABAD    CLI   0(R2),C','            FIND NEXT KEYWORK\n         BE    PALOOP\n         LA    R2,1(,R2)\n         CR    R2,R3\n         BL    PABAD\nPAERROR  OI    SWC,SWC0            FLAG PARM ERROR\n         B     PGMINITA            AND GOTO COMPLETE INIT.\nPAEND    CLI   0(R2),C','          COMMA?\n         BNE   PALOOP              NO, LOOP.\n         LA    R2,1(R2)            YES, BUMP OVER IT.\n         B     PALOOP\nPA10     LA    R2,8(,R2)\n         XR    R15,R15\n         CR    R2,R3\n         BNL   PAERROR\nPA10A    CR    R2,R3\n         BNL   PA10B\n         CLI   0(R2),C','\n         BE    PA10B\n         CLI   0(R2),C'0'\n         BL    PAERROR\n         CLI   0(R2),C'9'\n         BH    PAERROR\n         MH    R15,=H'10'\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,=F'15'           AND MASK OFF HIGH BITS\n         LA    R15,0(R1,R15)\n         LA    R2,1(R2)\n         B     PA10A\nPA10B    N     R15,=F'32767'\n         STH   R15,MAXLIST\n         OI    SWA,SWA4            FLAG MAXLIST= SPECIFIED.\n         B     PAEND\nPA15     LA    R2,8(R2)            LINECNT\n         XR    R15,R15\n         CR    R2,R3\n         BNL   PAERROR\nPA15A    CR    R2,R3\n         BNL   PA15B\n         CLI   0(R2),C','\n         BE    PA15B\n         CLI   0(R2),C'0'\n         BL    PAERROR\n         CLI   0(R2),C'9'\n         BH    PAERROR\n         MH    R15,=H'10'\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,=F'15'           AND MASK OFF HIGH BITS\n         LA    R15,0(R1,R15)\n         LA    R2,1(R2)\n         B     PA15A\nPA15B    N     R15,=F'32767'\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         B     PAEND\nPA22     LA    R2,6(R2)            EROPT=\n         PACL  TERM,4,NI,SWB,255-SWB3\n         PACL  ACC,3,OI,SWB,SWB4\n         B     PAERROR\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE RUN OPTIONS\n*---------------------------------------------------------------------*\n         SPACE\n         USING PRMLST,R6\nPRMLST   TM    SWC,SWC0            PARM ERROR?\n         BZ    PRMLST0         ... NO\n         MVC   LINE1(L'LPDS05I),LPDS05I\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\nPRMLST0  MVI   LINE1,C'-'\n         BAL   R10,PRMLSTXZ\n         P1    SWB,SWB0,DEBUG,5\n         P1    SWA,SWA2,LISTDIR,7\n         TM    SWD,SWD4+SWD5          RITS/CRBE/CRJE\n         BZ    PRMLST20               NO\n         BO    PRMLST19               YES, CRJE\n         P1    SWD,SWD4,RITS,4\n         P1    SWD,SWD5,CRBE,4\n         B     PRMLST20\nPRMLST19 P1    SWD,SWD4+SWD5,CRJE,4\nPRMLST20 TM    SWA,SWA2               LISTDIR?\n         BO    PRMLST50            YES\n         P2    SWA,SWA0,LIST,4\n         P2    SWB,SWB3,NUM,3\n         P2    SWA,SWA5,EJECT,5\n         P2    SWA,SWA7,TRUNC,5\n         P2    SWB,SWB1,HEXOUT,6\n         P2    SWA,SWA1,DECK,4\n         P2    SWA,SWA3,UPDTE,5\n         P2    SWA,SWA6,SSI,3\n         P2    SWE,SWE1,SPF,3                                    JDM1\nPRMLST50 MVC   0(8,R2),=C'LINECNT='\n         LH    R1,LINEMAX\n         LA    R1,1(,R1)                                          .LCT.\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CH    R1,=H'999'\n         BNH   *+14\n         UNPK  8(5,R2),WORK1\n         LA    R2,2(,R2)\n         LA    R2,11(,R2)\n         BAL   R10,PRMLSTXX\n         TM    SWA,SWA4\n         BZ    PRMLST55\n         MVC   0(8,R2),=C'MAXLIST='\n         LH    R1,MAXLIST\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CH    R1,=H'999'\n         BNH   *+14\n         UNPK  8(5,R2),WORK1\n         LA    R2,2(,R2)\n         LA    R2,11(,R2)\n         BAL   R10,PRMLSTXX\nPRMLST55 MVC   0(6,R2),=C'EROPT='\n         MVC   6(3,R2),=C'ACC'\n         TM    SWB,SWB4\n         BZ    *+14\n         MVC   6(4,R2),=C'TERM'\n         LA    R2,1(,R2)\n         LA    R2,9(,R2)\n         TM    SWD,SWD0            SELECTED MEMBERS?\n         BZ    PRMLST60\n         BAL   R10,PRMLSTXX\n         P1    SWD,SWD2,SELECT,6,BR=BO\n         P1    SWD,SWD2,EXCLUDE,7\n         MVC   0(L'ENDMSG3,R2),ENDMSG3\n         LA    R2,L'ENDMSG3(,R2)\nPRMLST60 BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE LCB INFO\n*---------------------------------------------------------------------*\n         SPACE\n         MVC   LINE1(L'MSG8),MSG8\n         BAL   R10,PRNT\n         MVI   LINE1,C'0'\n         XR    R3,R3         INIT LIB COUNT\n         L     R2,ALCB\n         USING LCB,R2\nLCBLST00 CLI   LCB,X'FF'\n         BE    LCBLST90\n         LA    R3,1(,R3)   INCR LIB COUNT\n         CVD   R3,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  LINE1+5(2),WORK1\n         MVI   LINE1+8,C'-'\n*        MVC   LINE1+10(4),=C'VOL='                              *.PRC.\n*        MVC   LINE1+14(6),LCBVOLNO                              *.PRC.\n*        MVC   LINE1+22(4),=C'DSN='                              *.PRC.\n*        MVC   LINE1+26(44),LCBDSNAM                             *.PRC.\n         MVC   LINE1+10(44),LCBDSNAM                              .PRC.\n         MVC   LINE1+58(6),LCBVOLNO                               .PRC.\n         MVC   LINE1+72(8),=C'DSORG=??'\n         TM    LCBDS1DS,B'10000000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'IS'\n         TM    LCBDS1DS,B'01000000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'PS'\n         TM    LCBDS1DS,B'00100000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'DA'\n         TM    LCBDS1DS,B'00000010'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'PO'\n         MVC   LINE1+82(7),=C'RECFM=?'\n         TM    LCBDS1RF,B'11000000'  FILL IN THE RECFM\n         BO    LCBLST32\n         BZ    LCBLST33\n         TM    LCBDS1RF,B'01000000'   V?\n         BO    LCBLST31               YES\n         MVI   LINE1+88,C'F'\n         B     LCBLST33\nLCBLST31 MVI   LINE1+88,C'V'\n         B     LCBLST33\nLCBLST32 MVI   LINE1+88,C'U'\nLCBLST33 TM    LCBDS1RF,B'00010000'\n         BZ    *+8\n         MVI   LINE1+89,C'B'\n         TM    LCBDS1RF,B'00001000'\n         BZ    *+8\n         MVI   LINE1+90,C'S'\n         TM    LCBDS1RF,B'00100000'\n         BZ    *+8\n         MVI   LINE1+90,C'T'\n         TM    LCBDS1RF,B'00000100'\n         BZ    *+8\n         MVI   LINE1+91,C'A'\n         TM    LCBDS1RF,B'00000010'\n         BZ    *+8\n         MVI   LINE1+91,C'M'\nLCBLST50 MVC   LINE1+94(6),=C'LRECL='\n         LH    R1,LCBDS1LR\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+100(5),WORK1                                *.PRC.\n         LA    R1,LINE1+100                                       .PRC.\n         MVC   0(7,R1),=X'40202020212040'                         .PRC.\n         ED    0(6,R1),WORK1+5                                    .PRC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         BNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         B     *-14                BACK TO CLI                    .PRC.\n         MVC   LINE1+107(8),=C'BLKSIZE='\n         LH    R1,LCBDS1BL\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+115(5),WORK1                                *.PRC.\n         LA    R1,LINE1+115                                       .PRC.\n         MVC   0(7,R1),=X'40202020212040'                         .PRC.\n         ED    0(6,R1),WORK1+5                                    .PRC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         BNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         B     *-14                BACK TO CLI                    .PRC.\n         BAL   R10,PRNT\n         LA    R2,LCBEND\n         B     LCBLST00\n         DROP  R2\nLCBLST90 EQU   *\n*\n         OI    SWD,SWD3            TURN OFF FIRST TIME SW\n         MVC   HEAD1C1,HEAD1C1R\n         MVC   HEAD1C2,HEAD1C2R\n         B     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        *** INITIALIZATION COMPLETE ****\n*---------------------------------------------------------------------*\n         SPACE\nPRMLSTXX CR    R2,R3\n         BNL   PRMLSTXY\n         MVI   0(R2),C','\n         LA    R2,1(,R2)\n         BR    R10\nPRMLSTXY ST    R10,SAVE10\n         BAL   R10,PRNT\n         L     R10,SAVE10\nPRMLSTXZ MVC   LINE1+3(L'ENDMSG2),ENDMSG2\n         LA    R2,L'ENDMSG2+LINE1+4\n         LA    R3,LINE1+70\n         BR    R10\n*\n         DC    0D'0'\n         LTORG\n         EJECT\n*---------------------------------------------------------------------*\n*        DEFINE THE DSECT'S HERE\n*---------------------------------------------------------------------*\n         SPACE\nLCB      DSECT ,\nLCBDSNAM DC    CL44' '             LIBRARY'S DATASET NAME\nLCBVOLNO DC    CL6' '              LIBRARY'S VOLUME SERIAL\nLCBJFCDS DC    X'00'               JFCB DSORG\nLCBJFCRF DC    X'00'               JFCB RECFM\nLCBJFCLR DC    H'0'                JFCB LRECL\nLCBJFCBL DC    H'0'                JFCB BLKSIZE\nLCBDS1DS DC    X'00'               DSCB DSORG\nLCBDS1RF DC    X'00'               DSCB RECFM\nLCBDS1LR DC    H'0'                DSCB LRECL\nLCBDS1BL DC    H'0'                DSCB BLKSIZE\nLCBDIR   DC    H'0'                MAX DIR-BLKSIZE/TRK ON THIS VOL\nLCBEND   DC    0F'0'\nLCBLEN   EQU   LCBEND-LCB\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nDIR      DSECT\nDIRCRDCT DC    XL4'0'              RECORD COUNT\nDIRPG1   DC    H'0'                PAGE NUMBER\nDIRFLAGS DC    B'00000000'         FLAGS\n         DC    X'00'               NOT USED\nDIRUSERL DC    H'0'                LENGTH OF USER DATA\nDIRNAME  DC    CL8' '              MEMBER NAME\nDIRTTR   DC    XL4'0'\nDIRUSER  EQU   *\nDIREND   EQU   *\nDIRLEN   EQU   *-DIR    ... PLUS LEN OF 'USER DATA'\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nNAMTBL   DSECT\nNAMTBL1  DC    CL8' '\nNAMTBL2  DC    A(*-*)\nNAMTBL3  DC    F'0'\nNAMTBL4  DC    H'0'\nNAMTBL5  DC    H'0'\nNAMTBLXX EQU   *-NAMTBL\n         SPACE\n         DC    0D'0'\n         END   LISTPDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTPDS2": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00W\\x00\\x933\\x0f\\x01\\x16\\x18\\x0f!)\\x0c4\\x0c$\\x00\\x00\\xf7\\xc3\\xc8\\xc1\\xd9\\xc9\\xc4@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1993-11-26T00:00:00", "modifydate": "2016-06-28T21:29:57", "lines": 3124, "newlines": 3108, "modlines": 0, "user": "7CHARID"}, "text": "LPDS TITLE 'LISTPDS  --  LIST PARTITIONED DATA SET UTILITY PROGRAM'\n*\n*  THIS VERSION DOES NOT PUT A DATE-TIME STAMP INTO A GENERATED\n*  ./ ADD NAME=MEMBER   IEBUPDTE CARD, WHEN NO ISPF STATISTICS\n*  ARE PRESENT FOR THE MEMBER.  THE REASON IS THAT IF YOU CUT\n*  TWO CBT TAPES AT DIFFERENT TIMES, THEN THEY WILL BE DIFFERENT\n*  IN AN INSIGNIFICANT WAY, AND THEY CANNOT BE PROPERLY COMPARED\n*  TO EACH OTHER, EVEN IF IDENTICAL DATA WAS USED TO CREATE BOTH.\n*\n*---------------------------------------------------------------------*\n*\n* TITLE - LIST PARTITIONED DATA SET UTILITY PROGRAM\n*\n* NAME - LISTPDS,  ENTRY POINT - LISTPDS\n*\n* STATUS - VERSION 7.3,  UPDATED 27MAR78\n*          VERSION 7.3A  UPDATED 04DEC81\n*                        AIR FORCE DATA SERVICES CENTER, THE PENTAGON.\n*                        BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*          VERSION 8.0   UPDATED 01JAN94\n*                        FINANCIAL MANAGEMENT SERVICE, US TREASURY\n*                        JIM MARSHALL, CAPT, USAF-RET\n*          VERSION 8.1   UPDATED 16OCT15                          .UPL.\n*          VERSION 8.2   UPDATED 24JUN16                  .SPX.   .SEC.\n*\n* DEVELOPED BY . . .\n*       GENE CZARCINSKI\n*       NASA/GODDARD SPACE FLIGHT CENTER\n*       GREENBELT, MARYLAND\n*\n* FUNCTION/OPERATION - \"LISTPDS\" IS AN OS/360 DATA SET UTILITY\n*       PROGRAM FOR LISTING AND/OR PUNCHING SOURCE/OBJECT LIBRARIES\n*       (PARTITIONED DATA SETS).  ALL MEMBERS PROCESSED BY LISTPDS\n*       ARE ALWAYS OUTPUTTED IN COLLATING SEQUENCE (EXCEPT WHEN\n*       SELECTED MEMBERS ARE PROCESSED).  LISTPDS GENERATES\n*       TWO FORMATTED PRINTOUTS -\n*          1. (ON SYSPRINT) A FORMATTED LISTING OF THE PDS'S\n*             DIRECTORY TOGETHER WITH THE PAGE NUMBERS OF THE\n*             OUTPUT LISTING (FOR EACH MEMBER).\n*          2. (ON SYSLIST) A FORMATTED PRINTOUT OF THE CONTENTS\n*             OF EACH MEMBER PROCESSED.\n*\n*---------------------------------------------------------------------*\n*\n* ATTRIBUTES - ENABLED, SERIALLY REUSABLE, BLOCK LOADED,\n*       SINGLE LOAD MODULE, NO OVERLAY.\n*\n* ACCESS METHODS - QSAM LOCATE MODE (RECFM=FB) USED FOR\n*       SYSPRINT, SYSLIST, SYSPUNCH;  BSAM/BPAM USED FOR\n*       PDS I/O (SYSLIB); BSAM IS USED FOR SYSIN;\n*       AND EXCP IS USED FOR PDS-DIRECTORY READING.\n*\n*\n* NOTES -\n*       1. VERSION 6 OF \"LISTPDS\" IS A MAJOR REDESIGN OF THE\n*          PROGRAM AND REPLACES ALL PREVIOUS VERSIONS.\n*       2. ASIDE FROM THE EDIT (ED) DECIMAL INSTRUCTION, \"LISTPDS\"\n*          IS CODED ENTIRELY WITH STANDARD INSTRUCTION SET (360)\n*          INSTRUCTIONS.\n*       3. \"LISTPDS\" DOES ITS OWN DIRECTORY PROCESSING AND ALWAYS\n*          READS THE ENTIRE DIRECTORY (USING BSAM).\n*       4. DEFAULT SWITCH AND DDNAMES CAN BE CHANGED BY MODIFYING\n*          THE ASSEMBLY VARIABLES.\n*       5. THE STANDARD TRANSLATE TABLES ARE SETUP FOR 'QN'\n*          PRINT CHAIN OUTPUT.\n*       6. ALL PRINTED OUTPUT USES ASA CONTROL CHARACTERS.\n*       7. TO BE PROPERLY PROCESSED BY LISTPDS, ALL PDS\n*          DIRECTORIES *MUST* BE IN STANDARD FORMAT: THE LAST\n*          ENTRY IN EACH DIRECTORY IS HEX F'S.\n*       8. CODE HAS BEEN ADDED TO HANDLE PROCESSING OF CONCATON-\n*          ATED SYSLIB DD STATEMENTS.\n*       9. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED LAYOUT\n*          OF THE SYSLIB JFCB'S, DSCB'S AND THE \"CAMLST\" GENERATED\n*          CONTROL BLOCK FOR READING THE DSCB.\n*      10. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED OPERATION\n*          OF THE BPAM READ & FIND (C) ROUTINES FOR DIRECTORY AND\n*          MEMBER READING.\n*      11. DEFAULT BLKSIZES HAVE BEEN CHANGED FROM UNBLOCKED\n*          TO BLOCKED --\n*                 SYSPRINT - 3509\n*                 SYSLIST  - 7260\n*                 SYSPUNCH - 3200\n*                 SYSIN    - 3200\n*      12. THE DEFAULT BUFNO IS NOW SET TO 2.\n*      13. THE DEFAULT MAX LINES/PAGE IS NOW SET TO 60.\n*\n* VERSION 7.0 --\n*      14. DEFAULT MAX LINES/PAGE NOW SET TO 84.\n*      15. STAE PROCESSING HAS BEEN REMOVED.\n*      16. ALL VCONS HAVE BEEN CHANGED TO ADCONS.\n*      17. MAX OUTPUT LINE LENGTH CHANGED TO 116 CHARACTERS.\n*      18. PUNCHING ONLY OUTPUTS UP TO THE FIRST 80 BYTES OF\n*          EACH LOGICAL RECORD.\n*      19. THE XLATE (TRANSLATE) FUNCTION HAS BEEN DELETED.\n*      20. ABEND60A FIXED (BUG IN 'CLEARBUF')\n*      21. EJECT/NOEJECT FUNCTION IMPLEMENTED.\n*\n* VERSION 7.1 --\n*      22. REWORK CODE TO MAKE IT ONE CSECT\n*      23. FIX 7.0 BUG IN 'MONTHS'\n*      24. REFORMAT SOURCE CODE TO MAKE MORE READABLE.\n*      25. CHANGE PARM-ANAL TO SKIP OVER BAD KEYWORDS\n*      26. PAGE EJECT SYSLIST BETWEEN LIBRARIES\n*      27. TEST FOR 'NEAR BOTTOM' AND EJECT SYSLIST IF SO\n*      28. PUT TITLE AT TOP AND BOTTOM OF SYSLIST IF IN EJECT MODE.\n*      29. CREATE SYSPRINT HEADER PAGE AND TRAILER PAGE.\n*      30. REWORK LIB-FILE INIT CODE TO USE THE 'LCB' AREAS AND\n*          COUNT THE NUMBER OF DIR BLOCKS PER TRACK.\n*      31. REWORK DIR READ TO USE EXCP I/O.\n*      32. DEFAULT MAXLINES CHANGED TO 80.\n*      33. ADD MAXLIST, SELECT, AND EXCLUDE OPTIONS.\n*      34. CHANGE PRINT, LIST AND PUNCH TO USE QSAM MOVE I/O.\n*      35. REWORK CORE MANAGEMENT TO ISSUE ONE LARGE GETMAIN\n*          AND DO SUBALLOCATION FROM THAT AREA.\n* VERSION 7.2 --\n*      36. MAKE SELECT/EXCLUDE WORK FOR SPECIFIED MEMBERS\n*      37. REWORK LOUT SO THAT ADCON IS USED FOR LIST DCB ADDR\n*      38. REWORK LOUT SO THAT BOTTOM OF PAGE PROCESSING FOR\n*          NOEJECT MODE WORKS PROPERLY\n*      39. CHECK FOR RECFM=V/VB AND USE SECONDARY DCB IF SO\n*          TO PERFORM PROPER I/O (NO I/O ERRORS).\n*      40. CREATE S/R TO FORMAT & PRINT SYSPRINT DATA FOR\n*          FOR MEMBER SO IT CAN BE USED AFTER A MEMBER IS\n*          PROCESSED (SAVE INFO IN THE 'DIR' AREA).\n*      41. REORGANIZE CODE TO PROVIDE MORE BASE REGISTER\n*          ADDRESSABILITY BY MOVING SOME OF THE INITIALIZATION\n*          CODE INTO SEPARATELY ADDRESSABLE SUBROUTINES.\n*      42. ADD THE CAPABILITY TO LIST/PUNCH SEQUENTIAL DATASETS\n*          WHICH ARE POINTED TO BY THE SYSLIB CONCATENATION.\n*      43. CODE ADDED TO RE-INIT DCB IF RECFM CHANGES\n*          SO THAT THE DATASET WILL BE PROCESSED CORRECTLY\n*          WITH NO 'I/O ERRORS'.\n*      44. REWORK CODE SO THAT A SPECIAL END MSG WILL BE\n*          ISSUED IF PROCESSING A SEQUENTIAL DATASET.\n*      45. COUNTERS ADDED FOR PDS AND SDS PROCESSING.\n*      46. MODIFY DATASET I/O ERROR HANDLING TO LIST\n*          THE CONCATENATION SEQUENCE NUMBER SO THAT\n*          THE DATASET CAN BE IDENTIFIED AND THEN\n*          GO LIST THE PROCESSED DIRECTORY ENTRIES IF\n*          A PDS; PRODUCE AN EXTRA I/O ERROR MSG AT END\n*          OF DIRECTORY LISTING.\n*      47. CHANGE THE CODE TO ALLOCATE THE DATASET READ BUFFERS\n*          BASED ON THE SIZE OF EACH DATASET BEING PROCESSED.\n*\n* VERSION 7.3 --\n*      48. FIX RITSINFO/CRJEINFO SO DIRECTORY ENTRY IS LISTED\n*          CORRECTLY FOR RITS/CRBE/CRJE LIBRARIES.\n*      49. FIX BUG WHICH CAUSES ABEND0C0 WHEN \"EXCLUDE\" IS\n*          SPECIFIED FOR SELECTED MEMBERS.\n*\n* VERSION 7.3A -- UPDATES AT AIR FORCE DATA SERVICES CENTER, PENTAGON\n*          04 DEC 81, BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*      50. FOR DECK AND UPDTE, PUT SSI= KEYWORD AFTER THE MEMBER NAME\n*          ON THE ./ ADD STATEMENT, INSTEAD OF BEFORE.\n*      51. IF UPDTE IS SPECIFIED AND A MEMBER CONTAINS IEBUPDTE\n*          STATEMENTS, THE './' STATEMENTS WITHIN THE MEMBER WILL\n*          BE PUNCHED WITH THE './' CHANGED TO '><'. SEE NOTE 54 TOO.\n*      52. GET TIOT ADDRESS DIRECTLY INSTEAD OF GOING THRU EXTRACT SVC.\n*      53. ADD NEW PARM OPTION 'NOSEL' TO IGNORE SYSIN,\n*          SO WE CAN KEEP SYSIN ALLOCATED TO THE TERMINAL UNDER TSO.\n*      54. SPF (AN IBM PROGRAM PRODUCT) STATISTICS IN A PDS DIRECTORY\n*          WILL BE FORMATTED ON SYSPRINT AND IN THE COMMENTS AREA\n*          OF ./ ADD STATEMENTS.\n*          NOTE: WE HAVE A PROGRAM THAT WILL RE-LOAD THE IEBUPDTE DECK\n*          TO A PDS AND RESTORE THE SPF STATS FROM THE ./ ADD CARD.\n*          (AND RESTORE '><' TO './' --- SEE NOTE 51).\n*      55. IF 'NOSPF' IS SPECIFIED, OR IF NO MEMBERS IN A PDS CONTAIN\n*          SPF STATISTICS, THEN THE OLD HEX FORMATTING WILL BE USED.\n*      56. DEFAULT MAXLINES CHANGED TO 60.\n*      57. JUST PRINT HH.MM OF TIME IN HEADING, NOT HH.MM.SS\n*      58. INSTEAD OF VOL=VVVVVV, DSN=DDDDDDDDDDDDD    IN HEADINGS,\n*               PRINT - DDDDDDDDD - VOL=VVVVVV\n*      59. SUPPRESS ZEROS IN PAGE INDEX OF LISTDIR, SO PAGE 0 WILL\n*          BE PAGE BLANK.\n*      60. SUPPRESS ZEROS IN LRECL, BLKSIZE.  LEFT JUSTIFY.\n*      61. DEFAULT EJECT.\n*      62. REDUCE LINEMAX BY 1 INTERNALLY, BECAUSE WE KEEP GETTING\n*          ONE MORE LINE PER PAGE THAN THE SPECIFIED LINECNT.     .LCT.\n*      63. HEADINGS CHANGED. MEMBER NAME ON LEFT.                 .LCT.\n*\n* VERSION 8.0 --\n*      64. ADDED INTO OPTIONS LIST SPF/NOSPF.\n*      65. ADDED DSECTS WHERE EVER POSSIBLE IN PREPARATION FOR MVS/ESA.\n*      66. MADE THE CODE MORE READABLE FOR FUTURE GENERATIONS.\n*\n* VERSION 8.1 --                                                  .UPL.\n*      67. ADD SYSUPLOG FILE SHOWING ALL PLACES WHERE THE         .UPL.\n*          UPDTESUB '><' BYTES ALREADY EXIST, AND SHOULD NOT      .UPL.\n*          BE ERRONEOUSLY \"CHANGED BACK\" TO ./ BY PDSLOAD.        .UPL.\n*          COPIED FIRST 62 BYTES OF RECORD INTO CARD+17, SO       .SBG.\n*          WE CAN SEE WHAT IS GOING ON.                           .SBG.\n*\n* VERSION 8.2 -- JUNE 24 2016                                     .SEC.\n*      68. SUPPORT SECONDS IN ISPF STATS, ./ADD COLUMNS 70-71     .SEC.\n*      69. SUPPORT EXTENDED ISPF STATS, ./ ADD COLUMNS 73-80      .SPX.\n*      70. SUPPORT RECORD COUNTS > 99999 AND TOTALS > 9999999     .SUM.\n*\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        LOCAL MACRO DEFINITIONS\n*---------------------------------------------------------------------*\n         MACRO\n&N       CRJE      &A,&B,&C,&D,&E\n&N       TM        &A.(R2),&B\n         BNO       X&SYSNDX\n         MVC       0(&D,R1),=C&C\n         LA        R1,&D.(R1)\n         B         &E\nX&SYSNDX EQU       *\n         MEND\n*\n         MACRO\n&A       PACL  &B,&C,&D,&E,&F,&G,&H,&J\n&A       CLC   =C'&B',0(R2)\n         BNE   Z&SYSNDX\n         LA    R2,&C.(,R2)\n         &D    &E,&F\n         AIF   (T'&G EQ 'O').A\n         &G    &H,&J\n.A       B     PAEND\nZ&SYSNDX EQU   *\n         MEND\n*\n         MACRO\n&A       P1    &B,&C,&D,&E,&BR=BZ\n&A       TM    &B,&C\n         &BR   X&SYSNDX\n         MVC   0(&E.,R2),=C'&D'\n         LA    R2,&E.(,R2)\n         BAL   R10,PRMLSTXX\nX&SYSNDX EQU   *\n         MEND\n*\n         MACRO\n&A       P2    &B,&C,&D,&E\n&A       TM    &B,&C\n         BO    X&SYSNDX\n         MVC   0(2,R2),=C'NO'\nX&SYSNDX MVC   2(&E.,R2),=C'&D'\n         LA    R2,&E.+2(,R2)\n         BAL   R10,PRMLSTXX\n         MEND\n*\n         MACRO\n&A       CC    &B,&C,&D,&E\n&A       LA    R1,&B       LINECNT\n         CLI   &C.,C'&D'   IS THE THE CHAR?\n         BE    &E          YES.\n         MEND\n         EJECT\n*---------------------------------------------------------------------*\n*        ASSEMBLY VARIABLES\n*---------------------------------------------------------------------*\n         SPACE\n         LCLC  &RELEASE,&ID,&VERSION\n         LCLC  &DDIN,&DDPRINT,&DDPUNCH,&DDLIB,&DDLIST,&DDUPLOG\n         LCLB  &A(8),&B(8)\n&RELEASE SETC  '12OCT15'           RELEASE IDENT - MAX 7 BYTES\n&VERSION SETC  '8.2'               VERSION IDENTIFICATION\n&ID      SETC  'GSFC'              'LOCAL' IDENT - 4 BYTES MAX\n&DDIN    SETC  'SYSIN'             DDNAME: CONTROL INPUT\n&DDPRINT SETC  'SYSPRINT'          DDNAME: MAIN-PRINT OUTPUT\n&DDLIST  SETC  'SYSLIST'           DDNAME: LISTING OUTPUT\n&DDPUNCH SETC  'SYSPUNCH'          DDNAME: FOR PUNCHED OUTPUT\n&DDLIB   SETC  'SYSLIB'            DDNAME: LIBRARY INPUT\n&DDUPLOG SETC  'SYSUPLOG'          DDNAME: UPDTE LOG OUTPUT       .UPL.\n&A(1)    SETB  1                   LIST\n&A(2)    SETB  0                   NODECK\n&A(3)    SETB  0                   NOT 'LIST DIR ONLY'\n&A(4)    SETB  0                   NOUPDTE\n&A(5)    SETB  0\n&A(6)    SETB  1                   EJECT           (WAS NOEJECT)  .PRC.\n&A(7)    SETB  0                   SSI\n&A(8)    SETB  1                   TRUNC\n&B(1)    SETB  0                   NODEBUG\n&B(2)    SETB  0                   NOHEXOUT\n&B(3)    SETB  0\n&B(4)    SETB  0                   NONUM\n&B(5)    SETB  0                   EROPT=TERM\n&E(1)    SETB  1                   SEL                            .SEL.\n&E(2)    SETB  1                   SPF                            .SPF.\n         EJECT\nR0       EQU   0                   OS PARM REG; WORK REG\nR1       EQU   1                   OS PARM REG; WORK REG\nR2       EQU   2                   LOCAL WORK REG\nR3       EQU   3                   LOCAL WORK REG\nR4       EQU   4\nR5       EQU   5                   LRECL CNTR FOR MEMBER\nR6       EQU   6                   BLOCK LENGTH\nR7       EQU   7                   BLOCK POINTER\nR8       EQU   8                   IHADCB BASE REG\nR9       EQU   9                   MAIN BASE REG - 3\nR10      EQU   10                  LOCAL LINK REG\nR11      EQU   11                  PROGRAM BASE REG #2\nR12      EQU   12                  MAIN BASE REG - 1\nR13      EQU   13                  POINTER TO OS SAVE AREA\nR14      EQU   14                  OS LINK REG; WORK REG\nR15      EQU   15                  OS BRANCH REG; WORK REG\nMAXLINE  EQU   60                  'DEFAULT' LINES/PAGE (WAS 80)  .PRC.\nSWA0     EQU   B'10000000'         NOLIST/LIST\nSWA1     EQU   B'01000000'         NODECK/DECK\nSWA2     EQU   B'00100000'         LIST DIRECTORY ONLY\nSWA3     EQU   B'00010000'         NOUPDTE/UPDTE\nSWA4     EQU   B'00001000'         MAXLIST SPECIFIED\nSWA5     EQU   B'00000100'         NOEJECT/EJECT\nSWA6     EQU   B'00000010'         NOSSI/SSI\nSWA7     EQU   B'00000001'         NOTRUNC/TRUNC\nSWB0     EQU   B'10000000'         NODEBUG/DEBUG\nSWB1     EQU   B'01000000'         NOHEXOUT/HEXOUT\nSWB2     EQU   B'00100000'         0: LIST=LIST,  1: LIST=PRINT\nSWB3     EQU   B'00010000'         NONUM/NUM\nSWB4     EQU   B'00001000'         EROPT=TERM/ACC\nSWC0     EQU   B'10000000'         PARM ANALYSIS ERROR\nSWC1     EQU   B'01000000'         FLAG FOR NEW PAGE BEFORE PRINT\nSWC2     EQU   B'00100000'         1: DSORG=PS BEING PROCESSED.\nSWC3     EQU   B'00010000'         TERMINATE MODE SWITCH\nSWC7     EQU   B'00000001'         DCB EXIT TAKEN\nSWD0     EQU   B'10000000'         SELECTED NAMES SPECIFIED\nSWD1     EQU   B'01000000'         MEMBER IS AN ALIAS\nSWD2     EQU   B'00100000'         0=SELECT, 1=EXCLUDE\nSWD3     EQU   B'00010000'         SYSPRINT FIRST TIME THRU\nSWD4     EQU   B'00001000'         \"00\"=NOTHING, \"10\"=RITS,\nSWD5     EQU   B'00000100'         \"01\"=CRBE, \"11\"=CRJE.\nSWD6     EQU   B'00000010'         SYSLIST FIRST TIME THRU SWITCH\nSWD7     EQU   B'00000001'         1=RITS/CRBE/CRJE LIB BEING PROC.\nSWE0     EQU   B'10000000'         SEL                            .SEL.\nSWE1     EQU   B'01000000'         SPF                            .SPF.\nSWE2     EQU   B'00100000'         SPF STATS FOUND IN CURRENT PDS .SPF.\nSWE3     EQU   B'00010000'         SPF STATS IN ANY PDS           .SPF.\nSWE4     EQU   B'00001000'         SYSUPLOG IS OPEN               .UPL.\nOFLGS    EQU   B'00010000'         DCB OPEN ERROR FLAG\nALIAS    EQU   B'10000000'         ALIAS BIT IN DIRECTORY ENTRY\nCVTPTR   EQU   16   ... ADDR OF THE OS CVT\nCVTPCNVT EQU   X'1C' .. OFFSET IN CVT TO ADDR OF TTR/CCHHR CNVT\nJFCBDSNM EQU   0                   DSNAME OFFSET IN JFCB\nJFCBVOLS EQU   118                 VOLSER OFFSET IN JFCB\nJFCDSORG EQU   98                  DSORG  OFFSET IN JFCB\nJFCRECFM EQU   100                 RECFM  OFFSET IN JFCB\nJFCBLKSI EQU   102                 BLKSIZ OFFSET IN JFCB\nJFCLRECL EQU   104                 LRECL  OFFSET IN JFCB\nDS1DSORG EQU   82-44               DSORG  OFFSET IN DSCB\nDS1RECFM EQU   84-44               RECFM  OFFSET IN DSCB\nDS1BLKSI EQU   86-44               BLKSIZ OFFSET IN DSCB\nDS1LRECL EQU   88-44               LRECL  OFFSET IN DSCB\nDS4DEVDB EQU   75-44               DIR/TR OFFSET IN F=4 DSCB\n         EJECT\n*---------------------------------------------------------------------*\n*        MAIN PROGRAM BEGIN\n*---------------------------------------------------------------------*\nLISTPDS  AMODE 24\nLISTPDS  RMODE 24\nLISTPDS  CSECT\n         SAVE  (14,12),,LISTPDS-&VERSION\n         LR    R12,R15             INIT MAIN BASE REGS\n         LA    R11,2048\n         AR    R11,R11\n         LR    R9,R11\n         AR    R9,R9\n         AR    R11,R12\n         AR    R9,R12\n         USING LISTPDS,R12,R11,R9  AND PGM ADDRESSABILITY.\n         USING IHADCB,R8           SET DCB ADDRESSABILITY\n         LR    R4,R1               SAVE PARM LIST POINTER.\n         LA    R15,SAVEAREA        INIT SAVE AREAS\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         SPACE\n*---------------------------------------------------------------------*\n*        PROGRAM INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\nPGMINIT  EQU   *\n         XC    SWITCHES,SWITCHES   CLEAR SIWTCHES, ETC.\n         LA    R8,SYSLIB\n         MVI   DCBRECFM,0          MAKE SURE DCB IS INITIALIZED.\n         XC    DCBLRECL,DCBLRECL\n         XC    DCBBLKSI,DCBBLKSI\n         MVI   EXLST2,X'05'\n         XC    COR2,COR2\n         XC    COR7,COR7\n         XC    COR8,COR8\n         MVC   ALISTDCB,=A(SYSLIST)\n         MVI   HEAD1,C' '\n         MVC   HEAD1DAT(HEAD1NAM-HEAD1),HEAD1\n         MVC   HEAD1DSN(L'HEAD1VER),HEAD1VER\n         MVC   HEAD1(L'HEAD1R),HEAD1R  INIT HEADER LINE\n         MVC   SWA,SWAX\n         MVC   SWB,SWBX\n         MVC   SWE,SWEX\n         XC    RECORDS,RECORDS     CLEAR COUNTER\n         XC    TTRK,TTRK           FOR FIND\n         XC    RETCODE,RETCODE\n         XC    PAGENUM1,PAGENUM1\n         XC    PAGENUM2,PAGENUM2\n         XC    LINECNT1,LINECNT1\n         XC    LINECNT2,LINECNT2\n         XC    BUFFER1,BUFFER1     CLEAR BUFFERS\n         XC    BUFFER2,BUFFER2\n         LA    R15,MAXLINE         SET DEFAULT LINE COUNT\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         LA    R15,4000\n         STH   R15,LINECNT1\n         XC    TOTALREC,TOTALREC\n         XC    NAMETBL1,NAMETBL1\n         XC    NAMETBL2,NAMETBL2\n         XC    MAXLIST,MAXLIST\n         MVC   DDPRINT(RESETDDL),RESETDD\n         TM    0(R4),X'80'         ONLY EXEC PARMS SPECIFIED?\n         BO    EXTRACT             YES.\n         L     R2,4(R4)            NO, INIT THE DDNAMES.\n         LH    R3,0(R2)            GET NO. OF BYTES IN LIST\n         LTR   R3,R3               IS IT ZERO?\n         BNP   XPA2                YES, SKIP\n         CH    R3,=H'40'\n         BNH   *+8\n         LA    R3,40\n         LA    R2,2(R2)            BEGINNING OF DD LIST\n         LA    R3,2(R3,R2)         END OF DD LIST\n         LA    R1,DDPRINT          LISTPDS'S DD LIST\nXPA1     EQU   *\n         CR    R2,R3               END OF LIST?\n         BNL   XPA2                YES, GOTO NEXT ONE\n         CLI   0(R2),0             DUMMY ENTRY?\n         BE    *+10                YES, SKIP MOVE\n         MVC   0(8,R1),0(R2)\n         LA    R1,8(R1)\n         LA    R2,8(R2)\n         B     XPA1\n         SPACE\nXPA2     EQU   *\n         TM    4(R4),X'80'         END OF PARM LIST?\n         BO    EXTRACT             YES\n         L     R2,8(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM1         INITIAL PAGE NO - SYSPRINT\n         TM    8(R4),X'80'\n         BO    EXTRACT\n         L     R2,12(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM2         INITIAL PAGE NO - SYSLIST\n*XTRACT  EXTRACT TIOT,'S',FIELDS=(TIOT)                          *.PRC.\nEXTRACT  L     R1,540              PSATOLD, CURRENT TCB           .PRC.\n         L     R1,12(,R1)          GET TIOT ADDRESS FROM TCBTIO   .PRC.\n         ST    R1,TIOT             SAVE TIOT ADDRESS              .PRC.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT DATE/TIME FOR PRINTOUTS\n*---------------------------------------------------------------------*\n         SPACE\n         TIME  DEC                 GET DATE & TIME FOR HEADING\n         ST    R0,WORK1\n         XC    WORK2,WORK2         COMPUTE AND FORMAT DATE\n         ST    R1,WORK2+4\n         MVC   WORK1+5(1),WORK2+5  SAVE YEAR\n         CVB   R3,WORK2            CONVERT DATE TO BINARY\n         XR    R2,R2\n         D     R2,=F'1000'         TO SEP YEAR AND DAY\n         ST    R3,WORK2\n         LA    R3,MONTHS1          FOR STD YEAR\n         TM    WORK2+3,X'03'       LEAP YEAR?\n         BNZ   *+8                 NO\n         LA    R3,MONTHS2          FOR LEAP YEAR\n         XR    R1,R1\nPGMINITX EQU   *\n         SH    R2,0(R3)\n         BNP   PGMINITY\n         LA    R1,3(R1)\n         LA    R3,2(R3)\n         B     PGMINITX\n         SPACE\nPGMINITY EQU   *\n         AH    R2,0(R3)\n         MH    R2,=H'10'\n         CVD   R2,WORK2            FOR DAY OF MONTH\n         LA    R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC   HEAD1DAT+3(3),0(R1)\n         MVC   WORK1+4(1),WORK2+6  DAY OF MONTH\n         ED    HEAD1DAT,WORK1+4\n         CLI   HEAD1DAT+1,C' '\n         BNE   *+8\n         MVI   HEAD1DAT+1,C'0'\n         ED    HEAD1TIM,WORK1\n         CLI   HEAD1TIM+1,C' '\n         BNE   *+8\n         MVI   HEAD1TIM+1,C'0'\n         MVC   HEAD1TIM+6(3),=C'   '                              .PRC.\n         MVC   HEAD2DAT,HEAD1DAT\n         MVC   HEAD2TIM,HEAD1TIM\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE THE SYSPRINT FILE\n*---------------------------------------------------------------------*\n         SPACE\n         LA    R8,SYSPRINT         INIT THE SYSPRINT FILE\n         MVC   DCBDDNAM,DDPRINT\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    INITPR              YES.\n         L     R2,TIOT             SYSPRINT OPEN ERROR\n         MVC   WTP+17(8),0(R2)     MOVE JOBNAME TO MSG.\n         MVC   WTP+40(L'DDPRINT),DDPRINT\nWTP      EQU   *\n         WTO   'LPDS00I  JOBNAMEX OPEN ERROR ON SYSPRINT',         +++++\n               ROUTCDE=(11),DESC=7\n         TM    SWB,SWB0            DEBUG?\n         BZ    ABORT               NO\n         ABEND 20,DUMP             YES, ABEND TO GET DUMP.\nABORT    EQU   *\n         L     R13,4(R13)          ELSE ... ABORT\n         RETURN (14,12),T,RC=20\nRESETDD  DC    CL8'&DDPRINT',CL8'&DDLIST',CL8'&DDPUNCH'\n         DC    CL8'&DDLIB',CL8'&DDIN',CL8'&DDUPLOG'\nRESETDDL EQU   *-RESETDD\n         SPACE\nINITPR   DS    0H\n         MVI   LINE1,C'-'\n         BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        GO PERFORM THE PARM ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\n         L     R6,=A(PA)\n         BR    R6\n         SPACE\n*---------------------------------------------------------------------*\n*        COMPLETE THE PARM ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITA EQU   *\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         BZ    *+12                NO.\n         OI    SWD,SWD7            YES.\n         NI    SWA,255-SWA6        NO SSI IF RITS/CRBE\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST & PUNCH FILE INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWA,SWA0            LIST?\n         BZ    PGMINITC            NO.\n         LA    R8,SYSLIST\n         MVC   DCBDDNAM,DDLIST\n         OPEN  (SYSLIST,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    PGMINITC            YES.\n         NI    SWA,255-SWA0        NO, SET NOLIST.\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDLIST),DDLIST\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\nPGMINITC EQU   *\n         LA    R8,SYSPUNCH\n         MVC   DCBDDNAM,DDPUNCH\n         TM    SWA,SWA1            NODECK?\n         BZ    PGMINITD            YES.\n         OPEN  (SYSPUNCH,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    PGMINITU            YES.                           .UPL.\n         NI    SWA,255-SWA1        TURN OFF DECK OPTION\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDPUNCH),DDPUNCH\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\n         SPACE\nPGMINITU EQU   *                                                  .UPL.\n         LA    R8,SYSUPLOG                                        .UPL.\n         MVC   DCBDDNAM,DDUPLOG                                   .UPL.\n         DEVTYPE DCBDDNAM,WORK1                                   .UPL.\n         LTR   R15,R15             IF NO SYSUPLOD DD              .UPL.\n         BNZ   PGMINITD              THEN SKIP OPEN               .UPL.\n         OI    SWE,SWE4            SYSUPLOG IS OPEN               .UPL.\n         OPEN  (SYSUPLOG,OUTPUT)                                  .UPL.\n         TM    DCBOFLGS,OFLGS      OPEN OK?                       .UPL.\n         BO    PGMINITD            YES.                           .UPL.\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE MAIN WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITD EQU   *\n         GETMAIN VU,LA=COR1,A=COR2\n         L     R1,COR2\n         ST    R1,COR3\n         L     R15,COR2+4\n         LH    R0,=Y(8*1024)\n         SR    R15,R0\n         ST    R15,COR2+4\n         AR    R1,R15\n         AL    R15,COR2\n         SH    R15,=H'8'           MAKE IT LOW TO BE SAFE\n         ST    R15,COR5\n         FREEMAIN R,LV=(0),A=(1)\n         LM    R14,R15,COR2        CLEAR THE WORKAREA\nPGMINITG EQU   *\n         SH    R15,=H'256'\n         BNP   PGMINITH\n         XC    0(256,R14),0(R14)\n         LA    R14,256(,R14)\n         B     PGMINITG\n         SPACE\nPGMINITH EQU   *\n         BAL   R14,RESETHI\n         BAL   R14,RESETLO\n         L     R1,COR2+4\n         SRL   R1,10\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         MVC   LINE1(MSG7L1),MSG7\n         BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE SYSLIB AND THE LCB'S\n*---------------------------------------------------------------------*\n         SPACE\nFILEINIT EQU   *\n         LA    R8,SYSLIB\n         OPEN  (SYSLIB,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    FI07                YES.\n         MVC   LINE1(L'LPDS04I),LPDS04I\n         MVC   LINE1+L'LPDS04I(8),DDLIB\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        LCB INIT FOR SYSLIB CONCATONATION\n*---------------------------------------------------------------------*\n         SPACE\nFI07     EQU   *\n         MVC   WORK1(L'DCBTIOT),DCBTIOT  SAVE ENTRY\n         LH    R2,DCBTIOT\n         L     R3,TIOT\n         LA    R3,0(R3,R2)         PNTR TO SYSLIB ENTRY\n         LA    R0,LCBLEN           ALLOC INITIAL LCB\n         BAL   R14,GETBASE\n         LR    R4,R1\n         ST    R1,ALCB\n         USING LCB,R4\n         LA    R5,16               LIMIT MAX LIBS PROCESSED\n         LA    R0,176              SIZE OF A JFCB\n         BAL   R14,GETHI\n         ST    R1,JFCBADRS\n         MVI   JFCBADRS,X'87'\n         B     FI07B\n         SPACE\nFI07A    EQU   *\n         XR    R1,R1\n         IC    R1,0(R3)\n         LA    R2,0(R2,R1)         POINT TO NEXT ENTRY\n         LA    R3,0(R3,R1)\n         CLI   0(R3),0             END OF TIOT?\n         BE    FI07Z               YES\n         CLC   =CL8' ',4(R3)       CONCATONATION?\n         BNE   FI07Z               NO, END.\n         STH   R2,DCBTIOT\nFI07B    RDJFCB    SYSLIB\n         L     R1,JFCBADRS\n         MVC   DSNAME,JFCBDSNM(R1)\n         MVC   LCBDSNAM,JFCBDSNM(R1)\n         MVC   VOLSER,JFCBVOLS(R1)\n         MVC   LCBVOLNO,JFCBVOLS(R1)\n         MVC   LCBJFCDS,JFCDSORG(R1)\n         MVC   LCBJFCRF,JFCRECFM(R1)\n         MVC   LCBJFCBL,JFCBLKSI(R1)\n         MVC   LCBJFCLR,JFCLRECL(R1)\n         OBTAIN DSCB\n         MVC   LCBDS1DS,WORKAREA+DS1DSORG\n         MVC   LCBDS1RF,WORKAREA+DS1RECFM\n         MVC   LCBDS1BL,WORKAREA+DS1BLKSI\n         MVC   LCBDS1LR,WORKAREA+DS1LRECL\n         MVI   DSNAME,X'04'        FOR FORMAT 4 DSCB\n         MVC   DSNAME+1(43),DSNAME\n         OBTAIN DSCB\n         XR    R1,R1\n         IC    R1,WORKAREA+DS4DEVDB\n         STH   R1,LCBDIR\n         L     R15,JFCBADRS\n         LH    R1,JFCBLKSI(,R15)\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,WORKAREA+DS1BLKSI\n         LA    R0,LCBLEN\n         BAL   R14,GETBASE         WILL BE CONTIG\n         LR    R4,R1\n         XC    0(LCBLEN,R1),0(R1)\n         BCT   R5,FI07A\n         DROP  R4\nFI07Z    EQU   *\n         MVI   0(R4),X'FF'         SET END FLAG\n         MVI   JFCBADRS,X'80'      END OF JFCB INIT\n         MVC   DCBTIOT,WORK1       RESET TIOT PNTR\n         BAL   R14,RESETHI\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE SELECTED NAME TABLE\n*---------------------------------------------------------------------*\n         SPACE\n         XC    NAMETBL2,NAMETBL2   SET PNTR TO NULL.\n         TM    SWE,SWE0            SEL OR NOSEL                   .SEL.\n         BZ    BLDSEL99            NOSEL, BYPASS SYSIN            .SEL.\n         L     R2,TIOT             SCAN THE TIOT FOR MATCH\n         LA    R2,24(R2)\n         XR    R3,R3\nBLDSEL01 EQU   *\n         CLC   4(8,R2),DDIN\n         BE    BLDSEL02            MATCH.\n         CLI   0(R2),0             END OF TIOT?\n         BE    BLDSEL99            YES, RETURN.\n         IC    R3,0(R2)\n         LA    R2,0(R2,R3)\n         B     BLDSEL01\n         SPACE\nBLDSEL02 EQU   *\n         LA    R8,SYSIN\n         MVC   DCBDDNAM,DDIN\n         OPEN  (SYSIN,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BZ    BLDSEL99            NO, RETURN.\n         LH    R0,SYSIN+DCBBLKSI-IHADCB  ALLOC SYSIN BUFFER\n         BAL   R14,GETHI\n         LR    R7,R1\n         B     BLDSEL20\n         SPACE\nBLDSEL03 EQU   *\n         LA    R5,80(,R5)\n         LR    R3,R5\n         SH    R6,=H'80'\n         BNP   BLDSEL20\n         LA    R2,72(,R3)          POINT AT END OF CARD.\nBLDSEL04 EQU   *\n         CLI   0(R3),C' '          BLANK?\n         BE    BLDSEL03            YES, GO GET NEXT CARD.\n         CR    R2,R3               END OF CARD?\n         BL    BLDSEL03            YES, GO GET NEXT CARD.\n         CLI   0(R3),C','          COMMA?\n         BNE   BLDSEL05            NO.\n         LA    R3,1(R3)            YES, SKIP OVER IT.\n         B     BLDSEL04\n         SPACE\nBLDSEL05 EQU   *\n         LA    R14,WORK1\n         MVC   WORK1,=CL8' '\nBLDSEL06 EQU   *\n         CLI   0(R3),C' '          BLANK?\n         BE    BLDSEL08            YES, END OF NAME\n         CLI   0(R3),C','          COMMA?\n         BE    BLDSEL08            YES, END OF NAME\n         CR    R2,R3               END OF CARD?\n         BL    BLDSEL08            YES, END OF NAME\n         C     R14,=A(WORK1+8)     HAVE 8 BYTES BEEN PROCESSED?\n         BNL   *+16                YES.\n         IC    R15,0(R3)\n         STC   R15,0(R14)\n         LA    R14,1(R14)\n         LA    R3,1(R3)\n         B     BLDSEL06            GO GET NEXT CHAR.\n         SPACE\nBLDSEL08 EQU   *\n         LA    R0,NAMTBLXX\n         BAL   R14,GETBASE\n         XC    0(NAMTBLXX,R1),0(R1)\n         MVC   0(8,R1),WORK1\n         TM    SWD,SWD0\n         BO    BLDSEL04\n         OI    SWD,SWD0\n         ST    R1,NAMETBL2\n         B     BLDSEL04\n         SPACE\nBLDSEL20 EQU   *\n         READ  INDECB,SF,SYSIN,(R7),'S'\n         CHECK INDECB\n         LR    R5,R7\n         L     R15,INDECB+16       CALC. LENGTH OF RECORD READ\n         LH    R6,SYSIN+DCBBLKSI-IHADCB\n         SH    R6,14(,R15)\n         LA    R3,0(,R5)\n         LA    R2,72(,R3)\n         B     BLDSEL04\n         SPACE\nBLDSEL90 EQU   *\n         TM    SWD,SWD0            ANY NAMES?\n         BZ    BLDSEL95            NO\n         LA    R0,8                YES, SET END FLAG\n         BAL   R14,GETBASE\n         MVI   0(R1),X'FF'\nBLDSEL95 EQU   *\n         CLOSE SYSIN\nBLDSEL99 EQU   *\n         BAL   R14,RESETHI\n         L     R6,=A(PRMLST)\n         BR    R6\n         EJECT\nBEGIN    EQU   *\n         L     R2,ALCB\n         USING LCB,R2\n         TM    LCB,X'FF'\n         BNM   ENDRUN\n         BAL   R14,RESETLO\n         BAL   R14,RESETHI\n         XC    CURRENT2+4,CURRENT2+4\n         MVC   CURRENT2,NAMETBL2\n*        MVC   HEAD1DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD1VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD1DSN+1(65),HEDD1DSN                            .PRC.\n         MVC   HEDD1DSN+1(2),=C'--'                               .PRC.\n         MVC   HEDD1DSN+4(44),LCBDSNAM                            .PRC.\n         LA    R1,HEDD1DSN+4+43                                   .PRC.\n         CLI   0(R1),C' '                                         .PRC.\n         BNE   *+8                                                .PRC.\n         BCT   R1,*-8                                             .PRC.\n         MVC   2(2,R1),=C'--'                                     .PRC.\n         MVC   5(4,R1),HEAD1C1R+3 'VOL='                          .PRC.\n         MVC   9(6,R1),LCBVOLNO                                   .PRC.\n*        MVC   HEAD2DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD2VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD2DSN+4(58),HEDD1DSN+4                          .PRC.\n         MVC   MAXDIR,LCBDIR       UPDATE FOR DIR READ\n         LA    R1,LCBEND\n         ST    R1,ALCB\n         TM    LCBDS1DS,B'01000010' ONLY DSORG=PO/PS ARE VALID\n         BNZ   BEGIN01\n         OI    SWC,SWC1\n         MVC   LINE1(L'LPDS11I),LPDS11I\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\n         B     BEGIN\n         SPACE\nBEGIN01  EQU   *\n         NI    SWC,255-SWC2        RESET DSORG=PS SWITCH\n         TM    LCBDS1DS,B'01000000' IS THIS DSORG=PS?\n         BZ    *+8                 NO.\n         OI    SWC,SWC2            YES, FLAG IT.\n         TM    SWD,SWD0            WERE NAMES SPECIFIED VIA SYSIN?\n         BZ    BEGIN19             NO.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    BEGIN               YES, NOT PROCESSED ON SELECT.\nBEGIN09  EQU   *\n         L     R1,CURRENT2         RE-INIT THE NAME TBL2\n         USING NAMTBL,R1\nBEGIN10  EQU   *\n         CLI   NAMTBL1,X'FF'       TEST FOR END\n         BE    BEGIN19\n         XC    NAMTBL2(12),NAMTBL2\n         LA    R1,NAMTBLXX(,R1)\n         B     BEGIN10\n         SPACE\nBEGIN19  EQU   *\n         DROP  R1\n         XR    R1,R1\n         IC    R1,LCBJFCRF\n         LTR   R1,R1\n         BNZ   *+8\n         IC    R1,LCBDS1RF\n         STC   R1,SAVRECFM\n         LH    R1,LCBJFCBL\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,LCBDS1BL\n         STH   R1,SAVBLKSI\n         ST    R1,BUFFER0          SET SIZE OF BUFFER(S)\n         LH    R1,LCBJFCLR\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,LCBDS1LR\n         STH   R1,SAVLRECL\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         BZ    *+8                 NO.\n         OI    SWD,SWD7            YES, FLAG.\n         DROP  R2\n         SPACE\n         LA    R8,SYSLIB\n         LH    R15,SAVBLKSI        BLKSIZE SPECIFIED?\n         LTR   R15,R15\n         BNZ   *+24                YES.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IA),LPDS06IA\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'00000010'  MACH. CONTROL CHARS?\n         BZ    *+30                NO.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I1),LPDS06I1\n         MVC   LINE1+L'LPDS06I+L'LPDS06I1(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'11000000'\n         BO    CHKLIB11\n         TM    SAVRECFM,B'01001000'  VARIABLE SPANNED?\n         BNO   CHKLIB11            NO\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I2),LPDS06I2\n         MVC   LINE1+L'LPDS06I+L'LPDS06I2(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RITS/CRBE\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB11 EQU   *\n         TM    SWD,SWD7            RITS/CRBE/CRJE SPECIFIED?\n         BZ    CHKLIB15            NO.\n         TM    SAVRECFM,B'11000000'  YES, CHECK PARMS\n         BO    CHKLIB12            INVALID\n         TM    SAVRECFM,B'10000000'\n         BZ    CHKLIB12            INVALID\n         LH    R15,SAVLRECL\n         CH    R15,=H'88'\n         BNE   *+8\n         B     CHKLIB40\n         SPACE\nCHKLIB12 EQU   *\n         NI    SWD,255-SWD7        TURN OFF RITS/CRBE\n         OI    SWC,SWC1            FLAG REINIT SYSPRINT\n         MVC   LINE1(L'LPDS07I),LPDS07I\n         BAL   R10,PRNT\n         LA    R1,4                RC=4\n         BAL   R14,SAVERC\n         SPACE\n*---------------------------------------------------------------------*\n*        CHECK RECFM TYPES\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB15 EQU   *\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    CHKLIB16\n         TM    SAVRECFM,B'10000000'    RECFM=F?\n         BO    CHKLIB17\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    CHKLIB18\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IB),LPDS06IB\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=U\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB16 EQU   *\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         BNZ   *+8\n         LH    R15,SAVBLKSI\n         CH    R15,SAVBLKSI\n         BNH   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=F\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB17 EQU   *\n         TM    SAVRECFM,B'00010000'    BLOCKED?\n         BO    *+16\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         BNZ   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=V\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB18 EQU   *\n         TM    SAVRECFM,B'00100000'  TRACK OVERFLOW?\n         BZ    CHKLIB40            NO.\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I3),LPDS06I3\n         MVC   LINE1+L'LPDS06I+L'LPDS06I3(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LIB CHECK\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB40 EQU   *\n         LA    R8,SYSLIB\n         SPACE\n*---------------------------------------------------------------------*\n*        REINIT DCB IF NECESSARY\n*---------------------------------------------------------------------*\n         SPACE\n         CLC   SAVRECFM,DCBRECFM\n         BE    BEGIN35\n         CLOSE SYSLIB\n         MVI   EXLST2,X'00'        SUPPRESS EXIT THIS TIME\n         MVI   JFCBADRS,X'80'      SUPPRESS JFCB POINTER\n         MVC   DCBRECFM,SAVRECFM   SET RECFM\n         MVC   DCBLRECL,SAVLRECL   SET LRECL\n         MVC   DCBBLKSI,DCBBLKSI   SET BLKSIZE\n         OPEN  SYSLIB              RE-OPEN THE DATASETS\nBEGIN35  EQU   *\n         MVC   DCBLRECL,SAVLRECL   SET THE LRECL\n         MVC   DCBBLKSI,SAVBLKSI   SET THE BLKSIZE\n         XC    TTRK(2),TTRK        POINT AT NEW DIRECTORY\n         MVI   TTRK+2,1\n         XC    NAMETBL1,NAMETBL1\n         NI    SWE,255-SWE2        RESET SPF-THIS-PDS SWITCH      .SPF.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    BEGIN9              YES, SKIP DIR. BUILD\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DIRECTORY-READ WORKAREA (CHAN. PROGS., ETC.)\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R2,MAXDIR\n         LR    R0,R2\n         MH    R2,=H'8'\n         LA    R2,16(,R2)          C.P. SIZE\n         MH    R0,=H'272'          DATA AREA SIZE\n         AR    R0,R2               WORKAREA SIZE\n         BAL   R14,GETHI           GET SOME CORE\n         ST    R1,WORK1            AREA FOR THE C.P.\n         AR    R2,R1\n         ST    R2,WORK1+4          FOR THE DATA\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE CHANNEL PROGRAM\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         XC    0(16,R1),0(R1)      BUILD THE SHA AND TIC\n         LA    R0,CCHHR\n         ST    R0,0(,R1)\n         MVI   0(R1),X'39'         ...SHA\n         MVI   4(R1),X'40'\n         MVI   7(R1),4\n         ST    R1,8(,R1)\n         MVI   8(R1),X'08'         ...TIC\n         MVI   12(R1),X'40'\n         LA    R1,16(,R1)\n         LA    R14,272             ..SIZE OF DATA RECORD\nBLDNAM10 EQU   *\n         XC    0(8,R1),0(R1)\n         ST    R2,0(,R1)\n         MVI   0(R1),X'1E'         READ CKD\n         MVI   4(R1),X'60'\n         STH   R14,6(,R1)\n         LA    R1,8(,R1)\n         AR    R2,R14\n         BCT   R15,BLDNAM10\n         SH    R1,=H'4'\n         NI    0(R1),X'BF'         TURN OFF CHAINING\n         L     R1,WORK1\n         ST    R1,ACP\n         SPACE 3\nBLDNAM20 EQU   *\n         STM   R14,R12,12(R13)     SAVE REGS FOR TTR CNVT\n         L     R0,TTRK\n         LH    R1,TTRK             UPDATE FOR NEXT TIME\n         LA    R1,1(,R1)\n         STH   R1,TTRK\n         L     R1,SYSLIB+DCBDEBAD-IHADCB\n         LA    R2,MBB\n         L     R15,CVTPTR\n         L     R15,CVTPCNVT(,R15)\n         LR    R3,R13              SAVE 13 OVER CALL\n         BALR  R14,R15\n         LR    R13,R3              NOW RESTORE 13\n         LM    R14,R12,12(R13)     AND THEN THE REST\n         LH    R15,MAXDIR          NOW CLEAR THE DATA AREA\n         L     R1,WORK1+4\nBLDNAM22 EQU   *\n         XC    0(20,R1),0(R1)\n         LA    R1,272(,R1)\n         BCT   R15,BLDNAM22\n         XC    ECB,ECB\n         LA    R10,BLDNAM23\n         EXCP  IOB\n         WAIT  1,ECB=ECB\nBLDNAM23 EQU   *\n         CLI   ECB,X'7F'           I/O OK\n         BE    BLDNAM27\n         CLI   ECB,X'42'\n         BE    BLDNAM90            I/O ERROR OR BAD FORMAT\n         SPACE\n*---------------------------------------------------------------------*\n*        SHORT TRACK, FIND THE END.\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         L     R1,WORK1+4\n         XR    R5,R5\nBLDNAM25 EQU   *\n         CLC   =XL5'0',0(R1)\n         BE    BLDNAM28\n         CLC   =H'0',6(R1)         DL = 0\n         BE    BLDNAM28\n         CLC   =X'0100',6(R1)      DL = 256\n         BNE   BLDNAM90            BAD DIR FORMAT\n         LA    R1,272(,R1)\n         LA    R5,1(,R5)\n         BCT   R15,BLDNAM25\nBLDNAM27 EQU   *\n         LH    R5,MAXDIR\nBLDNAM28 EQU   *\n         L     R4,WORK1+4\nBLDNAM30 EQU   *\n         LA    R3,18(,R4)          POINT PAST COUNT, KEY, 1ST 2 DATA\n         MVC   WORK2(2),16(R4)     GET 1ST 2 BYTES OF DATA, BYTES USED\n         LH    R2,WORK2\n         SH    R2,=H'2'\nBLDNAM36 EQU   *\n         IC    R7,11(,R3)          GET USERDATA LENGTH\n         N     R7,=F'31'           ISOLATE USERDATA LENGTH BITS\n         SLL   R7,1\n         CH    R7,=H'30'           COULD THIS BE SPF STATS        .SPF.\n         BNE   BLDNAM40            NO, BRANCH                     .SPX.\n         TM    14(R3),X'20'        EXTENDED STATS IN 30 BYTES?    .SPX.\n         BZ    BLDNPSPF            NO, TREAT AS STATS             .SPX.\n         B     BLDNOSPF            YES, TREAT AS NO STATS         .SPX.\nBLDNAM40 CH    R7,=H'40'           COULD THIS BE SPF X STATS      .SPX.\n         BNE   BLDNOSPF            NO, BRANCH                     .SPX.\n         TM    14(R3),X'20'        EXTENDED STATS IN 40 BYTES?    .SPX.\n         BZ    BLDNOSPF            NO, TREAT AS NO STATS          .SPX.\nBLDNPSPF EQU   *                                                  .SPX.\n         TM    11(R3),X'60'        ANY TTR'S IN USERDATA          .SPF.\n         BNZ   BLDNOSPF            YES, NOT SPF STATS             .SPF.\n         OI    SWE,SWE2+SWE3       SPF STATS FOUND                .SPF.\nBLDNOSPF EQU   *                                                  .SPF.\n         LA    R6,DIRUSER-DIRNAME(,R7)\n         LA    R0,DIRNAME-DIR(,R6)\n         BAL   R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         OC    NAMETBL1,NAMETBL1\n         BNZ   *+8\n         ST    R1,NAMETBL1\n         STH   R7,DIRUSERL-DIR(,R1)\n         BCTR  R6,0\n         EX    R6,BLDNAMMV\n         CLI   0(R3),X'FF'         TEST FOR END\n         BE    BLDNAM95\n         LA    R6,1(,R6)\n         AR    R3,R6\n         SR    R2,R6\n         BP    BLDNAM36\n         LA    R4,272(,R4)\n         SH    R5,=H'1'\n         BP    BLDNAM30\n         B     BLDNAM20\n         SPACE\nBLDNAMMV MVC   DIRNAME-DIR(*-*,R1),0(R3)\nBLDNAM90 MVC   LINE1(L'LPDS08I),LPDS08I\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DIRECTORY.\n*---------------------------------------------------------------------*\n         SPACE\nBLDNAM95 EQU   *\n         MVC   CURRENT1,NAMETBL1\nBEGIN9   EQU   *\n         LA    R8,SYSLIB\n         OI    SWD,SWD6            FLAG FIRST EJECT ON LIST\n         LH    R1,LINEMAX          RE-INIT SYSPRINT PAGE\n         STH   R1,LINECNT1\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DATA BUFFERS\n*---------------------------------------------------------------------*\n         SPACE\n         BAL   R14,RESETHI\n         L     R0,BUFFER0\n         BAL   R14,GETHI\n         ST    R1,BUFFER1\n         CLI   SAVBUFNO,2\n         BL    BEGIN9A\n         L     R0,BUFFER0\n         BAL   R14,GETHI\n         ST    R1,BUFFER2\nBEGIN9A  EQU   *\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BZ    MAIN00              NO, GO PROCESS A PDS LIBRARY.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR DSORG=PS\n*---------------------------------------------------------------------*\n         SPACE\n         NI    SWD,255-SWD7        NO CRJE, ETC.\n         LA    R0,DIRLEN\n         BAL   R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         LR    R4,R1\n         USING DIR,R4\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN31              NO, GO PROCESS.\n         MVC   HEAD2NAM,NAME\n         MVI   LINE2,C'+'\n         BAL   R10,LOUT\n         MVC   DIRPG1,PAGENUM2\n         B     MAIN31              GO PROCESS DSORG=PS\n         SPACE\nMAIN00   EQU   *\n         NI    SWD,255-SWD1        TURN OFF ALIAS SWITCH\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         BZ    MAIN10              NO.\n         TM    SWD,SWD2            SELECT OF EXCLUDE?\n         BNZ   MAIN10              NOT SELECT.\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT NAME FROM NAMETBL2\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,CURRENT2\n         USING NAMTBL,R2\n         CLI   NAMTBL,X'FF'        END OF TABLE?\n         BE    ENDLIB              YES.\n         MVC   NAME,NAMTBL1\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         SPACE\n*---------------------------------------------------------------------*\n*        SEARCH NAMETBL1 FOR ENTRY.\n*---------------------------------------------------------------------*\n         SPACE\n         L     R4,NAMETBL1\n         USING DIR,R4\nMAIN02   EQU   *\n         CLI   DIRNAME,X'FF'       END?\n         BE    MAIN00              YES, MEMBER NOT FOUND.\n         CLC   NAMTBL1,DIRNAME     IS THIS IT?\n         BE    MAIN04              YES, FOUND IT.\n         LH    R15,DIRUSERL        UPDATE POINTER AND TRY NEXT ENTRY\n         LA    R4,DIRUSER(R15)\n         B     MAIN02\n         SPACE\nMAIN04   EQU   *\n         ST    R4,NAMTBL2          SAVE POINTER\n         LA    R1,DIRNAME          POINT TO DIR ENTRY AREA\n         B     MAIN12\n         DROP  R2\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT ENTRY FROM NAMETBL1\n*---------------------------------------------------------------------*\n         SPACE\nMAIN10   EQU   *\n         L     R4,CURRENT1\n         USING DIR,R4\n         CLI   DIRNAME,X'FF'       TEST FOR END\n         BE    ENDLIB\n         MVC   NAME,DIRNAME        SAVE NAME FOR LATER PROCESSING\n         LH    R15,DIRUSERL\n         LA    R1,DIRNAME\n         LA    R2,DIRUSER(R15)\n         ST    R2,CURRENT1\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED (EXCLUDE)?\n         BZ    MAIN12              NO\n         L     R2,NAMETBL2         CHECK FOR EXCLUDE\n         USING NAMTBL,R2\nMAIN11   EQU   *\n         CLI   NAMTBL,X'FF'        TEST FOR END OF EXCLUDED LIST\n         BE    MAIN12              NOT EXCLUDED, GO PROCESS THE MEMBER\n         CLC   NAMTBL1,DIRNAME\n         BE    MAIN10              NAME MATCH..THIS MEMBER EXCLUDED.\n         LA    R2,NAMTBLXX(,R2)\n         B     MAIN11\n         DROP  R2\n         SPACE 2\nMAIN12   EQU   *\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         BZ    MAIN20              NO, CONTINUE.\n         SPACE\n*---------------------------------------------------------------------*\n*        ALIAS ENTRY ... FIND PRIME ENTRY (IF IT EXISTS)\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,NAMETBL1\nMAIN14   EQU   *\n         CLI   DIRNAME-DIR(R2),X'FF'\n         BE    MAIN20              ..END TBL, IGNORE ALIAS\n         CLC   DIRTTR(3),DIRTTR-DIR(R2)\n         BNE   MAIN14A\n         TM    DIRTTR+3-DIR(R2),ALIAS\n         BZ    MAIN16              PRIME ENTRY FOUND FOR ALIAS\nMAIN14A  EQU   *\n         LH    R15,DIRUSERL-DIR(R2)\n         LA    R2,DIRUSER-DIR(R2,R15)\n         B     MAIN14\n         SPACE\n*---------------------------------------------------------------------*\n*        PRIME ENTRY FOUND FOR ALIAS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN16   EQU   *\n         OI    DIRFLAGS,B'11000000'    SET ALIAS FLAG\n         TM    SWD,SWD0            SELECTED NAMES SPECIFIED?\n         BO    MAIN20              YES, CONTINUE.\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         LA    R1,1(R1)\n         STH   R1,MEMCNT\n         B     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        MEMBER PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN20   EQU   *\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         LA    R1,1(R1)\n         STH   R1,MEMCNT\n         OI    DIRFLAGS,B'10000000'    FLAG MEMBER 'PROCESSED'\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN21              NO.\n         TM    SWA,SWA5            IS IT EJECT FORMAT\n         BO    MAIN20D             YES.\n         MVC   LINE2(8),=C'0MEMBER='\n         MVC   LINE2+8(8),NAME\n         BAL   R10,LOUT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\n         MVI   LINE2,C'0'\n         B     MAIN21\n         SPACE\nMAIN20D  EQU   *\n         OI    SWD,SWD6            FORCE EJECT FORMAT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVI   LINE2,C'+'\n         BAL   R10,LOUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\nMAIN21   EQU   *\n         TM    SWA,SWA2            LIST DIR ONLY?\n         BO    MAIN00              YES, SKIP PROCESSING\n         TM    SWA,SWA1+SWA3       DECK OUTPUT WITH UPDTE\n         BNO   MAIN30              NO\n* ---- >                 LEAVE OUT DATE AND TIME          BELOW\n*\n*        MVC   CARD+50(L'HEAD1DAT),HEAD1DAT\n*        MVC   CARD+50+L'HEAD1DAT(L'HEAD1TIM),HEAD1TIM\n*\n* ---- >                 LEAVE OUT DATE AND TIME          ABOVE\n         LH    R15,DIRUSERL        ANY USER INFO?\n         CH    R15,=H'4'           (MUST BE 4 BYTES)\n         BNE   *+12                NO, THERE NO SSI     (WAS BL)  .SPF.\n         TM    SWA,SWA6            SSI SPECIFIED?\n         BO    MAIN24              YES.\n         MVC   CARD(L'UPDTE1),UPDTE1  CC WITH NO SSI\n         MVC   CARD+L'UPDTE1(L'NAME),NAME\n         CH    R15,=H'30'          ARE SPF STATS PRESENT          .SPF.\n         BNE   MAIN21A                                            .SPX.\n         TM    DIRUSER+2,X'20'     EXTENDED STATS IN 30 BYTES?    .SPX.\n         BZ    MAIN21B             IF NOT, GOOD STATS             .SPX.\n         B     MAIN24A             TREAT AS NO STATS              .SPX.\nMAIN21A  CH    R15,=H'40'          ARE SPF X STATS PRESENT        .SPX.\n         BNE   MAIN24A             NO, BRANCH                     .SPF.\n         TM    DIRUSER+2,X'20'     EXTENDED STATS IN 40 BYTES?    .SPX.\n         BZ    MAIN24A             IF NOT, TREAT AS NO STATS      .SPX.\nMAIN21B  EQU   *                                                  .SPX.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         BNO   MAIN24A             NO, BRANCH                     .SPF.\n         LA    R15,L'UPDTE1+9+CARD WHERE TO PUT THEM              .SPF.\n         MVI   0(R15),C'-'         HYPHEN TO BE PROPOGATED        .SPF.\n         MVC   1(49,R15),0(R15)    FILL AREA WITH HYPHENS         .SPF.\n         SLR   R0,R0               CLEAR FOR INSERT               .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  0(2,R15),WORK1+6(2)                                .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  2(2,R15),WORK1+6(2)                                .SPF.\n         UNPK  05(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n         UNPK  11(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  17(4,R15),WORK1(3)                                 .SPF.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  22(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  28(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  34(5,R15),WORK1+5(3)                               .SPF.\n*        MVC   40(10,R15),DIRUSER+20   USER ID                   *.SEC.\n         MVC   40(07,R15),DIRUSER+20   USER ID (7 BYTES)          .SEC.\n         MVI   47(R15),C' '                                       .SEC.\n         UNPK  48(3,R15),DIRUSER+3(2)  SECONDS                    .SEC.\n         MVI   50(R15),C' '                                       .SEC.\n         TM    DIRUSER+2,X'20'     EXTENDED STATS?                .SPX.\n         BZ    MAIN24A             BRANCH IF NO                   .SPX.\n         MVC   WORK1(4),DIRUSER+28 CURRENT SIZE                   .SPX.\n         L     R0,WORK1                                           .SPX.\n         CVD   R0,WORK1                                           .SPX.\n         OI    WORK1+7,X'0F'                                      .SPX.\n         UNPK  WORK2,WORK1                                        .SPX.\n         MVC   22(5,R15),WORK2+3                                  .SPX.\n         MVC   51(3,R15),WORK2     COLUMN 73-75                   .SPX.\n         MVC   WORK1(4),DIRUSER+32 INITIAL SIZE                   .SPX.\n         L     R0,WORK1                                           .SPX.\n         CVD   R0,WORK1                                           .SPX.\n         OI    WORK1+7,X'0F'                                      .SPX.\n         UNPK  WORK2,WORK1                                        .SPX.\n         MVC   28(5,R15),WORK2+3                                  .SPX.\n         MVC   54(3,R15),WORK2     COLUMN 76-78                   .SPX.\n         MVC   WORK1(4),DIRUSER+36 LINES MODIFIED                 .SPX.\n         L     R0,WORK1                                           .SPX.\n         CVD   R0,WORK1                                           .SPX.\n         OI    WORK1+7,X'0F'                                      .SPX.\n         UNPK  WORK2,WORK1                                        .SPX.\n         MVC   34(5,R15),WORK2+3                                  .SPX.\n         MVC   57(2,R15),WORK2+1   COLUMN 79-80                   .SPX.\n         B     MAIN24A\n*MAIN24  MVC   CARD(L'UPDTE2),UPDTE2  CC WITH SSI                *.PRC.\n*        MVC   CARD+L'UPDTE2(L'NAME),NAME                        *.PRC.\n*        LA    R15,11+CARD          FORMAT SSI                   *.PRC.\n*                  NEW CODE FOR ADD NAME=MEMBER,SSI=XXXXXXXX      .PRC.\n*                  INSTEAD OF   ADD SSI=XXXXXXXX,NAME=MEMBER      .PRC.\nMAIN24   EQU   *                                                  .PRC.\n         MVC   CARD(L'UPDTE1),UPDTE1                              .PRC.\n         MVC   CARD+L'UPDTE1(L'NAME),NAME                         .PRC.\n         LA    R15,CARD+L'UPDTE1+7 LAST BYTE OF NAME              .PRC.\n         CLI   0(R15),C' '         LOOK FOR LAST NONBLANK         .PRC.\n         BNE   *+8                 BRANCH IF FOUND                .PRC.\n         BCT   R15,*-8             LOOP TO CLI                    .PRC.\n         MVC   1(5,R15),=C',SSI='  APPEND KEYWORD                 .PRC.\n         LA    R15,6(,R15)         POINT PAST KEYWORD             .PRC.\n         LA    R0,4\n         LA    R1,DIRUSER\n         BAL   R10,HEXCON\nMAIN24A  EQU   *\n         BAL   R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR READING\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nMAIN30   EQU   *\n         MVC   TTRK(3),DIRTTR\nMAIN31   EQU   *\n         FIND  SYSLIB,TTRK,C\n         LM    R2,R3,BUFFER1       INIT BUFFERS\n         STM   R2,R3,BFRS\n         XR    R5,R5               CLEAR CURRENT MEM REC CNTR\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BNE   MAIN32              NO.\n         XC    PDSDECB,PDSDECB     YES, ISSUE FIRST READ.\n         READ  PDSDECB,SF,(R8),(R2),MF=E\n         SPACE\n*---------------------------------------------------------------------*\n*        READ IN NEXT BLOCK\n*---------------------------------------------------------------------*\n         SPACE\nMAIN32   EQU   *\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BE    MAIN34              YES.\n         L     R2,BFRS             NO...ISSUE READ\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),'S'\nMAIN34   EQU   *\n         LA    R10,MAIN65 .. SET E.O.F. ADDR\n         CHECK PDSDECB\n         L     R15,PDSDECB+16      COMPUTE LEN OF REC READ\n         LH    R6,DCBBLKSI\n         SH    R6,14(R15)\n         L     R7,BFRS             LOAD PNTR TO DATA\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BNE   MAIN36              NO.\n         L     R2,BFRS+4           YES, INIT NEXT READ\n         ST    R7,BFRS+4\n         ST    R2,BFRS\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),MF=E\nMAIN36   EQU   *\n         TM    SAVRECFM,B'10000000'  RECFM U OR F?\n         BO    MAIN38              YES.\n         LH    R6,0(R7)            NO, MUST BE V ...\n         LA    R7,4(R7)            PROCESS BLOCK DESCRIPTOR\n         SH    R6,=H'4'\nMAIN38   EQU   *\nMAIN40   EQU   *                   RITS/CRBE/CRJE?\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         BZ    MAIN50              NO\n         SPACE\n*---------------------------------------------------------------------*\n*        PROCESS A RITS/CRBE RECORD\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN45              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         BZ    MAIN42              NO\n         CH    R5,MAXLIST          YES, TEST FOR LIMIT.\n         BNL   MAIN45              LIMIT EXCEEDED.\nMAIN42   EQU   *\n         MVC   LINE2+1(8),0(R7)\n         MVC   LINE2+11(80),8(R7)\n         BAL   R10,LOUT            YES, OUTPUT FORMATTED LINE\nMAIN45   EQU   *\n         TM    SWA,SWA1            DECK?\n         BZ    MAIN64              NO.\n         MVC   CARD,8(R7)\n         BAL   R10,PUNCHIT         YES, OUTPUT CARD IMAGE\n         B     MAIN64\n         SPACE\n*---------------------------------------------------------------------*\n*        'LIST' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN50   EQU   *\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN60              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         BZ    MAIN50A             NO\n         CH    R5,MAXLIST          YES, AT LIMIT?\n         BNL   MAIN60              YES, SKIP LISTING\nMAIN50A  EQU   *\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    MAIN51              YES\n         LH    R3,DCBLRECL         RECFM = F OR U.\n         LA    R2,0(R7)\n         B     MAIN52\n         SPACE\nMAIN51   EQU   *\n         MVC   DCBLRECL,0(R7)\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         SH    R3,=H'4'\nMAIN52   EQU   *\n         TM    SWB,SWB1            HEXOUT?\n         BO    MAIN56              YES.\n         TM    SWB,SWB3            IS NUM SPECIFIED?\n         BO    MAIN57              YES.\nMAIN53   EQU   *\n         LR    R15,R3\n         CH    R3,=H'116'\n         BNH   *+8\n         LA    R15,116\n         BCTR  R15,0\n         LA    R1,LINE2+1\n         EX    R15,VARMVC1\nMAIN54   EQU   *\n         LA    R2,116(R2)          OUTPUT OTHER LINES\n         SH    R3,=H'116'\n         BNP   MAIN59              DONE IF NO MORE DATA\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7            TRUNC?\n         BO    MAIN59              YES, QUIT HERE\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN53              NO, LOOP TO CONTINUE OUTPUT\n         SPACE\nMAIN56   EQU   *\n         LA    R15,LINE2+5         OUTPUT LINE IN HEX\n         LR    R0,R3\n         CH    R3,=H'50'           FIFTY BYTES PER LINE\n         BNH   *+8\n         LA    R0,50\n         LR    R1,R2\n         BAL   R10,HEXCON\n         LA    R2,50(R2)           OUTPUT OTHER LINES\n         SH    R3,=H'50'\n         BNP   MAIN59              DONE\n         MVI   LINE2+120,C'*'      FLAG LINE CONTINUATION\n         TM    SWA,SWA7            IS TRUNC SPECIFIED?\n         BO    MAIN59              YES, QUIT.\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN56              LOOP\n         SPACE\nMAIN57   EQU   *\n         SH    R3,=H'8'\n         TM    SAVRECFM,B'10000000' IS IT RECFM=U/F/FB?\n         BO    MAIN57A             YES.\n         MVC   LINE2+1(8),0(R2)    NO, RECFM=V/VB\n         LA    R2,8(0,R2)\n         B     MAIN57B\n         SPACE\nMAIN57A  EQU   *\n         LA    R14,0(R2,R3)\n         MVC   LINE2+1(8),0(R14)\nMAIN57B  EQU   *\n         LA    R1,LINE2+10\n         LR    R15,R3\n         CH    R15,=H'108'\n         BNH   *+8\n         LA    R15,108\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         LA    R2,106(0,R2)\n         SH    R3,=H'106'\n         BNP   MAIN59\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7\n         BO    MAIN59\n         BAL   R10,LOUT\nMAIN58   EQU   *\n         LR    R15,R3\n         LA    R1,LINE2+10\n         CH    R15,=H'106'\n         BNH   *+8\n         LA    R15,106\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         LA    R2,106(0,R2)\n         SH    R3,=H'106'\n         BNP   MAIN59\n         MVI   LINE2+120,C'*'\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN58\n         SPACE\nMAIN59   EQU   *\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE.\n         SPACE\n*---------------------------------------------------------------------*\n*        'DECK' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN60   EQU   *\n         TM    SWA,SWA1            DECK?\n         BZ    MAIN64              NO.\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    MAIN61              YES\n         LH    R3,DCBLRECL         RECFM = U OR F\n         LA    R2,0(R7)\n         B     MAIN62\n         SPACE\nMAIN61   EQU   *\n         MVC   DCBLRECL,0(R7)      RECFM=V/VB\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         SH    R3,=H'4'\nMAIN62   EQU   *\n         LR    R15,R3\n         CH    R3,=H'80'\n         BNH   *+8\n         LA    R15,80\n         BCTR  R15,0\n         EX    R15,VARMVC3\n         TM    SWA,SWA3            UPDTE                          .PRC.\n         BNO   MAIN62A                                            .PRC.\n         CH    R3,=H'80'           IS LRECL=80                    .PRC.\n         BNE   MAIN62A                                            .PRC.\n         CLC   CARD(2),UPDTESUB    IF SUBSITUTE ALREADY THERE     .UPL.\n         BNE   NOTSUB                THEN                         .UPL.\n         TM    SWE,SWE4              IF SYSUPLOG IS OPEN          .UPL.\n         BZ    NOTSUB                   THEN                      .UPL.\n         MVC   UPCARD(8),NAME           PUT MEMBER NAME IN UPCARD .UPL.\n         LA    R15,1(,R5)               LINE NUMBER               .UPL.\n         CVD   R15,WORK1                LINE NUMBER               .UPL.\n         OI    WORK1+7,X'0F'            LINE NUMBER               .UPL.\n         UNPK  UPCARD+9(7),WORK1+4(4)   LINE NUMBER               .UPL.\n         MVC   UPCARD+17(62),CARD    COPY BEGINNING OF CARD IMAGE .SBG.\n         PUT   SYSUPLOG,UPCARD          WRITE RECORD TO SYSUPLOG  .UPL.\nNOTSUB   EQU   *                                                  .UPL.\n         CLC   CARD(2),=C'./'      IS THIS AN UPDTE STATEMENT     .PRC.\n         BNE   MAIN62A                                            .PRC.\n         MVC   CARD(2),UPDTESUB    YES, SUBSTITUTE CHARS          .PRC.\nMAIN62A  EQU   *                                                  .PRC.\n         BAL   R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LOGICAL RECORD\n*---------------------------------------------------------------------*\n         SPACE\nMAIN64   EQU   *\n         LA    R5,1(R5)            UPDATE REC COUNT\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    MAIN32              YES, GO GET NEXT BLOCK.\n         TM    SAVRECFM,B'01000000'  RECFM=V?\n         BZ    *+10                NO\n         MVC   DCBLRECL,0(R7)      YES, USE RECORD DESC. LEN\n         AH    R7,DCBLRECL         UPDATE BUFFER POINTER\n         SH    R6,DCBLRECL         UPDATE BYTES COUNT\n         BP    MAIN40              CONTINUE WITH THIS BLOCK\n         B     MAIN32              GO GET NEXT BLOCK\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF MEMBER OR SDS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN65   EQU   *\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    MAIN70              YES, GO PROCESS IT.\n         ST    R5,WORK2\n         MVC   DIRCRDCT,WORK2\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         BZ    MAIN66              NO\n         TM    SWD,SWD2            SELECT MEMBERS?\n         BNZ   MAIN66              NO.\n         L     R2,CURRENT2+4       YES, UPDATE COUNTS\n         USING NAMTBL,R2\n         MVC   NAMTBL4,DIRPG1\n         MVC   NAMTBL3,DIRCRDCT\n         DROP  R2\nMAIN66   EQU   *\n         CVD   R5,WORK2\n         AL    R5,RECORDS          UPDATE TOTAL REC COUNT\n         ST    R5,RECORDS\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN67              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERISKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG2L),MSG2\n*        ED    LINE2+L'MSG2(L'MSG2A),WORK2+5     5 DIGITS        *.SUM.\n         ED    LINE2+L'MSG2(L'MSG2A),WORK2+4     7 DIGITS         .SUM.\n         BAL   R10,LOUT\nMAIN67   EQU   *\n         B     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DSORG=PS DATASET.\n*---------------------------------------------------------------------*\n         SPACE\nMAIN70   EQU   *\n         ST    R5,RECORDS\n         MVC   LINE1+6(8),=8C'*'\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\n         BAL   R10,PRNT\n         BAL   R10,PRNT\n         CVD   R5,WORK2\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN72              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERISKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG9L),MSG9\n*        ED    LINE2+L'MSG9(L'MSG9A),WORK2+5                     *.SUM.\n         ED    LINE2+L'MSG9(L'MSG9A),WORK2+3                      .SUM.\n         BAL   R10,LOUT\nMAIN72   EQU   *\n         MVI   MEMCNT+1,1          \"SDS\" IS ONE MEMBER\n         CVD   R5,WORK2\n         MVC   LINE1(MSG9L),MSG9\n         MVI   LINE1,C' '\n*        ED    LINE1+L'MSG9(L'MSG9A),WORK2+5                     *.SUM.\n         ED    LINE1+L'MSG9(L'MSG9A),WORK2+3                      .SUM.\n         BAL   R10,PRNT\n         A     R5,TOTALREC\n         ST    R5,TOTALREC\n         B     ENDLIB90\n         EJECT\n*----------------------------------------------------------------------\n*        END-OF-LIBRARY\n*----------------------------------------------------------------------\nENDLIB   EQU   *\n         LA    R8,SYSLIB\n         TM    SWD,SWD0            SELECT OR EXCLUDE SPECIFIED?\n         BZ    ENDLIB05            NO\n         TM    SWD,SWD2            SELECT SPECIFIED?\n         BZ    ENDLIB20            YES.\nENDLIB05 EQU   *\n         MVC   CURRENT1,NAMETBL1\n         USING DIR,R4\nENDLIB10 EQU   *\n         L     R4,CURRENT1\n         CLI   DIRNAME,X'FF'\n         BE    ENDLIB80\n         LH    R15,DIRUSERL\n         LA    R1,DIRUSER(R15)\n         ST    R1,CURRENT1\n         TM    SWD,SWD0+SWD2       WAS SYSIN-EXCLUDE SPECIFIED?\n         BNO   ENDLIB12            NO\n         TM    DIRFLAGS,B'10000000'  ..WAS THIS MEMBER SPECIFIED?\n         BZ    ENDLIB10            NO, SKIP IT.\nENDLIB12 EQU   *\n         BAL   R10,LSTDIR\nENDLIB14 EQU   *\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         BZ    ENDLIB10            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),=8C'?'\n         L     R1,NAMETBL1\nENDLIB15 EQU   *\n         CLI   DIRNAME-DIR(R1),X'FF'\n         BE    ENDLIB18\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         BE    ENDLIB17\nENDLIB16 EQU   *\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         B     ENDLIB15\nENDLIB17 EQU   *\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         BO    ENDLIB16\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB18 EQU   *\n         BAL   R10,PRNT\n         B     ENDLIB10\nENDLIB20 EQU   *\n         MVC   CURRENT2,NAMETBL2\n         USING NAMTBL,R2\nENDLIB22 EQU   *\n         L     R2,CURRENT2\n         CLI   NAMTBL,X'FF'\n         BE    ENDLIB80\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         L     R4,NAMTBL2          GET PNTR TO DIR AREA\n         LTR   R4,R4               IS THERE ONE?\n         BNZ   ENDLIB30            YES.\n         MVC   LINE1+6(8),NAMTBL1  NO, ISSUE MSG\n         MVC   LINE1+16(L'MSG3),MSG3\n         BAL   R10,PRNT\n         B     ENDLIB22\n         SPACE\nENDLIB30 EQU   *                   MEMBER FOUND, LIST INFO.\n         MVC   DIRPG1,NAMTBL4\n         MVC   DIRCRDCT,NAMTBL3\n         BAL   R10,LSTDIR\nENDLIB34 EQU   *\n         TM    DIRFLAGS,B'11000000' IS THIS PROCESSED ALIAS?\n         BNO   ENDLIB22            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),=8C'?'\n         L     R1,NAMETBL1\nENDLIB35 EQU   *\n         CLI   DIRNAME-DIR(R1),X'FF'\n         BE    ENDLIB38\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         BE    ENDLIB37\nENDLIB36 EQU   *\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         B     ENDLIB35\n         SPACE\nENDLIB37 EQU   *\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         BO    ENDLIB36\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB38 EQU   *\n         BAL   R10,PRNT\n         B     ENDLIB22\n         SPACE\n*---------------------------------------------------------------------*\n*        ISSUE END OF LIBRARY MESSAGE\n*---------------------------------------------------------------------*\n         SPACE\nENDLIB80 EQU   *\n         MVC   LINE1(MSG1L),MSG1\n         LH    R15,MEMCNT\n         CVD   R15,WORK1\n         ED    LINE1+L'MSG1(L'MSG1A),WORK1+5\n         L     R15,RECORDS\n         CVD   R15,WORK1\n         AL    R15,TOTALREC\n         ST    R15,TOTALREC\n*        ED    LINE1+L'MSG1+L'MSG1A+L'MSG1AX(L'MSG1B),WORK1+4    *.SUM.\n         ED    LINE1+L'MSG1+L'MSG1A+L'MSG1AX(L'MSG1B),WORK1+3     .SUM.\n         BAL   R10,PRNT\nENDLIB90 EQU   *\n         XC    RECORDS,RECORDS\n         XC    MEMCNT,MEMCNT\n         IC    R15,TTRK+3\n         LA    R15,1(R15)\n         STC   R15,TTRK+3\n         B     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-RUN\n*---------------------------------------------------------------------*\n         SPACE\nENDRUN   EQU   *\n         TM    SWB,SWB0            DEBUG?\n         BO    ENDRUN10            YES, BYPASS FREE CORE\n         SPACE\n*---------------------------------------------------------------------*\n*        FREE WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\n         OC    COR2,COR2           MAKE SURE CORE WAS GOTTEN\n         BZ    ENDRUN10            NOT GOTTEN\n         FREEMAIN V,A=COR2\nENDRUN10 EQU   *\n         TM    SWC,SWC3            TERMINATE MODE?\n         BO    ENDRUN11            YES.\n         MVC   LINE1(L'ENDMSG0),ENDMSG0\n         XR    R15,R15\n         IC    R15,TTRK+3\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  LINE1+L'ENDMSG0(2),WORK1+6(2)\n         MVC   LINE1+L'ENDMSG0+2(ENDMSG1L),ENDMSG1\n         L     R15,TOTALREC\n         CVD   R15,WORK1\n*        ED    LINE1+L'ENDMSG0+L'ENDMSG1+2(L'ENDMSG1A),WORK1+4   *.SUM.\n         ED    LINE1+L'ENDMSG0+L'ENDMSG1+2(L'ENDMSG1A),WORK1+3    .SUM.\n         L     R15,COR2+4\n         SRL   R15,10              CONVERT TO 'K'\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         L     R1,COR7\n         AL    R1,COR8\n         SRL   R1,10\n         SR    R15,R1\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7B,WORK1\n         MVC   LINE1+L'ENDMSG0+ENDMSG1L+4(MSG7L2-1),MSG7+1\nENDRUN11 EQU   *\n         BAL   R10,PRNT            OUTPUT FINAL MSG\n         LA    R8,SYSPUNCH         CLOSE ALL DCBS\n         BAL   R10,TERMIO\n         LA    R8,SYSUPLOG         CLOSE ALL DCBS                 .UPL.\n         BAL   R10,TERMIO                                         .UPL.\n         TM    SWB,SWB0            DEBUG?\n         BO    ENDRUN31            YES, SKIP CLOSING SYSLIB\n         LA    R8,SYSLIB\n         CLOSE SYSLIB\nENDRUN31 EQU   *\n         LA    R8,SYSLIST\n         BAL   R10,TERMIO\n         LA    R8,SYSPRINT\n         BAL   R10,TERMIO\n         TM    SWB,SWB0            DEBUG?\n         BZ    ENDRUN99            NO\n         LH    R2,RETCODE          YES, ABEND\n         ABEND (R2),DUMP\nENDRUN99 EQU   *\n         L     R13,4(R13)\n         LH    R15,RETCODE\n         RETURN (14,12),T,RC=(15)\n         EJECT\n*---------------------------------------------------------------------*\n*        FORMAT AND PRINT THE 'SYSPRINT' LINE FOR A MEMBER\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nLSTDIR   EQU   *\n         ST    R10,SAVE10          SAVE CALLER'S RETURN\n         MVC   LINE1+6(8),DIRNAME\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         BZ    LSTDIR03            NO\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\nLSTDIR03 EQU   *\n         LA    R15,LINE1+L'CAPTIONS-12\n         LA    R0,L'DIRTTR\n         LA    R1,DIRTTR\n         BAL   R10,HEXCON\n         LH    R15,DIRUSERL\n         LTR   R15,R15\n         BNP   LSTDIR10\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         BZ    LSTDIR05            NO.\n         LA    R1,LINE1+L'CAPTIONS\n         LA    R2,DIRUSER\n         BAL   R10,RITSINFO\n         B     LSTDIR10\n         SPACE\nLSTDIR05 EQU   *\n         LA    R15,LINE1+L'CAPTIONS\n         LA    R1,DIRUSER\n         LH    R0,DIRUSERL\n         CH    R0,=H'30'           ARE SPF STATISTICS PRESENT     .SPF.\n         BE    LSTDIR06            POSSIBLY                       .SPX.\n         CH    R0,=H'40'           ARE SPF EXT STATS PRESENT      .SPX.\n         BNE   LSTSPFX             NO, BRANCH                     .SPF.\nLSTDIR06 EQU   *                                                  .SPX.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         BNO   LSTSPFX             NO, BRANCH                     .SPF.\n         TM    DIRTTR+3,X'60'      TTR'S IN USER DATA             .SPF.\n         BNZ   LSTSPFX             YES, THIS ISNT SPF DATA        .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  1(2,R15),WORK1+6(2)                                .SPF.\n         MVI   3(R15),C'.'                                        .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  4(2,R15),WORK1+6(2)                                .SPF.\n*        UNPK  11(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n*        MVC   10(2,R15),11(R15)                                  .SPF.\n*        MVI   12(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+4  YYDDD CREATED                  .SPF.\n         L     R0,WORK1            YYDDD CREATED                  .SPF.\n         BAL   R14,JULIAN                                         .SPF.\n         MVC   9(7,R15),WORK1+1                                   .SPF.\n*        UNPK  21(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n*        MVC   20(2,R15),21(R15)                                  .SPF.\n*        MVI   22(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+8  YYDDD LAST MODIFIED            .SPF.\n         L     R0,WORK1            YYDDD LAST MODIFIED            .SPF.\n         BAL   R14,JULIAN                                         .SPF.\n         MVC   19(7,R15),WORK1+1                                  .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  28(4,R15),WORK1(3)                                 .SPF.\n         MVC   27(2,R15),28(R15)                                  .SPF.\n         MVI   29(R15),C':'                                       .SPF.\n         MVI   32(R15),C':'                                       .SEC.\n         UNPK  33(3,R15),DIRUSER+3(2) SECONDS                     .SEC.\n         MVI   35(R15),C' '                                       .SEC.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   *+14                  THEN                         .SPX.\n         MVC   WORK1(4),DIRUSER+32   GET CURRENT SIZE EXTENDED    .SPX.\n         L     R0,WORK1              GET CURRENT SIZE EXTENDED    .SPX\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   32(6,R15),=X'402020202120'                         .SPF.\n*        ED    32(6,R15),WORK1+5                                  .SPF.\n         MVC   35(8,R15),=X'4020202020202120'                     .SPX.\n         ED    35(8,R15),WORK1+4                                  .SPX.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   *+14                  THEN                         .SPX.\n         MVC   WORK1(4),DIRUSER+32   GET INITIAL SIZE EXTENDED    .SPX.\n         L     R0,WORK1              GET INITIAL SIZE EXTENDED    .SPX\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   38(6,R15),=X'402020202120'                         .SPF.\n*        ED    38(6,R15),WORK1+5                                  .SPF.\n         MVC   43(8,R15),=X'4020202020202120'                     .SPX.\n         ED    43(8,R15),WORK1+4                                  .SPX.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   *+14                  THEN                         .SPX.\n         MVC   WORK1(4),DIRUSER+36   GET LINES MODIFIED EXTENDED  .SPX.\n         L     R0,WORK1              GET LINES MODIFIED EXTENDED  .SPX\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   44(6,R15),=X'402020202120'                         .SPF.\n*        ED    44(6,R15),WORK1+5                                  .SPF.\n         MVC   51(8,R15),=X'4020202020202120'                     .SPX.\n         ED    51(8,R15),WORK1+4                                  .SPX.\n*        MVC   52(10,R15),DIRUSER+20   USER ID                    .SPF.\n         MVC   61(10,R15),DIRUSER+20   USER ID                    .SPX.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   SHOWNO                NO. SHOW NO.                  SBG\n         MVC   69(2,R15),=C'  '       USER ID IS ONLY 8 BYTES     .SPX.\n         MVC   71(3,R15),=C'YES'     YES. SHOW YES.                SBG\n         B     SHOWYES                                             SBG\nSHOWNO   MVC   71(3,R15),=C'NO '                                   SBG\nSHOWYES  B     LSTDIR10                                            SBG\n         SPACE\nJULIAN   EQU   *                                                  .SPF.\n         STM   R15,R1,JULIANS                                     .SPF.\n         XC    WORK2,WORK2                                        .SPF.\n         ST    R0,WORK2+4                                         .SPF.\n         CVB   R1,WORK2            CONVERT DATE TO BINARY         .SPF.\n         XR    R0,R0                                              .SPF.\n         D     R0,=F'1000'         TO SEP YEAR AND DAY            .SPF.\n         ST    R1,WORK2            SAVE YEAR                      .SPF.\n         L     R15,=A(MONTHS1)     FOR STD YEAR                   .SPF.\n         TM    WORK2+3,X'03'       LEAP YEAR?                     .SPF.\n         BNZ   *+8                 NO                             .SPF.\n         L     R15,=A(MONTHS2)     FOR LEAP YEAR                  .SPF.\n         XR    R1,R1                                              .SPF.\nJULIANX  EQU   *                                                  .SPF.\n         SH    R0,0(R15)                                          .SPF.\n         BNP   JULIANY                                            .SPF.\n         LA    R1,3(R1)                                           .SPF.\n         LA    R15,2(R15)                                         .SPF.\n         B     JULIANX                                            .SPF.\n         SPACE 1                                                  .SPF.\nJULIANY  EQU   *                                                  .SPF.\n         AH    R0,0(R15)                                          .SPF.\n         MH    R0,=H'10'                                          .SPF.\n         CVD   R0,WORK2            FOR DAY OF MONTH               .SPF.\n         AL    R1,=A(MONTHS3)      FOR MON IN CHARS               .SPF.\n         MVC   WORK1(8),=X'4020204B4B4B2020'                      .SPF.\n         MVC   WORK1+3(3),0(R1)                                   .SPF.\n         MVC   JULIANS+4(1),WORK2+6 DAY OF MONTH DDYYDDDF         .SPF.\n         ED    WORK1(8),JULIANS+4                                 .SPF.\n         CLI   WORK1+1,C' '                                       .SPF.\n         BNE   *+8                                                .SPF.\n         MVI   WORK1+1,C'0'                                       .SPF.\n         LM    R15,R1,JULIANS                                     .SPF.\n         BR    R14                                                .SPF.\n         SPACE 1                                                  .SPF.\nLSTSPFX  EQU   *                                                  .SPF.\n         CH    R0,=H'32'\n         BNH   *+8\n         LA    R0,32\n         BAL   R10,HEXCON\nLSTDIR10 EQU   *\n         TM    SWA,SWA2            LISTDIR ONLY?\n         BO    LSTDIR90            YES\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         BZ    LSTDIR90            NO\n         MVC   WORK1(4),DIRCRDCT\n         L     R1,WORK1\n         CVD   R1,WORK1\n*        MVC   LINE1+24(L'MSG2A),MSG2A                           *.SUM.\n         MVC   LINE1+22(L'MSG2A),MSG2A                            .SUM.\n*        ED    LINE1+24(L'MSG2A),WORK1+5         5 DIGITS        *.SUM.\n         ED    LINE1+22(L'MSG2A),WORK1+4         7 DIGITS         .SUM.\nLSTDIR90 EQU   *\n         BAL   R10,PRNT\n         L     R10,SAVE10\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        UPON ENTRY, R1=A(BUFFER), R2=A(DIRECTORY ENTRY)\n*---------------------------------------------------------------------*\n         SPACE\nRITSINFO EQU   *\n         CLI   DIRUSERL+1,5        CHECK LENGTH OF USER FIELD\n         BL    UNKNOWN             SHORT.\n         MVC   0(L'PAT1,R1),PAT1\n         ED    0(L'PAT1,R1),0(R2)\n         MVC   10(L'PAT1,R1),PAT1\n         ED    10(L'PAT1,R1),3(R2)\n         XC    WORK1,WORK1\n         MVC   WORK1+2(2),6(R2)\n         L     R15,WORK1\n         CVD   R15,WORK1\n         MVC   WORK2,PAT2\n         ED    WORK2,WORK1+4\n         MVC   23(4,R1),WORK2+4\n         TM    SWD,SWD4+SWD5       CRJE?\n         BO    CRJEINFO            YES.\nCRBEINFO EQU   *\n         MVC   42(3,R1),=C'SEQ'\n         TM    9(R2),X'40'         SEQ/NOSEQ?\n         BO    *+10                SEQ.\n         MVC   40(2,R1),=C'NO'\n         MVC   52(4,R1),=C'SCAN'\n         TM    9(R2),X'80'         SCAN/NOSCAN?\n         BO    *+10\n         MVC   50(2,R1),=C'NO'\n         TM    8(R2),X'40'         FORTRAN FILE?\n         BZ    *+12                NO.\n         MVC   30(7,R1),=C'FORTRAN'\n         BR    R10\n         TM    8(R2),X'20'         OTHER FILE?\n         BZ    *+12                NO.\n         MVC   30(5,R1),=C'OTHER'\n         BR    R10\n         TM    8(R2),X'08'         FLIST FILE?\n         BZ    *+12                NO.\n         MVC   30(5,R1),=C'FLIST'\n         BR    R10\n         TM    SWD,SWD5            RITS?\n         BZ    *+20                YES\n         TM    8(R2),X'10'         OBJMOD FILE?\n         BZ    *+12                NO.\n         MVC   30(6,R1),=C'OBJMOD'\n         BR    R10\n         SPACE\nUNKNOWN  EQU   *\n         MVC   30(7,R1),=C'???????'\n         BR    R10\n         SPACE\nCRJEINFO EQU   *\n         CLI   DIRUSERL+1,11       CHECK USER LENGTH\n         BL    CRBEINFO            SHORT...HANDLE AS CRBE\n         LA    R1,30(R1)           POINT AT ATTR AREA OF LINE\n         CRJE  8,B'00100000','DATA,',5,CRJE20\n         CRJE  8,B'00010000','TEXT,',5,CRJE20\n         CRJE  8,B'00001000','DSLIST,',7,CRJE20\n         CRJE  8,B'00000100','CLIST,',6,CRJE20\n         CRJE  8,B'01000001','FORTH,',6,CRJE20\n         CRJE  8,B'01000000','FORTG,',6,CRJE20\n         CRJE  8,B'00000001','FORTE,',6,CRJE20\n         TM    8(R2),B'10000010'   PL1?\n         BNZ   CRJE15              YES.\n         MVC   0(7,R1),=C'???????' NO, UNKNOWN.\n         BR    R10                 QUIT.\n         SPACE\nCRJE15   EQU   *\n         MVC   0(7,R1),=C'PL1(  ,'\n         XR    R15,R15\n         IC    R15,13(R2)          PL1 SORMARGIN\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(2,R1),WORK1(8)\n         IC    R15,14(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  7(2,R1),WORK1(8)\n         LA    R1,10(R1)\n         CRJE  8,B'10000000','C48),',5,CRJE20\n         MVC   0(5,R1),=C'C60),'\n         LA    R1,5(R1)\nCRJE20   EQU   *\n         CRJE  9,B'10000000','SEQ,',4,CRJE21\n         MVC   0(6,R1),=C'NOSEQ,'\n         LA    R1,6(R1)\nCRJE21   EQU   *\n         TM    8(R2),B'11000011'   PL1 OR FORT?\n         BZ    CRJE22              NO...SKIP SCAN\n         CRJE  9,B'01000000','SCAN,',5,CRJE22\n         MVC   0(7,R1),=C'NOSCAN,'\n         LA    R1,7(R1)\nCRJE22   EQU   *\n         MVC   0(4,R1),=C'BLK='\n         LH    R15,20(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(4,R1),WORK1(8)\n         MVC   8(3,R1),=C',K='\n         MVC   11(3,R1),10(R2)\n         BR    R10\n         EJECT\n*---------------------------------------------------------------------*\n*        *** SUBROUTINES ****\n*---------------------------------------------------------------------*\n         SPACE\nVARMVC1  MVC   0(0,R1),0(R2)       FOR PRINTED OUTPUT\nVARMVC3  MVC   CARD(*-*),0(R2)     FOR PUNCHED OUTPUT\n         SPACE\nSAVERC   EQU   *\n         CH    R1,RETCODE          COMPARE TO CURRENT VALUE\n         BNHR  R14                 RETURN IF NOT HIGHER\n         STH   R1,RETCODE          REPLACE WITH NEW VALUE\n         BR    R14\n         SPACE\nTERMINAT EQU   *\n         LA    R13,SAVEAREA        TERMINATE PROCESSING\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BAL   R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         B     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\nPUTMSG   EQU   *\n         MVC   LINECNT1,LINEMAX    FORCE PAGE EJECT\nPUTMSGXX EQU   *\n         ST    R14,SAVE14          SETUP FOR MSG OUTPUT\n         PUT   SYSPRINT,LINE0\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         L     R14,SAVE14          AND FALL THRU TO CLEARBUF\n         BR    R14\n         SPACE\nPUNCHIT  EQU   *\n         PUT   SYSPUNCH,CARD\n         MVI   CARD,C' '\n         MVC   CARD+1(L'CARD-1),CARD\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        TERMINATE I/O:  CLOSE DCB AND FREE BUFFER POOL\n*---------------------------------------------------------------------*\n         SPACE\nTERMIO   EQU   *\n         TM    DCBOFLGS,OFLGS      DCB OPEN?\n         BZR   R10                 NO\n         CLOSE ((R8))              YES, CLOSE THE DCB\n         FREEPOOL  (R8)            AND FREE THE BUFFER POOL\n         BR    R10                 RETURN\n         SPACE\n*---------------------------------------------------------------------*\n*        STANDARD FILES DCB EXIT ROUTINES\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT1 EQU   *\n         LA    R5,3200             FOR SYSIN & SYSPUNCH\n         B     DCBEXITZ\n         SPACE\nDCBEXITA EQU   *\n         LA    R5,3509             FOR SYSPRINT\n         B     DCBEXITZ\n         SPACE\nDCBEXITB EQU   *\n         LH    R5,=Y(7260)         FOR SYSLIST\nDCBEXITZ EQU   *\n         LH    R4,DCBLRECL         GET LRECL\n         CH    R4,DCBBLKSI         BLKSIZE SPECIFIED?\n         BNH   DCBEXITY            YES.\n         STH   R5,DCBBLKSI         NO, USE DEFAULT.\nDCBEXITY EQU   *\n         XR    R2,R2               FORCE MULT BLKSIZE\n         LH    R3,DCBBLKSI\n         DR    R2,R4\n         MH    R3,DCBLRECL\n         STH   R3,DCBBLKSI\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        PDS DATA READ DCB EXIT ROUTINE\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT2 EQU   *\n         MVC   SAVBLKSI,DCBBLKSI   SAVE DCB PARMS\n         MVC   SAVLRECL,DCBLRECL\n         MVC   SAVRECFM,DCBRECFM\n         MVC   SAVBUFNO,DCBBUFNO\n         MVI   DCBBUFNO,0          BUFFERING HANDLED INTERNALLY\n         CLI   SAVBUFNO,0          IS BUFNO SPECIFIED?\n         BNER  R14                 YES.\n         MVI   SAVBUFNO,2          NO, USE DEFAULT.\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-FILE DETECTED ON SYSLIB\n*---------------------------------------------------------------------*\n         SPACE\nPDSEOF   BR    R10                 BETTER BE SET TO GOOD ADDR\n         SPACE\nSYNERR1  EQU   *\n         SYNADAF   ACSMETH=BPAM    PDS-DATA READ I/O ERROR\n         STM   R14,R12,SYNADSAV    SAVE REGS\n         LR    R2,R1               SAVE POINTER TO MESSAGE\n         BAL   R10,PRNT            --OUTPUT CURRENT LINE\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(78),50(R2)\n         BAL   R14,PUTMSG          REDO LASTLINE.\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(L'HEAD2MEM),HEAD2MEM\n         MVC   LINE0+L'LPDS02I+L'HEAD2MEM(8),NAME\n         BAL   R14,PUTMSG\n         LA    R1,8                SET THE RETURN CODE\n         BAL   R14,SAVERC\n         LM    R14,R12,SYNADSAV    RESTORE REGS\n         SYNADRLS\n         TM    SWB,SWB4            EROPT=TERM/ACC?\n         BZ    SYNERR2             FOR TERM.\n         BR    R14                 FOR ACC.\n         SPACE\nSYNERR2  EQU   *\n         LA    R13,SAVEAREA        TERMINATE PROCESSING\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BAL   R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         B     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\n*---------------------------------------------------------------------*\n*        HEX-BINARY TO HEX-CHARACTER CONVERSION ROUTINE\n*        UPON ENTRY, R0=LENGTH OF SOURCE, R1=A(SOURCE), R15=A(TARGET)\n*---------------------------------------------------------------------*\n         SPACE\nHEXCON   EQU   *\n         IC    R14,0(R1)           PROCESS FOUR LSB'S\n         N     R14,=F'15'\n         IC    R14,HEXTBL(R14)\n         STC   R14,1(R15)\n         IC    R14,0(R1)           PROCESS FOUR MSB'S\n         SRL   R14,4\n         IC    R14,HEXTBL(R14)\n         STC   R14,0(R15)\n         LA    R1,1(R1)\n         LA    R15,2(R15)\n         SH    R0,=H'1'            LOOP?\n         BP    HEXCON              YES.\n         BR    R10                 NO, RETURN.\n         SPACE\n*---------------------------------------------------------------------*\n*        OUTPUT A LINE TO SYSPRINT\n*---------------------------------------------------------------------*\n         SPACE\nPRNT     EQU   *\n         LA    R15,LINE1\n         BAL   R14,SETCC\n         LH    R15,LINECNT1\n         LA    R15,0(R15,R1)\n         STH   R15,LINECNT1\n         CH    R15,LINEMAX         AT LIMIT?\n         BNH   PRNTC               NO.\nPRNTA    EQU   *\n         LA    R15,5\n         STH   R15,LINECNT1\n         MVC   HEAD1PAG,PAGEPAT\n         LH    R15,PAGENUM1\n         LA    R15,1(R15)\n         STH   R15,PAGENUM1\n         CVD   R15,WORK1\n         ED    HEAD1PAG,WORK1+4\n         MVC   LINE0(121),HEAD1\n         BAL   R14,PUTMSGXX\n         MVI   LINE0,C'0'\n         TM    SWD,SWD3            INITIAL PAGE?\n         BZ    PRNTB               YES, SKIP CAPTIONS.\n         MVC   LINE0(L'CAPTIONS),CAPTIONS\n         TM    SWD,SWD7            RITS/CRBE?\n         BZ    *+14                NO.\n         MVC   LINE0+L'CAPTIONS(L'RITSCAP),RITSCAP\n         B     *+10\n         MVC   LINE0+L'CAPTIONS(L'USERCAP),USERCAP\n         TM    SWE,SWE1+SWE2       SPF STATS IN THIS PDS          .SPF.\n         BNO   *+10                NO.                            .SPF.\n         MVC   LINE0+L'CAPTIONS(L'SPFSCAP),SPFSCAP                .SPF.\nPRNTB    EQU   *\n         BAL   R14,PUTMSGXX\n         MVI   LINE1,C'0'\nPRNTC    EQU   *\n         MVC   LINE0,LINE1\n         BAL   R14,PUTMSGXX\n         MVI   LINE1,C' '\n         MVC   LINE1+1(L'LINE1-1),LINE1\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        'SYSLIST' OUTPUT S/R\n*---------------------------------------------------------------------*\n         SPACE\nLOUT     EQU   *\n         LA    R15,LINE2\n         BAL   R14,SETCC\n         TM    SWD,SWD6            TEST FORCE EJECT\n         BO    LOUTC               YES.\n         TM    SWA,SWA5            IS THIS 'EJECT' FORMAT\n         BZ    LOUTA               NO\n         AH    R1,LINECNT2         UPDATE LINECOUNT FOR EJECT FORMAT\n         STH   R1,LINECNT2\n         CH    R1,LINEMAX          AT BOTTOM OF PAGE?\n         BNH   LOUTE               NO\n         B     LOUTC               YES, DO PAGE EJECT AND HEADER-2\n         SPACE\nLOUTA    EQU   *\n         LH    R15,LINECNT2\n         LA    R15,0(R1,R15)\n         CLC   =C'0MEMBER=',LINE2  TEST FOR SPECIAL CASE\n         BNE   LOUTA1              NO.\n         LA    R15,2(,R15)         YES, EXTRA PADDING.\nLOUTA1   EQU   *\n         CH    R15,LINEMAX         TEST FOR LIMIT\n         BH    LOUTB               AT LIMIT\n         AH    R1,LINECNT2         UPDATE LINECNT\n         STH   R1,LINECNT2\n         B     LOUTE               AND OUTPUT THE LINE.\n         SPACE\nLOUTB    EQU   *\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         LH    R1,LINECNT2\nLOUTB1   EQU   *\n         CH    R1,LINEMAX\n         BNL   LOUTB2              PADDING DONE, GO OUTPUT HEADER\n         ST    R1,SAVELOUT\n         L     R1,ALISTDCB\n         PUT   (1),LINE0\n         L     R1,SAVELOUT\n         LA    R1,1(,R1)\n         B     LOUTB1\n         SPACE\nLOUTB2   EQU   *\n         MVI   HEAD2,C'0'\n         L     R1,ALISTDCB\n         PUT   (1),HEAD2\n         MVI   HEAD2,C'1'\nLOUTC    EQU   *\n         NI    SWD,255-SWD6        RESET SWITCH\n         LA    R15,3\n         TM    SWA,SWA5            IS THIS NOEJECT FORMAT?\n         BO    *+8                 NO, IT IS EJECT\n         LA    R15,2(,R15)         +2 FOR BOTTOM IN NOEJECT FORMAT\n         STH   R15,LINECNT2\n         MVC   HEAD2NAM,NAME\n         MVC   HEAD2PAG,PAGEPAT\n         LH    R15,PAGENUM2        UPDATE THE PAGE NUMBER\n         LA    R15,1(R15)\n         STH   R15,PAGENUM2\n         CVD   R15,WORK1\n         ED    HEAD2PAG,WORK1+4\n         L     R1,ALISTDCB\n         PUT   (1),HEAD2           OUTPUT THE PAGE HEADER\n         MVI   LINE2,C'-'\nLOUTE    EQU   *\n         L     R1,ALISTDCB\n         PUT   (1),LINE2           OUTPUT THE FORMATTED LINT\n         MVI   LINE2,C' '          THEN CLEAR THE USED LINE WORKAREA\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         BR    R10\n         SPACE\nSETCC    EQU   *\n         CC    4000,0(R15),1,SETCC9\n         CC    0,0(R15),+,SETCC9\n         CC    3,0(R15),-,SETCC9\n         CC    2,0(R15),0,SETCC9\n         LA    R1,1                FORCE 'DEFAULT'\n         MVI   0(R15),C' '\nSETCC9   EQU   *\n         BR    R14\n         SPACE\nGETLOW   EQU   *\n         L     R1,COR4\n         AR    R0,R1\n         C     R0,COR6\n         BNL   GETBAD\n         ST    R0,COR4\n         B     MAXUSED\n         SPACE\nGETHI    EQU   *\n         L     R1,COR6\n         SR    R1,R0\n         C     R1,COR4\n         BNH   GETBAD\n         ST    R1,COR6\n         L     R15,COR5\n         SR    R15,R1\n         C     R15,COR8\n         BNH   *+8\n         ST    R15,COR8\n         BR    R14\n         SPACE\nGETBASE  EQU   *\n         L     R1,COR3\n         AR    R0,R1\n         C     R0,COR5\n         BNL   GETBAD\n         ST    R0,COR3\nRESETLO  EQU   *\n         MVC   COR4,COR3\nMAXUSED  EQU   *\n         L     R15,COR4\n         SR    R15,R1\n         C     R15,COR7\n         BNH   *+8\n         ST    R15,COR7\n         BR    R14\n         SPACE\nRESETHI  EQU   *\n         MVC   COR6,COR5\n         BR    R14\n         SPACE\nGETBAD   EQU   *\n         MVC   LINE0(L'LPDS10I),LPDS10I\n         BAL   R14,PUTMSGXX\n         B     TERMINAT\n         EJECT\n*---------------------------------------------------------------------*\n*        *** STORAGE AREAS, CONSTANTS, ETC. ****\n*---------------------------------------------------------------------*\n         SPACE\nSAVEAREA DC    9D'0'               STD OS SAVE AREA\nWORK1    DC    1D'0'\nWORK2    DC    1D'0'\nSYNADSAV DC    8D'0'               TO SAVE REGS IN SYNAD EXIT\nCOR1     DC    A(10*1024,500*1024)  MIN/MAX SIZE FOR GETMAIN\nCOR2     DC    A(0,0)              RETURNED ADDR AND SIZE\nCOR3     DC    A(*-*)              BOTTOM OF AREA\nCOR4     DC    A(*-*)              START BOTTOM OF VARIABLE AREA\nCOR5     DC    A(*-*)              TOP OF AREA\nCOR6     DC    A(*-*)\nCOR7     DC    A(0)\nCOR8     DC    A(0)\nTIOT     DC    A(0)                POINTER TO TIOT\nBFRS     DC    2A(0)\nSAVELOUT DC    F'0'\nSAVE10   DC    A(0)                TO SAVE REGS 10\nSAVE14   DC    A(0)                TO SAVE REG 14\nBUFFER0  DC    A(0)                PDS BUFFER LENGTH\nBUFFER1  DC    A(0)                PDS BUFFER #1 ADDRESS\nBUFFER2  DC    A(0)                PDS BUFFER #2 ADDRESS\nTTRK     DC    F'0'                FOR FIND/POINT.\nECB      DC    F'0'\nIOB      DC    0F'0',X'42',X'000000',A(ECB)\nCSW      DC    XL8'0'\nACP      DC    A(*-*),A(SYSLIB)\n         DC    A(0),Y(0,0)\nMBB      DC    XL3'0'\nCCHHR    DC    XL5'0'\nRECORDS  DC    F'0'                COUNT OF TOTAL RECORDS IN LIB\nTOTALREC DC    F'0'                TOTAL NO. OF LRECL PROCESSED\nALCB     DC    A(*-*)\nALISTDCB DC    A(SYSLIST)\nNAMETBL1 DC    A(0)                POINTER TO DIRECTORY TABLE\nNAMETBL2 DC    A(0)                POINTER TO SELECTED NAMES\nCURRENT1 DC    2A(0)               PNTRS TO NAMETBL1 CURRENT\nCURRENT2 DC    2A(0)               PNTRS TO NAMETBL2 CURRENT\nDSCB     CAMLST SEARCH,DSNAME,VOLSER,WORKAREA\n         DC    0D'0'\nWORKAREA DC    XL160'00'           OBTAIN'S WORKAREA\nDSNAME   DC    CL44' '\nVOLSER   DC    CL6' '\nSWITCHES DC    XL5'00'             RUN SWITCHES AND FLAGS         .PRC.\n         ORG   *-5                                                .PRC.\nSWA      DS    X\nSWB      DS    X\nSWC      DS    X\nSWD      DS    X\nSWE      DS    X                                                  .PRC.\n         ORG   ,\nEXLST1   DC    0F'0',X'85',AL3(DCBEXIT1)     SYSIN & SYSPUNCH\nEXLSTA   DC    0F'0',X'85',AL3(DCBEXITA)     SYSPRINT\nEXLSTB   DC    0F'0',X'85',AL3(DCBEXITB)     SYSLIST\nEXLST2   DC    0F'0',X'05',AL3(DCBEXIT2)     FOR PDS DCB\nJFCBADRS DC    X'80',AL3(*-*)\nSAVBLKSI DC    H'0'\nSAVLRECL DC    H'0'\nSAVRECFM DC    X'00'\nSAVBUFNO DC    AL1(0)\nRETCODE  DC    H'0'                RETURN CODE\nPAGENUM1 DC    H'0'                CURRENT SYSPRINT PAGE NUMBER\nPAGENUM2 DC    H'0'                CURRENT SYSLIST  PAGE NUMBER\nLINECNT1 DC    H'0'                CURRENT SYSPRINT LINE NUMBER\nLINECNT2 DC    H'0'                CURRENT SYSLIST  LINE NUMBER\nLINEMAX  DC    H'0'                MAXIMUM LINE NUMBER\nMAXDIR   DC    H'0'\nMAXLIST  DC    H'0'\nMEMCNT   DC    H'0'\n         DC    0F'0'\nNAME2    DC    CL8' '              ALIAS NAME\nNAME     DC    CL8' '              MEMBER NAME\nDDPRINT  DC    CL8'&DDPRINT'       SYSPRINT\nDDLIST   DC    CL8'&DDLIST'        SYSLIST\nDDPUNCH  DC    CL8'&DDPUNCH'       SYSPUNCH\nDDLIB    DC    CL8'&DDLIB'         SYSLIB\nDDIN     DC    CL8'&DDIN'          SYSIN\nDDUPLOG  DC    CL8'&DDUPLOG'       SYSUPLOG                       .UPL.\nSWAX     DC    B'&A(1)&A(2)&A(3)&A(4)&A(5)&A(6)&A(7)&A(8)'\nSWBX     DC    B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'\nSWEX     DC    B'&E(1)&E(2)&E(3)&E(4)&E(5)&E(6)&E(7)&E(8)'        .PRC.\nUPDTE1   DC    C'./ ADD NAME='\nUPDTE2   DC    C'./ ADD SSI=00000000,NAME='\nUPDTESUB DC    C'><'                                              .PRC.\nPAT1     DC    X'4021204B202020'\nPAT2     DC    X'4020202020202120'\nJULIANS  DC    3F'0'\nCARD     DC    CL80' '\nUPCARD   DC    CL80' '                                            .UPL.\nLINE0    DC    CL133' '\nLINE1    DC    CL133' '\nLINE2    DC    CL133' '\n         DC     0D'0'\n         LTORG\nMONTHS1  DC    Y(31,28,31,30,31,30,31,31,30,31,30,31)\nMONTHS2  DC    Y(31,29,31,30,31,30,31,31,30,31,30,31)\nMONTHS3  DC    C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\n*        DC    C' **** &ID - LISTPDS &VERSION (&RELEASE) ****'   *.PRC.\n*        DC    C' **** GSFC - LISTPDS 7.3 (27MAR78) ****'         .PRC.\nHEAD1VER DC    C' ----------  LISTPDS  8.2  ----------- '         .PRC.\nHEXTBL   DC    CL16'0123456789ABCDEF'\nHEAD1    DC    C' '                SYSPRINT HEADING\nHEAD1DAT DC    CL8' '\nHEAD1TIM DC    CL9' '\nHEAD1C1  DC    CL7' '\nHEAD1VOL DC    CL6' '\nHEAD1C2  DC    CL6' '\nHEAD1DSN DC    CL44' ',C'   '\n         ORG   *-69                                               .PRC.\nHEDD1DSN DC    CL(4+44+8+6+7)' -- '      DSN -- VOL=XXXXXX        .PRC.\nHEAD1MEM DC    CL7' '  ... MEMBER= ON SYSLIST\nHEAD1NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         DC    CL10' ',C'PAGE'\nHEAD1PAG DC    CL8' '\nHEAD1R   DC    X'F14021204B4B4B20204021204B20204B2020'\nHEAD1C1R DC    CL7' - VOL='\nHEAD1C2R DC    CL6', DSN='\nHEAD2    DC    C'1'                SYSLIST HEADING\nHEAD2DAT DC    CL8' '\nHEAD2TIM DC    CL9' ',C' - VOL='\nHEAD2VOL DC    CL6' ',C', DSN='\nHEAD2DSN DC    CL44' ',C'   '\nHEAD2MEM DC    CL7'MEMBER='  ... MEMBER= ON SYSLIST\nXEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         ORG   *-84                                               .PRC.\n         DC    CL4' -- '                                          .PRC.\nHEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST                 .PRC.\nHEDD2DSN DC    CL72' -- '                                         .PRC.\n         DC    CL10' ',C'PAGE'\nHEAD2PAG DC    CL8' '\n*AGEPAT  DC    X'4020202020202120'                               *.PRC.\nPAGEPAT  DC    X'4020202020202020'                                .PRC.\nCAPTIONS DC    C'-     NAME       PAGE   RECORDS    T T R C    '\nRITSCAP  DC    C' CREATED  MODIFIED  ACCESSED  ATTRIBUTES'\nUSERCAP  DC    C'USER INFORMATION (HEX)'\n*PFSCAP  DC        C'VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MOD\n*                  ID'                                            .SPF.\n*                     01.00    YY/DDD    YY/DDD HH:MM  XXXX  XXXX  XXXX\n*                USERID                                           .SPF.\nSPFSCAP  DC        C'VER.MOD  CREATED      LAST MODIFIED    SIZE    INI+\n               T     MOD    ID    XTATS'                          .SPX.\n*                     01.00    YY/DDD    YY/DDD HH:MM:SS XXXXXXX XXXXXX\n*              X XXXXXXX  USERID                                  .SPX.\nLPDS01I  DC    C'0LPDS01I  DIRECTORY I/O ERROR - '\nLPDS02I  DC    C' LPDS02I  PDS DATA READ ERROR - '\nLPDS03I  DC    C'0LPDS03I  EXECUTION ABORTED.'\nLPDS04I  DC    C'0LPDS04I  OPEN ERROR FOR '\nLPDS05I  DC    C'0LPDS05I  WARNING--PARAMETER SPECIFICATION ERROR'\nLPDS06I  DC        C'0LPDS06I  INVALID DCB SPECIFICATIONS FOR &DDLIB DD+\n               .  '\nLPDS06I0 DC    C' NOT SUPPORTED.'\nLPDS06I1 DC    C'MACHINE CONTROL CHARACTERS'\nLPDS06I2 DC    C'VARIABLE SPANNED RECORDS'\nLPDS06I3 DC    C'TRACK OVERFLOW'\nLPDS06IA DC    C'BLKSIZE INVALID.'\nLPDS06IB DC    C'INVALID RECFM.'\nLPDS07I  DC        C'0LPDS07I WARNING--RITS/CRBE/CRJE PROCESSING DELETED\n               ,  LIBRARY DCB PARMS NOT COMPATABLE.'\nLPDS08I  DC    C'0LPDS08I  ERROR--PDS DIRECTORY NOT STANDARD FORMAT.'\nLPDS09I  DC    C'0LPDS09I  UNABLE TO OPEN ',CL8' '\n         DC    C'.  OPTION DELETED.'\nLPDS09IL EQU   *-LPDS09I\nLPDS10I  DC    C'0LPDS10I  WORKAREA EXCCEEDED .. RAISE REGION'\nLPDS11I  DC    C'0LPDS11I ONLY DSORG=PS OR DSORG=PO ARE VALID'\nMSG1     DC    C'0*** END OF LIBRARY *** '\nMSG1A    DC    X'402020202120'\nMSG1AX   DC    C' MEMBERS PROCESSED WITH A TOTAL OF'\n*SG1B    DC    X'4020202020202120',C' RECORDS'         7 DIGITS  *.SUM.\nMSG1B    DC    X'40202020202020202120',C' RECORDS'     9 DIGITS   .SUM.\nMSG1L    EQU   *-MSG1\nMSG2     DC    C'0*** END OF MEMBER *** '\n*SG2A    DC    X'402020202120',C' RECORDS PROCESSED   '      5   *.SUM.\nMSG2A    DC    X'4020202020202120',C' RECORDS PROCESSED   '  7    .SUM.\nMSG2L    EQU   *-MSG2\nMSG3     DC    C'****  MEMBER NOT FOUND IN LIBRARY'\nMSG4     DC    C'****  IS AN ALIAS FOR '\nMSG5     DC    C'****  ABOVE MEMBER IS AN ALIAS FOR '\nMSG6     DC    C'0SPECIFIED PARMS --'\nMSG7     DC    C'0WORKAREA SIZE: '\nMSG7A    DC    C'XXX',C'K'\nMSG7L1   EQU   *-MSG7\n         DC    C',  NEVER USED: '\nMSG7B    DC    C'XXX',C'K'\nMSG7L2   EQU   *-MSG7\nMSG8     DC    C'-LIBRARIES:'\nMSG9     DC    C'0*** END OF SEQUENTIAL DATASET *** '\n*SG9A    DC    X'402020202120',C' RECORDS PROCESSED   '        5 *.SUM.\nMSG9A    DC    X'40202020202020202120',C' RECORDS PROCESSED   ' 9 .SUM.\nMSG9L    EQU   *-MSG9\nENDMSG0  DC    C'0*** END OF RUN ***   '\nENDMSG1  DC    C' LIBRARIES PROCESSED WITH A TOTAL OF'\n*NDMSG1A DC    X'4020202020202120',C' RECORDS.'      7 DIGITS    *.SUM.\nENDMSG1A DC    X'40202020202020202120',C' RECORDS.'  9 DIGITS     .SUM.\nENDMSG1L EQU   *-ENDMSG1\nENDMSG2  DC    C' *** OPTIONS IN EFFECT *** '\nENDMSG3  DC    C'SPECIFIED-MEMBERS'\n         SPACE\n*---------------------------------------------------------------------*\n*        DCB'S FOR LISTPDS\n*---------------------------------------------------------------------*\n         SPACE\n         PRINT NOGEN\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPRINT,                +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTA\nSYSLIST  DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDLIST,                 +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTB\nSYSPUNCH DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPUNCH,                +++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\nSYSLIB   DCB   DSORG=PO,MACRF=(R),DDNAME=&DDLIB,EODAD=PDSEOF,      +++++\n               SYNAD=SYNERR1,NCP=1,EXLST=EXLST2\nSYSIN    DCB   DSORG=PS,MACRF=(R),DDNAME=&DDIN,EODAD=BLDSEL90,    ++++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\nSYSUPLOG DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDUPLOG,                +++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n         DCBD  DSORG=(PS,PO),DEVD=(DA)\n         EJECT\nLISTPDS  CSECT ,\n         SPACE\n*---------------------------------------------------------------------*\n*         PARAMETER ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\n         USING PA,R6\nPA       L     R2,0(R4)\n         LH    R1,0(R2)\n         LA    R2,2(R2)            BEGINNING OF STRING\n         LTR   R3,R1               ANY PARMS SEPECIFIED?\n         BZ    PGMINITA            NO PARMS...CONTINUE INIT\n         MVC   LINE1(L'MSG6),MSG6\n         BAL   R10,PRNT\n         LA    R1,LINE1+10\n         LR    R15,R3\n         CH    R15,=H'110'\n         BL    *+8\n         LA    R15,110\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         BAL   R10,PRNT\n         LA    R3,0(R2,R3)         END OF STRING\nPALOOP   CR    R2,R3               END OF PARMS?\n         BNL   PGMINITA            YES, GOTO COMPLETE INIT\n         CLI   0(R2),C','          NULL PARM?\n         BE    PAEND               YES.\n         CLC   =C'LINECNT=',0(R2)\n         BE    PA15\n         CLC   =C'EROPT=',0(R2)\n         BE    PA22\n         CLC   =C'MAXLIST=',0(R2)\n         BE    PA10\n         PACL  LISTDIR,7,OI,SWA,SWA2,NI,SWA,255-SWA0\n         PACL  DEBUG,5,OI,SWB,SWB0\n         PACL  NODEBUG,7,NI,SWB,255-SWB0\n         PACL  LIST,4,OI,SWA,SWA0\n         PACL  NOLIST,6,NI,SWA,255-SWA0\n         PACL  DECK,4,OI,SWA,SWA1\n         PACL  NODECK,6,NI,SWA,255-SWA1\n         PACL  UPDTE,5,OI,SWA,SWA3\n         PACL  NOUPDTE,7,NI,SWA,255-SWA3\n         PACL  SSI,3,OI,SWA,SWA6\n         PACL  NOSSI,5,NI,SWA,255-SWA6\n         PACL  RITS,4,NI,SWD,255-SWD5,OI,SWD,SWD4\n         PACL  CRBE,4,NI,SWD,255-SWD4,OI,SWD,SWD5\n         PACL  CRJE,4,OI,SWD,SWD4+SWD5\n         PACL  TRUNC,5,OI,SWA,SWA7\n         PACL  NOTRUNC,7,NI,SWA,255-SWA7\n         PACL  HEXOUT,6,OI,SWB,SWB1\n         PACL  NOHEXOUT,8,NI,SWB,255-SWB1\n         PACL  NUM,3,OI,SWB,SWB3\n         PACL  NONUM,5,NI,SWB,255-SWB3\n         PACL  EJECT,5,OI,SWA,SWA5\n         PACL  NOEJECT,7,NI,SWA,255-SWA5\n         PACL  SELECT,6,NI,SWD,255-SWD2\n         PACL  EXCLUDE,7,OI,SWD,SWD2\n         PACL  SEL,3,OI,SWE,SWE0                                  .SEL.\n         PACL  NOSEL,5,NI,SWE,255-SWE0                            .SEL.\n         PACL  SPF,3,OI,SWE,SWE1                                  .SPF.\n         PACL  NOSPF,5,NI,SWE,255-SWE1                            .SPF.\n         OI    SWC,SWC0              FLAG BAD KEYWORK\nPABAD    CLI   0(R2),C','            FIND NEXT KEYWORK\n         BE    PALOOP\n         LA    R2,1(,R2)\n         CR    R2,R3\n         BL    PABAD\nPAERROR  OI    SWC,SWC0            FLAG PARM ERROR\n         B     PGMINITA            AND GOTO COMPLETE INIT.\nPAEND    CLI   0(R2),C','          COMMA?\n         BNE   PALOOP              NO, LOOP.\n         LA    R2,1(R2)            YES, BUMP OVER IT.\n         B     PALOOP\nPA10     LA    R2,8(,R2)\n         XR    R15,R15\n         CR    R2,R3\n         BNL   PAERROR\nPA10A    CR    R2,R3\n         BNL   PA10B\n         CLI   0(R2),C','\n         BE    PA10B\n         CLI   0(R2),C'0'\n         BL    PAERROR\n         CLI   0(R2),C'9'\n         BH    PAERROR\n         MH    R15,=H'10'\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,=F'15'           AND MASK OFF HIGH BITS\n         LA    R15,0(R1,R15)\n         LA    R2,1(R2)\n         B     PA10A\nPA10B    N     R15,=F'32767'\n         STH   R15,MAXLIST\n         OI    SWA,SWA4            FLAG MAXLIST= SPECIFIED.\n         B     PAEND\nPA15     LA    R2,8(R2)            LINECNT\n         XR    R15,R15\n         CR    R2,R3\n         BNL   PAERROR\nPA15A    CR    R2,R3\n         BNL   PA15B\n         CLI   0(R2),C','\n         BE    PA15B\n         CLI   0(R2),C'0'\n         BL    PAERROR\n         CLI   0(R2),C'9'\n         BH    PAERROR\n         MH    R15,=H'10'\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,=F'15'           AND MASK OFF HIGH BITS\n         LA    R15,0(R1,R15)\n         LA    R2,1(R2)\n         B     PA15A\nPA15B    N     R15,=F'32767'\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         B     PAEND\nPA22     LA    R2,6(R2)            EROPT=\n         PACL  TERM,4,NI,SWB,255-SWB3\n         PACL  ACC,3,OI,SWB,SWB4\n         B     PAERROR\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE RUN OPTIONS\n*---------------------------------------------------------------------*\n         SPACE\n         USING PRMLST,R6\nPRMLST   TM    SWC,SWC0            PARM ERROR?\n         BZ    PRMLST0         ... NO\n         MVC   LINE1(L'LPDS05I),LPDS05I\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\nPRMLST0  MVI   LINE1,C'-'\n         BAL   R10,PRMLSTXZ\n         P1    SWB,SWB0,DEBUG,5\n         P1    SWA,SWA2,LISTDIR,7\n         TM    SWD,SWD4+SWD5          RITS/CRBE/CRJE\n         BZ    PRMLST20               NO\n         BO    PRMLST19               YES, CRJE\n         P1    SWD,SWD4,RITS,4\n         P1    SWD,SWD5,CRBE,4\n         B     PRMLST20\nPRMLST19 P1    SWD,SWD4+SWD5,CRJE,4\nPRMLST20 TM    SWA,SWA2               LISTDIR?\n         BO    PRMLST50            YES\n         P2    SWA,SWA0,LIST,4\n         P2    SWB,SWB3,NUM,3\n         P2    SWA,SWA5,EJECT,5\n         P2    SWA,SWA7,TRUNC,5\n         P2    SWB,SWB1,HEXOUT,6\n         P2    SWA,SWA1,DECK,4\n         P2    SWA,SWA3,UPDTE,5\n         P2    SWA,SWA6,SSI,3\n         P2    SWE,SWE1,SPF,3                                    JDM1\nPRMLST50 MVC   0(8,R2),=C'LINECNT='\n         LH    R1,LINEMAX\n         LA    R1,1(,R1)                                          .LCT.\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CH    R1,=H'999'\n         BNH   *+14\n         UNPK  8(5,R2),WORK1\n         LA    R2,2(,R2)\n         LA    R2,11(,R2)\n         BAL   R10,PRMLSTXX\n         TM    SWA,SWA4\n         BZ    PRMLST55\n         MVC   0(8,R2),=C'MAXLIST='\n         LH    R1,MAXLIST\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CH    R1,=H'999'\n         BNH   *+14\n         UNPK  8(5,R2),WORK1\n         LA    R2,2(,R2)\n         LA    R2,11(,R2)\n         BAL   R10,PRMLSTXX\nPRMLST55 MVC   0(6,R2),=C'EROPT='\n         MVC   6(3,R2),=C'ACC'\n         TM    SWB,SWB4\n         BZ    *+14\n         MVC   6(4,R2),=C'TERM'\n         LA    R2,1(,R2)\n         LA    R2,9(,R2)\n         TM    SWD,SWD0            SELECTED MEMBERS?\n         BZ    PRMLST60\n         BAL   R10,PRMLSTXX\n         P1    SWD,SWD2,SELECT,6,BR=BO\n         P1    SWD,SWD2,EXCLUDE,7\n         MVC   0(L'ENDMSG3,R2),ENDMSG3\n         LA    R2,L'ENDMSG3(,R2)\nPRMLST60 BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE LCB INFO\n*---------------------------------------------------------------------*\n         SPACE\n         MVC   LINE1(L'MSG8),MSG8\n         BAL   R10,PRNT\n         MVI   LINE1,C'0'\n         XR    R3,R3         INIT LIB COUNT\n         L     R2,ALCB\n         USING LCB,R2\nLCBLST00 CLI   LCB,X'FF'\n         BE    LCBLST90\n         LA    R3,1(,R3)   INCR LIB COUNT\n         CVD   R3,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  LINE1+5(2),WORK1\n         MVI   LINE1+8,C'-'\n*        MVC   LINE1+10(4),=C'VOL='                              *.PRC.\n*        MVC   LINE1+14(6),LCBVOLNO                              *.PRC.\n*        MVC   LINE1+22(4),=C'DSN='                              *.PRC.\n*        MVC   LINE1+26(44),LCBDSNAM                             *.PRC.\n         MVC   LINE1+10(44),LCBDSNAM                              .PRC.\n         MVC   LINE1+58(6),LCBVOLNO                               .PRC.\n         MVC   LINE1+72(8),=C'DSORG=??'\n         TM    LCBDS1DS,B'10000000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'IS'\n         TM    LCBDS1DS,B'01000000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'PS'\n         TM    LCBDS1DS,B'00100000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'DA'\n         TM    LCBDS1DS,B'00000010'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'PO'\n         MVC   LINE1+82(7),=C'RECFM=?'\n         TM    LCBDS1RF,B'11000000'  FILL IN THE RECFM\n         BO    LCBLST32\n         BZ    LCBLST33\n         TM    LCBDS1RF,B'01000000'   V?\n         BO    LCBLST31               YES\n         MVI   LINE1+88,C'F'\n         B     LCBLST33\nLCBLST31 MVI   LINE1+88,C'V'\n         B     LCBLST33\nLCBLST32 MVI   LINE1+88,C'U'\nLCBLST33 TM    LCBDS1RF,B'00010000'\n         BZ    *+8\n         MVI   LINE1+89,C'B'\n         TM    LCBDS1RF,B'00001000'\n         BZ    *+8\n         MVI   LINE1+90,C'S'\n         TM    LCBDS1RF,B'00100000'\n         BZ    *+8\n         MVI   LINE1+90,C'T'\n         TM    LCBDS1RF,B'00000100'\n         BZ    *+8\n         MVI   LINE1+91,C'A'\n         TM    LCBDS1RF,B'00000010'\n         BZ    *+8\n         MVI   LINE1+91,C'M'\nLCBLST50 MVC   LINE1+94(6),=C'LRECL='\n         LH    R1,LCBDS1LR\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+100(5),WORK1                                *.PRC.\n         LA    R1,LINE1+100                                       .PRC.\n         MVC   0(7,R1),=X'40202020212040'                         .PRC.\n         ED    0(6,R1),WORK1+5                                    .PRC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         BNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         B     *-14                BACK TO CLI                    .PRC.\n         MVC   LINE1+107(8),=C'BLKSIZE='\n         LH    R1,LCBDS1BL\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+115(5),WORK1                                *.PRC.\n         LA    R1,LINE1+115                                       .PRC.\n         MVC   0(7,R1),=X'40202020212040'                         .PRC.\n         ED    0(6,R1),WORK1+5                                    .PRC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         BNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         B     *-14                BACK TO CLI                    .PRC.\n         BAL   R10,PRNT\n         LA    R2,LCBEND\n         B     LCBLST00\n         DROP  R2\nLCBLST90 EQU   *\n*\n         OI    SWD,SWD3            TURN OFF FIRST TIME SW\n         MVC   HEAD1C1,HEAD1C1R\n         MVC   HEAD1C2,HEAD1C2R\n         B     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        *** INITIALIZATION COMPLETE ****\n*---------------------------------------------------------------------*\n         SPACE\nPRMLSTXX CR    R2,R3\n         BNL   PRMLSTXY\n         MVI   0(R2),C','\n         LA    R2,1(,R2)\n         BR    R10\nPRMLSTXY ST    R10,SAVE10\n         BAL   R10,PRNT\n         L     R10,SAVE10\nPRMLSTXZ MVC   LINE1+3(L'ENDMSG2),ENDMSG2\n         LA    R2,L'ENDMSG2+LINE1+4\n         LA    R3,LINE1+70\n         BR    R10\n*\n         DC    0D'0'\n         LTORG\n         EJECT\n*---------------------------------------------------------------------*\n*        DEFINE THE DSECT'S HERE\n*---------------------------------------------------------------------*\n         SPACE\nLCB      DSECT ,\nLCBDSNAM DC    CL44' '             LIBRARY'S DATASET NAME\nLCBVOLNO DC    CL6' '              LIBRARY'S VOLUME SERIAL\nLCBJFCDS DC    X'00'               JFCB DSORG\nLCBJFCRF DC    X'00'               JFCB RECFM\nLCBJFCLR DC    H'0'                JFCB LRECL\nLCBJFCBL DC    H'0'                JFCB BLKSIZE\nLCBDS1DS DC    X'00'               DSCB DSORG\nLCBDS1RF DC    X'00'               DSCB RECFM\nLCBDS1LR DC    H'0'                DSCB LRECL\nLCBDS1BL DC    H'0'                DSCB BLKSIZE\nLCBDIR   DC    H'0'                MAX DIR-BLKSIZE/TRK ON THIS VOL\nLCBEND   DC    0F'0'\nLCBLEN   EQU   LCBEND-LCB\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nDIR      DSECT\nDIRCRDCT DC    XL4'0'              RECORD COUNT\nDIRPG1   DC    H'0'                PAGE NUMBER\nDIRFLAGS DC    B'00000000'         FLAGS\n         DC    X'00'               NOT USED\nDIRUSERL DC    H'0'                LENGTH OF USER DATA\nDIRNAME  DC    CL8' '              MEMBER NAME\nDIRTTR   DC    XL4'0'\nDIRUSER  EQU   *\nDIREND   EQU   *\nDIRLEN   EQU   *-DIR    ... PLUS LEN OF 'USER DATA'\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nNAMTBL   DSECT\nNAMTBL1  DC    CL8' '\nNAMTBL2  DC    A(*-*)\nNAMTBL3  DC    F'0'\nNAMTBL4  DC    H'0'\nNAMTBL5  DC    H'0'\nNAMTBLXX EQU   *-NAMTBL\n         SPACE\n         DC    0D'0'\n         END   LISTPDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTPDS3": {"ttr": 7178, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x02\\x00\\x933\\x0f\\x01\\x17\\x03/\\x14G\\x0c9\\x0c$\\x00\\x00\\xf8\\xc3\\xc8\\xc1\\xd9\\xc9\\xc4@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1993-11-26T00:00:00", "modifydate": "2017-02-01T14:47:02", "lines": 3129, "newlines": 3108, "modlines": 0, "user": "8CHARID"}, "text": "LPDS TITLE 'LISTPDS  --  LIST PARTITIONED DATA SET UTILITY PROGRAM'\n*\n*  THIS VERSION DOES NOT PUT A DATE-TIME STAMP INTO A GENERATED\n*  ./ ADD NAME=MEMBER   IEBUPDTE CARD, WHEN NO ISPF STATISTICS\n*  ARE PRESENT FOR THE MEMBER.  THE REASON IS THAT IF YOU CUT\n*  TWO CBT TAPES AT DIFFERENT TIMES, THEN THEY WILL BE DIFFERENT\n*  IN AN INSIGNIFICANT WAY, AND THEY CANNOT BE PROPERLY COMPARED\n*  TO EACH OTHER, EVEN IF IDENTICAL DATA WAS USED TO CREATE BOTH.\n*\n*---------------------------------------------------------------------*\n*\n* TITLE - LIST PARTITIONED DATA SET UTILITY PROGRAM\n*\n* NAME - LISTPDS,  ENTRY POINT - LISTPDS\n*\n* STATUS - VERSION 7.3,  UPDATED 27MAR78\n*          VERSION 7.3A  UPDATED 04DEC81\n*                        AIR FORCE DATA SERVICES CENTER, THE PENTAGON.\n*                        BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*          VERSION 8.0   UPDATED 01JAN94\n*                        FINANCIAL MANAGEMENT SERVICE, US TREASURY\n*                        JIM MARSHALL, CAPT, USAF-RET\n*          VERSION 8.1   UPDATED 16OCT15                          .UPL.\n*          VERSION 8.2   UPDATED 24JUN16                  .SPX.   .SEC.\n*          VERSION 8.3   UPDATED 31JAN17                          .ID8.\n*\n* DEVELOPED BY . . .\n*       GENE CZARCINSKI\n*       NASA/GODDARD SPACE FLIGHT CENTER\n*       GREENBELT, MARYLAND\n*\n* FUNCTION/OPERATION - \"LISTPDS\" IS AN OS/360 DATA SET UTILITY\n*       PROGRAM FOR LISTING AND/OR PUNCHING SOURCE/OBJECT LIBRARIES\n*       (PARTITIONED DATA SETS).  ALL MEMBERS PROCESSED BY LISTPDS\n*       ARE ALWAYS OUTPUTTED IN COLLATING SEQUENCE (EXCEPT WHEN\n*       SELECTED MEMBERS ARE PROCESSED).  LISTPDS GENERATES\n*       TWO FORMATTED PRINTOUTS -\n*          1. (ON SYSPRINT) A FORMATTED LISTING OF THE PDS'S\n*             DIRECTORY TOGETHER WITH THE PAGE NUMBERS OF THE\n*             OUTPUT LISTING (FOR EACH MEMBER).\n*          2. (ON SYSLIST) A FORMATTED PRINTOUT OF THE CONTENTS\n*             OF EACH MEMBER PROCESSED.\n*\n*---------------------------------------------------------------------*\n*\n* ATTRIBUTES - ENABLED, SERIALLY REUSABLE, BLOCK LOADED,\n*       SINGLE LOAD MODULE, NO OVERLAY.\n*\n* ACCESS METHODS - QSAM LOCATE MODE (RECFM=FB) USED FOR\n*       SYSPRINT, SYSLIST, SYSPUNCH;  BSAM/BPAM USED FOR\n*       PDS I/O (SYSLIB); BSAM IS USED FOR SYSIN;\n*       AND EXCP IS USED FOR PDS-DIRECTORY READING.\n*\n*\n* NOTES -\n*       1. VERSION 6 OF \"LISTPDS\" IS A MAJOR REDESIGN OF THE\n*          PROGRAM AND REPLACES ALL PREVIOUS VERSIONS.\n*       2. ASIDE FROM THE EDIT (ED) DECIMAL INSTRUCTION, \"LISTPDS\"\n*          IS CODED ENTIRELY WITH STANDARD INSTRUCTION SET (360)\n*          INSTRUCTIONS.\n*       3. \"LISTPDS\" DOES ITS OWN DIRECTORY PROCESSING AND ALWAYS\n*          READS THE ENTIRE DIRECTORY (USING BSAM).\n*       4. DEFAULT SWITCH AND DDNAMES CAN BE CHANGED BY MODIFYING\n*          THE ASSEMBLY VARIABLES.\n*       5. THE STANDARD TRANSLATE TABLES ARE SETUP FOR 'QN'\n*          PRINT CHAIN OUTPUT.\n*       6. ALL PRINTED OUTPUT USES ASA CONTROL CHARACTERS.\n*       7. TO BE PROPERLY PROCESSED BY LISTPDS, ALL PDS\n*          DIRECTORIES *MUST* BE IN STANDARD FORMAT: THE LAST\n*          ENTRY IN EACH DIRECTORY IS HEX F'S.\n*       8. CODE HAS BEEN ADDED TO HANDLE PROCESSING OF CONCATON-\n*          ATED SYSLIB DD STATEMENTS.\n*       9. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED LAYOUT\n*          OF THE SYSLIB JFCB'S, DSCB'S AND THE \"CAMLST\" GENERATED\n*          CONTROL BLOCK FOR READING THE DSCB.\n*      10. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED OPERATION\n*          OF THE BPAM READ & FIND (C) ROUTINES FOR DIRECTORY AND\n*          MEMBER READING.\n*      11. DEFAULT BLKSIZES HAVE BEEN CHANGED FROM UNBLOCKED\n*          TO BLOCKED --\n*                 SYSPRINT - 3509\n*                 SYSLIST  - 7260\n*                 SYSPUNCH - 3200\n*                 SYSIN    - 3200\n*      12. THE DEFAULT BUFNO IS NOW SET TO 2.\n*      13. THE DEFAULT MAX LINES/PAGE IS NOW SET TO 60.\n*\n* VERSION 7.0 --\n*      14. DEFAULT MAX LINES/PAGE NOW SET TO 84.\n*      15. STAE PROCESSING HAS BEEN REMOVED.\n*      16. ALL VCONS HAVE BEEN CHANGED TO ADCONS.\n*      17. MAX OUTPUT LINE LENGTH CHANGED TO 116 CHARACTERS.\n*      18. PUNCHING ONLY OUTPUTS UP TO THE FIRST 80 BYTES OF\n*          EACH LOGICAL RECORD.\n*      19. THE XLATE (TRANSLATE) FUNCTION HAS BEEN DELETED.\n*      20. ABEND60A FIXED (BUG IN 'CLEARBUF')\n*      21. EJECT/NOEJECT FUNCTION IMPLEMENTED.\n*\n* VERSION 7.1 --\n*      22. REWORK CODE TO MAKE IT ONE CSECT\n*      23. FIX 7.0 BUG IN 'MONTHS'\n*      24. REFORMAT SOURCE CODE TO MAKE MORE READABLE.\n*      25. CHANGE PARM-ANAL TO SKIP OVER BAD KEYWORDS\n*      26. PAGE EJECT SYSLIST BETWEEN LIBRARIES\n*      27. TEST FOR 'NEAR BOTTOM' AND EJECT SYSLIST IF SO\n*      28. PUT TITLE AT TOP AND BOTTOM OF SYSLIST IF IN EJECT MODE.\n*      29. CREATE SYSPRINT HEADER PAGE AND TRAILER PAGE.\n*      30. REWORK LIB-FILE INIT CODE TO USE THE 'LCB' AREAS AND\n*          COUNT THE NUMBER OF DIR BLOCKS PER TRACK.\n*      31. REWORK DIR READ TO USE EXCP I/O.\n*      32. DEFAULT MAXLINES CHANGED TO 80.\n*      33. ADD MAXLIST, SELECT, AND EXCLUDE OPTIONS.\n*      34. CHANGE PRINT, LIST AND PUNCH TO USE QSAM MOVE I/O.\n*      35. REWORK CORE MANAGEMENT TO ISSUE ONE LARGE GETMAIN\n*          AND DO SUBALLOCATION FROM THAT AREA.\n* VERSION 7.2 --\n*      36. MAKE SELECT/EXCLUDE WORK FOR SPECIFIED MEMBERS\n*      37. REWORK LOUT SO THAT ADCON IS USED FOR LIST DCB ADDR\n*      38. REWORK LOUT SO THAT BOTTOM OF PAGE PROCESSING FOR\n*          NOEJECT MODE WORKS PROPERLY\n*      39. CHECK FOR RECFM=V/VB AND USE SECONDARY DCB IF SO\n*          TO PERFORM PROPER I/O (NO I/O ERRORS).\n*      40. CREATE S/R TO FORMAT & PRINT SYSPRINT DATA FOR\n*          FOR MEMBER SO IT CAN BE USED AFTER A MEMBER IS\n*          PROCESSED (SAVE INFO IN THE 'DIR' AREA).\n*      41. REORGANIZE CODE TO PROVIDE MORE BASE REGISTER\n*          ADDRESSABILITY BY MOVING SOME OF THE INITIALIZATION\n*          CODE INTO SEPARATELY ADDRESSABLE SUBROUTINES.\n*      42. ADD THE CAPABILITY TO LIST/PUNCH SEQUENTIAL DATASETS\n*          WHICH ARE POINTED TO BY THE SYSLIB CONCATENATION.\n*      43. CODE ADDED TO RE-INIT DCB IF RECFM CHANGES\n*          SO THAT THE DATASET WILL BE PROCESSED CORRECTLY\n*          WITH NO 'I/O ERRORS'.\n*      44. REWORK CODE SO THAT A SPECIAL END MSG WILL BE\n*          ISSUED IF PROCESSING A SEQUENTIAL DATASET.\n*      45. COUNTERS ADDED FOR PDS AND SDS PROCESSING.\n*      46. MODIFY DATASET I/O ERROR HANDLING TO LIST\n*          THE CONCATENATION SEQUENCE NUMBER SO THAT\n*          THE DATASET CAN BE IDENTIFIED AND THEN\n*          GO LIST THE PROCESSED DIRECTORY ENTRIES IF\n*          A PDS; PRODUCE AN EXTRA I/O ERROR MSG AT END\n*          OF DIRECTORY LISTING.\n*      47. CHANGE THE CODE TO ALLOCATE THE DATASET READ BUFFERS\n*          BASED ON THE SIZE OF EACH DATASET BEING PROCESSED.\n*\n* VERSION 7.3 --\n*      48. FIX RITSINFO/CRJEINFO SO DIRECTORY ENTRY IS LISTED\n*          CORRECTLY FOR RITS/CRBE/CRJE LIBRARIES.\n*      49. FIX BUG WHICH CAUSES ABEND0C0 WHEN \"EXCLUDE\" IS\n*          SPECIFIED FOR SELECTED MEMBERS.\n*\n* VERSION 7.3A -- UPDATES AT AIR FORCE DATA SERVICES CENTER, PENTAGON\n*          04 DEC 81, BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*      50. FOR DECK AND UPDTE, PUT SSI= KEYWORD AFTER THE MEMBER NAME\n*          ON THE ./ ADD STATEMENT, INSTEAD OF BEFORE.\n*      51. IF UPDTE IS SPECIFIED AND A MEMBER CONTAINS IEBUPDTE\n*          STATEMENTS, THE './' STATEMENTS WITHIN THE MEMBER WILL\n*          BE PUNCHED WITH THE './' CHANGED TO '><'. SEE NOTE 54 TOO.\n*      52. GET TIOT ADDRESS DIRECTLY INSTEAD OF GOING THRU EXTRACT SVC.\n*      53. ADD NEW PARM OPTION 'NOSEL' TO IGNORE SYSIN,\n*          SO WE CAN KEEP SYSIN ALLOCATED TO THE TERMINAL UNDER TSO.\n*      54. SPF (AN IBM PROGRAM PRODUCT) STATISTICS IN A PDS DIRECTORY\n*          WILL BE FORMATTED ON SYSPRINT AND IN THE COMMENTS AREA\n*          OF ./ ADD STATEMENTS.\n*          NOTE: WE HAVE A PROGRAM THAT WILL RE-LOAD THE IEBUPDTE DECK\n*          TO A PDS AND RESTORE THE SPF STATS FROM THE ./ ADD CARD.\n*          (AND RESTORE '><' TO './' --- SEE NOTE 51).\n*      55. IF 'NOSPF' IS SPECIFIED, OR IF NO MEMBERS IN A PDS CONTAIN\n*          SPF STATISTICS, THEN THE OLD HEX FORMATTING WILL BE USED.\n*      56. DEFAULT MAXLINES CHANGED TO 60.\n*      57. JUST PRINT HH.MM OF TIME IN HEADING, NOT HH.MM.SS\n*      58. INSTEAD OF VOL=VVVVVV, DSN=DDDDDDDDDDDDD    IN HEADINGS,\n*               PRINT - DDDDDDDDD - VOL=VVVVVV\n*      59. SUPPRESS ZEROS IN PAGE INDEX OF LISTDIR, SO PAGE 0 WILL\n*          BE PAGE BLANK.\n*      60. SUPPRESS ZEROS IN LRECL, BLKSIZE.  LEFT JUSTIFY.\n*      61. DEFAULT EJECT.\n*      62. REDUCE LINEMAX BY 1 INTERNALLY, BECAUSE WE KEEP GETTING\n*          ONE MORE LINE PER PAGE THAN THE SPECIFIED LINECNT.     .LCT.\n*      63. HEADINGS CHANGED. MEMBER NAME ON LEFT.                 .LCT.\n*\n* VERSION 8.0 --\n*      64. ADDED INTO OPTIONS LIST SPF/NOSPF.\n*      65. ADDED DSECTS WHERE EVER POSSIBLE IN PREPARATION FOR MVS/ESA.\n*      66. MADE THE CODE MORE READABLE FOR FUTURE GENERATIONS.\n*\n* VERSION 8.1 --                                                  .UPL.\n*      67. ADD SYSUPLOG FILE SHOWING ALL PLACES WHERE THE         .UPL.\n*          UPDTESUB '><' BYTES ALREADY EXIST, AND SHOULD NOT      .UPL.\n*          BE ERRONEOUSLY \"CHANGED BACK\" TO ./ BY PDSLOAD.        .UPL.\n*          COPIED FIRST 62 BYTES OF RECORD INTO CARD+17, SO       .SBG.\n*          WE CAN SEE WHAT IS GOING ON.                           .SBG.\n*\n* VERSION 8.2 -- JUNE 24 2016                                     .SEC.\n*      68. SUPPORT SECONDS IN ISPF STATS, ./ADD COLUMNS 70-71     .SEC.\n*      69. SUPPORT EXTENDED ISPF STATS, ./ ADD COLUMNS 73-80      .SPX.\n*      70. SUPPORT RECORD COUNTS > 99999 AND TOTALS > 9999999     .SUM.\n*\n* VERSION 8.3 -- JANUARY 31 2017                                  .SEC.\n*      71. SUPPORT 8TH CHARACTER IN USERID IN ISPF STATS COL 69   .ID8.\n*\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        LOCAL MACRO DEFINITIONS\n*---------------------------------------------------------------------*\n         MACRO\n&N       CRJE      &A,&B,&C,&D,&E\n&N       TM        &A.(R2),&B\n         BNO       X&SYSNDX\n         MVC       0(&D,R1),=C&C\n         LA        R1,&D.(R1)\n         B         &E\nX&SYSNDX EQU       *\n         MEND\n*\n         MACRO\n&A       PACL  &B,&C,&D,&E,&F,&G,&H,&J\n&A       CLC   =C'&B',0(R2)\n         BNE   Z&SYSNDX\n         LA    R2,&C.(,R2)\n         &D    &E,&F\n         AIF   (T'&G EQ 'O').A\n         &G    &H,&J\n.A       B     PAEND\nZ&SYSNDX EQU   *\n         MEND\n*\n         MACRO\n&A       P1    &B,&C,&D,&E,&BR=BZ\n&A       TM    &B,&C\n         &BR   X&SYSNDX\n         MVC   0(&E.,R2),=C'&D'\n         LA    R2,&E.(,R2)\n         BAL   R10,PRMLSTXX\nX&SYSNDX EQU   *\n         MEND\n*\n         MACRO\n&A       P2    &B,&C,&D,&E\n&A       TM    &B,&C\n         BO    X&SYSNDX\n         MVC   0(2,R2),=C'NO'\nX&SYSNDX MVC   2(&E.,R2),=C'&D'\n         LA    R2,&E.+2(,R2)\n         BAL   R10,PRMLSTXX\n         MEND\n*\n         MACRO\n&A       CC    &B,&C,&D,&E\n&A       LA    R1,&B       LINECNT\n         CLI   &C.,C'&D'   IS THE THE CHAR?\n         BE    &E          YES.\n         MEND\n         EJECT\n*---------------------------------------------------------------------*\n*        ASSEMBLY VARIABLES\n*---------------------------------------------------------------------*\n         SPACE\n         LCLC  &RELEASE,&ID,&VERSION\n         LCLC  &DDIN,&DDPRINT,&DDPUNCH,&DDLIB,&DDLIST,&DDUPLOG\n         LCLB  &A(8),&B(8)\n&RELEASE SETC  '31JAN17'           RELEASE IDENT - MAX 7 BYTES\n&VERSION SETC  '8.3'               VERSION IDENTIFICATION\n&ID      SETC  'GSFC'              'LOCAL' IDENT - 4 BYTES MAX\n&DDIN    SETC  'SYSIN'             DDNAME: CONTROL INPUT\n&DDPRINT SETC  'SYSPRINT'          DDNAME: MAIN-PRINT OUTPUT\n&DDLIST  SETC  'SYSLIST'           DDNAME: LISTING OUTPUT\n&DDPUNCH SETC  'SYSPUNCH'          DDNAME: FOR PUNCHED OUTPUT\n&DDLIB   SETC  'SYSLIB'            DDNAME: LIBRARY INPUT\n&DDUPLOG SETC  'SYSUPLOG'          DDNAME: UPDTE LOG OUTPUT       .UPL.\n&A(1)    SETB  1                   LIST\n&A(2)    SETB  0                   NODECK\n&A(3)    SETB  0                   NOT 'LIST DIR ONLY'\n&A(4)    SETB  0                   NOUPDTE\n&A(5)    SETB  0\n&A(6)    SETB  1                   EJECT           (WAS NOEJECT)  .PRC.\n&A(7)    SETB  0                   SSI\n&A(8)    SETB  1                   TRUNC\n&B(1)    SETB  0                   NODEBUG\n&B(2)    SETB  0                   NOHEXOUT\n&B(3)    SETB  0\n&B(4)    SETB  0                   NONUM\n&B(5)    SETB  0                   EROPT=TERM\n&E(1)    SETB  1                   SEL                            .SEL.\n&E(2)    SETB  1                   SPF                            .SPF.\n         EJECT\nR0       EQU   0                   OS PARM REG; WORK REG\nR1       EQU   1                   OS PARM REG; WORK REG\nR2       EQU   2                   LOCAL WORK REG\nR3       EQU   3                   LOCAL WORK REG\nR4       EQU   4\nR5       EQU   5                   LRECL CNTR FOR MEMBER\nR6       EQU   6                   BLOCK LENGTH\nR7       EQU   7                   BLOCK POINTER\nR8       EQU   8                   IHADCB BASE REG\nR9       EQU   9                   MAIN BASE REG - 3\nR10      EQU   10                  LOCAL LINK REG\nR11      EQU   11                  PROGRAM BASE REG #2\nR12      EQU   12                  MAIN BASE REG - 1\nR13      EQU   13                  POINTER TO OS SAVE AREA\nR14      EQU   14                  OS LINK REG; WORK REG\nR15      EQU   15                  OS BRANCH REG; WORK REG\nMAXLINE  EQU   60                  'DEFAULT' LINES/PAGE (WAS 80)  .PRC.\nSWA0     EQU   B'10000000'         NOLIST/LIST\nSWA1     EQU   B'01000000'         NODECK/DECK\nSWA2     EQU   B'00100000'         LIST DIRECTORY ONLY\nSWA3     EQU   B'00010000'         NOUPDTE/UPDTE\nSWA4     EQU   B'00001000'         MAXLIST SPECIFIED\nSWA5     EQU   B'00000100'         NOEJECT/EJECT\nSWA6     EQU   B'00000010'         NOSSI/SSI\nSWA7     EQU   B'00000001'         NOTRUNC/TRUNC\nSWB0     EQU   B'10000000'         NODEBUG/DEBUG\nSWB1     EQU   B'01000000'         NOHEXOUT/HEXOUT\nSWB2     EQU   B'00100000'         0: LIST=LIST,  1: LIST=PRINT\nSWB3     EQU   B'00010000'         NONUM/NUM\nSWB4     EQU   B'00001000'         EROPT=TERM/ACC\nSWC0     EQU   B'10000000'         PARM ANALYSIS ERROR\nSWC1     EQU   B'01000000'         FLAG FOR NEW PAGE BEFORE PRINT\nSWC2     EQU   B'00100000'         1: DSORG=PS BEING PROCESSED.\nSWC3     EQU   B'00010000'         TERMINATE MODE SWITCH\nSWC7     EQU   B'00000001'         DCB EXIT TAKEN\nSWD0     EQU   B'10000000'         SELECTED NAMES SPECIFIED\nSWD1     EQU   B'01000000'         MEMBER IS AN ALIAS\nSWD2     EQU   B'00100000'         0=SELECT, 1=EXCLUDE\nSWD3     EQU   B'00010000'         SYSPRINT FIRST TIME THRU\nSWD4     EQU   B'00001000'         \"00\"=NOTHING, \"10\"=RITS,\nSWD5     EQU   B'00000100'         \"01\"=CRBE, \"11\"=CRJE.\nSWD6     EQU   B'00000010'         SYSLIST FIRST TIME THRU SWITCH\nSWD7     EQU   B'00000001'         1=RITS/CRBE/CRJE LIB BEING PROC.\nSWE0     EQU   B'10000000'         SEL                            .SEL.\nSWE1     EQU   B'01000000'         SPF                            .SPF.\nSWE2     EQU   B'00100000'         SPF STATS FOUND IN CURRENT PDS .SPF.\nSWE3     EQU   B'00010000'         SPF STATS IN ANY PDS           .SPF.\nSWE4     EQU   B'00001000'         SYSUPLOG IS OPEN               .UPL.\nOFLGS    EQU   B'00010000'         DCB OPEN ERROR FLAG\nALIAS    EQU   B'10000000'         ALIAS BIT IN DIRECTORY ENTRY\nCVTPTR   EQU   16   ... ADDR OF THE OS CVT\nCVTPCNVT EQU   X'1C' .. OFFSET IN CVT TO ADDR OF TTR/CCHHR CNVT\nJFCBDSNM EQU   0                   DSNAME OFFSET IN JFCB\nJFCBVOLS EQU   118                 VOLSER OFFSET IN JFCB\nJFCDSORG EQU   98                  DSORG  OFFSET IN JFCB\nJFCRECFM EQU   100                 RECFM  OFFSET IN JFCB\nJFCBLKSI EQU   102                 BLKSIZ OFFSET IN JFCB\nJFCLRECL EQU   104                 LRECL  OFFSET IN JFCB\nDS1DSORG EQU   82-44               DSORG  OFFSET IN DSCB\nDS1RECFM EQU   84-44               RECFM  OFFSET IN DSCB\nDS1BLKSI EQU   86-44               BLKSIZ OFFSET IN DSCB\nDS1LRECL EQU   88-44               LRECL  OFFSET IN DSCB\nDS4DEVDB EQU   75-44               DIR/TR OFFSET IN F=4 DSCB\n         EJECT\n*---------------------------------------------------------------------*\n*        MAIN PROGRAM BEGIN\n*---------------------------------------------------------------------*\nLISTPDS  AMODE 24\nLISTPDS  RMODE 24\nLISTPDS  CSECT\n         SAVE  (14,12),,LISTPDS-&VERSION\n         LR    R12,R15             INIT MAIN BASE REGS\n         LA    R11,2048\n         AR    R11,R11\n         LR    R9,R11\n         AR    R9,R9\n         AR    R11,R12\n         AR    R9,R12\n         USING LISTPDS,R12,R11,R9  AND PGM ADDRESSABILITY.\n         USING IHADCB,R8           SET DCB ADDRESSABILITY\n         LR    R4,R1               SAVE PARM LIST POINTER.\n         LA    R15,SAVEAREA        INIT SAVE AREAS\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         SPACE\n*---------------------------------------------------------------------*\n*        PROGRAM INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\nPGMINIT  EQU   *\n         XC    SWITCHES,SWITCHES   CLEAR SIWTCHES, ETC.\n         LA    R8,SYSLIB\n         MVI   DCBRECFM,0          MAKE SURE DCB IS INITIALIZED.\n         XC    DCBLRECL,DCBLRECL\n         XC    DCBBLKSI,DCBBLKSI\n         MVI   EXLST2,X'05'\n         XC    COR2,COR2\n         XC    COR7,COR7\n         XC    COR8,COR8\n         MVC   ALISTDCB,=A(SYSLIST)\n         MVI   HEAD1,C' '\n         MVC   HEAD1DAT(HEAD1NAM-HEAD1),HEAD1\n         MVC   HEAD1DSN(L'HEAD1VER),HEAD1VER\n         MVC   HEAD1(L'HEAD1R),HEAD1R  INIT HEADER LINE\n         MVC   SWA,SWAX\n         MVC   SWB,SWBX\n         MVC   SWE,SWEX\n         XC    RECORDS,RECORDS     CLEAR COUNTER\n         XC    TTRK,TTRK           FOR FIND\n         XC    RETCODE,RETCODE\n         XC    PAGENUM1,PAGENUM1\n         XC    PAGENUM2,PAGENUM2\n         XC    LINECNT1,LINECNT1\n         XC    LINECNT2,LINECNT2\n         XC    BUFFER1,BUFFER1     CLEAR BUFFERS\n         XC    BUFFER2,BUFFER2\n         LA    R15,MAXLINE         SET DEFAULT LINE COUNT\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         LA    R15,4000\n         STH   R15,LINECNT1\n         XC    TOTALREC,TOTALREC\n         XC    NAMETBL1,NAMETBL1\n         XC    NAMETBL2,NAMETBL2\n         XC    MAXLIST,MAXLIST\n         MVC   DDPRINT(RESETDDL),RESETDD\n         TM    0(R4),X'80'         ONLY EXEC PARMS SPECIFIED?\n         BO    EXTRACT             YES.\n         L     R2,4(R4)            NO, INIT THE DDNAMES.\n         LH    R3,0(R2)            GET NO. OF BYTES IN LIST\n         LTR   R3,R3               IS IT ZERO?\n         BNP   XPA2                YES, SKIP\n         CH    R3,=H'40'\n         BNH   *+8\n         LA    R3,40\n         LA    R2,2(R2)            BEGINNING OF DD LIST\n         LA    R3,2(R3,R2)         END OF DD LIST\n         LA    R1,DDPRINT          LISTPDS'S DD LIST\nXPA1     EQU   *\n         CR    R2,R3               END OF LIST?\n         BNL   XPA2                YES, GOTO NEXT ONE\n         CLI   0(R2),0             DUMMY ENTRY?\n         BE    *+10                YES, SKIP MOVE\n         MVC   0(8,R1),0(R2)\n         LA    R1,8(R1)\n         LA    R2,8(R2)\n         B     XPA1\n         SPACE\nXPA2     EQU   *\n         TM    4(R4),X'80'         END OF PARM LIST?\n         BO    EXTRACT             YES\n         L     R2,8(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM1         INITIAL PAGE NO - SYSPRINT\n         TM    8(R4),X'80'\n         BO    EXTRACT\n         L     R2,12(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM2         INITIAL PAGE NO - SYSLIST\n*XTRACT  EXTRACT TIOT,'S',FIELDS=(TIOT)                          *.PRC.\nEXTRACT  L     R1,540              PSATOLD, CURRENT TCB           .PRC.\n         L     R1,12(,R1)          GET TIOT ADDRESS FROM TCBTIO   .PRC.\n         ST    R1,TIOT             SAVE TIOT ADDRESS              .PRC.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT DATE/TIME FOR PRINTOUTS\n*---------------------------------------------------------------------*\n         SPACE\n         TIME  DEC                 GET DATE & TIME FOR HEADING\n         ST    R0,WORK1\n         XC    WORK2,WORK2         COMPUTE AND FORMAT DATE\n         ST    R1,WORK2+4\n         MVC   WORK1+5(1),WORK2+5  SAVE YEAR\n         CVB   R3,WORK2            CONVERT DATE TO BINARY\n         XR    R2,R2\n         D     R2,=F'1000'         TO SEP YEAR AND DAY\n         ST    R3,WORK2\n         LA    R3,MONTHS1          FOR STD YEAR\n         TM    WORK2+3,X'03'       LEAP YEAR?\n         BNZ   *+8                 NO\n         LA    R3,MONTHS2          FOR LEAP YEAR\n         XR    R1,R1\nPGMINITX EQU   *\n         SH    R2,0(R3)\n         BNP   PGMINITY\n         LA    R1,3(R1)\n         LA    R3,2(R3)\n         B     PGMINITX\n         SPACE\nPGMINITY EQU   *\n         AH    R2,0(R3)\n         MH    R2,=H'10'\n         CVD   R2,WORK2            FOR DAY OF MONTH\n         LA    R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC   HEAD1DAT+3(3),0(R1)\n         MVC   WORK1+4(1),WORK2+6  DAY OF MONTH\n         ED    HEAD1DAT,WORK1+4\n         CLI   HEAD1DAT+1,C' '\n         BNE   *+8\n         MVI   HEAD1DAT+1,C'0'\n         ED    HEAD1TIM,WORK1\n         CLI   HEAD1TIM+1,C' '\n         BNE   *+8\n         MVI   HEAD1TIM+1,C'0'\n         MVC   HEAD1TIM+6(3),=C'   '                              .PRC.\n         MVC   HEAD2DAT,HEAD1DAT\n         MVC   HEAD2TIM,HEAD1TIM\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE THE SYSPRINT FILE\n*---------------------------------------------------------------------*\n         SPACE\n         LA    R8,SYSPRINT         INIT THE SYSPRINT FILE\n         MVC   DCBDDNAM,DDPRINT\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    INITPR              YES.\n         L     R2,TIOT             SYSPRINT OPEN ERROR\n         MVC   WTP+17(8),0(R2)     MOVE JOBNAME TO MSG.\n         MVC   WTP+40(L'DDPRINT),DDPRINT\nWTP      EQU   *\n         WTO   'LPDS00I  JOBNAMEX OPEN ERROR ON SYSPRINT',         +++++\n               ROUTCDE=(11),DESC=7\n         TM    SWB,SWB0            DEBUG?\n         BZ    ABORT               NO\n         ABEND 20,DUMP             YES, ABEND TO GET DUMP.\nABORT    EQU   *\n         L     R13,4(R13)          ELSE ... ABORT\n         RETURN (14,12),T,RC=20\nRESETDD  DC    CL8'&DDPRINT',CL8'&DDLIST',CL8'&DDPUNCH'\n         DC    CL8'&DDLIB',CL8'&DDIN',CL8'&DDUPLOG'\nRESETDDL EQU   *-RESETDD\n         SPACE\nINITPR   DS    0H\n         MVI   LINE1,C'-'\n         BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        GO PERFORM THE PARM ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\n         L     R6,=A(PA)\n         BR    R6\n         SPACE\n*---------------------------------------------------------------------*\n*        COMPLETE THE PARM ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITA EQU   *\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         BZ    *+12                NO.\n         OI    SWD,SWD7            YES.\n         NI    SWA,255-SWA6        NO SSI IF RITS/CRBE\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST & PUNCH FILE INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWA,SWA0            LIST?\n         BZ    PGMINITC            NO.\n         LA    R8,SYSLIST\n         MVC   DCBDDNAM,DDLIST\n         OPEN  (SYSLIST,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    PGMINITC            YES.\n         NI    SWA,255-SWA0        NO, SET NOLIST.\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDLIST),DDLIST\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\nPGMINITC EQU   *\n         LA    R8,SYSPUNCH\n         MVC   DCBDDNAM,DDPUNCH\n         TM    SWA,SWA1            NODECK?\n         BZ    PGMINITD            YES.\n         OPEN  (SYSPUNCH,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    PGMINITU            YES.                           .UPL.\n         NI    SWA,255-SWA1        TURN OFF DECK OPTION\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDPUNCH),DDPUNCH\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\n         SPACE\nPGMINITU EQU   *                                                  .UPL.\n         LA    R8,SYSUPLOG                                        .UPL.\n         MVC   DCBDDNAM,DDUPLOG                                   .UPL.\n         DEVTYPE DCBDDNAM,WORK1                                   .UPL.\n         LTR   R15,R15             IF NO SYSUPLOD DD              .UPL.\n         BNZ   PGMINITD              THEN SKIP OPEN               .UPL.\n         OI    SWE,SWE4            SYSUPLOG IS OPEN               .UPL.\n         OPEN  (SYSUPLOG,OUTPUT)                                  .UPL.\n         TM    DCBOFLGS,OFLGS      OPEN OK?                       .UPL.\n         BO    PGMINITD            YES.                           .UPL.\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE MAIN WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITD EQU   *\n         GETMAIN VU,LA=COR1,A=COR2\n         L     R1,COR2\n         ST    R1,COR3\n         L     R15,COR2+4\n         LH    R0,=Y(8*1024)\n         SR    R15,R0\n         ST    R15,COR2+4\n         AR    R1,R15\n         AL    R15,COR2\n         SH    R15,=H'8'           MAKE IT LOW TO BE SAFE\n         ST    R15,COR5\n         FREEMAIN R,LV=(0),A=(1)\n         LM    R14,R15,COR2        CLEAR THE WORKAREA\nPGMINITG EQU   *\n         SH    R15,=H'256'\n         BNP   PGMINITH\n         XC    0(256,R14),0(R14)\n         LA    R14,256(,R14)\n         B     PGMINITG\n         SPACE\nPGMINITH EQU   *\n         BAL   R14,RESETHI\n         BAL   R14,RESETLO\n         L     R1,COR2+4\n         SRL   R1,10\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         MVC   LINE1(MSG7L1),MSG7\n         BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE SYSLIB AND THE LCB'S\n*---------------------------------------------------------------------*\n         SPACE\nFILEINIT EQU   *\n         LA    R8,SYSLIB\n         OPEN  (SYSLIB,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BO    FI07                YES.\n         MVC   LINE1(L'LPDS04I),LPDS04I\n         MVC   LINE1+L'LPDS04I(8),DDLIB\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        LCB INIT FOR SYSLIB CONCATONATION\n*---------------------------------------------------------------------*\n         SPACE\nFI07     EQU   *\n         MVC   WORK1(L'DCBTIOT),DCBTIOT  SAVE ENTRY\n         LH    R2,DCBTIOT\n         L     R3,TIOT\n         LA    R3,0(R3,R2)         PNTR TO SYSLIB ENTRY\n         LA    R0,LCBLEN           ALLOC INITIAL LCB\n         BAL   R14,GETBASE\n         LR    R4,R1\n         ST    R1,ALCB\n         USING LCB,R4\n         LA    R5,16               LIMIT MAX LIBS PROCESSED\n         LA    R0,176              SIZE OF A JFCB\n         BAL   R14,GETHI\n         ST    R1,JFCBADRS\n         MVI   JFCBADRS,X'87'\n         B     FI07B\n         SPACE\nFI07A    EQU   *\n         XR    R1,R1\n         IC    R1,0(R3)\n         LA    R2,0(R2,R1)         POINT TO NEXT ENTRY\n         LA    R3,0(R3,R1)\n         CLI   0(R3),0             END OF TIOT?\n         BE    FI07Z               YES\n         CLC   =CL8' ',4(R3)       CONCATONATION?\n         BNE   FI07Z               NO, END.\n         STH   R2,DCBTIOT\nFI07B    RDJFCB    SYSLIB\n         L     R1,JFCBADRS\n         MVC   DSNAME,JFCBDSNM(R1)\n         MVC   LCBDSNAM,JFCBDSNM(R1)\n         MVC   VOLSER,JFCBVOLS(R1)\n         MVC   LCBVOLNO,JFCBVOLS(R1)\n         MVC   LCBJFCDS,JFCDSORG(R1)\n         MVC   LCBJFCRF,JFCRECFM(R1)\n         MVC   LCBJFCBL,JFCBLKSI(R1)\n         MVC   LCBJFCLR,JFCLRECL(R1)\n         OBTAIN DSCB\n         MVC   LCBDS1DS,WORKAREA+DS1DSORG\n         MVC   LCBDS1RF,WORKAREA+DS1RECFM\n         MVC   LCBDS1BL,WORKAREA+DS1BLKSI\n         MVC   LCBDS1LR,WORKAREA+DS1LRECL\n         MVI   DSNAME,X'04'        FOR FORMAT 4 DSCB\n         MVC   DSNAME+1(43),DSNAME\n         OBTAIN DSCB\n         XR    R1,R1\n         IC    R1,WORKAREA+DS4DEVDB\n         STH   R1,LCBDIR\n         L     R15,JFCBADRS\n         LH    R1,JFCBLKSI(,R15)\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,WORKAREA+DS1BLKSI\n         LA    R0,LCBLEN\n         BAL   R14,GETBASE         WILL BE CONTIG\n         LR    R4,R1\n         XC    0(LCBLEN,R1),0(R1)\n         BCT   R5,FI07A\n         DROP  R4\nFI07Z    EQU   *\n         MVI   0(R4),X'FF'         SET END FLAG\n         MVI   JFCBADRS,X'80'      END OF JFCB INIT\n         MVC   DCBTIOT,WORK1       RESET TIOT PNTR\n         BAL   R14,RESETHI\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE SELECTED NAME TABLE\n*---------------------------------------------------------------------*\n         SPACE\n         XC    NAMETBL2,NAMETBL2   SET PNTR TO NULL.\n         TM    SWE,SWE0            SEL OR NOSEL                   .SEL.\n         BZ    BLDSEL99            NOSEL, BYPASS SYSIN            .SEL.\n         L     R2,TIOT             SCAN THE TIOT FOR MATCH\n         LA    R2,24(R2)\n         XR    R3,R3\nBLDSEL01 EQU   *\n         CLC   4(8,R2),DDIN\n         BE    BLDSEL02            MATCH.\n         CLI   0(R2),0             END OF TIOT?\n         BE    BLDSEL99            YES, RETURN.\n         IC    R3,0(R2)\n         LA    R2,0(R2,R3)\n         B     BLDSEL01\n         SPACE\nBLDSEL02 EQU   *\n         LA    R8,SYSIN\n         MVC   DCBDDNAM,DDIN\n         OPEN  (SYSIN,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         BZ    BLDSEL99            NO, RETURN.\n         LH    R0,SYSIN+DCBBLKSI-IHADCB  ALLOC SYSIN BUFFER\n         BAL   R14,GETHI\n         LR    R7,R1\n         B     BLDSEL20\n         SPACE\nBLDSEL03 EQU   *\n         LA    R5,80(,R5)\n         LR    R3,R5\n         SH    R6,=H'80'\n         BNP   BLDSEL20\n         LA    R2,72(,R3)          POINT AT END OF CARD.\nBLDSEL04 EQU   *\n         CLI   0(R3),C' '          BLANK?\n         BE    BLDSEL03            YES, GO GET NEXT CARD.\n         CR    R2,R3               END OF CARD?\n         BL    BLDSEL03            YES, GO GET NEXT CARD.\n         CLI   0(R3),C','          COMMA?\n         BNE   BLDSEL05            NO.\n         LA    R3,1(R3)            YES, SKIP OVER IT.\n         B     BLDSEL04\n         SPACE\nBLDSEL05 EQU   *\n         LA    R14,WORK1\n         MVC   WORK1,=CL8' '\nBLDSEL06 EQU   *\n         CLI   0(R3),C' '          BLANK?\n         BE    BLDSEL08            YES, END OF NAME\n         CLI   0(R3),C','          COMMA?\n         BE    BLDSEL08            YES, END OF NAME\n         CR    R2,R3               END OF CARD?\n         BL    BLDSEL08            YES, END OF NAME\n         C     R14,=A(WORK1+8)     HAVE 8 BYTES BEEN PROCESSED?\n         BNL   *+16                YES.\n         IC    R15,0(R3)\n         STC   R15,0(R14)\n         LA    R14,1(R14)\n         LA    R3,1(R3)\n         B     BLDSEL06            GO GET NEXT CHAR.\n         SPACE\nBLDSEL08 EQU   *\n         LA    R0,NAMTBLXX\n         BAL   R14,GETBASE\n         XC    0(NAMTBLXX,R1),0(R1)\n         MVC   0(8,R1),WORK1\n         TM    SWD,SWD0\n         BO    BLDSEL04\n         OI    SWD,SWD0\n         ST    R1,NAMETBL2\n         B     BLDSEL04\n         SPACE\nBLDSEL20 EQU   *\n         READ  INDECB,SF,SYSIN,(R7),'S'\n         CHECK INDECB\n         LR    R5,R7\n         L     R15,INDECB+16       CALC. LENGTH OF RECORD READ\n         LH    R6,SYSIN+DCBBLKSI-IHADCB\n         SH    R6,14(,R15)\n         LA    R3,0(,R5)\n         LA    R2,72(,R3)\n         B     BLDSEL04\n         SPACE\nBLDSEL90 EQU   *\n         TM    SWD,SWD0            ANY NAMES?\n         BZ    BLDSEL95            NO\n         LA    R0,8                YES, SET END FLAG\n         BAL   R14,GETBASE\n         MVI   0(R1),X'FF'\nBLDSEL95 EQU   *\n         CLOSE SYSIN\nBLDSEL99 EQU   *\n         BAL   R14,RESETHI\n         L     R6,=A(PRMLST)\n         BR    R6\n         EJECT\nBEGIN    EQU   *\n         L     R2,ALCB\n         USING LCB,R2\n         TM    LCB,X'FF'\n         BNM   ENDRUN\n         BAL   R14,RESETLO\n         BAL   R14,RESETHI\n         XC    CURRENT2+4,CURRENT2+4\n         MVC   CURRENT2,NAMETBL2\n*        MVC   HEAD1DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD1VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD1DSN+1(65),HEDD1DSN                            .PRC.\n         MVC   HEDD1DSN+1(2),=C'--'                               .PRC.\n         MVC   HEDD1DSN+4(44),LCBDSNAM                            .PRC.\n         LA    R1,HEDD1DSN+4+43                                   .PRC.\n         CLI   0(R1),C' '                                         .PRC.\n         BNE   *+8                                                .PRC.\n         BCT   R1,*-8                                             .PRC.\n         MVC   2(2,R1),=C'--'                                     .PRC.\n         MVC   5(4,R1),HEAD1C1R+3 'VOL='                          .PRC.\n         MVC   9(6,R1),LCBVOLNO                                   .PRC.\n*        MVC   HEAD2DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD2VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD2DSN+4(58),HEDD1DSN+4                          .PRC.\n         MVC   MAXDIR,LCBDIR       UPDATE FOR DIR READ\n         LA    R1,LCBEND\n         ST    R1,ALCB\n         TM    LCBDS1DS,B'01000010' ONLY DSORG=PO/PS ARE VALID\n         BNZ   BEGIN01\n         OI    SWC,SWC1\n         MVC   LINE1(L'LPDS11I),LPDS11I\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\n         B     BEGIN\n         SPACE\nBEGIN01  EQU   *\n         NI    SWC,255-SWC2        RESET DSORG=PS SWITCH\n         TM    LCBDS1DS,B'01000000' IS THIS DSORG=PS?\n         BZ    *+8                 NO.\n         OI    SWC,SWC2            YES, FLAG IT.\n         TM    SWD,SWD0            WERE NAMES SPECIFIED VIA SYSIN?\n         BZ    BEGIN19             NO.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    BEGIN               YES, NOT PROCESSED ON SELECT.\nBEGIN09  EQU   *\n         L     R1,CURRENT2         RE-INIT THE NAME TBL2\n         USING NAMTBL,R1\nBEGIN10  EQU   *\n         CLI   NAMTBL1,X'FF'       TEST FOR END\n         BE    BEGIN19\n         XC    NAMTBL2(12),NAMTBL2\n         LA    R1,NAMTBLXX(,R1)\n         B     BEGIN10\n         SPACE\nBEGIN19  EQU   *\n         DROP  R1\n         XR    R1,R1\n         IC    R1,LCBJFCRF\n         LTR   R1,R1\n         BNZ   *+8\n         IC    R1,LCBDS1RF\n         STC   R1,SAVRECFM\n         LH    R1,LCBJFCBL\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,LCBDS1BL\n         STH   R1,SAVBLKSI\n         ST    R1,BUFFER0          SET SIZE OF BUFFER(S)\n         LH    R1,LCBJFCLR\n         LTR   R1,R1\n         BNZ   *+8\n         LH    R1,LCBDS1LR\n         STH   R1,SAVLRECL\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         BZ    *+8                 NO.\n         OI    SWD,SWD7            YES, FLAG.\n         DROP  R2\n         SPACE\n         LA    R8,SYSLIB\n         LH    R15,SAVBLKSI        BLKSIZE SPECIFIED?\n         LTR   R15,R15\n         BNZ   *+24                YES.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IA),LPDS06IA\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'00000010'  MACH. CONTROL CHARS?\n         BZ    *+30                NO.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I1),LPDS06I1\n         MVC   LINE1+L'LPDS06I+L'LPDS06I1(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'11000000'\n         BO    CHKLIB11\n         TM    SAVRECFM,B'01001000'  VARIABLE SPANNED?\n         BNO   CHKLIB11            NO\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I2),LPDS06I2\n         MVC   LINE1+L'LPDS06I+L'LPDS06I2(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RITS/CRBE\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB11 EQU   *\n         TM    SWD,SWD7            RITS/CRBE/CRJE SPECIFIED?\n         BZ    CHKLIB15            NO.\n         TM    SAVRECFM,B'11000000'  YES, CHECK PARMS\n         BO    CHKLIB12            INVALID\n         TM    SAVRECFM,B'10000000'\n         BZ    CHKLIB12            INVALID\n         LH    R15,SAVLRECL\n         CH    R15,=H'88'\n         BNE   *+8\n         B     CHKLIB40\n         SPACE\nCHKLIB12 EQU   *\n         NI    SWD,255-SWD7        TURN OFF RITS/CRBE\n         OI    SWC,SWC1            FLAG REINIT SYSPRINT\n         MVC   LINE1(L'LPDS07I),LPDS07I\n         BAL   R10,PRNT\n         LA    R1,4                RC=4\n         BAL   R14,SAVERC\n         SPACE\n*---------------------------------------------------------------------*\n*        CHECK RECFM TYPES\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB15 EQU   *\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    CHKLIB16\n         TM    SAVRECFM,B'10000000'    RECFM=F?\n         BO    CHKLIB17\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    CHKLIB18\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IB),LPDS06IB\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=U\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB16 EQU   *\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         BNZ   *+8\n         LH    R15,SAVBLKSI\n         CH    R15,SAVBLKSI\n         BNH   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=F\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB17 EQU   *\n         TM    SAVRECFM,B'00010000'    BLOCKED?\n         BO    *+16\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         BNZ   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         B     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=V\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB18 EQU   *\n         TM    SAVRECFM,B'00100000'  TRACK OVERFLOW?\n         BZ    CHKLIB40            NO.\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I3),LPDS06I3\n         MVC   LINE1+L'LPDS06I+L'LPDS06I3(L'LPDS06I0),LPDS06I0\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LIB CHECK\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB40 EQU   *\n         LA    R8,SYSLIB\n         SPACE\n*---------------------------------------------------------------------*\n*        REINIT DCB IF NECESSARY\n*---------------------------------------------------------------------*\n         SPACE\n         CLC   SAVRECFM,DCBRECFM\n         BE    BEGIN35\n         CLOSE SYSLIB\n         MVI   EXLST2,X'00'        SUPPRESS EXIT THIS TIME\n         MVI   JFCBADRS,X'80'      SUPPRESS JFCB POINTER\n         MVC   DCBRECFM,SAVRECFM   SET RECFM\n         MVC   DCBLRECL,SAVLRECL   SET LRECL\n         MVC   DCBBLKSI,DCBBLKSI   SET BLKSIZE\n         OPEN  SYSLIB              RE-OPEN THE DATASETS\nBEGIN35  EQU   *\n         MVC   DCBLRECL,SAVLRECL   SET THE LRECL\n         MVC   DCBBLKSI,SAVBLKSI   SET THE BLKSIZE\n         XC    TTRK(2),TTRK        POINT AT NEW DIRECTORY\n         MVI   TTRK+2,1\n         XC    NAMETBL1,NAMETBL1\n         NI    SWE,255-SWE2        RESET SPF-THIS-PDS SWITCH      .SPF.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    BEGIN9              YES, SKIP DIR. BUILD\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DIRECTORY-READ WORKAREA (CHAN. PROGS., ETC.)\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R2,MAXDIR\n         LR    R0,R2\n         MH    R2,=H'8'\n         LA    R2,16(,R2)          C.P. SIZE\n         MH    R0,=H'272'          DATA AREA SIZE\n         AR    R0,R2               WORKAREA SIZE\n         BAL   R14,GETHI           GET SOME CORE\n         ST    R1,WORK1            AREA FOR THE C.P.\n         AR    R2,R1\n         ST    R2,WORK1+4          FOR THE DATA\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE CHANNEL PROGRAM\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         XC    0(16,R1),0(R1)      BUILD THE SHA AND TIC\n         LA    R0,CCHHR\n         ST    R0,0(,R1)\n         MVI   0(R1),X'39'         ...SHA\n         MVI   4(R1),X'40'\n         MVI   7(R1),4\n         ST    R1,8(,R1)\n         MVI   8(R1),X'08'         ...TIC\n         MVI   12(R1),X'40'\n         LA    R1,16(,R1)\n         LA    R14,272             ..SIZE OF DATA RECORD\nBLDNAM10 EQU   *\n         XC    0(8,R1),0(R1)\n         ST    R2,0(,R1)\n         MVI   0(R1),X'1E'         READ CKD\n         MVI   4(R1),X'60'\n         STH   R14,6(,R1)\n         LA    R1,8(,R1)\n         AR    R2,R14\n         BCT   R15,BLDNAM10\n         SH    R1,=H'4'\n         NI    0(R1),X'BF'         TURN OFF CHAINING\n         L     R1,WORK1\n         ST    R1,ACP\n         SPACE 3\nBLDNAM20 EQU   *\n         STM   R14,R12,12(R13)     SAVE REGS FOR TTR CNVT\n         L     R0,TTRK\n         LH    R1,TTRK             UPDATE FOR NEXT TIME\n         LA    R1,1(,R1)\n         STH   R1,TTRK\n         L     R1,SYSLIB+DCBDEBAD-IHADCB\n         LA    R2,MBB\n         L     R15,CVTPTR\n         L     R15,CVTPCNVT(,R15)\n         LR    R3,R13              SAVE 13 OVER CALL\n         BALR  R14,R15\n         LR    R13,R3              NOW RESTORE 13\n         LM    R14,R12,12(R13)     AND THEN THE REST\n         LH    R15,MAXDIR          NOW CLEAR THE DATA AREA\n         L     R1,WORK1+4\nBLDNAM22 EQU   *\n         XC    0(20,R1),0(R1)\n         LA    R1,272(,R1)\n         BCT   R15,BLDNAM22\n         XC    ECB,ECB\n         LA    R10,BLDNAM23\n         EXCP  IOB\n         WAIT  1,ECB=ECB\nBLDNAM23 EQU   *\n         CLI   ECB,X'7F'           I/O OK\n         BE    BLDNAM27\n         CLI   ECB,X'42'\n         BE    BLDNAM90            I/O ERROR OR BAD FORMAT\n         SPACE\n*---------------------------------------------------------------------*\n*        SHORT TRACK, FIND THE END.\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         L     R1,WORK1+4\n         XR    R5,R5\nBLDNAM25 EQU   *\n         CLC   =XL5'0',0(R1)\n         BE    BLDNAM28\n         CLC   =H'0',6(R1)         DL = 0\n         BE    BLDNAM28\n         CLC   =X'0100',6(R1)      DL = 256\n         BNE   BLDNAM90            BAD DIR FORMAT\n         LA    R1,272(,R1)\n         LA    R5,1(,R5)\n         BCT   R15,BLDNAM25\nBLDNAM27 EQU   *\n         LH    R5,MAXDIR\nBLDNAM28 EQU   *\n         L     R4,WORK1+4\nBLDNAM30 EQU   *\n         LA    R3,18(,R4)          POINT PAST COUNT, KEY, 1ST 2 DATA\n         MVC   WORK2(2),16(R4)     GET 1ST 2 BYTES OF DATA, BYTES USED\n         LH    R2,WORK2\n         SH    R2,=H'2'\nBLDNAM36 EQU   *\n         IC    R7,11(,R3)          GET USERDATA LENGTH\n         N     R7,=F'31'           ISOLATE USERDATA LENGTH BITS\n         SLL   R7,1\n         CH    R7,=H'30'           COULD THIS BE SPF STATS        .SPF.\n         BNE   BLDNAM40            NO, BRANCH                     .SPX.\n         TM    14(R3),X'20'        EXTENDED STATS IN 30 BYTES?    .SPX.\n         BZ    BLDNPSPF            NO, TREAT AS STATS             .SPX.\n         B     BLDNOSPF            YES, TREAT AS NO STATS         .SPX.\nBLDNAM40 CH    R7,=H'40'           COULD THIS BE SPF X STATS      .SPX.\n         BNE   BLDNOSPF            NO, BRANCH                     .SPX.\n         TM    14(R3),X'20'        EXTENDED STATS IN 40 BYTES?    .SPX.\n         BZ    BLDNOSPF            NO, TREAT AS NO STATS          .SPX.\nBLDNPSPF EQU   *                                                  .SPX.\n         TM    11(R3),X'60'        ANY TTR'S IN USERDATA          .SPF.\n         BNZ   BLDNOSPF            YES, NOT SPF STATS             .SPF.\n         OI    SWE,SWE2+SWE3       SPF STATS FOUND                .SPF.\nBLDNOSPF EQU   *                                                  .SPF.\n         LA    R6,DIRUSER-DIRNAME(,R7)\n         LA    R0,DIRNAME-DIR(,R6)\n         BAL   R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         OC    NAMETBL1,NAMETBL1\n         BNZ   *+8\n         ST    R1,NAMETBL1\n         STH   R7,DIRUSERL-DIR(,R1)\n         BCTR  R6,0\n         EX    R6,BLDNAMMV\n         CLI   0(R3),X'FF'         TEST FOR END\n         BE    BLDNAM95\n         LA    R6,1(,R6)\n         AR    R3,R6\n         SR    R2,R6\n         BP    BLDNAM36\n         LA    R4,272(,R4)\n         SH    R5,=H'1'\n         BP    BLDNAM30\n         B     BLDNAM20\n         SPACE\nBLDNAMMV MVC   DIRNAME-DIR(*-*,R1),0(R3)\nBLDNAM90 MVC   LINE1(L'LPDS08I),LPDS08I\n         BAL   R10,PRNT\n         B     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DIRECTORY.\n*---------------------------------------------------------------------*\n         SPACE\nBLDNAM95 EQU   *\n         MVC   CURRENT1,NAMETBL1\nBEGIN9   EQU   *\n         LA    R8,SYSLIB\n         OI    SWD,SWD6            FLAG FIRST EJECT ON LIST\n         LH    R1,LINEMAX          RE-INIT SYSPRINT PAGE\n         STH   R1,LINECNT1\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DATA BUFFERS\n*---------------------------------------------------------------------*\n         SPACE\n         BAL   R14,RESETHI\n         L     R0,BUFFER0\n         BAL   R14,GETHI\n         ST    R1,BUFFER1\n         CLI   SAVBUFNO,2\n         BL    BEGIN9A\n         L     R0,BUFFER0\n         BAL   R14,GETHI\n         ST    R1,BUFFER2\nBEGIN9A  EQU   *\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BZ    MAIN00              NO, GO PROCESS A PDS LIBRARY.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR DSORG=PS\n*---------------------------------------------------------------------*\n         SPACE\n         NI    SWD,255-SWD7        NO CRJE, ETC.\n         LA    R0,DIRLEN\n         BAL   R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         LR    R4,R1\n         USING DIR,R4\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN31              NO, GO PROCESS.\n         MVC   HEAD2NAM,NAME\n         MVI   LINE2,C'+'\n         BAL   R10,LOUT\n         MVC   DIRPG1,PAGENUM2\n         B     MAIN31              GO PROCESS DSORG=PS\n         SPACE\nMAIN00   EQU   *\n         NI    SWD,255-SWD1        TURN OFF ALIAS SWITCH\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         BZ    MAIN10              NO.\n         TM    SWD,SWD2            SELECT OF EXCLUDE?\n         BNZ   MAIN10              NOT SELECT.\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT NAME FROM NAMETBL2\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,CURRENT2\n         USING NAMTBL,R2\n         CLI   NAMTBL,X'FF'        END OF TABLE?\n         BE    ENDLIB              YES.\n         MVC   NAME,NAMTBL1\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         SPACE\n*---------------------------------------------------------------------*\n*        SEARCH NAMETBL1 FOR ENTRY.\n*---------------------------------------------------------------------*\n         SPACE\n         L     R4,NAMETBL1\n         USING DIR,R4\nMAIN02   EQU   *\n         CLI   DIRNAME,X'FF'       END?\n         BE    MAIN00              YES, MEMBER NOT FOUND.\n         CLC   NAMTBL1,DIRNAME     IS THIS IT?\n         BE    MAIN04              YES, FOUND IT.\n         LH    R15,DIRUSERL        UPDATE POINTER AND TRY NEXT ENTRY\n         LA    R4,DIRUSER(R15)\n         B     MAIN02\n         SPACE\nMAIN04   EQU   *\n         ST    R4,NAMTBL2          SAVE POINTER\n         LA    R1,DIRNAME          POINT TO DIR ENTRY AREA\n         B     MAIN12\n         DROP  R2\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT ENTRY FROM NAMETBL1\n*---------------------------------------------------------------------*\n         SPACE\nMAIN10   EQU   *\n         L     R4,CURRENT1\n         USING DIR,R4\n         CLI   DIRNAME,X'FF'       TEST FOR END\n         BE    ENDLIB\n         MVC   NAME,DIRNAME        SAVE NAME FOR LATER PROCESSING\n         LH    R15,DIRUSERL\n         LA    R1,DIRNAME\n         LA    R2,DIRUSER(R15)\n         ST    R2,CURRENT1\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED (EXCLUDE)?\n         BZ    MAIN12              NO\n         L     R2,NAMETBL2         CHECK FOR EXCLUDE\n         USING NAMTBL,R2\nMAIN11   EQU   *\n         CLI   NAMTBL,X'FF'        TEST FOR END OF EXCLUDED LIST\n         BE    MAIN12              NOT EXCLUDED, GO PROCESS THE MEMBER\n         CLC   NAMTBL1,DIRNAME\n         BE    MAIN10              NAME MATCH..THIS MEMBER EXCLUDED.\n         LA    R2,NAMTBLXX(,R2)\n         B     MAIN11\n         DROP  R2\n         SPACE 2\nMAIN12   EQU   *\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         BZ    MAIN20              NO, CONTINUE.\n         SPACE\n*---------------------------------------------------------------------*\n*        ALIAS ENTRY ... FIND PRIME ENTRY (IF IT EXISTS)\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,NAMETBL1\nMAIN14   EQU   *\n         CLI   DIRNAME-DIR(R2),X'FF'\n         BE    MAIN20              ..END TBL, IGNORE ALIAS\n         CLC   DIRTTR(3),DIRTTR-DIR(R2)\n         BNE   MAIN14A\n         TM    DIRTTR+3-DIR(R2),ALIAS\n         BZ    MAIN16              PRIME ENTRY FOUND FOR ALIAS\nMAIN14A  EQU   *\n         LH    R15,DIRUSERL-DIR(R2)\n         LA    R2,DIRUSER-DIR(R2,R15)\n         B     MAIN14\n         SPACE\n*---------------------------------------------------------------------*\n*        PRIME ENTRY FOUND FOR ALIAS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN16   EQU   *\n         OI    DIRFLAGS,B'11000000'    SET ALIAS FLAG\n         TM    SWD,SWD0            SELECTED NAMES SPECIFIED?\n         BO    MAIN20              YES, CONTINUE.\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         LA    R1,1(R1)\n         STH   R1,MEMCNT\n         B     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        MEMBER PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN20   EQU   *\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         LA    R1,1(R1)\n         STH   R1,MEMCNT\n         OI    DIRFLAGS,B'10000000'    FLAG MEMBER 'PROCESSED'\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN21              NO.\n         TM    SWA,SWA5            IS IT EJECT FORMAT\n         BO    MAIN20D             YES.\n         MVC   LINE2(8),=C'0MEMBER='\n         MVC   LINE2+8(8),NAME\n         BAL   R10,LOUT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\n         MVI   LINE2,C'0'\n         B     MAIN21\n         SPACE\nMAIN20D  EQU   *\n         OI    SWD,SWD6            FORCE EJECT FORMAT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVI   LINE2,C'+'\n         BAL   R10,LOUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\nMAIN21   EQU   *\n         TM    SWA,SWA2            LIST DIR ONLY?\n         BO    MAIN00              YES, SKIP PROCESSING\n         TM    SWA,SWA1+SWA3       DECK OUTPUT WITH UPDTE\n         BNO   MAIN30              NO\n* ---- >                 LEAVE OUT DATE AND TIME          BELOW\n*\n*        MVC   CARD+50(L'HEAD1DAT),HEAD1DAT\n*        MVC   CARD+50+L'HEAD1DAT(L'HEAD1TIM),HEAD1TIM\n*\n* ---- >                 LEAVE OUT DATE AND TIME          ABOVE\n         LH    R15,DIRUSERL        ANY USER INFO?\n         CH    R15,=H'4'           (MUST BE 4 BYTES)\n         BNE   *+12                NO, THERE NO SSI     (WAS BL)  .SPF.\n         TM    SWA,SWA6            SSI SPECIFIED?\n         BO    MAIN24              YES.\n         MVC   CARD(L'UPDTE1),UPDTE1  CC WITH NO SSI\n         MVC   CARD+L'UPDTE1(L'NAME),NAME\n         CH    R15,=H'30'          ARE SPF STATS PRESENT          .SPF.\n         BNE   MAIN21A                                            .SPX.\n         TM    DIRUSER+2,X'20'     EXTENDED STATS IN 30 BYTES?    .SPX.\n         BZ    MAIN21B             IF NOT, GOOD STATS             .SPX.\n         B     MAIN24A             TREAT AS NO STATS              .SPX.\nMAIN21A  CH    R15,=H'40'          ARE SPF X STATS PRESENT        .SPX.\n         BNE   MAIN24A             NO, BRANCH                     .SPF.\n         TM    DIRUSER+2,X'20'     EXTENDED STATS IN 40 BYTES?    .SPX.\n         BZ    MAIN24A             IF NOT, TREAT AS NO STATS      .SPX.\nMAIN21B  EQU   *                                                  .SPX.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         BNO   MAIN24A             NO, BRANCH                     .SPF.\n         LA    R15,L'UPDTE1+9+CARD WHERE TO PUT THEM              .SPF.\n         MVI   0(R15),C'-'         HYPHEN TO BE PROPOGATED        .SPF.\n         MVC   1(49,R15),0(R15)    FILL AREA WITH HYPHENS         .SPF.\n         SLR   R0,R0               CLEAR FOR INSERT               .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  0(2,R15),WORK1+6(2)                                .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  2(2,R15),WORK1+6(2)                                .SPF.\n         UNPK  05(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n         UNPK  11(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  17(4,R15),WORK1(3)                                 .SPF.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  22(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  28(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  34(5,R15),WORK1+5(3)                               .SPF.\n*        MVC   40(10,R15),DIRUSER+20   USER ID                   *.SEC.\n*-ID8    MVC   40(07,R15),DIRUSER+20   USER ID (7 BYTES)          .SEC.\n*-ID8    MVI   47(R15),C' '                                       .SEC.\n         MVC   40(08,R15),DIRUSER+20   USER ID (8 BYTES)          .ID8.\n         UNPK  48(3,R15),DIRUSER+3(2)  SECONDS                    .SEC.\n         MVI   50(R15),C' '                                       .SEC.\n         TM    DIRUSER+2,X'20'     EXTENDED STATS?                .SPX.\n         BZ    MAIN24A             BRANCH IF NO                   .SPX.\n         MVC   WORK1(4),DIRUSER+28 CURRENT SIZE                   .SPX.\n         L     R0,WORK1                                           .SPX.\n         CVD   R0,WORK1                                           .SPX.\n         OI    WORK1+7,X'0F'                                      .SPX.\n         UNPK  WORK2,WORK1                                        .SPX.\n         MVC   22(5,R15),WORK2+3                                  .SPX.\n         MVC   51(3,R15),WORK2     COLUMN 73-75                   .SPX.\n         MVC   WORK1(4),DIRUSER+32 INITIAL SIZE                   .SPX.\n         L     R0,WORK1                                           .SPX.\n         CVD   R0,WORK1                                           .SPX.\n         OI    WORK1+7,X'0F'                                      .SPX.\n         UNPK  WORK2,WORK1                                        .SPX.\n         MVC   28(5,R15),WORK2+3                                  .SPX.\n         MVC   54(3,R15),WORK2     COLUMN 76-78                   .SPX.\n         MVC   WORK1(4),DIRUSER+36 LINES MODIFIED                 .SPX.\n         L     R0,WORK1                                           .SPX.\n         CVD   R0,WORK1                                           .SPX.\n         OI    WORK1+7,X'0F'                                      .SPX.\n         UNPK  WORK2,WORK1                                        .SPX.\n         MVC   34(5,R15),WORK2+3                                  .SPX.\n         MVC   57(2,R15),WORK2+1   COLUMN 79-80                   .SPX.\n         B     MAIN24A\n*MAIN24  MVC   CARD(L'UPDTE2),UPDTE2  CC WITH SSI                *.PRC.\n*        MVC   CARD+L'UPDTE2(L'NAME),NAME                        *.PRC.\n*        LA    R15,11+CARD          FORMAT SSI                   *.PRC.\n*                  NEW CODE FOR ADD NAME=MEMBER,SSI=XXXXXXXX      .PRC.\n*                  INSTEAD OF   ADD SSI=XXXXXXXX,NAME=MEMBER      .PRC.\nMAIN24   EQU   *                                                  .PRC.\n         MVC   CARD(L'UPDTE1),UPDTE1                              .PRC.\n         MVC   CARD+L'UPDTE1(L'NAME),NAME                         .PRC.\n         LA    R15,CARD+L'UPDTE1+7 LAST BYTE OF NAME              .PRC.\n         CLI   0(R15),C' '         LOOK FOR LAST NONBLANK         .PRC.\n         BNE   *+8                 BRANCH IF FOUND                .PRC.\n         BCT   R15,*-8             LOOP TO CLI                    .PRC.\n         MVC   1(5,R15),=C',SSI='  APPEND KEYWORD                 .PRC.\n         LA    R15,6(,R15)         POINT PAST KEYWORD             .PRC.\n         LA    R0,4\n         LA    R1,DIRUSER\n         BAL   R10,HEXCON\nMAIN24A  EQU   *\n         BAL   R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR READING\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nMAIN30   EQU   *\n         MVC   TTRK(3),DIRTTR\nMAIN31   EQU   *\n         FIND  SYSLIB,TTRK,C\n         LM    R2,R3,BUFFER1       INIT BUFFERS\n         STM   R2,R3,BFRS\n         XR    R5,R5               CLEAR CURRENT MEM REC CNTR\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BNE   MAIN32              NO.\n         XC    PDSDECB,PDSDECB     YES, ISSUE FIRST READ.\n         READ  PDSDECB,SF,(R8),(R2),MF=E\n         SPACE\n*---------------------------------------------------------------------*\n*        READ IN NEXT BLOCK\n*---------------------------------------------------------------------*\n         SPACE\nMAIN32   EQU   *\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BE    MAIN34              YES.\n         L     R2,BFRS             NO...ISSUE READ\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),'S'\nMAIN34   EQU   *\n         LA    R10,MAIN65 .. SET E.O.F. ADDR\n         CHECK PDSDECB\n         L     R15,PDSDECB+16      COMPUTE LEN OF REC READ\n         LH    R6,DCBBLKSI\n         SH    R6,14(R15)\n         L     R7,BFRS             LOAD PNTR TO DATA\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         BNE   MAIN36              NO.\n         L     R2,BFRS+4           YES, INIT NEXT READ\n         ST    R7,BFRS+4\n         ST    R2,BFRS\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),MF=E\nMAIN36   EQU   *\n         TM    SAVRECFM,B'10000000'  RECFM U OR F?\n         BO    MAIN38              YES.\n         LH    R6,0(R7)            NO, MUST BE V ...\n         LA    R7,4(R7)            PROCESS BLOCK DESCRIPTOR\n         SH    R6,=H'4'\nMAIN38   EQU   *\nMAIN40   EQU   *                   RITS/CRBE/CRJE?\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         BZ    MAIN50              NO\n         SPACE\n*---------------------------------------------------------------------*\n*        PROCESS A RITS/CRBE RECORD\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN45              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         BZ    MAIN42              NO\n         CH    R5,MAXLIST          YES, TEST FOR LIMIT.\n         BNL   MAIN45              LIMIT EXCEEDED.\nMAIN42   EQU   *\n         MVC   LINE2+1(8),0(R7)\n         MVC   LINE2+11(80),8(R7)\n         BAL   R10,LOUT            YES, OUTPUT FORMATTED LINE\nMAIN45   EQU   *\n         TM    SWA,SWA1            DECK?\n         BZ    MAIN64              NO.\n         MVC   CARD,8(R7)\n         BAL   R10,PUNCHIT         YES, OUTPUT CARD IMAGE\n         B     MAIN64\n         SPACE\n*---------------------------------------------------------------------*\n*        'LIST' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN50   EQU   *\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN60              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         BZ    MAIN50A             NO\n         CH    R5,MAXLIST          YES, AT LIMIT?\n         BNL   MAIN60              YES, SKIP LISTING\nMAIN50A  EQU   *\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    MAIN51              YES\n         LH    R3,DCBLRECL         RECFM = F OR U.\n         LA    R2,0(R7)\n         B     MAIN52\n         SPACE\nMAIN51   EQU   *\n         MVC   DCBLRECL,0(R7)\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         SH    R3,=H'4'\nMAIN52   EQU   *\n         TM    SWB,SWB1            HEXOUT?\n         BO    MAIN56              YES.\n         TM    SWB,SWB3            IS NUM SPECIFIED?\n         BO    MAIN57              YES.\nMAIN53   EQU   *\n         LR    R15,R3\n         CH    R3,=H'116'\n         BNH   *+8\n         LA    R15,116\n         BCTR  R15,0\n         LA    R1,LINE2+1\n         EX    R15,VARMVC1\nMAIN54   EQU   *\n         LA    R2,116(R2)          OUTPUT OTHER LINES\n         SH    R3,=H'116'\n         BNP   MAIN59              DONE IF NO MORE DATA\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7            TRUNC?\n         BO    MAIN59              YES, QUIT HERE\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN53              NO, LOOP TO CONTINUE OUTPUT\n         SPACE\nMAIN56   EQU   *\n         LA    R15,LINE2+5         OUTPUT LINE IN HEX\n         LR    R0,R3\n         CH    R3,=H'50'           FIFTY BYTES PER LINE\n         BNH   *+8\n         LA    R0,50\n         LR    R1,R2\n         BAL   R10,HEXCON\n         LA    R2,50(R2)           OUTPUT OTHER LINES\n         SH    R3,=H'50'\n         BNP   MAIN59              DONE\n         MVI   LINE2+120,C'*'      FLAG LINE CONTINUATION\n         TM    SWA,SWA7            IS TRUNC SPECIFIED?\n         BO    MAIN59              YES, QUIT.\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN56              LOOP\n         SPACE\nMAIN57   EQU   *\n         SH    R3,=H'8'\n         TM    SAVRECFM,B'10000000' IS IT RECFM=U/F/FB?\n         BO    MAIN57A             YES.\n         MVC   LINE2+1(8),0(R2)    NO, RECFM=V/VB\n         LA    R2,8(0,R2)\n         B     MAIN57B\n         SPACE\nMAIN57A  EQU   *\n         LA    R14,0(R2,R3)\n         MVC   LINE2+1(8),0(R14)\nMAIN57B  EQU   *\n         LA    R1,LINE2+10\n         LR    R15,R3\n         CH    R15,=H'108'\n         BNH   *+8\n         LA    R15,108\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         LA    R2,106(0,R2)\n         SH    R3,=H'106'\n         BNP   MAIN59\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7\n         BO    MAIN59\n         BAL   R10,LOUT\nMAIN58   EQU   *\n         LR    R15,R3\n         LA    R1,LINE2+10\n         CH    R15,=H'106'\n         BNH   *+8\n         LA    R15,106\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         LA    R2,106(0,R2)\n         SH    R3,=H'106'\n         BNP   MAIN59\n         MVI   LINE2+120,C'*'\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE\n         B     MAIN58\n         SPACE\nMAIN59   EQU   *\n         BAL   R10,LOUT            OUTPUT FORMATTED LINE.\n         SPACE\n*---------------------------------------------------------------------*\n*        'DECK' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN60   EQU   *\n         TM    SWA,SWA1            DECK?\n         BZ    MAIN64              NO.\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         BO    MAIN61              YES\n         LH    R3,DCBLRECL         RECFM = U OR F\n         LA    R2,0(R7)\n         B     MAIN62\n         SPACE\nMAIN61   EQU   *\n         MVC   DCBLRECL,0(R7)      RECFM=V/VB\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         SH    R3,=H'4'\nMAIN62   EQU   *\n         LR    R15,R3\n         CH    R3,=H'80'\n         BNH   *+8\n         LA    R15,80\n         BCTR  R15,0\n         EX    R15,VARMVC3\n         TM    SWA,SWA3            UPDTE                          .PRC.\n         BNO   MAIN62A                                            .PRC.\n         CH    R3,=H'80'           IS LRECL=80                    .PRC.\n         BNE   MAIN62A                                            .PRC.\n         CLC   CARD(2),UPDTESUB    IF SUBSITUTE ALREADY THERE     .UPL.\n         BNE   NOTSUB                THEN                         .UPL.\n         TM    SWE,SWE4              IF SYSUPLOG IS OPEN          .UPL.\n         BZ    NOTSUB                   THEN                      .UPL.\n         MVC   UPCARD(8),NAME           PUT MEMBER NAME IN UPCARD .UPL.\n         LA    R15,1(,R5)               LINE NUMBER               .UPL.\n         CVD   R15,WORK1                LINE NUMBER               .UPL.\n         OI    WORK1+7,X'0F'            LINE NUMBER               .UPL.\n         UNPK  UPCARD+9(7),WORK1+4(4)   LINE NUMBER               .UPL.\n         MVC   UPCARD+17(62),CARD    COPY BEGINNING OF CARD IMAGE .SBG.\n         PUT   SYSUPLOG,UPCARD          WRITE RECORD TO SYSUPLOG  .UPL.\nNOTSUB   EQU   *                                                  .UPL.\n         CLC   CARD(2),=C'./'      IS THIS AN UPDTE STATEMENT     .PRC.\n         BNE   MAIN62A                                            .PRC.\n         MVC   CARD(2),UPDTESUB    YES, SUBSTITUTE CHARS          .PRC.\nMAIN62A  EQU   *                                                  .PRC.\n         BAL   R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LOGICAL RECORD\n*---------------------------------------------------------------------*\n         SPACE\nMAIN64   EQU   *\n         LA    R5,1(R5)            UPDATE REC COUNT\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         BO    MAIN32              YES, GO GET NEXT BLOCK.\n         TM    SAVRECFM,B'01000000'  RECFM=V?\n         BZ    *+10                NO\n         MVC   DCBLRECL,0(R7)      YES, USE RECORD DESC. LEN\n         AH    R7,DCBLRECL         UPDATE BUFFER POINTER\n         SH    R6,DCBLRECL         UPDATE BYTES COUNT\n         BP    MAIN40              CONTINUE WITH THIS BLOCK\n         B     MAIN32              GO GET NEXT BLOCK\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF MEMBER OR SDS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN65   EQU   *\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         BO    MAIN70              YES, GO PROCESS IT.\n         ST    R5,WORK2\n         MVC   DIRCRDCT,WORK2\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         BZ    MAIN66              NO\n         TM    SWD,SWD2            SELECT MEMBERS?\n         BNZ   MAIN66              NO.\n         L     R2,CURRENT2+4       YES, UPDATE COUNTS\n         USING NAMTBL,R2\n         MVC   NAMTBL4,DIRPG1\n         MVC   NAMTBL3,DIRCRDCT\n         DROP  R2\nMAIN66   EQU   *\n         CVD   R5,WORK2\n         AL    R5,RECORDS          UPDATE TOTAL REC COUNT\n         ST    R5,RECORDS\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN67              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERISKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG2L),MSG2\n*        ED    LINE2+L'MSG2(L'MSG2A),WORK2+5     5 DIGITS        *.SUM.\n         ED    LINE2+L'MSG2(L'MSG2A),WORK2+4     7 DIGITS         .SUM.\n         BAL   R10,LOUT\nMAIN67   EQU   *\n         B     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DSORG=PS DATASET.\n*---------------------------------------------------------------------*\n         SPACE\nMAIN70   EQU   *\n         ST    R5,RECORDS\n         MVC   LINE1+6(8),=8C'*'\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\n         BAL   R10,PRNT\n         BAL   R10,PRNT\n         CVD   R5,WORK2\n         TM    SWA,SWA0            LIST?\n         BZ    MAIN72              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERISKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG9L),MSG9\n*        ED    LINE2+L'MSG9(L'MSG9A),WORK2+5                     *.SUM.\n         ED    LINE2+L'MSG9(L'MSG9A),WORK2+3                      .SUM.\n         BAL   R10,LOUT\nMAIN72   EQU   *\n         MVI   MEMCNT+1,1          \"SDS\" IS ONE MEMBER\n         CVD   R5,WORK2\n         MVC   LINE1(MSG9L),MSG9\n         MVI   LINE1,C' '\n*        ED    LINE1+L'MSG9(L'MSG9A),WORK2+5                     *.SUM.\n         ED    LINE1+L'MSG9(L'MSG9A),WORK2+3                      .SUM.\n         BAL   R10,PRNT\n         A     R5,TOTALREC\n         ST    R5,TOTALREC\n         B     ENDLIB90\n         EJECT\n*----------------------------------------------------------------------\n*        END-OF-LIBRARY\n*----------------------------------------------------------------------\nENDLIB   EQU   *\n         LA    R8,SYSLIB\n         TM    SWD,SWD0            SELECT OR EXCLUDE SPECIFIED?\n         BZ    ENDLIB05            NO\n         TM    SWD,SWD2            SELECT SPECIFIED?\n         BZ    ENDLIB20            YES.\nENDLIB05 EQU   *\n         MVC   CURRENT1,NAMETBL1\n         USING DIR,R4\nENDLIB10 EQU   *\n         L     R4,CURRENT1\n         CLI   DIRNAME,X'FF'\n         BE    ENDLIB80\n         LH    R15,DIRUSERL\n         LA    R1,DIRUSER(R15)\n         ST    R1,CURRENT1\n         TM    SWD,SWD0+SWD2       WAS SYSIN-EXCLUDE SPECIFIED?\n         BNO   ENDLIB12            NO\n         TM    DIRFLAGS,B'10000000'  ..WAS THIS MEMBER SPECIFIED?\n         BZ    ENDLIB10            NO, SKIP IT.\nENDLIB12 EQU   *\n         BAL   R10,LSTDIR\nENDLIB14 EQU   *\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         BZ    ENDLIB10            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),=8C'?'\n         L     R1,NAMETBL1\nENDLIB15 EQU   *\n         CLI   DIRNAME-DIR(R1),X'FF'\n         BE    ENDLIB18\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         BE    ENDLIB17\nENDLIB16 EQU   *\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         B     ENDLIB15\nENDLIB17 EQU   *\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         BO    ENDLIB16\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB18 EQU   *\n         BAL   R10,PRNT\n         B     ENDLIB10\nENDLIB20 EQU   *\n         MVC   CURRENT2,NAMETBL2\n         USING NAMTBL,R2\nENDLIB22 EQU   *\n         L     R2,CURRENT2\n         CLI   NAMTBL,X'FF'\n         BE    ENDLIB80\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         L     R4,NAMTBL2          GET PNTR TO DIR AREA\n         LTR   R4,R4               IS THERE ONE?\n         BNZ   ENDLIB30            YES.\n         MVC   LINE1+6(8),NAMTBL1  NO, ISSUE MSG\n         MVC   LINE1+16(L'MSG3),MSG3\n         BAL   R10,PRNT\n         B     ENDLIB22\n         SPACE\nENDLIB30 EQU   *                   MEMBER FOUND, LIST INFO.\n         MVC   DIRPG1,NAMTBL4\n         MVC   DIRCRDCT,NAMTBL3\n         BAL   R10,LSTDIR\nENDLIB34 EQU   *\n         TM    DIRFLAGS,B'11000000' IS THIS PROCESSED ALIAS?\n         BNO   ENDLIB22            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),=8C'?'\n         L     R1,NAMETBL1\nENDLIB35 EQU   *\n         CLI   DIRNAME-DIR(R1),X'FF'\n         BE    ENDLIB38\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         BE    ENDLIB37\nENDLIB36 EQU   *\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         B     ENDLIB35\n         SPACE\nENDLIB37 EQU   *\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         BO    ENDLIB36\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB38 EQU   *\n         BAL   R10,PRNT\n         B     ENDLIB22\n         SPACE\n*---------------------------------------------------------------------*\n*        ISSUE END OF LIBRARY MESSAGE\n*---------------------------------------------------------------------*\n         SPACE\nENDLIB80 EQU   *\n         MVC   LINE1(MSG1L),MSG1\n         LH    R15,MEMCNT\n         CVD   R15,WORK1\n         ED    LINE1+L'MSG1(L'MSG1A),WORK1+5\n         L     R15,RECORDS\n         CVD   R15,WORK1\n         AL    R15,TOTALREC\n         ST    R15,TOTALREC\n*        ED    LINE1+L'MSG1+L'MSG1A+L'MSG1AX(L'MSG1B),WORK1+4    *.SUM.\n         ED    LINE1+L'MSG1+L'MSG1A+L'MSG1AX(L'MSG1B),WORK1+3     .SUM.\n         BAL   R10,PRNT\nENDLIB90 EQU   *\n         XC    RECORDS,RECORDS\n         XC    MEMCNT,MEMCNT\n         IC    R15,TTRK+3\n         LA    R15,1(R15)\n         STC   R15,TTRK+3\n         B     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-RUN\n*---------------------------------------------------------------------*\n         SPACE\nENDRUN   EQU   *\n         TM    SWB,SWB0            DEBUG?\n         BO    ENDRUN10            YES, BYPASS FREE CORE\n         SPACE\n*---------------------------------------------------------------------*\n*        FREE WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\n         OC    COR2,COR2           MAKE SURE CORE WAS GOTTEN\n         BZ    ENDRUN10            NOT GOTTEN\n         FREEMAIN V,A=COR2\nENDRUN10 EQU   *\n         TM    SWC,SWC3            TERMINATE MODE?\n         BO    ENDRUN11            YES.\n         MVC   LINE1(L'ENDMSG0),ENDMSG0\n         XR    R15,R15\n         IC    R15,TTRK+3\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  LINE1+L'ENDMSG0(2),WORK1+6(2)\n         MVC   LINE1+L'ENDMSG0+2(ENDMSG1L),ENDMSG1\n         L     R15,TOTALREC\n         CVD   R15,WORK1\n*        ED    LINE1+L'ENDMSG0+L'ENDMSG1+2(L'ENDMSG1A),WORK1+4   *.SUM.\n         ED    LINE1+L'ENDMSG0+L'ENDMSG1+2(L'ENDMSG1A),WORK1+3    .SUM.\n         L     R15,COR2+4\n         SRL   R15,10              CONVERT TO 'K'\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         L     R1,COR7\n         AL    R1,COR8\n         SRL   R1,10\n         SR    R15,R1\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7B,WORK1\n         MVC   LINE1+L'ENDMSG0+ENDMSG1L+4(MSG7L2-1),MSG7+1\nENDRUN11 EQU   *\n         BAL   R10,PRNT            OUTPUT FINAL MSG\n         LA    R8,SYSPUNCH         CLOSE ALL DCBS\n         BAL   R10,TERMIO\n         LA    R8,SYSUPLOG         CLOSE ALL DCBS                 .UPL.\n         BAL   R10,TERMIO                                         .UPL.\n         TM    SWB,SWB0            DEBUG?\n         BO    ENDRUN31            YES, SKIP CLOSING SYSLIB\n         LA    R8,SYSLIB\n         CLOSE SYSLIB\nENDRUN31 EQU   *\n         LA    R8,SYSLIST\n         BAL   R10,TERMIO\n         LA    R8,SYSPRINT\n         BAL   R10,TERMIO\n         TM    SWB,SWB0            DEBUG?\n         BZ    ENDRUN99            NO\n         LH    R2,RETCODE          YES, ABEND\n         ABEND (R2),DUMP\nENDRUN99 EQU   *\n         L     R13,4(R13)\n         LH    R15,RETCODE\n         RETURN (14,12),T,RC=(15)\n         EJECT\n*---------------------------------------------------------------------*\n*        FORMAT AND PRINT THE 'SYSPRINT' LINE FOR A MEMBER\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nLSTDIR   EQU   *\n         ST    R10,SAVE10          SAVE CALLER'S RETURN\n         MVC   LINE1+6(8),DIRNAME\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         BZ    LSTDIR03            NO\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\nLSTDIR03 EQU   *\n         LA    R15,LINE1+L'CAPTIONS-12\n         LA    R0,L'DIRTTR\n         LA    R1,DIRTTR\n         BAL   R10,HEXCON\n         LH    R15,DIRUSERL\n         LTR   R15,R15\n         BNP   LSTDIR10\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         BZ    LSTDIR05            NO.\n         LA    R1,LINE1+L'CAPTIONS\n         LA    R2,DIRUSER\n         BAL   R10,RITSINFO\n         B     LSTDIR10\n         SPACE\nLSTDIR05 EQU   *\n         LA    R15,LINE1+L'CAPTIONS\n         LA    R1,DIRUSER\n         LH    R0,DIRUSERL\n         CH    R0,=H'30'           ARE SPF STATISTICS PRESENT     .SPF.\n         BE    LSTDIR06            POSSIBLY                       .SPX.\n         CH    R0,=H'40'           ARE SPF EXT STATS PRESENT      .SPX.\n         BNE   LSTSPFX             NO, BRANCH                     .SPF.\nLSTDIR06 EQU   *                                                  .SPX.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         BNO   LSTSPFX             NO, BRANCH                     .SPF.\n         TM    DIRTTR+3,X'60'      TTR'S IN USER DATA             .SPF.\n         BNZ   LSTSPFX             YES, THIS ISNT SPF DATA        .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  1(2,R15),WORK1+6(2)                                .SPF.\n         MVI   3(R15),C'.'                                        .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  4(2,R15),WORK1+6(2)                                .SPF.\n*        UNPK  11(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n*        MVC   10(2,R15),11(R15)                                  .SPF.\n*        MVI   12(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+4  YYDDD CREATED                  .SPF.\n         L     R0,WORK1            YYDDD CREATED                  .SPF.\n         BAL   R14,JULIAN                                         .SPF.\n         MVC   9(7,R15),WORK1+1                                   .SPF.\n*        UNPK  21(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n*        MVC   20(2,R15),21(R15)                                  .SPF.\n*        MVI   22(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+8  YYDDD LAST MODIFIED            .SPF.\n         L     R0,WORK1            YYDDD LAST MODIFIED            .SPF.\n         BAL   R14,JULIAN                                         .SPF.\n         MVC   19(7,R15),WORK1+1                                  .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  28(4,R15),WORK1(3)                                 .SPF.\n         MVC   27(2,R15),28(R15)                                  .SPF.\n         MVI   29(R15),C':'                                       .SPF.\n         MVI   32(R15),C':'                                       .SEC.\n         UNPK  33(3,R15),DIRUSER+3(2) SECONDS                     .SEC.\n         MVI   35(R15),C' '                                       .SEC.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   *+14                  THEN                         .SPX.\n         MVC   WORK1(4),DIRUSER+32   GET CURRENT SIZE EXTENDED    .SPX.\n         L     R0,WORK1              GET CURRENT SIZE EXTENDED    .SPX\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   32(6,R15),=X'402020202120'                         .SPF.\n*        ED    32(6,R15),WORK1+5                                  .SPF.\n         MVC   35(8,R15),=X'4020202020202120'                     .SPX.\n         ED    35(8,R15),WORK1+4                                  .SPX.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   *+14                  THEN                         .SPX.\n         MVC   WORK1(4),DIRUSER+32   GET INITIAL SIZE EXTENDED    .SPX.\n         L     R0,WORK1              GET INITIAL SIZE EXTENDED    .SPX\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   38(6,R15),=X'402020202120'                         .SPF.\n*        ED    38(6,R15),WORK1+5                                  .SPF.\n         MVC   43(8,R15),=X'4020202020202120'                     .SPX.\n         ED    43(8,R15),WORK1+4                                  .SPX.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n         N     R0,=A(X'0000FFFF')                                 .SPF.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   *+14                  THEN                         .SPX.\n         MVC   WORK1(4),DIRUSER+36   GET LINES MODIFIED EXTENDED  .SPX.\n         L     R0,WORK1              GET LINES MODIFIED EXTENDED  .SPX\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   44(6,R15),=X'402020202120'                         .SPF.\n*        ED    44(6,R15),WORK1+5                                  .SPF.\n         MVC   51(8,R15),=X'4020202020202120'                     .SPX.\n         ED    51(8,R15),WORK1+4                                  .SPX.\n*        MVC   52(10,R15),DIRUSER+20   USER ID                    .SPF.\n         MVC   61(10,R15),DIRUSER+20   USER ID                    .SPX.\n         CLI   DIRUSERL+1,40       IF EXTENDED STATS              .SPX.\n         BNE   SHOWNO                NO. SHOW NO.                  SBG\n         MVC   69(2,R15),=C'  '       USER ID IS ONLY 8 BYTES     .SPX.\n         MVC   71(3,R15),=C'YES'     YES. SHOW YES.                SBG\n         B     SHOWYES                                             SBG\nSHOWNO   MVC   71(3,R15),=C'NO '                                   SBG\nSHOWYES  B     LSTDIR10                                            SBG\n         SPACE\nJULIAN   EQU   *                                                  .SPF.\n         STM   R15,R1,JULIANS                                     .SPF.\n         XC    WORK2,WORK2                                        .SPF.\n         ST    R0,WORK2+4                                         .SPF.\n         CVB   R1,WORK2            CONVERT DATE TO BINARY         .SPF.\n         XR    R0,R0                                              .SPF.\n         D     R0,=F'1000'         TO SEP YEAR AND DAY            .SPF.\n         ST    R1,WORK2            SAVE YEAR                      .SPF.\n         L     R15,=A(MONTHS1)     FOR STD YEAR                   .SPF.\n         TM    WORK2+3,X'03'       LEAP YEAR?                     .SPF.\n         BNZ   *+8                 NO                             .SPF.\n         L     R15,=A(MONTHS2)     FOR LEAP YEAR                  .SPF.\n         XR    R1,R1                                              .SPF.\nJULIANX  EQU   *                                                  .SPF.\n         SH    R0,0(R15)                                          .SPF.\n         BNP   JULIANY                                            .SPF.\n         LA    R1,3(R1)                                           .SPF.\n         LA    R15,2(R15)                                         .SPF.\n         B     JULIANX                                            .SPF.\n         SPACE 1                                                  .SPF.\nJULIANY  EQU   *                                                  .SPF.\n         AH    R0,0(R15)                                          .SPF.\n         MH    R0,=H'10'                                          .SPF.\n         CVD   R0,WORK2            FOR DAY OF MONTH               .SPF.\n         AL    R1,=A(MONTHS3)      FOR MON IN CHARS               .SPF.\n         MVC   WORK1(8),=X'4020204B4B4B2020'                      .SPF.\n         MVC   WORK1+3(3),0(R1)                                   .SPF.\n         MVC   JULIANS+4(1),WORK2+6 DAY OF MONTH DDYYDDDF         .SPF.\n         ED    WORK1(8),JULIANS+4                                 .SPF.\n         CLI   WORK1+1,C' '                                       .SPF.\n         BNE   *+8                                                .SPF.\n         MVI   WORK1+1,C'0'                                       .SPF.\n         LM    R15,R1,JULIANS                                     .SPF.\n         BR    R14                                                .SPF.\n         SPACE 1                                                  .SPF.\nLSTSPFX  EQU   *                                                  .SPF.\n         CH    R0,=H'32'\n         BNH   *+8\n         LA    R0,32\n         BAL   R10,HEXCON\nLSTDIR10 EQU   *\n         TM    SWA,SWA2            LISTDIR ONLY?\n         BO    LSTDIR90            YES\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         BZ    LSTDIR90            NO\n         MVC   WORK1(4),DIRCRDCT\n         L     R1,WORK1\n         CVD   R1,WORK1\n*        MVC   LINE1+24(L'MSG2A),MSG2A                           *.SUM.\n         MVC   LINE1+22(L'MSG2A),MSG2A                            .SUM.\n*        ED    LINE1+24(L'MSG2A),WORK1+5         5 DIGITS        *.SUM.\n         ED    LINE1+22(L'MSG2A),WORK1+4         7 DIGITS         .SUM.\nLSTDIR90 EQU   *\n         BAL   R10,PRNT\n         L     R10,SAVE10\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        UPON ENTRY, R1=A(BUFFER), R2=A(DIRECTORY ENTRY)\n*---------------------------------------------------------------------*\n         SPACE\nRITSINFO EQU   *\n         CLI   DIRUSERL+1,5        CHECK LENGTH OF USER FIELD\n         BL    UNKNOWN             SHORT.\n         MVC   0(L'PAT1,R1),PAT1\n         ED    0(L'PAT1,R1),0(R2)\n         MVC   10(L'PAT1,R1),PAT1\n         ED    10(L'PAT1,R1),3(R2)\n         XC    WORK1,WORK1\n         MVC   WORK1+2(2),6(R2)\n         L     R15,WORK1\n         CVD   R15,WORK1\n         MVC   WORK2,PAT2\n         ED    WORK2,WORK1+4\n         MVC   23(4,R1),WORK2+4\n         TM    SWD,SWD4+SWD5       CRJE?\n         BO    CRJEINFO            YES.\nCRBEINFO EQU   *\n         MVC   42(3,R1),=C'SEQ'\n         TM    9(R2),X'40'         SEQ/NOSEQ?\n         BO    *+10                SEQ.\n         MVC   40(2,R1),=C'NO'\n         MVC   52(4,R1),=C'SCAN'\n         TM    9(R2),X'80'         SCAN/NOSCAN?\n         BO    *+10\n         MVC   50(2,R1),=C'NO'\n         TM    8(R2),X'40'         FORTRAN FILE?\n         BZ    *+12                NO.\n         MVC   30(7,R1),=C'FORTRAN'\n         BR    R10\n         TM    8(R2),X'20'         OTHER FILE?\n         BZ    *+12                NO.\n         MVC   30(5,R1),=C'OTHER'\n         BR    R10\n         TM    8(R2),X'08'         FLIST FILE?\n         BZ    *+12                NO.\n         MVC   30(5,R1),=C'FLIST'\n         BR    R10\n         TM    SWD,SWD5            RITS?\n         BZ    *+20                YES\n         TM    8(R2),X'10'         OBJMOD FILE?\n         BZ    *+12                NO.\n         MVC   30(6,R1),=C'OBJMOD'\n         BR    R10\n         SPACE\nUNKNOWN  EQU   *\n         MVC   30(7,R1),=C'???????'\n         BR    R10\n         SPACE\nCRJEINFO EQU   *\n         CLI   DIRUSERL+1,11       CHECK USER LENGTH\n         BL    CRBEINFO            SHORT...HANDLE AS CRBE\n         LA    R1,30(R1)           POINT AT ATTR AREA OF LINE\n         CRJE  8,B'00100000','DATA,',5,CRJE20\n         CRJE  8,B'00010000','TEXT,',5,CRJE20\n         CRJE  8,B'00001000','DSLIST,',7,CRJE20\n         CRJE  8,B'00000100','CLIST,',6,CRJE20\n         CRJE  8,B'01000001','FORTH,',6,CRJE20\n         CRJE  8,B'01000000','FORTG,',6,CRJE20\n         CRJE  8,B'00000001','FORTE,',6,CRJE20\n         TM    8(R2),B'10000010'   PL1?\n         BNZ   CRJE15              YES.\n         MVC   0(7,R1),=C'???????' NO, UNKNOWN.\n         BR    R10                 QUIT.\n         SPACE\nCRJE15   EQU   *\n         MVC   0(7,R1),=C'PL1(  ,'\n         XR    R15,R15\n         IC    R15,13(R2)          PL1 SORMARGIN\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(2,R1),WORK1(8)\n         IC    R15,14(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  7(2,R1),WORK1(8)\n         LA    R1,10(R1)\n         CRJE  8,B'10000000','C48),',5,CRJE20\n         MVC   0(5,R1),=C'C60),'\n         LA    R1,5(R1)\nCRJE20   EQU   *\n         CRJE  9,B'10000000','SEQ,',4,CRJE21\n         MVC   0(6,R1),=C'NOSEQ,'\n         LA    R1,6(R1)\nCRJE21   EQU   *\n         TM    8(R2),B'11000011'   PL1 OR FORT?\n         BZ    CRJE22              NO...SKIP SCAN\n         CRJE  9,B'01000000','SCAN,',5,CRJE22\n         MVC   0(7,R1),=C'NOSCAN,'\n         LA    R1,7(R1)\nCRJE22   EQU   *\n         MVC   0(4,R1),=C'BLK='\n         LH    R15,20(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(4,R1),WORK1(8)\n         MVC   8(3,R1),=C',K='\n         MVC   11(3,R1),10(R2)\n         BR    R10\n         EJECT\n*---------------------------------------------------------------------*\n*        *** SUBROUTINES ****\n*---------------------------------------------------------------------*\n         SPACE\nVARMVC1  MVC   0(0,R1),0(R2)       FOR PRINTED OUTPUT\nVARMVC3  MVC   CARD(*-*),0(R2)     FOR PUNCHED OUTPUT\n         SPACE\nSAVERC   EQU   *\n         CH    R1,RETCODE          COMPARE TO CURRENT VALUE\n         BNHR  R14                 RETURN IF NOT HIGHER\n         STH   R1,RETCODE          REPLACE WITH NEW VALUE\n         BR    R14\n         SPACE\nTERMINAT EQU   *\n         LA    R13,SAVEAREA        TERMINATE PROCESSING\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BAL   R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         B     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\nPUTMSG   EQU   *\n         MVC   LINECNT1,LINEMAX    FORCE PAGE EJECT\nPUTMSGXX EQU   *\n         ST    R14,SAVE14          SETUP FOR MSG OUTPUT\n         PUT   SYSPRINT,LINE0\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         L     R14,SAVE14          AND FALL THRU TO CLEARBUF\n         BR    R14\n         SPACE\nPUNCHIT  EQU   *\n         PUT   SYSPUNCH,CARD\n         MVI   CARD,C' '\n         MVC   CARD+1(L'CARD-1),CARD\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        TERMINATE I/O:  CLOSE DCB AND FREE BUFFER POOL\n*---------------------------------------------------------------------*\n         SPACE\nTERMIO   EQU   *\n         TM    DCBOFLGS,OFLGS      DCB OPEN?\n         BZR   R10                 NO\n         CLOSE ((R8))              YES, CLOSE THE DCB\n         FREEPOOL  (R8)            AND FREE THE BUFFER POOL\n         BR    R10                 RETURN\n         SPACE\n*---------------------------------------------------------------------*\n*        STANDARD FILES DCB EXIT ROUTINES\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT1 EQU   *\n         LA    R5,3200             FOR SYSIN & SYSPUNCH\n         B     DCBEXITZ\n         SPACE\nDCBEXITA EQU   *\n         LA    R5,3509             FOR SYSPRINT\n         B     DCBEXITZ\n         SPACE\nDCBEXITB EQU   *\n         LH    R5,=Y(7260)         FOR SYSLIST\nDCBEXITZ EQU   *\n         LH    R4,DCBLRECL         GET LRECL\n         CH    R4,DCBBLKSI         BLKSIZE SPECIFIED?\n         BNH   DCBEXITY            YES.\n         STH   R5,DCBBLKSI         NO, USE DEFAULT.\nDCBEXITY EQU   *\n         XR    R2,R2               FORCE MULT BLKSIZE\n         LH    R3,DCBBLKSI\n         DR    R2,R4\n         MH    R3,DCBLRECL\n         STH   R3,DCBBLKSI\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        PDS DATA READ DCB EXIT ROUTINE\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT2 EQU   *\n         MVC   SAVBLKSI,DCBBLKSI   SAVE DCB PARMS\n         MVC   SAVLRECL,DCBLRECL\n         MVC   SAVRECFM,DCBRECFM\n         MVC   SAVBUFNO,DCBBUFNO\n         MVI   DCBBUFNO,0          BUFFERING HANDLED INTERNALLY\n         CLI   SAVBUFNO,0          IS BUFNO SPECIFIED?\n         BNER  R14                 YES.\n         MVI   SAVBUFNO,2          NO, USE DEFAULT.\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-FILE DETECTED ON SYSLIB\n*---------------------------------------------------------------------*\n         SPACE\nPDSEOF   BR    R10                 BETTER BE SET TO GOOD ADDR\n         SPACE\nSYNERR1  EQU   *\n         SYNADAF   ACSMETH=BPAM    PDS-DATA READ I/O ERROR\n         STM   R14,R12,SYNADSAV    SAVE REGS\n         LR    R2,R1               SAVE POINTER TO MESSAGE\n         BAL   R10,PRNT            --OUTPUT CURRENT LINE\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(78),50(R2)\n         BAL   R14,PUTMSG          REDO LASTLINE.\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(L'HEAD2MEM),HEAD2MEM\n         MVC   LINE0+L'LPDS02I+L'HEAD2MEM(8),NAME\n         BAL   R14,PUTMSG\n         LA    R1,8                SET THE RETURN CODE\n         BAL   R14,SAVERC\n         LM    R14,R12,SYNADSAV    RESTORE REGS\n         SYNADRLS\n         TM    SWB,SWB4            EROPT=TERM/ACC?\n         BZ    SYNERR2             FOR TERM.\n         BR    R14                 FOR ACC.\n         SPACE\nSYNERR2  EQU   *\n         LA    R13,SAVEAREA        TERMINATE PROCESSING\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BAL   R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         B     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\n*---------------------------------------------------------------------*\n*        HEX-BINARY TO HEX-CHARACTER CONVERSION ROUTINE\n*        UPON ENTRY, R0=LENGTH OF SOURCE, R1=A(SOURCE), R15=A(TARGET)\n*---------------------------------------------------------------------*\n         SPACE\nHEXCON   EQU   *\n         IC    R14,0(R1)           PROCESS FOUR LSB'S\n         N     R14,=F'15'\n         IC    R14,HEXTBL(R14)\n         STC   R14,1(R15)\n         IC    R14,0(R1)           PROCESS FOUR MSB'S\n         SRL   R14,4\n         IC    R14,HEXTBL(R14)\n         STC   R14,0(R15)\n         LA    R1,1(R1)\n         LA    R15,2(R15)\n         SH    R0,=H'1'            LOOP?\n         BP    HEXCON              YES.\n         BR    R10                 NO, RETURN.\n         SPACE\n*---------------------------------------------------------------------*\n*        OUTPUT A LINE TO SYSPRINT\n*---------------------------------------------------------------------*\n         SPACE\nPRNT     EQU   *\n         LA    R15,LINE1\n         BAL   R14,SETCC\n         LH    R15,LINECNT1\n         LA    R15,0(R15,R1)\n         STH   R15,LINECNT1\n         CH    R15,LINEMAX         AT LIMIT?\n         BNH   PRNTC               NO.\nPRNTA    EQU   *\n         LA    R15,5\n         STH   R15,LINECNT1\n         MVC   HEAD1PAG,PAGEPAT\n         LH    R15,PAGENUM1\n         LA    R15,1(R15)\n         STH   R15,PAGENUM1\n         CVD   R15,WORK1\n         ED    HEAD1PAG,WORK1+4\n         MVC   LINE0(121),HEAD1\n         BAL   R14,PUTMSGXX\n         MVI   LINE0,C'0'\n         TM    SWD,SWD3            INITIAL PAGE?\n         BZ    PRNTB               YES, SKIP CAPTIONS.\n         MVC   LINE0(L'CAPTIONS),CAPTIONS\n         TM    SWD,SWD7            RITS/CRBE?\n         BZ    *+14                NO.\n         MVC   LINE0+L'CAPTIONS(L'RITSCAP),RITSCAP\n         B     *+10\n         MVC   LINE0+L'CAPTIONS(L'USERCAP),USERCAP\n         TM    SWE,SWE1+SWE2       SPF STATS IN THIS PDS          .SPF.\n         BNO   *+10                NO.                            .SPF.\n         MVC   LINE0+L'CAPTIONS(L'SPFSCAP),SPFSCAP                .SPF.\nPRNTB    EQU   *\n         BAL   R14,PUTMSGXX\n         MVI   LINE1,C'0'\nPRNTC    EQU   *\n         MVC   LINE0,LINE1\n         BAL   R14,PUTMSGXX\n         MVI   LINE1,C' '\n         MVC   LINE1+1(L'LINE1-1),LINE1\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        'SYSLIST' OUTPUT S/R\n*---------------------------------------------------------------------*\n         SPACE\nLOUT     EQU   *\n         LA    R15,LINE2\n         BAL   R14,SETCC\n         TM    SWD,SWD6            TEST FORCE EJECT\n         BO    LOUTC               YES.\n         TM    SWA,SWA5            IS THIS 'EJECT' FORMAT\n         BZ    LOUTA               NO\n         AH    R1,LINECNT2         UPDATE LINECOUNT FOR EJECT FORMAT\n         STH   R1,LINECNT2\n         CH    R1,LINEMAX          AT BOTTOM OF PAGE?\n         BNH   LOUTE               NO\n         B     LOUTC               YES, DO PAGE EJECT AND HEADER-2\n         SPACE\nLOUTA    EQU   *\n         LH    R15,LINECNT2\n         LA    R15,0(R1,R15)\n         CLC   =C'0MEMBER=',LINE2  TEST FOR SPECIAL CASE\n         BNE   LOUTA1              NO.\n         LA    R15,2(,R15)         YES, EXTRA PADDING.\nLOUTA1   EQU   *\n         CH    R15,LINEMAX         TEST FOR LIMIT\n         BH    LOUTB               AT LIMIT\n         AH    R1,LINECNT2         UPDATE LINECNT\n         STH   R1,LINECNT2\n         B     LOUTE               AND OUTPUT THE LINE.\n         SPACE\nLOUTB    EQU   *\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         LH    R1,LINECNT2\nLOUTB1   EQU   *\n         CH    R1,LINEMAX\n         BNL   LOUTB2              PADDING DONE, GO OUTPUT HEADER\n         ST    R1,SAVELOUT\n         L     R1,ALISTDCB\n         PUT   (1),LINE0\n         L     R1,SAVELOUT\n         LA    R1,1(,R1)\n         B     LOUTB1\n         SPACE\nLOUTB2   EQU   *\n         MVI   HEAD2,C'0'\n         L     R1,ALISTDCB\n         PUT   (1),HEAD2\n         MVI   HEAD2,C'1'\nLOUTC    EQU   *\n         NI    SWD,255-SWD6        RESET SWITCH\n         LA    R15,3\n         TM    SWA,SWA5            IS THIS NOEJECT FORMAT?\n         BO    *+8                 NO, IT IS EJECT\n         LA    R15,2(,R15)         +2 FOR BOTTOM IN NOEJECT FORMAT\n         STH   R15,LINECNT2\n         MVC   HEAD2NAM,NAME\n         MVC   HEAD2PAG,PAGEPAT\n         LH    R15,PAGENUM2        UPDATE THE PAGE NUMBER\n         LA    R15,1(R15)\n         STH   R15,PAGENUM2\n         CVD   R15,WORK1\n         ED    HEAD2PAG,WORK1+4\n         L     R1,ALISTDCB\n         PUT   (1),HEAD2           OUTPUT THE PAGE HEADER\n         MVI   LINE2,C'-'\nLOUTE    EQU   *\n         L     R1,ALISTDCB\n         PUT   (1),LINE2           OUTPUT THE FORMATTED LINT\n         MVI   LINE2,C' '          THEN CLEAR THE USED LINE WORKAREA\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         BR    R10\n         SPACE\nSETCC    EQU   *\n         CC    4000,0(R15),1,SETCC9\n         CC    0,0(R15),+,SETCC9\n         CC    3,0(R15),-,SETCC9\n         CC    2,0(R15),0,SETCC9\n         LA    R1,1                FORCE 'DEFAULT'\n         MVI   0(R15),C' '\nSETCC9   EQU   *\n         BR    R14\n         SPACE\nGETLOW   EQU   *\n         L     R1,COR4\n         AR    R0,R1\n         C     R0,COR6\n         BNL   GETBAD\n         ST    R0,COR4\n         B     MAXUSED\n         SPACE\nGETHI    EQU   *\n         L     R1,COR6\n         SR    R1,R0\n         C     R1,COR4\n         BNH   GETBAD\n         ST    R1,COR6\n         L     R15,COR5\n         SR    R15,R1\n         C     R15,COR8\n         BNH   *+8\n         ST    R15,COR8\n         BR    R14\n         SPACE\nGETBASE  EQU   *\n         L     R1,COR3\n         AR    R0,R1\n         C     R0,COR5\n         BNL   GETBAD\n         ST    R0,COR3\nRESETLO  EQU   *\n         MVC   COR4,COR3\nMAXUSED  EQU   *\n         L     R15,COR4\n         SR    R15,R1\n         C     R15,COR7\n         BNH   *+8\n         ST    R15,COR7\n         BR    R14\n         SPACE\nRESETHI  EQU   *\n         MVC   COR6,COR5\n         BR    R14\n         SPACE\nGETBAD   EQU   *\n         MVC   LINE0(L'LPDS10I),LPDS10I\n         BAL   R14,PUTMSGXX\n         B     TERMINAT\n         EJECT\n*---------------------------------------------------------------------*\n*        *** STORAGE AREAS, CONSTANTS, ETC. ****\n*---------------------------------------------------------------------*\n         SPACE\nSAVEAREA DC    9D'0'               STD OS SAVE AREA\nWORK1    DC    1D'0'\nWORK2    DC    1D'0'\nSYNADSAV DC    8D'0'               TO SAVE REGS IN SYNAD EXIT\nCOR1     DC    A(10*1024,500*1024)  MIN/MAX SIZE FOR GETMAIN\nCOR2     DC    A(0,0)              RETURNED ADDR AND SIZE\nCOR3     DC    A(*-*)              BOTTOM OF AREA\nCOR4     DC    A(*-*)              START BOTTOM OF VARIABLE AREA\nCOR5     DC    A(*-*)              TOP OF AREA\nCOR6     DC    A(*-*)\nCOR7     DC    A(0)\nCOR8     DC    A(0)\nTIOT     DC    A(0)                POINTER TO TIOT\nBFRS     DC    2A(0)\nSAVELOUT DC    F'0'\nSAVE10   DC    A(0)                TO SAVE REGS 10\nSAVE14   DC    A(0)                TO SAVE REG 14\nBUFFER0  DC    A(0)                PDS BUFFER LENGTH\nBUFFER1  DC    A(0)                PDS BUFFER #1 ADDRESS\nBUFFER2  DC    A(0)                PDS BUFFER #2 ADDRESS\nTTRK     DC    F'0'                FOR FIND/POINT.\nECB      DC    F'0'\nIOB      DC    0F'0',X'42',X'000000',A(ECB)\nCSW      DC    XL8'0'\nACP      DC    A(*-*),A(SYSLIB)\n         DC    A(0),Y(0,0)\nMBB      DC    XL3'0'\nCCHHR    DC    XL5'0'\nRECORDS  DC    F'0'                COUNT OF TOTAL RECORDS IN LIB\nTOTALREC DC    F'0'                TOTAL NO. OF LRECL PROCESSED\nALCB     DC    A(*-*)\nALISTDCB DC    A(SYSLIST)\nNAMETBL1 DC    A(0)                POINTER TO DIRECTORY TABLE\nNAMETBL2 DC    A(0)                POINTER TO SELECTED NAMES\nCURRENT1 DC    2A(0)               PNTRS TO NAMETBL1 CURRENT\nCURRENT2 DC    2A(0)               PNTRS TO NAMETBL2 CURRENT\nDSCB     CAMLST SEARCH,DSNAME,VOLSER,WORKAREA\n         DC    0D'0'\nWORKAREA DC    XL160'00'           OBTAIN'S WORKAREA\nDSNAME   DC    CL44' '\nVOLSER   DC    CL6' '\nSWITCHES DC    XL5'00'             RUN SWITCHES AND FLAGS         .PRC.\n         ORG   *-5                                                .PRC.\nSWA      DS    X\nSWB      DS    X\nSWC      DS    X\nSWD      DS    X\nSWE      DS    X                                                  .PRC.\n         ORG   ,\nEXLST1   DC    0F'0',X'85',AL3(DCBEXIT1)     SYSIN & SYSPUNCH\nEXLSTA   DC    0F'0',X'85',AL3(DCBEXITA)     SYSPRINT\nEXLSTB   DC    0F'0',X'85',AL3(DCBEXITB)     SYSLIST\nEXLST2   DC    0F'0',X'05',AL3(DCBEXIT2)     FOR PDS DCB\nJFCBADRS DC    X'80',AL3(*-*)\nSAVBLKSI DC    H'0'\nSAVLRECL DC    H'0'\nSAVRECFM DC    X'00'\nSAVBUFNO DC    AL1(0)\nRETCODE  DC    H'0'                RETURN CODE\nPAGENUM1 DC    H'0'                CURRENT SYSPRINT PAGE NUMBER\nPAGENUM2 DC    H'0'                CURRENT SYSLIST  PAGE NUMBER\nLINECNT1 DC    H'0'                CURRENT SYSPRINT LINE NUMBER\nLINECNT2 DC    H'0'                CURRENT SYSLIST  LINE NUMBER\nLINEMAX  DC    H'0'                MAXIMUM LINE NUMBER\nMAXDIR   DC    H'0'\nMAXLIST  DC    H'0'\nMEMCNT   DC    H'0'\n         DC    0F'0'\nNAME2    DC    CL8' '              ALIAS NAME\nNAME     DC    CL8' '              MEMBER NAME\nDDPRINT  DC    CL8'&DDPRINT'       SYSPRINT\nDDLIST   DC    CL8'&DDLIST'        SYSLIST\nDDPUNCH  DC    CL8'&DDPUNCH'       SYSPUNCH\nDDLIB    DC    CL8'&DDLIB'         SYSLIB\nDDIN     DC    CL8'&DDIN'          SYSIN\nDDUPLOG  DC    CL8'&DDUPLOG'       SYSUPLOG                       .UPL.\nSWAX     DC    B'&A(1)&A(2)&A(3)&A(4)&A(5)&A(6)&A(7)&A(8)'\nSWBX     DC    B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'\nSWEX     DC    B'&E(1)&E(2)&E(3)&E(4)&E(5)&E(6)&E(7)&E(8)'        .PRC.\nUPDTE1   DC    C'./ ADD NAME='\nUPDTE2   DC    C'./ ADD SSI=00000000,NAME='\nUPDTESUB DC    C'><'                                              .PRC.\nPAT1     DC    X'4021204B202020'\nPAT2     DC    X'4020202020202120'\nJULIANS  DC    3F'0'\nCARD     DC    CL80' '\nUPCARD   DC    CL80' '                                            .UPL.\nLINE0    DC    CL133' '\nLINE1    DC    CL133' '\nLINE2    DC    CL133' '\n         DC     0D'0'\n         LTORG\nMONTHS1  DC    Y(31,28,31,30,31,30,31,31,30,31,30,31)\nMONTHS2  DC    Y(31,29,31,30,31,30,31,31,30,31,30,31)\nMONTHS3  DC    C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\n*        DC    C' **** &ID - LISTPDS &VERSION (&RELEASE) ****'   *.PRC.\n*        DC    C' **** GSFC - LISTPDS 7.3 (27MAR78) ****'         .PRC.\nHEAD1VER DC    C' ----------  LISTPDS  8.3  ----------- '         .PRC.\nHEXTBL   DC    CL16'0123456789ABCDEF'\nHEAD1    DC    C' '                SYSPRINT HEADING\nHEAD1DAT DC    CL8' '\nHEAD1TIM DC    CL9' '\nHEAD1C1  DC    CL7' '\nHEAD1VOL DC    CL6' '\nHEAD1C2  DC    CL6' '\nHEAD1DSN DC    CL44' ',C'   '\n         ORG   *-69                                               .PRC.\nHEDD1DSN DC    CL(4+44+8+6+7)' -- '      DSN -- VOL=XXXXXX        .PRC.\nHEAD1MEM DC    CL7' '  ... MEMBER= ON SYSLIST\nHEAD1NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         DC    CL10' ',C'PAGE'\nHEAD1PAG DC    CL8' '\nHEAD1R   DC    X'F14021204B4B4B20204021204B20204B2020'\nHEAD1C1R DC    CL7' - VOL='\nHEAD1C2R DC    CL6', DSN='\nHEAD2    DC    C'1'                SYSLIST HEADING\nHEAD2DAT DC    CL8' '\nHEAD2TIM DC    CL9' ',C' - VOL='\nHEAD2VOL DC    CL6' ',C', DSN='\nHEAD2DSN DC    CL44' ',C'   '\nHEAD2MEM DC    CL7'MEMBER='  ... MEMBER= ON SYSLIST\nXEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         ORG   *-84                                               .PRC.\n         DC    CL4' -- '                                          .PRC.\nHEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST                 .PRC.\nHEDD2DSN DC    CL72' -- '                                         .PRC.\n         DC    CL10' ',C'PAGE'\nHEAD2PAG DC    CL8' '\n*AGEPAT  DC    X'4020202020202120'                               *.PRC.\nPAGEPAT  DC    X'4020202020202020'                                .PRC.\nCAPTIONS DC    C'-     NAME       PAGE   RECORDS    T T R C    '\nRITSCAP  DC    C' CREATED  MODIFIED  ACCESSED  ATTRIBUTES'\nUSERCAP  DC    C'USER INFORMATION (HEX)'\n*PFSCAP  DC        C'VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MOD\n*                  ID'                                            .SPF.\n*                     01.00    YY/DDD    YY/DDD HH:MM  XXXX  XXXX  XXXX\n*                USERID                                           .SPF.\nSPFSCAP  DC        C'VER.MOD  CREATED      LAST MODIFIED    SIZE    INI+\n               T     MOD    ID    XTATS'                          .SPX.\n*                     01.00    YY/DDD    YY/DDD HH:MM:SS XXXXXXX XXXXXX\n*              X XXXXXXX  USERID                                  .SPX.\nLPDS01I  DC    C'0LPDS01I  DIRECTORY I/O ERROR - '\nLPDS02I  DC    C' LPDS02I  PDS DATA READ ERROR - '\nLPDS03I  DC    C'0LPDS03I  EXECUTION ABORTED.'\nLPDS04I  DC    C'0LPDS04I  OPEN ERROR FOR '\nLPDS05I  DC    C'0LPDS05I  WARNING--PARAMETER SPECIFICATION ERROR'\nLPDS06I  DC        C'0LPDS06I  INVALID DCB SPECIFICATIONS FOR &DDLIB DD+\n               .  '\nLPDS06I0 DC    C' NOT SUPPORTED.'\nLPDS06I1 DC    C'MACHINE CONTROL CHARACTERS'\nLPDS06I2 DC    C'VARIABLE SPANNED RECORDS'\nLPDS06I3 DC    C'TRACK OVERFLOW'\nLPDS06IA DC    C'BLKSIZE INVALID.'\nLPDS06IB DC    C'INVALID RECFM.'\nLPDS07I  DC        C'0LPDS07I WARNING--RITS/CRBE/CRJE PROCESSING DELETED\n               ,  LIBRARY DCB PARMS NOT COMPATABLE.'\nLPDS08I  DC    C'0LPDS08I  ERROR--PDS DIRECTORY NOT STANDARD FORMAT.'\nLPDS09I  DC    C'0LPDS09I  UNABLE TO OPEN ',CL8' '\n         DC    C'.  OPTION DELETED.'\nLPDS09IL EQU   *-LPDS09I\nLPDS10I  DC    C'0LPDS10I  WORKAREA EXCCEEDED .. RAISE REGION'\nLPDS11I  DC    C'0LPDS11I ONLY DSORG=PS OR DSORG=PO ARE VALID'\nMSG1     DC    C'0*** END OF LIBRARY *** '\nMSG1A    DC    X'402020202120'\nMSG1AX   DC    C' MEMBERS PROCESSED WITH A TOTAL OF'\n*SG1B    DC    X'4020202020202120',C' RECORDS'         7 DIGITS  *.SUM.\nMSG1B    DC    X'40202020202020202120',C' RECORDS'     9 DIGITS   .SUM.\nMSG1L    EQU   *-MSG1\nMSG2     DC    C'0*** END OF MEMBER *** '\n*SG2A    DC    X'402020202120',C' RECORDS PROCESSED   '      5   *.SUM.\nMSG2A    DC    X'4020202020202120',C' RECORDS PROCESSED   '  7    .SUM.\nMSG2L    EQU   *-MSG2\nMSG3     DC    C'****  MEMBER NOT FOUND IN LIBRARY'\nMSG4     DC    C'****  IS AN ALIAS FOR '\nMSG5     DC    C'****  ABOVE MEMBER IS AN ALIAS FOR '\nMSG6     DC    C'0SPECIFIED PARMS --'\nMSG7     DC    C'0WORKAREA SIZE: '\nMSG7A    DC    C'XXX',C'K'\nMSG7L1   EQU   *-MSG7\n         DC    C',  NEVER USED: '\nMSG7B    DC    C'XXX',C'K'\nMSG7L2   EQU   *-MSG7\nMSG8     DC    C'-LIBRARIES:'\nMSG9     DC    C'0*** END OF SEQUENTIAL DATASET *** '\n*SG9A    DC    X'402020202120',C' RECORDS PROCESSED   '        5 *.SUM.\nMSG9A    DC    X'40202020202020202120',C' RECORDS PROCESSED   ' 9 .SUM.\nMSG9L    EQU   *-MSG9\nENDMSG0  DC    C'0*** END OF RUN ***   '\nENDMSG1  DC    C' LIBRARIES PROCESSED WITH A TOTAL OF'\n*NDMSG1A DC    X'4020202020202120',C' RECORDS.'      7 DIGITS    *.SUM.\nENDMSG1A DC    X'40202020202020202120',C' RECORDS.'  9 DIGITS     .SUM.\nENDMSG1L EQU   *-ENDMSG1\nENDMSG2  DC    C' *** OPTIONS IN EFFECT *** '\nENDMSG3  DC    C'SPECIFIED-MEMBERS'\n         SPACE\n*---------------------------------------------------------------------*\n*        DCB'S FOR LISTPDS\n*---------------------------------------------------------------------*\n         SPACE\n         PRINT NOGEN\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPRINT,                +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTA\nSYSLIST  DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDLIST,                 +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTB\nSYSPUNCH DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPUNCH,                +++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\nSYSLIB   DCB   DSORG=PO,MACRF=(R),DDNAME=&DDLIB,EODAD=PDSEOF,      +++++\n               SYNAD=SYNERR1,NCP=1,EXLST=EXLST2\nSYSIN    DCB   DSORG=PS,MACRF=(R),DDNAME=&DDIN,EODAD=BLDSEL90,    ++++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\nSYSUPLOG DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDUPLOG,                +++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n         DCBD  DSORG=(PS,PO),DEVD=(DA)\n         EJECT\nLISTPDS  CSECT ,\n         SPACE\n*---------------------------------------------------------------------*\n*         PARAMETER ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\n         USING PA,R6\nPA       L     R2,0(R4)\n         LH    R1,0(R2)\n         LA    R2,2(R2)            BEGINNING OF STRING\n         LTR   R3,R1               ANY PARMS SEPECIFIED?\n         BZ    PGMINITA            NO PARMS...CONTINUE INIT\n         MVC   LINE1(L'MSG6),MSG6\n         BAL   R10,PRNT\n         LA    R1,LINE1+10\n         LR    R15,R3\n         CH    R15,=H'110'\n         BL    *+8\n         LA    R15,110\n         BCTR  R15,0\n         EX    R15,VARMVC1\n         BAL   R10,PRNT\n         LA    R3,0(R2,R3)         END OF STRING\nPALOOP   CR    R2,R3               END OF PARMS?\n         BNL   PGMINITA            YES, GOTO COMPLETE INIT\n         CLI   0(R2),C','          NULL PARM?\n         BE    PAEND               YES.\n         CLC   =C'LINECNT=',0(R2)\n         BE    PA15\n         CLC   =C'EROPT=',0(R2)\n         BE    PA22\n         CLC   =C'MAXLIST=',0(R2)\n         BE    PA10\n         PACL  LISTDIR,7,OI,SWA,SWA2,NI,SWA,255-SWA0\n         PACL  DEBUG,5,OI,SWB,SWB0\n         PACL  NODEBUG,7,NI,SWB,255-SWB0\n         PACL  LIST,4,OI,SWA,SWA0\n         PACL  NOLIST,6,NI,SWA,255-SWA0\n         PACL  DECK,4,OI,SWA,SWA1\n         PACL  NODECK,6,NI,SWA,255-SWA1\n         PACL  UPDTE,5,OI,SWA,SWA3\n         PACL  NOUPDTE,7,NI,SWA,255-SWA3\n         PACL  SSI,3,OI,SWA,SWA6\n         PACL  NOSSI,5,NI,SWA,255-SWA6\n         PACL  RITS,4,NI,SWD,255-SWD5,OI,SWD,SWD4\n         PACL  CRBE,4,NI,SWD,255-SWD4,OI,SWD,SWD5\n         PACL  CRJE,4,OI,SWD,SWD4+SWD5\n         PACL  TRUNC,5,OI,SWA,SWA7\n         PACL  NOTRUNC,7,NI,SWA,255-SWA7\n         PACL  HEXOUT,6,OI,SWB,SWB1\n         PACL  NOHEXOUT,8,NI,SWB,255-SWB1\n         PACL  NUM,3,OI,SWB,SWB3\n         PACL  NONUM,5,NI,SWB,255-SWB3\n         PACL  EJECT,5,OI,SWA,SWA5\n         PACL  NOEJECT,7,NI,SWA,255-SWA5\n         PACL  SELECT,6,NI,SWD,255-SWD2\n         PACL  EXCLUDE,7,OI,SWD,SWD2\n         PACL  SEL,3,OI,SWE,SWE0                                  .SEL.\n         PACL  NOSEL,5,NI,SWE,255-SWE0                            .SEL.\n         PACL  SPF,3,OI,SWE,SWE1                                  .SPF.\n         PACL  NOSPF,5,NI,SWE,255-SWE1                            .SPF.\n         OI    SWC,SWC0              FLAG BAD KEYWORK\nPABAD    CLI   0(R2),C','            FIND NEXT KEYWORK\n         BE    PALOOP\n         LA    R2,1(,R2)\n         CR    R2,R3\n         BL    PABAD\nPAERROR  OI    SWC,SWC0            FLAG PARM ERROR\n         B     PGMINITA            AND GOTO COMPLETE INIT.\nPAEND    CLI   0(R2),C','          COMMA?\n         BNE   PALOOP              NO, LOOP.\n         LA    R2,1(R2)            YES, BUMP OVER IT.\n         B     PALOOP\nPA10     LA    R2,8(,R2)\n         XR    R15,R15\n         CR    R2,R3\n         BNL   PAERROR\nPA10A    CR    R2,R3\n         BNL   PA10B\n         CLI   0(R2),C','\n         BE    PA10B\n         CLI   0(R2),C'0'\n         BL    PAERROR\n         CLI   0(R2),C'9'\n         BH    PAERROR\n         MH    R15,=H'10'\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,=F'15'           AND MASK OFF HIGH BITS\n         LA    R15,0(R1,R15)\n         LA    R2,1(R2)\n         B     PA10A\nPA10B    N     R15,=F'32767'\n         STH   R15,MAXLIST\n         OI    SWA,SWA4            FLAG MAXLIST= SPECIFIED.\n         B     PAEND\nPA15     LA    R2,8(R2)            LINECNT\n         XR    R15,R15\n         CR    R2,R3\n         BNL   PAERROR\nPA15A    CR    R2,R3\n         BNL   PA15B\n         CLI   0(R2),C','\n         BE    PA15B\n         CLI   0(R2),C'0'\n         BL    PAERROR\n         CLI   0(R2),C'9'\n         BH    PAERROR\n         MH    R15,=H'10'\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,=F'15'           AND MASK OFF HIGH BITS\n         LA    R15,0(R1,R15)\n         LA    R2,1(R2)\n         B     PA15A\nPA15B    N     R15,=F'32767'\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         B     PAEND\nPA22     LA    R2,6(R2)            EROPT=\n         PACL  TERM,4,NI,SWB,255-SWB3\n         PACL  ACC,3,OI,SWB,SWB4\n         B     PAERROR\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE RUN OPTIONS\n*---------------------------------------------------------------------*\n         SPACE\n         USING PRMLST,R6\nPRMLST   TM    SWC,SWC0            PARM ERROR?\n         BZ    PRMLST0         ... NO\n         MVC   LINE1(L'LPDS05I),LPDS05I\n         BAL   R10,PRNT\n         LA    R1,4\n         BAL   R14,SAVERC\nPRMLST0  MVI   LINE1,C'-'\n         BAL   R10,PRMLSTXZ\n         P1    SWB,SWB0,DEBUG,5\n         P1    SWA,SWA2,LISTDIR,7\n         TM    SWD,SWD4+SWD5          RITS/CRBE/CRJE\n         BZ    PRMLST20               NO\n         BO    PRMLST19               YES, CRJE\n         P1    SWD,SWD4,RITS,4\n         P1    SWD,SWD5,CRBE,4\n         B     PRMLST20\nPRMLST19 P1    SWD,SWD4+SWD5,CRJE,4\nPRMLST20 TM    SWA,SWA2               LISTDIR?\n         BO    PRMLST50            YES\n         P2    SWA,SWA0,LIST,4\n         P2    SWB,SWB3,NUM,3\n         P2    SWA,SWA5,EJECT,5\n         P2    SWA,SWA7,TRUNC,5\n         P2    SWB,SWB1,HEXOUT,6\n         P2    SWA,SWA1,DECK,4\n         P2    SWA,SWA3,UPDTE,5\n         P2    SWA,SWA6,SSI,3\n         P2    SWE,SWE1,SPF,3                                    JDM1\nPRMLST50 MVC   0(8,R2),=C'LINECNT='\n         LH    R1,LINEMAX\n         LA    R1,1(,R1)                                          .LCT.\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CH    R1,=H'999'\n         BNH   *+14\n         UNPK  8(5,R2),WORK1\n         LA    R2,2(,R2)\n         LA    R2,11(,R2)\n         BAL   R10,PRMLSTXX\n         TM    SWA,SWA4\n         BZ    PRMLST55\n         MVC   0(8,R2),=C'MAXLIST='\n         LH    R1,MAXLIST\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CH    R1,=H'999'\n         BNH   *+14\n         UNPK  8(5,R2),WORK1\n         LA    R2,2(,R2)\n         LA    R2,11(,R2)\n         BAL   R10,PRMLSTXX\nPRMLST55 MVC   0(6,R2),=C'EROPT='\n         MVC   6(3,R2),=C'ACC'\n         TM    SWB,SWB4\n         BZ    *+14\n         MVC   6(4,R2),=C'TERM'\n         LA    R2,1(,R2)\n         LA    R2,9(,R2)\n         TM    SWD,SWD0            SELECTED MEMBERS?\n         BZ    PRMLST60\n         BAL   R10,PRMLSTXX\n         P1    SWD,SWD2,SELECT,6,BR=BO\n         P1    SWD,SWD2,EXCLUDE,7\n         MVC   0(L'ENDMSG3,R2),ENDMSG3\n         LA    R2,L'ENDMSG3(,R2)\nPRMLST60 BAL   R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE LCB INFO\n*---------------------------------------------------------------------*\n         SPACE\n         MVC   LINE1(L'MSG8),MSG8\n         BAL   R10,PRNT\n         MVI   LINE1,C'0'\n         XR    R3,R3         INIT LIB COUNT\n         L     R2,ALCB\n         USING LCB,R2\nLCBLST00 CLI   LCB,X'FF'\n         BE    LCBLST90\n         LA    R3,1(,R3)   INCR LIB COUNT\n         CVD   R3,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  LINE1+5(2),WORK1\n         MVI   LINE1+8,C'-'\n*        MVC   LINE1+10(4),=C'VOL='                              *.PRC.\n*        MVC   LINE1+14(6),LCBVOLNO                              *.PRC.\n*        MVC   LINE1+22(4),=C'DSN='                              *.PRC.\n*        MVC   LINE1+26(44),LCBDSNAM                             *.PRC.\n         MVC   LINE1+10(44),LCBDSNAM                              .PRC.\n         MVC   LINE1+58(6),LCBVOLNO                               .PRC.\n         MVC   LINE1+72(8),=C'DSORG=??'\n         TM    LCBDS1DS,B'10000000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'IS'\n         TM    LCBDS1DS,B'01000000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'PS'\n         TM    LCBDS1DS,B'00100000'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'DA'\n         TM    LCBDS1DS,B'00000010'\n         BZ    *+10\n         MVC   LINE1+78(2),=C'PO'\n         MVC   LINE1+82(7),=C'RECFM=?'\n         TM    LCBDS1RF,B'11000000'  FILL IN THE RECFM\n         BO    LCBLST32\n         BZ    LCBLST33\n         TM    LCBDS1RF,B'01000000'   V?\n         BO    LCBLST31               YES\n         MVI   LINE1+88,C'F'\n         B     LCBLST33\nLCBLST31 MVI   LINE1+88,C'V'\n         B     LCBLST33\nLCBLST32 MVI   LINE1+88,C'U'\nLCBLST33 TM    LCBDS1RF,B'00010000'\n         BZ    *+8\n         MVI   LINE1+89,C'B'\n         TM    LCBDS1RF,B'00001000'\n         BZ    *+8\n         MVI   LINE1+90,C'S'\n         TM    LCBDS1RF,B'00100000'\n         BZ    *+8\n         MVI   LINE1+90,C'T'\n         TM    LCBDS1RF,B'00000100'\n         BZ    *+8\n         MVI   LINE1+91,C'A'\n         TM    LCBDS1RF,B'00000010'\n         BZ    *+8\n         MVI   LINE1+91,C'M'\nLCBLST50 MVC   LINE1+94(6),=C'LRECL='\n         LH    R1,LCBDS1LR\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+100(5),WORK1                                *.PRC.\n         LA    R1,LINE1+100                                       .PRC.\n         MVC   0(7,R1),=X'40202020212040'                         .PRC.\n         ED    0(6,R1),WORK1+5                                    .PRC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         BNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         B     *-14                BACK TO CLI                    .PRC.\n         MVC   LINE1+107(8),=C'BLKSIZE='\n         LH    R1,LCBDS1BL\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+115(5),WORK1                                *.PRC.\n         LA    R1,LINE1+115                                       .PRC.\n         MVC   0(7,R1),=X'40202020212040'                         .PRC.\n         ED    0(6,R1),WORK1+5                                    .PRC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         BNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         B     *-14                BACK TO CLI                    .PRC.\n         BAL   R10,PRNT\n         LA    R2,LCBEND\n         B     LCBLST00\n         DROP  R2\nLCBLST90 EQU   *\n*\n         OI    SWD,SWD3            TURN OFF FIRST TIME SW\n         MVC   HEAD1C1,HEAD1C1R\n         MVC   HEAD1C2,HEAD1C2R\n         B     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        *** INITIALIZATION COMPLETE ****\n*---------------------------------------------------------------------*\n         SPACE\nPRMLSTXX CR    R2,R3\n         BNL   PRMLSTXY\n         MVI   0(R2),C','\n         LA    R2,1(,R2)\n         BR    R10\nPRMLSTXY ST    R10,SAVE10\n         BAL   R10,PRNT\n         L     R10,SAVE10\nPRMLSTXZ MVC   LINE1+3(L'ENDMSG2),ENDMSG2\n         LA    R2,L'ENDMSG2+LINE1+4\n         LA    R3,LINE1+70\n         BR    R10\n*\n         DC    0D'0'\n         LTORG\n         EJECT\n*---------------------------------------------------------------------*\n*        DEFINE THE DSECT'S HERE\n*---------------------------------------------------------------------*\n         SPACE\nLCB      DSECT ,\nLCBDSNAM DC    CL44' '             LIBRARY'S DATASET NAME\nLCBVOLNO DC    CL6' '              LIBRARY'S VOLUME SERIAL\nLCBJFCDS DC    X'00'               JFCB DSORG\nLCBJFCRF DC    X'00'               JFCB RECFM\nLCBJFCLR DC    H'0'                JFCB LRECL\nLCBJFCBL DC    H'0'                JFCB BLKSIZE\nLCBDS1DS DC    X'00'               DSCB DSORG\nLCBDS1RF DC    X'00'               DSCB RECFM\nLCBDS1LR DC    H'0'                DSCB LRECL\nLCBDS1BL DC    H'0'                DSCB BLKSIZE\nLCBDIR   DC    H'0'                MAX DIR-BLKSIZE/TRK ON THIS VOL\nLCBEND   DC    0F'0'\nLCBLEN   EQU   LCBEND-LCB\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nDIR      DSECT\nDIRCRDCT DC    XL4'0'              RECORD COUNT\nDIRPG1   DC    H'0'                PAGE NUMBER\nDIRFLAGS DC    B'00000000'         FLAGS\n         DC    X'00'               NOT USED\nDIRUSERL DC    H'0'                LENGTH OF USER DATA\nDIRNAME  DC    CL8' '              MEMBER NAME\nDIRTTR   DC    XL4'0'\nDIRUSER  EQU   *\nDIREND   EQU   *\nDIRLEN   EQU   *-DIR    ... PLUS LEN OF 'USER DATA'\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nNAMTBL   DSECT\nNAMTBL1  DC    CL8' '\nNAMTBL2  DC    A(*-*)\nNAMTBL3  DC    F'0'\nNAMTBL4  DC    H'0'\nNAMTBL5  DC    H'0'\nNAMTBLXX EQU   *-NAMTBL\n         SPACE\n         DC    0D'0'\n         END   LISTPDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOADIT": {"ttr": 8458, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\n\\x00\\n\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&NAME    LOADIT  &REG,&SYMBOL,&TYPE\n         LCLC  &A\n&A       SETC '&SYMBOL'(1,1)\n         AIF ('&A' EQ '(').REGFORM\n&NAME    L&TYPE &REG,&SYMBOL\n         MEXIT\n.REGFORM ANOP\n&NAME    L&TYPE &REG,0&SYMBOL\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MSG": {"ttr": 8705, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x9c\\x00\\x9c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 156, "newlines": 156, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&NAME    MSG\n         GBLB &MSGUSED\n         LCLA &OP,&COLUMN,&L1,&L2,&L3,&N,&DISP,&CT\n         LCLC &D,&E\n         ACTR 400\n&NAME    STM 14,1,MSGREGS    SAVE REGS 14,15,0,1.\n         AIF (&MSGUSED).LOOP\n&MSGUSED SETB 1\n         B MSGSKIP           BRANCH AROUND CONSTANTS AND SUBROUTINES\nMSGBDW   DC F'0'             BLOCK DESCRIPTOR WORD\nMSGRDW   DC F'0'             RECORD DESCRIPTOR WORD\nMSGCC    DC C'0'             CARRIAGE CONTROL\nMSGTEXT  DS CL147\nMSGEDIT  DC CL12' '          EDITING AREA FOR DECIMAL STRINGS\nMSGMOVE  MVC 0(0,15),0(14)\nMSGPAT   DC X'40',9X'20',X'2120'  EDITING PATTERN\nMSGREG   DS F                REGISTER CONTENTS FOR TRANSLATION\nMSGREGS  DC 4F'0'            CONTENTS OF REGS 0-15 AT ENTRY TO MSG\nMSGRTRN  DS F                RETURN ADDRESS FOR WRITE SUBROUTINE\nMSGWORK  DC D'0'\nMSGTAB   DC C'0123456789ABCDEF'        STRING FOR TRANSLATIONS TO HEX\nMSGTABAD DC A(MSGTAB-C'0')   ADDRESS OF TRANSLATE TABLE\nMSGDEC   CVD 0,MSGWORK       ROUTINE TO MAKE DECIMAL STRINGS\n         MVC MSGEDIT,MSGPAT  RESTORE EDITING PATTERN.\n         ED MSGEDIT,MSGWORK+2     EDIT.\n         LR 0,14             SAVE RETURN ADDRESS.\n         LA 14,MSGEDIT+11    REG 14 = LAST DIGIT ADDRESS IN MSGEDIT\n         SR 14,1             REG 14 = FIRST DIGIT ADDRESS\n         EX 1,MSGMOVE        COPY STRING TO TEXT AREA.\n         LR 14,0\n         BR 14\nMSGUNPK  UNPK 0(15,15),0(8,1)\n         LA 1,7(1)\n         LA 15,14(15)\n         BCT 0,MSGUNPK\n         BR 14\nMSGWRITE ST 14,MSGRTRN       SAVE RETURN ADDRESS\n         L 15,=V(MSGWRITE)   REG 15 = ENTRY POINT OF MSGWRITE CSECT\n         LA 1,MSGBDW         REG 1 = ADDRESS OF MESSAGE\n         BALR 14,15          WRITE THE MESSAGE.\n         L 14,MSGRTRN\n         BR 14               RETURN TO THE MACRO CALL.\nMSGSKIP  EQU *\n.LOOP    AIF (&OP GE N'&SYSLIST).FIN\n&OP      SETA &OP+1\n&N       SETA N'&SYSLIST(&OP)\n         AIF (&N EQ 1).N1\n&D       SETC '&SYSLIST(&OP,1)'\n&E       SETC '&D'(1,1)\n         AIF ('&E' EQ 'X').COPYHEX\n         AIF ('&E' EQ 'R').COPYREG\n         AIF ('&E' EQ 'C').COPYCHR\n         AIF ('&E' EQ 'D').COPYDEC\n.ERROR1  MNOTE 'OPERAND &OP SKIPPED BECAUSE OF SYNTAX ERROR.'\n         AGO .LOOP\n.ERROR2  MNOTE 'TRUNCATED OPERANDS BECAUSE OF EXCESSIVE LENGTH'\n         AGO .FIN\n.N1      ANOP\n&D       SETC '&SYSLIST(&OP)'\n&E       SETC '&D'(1,1)\n         AIF ('&E' EQ '''').NOTE\n         AIF ('&E' EQ 'C').C\n         AGO .ERROR1\n.C       MVI MSGCC,&D        SET CARRIAGE CONTROL\n         AGO .LOOP\n.NOTE    ANOP\n&L3      SETA K'&SYSLIST(&OP)-2   LENGTH OF NOTE\n         AIF (&COLUMN+&L3 GT 132).ERROR2\n         AIF (&COLUMN NE 0).SKIP2\n         MVC MSGTEXT(&L3),=C&SYSLIST(&OP)\n         AGO .SKIP4\n.SKIP2   MVC MSGTEXT+&COLUMN.(&L3),=C&SYSLIST(&OP)\n         AGO .SKIP4\n.COPYHEX AIF ('&SYSLIST(&OP,3)' EQ '').Q3\n&L3      SETA &SYSLIST(&OP,3)*2        NUMBER OF OUTPUT HEX BYTES\n         AGO .Q4\n.Q3      ANOP\n&L3      SETA (L'&SYSLIST(&OP,2))*2    COPY LENGTH FROM SYMBOL TABLE\n.Q4      AIF (&COLUMN+&L3 GT 132).ERROR2\n&DISP    SETA 0              RESET &DISP IF PREVIOUSLY USED.\n         AIF (&N LT 4).Q5\n&DISP    SETA &SYSLIST(&OP,4)          DISPLACEMENT, IF SPECIFIED\n.Q5      ANOP\n&CT      SETA &L3/14+1\n         LA 0,&CT            NUMBER OF UNPK'S REQUIRED\n         AIF ('&D' EQ 'XR').Q1\n         LA 1,&SYSLIST(&OP,2)+&DISP    SOURCE ADDRESS, SYMBOL FORM\n         AGO .Q2\n.Q1      LA 1,&DISP.(&SYSLIST(&OP,2))  SOURCE ADDRESS, REGISTER FORM\n.Q2      LA 15,MSGTEXT+&COLUMN         DESTINATION ADDRESS\n         BAL 14,MSGUNPK      BRANCH TO UNPK SUBROUTINE\n.TR2     L 14,MSGTABAD\n         TR MSGTEXT+&COLUMN.(&L3),0(14)\n.SKIP4   ANOP\n&COLUMN  SETA &COLUMN+&L3\n         AGO .LOOP\n.COPYREG AIF (&COLUMN+8 GT 132).ERROR2\n         AIF ('&SYSLIST(&OP,2)' EQ '0').R0\n         AIF ('&SYSLIST(&OP,2)' EQ '1').R1\n         AIF ('&SYSLIST(&OP,2)' EQ '14').R14\n         AIF ('&SYSLIST(&OP,2)' EQ '15').R15\n         ST &SYSLIST(&OP,2),MSGREG\n.RX      ANOP\n&L3      SETA 8              LENGTH\n         UNPK MSGTEXT+&COLUMN.(9),MSGREG(5)\n         AGO .TR2\n.R0      MVC MSGREG,MSGREGS+8\n         AGO .RX\n.R1      MVC MSGREG,MSGREGS+12\n         AGO .RX\n.R14     MVC MSGREG,MSGREGS\n         AGO .RX\n.R15     MVC MSGREG,MSGREGS+4\n         AGO .RX\n.COPYCHR ANOP                COPY AN EBCDIC FIELD.\n         AIF ('&SYSLIST(&OP,3)' EQ '').QC1\n&L3      SETA &SYSLIST(&OP,3)     ACCEPT LENGTH FROM 3RD. OPERAND.\n         AGO .QC2\n.QC1     ANOP\n&L3      SETA L'&SYSLIST(&OP,2)  TAKE LENGTH FROM SYMBOL TABLE\n.QC2     ANOP\n         AIF (&COLUMN+&L3 GT 132).ERROR2\n&DISP    SETA 0              RESET &DISP I6 PREVIOUSLY USED.\n         AIF (&N LT 4).QC3\n&DISP    SETA &SYSLIST(&OP,4)     DISPLACEMENT IF SPECIFIED\n.QC3     AIF ('&D' EQ 'CR').QC4\n         MVC MSGTEXT+&COLUMN.(&L3),&SYSLIST(&OP,2)+&DISP\n         AGO .SKIP4\n.QC4     MVC MSGTEXT+&COLUMN.(&L3),&DISP.(&SYSLIST(&OP,2))\n         AGO .SKIP4\n.COPYDEC AIF ('&SYSLIST(&OP,3)' EQ '').Q6\n&L3      SETA &SYSLIST(&OP,3)     LENGTH WAS SPECIFIED.\n         AGO .Q7\n.Q6      ANOP\n&L3      SETA 10             DEFAULT FIELD WIDTH\n.Q7      AIF (&COLUMN+&L3 GT 132).ERROR2\n&DISP    SETA 0              RESET &DISP.\n         AIF (&N LT 4).Q8\n&DISP    SETA &SYSLIST(&OP,4)     GET DISPLACEMENT SPECIFICATION.\n.Q8      AIF ('&D' EQ 'DR').Q9    TEST FOR REGISTER FORM.\n         L 0,&SYSLIST(&OP,2)+&DISP     REG 0 = VALUE\n         AGO .Q10\n.Q9      LR 0,&SYSLIST(&OP,2)     REG 0 = VALUE\n.Q10     LA 15,MSGTEXT+&COLUMN    REG 15 = TEXT ADDRESS\n         LA 1,&L3-1          REG 1 = FIELD WIDTH - 1\n         BAL 14,MSGDEC\n         AGO .SKIP4\n.FIN     AIF (&COLUMN EQ 0).EXIT\n&L1      SETA &COLUMN+5\n&L2      SETA &L1+4\n         MVI MSGRDW+1,&L1    SET RECORD LENGTH\n         MVI MSGBDW+1,&L2    SET BLOCK LENGTH\n         BAL 14,MSGWRITE     BRANCH TO MESSAGE WRITE SUBROUTINE\n.EXIT    LM 14,1,MSGREGS     RESTORE REGS 14,15,0,1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NEWCSECT": {"ttr": 8709, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x003\\x003\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n         NEWCSECT &NAME=GO\n.**********************************************************************\n.*                 N  E  W  C  S  E  C  T                             *\n.*       THIS MACRO ESTABLISHED THE CSECT NAME WITH THE DEFAULT       *\n.*       NAME OF \"GO\" UNLESS OTHERWISE SPECIFIED. R12 IS THE BASE     *\n.*       AND A SECOND BASE REGISTER, R11 IS ALSO ESTABLISED. IF THE   *\n.*       SECOND BASE IS NOT REQUIRED, SIMPLY USE R11. THE SAVE        *\n.*       AREA IS INSIDE THE NEWCSECT MACRO.                           *\n.*       NEWCSECT ALSO DOES ALL SAVE AREA CHAINING.                   *\n.*         EXAMPLE -       NEWCSECT NAME=MYPROGM                      *\n.**********************************************************************\n         LCLA  &A\n&NAME    CSECT\n&A       SETA ((K'&NAME+2)/2)*2+4\n         B &A.(0,15)         BRANCH AROUND NAME.\n&A       SETA K'&NAME\n         DC AL1(&A)          LENGTH OF NAME\n         DC CL&A'&NAME'      NAME OF THIS CSECT\n         STM 14,12,12(13)    SAVE REGISTERS.\n         LR 12,15            REG 12 = ENTRY POINT ADDRESS\n         LA 11,4095(12)\n         LA 11,1(11)         REG 11 = ENTRY POINT ADDRESS + HEX 1000\n         USING &NAME,12,11\n         LR 15,13            REG 15 = OLD SAVE AREA ADDRESS\n         LA 13,SAVE&SYSNDX   REG 13 = NEW SAVE AREA ADDRESS.\n         ST 15,4(13)         LINK SAVE AREA.\n         ST 13,8(15)         LINK SAVE AREA.\n         B SAVE&SYSNDX+72    BRANCH AROUND THE NEW SAVE AREA.\nSAVE&SYSNDX DC 18F'0'        NEW SAVE AREA\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\nFR0      EQU 0\nFR2      EQU 2\nFR4      EQU 4\nFR6      EQU 6\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OFFLOAD$": {"ttr": 8711, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0e\\x00'\\x00\\x965\\x7f\\x01\\x17\\x03/\\x14A\\x00\\x1d\\x00?\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.14", "flags": 0, "createdate": "1996-12-22T00:00:00", "modifydate": "2017-02-01T14:41:27", "lines": 29, "newlines": 63, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=CBT.CBT492.FILE093.PDS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(OFFLOADW)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DISP=SHR,DSN=SBGOLOB.OBJECT(OFFLOAD)\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=SHR,DSN=SBGOLOB.OBJECT(OFFLOAD)\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB493093\n SETCODE AC(0)\n ENTRY   OFFLOAD\n ALIAS   OFFLOADW\n NAME    OFFLOAD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OFFLOADW": {"ttr": 8713, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02 \\x00)\\x00\\x91\\x13o\\x01\\x17\\x03/\\x146\\x05y\\x04\\x1f\\x05g\\xf8\\xc3\\xc8\\xc1\\xd9\\xc9\\xc4@@@'", "ispf": {"version": "02.32", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "2017-02-01T14:36:29", "lines": 1401, "newlines": 1055, "modlines": 1383, "user": "8CHARID"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OFFLOA01": {"ttr": 9225, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x02\\x04\\x00&\\x00\\x91\\x13o\\x01\\t'/\\x01\\x00\\x04\\xeb\\x04\\x1f\\x00{\\xc7\\xd9\\xc5\\xc7@@@@@@\"", "ispf": {"version": "02.04", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "2009-09-29T01:00:26", "lines": 1259, "newlines": 1055, "modlines": 123, "user": "GREG"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OFFLOA02": {"ttr": 9737, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n\\x00\\x00E\\x00\\x91\\x13o\\x01\\x15)\\x8f\\x178\\x05u\\x04\\x1f\\x05c\\xf7\\xc3\\xc8\\xc1\\xd9\\xc9\\xc4@@@'", "ispf": {"version": "10.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "2015-10-25T17:38:45", "lines": 1397, "newlines": 1055, "modlines": 1379, "user": "7CHARID"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OFFLOOLD": {"ttr": 10497, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x04\\x1f\\x04\\x1f\\x00\\x00\\xd6\\xd3\\xc4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 1055, "newlines": 1055, "modlines": 0, "user": "OLD"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OFFLOOLE": {"ttr": 10761, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x03\\x005\\x00\\x91\\x13o\\x01\\x08\\x06\\x1f\\x15F\\x04\\x9c\\x04\\x1f\\x00\\x08\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "02.03", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "2008-03-01T15:46:35", "lines": 1180, "newlines": 1055, "modlines": 8, "user": "GREG"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PDSLOAD$": {"ttr": 11272, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x009\\x00\\x965\\x7f\\x01\\x17\\x03?\\x019\\x00\\x1d\\x00?\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "1996-12-22T00:00:00", "modifydate": "2017-02-02T01:39:39", "lines": 29, "newlines": 63, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,USER=SBGOLOB,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE093\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE093(PDSLOADW)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DISP=SHR,DSN=SBGOLOB.OBJECT(PDSLOADW)\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=SHR,DSN=SBGOLOB.OBJECT(PDSLOADW)\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n SETSSI  CB493093\n ENTRY   PDSLOAD\n ALIAS   PDSLOADW\n NAME    PDSLOAD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSLOADW": {"ttr": 11274, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n\\x01\\x004\\x01\\x12\\x01\\x0f\\x01\\x17\\x03\\x1f\\x01$\\x08\\xae\\x07\\xaa\\x01l\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "10.01", "flags": 0, "createdate": "2012-01-10T00:00:00", "modifydate": "2017-01-31T01:24:34", "lines": 2222, "newlines": 1962, "modlines": 364, "user": "SBGOLOB"}, "text": "PDSLOAD  TITLE 'P D S L O A D  **  LOAD IEBUPDTE INPUT TO A PDS'\n* ---------- Updated by Gerhard Postpischil ---- Jan 2012 ---------- *\n* Note that Greg Price and Gerhard Postpischil have the same initials.\n* ----------------------------------------------------------------.SBG.\n* Added version level.  Since there are so many levels before     .SBG.\n* here, I am starting with Version 10.0.                          .SBG.\n* ----------------------------------------------------------------.SBG.\n* Optional DDNAME of SYSUPLOG to ensure data integrity of files   .SBG.\n* which should have the UPDTE(><) characters in column 1, and     .SBG.\n* which should not be changed to ./ .  See below for details.     .SBG.\n* //SYSUPLOG is \"an exception file\", created by LISTPDS or OFFLOAD.SBG.\n* ----------------------------------------------------------------\n* Corrected program for 8-digit ISPF userids.\n*           (Sam Golob, Greg Price, and Bill Godfrey)\n* Also forced extended ISPF stats when they were there before,\n* even if the counts were not bigger than 65535.  Version 10.1\n* ----------------------------------------------------------------\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 17, 2008\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='CTL(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE USED TO LOOK\n*         FOR THE ADD AND ALIAS CARDS.   GERHARD POSTPISCHIL    GP06315\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM THAT CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESN'T CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n*        11NOV2006 - ADDED CTL PARM OPTION TO SUPPORT ADDITIONAL LEVEL\n*                    OF ./ SUBSTITUTION E.G., MEMBERS W/SMP UPDATES\n*                  - ALSO CHANGED PARM PARSING - ANY ORDER NOW ALLOWED\n* GERHARD POSTPISCHIL                                           GP06315\n*----------------------------------------------------------------------\n*        17FEB2008 - ADD SYNAD EXIT ETC. TO ACQUIRE AND DISPLAY\n*                    I/O ERROR MESSAGE WHEN WRITE TO PDS FAILS.\n*                    ABEND U0101 AFTER WRITE I/O ERROR.\n*        10MAY2009 - DO NOT MAKE ALIAS WHEN REAL MEMBER NOT MADE.\n*                  - NOW COMPLETE THE ALLOWED RECFM COMBO SET:\n*                    FIXED-LENGTH INPUT WITH VARIABLE-LENGTH\n*                    OUTPUT WITH TRAILING BLANKS TRUNCATION.\n*        29SEP2009 - ISPF STATISTICS ENHANCEMENTS:                 0909\n*                    - PROCESS SECONDS PART OF TIMESTAMP.\n*                    - SUPPORT ISPF EXTENDED STATISTICS.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*        05JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS.\n*                    ADD { X'C0' SUPPORT TO ALPHANUM TRANSLATE\n*                    TABLE.  IF YOU WANT TO GET RID OF THE MEMBER\n*                    NAME VALIDITY CHECK ENTIRELY, THEN UNCOMMENT\n*                    THE STATEMENT:\n*                    \"B    BYPVALID\"\n*                    AFTER THE LABEL \"SIMPLE\".\n* SAM GOLOB\n*----------------------------------------------------------------------\n*        06JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS, PART DEUX:\n*                    SAM'S SOLUTION WORKS, BUT IS ONE I FIND\n*                    UNDESIRABLE (BABY - BATHWATER)\n*                    INSTEAD I ADDED A PARM OPTION NAME=\n*       (DEFAULT)    NAME=ASIS    BYPASS ALL CHECKS\n*                    NAME=CHECK   ALLOW ALL PRINTABLE CHARACTERS\n*                                 (EXCEPT COMMA) USING CODEPAGE 037\n*                    NAME=IBM     ENFORCE STRICT IBM JCL STANDARDS\n*                  - FIXED LRECL FOR UNLIKE RECFM COPY\n*                  - ADDED NON-SDB BLOCK SIZE CODE BACK IN FOR MVS 3.8\n* GERHARD POSTPISCHIL                                           GP12006\n*----------------------------------------------------------------------\n*        17OCT2015 - READ SYSUPLOG IF PRESENT, WHICH CONTAINS A LIST\n*                    OF EXCEPTIONS TO THE UPDTE(XX) SUBSTITUTION.\n*                    SYSUPLOG DATA IS GENERATED BY AN EXPERIMENTAL\n*                    VERSION OF LISTPDS/LISPDS, ONE OF THE PROGRAMS\n*                    THAT GENERATE THE IEBUPDTE-UNLOADED-PDS FILE\n*                    USED AS INPUT TO THIS PROGRAM.\n*                    SOMETIMES A LINE IN THE INPUT FILE BEGINS WITH\n*                    THE 2 CHARACTERS IN UPDTE(XX) NOT BECAUSE THEY\n*                    WERE ORIGINALLY ./ BUT BECAUSE THAT'S WHAT THEY\n*                    ALWAYS WERE, AND SHOULD REMAIN.\n*                    THE SYSUPLOG FILE IDENTIFIES WHICH LINES IN WHICH\n*                    MEMBERS SHOULD NOT BE CHANGED TO ./ IN THE FIRST\n*                    2 COLUMNS, EVEN THOUGH THEY HAVE THE UPDTE(XX)\n*                    CHARACTERS. THE RECORDS IN SYSUPLOG HAVE THE\n*                    MEMBER NAME IN THE FIRST 8 COLUMNS AND A 7-DIGIT\n*                    LINE NUMBER IN COLUMNS 10 THROUGH 16.\n*                    THE LINE NUMBER INDICATES A COUNTED LINE,\n*                    NOT A SEQUENCE NUMBER IN AN INPUT LINE.\n*                    THE MEMBER NAMES IN THE INPUT FILE AND IN THE\n*                    SYSUPLOG FILE MUST BE IN ASCENDING ORDER.\n*                    ENDLESS LOOP AFTER PARMNCTL WAS FIXED, WHICH\n*                    OCCURRED WHEN UPDTE(XX) IS MISSPELLED IN PARM.\n* EX-PRC GUY\n*----------------------------------------------------------------------\n*        17OCT2015 - ADD PARM=CK3 AS REQUESTED BY SAM GOLOB FOR\n*                    EXPERIMENTING WITH REDUCING UNDESIRED CHANGES\n*                    OF UPDTE(XX) TO ./ BY ONLY CHANGING XX TO ./\n*                    IF COLUMN 3 IS BLANK.\n*                    CK3 MIGHT INTRODUCE ANOTHER PERHAPS LESSER PROBLEM\n*                    OF NOT PROPERLY RESTORING ./LABEL STATEMENTS.\n*                    UNDESIRED CHANGES OF XX TO ./ CAN STILL OCCUR\n*                    IF COLUMN 3 IS BLANK.\n*                    CK3 CAN REDUCE THE RELIABILITY OF SYSUPLOG IF\n*                    SYSUPLOG IS USED AT THE SAME TIME, SO ANY\n*                    USEFULNESS OF CK3 WOULD ONLY BE SEEN WHEN\n*                    SYSUPLOG IS NOT USED.\n* EX-PRC GUY\n*----------------------------------------------------------------------\n*        23OCT2015 - Added reporting for the number of SYSUPLOG   .SBG.\n*                    records read for each member which has them. .SBG.\n* SAM GOLOB                                                       .SBG.\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER IS\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n* ------------------------------------------------------------------ *\n         MACRO ,\n&NM      TRENT &TAB,&VAL,&OFF,&FILL=                    ADDED ON 86311\n.*\n.*   This macro is used to create translate and translate and test\n.*     tables in compact fashion.\n.*\n.*   The table may be built by (separate) DC statements, or by\n.*     a TRENT entry with a FILL= operand and a name field.     GP12005\n.*\n.*   Any name field is attached to first expanded DC, if any\n.*     First positional is name of table to be modified; may be\n.*       null after first occurrence and after a FILL\n.*     Second positional is value to be placed in table; may be\n.*       null after first occurrence. May be expression.\n.*     Subsequent values are offsets in self-defining form, i.e.,\n.*       X'nn', C'x', integer, equate value, or absolute expression.\n.*     A sublist may be used, offset in first value, repeat count\n.*       in second.\n.*     When the last parm is null, no final ' ORG ' is created.\n.*       (requested by trailing comma)\n.*     When no parameters are supplied, a final ' ORG ' is expanded.\n.*\n.*       ex.:  upper case translate:\n.*       UPTAB DC    256AL1(*-UPTAB)     or\n.*       UPTAB TRENT FILL=(*-UPTAB)\n.*             TRENT UPTAB,*-UPTAB+X'40',(X'81',9),(X'91',9),(X'A2,8)\n.*\n         GBLC  &ZZ@TAB,&ZZ@VAL\n         LCLC  &N\n         LCLA  &I,&J\n&J       SETA  N'&SYSLIST\n&N       SETC  '&NM'\n         AIF   (T'&FILL EQ 'O').DATA                            GP12005\n         AIF   ('&N' NE '').BUILD                               GP12005\n         MNOTE 8,'TRENT WITH FILL= REQUIRES A LABEL'            GP12005\n         MEXIT ,                                                GP12005\n.*   BUILD TRANSLATE OR TRT TABLE                               GP12005\n.*                                                              GP12005\n.BUILD   ANOP  ,                                                GP12005\n&N       DC    256AL1(&FILL)                                    GP12005\n&ZZ@TAB  SETC  '&N'                                             GP12005\n&N       SETC  ''                                               GP12005\n         AIF   (&J EQ 0).MEND                                   GP12005\n.*   EXPAND TABLE MODIFICATIONS\n.*\n.DATA    AIF   (&J EQ 0).ORG\n         AIF   ('&TAB' EQ '').NOTAB\n&ZZ@TAB  SETC  '&TAB'\n.NOTAB   AIF   ('&VAL' EQ '').NOVAL\n&ZZ@VAL  SETC  '&VAL'\n.NOVAL   AIF   (&J LT 3).MEND\n&I       SETA  2\n.LOOP    AIF   (&I GE &J).DONE\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)' EQ '').LOOP\n         AIF   (N'&SYSLIST(&I) EQ 2).PAIR\n         ORG   &ZZ@TAB+&SYSLIST(&I)\n&N       DC    AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.PAIR    ORG   &ZZ@TAB+&SYSLIST(&I,1)\n&N       DC    (&SYSLIST(&I,2))AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.DONE    AIF   ('&SYSLIST(&J)' EQ '').MEND\n.ORG     ORG   ,\n.MEND    MEND  ,\n* ------------------------------------------------------------------ *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         L     R4,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* ------------------------------------------------------------------ *\n         GBLC  &VER                                               .SBG.\n&VER     SETC  'V10.1'                                            .SBG.\n* ------------------------------------------------------------------ *\n         LCLB  &NODIAG\n&NODIAG  SETB  1\n* ------------------------------------------------------------------ *\n         SPACE\nPDSLOAD  CSECT\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATE '   MVS 3.8        GP06315\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:F,V->V (TRUNC)'\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11,R12\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LA    R12,1(R15,R11)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         MVC   SYNADMSG,SYNADWTO   PRIME I/O ERROR MESSAGE      FEB2008\n         SPACE 1\n*   VALIDITY CHECKING FOR MEMBER NAMES IS SUPPRESSED BY DEFAULT GP12006\n*   TO CHANGE THE DEFAULT, ACTIVATE THE DESIRED LA INSTRUCTION: GP12006\n*        LA    R0,CHARIBM          STRICT IBM NAME CHECK        GP12006\n*        LA    R0,CHAR037          ANY PRINTABLE EXCEPT COMMA   GP12006\n*        LA    R0,0                NO CHECKING                  GP12006\n*        ST    R0,@TRTTAB                                       GP12006\n*        MVI   CHARIBM+C'-',0      ALLOW OS/360 HYPHEN IN NAME  GP12006\n         SPACE 1\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPAGATOR\n         MVI   LINE-1,C' '         BLANK PROPAGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'        CONVERSION CODE (./)\n         MVC   CTLMODEL(2),UPDTE   CONTROL CARD CODE (./)       GP06315\n         MVC   CTLMODEL+2(10),=C' ADD NAME='                    GP06315\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BNP   PARMDONE                                         GP06315\nPARMLOOP CLI   2(R1),C','                                       GP06315\n         BNE   PARMNCOM                                         GP06315\n         LA    R3,1                SKIP COMMA                   GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCOM CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMBAD             NO, BYPASS COMPARE\n         CLC   =C'NEW',2(R1)       IS IT NEW, AS PER IEBUPDTE?  GP06315\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nTRYSPF   CLC   =C'SPF',2(R1)       IS IT SPF                    GP06315\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nPARMSX   CLC   =C'CK3',2(R1)       IS IT CK3                    OCT2015\n         BNE   PARMCX                                           OCT2015\n         OI    FLAG1,CK3           YES, CHECK FOR BLANK IN 3    OCT2015\n         LA    R3,3                SET SKIP LENGTH              OCT2015\n         B     PARMBUMP            AND SKIP                     OCT2015\nPARMCX   CLC   =C'S(',2(R1)        IS IT S( ?                   GP06315\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,L'MEMSEL        SET MAX LOOP COUNT           GP06315\nPARMML   CLI   2(R1),C')'                                       GP06315\n         BE    PARMME\n         MVC   0(1,R15),2(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)           BUMP SKIP SIZE               GP06315\n         BCT   R0,PARMMIG          OK IF MORE                   GP06315\n         B     PARMBAD             ALL DONE, BUT MISSING ')'    GP06315\nPARMMIG  BCT   R14,PARMML          LOOP FOR MEMBER NAME         GP06315\n         CLI   2(R1),C')'          PROPER TERMINATION ?         GP06315\n         BL    PARMBAD             NO, FAIL                     GP06315\nPARMME   LA    R3,1                POINT PAST PAREN             GP06315\n         B     PARMBUMP            SKIP TO NEXT OPERAND         GP06315\nPARMMX   CH    R0,=H'5'            IS PARM LONG ENOUGH ?        GP12006\n         BL    PARMBAD               NO                         GP12006\n         CLC   =C'NAME=',2(R1)     IS IT NAME CHECK ?           GP12006\n         BNE   PARMNN                NO                         GP12006\n         LA    R3,5                SKIP KEYWORD                 GP12006\n         XC    @TRTTAB,@TRTTAB     RESET PRIOR, JUST IN CASE    GP12006\n         CH    R0,=H'5'            END OF PARM ?                GP12006\n         BNH   PARMBUMP              YES; DONE                  GP12006\n         CLI   5+2(R1),C','        NULL VALUE ?                 GP12006\n         BE    PARMBUMP              YES                        GP12006\n         LA    R3,8                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHARIBM         POINT TO IBM TEST TABLE      GP12006\n         CLC   =C'IBM',2+5(R1)     IS IT IBM?                   GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         CLC   =C'JCL',2+5(R1)     IS IT ALTERNATE?             GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         LA    R3,9                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,0               RESET TEST TABLE ADDRESS     GP12006\n         CLC   =C'ASIS',2+5(R1)    SKIP TESTING ?               GP12006\n         BE    PARMHTAB              YES                        GP12006\n         LA    R3,10               SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHAR037         SET FOR CODEPAGE 037 EXC ,   GP12006\n         CLC   =C'CHECK',2+5(R1)   TEST 037 PRINTABLES?         GP12006\n         BNE   PARMBAD               NO; BAD PARAMETER          GP12006\nPARMHTAB ST    R14,@TRTTAB         SAVE TRANSLATE TABLE ADDRESS GP12006\n         B     PARMBUMP              AND SKIP TO NEXT FIELD     GP12006\nPARMNN   CH    R0,=H'7'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'CTL(',2(R1)      IS IT CTL(XX)                GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   8(R1),C')'          CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   CTLMODEL(2),6(R1)   YES, SAVE NEW CONTROLS       GP06315\n         LA    R3,7                  SKIP SEVEN                 GP12006\n         B     PARMBUMP                                         GP06315\nPARMNCTL CH    R0,=H'9'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'UPDTE(',2(R1)    IS IT UPDTE(XX)              GP06315\n*        BNE   PARMNCTL                   (WAS ENDLESS LOOP)    *.VTO.\n         BNE   PARMBAD                    (FIX ENDLESS LOOP)     .VTO.\n         CLI   10(R1),C')'         CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   UPDTE,8(R1)         YES, SAVE NEW CONVERSION     GP06315\n         LA    R3,9                                             GP06315\nPARMBUMP AR    R1,R3               NEXT PARM                    GP06315\n         SR    R0,R3               RESIDUAL LENGTH              GP06315\n         BP    PARMLOOP                                         GP06315\n         B     PARMDONE                                         GP06315\nPARMBAD  WTO   'PDSLOAD: INVALID PARM FIELD'                    GP06315\n         ABEND 100\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\nPARMDONE MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         MVC   VTODCBW(VTODCBL),VTODCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         LR    R5,R4               FOR ERROR MESSAGE, IF ANY    GP12006\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXLE  R15,R15,HAVEUT1                                  GP12006\n         MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS1),MSGMISS1                      GP12006\n         MVC   LINE+1(8),DCBDDNAM-IHADCB(R4)                    GP12006\n         BAL   R14,REPORT          DISPLAY WARNING              GP12006\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXH   R15,R15,MISSUT2     SHOW FILE MISSING            GP12006\nHAVEUT1  LA    R5,PDSDCBW          RESTORE OUTPUT DCB ADDRESS   GP12006\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LR    R5,R4               FOR ERROR MESSAGE            GP12006\n         B     MISSUT2                                          GP12006\n         SPACE 1\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\n         SPACE 1\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         LA    R0,80               MINIMM DATA LENGTH           GP12006\n         AH    R0,DWLIN            ADJUST FOR RECFM=V           GP12006\n         CH    R0,LRECL(,R4)       INPUT LRECL<80?              GP12006\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         DEVTYPE DCBDDNAM-IHADCB(R5),DOUBLE   EXIT NEEDS TYPE   GP12006\n         BXH   R15,R15,MISSUT2                                  GP12006\n         CLI   DOUBLE+2,X'20'      UCB3DACC                     GP12006\n         BNE   MISSUT2               NO; CAN'T BE PDS           GP12006\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),DCBOFOPN                               GP12006\n         BO    OKUT2\nMISSUT2  MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS2),MSGMISS2                      GP12006\n         MVC   LINE+1+STRMIDD2-STRMISS2(8),DCBDDNAM-IHADCB(R5)  GP12006\n         BAL   R14,REPORT          DISPLAY THE ERROR MESSAGE    GP12006\n         LA    R15,16\n         B     EXIT\n         SPACE 1\n*   SYSUT2 DCB EXIT - IF NOT SPECIFIED, USE DCB PARAMETERS FROM GP12006\n*   SYSUT1/SYSIN. CODE ADDED TO ADJUST LRECL BY FOUR IF F->V OR GP12006\n*   V->F REQUESTED.                                             GP12006\n*                                                               GP12006\n         PUSH  USING                                            GP12006\n**       USING UT2EXO,R15         JUST IN CASE - BUT FIX ASMA303W D1701\n         USING IHADCB,R1           MAKE (MY) LIFE EASIER        GP12006\nUT2EXO   LH    R2,LRECL(,R4)       COPY INPUT LENGTH (DEFAULT)  GP12006\n         TM    DCBRECFM,X'C0'      NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    DCBLRECL,DCBLRECL   RECFM=U SO FORCE LRECL=0     GP12006\n         BR    R14                 RETURN\nUT2EX2   MVC   DCBRECFM,RECFM(R4)  YES, COPY INPUT RECFM        GP12006\nUT2EX3   TM    DCBRECFM,X'80'      FIXED ?                      GP12006\n         BNZ   UT2EX3B               YES; ELSE                  GP12006\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS     GP12006\nUT2EX3B  CLC   =H'0',DCBLRECL      IS LRECL SPECIFIED?          GP12006\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n*   WHEN INPUT AND OUTPUT ARE BOTH F OR BOTH V, NO ADJUSTMENT   GP12006\n*   IS NECESSARY. FOR F->V, ADD 4, FOR V->F, SUBTRACT 4         GP12006\n         TM    RECFM(R4),X'80'     FROM F ?                     GP12006\n         BNZ   UT2FROF               YES                        GP12006\n         TM    DCBRECFM,X'80'      TO F ?                       GP12006\n         BZ    UT2BLK                NO; JUST CHECK BLOCK       GP12006\n         SH    R2,=H'4'            ADJUST FOR V->F              GP12006\n         B     UT2BLK                CHECK BLOCK                GP12006\nUT2FROF  TM    DCBRECFM,X'80'      OUTPUT ALSO F ?              GP12006\n         BNZ   UT2BLK                YES; NO ADJUSTMENT         GP12006\n         LA    R2,4(,R2)           ALLOW FOR OUTPUT RDW         GP12006\nUT2BLK   STH   R2,DCBLRECL         SET NEW LRECL                GP12006\nUT2EX4   SR    R7,R7               PREP FOR DIVIDE              GP12006\n         ICM   R7,3,DCBBLKSI       GET BLOCK SIZE               GP12006\n         BNZR  R14                   HOPE FOR THE BEST          GP12006\n         LH    R2,DCBLRECL         GET RECORD LENGTH BACK       GP12006\n         L     R3,CVTPTR(,0)       GET CVT                      GP12006\n         TM    CVTDCB-CVTMAP(R3),X'80'   XA OR LATER ?          GP12006\n         BNZR  R14                   YES; ASSUME SDB AVAILABLE  GP12006\n         IC    R3,DOUBLE+3         GET DEVICE TYPE              GP12006\n         LA    R0,X'0F'            MAKE DASD TYPE MASK          GP12006\n         NR    R3,R0               ISOLATE SUBTYPE              GP12006\n         SLL   R3,1                MAKE HALFWORD OFFSET         GP12006\n         LH    R7,MVSBLK(R3)       GET (SUB)OPTIMAL SIZE        GP12006\n         TM    DCBRECFM,X'80'      FIXED?                       GP12006\n         BZ    UT2BLKV             NO; HANDLE VARIABLE BLOCK    GP12006\n         SR    R6,R6                                            GP12006\n         DR    R6,R2               NUMBER OF RECORDS IN BLOCK   GP12006\n         LTR   R7,R7               ANY ?                        GP12006\n         BP    *+8                   YES                        GP12006\n         LA    R7,1                DEFAULT TO ONE               GP12006\n         MR    R6,R2               NEW BLOCK SIZE               GP12006\n         B     UT2BLKST              YES; USE IT                GP12006\nUT2BLKV  LA    R2,4(,R2)           MINIMUM BLOCK SIZE           GP12006\n         CR    R7,R2               ADEQUATE BLOCK SIZE ?        GP12006\n         BNL   UT2BLKST              YES; USE IT                GP12006\n         LR    R7,R2               USE LRECL+4 FOR BLOCK        GP12006\nUT2BLKST STH   R7,DCBBLKSI         SHOULD WORK ?                GP12006\n         BR    R14                 CONTINUE                     GP12006\n         POP   USING                                            GP12006\n*          0-7   ???? 2311 2301 2303 2321 9345  2305 2305       GP12006\nMVSBLK   DC    H'4096,3625,4096,2446,4906,22928,3210,3516'      GP12006\n*          8-F   2314 3330  3340 3350  3375  333D  3380  3390   GP12006\n         DC    H'7294,13030,8368,19069,17600,13030,23476,27998' GP12006\n         SPACE 1\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  SOME OF US ARE STUCK WITH MVS 3.8, SO NON-SDB CODE ADDED     GP12006\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         SPACE\n         LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         SPACE\n         SR    R15,R15                                            .VTO.\n         ST    R15,VTOSTAT                                        .VTO.\n         ST    R15,VTOEOF                                         .VTO.\n         LA    R3,VTODCBW                                         .VTO.\n         DEVTYPE DCBDDNAM-IHADCB(R3),DOUBLE                       .VTO.\n         LTR   R15,R15                                            .VTO.\n         BNZ   VTOSET                                             .VTO.\n         LA    R6,OPEN                                            .VTO.\n         MVI   0(R6),X'80'                                        .VTO.\n         OPEN  ((R3),INPUT),MF=(E,(R6))                           .VTO.\n         ST    R3,VTOSTAT                                         .VTO.\nVTOSET   EQU   *                                                  .VTO.\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     NI    FLAG1,255-FGNOCON   CHECK FOR UPDTE TRANSLATE    GP06315\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   CTLMODEL(2),0(R15)  CONTROL STATEMENT?           GP06315\n         BNE   COPY                NO\n         SR    R0,R0               YES,                           .VTO.\n         ST    R0,COUNTIN           RESET COUNTER                 .VTO.\n         OI    FLAG1,FGNOCON       NO UPDTE TRANSLATE           GP06315\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,80-1            GET LENGTH CODE IF FIXED LEN   C0909\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,80-1             LENGTH CODE OF CONTROL STMT    C0909\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               ENSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n* --- >                                          JAN 2017 < --- *\n*       IF ODE4 (4TH PARAMETER) CONTAINS AN 8-CHARACTER         *\n*       USERID, THEN THERE IS NO SPACE BETWEEN IT AND THE       *\n*       SECONDS FIELD.  THEREFORE ODE5, IF IT EXISTS, REALLY    *\n*       CONTAINS 0DE6.  BUT THE QUANTITIES IN ODE5 AND ODE4     *\n*       THEN HAVE TO BE ADJUSTED, IF THAT IS THE CASE.          *\n* --- >                                                   < --- *\n*--------->                        TEST DISPLAY BELOW\n         AIF   (&NODIAG).NODIAG1\n         MVC   LINE,LINE-1\n         BAL   R14,REPORT\n.NODIAG1 ANOP\n*--------->                        TEST DISPLAY ABOVE\n         TM    ODE4+6,X'80'        ANY TEXT IN COMMENT FIELD?\n         BZ    BASIC (NOT COPY)    NO, ONLY BASIC IEBUPDTE DATA HERE\n         LH    R15,ODE4+4          GET LENGTH OF STRING\n         LA    R0,50               GET LENGTH IF SS ADDED TO STRING\n         CR    R15,R0              IS SS GLUED ON TO 8-CHAR USER ID?\n         BNE   OP2GOON1            NO, SO NO PARSING HASSLES\n*--------->                        TEST DISPLAY BELOW\n         AIF   (&NODIAG).NODIAG2\n         MVC   LINE,LINE-1\n         HEX   LINE+1,8,ODE3\n         HEX   LINE+21,8,ODE4\n         HEX   LINE+41,8,ODE5\n         HEX   LINE+61,8,ODE6\n         BAL   R14,REPORT\n.NODIAG2 ANOP\n*--------->                        TEST DISPLAY ABOVE\n*\nOPTGOON0 DS    0H                  ODE4 ALSO DESCRIBES ODE5'S DATA\n         MVC   ODE7(8),ODE6        SLIDE OPERAND INDICATORS UP\n         MVC   ODE6(8),ODE5        SLIDE PREVIOUS ONE UP TOO\n         MVI   ODE5+6,X'80'        SHOW ODE5 OCCUPIED\n         LA    R0,2                GET THE LENGTH OF SECONDS DIGITS\n         STH   R0,ODE5+4           SET LENGTH INTO ODE\n         L     R1,ODE4             POINT ISPF STATS STRING\n         LA    R1,48(,R1)          POINT PAST IT TO GET TO SS\n         ST    R1,ODE5             SAVE ADDRESS OF SECONDS DIGITS\n         MVI   ODE4+5,48           REDUCE STATS LENGTH TO REMOVE SS\nOP2GOON1 DS    0H\n* --- >             END OF THIS OPERATION        JAN 2017 < --- *\n*--------->                        TEST DISPLAY BELOW\n         AIF   (&NODIAG).NODIAG3\n         MVC   LINE,LINE-1\n         HEX   LINE+1,8,ODE3\n         HEX   LINE+21,8,ODE4\n         HEX   LINE+41,8,ODE5\n         HEX   LINE+61,8,ODE6\n         BAL   R14,REPORT\n.NODIAG3 ANOP\n*--------->                        TEST DISPLAY ABOVE\nBASIC    DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         TM    FLAG1,FGNOCON       NO UPDTE TRANSLATE ?         GP06315\n         BNZ   NOTUPDTE            CORRECT; SKIP AROUND         GP06315\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         TM    FLAG1,CK3           WAS CK3 SPECIFIED?           OCT2015\n         BZ    NOTCK3              NO                           OCT2015\n         CLI   2(R14),C' '         YES, IS COLUMN 3 BLANK?      OCT2015\n         BNE   NOTUPDTE            NO, DON'T CHANGE IT          OCT2015\nNOTCK3   EQU   *                                                OCT2015\n         BAL   R1,VTOTEST          YES, CHECK FOR EXCEPTION       .VTO.\n         LTR   R15,R15             IS IT IN EXCEPTION LIST        .VTO.\n         BZ    NOTEXCEP            NOT IN EXCEPTION LIST. GO ON.  .SBG.\n         ST    R0,SAVER0           COUNT EXCEPTION RECORDS        .SBG.\n         LA    R0,1                INCREMENT                      .SBG.\n         A     R0,UPS                SYSUPLOG                     .SBG.\n         ST    R0,UPS                  RECORD COUNT               .SBG.\n         L     R0,SAVER0           RESTORE WORK REGISTER          .SBG.\n         B     NOTUPDTE            EXCEPTIONS ARE NOT UPDATED.    .SBG.\nNOTEXCEP DS    0H                  CARD IS NOT ON EXCEPTION LIST  .SBG.\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nVTOTEST  L     R15,VTOSTAT         IS THERE A SYSUPLOG DD?        .VTO.\n         LTR   R15,R15             IF NOT                         .VTO.\n         BZR   R1                  THEN RETURN NOT-IN-LIST        .VTO.\n         STM   R14,R3,VTOSAVE      SAVE REGS                      .VTO.\n         L     R2,VTOPREV          POINT TO LAST SPARE RECORD     .VTO.\n         LTR   R2,R2               IF THIS IS FIRST TIME          .VTO.\n         BZ    VTOGET              GO READ FIRST SPARE RECORD     .VTO.\nVTONEXT  CLC   0(8,R2),MEMBER      DOES NAME MATCH MEMBER?        .VTO.\n         BE    VTONUM              YES, CHECK THE NUMBER          .VTO.\n         BL    VTOGET              NO, NEED TO READ MORE SPARE    .VTO.\n         B     VTONOT              NO, SPARE MEMBER IS BEYOND     .VTO.\nVTONUM   PACK  DOUBLE,9(7,R2)      GET RECORD NUMBER              .VTO.\n         CVB   R0,DOUBLE           TO BINARY                      .VTO.\n         C     R0,COUNTIN          IF IT MATCHES CURRENT RECORD   .VTO.\n         BE    VTOMATCH            RETURN MATCH FOUND             .VTO.\n         BH    VTONOT              IF IT'S TOO HIGH, NO MATCH     .VTO.\nVTOGET   CLI   VTOEOF+3,0          IF ALL OF SPARE HAS BEEN READ  .VTO.\n         BNE   VTONOT              THEN RETURN NOT-IN-LIST        .VTO.\n         L     R3,VTOSTAT          POINT TO VTODCBW               .VTO.\n         GET   (R3)                                               .VTO.\nVTOGOT   CLI   VTOEOF+3,0          IF GET REACHED EOF             .VTO.\n         BNE   VTONOT              THEN RETURN NOT-IN-LIST        .VTO.\n         LR    R2,R1               POINT R2 TO RECORD             .VTO.\n         ST    R2,VTOPREV          SAVE ADDRESS OF RECORD         .VTO.\n         B     VTONEXT                                            .VTO.\nVTOMATCH LM    R14,R3,VTOSAVE                                     .VTO.\n         LA    R15,1               THERE IS A MATCH               .VTO.\n         BR    R1                                                 .VTO.\nVTONOT   LM    R14,R3,VTOSAVE                                     .VTO.\n         SR    R15,R15             THERE IS NO MATCH              .VTO.\n         BR    R1                                                 .VTO.\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         MVC   LINE+1+13(2),CTLMODEL   BUT USE REAL CTL PAIR    GP06315\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n*\n*         ALLOW OUTPUT RECFM TO BE INDEPENDENT OF INPUT RECFM   MAY2009\n*\n*         1. GET INPUT DATA ADDRESS AND LENGTH                  MAY2009\n*\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    *+8                 YES, NO RDW PRESENT\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         AH    R14,DWLIN           POINT TO INPUT RECORD DATA\n         SH    R15,DWLIN           GET INPUT RECORD DATA LENGTH\n*\n*         2. BRANCH TO LOGIC PATH BASED ON OUTPUT RECFM         MAY2009\n*\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVAR              NO\n*\n*         3. BLOCK ANOTHER FIXED-LENGTH RECORD IF IT FITS       MAY2009\n*\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         B     PUTPAD              GO LOAD THE RECORD'S DATA\n*\n*         4. BLOCK VARIABLE-LENGTH RECORD IF IT FITS            MAY2009\n*\nPUTVAR   LA    R1,4(,R15)          GET IDEAL OUTPUT RECORD LENGTH\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BNE   TRAILOK             NO, SKIP TRAILING BLANKS DISCARD\n         LA    R1,0(R15,R14)       POINT PAST INPUT RECORD DATA\nTRAILOOP BCTR  R1,0                BACK UP A BYTE\n         CR    R1,R14              BACK TO START OF RECORD?\n         BNH   TRAILMIN            YES, USE MINIMUM LENGTH\n         CLI   0(R1),C' '          TRAILING BLANK?\n         BE    TRAILOOP            YES, KEEP BACKING UP\n         LA    R1,1+4(,R1)         NO, POINT PAST LAST NON-BLANK + RDW\n         SR    R1,R14              GET NEW IDEAL OUTPUT RECORD LENGTH\n         B     TRAILOK             DESIRED LENGTH NOW KNOWN\nTRAILMIN LA    R1,5                MINIMUM IS RDW + 1 DATA BYTE\nTRAILOK  CH    R1,LRECL(,R5)       LENGTH LONGER THAN OUTPUT LRECL?\n         BNH   *+8                 NO, USE THIS LENGTH\n         LH    R1,LRECL(,R5)       YES, REDUCE LENGTH TO OUTPUT LRECL\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         SR    R7,R6               GET NEW SIZE OF THIS BLOCK\n         STH   R7,0(,R6)           SET INTO BDW\n         LR    R7,R0               POINT TO RECORD TO LOAD\n         STCM  R1,3,0(R7)          SET RECORD LENGTH INTO RDW\n         STCM  R1,12,2(R7)         CLEAR REST OF RDW\n         AH    R0,DWLOT            POINT PAST RDW\n         SH    R1,DWLOT            GET DATA LENGTH AFTER RDW\n*\n*         5. LOAD THE DATA INTO THE NEW RECORD                  MAY2009\n*\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         ST    R1,UPS                     RESET                   .SBG.\n         NI    FLAG1,255-SELECT            RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(80),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   CTLMODEL,0(R1)      ./ ADD NAME OR XX ADD        GP06315\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA                 A0909\n         MVI   ZEROAREA,C'0'       GET SOME UNPACKED ZEROS        A0909\n         MVC   ZEROAREA+1(L'ZEROAREA-1),ZEROAREA                  A0909\n         MVC   SPFUSER,=CL8' '     PAD WITH BLANKS                M0909\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        CHECK (OR NOT) NAME VALIDITY GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n* --- >\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID         GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'7'           ID LENGTH CODE MAY BE 0 TO 6   C1701\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         MVC   #CRNTSML,XPFCCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XPFICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XPFMOD      CHANGED SIZE                   C0909\n         EX    R15,XPFUIDLD        LOAD USERID                    C0909\n         B     ISSPF               GO PROCESS FURTHER             C0909\nXPFUIDLD MVC   SPFUSER(0),XPFUSER  <<< EXECUTED >>>               M0909\n         DROP  R6                  (XPF)                      SBG 02/00\n         USING XP2,R6                                         SBG 02/00\nXP2UIDLD MVC   SPFUSER(0),XP2USER  <<< EXECUTED >>>               M0909\nTESTNUMN DS    0H                                             SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   #CRNTSML,XP2CCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XP2ICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XP2MOD      CHANGED SIZE                   C0909\n         EX    R15,XP2UIDLD        LOAD USERID                    C0909\nISSPF    OI    STATUS,SPF          SET FLAG FOR STOW              C0909\n         DROP  R6                  (XP2)                      SBG 02/00\n*\n*              LOOK FOR EXTENSIONS - SECONDS IS A PRE-REQ         A0909\n*\n         TM    ODE5+6,X'80'        SECONDS PRESENT?               A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,2                                               A0909\n         CH    R0,ODE5+4           LENGTH EXACTLY TWO?            A0909\n         BNE   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         L     R15,ODE5            YES, POINT TO DATA             A0909\n         TRT   0(2,R15),NUMERIC    DECIMAL DIGITS?                A0909\n         BNZ   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         CLI   0(R15),C'5'         YES, BUT IS IT LESS THAN 60?   A0909\n         BH    XSPFOK              NO, CANNOT BE SECONDS          A0909\n         ICM   R0,1,1(R15)         GET SECOND DIGIT               A0909\n         SLL   R0,4                SHIFT OUT ZONE                 A0909\n         ICM   R0,2,0(R15)         GET FIRST DIGIT                A0909\n         SRL   R0,4                GET NUMERICS IN ONE BYTE       A0909\n         STC   R0,SPFSECS          SAVE THE SECONDS VALUE         A0909\n         TM    ODE6+6,X'80'        ANYTHING ELSE PRESENT?         A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,8                                               A0909\n         CH    R0,ODE6+4           AT LEAST EIGHT NON-BLANKS?     A0909\n         BH    XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         L     R15,ODE6            YES, POINT TO DATA             A0909\n         TRT   0(8,R15),NUMERIC    EIGHT DECIMAL DIGITS?          A0909\n         BNZ   XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         MVC   #CRNT(3),0(R15)     FIRST 3 TO CURRENT             A0909\n         MVC   #INIT(3),3(R15)     NEXT 3 TO INITIAL              A0909\n         MVC   #MOD(2),6(R15)      LAST 2 TO MODIFIED             A0909\n         OI    SPFFLAGS,SPFXSTAT   FLAG NEED EXTENDED STATS       A1701\n*\n*              NOTE THAT EXTENDED ISPF STATS CAN BE STOWED        A0909\n*              EVEN IF THE COUNTER HIGH-ORDER EXTENSION           A0909\n*              FIELD IS NOT PRESENT IN THE INPUT RECORD.          A0909\n*\n*              IF AN ORIGINAL 5-DIGIT COUNTER HAS A VALUE         A0909\n*              OVER 65535 THEN EXTENDED ISPF STATS WILL           A0909\n*              BE STOWED.                                         A0909\n*\n*              THE CURRENT RECORD COUNTER IS EFFECTIVELY          A0909\n*              IGNORED BY PDSLOAD BECAUSE THIS FIELD IS SET       A0909\n*              FROM THE NUMBER OF RECORDS WRITTEN TO THE          A0909\n*              MEMBER BY PDSLOAD.  BUT HAVING THE CURRENT         A0909\n*              RECORD COUNT IN THE SEQUENTIAL FILE IS GOOD        A0909\n*              FOR AUDIT TRAIL AND HUMAN CONVENIENCE PURPOSES.    A0909\n*\nXSPFOK   PACK  DOUBLE,#CRNT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         STH   R0,SPFCCNT          FIX CURRENT AT STOW TIME       A0909\n         PACK  DOUBLE,#INIT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXICNT         SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFICNT          SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXICNT       COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    GETMOD              NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nGETMOD   PACK  DOUBLE,#MOD                                        A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXMOD          SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFMOD           SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXMOD        COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    NOSPF               NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         MVC   LINE,LINE-1         CLEAR OLD STUFF              GP12006\n         MVC   RESULT(38),=CL38'NOT STOWED *** INVALID MEMBER NAME ***'\n         OI    RC+1,8              NASTY ERROR                  GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE            GP12006\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         SPACE 1\n*---------------------------------------------------------------------*\n*   TEST MEMBER NAME VALIDITY, OR (DEFAULT) BYPASS CHECKS             *\n*---------------------------------------------------------------------*\nNAMETEST ICM   R15,15,@TRTTAB      MEMBER CHECKING ENABLED?     GP12006\n         BZR   R14                   NO; JUST RETURN            GP12006\n         TRT   MEMBER,0(R15)       IS MEMBER NAME VALID?        GP12006\n         BNZ   ILLMEM              NO, BRANCH                   GP12006\n         CLI   MEMBER,C' '         IS FIRST CHAR BLANK?         GP12006\n         BE    ILLMEM                YES; FAIL                  GP12006\n         LA    R15,CHARIBM         SET FOR STRICT TEST          GP12006\n         C     R15,@TRTTAB         IS STRICT TEST DESIRED ?     GP12006\n         BNER  R14                   NO; NAME PASSED            GP12006\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?       GP12006\n         BNL   ILLMEM                YES; FAIL                  GP12006\n*  N.B. EARLY VERSIONS OF THE READER/INTERPRETER ALLOWED HYPHEN/MINUS\n*       IN THE JCL. THE CHARIBM TABLE DOES NOT ALLOW FOR THAT.  GP12006\n*OS/360  CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?        GP12006\n*OS/360  BE    ILLMEM                                           GP12006\n         BR    R14                 MEMBER ADHERES TO IBM JCL    GP12006\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         TM    FLAG1,SELECTAL      REAL MEMBER CREATED?         MAY2009\n         BZ    READ                NO, CANNOT MAKE ALIAS OF IT  MAY2009\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID?        GP12006\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWIT              GO CREATE ALIAS              MAY2009\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWFIXD            YES                            C0909\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\nSTOWFIXD ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWXCHK            YES, HALFWORD COUNTER CORRECT  A0909\n         MVC   SPFCCNT,=X'FFFF'    NO, SET TO HIGH VALUES         A0909\nSTOWXCHK TM    SPFFLAGS,SPFXSTAT   USING EXTENDED STATS?          A0909\n         BO    STOWXSET            YES                            A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, CLASSIC STATS WILL DO     A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\nSTOWXSET MVC   SPFXCCNT,SEQ        SET CURRENT RECORD COUNT       A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA\n         MVI   SPFVM,1             1.0\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         STCM  R0,12,SPFHHMM       TIME OF LAST CHANGE (HHMM)     C0909\n         STCM  R0,2,SPFSECS        TIME OF LAST CHANGE (SS)       A0909\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=CL8'PDSLOAD'                              C1701\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, SET CLASSIC STATS         A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTERS HIGH     A0909\n         MVC   SPFCCNT,=X'FFFF'                                   A0909\n         ST    R1,SPFXICNT         ALSO SET FULLWORD COUNTERS     A0909\n         ST    R1,SPFXCCNT                                        A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\nSTOWIT   DS    0H                                               MAY2009\n         STOW  (R5),(R6),R\n         SPACE\n         CL    R15,=F'24'          UNEXPECTED RETURN CODE?      GP06315\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,8              WARNING IS TOO MILD ?        GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         OI    FLAG1,SELECTAL      ALIAS NOW ALLOWED            MAY2009\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    EXCEPCNT\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\n** -- >>  below                                                   .SBG.\nEXCEPCNT DS    0H                                                 .SBG.\n         L     R15,UPS                                            .SBG.\n         LTR   R15,R15                                            .SBG.\n         BZ    STOWX                                              .SBG.\n         MVC   LINE,LINE-1                                        .SBG.\n         LA    R1,LINE                                            .SBG.\n         MVC   9(18,R1),=C'Exception Report: '                    .SBG.\n         LA    R1,26(,R1)                                         .SBG.\n         MVC   14(26,R1),=C'SYSUPLOG Records Processed'           .SBG.\n         CVD   R15,DOUBLE                                         .SBG.\n         MVC   0(12,R1),=X'402020206B2020206B202120'              .SBG.\n         ED    0(12,R1),DOUBLE+3                                  .SBG.\n         BAL   R14,REPORT                                         .SBG.\n** -- >>  above                                                   .SBG.\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         LR    R14,R0              COPY LENGTH                  GP12006\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODVTO   MVI   VTOEOF+3,1\n         B     VTOGOT\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE                                           .VTO.\n         MVI   0(R6),X'80'                                        .VTO.\n         L     R3,VTOSTAT                                         .VTO.\n         LTR   R3,R3               IS SYSUPLOG OPEN?              .VTO.\n         BZ    EXITC6X             NO, SKIP CLOSE                 .VTO.\n         CLOSE ((R3)),MF=(E,(R6))                                 .VTO.\n         FREEPOOL (R3)                                            .VTO.\nEXITC6X  DS    0H                                                 .VTO.\n         SPACE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         I/O ERROR                                        *    FEB2008\n*                                                          *     GP@P6\n************************************************************\n         SPACE\nIOERROR  WTO   MF=(E,SYNADMSG)     DISPLAY I/O ERROR MESSAGE\n         WTO   'PDSLOAD WILL ABEND - WRITE I/O ERROR',ROUTCDE=(11)\n         ABEND 101\n         SPACE\nPDSSYNAD DS    0H\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG+4(78),50(R1)\n         OI    FLAG1,IOERR\n         SYNADRLS\n         BR    R14\n         EJECT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* --------------------------------------------------------- *\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY --- &VER '\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE 1                                                GP12006\nMSGMISS1 DC    C'SYSUT1  MISSING; WILL TRY SYSIN  '             GP12006\n         SPACE 1                                                GP12006\nSTRMISS2 DC    C'    PDSLOAD TERMINATED - '                     GP12006\nSTRMIDD2 DC    C'SYSUT2  MISSING OR UNUSABLE'                   GP12006\nMSGMISS2 EQU   STRMISS2,*-STRMISS2,C'C'                         GP12006\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\nSYNADWTO WTO   '1234567890123456789012345678901234567890123456789012345+\n               67890123456789012345678',ROUTCDE=(11),MF=L\nSYNADLEN EQU   *-SYNADWTO\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,SYNAD=PDSSYNAD,        +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\nVTODCB   DCB   DDNAME=SYSUPLOG,MACRF=(GL),DSORG=PS,RECFM=FB,LRECL=80,  +\n               EODAD=EODVTO\nVTODCBL  EQU   *-VTODCB\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL TRENT ,0,C' ',C',',FILL=255   PASS ON COMMA AND BLANK  GP12006\n         SPACE 1\nTABBLANK TRENT FILL=0                                           GP12006\n         TRENT ,C' ',C' '         STOP ON BLANK                 GP12006\n         TRENT ,C',',C','         STOP ON COMMA                 GP12006\n         SPACE 1\nCHARIBM  TRENT FILL=255                                         GP12006\n         TRENT ,0,C'$',C'@',C'#'  ALLOW NATIONAL CHARACTERS     GP12006\n         TRENT ,0,(C'A',9),(C'J',9),(C'S',8)     LETTERS        GP12006\n         TRENT ,0,(C'0',10)                      DIGITS         GP12006\n         TRENT ,0,X'C0'           LEFT BRACE                    GP12090\n         TRENT ,0,C' '            TRAILING SPACE                GP12006\n         SPACE 1\nCHAR037  TRENT FILL=255                                         GP12006\n         TRENT ,0,(X'40',X'6B'-X'40')   EVERYTHING BELOW COMMA  GP12006\n         TRENT ,0,(X'6B'+1,255-X'6B')   EVERYTHING AFTER COMMA  GP12006\n         SPACE 1\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  TRENT ,0,(C'0',10),FILL=255   DIGITS ONLY              GP12006\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         SPACE\n         DC    0D'0'               END OF CSECT                   A1701\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nUPS      DS    F                                                  .SBG.\nSAVER0   DS    F                                                  .SBG.\nSAV4HEX  DS    F\nHEXSAVE  DS    5F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nCTLMODEL DC    CL12'./ ADD NAME='      LOOKING FOR              GP06315\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nVTODCBW  DS    0F,(VTODCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\n@TRTTAB  DS    A                                                GP12006\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nVTOSTAT  DS    F\nVTOEOF   DS    F\nVTOSAVE  DS    6F\nVTOPREV  DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODE6     DS    2F                  OPERAND DESCRIPTOR ENTRY 6     A0909\nODE7     DS    2F                  OPERAND DESCRIPTOR ENTRY 7     A0909\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\nIOERR    EQU   X'08'               OUTPUT I/O ERROR             FEB2008\nCK3      EQU   X'04'               CHECK COLUMN 3               OCT2015\nFGNOCON  EQU   X'02'               CONTROL - SKIP UPDTE TEST    GP06315\nSELECTAL EQU   X'01'               ALIAS ALLOWED                MAY2009\n         DS    C                   LINE-1\nLINE     DS    CL133\nRESULT   EQU   LINE+48                           (IFOX00)       GP06315\nLINEH1   DS    CL133\n*\nSYNADMSG DS    XL(SYNADLEN)                                     FEB2008\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL40                SPF STATISTICS OR SSI          C0909\n         ORG   MEMUSER                                            C0909\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFFLAGS DS    X                   FLAGS                          A0909\nSPFSCLM  EQU   X'80'               SCLM-MANAGED                   A0909\nSPFXSTAT EQU   X'20'               EXTENDED STATISTICS            A0909\nSPFSECS  DS    X                   TIME LAST UPDATED (SS)         A0909\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED (HHMM)\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL8                 USERID                         C1701\nSPFBLANK DS    CL2                 CLASSICALLY TWO BLANKS         C1701\n         ORG   SPFBLANK                                           C1701\nSPFXCCNT DS    F                   CURRENT SIZE                   A0909\nSPFXICNT DS    F                   INITIAL SIZE                   A0909\nSPFXMOD  DS    F                   MODS                           A0909\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n*\nZEROAREA DS    0CL(8+8+7)          UNPACKED COUNTERS AREA         A0909\n#CRNT    DS    CL8                 CURRENT RECORD COUNT           A0909\n#CRNTSML EQU   #CRNT+3,5           CURRENT RECORD COUNT           A0909\n#INIT    DS    CL8                 INITIAL RECORD COUNT           A0909\n#INITSML EQU   #INIT+3,5           INITIAL RECORD COUNT           A0909\n#MOD     DS    CL7                 CHANGED RECORD COUNT           A0909\n#MODSML  EQU   #MOD+2,5            CHANGED RECORD COUNT           A0909\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         PRINT GEN\n         CVT   LIST=YES,DSECT=YES   NEED FOR SYSTEM LEVEL CHECK GP12006\n         DCBD  DEVD=DA,DSORG=PO   WANT FOR DCB VALUES           GP12006\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD1": {"ttr": 12293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x92$_\\x18\"\\x04\\x9b\\x04U\\x00\\x00\\xe9\\xc7\\xc9\\xd7\\xf0\\xf1@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1992-09-01T18:22:00", "lines": 1179, "newlines": 1109, "modlines": 0, "user": "ZGIP01"}, "text": "         TITLE '   P D S L O A D    '\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: SEPTEMBER 1 1992.\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM WHICH CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESNT CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER ARE\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n         SPACE\nPDSLOAD  START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'PDSLOAD'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    C' ASSEMBLED FOR ANY FIXED LRECL FROM 1 TO 256    '  NWK\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R10,15              BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         USING @DATA,R13\n         SPACE\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPOGATOR\n         MVI   LINE-1,C' '         BLANK PROPOGATOR\n         MVI   STATUS,0\n         MVI   FLAG1,0\n         SPACE\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(R1)            GET LENGTH OF PARM\n         LTR   R0,R0\n         BZ    PARMX\n         LA    R1,2(,R1)           POINT TO PARM DATA\n         CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMSX              NO, BYPASS COMPARE\n         CLC   0(3,R1),=C'SPF'     IS IT SPF\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES GENERATE SPF STATISTICS\n         LA    R1,3(,R1)\n         SH    R0,=H'3'\n         BZ    PARMX\n         CLI   0(R1),C','\n         BNE   PARMERR\n         LA    R1,1(,R1)           POINT PAST COMMA\n         SH    R0,=H'1'\n         BZ    PARMX\nPARMSX   DS    0H\nPARMM    CH    R0,=H'3'            LONG ENOUGH FOR S(X\n         BL    PARMERR             NO\n         CLC   0(2,R1),=C'S('      IS IT S(\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,MEMSEL+8\nPARMML   CLI   0(R1),C')'\n         BE    PARMME\n         CR    R15,R14             IS MEMBER NAME TOO LONG\n         BNL   PARMMIG             YES, IGNORE EXTRA CHARACTERS\n         MVC   0(1,R15),0(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)\nPARMMIG  BCT   R0,PARMML\n         B     PARMX\nPARMME   LA    R1,1(,R1)           POINT PAST PAREN\n         SH    R0,=H'1'\n         BZ    PARMX\n         CLI   0(R1),C','\n         BNE   PARMERR\n         LA    R1,1(,R1)           POINT PAST COMMA\n         SH    R0,=H'1'\n         BZ    PARMERR\nPARMMX   DS    0H\n         CH    R0,=H'9'            IS PARM LONG ENOUGH FOR UPDTE(XX)\n         BNE   PARMERR\n         CLC   0(6,R1),=C'UPDTE('\n         BNE   PARMERR\n         CLI   08(R1),C')'\n         BNE   PARMERR\n         MVC   UPDTE,6(R1)         LOOK FOR XX INSTEAD OF ./\n         B     PARMX\nPARMERR  ABEND 100\nPARMX    DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCB'S                                    *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LA    R15,16\n         CLC   DDNAM(8,R4),=CL8'SYSIN'   AFTER SYSIN RETRY?       GP@FT\n         BE    EXIT                      YES, OPEN FAILED         GP@FT\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   NO, LOAD RETRY DDNAME    GP@FT\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',            GP@FT+\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I    GP@FT\n         B     OKPRT               RETRY OPEN WITH SYSIN          GP@FT\nUT1EXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL               GP@FT\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?            GP@FT\n         BNER  R14                 YES, RETURN                    GP@FT\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED    GP@FT\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F      GP@FT\n         BR    R14                 RETURN                         GP@FT\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         SPACE\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),X'10'\n         BO    OKUT2\n         LA    R15,16\n         B     EXIT\nUT2EXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?         GP@FT*\n         BNE   UT2EX1              YES, CHECK LRECL                   *\n         CLC   LRECL(2,R1),=H'0'   NO, IS LRECL SPECIFIED?            *\n         BNE   UT2EX2              YES, DECIDE ABOUT ZERO BLKSIZE     *\n         MVC   LRECL(2,R1),LRECL(R4)  NO, COPY INPUT LRECL            *\nUT2EX2   L     R15,16              LRECL NOW OKAY, POINT TO CVT       *\n         TM    116(R15),X'93'      MVS/XA OR MVS/ESA?                 *\n         BNO   UT2EX3              NO, BACK LEVEL MVS                 *\n         ICM   R15,15,1216(R15)    POINT TO DATA FACILITIES AREA      *\n         BZ    UT2EX3              NOT FOUND, TREAT AS BACK LEVEL     *\n         CLI   2(R15),X'23'        DFP 2.4.0 OR HIGHER?               *\n         BHR   R14                 YES, RETURN WITH BLKSIZE=0         *\nUT2EX3   LH    R15,LRECL(,R1)      GET LRECL                          *\n         MH    R15,=H'39'          MAKE BLKSIZE=39*LRECL              *\n         STH   R15,BLKSI(,R1)      SET BLKSIZE                        *\n         SRA   R15,15              SHIFT OUT VALID BITS               *\n         BZR   R14                 UNDER 32767 SO ASSUME VALID        *\n         MVC   BLKSI(2,R1),LRECL(R1)     TOO BIG SO MAKE UNBLOCKED    *\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F          *\n         BR    R14                 RETURN                             *\nUT2EX1   CLC   LRECL(2,R1),=H'0'   BLKSIZE > 0, IS LRECL SPECIFIED?   *\n         BNER  R14                 YES, RETURN                        *\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED        *\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F          *\n         BR    R14                 RETURN                        GP@FT*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         SPACE\n         LH    R0,BLKSI(,R5)\n         SLL   R0,1                DOUBLE BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         ST    R1,PUTPDSX+4        BUFFER 1 ADDRESS\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         ST    R1,PUTPDSY+4        BUFFER 2 ADDRESS\n         LH    R0,LRECL(,R5)       GET LRECL\n         LTR   R0,R0               IF LRECL ZERO\n         BNZ   *+8                  THEN\n         LH    R0,BLKSI(,R5)         USE BLKSI AS LRECL\n         SR    R1,R0               BACK UP ONE RECORD\n         ST    R1,PUTPDSX+8        LAST RECORD IN BUFFER 1\n         AR    R1,R0               POINT TO BUFFER 2\n         AH    R1,BLKSI(,R5)       END OF BUFFER 2\n         SR    R1,R0               BACK UP 1 RECORD\n         ST    R1,PUTPDSY+8        LAST RECORD IN BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVI   INREC,C' '          IF SYSUT2.LRECL > SYSUT1.LRECL GP@FT\n         MVC   INREC+1(255),INREC  THEN EXTEND WITH BLANK(S)      GP@FT\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         CLC   =H'256',LRECL(R4)   SYSUT1 LRECL OVER 256?         GP@FT\n         BL    BADLRECL            YES, BUT NOT SUPPORTED         GP@FT\n         CLC   =H'256',LRECL(R5)   SYSUT2 LRECL OVER 256?         GP@FT\n         BNL   READ                NO, PROCEED                    GP@FT\nBADLRECL MVC   LINE+1(BADMSGLN),BADLNMSG                          GP@FT\n         BAL   R14,REPORT          REPORT REASON FOR TERMINATION  GP@FT\n         LA    R15,16                                             GP@FT\n         B     EXIT                                               GP@FT\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     DS    0H\n         GET   (R4),INREC\n         SPACE\n         L     R1,COUNTIN\n         A     R1,=F'1'\n         ST    R1,COUNTIN\n         MVC   LINE,LINE-1\n         CLC   INREC(2),=C'./'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,72-1             LENGTH CODE OF CONTROL STATEMENT\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               INSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\n         B     LOOP\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         CLC   INREC(2),UPDTE      IS THIS XX OF UPDTE(XX)\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   INREC(2),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   LM    R6,R9,PUTPDSX       FIRST, CURRENT, LAST, DECB\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS        GP@FT\n         BCTR  R1,0                DECREMENT FOR EXECUTE          GP@FT\n         EX    R1,PUTPDREC         MOVE RECORD INTO BLOCK         GP@FT\n         CR    R7,R8               LAST RECORD IN BLOCK\n         BE    PUTPDS1             YES, GO WRITE THE BLOCK\n         LA    R7,1(R1,R7)         NO, BUMP CURRENT POINTER       GP@FT\n         ST    R7,PUTPDSX+4        SAVE SLOT ADDRESS\n         BR    R14                 RETURN\nPUTPDREC MVC   0(0,R7),INREC       <<< EXECUTED >>>               GP@FT\nPUTPDS1  ST    R14,PUTPDSR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         L     R14,PUTPDSR\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(72),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   0(12,R1),=C'./ ADD NAME='\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME=\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS\n         BE    SELMEM1             YES, BRANCH\n         CLC   MEMSEL,MEMBER       NO, IS THIS THE SPECIFIED MEMBER\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS\n         BE    SELMEM2             YES, BRANCH\n         CLC   MEMSEL,MEMBER       NO, IS THIS THE SPECIFIED MEMBER\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI=\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         USING XPF,R6\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI=\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'9'           ID LENGTH CODE MAY BE 0 TO 9\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         PACK  DOUBLE,XPFCCNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFCCNT          CURRENT SIZE\n         PACK  DOUBLE,XPFICNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFICNT          INITIAL SIZE\n         PACK  DOUBLE,XPFMOD       MOD\n         CVB   R0,DOUBLE\n         STH   R0,SPFMOD           LINES MODIFIED\n         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS\n         B     *+10\n         MVC   SPFUSER(0),XPFUSER\n         EX    R15,*-6\n         OI    STATUS,SPF          SET FLAG FOR STOW\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?    GP@FT\n         BE    EODUT1              YES, SIMULATE END-OF-FILE      GP@FT\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN\n         BE    ILLMEM\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         STOW  (R5),(R6),R\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWAR(R15)\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         BZ    STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         STH   R7,BLKSI(,R5)       STORE LENGTH OF FINAL BLOCK\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  MVC   PUTPDSX+4(4),PUTPDSX\n         MVC   PUTPDSY+4(4),PUTPDSY\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER(30),MEMUSER\n         MVI   SPFVM,1             1.0\n         XC    SPFRESV,SPFRESV     ZERO RESERVED BYTES\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         SRL   R0,16\n         STH   R0,SPFHHMM          TIME OF LAST CHANGE\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=CL10'PDSLOAD'\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\n         STOW  (R5),(R6),R\n         SPACE\n         CLM   R15,3,=X'0018'      UNEXPECTED RETURN CODE?        GP@FT\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY  GP@FT\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nRESULT   EQU   LINE+48\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'    GP@FT\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,4\n         BAL   R14,REPORT          OUTPUT PRINT LINE              GP@FT\n         B     STOWX               THAT IS ALL FOR THIS MEMBER    GP@FT\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS\n         BO    STOWXA              YES, BRANCH\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(7,R1),1(R1)\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD\n         BNE   *+10                NO, SKIP NEXT INSTRUCTION\n         MVC   7(2,R1),=C') '      CHANGE RECORDS TO RECORD\n         BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(7,R1),1(R1)\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE 1\n         LR    1,13\n         L     R0,@SIZE\n         L     13,4(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    0,12,20(13)\n         L     14,12(,13)\n         BR    14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1   GP@FT\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2   GP@FT\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT GP@FT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\nBADLNMSG DC    C'    PDSLOAD TERMINATED - '                       GP@FT\n         DC    C'LOGICAL RECORD LENGTH OVER 256 ENCOUNTERED'      GP@FT\nBADMSGLN EQU   *-BADLNMSG                                         GP@FT\n         PRINT GEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GM),DSORG=PS,RECFM=FB,             +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,RECFM=FB,              +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'00'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'6B'               COMMA\n         DC    148X'00'\n         SPACE\nALPHANUM DC    0D'0',64X'FF',X'00',26X'FF'\n*                            SPACE\n         DC    X'00',4X'FF',X'00',26X'FF',2X'00',68X'FF',09X'00'\n*                $            -              #@           A-I\n         DC    7X'FF',9X'00',8X'FF',8X'00',6X'FF',10X'00',6X'FF'\n*                       J-R            S-Z            0-9\n         SPACE\n*              THE ABOVE TABLE CAN BE USED TO TEST FOR ALPHANUMERIC\n*              (PLUS NATIONALS, HYPHEN, AND BLANK)\n*              WITH A 'TRT' INSTRUCTION.\n*              IF THE FIELD IS VALID, CONDITION CODE IS 0.\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nWORK     DS    0F\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL256\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\n         DS    C                   LINE-1\nLINE     DS    CL133\nLINEH1   DS    CL133\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL30                SPF STATISTICS OR SSI\n         ORG   *-30\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFRESV  DS    XL2                 RESERVED\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL10                USERID\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD2": {"ttr": 12804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x18\\x8f\\x00\\x98\\x18\\x8f\\x14\\x15\\x04\\xa6\\x04\\xa6\\x00\\x00\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-07-07T00:00:00", "modifydate": "1998-07-07T14:15:00", "lines": 1190, "newlines": 1190, "modlines": 0, "user": "TRIDJK"}, "text": "         TITLE '   P D S L O A D    '\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: JUNE 26 1998.\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM WHICH CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESNT CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER ARE\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n         SPACE\nPDSLOAD  START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'PDSLOAD'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    C' ASSEMBLED FOR ANY FIXED LRECL FROM 1 TO 256    '  NWK\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R10,15              BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         USING @DATA,R13\n         SPACE\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPOGATOR\n         MVI   LINE-1,C' '         BLANK PROPOGATOR\n         MVI   STATUS,0\n         MVI   FLAG1,0\n         SPACE\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(R1)            GET LENGTH OF PARM\n         LTR   R0,R0\n         BZ    PARMX\n         LA    R1,2(,R1)           POINT TO PARM DATA\n         CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMSX              NO, BYPASS COMPARE\n         CLC   0(3,R1),=C'SPF'     IS IT SPF\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES GENERATE SPF STATISTICS\n         LA    R1,3(,R1)\n         SH    R0,=H'3'\n         BZ    PARMX\n         CLI   0(R1),C','\n         BNE   PARMERR\n         LA    R1,1(,R1)           POINT PAST COMMA\n         SH    R0,=H'1'\n         BZ    PARMX\nPARMSX   DS    0H\nPARMM    CH    R0,=H'3'            LONG ENOUGH FOR S(X\n         BL    PARMERR             NO\n         CLC   0(2,R1),=C'S('      IS IT S(\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,MEMSEL+8\nPARMML   CLI   0(R1),C')'\n         BE    PARMME\n         CR    R15,R14             IS MEMBER NAME TOO LONG\n         BNL   PARMMIG             YES, IGNORE EXTRA CHARACTERS\n         MVC   0(1,R15),0(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)\nPARMMIG  BCT   R0,PARMML\n         B     PARMX\nPARMME   LA    R1,1(,R1)           POINT PAST PAREN\n         SH    R0,=H'1'\n         BZ    PARMX\n         CLI   0(R1),C','\n         BNE   PARMERR\n         LA    R1,1(,R1)           POINT PAST COMMA\n         SH    R0,=H'1'\n         BZ    PARMERR\nPARMMX   DS    0H\n         CH    R0,=H'9'            IS PARM LONG ENOUGH FOR UPDTE(XX)\n         BNE   PARMERR\n         CLC   0(6,R1),=C'UPDTE('\n         BNE   PARMERR\n         CLI   08(R1),C')'\n         BNE   PARMERR\n         MVC   UPDTE,6(R1)         LOOK FOR XX INSTEAD OF ./\n         B     PARMX\nPARMERR  ABEND 100\nPARMX    DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCB'S                                    *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LA    R15,16\n         CLC   DDNAM(8,R4),=CL8'SYSIN'   AFTER SYSIN RETRY?       GP@FT\n         BE    EXIT                      YES, OPEN FAILED         GP@FT\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   NO, LOAD RETRY DDNAME    GP@FT\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',            GP@FT+\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I    GP@FT\n         B     OKPRT               RETRY OPEN WITH SYSIN          GP@FT\nUT1EXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL               GP@FT\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?            GP@FT\n         BNER  R14                 YES, RETURN                    GP@FT\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED    GP@FT\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F      GP@FT\n         BR    R14                 RETURN                         GP@FT\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         SPACE\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),X'10'\n         BO    OKUT2\n         LA    R15,16\n         B     EXIT\nUT2EXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?         GP@FT*\n         BNE   UT2EX1              YES, CHECK LRECL                   *\n         CLC   LRECL(2,R1),=H'0'   NO, IS LRECL SPECIFIED?            *\n         BNE   UT2EX2              YES, DECIDE ABOUT ZERO BLKSIZE     *\n         MVC   LRECL(2,R1),LRECL(R4)  NO, COPY INPUT LRECL            *\nUT2EX2   L     R15,16              LRECL NOW OKAY, POINT TO CVT       *\n         TM    116(R15),X'93'      MVS/XA OR MVS/ESA?                 *\n         BNO   UT2EX3              NO, BACK LEVEL MVS                 *\n         ICM   R15,15,1216(R15)    POINT TO DATA FACILITIES AREA      *\n         BZ    UT2EX3              NOT FOUND, TREAT AS BACK LEVEL     *\n         CLI   2(R15),X'23'        DFP 2.4.0 OR HIGHER?               *\n         BHR   R14                 YES, RETURN WITH BLKSIZE=0         *\nUT2EX3   LH    R15,LRECL(,R1)      GET LRECL                          *\n         MH    R15,=H'39'          MAKE BLKSIZE=39*LRECL              *\n         STH   R15,BLKSI(,R1)      SET BLKSIZE                        *\n         SRA   R15,15              SHIFT OUT VALID BITS               *\n         BZR   R14                 UNDER 32767 SO ASSUME VALID        *\n         MVC   BLKSI(2,R1),LRECL(R1)     TOO BIG SO MAKE UNBLOCKED    *\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F          *\n         BR    R14                 RETURN                             *\nUT2EX1   CLC   LRECL(2,R1),=H'0'   BLKSIZE > 0, IS LRECL SPECIFIED?   *\n         BNER  R14                 YES, RETURN                        *\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED        *\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F          *\n         BR    R14                 RETURN                        GP@FT*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         SPACE\n         LH    R0,BLKSI(,R5)\n         SLL   R0,1                DOUBLE BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         ST    R1,PUTPDSX+4        BUFFER 1 ADDRESS\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         ST    R1,PUTPDSY+4        BUFFER 2 ADDRESS\n         LH    R0,LRECL(,R5)       GET LRECL\n         LTR   R0,R0               IF LRECL ZERO\n         BNZ   *+8                  THEN\n         LH    R0,BLKSI(,R5)         USE BLKSI AS LRECL\n         SR    R1,R0               BACK UP ONE RECORD\n         ST    R1,PUTPDSX+8        LAST RECORD IN BUFFER 1\n         AR    R1,R0               POINT TO BUFFER 2\n         AH    R1,BLKSI(,R5)       END OF BUFFER 2\n         SR    R1,R0               BACK UP 1 RECORD\n         ST    R1,PUTPDSY+8        LAST RECORD IN BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVI   INREC,C' '          IF SYSUT2.LRECL > SYSUT1.LRECL GP@FT\n         MVC   INREC+1(255),INREC  THEN EXTEND WITH BLANK(S)      GP@FT\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         CLC   =H'256',LRECL(R4)   SYSUT1 LRECL OVER 256?         GP@FT\n         BL    BADLRECL            YES, BUT NOT SUPPORTED         GP@FT\n         CLC   =H'256',LRECL(R5)   SYSUT2 LRECL OVER 256?         GP@FT\n         BNL   READ                NO, PROCEED                    GP@FT\nBADLRECL MVC   LINE+1(BADMSGLN),BADLNMSG                          GP@FT\n         BAL   R14,REPORT          REPORT REASON FOR TERMINATION  GP@FT\n         LA    R15,16                                             GP@FT\n         B     EXIT                                               GP@FT\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     DS    0H\n         GET   (R4),INREC\n         SPACE\n         L     R1,COUNTIN\n         A     R1,=F'1'\n         ST    R1,COUNTIN\n         MVC   LINE,LINE-1\n         CLC   INREC(2),=C'./'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,72-1             LENGTH CODE OF CONTROL STATEMENT\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               INSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\n         B     LOOP\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         CLC   INREC(2),UPDTE      IS THIS XX OF UPDTE(XX)\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   INREC(2),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   LM    R6,R9,PUTPDSX       FIRST, CURRENT, LAST, DECB\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS        GP@FT\n         BCTR  R1,0                DECREMENT FOR EXECUTE          GP@FT\n         EX    R1,PUTPDREC         MOVE RECORD INTO BLOCK         GP@FT\n         CR    R7,R8               LAST RECORD IN BLOCK\n         BE    PUTPDS1             YES, GO WRITE THE BLOCK\n         LA    R7,1(R1,R7)         NO, BUMP CURRENT POINTER       GP@FT\n         ST    R7,PUTPDSX+4        SAVE SLOT ADDRESS\n         BR    R14                 RETURN\nPUTPDREC MVC   0(0,R7),INREC       <<< EXECUTED >>>               GP@FT\nPUTPDS1  ST    R14,PUTPDSR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         L     R14,PUTPDSR\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(72),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   0(12,R1),=C'./ ADD NAME='\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME=\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS\n         BE    SELMEM1             YES, BRANCH\n         CLC   MEMSEL,MEMBER       NO, IS THIS THE SPECIFIED MEMBER\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS\n         BE    SELMEM2             YES, BRANCH\n         CLC   MEMSEL,MEMBER       NO, IS THIS THE SPECIFIED MEMBER\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI=\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         USING XPF,R6\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI=\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'9'           ID LENGTH CODE MAY BE 0 TO 9\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         PACK  DOUBLE,XPFCCNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFCCNT          CURRENT SIZE\n         PACK  DOUBLE,XPFICNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFICNT          INITIAL SIZE\n         PACK  DOUBLE,XPFMOD       MOD\n         CVB   R0,DOUBLE\n         STH   R0,SPFMOD           LINES MODIFIED\n         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS\n         B     *+10\n         MVC   SPFUSER(0),XPFUSER\n         EX    R15,*-6\n         OI    STATUS,SPF          SET FLAG FOR STOW\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?    GP@FT\n         BE    EODUT1              YES, SIMULATE END-OF-FILE      GP@FT\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN\n         BE    ILLMEM\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         STOW  (R5),(R6),R\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWAR(R15)\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         BZ    STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         STH   R7,BLKSI(,R5)       STORE LENGTH OF FINAL BLOCK\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  MVC   PUTPDSX+4(4),PUTPDSX\n         MVC   PUTPDSY+4(4),PUTPDSY\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER(30),MEMUSER\n         MVI   SPFVM,1             1.0\n         XC    SPFRESV,SPFRESV     ZERO RESERVED BYTES\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         SRL   R0,16\n         STH   R0,SPFHHMM          TIME OF LAST CHANGE\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=CL10'PDSLOAD'\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\n         STOW  (R5),(R6),R\n         SPACE\n         CLM   R15,3,=X'0018'      UNEXPECTED RETURN CODE?        GP@FT\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY  GP@FT\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nRESULT   EQU   LINE+48\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'    GP@FT\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,4\n         BAL   R14,REPORT          OUTPUT PRINT LINE              GP@FT\n         B     STOWX               THAT IS ALL FOR THIS MEMBER    GP@FT\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS\n         BO    STOWXA              YES, BRANCH\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(7,R1),1(R1)\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD\n         BNE   *+10                NO, SKIP NEXT INSTRUCTION\n         MVC   7(2,R1),=C') '      CHANGE RECORDS TO RECORD\n         BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(7,R1),1(R1)\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE 1\n         LR    1,13\n         L     R0,@SIZE\n         L     13,4(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    0,12,20(13)\n         L     14,12(,13)\n         BR    14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1   GP@FT\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2   GP@FT\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT GP@FT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\nBADLNMSG DC    C'    PDSLOAD TERMINATED - '                       GP@FT\n         DC    C'LOGICAL RECORD LENGTH OVER 256 ENCOUNTERED'      GP@FT\nBADMSGLN EQU   *-BADLNMSG                                         GP@FT\n         PRINT GEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GM),DSORG=PS,RECFM=FB,             +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,RECFM=FB,              +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'00'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'6B'               COMMA\n         DC    148X'00'\n         SPACE\nALPHANUM DC    0D'0',64X'FF',X'00',26X'FF'\n*                            SPACE\n         DC    X'00',4X'FF',X'00',26X'FF',2X'00',68X'FF',09X'00'\n*                $            -              #@           A-I\n         DC    7X'FF',9X'00',8X'FF',8X'00',6X'FF',10X'00',6X'FF'\n*                       J-R            S-Z            0-9\n         SPACE\n*              THE ABOVE TABLE CAN BE USED TO TEST FOR ALPHANUMERIC\n*              (PLUS NATIONALS, HYPHEN, AND BLANK)\n*              WITH A 'TRT' INSTRUCTION.\n*              IF THE FIELD IS VALID, CONDITION CODE IS 0.\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nWORK     DS    0F\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL256\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\n         DS    C                   LINE-1\nLINE     DS    CL133\nLINEH1   DS    CL133\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL30                SPF STATISTICS OR SSI\n         ORG   *-30\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFRESV  DS    XL2                 RESERVED\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL10                USERID\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD3": {"ttr": 13315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00R\\x01\\x00\\x04O\\x01\\t\\x02?\\x177\\x06%\\x06\\x07\\x00\\x00\\xc7\\xc5\\xd9\\xc4@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-02-13T00:00:00", "modifydate": "2009-01-23T17:37:52", "lines": 1573, "newlines": 1543, "modlines": 0, "user": "GERD"}, "text": "PDSLOAD  TITLE '   P D S L O A D    '\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 13, 2000\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM WHICH CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESNT CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER ARE\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n         SPACE\nPDSLOAD  START\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATC '\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:V->V (TRUNC)  '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         SPACE\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPOGATOR\n         MVI   LINE-1,C' '         BLANK PROPOGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BZ    PARMX\n         LA    R1,2(,R1)           POINT TO PARM DATA\n         CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF?\n         BL    PARMSX              NO, BYPASS COMPARE\n         CLC   0(3,R1),=C'NEW'     IS IT NEW, AS PER IEBUPDTE?\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R1,3(,R1)\n         SH    R0,=H'3'\n         BZ    PARMX\n         CLI   0(R1),C','\n         BNE   PARMERR\n         LA    R1,1(,R1)           POINT PAST COMMA\n         SH    R0,=H'1'\n         BZ    PARMX\nTRYSPF   CLC   0(3,R1),=C'SPF'     IS IT SPF?\n         BNE   PARMSX              NO\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R1,3(,R1)\n         SH    R0,=H'3'\n         BZ    PARMX\n         CLI   0(R1),C','\n         BNE   PARMERR\n         LA    R1,1(,R1)           POINT PAST COMMA\n         SH    R0,=H'1'\n         BZ    PARMX\nPARMSX   DS    0H\nPARMM    CH    R0,=H'3'            LONG ENOUGH FOR S(X ?\n         BL    PARMERR             NO\n         CLC   0(2,R1),=C'S('      IS IT S( ?\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,MEMSEL+8\nPARMML   CLI   0(R1),C')'\n         BE    PARMME\n         CR    R15,R14             IS MEMBER NAME TOO LONG?\n         BNL   PARMMIG             YES, IGNORE EXTRA CHARACTERS\n         MVC   0(1,R15),0(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)\nPARMMIG  BCT   R0,PARMML\n         B     PARMX\nPARMME   LA    R1,1(,R1)           POINT PAST PAREN\n         SH    R0,=H'1'\n         BZ    PARMX\n         CLI   0(R1),C','\n         BNE   PARMERR\n         LA    R1,1(,R1)           POINT PAST COMMA\n         SH    R0,=H'1'\n         BZ    PARMERR\nPARMMX   DS    0H\n         CH    R0,=H'9'            IS PARM LONG ENOUGH FOR UPDTE(XX)?\n         BNE   PARMERR\n         CLC   0(6,R1),=C'UPDTE('\n         BNE   PARMERR\n         CLI   08(R1),C')'\n         BNE   PARMERR\n         MVC   UPDTE,6(R1)         LOOK FOR XX INSTEAD OF ./\n         B     PARMX\nPARMERR  WTO   'PDSLOAD WILL ABEND - INVALID PARAMETER',ROUTCDE=(11)\n         ABEND 100\nPARMX    DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LA    R15,16\n         CLC   DDNAM(8,R4),=CL8'SYSUT1'  AFTER TRYING SYSUT1?\n         BNE   EXIT                      NO, OPEN FAILED\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         B     OKPRT               RETRY OPEN WITH SYSIN\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         CLC   =H'80',LRECL(R4)    INPUT LRECL<80?\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),X'10'\n         BO    OKUT2\n         LA    R15,16\n         B     EXIT\nUT2EXO   TM    RECFM(R1),X'C0'     NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    LRECL(2,R1),LRECL(R1)   RECFM=U SO FORCE LRECL=0\n         BR    R14                 RETURN\nUT2EX2   MVC   RECFM(1,R1),RECFM(R4)  YES, COPY INPUT RECFM\nUT2EX3   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n         MVC   LRECL(2,R1),LRECL(R4)    COPY INPUT LRECL\nUT2EX4   TM    RECFM(R1),X'80'     FIXED LENGTH RECORDS?\n         BOR   R14                 YES, USE SDB OR GOOD USER SPEC\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS\n         BR    R14                 USE SDB OR GOOD USER SPEC\n*\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         TM    RECFM(R5),X'40'     FIXED-LENGTH OUTPUT RECORDS?\n         BZ    GETBUF              YES\n         TM    RECFM(R4),X'80'     VARIABLE-LENGTH INPUT RECORDS?\n         BZ    GETBUF              YES\n         MVC   LINE,LINE-1         NO, F(B)-IN NO GOOD FOR V(B)-OUT\n         MVC   LINE+1(FIXMSGLN),FIXINMSG\n         B     FAILEXIT\n         SPACE\nGETBUF   LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     DS    0H\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   =C'./',0(R15)       CONTROL STATEMENT?\n         BNE   COPY                NO\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,72-1            GET LENGTH CODE IF FIXED LENGTH\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,72-1             LENGTH CODE OF CONTROL STATEMENT\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               INSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BE    PUTLEN              YES\n         CLM   R1,3,0(R14)         NO, TRUNCATE INPUT RECORD?\n         BL    PUTLEN              YES\n         ICM   R1,3,0(R14)         NO, USE INPUT RECORD LENGTH\nPUTLEN   LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    PUTPAD              YES, PROCEED WITH F(B) TO F(B)\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVTOV             NO, VARIABLE-LENGTH IN AND OUT\n         AH    R14,DWLIN           YES, POINT PAST INPUT RDW\n         SH    R15,DWLIN           REDUCE LENGTH OF DATA TO COPY\n         B     PUTPAD              PROCEED WITH V(B) TO F(B)\nPUTVTOV  SR    R7,R6               GET NEW SIZE OF BLOCK\n         STH   R7,0(,R6)           UPDATE LENGTH IN BDW\n         LR    R7,R0               COPY TARGET FOR THIS RECORD\n         STCM  R1,3,0(R7)          SET OUTPUT LENGTH IN RDW\n         AH    R14,=H'2'           DO NOT COPY RDW LENGTH, BUT DO\n         SH    R15,=H'2'                  COPY RDW SECOND HALF\n         AH    R0,=H'2'\n         SH    R1,=H'2'\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(72),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   0(12,R1),=C'./ ADD NAME='\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'9'           ID LENGTH CODE MAY BE 0 TO 9\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         PACK  DOUBLE,XPFCCNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFCCNT          CURRENT SIZE\n         PACK  DOUBLE,XPFICNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFICNT          INITIAL SIZE\n         PACK  DOUBLE,XPFMOD       MOD\n         CVB   R0,DOUBLE\n         STH   R0,SPFMOD           LINES MODIFIED\n         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS\n         B     *+10\n         MVC   SPFUSER(0),XPFUSER\n         EX    R15,*-6\n         OI    STATUS,SPF          SET FLAG FOR STOW\n         DROP  R6                                             SBG 02/00\n         B     NOSPF               GO PROCESS FURTHER         SBG 02/00\nTESTNUMN DS    0H                                             SBG 02/00\n         USING XP2,R6                                         SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS            SBG 02/00\n         B     *+10                                           SBG 02/00\n         MVC   SPFUSER(0),XP2USER                             SBG 02/00\n         EX    R15,*-6                                        SBG 02/00\n         OI    STATUS,SPF          SET FLAG FOR STOW          SBG 02/00\n         DROP  R6                                             SBG 02/00\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         STOW  (R5),(R6),R\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWAR(R15)\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWNSSI            YES\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER(30),MEMUSER\n         MVI   SPFVM,1             1.0\n         XC    SPFRESV,SPFRESV     ZERO RESERVED BYTES\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         SRL   R0,16\n         STH   R0,SPFHHMM          TIME OF LAST CHANGE\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=CL10'PDSLOAD'\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\n         STOW  (R5),(R6),R\n         SPACE\n         CLM   R15,3,=X'0018'      UNEXPECTED RETURN CODE?\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nRESULT   EQU   LINE+48\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,4\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(7,R1),1(R1)\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(7,R1),1(R1)\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE 1\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\n         SPACE\nFIXINMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'VARIABLE-LENGTH OUTPUT REQUIRES VARIABLE-LENGTH INPUT'\nFIXMSGLN EQU   *-FIXINMSG\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,                       +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'00'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'6B'               COMMA\n         DC    148X'00'\n         SPACE\nALPHANUM DC    0D'0',64X'FF',X'00',26X'FF'\n*                            SPACE\n         DC    X'00',4X'FF',X'00',26X'FF',2X'00',68X'FF',09X'00'\n*                $            -              #@           A-I\n         DC    7X'FF',9X'00',8X'FF',8X'00',6X'FF',10X'00',6X'FF'\n*                       J-R            S-Z            0-9\n         SPACE\n*              THE ABOVE TABLE CAN BE USED TO TEST FOR ALPHANUMERIC\n*              (PLUS NATIONALS, HYPHEN, AND BLANK)\n*              WITH A 'TRT' INSTRUCTION.\n*              IF THE FIELD IS VALID, CONDITION CODE IS 0.\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  DC    240X'FF',10X'00',6X'FF'\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\n         DS    C                   LINE-1\nLINE     DS    CL133\nLINEH1   DS    CL133\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL30                SPF STATISTICS OR SSI\n         ORG   *-30\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFRESV  DS    XL2                 RESERVED\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL10                USERID\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD4": {"ttr": 13832, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\t\\x00\\x00\\x16\\x01\\x00\\x04O\\x01\\t\\x13\\x0f \\x03\\x06o\\x06\\x07\\x00\\x00\\xe3\\xc5\\xc1\\xd4`\\xc7\\xd7@@@'", "ispf": {"version": "09.00", "flags": 0, "createdate": "2000-02-13T00:00:00", "modifydate": "2009-05-10T20:03:16", "lines": 1647, "newlines": 1543, "modlines": 0, "user": "TEAM-GP"}, "text": "PDSLOAD  TITLE 'P D S L O A D  **  LOAD IEBUPDTE INPUT TO A PDS'\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 17, 2008\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='CTL(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE USED TO LOOK\n*         FOR THE ADD AND ALIAS CARDS.   GERHARD POSTPISCHIL    GP06315\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM WHICH CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESNT CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n*        11NOV2006 - ADDED CTL PARM OPTION TO SUPPORT ADDITIONAL LEVEL\n*                    OF ./ SUBSTITUTION E.G., MEMBERS W/SMP UPDATES\n*                  - ALSO CHANGED PARM PARSING - ANY ORDER NOW ALLOWED\n* GERHARD POSTPISCHIL                                           GP06315\n*----------------------------------------------------------------------\n*        17FEB2008 - ADD SYNAD EXIT ETC. TO ACQUIRE AND DISPLAY\n*                    I/O ERROR MESSAGE WHEN WRITE TO PDS FAILS.\n*                    ABEND U0101 AFTER WRITE I/O ERROR.\n*        10MAY2009 - DO NOT MAKE ALIAS WHEN REAL MEMBER NOT MADE.\n*                  - NOW COMPLETE THE ALLOWED RECFM COMBO SET:\n*                    FIXED-LENGTH INPUT WITH VARIABLE-LENGTH\n*                    OUTPUT WITH TRAILING BLANKS TRUNCATION.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER ARE\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n         SPACE\nPDSLOAD  START\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATE '   MVS 3.8        GP06315\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:F,V->V (TRUNC)'\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         MVC   SYNADMSG,SYNADWTO   PRIME I/O ERROR MESSAGE      FEB2008\n         SPACE\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPOGATOR\n         MVI   LINE-1,C' '         BLANK PROPOGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'        CONVERSION CODE (./)\n         MVC   CTLMODEL(2),UPDTE   CONTROL CARD CODE (./)       GP06315\n         MVC   CTLMODEL+2(10),=C' ADD NAME='                    GP06315\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BNP   PARMDONE                                         GP06315\nPARMLOOP CLI   2(R1),C','                                       GP06315\n         BNE   PARMNCOM                                         GP06315\n         LA    R3,1                SKIP COMMA                   GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCOM CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMBAD             NO, BYPASS COMPARE\n         CLC   =C'NEW',2(R1)       IS IT NEW, AS PER IEBUPDTE?  GP06315\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nTRYSPF   CLC   =C'SPF',2(R1)       IS IT SPF                    GP06315\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nPARMSX   CLC   =C'S(',2(R1)        IS IT S( ?                   GP06315\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,L'MEMSEL        SET MAX LOOP COUNT           GP06315\nPARMML   CLI   2(R1),C')'                                       GP06315\n         BE    PARMME\n         MVC   0(1,R15),2(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)           BUMP SKIP SIZE               GP06315\n         BCT   R0,PARMMIG          OK IF MORE                   GP06315\n         B     PARMBAD             ALL DONE, BUT MISSING ')'    GP06315\nPARMMIG  BCT   R14,PARMML          LOOP FOR MEMBER NAME         GP06315\n         CLI   2(R1),C')'          PROPER TERMINATION ?         GP06315\n         BL    PARMBAD             NO, FAIL                     GP06315\nPARMME   LA    R3,1                POINT PAST PAREN             GP06315\n         B     PARMBUMP            SKIP TO NEXT OPERAND         GP06315\nPARMMX   CH    R0,=H'7'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'CTL(',2(R1)      IS IT CTL(XX)                GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   8(R1),C')'          CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   CTLMODEL(2),6(R1)   YES, SAVE NEW CONTROLS       GP06315\n         LA    R1,7                                             GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCTL CH    R0,=H'9'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'UPDTE(',2(R1)    IS IT UPDTE(XX)              GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   10(R1),C')'         CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   UPDTE,8(R1)         YES, SAVE NEW CONVERSION     GP06315\n         LA    R3,9                                             GP06315\nPARMBUMP AR    R1,R3               NEXT PARM                    GP06315\n         SR    R0,R3               RESIDUAL LENGTH              GP06315\n         BP    PARMLOOP                                         GP06315\n         B     PARMDONE                                         GP06315\nPARMBAD  WTO   'PDSLOAD: INVALID PARM FIELD'                    GP06315\n         ABEND 100\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\nPARMDONE MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LA    R15,16\n         CLC   DDNAM(8,R4),=CL8'SYSUT1'  AFTER TRYING SYSUT1?\n         BNE   EXIT                      NO, OPEN FAILED\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         B     OKPRT               RETRY OPEN WITH SYSIN\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         CLC   =H'80',LRECL(R4)    INPUT LRECL<80?\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),X'10'\n         BO    OKUT2\n         LA    R15,16\n         B     EXIT\nUT2EXO   TM    RECFM(R1),X'C0'     NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    LRECL(2,R1),LRECL(R1)   RECFM=U SO FORCE LRECL=0\n         BR    R14                 RETURN\nUT2EX2   MVC   RECFM(1,R1),RECFM(R4)  YES, COPY INPUT RECFM\nUT2EX3   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n         MVC   LRECL(2,R1),LRECL(R4)    COPY INPUT LRECL\nUT2EX4   TM    RECFM(R1),X'80'     FIXED LENGTH RECORDS?\n         BOR   R14                 YES, USE SDB OR GOOD USER SPEC\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS\n         BR    R14                 USE SDB OR GOOD USER SPEC\n*\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         SPACE\n         LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     NI    FLAG1,255-FGNOCON   CHECK FOR UPDTE TRANSLATE    GP06315\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   CTLMODEL(2),0(R15)  CONTROL STATEMENT?           GP06315\n         BNE   COPY                NO\n         OI    FLAG1,FGNOCON       NO UPDTE TRANSLATE           GP06315\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,72-1            GET LENGTH CODE IF FIXED LENGTH\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,72-1             LENGTH CODE OF CONTROL STATEMENT\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               ENSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         TM    FLAG1,FGNOCON       NO UPDTE TRANSLATE ?         GP06315\n         BNZ   NOTUPDTE            CORRECT; SKIP AROUND         GP06315\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         MVC   LINE+1+13(2),CTLMODEL   BUT USE REAL CTL PAIR    GP06315\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n*\n*         ALLOW OUTPUT RECFM TO BE INDEPENDENT OF INPUT RECFM   MAY2009\n*\n*         1. GET INPUT DATA ADDRESS AND LENGTH                  MAY2009\n*\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    *+8                 YES, NO RDW PRESENT\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         AH    R14,DWLIN           POINT TO INPUT RECORD DATA\n         SH    R15,DWLIN           GET INPUT RECORD DATA LENGTH\n*\n*         2. BRANCH TO LOGIC PATH BASED ON OUTPUT RECFM         MAY2009\n*\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVAR              NO\n*\n*         3. BLOCK ANOTHER FIXED-LENGTH RECORD IF IT FITS       MAY2009\n*\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         B     PUTPAD              GO LOAD THE RECORD'S DATA\n*\n*         4. BLOCK VARIABLE-LENGTH RECORD IF IT FITS            MAY2009\n*\nPUTVAR   LA    R1,4(,R15)          GET IDEAL OUTPUT RECORD LENGTH\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BNE   TRAILOK             NO, SKIP TRAILING BLANKS DISCARD\n         LA    R1,0(R15,R14)       POINT PAST INPUT RECORD DATA\nTRAILOOP BCTR  R1,0                BACK UP A BYTE\n         CR    R1,R14              BACK TO START OF RECORD?\n         BNH   TRAILMIN            YES, USE MINIMUM LENGTH\n         CLI   0(R1),C' '          TRAILING BLANK?\n         BE    TRAILOOP            YES, KEEP BACKING UP\n         LA    R1,1+4(,R1)         NO, POINT PAST LAST NON-BLANK + RDW\n         SR    R1,R14              GET NEW IDEAL OUTPUT RECORD LENGTH\n         B     TRAILOK             DESIRED LENGTH NOW KNOWN\nTRAILMIN LA    R1,5                MINIMUM IS RDW + 1 DATA BYTE\nTRAILOK  CH    R1,LRECL(,R5)       LENGTH LONGER THAN OUTPUT LRECL?\n         BNH   *+8                 NO, USE THIS LENGTH\n         LH    R1,LRECL(,R5)       YES, REDUCE LENGTH TO OUTPUT LRECL\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         SR    R7,R6               GET NEW SIZE OF THIS BLOCK\n         STH   R7,0(,R6)           SET INTO BDW\n         LR    R7,R0               POINT TO RECORD TO LOAD\n         STCM  R1,3,0(R7)          SET RECORD LENGTH INTO RDW\n         STCM  R1,12,2(R7)         CLEAR REST OF RDW\n         AH    R0,DWLOT            POINT PAST RDW\n         SH    R1,DWLOT            GET DATA LENGTH AFTER RDW\n*\n*         5. LOAD THE DATA INTO THE NEW RECORD                  MAY2009\n*\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(72),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   CTLMODEL,0(R1)      ./ ADD NAME OR XX ADD        GP06315\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'9'           ID LENGTH CODE MAY BE 0 TO 9\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         PACK  DOUBLE,XPFCCNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFCCNT          CURRENT SIZE\n         PACK  DOUBLE,XPFICNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFICNT          INITIAL SIZE\n         PACK  DOUBLE,XPFMOD       MOD\n         CVB   R0,DOUBLE\n         STH   R0,SPFMOD           LINES MODIFIED\n         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS\n         B     *+10\n         MVC   SPFUSER(0),XPFUSER\n         EX    R15,*-6\n         OI    STATUS,SPF          SET FLAG FOR STOW\n         DROP  R6                                             SBG 02/00\n         B     NOSPF               GO PROCESS FURTHER         SBG 02/00\nTESTNUMN DS    0H                                             SBG 02/00\n         USING XP2,R6                                         SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS            SBG 02/00\n         B     *+10                                           SBG 02/00\n         MVC   SPFUSER(0),XP2USER                             SBG 02/00\n         EX    R15,*-6                                        SBG 02/00\n         OI    STATUS,SPF          SET FLAG FOR STOW          SBG 02/00\n         DROP  R6                                             SBG 02/00\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         TM    FLAG1,SELECTAL      REAL MEMBER CREATED?         MAY2009\n         BZ    READ                NO, CANNOT MAKE ALIAS OF IT  MAY2009\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWIT              GO CREATE ALIAS              MAY2009\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWNSSI            YES\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER(30),MEMUSER\n         MVI   SPFVM,1             1.0\n         XC    SPFRESV,SPFRESV     ZERO RESERVED BYTES\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         SRL   R0,16\n         STH   R0,SPFHHMM          TIME OF LAST CHANGE\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=CL10'PDSLOAD'\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\nSTOWIT   DS    0H                                               MAY2009\n         STOW  (R5),(R6),R\n         SPACE\n         CL    R15,=F'24'          UNEXPECTED RETURN CODE?      GP06315\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,4\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         OI    FLAG1,SELECTAL      ALIAS NOW ALLOWED            MAY2009\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(7,R1),1(R1)\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(7,R1),1(R1)\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         I/O ERROR                                        *    FEB2008\n*                                                          *     GP@P6\n************************************************************\n         SPACE\nIOERROR  WTO   MF=(E,SYNADMSG)     DISPLAY I/O ERROR MESSAGE\n         WTO   'PDSLOAD WILL ABEND - WRITE I/O ERROR',ROUTCDE=(11)\n         ABEND 101\n         SPACE\nPDSSYNAD DS    0H\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG+4(78),50(R1)\n         OI    FLAG1,IOERR\n         SYNADRLS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\nSYNADWTO WTO   '1234567890123456789012345678901234567890123456789012345+\n               67890123456789012345678',ROUTCDE=(11),MF=L\nSYNADLEN EQU   *-SYNADWTO\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,SYNAD=PDSSYNAD,        +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'00'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'6B'               COMMA\n         DC    148X'00'\n         SPACE\nALPHANUM DC    0D'0',64X'FF',X'00',26X'FF'\n*                            SPACE\n         DC    X'00',4X'FF',X'00',26X'FF',2X'00',68X'FF',09X'00'\n*                $            -              #@           A-I\n         DC    7X'FF',9X'00',8X'FF',8X'00',6X'FF',10X'00',6X'FF'\n*                       J-R            S-Z            0-9\n         SPACE\n*              THE ABOVE TABLE CAN BE USED TO TEST FOR ALPHANUMERIC\n*              (PLUS NATIONALS, HYPHEN, AND BLANK)\n*              WITH A 'TRT' INSTRUCTION.\n*              IF THE FIELD IS VALID, CONDITION CODE IS 0.\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  DC    240X'FF',10X'00',6X'FF'\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nCTLMODEL DC    CL12'./ ADD NAME='      LOOKING FOR              GP06315\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\nIOERR    EQU   X'08'               OUTPUT I/O ERROR             FEB2008\nFGNOCON  EQU   X'02'               CONTROL - SKIP UPDTE TEST    GP06315\nSELECTAL EQU   X'01'               ALIAS ALLOWED                MAY2009\n         DS    C                   LINE-1\nLINE     DS    CL133\nRESULT   EQU   LINE+48                           (IFOX00)       GP06315\nLINEH1   DS    CL133\n*\nSYNADMSG DS    XL(SYNADLEN)                                     FEB2008\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL30                SPF STATISTICS OR SSI\n         ORG   *-30\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFRESV  DS    XL2                 RESERVED\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL10                USERID\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD5": {"ttr": 14597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n\\x00\\x00\\x00\\x01\\x00\\x04O\\x01\\t(?\\x148\\x06\\xd3\\x06\\x07\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@'", "ispf": {"version": "10.00", "flags": 0, "createdate": "2000-02-13T00:00:00", "modifydate": "2009-10-10T14:38:00", "lines": 1747, "newlines": 1543, "modlines": 0, "user": "GREG"}, "text": "PDSLOAD  TITLE 'P D S L O A D  **  LOAD IEBUPDTE INPUT TO A PDS'\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 17, 2008\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='CTL(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE USED TO LOOK\n*         FOR THE ADD AND ALIAS CARDS.   GERHARD POSTPISCHIL    GP06315\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM WHICH CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESNT CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n*        11NOV2006 - ADDED CTL PARM OPTION TO SUPPORT ADDITIONAL LEVEL\n*                    OF ./ SUBSTITUTION E.G., MEMBERS W/SMP UPDATES\n*                  - ALSO CHANGED PARM PARSING - ANY ORDER NOW ALLOWED\n* GERHARD POSTPISCHIL                                           GP06315\n*----------------------------------------------------------------------\n*        17FEB2008 - ADD SYNAD EXIT ETC. TO ACQUIRE AND DISPLAY\n*                    I/O ERROR MESSAGE WHEN WRITE TO PDS FAILS.\n*                    ABEND U0101 AFTER WRITE I/O ERROR.\n*        10MAY2009 - DO NOT MAKE ALIAS WHEN REAL MEMBER NOT MADE.\n*                  - NOW COMPLETE THE ALLOWED RECFM COMBO SET:\n*                    FIXED-LENGTH INPUT WITH VARIABLE-LENGTH\n*                    OUTPUT WITH TRAILING BLANKS TRUNCATION.\n*        29SEP2009 - ISPF STATISTICS ENHANCEMEBTS:                 0909\n*                    - PROCESS SECONDS PART OF TIMESTAMP.\n*                    - SUPPORT ISPF EXTENDED STATISTICS.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER ARE\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n         SPACE\nPDSLOAD  START\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATE '   MVS 3.8        GP06315\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:F,V->V (TRUNC)'\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         MVC   SYNADMSG,SYNADWTO   PRIME I/O ERROR MESSAGE      FEB2008\n         SPACE\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPOGATOR\n         MVI   LINE-1,C' '         BLANK PROPOGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'        CONVERSION CODE (./)\n         MVC   CTLMODEL(2),UPDTE   CONTROL CARD CODE (./)       GP06315\n         MVC   CTLMODEL+2(10),=C' ADD NAME='                    GP06315\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BNP   PARMDONE                                         GP06315\nPARMLOOP CLI   2(R1),C','                                       GP06315\n         BNE   PARMNCOM                                         GP06315\n         LA    R3,1                SKIP COMMA                   GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCOM CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMBAD             NO, BYPASS COMPARE\n         CLC   =C'NEW',2(R1)       IS IT NEW, AS PER IEBUPDTE?  GP06315\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nTRYSPF   CLC   =C'SPF',2(R1)       IS IT SPF                    GP06315\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nPARMSX   CLC   =C'S(',2(R1)        IS IT S( ?                   GP06315\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,L'MEMSEL        SET MAX LOOP COUNT           GP06315\nPARMML   CLI   2(R1),C')'                                       GP06315\n         BE    PARMME\n         MVC   0(1,R15),2(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)           BUMP SKIP SIZE               GP06315\n         BCT   R0,PARMMIG          OK IF MORE                   GP06315\n         B     PARMBAD             ALL DONE, BUT MISSING ')'    GP06315\nPARMMIG  BCT   R14,PARMML          LOOP FOR MEMBER NAME         GP06315\n         CLI   2(R1),C')'          PROPER TERMINATION ?         GP06315\n         BL    PARMBAD             NO, FAIL                     GP06315\nPARMME   LA    R3,1                POINT PAST PAREN             GP06315\n         B     PARMBUMP            SKIP TO NEXT OPERAND         GP06315\nPARMMX   CH    R0,=H'7'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'CTL(',2(R1)      IS IT CTL(XX)                GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   8(R1),C')'          CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   CTLMODEL(2),6(R1)   YES, SAVE NEW CONTROLS       GP06315\n         LA    R1,7                                             GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCTL CH    R0,=H'9'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'UPDTE(',2(R1)    IS IT UPDTE(XX)              GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   10(R1),C')'         CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   UPDTE,8(R1)         YES, SAVE NEW CONVERSION     GP06315\n         LA    R3,9                                             GP06315\nPARMBUMP AR    R1,R3               NEXT PARM                    GP06315\n         SR    R0,R3               RESIDUAL LENGTH              GP06315\n         BP    PARMLOOP                                         GP06315\n         B     PARMDONE                                         GP06315\nPARMBAD  WTO   'PDSLOAD: INVALID PARM FIELD'                    GP06315\n         ABEND 100\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\nPARMDONE MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LA    R15,16\n         CLC   DDNAM(8,R4),=CL8'SYSUT1'  AFTER TRYING SYSUT1?\n         BNE   EXIT                      NO, OPEN FAILED\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         B     OKPRT               RETRY OPEN WITH SYSIN\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         CLC   =H'80',LRECL(R4)    INPUT LRECL<80?\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),X'10'\n         BO    OKUT2\n         LA    R15,16\n         B     EXIT\nUT2EXO   TM    RECFM(R1),X'C0'     NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    LRECL(2,R1),LRECL(R1)   RECFM=U SO FORCE LRECL=0\n         BR    R14                 RETURN\nUT2EX2   MVC   RECFM(1,R1),RECFM(R4)  YES, COPY INPUT RECFM\nUT2EX3   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n         MVC   LRECL(2,R1),LRECL(R4)    COPY INPUT LRECL\nUT2EX4   TM    RECFM(R1),X'80'     FIXED LENGTH RECORDS?\n         BOR   R14                 YES, USE SDB OR GOOD USER SPEC\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS\n         BR    R14                 USE SDB OR GOOD USER SPEC\n*\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         SPACE\n         LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     NI    FLAG1,255-FGNOCON   CHECK FOR UPDTE TRANSLATE    GP06315\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   CTLMODEL(2),0(R15)  CONTROL STATEMENT?           GP06315\n         BNE   COPY                NO\n         OI    FLAG1,FGNOCON       NO UPDTE TRANSLATE           GP06315\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,80-1            GET LENGTH CODE IF FIXED LEN   C0909\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,80-1             LENGTH CODE OF CONTROL STMT    C0909\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               ENSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         TM    FLAG1,FGNOCON       NO UPDTE TRANSLATE ?         GP06315\n         BNZ   NOTUPDTE            CORRECT; SKIP AROUND         GP06315\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         MVC   LINE+1+13(2),CTLMODEL   BUT USE REAL CTL PAIR    GP06315\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n*\n*         ALLOW OUTPUT RECFM TO BE INDEPENDENT OF INPUT RECFM   MAY2009\n*\n*         1. GET INPUT DATA ADDRESS AND LENGTH                  MAY2009\n*\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    *+8                 YES, NO RDW PRESENT\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         AH    R14,DWLIN           POINT TO INPUT RECORD DATA\n         SH    R15,DWLIN           GET INPUT RECORD DATA LENGTH\n*\n*         2. BRANCH TO LOGIC PATH BASED ON OUTPUT RECFM         MAY2009\n*\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVAR              NO\n*\n*         3. BLOCK ANOTHER FIXED-LENGTH RECORD IF IT FITS       MAY2009\n*\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         B     PUTPAD              GO LOAD THE RECORD'S DATA\n*\n*         4. BLOCK VARIABLE-LENGTH RECORD IF IT FITS            MAY2009\n*\nPUTVAR   LA    R1,4(,R15)          GET IDEAL OUTPUT RECORD LENGTH\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BNE   TRAILOK             NO, SKIP TRAILING BLANKS DISCARD\n         LA    R1,0(R15,R14)       POINT PAST INPUT RECORD DATA\nTRAILOOP BCTR  R1,0                BACK UP A BYTE\n         CR    R1,R14              BACK TO START OF RECORD?\n         BNH   TRAILMIN            YES, USE MINIMUM LENGTH\n         CLI   0(R1),C' '          TRAILING BLANK?\n         BE    TRAILOOP            YES, KEEP BACKING UP\n         LA    R1,1+4(,R1)         NO, POINT PAST LAST NON-BLANK + RDW\n         SR    R1,R14              GET NEW IDEAL OUTPUT RECORD LENGTH\n         B     TRAILOK             DESIRED LENGTH NOW KNOWN\nTRAILMIN LA    R1,5                MINIMUM IS RDW + 1 DATA BYTE\nTRAILOK  CH    R1,LRECL(,R5)       LENGTH LONGER THAN OUTPUT LRECL?\n         BNH   *+8                 NO, USE THIS LENGTH\n         LH    R1,LRECL(,R5)       YES, REDUCE LENGTH TO OUTPUT LRECL\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         SR    R7,R6               GET NEW SIZE OF THIS BLOCK\n         STH   R7,0(,R6)           SET INTO BDW\n         LR    R7,R0               POINT TO RECORD TO LOAD\n         STCM  R1,3,0(R7)          SET RECORD LENGTH INTO RDW\n         STCM  R1,12,2(R7)         CLEAR REST OF RDW\n         AH    R0,DWLOT            POINT PAST RDW\n         SH    R1,DWLOT            GET DATA LENGTH AFTER RDW\n*\n*         5. LOAD THE DATA INTO THE NEW RECORD                  MAY2009\n*\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(80),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   CTLMODEL,0(R1)      ./ ADD NAME OR XX ADD        GP06315\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA                 A0909\n         MVI   ZEROAREA,C'0'       GET SOME UNPACKED ZEROS        A0909\n         MVC   ZEROAREA+1(L'ZEROAREA-1),ZEROAREA                  A0909\n         MVC   SPFUSER,=CL8' '     PAD WITH BLANKS                M0909\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'6'           ID LENGTH CODE MAY BE 0 TO 6   C0909\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         MVC   #CRNTSML,XPFCCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XPFICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XPFMOD      CHANGED SIZE                   C0909\n         EX    R15,XPFUIDLD        LOAD USERID                    C0909\n         B     ISSPF               GO PROCESS FURTHER             C0909\nXPFUIDLD MVC   SPFUSER(0),XPFUSER  <<< EXECUTED >>>               M0909\n         DROP  R6                  (XPF)                      SBG 02/00\n         USING XP2,R6                                         SBG 02/00\nXP2UIDLD MVC   SPFUSER(0),XP2USER  <<< EXECUTED >>>               M0909\nTESTNUMN DS    0H                                             SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   #CRNTSML,XP2CCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XP2ICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XP2MOD      CHANGED SIZE                   C0909\n         EX    R15,XP2UIDLD        LOAD USERID                    C0909\nISSPF    OI    STATUS,SPF          SET FLAG FOR STOW              C0909\n         DROP  R6                  (XP2)                      SBG 02/00\n*\n*              LOOK FOR EXTENSIONS - SECONDS IS A PRE-REQ         A0909\n*\n         TM    ODE5+6,X'80'        SECONDS PRESENT?               A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,2                                               A0909\n         CH    R0,ODE5+4           LENGTH EXACTLY TWO?            A0909\n         BNE   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         L     R15,ODE5            YES, POINT TO DATA             A0909\n         TRT   0(2,R15),NUMERIC    DECIMAL DIGITS?                A0909\n         BNZ   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         CLI   0(R15),C'5'         YES, BUT IS IT LESS THAN 60?   A0909\n         BH    XSPFOK              NO, CANNOT BE SECONDS          A0909\n         ICM   R0,1,1(R15)         GET SECOND DIGIT               A0909\n         SLL   R0,4                SHIFT OUT ZONE                 A0909\n         ICM   R0,2,0(R15)         GET FIRST DIGIT                A0909\n         SRL   R0,4                GET NUMERICS IN ONE BYTE       A0909\n         STC   R0,SPFSECS          SAVE THE SECONDS VALUE         A0909\n         TM    ODE6+6,X'80'        ANYTHING ELSE PRESENT?         A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,8                                               A0909\n         CH    R0,ODE6+4           AT LEAST EIGHT NON-BLANKS?     A0909\n         BH    XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         L     R15,ODE6            YES, POINT TO DATA             A0909\n         TRT   0(8,R15),NUMERIC    EIGHT DECIMAL DIGITS?          A0909\n         BNZ   XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         MVC   #CRNT(3),0(R15)     FIRST 3 TO CURRENT             A0909\n         MVC   #INIT(3),3(R15)     NEXT 3 TO INITIAL              A0909\n         MVC   #MOD(2),6(R15)      LAST 2 TO MODIFIED             A0909\n*\n*              NOTE THAT EXTENDED ISPF STATS CAN BE STOWED        A0909\n*              EVEN IF THE COUNTER HIGH-ORDER EXTENSION           A0909\n*              FIELD IS NOT PRESENT IN THE INPUT RECORD.          A0909\n*\n*              IF AN ORIGINAL 5-DIGIT COUNTER HAS A VALUE         A0909\n*              OVER 65535 THEN EXTENDED ISPF STATS WILL           A0909\n*              BE STOWED.                                         A0909\n*\n*              THE CURRENT RECORD COUNTER IS EFFECTIVELY          A0909\n*              IGNORED BY PDSLOAD BECAUSE THIS FIELD IS SET       A0909\n*              FROM THE NUMBER OF RECORDS WRITTEN TO THE          A0909\n*              MEMBER BY PDSLOAD.  BUT HAVING THE CURRENT         A0909\n*              RECORD COUNT IN THE SEQUENTIAL FILE IS GOOD        A0909\n*              FOR AUDIT TRAIL AND HUMAN CONVENIENCE PURPOSES.    A0909\n*\nXSPFOK   PACK  DOUBLE,#CRNT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         STH   R0,SPFCCNT          FIX CURRENT AT STOW TIME       A0909\n         PACK  DOUBLE,#INIT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXICNT         SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFICNT          SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXICNT       COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    GETMOD              NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nGETMOD   PACK  DOUBLE,#MOD                                        A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXMOD          SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFMOD           SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXMOD        COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    NOSPF               NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         TM    FLAG1,SELECTAL      REAL MEMBER CREATED?         MAY2009\n         BZ    READ                NO, CANNOT MAKE ALIAS OF IT  MAY2009\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWIT              GO CREATE ALIAS              MAY2009\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWFIXD            YES                            C0909\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\nSTOWFIXD ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWXCHK            YES, HALFWORD COUNTER CORRECT  A0909\n         MVC   SPFCCNT,=X'FFFF'    NO, SET TO HIGH VALUES         A0909\nSTOWXCHK TM    SPFFLAGS,SPFXSTAT   USING EXTENDED STATS?          A0909\n         BO    STOWXSET            YES                            A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, CLASSIC STATS WILL DO     A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\nSTOWXSET MVC   SPFXCCNT,SEQ        SET CURRENT RECORD COUNT       A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA\n         MVI   SPFVM,1             1.0\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         STCM  R0,12,SPFHHMM       TIME OF LAST CHANGE (HHMM)     C0909\n         STCM  R0,2,SPFSECS        TIME OF LAST CHANGE (SS)       A0909\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=C'PDSLOAD'\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, SET CLASSIC STATS         A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTERS HIGH     A0909\n         MVC   SPFCCNT,=X'FFFF'                                   A0909\n         ST    R1,SPFXICNT         ALSO SET FULLWORD COUNTERS     A0909\n         ST    R1,SPFXCCNT                                        A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\nSTOWIT   DS    0H                                               MAY2009\n         STOW  (R5),(R6),R\n         SPACE\n         CL    R15,=F'24'          UNEXPECTED RETURN CODE?      GP06315\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,4\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         OI    FLAG1,SELECTAL      ALIAS NOW ALLOWED            MAY2009\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         I/O ERROR                                        *    FEB2008\n*                                                          *     GP@P6\n************************************************************\n         SPACE\nIOERROR  WTO   MF=(E,SYNADMSG)     DISPLAY I/O ERROR MESSAGE\n         WTO   'PDSLOAD WILL ABEND - WRITE I/O ERROR',ROUTCDE=(11)\n         ABEND 101\n         SPACE\nPDSSYNAD DS    0H\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG+4(78),50(R1)\n         OI    FLAG1,IOERR\n         SYNADRLS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\nSYNADWTO WTO   '1234567890123456789012345678901234567890123456789012345+\n               67890123456789012345678',ROUTCDE=(11),MF=L\nSYNADLEN EQU   *-SYNADWTO\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,SYNAD=PDSSYNAD,        +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'00'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'6B'               COMMA\n         DC    148X'00'\n         SPACE\nALPHANUM DC    0D'0',64X'FF',X'00',26X'FF'\n*                            SPACE\n         DC    X'00',4X'FF',X'00',26X'FF',2X'00',68X'FF',09X'00'\n*                $            -              #@           A-I\n         DC    7X'FF',9X'00',8X'FF',8X'00',6X'FF',10X'00',6X'FF'\n*                       J-R            S-Z            0-9\n         SPACE\n*              THE ABOVE TABLE CAN BE USED TO TEST FOR ALPHANUMERIC\n*              (PLUS NATIONALS, HYPHEN, AND BLANK)\n*              WITH A 'TRT' INSTRUCTION.\n*              IF THE FIELD IS VALID, CONDITION CODE IS 0.\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  DC    240X'FF',10X'00',6X'FF'\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nCTLMODEL DC    CL12'./ ADD NAME='      LOOKING FOR              GP06315\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODE6     DS    2F                  OPERAND DESCRIPTOR ENTRY 6     A0909\nODE7     DS    2F                  OPERAND DESCRIPTOR ENTRY 7     A0909\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\nIOERR    EQU   X'08'               OUTPUT I/O ERROR             FEB2008\nFGNOCON  EQU   X'02'               CONTROL - SKIP UPDTE TEST    GP06315\nSELECTAL EQU   X'01'               ALIAS ALLOWED                MAY2009\n         DS    C                   LINE-1\nLINE     DS    CL133\nRESULT   EQU   LINE+48                           (IFOX00)       GP06315\nLINEH1   DS    CL133\n*\nSYNADMSG DS    XL(SYNADLEN)                                     FEB2008\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL40                SPF STATISTICS OR SSI          C0909\n         ORG   MEMUSER                                            C0909\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFFLAGS DS    X                   FLAGS                          A0909\nSPFSCLM  EQU   X'80'               SCLM-MANAGED                   A0909\nSPFXSTAT EQU   X'20'               EXTENDED STATISTICS            A0909\nSPFSECS  DS    X                   TIME LAST UPDATED (SS)         A0909\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED (HHMM)\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL7                 USERID                         C0909\nSPFBLANK DS    CL3                 ONE OR THREE BLANKS            A0909\n         ORG   SPFBLANK+1                                         A0909\nSPFXCCNT DS    F                   CURRENT SIZE                   A0909\nSPFXICNT DS    F                   INITIAL SIZE                   A0909\nSPFXMOD  DS    F                   MODS                           A0909\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n*\nZEROAREA DS    0CL(8+8+7)          UNPACKED COUNTERS AREA         A0909\n#CRNT    DS    CL8                 CURRENT RECORD COUNT           A0909\n#CRNTSML EQU   #CRNT+3,5           CURRENT RECORD COUNT           A0909\n#INIT    DS    CL8                 INITIAL RECORD COUNT           A0909\n#INITSML EQU   #INIT+3,5           INITIAL RECORD COUNT           A0909\n#MOD     DS    CL7                 CHANGED RECORD COUNT           A0909\n#MODSML  EQU   #MOD+2,5            CHANGED RECORD COUNT           A0909\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD6": {"ttr": 15363, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n\\x06\\x00@\\x01\\x00\\x04O\\x01\\x12\\x00_\\x14\\x04\\x06\\xdd\\x06\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "10.06", "flags": 0, "createdate": "2000-02-13T00:00:00", "modifydate": "2012-01-05T14:04:40", "lines": 1757, "newlines": 1543, "modlines": 0, "user": "SBGOLOB"}, "text": "PDSLOAD  TITLE 'P D S L O A D  **  LOAD IEBUPDTE INPUT TO A PDS'\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 17, 2008\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='CTL(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE USED TO LOOK\n*         FOR THE ADD AND ALIAS CARDS.   GERHARD POSTPISCHIL    GP06315\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM WHICH CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESNT CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n*        11NOV2006 - ADDED CTL PARM OPTION TO SUPPORT ADDITIONAL LEVEL\n*                    OF ./ SUBSTITUTION E.G., MEMBERS W/SMP UPDATES\n*                  - ALSO CHANGED PARM PARSING - ANY ORDER NOW ALLOWED\n* GERHARD POSTPISCHIL                                           GP06315\n*----------------------------------------------------------------------\n*        17FEB2008 - ADD SYNAD EXIT ETC. TO ACQUIRE AND DISPLAY\n*                    I/O ERROR MESSAGE WHEN WRITE TO PDS FAILS.\n*                    ABEND U0101 AFTER WRITE I/O ERROR.\n*        10MAY2009 - DO NOT MAKE ALIAS WHEN REAL MEMBER NOT MADE.\n*                  - NOW COMPLETE THE ALLOWED RECFM COMBO SET:\n*                    FIXED-LENGTH INPUT WITH VARIABLE-LENGTH\n*                    OUTPUT WITH TRAILING BLANKS TRUNCATION.\n*        29SEP2009 - ISPF STATISTICS ENHANCEMENTS:                 0909\n*                    - PROCESS SECONDS PART OF TIMESTAMP.\n*                    - SUPPORT ISPF EXTENDED STATISTICS.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*        05JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS.\n*                    ADD { X'C0' SUPPORT TO ALPHANUM TRANSLATE\n*                    TABLE.  IF YOU WANT TO GET RID OF THE MEMBER\n*                    NAME VALIDITY CHECK ENTIRELY, THEN UNCOMMENT\n*                    THE STATEMENT:\n*                    \"B    BYPVALID\"\n*                    AFTER THE LABEL \"SIMPLE\".\n* SAM GOLOB\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER ARE\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n         SPACE\nPDSLOAD  START\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATE '   MVS 3.8        GP06315\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:F,V->V (TRUNC)'\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         MVC   SYNADMSG,SYNADWTO   PRIME I/O ERROR MESSAGE      FEB2008\n         SPACE\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPOGATOR\n         MVI   LINE-1,C' '         BLANK PROPOGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'        CONVERSION CODE (./)\n         MVC   CTLMODEL(2),UPDTE   CONTROL CARD CODE (./)       GP06315\n         MVC   CTLMODEL+2(10),=C' ADD NAME='                    GP06315\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BNP   PARMDONE                                         GP06315\nPARMLOOP CLI   2(R1),C','                                       GP06315\n         BNE   PARMNCOM                                         GP06315\n         LA    R3,1                SKIP COMMA                   GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCOM CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMBAD             NO, BYPASS COMPARE\n         CLC   =C'NEW',2(R1)       IS IT NEW, AS PER IEBUPDTE?  GP06315\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nTRYSPF   CLC   =C'SPF',2(R1)       IS IT SPF                    GP06315\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nPARMSX   CLC   =C'S(',2(R1)        IS IT S( ?                   GP06315\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,L'MEMSEL        SET MAX LOOP COUNT           GP06315\nPARMML   CLI   2(R1),C')'                                       GP06315\n         BE    PARMME\n         MVC   0(1,R15),2(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)           BUMP SKIP SIZE               GP06315\n         BCT   R0,PARMMIG          OK IF MORE                   GP06315\n         B     PARMBAD             ALL DONE, BUT MISSING ')'    GP06315\nPARMMIG  BCT   R14,PARMML          LOOP FOR MEMBER NAME         GP06315\n         CLI   2(R1),C')'          PROPER TERMINATION ?         GP06315\n         BL    PARMBAD             NO, FAIL                     GP06315\nPARMME   LA    R3,1                POINT PAST PAREN             GP06315\n         B     PARMBUMP            SKIP TO NEXT OPERAND         GP06315\nPARMMX   CH    R0,=H'7'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'CTL(',2(R1)      IS IT CTL(XX)                GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   8(R1),C')'          CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   CTLMODEL(2),6(R1)   YES, SAVE NEW CONTROLS       GP06315\n         LA    R1,7                                             GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCTL CH    R0,=H'9'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'UPDTE(',2(R1)    IS IT UPDTE(XX)              GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   10(R1),C')'         CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   UPDTE,8(R1)         YES, SAVE NEW CONVERSION     GP06315\n         LA    R3,9                                             GP06315\nPARMBUMP AR    R1,R3               NEXT PARM                    GP06315\n         SR    R0,R3               RESIDUAL LENGTH              GP06315\n         BP    PARMLOOP                                         GP06315\n         B     PARMDONE                                         GP06315\nPARMBAD  WTO   'PDSLOAD: INVALID PARM FIELD'                    GP06315\n         ABEND 100\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\nPARMDONE MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LA    R15,16\n         CLC   DDNAM(8,R4),=CL8'SYSUT1'  AFTER TRYING SYSUT1?\n         BNE   EXIT                      NO, OPEN FAILED\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         B     OKPRT               RETRY OPEN WITH SYSIN\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         CLC   =H'80',LRECL(R4)    INPUT LRECL<80?\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),X'10'\n         BO    OKUT2\n         LA    R15,16\n         B     EXIT\nUT2EXO   TM    RECFM(R1),X'C0'     NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    LRECL(2,R1),LRECL(R1)   RECFM=U SO FORCE LRECL=0\n         BR    R14                 RETURN\nUT2EX2   MVC   RECFM(1,R1),RECFM(R4)  YES, COPY INPUT RECFM\nUT2EX3   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n         MVC   LRECL(2,R1),LRECL(R4)    COPY INPUT LRECL\nUT2EX4   TM    RECFM(R1),X'80'     FIXED LENGTH RECORDS?\n         BOR   R14                 YES, USE SDB OR GOOD USER SPEC\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS\n         BR    R14                 USE SDB OR GOOD USER SPEC\n*\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         SPACE\n         LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     NI    FLAG1,255-FGNOCON   CHECK FOR UPDTE TRANSLATE    GP06315\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   CTLMODEL(2),0(R15)  CONTROL STATEMENT?           GP06315\n         BNE   COPY                NO\n         OI    FLAG1,FGNOCON       NO UPDTE TRANSLATE           GP06315\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,80-1            GET LENGTH CODE IF FIXED LEN   C0909\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,80-1             LENGTH CODE OF CONTROL STMT    C0909\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               ENSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         TM    FLAG1,FGNOCON       NO UPDTE TRANSLATE ?         GP06315\n         BNZ   NOTUPDTE            CORRECT; SKIP AROUND         GP06315\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         MVC   LINE+1+13(2),CTLMODEL   BUT USE REAL CTL PAIR    GP06315\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n*\n*         ALLOW OUTPUT RECFM TO BE INDEPENDENT OF INPUT RECFM   MAY2009\n*\n*         1. GET INPUT DATA ADDRESS AND LENGTH                  MAY2009\n*\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    *+8                 YES, NO RDW PRESENT\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         AH    R14,DWLIN           POINT TO INPUT RECORD DATA\n         SH    R15,DWLIN           GET INPUT RECORD DATA LENGTH\n*\n*         2. BRANCH TO LOGIC PATH BASED ON OUTPUT RECFM         MAY2009\n*\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVAR              NO\n*\n*         3. BLOCK ANOTHER FIXED-LENGTH RECORD IF IT FITS       MAY2009\n*\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         B     PUTPAD              GO LOAD THE RECORD'S DATA\n*\n*         4. BLOCK VARIABLE-LENGTH RECORD IF IT FITS            MAY2009\n*\nPUTVAR   LA    R1,4(,R15)          GET IDEAL OUTPUT RECORD LENGTH\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BNE   TRAILOK             NO, SKIP TRAILING BLANKS DISCARD\n         LA    R1,0(R15,R14)       POINT PAST INPUT RECORD DATA\nTRAILOOP BCTR  R1,0                BACK UP A BYTE\n         CR    R1,R14              BACK TO START OF RECORD?\n         BNH   TRAILMIN            YES, USE MINIMUM LENGTH\n         CLI   0(R1),C' '          TRAILING BLANK?\n         BE    TRAILOOP            YES, KEEP BACKING UP\n         LA    R1,1+4(,R1)         NO, POINT PAST LAST NON-BLANK + RDW\n         SR    R1,R14              GET NEW IDEAL OUTPUT RECORD LENGTH\n         B     TRAILOK             DESIRED LENGTH NOW KNOWN\nTRAILMIN LA    R1,5                MINIMUM IS RDW + 1 DATA BYTE\nTRAILOK  CH    R1,LRECL(,R5)       LENGTH LONGER THAN OUTPUT LRECL?\n         BNH   *+8                 NO, USE THIS LENGTH\n         LH    R1,LRECL(,R5)       YES, REDUCE LENGTH TO OUTPUT LRECL\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         SR    R7,R6               GET NEW SIZE OF THIS BLOCK\n         STH   R7,0(,R6)           SET INTO BDW\n         LR    R7,R0               POINT TO RECORD TO LOAD\n         STCM  R1,3,0(R7)          SET RECORD LENGTH INTO RDW\n         STCM  R1,12,2(R7)         CLEAR REST OF RDW\n         AH    R0,DWLOT            POINT PAST RDW\n         SH    R1,DWLOT            GET DATA LENGTH AFTER RDW\n*\n*         5. LOAD THE DATA INTO THE NEW RECORD                  MAY2009\n*\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(80),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   CTLMODEL,0(R1)      ./ ADD NAME OR XX ADD        GP06315\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA                 A0909\n         MVI   ZEROAREA,C'0'       GET SOME UNPACKED ZEROS        A0909\n         MVC   ZEROAREA+1(L'ZEROAREA-1),ZEROAREA                  A0909\n         MVC   SPFUSER,=CL8' '     PAD WITH BLANKS                M0909\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n*        B     BYPVALID            BYPASS MEMBER VALIDITY CHECK\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\nBYPVALID DS    0H\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'6'           ID LENGTH CODE MAY BE 0 TO 6   C0909\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         MVC   #CRNTSML,XPFCCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XPFICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XPFMOD      CHANGED SIZE                   C0909\n         EX    R15,XPFUIDLD        LOAD USERID                    C0909\n         B     ISSPF               GO PROCESS FURTHER             C0909\nXPFUIDLD MVC   SPFUSER(0),XPFUSER  <<< EXECUTED >>>               M0909\n         DROP  R6                  (XPF)                      SBG 02/00\n         USING XP2,R6                                         SBG 02/00\nXP2UIDLD MVC   SPFUSER(0),XP2USER  <<< EXECUTED >>>               M0909\nTESTNUMN DS    0H                                             SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   #CRNTSML,XP2CCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XP2ICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XP2MOD      CHANGED SIZE                   C0909\n         EX    R15,XP2UIDLD        LOAD USERID                    C0909\nISSPF    OI    STATUS,SPF          SET FLAG FOR STOW              C0909\n         DROP  R6                  (XP2)                      SBG 02/00\n*\n*              LOOK FOR EXTENSIONS - SECONDS IS A PRE-REQ         A0909\n*\n         TM    ODE5+6,X'80'        SECONDS PRESENT?               A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,2                                               A0909\n         CH    R0,ODE5+4           LENGTH EXACTLY TWO?            A0909\n         BNE   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         L     R15,ODE5            YES, POINT TO DATA             A0909\n         TRT   0(2,R15),NUMERIC    DECIMAL DIGITS?                A0909\n         BNZ   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         CLI   0(R15),C'5'         YES, BUT IS IT LESS THAN 60?   A0909\n         BH    XSPFOK              NO, CANNOT BE SECONDS          A0909\n         ICM   R0,1,1(R15)         GET SECOND DIGIT               A0909\n         SLL   R0,4                SHIFT OUT ZONE                 A0909\n         ICM   R0,2,0(R15)         GET FIRST DIGIT                A0909\n         SRL   R0,4                GET NUMERICS IN ONE BYTE       A0909\n         STC   R0,SPFSECS          SAVE THE SECONDS VALUE         A0909\n         TM    ODE6+6,X'80'        ANYTHING ELSE PRESENT?         A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,8                                               A0909\n         CH    R0,ODE6+4           AT LEAST EIGHT NON-BLANKS?     A0909\n         BH    XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         L     R15,ODE6            YES, POINT TO DATA             A0909\n         TRT   0(8,R15),NUMERIC    EIGHT DECIMAL DIGITS?          A0909\n         BNZ   XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         MVC   #CRNT(3),0(R15)     FIRST 3 TO CURRENT             A0909\n         MVC   #INIT(3),3(R15)     NEXT 3 TO INITIAL              A0909\n         MVC   #MOD(2),6(R15)      LAST 2 TO MODIFIED             A0909\n*\n*              NOTE THAT EXTENDED ISPF STATS CAN BE STOWED        A0909\n*              EVEN IF THE COUNTER HIGH-ORDER EXTENSION           A0909\n*              FIELD IS NOT PRESENT IN THE INPUT RECORD.          A0909\n*\n*              IF AN ORIGINAL 5-DIGIT COUNTER HAS A VALUE         A0909\n*              OVER 65535 THEN EXTENDED ISPF STATS WILL           A0909\n*              BE STOWED.                                         A0909\n*\n*              THE CURRENT RECORD COUNTER IS EFFECTIVELY          A0909\n*              IGNORED BY PDSLOAD BECAUSE THIS FIELD IS SET       A0909\n*              FROM THE NUMBER OF RECORDS WRITTEN TO THE          A0909\n*              MEMBER BY PDSLOAD.  BUT HAVING THE CURRENT         A0909\n*              RECORD COUNT IN THE SEQUENTIAL FILE IS GOOD        A0909\n*              FOR AUDIT TRAIL AND HUMAN CONVENIENCE PURPOSES.    A0909\n*\nXSPFOK   PACK  DOUBLE,#CRNT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         STH   R0,SPFCCNT          FIX CURRENT AT STOW TIME       A0909\n         PACK  DOUBLE,#INIT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXICNT         SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFICNT          SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXICNT       COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    GETMOD              NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nGETMOD   PACK  DOUBLE,#MOD                                        A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXMOD          SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFMOD           SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXMOD        COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    NOSPF               NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         TM    FLAG1,SELECTAL      REAL MEMBER CREATED?         MAY2009\n         BZ    READ                NO, CANNOT MAKE ALIAS OF IT  MAY2009\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWIT              GO CREATE ALIAS              MAY2009\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWFIXD            YES                            C0909\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\nSTOWFIXD ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWXCHK            YES, HALFWORD COUNTER CORRECT  A0909\n         MVC   SPFCCNT,=X'FFFF'    NO, SET TO HIGH VALUES         A0909\nSTOWXCHK TM    SPFFLAGS,SPFXSTAT   USING EXTENDED STATS?          A0909\n         BO    STOWXSET            YES                            A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, CLASSIC STATS WILL DO     A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\nSTOWXSET MVC   SPFXCCNT,SEQ        SET CURRENT RECORD COUNT       A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA\n         MVI   SPFVM,1             1.0\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         STCM  R0,12,SPFHHMM       TIME OF LAST CHANGE (HHMM)     C0909\n         STCM  R0,2,SPFSECS        TIME OF LAST CHANGE (SS)       A0909\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=C'PDSLOAD'\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, SET CLASSIC STATS         A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTERS HIGH     A0909\n         MVC   SPFCCNT,=X'FFFF'                                   A0909\n         ST    R1,SPFXICNT         ALSO SET FULLWORD COUNTERS     A0909\n         ST    R1,SPFXCCNT                                        A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\nSTOWIT   DS    0H                                               MAY2009\n         STOW  (R5),(R6),R\n         SPACE\n         CL    R15,=F'24'          UNEXPECTED RETURN CODE?      GP06315\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,4\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         OI    FLAG1,SELECTAL      ALIAS NOW ALLOWED            MAY2009\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         I/O ERROR                                        *    FEB2008\n*                                                          *     GP@P6\n************************************************************\n         SPACE\nIOERROR  WTO   MF=(E,SYNADMSG)     DISPLAY I/O ERROR MESSAGE\n         WTO   'PDSLOAD WILL ABEND - WRITE I/O ERROR',ROUTCDE=(11)\n         ABEND 101\n         SPACE\nPDSSYNAD DS    0H\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG+4(78),50(R1)\n         OI    FLAG1,IOERR\n         SYNADRLS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\nSYNADWTO WTO   '1234567890123456789012345678901234567890123456789012345+\n               67890123456789012345678',ROUTCDE=(11),MF=L\nSYNADLEN EQU   *-SYNADWTO\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,SYNAD=PDSSYNAD,        +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'00'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'6B'               COMMA\n         DC    148X'00'\n         SPACE\nALPHANUM DC    0D'0',64X'FF',X'00',26X'FF'\n*                            SPACE\n         DC    X'00',4X'FF',X'00',26X'FF',2X'00',67X'FF',10X'00'\n*                $            -              #@          { AND A-I\n         DC    7X'FF',9X'00',8X'FF',8X'00',6X'FF',10X'00',6X'FF'\n*                       J-R            S-Z            0-9\n         SPACE\n*              THE ABOVE TABLE CAN BE USED TO TEST FOR ALPHANUMERIC\n*              (PLUS NATIONALS, HYPHEN, AND BLANK)\n*              WITH A 'TRT' INSTRUCTION.\n*              IF THE FIELD IS VALID, CONDITION CODE IS 0.\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  DC    240X'FF',10X'00',6X'FF'\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nCTLMODEL DC    CL12'./ ADD NAME='      LOOKING FOR              GP06315\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODE6     DS    2F                  OPERAND DESCRIPTOR ENTRY 6     A0909\nODE7     DS    2F                  OPERAND DESCRIPTOR ENTRY 7     A0909\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\nIOERR    EQU   X'08'               OUTPUT I/O ERROR             FEB2008\nFGNOCON  EQU   X'02'               CONTROL - SKIP UPDTE TEST    GP06315\nSELECTAL EQU   X'01'               ALIAS ALLOWED                MAY2009\n         DS    C                   LINE-1\nLINE     DS    CL133\nRESULT   EQU   LINE+48                           (IFOX00)       GP06315\nLINEH1   DS    CL133\n*\nSYNADMSG DS    XL(SYNADLEN)                                     FEB2008\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL40                SPF STATISTICS OR SSI          C0909\n         ORG   MEMUSER                                            C0909\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFFLAGS DS    X                   FLAGS                          A0909\nSPFSCLM  EQU   X'80'               SCLM-MANAGED                   A0909\nSPFXSTAT EQU   X'20'               EXTENDED STATISTICS            A0909\nSPFSECS  DS    X                   TIME LAST UPDATED (SS)         A0909\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED (HHMM)\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL7                 USERID                         C0909\nSPFBLANK DS    CL3                 ONE OR THREE BLANKS            A0909\n         ORG   SPFBLANK+1                                         A0909\nSPFXCCNT DS    F                   CURRENT SIZE                   A0909\nSPFXICNT DS    F                   INITIAL SIZE                   A0909\nSPFXMOD  DS    F                   MODS                           A0909\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n*\nZEROAREA DS    0CL(8+8+7)          UNPACKED COUNTERS AREA         A0909\n#CRNT    DS    CL8                 CURRENT RECORD COUNT           A0909\n#CRNTSML EQU   #CRNT+3,5           CURRENT RECORD COUNT           A0909\n#INIT    DS    CL8                 INITIAL RECORD COUNT           A0909\n#INITSML EQU   #INIT+3,5           INITIAL RECORD COUNT           A0909\n#MOD     DS    CL7                 CHANGED RECORD COUNT           A0909\n#MODSML  EQU   #MOD+2,5            CHANGED RECORD COUNT           A0909\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD7": {"ttr": 16129, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x006\\x01\\x12\\x01\\x0f\\x01\\x12\\x02\\x9f\\x12)\\x07\\xab\\x07\\xaa\\x00\\x08\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2012-01-10T00:00:00", "modifydate": "2012-01-29T12:29:36", "lines": 1963, "newlines": 1962, "modlines": 8, "user": "GERHARD"}, "text": "PDSLOAD  TITLE 'P D S L O A D  **  LOAD IEBUPDTE INPUT TO A PDS'\n* ---------- Updated by Gerhard Postpischil ---- Jan 2012 ---------- *\n         MACRO ,\n&NM      TRENT &TAB,&VAL,&OFF,&FILL=                    ADDED ON 86311\n.*\n.*   This macro is used to create translate and translate and test\n.*     tables in compact fashion.\n.*\n.*   The table may be built by (separate) DC statements, or by\n.*     a TRENT entry with a FILL= operand and a name field.     GP12005\n.*\n.*   Any name field is attached to first expanded DC, if any\n.*     First positional is name of table to be modified; may be\n.*       null after first occurrence and after a FILL\n.*     Second positional is value to be placed in table; may be\n.*       null after first occurrence. May be expression.\n.*     Subsequent values are offsets in self-defining form, i.e.,\n.*       X'nn', C'x', integer, equate value, or absolute expression.\n.*     A sublist may be used, offset in first value, repeat count\n.*       in second.\n.*     When the last parm is null, no final ' ORG ' is created.\n.*       (requested by trailing comma)\n.*     When no parameters are supplied, a final ' ORG ' is expanded.\n.*\n.*       ex.:  upper case translate:\n.*       UPTAB DC    256AL1(*-UPTAB)     or\n.*       UPTAB TRENT FILL=(*-UPTAB)\n.*             TRENT UPTAB,*-UPTAB+X'40',(X'81',9),(X'91',9),(X'A2,8)\n.*\n         GBLC  &ZZ@TAB,&ZZ@VAL\n         LCLC  &N\n         LCLA  &I,&J\n&J       SETA  N'&SYSLIST\n&N       SETC  '&NM'\n         AIF   (T'&FILL EQ 'O').DATA                            GP12005\n         AIF   ('&N' NE '').BUILD                               GP12005\n         MNOTE 8,'TRENT WITH FILL= REQUIRES A LABEL'            GP12005\n         MEXIT ,                                                GP12005\n.*   BUILD TRANSLATE OR TRT TABLE                               GP12005\n.*                                                              GP12005\n.BUILD   ANOP  ,                                                GP12005\n&N       DC    256AL1(&FILL)                                    GP12005\n&ZZ@TAB  SETC  '&N'                                             GP12005\n&N       SETC  ''                                               GP12005\n         AIF   (&J EQ 0).MEND                                   GP12005\n.*   EXPAND TABLE MODIFICATIONS\n.*\n.DATA    AIF   (&J EQ 0).ORG\n         AIF   ('&TAB' EQ '').NOTAB\n&ZZ@TAB  SETC  '&TAB'\n.NOTAB   AIF   ('&VAL' EQ '').NOVAL\n&ZZ@VAL  SETC  '&VAL'\n.NOVAL   AIF   (&J LT 3).MEND\n&I       SETA  2\n.LOOP    AIF   (&I GE &J).DONE\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)' EQ '').LOOP\n         AIF   (N'&SYSLIST(&I) EQ 2).PAIR\n         ORG   &ZZ@TAB+&SYSLIST(&I)\n&N       DC    AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.PAIR    ORG   &ZZ@TAB+&SYSLIST(&I,1)\n&N       DC    (&SYSLIST(&I,2))AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.DONE    AIF   ('&SYSLIST(&J)' EQ '').MEND\n.ORG     ORG   ,\n.MEND    MEND  ,\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 17, 2008\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='CTL(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE USED TO LOOK\n*         FOR THE ADD AND ALIAS CARDS.   GERHARD POSTPISCHIL    GP06315\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM THAT CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESN'T CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n*        11NOV2006 - ADDED CTL PARM OPTION TO SUPPORT ADDITIONAL LEVEL\n*                    OF ./ SUBSTITUTION E.G., MEMBERS W/SMP UPDATES\n*                  - ALSO CHANGED PARM PARSING - ANY ORDER NOW ALLOWED\n* GERHARD POSTPISCHIL                                           GP06315\n*----------------------------------------------------------------------\n*        17FEB2008 - ADD SYNAD EXIT ETC. TO ACQUIRE AND DISPLAY\n*                    I/O ERROR MESSAGE WHEN WRITE TO PDS FAILS.\n*                    ABEND U0101 AFTER WRITE I/O ERROR.\n*        10MAY2009 - DO NOT MAKE ALIAS WHEN REAL MEMBER NOT MADE.\n*                  - NOW COMPLETE THE ALLOWED RECFM COMBO SET:\n*                    FIXED-LENGTH INPUT WITH VARIABLE-LENGTH\n*                    OUTPUT WITH TRAILING BLANKS TRUNCATION.\n*        29SEP2009 - ISPF STATISTICS ENHANCEMENTS:                 0909\n*                    - PROCESS SECONDS PART OF TIMESTAMP.\n*                    - SUPPORT ISPF EXTENDED STATISTICS.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*        05JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS.\n*                    ADD { X'C0' SUPPORT TO ALPHANUM TRANSLATE\n*                    TABLE.  IF YOU WANT TO GET RID OF THE MEMBER\n*                    NAME VALIDITY CHECK ENTIRELY, THEN UNCOMMENT\n*                    THE STATEMENT:\n*                    \"B    BYPVALID\"\n*                    AFTER THE LABEL \"SIMPLE\".\n* SAM GOLOB\n*----------------------------------------------------------------------\n*        06JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS, PART DEUX:\n*                    SAM'S SOLUTION WORKS, BUT IS ONE I FIND\n*                    UNDESIRABLE (BABY - BATHWATER)\n*                    INSTEAD I ADDED A PARM OPTION NAME=\n*       (DEFAULT)    NAME=ASIS    BYPASS ALL CHECKS\n*                    NAME=CHECK   ALLOW ALL PRINTABLE CHARACTERS\n*                                 (EXCEPT COMMA) USING CODEPAGE 037\n*                    NAME=IBM     ENFORCE STRICT IBM JCL STANDARDS\n*                  - FIXED LRECL FOR UNLIKE RECFM COPY\n*                  - ADDED NON-SDB BLOCK SIZE CODE BACK IN FOR MVS 3.8\n* GERHARD POSTPISCHIL                                           GP12006\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER IS\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n         SPACE\nPDSLOAD  START\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATE '   MVS 3.8        GP06315\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:F,V->V (TRUNC)'\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         MVC   SYNADMSG,SYNADWTO   PRIME I/O ERROR MESSAGE      FEB2008\n         SPACE 1\n*   VALIDITY CHECKING FOR MEMBER NAMES IS SUPPRESSED BY DEFAULT GP12006\n*   TO CHANGE THE DEFAULT, ACTIVATE THE DESIRED LA INSTRUCTION: GP12006\n*        LA    R0,CHARIBM          STRICT IBM NAME CHECK        GP12006\n*        LA    R0,CHAR037          ANY PRINTABLE EXCEPT COMMA   GP12006\n*        LA    R0,0                NO CHECKING                  GP12006\n*        ST    R0,@TRTTAB                                       GP12006\n*        MVI   CHARIBM+C'-',0      ALLOW OS/360 HYPHEN IN NAME  GP12006\n         SPACE 1\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPAGATOR\n         MVI   LINE-1,C' '         BLANK PROPAGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'        CONVERSION CODE (./)\n         MVC   CTLMODEL(2),UPDTE   CONTROL CARD CODE (./)       GP06315\n         MVC   CTLMODEL+2(10),=C' ADD NAME='                    GP06315\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BNP   PARMDONE                                         GP06315\nPARMLOOP CLI   2(R1),C','                                       GP06315\n         BNE   PARMNCOM                                         GP06315\n         LA    R3,1                SKIP COMMA                   GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCOM CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMBAD             NO, BYPASS COMPARE\n         CLC   =C'NEW',2(R1)       IS IT NEW, AS PER IEBUPDTE?  GP06315\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nTRYSPF   CLC   =C'SPF',2(R1)       IS IT SPF                    GP06315\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nPARMSX   CLC   =C'S(',2(R1)        IS IT S( ?                   GP06315\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,L'MEMSEL        SET MAX LOOP COUNT           GP06315\nPARMML   CLI   2(R1),C')'                                       GP06315\n         BE    PARMME\n         MVC   0(1,R15),2(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)           BUMP SKIP SIZE               GP06315\n         BCT   R0,PARMMIG          OK IF MORE                   GP06315\n         B     PARMBAD             ALL DONE, BUT MISSING ')'    GP06315\nPARMMIG  BCT   R14,PARMML          LOOP FOR MEMBER NAME         GP06315\n         CLI   2(R1),C')'          PROPER TERMINATION ?         GP06315\n         BL    PARMBAD             NO, FAIL                     GP06315\nPARMME   LA    R3,1                POINT PAST PAREN             GP06315\n         B     PARMBUMP            SKIP TO NEXT OPERAND         GP06315\nPARMMX   CH    R0,=H'5'            IS PARM LONG ENOUGH ?        GP12006\n         BL    PARMBAD               NO                         GP12006\n         CLC   =C'NAME=',2(R1)     IS IT NAME CHECK ?           GP12006\n         BNE   PARMNN                NO                         GP12006\n         LA    R3,5                SKIP KEYWORD                 GP12006\n         XC    @TRTTAB,@TRTTAB     RESET PRIOR, JUST IN CASE    GP12006\n         CH    R0,=H'5'            END OF PARM ?                GP12006\n         BNH   PARMBUMP              YES; DONE                  GP12006\n         CLI   5+2(R1),C','        NULL VALUE ?                 GP12006\n         BE    PARMBUMP              YES                        GP12006\n         LA    R3,8                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHARIBM         POINT TO IBM TEST TABLE      GP12006\n         CLC   =C'IBM',2+5(R1)     IS IT IBM?                   GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         CLC   =C'JCL',2+5(R1)     IS IT ALTERNATE?             GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         LA    R3,9                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,0               RESET TEST TABLE ADDRESS     GP12006\n         CLC   =C'ASIS',2+5(R1)    SKIP TESTING ?               GP12006\n         BE    PARMHTAB              YES                        GP12006\n         LA    R3,10               SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHAR037         SET FOR CODEPAGE 037 EXC ,   GP12006\n         CLC   =C'CHECK',2+5(R1)   TEST 037 PRINTABLES?         GP12006\n         BNE   PARMBAD               NO; BAD PARAMETER          GP12006\nPARMHTAB ST    R14,@TRTTAB         SAVE TRANSLATE TABLE ADDRESS GP12006\n         B     PARMBUMP              AND SKIP TO NEXT FIELD     GP12006\nPARMNN   CH    R0,=H'7'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'CTL(',2(R1)      IS IT CTL(XX)                GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   8(R1),C')'          CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   CTLMODEL(2),6(R1)   YES, SAVE NEW CONTROLS       GP06315\n         LA    R3,7                  SKIP SEVEN                 GP12006\n         B     PARMBUMP                                         GP06315\nPARMNCTL CH    R0,=H'9'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'UPDTE(',2(R1)    IS IT UPDTE(XX)              GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   10(R1),C')'         CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   UPDTE,8(R1)         YES, SAVE NEW CONVERSION     GP06315\n         LA    R3,9                                             GP06315\nPARMBUMP AR    R1,R3               NEXT PARM                    GP06315\n         SR    R0,R3               RESIDUAL LENGTH              GP06315\n         BP    PARMLOOP                                         GP06315\n         B     PARMDONE                                         GP06315\nPARMBAD  WTO   'PDSLOAD: INVALID PARM FIELD'                    GP06315\n         ABEND 100\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\nPARMDONE MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         LR    R5,R4               FOR ERROR MESSAGE, IF ANY    GP12006\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXLE  R15,R15,HAVEUT1                                  GP12006\n         MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS1),MSGMISS1                      GP12006\n         MVC   LINE+1(8),DCBDDNAM-IHADCB(R4)                    GP12006\n         BAL   R14,REPORT          DISPLAY WARNING              GP12006\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXH   R15,R15,MISSUT2     SHOW FILE MISSING            GP12006\nHAVEUT1  LA    R5,PDSDCBW          RESTORE OUTPUT DCB ADDRESS   GP12006\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LR    R5,R4               FOR ERROR MESSAGE            GP12006\n         B     MISSUT2                                          GP12006\n         SPACE 1\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\n         SPACE 1\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         LH    R0,80               MINIMM DATA LENGTH           GP12006\n         AH    R0,DWLIN            ADJUST FOR RECFM=V           GP12006\n         CH    R0,LRECL(,R4)       INPUT LRECL<80?              GP12006\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         DEVTYPE DCBDDNAM-IHADCB(R5),DOUBLE   EXIT NEEDS TYPE   GP12006\n         BXH   R15,R15,MISSUT2                                  GP12006\n         CLI   DOUBLE+2,X'20'      UCB3DACC                     GP12006\n         BNE   MISSUT2               NO; CAN'T BE PDS           GP12006\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),DCBOFOPN                               GP12006\n         BO    OKUT2\nMISSUT2  MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS2),MSGMISS2                      GP12006\n         MVC   LINE+1+STRMIDD2-STRMISS2(8),DCBDDNAM-IHADCB(R5)  GP12006\n         BAL   R14,REPORT          DISPLAY THE ERROR MESSAGE    GP12006\n         LA    R15,16\n         B     EXIT\n         SPACE 1\n*   SYSUT2 DCB EXIT - IF NOT SPECIFIED, USE DCB PARAMETERS FROM GP12006\n*   SYSUT1/SYSIN. CODE ADDED TO ADJUST LRECL BY FOUR IF F->V OR GP12006\n*   V->F REQUESTED.                                             GP12006\n*                                                               GP12006\n         PUSH  USING                                            GP12006\n         USING UT2EXO,R15         JUST IN CASE                  GP12006\n         USING IHADCB,R1           MAKE (MY) LIFE EASIER        GP12006\nUT2EXO   LH    R2,LRECL(,R4)       COPY INPUT LENGTH (DEFAULT)  GP12006\n         TM    DCBRECFM,X'C0'      NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    DCBRECFM,DCBRECFM   RECFM=U SO FORCE LRECL=0     GP12006\n         BR    R14                 RETURN\nUT2EX2   MVC   DCBRECFM,RECFM(R4)  YES, COPY INPUT RECFM        GP12006\nUT2EX3   TM    DCBRECFM,X'80'      FIXED ?                      GP12006\n         BNZ   UT2EX3B               YES; ELSE                  GP12006\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS     GP12006\nUT2EX3B  CLC   =H'0',DCBLRECL      IS LRECL SPECIFIED?          GP12006\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n*   WHEN INPUT AND OUTPUT ARE BOTH F OR BOTH V, NO ADJUSTMENT   GP12006\n*   IS NECESSARY. FOR F->V, ADD 4, FOR V->F, SUBTRACT 4         GP12006\n         TM    RECFM(R4),X'80'     FROM F ?                     GP12006\n         BNZ   UT2FROF               YES                        GP12006\n         TM    DCBRECFM,X'80'      TO F ?                       GP12006\n         BZ    UT2BLK                NO; JUST CHECK BLOCK       GP12006\n         SH    R2,=H'4'            ADJUST FOR V->F              GP12006\n         B     UT2BLK                CHECK BLOCK                GP12006\nUT2FROF  TM    DCBRECFM,X'80'      OUTPUT ALSO F ?              GP12006\n         BNZ   UT2BLK                YES; NO ADJUSTMENT         GP12006\n         LA    R2,4(,R2)           ALLOW FOR OUTPUT RDW         GP12006\nUT2BLK   STH   R2,DCBLRECL         SET NEW LRECL                GP12006\nUT2EX4   SR    R7,R7               PREP FOR DIVIDE              GP12006\n         ICM   R7,3,DCBBLKSI       GET BLOCK SIZE               GP12006\n         BNZR  R14                   HOPE FOR THE BEST          GP12006\n         LH    R2,DCBLRECL         GET RECORD LENGTH BACK       GP12006\n         L     R3,CVTPTR           GET CVT                      GP12006\n         TM    CVTDCB-CVTMAP(R3),X'80'   XA OR LATER ?          GP12006\n         BNZR  R14                   YES; ASSUME SDB AVAILABLE  GP12006\n         IC    R3,DOUBLE+3         GET DEVICE TYPE              GP12006\n         LA    R0,X'0F'            MAKE DASD TYPE MASK          GP12006\n         NR    R3,R0               ISOLATE SUBTYPE              GP12006\n         SLL   R3,1                MAKE HALFWORD OFFSET         GP12006\n         LH    R7,MVSBLK(R3)       GET (SUB)OPTIMAL SIZE        GP12006\n         TM    DCBRECFM,X'80'      FIXED?                       GP12006\n         BZ    UT2BLKV             NO; HANDLE VARIABLE BLOCK    GP12006\n         SR    R6,R6                                            GP12006\n         DR    R6,R2               NUMBER OF RECORDS IN BLOCK   GP12006\n         LTR   R7,R7               ANY ?                        GP12006\n         BP    *+8                   YES                        GP12006\n         LA    R7,1                DEFAULT TO ONE               GP12006\n         MR    R6,R2               NEW BLOCK SIZE               GP12006\n         B     UT2BLKST              YES; USE IT                GP12006\nUT2BLKV  LA    R2,4(,R2)           MINIMUM BLOCK SIZE           GP12006\n         CR    R7,R2               ADEQUATE BLOCK SIZE ?        GP12006\n         BNL   UT2BLKST              YES; USE IT                GP12006\n         LR    R7,R2               USE LRECL+4 FOR BLOCK        GP12006\nUT2BLKST STH   R7,DCBBLKSI         SHOULD WORK ?                GP12006\n         BR    R14                 CONTINUE                     GP12006\n         POP   USING                                            GP12006\n*          0-7   ???? 2311 2301 2303 2321 9345  2305 2305       GP12006\nMVSBLK   DC    H'4096,3625,4096,2446,4906,22928,3210,3516'      GP12006\n*          8-F   2314 3330  3340 3350  3375  333D  3380  3390   GP12006\n         DC    H'7294,13030,8368,19069,17600,13030,23476,27998' GP12006\n         SPACE 1\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  SOME OF US ARE STUCK WITH MVS 3.8, SO NON-SDB CODE ADDED     GP12006\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         SPACE\n         LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     NI    FLAG1,255-FGNOCON   CHECK FOR UPDTE TRANSLATE    GP06315\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   CTLMODEL(2),0(R15)  CONTROL STATEMENT?           GP06315\n         BNE   COPY                NO\n         OI    FLAG1,FGNOCON       NO UPDTE TRANSLATE           GP06315\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,80-1            GET LENGTH CODE IF FIXED LEN   C0909\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,80-1             LENGTH CODE OF CONTROL STMT    C0909\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               ENSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         TM    FLAG1,FGNOCON       NO UPDTE TRANSLATE ?         GP06315\n         BNZ   NOTUPDTE            CORRECT; SKIP AROUND         GP06315\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         MVC   LINE+1+13(2),CTLMODEL   BUT USE REAL CTL PAIR    GP06315\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n*\n*         ALLOW OUTPUT RECFM TO BE INDEPENDENT OF INPUT RECFM   MAY2009\n*\n*         1. GET INPUT DATA ADDRESS AND LENGTH                  MAY2009\n*\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    *+8                 YES, NO RDW PRESENT\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         AH    R14,DWLIN           POINT TO INPUT RECORD DATA\n         SH    R15,DWLIN           GET INPUT RECORD DATA LENGTH\n*\n*         2. BRANCH TO LOGIC PATH BASED ON OUTPUT RECFM         MAY2009\n*\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVAR              NO\n*\n*         3. BLOCK ANOTHER FIXED-LENGTH RECORD IF IT FITS       MAY2009\n*\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         B     PUTPAD              GO LOAD THE RECORD'S DATA\n*\n*         4. BLOCK VARIABLE-LENGTH RECORD IF IT FITS            MAY2009\n*\nPUTVAR   LA    R1,4(,R15)          GET IDEAL OUTPUT RECORD LENGTH\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BNE   TRAILOK             NO, SKIP TRAILING BLANKS DISCARD\n         LA    R1,0(R15,R14)       POINT PAST INPUT RECORD DATA\nTRAILOOP BCTR  R1,0                BACK UP A BYTE\n         CR    R1,R14              BACK TO START OF RECORD?\n         BNH   TRAILMIN            YES, USE MINIMUM LENGTH\n         CLI   0(R1),C' '          TRAILING BLANK?\n         BE    TRAILOOP            YES, KEEP BACKING UP\n         LA    R1,1+4(,R1)         NO, POINT PAST LAST NON-BLANK + RDW\n         SR    R1,R14              GET NEW IDEAL OUTPUT RECORD LENGTH\n         B     TRAILOK             DESIRED LENGTH NOW KNOWN\nTRAILMIN LA    R1,5                MINIMUM IS RDW + 1 DATA BYTE\nTRAILOK  CH    R1,LRECL(,R5)       LENGTH LONGER THAN OUTPUT LRECL?\n         BNH   *+8                 NO, USE THIS LENGTH\n         LH    R1,LRECL(,R5)       YES, REDUCE LENGTH TO OUTPUT LRECL\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         SR    R7,R6               GET NEW SIZE OF THIS BLOCK\n         STH   R7,0(,R6)           SET INTO BDW\n         LR    R7,R0               POINT TO RECORD TO LOAD\n         STCM  R1,3,0(R7)          SET RECORD LENGTH INTO RDW\n         STCM  R1,12,2(R7)         CLEAR REST OF RDW\n         AH    R0,DWLOT            POINT PAST RDW\n         SH    R1,DWLOT            GET DATA LENGTH AFTER RDW\n*\n*         5. LOAD THE DATA INTO THE NEW RECORD                  MAY2009\n*\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(80),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   CTLMODEL,0(R1)      ./ ADD NAME OR XX ADD        GP06315\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA                 A0909\n         MVI   ZEROAREA,C'0'       GET SOME UNPACKED ZEROS        A0909\n         MVC   ZEROAREA+1(L'ZEROAREA-1),ZEROAREA                  A0909\n         MVC   SPFUSER,=CL8' '     PAD WITH BLANKS                M0909\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        CHECK (OR NOT) NAME VALIDITY GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID         GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'6'           ID LENGTH CODE MAY BE 0 TO 6   C0909\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         MVC   #CRNTSML,XPFCCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XPFICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XPFMOD      CHANGED SIZE                   C0909\n         EX    R15,XPFUIDLD        LOAD USERID                    C0909\n         B     ISSPF               GO PROCESS FURTHER             C0909\nXPFUIDLD MVC   SPFUSER(0),XPFUSER  <<< EXECUTED >>>               M0909\n         DROP  R6                  (XPF)                      SBG 02/00\n         USING XP2,R6                                         SBG 02/00\nXP2UIDLD MVC   SPFUSER(0),XP2USER  <<< EXECUTED >>>               M0909\nTESTNUMN DS    0H                                             SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   #CRNTSML,XP2CCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XP2ICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XP2MOD      CHANGED SIZE                   C0909\n         EX    R15,XP2UIDLD        LOAD USERID                    C0909\nISSPF    OI    STATUS,SPF          SET FLAG FOR STOW              C0909\n         DROP  R6                  (XP2)                      SBG 02/00\n*\n*              LOOK FOR EXTENSIONS - SECONDS IS A PRE-REQ         A0909\n*\n         TM    ODE5+6,X'80'        SECONDS PRESENT?               A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,2                                               A0909\n         CH    R0,ODE5+4           LENGTH EXACTLY TWO?            A0909\n         BNE   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         L     R15,ODE5            YES, POINT TO DATA             A0909\n         TRT   0(2,R15),NUMERIC    DECIMAL DIGITS?                A0909\n         BNZ   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         CLI   0(R15),C'5'         YES, BUT IS IT LESS THAN 60?   A0909\n         BH    XSPFOK              NO, CANNOT BE SECONDS          A0909\n         ICM   R0,1,1(R15)         GET SECOND DIGIT               A0909\n         SLL   R0,4                SHIFT OUT ZONE                 A0909\n         ICM   R0,2,0(R15)         GET FIRST DIGIT                A0909\n         SRL   R0,4                GET NUMERICS IN ONE BYTE       A0909\n         STC   R0,SPFSECS          SAVE THE SECONDS VALUE         A0909\n         TM    ODE6+6,X'80'        ANYTHING ELSE PRESENT?         A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,8                                               A0909\n         CH    R0,ODE6+4           AT LEAST EIGHT NON-BLANKS?     A0909\n         BH    XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         L     R15,ODE6            YES, POINT TO DATA             A0909\n         TRT   0(8,R15),NUMERIC    EIGHT DECIMAL DIGITS?          A0909\n         BNZ   XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         MVC   #CRNT(3),0(R15)     FIRST 3 TO CURRENT             A0909\n         MVC   #INIT(3),3(R15)     NEXT 3 TO INITIAL              A0909\n         MVC   #MOD(2),6(R15)      LAST 2 TO MODIFIED             A0909\n*\n*              NOTE THAT EXTENDED ISPF STATS CAN BE STOWED        A0909\n*              EVEN IF THE COUNTER HIGH-ORDER EXTENSION           A0909\n*              FIELD IS NOT PRESENT IN THE INPUT RECORD.          A0909\n*\n*              IF AN ORIGINAL 5-DIGIT COUNTER HAS A VALUE         A0909\n*              OVER 65535 THEN EXTENDED ISPF STATS WILL           A0909\n*              BE STOWED.                                         A0909\n*\n*              THE CURRENT RECORD COUNTER IS EFFECTIVELY          A0909\n*              IGNORED BY PDSLOAD BECAUSE THIS FIELD IS SET       A0909\n*              FROM THE NUMBER OF RECORDS WRITTEN TO THE          A0909\n*              MEMBER BY PDSLOAD.  BUT HAVING THE CURRENT         A0909\n*              RECORD COUNT IN THE SEQUENTIAL FILE IS GOOD        A0909\n*              FOR AUDIT TRAIL AND HUMAN CONVENIENCE PURPOSES.    A0909\n*\nXSPFOK   PACK  DOUBLE,#CRNT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         STH   R0,SPFCCNT          FIX CURRENT AT STOW TIME       A0909\n         PACK  DOUBLE,#INIT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXICNT         SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFICNT          SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXICNT       COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    GETMOD              NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nGETMOD   PACK  DOUBLE,#MOD                                        A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXMOD          SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFMOD           SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXMOD        COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    NOSPF               NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         MVC   LINE,LINE-1         CLEAR OLD STUFF              GP12006\n         MVC   RESULT(38),=CL38'NOT STOWED *** INVALID MEMBER NAME ***'\n         OI    RC+1,8              NASTY ERROR                  GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE            GP12006\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         SPACE 1\n*---------------------------------------------------------------------*\n*   TEST MEMBER NAME VALIDITY, OR (DEFAULT) BYPASS CHECKS             *\n*---------------------------------------------------------------------*\nNAMETEST ICM   R15,15,@TRTTAB      MEMBER CHECKING ENABLED?     GP12006\n         BZR   R14                   NO; JUST RETURN            GP12006\n         TRT   MEMBER,0(R15)       IS MEMBER NAME VALID?        GP12006\n         BNZ   ILLMEM              NO, BRANCH                   GP12006\n         CLI   MEMBER,C' '         IS FIRST CHAR BLANK?         GP12006\n         BE    ILLMEM                YES; FAIL                  GP12006\n         LA    R15,CHARIBM         SET FOR STRICT TEST          GP12006\n         C     R15,@TRTTAB         IS STRICT TEST DESIRED ?     GP12006\n         BNER  R14                   NO; NAME PASSED            GP12006\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?       GP12006\n         BNL   ILLMEM                YES; FAIL                  GP12006\n*  N.B. EARLY VERSIONS OF THE READER/INTERPRETER ALLOWED HYPHEN/MINUS\n*       IN THE JCL. THE CHARIBM TABLE DOES NOT ALLOW FOR THAT.  GP12006\n*OS/360  CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?        GP12006\n*OS/360  BE    ILLMEM                                           GP12006\n         BR    R14                 MEMBER ADHERES TO IBM JCL    GP12006\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         TM    FLAG1,SELECTAL      REAL MEMBER CREATED?         MAY2009\n         BZ    READ                NO, CANNOT MAKE ALIAS OF IT  MAY2009\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID?        GP12006\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWIT              GO CREATE ALIAS              MAY2009\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWFIXD            YES                            C0909\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\nSTOWFIXD ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWXCHK            YES, HALFWORD COUNTER CORRECT  A0909\n         MVC   SPFCCNT,=X'FFFF'    NO, SET TO HIGH VALUES         A0909\nSTOWXCHK TM    SPFFLAGS,SPFXSTAT   USING EXTENDED STATS?          A0909\n         BO    STOWXSET            YES                            A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, CLASSIC STATS WILL DO     A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\nSTOWXSET MVC   SPFXCCNT,SEQ        SET CURRENT RECORD COUNT       A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA\n         MVI   SPFVM,1             1.0\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         STCM  R0,12,SPFHHMM       TIME OF LAST CHANGE (HHMM)     C0909\n         STCM  R0,2,SPFSECS        TIME OF LAST CHANGE (SS)       A0909\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=C'PDSLOAD'\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, SET CLASSIC STATS         A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTERS HIGH     A0909\n         MVC   SPFCCNT,=X'FFFF'                                   A0909\n         ST    R1,SPFXICNT         ALSO SET FULLWORD COUNTERS     A0909\n         ST    R1,SPFXCCNT                                        A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\nSTOWIT   DS    0H                                               MAY2009\n         STOW  (R5),(R6),R\n         SPACE\n         CL    R15,=F'24'          UNEXPECTED RETURN CODE?      GP06315\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,8              WARNING IS TOO MILD ?        GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         OI    FLAG1,SELECTAL      ALIAS NOW ALLOWED            MAY2009\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         LR    R14,R0              COPY LENGTH                  GP12006\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         I/O ERROR                                        *    FEB2008\n*                                                          *     GP@P6\n************************************************************\n         SPACE\nIOERROR  WTO   MF=(E,SYNADMSG)     DISPLAY I/O ERROR MESSAGE\n         WTO   'PDSLOAD WILL ABEND - WRITE I/O ERROR',ROUTCDE=(11)\n         ABEND 101\n         SPACE\nPDSSYNAD DS    0H\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG+4(78),50(R1)\n         OI    FLAG1,IOERR\n         SYNADRLS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE 1                                                GP12006\nMSGMISS1 DC    C'SYSUT1  MISSING; WILL TRY SYSIN  '             GP12006\n         SPACE 1                                                GP12006\nSTRMISS2 DC    C'    PDSLOAD TERMINATED - '                     GP12006\nSTRMIDD2 DC    C'SYSUT2  MISSING OR UNUSABLE'                   GP12006\nMSGMISS2 EQU   STRMISS2,*-STRMISS2,C'C'                         GP12006\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\nSYNADWTO WTO   '1234567890123456789012345678901234567890123456789012345+\n               67890123456789012345678',ROUTCDE=(11),MF=L\nSYNADLEN EQU   *-SYNADWTO\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,SYNAD=PDSSYNAD,        +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL TRENT ,0,C' ',C',',FILL=255   PASS ON COMMA AND BLANK  GP12006\n         SPACE 1\nTABBLANK TRENT FILL=0                                           GP12006\n         TRENT ,C' ',C' '         STOP ON BLANK                 GP12006\n         TRENT ,C',',C','         STOP ON COMMA                 GP12006\n         SPACE 1\nCHARIBM  TRENT FILL=255                                         GP12006\n         TRENT ,0,C'$',C'@',C'#'  ALLOW NATIONAL CHARACTERS     GP12006\n         TRENT ,0,(C'A',9),(C'J',9),(C'S',8)     LETTERS        GP12006\n         TRENT ,0,(C'0',10)                      DIGITS         GP12006\n         TRENT ,0,C' '            TRAILING SPACE                GP12006\n         SPACE 1\nCHAR037  TRENT FILL=255                                         GP12006\n         TRENT ,0,(X'40',X'6B'-X'40')   EVERYTHING BELOW COMMA  GP12006\n         TRENT ,0,(X'6B'+1,255-X'6B')   EVERYTHING AFTER COMMA  GP12006\n         SPACE 1\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  TRENT ,0,(C'0',10),FILL=255   DIGITS ONLY              GP12006\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nCTLMODEL DC    CL12'./ ADD NAME='      LOOKING FOR              GP06315\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\n@TRTTAB  DS    A                                                GP12006\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODE6     DS    2F                  OPERAND DESCRIPTOR ENTRY 6     A0909\nODE7     DS    2F                  OPERAND DESCRIPTOR ENTRY 7     A0909\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\nIOERR    EQU   X'08'               OUTPUT I/O ERROR             FEB2008\nFGNOCON  EQU   X'02'               CONTROL - SKIP UPDTE TEST    GP06315\nSELECTAL EQU   X'01'               ALIAS ALLOWED                MAY2009\n         DS    C                   LINE-1\nLINE     DS    CL133\nRESULT   EQU   LINE+48                           (IFOX00)       GP06315\nLINEH1   DS    CL133\n*\nSYNADMSG DS    XL(SYNADLEN)                                     FEB2008\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL40                SPF STATISTICS OR SSI          C0909\n         ORG   MEMUSER                                            C0909\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFFLAGS DS    X                   FLAGS                          A0909\nSPFSCLM  EQU   X'80'               SCLM-MANAGED                   A0909\nSPFXSTAT EQU   X'20'               EXTENDED STATISTICS            A0909\nSPFSECS  DS    X                   TIME LAST UPDATED (SS)         A0909\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED (HHMM)\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL7                 USERID                         C0909\nSPFBLANK DS    CL3                 ONE OR THREE BLANKS            A0909\n         ORG   SPFBLANK+1                                         A0909\nSPFXCCNT DS    F                   CURRENT SIZE                   A0909\nSPFXICNT DS    F                   INITIAL SIZE                   A0909\nSPFXMOD  DS    F                   MODS                           A0909\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n*\nZEROAREA DS    0CL(8+8+7)          UNPACKED COUNTERS AREA         A0909\n#CRNT    DS    CL8                 CURRENT RECORD COUNT           A0909\n#CRNTSML EQU   #CRNT+3,5           CURRENT RECORD COUNT           A0909\n#INIT    DS    CL8                 INITIAL RECORD COUNT           A0909\n#INITSML EQU   #INIT+3,5           INITIAL RECORD COUNT           A0909\n#MOD     DS    CL7                 CHANGED RECORD COUNT           A0909\n#MODSML  EQU   #MOD+2,5            CHANGED RECORD COUNT           A0909\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         PRINT GEN\n         CVT   LIST=YES,DSECT=YES   NEED FOR SYSTEM LEVEL CHECK GP12006\n         DCBD  DEVD=DA,DSORG=PO   WANT FOR DCB VALUES           GP12006\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD8": {"ttr": 16900, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x13\\x01\\x12\\x01\\x0f\\x01\\x12\\x05\\x1f\\x10)\\x07\\xae\\x07\\xaa\\x00O\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-01-10T00:00:00", "modifydate": "2012-02-20T10:29:13", "lines": 1966, "newlines": 1962, "modlines": 79, "user": "GERHARD"}, "text": "PDSLOAD  TITLE 'P D S L O A D  **  LOAD IEBUPDTE INPUT TO A PDS'\n* ---------- Updated by Gerhard Postpischil ---- Jan 2012 ---------- *\n* Note that Greg Price and Gerhard Postpischil have the same initials.\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 17, 2008\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='CTL(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE USED TO LOOK\n*         FOR THE ADD AND ALIAS CARDS.   GERHARD POSTPISCHIL    GP06315\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM THAT CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESN'T CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n*        11NOV2006 - ADDED CTL PARM OPTION TO SUPPORT ADDITIONAL LEVEL\n*                    OF ./ SUBSTITUTION E.G., MEMBERS W/SMP UPDATES\n*                  - ALSO CHANGED PARM PARSING - ANY ORDER NOW ALLOWED\n* GERHARD POSTPISCHIL                                           GP06315\n*----------------------------------------------------------------------\n*        17FEB2008 - ADD SYNAD EXIT ETC. TO ACQUIRE AND DISPLAY\n*                    I/O ERROR MESSAGE WHEN WRITE TO PDS FAILS.\n*                    ABEND U0101 AFTER WRITE I/O ERROR.\n*        10MAY2009 - DO NOT MAKE ALIAS WHEN REAL MEMBER NOT MADE.\n*                  - NOW COMPLETE THE ALLOWED RECFM COMBO SET:\n*                    FIXED-LENGTH INPUT WITH VARIABLE-LENGTH\n*                    OUTPUT WITH TRAILING BLANKS TRUNCATION.\n*        29SEP2009 - ISPF STATISTICS ENHANCEMENTS:                 0909\n*                    - PROCESS SECONDS PART OF TIMESTAMP.\n*                    - SUPPORT ISPF EXTENDED STATISTICS.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*        05JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS.\n*                    ADD { X'C0' SUPPORT TO ALPHANUM TRANSLATE\n*                    TABLE.  IF YOU WANT TO GET RID OF THE MEMBER\n*                    NAME VALIDITY CHECK ENTIRELY, THEN UNCOMMENT\n*                    THE STATEMENT:\n*                    \"B    BYPVALID\"\n*                    AFTER THE LABEL \"SIMPLE\".\n* SAM GOLOB\n*----------------------------------------------------------------------\n*        06JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS, PART DEUX:\n*                    SAM'S SOLUTION WORKS, BUT IS ONE I FIND\n*                    UNDESIRABLE (BABY - BATHWATER)\n*                    INSTEAD I ADDED A PARM OPTION NAME=\n*       (DEFAULT)    NAME=ASIS    BYPASS ALL CHECKS\n*                    NAME=CHECK   ALLOW ALL PRINTABLE CHARACTERS\n*                                 (EXCEPT COMMA) USING CODEPAGE 037\n*                    NAME=IBM     ENFORCE STRICT IBM JCL STANDARDS\n*                  - FIXED LRECL FOR UNLIKE RECFM COPY\n*                  - ADDED NON-SDB BLOCK SIZE CODE BACK IN FOR MVS 3.8\n* GERHARD POSTPISCHIL                                           GP12006\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER IS\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n* ------------------------------------------------------------------ *\n         MACRO ,\n&NM      TRENT &TAB,&VAL,&OFF,&FILL=                    ADDED ON 86311\n.*\n.*   This macro is used to create translate and translate and test\n.*     tables in compact fashion.\n.*\n.*   The table may be built by (separate) DC statements, or by\n.*     a TRENT entry with a FILL= operand and a name field.     GP12005\n.*\n.*   Any name field is attached to first expanded DC, if any\n.*     First positional is name of table to be modified; may be\n.*       null after first occurrence and after a FILL\n.*     Second positional is value to be placed in table; may be\n.*       null after first occurrence. May be expression.\n.*     Subsequent values are offsets in self-defining form, i.e.,\n.*       X'nn', C'x', integer, equate value, or absolute expression.\n.*     A sublist may be used, offset in first value, repeat count\n.*       in second.\n.*     When the last parm is null, no final ' ORG ' is created.\n.*       (requested by trailing comma)\n.*     When no parameters are supplied, a final ' ORG ' is expanded.\n.*\n.*       ex.:  upper case translate:\n.*       UPTAB DC    256AL1(*-UPTAB)     or\n.*       UPTAB TRENT FILL=(*-UPTAB)\n.*             TRENT UPTAB,*-UPTAB+X'40',(X'81',9),(X'91',9),(X'A2,8)\n.*\n         GBLC  &ZZ@TAB,&ZZ@VAL\n         LCLC  &N\n         LCLA  &I,&J\n&J       SETA  N'&SYSLIST\n&N       SETC  '&NM'\n         AIF   (T'&FILL EQ 'O').DATA                            GP12005\n         AIF   ('&N' NE '').BUILD                               GP12005\n         MNOTE 8,'TRENT WITH FILL= REQUIRES A LABEL'            GP12005\n         MEXIT ,                                                GP12005\n.*   BUILD TRANSLATE OR TRT TABLE                               GP12005\n.*                                                              GP12005\n.BUILD   ANOP  ,                                                GP12005\n&N       DC    256AL1(&FILL)                                    GP12005\n&ZZ@TAB  SETC  '&N'                                             GP12005\n&N       SETC  ''                                               GP12005\n         AIF   (&J EQ 0).MEND                                   GP12005\n.*   EXPAND TABLE MODIFICATIONS\n.*\n.DATA    AIF   (&J EQ 0).ORG\n         AIF   ('&TAB' EQ '').NOTAB\n&ZZ@TAB  SETC  '&TAB'\n.NOTAB   AIF   ('&VAL' EQ '').NOVAL\n&ZZ@VAL  SETC  '&VAL'\n.NOVAL   AIF   (&J LT 3).MEND\n&I       SETA  2\n.LOOP    AIF   (&I GE &J).DONE\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)' EQ '').LOOP\n         AIF   (N'&SYSLIST(&I) EQ 2).PAIR\n         ORG   &ZZ@TAB+&SYSLIST(&I)\n&N       DC    AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.PAIR    ORG   &ZZ@TAB+&SYSLIST(&I,1)\n&N       DC    (&SYSLIST(&I,2))AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.DONE    AIF   ('&SYSLIST(&J)' EQ '').MEND\n.ORG     ORG   ,\n.MEND    MEND  ,\n* ------------------------------------------------------------------ *\n         SPACE\nPDSLOAD  START\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATE '   MVS 3.8        GP06315\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:F,V->V (TRUNC)'\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         MVC   SYNADMSG,SYNADWTO   PRIME I/O ERROR MESSAGE      FEB2008\n         SPACE 1\n*   VALIDITY CHECKING FOR MEMBER NAMES IS SUPPRESSED BY DEFAULT GP12006\n*   TO CHANGE THE DEFAULT, ACTIVATE THE DESIRED LA INSTRUCTION: GP12006\n*        LA    R0,CHARIBM          STRICT IBM NAME CHECK        GP12006\n*        LA    R0,CHAR037          ANY PRINTABLE EXCEPT COMMA   GP12006\n*        LA    R0,0                NO CHECKING                  GP12006\n*        ST    R0,@TRTTAB                                       GP12006\n*        MVI   CHARIBM+C'-',0      ALLOW OS/360 HYPHEN IN NAME  GP12006\n         SPACE 1\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPAGATOR\n         MVI   LINE-1,C' '         BLANK PROPAGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'        CONVERSION CODE (./)\n         MVC   CTLMODEL(2),UPDTE   CONTROL CARD CODE (./)       GP06315\n         MVC   CTLMODEL+2(10),=C' ADD NAME='                    GP06315\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BNP   PARMDONE                                         GP06315\nPARMLOOP CLI   2(R1),C','                                       GP06315\n         BNE   PARMNCOM                                         GP06315\n         LA    R3,1                SKIP COMMA                   GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCOM CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMBAD             NO, BYPASS COMPARE\n         CLC   =C'NEW',2(R1)       IS IT NEW, AS PER IEBUPDTE?  GP06315\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nTRYSPF   CLC   =C'SPF',2(R1)       IS IT SPF                    GP06315\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nPARMSX   CLC   =C'S(',2(R1)        IS IT S( ?                   GP06315\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,L'MEMSEL        SET MAX LOOP COUNT           GP06315\nPARMML   CLI   2(R1),C')'                                       GP06315\n         BE    PARMME\n         MVC   0(1,R15),2(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)           BUMP SKIP SIZE               GP06315\n         BCT   R0,PARMMIG          OK IF MORE                   GP06315\n         B     PARMBAD             ALL DONE, BUT MISSING ')'    GP06315\nPARMMIG  BCT   R14,PARMML          LOOP FOR MEMBER NAME         GP06315\n         CLI   2(R1),C')'          PROPER TERMINATION ?         GP06315\n         BL    PARMBAD             NO, FAIL                     GP06315\nPARMME   LA    R3,1                POINT PAST PAREN             GP06315\n         B     PARMBUMP            SKIP TO NEXT OPERAND         GP06315\nPARMMX   CH    R0,=H'5'            IS PARM LONG ENOUGH ?        GP12006\n         BL    PARMBAD               NO                         GP12006\n         CLC   =C'NAME=',2(R1)     IS IT NAME CHECK ?           GP12006\n         BNE   PARMNN                NO                         GP12006\n         LA    R3,5                SKIP KEYWORD                 GP12006\n         XC    @TRTTAB,@TRTTAB     RESET PRIOR, JUST IN CASE    GP12006\n         CH    R0,=H'5'            END OF PARM ?                GP12006\n         BNH   PARMBUMP              YES; DONE                  GP12006\n         CLI   5+2(R1),C','        NULL VALUE ?                 GP12006\n         BE    PARMBUMP              YES                        GP12006\n         LA    R3,8                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHARIBM         POINT TO IBM TEST TABLE      GP12006\n         CLC   =C'IBM',2+5(R1)     IS IT IBM?                   GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         CLC   =C'JCL',2+5(R1)     IS IT ALTERNATE?             GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         LA    R3,9                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,0               RESET TEST TABLE ADDRESS     GP12006\n         CLC   =C'ASIS',2+5(R1)    SKIP TESTING ?               GP12006\n         BE    PARMHTAB              YES                        GP12006\n         LA    R3,10               SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHAR037         SET FOR CODEPAGE 037 EXC ,   GP12006\n         CLC   =C'CHECK',2+5(R1)   TEST 037 PRINTABLES?         GP12006\n         BNE   PARMBAD               NO; BAD PARAMETER          GP12006\nPARMHTAB ST    R14,@TRTTAB         SAVE TRANSLATE TABLE ADDRESS GP12006\n         B     PARMBUMP              AND SKIP TO NEXT FIELD     GP12006\nPARMNN   CH    R0,=H'7'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'CTL(',2(R1)      IS IT CTL(XX)                GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   8(R1),C')'          CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   CTLMODEL(2),6(R1)   YES, SAVE NEW CONTROLS       GP06315\n         LA    R3,7                  SKIP SEVEN                 GP12006\n         B     PARMBUMP                                         GP06315\nPARMNCTL CH    R0,=H'9'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'UPDTE(',2(R1)    IS IT UPDTE(XX)              GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   10(R1),C')'         CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   UPDTE,8(R1)         YES, SAVE NEW CONVERSION     GP06315\n         LA    R3,9                                             GP06315\nPARMBUMP AR    R1,R3               NEXT PARM                    GP06315\n         SR    R0,R3               RESIDUAL LENGTH              GP06315\n         BP    PARMLOOP                                         GP06315\n         B     PARMDONE                                         GP06315\nPARMBAD  WTO   'PDSLOAD: INVALID PARM FIELD'                    GP06315\n         ABEND 100\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\nPARMDONE MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         LR    R5,R4               FOR ERROR MESSAGE, IF ANY    GP12006\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXLE  R15,R15,HAVEUT1                                  GP12006\n         MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS1),MSGMISS1                      GP12006\n         MVC   LINE+1(8),DCBDDNAM-IHADCB(R4)                    GP12006\n         BAL   R14,REPORT          DISPLAY WARNING              GP12006\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXH   R15,R15,MISSUT2     SHOW FILE MISSING            GP12006\nHAVEUT1  LA    R5,PDSDCBW          RESTORE OUTPUT DCB ADDRESS   GP12006\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LR    R5,R4               FOR ERROR MESSAGE            GP12006\n         B     MISSUT2                                          GP12006\n         SPACE 1\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\n         SPACE 1\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         LH    R0,80               MINIMM DATA LENGTH           GP12006\n         AH    R0,DWLIN            ADJUST FOR RECFM=V           GP12006\n         CH    R0,LRECL(,R4)       INPUT LRECL<80?              GP12006\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         DEVTYPE DCBDDNAM-IHADCB(R5),DOUBLE   EXIT NEEDS TYPE   GP12006\n         BXH   R15,R15,MISSUT2                                  GP12006\n         CLI   DOUBLE+2,X'20'      UCB3DACC                     GP12006\n         BNE   MISSUT2               NO; CAN'T BE PDS           GP12006\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),DCBOFOPN                               GP12006\n         BO    OKUT2\nMISSUT2  MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS2),MSGMISS2                      GP12006\n         MVC   LINE+1+STRMIDD2-STRMISS2(8),DCBDDNAM-IHADCB(R5)  GP12006\n         BAL   R14,REPORT          DISPLAY THE ERROR MESSAGE    GP12006\n         LA    R15,16\n         B     EXIT\n         SPACE 1\n*   SYSUT2 DCB EXIT - IF NOT SPECIFIED, USE DCB PARAMETERS FROM GP12006\n*   SYSUT1/SYSIN. CODE ADDED TO ADJUST LRECL BY FOUR IF F->V OR GP12006\n*   V->F REQUESTED.                                             GP12006\n*                                                               GP12006\n         PUSH  USING                                            GP12006\n         USING UT2EXO,R15         JUST IN CASE                  GP12006\n         USING IHADCB,R1           MAKE (MY) LIFE EASIER        GP12006\nUT2EXO   LH    R2,LRECL(,R4)       COPY INPUT LENGTH (DEFAULT)  GP12006\n         TM    DCBRECFM,X'C0'      NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    DCBLRECL,DCBLRECL   RECFM=U SO FORCE LRECL=0     GP12006\n         BR    R14                 RETURN\nUT2EX2   MVC   DCBRECFM,RECFM(R4)  YES, COPY INPUT RECFM        GP12006\nUT2EX3   TM    DCBRECFM,X'80'      FIXED ?                      GP12006\n         BNZ   UT2EX3B               YES; ELSE                  GP12006\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS     GP12006\nUT2EX3B  CLC   =H'0',DCBLRECL      IS LRECL SPECIFIED?          GP12006\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n*   WHEN INPUT AND OUTPUT ARE BOTH F OR BOTH V, NO ADJUSTMENT   GP12006\n*   IS NECESSARY. FOR F->V, ADD 4, FOR V->F, SUBTRACT 4         GP12006\n         TM    RECFM(R4),X'80'     FROM F ?                     GP12006\n         BNZ   UT2FROF               YES                        GP12006\n         TM    DCBRECFM,X'80'      TO F ?                       GP12006\n         BZ    UT2BLK                NO; JUST CHECK BLOCK       GP12006\n         SH    R2,=H'4'            ADJUST FOR V->F              GP12006\n         B     UT2BLK                CHECK BLOCK                GP12006\nUT2FROF  TM    DCBRECFM,X'80'      OUTPUT ALSO F ?              GP12006\n         BNZ   UT2BLK                YES; NO ADJUSTMENT         GP12006\n         LA    R2,4(,R2)           ALLOW FOR OUTPUT RDW         GP12006\nUT2BLK   STH   R2,DCBLRECL         SET NEW LRECL                GP12006\nUT2EX4   SR    R7,R7               PREP FOR DIVIDE              GP12006\n         ICM   R7,3,DCBBLKSI       GET BLOCK SIZE               GP12006\n         BNZR  R14                   HOPE FOR THE BEST          GP12006\n         LH    R2,DCBLRECL         GET RECORD LENGTH BACK       GP12006\n         L     R3,CVTPTR           GET CVT                      GP12006\n         TM    CVTDCB-CVTMAP(R3),X'80'   XA OR LATER ?          GP12006\n         BNZR  R14                   YES; ASSUME SDB AVAILABLE  GP12006\n         IC    R3,DOUBLE+3         GET DEVICE TYPE              GP12006\n         LA    R0,X'0F'            MAKE DASD TYPE MASK          GP12006\n         NR    R3,R0               ISOLATE SUBTYPE              GP12006\n         SLL   R3,1                MAKE HALFWORD OFFSET         GP12006\n         LH    R7,MVSBLK(R3)       GET (SUB)OPTIMAL SIZE        GP12006\n         TM    DCBRECFM,X'80'      FIXED?                       GP12006\n         BZ    UT2BLKV             NO; HANDLE VARIABLE BLOCK    GP12006\n         SR    R6,R6                                            GP12006\n         DR    R6,R2               NUMBER OF RECORDS IN BLOCK   GP12006\n         LTR   R7,R7               ANY ?                        GP12006\n         BP    *+8                   YES                        GP12006\n         LA    R7,1                DEFAULT TO ONE               GP12006\n         MR    R6,R2               NEW BLOCK SIZE               GP12006\n         B     UT2BLKST              YES; USE IT                GP12006\nUT2BLKV  LA    R2,4(,R2)           MINIMUM BLOCK SIZE           GP12006\n         CR    R7,R2               ADEQUATE BLOCK SIZE ?        GP12006\n         BNL   UT2BLKST              YES; USE IT                GP12006\n         LR    R7,R2               USE LRECL+4 FOR BLOCK        GP12006\nUT2BLKST STH   R7,DCBBLKSI         SHOULD WORK ?                GP12006\n         BR    R14                 CONTINUE                     GP12006\n         POP   USING                                            GP12006\n*          0-7   ???? 2311 2301 2303 2321 9345  2305 2305       GP12006\nMVSBLK   DC    H'4096,3625,4096,2446,4906,22928,3210,3516'      GP12006\n*          8-F   2314 3330  3340 3350  3375  333D  3380  3390   GP12006\n         DC    H'7294,13030,8368,19069,17600,13030,23476,27998' GP12006\n         SPACE 1\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  SOME OF US ARE STUCK WITH MVS 3.8, SO NON-SDB CODE ADDED     GP12006\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         SPACE\n         LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     NI    FLAG1,255-FGNOCON   CHECK FOR UPDTE TRANSLATE    GP06315\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   CTLMODEL(2),0(R15)  CONTROL STATEMENT?           GP06315\n         BNE   COPY                NO\n         OI    FLAG1,FGNOCON       NO UPDTE TRANSLATE           GP06315\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,80-1            GET LENGTH CODE IF FIXED LEN   C0909\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,80-1             LENGTH CODE OF CONTROL STMT    C0909\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               ENSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         TM    FLAG1,FGNOCON       NO UPDTE TRANSLATE ?         GP06315\n         BNZ   NOTUPDTE            CORRECT; SKIP AROUND         GP06315\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         MVC   LINE+1+13(2),CTLMODEL   BUT USE REAL CTL PAIR    GP06315\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n*\n*         ALLOW OUTPUT RECFM TO BE INDEPENDENT OF INPUT RECFM   MAY2009\n*\n*         1. GET INPUT DATA ADDRESS AND LENGTH                  MAY2009\n*\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    *+8                 YES, NO RDW PRESENT\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         AH    R14,DWLIN           POINT TO INPUT RECORD DATA\n         SH    R15,DWLIN           GET INPUT RECORD DATA LENGTH\n*\n*         2. BRANCH TO LOGIC PATH BASED ON OUTPUT RECFM         MAY2009\n*\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVAR              NO\n*\n*         3. BLOCK ANOTHER FIXED-LENGTH RECORD IF IT FITS       MAY2009\n*\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         B     PUTPAD              GO LOAD THE RECORD'S DATA\n*\n*         4. BLOCK VARIABLE-LENGTH RECORD IF IT FITS            MAY2009\n*\nPUTVAR   LA    R1,4(,R15)          GET IDEAL OUTPUT RECORD LENGTH\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BNE   TRAILOK             NO, SKIP TRAILING BLANKS DISCARD\n         LA    R1,0(R15,R14)       POINT PAST INPUT RECORD DATA\nTRAILOOP BCTR  R1,0                BACK UP A BYTE\n         CR    R1,R14              BACK TO START OF RECORD?\n         BNH   TRAILMIN            YES, USE MINIMUM LENGTH\n         CLI   0(R1),C' '          TRAILING BLANK?\n         BE    TRAILOOP            YES, KEEP BACKING UP\n         LA    R1,1+4(,R1)         NO, POINT PAST LAST NON-BLANK + RDW\n         SR    R1,R14              GET NEW IDEAL OUTPUT RECORD LENGTH\n         B     TRAILOK             DESIRED LENGTH NOW KNOWN\nTRAILMIN LA    R1,5                MINIMUM IS RDW + 1 DATA BYTE\nTRAILOK  CH    R1,LRECL(,R5)       LENGTH LONGER THAN OUTPUT LRECL?\n         BNH   *+8                 NO, USE THIS LENGTH\n         LH    R1,LRECL(,R5)       YES, REDUCE LENGTH TO OUTPUT LRECL\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         SR    R7,R6               GET NEW SIZE OF THIS BLOCK\n         STH   R7,0(,R6)           SET INTO BDW\n         LR    R7,R0               POINT TO RECORD TO LOAD\n         STCM  R1,3,0(R7)          SET RECORD LENGTH INTO RDW\n         STCM  R1,12,2(R7)         CLEAR REST OF RDW\n         AH    R0,DWLOT            POINT PAST RDW\n         SH    R1,DWLOT            GET DATA LENGTH AFTER RDW\n*\n*         5. LOAD THE DATA INTO THE NEW RECORD                  MAY2009\n*\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(80),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   CTLMODEL,0(R1)      ./ ADD NAME OR XX ADD        GP06315\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA                 A0909\n         MVI   ZEROAREA,C'0'       GET SOME UNPACKED ZEROS        A0909\n         MVC   ZEROAREA+1(L'ZEROAREA-1),ZEROAREA                  A0909\n         MVC   SPFUSER,=CL8' '     PAD WITH BLANKS                M0909\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        CHECK (OR NOT) NAME VALIDITY GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID         GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'6'           ID LENGTH CODE MAY BE 0 TO 6   C0909\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         MVC   #CRNTSML,XPFCCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XPFICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XPFMOD      CHANGED SIZE                   C0909\n         EX    R15,XPFUIDLD        LOAD USERID                    C0909\n         B     ISSPF               GO PROCESS FURTHER             C0909\nXPFUIDLD MVC   SPFUSER(0),XPFUSER  <<< EXECUTED >>>               M0909\n         DROP  R6                  (XPF)                      SBG 02/00\n         USING XP2,R6                                         SBG 02/00\nXP2UIDLD MVC   SPFUSER(0),XP2USER  <<< EXECUTED >>>               M0909\nTESTNUMN DS    0H                                             SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   #CRNTSML,XP2CCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XP2ICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XP2MOD      CHANGED SIZE                   C0909\n         EX    R15,XP2UIDLD        LOAD USERID                    C0909\nISSPF    OI    STATUS,SPF          SET FLAG FOR STOW              C0909\n         DROP  R6                  (XP2)                      SBG 02/00\n*\n*              LOOK FOR EXTENSIONS - SECONDS IS A PRE-REQ         A0909\n*\n         TM    ODE5+6,X'80'        SECONDS PRESENT?               A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,2                                               A0909\n         CH    R0,ODE5+4           LENGTH EXACTLY TWO?            A0909\n         BNE   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         L     R15,ODE5            YES, POINT TO DATA             A0909\n         TRT   0(2,R15),NUMERIC    DECIMAL DIGITS?                A0909\n         BNZ   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         CLI   0(R15),C'5'         YES, BUT IS IT LESS THAN 60?   A0909\n         BH    XSPFOK              NO, CANNOT BE SECONDS          A0909\n         ICM   R0,1,1(R15)         GET SECOND DIGIT               A0909\n         SLL   R0,4                SHIFT OUT ZONE                 A0909\n         ICM   R0,2,0(R15)         GET FIRST DIGIT                A0909\n         SRL   R0,4                GET NUMERICS IN ONE BYTE       A0909\n         STC   R0,SPFSECS          SAVE THE SECONDS VALUE         A0909\n         TM    ODE6+6,X'80'        ANYTHING ELSE PRESENT?         A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,8                                               A0909\n         CH    R0,ODE6+4           AT LEAST EIGHT NON-BLANKS?     A0909\n         BH    XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         L     R15,ODE6            YES, POINT TO DATA             A0909\n         TRT   0(8,R15),NUMERIC    EIGHT DECIMAL DIGITS?          A0909\n         BNZ   XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         MVC   #CRNT(3),0(R15)     FIRST 3 TO CURRENT             A0909\n         MVC   #INIT(3),3(R15)     NEXT 3 TO INITIAL              A0909\n         MVC   #MOD(2),6(R15)      LAST 2 TO MODIFIED             A0909\n*\n*              NOTE THAT EXTENDED ISPF STATS CAN BE STOWED        A0909\n*              EVEN IF THE COUNTER HIGH-ORDER EXTENSION           A0909\n*              FIELD IS NOT PRESENT IN THE INPUT RECORD.          A0909\n*\n*              IF AN ORIGINAL 5-DIGIT COUNTER HAS A VALUE         A0909\n*              OVER 65535 THEN EXTENDED ISPF STATS WILL           A0909\n*              BE STOWED.                                         A0909\n*\n*              THE CURRENT RECORD COUNTER IS EFFECTIVELY          A0909\n*              IGNORED BY PDSLOAD BECAUSE THIS FIELD IS SET       A0909\n*              FROM THE NUMBER OF RECORDS WRITTEN TO THE          A0909\n*              MEMBER BY PDSLOAD.  BUT HAVING THE CURRENT         A0909\n*              RECORD COUNT IN THE SEQUENTIAL FILE IS GOOD        A0909\n*              FOR AUDIT TRAIL AND HUMAN CONVENIENCE PURPOSES.    A0909\n*\nXSPFOK   PACK  DOUBLE,#CRNT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         STH   R0,SPFCCNT          FIX CURRENT AT STOW TIME       A0909\n         PACK  DOUBLE,#INIT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXICNT         SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFICNT          SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXICNT       COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    GETMOD              NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nGETMOD   PACK  DOUBLE,#MOD                                        A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXMOD          SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFMOD           SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXMOD        COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    NOSPF               NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         MVC   LINE,LINE-1         CLEAR OLD STUFF              GP12006\n         MVC   RESULT(38),=CL38'NOT STOWED *** INVALID MEMBER NAME ***'\n         OI    RC+1,8              NASTY ERROR                  GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE            GP12006\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         SPACE 1\n*---------------------------------------------------------------------*\n*   TEST MEMBER NAME VALIDITY, OR (DEFAULT) BYPASS CHECKS             *\n*---------------------------------------------------------------------*\nNAMETEST ICM   R15,15,@TRTTAB      MEMBER CHECKING ENABLED?     GP12006\n         BZR   R14                   NO; JUST RETURN            GP12006\n         TRT   MEMBER,0(R15)       IS MEMBER NAME VALID?        GP12006\n         BNZ   ILLMEM              NO, BRANCH                   GP12006\n         CLI   MEMBER,C' '         IS FIRST CHAR BLANK?         GP12006\n         BE    ILLMEM                YES; FAIL                  GP12006\n         LA    R15,CHARIBM         SET FOR STRICT TEST          GP12006\n         C     R15,@TRTTAB         IS STRICT TEST DESIRED ?     GP12006\n         BNER  R14                   NO; NAME PASSED            GP12006\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?       GP12006\n         BNL   ILLMEM                YES; FAIL                  GP12006\n*  N.B. EARLY VERSIONS OF THE READER/INTERPRETER ALLOWED HYPHEN/MINUS\n*       IN THE JCL. THE CHARIBM TABLE DOES NOT ALLOW FOR THAT.  GP12006\n*OS/360  CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?        GP12006\n*OS/360  BE    ILLMEM                                           GP12006\n         BR    R14                 MEMBER ADHERES TO IBM JCL    GP12006\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         TM    FLAG1,SELECTAL      REAL MEMBER CREATED?         MAY2009\n         BZ    READ                NO, CANNOT MAKE ALIAS OF IT  MAY2009\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID?        GP12006\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWIT              GO CREATE ALIAS              MAY2009\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWFIXD            YES                            C0909\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\nSTOWFIXD ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWXCHK            YES, HALFWORD COUNTER CORRECT  A0909\n         MVC   SPFCCNT,=X'FFFF'    NO, SET TO HIGH VALUES         A0909\nSTOWXCHK TM    SPFFLAGS,SPFXSTAT   USING EXTENDED STATS?          A0909\n         BO    STOWXSET            YES                            A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, CLASSIC STATS WILL DO     A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\nSTOWXSET MVC   SPFXCCNT,SEQ        SET CURRENT RECORD COUNT       A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA\n         MVI   SPFVM,1             1.0\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         STCM  R0,12,SPFHHMM       TIME OF LAST CHANGE (HHMM)     C0909\n         STCM  R0,2,SPFSECS        TIME OF LAST CHANGE (SS)       A0909\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=C'PDSLOAD'\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, SET CLASSIC STATS         A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTERS HIGH     A0909\n         MVC   SPFCCNT,=X'FFFF'                                   A0909\n         ST    R1,SPFXICNT         ALSO SET FULLWORD COUNTERS     A0909\n         ST    R1,SPFXCCNT                                        A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\nSTOWIT   DS    0H                                               MAY2009\n         STOW  (R5),(R6),R\n         SPACE\n         CL    R15,=F'24'          UNEXPECTED RETURN CODE?      GP06315\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,8              WARNING IS TOO MILD ?        GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         OI    FLAG1,SELECTAL      ALIAS NOW ALLOWED            MAY2009\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         LR    R14,R0              COPY LENGTH                  GP12006\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         I/O ERROR                                        *    FEB2008\n*                                                          *     GP@P6\n************************************************************\n         SPACE\nIOERROR  WTO   MF=(E,SYNADMSG)     DISPLAY I/O ERROR MESSAGE\n         WTO   'PDSLOAD WILL ABEND - WRITE I/O ERROR',ROUTCDE=(11)\n         ABEND 101\n         SPACE\nPDSSYNAD DS    0H\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG+4(78),50(R1)\n         OI    FLAG1,IOERR\n         SYNADRLS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE 1                                                GP12006\nMSGMISS1 DC    C'SYSUT1  MISSING; WILL TRY SYSIN  '             GP12006\n         SPACE 1                                                GP12006\nSTRMISS2 DC    C'    PDSLOAD TERMINATED - '                     GP12006\nSTRMIDD2 DC    C'SYSUT2  MISSING OR UNUSABLE'                   GP12006\nMSGMISS2 EQU   STRMISS2,*-STRMISS2,C'C'                         GP12006\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\nSYNADWTO WTO   '1234567890123456789012345678901234567890123456789012345+\n               67890123456789012345678',ROUTCDE=(11),MF=L\nSYNADLEN EQU   *-SYNADWTO\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,SYNAD=PDSSYNAD,        +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL TRENT ,0,C' ',C',',FILL=255   PASS ON COMMA AND BLANK  GP12006\n         SPACE 1\nTABBLANK TRENT FILL=0                                           GP12006\n         TRENT ,C' ',C' '         STOP ON BLANK                 GP12006\n         TRENT ,C',',C','         STOP ON COMMA                 GP12006\n         SPACE 1\nCHARIBM  TRENT FILL=255                                         GP12006\n         TRENT ,0,C'$',C'@',C'#'  ALLOW NATIONAL CHARACTERS     GP12006\n         TRENT ,0,(C'A',9),(C'J',9),(C'S',8)     LETTERS        GP12006\n         TRENT ,0,(C'0',10)                      DIGITS         GP12006\n         TRENT ,0,C' '            TRAILING SPACE                GP12006\n         SPACE 1\nCHAR037  TRENT FILL=255                                         GP12006\n         TRENT ,0,(X'40',X'6B'-X'40')   EVERYTHING BELOW COMMA  GP12006\n         TRENT ,0,(X'6B'+1,255-X'6B')   EVERYTHING AFTER COMMA  GP12006\n         SPACE 1\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  TRENT ,0,(C'0',10),FILL=255   DIGITS ONLY              GP12006\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nCTLMODEL DC    CL12'./ ADD NAME='      LOOKING FOR              GP06315\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\n@TRTTAB  DS    A                                                GP12006\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODE6     DS    2F                  OPERAND DESCRIPTOR ENTRY 6     A0909\nODE7     DS    2F                  OPERAND DESCRIPTOR ENTRY 7     A0909\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\nIOERR    EQU   X'08'               OUTPUT I/O ERROR             FEB2008\nFGNOCON  EQU   X'02'               CONTROL - SKIP UPDTE TEST    GP06315\nSELECTAL EQU   X'01'               ALIAS ALLOWED                MAY2009\n         DS    C                   LINE-1\nLINE     DS    CL133\nRESULT   EQU   LINE+48                           (IFOX00)       GP06315\nLINEH1   DS    CL133\n*\nSYNADMSG DS    XL(SYNADLEN)                                     FEB2008\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL40                SPF STATISTICS OR SSI          C0909\n         ORG   MEMUSER                                            C0909\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFFLAGS DS    X                   FLAGS                          A0909\nSPFSCLM  EQU   X'80'               SCLM-MANAGED                   A0909\nSPFXSTAT EQU   X'20'               EXTENDED STATISTICS            A0909\nSPFSECS  DS    X                   TIME LAST UPDATED (SS)         A0909\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED (HHMM)\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL7                 USERID                         C0909\nSPFBLANK DS    CL3                 ONE OR THREE BLANKS            A0909\n         ORG   SPFBLANK+1                                         A0909\nSPFXCCNT DS    F                   CURRENT SIZE                   A0909\nSPFXICNT DS    F                   INITIAL SIZE                   A0909\nSPFXMOD  DS    F                   MODS                           A0909\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n*\nZEROAREA DS    0CL(8+8+7)          UNPACKED COUNTERS AREA         A0909\n#CRNT    DS    CL8                 CURRENT RECORD COUNT           A0909\n#CRNTSML EQU   #CRNT+3,5           CURRENT RECORD COUNT           A0909\n#INIT    DS    CL8                 INITIAL RECORD COUNT           A0909\n#INITSML EQU   #INIT+3,5           INITIAL RECORD COUNT           A0909\n#MOD     DS    CL7                 CHANGED RECORD COUNT           A0909\n#MODSML  EQU   #MOD+2,5            CHANGED RECORD COUNT           A0909\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         PRINT GEN\n         CVT   LIST=YES,DSECT=YES   NEED FOR SYSTEM LEVEL CHECK GP12006\n         DCBD  DEVD=DA,DSORG=PO   WANT FOR DCB VALUES           GP12006\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD9": {"ttr": 17670, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0b\\x003\\x01\\x12\\x01\\x0f\\x01\\x13'?\\tU\\x07\\xaf\\x07\\xaa\\x00S\\xc3\\xd6\\xd9\\xd9\\xc3\\xe3\\xc4@@@\"", "ispf": {"version": "01.11", "flags": 0, "createdate": "2012-01-10T00:00:00", "modifydate": "2013-09-30T09:55:33", "lines": 1967, "newlines": 1962, "modlines": 83, "user": "CORRCTD"}, "text": "PDSLOAD  TITLE 'P D S L O A D  **  LOAD IEBUPDTE INPUT TO A PDS'\n* ---------- Updated by Gerhard Postpischil ---- Jan 2012 ---------- *\n* Note that Greg Price and Gerhard Postpischil have the same initials.\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 17, 2008\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='CTL(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE USED TO LOOK\n*         FOR THE ADD AND ALIAS CARDS.   GERHARD POSTPISCHIL    GP06315\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM THAT CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESN'T CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n*        11NOV2006 - ADDED CTL PARM OPTION TO SUPPORT ADDITIONAL LEVEL\n*                    OF ./ SUBSTITUTION E.G., MEMBERS W/SMP UPDATES\n*                  - ALSO CHANGED PARM PARSING - ANY ORDER NOW ALLOWED\n* GERHARD POSTPISCHIL                                           GP06315\n*----------------------------------------------------------------------\n*        17FEB2008 - ADD SYNAD EXIT ETC. TO ACQUIRE AND DISPLAY\n*                    I/O ERROR MESSAGE WHEN WRITE TO PDS FAILS.\n*                    ABEND U0101 AFTER WRITE I/O ERROR.\n*        10MAY2009 - DO NOT MAKE ALIAS WHEN REAL MEMBER NOT MADE.\n*                  - NOW COMPLETE THE ALLOWED RECFM COMBO SET:\n*                    FIXED-LENGTH INPUT WITH VARIABLE-LENGTH\n*                    OUTPUT WITH TRAILING BLANKS TRUNCATION.\n*        29SEP2009 - ISPF STATISTICS ENHANCEMENTS:                 0909\n*                    - PROCESS SECONDS PART OF TIMESTAMP.\n*                    - SUPPORT ISPF EXTENDED STATISTICS.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*        05JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS.\n*                    ADD { X'C0' SUPPORT TO ALPHANUM TRANSLATE\n*                    TABLE.  IF YOU WANT TO GET RID OF THE MEMBER\n*                    NAME VALIDITY CHECK ENTIRELY, THEN UNCOMMENT\n*                    THE STATEMENT:\n*                    \"B    BYPVALID\"\n*                    AFTER THE LABEL \"SIMPLE\".\n* SAM GOLOB\n*----------------------------------------------------------------------\n*        06JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS, PART DEUX:\n*                    SAM'S SOLUTION WORKS, BUT IS ONE I FIND\n*                    UNDESIRABLE (BABY - BATHWATER)\n*                    INSTEAD I ADDED A PARM OPTION NAME=\n*       (DEFAULT)    NAME=ASIS    BYPASS ALL CHECKS\n*                    NAME=CHECK   ALLOW ALL PRINTABLE CHARACTERS\n*                                 (EXCEPT COMMA) USING CODEPAGE 037\n*                    NAME=IBM     ENFORCE STRICT IBM JCL STANDARDS\n*                  - FIXED LRECL FOR UNLIKE RECFM COPY\n*                  - ADDED NON-SDB BLOCK SIZE CODE BACK IN FOR MVS 3.8\n* GERHARD POSTPISCHIL                                           GP12006\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER IS\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n* ------------------------------------------------------------------ *\n         MACRO ,\n&NM      TRENT &TAB,&VAL,&OFF,&FILL=                    ADDED ON 86311\n.*\n.*   This macro is used to create translate and translate and test\n.*     tables in compact fashion.\n.*\n.*   The table may be built by (separate) DC statements, or by\n.*     a TRENT entry with a FILL= operand and a name field.     GP12005\n.*\n.*   Any name field is attached to first expanded DC, if any\n.*     First positional is name of table to be modified; may be\n.*       null after first occurrence and after a FILL\n.*     Second positional is value to be placed in table; may be\n.*       null after first occurrence. May be expression.\n.*     Subsequent values are offsets in self-defining form, i.e.,\n.*       X'nn', C'x', integer, equate value, or absolute expression.\n.*     A sublist may be used, offset in first value, repeat count\n.*       in second.\n.*     When the last parm is null, no final ' ORG ' is created.\n.*       (requested by trailing comma)\n.*     When no parameters are supplied, a final ' ORG ' is expanded.\n.*\n.*       ex.:  upper case translate:\n.*       UPTAB DC    256AL1(*-UPTAB)     or\n.*       UPTAB TRENT FILL=(*-UPTAB)\n.*             TRENT UPTAB,*-UPTAB+X'40',(X'81',9),(X'91',9),(X'A2,8)\n.*\n         GBLC  &ZZ@TAB,&ZZ@VAL\n         LCLC  &N\n         LCLA  &I,&J\n&J       SETA  N'&SYSLIST\n&N       SETC  '&NM'\n         AIF   (T'&FILL EQ 'O').DATA                            GP12005\n         AIF   ('&N' NE '').BUILD                               GP12005\n         MNOTE 8,'TRENT WITH FILL= REQUIRES A LABEL'            GP12005\n         MEXIT ,                                                GP12005\n.*   BUILD TRANSLATE OR TRT TABLE                               GP12005\n.*                                                              GP12005\n.BUILD   ANOP  ,                                                GP12005\n&N       DC    256AL1(&FILL)                                    GP12005\n&ZZ@TAB  SETC  '&N'                                             GP12005\n&N       SETC  ''                                               GP12005\n         AIF   (&J EQ 0).MEND                                   GP12005\n.*   EXPAND TABLE MODIFICATIONS\n.*\n.DATA    AIF   (&J EQ 0).ORG\n         AIF   ('&TAB' EQ '').NOTAB\n&ZZ@TAB  SETC  '&TAB'\n.NOTAB   AIF   ('&VAL' EQ '').NOVAL\n&ZZ@VAL  SETC  '&VAL'\n.NOVAL   AIF   (&J LT 3).MEND\n&I       SETA  2\n.LOOP    AIF   (&I GE &J).DONE\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)' EQ '').LOOP\n         AIF   (N'&SYSLIST(&I) EQ 2).PAIR\n         ORG   &ZZ@TAB+&SYSLIST(&I)\n&N       DC    AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.PAIR    ORG   &ZZ@TAB+&SYSLIST(&I,1)\n&N       DC    (&SYSLIST(&I,2))AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.DONE    AIF   ('&SYSLIST(&J)' EQ '').MEND\n.ORG     ORG   ,\n.MEND    MEND  ,\n* ------------------------------------------------------------------ *\n         SPACE\nPDSLOAD  START\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATE '   MVS 3.8        GP06315\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:F,V->V (TRUNC)'\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         MVC   SYNADMSG,SYNADWTO   PRIME I/O ERROR MESSAGE      FEB2008\n         SPACE 1\n*   VALIDITY CHECKING FOR MEMBER NAMES IS SUPPRESSED BY DEFAULT GP12006\n*   TO CHANGE THE DEFAULT, ACTIVATE THE DESIRED LA INSTRUCTION: GP12006\n*        LA    R0,CHARIBM          STRICT IBM NAME CHECK        GP12006\n*        LA    R0,CHAR037          ANY PRINTABLE EXCEPT COMMA   GP12006\n*        LA    R0,0                NO CHECKING                  GP12006\n*        ST    R0,@TRTTAB                                       GP12006\n*        MVI   CHARIBM+C'-',0      ALLOW OS/360 HYPHEN IN NAME  GP12006\n         SPACE 1\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPAGATOR\n         MVI   LINE-1,C' '         BLANK PROPAGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'        CONVERSION CODE (./)\n         MVC   CTLMODEL(2),UPDTE   CONTROL CARD CODE (./)       GP06315\n         MVC   CTLMODEL+2(10),=C' ADD NAME='                    GP06315\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BNP   PARMDONE                                         GP06315\nPARMLOOP CLI   2(R1),C','                                       GP06315\n         BNE   PARMNCOM                                         GP06315\n         LA    R3,1                SKIP COMMA                   GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCOM CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMBAD             NO, BYPASS COMPARE\n         CLC   =C'NEW',2(R1)       IS IT NEW, AS PER IEBUPDTE?  GP06315\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nTRYSPF   CLC   =C'SPF',2(R1)       IS IT SPF                    GP06315\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nPARMSX   CLC   =C'S(',2(R1)        IS IT S( ?                   GP06315\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,L'MEMSEL        SET MAX LOOP COUNT           GP06315\nPARMML   CLI   2(R1),C')'                                       GP06315\n         BE    PARMME\n         MVC   0(1,R15),2(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)           BUMP SKIP SIZE               GP06315\n         BCT   R0,PARMMIG          OK IF MORE                   GP06315\n         B     PARMBAD             ALL DONE, BUT MISSING ')'    GP06315\nPARMMIG  BCT   R14,PARMML          LOOP FOR MEMBER NAME         GP06315\n         CLI   2(R1),C')'          PROPER TERMINATION ?         GP06315\n         BL    PARMBAD             NO, FAIL                     GP06315\nPARMME   LA    R3,1                POINT PAST PAREN             GP06315\n         B     PARMBUMP            SKIP TO NEXT OPERAND         GP06315\nPARMMX   CH    R0,=H'5'            IS PARM LONG ENOUGH ?        GP12006\n         BL    PARMBAD               NO                         GP12006\n         CLC   =C'NAME=',2(R1)     IS IT NAME CHECK ?           GP12006\n         BNE   PARMNN                NO                         GP12006\n         LA    R3,5                SKIP KEYWORD                 GP12006\n         XC    @TRTTAB,@TRTTAB     RESET PRIOR, JUST IN CASE    GP12006\n         CH    R0,=H'5'            END OF PARM ?                GP12006\n         BNH   PARMBUMP              YES; DONE                  GP12006\n         CLI   5+2(R1),C','        NULL VALUE ?                 GP12006\n         BE    PARMBUMP              YES                        GP12006\n         LA    R3,8                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHARIBM         POINT TO IBM TEST TABLE      GP12006\n         CLC   =C'IBM',2+5(R1)     IS IT IBM?                   GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         CLC   =C'JCL',2+5(R1)     IS IT ALTERNATE?             GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         LA    R3,9                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,0               RESET TEST TABLE ADDRESS     GP12006\n         CLC   =C'ASIS',2+5(R1)    SKIP TESTING ?               GP12006\n         BE    PARMHTAB              YES                        GP12006\n         LA    R3,10               SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHAR037         SET FOR CODEPAGE 037 EXC ,   GP12006\n         CLC   =C'CHECK',2+5(R1)   TEST 037 PRINTABLES?         GP12006\n         BNE   PARMBAD               NO; BAD PARAMETER          GP12006\nPARMHTAB ST    R14,@TRTTAB         SAVE TRANSLATE TABLE ADDRESS GP12006\n         B     PARMBUMP              AND SKIP TO NEXT FIELD     GP12006\nPARMNN   CH    R0,=H'7'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'CTL(',2(R1)      IS IT CTL(XX)                GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   8(R1),C')'          CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   CTLMODEL(2),6(R1)   YES, SAVE NEW CONTROLS       GP06315\n         LA    R3,7                  SKIP SEVEN                 GP12006\n         B     PARMBUMP                                         GP06315\nPARMNCTL CH    R0,=H'9'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'UPDTE(',2(R1)    IS IT UPDTE(XX)              GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   10(R1),C')'         CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   UPDTE,8(R1)         YES, SAVE NEW CONVERSION     GP06315\n         LA    R3,9                                             GP06315\nPARMBUMP AR    R1,R3               NEXT PARM                    GP06315\n         SR    R0,R3               RESIDUAL LENGTH              GP06315\n         BP    PARMLOOP                                         GP06315\n         B     PARMDONE                                         GP06315\nPARMBAD  WTO   'PDSLOAD: INVALID PARM FIELD'                    GP06315\n         ABEND 100\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\nPARMDONE MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         LR    R5,R4               FOR ERROR MESSAGE, IF ANY    GP12006\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXLE  R15,R15,HAVEUT1                                  GP12006\n         MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS1),MSGMISS1                      GP12006\n         MVC   LINE+1(8),DCBDDNAM-IHADCB(R4)                    GP12006\n         BAL   R14,REPORT          DISPLAY WARNING              GP12006\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXH   R15,R15,MISSUT2     SHOW FILE MISSING            GP12006\nHAVEUT1  LA    R5,PDSDCBW          RESTORE OUTPUT DCB ADDRESS   GP12006\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LR    R5,R4               FOR ERROR MESSAGE            GP12006\n         B     MISSUT2                                          GP12006\n         SPACE 1\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\n         SPACE 1\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         LA    R0,80               MINIMM DATA LENGTH           GP12006\n         AH    R0,DWLIN            ADJUST FOR RECFM=V           GP12006\n         CH    R0,LRECL(,R4)       INPUT LRECL<80?              GP12006\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         DEVTYPE DCBDDNAM-IHADCB(R5),DOUBLE   EXIT NEEDS TYPE   GP12006\n         BXH   R15,R15,MISSUT2                                  GP12006\n         CLI   DOUBLE+2,X'20'      UCB3DACC                     GP12006\n         BNE   MISSUT2               NO; CAN'T BE PDS           GP12006\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),DCBOFOPN                               GP12006\n         BO    OKUT2\nMISSUT2  MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS2),MSGMISS2                      GP12006\n         MVC   LINE+1+STRMIDD2-STRMISS2(8),DCBDDNAM-IHADCB(R5)  GP12006\n         BAL   R14,REPORT          DISPLAY THE ERROR MESSAGE    GP12006\n         LA    R15,16\n         B     EXIT\n         SPACE 1\n*   SYSUT2 DCB EXIT - IF NOT SPECIFIED, USE DCB PARAMETERS FROM GP12006\n*   SYSUT1/SYSIN. CODE ADDED TO ADJUST LRECL BY FOUR IF F->V OR GP12006\n*   V->F REQUESTED.                                             GP12006\n*                                                               GP12006\n         PUSH  USING                                            GP12006\n         USING UT2EXO,R15         JUST IN CASE                  GP12006\n         USING IHADCB,R1           MAKE (MY) LIFE EASIER        GP12006\nUT2EXO   LH    R2,LRECL(,R4)       COPY INPUT LENGTH (DEFAULT)  GP12006\n         TM    DCBRECFM,X'C0'      NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    DCBLRECL,DCBLRECL   RECFM=U SO FORCE LRECL=0     GP12006\n         BR    R14                 RETURN\nUT2EX2   MVC   DCBRECFM,RECFM(R4)  YES, COPY INPUT RECFM        GP12006\nUT2EX3   TM    DCBRECFM,X'80'      FIXED ?                      GP12006\n         BNZ   UT2EX3B               YES; ELSE                  GP12006\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS     GP12006\nUT2EX3B  CLC   =H'0',DCBLRECL      IS LRECL SPECIFIED?          GP12006\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n*   WHEN INPUT AND OUTPUT ARE BOTH F OR BOTH V, NO ADJUSTMENT   GP12006\n*   IS NECESSARY. FOR F->V, ADD 4, FOR V->F, SUBTRACT 4         GP12006\n         TM    RECFM(R4),X'80'     FROM F ?                     GP12006\n         BNZ   UT2FROF               YES                        GP12006\n         TM    DCBRECFM,X'80'      TO F ?                       GP12006\n         BZ    UT2BLK                NO; JUST CHECK BLOCK       GP12006\n         SH    R2,=H'4'            ADJUST FOR V->F              GP12006\n         B     UT2BLK                CHECK BLOCK                GP12006\nUT2FROF  TM    DCBRECFM,X'80'      OUTPUT ALSO F ?              GP12006\n         BNZ   UT2BLK                YES; NO ADJUSTMENT         GP12006\n         LA    R2,4(,R2)           ALLOW FOR OUTPUT RDW         GP12006\nUT2BLK   STH   R2,DCBLRECL         SET NEW LRECL                GP12006\nUT2EX4   SR    R7,R7               PREP FOR DIVIDE              GP12006\n         ICM   R7,3,DCBBLKSI       GET BLOCK SIZE               GP12006\n         BNZR  R14                   HOPE FOR THE BEST          GP12006\n         LH    R2,DCBLRECL         GET RECORD LENGTH BACK       GP12006\n         L     R3,CVTPTR           GET CVT                      GP12006\n         TM    CVTDCB-CVTMAP(R3),X'80'   XA OR LATER ?          GP12006\n         BNZR  R14                   YES; ASSUME SDB AVAILABLE  GP12006\n         IC    R3,DOUBLE+3         GET DEVICE TYPE              GP12006\n         LA    R0,X'0F'            MAKE DASD TYPE MASK          GP12006\n         NR    R3,R0               ISOLATE SUBTYPE              GP12006\n         SLL   R3,1                MAKE HALFWORD OFFSET         GP12006\n         LH    R7,MVSBLK(R3)       GET (SUB)OPTIMAL SIZE        GP12006\n         TM    DCBRECFM,X'80'      FIXED?                       GP12006\n         BZ    UT2BLKV             NO; HANDLE VARIABLE BLOCK    GP12006\n         SR    R6,R6                                            GP12006\n         DR    R6,R2               NUMBER OF RECORDS IN BLOCK   GP12006\n         LTR   R7,R7               ANY ?                        GP12006\n         BP    *+8                   YES                        GP12006\n         LA    R7,1                DEFAULT TO ONE               GP12006\n         MR    R6,R2               NEW BLOCK SIZE               GP12006\n         B     UT2BLKST              YES; USE IT                GP12006\nUT2BLKV  LA    R2,4(,R2)           MINIMUM BLOCK SIZE           GP12006\n         CR    R7,R2               ADEQUATE BLOCK SIZE ?        GP12006\n         BNL   UT2BLKST              YES; USE IT                GP12006\n         LR    R7,R2               USE LRECL+4 FOR BLOCK        GP12006\nUT2BLKST STH   R7,DCBBLKSI         SHOULD WORK ?                GP12006\n         BR    R14                 CONTINUE                     GP12006\n         POP   USING                                            GP12006\n*          0-7   ???? 2311 2301 2303 2321 9345  2305 2305       GP12006\nMVSBLK   DC    H'4096,3625,4096,2446,4906,22928,3210,3516'      GP12006\n*          8-F   2314 3330  3340 3350  3375  333D  3380  3390   GP12006\n         DC    H'7294,13030,8368,19069,17600,13030,23476,27998' GP12006\n         SPACE 1\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  SOME OF US ARE STUCK WITH MVS 3.8, SO NON-SDB CODE ADDED     GP12006\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         SPACE\n         LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     NI    FLAG1,255-FGNOCON   CHECK FOR UPDTE TRANSLATE    GP06315\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   CTLMODEL(2),0(R15)  CONTROL STATEMENT?           GP06315\n         BNE   COPY                NO\n         OI    FLAG1,FGNOCON       NO UPDTE TRANSLATE           GP06315\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,80-1            GET LENGTH CODE IF FIXED LEN   C0909\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,80-1             LENGTH CODE OF CONTROL STMT    C0909\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               ENSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         TM    FLAG1,FGNOCON       NO UPDTE TRANSLATE ?         GP06315\n         BNZ   NOTUPDTE            CORRECT; SKIP AROUND         GP06315\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         MVC   LINE+1+13(2),CTLMODEL   BUT USE REAL CTL PAIR    GP06315\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n*\n*         ALLOW OUTPUT RECFM TO BE INDEPENDENT OF INPUT RECFM   MAY2009\n*\n*         1. GET INPUT DATA ADDRESS AND LENGTH                  MAY2009\n*\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    *+8                 YES, NO RDW PRESENT\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         AH    R14,DWLIN           POINT TO INPUT RECORD DATA\n         SH    R15,DWLIN           GET INPUT RECORD DATA LENGTH\n*\n*         2. BRANCH TO LOGIC PATH BASED ON OUTPUT RECFM         MAY2009\n*\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVAR              NO\n*\n*         3. BLOCK ANOTHER FIXED-LENGTH RECORD IF IT FITS       MAY2009\n*\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         B     PUTPAD              GO LOAD THE RECORD'S DATA\n*\n*         4. BLOCK VARIABLE-LENGTH RECORD IF IT FITS            MAY2009\n*\nPUTVAR   LA    R1,4(,R15)          GET IDEAL OUTPUT RECORD LENGTH\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BNE   TRAILOK             NO, SKIP TRAILING BLANKS DISCARD\n         LA    R1,0(R15,R14)       POINT PAST INPUT RECORD DATA\nTRAILOOP BCTR  R1,0                BACK UP A BYTE\n         CR    R1,R14              BACK TO START OF RECORD?\n         BNH   TRAILMIN            YES, USE MINIMUM LENGTH\n         CLI   0(R1),C' '          TRAILING BLANK?\n         BE    TRAILOOP            YES, KEEP BACKING UP\n         LA    R1,1+4(,R1)         NO, POINT PAST LAST NON-BLANK + RDW\n         SR    R1,R14              GET NEW IDEAL OUTPUT RECORD LENGTH\n         B     TRAILOK             DESIRED LENGTH NOW KNOWN\nTRAILMIN LA    R1,5                MINIMUM IS RDW + 1 DATA BYTE\nTRAILOK  CH    R1,LRECL(,R5)       LENGTH LONGER THAN OUTPUT LRECL?\n         BNH   *+8                 NO, USE THIS LENGTH\n         LH    R1,LRECL(,R5)       YES, REDUCE LENGTH TO OUTPUT LRECL\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         SR    R7,R6               GET NEW SIZE OF THIS BLOCK\n         STH   R7,0(,R6)           SET INTO BDW\n         LR    R7,R0               POINT TO RECORD TO LOAD\n         STCM  R1,3,0(R7)          SET RECORD LENGTH INTO RDW\n         STCM  R1,12,2(R7)         CLEAR REST OF RDW\n         AH    R0,DWLOT            POINT PAST RDW\n         SH    R1,DWLOT            GET DATA LENGTH AFTER RDW\n*\n*         5. LOAD THE DATA INTO THE NEW RECORD                  MAY2009\n*\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(80),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   CTLMODEL,0(R1)      ./ ADD NAME OR XX ADD        GP06315\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA                 A0909\n         MVI   ZEROAREA,C'0'       GET SOME UNPACKED ZEROS        A0909\n         MVC   ZEROAREA+1(L'ZEROAREA-1),ZEROAREA                  A0909\n         MVC   SPFUSER,=CL8' '     PAD WITH BLANKS                M0909\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        CHECK (OR NOT) NAME VALIDITY GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID         GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'6'           ID LENGTH CODE MAY BE 0 TO 6   C0909\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         MVC   #CRNTSML,XPFCCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XPFICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XPFMOD      CHANGED SIZE                   C0909\n         EX    R15,XPFUIDLD        LOAD USERID                    C0909\n         B     ISSPF               GO PROCESS FURTHER             C0909\nXPFUIDLD MVC   SPFUSER(0),XPFUSER  <<< EXECUTED >>>               M0909\n         DROP  R6                  (XPF)                      SBG 02/00\n         USING XP2,R6                                         SBG 02/00\nXP2UIDLD MVC   SPFUSER(0),XP2USER  <<< EXECUTED >>>               M0909\nTESTNUMN DS    0H                                             SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   #CRNTSML,XP2CCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XP2ICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XP2MOD      CHANGED SIZE                   C0909\n         EX    R15,XP2UIDLD        LOAD USERID                    C0909\nISSPF    OI    STATUS,SPF          SET FLAG FOR STOW              C0909\n         DROP  R6                  (XP2)                      SBG 02/00\n*\n*              LOOK FOR EXTENSIONS - SECONDS IS A PRE-REQ         A0909\n*\n         TM    ODE5+6,X'80'        SECONDS PRESENT?               A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,2                                               A0909\n         CH    R0,ODE5+4           LENGTH EXACTLY TWO?            A0909\n         BNE   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         L     R15,ODE5            YES, POINT TO DATA             A0909\n         TRT   0(2,R15),NUMERIC    DECIMAL DIGITS?                A0909\n         BNZ   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         CLI   0(R15),C'5'         YES, BUT IS IT LESS THAN 60?   A0909\n         BH    XSPFOK              NO, CANNOT BE SECONDS          A0909\n         ICM   R0,1,1(R15)         GET SECOND DIGIT               A0909\n         SLL   R0,4                SHIFT OUT ZONE                 A0909\n         ICM   R0,2,0(R15)         GET FIRST DIGIT                A0909\n         SRL   R0,4                GET NUMERICS IN ONE BYTE       A0909\n         STC   R0,SPFSECS          SAVE THE SECONDS VALUE         A0909\n         TM    ODE6+6,X'80'        ANYTHING ELSE PRESENT?         A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,8                                               A0909\n         CH    R0,ODE6+4           AT LEAST EIGHT NON-BLANKS?     A0909\n         BH    XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         L     R15,ODE6            YES, POINT TO DATA             A0909\n         TRT   0(8,R15),NUMERIC    EIGHT DECIMAL DIGITS?          A0909\n         BNZ   XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         MVC   #CRNT(3),0(R15)     FIRST 3 TO CURRENT             A0909\n         MVC   #INIT(3),3(R15)     NEXT 3 TO INITIAL              A0909\n         MVC   #MOD(2),6(R15)      LAST 2 TO MODIFIED             A0909\n*\n*              NOTE THAT EXTENDED ISPF STATS CAN BE STOWED        A0909\n*              EVEN IF THE COUNTER HIGH-ORDER EXTENSION           A0909\n*              FIELD IS NOT PRESENT IN THE INPUT RECORD.          A0909\n*\n*              IF AN ORIGINAL 5-DIGIT COUNTER HAS A VALUE         A0909\n*              OVER 65535 THEN EXTENDED ISPF STATS WILL           A0909\n*              BE STOWED.                                         A0909\n*\n*              THE CURRENT RECORD COUNTER IS EFFECTIVELY          A0909\n*              IGNORED BY PDSLOAD BECAUSE THIS FIELD IS SET       A0909\n*              FROM THE NUMBER OF RECORDS WRITTEN TO THE          A0909\n*              MEMBER BY PDSLOAD.  BUT HAVING THE CURRENT         A0909\n*              RECORD COUNT IN THE SEQUENTIAL FILE IS GOOD        A0909\n*              FOR AUDIT TRAIL AND HUMAN CONVENIENCE PURPOSES.    A0909\n*\nXSPFOK   PACK  DOUBLE,#CRNT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         STH   R0,SPFCCNT          FIX CURRENT AT STOW TIME       A0909\n         PACK  DOUBLE,#INIT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXICNT         SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFICNT          SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXICNT       COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    GETMOD              NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nGETMOD   PACK  DOUBLE,#MOD                                        A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXMOD          SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFMOD           SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXMOD        COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    NOSPF               NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         MVC   LINE,LINE-1         CLEAR OLD STUFF              GP12006\n         MVC   RESULT(38),=CL38'NOT STOWED *** INVALID MEMBER NAME ***'\n         OI    RC+1,8              NASTY ERROR                  GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE            GP12006\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         SPACE 1\n*---------------------------------------------------------------------*\n*   TEST MEMBER NAME VALIDITY, OR (DEFAULT) BYPASS CHECKS             *\n*---------------------------------------------------------------------*\nNAMETEST ICM   R15,15,@TRTTAB      MEMBER CHECKING ENABLED?     GP12006\n         BZR   R14                   NO; JUST RETURN            GP12006\n         TRT   MEMBER,0(R15)       IS MEMBER NAME VALID?        GP12006\n         BNZ   ILLMEM              NO, BRANCH                   GP12006\n         CLI   MEMBER,C' '         IS FIRST CHAR BLANK?         GP12006\n         BE    ILLMEM                YES; FAIL                  GP12006\n         LA    R15,CHARIBM         SET FOR STRICT TEST          GP12006\n         C     R15,@TRTTAB         IS STRICT TEST DESIRED ?     GP12006\n         BNER  R14                   NO; NAME PASSED            GP12006\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?       GP12006\n         BNL   ILLMEM                YES; FAIL                  GP12006\n*  N.B. EARLY VERSIONS OF THE READER/INTERPRETER ALLOWED HYPHEN/MINUS\n*       IN THE JCL. THE CHARIBM TABLE DOES NOT ALLOW FOR THAT.  GP12006\n*OS/360  CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?        GP12006\n*OS/360  BE    ILLMEM                                           GP12006\n         BR    R14                 MEMBER ADHERES TO IBM JCL    GP12006\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         TM    FLAG1,SELECTAL      REAL MEMBER CREATED?         MAY2009\n         BZ    READ                NO, CANNOT MAKE ALIAS OF IT  MAY2009\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID?        GP12006\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWIT              GO CREATE ALIAS              MAY2009\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWFIXD            YES                            C0909\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\nSTOWFIXD ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWXCHK            YES, HALFWORD COUNTER CORRECT  A0909\n         MVC   SPFCCNT,=X'FFFF'    NO, SET TO HIGH VALUES         A0909\nSTOWXCHK TM    SPFFLAGS,SPFXSTAT   USING EXTENDED STATS?          A0909\n         BO    STOWXSET            YES                            A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, CLASSIC STATS WILL DO     A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\nSTOWXSET MVC   SPFXCCNT,SEQ        SET CURRENT RECORD COUNT       A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA\n         MVI   SPFVM,1             1.0\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         STCM  R0,12,SPFHHMM       TIME OF LAST CHANGE (HHMM)     C0909\n         STCM  R0,2,SPFSECS        TIME OF LAST CHANGE (SS)       A0909\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=C'PDSLOAD'\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, SET CLASSIC STATS         A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTERS HIGH     A0909\n         MVC   SPFCCNT,=X'FFFF'                                   A0909\n         ST    R1,SPFXICNT         ALSO SET FULLWORD COUNTERS     A0909\n         ST    R1,SPFXCCNT                                        A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\nSTOWIT   DS    0H                                               MAY2009\n         STOW  (R5),(R6),R\n         SPACE\n         CL    R15,=F'24'          UNEXPECTED RETURN CODE?      GP06315\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,8              WARNING IS TOO MILD ?        GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         OI    FLAG1,SELECTAL      ALIAS NOW ALLOWED            MAY2009\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         LR    R14,R0              COPY LENGTH                  GP12006\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         I/O ERROR                                        *    FEB2008\n*                                                          *     GP@P6\n************************************************************\n         SPACE\nIOERROR  WTO   MF=(E,SYNADMSG)     DISPLAY I/O ERROR MESSAGE\n         WTO   'PDSLOAD WILL ABEND - WRITE I/O ERROR',ROUTCDE=(11)\n         ABEND 101\n         SPACE\nPDSSYNAD DS    0H\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG+4(78),50(R1)\n         OI    FLAG1,IOERR\n         SYNADRLS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE 1                                                GP12006\nMSGMISS1 DC    C'SYSUT1  MISSING; WILL TRY SYSIN  '             GP12006\n         SPACE 1                                                GP12006\nSTRMISS2 DC    C'    PDSLOAD TERMINATED - '                     GP12006\nSTRMIDD2 DC    C'SYSUT2  MISSING OR UNUSABLE'                   GP12006\nMSGMISS2 EQU   STRMISS2,*-STRMISS2,C'C'                         GP12006\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\nSYNADWTO WTO   '1234567890123456789012345678901234567890123456789012345+\n               67890123456789012345678',ROUTCDE=(11),MF=L\nSYNADLEN EQU   *-SYNADWTO\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,SYNAD=PDSSYNAD,        +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL TRENT ,0,C' ',C',',FILL=255   PASS ON COMMA AND BLANK  GP12006\n         SPACE 1\nTABBLANK TRENT FILL=0                                           GP12006\n         TRENT ,C' ',C' '         STOP ON BLANK                 GP12006\n         TRENT ,C',',C','         STOP ON COMMA                 GP12006\n         SPACE 1\nCHARIBM  TRENT FILL=255                                         GP12006\n         TRENT ,0,C'$',C'@',C'#'  ALLOW NATIONAL CHARACTERS     GP12006\n         TRENT ,0,(C'A',9),(C'J',9),(C'S',8)     LETTERS        GP12006\n         TRENT ,0,(C'0',10)                      DIGITS         GP12006\n         TRENT ,0,X'C0'           LEFT BRACE                    GP12090\n         TRENT ,0,C' '            TRAILING SPACE                GP12006\n         SPACE 1\nCHAR037  TRENT FILL=255                                         GP12006\n         TRENT ,0,(X'40',X'6B'-X'40')   EVERYTHING BELOW COMMA  GP12006\n         TRENT ,0,(X'6B'+1,255-X'6B')   EVERYTHING AFTER COMMA  GP12006\n         SPACE 1\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  TRENT ,0,(C'0',10),FILL=255   DIGITS ONLY              GP12006\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nCTLMODEL DC    CL12'./ ADD NAME='      LOOKING FOR              GP06315\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\n@TRTTAB  DS    A                                                GP12006\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODE6     DS    2F                  OPERAND DESCRIPTOR ENTRY 6     A0909\nODE7     DS    2F                  OPERAND DESCRIPTOR ENTRY 7     A0909\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\nIOERR    EQU   X'08'               OUTPUT I/O ERROR             FEB2008\nFGNOCON  EQU   X'02'               CONTROL - SKIP UPDTE TEST    GP06315\nSELECTAL EQU   X'01'               ALIAS ALLOWED                MAY2009\n         DS    C                   LINE-1\nLINE     DS    CL133\nRESULT   EQU   LINE+48                           (IFOX00)       GP06315\nLINEH1   DS    CL133\n*\nSYNADMSG DS    XL(SYNADLEN)                                     FEB2008\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL40                SPF STATISTICS OR SSI          C0909\n         ORG   MEMUSER                                            C0909\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFFLAGS DS    X                   FLAGS                          A0909\nSPFSCLM  EQU   X'80'               SCLM-MANAGED                   A0909\nSPFXSTAT EQU   X'20'               EXTENDED STATISTICS            A0909\nSPFSECS  DS    X                   TIME LAST UPDATED (SS)         A0909\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED (HHMM)\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL7                 USERID                         C0909\nSPFBLANK DS    CL3                 ONE OR THREE BLANKS            A0909\n         ORG   SPFBLANK+1                                         A0909\nSPFXCCNT DS    F                   CURRENT SIZE                   A0909\nSPFXICNT DS    F                   INITIAL SIZE                   A0909\nSPFXMOD  DS    F                   MODS                           A0909\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n*\nZEROAREA DS    0CL(8+8+7)          UNPACKED COUNTERS AREA         A0909\n#CRNT    DS    CL8                 CURRENT RECORD COUNT           A0909\n#CRNTSML EQU   #CRNT+3,5           CURRENT RECORD COUNT           A0909\n#INIT    DS    CL8                 INITIAL RECORD COUNT           A0909\n#INITSML EQU   #INIT+3,5           INITIAL RECORD COUNT           A0909\n#MOD     DS    CL7                 CHANGED RECORD COUNT           A0909\n#MODSML  EQU   #MOD+2,5            CHANGED RECORD COUNT           A0909\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         PRINT GEN\n         CVT   LIST=YES,DSECT=YES   NEED FOR SYSTEM LEVEL CHECK GP12006\n         DCBD  DEVD=DA,DSORG=PO   WANT FOR DCB VALUES           GP12006\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOA10": {"ttr": 18440, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n\\x00\\x00\\x17\\x01\\x12\\x01\\x0f\\x01\\x15)\\x8f\\x13E\\x08O\\x07\\xaa\\x01\\x01\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "10.00", "flags": 0, "createdate": "2012-01-10T00:00:00", "modifydate": "2015-10-25T13:45:17", "lines": 2127, "newlines": 1962, "modlines": 257, "user": "SBGOLOB"}, "text": "PDSLOAD  TITLE 'P D S L O A D  **  LOAD IEBUPDTE INPUT TO A PDS'\n* ---------- Updated by Gerhard Postpischil ---- Jan 2012 ---------- *\n* Note that Greg Price and Gerhard Postpischil have the same initials.\n* ----------------------------------------------------------------.SBG.\n* Added version level.  Since there are so many levels before     .SBG.\n* here, I am starting with Version 10.0.                          .SBG.\n* ----------------------------------------------------------------.SBG.\n* Optional DDNAME of SYSUPLOG to ensure data integrity of files   .SBG.\n* which should have the UPDTE(><) characters in column 1, and     .SBG.\n* which should not be changed to ./ .  See below for details.     .SBG.\n* //SYSUPLOG is \"an exception file\", created by LISTPDS or OFFLOAD.SBG.\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 17, 2008\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='CTL(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE USED TO LOOK\n*         FOR THE ADD AND ALIAS CARDS.   GERHARD POSTPISCHIL    GP06315\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM THAT CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESN'T CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n*        11NOV2006 - ADDED CTL PARM OPTION TO SUPPORT ADDITIONAL LEVEL\n*                    OF ./ SUBSTITUTION E.G., MEMBERS W/SMP UPDATES\n*                  - ALSO CHANGED PARM PARSING - ANY ORDER NOW ALLOWED\n* GERHARD POSTPISCHIL                                           GP06315\n*----------------------------------------------------------------------\n*        17FEB2008 - ADD SYNAD EXIT ETC. TO ACQUIRE AND DISPLAY\n*                    I/O ERROR MESSAGE WHEN WRITE TO PDS FAILS.\n*                    ABEND U0101 AFTER WRITE I/O ERROR.\n*        10MAY2009 - DO NOT MAKE ALIAS WHEN REAL MEMBER NOT MADE.\n*                  - NOW COMPLETE THE ALLOWED RECFM COMBO SET:\n*                    FIXED-LENGTH INPUT WITH VARIABLE-LENGTH\n*                    OUTPUT WITH TRAILING BLANKS TRUNCATION.\n*        29SEP2009 - ISPF STATISTICS ENHANCEMENTS:                 0909\n*                    - PROCESS SECONDS PART OF TIMESTAMP.\n*                    - SUPPORT ISPF EXTENDED STATISTICS.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*        05JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS.\n*                    ADD { X'C0' SUPPORT TO ALPHANUM TRANSLATE\n*                    TABLE.  IF YOU WANT TO GET RID OF THE MEMBER\n*                    NAME VALIDITY CHECK ENTIRELY, THEN UNCOMMENT\n*                    THE STATEMENT:\n*                    \"B    BYPVALID\"\n*                    AFTER THE LABEL \"SIMPLE\".\n* SAM GOLOB\n*----------------------------------------------------------------------\n*        06JAN2012 - MEMBER NAME VALIDITY CHECK PROBLEMS, PART DEUX:\n*                    SAM'S SOLUTION WORKS, BUT IS ONE I FIND\n*                    UNDESIRABLE (BABY - BATHWATER)\n*                    INSTEAD I ADDED A PARM OPTION NAME=\n*       (DEFAULT)    NAME=ASIS    BYPASS ALL CHECKS\n*                    NAME=CHECK   ALLOW ALL PRINTABLE CHARACTERS\n*                                 (EXCEPT COMMA) USING CODEPAGE 037\n*                    NAME=IBM     ENFORCE STRICT IBM JCL STANDARDS\n*                  - FIXED LRECL FOR UNLIKE RECFM COPY\n*                  - ADDED NON-SDB BLOCK SIZE CODE BACK IN FOR MVS 3.8\n* GERHARD POSTPISCHIL                                           GP12006\n*----------------------------------------------------------------------\n*        17OCT2015 - READ SYSUPLOG IF PRESENT, WHICH CONTAINS A LIST\n*                    OF EXCEPTIONS TO THE UPDTE(XX) SUBSTITUTION.\n*                    SYSUPLOG DATA IS GENERATED BY AN EXPERIMENTAL\n*                    VERSION OF LISTPDS/LISPDS, ONE OF THE PROGRAMS\n*                    THAT GENERATE THE IEBUPDTE-UNLOADED-PDS FILE\n*                    USED AS INPUT TO THIS PROGRAM.\n*                    SOMETIMES A LINE IN THE INPUT FILE BEGINS WITH\n*                    THE 2 CHARACTERS IN UPDTE(XX) NOT BECAUSE THEY\n*                    WERE ORIGINALLY ./ BUT BECAUSE THAT'S WHAT THEY\n*                    ALWAYS WERE, AND SHOULD REMAIN.\n*                    THE SYSUPLOG FILE IDENTIFIES WHICH LINES IN WHICH\n*                    MEMBERS SHOULD NOT BE CHANGED TO ./ IN THE FIRST\n*                    2 COLUMNS, EVEN THOUGH THEY HAVE THE UPDTE(XX)\n*                    CHARACTERS. THE RECORDS IN SYSUPLOG HAVE THE\n*                    MEMBER NAME IN THE FIRST 8 COLUMNS AND A 7-DIGIT\n*                    LINE NUMBER IN COLUMNS 10 THROUGH 16.\n*                    THE LINE NUMBER INDICATES A COUNTED LINE,\n*                    NOT A SEQUENCE NUMBER IN AN INPUT LINE.\n*                    THE MEMBER NAMES IN THE INPUT FILE AND IN THE\n*                    SYSUPLOG FILE MUST BE IN ASCENDING ORDER.\n*                    ENDLESS LOOP AFTER PARMNCTL WAS FIXED, WHICH\n*                    OCCURRED WHEN UPDTE(XX) IS MISSPELLED IN PARM.\n* EX-PRC GUY\n*----------------------------------------------------------------------\n*        17OCT2015 - ADD PARM=CK3 AS REQUESTED BY SAM GOLOB FOR\n*                    EXPERIMENTING WITH REDUCING UNDESIRED CHANGES\n*                    OF UPDTE(XX) TO ./ BY ONLY CHANGING XX TO ./\n*                    IF COLUMN 3 IS BLANK.\n*                    CK3 MIGHT INTRODUCE ANOTHER PERHAPS LESSER PROBLEM\n*                    OF NOT PROPERLY RESTORING ./LABEL STATEMENTS.\n*                    UNDESIRED CHANGES OF XX TO ./ CAN STILL OCCUR\n*                    IF COLUMN 3 IS BLANK.\n*                    CK3 CAN REDUCE THE RELIABILITY OF SYSUPLOG IF\n*                    SYSUPLOG IS USED AT THE SAME TIME, SO ANY\n*                    USEFULNESS OF CK3 WOULD ONLY BE SEEN WHEN\n*                    SYSUPLOG IS NOT USED.\n* EX-PRC GUY\n*----------------------------------------------------------------------\n*        23OCT2015 - Added reporting for the number of SYSUPLOG   .SBG.\n*                    records read for each member which has them. .SBG.\n* SAM GOLOB                                                       .SBG.\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER IS\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n* ------------------------------------------------------------------ *\n         MACRO ,\n&NM      TRENT &TAB,&VAL,&OFF,&FILL=                    ADDED ON 86311\n.*\n.*   This macro is used to create translate and translate and test\n.*     tables in compact fashion.\n.*\n.*   The table may be built by (separate) DC statements, or by\n.*     a TRENT entry with a FILL= operand and a name field.     GP12005\n.*\n.*   Any name field is attached to first expanded DC, if any\n.*     First positional is name of table to be modified; may be\n.*       null after first occurrence and after a FILL\n.*     Second positional is value to be placed in table; may be\n.*       null after first occurrence. May be expression.\n.*     Subsequent values are offsets in self-defining form, i.e.,\n.*       X'nn', C'x', integer, equate value, or absolute expression.\n.*     A sublist may be used, offset in first value, repeat count\n.*       in second.\n.*     When the last parm is null, no final ' ORG ' is created.\n.*       (requested by trailing comma)\n.*     When no parameters are supplied, a final ' ORG ' is expanded.\n.*\n.*       ex.:  upper case translate:\n.*       UPTAB DC    256AL1(*-UPTAB)     or\n.*       UPTAB TRENT FILL=(*-UPTAB)\n.*             TRENT UPTAB,*-UPTAB+X'40',(X'81',9),(X'91',9),(X'A2,8)\n.*\n         GBLC  &ZZ@TAB,&ZZ@VAL\n         LCLC  &N\n         LCLA  &I,&J\n&J       SETA  N'&SYSLIST\n&N       SETC  '&NM'\n         AIF   (T'&FILL EQ 'O').DATA                            GP12005\n         AIF   ('&N' NE '').BUILD                               GP12005\n         MNOTE 8,'TRENT WITH FILL= REQUIRES A LABEL'            GP12005\n         MEXIT ,                                                GP12005\n.*   BUILD TRANSLATE OR TRT TABLE                               GP12005\n.*                                                              GP12005\n.BUILD   ANOP  ,                                                GP12005\n&N       DC    256AL1(&FILL)                                    GP12005\n&ZZ@TAB  SETC  '&N'                                             GP12005\n&N       SETC  ''                                               GP12005\n         AIF   (&J EQ 0).MEND                                   GP12005\n.*   EXPAND TABLE MODIFICATIONS\n.*\n.DATA    AIF   (&J EQ 0).ORG\n         AIF   ('&TAB' EQ '').NOTAB\n&ZZ@TAB  SETC  '&TAB'\n.NOTAB   AIF   ('&VAL' EQ '').NOVAL\n&ZZ@VAL  SETC  '&VAL'\n.NOVAL   AIF   (&J LT 3).MEND\n&I       SETA  2\n.LOOP    AIF   (&I GE &J).DONE\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)' EQ '').LOOP\n         AIF   (N'&SYSLIST(&I) EQ 2).PAIR\n         ORG   &ZZ@TAB+&SYSLIST(&I)\n&N       DC    AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.PAIR    ORG   &ZZ@TAB+&SYSLIST(&I,1)\n&N       DC    (&SYSLIST(&I,2))AL1(&ZZ@VAL)\n&N       SETC  ''\n         AGO   .LOOP\n.DONE    AIF   ('&SYSLIST(&J)' EQ '').MEND\n.ORG     ORG   ,\n.MEND    MEND  ,\n* ------------------------------------------------------------------ *\n         GBLC  &VER                                               .SBG.\n&VER     SETC  'V10.0'                                            .SBG.\n* ------------------------------------------------------------------ *\n         SPACE\nPDSLOAD  START\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATE '   MVS 3.8        GP06315\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:F,V->V (TRUNC)'\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         MVC   SYNADMSG,SYNADWTO   PRIME I/O ERROR MESSAGE      FEB2008\n         SPACE 1\n*   VALIDITY CHECKING FOR MEMBER NAMES IS SUPPRESSED BY DEFAULT GP12006\n*   TO CHANGE THE DEFAULT, ACTIVATE THE DESIRED LA INSTRUCTION: GP12006\n*        LA    R0,CHARIBM          STRICT IBM NAME CHECK        GP12006\n*        LA    R0,CHAR037          ANY PRINTABLE EXCEPT COMMA   GP12006\n*        LA    R0,0                NO CHECKING                  GP12006\n*        ST    R0,@TRTTAB                                       GP12006\n*        MVI   CHARIBM+C'-',0      ALLOW OS/360 HYPHEN IN NAME  GP12006\n         SPACE 1\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPAGATOR\n         MVI   LINE-1,C' '         BLANK PROPAGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'        CONVERSION CODE (./)\n         MVC   CTLMODEL(2),UPDTE   CONTROL CARD CODE (./)       GP06315\n         MVC   CTLMODEL+2(10),=C' ADD NAME='                    GP06315\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BNP   PARMDONE                                         GP06315\nPARMLOOP CLI   2(R1),C','                                       GP06315\n         BNE   PARMNCOM                                         GP06315\n         LA    R3,1                SKIP COMMA                   GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCOM CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMBAD             NO, BYPASS COMPARE\n         CLC   =C'NEW',2(R1)       IS IT NEW, AS PER IEBUPDTE?  GP06315\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nTRYSPF   CLC   =C'SPF',2(R1)       IS IT SPF                    GP06315\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nPARMSX   CLC   =C'CK3',2(R1)       IS IT CK3                    OCT2015\n         BNE   PARMCX                                           OCT2015\n         OI    FLAG1,CK3           YES, CHECK FOR BLANK IN 3    OCT2015\n         LA    R3,3                SET SKIP LENGTH              OCT2015\n         B     PARMBUMP            AND SKIP                     OCT2015\nPARMCX   CLC   =C'S(',2(R1)        IS IT S( ?                   GP06315\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,L'MEMSEL        SET MAX LOOP COUNT           GP06315\nPARMML   CLI   2(R1),C')'                                       GP06315\n         BE    PARMME\n         MVC   0(1,R15),2(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)           BUMP SKIP SIZE               GP06315\n         BCT   R0,PARMMIG          OK IF MORE                   GP06315\n         B     PARMBAD             ALL DONE, BUT MISSING ')'    GP06315\nPARMMIG  BCT   R14,PARMML          LOOP FOR MEMBER NAME         GP06315\n         CLI   2(R1),C')'          PROPER TERMINATION ?         GP06315\n         BL    PARMBAD             NO, FAIL                     GP06315\nPARMME   LA    R3,1                POINT PAST PAREN             GP06315\n         B     PARMBUMP            SKIP TO NEXT OPERAND         GP06315\nPARMMX   CH    R0,=H'5'            IS PARM LONG ENOUGH ?        GP12006\n         BL    PARMBAD               NO                         GP12006\n         CLC   =C'NAME=',2(R1)     IS IT NAME CHECK ?           GP12006\n         BNE   PARMNN                NO                         GP12006\n         LA    R3,5                SKIP KEYWORD                 GP12006\n         XC    @TRTTAB,@TRTTAB     RESET PRIOR, JUST IN CASE    GP12006\n         CH    R0,=H'5'            END OF PARM ?                GP12006\n         BNH   PARMBUMP              YES; DONE                  GP12006\n         CLI   5+2(R1),C','        NULL VALUE ?                 GP12006\n         BE    PARMBUMP              YES                        GP12006\n         LA    R3,8                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHARIBM         POINT TO IBM TEST TABLE      GP12006\n         CLC   =C'IBM',2+5(R1)     IS IT IBM?                   GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         CLC   =C'JCL',2+5(R1)     IS IT ALTERNATE?             GP12006\n         BE    PARMHTAB              YES; STASH VALUE           GP12006\n         LA    R3,9                SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,0               RESET TEST TABLE ADDRESS     GP12006\n         CLC   =C'ASIS',2+5(R1)    SKIP TESTING ?               GP12006\n         BE    PARMHTAB              YES                        GP12006\n         LA    R3,10               SKIP KEYWORD AND VALUE       GP12006\n         CR    R0,R3               LONG ENOUGH FOR VALUE?       GP12006\n         BL    PARMBAD               NO; ERROR                  GP12006\n         LA    R14,CHAR037         SET FOR CODEPAGE 037 EXC ,   GP12006\n         CLC   =C'CHECK',2+5(R1)   TEST 037 PRINTABLES?         GP12006\n         BNE   PARMBAD               NO; BAD PARAMETER          GP12006\nPARMHTAB ST    R14,@TRTTAB         SAVE TRANSLATE TABLE ADDRESS GP12006\n         B     PARMBUMP              AND SKIP TO NEXT FIELD     GP12006\nPARMNN   CH    R0,=H'7'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'CTL(',2(R1)      IS IT CTL(XX)                GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   8(R1),C')'          CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   CTLMODEL(2),6(R1)   YES, SAVE NEW CONTROLS       GP06315\n         LA    R3,7                  SKIP SEVEN                 GP12006\n         B     PARMBUMP                                         GP06315\nPARMNCTL CH    R0,=H'9'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'UPDTE(',2(R1)    IS IT UPDTE(XX)              GP06315\n*        BNE   PARMNCTL                   (WAS ENDLESS LOOP)    *.VTO.\n         BNE   PARMBAD                    (FIX ENDLESS LOOP)     .VTO.\n         CLI   10(R1),C')'         CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   UPDTE,8(R1)         YES, SAVE NEW CONVERSION     GP06315\n         LA    R3,9                                             GP06315\nPARMBUMP AR    R1,R3               NEXT PARM                    GP06315\n         SR    R0,R3               RESIDUAL LENGTH              GP06315\n         BP    PARMLOOP                                         GP06315\n         B     PARMDONE                                         GP06315\nPARMBAD  WTO   'PDSLOAD: INVALID PARM FIELD'                    GP06315\n         ABEND 100\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\nPARMDONE MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         MVC   VTODCBW(VTODCBL),VTODCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         LR    R5,R4               FOR ERROR MESSAGE, IF ANY    GP12006\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXLE  R15,R15,HAVEUT1                                  GP12006\n         MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS1),MSGMISS1                      GP12006\n         MVC   LINE+1(8),DCBDDNAM-IHADCB(R4)                    GP12006\n         BAL   R14,REPORT          DISPLAY WARNING              GP12006\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         DEVTYPE DCBDDNAM-IHADCB(R4),DOUBLE                     GP12006\n         BXH   R15,R15,MISSUT2     SHOW FILE MISSING            GP12006\nHAVEUT1  LA    R5,PDSDCBW          RESTORE OUTPUT DCB ADDRESS   GP12006\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LR    R5,R4               FOR ERROR MESSAGE            GP12006\n         B     MISSUT2                                          GP12006\n         SPACE 1\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\n         SPACE 1\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         LA    R0,80               MINIMM DATA LENGTH           GP12006\n         AH    R0,DWLIN            ADJUST FOR RECFM=V           GP12006\n         CH    R0,LRECL(,R4)       INPUT LRECL<80?              GP12006\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         DEVTYPE DCBDDNAM-IHADCB(R5),DOUBLE   EXIT NEEDS TYPE   GP12006\n         BXH   R15,R15,MISSUT2                                  GP12006\n         CLI   DOUBLE+2,X'20'      UCB3DACC                     GP12006\n         BNE   MISSUT2               NO; CAN'T BE PDS           GP12006\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),DCBOFOPN                               GP12006\n         BO    OKUT2\nMISSUT2  MVC   LINE,LINE-1                                      GP12006\n         MVC   LINE+1(L'MSGMISS2),MSGMISS2                      GP12006\n         MVC   LINE+1+STRMIDD2-STRMISS2(8),DCBDDNAM-IHADCB(R5)  GP12006\n         BAL   R14,REPORT          DISPLAY THE ERROR MESSAGE    GP12006\n         LA    R15,16\n         B     EXIT\n         SPACE 1\n*   SYSUT2 DCB EXIT - IF NOT SPECIFIED, USE DCB PARAMETERS FROM GP12006\n*   SYSUT1/SYSIN. CODE ADDED TO ADJUST LRECL BY FOUR IF F->V OR GP12006\n*   V->F REQUESTED.                                             GP12006\n*                                                               GP12006\n         PUSH  USING                                            GP12006\n         USING UT2EXO,R15         JUST IN CASE                  GP12006\n         USING IHADCB,R1           MAKE (MY) LIFE EASIER        GP12006\nUT2EXO   LH    R2,LRECL(,R4)       COPY INPUT LENGTH (DEFAULT)  GP12006\n         TM    DCBRECFM,X'C0'      NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    DCBLRECL,DCBLRECL   RECFM=U SO FORCE LRECL=0     GP12006\n         BR    R14                 RETURN\nUT2EX2   MVC   DCBRECFM,RECFM(R4)  YES, COPY INPUT RECFM        GP12006\nUT2EX3   TM    DCBRECFM,X'80'      FIXED ?                      GP12006\n         BNZ   UT2EX3B               YES; ELSE                  GP12006\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS     GP12006\nUT2EX3B  CLC   =H'0',DCBLRECL      IS LRECL SPECIFIED?          GP12006\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n*   WHEN INPUT AND OUTPUT ARE BOTH F OR BOTH V, NO ADJUSTMENT   GP12006\n*   IS NECESSARY. FOR F->V, ADD 4, FOR V->F, SUBTRACT 4         GP12006\n         TM    RECFM(R4),X'80'     FROM F ?                     GP12006\n         BNZ   UT2FROF               YES                        GP12006\n         TM    DCBRECFM,X'80'      TO F ?                       GP12006\n         BZ    UT2BLK                NO; JUST CHECK BLOCK       GP12006\n         SH    R2,=H'4'            ADJUST FOR V->F              GP12006\n         B     UT2BLK                CHECK BLOCK                GP12006\nUT2FROF  TM    DCBRECFM,X'80'      OUTPUT ALSO F ?              GP12006\n         BNZ   UT2BLK                YES; NO ADJUSTMENT         GP12006\n         LA    R2,4(,R2)           ALLOW FOR OUTPUT RDW         GP12006\nUT2BLK   STH   R2,DCBLRECL         SET NEW LRECL                GP12006\nUT2EX4   SR    R7,R7               PREP FOR DIVIDE              GP12006\n         ICM   R7,3,DCBBLKSI       GET BLOCK SIZE               GP12006\n         BNZR  R14                   HOPE FOR THE BEST          GP12006\n         LH    R2,DCBLRECL         GET RECORD LENGTH BACK       GP12006\n         L     R3,CVTPTR           GET CVT                      GP12006\n         TM    CVTDCB-CVTMAP(R3),X'80'   XA OR LATER ?          GP12006\n         BNZR  R14                   YES; ASSUME SDB AVAILABLE  GP12006\n         IC    R3,DOUBLE+3         GET DEVICE TYPE              GP12006\n         LA    R0,X'0F'            MAKE DASD TYPE MASK          GP12006\n         NR    R3,R0               ISOLATE SUBTYPE              GP12006\n         SLL   R3,1                MAKE HALFWORD OFFSET         GP12006\n         LH    R7,MVSBLK(R3)       GET (SUB)OPTIMAL SIZE        GP12006\n         TM    DCBRECFM,X'80'      FIXED?                       GP12006\n         BZ    UT2BLKV             NO; HANDLE VARIABLE BLOCK    GP12006\n         SR    R6,R6                                            GP12006\n         DR    R6,R2               NUMBER OF RECORDS IN BLOCK   GP12006\n         LTR   R7,R7               ANY ?                        GP12006\n         BP    *+8                   YES                        GP12006\n         LA    R7,1                DEFAULT TO ONE               GP12006\n         MR    R6,R2               NEW BLOCK SIZE               GP12006\n         B     UT2BLKST              YES; USE IT                GP12006\nUT2BLKV  LA    R2,4(,R2)           MINIMUM BLOCK SIZE           GP12006\n         CR    R7,R2               ADEQUATE BLOCK SIZE ?        GP12006\n         BNL   UT2BLKST              YES; USE IT                GP12006\n         LR    R7,R2               USE LRECL+4 FOR BLOCK        GP12006\nUT2BLKST STH   R7,DCBBLKSI         SHOULD WORK ?                GP12006\n         BR    R14                 CONTINUE                     GP12006\n         POP   USING                                            GP12006\n*          0-7   ???? 2311 2301 2303 2321 9345  2305 2305       GP12006\nMVSBLK   DC    H'4096,3625,4096,2446,4906,22928,3210,3516'      GP12006\n*          8-F   2314 3330  3340 3350  3375  333D  3380  3390   GP12006\n         DC    H'7294,13030,8368,19069,17600,13030,23476,27998' GP12006\n         SPACE 1\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  SOME OF US ARE STUCK WITH MVS 3.8, SO NON-SDB CODE ADDED     GP12006\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         SPACE\n         LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         SPACE\n         SR    R15,R15                                            .VTO.\n         ST    R15,VTOSTAT                                        .VTO.\n         ST    R15,VTOEOF                                         .VTO.\n         LA    R3,VTODCBW                                         .VTO.\n         DEVTYPE DCBDDNAM-IHADCB(R3),DOUBLE                       .VTO.\n         LTR   R15,R15                                            .VTO.\n         BNZ   VTOSET                                             .VTO.\n         LA    R6,OPEN                                            .VTO.\n         MVI   0(R6),X'80'                                        .VTO.\n         OPEN  ((R3),INPUT),MF=(E,(R6))                           .VTO.\n         ST    R3,VTOSTAT                                         .VTO.\nVTOSET   EQU   *                                                  .VTO.\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     NI    FLAG1,255-FGNOCON   CHECK FOR UPDTE TRANSLATE    GP06315\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   CTLMODEL(2),0(R15)  CONTROL STATEMENT?           GP06315\n         BNE   COPY                NO\n         SR    R0,R0               YES,                           .VTO.\n         ST    R0,COUNTIN           RESET COUNTER                 .VTO.\n         OI    FLAG1,FGNOCON       NO UPDTE TRANSLATE           GP06315\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,80-1            GET LENGTH CODE IF FIXED LEN   C0909\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,80-1             LENGTH CODE OF CONTROL STMT    C0909\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               ENSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         TM    FLAG1,FGNOCON       NO UPDTE TRANSLATE ?         GP06315\n         BNZ   NOTUPDTE            CORRECT; SKIP AROUND         GP06315\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         TM    FLAG1,CK3           WAS CK3 SPECIFIED?           OCT2015\n         BZ    NOTCK3              NO                           OCT2015\n         CLI   2(R14),C' '         YES, IS COLUMN 3 BLANK?      OCT2015\n         BNE   NOTUPDTE            NO, DON'T CHANGE IT          OCT2015\nNOTCK3   EQU   *                                                OCT2015\n         BAL   R1,VTOTEST          YES, CHECK FOR EXCEPTION       .VTO.\n         LTR   R15,R15             IS IT IN EXCEPTION LIST        .VTO.\n         BZ    NOTEXCEP            NOT IN EXCEPTION LIST. GO ON.  .SBG.\n         ST    R0,SAVER0           COUNT EXCEPTION RECORDS        .SBG.\n         LA    R0,1                INCREMENT                      .SBG.\n         A     R0,UPS                SYSUPLOG                     .SBG.\n         ST    R0,UPS                  RECORD COUNT               .SBG.\n         L     R0,SAVER0           RESTORE WORK REGISTER          .SBG.\n         B     NOTUPDTE            EXCEPTIONS ARE NOT UPDATED.    .SBG.\nNOTEXCEP DS    0H                  CARD IS NOT ON EXCEPTION LIST  .SBG.\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nVTOTEST  L     R15,VTOSTAT         IS THERE A SYSUPLOG DD?        .VTO.\n         LTR   R15,R15             IF NOT                         .VTO.\n         BZR   R1                  THEN RETURN NOT-IN-LIST        .VTO.\n         STM   R14,R3,VTOSAVE      SAVE REGS                      .VTO.\n         L     R2,VTOPREV          POINT TO LAST SPARE RECORD     .VTO.\n         LTR   R2,R2               IF THIS IS FIRST TIME          .VTO.\n         BZ    VTOGET              GO READ FIRST SPARE RECORD     .VTO.\nVTONEXT  CLC   0(8,R2),MEMBER      DOES NAME MATCH MEMBER?        .VTO.\n         BE    VTONUM              YES, CHECK THE NUMBER          .VTO.\n         BL    VTOGET              NO, NEED TO READ MORE SPARE    .VTO.\n         B     VTONOT              NO, SPARE MEMBER IS BEYOND     .VTO.\nVTONUM   PACK  DOUBLE,9(7,R2)      GET RECORD NUMBER              .VTO.\n         CVB   R0,DOUBLE           TO BINARY                      .VTO.\n         C     R0,COUNTIN          IF IT MATCHES CURRENT RECORD   .VTO.\n         BE    VTOMATCH            RETURN MATCH FOUND             .VTO.\n         BH    VTONOT              IF IT'S TOO HIGH, NO MATCH     .VTO.\nVTOGET   CLI   VTOEOF+3,0          IF ALL OF SPARE HAS BEEN READ  .VTO.\n         BNE   VTONOT              THEN RETURN NOT-IN-LIST        .VTO.\n         L     R3,VTOSTAT          POINT TO VTODCBW               .VTO.\n         GET   (R3)                                               .VTO.\nVTOGOT   CLI   VTOEOF+3,0          IF GET REACHED EOF             .VTO.\n         BNE   VTONOT              THEN RETURN NOT-IN-LIST        .VTO.\n         LR    R2,R1               POINT R2 TO RECORD             .VTO.\n         ST    R2,VTOPREV          SAVE ADDRESS OF RECORD         .VTO.\n         B     VTONEXT                                            .VTO.\nVTOMATCH LM    R14,R3,VTOSAVE                                     .VTO.\n         LA    R15,1               THERE IS A MATCH               .VTO.\n         BR    R1                                                 .VTO.\nVTONOT   LM    R14,R3,VTOSAVE                                     .VTO.\n         SR    R15,R15             THERE IS NO MATCH              .VTO.\n         BR    R1                                                 .VTO.\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         MVC   LINE+1+13(2),CTLMODEL   BUT USE REAL CTL PAIR    GP06315\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n*\n*         ALLOW OUTPUT RECFM TO BE INDEPENDENT OF INPUT RECFM   MAY2009\n*\n*         1. GET INPUT DATA ADDRESS AND LENGTH                  MAY2009\n*\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    *+8                 YES, NO RDW PRESENT\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         AH    R14,DWLIN           POINT TO INPUT RECORD DATA\n         SH    R15,DWLIN           GET INPUT RECORD DATA LENGTH\n*\n*         2. BRANCH TO LOGIC PATH BASED ON OUTPUT RECFM         MAY2009\n*\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVAR              NO\n*\n*         3. BLOCK ANOTHER FIXED-LENGTH RECORD IF IT FITS       MAY2009\n*\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         B     PUTPAD              GO LOAD THE RECORD'S DATA\n*\n*         4. BLOCK VARIABLE-LENGTH RECORD IF IT FITS            MAY2009\n*\nPUTVAR   LA    R1,4(,R15)          GET IDEAL OUTPUT RECORD LENGTH\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BNE   TRAILOK             NO, SKIP TRAILING BLANKS DISCARD\n         LA    R1,0(R15,R14)       POINT PAST INPUT RECORD DATA\nTRAILOOP BCTR  R1,0                BACK UP A BYTE\n         CR    R1,R14              BACK TO START OF RECORD?\n         BNH   TRAILMIN            YES, USE MINIMUM LENGTH\n         CLI   0(R1),C' '          TRAILING BLANK?\n         BE    TRAILOOP            YES, KEEP BACKING UP\n         LA    R1,1+4(,R1)         NO, POINT PAST LAST NON-BLANK + RDW\n         SR    R1,R14              GET NEW IDEAL OUTPUT RECORD LENGTH\n         B     TRAILOK             DESIRED LENGTH NOW KNOWN\nTRAILMIN LA    R1,5                MINIMUM IS RDW + 1 DATA BYTE\nTRAILOK  CH    R1,LRECL(,R5)       LENGTH LONGER THAN OUTPUT LRECL?\n         BNH   *+8                 NO, USE THIS LENGTH\n         LH    R1,LRECL(,R5)       YES, REDUCE LENGTH TO OUTPUT LRECL\n         LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         SR    R7,R6               GET NEW SIZE OF THIS BLOCK\n         STH   R7,0(,R6)           SET INTO BDW\n         LR    R7,R0               POINT TO RECORD TO LOAD\n         STCM  R1,3,0(R7)          SET RECORD LENGTH INTO RDW\n         STCM  R1,12,2(R7)         CLEAR REST OF RDW\n         AH    R0,DWLOT            POINT PAST RDW\n         SH    R1,DWLOT            GET DATA LENGTH AFTER RDW\n*\n*         5. LOAD THE DATA INTO THE NEW RECORD                  MAY2009\n*\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET                    .SBG.\n         ST    R1,UPS                     RESET                   .SBG.\n         NI    FLAG1,255-SELECT            RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(80),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   CTLMODEL,0(R1)      ./ ADD NAME OR XX ADD        GP06315\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA                 A0909\n         MVI   ZEROAREA,C'0'       GET SOME UNPACKED ZEROS        A0909\n         MVC   ZEROAREA+1(L'ZEROAREA-1),ZEROAREA                  A0909\n         MVC   SPFUSER,=CL8' '     PAD WITH BLANKS                M0909\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        CHECK (OR NOT) NAME VALIDITY GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         NI    FLAG1,255-SELECTAL  NEW REAL MEMBER              MAY2009\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID         GP12006\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'6'           ID LENGTH CODE MAY BE 0 TO 6   C0909\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         MVC   #CRNTSML,XPFCCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XPFICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XPFMOD      CHANGED SIZE                   C0909\n         EX    R15,XPFUIDLD        LOAD USERID                    C0909\n         B     ISSPF               GO PROCESS FURTHER             C0909\nXPFUIDLD MVC   SPFUSER(0),XPFUSER  <<< EXECUTED >>>               M0909\n         DROP  R6                  (XPF)                      SBG 02/00\n         USING XP2,R6                                         SBG 02/00\nXP2UIDLD MVC   SPFUSER(0),XP2USER  <<< EXECUTED >>>               M0909\nTESTNUMN DS    0H                                             SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   #CRNTSML,XP2CCNT    CURRENT SIZE                   C0909\n         MVC   #INITSML,XP2ICNT    INITIAL SIZE                   C0909\n         MVC   #MODSML,XP2MOD      CHANGED SIZE                   C0909\n         EX    R15,XP2UIDLD        LOAD USERID                    C0909\nISSPF    OI    STATUS,SPF          SET FLAG FOR STOW              C0909\n         DROP  R6                  (XP2)                      SBG 02/00\n*\n*              LOOK FOR EXTENSIONS - SECONDS IS A PRE-REQ         A0909\n*\n         TM    ODE5+6,X'80'        SECONDS PRESENT?               A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,2                                               A0909\n         CH    R0,ODE5+4           LENGTH EXACTLY TWO?            A0909\n         BNE   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         L     R15,ODE5            YES, POINT TO DATA             A0909\n         TRT   0(2,R15),NUMERIC    DECIMAL DIGITS?                A0909\n         BNZ   XSPFOK              NO, CANNOT BE SECONDS          A0909\n         CLI   0(R15),C'5'         YES, BUT IS IT LESS THAN 60?   A0909\n         BH    XSPFOK              NO, CANNOT BE SECONDS          A0909\n         ICM   R0,1,1(R15)         GET SECOND DIGIT               A0909\n         SLL   R0,4                SHIFT OUT ZONE                 A0909\n         ICM   R0,2,0(R15)         GET FIRST DIGIT                A0909\n         SRL   R0,4                GET NUMERICS IN ONE BYTE       A0909\n         STC   R0,SPFSECS          SAVE THE SECONDS VALUE         A0909\n         TM    ODE6+6,X'80'        ANYTHING ELSE PRESENT?         A0909\n         BNO   XSPFOK              NO, NO EXTENDED ISPF STATS     A0909\n         LA    R0,8                                               A0909\n         CH    R0,ODE6+4           AT LEAST EIGHT NON-BLANKS?     A0909\n         BH    XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         L     R15,ODE6            YES, POINT TO DATA             A0909\n         TRT   0(8,R15),NUMERIC    EIGHT DECIMAL DIGITS?          A0909\n         BNZ   XSPFOK              NO, CANNOT BE EXTENSIONS       A0909\n         MVC   #CRNT(3),0(R15)     FIRST 3 TO CURRENT             A0909\n         MVC   #INIT(3),3(R15)     NEXT 3 TO INITIAL              A0909\n         MVC   #MOD(2),6(R15)      LAST 2 TO MODIFIED             A0909\n*\n*              NOTE THAT EXTENDED ISPF STATS CAN BE STOWED        A0909\n*              EVEN IF THE COUNTER HIGH-ORDER EXTENSION           A0909\n*              FIELD IS NOT PRESENT IN THE INPUT RECORD.          A0909\n*\n*              IF AN ORIGINAL 5-DIGIT COUNTER HAS A VALUE         A0909\n*              OVER 65535 THEN EXTENDED ISPF STATS WILL           A0909\n*              BE STOWED.                                         A0909\n*\n*              THE CURRENT RECORD COUNTER IS EFFECTIVELY          A0909\n*              IGNORED BY PDSLOAD BECAUSE THIS FIELD IS SET       A0909\n*              FROM THE NUMBER OF RECORDS WRITTEN TO THE          A0909\n*              MEMBER BY PDSLOAD.  BUT HAVING THE CURRENT         A0909\n*              RECORD COUNT IN THE SEQUENTIAL FILE IS GOOD        A0909\n*              FOR AUDIT TRAIL AND HUMAN CONVENIENCE PURPOSES.    A0909\n*\nXSPFOK   PACK  DOUBLE,#CRNT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         STH   R0,SPFCCNT          FIX CURRENT AT STOW TIME       A0909\n         PACK  DOUBLE,#INIT                                       A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXICNT         SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFICNT          SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXICNT       COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    GETMOD              NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nGETMOD   PACK  DOUBLE,#MOD                                        A0909\n         CVB   R0,DOUBLE                                          A0909\n         ST    R0,SPFXMOD          SAVE FULLWORD COUNT            A0909\n         STH   R0,SPFMOD           SAVE HALFWORD COUNT            A0909\n         ICM   R0,3,SPFXMOD        COUNT TOO BIG FOR HALFWORD?    A0909\n         BZ    NOSPF               NO                             A0909\n         OI    SPFFLAGS,SPFXSTAT   YES, NEED EXTENDED STATS       A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTER HIGH      A0909\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         MVC   LINE,LINE-1         CLEAR OLD STUFF              GP12006\n         MVC   RESULT(38),=CL38'NOT STOWED *** INVALID MEMBER NAME ***'\n         OI    RC+1,8              NASTY ERROR                  GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE            GP12006\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         SPACE 1\n*---------------------------------------------------------------------*\n*   TEST MEMBER NAME VALIDITY, OR (DEFAULT) BYPASS CHECKS             *\n*---------------------------------------------------------------------*\nNAMETEST ICM   R15,15,@TRTTAB      MEMBER CHECKING ENABLED?     GP12006\n         BZR   R14                   NO; JUST RETURN            GP12006\n         TRT   MEMBER,0(R15)       IS MEMBER NAME VALID?        GP12006\n         BNZ   ILLMEM              NO, BRANCH                   GP12006\n         CLI   MEMBER,C' '         IS FIRST CHAR BLANK?         GP12006\n         BE    ILLMEM                YES; FAIL                  GP12006\n         LA    R15,CHARIBM         SET FOR STRICT TEST          GP12006\n         C     R15,@TRTTAB         IS STRICT TEST DESIRED ?     GP12006\n         BNER  R14                   NO; NAME PASSED            GP12006\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?       GP12006\n         BNL   ILLMEM                YES; FAIL                  GP12006\n*  N.B. EARLY VERSIONS OF THE READER/INTERPRETER ALLOWED HYPHEN/MINUS\n*       IN THE JCL. THE CHARIBM TABLE DOES NOT ALLOW FOR THAT.  GP12006\n*OS/360  CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?        GP12006\n*OS/360  BE    ILLMEM                                           GP12006\n         BR    R14                 MEMBER ADHERES TO IBM JCL    GP12006\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         TM    FLAG1,SELECTAL      REAL MEMBER CREATED?         MAY2009\n         BZ    READ                NO, CANNOT MAKE ALIAS OF IT  MAY2009\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         BAL   R14,NAMETEST        IS MEMBER NAME VALID?        GP12006\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWIT              GO CREATE ALIAS              MAY2009\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         TM    FLAG1,IOERR         I/O ERROR?                   FEB2008\n         BO    IOERROR             YES                          FEB2008\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWFIXD            YES                            C0909\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\nSTOWFIXD ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWXCHK            YES, HALFWORD COUNTER CORRECT  A0909\n         MVC   SPFCCNT,=X'FFFF'    NO, SET TO HIGH VALUES         A0909\nSTOWXCHK TM    SPFFLAGS,SPFXSTAT   USING EXTENDED STATS?          A0909\n         BO    STOWXSET            YES                            A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, CLASSIC STATS WILL DO     A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\nSTOWXSET MVC   SPFXCCNT,SEQ        SET CURRENT RECORD COUNT       A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER,MEMUSER     CLEAR USERDATA\n         MVI   SPFVM,1             1.0\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         STCM  R0,12,SPFHHMM       TIME OF LAST CHANGE (HHMM)     C0909\n         STCM  R0,2,SPFSECS        TIME OF LAST CHANGE (SS)       A0909\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=C'PDSLOAD'\n         MVC   SPFBLANK,=CL8' '    INITIALIZE BLANKS              A0909\n         ICM   R0,3,SEQ            RECORD COUNT FITS IN HALFWORD? A0909\n         BZ    STOWNSSI            YES, SET CLASSIC STATS         A0909\n         OI    SPFFLAGS,SPFXSTAT   NO, NEED EXTENDED STATS        A0909\n         MVC   SPFICNT,=X'FFFF'    SET HALFWORD COUNTERS HIGH     A0909\n         MVC   SPFCCNT,=X'FFFF'                                   A0909\n         ST    R1,SPFXICNT         ALSO SET FULLWORD COUNTERS     A0909\n         ST    R1,SPFXCCNT                                        A0909\n         MVI   MEMC,20             SET LONGER USER DATA           A0909\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\nSTOWIT   DS    0H                                               MAY2009\n         STOW  (R5),(R6),R\n         SPACE\n         CL    R15,=F'24'          UNEXPECTED RETURN CODE?      GP06315\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,8              WARNING IS TOO MILD ?        GP12006\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         OI    FLAG1,SELECTAL      ALIAS NOW ALLOWED            MAY2009\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    EXCEPCNT\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(12,R1),=X'402020206B2020206B202120'              C0909\n         ED    1(12,R1),DOUBLE+3                                  C0909\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(12,R1),1(R1)                                     C0909\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\n** -- >>  below                                                   .SBG.\nEXCEPCNT DS    0H                                                 .SBG.\n         L     R15,UPS                                            .SBG.\n         LTR   R15,R15                                            .SBG.\n         BZ    STOWX                                              .SBG.\n         MVC   LINE,LINE-1                                        .SBG.\n         LA    R1,LINE                                            .SBG.\n         MVC   9(18,R1),=C'Exception Report: '                    .SBG.\n         LA    R1,26(,R1)                                         .SBG.\n         MVC   14(26,R1),=C'SYSUPLOG Records Processed'           .SBG.\n         CVD   R15,DOUBLE                                         .SBG.\n         MVC   0(12,R1),=X'402020206B2020206B202120'              .SBG.\n         ED    0(12,R1),DOUBLE+3                                  .SBG.\n         BAL   R14,REPORT                                         .SBG.\n** -- >>  above                                                   .SBG.\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         LR    R14,R0              COPY LENGTH                  GP12006\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODVTO   MVI   VTOEOF+3,1\n         B     VTOGOT\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE                                           .VTO.\n         MVI   0(R6),X'80'                                        .VTO.\n         L     R3,VTOSTAT                                         .VTO.\n         LTR   R3,R3               IS SYSUPLOG OPEN?              .VTO.\n         BZ    EXITC6X             NO, SKIP CLOSE                 .VTO.\n         CLOSE ((R3)),MF=(E,(R6))                                 .VTO.\n         FREEPOOL (R3)                                            .VTO.\nEXITC6X  DS    0H                                                 .VTO.\n         SPACE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         I/O ERROR                                        *    FEB2008\n*                                                          *     GP@P6\n************************************************************\n         SPACE\nIOERROR  WTO   MF=(E,SYNADMSG)     DISPLAY I/O ERROR MESSAGE\n         WTO   'PDSLOAD WILL ABEND - WRITE I/O ERROR',ROUTCDE=(11)\n         ABEND 101\n         SPACE\nPDSSYNAD DS    0H\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG+4(78),50(R1)\n         OI    FLAG1,IOERR\n         SYNADRLS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY --- &VER '\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE 1                                                GP12006\nMSGMISS1 DC    C'SYSUT1  MISSING; WILL TRY SYSIN  '             GP12006\n         SPACE 1                                                GP12006\nSTRMISS2 DC    C'    PDSLOAD TERMINATED - '                     GP12006\nSTRMIDD2 DC    C'SYSUT2  MISSING OR UNUSABLE'                   GP12006\nMSGMISS2 EQU   STRMISS2,*-STRMISS2,C'C'                         GP12006\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\nSYNADWTO WTO   '1234567890123456789012345678901234567890123456789012345+\n               67890123456789012345678',ROUTCDE=(11),MF=L\nSYNADLEN EQU   *-SYNADWTO\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,SYNAD=PDSSYNAD,        +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\nVTODCB   DCB   DDNAME=SYSUPLOG,MACRF=(GL),DSORG=PS,RECFM=FB,LRECL=80,  +\n               EODAD=EODVTO\nVTODCBL  EQU   *-VTODCB\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL TRENT ,0,C' ',C',',FILL=255   PASS ON COMMA AND BLANK  GP12006\n         SPACE 1\nTABBLANK TRENT FILL=0                                           GP12006\n         TRENT ,C' ',C' '         STOP ON BLANK                 GP12006\n         TRENT ,C',',C','         STOP ON COMMA                 GP12006\n         SPACE 1\nCHARIBM  TRENT FILL=255                                         GP12006\n         TRENT ,0,C'$',C'@',C'#'  ALLOW NATIONAL CHARACTERS     GP12006\n         TRENT ,0,(C'A',9),(C'J',9),(C'S',8)     LETTERS        GP12006\n         TRENT ,0,(C'0',10)                      DIGITS         GP12006\n         TRENT ,0,X'C0'           LEFT BRACE                    GP12090\n         TRENT ,0,C' '            TRAILING SPACE                GP12006\n         SPACE 1\nCHAR037  TRENT FILL=255                                         GP12006\n         TRENT ,0,(X'40',X'6B'-X'40')   EVERYTHING BELOW COMMA  GP12006\n         TRENT ,0,(X'6B'+1,255-X'6B')   EVERYTHING AFTER COMMA  GP12006\n         SPACE 1\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  TRENT ,0,(C'0',10),FILL=255   DIGITS ONLY              GP12006\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nUPS      DS    F                                                  .SBG.\nSAVER0   DS    F                                                  .SBG.\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nCTLMODEL DC    CL12'./ ADD NAME='      LOOKING FOR              GP06315\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nVTODCBW  DS    0F,(VTODCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\n@TRTTAB  DS    A                                                GP12006\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nVTOSTAT  DS    F\nVTOEOF   DS    F\nVTOSAVE  DS    6F\nVTOPREV  DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODE6     DS    2F                  OPERAND DESCRIPTOR ENTRY 6     A0909\nODE7     DS    2F                  OPERAND DESCRIPTOR ENTRY 7     A0909\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\nIOERR    EQU   X'08'               OUTPUT I/O ERROR             FEB2008\nCK3      EQU   X'04'               CHECK COLUMN 3               OCT2015\nFGNOCON  EQU   X'02'               CONTROL - SKIP UPDTE TEST    GP06315\nSELECTAL EQU   X'01'               ALIAS ALLOWED                MAY2009\n         DS    C                   LINE-1\nLINE     DS    CL133\nRESULT   EQU   LINE+48                           (IFOX00)       GP06315\nLINEH1   DS    CL133\n*\nSYNADMSG DS    XL(SYNADLEN)                                     FEB2008\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL40                SPF STATISTICS OR SSI          C0909\n         ORG   MEMUSER                                            C0909\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFFLAGS DS    X                   FLAGS                          A0909\nSPFSCLM  EQU   X'80'               SCLM-MANAGED                   A0909\nSPFXSTAT EQU   X'20'               EXTENDED STATISTICS            A0909\nSPFSECS  DS    X                   TIME LAST UPDATED (SS)         A0909\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED (HHMM)\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL7                 USERID                         C0909\nSPFBLANK DS    CL3                 ONE OR THREE BLANKS            A0909\n         ORG   SPFBLANK+1                                         A0909\nSPFXCCNT DS    F                   CURRENT SIZE                   A0909\nSPFXICNT DS    F                   INITIAL SIZE                   A0909\nSPFXMOD  DS    F                   MODS                           A0909\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n*\nZEROAREA DS    0CL(8+8+7)          UNPACKED COUNTERS AREA         A0909\n#CRNT    DS    CL8                 CURRENT RECORD COUNT           A0909\n#CRNTSML EQU   #CRNT+3,5           CURRENT RECORD COUNT           A0909\n#INIT    DS    CL8                 INITIAL RECORD COUNT           A0909\n#INITSML EQU   #INIT+3,5           INITIAL RECORD COUNT           A0909\n#MOD     DS    CL7                 CHANGED RECORD COUNT           A0909\n#MODSML  EQU   #MOD+2,5            CHANGED RECORD COUNT           A0909\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         PRINT GEN\n         CVT   LIST=YES,DSECT=YES   NEED FOR SYSTEM LEVEL CHECK GP12006\n         DCBD  DEVD=DA,DSORG=PO   WANT FOR DCB VALUES           GP12006\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOOLD": {"ttr": 19459, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x04U\\x04U\\x00\\x00\\xd6\\xd3\\xc4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 1109, "newlines": 1109, "modlines": 0, "user": "OLD"}, "text": "         TITLE '   P D S L O A D    '\n*$DOC@*****************************************************************\n*                                                                     *\n*        'PDSLOAD'                                                    *\n*                                                                     *\n***********************************************************************\n******************************************************************* NWK\n*   THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN MODIFIED WITH      NWK\n*    A GLOBAL VARIABLE SO THE LRECL OF THE INPUT AND OUTPUT         NWK\n*    DATASETS CAN BE CHANGED MERELY BY MODIFYING THE GLOBAL AND     NWK\n*    REASSEMBLING THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO     NWK\n*    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING THE LOAD      NWK\n*    MODULE.  SEE LABEL \"&LRECL\".                                   NWK\n*                                                                   NWK\n*   YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU WANT TO       NWK\n*    CHANGE THE LRECL THAT THE PROGRAM TAKES.  (ADMITTEDLY IT'S     NWK\n*    BETTER TO DO THIS WITH A PARM AT EXECUTION TIME.)  BUT THIS    NWK\n*    WORKS.  (IT HAS NOT BEEN TESTED WITH LRECL MUCH LESS THAN 80.) NWK\n*                                                                   NWK\n*             S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J. - JULY 87  NWK\n******************************************************************* NWK\n*\n*         WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN. NOVEMBER 25 1980.\n*         DATE UPDATED. MAY 28 1981.\n*         ATTRIBUTES. RE-ENTRANT.\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM WHICH CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESNT CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES.\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*$DOC$*****************************************************************\n         SPACE\n         GBLC  &LRECL                                               NWK\n&LRECL   SETC  '80'    U CHANGE IT. PROGRAM DEFAULTS TO LRECL=80    NWK\nPDSLOAD  START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'PDSLOAD'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    C' ASSEMBLED LRECL FOR INPUT AND OUTPUT IS &LRECL '  NWK\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R10,15              BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         USING @DATA,R13\n         SPACE\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,X'40'     BLANK PROPOGATOR\n         MVI   LINE-1,X'40'        BLANK PROPOGATOR\n         MVI   STATUS,0\n         MVI   FLAG1,0\n         SPACE\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(R1)            GET LENGTH OF PARM\n         LTR   R0,R0\n         BZ    PARMX\n         LA    R1,2(,R1)           POINT TO PARM DATA\n         CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMSX              NO, BYPASS COMPARE\n         CLC   0(3,R1),=C'SPF'     IS IT SPF\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES GENERATE SPF STATISTICS\n         LA    R1,3(,R1)\n         SH    R0,=H'3'\n         BZ    PARMX\n         CLI   0(R1),C','\n         BNE   PARMERR\n         LA    R1,1(,R1)           POINT PAST COMMA\n         SH    R0,=H'1'\n         BZ    PARMX\nPARMSX   EQU   *\nPARMM    CH    R0,=H'3'            LONG ENOUGH FOR S(X\n         BL    PARMERR             NO\n         CLC   0(2,R1),=C'S('      IS IT S(\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,MEMSEL+8\nPARMML   CLI   0(R1),C')'\n         BE    PARMME\n         CR    R15,R14             IS MEMBER NAME TOO LONG\n         BNL   PARMMIG             YES, IGNORE EXTRA CHARACTERS\n         MVC   0(1,R15),0(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)\nPARMMIG  BCT   R0,PARMML\n         B     PARMX\nPARMME   LA    R1,1(,R1)           POINT PAST PAREN\n         SH    R0,=H'1'\n         BZ    PARMX\n         CLI   0(R1),C','\n         BNE   PARMERR\n         LA    R1,1(,R1)           POINT PAST COMMA\n         SH    R0,=H'1'\n         BZ    PARMERR\nPARMMX   EQU   *\n         CH    R0,=H'9'            IS PARM LONG ENOUGH FOR UPDTE(XX)\n         BNE   PARMERR\n         CLC   0(6,R1),=C'UPDTE('\n         BNE   PARMERR\n         CLI   08(R1),C')'\n         BNE   PARMERR\n         MVC   UPDTE,6(R1)         LOOK FOR XX INSTEAD OF ./\n         B     PARMX\nPARMERR  ABEND 100\nPARMX    EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCB'S                                    *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         SPACE\n         IC    R0,EXLST(,R3)\n         LA    R14,PRTEXLST\n         ST    R14,EXLST(,R3)\n         STC   R0,EXLST(,R3)       SYSPRINT EXLST=PRTEXLST\n         SPACE\n         LA    R0,PRTEXO\n         ST    R0,0(,R14)\n         MVI   0(R14),X'85'        DCB EXIT\n         SPACE\n         IC    R0,EODAD(,R4)\n         LA    R14,EODUT1\n         ST    R14,EODAD(,R4)\n         STC   R0,EODAD(,R4)       SYSUT1 EODAD=EODUT1\n         SPACE\n         IC    R0,EXLST(,R4)\n         LA    R14,UT1EXLST\n         ST    R14,EXLST(,R4)\n         STC   R0,EXLST(,R4)       SYSUT1 EXLST=PDSEXLST\n         SPACE\n         LA    R0,UT1EXO\n         ST    R0,0(,R14)\n         MVI   0(R14),X'85'        DCB EXIT\n         SPACE\n         IC    R0,EXLST(,R5)\n         LA    R14,PDSEXLST\n         ST    R14,EXLST(,R5)\n         STC   R0,EXLST(,R5)       SYSUT2 EXLST=PDSEXLST\n         SPACE\n         LA    R0,UT2EXO\n         ST    R0,0(,R14)\n         MVI   0(R14),X'85'        DCB EXIT\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LA    R15,16\n         B     EXIT\nUT1EXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED\n         BNER  R14                 YES, RETURN\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         SPACE\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),X'10'\n         BO    OKUT2\n         LA    R15,16\n         B     EXIT\nUT2EXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),=AL2(39*&LRECL)\n         BR    R14\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         SPACE\n         LH    R0,BLKSI(,R5)\n         SLL   R0,1                DOUBLE BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         ST    R1,PUTPDSX+4        BUFFER 1 ADDRESS\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         ST    R1,PUTPDSY+4        BUFFER 2 ADDRESS\n         LH    R0,LRECL(,R5)       GET LRECL\n         LTR   R0,R0               IF LRECL ZERO\n         BNZ   *+8                  THEN\n         LH    R0,BLKSI(,R5)         USE BLKSI AS LRECL\n         SR    R1,R0               BACK UP ONE RECORD\n         ST    R1,PUTPDSX+8        LAST RECORD IN BUFFER 1\n         AR    R1,R0               POINT TO BUFFER 2\n         AH    R1,BLKSI(,R5)       END OF BUFFER 2\n         SR    R1,R0               BACK UP 1 RECORD\n         ST    R1,PUTPDSY+8        LAST RECORD IN BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     EQU   *\n         GET   (R4),INREC\n         SPACE\n         L     R1,COUNTIN\n         A     R1,=F'1'\n         ST    R1,COUNTIN\n         MVC   LINE,LINE-1\n         CLC   INREC(2),=C'./'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,72-1             LENGTH CODE OF CONTROL STATEMENT\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               INSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\n         B     LOOP\nTRTNONBL TRT   0(0,R15),TABNONBL   (EXECUTED)\nTRTBLANK TRT   0(0,R15),TABBLANK   (EXECUTED)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     EQU   *\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         CLC   INREC(2),UPDTE      IS THIS XX OF UPDTE(XX)\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   INREC(2),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE EQU   *\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   LM    R6,R9,PUTPDSX       FIRST, CURRENT, LAST, DECB\n         MVC   0(&LRECL,R7),INREC  MOVE RECORD INTO BLOCK\n         CR    R7,R8               LAST RECORD IN BLOCK\n         BE    PUTPDS1             YES, GO WRITE THE BLOCK\n         LA    R7,&LRECL.(,R7)     NO, BUMP CURRENT POINTER\n         ST    R7,PUTPDSX+4        SAVE SLOT ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  ST    R14,PUTPDSR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\nPUTPDS2  EQU   *\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         L     R14,PUTPDSR\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(72),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   0(12,R1),=C'./ ADD NAME='\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME=\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     (EXECUTED)\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS\n         BE    SELMEM1             YES, BRANCH\n         CLC   MEMSEL,MEMBER       NO, IS THIS THE SPECIFIED MEMBER\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     (EXECUTED)\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS\n         BE    SELMEM2             YES, BRANCH\n         CLC   MEMSEL,MEMBER       NO, IS THIS THE SPECIFIED MEMBER\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI=\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         USING XPF,R6\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI=\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    EQU   *\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'9'           ID LENGTH CODE MAY BE 0 TO 9\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         PACK  DOUBLE,XPFCCNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFCCNT          CURRENT SIZE\n         PACK  DOUBLE,XPFICNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFICNT          INITIAL SIZE\n         PACK  DOUBLE,XPFMOD       MOD\n         CVB   R0,DOUBLE\n         STH   R0,SPFMOD           LINES MODIFIED\n         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS\n         B     *+10\n         MVC   SPFUSER(0),XPFUSER\n         EX    R15,*-6\n         OI    STATUS,SPF          SET FLAG FOR STOW\nNOSPF    EQU   *\nNOUSER   EQU   *\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     (EXECUTED)\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN\n         BE    ILLMEM\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         STOW  (R5),(R6),R\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWAR(R15)\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     EQU   *\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         BZ    STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         STH   R7,BLKSI(,R5)       STORE LENGTH OF FINAL BLOCK\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  MVC   PUTPDSX+4(4),PUTPDSX\n         MVC   PUTPDSY+4(4),PUTPDSY\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         B     STOWNSSI\nSTOWNSPF EQU   *\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER(30),MEMUSER\n         MVI   SPFVM,1             1.0\n         XC    SPFRESV,SPFRESV     ZERO RESERVED BYTES\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         SRL   R0,16\n         STH   R0,SPFHHMM          TIME OF LAST CHANGE\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=CL10'PDSLOAD'\n         B     STOWNSSI\nSTOWNGEN EQU   *\n         TM    STATUS,SSI          IS THERE SSI USERDATA\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI EQU   *\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\n         STOW  (R5),(R6),R\n         SPACE\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nRESULT   EQU   LINE+48\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\n         SPACE\nSTOWCOM  EQU   *\n         MVI   RC+1,4\nSTOWCOMW EQU   *\n         TM    MEMC,X'80'          WAS THAT AN ALIAS\n         BO    STOWXA              YES, BRANCH\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(7,R1),1(R1)\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD\n         BNE   *+10                NO, SKIP NEXT INSTRUCTION\n         MVC   7(2,R1),=C') '      CHANGE RECORDS TO RECORD\n         BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(7,R1),1(R1)\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   EQU   *\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  EQU   *\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  EQU   *\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  EQU   *\n         SPACE 1\n         LR    1,13\n         L     R0,@SIZE\n         L     13,4(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    0,12,20(13)\n         L     14,12(,13)\n         BR    14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\n         PRINT GEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,                    +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GM),DSORG=PS,RECFM=FB,             +\n               LRECL=&LRECL\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,RECFM=FB,              +\n               BUFNO=2,LRECL=&LRECL\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nADDMODEL DC    CL&LRECL'./ ADD NAME='\n         SPACE\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'00'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'6B'               COMMA\n         DC    148X'00'\n         SPACE\nALPHANUM DC    0D'0',64X'FF',X'00',26X'FF'\n*                            SPACE\n         DC    X'00',4X'FF',X'00',26X'FF',2X'00',68X'FF',09X'00'\n*                $            -              #@           A-I\n         DC    7X'FF',9X'00',8X'FF',8X'00',6X'FF',10X'00',6X'FF'\n*                       J-R            S-Z            0-9\n         SPACE\n*              THE ABOVE TABLE CAN BE USED TO TEST FOR ALPHANUMERIC\n*              (PLUS NATIONALS, HYPHEN, AND BLANK)\n*              WITH A 'TRT' INSTRUCTION.\n*              IF THE FIELD IS VALID, CONDITION CODE IS 0.\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nWORK     DS    0F\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nUT1EXLST DS    F\nPDSEXLST DS    F\nPRTEXLST DS    F\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL&LRECL\nADD      DS    CL&LRECL\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\n         DS    C                   LINE-1\nLINE     DS    CL133\nLINEH1   DS    CL133\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL30                SPF STATISTICS OR SSI\n         ORG   *-30\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFRESV  DS    XL2                 RESERVED\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL10                USERID\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEQU": {"ttr": 19722, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n         REGEQU\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGS": {"ttr": 19724, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n         REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STAE$": {"ttr": 19969, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00i\\x00i\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 105, "newlines": 105, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&NAME    STAE$ &END=STAE$END,&WRK=STAE$WRK,&MF=(E,STAE$LST),           +\n               &LOAD=YES,&MSG=TPUT\n.*\n.*        THIS MACRO SETS UP AN ESTAE ENVIRONMENT FOR STAE$XIT.\n.*\n.*        WRITTEN BY BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).\n.*\n.*        DATE UPDATED. APRIL 15 1981.\n.*\n.*        STAE$XIT IS AN ESTAE EXIT WHICH DISPLAYS (ON THE CONSOLE\n.*        OR A TSO TERMINAL OR BOTH) INFORMATION ABOUT AN ABEND,\n.*        INCLUDING THE PSW, REGISTERS, AND (IF THE PSW IS WITHIN\n.*        THE CSECT THAT ISSUED THIS MACRO) THE CSECT NAME AND\n.*        THE OFFSET OF THE PSW FROM THE BEGINNING OF THE CSECT.\n.*\n.*        TO USE STAE$XIT, YOU NEED TO ADD THE FOLLOWING 4 STATEMENTS\n.*        TO YOUR PROGRAM.\n.*\n.*           1)  NEAR THE BEGINNING OF YOUR PROGRAM, AFTER YOU'VE\n.*               SET UP YOUR BASE REGISTER AND (IN A RE-ENTRANT\n.*               PROGRAM) GETMAINED A WORK AREA, CODE THE STAE$\n.*               MACRO WITH NO OPERANDS.\n.*           2)  ANYWHERE AFTER THE LAST EXECUTABLE INSTRUCTION\n.*               (BUT WITHIN THE MAIN CSECT) INSERT:\n.*                 STAE$END EQU   *\n.*               THIS IS USED BY STAE$XIT TO DETERMINE IF THE PSW\n.*               IS BETWEEN THE START OF THE CSECT AND HERE.\n.*           3)  IN YOUR WORK AREA (WHICH IN A RE-ENTRANT PROGRAM\n.*               IS USUALLY GETMAINED) INSERT:\n.*                 STAE$WRK DS    32D\n.*                 STAE$LST DS    16F\n.*               THE FIRST IS A WORK AREA USED BY STAE$XIT WHEN\n.*               AN ABEND OCCURS. THE SECOND IS A WORK AREA USED\n.*               BY THE STAE$ MACRO AT THE TIME IT IS EXECUTED.\n.*\n.*        STAE$LST IS BROKEN DOWN AS FOLLOWS\n.*               4F   -  ESTAE MF=L AREA\n.*               2F   -  2 WORD PARAMETER LIST\n.*               5F   -  OPTION LIST PREFIX (WORDS 3 AND 4 RESERVED)\n.*               5F   -  FIRST CSECT DESCRIPTOR ENTRY\n.*        THE STAE$ MACRO MAKES THESE 4 SECTIONS CONTIGUOUS,\n.*        BUT THEY MAY IN FACT BE SCATTERED IF YOU GENERATE\n.*        YOUR OWN PARAMETER LIST FOR STAE$XIT INSTEAD OF\n.*        USING THIS MACRO.\n.*\n.*        THE STAE$XIT EXIT IS NORMALLY LOADED DYNAMICALLY BY THE\n.*        STAE$ MACRO. THIS MAY BE UNACCEPABLE OVERHEAD FOR CERTAIN\n.*        APPLICATIONS.  BY SPECIFYING LOAD=NO AS AN OPERAND OF\n.*        THE MACRO, THE MACRO WILL REFERENCE THE EXIT WITH A\n.*        V-TYPE ADDRESS CONSTANT INSTEAD OF LOADING IT, SO THE\n.*        STAE$XIT EXIT CAN BE LINK-EDITED WITH THE ISSUING PROGRAM.\n.*\n.*        THERE ARE 2 ADVANTAGES TO LOADING THE EXIT DYNAMICALLY.\n.*        FIRST, THE LINK-EDIT STEP NEED NOT BE CHANGED TO REFERENCE\n.*        THE LIBRARY CONTAINING THE STAE$XIT EXIT.\n.*        SECOND, IMPROVEMENTS MADE TO THE STAE$XIT EXIT WILL TAKE\n.*        EFFECT AUTOMATICALLY, WITH NO RE-LINKING OF YOUR PROGRAM.\n.*\n.*        MESSAGES ARE NORMALLY DISPLAYED ON A TSO TERMINAL.\n.*        FOR PROGRAMS NOT EXECUTING FROM TSO, THERE IS A MSG=WTO\n.*        OPERAND WHICH CAUSES THE MESSAGES TO BE ISSUED VIA WTO.\n.*        THERE IS ALSO A MSG=WTOT OPERAND, WHICH CAUSES MESSAGES\n.*        TO BE ISSUED THRU WTO AND TSO BOTH.\n.*\n         AIF   ('&LOAD' EQ 'YES').LOAD\n         AIF   ('&LOAD' EQ 'NO').VCON\n         MNOTE 4,'LOAD=&LOAD INVALID, LOAD=YES ASSUMED'\n.LOAD    LA    0,=CL8'STAE$XIT'    LOAD, EPLOC\n         SR    1,1                 LOAD, NO DCB\n         SVC   8                   ISSUE LOAD SVC\n         AGO   .LOADED\n.VCON    L     0,=V(STAE$XIT)\n.LOADED  LA    1,&MF(2)            POINT TO ESTAE MF=L\n         ST    0,0(,1)             STORE EXIT ADDRESS IN ESTAE MF=L\n         MVI   0(1),22             OPTION BITS IN ESTAE MF=L\n         XC    8(8,1),8(1)         CLEAR LAST 2 WORDS OF ESTAE MF=L\n         LA    14,16(,1)           POINT TO 2-WORD PARAM LIST\n         ST    14,4(,1)            STORE PARAM ADDRESS IN ESTAE MF=L\n         LA    15,8(,14)           POINT TO 1ST PARAM (OPTIONS)\n         ST    15,0(,14)           STORE 1ST PARAM ADDRESS\n         LA    0,STAE$WRK          POINT TO 2ND PARAM (WORKAREA)\n         ST    0,4(,14)            STORE 2ND PARAM ADDRESS\n         XC    0(20,15),0(15)      CLEAR 1ST PARAM AREA\n         AIF   ('&MSG' EQ 'TPUT').MSGT\n         AIF   ('&MSG' EQ 'WTO').MSGW\n         AIF   ('&MSG' EQ 'WTOT').MSGB\n         MNOTE 4,'MSG=&MSG INVALID, MSG=TPUT ASSUMED'\n.MSGT    MVI   0(15),64            MSG=TPUT\n         AGO   .MSGX\n.MSGW    MVI   0(15),128           MSG=WTO\n         AGO   .MSGX\n.MSGB    MVI   0(15),0             MSG=WTOT (WTO AND TPUT)\n.MSGX    MVI   7(15),1             ONE CSECT IN LIST\n         LA    14,20(,15)          ADDRESS OF FIRST CSECT ENTRY\n         ST    14,16(,15)          STORE IN OPTION LIST WORD 5\n         LA    0,&SYSECT           TOP OF CSECT\n         ST    0,8(,14)            IN TABLE\n         LA    0,&END              END OF CSECT\n         ST    0,12(,14)           IN TABLE\n         MVC   0(8,14),=CL8'&SYSECT' CSECT NAME\n         XC    16(4,14),16(14)     ZERO POINTER TO NEXT CSECT\n         SLR   0,0                 INDICATE ESTAE CREATE OPTION\n         SVC   60                  ISSUE ESTAE SVC\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTOPEN": {"ttr": 19972, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&NAME    TESTOPEN &DCB,&EXIT\n&NAME    LOADIT 1,&DCB,A     REG 1 = DCB ADDRESS\n         TM 48(1),X'10'      TEST FOR SUCCESSFUL OPEN.\n         AIF ('&EXIT' EQ '').NOEXIT\n         LOADIT 15,&EXIT,A   REG 15 = EXIT ADDRESS\n         BCR 8,15            BRANCH IF NO OPEN.\n         MEXIT\n.NOEXIT  BO TEST&SYSNDX      BRANCH IF OPEN OK.\n         COMMENT 'OPEN TEST FAILED.'\n         SVC 3\nTEST&SYSNDX EQU *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMPMAC": {"ttr": 19974, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13o\\x00\\x91\\x13o\\x12\\x00\\x00\\xfc\\x00\\xfc\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-16T00:00:00", "modifydate": "1991-05-16T12:00:00", "lines": 252, "newlines": 252, "modlines": 0, "user": "FILE093"}, "text": "         MACRO\n&LBL     TMPMAC &CMD=(0,0),&CBUF=,&PGM=,&PARM=,                        X\n               &DCB=0,&TASKLIB=0,&CMDLIB=YES,                          X\n               &EXEC=YES,&STACK=YES,&SCMD=NO,&STAX=YES,&CMDFAIL=MSG,   X\n               &MF=I\n         LCLA  &F,&F1,&A\n         LCLC  &C\n         LCLB  &CBF,&CBR,&CS,&CR1,&CR2,&PGF,&PGS,&PGR\n         LCLB  &PRF,&PRS,&PRR,&HF,&HS,&HR\n         LCLB  &DCBR,&DCB0,&TSKR\n         LCLB  &STRS\n         LCLB  &MFL,&MFI,&MFB,&MFE\n         AIF   (('&LBL' EQ '') OR ('&MF' EQ 'L') ).L\n&LBL     DS    0H\n.L       AIF   ('&CBUF' EQ '').L1\n&CBF     SETB  1\n&F       SETA  X'80'\n&C       SETC  '&CBUF'(1,1)\n         AIF   ('&C' NE '(').L8\n&CBR     SETB  1\n         AGO   .L8\n.L1      ANOP\n&C       SETC  '&CMD(1)'(1,1)\n         AIF   ('&C' NE '''').L2\n&CS      SETB  1\n&STRS    SETB  1\n         AGO   .L4\n.L2      AIF   ('&C' NE '(').L3\n&CR1     SETB  1\n.L3      ANOP\n&C       SETC  '&CMD(2)'(1,1)\n         AIF   ('&C' NE '(').L4\n&CR2     SETB  1\n.L4      AIF   ('&PGM' EQ '').L7A\n&PGF     SETB  1\n&F1      SETA  X'80'\n&C       SETC  '&PGM'(1,1)\n         AIF   ('&C' NE '''').L5\n&PGS     SETB  1\n&STRS    SETB  1\n         AGO   .L6\n.L5      AIF   ('&C' NE '(').L6\n&PGR     SETB  1\n.L6      AIF   ('&PARM' EQ '').L8\n&PRF     SETB  1\n&C       SETC  '&PARM'(1,1)\n         AIF   ('&C' NE '''').L7\n&PRS     SETB  1\n&STRS    SETB  1\n         AGO   .L8\n.L7      AIF   ('&C' NE '(').L8\n&PRR     SETB  1\n         AGO   .L8\n.L7A     AIF   ('&CMD(1)' NE '0').L8\n         AIF   ('&MF(1)' EQ 'L').L8\n         MNOTE 8,'CMD, CBUF, OR PGM MUST BE SPECIFIED'\n         MEXIT\n.L8      AIF   ('&DCB' NE 'ENV').L8A\n&F       SETA  &F+X'40'\n&DCB0    SETB  1\n         AGO   .L9\n.L8A     AIF   ('&DCB' NE '0').L8B\n&DCB0    SETB  1\n         AGO   .L9\n.L8B     ANOP\n&C       SETC  '&DCB'(1,1)\n         AIF   ('&C' NE '(').L9\n&DCBR    SETB  1\n.L9      ANOP\n&C       SETC  '&TASKLIB'(1,1)\n         AIF   ('&C' NE '(').L10\n&TSKR    SETB  1\n.L10     AIF   ('&CMDLIB' NE 'NO').L11\n&F       SETA  &F+X'20'\n.L11     AIF   ('&EXEC'  NE 'NO').L12\n&F       SETA  &F+X'10'\n.L12     AIF   ('&STACK' NE 'NO').L13\n&F       SETA  &F+X'02'\n.L13     AIF   ('&SCMD' NE 'NO').L14\n&F       SETA  &F+X'08'\n.L14     AIF   ('&STAX' NE 'NO').L15\n&F       SETA  &F+X'04'\n         AGO   .L17\n.L15     AIF   ('&STAX' EQ 'YES').L17\n&HF      SETB  1\n&C       SETC  '&STAX'(1,1)\n         AIF   ('&C' NE '''').L16\n&HS      SETB  1\n&STRS    SETB  1\n         AGO   .L17\n.L16     AIF   ('&C' NE '(').L17\n&HR      SETB  1\n.L17     AIF   ('&CMDFAIL' NE 'NOMSG').L18\n&F       SETA  &F+X'01'\n.L18     AIF   ('&MF' NE 'L').L19\n&MFL     SETB  1\n         AGO   .L23\n.L19     AIF   ('&MF' NE 'I').L20\n&MFI     SETB  1\n         AGO   .L23\n.L20     ANOP\n&C       SETC  '&MF(1)'\n         AIF   ('&C' NE 'B').L21\n&MFB     SETB  1\n         AGO   .L23\n.L21     AIF   ('&C' NE 'E').L22\n&MFE     SETB  1\n         AGO   .L23\n.L22     MNOTE 8,'UNRECOGNIZABE MF'\n         MEXIT\n.L23     AIF   (NOT &MFL).L37\n         AIF   (NOT (&CBR OR &CR1 OR &CR2 OR &PGR OR &PRR OR &DCBR OR  X\n               &TSKR)).L24\n         MNOTE 8,'R FORM NOT ALOWED WITH MF=L'\n         MEXIT\n.L24     ANOP\n&LBL     DS    0F                       FULLWORD ALIGNMENT\n         DC    AL1(&F)                  FLAGS\n         AIF   (NOT &DCB0).L25\n         DC    AL3(0)                   DCB ADDR\n         AGO   .L26\n.L25     DC    AL3(&DCB)                DCB ADDR\n.L26     AIF   (&PGF).L29\n         AIF   (&CBF).L28\n         AIF   (&CS).L27\n         DC    AL1(&CMD(2))             CMD LNTH\n         DC    AL3(&CMD(1))             CMD ADDR\n         AGO   .L31\n.L27     DC    AL1(L'TMPC&SYSNDX)       CMD LNTH\n         DC    AL3(TMPC&SYSNDX)         CMD ADDR\n         AGO   .L31\n.L28     DC    AL4(&CBUF)               PTR TO CBUF\n         AGO   .L31\n.L29     AIF   (&PGS).L30\n         DC    AL4(&PGM)                PGM NAME ADDR\n         AGO   .L31\n.L30     DC    AL4(TMPG&SYSNDX)         PGM NAME ADDR\n.L31     DC    AL1(&F1)                 FLAGS\n         DC    AL3(&TASKLIB)            TASKLIB\n         AIF   (&PRF).L32\n         DC    AL4(0)                   RETURN/COMPLETION CODE\n         AGO   .L34\n.L32     AIF   (&PRS).L33\n         DC    AL4(&PARM)               PARM PTR/RETURN-COMPLETION CODE\n         AGO   .L34\n.L33     DC    AL4(TMPR&SYSNDX)         PARM PTR/RETURN-COMPLETION CODE\n.L34     AIF   (&HF).L35\n         DC    AL4(0)                   UNUSED HERALD FIELD\n         AGO   .L38\n.L35     AIF   (&HS).L36\n         DC    AL4(&STAX)               HERALD/REPLY\n         AGO   .L38\n.L36     DC    AL4(TMPH&SYSNDX)         HERALD/REPLY\n.L37     AIF   (NOT (&STRS OR &MFI)).L38\n         B     TMPL&SYSNDX\n.L38     AIF   (NOT &CS).L39\nTMPC&SYSNDX DC C&CMD\n.L39     AIF   (NOT &PGS).L40\nTMPG&SYSNDX DC CL8&PGM                  PGM NAME\n.L40     AIF   (NOT &PRS).L41\n&A       SETA  K'&PARM\n&A       SETA  &A-2\nTMPR&SYSNDX DC 0F'0',XL1'80',AL3(TMPR&SYSNDX+6)\n         DC    F'&A'\n         DC    C&PARM\n.L41     AIF   (NOT &HS).L42\n&A       SETA  K'&STAX\n&A       SETA  &A-2\nTMPH&SYSNDX DC H'&A',C&STAX\n.L42     AIF   (NOT &MFL).L43\n         MEXIT\n.L43     AIF   (NOT &MFI).L44\nTMPT&SYSNDX DC 5F'0'                    CMD BLK FOR TMPSRV\nTMPL&SYSNDX LA 1,TMPT&SYSNDX GET TBL ADDR\n         AGO   .L45A\n.L44     AIF   (NOT &STRS).L45\nTMPL&SYSNDX DS 0H\n.L45     AIF   ('&MF(2)' EQ '(1)').L45A\n         LA    1,&MF(2)                 GET TBL ADDR\n.L45A    ANOP\n         XC    0(20,1),0(1)             CLEAR TBL\n.L46     AIF   (&DCBR).L47\n         AIF   (&DCB0).L48\n         LA    0,&DCB                   GET DCB ADDR\n         ST    0,0(1)                   STORE IN TBL\n         AGO   .L48\n.L47     ST    &DCB(1),0(1)             STORE DCB ADDR\n.L48     AIF   ('&F' EQ '0').L49\n         MVI   0(1),&F                  MOVE IN FLAGS\n.L49     AIF   (&PGF).L54\n         AIF   (&CBF).L53A\n         AIF   (&CS).L53\n         AIF   (&CR1).L50\n         LA    0,&CMD(1)                GET CMD ADDR\n         ST    0,4(1)                   STORE IN LST\n         AGO   .L51\n.L50     ST    &CMD(1),4(1)\n.L51     AIF   (&CR2).L52\n         MVI   4(1),&CMD(2)             MOVE IN LNTH\n         AGO   .L57\n.L52     STC   &CMD(2),4(1)             STORE CMD LNTH\n         AGO   .L57\n.L53     LA    0,TMPC&SYSNDX            GET CMD ADDR\n         ST    0,4(1)                   STORE IN TBL\n         MVI   4(1),L'TMPC&SYSNDX       MOVE IN LNTH\n         AGO   .L57\n.L53A    AIF   (&CBR).L53B\n         LA    0,&CBUF                  GET CBUF ADDR\n         ST    0,4(1)                   STORE IN TBL\n         AGO   .L57\n.L53B    ST    &CBUF(1),4(1)            STORE CBUF ADDR\n         AGO   .L57\n.L54     AIF   (&PGS).L56\n         AIF   (&PGR).L55\n         LA    0,&PGM                   GET PGM NAME ADDR\n         ST    0,4(1)                   STORE IN TABLE\n         AGO   .L57\n.L55     ST    &PGM(1),4(1)             STORE PGM NAME ADDR\n         AGO   .L57\n.L56     LA    0,TMPG&SYSNDX            GET PGM NAME ADDR\n         ST    0,4(1)                   STORE IN TABLE\n.L57     AIF   ('&TASKLIB' EQ '0').L59\n         AIF   (&TSKR).L58\n         LA    0,&TASKLIB               GET ADDR OF TSK DCB\n         ST    0,8(1)                   STORE IN TAB\n         AGO   .L59\n.L58     ST    &TASKLIB(1),8(1)         STORE TSK DCB ADDR\n.L59     AIF   ('&F1' EQ '0').L60\n         MVI   8(1),&F1                 MOVE IN FLGS\n.L60     AIF   (NOT &PRF).L63\n         AIF   (&PRS).L62\n         AIF   (&PRR).L61\n         L     0,&PARM                  GET PARM ADDR\n         ST    0,12(1)                  STORE IN TABLE\n         AGO   .L63\n.L61     ST    &PARM(1),12(1)           ST PRM ADDR IN TABLE\n         AGO   .L63\n.L62     LA    0,TMPR&SYSNDX            GET PARM ADDR\n         ST    0,12(1)                  STORE IN TABLE\n.L63     AIF   (NOT &HF).L67\n         AIF   (&HS).L65\n         AIF   (&HR).L64\n         LA    0,&STAX                  GET HERALD ADDR\n         ST    0,16(1)                  STORE IN TABLE\n         AGO   .L67\n.L64     ST    &STAX(1),16(1)           STORE HERALD ADDR\n         AGO   .L67\n.L65     LA    0,TMPH&SYSNDX            GET HERALD ADDR\n         ST    0,16(1)                  STORE IN TBL\n.L67     AIF   (&MFB).L68\n         LINK  EP=TMPSRV\n.L68     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNUPDTE": {"ttr": 19979, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x03o\\x00\\x92\\x03o\\x16G\\x00\\xfe\\x00\\xfe\\x00\\x00\\xc1\\xe3\\xc1\\xd5\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-02-05T00:00:00", "modifydate": "1992-02-05T16:47:00", "lines": 254, "newlines": 254, "modlines": 0, "user": "ATANSKY"}, "text": "*  UPDTE,UNUPDTE SYSTEM FROM PL1 MODS TAPE DATED 9/85.\n*  SPLA NUMBER 360D.032.019 - FILE 4.\n*\n*\n*UPDATED 12/91 BY ART TANSKY AT SUNGARD TO FIX A FEW BUGS          A.T.\n*        AND AN ASSEMBLY ERROR.                                    A.T.\n*        NOTE THAT THE BUGS ONLY SHOWED UP IF THE INPUT AND        A.T.\n*        OUTPUT LRECL WERE NOT THE SAME AND IF THE RECFM WAS       A.T.\n*        FIXED.                                                    A.T.\n*                                                                  A.T.\n*        CHANGED IHADCB MACRO TO DCBD TO FIX ASSEMBLY ERROR.       A.T.\n*                                                                  A.T.\n*        IN 1 PLACE I UPDATED THE CODE USE LRECL OF INPUT FILE     A.T.\n*        WHERE ORIGINAL HAD LRECL OF OUTPUT, IN ANOTHER I          A.T.\n*        REVERSED THAT .                                           A.T.\n*                                                                  A.T.\n*        I ALSO REMOVED LIST=ALL FROM THE ./ ADD CARD IF THE       A.T.\n*        LRECL OF THE OUTPUT IS LESS THAN 29.  THAT ALLOWS FOR A   A.T.\n*        MINIMUM LENGTH OF 20 (FOR 8-BYTE MEMBER NAMES) (ADD 4 TO  A.T.\n*        BOTH NUMBERS IF VB).                                      A.T.\n*\n*\n         PRINT GEN\n*\n*  PROGRAM NAME - UNUPDTE\n*\n*  FUNCTION     - CREATE A SEQUENTIAL DATASET FROM A PDS, WITH\n*                 INTERSPERSED ./ ADD CARDS.\n*\n*  FILES:\n*    SYSPRINT   - MESSAGES, INFORMATIONAL AND DIAGNOSTIC\n*    SYSUT1     - INPUT PDS. EACH MEMBER AND/OR ALIAS WILL BE\n*                 COPIED TO THE OUTPUT FILE.\n*    SYSUT2     - OUTPUT SEQUENTIAL DATA SET. ALL MEMBERS ARE PLACED\n*                 IN SEQUENTIAL FORM, WITH A PRECEDING ./ ADD LINE.\n*                 DCB PARAMETERS MUST BE SUPPLIED.\n*\n*  RESTRICTIONS - THE RECORD FORMATS OF SYSUT1 AND SYSUT2 MUST BE THE\n*                 SAME.\n*\nUNUPDTE  CSECT\n         USING *,R15\n         SAVE  (14,12),,*\n         LA    R2,SAVE001              SET UP SAVEAREA LINKAGE\n         ST    R13,SAVE001+4           *\n         ST    R2,8(,R13)              *\n         LR    R13,R2                  *\n         DROP  R15\n         USING SAVE001,R13\n         B     SAVE001A                GO TO REAL PROGRAM\nSAVE001  DS    18F\nSAVE001A EQU   *\n         OPEN  (SYSPRINT,(OUTPUT),SYSUT1,(INPUT),DIRECTRY,(INPUT))\n         LA    R12,SYSUT1              THE INPUT DCB ADDRESS\n         USING IHADCB,R12              TELL THE ASSEMBLER\n         MVC   ALLDONE,DCBRECFM        TEST THE RECFM FOR VALIDITY\n         NI    ALLDONE,X'C0'           ONLY THE F/V BITS\n         TM    ALLDONE,X'C0'           *\n         BNM   FAIL1                   *\n         TM    DCBRECFM,X'80'          *IS IT FIXED?\n         BO    FB1                     *BRANCH IF IT IS\n         LA    R11,SYSUT2V             FOR LATER USE AS A BASE\n         OPEN  (SYSUT2V,(OUTPUT))\n         CLC   DCBLRECL-IHADCB(2,R11),=AL2(LADDLINV) LONG ENOUGH?  A.T.\n         BNL   CM1                 YES                             A.T.\n         MVC   @VADDLIN(LEN@S),@VXDDLIN    NO, USE ALT FORMS       A.T.\n         B     CM1                     AND CONTINUE ON THE COMMON PATH\nFB1      DS    0H\n         LA    R11,SYSUT2F             AGAIN FOR A BASE LATER\n         OPEN  (SYSUT2F,(OUTPUT))\n         CLC   DCBLRECL-IHADCB(2,R11),=AL2(LADDLINE) LONG ENOUGH?  A.T.\n         BNL   FB1A                YES                             A.T.\n         MVC   @VADDLIN(LEN@S),@VXDDLIN    NO, USE ALT FORMS       A.T.\nFB1A     DS    0H                                                  A.T.\n         CLC   DCBLRECL,DCBLRECL-IHADCB(R11)\n         BE    CM1                     IF THEY ARE THE SAME LRECL\n         PUT   SYSPRINT,WMSG1          TELL HIM THEY ARE DIFFERENT\nCM1      DS    0H\n         NC    ALLDONE,DCBRECFM-IHADCB(R11)\n         BZ    FAIL2                   IF THEY'RE NOT THE SAME TELL HIM\n         MVI   ALLDONE,0               A FLAG FOR LATER\nNXTDIR   DS    0H\n         GET   DIRECTRY                GET THE NEXT DIRECTORY BLOCK\n         LR    R2,R1                   A POINTER TO NEXT MEMBER NAME\n         LH    R9,0(,R2)               GET THE NUMBER OF BYTES USED\n         S     R9,=F'2'                IT STARTS OUT COUNTING IT SELF\n         LA    R2,2(,R2)               POINT TO CORRECT STARTING LOC\n         BNP   NXTDIR                  IF NO DATA IN THIS DIRBLK\nNEXTMEM  DS    0H\n         CLI   0(R2),X'FF'             ARE WE DONE WITH THIS BLOCK?\n         BE    NXTDIR                  BRANCH IF WE ARE\n         L     R15,@MEMBADD        ADDRESS TO MOVE MEMBERNAME      A.T.\n         MVC   0(L'MEMBADD,R15),0(R2)  SAVE THE MEMBER NAME        A.T.\n         TM    DCBRECFM,X'80'          FIXED?\n         BO    FB2                     BRANCH IF SO\n         L     R0,@VADDLIN         ADDRESS OF CORRECT OUTPUT LINE  A.T.\n         PUT   SYSUT2V,(0)             WRITE THE ADD RECORD        A.T.\n         B     CM2                     AND REJOIN THE COMMON STREAM\nFB2      DS    0H\n         PUT   SYSUT2F                 GET A BUFFER FOR OUTPUT\n         MVI   0(R1),C' '              CLEAR FIRST BYTE\n         LH    R5,DCBLRECL-IHADCB(R11) SET UP CLEARING MVCL        A.T.\n*        LH    R5,DCBLRECL-IHADCB(R12) SET UP CLEARING MVCL\n         BCTR  R5,0                    *\n         LA    R4,1(,R1)               *\n         LA    R15,1                   *\n         O     R15,=X'40000000'        *\n         LR    R14,R1                  *\n         MVCL  R4,R14                  *\n         L     R15,@FADDLIN        ADDRESS OF CORRECT OUTPUT LINE  A.T.\n         MVC   0(LADDLINE,R1),0(R15)   PUT THE ADD LINE IN BUFFER  A.T.\nCM2      DS    0H\n         MVC   TTR,8(R2)               POINT TO THE RIGHT PLACE IN PDS\n         POINT SYSUT1,TTR              *\n         SR    R8,R8                   RECORD COUNTER\nNXTBLOCK DS    0H\n         READ  DECB,SF,SYSUT1,BLOCKIN\n         CHECK DECB                    DID IT GET HERE OK?\n         TM    DCBRECFM,X'80'          FIXED?\n         BO    FB3                     GO IF SO\n         L     R4,=A(BLOCKIN)          THE FIRST RECORD ADDRESS\n         LH    R3,0(,R4)               GET THE LENGTH\n         LA    R4,4(,R4)               MOVE TO THE 1ST RECORD\n         S     R3,=F'4'                CORRECT FOR BCW\nNEXTLINV DS    0H\n         PUT   SYSUT2V,(R4)            WRITE THE OUTPUT RECORD\n         LA    R8,1(,R8)               COUNT THE OUTPUT RECORDS\n         LH    R15,0(,R4)              MOVE TO THE NEXT RECORD\n         AR    R4,R15                  *\n         SR    R3,R15                  *\n         BP    NEXTLINV                *GO IF THERE IS MORE IN BLOCK\n         B     NXTBLOCK                ELSE GET ANOTHER BLOCK\nFB3      DS    0H\n         L     R4,=A(BLOCKIN)          FIRST RECORD ADDRESS\n         L     R1,DECB+16              THE IOB ADDRESS\n         LH    R3,DCBBLKSI             THE MAXIMUM BLOCK SIZE\n         SH    R3,14(,R1)              THE RESIDUAL COUNT\nNEXTLINF DS    0H\n         LH    R5,DCBLRECL             SOURCE RECORD LENGTH\n         PUT   SYSUT2F                 GET AN OUTPUT BUFFER\n         LR    R6,R1                   SAVE THE BUFFER ADDRESS\n         LH    R7,DCBLRECL-IHADCB(,R11)     THE TARGET LENGTH\n         O     R5,=X'40000000'         FILL CHARACTER\n         MVCL  R6,R4                   MOVE INPUT RECORD TO OUTPUT BUFF\n         LA    R8,1(,R8)               COUNT THE OUTPUT RECORDS\n         SH    R3,DCBLRECL                                         A.T.\n*        SH    R3,DCBLRECL-IHADCB(,R11)\n         BP    NEXTLINF                ANY DATA LEFT IN BUFFER\n         B     NXTBLOCK                ELSE GET ANOTHER BLOCK\nENDMEM   DS    0H\n         MVC   PRTMEM,0(R2)            PRINT AN INFORMATION LINE\n         CVD   R8,DUBL                 *\n         MVC   PRTCTR,=X'402020202020' *\n         ED    PRTCTR,DUBL+5           *\n         PUT   SYSPRINT,OUTLINE        *\n         IC    R1,11(,R2)              THE NUMBER OF USER HALFWORDS\n         N     R1,=F'31'               KILL THE TRASH BITS\n         SLL   R1,1                    DOUBLE IT FOR BYTES\n         LA    R1,12(,R1)              COMPUTE THE NEXT MEMBER'S DISP\n         AR    R2,R1                   GET THE ADDRESS\n         SR    R9,R1                   NUMBER OF BYTES REMAINING IN BLK\n         BP    NEXTMEM                 IF SOME LEFT\n         B     NXTDIR                  OTHERWISE\nENDDIR   DS    0H\n         PUT   SYSPRINT,ALLDNMSG       SAY GOOD-BYE\n         CLOSE (SYSUT1,,(R11),,SYSPRINT,,DIRECTRY)\n         L     R13,4(,R13)             GO BACK TO THE CALLER(OS?)\n         LM    R14,R12,12(R13)         *\n         SR    R15,R15                 *\n         BR    R14                     *\nFAIL1    DS    0H\n         PUT   SYSPRINT,MSG1           TELL WHY\n         ABEND 1111,DUMP\nFAIL2    PUT   SYSPRINT,MSG2           SAY WHY\n         ABEND 2222,DUMP\nSYNAD1   DS    0H\n         LR    R5,R15                  ESTABLISH ADDRESSABILITY\n         USING SYNAD1,R5               TELL THE ASSEMBLER\n         SYNADAF ACSMETH=BPAM          GET THE DIAGNOSTIC MESSAGE\n         MVC   SYNADLIN+1(62),50(R1)   MAKE IT PRINTABLE\n         PUT   SYSPRINT,SYNADLIN       PRINT IT\n         ABEND 999,DUMP\nSYSPRINT DCB   BLKSIZE=121,LRECL=121,RECFM=FA,DSORG=PS,                *\n               DDNAME=SYSPRINT,MACRF=PM\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,EODAD=ENDMEM,            *\n               SYNAD=SYNAD1\nDIRECTRY DCB   BLKSIZE=256,LRECL=256,RECFM=F,DDNAME=SYSUT1,            *\n               MACRF=GL,DSORG=PS,EODAD=ENDDIR\nSYSUT2F  DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PL\nSYSUT2V  DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM\nALLDONE  DC    X'00'\nSYNADLIN DC    CL121' '\nALLDNMSG DC    CL50'0',CL71'ALL PROCESSING COMPLETE'\n*  ./ ADD  LINE WAS CHANGED BY ART TANSKY AT SUNGARD.  I KLUDGED   A.T.\n*  IT SO THAT IF LRECL >= 29 IT WORKED AS BEFORE (WITH THE         A.T.\n*  \"LIST=ALL,\".  IF THE LRECL < 29, I REMOVE THE LIST=ALL.         A.T.\n*  RATHER COMPARING THE LRECL EACH TIME I NEED TO ACCESS THE       A.T.\n*  LINE, I HAVE TWO VERSIONS OF THE LINE, AND I SAVE THE           A.T.\n*  IMPORTANT ADDRESSES.  I THEN RELOAD THE ADDRESSES INTO A        A.T.\n*  REGISTER AND WORK FROM THERE.                                   A.T.\n*                                                                  A.T.\n@VADDLIN DC    A(VADDLINE)                                         A.T.\n@FADDLIN DC    A(FADDLINE)                                         A.T.\n@MEMBADD DC    A(MEMBADD)                                          A.T.\nLEN@S    EQU   *-@VADDLIN                                          A.T.\n@VXDDLIN DC    A(VXDDLINE)                                         A.T.\n@FXDDLIN DC    A(FXDDLINE)                                         A.T.\n@MXMBADD DC    A(MXMBADD)                                          A.T.\n         DS    0H                                                  A.T.\nVADDLINE DC    AL2(LADDLINV,0)                                     A.T.\nFADDLINE DC    C'./ ADD LIST=ALL,NAME=????????'                    A.T.\nLADDLINE EQU   *-FADDLINE                                          A.T.\nLADDLINV EQU   LADDLINE+4                                          A.T.\nMEMBADD  EQU   *-8,8                                               A.T.\n         DS    0H                                                  A.T.\nVXDDLINE DC    AL2(LXDDLINV,0)                                     A.T.\nFXDDLINE DC    C'./ ADD NAME=????????'                             A.T.\nLXDDLINE EQU   *-FXDDLINE                                          A.T.\nLXDDLINV EQU   LXDDLINE+4                                          A.T.\nMXMBADD  EQU   *-8,8                                               A.T.\n         DS    0F\nTTR      DC    XL3'00'\n         DC    X'00'\nOUTLINE  DC    CL121' '\n         ORG   OUTLINE+1\n         DC    C'MEMBER '\nPRTMEM   DC    CL8' '\n         DC    C' COPIED. NUMBER OF RECORDS'\nPRTCTR   DC    CL6' '\n         ORG\nWMSG1    DC    CL121' TRUNCATION/PADDING WILL OCCUR. LRECL''S UNEQUAL'\nMSG1     DC    CL121' RECRM NOT V OF F IN SYSUT1'\nMSG2     DC    CL121' RECFM''S NOT THE SAME IN SYSUT1 AND SYSUT2'\nDUBL     DC    D'0'\n         LTORG\nBLOCKIN  DS    CL32767\n         DCBD   DSORG=PO                                           A.T.\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UNUPDTE$": {"ttr": 20227, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x16\\x0f\\x00\\x993_\\x15$\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-06-09T00:00:00", "modifydate": "1999-12-01T15:24:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.FILE093.PDS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.FILE093.PDS(UNUPDTE)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n NAME    UNUPDTE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNUPDTEO": {"ttr": 20229, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x03o\\x00\\x92\\x03o\\x16I\\x00\\xc9\\x00\\xc9\\x00\\x00\\xd6\\xd3\\xc4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-02-05T00:00:00", "modifydate": "1992-02-05T16:49:00", "lines": 201, "newlines": 201, "modlines": 0, "user": "OLD"}, "text": "*  UPDTE,UNUPDTE SYSTEM FROM PL1 MODS TAPE DATED 9/85.\n*  SPLA NUMBER 360D.032.019 - FILE 4.\n*\n         PRINT GEN\n*\n*  PROGRAM NAME - UNUPDTE\n*\n*  FUNCTION     - CREATE A SEQUENTIAL DATASET FROM A PDS, WITH\n*                 INTERSPERSED ./ ADD CARDS.\n*\n*  FILES:\n*    SYSPRINT   - MESSAGES, INFORMATIONAL AND DIAGNOSTIC\n*    SYSUT1     - INPUT PDS. EACH MEMBER AND/OR ALIAS WILL BE\n*                 COPIED TO THE OUTPUT FILE.\n*    SYSUT2     - OUTPUT SEQUENTIAL DATA SET. ALL MEMBERS ARE PLACED\n*                 IN SEQUENTIAL FORM, WITH A PRECEDING ./ ADD LINE.\n*                 DCB PARAMETERS MUST BE SUPPLIED.\n*\n*  RESTRICTIONS - THE RECORD FORMATS OF SYSUT1 AND SYSUT2 MUST BE THE\n*                 SAME.\n*\nUNUPDTE  CSECT\n         USING *,R15\n         SAVE  (14,12),,*\n         LA    R2,SAVE001              SET UP SAVEAREA LINKAGE\n         ST    R13,SAVE001+4           *\n         ST    R2,8(,R13)              *\n         LR    R13,R2                  *\n         DROP  R15\n         USING SAVE001,R13\n         B     SAVE001A                GO TO REAL PROGRAM\nSAVE001  DS    18F\nSAVE001A EQU   *\n         OPEN  (SYSPRINT,(OUTPUT),SYSUT1,(INPUT),DIRECTRY,(INPUT))\n         LA    R12,SYSUT1              THE INPUT DCB ADDRESS\n         USING IHADCB,R12              TELL THE ASSEMBLER\n         MVC   ALLDONE,DCBRECFM        TEST THE RECFM FOR VALIDITY\n         NI    ALLDONE,X'C0'           ONLY THE F/V BITS\n         TM    ALLDONE,X'C0'           *\n         BNM   FAIL1                   *\n         TM    DCBRECFM,X'80'          *IS IT FIXED?\n         BO    FB1                     *BRANCH IF IT IS\n         LA    R11,SYSUT2V             FOR LATER USE AS A BASE\n         OPEN  (SYSUT2V,(OUTPUT))\n         B     CM1                     AND CONTINUE ON THE COMMON PATH\nFB1      DS    0H\n         LA    R11,SYSUT2F             AGAIN FOR A BASE LATER\n         OPEN  (SYSUT2F,(OUTPUT))\n         CLC   DCBLRECL,DCBLRECL-IHADCB(R11)\n         BE    CM1                     IF THEY ARE THE SAME LRECL\n         PUT   SYSPRINT,WMSG1          TELL HIM THEY ARE DIFFERENT\nCM1      DS    0H\n         NC    ALLDONE,DCBRECFM-IHADCB(R11)\n         BZ    FAIL2                   IF THEY'RE NOT THE SAME TELL HIM\n         MVI   ALLDONE,0               A FLAG FOR LATER\nNXTDIR   DS    0H\n         GET   DIRECTRY                GET THE NEXT DIRECTORY BLOCK\n         LR    R2,R1                   A POINTER TO NEXT MEMBER NAME\n         LH    R9,0(,R2)               GET THE NUMBER OF BYTES USED\n         S     R9,=F'2'                IT STARTS OUT COUNTING IT SELF\n         LA    R2,2(,R2)               POINT TO CORRECT STARTING LOC\n         BNP   NXTDIR                  IF NO DATA IN THIS DIRBLK\nNEXTMEM  DS    0H\n         CLI   0(R2),X'FF'             ARE WE DONE WITH THIS BLOCK?\n         BE    NXTDIR                  BRANCH IF WE ARE\n         MVC   MEMBADD,0(R2)           SAVE THE MEMBER NAME\n         TM    DCBRECFM,X'80'          FIXED?\n         BO    FB2                     BRANCH IF SO\n         PUT   SYSUT2V,VADDLINE        WRITE THE ADD RECORD\n         B     CM2                     AND REJOIN THE COMMON STREAM\nFB2      DS    0H\n         PUT   SYSUT2F                 GET A BUFFER FOR OUTPUT\n         MVI   0(R1),C' '              CLEAR FIRST BYTE\n         LH    R5,DCBLRECL-IHADCB(R12) SET UP CLEARING MVCL\n         BCTR  R5,0                    *\n         LA    R4,1(,R1)               *\n         LA    R15,1                   *\n         O     R15,=X'40000000'        *\n         LR    R14,R1                  *\n         MVCL  R4,R14                  *\n         MVC   0(29,R1),FADDLINE       PUT THE ADD LINE IN BUFFER\nCM2      DS    0H\n         MVC   TTR,8(R2)               POINT TO THE RIGHT PLACE IN PDS\n         POINT SYSUT1,TTR              *\n         SR    R8,R8                   RECORD COUNTER\nNXTBLOCK DS    0H\n         READ  DECB,SF,SYSUT1,BLOCKIN\n         CHECK DECB                    DID IT GET HERE OK?\n         TM    DCBRECFM,X'80'          FIXED?\n         BO    FB3                     GO IF SO\n         L     R4,=A(BLOCKIN)          THE FIRST RECORD ADDRESS\n         LH    R3,0(,R4)               GET THE LENGTH\n         LA    R4,4(,R4)               MOVE TO THE 1ST RECORD\n         S     R3,=F'4'                CORRECT FOR BCW\nNEXTLINV DS    0H\n         PUT   SYSUT2V,(R4)            WRITE THE OUTPUT RECORD\n         LA    R8,1(,R8)               COUNT THE OUTPUT RECORDS\n         LH    R15,0(,R4)              MOVE TO THE NEXT RECORD\n         AR    R4,R15                  *\n         SR    R3,R15                  *\n         BP    NEXTLINV                *GO IF THERE IS MORE IN BLOCK\n         B     NXTBLOCK                ELSE GET ANOTHER BLOCK\nFB3      DS    0H\n         L     R4,=A(BLOCKIN)          FIRST RECORD ADDRESS\n         L     R1,DECB+16              THE IOB ADDRESS\n         LH    R3,DCBBLKSI             THE MAXIMUM BLOCK SIZE\n         SH    R3,14(,R1)              THE RESIDUAL COUNT\nNEXTLINF DS    0H\n         LH    R5,DCBLRECL             SOURCE RECORD LENGTH\n         PUT   SYSUT2F                 GET AN OUTPUT BUFFER\n         LR    R6,R1                   SAVE THE BUFFER ADDRESS\n         LH    R7,DCBLRECL-IHADCB(,R11)     THE TARGET LENGTH\n         O     R5,=X'40000000'         FILL CHARACTER\n         MVCL  R6,R4                   MOVE INPUT RECORD TO OUTPUT BUFF\n         LA    R8,1(,R8)               COUNT THE OUTPUT RECORDS\n         SH    R3,DCBLRECL-IHADCB(,R11)\n         BP    NEXTLINF                ANY DATA LEFT IN BUFFER\n         B     NXTBLOCK                ELSE GET ANOTHER BLOCK\nENDMEM   DS    0H\n         MVC   PRTMEM,0(R2)            PRINT AN INFORMATION LINE\n         CVD   R8,DUBL                 *\n         MVC   PRTCTR,=X'402020202020' *\n         ED    PRTCTR,DUBL+5           *\n         PUT   SYSPRINT,OUTLINE        *\n         IC    R1,11(,R2)              THE NUMBER OF USER HALFWORDS\n         N     R1,=F'31'               KILL THE TRASH BITS\n         SLL   R1,1                    DOUBLE IT FOR BYTES\n         LA    R1,12(,R1)              COMPUTE THE NEXT MEMBER'S DISP\n         AR    R2,R1                   GET THE ADDRESS\n         SR    R9,R1                   NUMBER OF BYTES REMAINING IN BLK\n         BP    NEXTMEM                 IF SOME LEFT\n         B     NXTDIR                  OTHERWISE\nENDDIR   DS    0H\n         PUT   SYSPRINT,ALLDNMSG       SAY GOOD-BYE\n         CLOSE (SYSUT1,,(R11),,SYSPRINT,,DIRECTRY)\n         L     R13,4(,R13)             GO BACK TO THE CALLER(OS?)\n         LM    R14,R12,12(R13)         *\n         SR    R15,R15                 *\n         BR    R14                     *\nFAIL1    DS    0H\n         PUT   SYSPRINT,MSG1           TELL WHY\n         ABEND 1111,DUMP\nFAIL2    PUT   SYSPRINT,MSG2           SAY WHY\n         ABEND 2222,DUMP\nSYNAD1   DS    0H\n         LR    R5,R15                  ESTABLISH ADDRESSABILITY\n         USING SYNAD1,R5               TELL THE ASSEMBLER\n         SYNADAF ACSMETH=BPAM          GET THE DIAGNOSTIC MESSAGE\n         MVC   SYNADLIN+1(62),50(R1)   MAKE IT PRINTABLE\n         PUT   SYSPRINT,SYNADLIN       PRINT IT\n         ABEND 999,DUMP\nSYSPRINT DCB   BLKSIZE=121,LRECL=121,RECFM=FA,DSORG=PS,                *\n               DDNAME=SYSPRINT,MACRF=PM\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,EODAD=ENDMEM,            *\n               SYNAD=SYNAD1\nDIRECTRY DCB   BLKSIZE=256,LRECL=256,RECFM=F,DDNAME=SYSUT1,            *\n               MACRF=GL,DSORG=PS,EODAD=ENDDIR\nSYSUT2F  DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PL\nSYSUT2V  DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM\nALLDONE  DC    X'00'\nSYNADLIN DC    CL121' '\nALLDNMSG DC    CL50'0',CL71'ALL PROCESSING COMPLETE'\nVADDLINE DC    H'33,0'\nFADDLINE DC    CL29'./ ADD LIST=ALL,NAME=????????'\n         ORG   *-8\nMEMBADD  DS    CL8\n         ORG\n         DS    0F\nTTR      DC    XL3'00'\n         DC    X'00'\nOUTLINE  DC    CL121' '\n         ORG   OUTLINE+1\n         DC    C'MEMBER '\nPRTMEM   DC    CL8' '\n         DC    C' COPIED. NUMBER OF RECORDS'\nPRTCTR   DC    CL6' '\n         ORG\nWMSG1    DC    CL121' TRUNCATION/PADDING WILL OCCUR. LRECL''S UNEQUAL'\nMSG1     DC    CL121' RECRM NOT V OF F IN SYSUT1'\nMSG2     DC    CL121' RECFM''S NOT THE SAME IN SYSUT1 AND SYSUT2'\nDUBL     DC    D'0'\n         LTORG\nBLOCKIN  DS    CL32767\n         IHADCB DSORG=PO\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPDTE": {"ttr": 20233, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x17\\x00\\x993_\\x00\\x993_\\x14S\\x01\\x17\\x01\\x19\\x00\\x00\\xd9`\\xe2\\xe3\\xe8\\xd4\\xc1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-12-01T00:00:00", "modifydate": "1999-12-01T14:53:17", "lines": 279, "newlines": 281, "modlines": 0, "user": "R-STYMA"}, "text": "         PRINT   GEN                                                    00001\n*                                                                       00002\n*  PROGRAM NAME - UPDTE                                                 00003\n*                                                                       00004\n*  FUNCTION     - RECREATE A PDS FROM A SEQUENTIAL DATASET              00005\n*                                                                       00006\n*  FILES:                                                               00007\n*    SYSPRINT   - MESSAGES, INFORMATIONAL AND DIAGNOSTIC                00008\n*    SYSUT2     - OUTPUT PDS. MEMBERS ARE REPLACED IF THEY ALREADY      00009\n*                 EXIST, OTHERWISE THEY ARE ADDED. OLD MEMBERS ARE      00010\n*                 NOT DELETED IF NOT REPLACED.                          00011\n*    SYSIN      - AN INPUT STREAM THAT LOOKS LIKE THAT FOR AN IEBUPDTE  00012\n*                 RECREATION OF A LIBRARY. HOWEVER, VARIABLE LENGTH     00013\n*                 RECORDS ARE SUPPORTED AS WELL AS NON-80 BYTE FIXED    00014\n*                 LENGTH RECORDS.                                       00015\n*                                                                       00016\n*  RESTRICTIONS - THE RECORD FORMATS OF SYSIN AND SYSUT2 MUST BE THE    00017\n*                 SAME, AND THE BLOCKSIZE OF SYSUT2 MUST BE GREATER     00018\n*                 THAN THE LRECL OF SYSIN. RENUMBERING IS NOT SUPPORTED 00019\n*                                                                       00020\n*  UPDATE BY R. E. STYMA (GTE NETWORK SYSTEMS - AUT) 08/04/83           00021\n*                 CHANGE TO ./ ADD CARD SCANNING CODE TO PROPERLY       00022\n*                 HANDLE VB RECORDS WHICH HAVE BEEN EDITED AND HAD      00023\n*                 THE TRAILING BLANKS REMOVED                           00024\n*                                                                       00025\n*                                                                       00026\n*                                                                       00027\n*                                                                       00028\n*                                                                       00029\nUPDTE    CSECT                                                          00030\n         USING UPDTE,R15                                                00031\n         SAVE  (14,12),,*                                               00032\n         LA    R2,SAVE001              *SET UP SAVEAREA LINKAGE         00033\n         ST    R13,SAVE001+4           *                                00034\n         ST    R2,8(,R13)              *                                00035\n         LR    R13,R2                  *                                00036\n         DROP  R15                                                      00037\n         USING SAVE001,R13                                              00038\n         B     SAVE001A                                                 00039\nSAVE001  DS    18F                                                      00040\nSAVE001A EQU   *                                                        00041\n         OPEN  (SYSPRINT,(OUTPUT),SYSUT2,(OUTPUT),SYSIN,(INPUT))        00042\n         LA    R12,SYSUT2              THE OUTPUT DCB ADDRESS           00043\n         USING IHADCB,R12              TELL THE ASSEMBLER WHERE IT IS   00044\n         LA    R7,SYSIN                WE NEED THIS FOR F/FB TYPES      00045\n         MVC   ALLDONE,DCBRECFM        CHECK OUT ERROR CONDITIONS       00046\n         NI    ALLDONE,X'C0'           ALL BUT RECFM BITS               00047\n         TM    ALLDONE,X'C0'           IS IT A VALID RECFM?             00048\n         BNM   ALLFAIL4                IF RECFM U, HE BLEW IT           00049\n         NC    ALLDONE,DCBRECFM-IHADCB(R7)                              00050\n         BZ    ALLFAIL5                IF NOT THE SAME, HE BLEW IT      00051\n         TM    ALLDONE,X'80'           IS IT FB?                        00052\n         BZ    CM0                     BRANCH IF NOT                    00053\n         MVC   HLDBLKSI,DCBBLKSI  SAVE THE MAXIMUM BLOCK FOR LATER      00054\n         CLC   DCBLRECL,DCBLRECL-IHADCB(R7)                             00055\n         BE    CM0                     IF THEY ARE THE SAME, NO MSG     00056\n         PUT   SYSPRINT,WMSG1          WARN HIM                         00057\nCM0      DS    0H                                                       00058\n         MVI   ALLDONE,X'00'           CLEAR THE FLAG FOR EOF TEST      00059\n         LM    R10,R11,OUTPARMS        INITIALIZE THE OUTPUT LOOP       00060\n         GET   SYSIN                                                    00061\nHEADER   DS    0H                                                       00062\n         TM    DCBRECFM-IHADCB(R7),X'80'                                00063\n         BZ    VB1                                                      00064\n         LA    R2,7(,R1)               1ST POSSIBLE ADDRESS FOR 'NAME=' 00065\n         LH    R3,DCBLRECL-IHADCB(,R7) MAXIMUM NUM OF STARTS FOR NAME=  00066\n         S     R3,=F'12'               12 = 7(./ADD) + 5(NAME=)         00067\n         B     CM1                                                      00068\nVB1      DS    0H                                                       00069\n         LA    R2,11(,R1)              1ST POSSIBLE ADDRESS FOR 'NAME=' 00070\n         LH    R3,0(,R1)               MAXIMUM NUM OF STARTS FOR NAME=  00071\n         S     R3,=F'16'               16 = 7(./ADD) + 4(RDW) +5(NAME=) 00072\nCM1      DS    0H                                                       00073\nFINDNAME DS    0H                                                       00074\n         CLC   0(5,R2),=C'NAME='       IS THIS THE PLACE?               00075\n         BE    FOUNDNM                 BRANCH IF SO                     00076\n         LA    R2,1(,R2)               ELSE TRY NEXT PLACE              00077\n         BCT   R3,FINDNAME             *                                00078\nALLFAIL3 DS    0H                                                       00079\n         PUT   SYSPRINT,MSG3           WE DIDN'T FIND NAME=             00080\n         ABEND 3333,DUMP                                                00081\nFOUNDNM  DS    0H                                                       00082\n         C     R3,=F'8'                IS THE REMAINDER GREATER THAN 8  00083\n         BNH   SKIP1                   IF NOT, USE THIS VALUE           00084\n         SPACE                                                          00085\n         LA    R3,8                    IF SO, USE 8 AS THE MAX LEN      00086\n         SPACE                                                          00087\nSKIP1    DS    0H                                                       00088\n         LA    R2,5(,R2)               THE ADDRESS OF THE MEMBER NAME   00089\n         LA    R4,0(,R2)               FIRST PLACE TO LOOK FOR DELIM    00090\nSCANNAME DS    0H                                                       00091\n         CLI   0(R4),C' '              IS IT A DELIMITER?               00092\n         BE    SCANEND                 *                                00093\n         CLI   0(R4),C','              *                                00094\n         BE    SCANEND                 *                                00095\n         LA    R4,1(,R4)               TRY THE NEXT CHARACTER           00096\n         BCT   R3,SCANNAME             *                                00097\nSCANEND  DS    0H                                                       00098\n         SR    R4,R2                   COMPUTE LENGTH AND MOVE NAME     00099\n         BCTR  R4,0                    *                                00100\n         MVC   MEMBNAME,=CL8' '        *                                00101\n         EX    R4,MOVEMNM              *                                00102\n         NOTE  SYSUT2                  *                                00103\n         ST    R1,MEMBADDR             *                                00104\nGETNEXT  DS    0H                                                       00105\n         GET   SYSIN                   MAIN LOOP START                  00106\n         TM    DCBRECFM-IHADCB(R7),X'80'                                00107\n         BZ    VB2                                                      00108\n         CLC   0(7,R1),=C'./ ADD '     IS IT ANOTHER HEADER???          00109\n         B     CM2                                                      00110\nVB2      DS    0H                                                       00111\n         CLC   4(7,R1),=C'./ ADD '     IS IT ANOTHER HEADER???          00112\nCM2      DS    0H                                                       00113\n         BE    STOWIT                  BRANCH IF IT IS                  00114\n         BAL   R9,PUTIT                PUT THE RECORD IN OUTPUT BLOCK   00115\n         B     GETNEXT                 AND GO AROUND FOR NEXT INPUT     00116\nSTOWIT   DS    0H                                                       00117\n         LR    R2,R1              SAVE THE RECORD ADDRESS               00118\n         BAL   R8,WRITEBLK        WRITE THE LAST BLOCK                  00119\n         STOW  SYSUT2,MEMBNAME,R                                        00120\n         B     *+4(R15)                TEST RETURN CODE                 00121\n         B     STOWEDR                 STOWED AS A REPLACE              00122\n         B     ALLFAIL1                ERROR CONDITION                  00123\n         B     STOWEDA                 STOWED AS AN ADD                 00124\n         B     ALLFAIL1                ERROR CONDITION                  00125\n         B     ALLFAIL1                ERROR CONDITION                  00126\n         B     ALLFAIL1                ERROR CONDITION                  00127\n         B     ALLFAIL1                ERROR CONDITION                  00128\nSTOWEDR  DS    0H                                                       00129\n         MVC   STOWMODE,=CL8'REPLACED'                                  00130\n         B     ENDTEST                                                  00131\nSTOWEDA  DS    0H                                                       00132\n         MVC   STOWMODE,=CL8'ADDED'                                     00133\nENDTEST  DS    0H                                                       00134\n         MVC   OUTMEM,MEMBNAME         BUILD AND PRINT A MESSAGE        00135\n         UNPK  OUTTTR,MEMBADDR         *                                00136\n         NC    OUTTTR,=7X'0F'          *                                00137\n         TR    OUTTTR,=C'0123456789ABCDEF'                              00138\n         MVI   OUTTTR+6,C' '           *                                00139\n         PUT   SYSPRINT,OUTLINE        *                                00140\n         CLI   ALLDONE,1               ARE WE FINISHED?                 00141\n         LR    R1,R2              RESTORE THE RECORD ADDRESS            00142\n         BNE   HEADER                                                   00143\n         PUT   SYSPRINT,ALLDNMSG                                        00144\n         CLOSE (SYSIN,,SYSUT2,,SYSPRINT)                                00145\n         L     R13,4(,R13)             *GO BACK TO THE CALLER           00146\n         LM    R14,R12,12(R13)         *                                00147\n         SR    R15,R15                 *                                00148\n         BR    R14                     *                                00149\nALLFAIL1 DS    0H                                                       00150\n         PUT   SYSPRINT,MSG1           PRINT AN INDICATION              00151\n         ABEND 1111,DUMP                                                00152\nEOF      DS    0H                                                       00153\n         MVI   ALLDONE,1               REMEMBER WE'RE ALL DONE          00154\n         B     STOWIT                                                   00155\nPUTIT    DS    0H                                                       00156\n         LTR   R10,R10                 IS IT THE FIRST TIME?            00157\n         BNM   NOT1ST                  *                                00158\n         LH    R10,DCBBLKSI            INITIALIZE THE LOOP ELEMENTS     00159\n         L     R11,=A(OUTBLOCK)        *                                00160\n         TM    DCBRECFM,X'80'          *                                00161\n         BO    CM3                     *                                00162\n         S     R10,=F'4'               *                                00163\n         LA    R11,4(,R11)             *                                00164\nCM3      DS    0H                                                       00165\nNOT1ST   DS    0H                                                       00166\n         TM    DCBRECFM,X'80'                                           00167\n         BZ    VB4                                                      00168\n         CH    R10,DCBLRECL            IS THERE ENOUGH ROOM?            00169\n         BNL   MOVEIN                  BRANCH IF THERE IS               00170\n         B     CM4                                                      00171\nVB4      DS    0H                                                       00172\n         CH    R10,0(,R1)              IS THERE ENOUGH ROOM             00173\n         BNL   MOVEIN                  BRANCH IF THERE IS               00174\n         CLC   DCBBLKSI,0(R1)          COULD THERE BE ENOUGH ROOM?      00175\n         BL    ALLFAIL2                BRANCH IF NOT                    00176\nCM4      DS    0H                                                       00177\n         LA    R8,MOVEIN               NORMAL USAGE                     00178\nWRITEBLK DS    0H                                                       00179\n         L     R11,=A(OUTBLOCK)        BEGINNING OF THE BLOCK           00180\n         LR    R2,R1                   SAVE THE RECORD ADDRESS          00181\n         LCR   R10,R10                 THE AMOUNT LEFT UNUSED           00182\n         AH    R10,DCBBLKSI            COMPUTE THE AMOUNT USED          00183\n         TM    DCBRECFM,X'80'                                           00184\n         BZ    VB5                                                      00185\n         STH   R10,DCBBLKSI            CALL IT BLOCK SIZE               00186\n         WRITE DECBFB,SF,SYSUT2,(R11),'S'                               00187\n         CHECK DECBFB                                                   00188\n         MVC   DCBBLKSI,HLDBLKSI       RESTORE THE ORIGINAL BLKSIZE     00189\n         B     CM5                                                      00190\nVB5      DS    0H                                                       00191\n         STH   R10,0(,R11)             AND CALL IT BLOCK SIZE           00192\n         WRITE DECB,SF,SYSUT2,(R11)                                     00193\n         CHECK DECB                    MAKE SURE THE RECORD IS OUT OK   00194\nCM5      DS    0H                                                       00195\n         LH    R10,DCBBLKSI            RE-INITIALIZE THE LOOP           00196\n         L     R11,=A(OUTBLOCK)        *                                00197\n         TM    DCBRECFM,X'80'          *                                00198\n         BO    CM6                     *                                00199\n         S     R10,=F'4'               *                                00200\n         LA    R11,4(,R11)             *                                00201\nCM6      DS    0H                                                       00202\n         LR    R1,R2                   RESTORE THE RECORD ADDRESS       00203\n         BR    R8                      GO BACK TO USER                  00204\nMOVEIN   DS    0H                                                       00205\n         LR    R2,R1                   SET UP THE FOUR REGS FOR MVCL    00206\n         LR    R4,R11                  *                                00207\n         TM    DCBRECFM,X'80'          *                                00208\n         BO    FB7                     *                                00209\n         LH    R3,0(,R2)               *                                00210\n         LR    R5,R3                   *                                00211\n         LR    R15,R5                  SAVE THE LENGTH                  00212\n         B     CM7                     *                                00213\nFB7      DS    0H                      *                                00214\n         LH    R3,DCBLRECL-IHADCB(R7)  *                                00215\n         LH    R5,DCBLRECL             *                                00216\n         LR    R15,R5                  SAVE THE LENGTH                  00217\n         O     R5,=X'40000000'         *                                00218\nCM7      DS    0H                      *                                00219\n         MVCL  R4,R2                   PUT THE RECORD IN THE OUTPUT     00220\n         AR    R11,R15                 ADJUST THE LOOP REGISTERS        00221\n         SR    R10,R15                 *                                00222\n         BR    R9                      GO BACK TO THE MAIN ROUTINE      00223\nALLFAIL2 DS    0H                                                       00224\n         PUT   SYSPRINT,MSG2           SOME INDICATION                  00225\n         ABEND 2222,DUMP                                                00226\nALLFAIL4 DS    0H                                                       00227\n         PUT   SYSPRINT,MSG4                                            00228\n         ABEND 444,DUMP                                                 00229\nALLFAIL5 DS    0H                                                       00230\n         PUT   SYSPRINT,MSG5                                            00231\n         ABEND 555,DUMP                                                 00232\nSYSPRINT DCB   BLKSIZE=121,LRECL=121,RECFM=FBA,DDNAME=SYSPRINT,        *00233\n               DSORG=PS,MACRF=PM                                        00234\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EOF,MACRF=GL                 00235\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PO,MACRF=W                           00236\nOUTPARMS DC    F'-1,-1'                                                 00237\nMEMBNAME DC    CL8' '                                                   00238\nMEMBADDR DC    F'0'                                                     00239\nMOVEMNM  MVC   MEMBNAME(0),0(R2)                                        00240\nOUTLINE  DC    CL121' '                                                 00241\n         ORG   OUTLINE+1                                                00242\n         DC    C'MEMBER NAME '                                          00243\nOUTMEM   DC    CL8' '                                                   00244\n         DC    C'   TTR '                                               00245\nOUTTTR   DC    CL7' '                                                   00246\n         DC    C'    '                                                  00247\nSTOWMODE DC    CL8' '                                                   00248\n         ORG                                                            00249\nWMSG1    DC    CL121' WARNING: TRUNCATION OR PADDING OF RECORDS WILL OC*00250\n               CUR BECAUSE LRECL''S ARE NOT THE SAME'                   00251\nHLDBLKSI DC    H'0'                                                     00252\nMSG1     DC    CL121'-BAD RETURN CODE FROM STOW. SEE R15 IN DUMP'       00253\nMSG2     DC    CL121'-BAD LRECL/BLKSIZE MATCH. SEE RECORD AT 2R%'       00254\nMSG3     DC    CL121'-INVALID ./ ADD. NO \"NAME=\" FOUND.'                00255\nMSG4     DC    CL121'-INVALID RECFM. NOT F OR V'                        00256\nMSG5     DC    CL121'-RECFM''S NOT THE SAME IN SYSIN AND SYSUT2'        00257\nALLDNMSG DC    CL60' ',CL61'               ALL PROCESSING COMPLETED'    00258\nALLDONE  DC    X'00'                                                    00259\n         LTORG                                                          00260\nOUTBLOCK DS    CL32767                                                  00261\n         DCBD  DSORG=PO                                                 00262\nR0       EQU   0                                                        00263\nR1       EQU   1                                                        00264\nR2       EQU   2                                                        00265\nR3       EQU   3                                                        00266\nR4       EQU   4                                                        00267\nR5       EQU   5                                                        00268\nR6       EQU   6                                                        00269\nR7       EQU   7                                                        00270\nR8       EQU   8                                                        00271\nR9       EQU   9                                                        00272\nR10      EQU   10                                                       00273\nR11      EQU   11                                                       00274\nR12      EQU   12                                                       00275\nR13      EQU   13                                                       00276\nR14      EQU   14                                                       00277\nR15      EQU   15                                                       00278\n         END                                                            00279\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UPDTE$": {"ttr": 20238, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x08\\x00\\x99\\x16\\x0f\\x01 \\x11?##\\x00\\x1d\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-06-09T00:00:00", "modifydate": "2020-04-22T23:23:08", "lines": 29, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT499.FILE093\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT499.FILE093(UPDTE)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB499093\n SETCODE AC(0)\n NAME    UPDTE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT093/FILE093.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT093", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}