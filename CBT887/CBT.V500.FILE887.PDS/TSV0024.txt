//SCOTTZ   JOB 'TSV0024 UMOD',NOTIFY=SCOTT,
//             CLASS=S,MSGCLASS=X,MSGLEVEL=(1,1)
//*
//*   NAME:    SYS2.USERMODS(TSV0024 )
//*   PURPOSE: TO INSTALL USERMOD TSV0024 WHICH UPDATES THE SMF
//*            CONTROL TABLE (IEESMCA) AND THE SMF INITILIZATION ROUTER
//*            (IEEMB820) SO THAT THE CONTOL TABLE NOW HAVE THE IPL
//*            DATE AND TIME CONTAINED WITHIN IT.
//*            CODE CLEAN-UP IN IEEMB820 AND ADD SOME DOCUMENTATION.
//*            MODIFIED IEEMB821 TO PERMIT COMMENT LINES, WHERE THSE
//*            LINES START WITH EITHER AN * OR A # IN COLUMN 1.
//*
//*
//*
//*   NOTE(S):*A RE-IPL IS REQUIRED.
//*            FOR THE SOURCE TO ASSEMBLE CORRECTLY, THE DDNAME/
//*            DSNAME MUST INCLUDE IN THE SYSLIB CONCATINATION, BEFORE
//*            SYS1.AMODGEN, THE DATASET SYS1.MODGEN.  THIS DATASET
//*            IS CREATED IN TSV0000.
//*           *WARNING: YOU MAY FIND THAT SYS1.SAMPLIB MAY NEED TO BE
//*                     EXPANDED.
//*
//RR     EXEC SMP,
//           RVOL=MVSRES
//SMPCNTL  DD *
  REJECT  S(TSV0024) .
   RESETRC .
  RESTORE S(TSV0024) .
   RESETRC .
/*
//RECV   EXEC SMP,
//           RVOL=MVSRES
//SMPPTFIN DD  *
++USERMOD(TSV0024) .
++VER(Z038) FMID(EBB1102) .
++MAC(IEESMCA)  DISTLIB(AMODGEN) SYSLIB(MODGEN) .
*
*        %GOTO SMCAL1;      /*
         MACRO
         IEESMCA  ,   */
*%SMCAL1 : ;
*
*/*           SYSTEM MANAGEMENT FACILITIES CONTROL TABLE             */
*/*                                                                  */
*/*  OS/VS2 RELEASE 3 PTF UZ10430 , 4/5/77, LEVEL=2          @ZA18120*/
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - A DSECT IS PRODUCED AND A USING ON SMCABASE GIVES    */
*/*             ADDRESSABILITY FOR ALL SYMBOLS.                      */
*/*      PL/S - %INCLUDE SYSLIB(CVT) TO DEFINE CVTSMCA               */
*/*                                                                  */
*/*  NOTE                                                            */
*/*      THIS TABLE IS LOCATED IN SQS-SUBPOOL 255                    */
*/*      AND IS POINTED TO BY CVTSMCA                                */
*
*%GOTO SMCAL2;  /*
.* 138000,210000,798000,936000                                    20011
.* 144000-150000,552000-606000,630000-654000,696000-714000,       M0435
.* 732000,858000-876000                                           M0435
.*                                                                 *SKV
.* SKV 07/26/2008  ADDED ADDITIONAL FIELDS: SMCAITME AND SMCAIDTE  *SKV
.*                                                                 *SKV
.* (C) SMCAJWT - RE-DEFINE FIELD CONTENTS                      @ZA18120
         SPACE 1
SMCABASE DSECT
         SPACE 1
         IEZBITS , -          SYMBOLIC BIT DEFINITIONS
         SPACE 1
SMCAOPT  DS    B -            SMFDEFLT OPTIONS SELECTED AT
*                             INITIALIZATION TIME.  THE OPTIONS APPLY
*                             TO BACKGROUND PROCESSING.  SMCAFOPT
*                             (OFFSET 82) CONTAINS THE FOREGROUND
*                             OPTIONS.
SMCAOPT1 EQU   BIT0 -         JOB ACCOUNTING (OPT=1)
SMCAOPT2 EQU   BIT1 -         STEP ACCOUNTING (OPT=2)
SMCAEXT  EQU   BIT2 -         USER EXITS WILL BE TAKEN (EXT=YES)
SMCADSA  EQU   BIT3 -         DATA SET ACCOUNTING (DSV=2 OR 3)    19028
SMCAVOL  EQU   BIT4 -         VOLUME ACCOUNTING (DSV=1 OR 3)      19028
SMCARS01 EQU   BIT5,,C'X' -   RESERVED
SMCATDS  EQU   BIT6 -         TYPE 17 RECORDS MAINTAINED FOR TEMPORARY
*                             DATA SETS (REC=2 OR 3)              19028
SMCAFGND EQU   BIT7 -         SMF FOREGROUND OPTIONS BIT.  IF 0, ABOVE
*                             BITS DESCRIBE BACKGROUND OPTIONS.  IF 1,
*                             ABOVE BITS DESCRIBE FOREGROUND OPTIONS.
*                                                                 20011
SMCAMISC DS    B -            MISCELLANEOUS INDICATORS
SMCAUSER EQU   BIT0 -         SMF RECORDING REQUESTED
SMCAMAN  EQU   BIT1 -         SYS1.MAN DATA SET IS/IS NOT PRESENT
*                             BITS 0 AND 1 MEAN
*                             00 - NO SMF RECORDING REQUESTED
*                                  (MAN=NONE)
*                             01 - ONLY USER RECORDS TO BE RECORDED
*                                  (MAN=USER)
*                             10 - INVALID COMBINATION
*                             11 - SMF AND USER RECORDING REQUESTED
*                                  (MAN=ALL)
SMCAOPI  EQU   BIT2 -         IF 0, OPERATOR MAY CHANGE SMF FOREGROUND
*                             OPTIONS WHEN HE ISSUES A TSO START
*                             COMMAND OR TSO MODIFY COMMAND (OPI=YES).
*                             IF 1, OPERATOR MAY NOT CHANGE SMF
*                             FOREGROUND OPTIONS (OPI=NO).        20011
SMCAFIRT EQU   BIT3 -         SMF DATA SET TO BE OPENED
SMCAPSDP EQU   BIT4 -         PSEUDO-DUMP SWITCH
*                             (DEVICE SWITCHING ONLY)
SMCADBSY EQU   BIT5 -         DUMP IS BUSY (SMF WRITER)
SMCABSW  EQU   BIT6 -         BUFFER SWITCH.  IF 0, LEFT HALF OF BUFFER
*                             IN USE.  IF 1, RIGHT HALF OF BUFFER IN
*                             USE.
SMCADUMP EQU   BIT7 -         DUMP BUSY
SMCATOFF DS    H -            OFFSET OF THE FIRST SMF TIOT ENTRY FROM
*                             THE BEGINNING OF THE MASTER SCHEDULER
*                             TIOT
SMCATIOT DS    A -            ADDRESS OF THE MASTER SCHEDULER TIOT
*
* THE FOLLOWING FIELDS ARE SET UP BY IPL INITIALIZATION
*
SMCAJWT  DS    F -            JOB WAIT TIME LIMIT IN MICROSEC. @ZA18120
*                             TIMER UNITS. DERIVED FROM JWT IN @ZA18120
*                             SMFDEFLT.                        @ZA18120
SMCABUF  DS    0F -           SMF BUFFER SIZE IN BYTES.  AT
*                             INITIALIZATION, IT CONTAINS BUF=VALUE.
SMCABSIZ DS    F -            AFTER IPL, IT CONTAINS THE BUFFER WORKING
*                             SIZE
SMCASID  DS    CL4 -          SYSTEM IDENTIFICATION (SID)        MDC002
SMCABUFP DS    A -            ADDRESS OF THE SMF BUFFER
*
* SMF DEVICE CHARACTERISTICS
*
*  CURRENT RECORDING DATA SET
*
*        WHEN THE SMF RECORDING DEVICE IS A DIRECT ACCESS DEVICE,
*        THE FOLLOWING FIELDS MAY DESCRIBE EITHER THE PRIMARY OR
*        ALTERNATE DATA SET, WHICHEVER IS CURRENTLY BEING WRITTEN.
*
SMCAPDEV DS    CL6 -          VOLUME SERIAL NUMBER OF THE CURRENTLY
*                             USED SMF DATA SET
SMCAPSTA DS    B -            CURRENTLY USED SMF DATA SET DEVICE STATUS
SMCAPNAV EQU   BIT0 -         DATA SET IS NOT AVAILABLE FOR RECORDING
SMCAPTAP EQU   BIT1 -         THE SMF RECORDING DEVICE IS A MAGNETIC
*                             TAPE DEVICE
SMCAPDA  EQU   BIT2 -         THE SMF RECORDING DEVICE IS A DIRECT
*                             ACCESS DEVICE
SMCAPMTY EQU   BIT3 -         THE DATA SET IS READY TO USE
SMCAMOD  EQU   BIT4 -         OPEN MODULE
SMCARS02 EQU   BIT5,,C'X' -   RESERVED
SMCAPUNT EQU   BIT6 -         A DEVICE ADDRESS WAS SPECIFIED FOR THE
*                             SMF DATA SET AT SYSTEM INITIALIZATION
SMCAPVOL EQU   BIT7 -         A VOLUME SERIAL NUMBER WAS SPECIFIED FOR
*                             THE SMF DATA SET AT SYSTEM INITIALIZATION
SMCAPDAR DS    CL3 -          CURRENTLY USED SMF DATA SET DEVICE
*                             ADDRESS (EBCDIC)
SMCAPLBL DS    B -            LABEL STATUS OF THE CURRENTLY USED SMF
*                             DATA SET
SMCARS03 EQU   BIT0,,C'X' -   RESERVED
SMCARS04 EQU   BIT1,,C'X' -   RESERVED
SMCARS05 EQU   BIT2,,C'X' -   RESERVED
SMCARS06 EQU   BIT3,,C'X' -   RESERVED
SMCARS07 EQU   BIT4,,C'X' -   RESERVED
SMCAPNSL EQU   BIT5 -         NON-STANDARD LABEL (NSL)
SMCAPSL  EQU   BIT6 -         STANDARD LABEL (SL)
SMCAPNL  EQU   BIT7 -         NO LABEL (NL)
SMCAXORY DS    C -            AN EBCDIC X OR Y CORRESPONDING TO THE
*                             DATA SET THAT IS TO RECEIVE THIS ENTRY
SMCAPDCB DS    A -            ADDRESS OF THE CURRENTLY USED SMF DATA
*                             SET DCB
*
* DATA SET NOT CURRENTLY IN USE
*
*        WHEN THE SMF RECORDING DEVICE IS A DIRECT ACCESS DEVICE,
*        THE FOLLOWING FIELDS MAY DESCRIBE EITHER THE PRIMARY OR
*        ALTERNATE DATA SET, WHICHEVER IS CURRENTLY NOT IN USE.
*
SMCAADEV DS    CL6 -          VOLUME SERIAL NUMBER OF THE NON-CURRENT
*                             SMF DATA SET
SMCASTA  DS    B -            NON-CURRENT SMF DATA SET DEVICE STATUS.
*                             BIT SETTINGS ARE SAME AS FOR SMCAPSTA.
SMCAADAR DS    CL3 -          NON-CURRENT SMF DATA SET DEVICE ADDRESS
SMCAALBL DS    B -            LABEL STATUS OF THE NON-CURRENT SMF DATA
*                             SET.  BIT SETTINGS ARE SAME AS FOR
*                             SMCAPLBL.
SMCAYORX DS    C -            AN EBCDIC X OR Y CORRESPONDING TO THE
*                             DATA SET THAT IS TO RECEIVE THIS ENTRY
SMCAADCB DS    A -            ADDRESS OF THE NON-CURRENT SMF DATA
*                             SET DCB
*
* SMF ECB'S
*
SMCAWECB DS    CL4 -          WRITE REQUEST ECB WAITED UPON BY THE SMF
*                             WRITER.  POSTED BY IGC0008C WHEN A WRITE
*                             IS REQUESTED.
SMCABECB DS    CL4 -          ECB FOR THE SMF BUFFER
SMCASGWR DS    F -            IF THE LOGICAL RECORD EXCEEDS 1/2 THE
*                             BUFFER SIZE, THIS FIELD INDICATES THE
*                             NUMBER OF BUFFER LOADS REQUIRED TO
*                             ACCOMMODATE THE RECORD
SMCASGFT DS    F -            THE NUMBER OF RECORD SEGMENTS (BUFFER
*                             LOADS) THAT WILL FIT IN THE DATA SET
*
* MISCELLANEOUS POINTERS AND COMMUNICATION AREAS
*
SMCAWAIT DS    2F -           THE ACCUMULATED WAIT TIME, EXPRESSED IN
*                             26 USEC TIMER UNITS.  FIRST WORD IS
*                             OVERFLOW FROM SECOND WORD.
SMCAENTY DS    0CL2 -         THESE SWITCHES GOVERN ENTRY CONDITIONS
*                             FOR DEVICE SWITCHING/ALLOCATION/
*                             OPENING ROUTINES
SMCAENDI DS    B -            A COMMUNICATION FIELD
SMCARS14 EQU   BIT0,,C'X' -   RESERVED
SMCARS15 EQU   BIT1,,C'X' -   RESERVED
SMCARS16 EQU   BIT2,,C'X' -   RESERVED
SMCARS17 EQU   BIT3,,C'X' -   RESERVED
SMCARS18 EQU   BIT4,,C'X' -   RESERVED
SMCARS19 EQU   BIT5,,C'X' -   RESERVED
SMCARS20 EQU   BIT6,,C'X' -   RESERVED
SMCADSNF EQU   BIT7 -         IF ZERO, DATA SET (X OR Y) WAS FOUND.
*                             IF ONE, DATA SET (X OR Y) WAS NOT FOUND.
SMCAENOP DS    C -            ENTRY CODE THAT INDICATES WHICH LOAD OF
*                             SVC 83 HAS PASSED CONTROL TO CURRENT LOAD
SMCAFOPT DS    B -            SMF FOREGROUND OPTIONS.
*                             BIT SETTINGS ARE SAME AS SMCAOPT.   20011
SMCAENAL DS    X -            RESERVED
SMCAWRTP DS    F -            AN OPTIMUM BUFFER LOAD DISPLACEMENT
*                             FIGURE.  WHEN THE BUFFER IS LOADED TO OR
*                             BEYOND THIS POINT, IT WILL BE WRITTEN TO
*                             THE SMF DATA SET.
*
* XCTL REMOTE LIST USED BY SVC 83
*
SMCAXCTL DS    A -            ADDRESS OF THE NAME OF THE ROUTINE TO
*                             WHICH XCTL IS TO PASS CONTROL
         DS    A -            DCB POINTER.  ALWAYS ZERO ACCORDING TO
*                             THE XCTL MACRO INSTRUCTION FORMAT.
SMCAXNAM DS    CL8 -          NAME OF THE ROUTINE TO WHICH XCTL IS TO
*                             PASS CONTROL
SMCASWA  DS    B -            INDICATOR BITS
SMCASWAR EQU   BIT0 -         RESERVED                            19028
SMCADSTR EQU   BIT1 -         DISASTER BIT.  BOTH DATA SETS ARE FULL.
*                             SMF IS NOT RECORDING.               19028
SMCAOPFL EQU   BIT2 -         OPEN FAILURE ON SMF DATA SET.  SMF IS
*                             NOT RECORDING.                      19028
SMCANADA EQU   BIT3 -         NEXT ALLOCATION MUST BE FOR A DIRECT
*                             ACCESS DEVICE                       19028
SMCANAVL EQU   BIT4 -         ALLOCATION SEARCH IS BY VOLUME SERIAL
*                             NUMBER                              19028
SMCAZEOD EQU   BIT5 -         SMF HALT END-OF-DAY IS PROCESSING   19028
SMCADSSP EQU   BIT6 -         ENTRY TO THE WRITER IS FOR A SPACE CHECK
*                             OF THE DATA SET                     19028
SMCADSSW EQU   BIT7 -         ENTRY TO THE WRITER IS FOR DATA SET
*                             SWITCHING ONLY                      19028
SMCASWB  DS    B -            RESERVED
SMCASWC  DS    B -            RESERVED
SMCASWD  DS    B -            RESERVED
SMCADSTM DS    CL8 -          START TIME AND DATE AT WHICH NO DATA SET
*                             WAS AVAILABLE TO RECORD ON.  APPEARS IN
*                             PACKED DECIMAL IN THE FORM 00YYDDDF
*                             WHERE 00 = ZEROS, YY = LAST 2 DIGITS OF
*                             THE YEAR, DDD = DAY OF THE YEAR AND F IS
*                             A SIGN.
SMCADSCT DS    F -            THE NUMBER OF SMF RECORDS THAT HAVE BEEN
*                             OMITTED FROM THE SMF DATA SET DUE TO THE
*                             UNAVAILABILITY OF A DATA SET TO RECORD ON
SMCAASCB DS    0A -           CURRENT TASK ASCB ADDRESS (OS/VS2) MDC005
SMCAPOST DS    H -            RESERVED (OS/VS1)                  MDC003
SMCATJID DS    CL2 -          CURRENT TASK TJID (OS/VS1)         MDC004
SMCARS21 DS    F -            RESERVED
SMCASAVE DS    A -            USER EXIT ADDRESS SAVE FIELD (OS/VS2)
*                             (MDC300)                         @ZA02385
SMCATEXP DS    F -            TIME OF MOST RECENT EXPIRATION OF A
*                             TEN-MINUTE TIMER QUEUE ELEMENT (TQE)
*                                                                ICB310
SMCAPGIN DS    0F -           NUMBER OF PAGE-INS PERFORMED (OS/VS1)
*                             (MDC371)                         @ZA07764
SMCADOMX DS    F -            MANX DOM WTO ID (OS/VS2)
*                             (MDC373)                         @ZA07764
SMCAPGOT DS    0F -           NUMBER OF PAGE-OUTS PERFORMED (OS/VS1)
*                             (MDC372)                         @ZA07764
SMCADOMY DS    F -            MANY DOM WTO ID (OS/VS2)
*                             (MDC374)                         @ZA07764
SMCAPGRL DS    F -            NUMBER OF PAGES RECLAIMED.  RECLAMATION
*                             RESULTS WHEN A PAGE IS NEEDED TO SATISFY
*                             A PAGE FAULT BUT DOES NOT HAVE TO BE
*                             RETRIEVED FROM AUXILIARY STORAGE BECAUSE
*                             IT IS RESIDENT IN REAL MAIN STORAGE
*                             AWAITING PAGE-OUT.                 ICB310
SMCARGNS DS    F -            NUMBER OF REGIONS SWAPPED IN AND
*                             OUT                                ICB310
SMCASPIN DS    F -            NUMBER OF SWAP PAGE-INS            ICB310
SMCASPOT DS    F -            NUMBER OF SWAP PAGE-OUTS           ICB310
SMCARGNM DS    F -            NUMBER OF REGIONS MIGRATED         ICB310
SMCAPGM  DS    F -            NUMBER OF PAGES MIGRATED           ICB310
SMCAU83  DS    A -            ADDRESS OF SMF OUTPUT EXIT (IEFU83)
*                             TAKEN WHEN RECORDS ARE TO BE WRITTEN TO
*                             AN SMF DATA SET                    ICB407
SMCAWTCB DS    A -            ADDRESS OF SMF WRITER'S TCB - USED BY
*                             XMPOST ERROR PROCESSOR (IEEMB827)
*                             (OS/VS2)                           MDC006
SMCASTCB DS    A -            ADDRESS OF SMF SVC CURRENTLY WAITING FOR
*                             WRITER - USED BY XMPOST ERROR PROCESSOR
*                             (IEEMB827)  (OS/VS2)               MDC007
SMCAITME DS    CL4 -          IPL TIME IN BINARY IN HUNDREDTHS OF  *SKV
*                             A SECOND.  REFERENCE ONLY.           *SKV
SMCAIDTE DS    CL4 -          IPL DATE (0CYYDDDF)                  *SKV
*                             REFERENCE ONLY.                      *SKV
SMCASMCA DS    CL4 -          SMCA EYECATCHER                      *SKV
SMCAEND  EQU   *
SMCASIZE EQU   SMCAEND-SMCABASE - SIZE OF SMCA TABLE
TDEVSIZE EQU   SMCAADEV-SMCAPDEV - SIZE OF DEVICE ENTRY
         MEND  , */
*   %SMCAL2 :  ;
*
*   DECLARE
*     1 SMCABASE BASED(CVTSMCA) BDY(WORD),
*      2 SMCAOPT     CHAR(1),            /* SMFDEFLT OPTIONS SELECTED
*                                           AT INITIALIZATION TIME.
*                                           THE OPTIONS APPLY TO
*                                           BACKGROUND PROCESSING.
*                                           SMCAFOPT (OFFSET 82)
*                                           CONTAINS THE FOREGROUND
*                                           OPTIONS.                 */
*       3 SMCAOPT1 BIT(1),               /* JOB ACCOUNTING (OPT=1)   */
*       3 SMCAOPT2 BIT(1),               /* STEP ACCOUNTING (OPT=2)  */
*       3 SMCAEXT  BIT(1),               /* USER EXITS WILL BE TAKEN
*                                           (EXT=YES)                */
*       3 SMCADSA  BIT(1),               /* DATA SET ACCOUNTING
*                                           (DSV=2 OR 3)        19028*/
*       3 SMCAVOL  BIT(1),               /* VOLUME ACCOUNTING
*                                           (DSV=1 OR 3)        19028*/
*       3 SMCARS01 BIT(1),               /* RESERVED           ICB441*/
*       3 SMCATDS  BIT(1),               /* TYPE 17 RECORDS
*                                           MAINTAINED FOR TEMPORARY
*                                           DATA SETS (REC=2 OR 3)
*                                                               19028*/
*       3 SMCAFGND BIT(1),               /* SMF FOREGROUND OPTIONS
*                                           BIT.  IF 0, ABOVE BITS
*                                           DESCRIBE BACKGROUND
*                                           OPTIONS.  IF 1, ABOVE
*                                           BITS DESCRIBE FOREGROUND
*                                           OPTIONS             20011*/
*      2 SMCAMISC    CHAR(1),            /* MISCELLANEOUS INDICATORS */
*       3 SMCAUSER BIT(1),               /* SMF RECORDING REQUESTED  */
*       3 SMCAMAN  BIT(1),               /* SYS1.MAN DATA SET
*                                           IS/IS NOT PRESENT.
*                                           BITS 0 AND 1 MEAN
*                                           00 - NO SMF RECORDING
*                                                REQUESTED (MAN=NONE)
*                                           01 - ONLY USER RECORDS TO
*                                                BE RECORDED (MAN=USER)
*                                           10 - INVALID COMBINATION
*                                           11 - SMF AND USER
*                                                RECORDING REQUESTED
*                                                (MAN=ALL)           */
*       3 SMCAOPI  BIT(1),               /* IF 0, OPERATOR MAY CHANGE
*                                           SMF FOREGROUND OPTIONS
*                                           WHEN HE ISSUES A TSO
*                                           START COMMAND OR TSO
*                                           MODIFY COMMAND (OPI=YES).
*                                           IF 1, OPERATOR MAY NOT
*                                           CHANGE SMF FOREGROUND
*                                           OPTIONS (OPI=NO).   20011*/
*       3 SMCAFIRT BIT(1),               /* SMF DATA SET TO BE
*                                           OPENED                   */
*       3 SMCAPSDP BIT(1),               /* PSEUDO-DUMP SWITCH
*                                           (DEVICE SWITCHING ONLY)  */
*       3 SMCADBSY BIT(1),               /* DUMP IS BUSY (SMF WRITER)*/
*       3 SMCABSW  BIT(1),               /* BUFFER SWITCH.  IF 0,
*                                           LEFT HALF OF BUFFER IN
*                                           USE.  IF 1, RIGHT HALF OF
*                                           BUFFER IN USE.           */
*       3 SMCADUMP BIT(1),               /* DUMP BUSY                */
*      2 SMCATOFF    FIXED(15),          /* OFFSET OF THE FIRST SMF
*                                           TIOT ENTRY FROM THE
*                                           BEGINNING OF THE MASTER
*                                           SCHEDULER TIOT           */
*      2 SMCATIOT    PTR(31),            /* ADDRESS OF THE MASTER
*                                           SCHEDULER TIOT           */
*   /*                                                               */
*   /* THE FOLLOWING FIELDS ARE SET UP BY IPL INITIALIZATION         */
*   /*                                                               */
*      2 SMCAJWT     FIXED(31),          /* JOB WAIT TIME LIMIT IN
*                                           MICROSECOND TIMER UNITS.
*                                           DERIVED FROM JWT IN
*                                           SMFDEFLT.        @ZA18120*/
*      2 SMCABUF     FIXED(31),          /* SMF BUFFER SIZE IN BYTES.
*                                           AT INITIALIZATION, IT
*                                           CONTAINS BUF=VALUE.      */
*       3 SMCABSIZ    FIXED(31),         /* AFTER IPL, IT CONTAINS
*                                           THE BUFFER WORKING SIZE  */
*      2 SMCASID     CHAR(4),            /* SYSTEM IDENTIFICATION
*                                           (SID)              MDC002*/
*      2 SMCABUFP    PTR(31),            /* ADDRESS OF THE SMF BUFFER*/
*   /*                                                               */
*   /* SMF DEVICE CHARACTERISTICS                                    */
*   /*                                                               */
*   /* CURRENT RECORDING DATA SET                                    */
*   /*                                                               */
*   /*   WHEN THE SMF RECORDING DEVICE IS A DIRECT ACCESS DEVICE,    */
*   /*   THE FOLLOWING FIELDS MAY DESCRIBE EITHER THE PRIMARY OR     */
*   /*   ALTERNATE DATA SET, WHICHEVER IS CURRENTLY BEING WRITTEN.   */
*   /*                                                               */
*      2 SMCAPDEV    CHAR(6) BDY(WORD),  /* VOLUME SERIAL NUMBER OF
*                                           THE CURRENTLY USED SMF
*                                           DATA SET                 */
*      2 SMCAPSTA    CHAR(1),            /* CURRENTLY USED SMF DATA
*                                           SET DEVICE STATUS        */
*       3 SMCAPNAV BIT(1),               /* DATA SET IS NOT AVAILABLE
*                                           FOR RECORDING            */
*       3 SMCAPTAP BIT(1),               /* THE SMF RECORDING DEVICE
*                                           IS A MAGNETIC TAPE DEVICE*/
*       3 SMCAPDA  BIT(1),               /* THE SMF RECORDING DEVICE
*                                           IS A DIRECT ACCESS DEVICE*/
*       3 SMCAPMTY BIT(1),               /* THE DATA SET IS READY TO
*                                           USE                      */
*       3 SMCAMOD  BIT(1),               /* OPEN MODULE              */
*       3 SMCARS02 BIT(1),               /* RESERVED                 */
*       3 SMCAPUNT BIT(1),               /* A DEVICE ADDRESS WAS
*                                           SPECIFIED FOR THE SMF
*                                           DATA SET AT SYSTEM
*                                           INITIALIZATION           */
*       3 SMCAPVOL BIT(1),               /* A VOLUME SERIAL NUMBER
*                                           WAS SPECIFIED FOR THE SMF
*                                           DATA SET AT SYSTEM
*                                           INITIALIZATION           */
*      2 SMCAPDAR    CHAR(3),            /* CURRENTLY USED SMF DATA
*                                           SET DEVICE ADDRESS
*                                           (EBCDIC)                 */
*      2 SMCAPLBL    CHAR(1),            /* LABEL STATUS OF THE
*                                           CURRENTLY USED SMF DATA
*                                           SET                      */
*       3 SMCARS03 BIT(1),               /* RESERVED                 */
*       3 SMCARS04 BIT(1),               /* RESERVED                 */
*       3 SMCARS05 BIT(1),               /* RESERVED                 */
*       3 SMCARS06 BIT(1),               /* RESERVED                 */
*       3 SMCARS07 BIT(1),               /* RESERVED                 */
*       3 SMCAPNSL BIT(1),               /* NON-STANDARD LABEL (NSL) */
*       3 SMCAPSL  BIT(1),               /* STANDARD LABEL (SL)      */
*       3 SMCAPNL  BIT(1),               /* NO LABEL (NL)            */
*      2 SMCAXORY    CHAR(1),            /* AN EBCDIC X OR Y
*                                           CORRESPONDING TO THE
*                                           DATA SET THAT IS TO
*                                           RECEIVE THIS ENTRY       */
*      2 SMCAPDCB    PTR(31),            /* ADDRESS OF THE CURRENTLY
*                                           USED SMF DATA SET DCB    */
*   /*                                                               */
*   /* DATA SET NOT CURRENTLY IN USE                                 */
*   /*                                                               */
*   /*   WHEN THE SMF RECORDING DEVICE IS A DIRECT ACCESS DEVICE,    */
*   /*   THE FOLLOWING FIELDS MAY DESCRIBE EITHER THE PRIMARY OR     */
*   /*   ALTERNATE DATA SET, WHICHEVER IS CURRENTLY NOT IN USE.      */
*   /*                                                               */
*      2 SMCAADEV    CHAR(6) BDY(WORD),  /* VOLUME SERIAL NUMBER OF
*                                           THE NON-CURRENT SMF DATA
*                                           SET                      */
*      2 SMCASTA     CHAR(1),            /* NON-CURRENT SMF DATA SET
*                                           DEVICE STATUS            */
*       3 SMCAANAV BIT(1),               /* DATA SET IS NOT AVAILABLE
*                                           FOR RECORDING            */
*       3 SMCAATAP BIT(1),               /* THE SMF RECORDING DEVICE
*                                           IS A MAGNETIC TAPE DEVICE*/
*       3 SMCAADA  BIT(1),               /* THE SMF RECORDING DEVICE
*                                           IS A DIRECT ACCESS DEVICE*/
*       3 SMCAAMTY BIT(1),               /* THE DATA SET IS READY TO
*                                           USE                      */
*       3 SMCAAMOD BIT(1),               /* OPEN MODULE              */
*       3 SMCARS08 BIT(1),               /* RESERVED                 */
*       3 SMCAAUNT BIT(1),               /* A DEVICE ADDRESS WAS
*                                           SPECIFIED FOR THE SMF
*                                           DATA SET AT SYSTEM
*                                           INITIALIZATION           */
*       3 SMCAAVOL BIT(1),               /* A VOLUME SERIAL NUMBER
*                                           WAS SPECIFIED FOR THE SMF
*                                           DATA SET AT SYSTEM
*                                           INITIALIZATION           */
*      2 SMCAADAR    CHAR(3),            /* NON-CURRENT SMF DATA SET
*                                           DEVICE ADDRESS (EBCDIC)  */
*      2 SMCAALBL    CHAR(1),            /* LABEL STATUS OF THE
*                                           NON-CURRENT SMF DATA SET */
*       3 SMCARS09 BIT(1),               /* RESERVED                 */
*       3 SMCARS10 BIT(1),               /* RESERVED                 */
*       3 SMCARS11 BIT(1),               /* RESERVED                 */
*       3 SMCARS12 BIT(1),               /* RESERVED                 */
*       3 SMCARS13 BIT(1),               /* RESERVED                 */
*       3 SMCAANSL BIT(1),               /* NON-STANDARD LABEL (NSL) */
*       3 SMCAASL  BIT(1),               /* STANDARD LABEL (SL)      */
*       3 SMCAANL  BIT(1),               /* NO LABEL (NL)            */
*      2 SMCAYORX    CHAR(1),            /* AN EBCDIC X OR Y
*                                           CORRESPONDING TO THE
*                                           DATA SET THAT IS TO
*                                           RECEIVE THIS ENTRY       */
*      2 SMCAADCB    PTR(31),            /* ADDRESS OF THE NON-CURRENT
*                                           SMF DATA SET DCB         */
*   /*                                                               */
*   /* SMF ECB'S                                                     */
*   /*                                                               */
*      2 SMCAWECB    CHAR(4) BDY(WORD),  /* WRITE REQUEST ECB
*                                           WAITED UPON BY THE SMF
*                                           WRITER.  POSTED BY
*                                           IGC0008C WHEN A WRITE
*                                           IS REQUESTED.            */
*      2 SMCABECB    CHAR(4) BDY(WORD),  /* ECB FOR THE SMF BUFFER   */
*      2 SMCASGWR    FIXED(31),          /* IF THE LOGICAL RECORD
*                                           EXCEEDS 1/2 THE BUFFER
*                                           SIZE, THIS FIELD
*                                           INDICATES THE NUMBER OF
*                                           BUFFER LOADS REQUIRED TO
*                                           ACCOMMODATE THE RECORD   */
*      2 SMCASGFT    FIXED(31),          /* THE NUMBER OF RECORD
*                                           SEGMENTS (BUFFER LOADS)
*                                           THAT WILL FIT IN THE DATA
*                                           SET                      */
*   /*                                                               */
*   /* MISCELLANEOUS POINTERS AND COMMUNICATION AREAS                */
*   /*                                                               */
*      2 SMCAWAIT (2) FIXED(31),         /* THE ACCUMULATED WAIT
*                                           TIME, EXPRESSED IN 26
*                                           USEC TIMER UNITS.  FIRST
*                                           WORD IS OVERFLOW FROM
*                                           SECOND WORD.             */
*      2 SMCAENTY    CHAR(2),            /* THESE SWITCHES GOVERN
*                                           ENTRY CONDITIONS FOR
*                                           DEVICE SWITCHING/
*                                           ALLOCATION/OPENING
*                                           ROUTINES                 */
*       3 SMCAENDI    CHAR(1),           /* A COMMUNICATION FIELD    */
*        4 SMCARS14 BIT(1),              /* RESERVED                 */
*        4 SMCARS15 BIT(1),              /* RESERVED                 */
*        4 SMCARS16 BIT(1),              /* RESERVED                 */
*        4 SMCARS17 BIT(1),              /* RESERVED                 */
*        4 SMCARS18 BIT(1),              /* RESERVED                 */
*        4 SMCARS19 BIT(1),              /* RESERVED                 */
*        4 SMCARS20 BIT(1),              /* RESERVED                 */
*        4 SMCADSNF BIT(1),              /* IF ZERO, DATA SET (X OR
*                                           Y) WAS FOUND.  IF ONE,
*                                           DATA SET (X OR Y) WAS
*                                           NOT FOUND.               */
*       3 SMCAENOP    CHAR(1),           /* ENTRY CODE THAT INDICATES
*                                           WHICH LOAD OF SVC 83 HAS
*                                           PASSED CONTROL TO CURRENT
*                                           LOAD                     */
*      2 SMCAFOPT    CHAR(1),            /* SMF FOREGROUND OPTIONS   */
*       3 SMCAFOP1 BIT(1),               /* JOB ACCOUNTING (OPT=1)   */
*       3 SMCAFOP2 BIT(1),               /* STEP ACCOUNTING (OPT=2)  */
*       3 SMCAFEXT BIT(1),               /* USER EXITS WILL BE TAKEN
*                                           (EXT=YES)                */
*       3 SMCAFDSA BIT(1),               /* DATA SET ACCOUNTING
*                                           (DSV=2 OR 3)        19028*/
*       3 SMCAFVOL BIT(1),               /* VOLUME ACCOUNTING
*                                           (DSV=1 OR 3)        19028*/
*       3 SMCAFR01 BIT(1),               /* RESERVED           ICB441*/
*       3 SMCAFTDS BIT(1),               /* TYPE 17 RECORDS
*                                           MAINTAINED FOR TEMPORARY
*                                           DATA SETS (REC=2 OR 3)
*                                                               19028*/
*       3 SMCAFGN  BIT(1),               /* SMF FOREGROUND OPTIONS
*                                           BIT.  IF 0, ABOVE BITS
*                                           DESCRIBE BACKGROUND
*                                           OPTIONS.  IF 1, ABOVE
*                                           BITS DESCRIBE
*                                           FOREGROUND OPTIONS  20011*/
*      2 SMCAENAL    CHAR(1),            /* RESERVED                 */
*      2 SMCAWRTP    FIXED(31),          /* AN OPTIMUM BUFFER LOAD
*                                           DISPLACEMENT FIGURE.
*                                           WHEN THE BUFFER IS LOADED
*                                           TO OR BEYOND THIS POINT,
*                                           IT WILL BE WRITTEN TO THE
*                                           SMF DATA SET             */
*   /*                                                               */
*   /* XCTL REMOTE LIST USED BY SVC 83                               */
*   /*                                                               */
*      2 SMCAXCTL    PTR(31),            /* ADDRESS OF THE NAME OF
*                                           THE ROUTINE TO WHICH XCTL
*                                           IS TO PASS CONTROL       */
*      2 *           PTR(31),            /* DCB POINTER.  ALWAYS
*                                           ZERO ACCORDING TO THE
*                                           XCTL MACRO INSTRUCTION
*                                           FORMAT.                  */
*      2 SMCAXNAM    CHAR(8) BDY(WORD),  /* NAME OF THE ROUTINE TO
*                                           WHICH XCTL IS TO PASS
*                                           CONTROL                  */
*      2 SMCASWA     CHAR(1),            /* INDICATOR BITS           */
*       3 SMCASWAR BIT(1),               /* RESERVED            19028*/
*       3 SMCADSTR BIT(1),               /* DISASTER BIT.  BOTH DATA
*                                           SETS ARE FULL.  SMF IS
*                                           NOT RECORDING.      19028*/
*       3 SMCAOPFL BIT(1),               /* OPEN FAILURE ON SMF DATA
*                                           SET.  SMF IS NOT
*                                           RECORDING.          19028*/
*       3 SMCANADA BIT(1),               /* NEXT ALLOCATION MUST BE
*                                           FOR A DIRECT ACCESS
*                                           DEVICE              19028*/
*       3 SMCANAVL BIT(1),               /* ALLOCATION SEARCH IS BY
*                                           VOLUME SERIAL NUMBER
*                                                               19028*/
*       3 SMCAZEOD BIT(1),               /* SMF HALT END-OF-DAY IS
*                                           PROCESSING          19028*/
*       3 SMCADSSP BIT(1),               /* ENTRY TO THE WRITER IS
*                                           FOR A SPACE CHECK OF THE
*                                           DATA SET            19028*/
*       3 SMCADSSW BIT(1),               /* ENTRY TO THE WRITER IS
*                                           FOR DATA SET SWITCHING
*                                           ONLY                19028*/
*      2 SMCASWB     CHAR(1),            /* RESERVED                 */
*      2 SMCASWC     CHAR(1),            /* RESERVED                 */
*      2 SMCASWD     CHAR(1),            /* RESERVED                 */
*      2 SMCADSTM    CHAR(8) BDY(WORD),  /* START TIME AND DATE AT
*                                           WHICH NO DATA SET WAS
*                                           AVAILABLE TO RECORD ON.
*                                           APPEARS IN PACKED DECIMAL
*                                           IN THE FORM 00YYDDDF
*                                           WHERE 00 = ZEROS, YY =
*                                           LAST 2 DIGITS OF THE YEAR,
*                                           DDD = DAY OF THE YEAR AND
*                                           F IS A SIGN.             */
*      2 SMCADSCT    FIXED(31),          /* THE NUMBER OF SMF RECORDS
*                                           THAT HAVE BEEN OMITTED
*                                           FROM THE SMF DATA SET DUE
*                                           TO THE UNAVAILABILITY OF
*                                           A DATA SET TO RECORD ON  */
*      2 SMCAASCB    PTR(31),            /* CURRENT TASK ASCB ADDRESS
*                                           (OS/VS2)           MDC005*/
*       3 SMCAPOST    FIXED(15),         /* RESERVED (OS/VS1)  MDC003*/
*       3 SMCATJID    CHAR(2),           /* CURRENT TASK TJID
*                                           (OS/VS1)           MDC004*/
*      2 SMCARS21    FIXED(31),          /* RESERVED                 */
*      2 SMCASAVE    PTR(31),            /* USER EXIT ADDRESS SAVE
*                                           FIELD (OS/VS2)
*                                           (MDC300)        @ZA02385*/
*      2 SMCATEXP    FIXED(31),          /* TIME OF MOST RECENT
*                                           EXPIRATION OF A TEN-
*                                           MINUTE TIMER QUEUE
*                                           ELEMENT (TQE)      ICB310*/
*      2 SMCAPGIN    FIXED(31),          /* NUMBER OF PAGE-INS
*                                           PERFORMED (OS/VS1)
*                                           (MDC371)         @ZA07764*/
*       3 SMCADOMX    FIXED(31),         /* MANX DOM WTO ID (OS/VS2)
*                                           (MDC373)         @ZA07764*/
*      2 SMCAPGOT    FIXED(31),          /* NUMBER OF PAGE-OUTS
*                                           PERFORMED (OS/VS1)
*                                           (MDC372)         @ZA07764*/
*       3 SMCADOMY    FIXED(31),         /* MANY DOM WTO ID (OS/VS2)
*                                           (MDC374)         @ZA07764*/
*      2 SMCAPGRL    FIXED(31),          /* NUMBER OF PAGES RECLAIMED.
*                                           RECLAMATION RESULTS WHEN
*                                           A PAGE IS NEEDED TO
*                                           SATISFY A PAGE FAULT BUT
*                                           DOES NOT HAVE TO BE
*                                           RETREIVED FROM AUXILIARY
*                                           STORAGE BECAUSE IT IS
*                                           RESIDENT IN REAL MAIN
*                                           STORAGE AWAITING
*                                           PAGE-OUT.          ICB310*/
*      2 SMCARGNS    FIXED(31),          /* NUMBER OF REGIONS SWAPPED
*                                           IN AND OUT         ICB310*/
*      2 SMCASPIN    FIXED(31),          /* NUMBER OF SWAP PAGE-INS
*                                                              ICB310*/
*      2 SMCASPOT    FIXED(31),          /* NUMBER OF SWAP PAGE-OUTS
*                                                              ICB310*/
*      2 SMCARGNM    FIXED(31),          /* NUMBER OF REGIONS
*                                           MIGRATED           ICB310*/
*      2 SMCAPGM     FIXED(31),          /* NUMBER OF PAGES MIGRATED
*                                                              ICB310*/
*      2 SMCAU83     PTR(31),            /* ADDRESS OF SMF OUTPUT EXIT
*                                           (IEFU83) TAKEN WHEN
*                                           RECORDS ARE TO BE WRITTEN
*                                           TO AN SMF DATA SET ICB407*/
*      2 SMCAWTCB    PTR(31),            /* ADDRESS OF SMF WRITER'S
*                                           TCB - USED BY XMPOST
*                                           ERROR PROCESSOR (IEEMB827)
*                                           (OS/VS2)           MDC006*/
*      2 SMCASTCB    PTR(31);            /* ADDRESS OF SMF SVC
*                                           CURRENTLY WAITING FOR
*                                           WRITER - USED BY XMPOST
*                                           ERROR PROCESSOR (IEEMB827)
*                                           (OS/VS2)           MDC007*/
++SRC(IEEMB820) DISTLIB(AOS00) SYSLIB(SAMPLIB) .
         TITLE 'IEEMB820 - SMF INITIALIZATION ROUTER                 '
* ********************************************************************
*    IEEMB820
*    REGISTER USAGE:
*       R0   - GENERAL WORK REG
*       R1   - GENERAL WORK REG
*       R2   -
*       R3   -
*       R4   - ENTRY PARM POINTER
*       R5   - STRG AREA BASE REG
*       R6   -
*       R7   -
*       R8   -
*       R9   -
*       R10  - STRG AREA BASE REG
*       R11  -
*       R12  - OUR BASE REG
*       R13  - CALLER'S SAP AND OUR SAP
*       R14  - RETURN TO CALLER ADDR & COMMON RETURN ADDR FROM RTNS
*       R15  - ENTERY ADDRESS TO THIS RTN & COMMON ENTRY ADDR TO RTNS
*    CHANGE LOG:
*       SKV  -  02/21/09 - ADDED DOCUMENTATION.  CHANGED SO THAT IT
*                          MATCHES THE LOAD MODULE IN USE.  THE SOURCE
*                          IN ...SYM103.F15 DOES NOT MATCH WHAT IS
*                          IN USE.  DEFINED THE IEESMCA AND CVT MAPPING
*                          MACROS TO THIS CODE. CHANGED REGISTER
*                          EQUATES TO SOME STANDARD. ADDED IN THE
*                          DATE AND TIME VALUES INTO THE SMF SMCA.
*       SKV  -  02/25/09 - ADDED SMCA EYECATCHER AND MODIFIED THIS
*                          ROUTINE'S EYECATCHER.  CAN'T PUT AT HEAD OF
*                          STORAGE AREA AS IT SHOULD AS OTHER ROUTINES
*                          DEPEND ON LEADING LAYOUT.
* ********************************************************************
IEEMB820 CSECT ,                                                01.0001
@MAINENT DS    0H                                               01.0001
         USING *,R15                                            01.0001
         B     @PROLOG                                          01.0001
         DC    AL1(16)                                          01.0001
         DC    C'IEEMB820 '                                         SKV
         DC    C'&SYSDATE &SYSTIME '                                SKV
         DC    C'TSV0024 '                                          SKV
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                  01.0001
         BALR  R12,0                                            01.0001
@PSTART  DS    0H                                               01.0001
         USING @PSTART,R12                                      01.0001
         L     R0,@SIZDATD                                      01.0001
         GETMAIN R,LV=(0)
         LR    R11,R1                                           01.0001
         USING @DATD,R11                                        01.0001
         ST    R13,@SA00001+4                                   01.0001
         LM    R0,R1,20(R13)                                    01.0001
         ST    R11,8(,R13)                                      01.0001
         LR    R13,R11                                          01.0001
         MVC   @PC00001(4),0(R1)                                01.0001
*PARMP=R1;                             /* GET PARMLIST POINTER       */
         LR    R4,R1                                            01.0025
*RFY R1 UNRSTD;                        /* RELEASE REGISTER CONTROL   */
*STAE='0'B;                            /* ASSUME STAE SET UP OK      */
         NI    STAE,B'01111111'                                 01.0027
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= INITPREP                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= SMCA/STAE CREATION PROCESSING                   */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  GENERALLY, THIS SEGMENT PERFORMS INITIALIZATION FUNCTIONS FOR   */
*/*  SMF INITIALIZATION.                                             */
*/*                                                                  */
*/*  INITPREP PEFFORMS THE FOLLOWING FUNCTIONS:                      */
*/*                                                                  */
*/*  .  SMCA INITIALIZATION                                          */
*/*     CORE FOR SMCA IS OBTAINED IN SQA - SUBPOOL 245, ALL          */
*/*     FIELDS IN SMCA ARE INITIALIZED TO ZERO AND                   */
*/*     THE CVT IS INITIALIZED TO POINT TO SMCA.                     */
*/*                                                                  */
*/*  .  STAE ENVIRONMENT INITIALIZATION                              */
*/*     A STAE PARAMETER AREA IS INITIALIZED, INDICATING             */
*/*     THAT STAE IS SET UP FOR INITIALIZATION. THE ESTAE MACRO      */
*/*     IS ISSUED TO CREATE A STAE ENVIRONMENT. IF A NON ZERO RETURN */
*/*     CODE IS RETURNED BY STAE, AN ERROR MESSAGE WILL BE ISSUED    */
*/*     AND SMF INITIALIZATION TERMINATED.                           */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED.                      */
*/*                                                                  */
*/*ENTRY= IN-LINE SEGMENT                                            */
*/*  PURPOSE= SEE FUNCTION                                           */
*/*  INPUT= CVT                                                      */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= STAE SUCCESSFULLY CREATED                            */
*/*  OUTPUT=                                                         */
*/*    SMCA WITH ALL FIELDS ZEROED                                   */
*/*    CVT INITIALIZED TO POINT TO SMCA                              */
*/*    STAE ENVIRONMENT CREATED                                      */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/*  CONDITION= STAE NOT SUCCESSFULLY CREATED                        */
*/*  OUPUT=                                                          */
*/*    SMCA WITH ALL FIELDS INITIALIZED TO ZERO                      */
*/*    CVT POINTING TO SMCA                                          */
*/*    STAE BIT SET ON INDICATING STAE FAILURE                       */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/********************************************************************/
*RFY (R1) RSTD;                        /* RESERVE REGISTER           */
*R1 = LENGTH(SMCABASE);                /* GET LENGTH OF SMCA BLOCK   */
         USING SMCABASE,R1                                          SKV
*        LA    R1,180                                           02.0029
*        LA    R1,188        *WAS 180                               SKV
*        SR    R0,R0                                                SKV
         LA    R1,SMCASIZE                                          SKV
*GEN(1ETMAIN R,SP=245,LV=(R1));        /* GET CORE FOR SMCA          */
         GETMAIN R,SP=245,LV=(R1)
*R1->SMCABASE=R1->SMCABASE&&R1->SMCABASE;/* SET ALL OF SMCA TO ZEROS */
*        XC    SMCABASE(180,R1),SMCABASE(R1)                    02.0031
         XC    0(180,R1),0(R1)                                      SKV
*R1->SMCAJWT=DEFLTJWT;                 /* SET DEFAULT JOB WAIT TIME  */
*        MVC   SMCAJWT(4,R1),DEFLTJWT                           02.0032
         MVC   SMCAJWT(4),DEFLTJWT                                  SKV
         DROP  R1                                                   SKV
*CVTSMCA=R1;                           /* POINT CVT TO SMCA          */
         L     R10,CVTPTR                                       02.0033
         USING CVT,R10                                              SKV
*        ST    R1,CVTSMCA(,R10)                                 02.0033
         ST    R1,CVTSMCA              SAVE SMCA ADDR IN CVT        SKV
         LR    R5,R1                   SET SMCA BASE REG            SKV
         USING SMCABASE,R5                                          SKV
         TIME  BIN                     GET CURRENT DATE & TIME      SKV
         ST    R0,SMCAIDTE             SAVE DATE                    SKV
         ST    R1,SMCAITME             SAVE TIME (HUN. OF A SEC.)   SKV
         MVC   SMCASMCA(4),=C'SMCA'    SET EYECATCHER.              SKV
         DROP  R10                                                  SKV
         DROP  R5                                                   SKV
*STAEFOR='1'B;                         /* INDICATE STAE IS FOR SMF
*                                         INITIALIZATION             */
         OI    STAEFOR,B'10000000'                              02.0034
*STAELST(1:STAELEN)=DYMSTAE(1:STAELEN);     /* INIT STAE LIST FORM   */
         LH    R10,STAELEN                                      02.0035
         BCTR  R10,0                                            02.0035
         EX    R10,@SM01099                                     02.0035
*RFY (R2,R3) RSTD;                     /* GET REGISTER CONTROL       */
*R2=ADDR(IEEMB825);                    /* ADDR OF STAE EXIT ROUTINE  */
         L     R2,@CV00061                                      02.0037
*R3=ADDR(STAEPARM);                    /* PARAM LIST FOR STAE EXIT   */
         LA    R3,STAEPARM                                      02.0038
*GEN(ESTAE (R2),,PARAM=(R3),PURGE=NONE,ASYNCH=YES,MF=(E,STAELST));
*SKV-S   ESTAE (R2),,PARAM=(R3),PURGE=NONE,ASYNCH=YES,MF=(E,STAELST)
         DC    X'4110B0E8'
         DC    X'D70210011001'
         DC    X'41220000'
         DC    X'56210000'
         DC    X'50210000'
         DC    X'94FC1000'
         DC    X'96161000'
         DC    X'50310004'
         DC    X'D702100D100D'
         DC    X'1B00'
         DC    X'0A3C'
*SKV-E
*RFY (R2,R3) UNRSTD;                   /* RELEASE REGISTER CONTROL   */
*RFY STAERTCD RSTD;                    /* GET REGISTER CONTROL       */
*IF STAERTCD¬=0 THEN                   /* STAE SET UP SUCCESSFULLY   */
         LTR   R15,R15                                          02.0042
         BZ    @RF00042                                         02.0042
*  DO;                                 /* NO, ISSUE ERROR MESSAGE    */
*    STAE='1'B;                        /* INDICATE STAE FAILURE      */
         OI    STAE,B'10000000'                                 02.0044
*    R1=ADDR(I480I);                   /* GET ADDR OF ERROR MESSAGE  */
         L     R1,@CV00063                                      02.0045
*    GEN(WTO   MF=(E,(R1)));           /* ISSUE ERROR MESSAGE        */
         WTO   MF=(E,(R1))
*  END;                                                         02.0047
*RFY STAERTCD UNRSTD;                  /* RELEASE REGISTER CONTROL   */
@RF00042 DS    0H                                               02.0049
*SMCAFIRT='1'B;                        /* INDICATE INIT IN PROGRESS  */
         L     R10,CVTPTR                                       02.0049
         USING CVT,R10                                              SKV
         L     R5,CVTSMCA                                       02.0049
         USING SMCABASE,R5                                          SKV
*        OI    SMCAFIRT(@05),B'00010000'                        02.0049
         OI    SMCAMISC,SMCAFIRT                                    SKV
         DROP  R5                                                   SKV
*RFY (R1) UNRSTD;                      /* RELEASE REGISTER CONTROL   */
*IF STAE='0'B THEN                     /* IS STAE SET UP SUCCESSFUL  */
         TM    STAE,B'10000000'                                 01.0051
         BNZ   @RF00051                                         01.0051
*  DO;                                 /* YES, CONTINUE WITH INIT    */
*    IF MSSMFPRM=0 THEN                /* PARMLIB NAME SPEC AT IPL   */
         L     R10,CVTMSER                                      01.0053
         DROP  R10                                                  SKV
         ICM   R5,15,MSSMFPRM(R10)                              01.0053
         BNZ   @RF00053                                         01.0053
*      PARMMEM='SMFPRM00';             /* NO, USE DEFALUT NAME       */
         MVC   PARMMEM(8),@CC01092                              01.0054
*    ELSE                              /* PARMLIB NAME SPEC AT IPL   */
*      DO;                                                      01.0055
         B     @RC00053                                         01.0055
@RF00053 DS    0H                                               01.0056
*        PARMMEM=SMFPRMXX;             /* GET MEMBER NAME FOR SMF    */
         L     R10,CVTPTR                                       01.0056
         USING CVT,R10                                              SKV
         L     R10,CVTMSER                                          SKV
         DROP  R10                                                  SKV
         L     R10,MSSMFPRM(,R10)                               01.0056
         MVC   PARMMEM(8),SMFPRMXX(R10)                         01.0056
*        RFY (R2,R3) RSTD;             /* GET RGISTER CONTROL        */
*        R3=MSSMFPRM;                  /* ADDRESS OF PARM AREA       */
         LR    R3,R10                                           01.0058
*        R2=SMFPRMLN;                  /* LENGTH OF AREA             */
         LH    R2,SMFPRMLN(,R10)                                01.0059
*        GEN(FREEMAIN R,SP=245,A=(R3),LV=(R2)); /* FREE AREA         */
         FREEMAIN R,SP=245,A=(R3),LV=(R2)
*        RFY (R2,R3) UNRSTD;           /* RELEASE REGISTER CONTROL   */
*      END;                                                     01.0062
*    CALL IEEMB821(PARMMEM,JWTMIN,ADDR(SMCABASE)); /* PROCESS PARMS  */
@RC00053 LA    R10,PARMMEM                                      01.0063
         ST    R10,@AL00001                                     01.0063
         LA    R10,JWTMIN                                       01.0063
         ST    R10,@AL00001+4                                   01.0063
         L     R10,CVTPTR                                       01.0063
         USING CVT,R10                                              SKV
         LA    R10,CVTSMCA                                          SKV
         DROP  R10                                                  SKV
         ST    R10,@AL00001+8                                   01.0063
         L     R15,@CV01093                                     01.0063
         LA    R1,@AL00001                                      01.0063
         BALR  R14,R15                                          01.0063
*    IF SMCAMAN='1'B THEN              /* RECORDING TO BE PERFORMED  */
         L     R10,CVTPTR                                       01.0064
         USING CVT,R10                                              SKV
         L     R5,CVTSMCA                                       01.0064
         USING SMCABASE,R5                                          SKV
*        TM    SMCAMAN(@05),B'01000000'                         01.0064
         TM    SMCAMISC,SMCAMAN                                     SKV
         DROP  R5                                                   SKV
         BNO   @RF00064                                         01.0064
*      DO;                             /* YES,PREPARE FOR OPENS      */
*        CALL IEEMB822(ADDR(SMCABASE),WTRTCBPT,WTRECBPT);       01.0066
         LA    R10,CVTSMCA                                          SKV
         DROP  R10                                                  SKV
         ST    R10,@AL00001                                     01.0066
         ST    R4,@AL00001+4                                    01.0066
         LA    R10,WTRECBPT(,R4)                                01.0066
         ST    R10,@AL00001+8                                   01.0066
         L     R15,@CV01094                                     01.0066
         LA    R1,@AL00001                                      01.0066
         BALR  R14,R15                                          01.0066
*        IF SMCAMAN='1'B THEN          /* ANY ERRORS IN OPEN INIT    */
         L     R10,CVTPTR                                       01.0067
         USING CVT,R10                                              SKV
         L     R10,CVTSMCA                                      01.0067
         DROP  R10                                                  SKV
         USING SMCABASE,R10                                         SKV
*        TM    SMCAMAN(R10),B'01000000'                         01.0067
         TM    SMCAMISC,SMCAMAN                                     SKV
         BNO   @RF00067                                         01.0067
*          DO;                         /* NO, WRITE SMF IPL RECORDS  */
*            SMCAFIRT='0'B;            /* INIT CAN RECORD NOW        */
         NI    SMCAMISC,B'11101111'                                 SKV
         DROP  R10                                                  SKV
*            CALL IEEMB823(JWTMIN,CVTPTR);                      01.0070
         LA    R10,JWTMIN                                       01.0070
         ST    R10,@AL00001                                     01.0070
         LA    R10,CVTPTR                                       01.0070
         ST    R10,@AL00001+4                                   01.0070
         L     R15,@CV01095                                     01.0070
         LA    R1,@AL00001                                      01.0070
         BALR  R14,R15                                          01.0070
*          END;                                                 01.0071
*      END;                                                     01.0072
@RF00067 DS    0H                                               01.0073
*  END;                                                         01.0073
@RF00064 DS    0H                                               01.0074
*IF SMCAMAN='0'B THEN                  /* RECORDING TO BE PERFORMED  */
@RF00051 L     R10,CVTPTR                                       01.0074
         USING CVT,R10                                              SKV
         L     R10,CVTSMCA                                      01.0074
         DROP  R10                                                  SKV
         USING SMCABASE,R10                                         SKV
*        TM    SMCAMAN(R10),B'01000000'                         01.0074
         TM    SMCAMISC,SMCAMAN                                     SKV
         DROP  R10                                                  SKV
         BNZ   @RF00074                                         01.0074
*  DO;                                 /* NO, WRITE ¬RECORDING MSG   */
*    RFY (R1) RSTD;                    /* GET REGISTER CONTROL       */
*    R1=ADDR(I351I);                   /* ADDR OF MESSAGE            */
         L     R1,@CV00062                                      01.0077
*    GEN(WTO   MF=(E,(R1)));           /* WRITE MESSAGE              */
         WTO   MF=(E,(R1))
*    RFY (R1) UNRSTD;                  /* RELEASE REGISTER CONTROL   */
*  END;                                                         01.0080
*SMCAFIRT='0'B;                        /* INIT COMPLETE PROCESSING   */
@RF00074 L     R10,CVTPTR                                       01.0081
         USING CVT,R10                                              SKV
         L     R10,CVTSMCA                                      01.0081
         DROP  R10                                                  SKV
         USING SMCABASE,R10                                         SKV
*        NI    SMCAFIRT(R10),B'11101111'                        01.0081
         NI    SMCAMISC,B'11101111'                                 SKV
         DROP  R10                                                  SKV
*RETURN;                                                        01.0082
@EL00001 L     R13,4(,R13)                                      01.0082
@EF00001 L     R0,@SIZDATD                                      01.0082
         LR    R1,R11                                           01.0082
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    R14,R12,12(R13)                                  01.0082
         BR    R14                                              01.0082
*END IEEMB820                                                   01.0083
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (B820SPEC)                                        *
*/*%INCLUDE SYSLIB  (B820DATA)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IEEBASEA)                                        *
*/*%INCLUDE SYSLIB  (IEESMCA )                                        *
*/*%INCLUDE SYSLIB  (INITPREP)                                        *
*/*%INCLUDE SYSLIB  (INITPRES)                                        *
*;                                                              01.0083
         B     @EL00001                                         01.0083
@DATA    DS    0H
@SM01099 MVC   STAELST(0),DYMSTAE
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@AL00001 DS    3A
IEEMB820 CSECT
         DS    0F
@DATD    DSECT
         DS    0D
JWTMIN   DS    F
DMYPARM  DS    A
PARMMEM  DS    CL8
STAEPARM DS    CL124
         ORG   STAEPARM
STAESWCS DS    BL1
         ORG   STAESWCS
STAEFOR  DS    BL1
@NM00003 EQU   STAESWCS+0
         ORG   STAEPARM+1
@NM00004 DS    CL3
STAEWKAR DS    CL120
         ORG   STAEPARM+124
STAE     DS    BL1
IEEMB820 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00061 DC    V(IEEMB825)
@CV00062 DC    V(IEE351I)
@CV00063 DC    V(IEE480I)
@CV01093 DC    V(IEEMB821)
@CV01094 DC    V(IEEMB822)
@CV01095 DC    V(IEEMB823)
         DS    0D
@CC01092 DC    C'SMFPRM00'
DEFLTJWT DC    X'7FFFFFFF'
@DATD    DSECT
STAELST  ESTAE ,CT,PURGE=NONE,ASYNCH=YES,RECORD=YES,MF=L
IEEMB820 CSECT
DYMSTAE  ESTAE ,CT,PURGE=NONE,ASYNCH=YES,RECORD=YES,MF=L
STAELEN  DC    AL2(*-DYMSTAE)          LENTH OF STAE LIST FORM
@DATD    DSECT
@ENDDATD EQU   *
IEEMB820 CSECT
* @00      EQU   00                      EQUATES FOR REGISTERS 0-15
* @01      EQU   01
* @02      EQU   02
* @03      EQU   03
* @4       EQU   04
* @5       EQU   05
* @6       EQU   06
* @7       EQU   07
* @8       EQU   08
* @9       EQU   09
* @10      EQU   10
* @11      EQU   11
* @12      EQU   12
* @13      EQU   13
* @14      EQU   14
* @15      EQU   15
*PARMP    EQU   @04
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
* @STAERTCD EQU   R15
***CVTPTR   EQU   16
PARMLIST EQU   0
WTRTCBPT EQU   PARMLIST
WTRECBPT EQU   PARMLIST+4
@NM00001 EQU   0
SMFPRMLN EQU   @NM00001
SMFPRMXX EQU   @NM00001+4
I351I    EQU   0
I480I    EQU   0
* CVTMAP EQU   0
* CVTDAR EQU   CVTMAP+72
* CVTFLGS1 EQU CVTDAR
* CVTDCB EQU   CVTMAP+116
* CVTMSER EQU  CVTMAP+148
* CVTOPTA EQU  CVTMAP+182
* CVTOPTB EQU  CVTMAP+183
* CVTSMCA EQU  CVTMAP+196
* CVTTSCVT EQU CVTMAP+228
* CVTTSFLG EQU CVTTSCVT
* CVTGTF EQU   CVTMAP+236
* CVTGTFST EQU CVTGTF
* CVTGTFS EQU  CVTGTFST
* CVTSTATE EQU CVTGTFST
* CVTTMODE EQU CVTGTFST
* CVTFORM EQU  CVTGTFST
* CVTUSR EQU   CVTGTFST
* CVTAQAVT EQU CVTMAP+240
* CVTTCMFG EQU CVTAQAVT
* CVTTATA EQU  CVTMAP+244
* CVTATER EQU  CVTMAP+248
* CVTEXT1 EQU  CVTMAP+252
* CVTPURG EQU  CVTMAP+260
* CVTQMSG EQU  CVTMAP+268
* CVTDMSR EQU  CVTMAP+272
* CVTAPF EQU   CVTMAP+324
* CVTEXT2 EQU  CVTMAP+328
* CVTHJES EQU  CVTMAP+332
* CVTPGSIA EQU CVTMAP+348
* CVTA1F1 EQU  CVTMAP+356
* CVTSYSK EQU  CVTMAP+357
* CVTATMCT EQU CVTMAP+388
* CVTXTNT1 EQU 0
* CVTXTNT2 EQU 0
* CVTDSSV EQU  CVTXTNT2
* CVTRSV90 EQU CVTXTNT2+5
* CVTQID EQU   CVTXTNT2+24
* CVTRV400 EQU CVTXTNT2+52
* CVTRV409 EQU CVTXTNT2+53
* CVTATCVT EQU CVTXTNT2+64
* CVTRV429 EQU CVTXTNT2+84
* CVTRV438 EQU CVTXTNT2+85
* CVTRV457 EQU CVTXTNT2+112
* CVTRV466 EQU CVTXTNT2+113
* CVTFIX EQU   0
* CVTRELNO EQU CVTFIX+252
BASE     EQU   0
@NM00007 EQU   BASE+13
BALGSTAT EQU   BASE+24
BALOG    EQU   BALGSTAT+4
BASFL    EQU   BASE+36
BARSW    EQU   BASFL
MSLOGST  EQU   BASE+46
BASPBYTE EQU   BASE+47
BAMONITR EQU   BASE+56
MSSMFPRM EQU   BASE+96
@NM00031 EQU   BASE+104
MSLGCLOZ EQU   BASE+108
MSCLOSSW EQU   MSLGCLOZ
MSLGWLOG EQU   BASE+112
MSWLOGSW EQU   MSLGWLOG
MSLGWTR  EQU   BASE+116
MSWTRSW  EQU   MSLGWTR
MSLGSTRT EQU   BASE+120
MSSTRTSW EQU   MSLGSTRT
MS1BASEX EQU   BASE+136
BASES01  EQU   0
MSNTAL   EQU   BASES01
MSSSB    EQU   BASES01+1
MSBTN    EQU   MSSSB
MSPFG    EQU   BASES01+2
MSECBFL  EQU   BASES01+3
MSTUS    EQU   BASES01+4
MSSSA    EQU   MSTUS
MSINLSW  EQU   MSSSA
MSREOF   EQU   MSSSA
MSNWP    EQU   MSSSA
MSFHF    EQU   BASES01+5
* SMCABASE EQU 0
* SMCAOPT EQU  SMCABASE
* SMCAMISC EQU SMCABASE+1
* SMCAMAN EQU  SMCAMISC
* SMCAFIRT EQU SMCAMISC
* SMCAJWT EQU  SMCABASE+8
* SMCABUF EQU  SMCABASE+12
* SMCAPSTA EQU SMCABASE+30
* SMCAPLBL EQU SMCABASE+34
* SMCASTA EQU  SMCABASE+46
* SMCAALBL EQU SMCABASE+50
* SMCAENTY EQU SMCABASE+80
* SMCAENDI EQU SMCAENTY
* SMCAFOPT EQU SMCABASE+82
* SMCASWA EQU  SMCABASE+104
* SMCAASCB EQU SMCABASE+120
DYMPARM  EQU   0
* CVTS01 EQU   CVTPGSIA
* CVTLPDIA EQU CVTS01+12
* CVTDIRST EQU CVTLPDIA
* CVTSLIDA EQU CVTS01+24
* CVTCTLFG EQU CVTS01+50
* CVTRV100 EQU CVTS01+116
* CVTRV109 EQU CVTS01+117
* CVTRV118 EQU CVTS01+118
* CVTRV127 EQU CVTS01+119
* CVTRV157 EQU CVTS01+376
* CVTRV166 EQU CVTS01+377
* CVTRV175 EQU CVTS01+378
* CVTRV184 EQU CVTS01+379
* CVTRV210 EQU CVTS01+424
* CVTRV219 EQU CVTS01+425
* CVTRV228 EQU CVTS01+426
* CVTRV237 EQU CVTS01+427
* CVTMFRTR EQU CVTS01+452
* CVTRV262 EQU CVTS01+468
* CVTRV271 EQU CVTS01+469
* CVTRV280 EQU CVTS01+470
* CVTRV289 EQU CVTS01+471
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
* CVTRV512 EQU CVTS01+608
* CVTRV511 EQU CVTS01+604
* CVTRV510 EQU CVTS01+600
* CVTRV509 EQU CVTS01+596
* CVTRV508 EQU CVTS01+592
* CVTRV507 EQU CVTS01+588
* CVTRV506 EQU CVTS01+584
* CVTRV505 EQU CVTS01+580
* CVTCSDRL EQU CVTS01+576
* CVTEXP1 EQU  CVTS01+572
* CVTRMPMT EQU CVTS01+568
* CVTRMPTT EQU CVTS01+564
* CVTVPSA EQU  CVTS01+560
* CVTVSTOP EQU CVTS01+556
* CVTVALST EQU CVTS01+552
* CVTVTCH EQU  CVTS01+548
* CVTVWKUP EQU CVTS01+544
* CVTWTCB EQU  CVTS01+540
* CVTSTPRS EQU CVTS01+536
* CVT0PT02 EQU CVTS01+532
* CVTDARCM EQU CVTS01+528
* CVTIRECM EQU CVTS01+524
* CVTJRECM EQU CVTS01+520
* CVTVEMS0 EQU CVTS01+516
* CVTSPFRR EQU CVTS01+512
* CVTRLSTG EQU CVTS01+508
* CVT0TC0A EQU CVTS01+504
* CVTGMBR EQU  CVTS01+500
* CVTLFRM EQU  CVTS01+496
* CVTRMBR EQU  CVTS01+492
* CVTVIOP EQU  CVTS01+488
* CVTRV307 EQU CVTS01+486
* CVTRV306 EQU CVTS01+484
* CVTRV305 EQU CVTS01+482
* CVTRV304 EQU CVTS01+480
* CVTRV303 EQU CVTS01+478
* CVTRV302 EQU CVTS01+476
* CVTRV301 EQU CVTS01+475
* CVTRV300 EQU CVTS01+474
* CVTRV299 EQU CVTS01+473
* CVTRV298 EQU CVTS01+472
* CVTRV297 EQU CVTRV289
* CVTRV296 EQU CVTRV289
* CVTRV295 EQU CVTRV289
* CVTRV294 EQU CVTRV289
* CVTRV293 EQU CVTRV289
* CVTRV292 EQU CVTRV289
* CVTRV291 EQU CVTRV289
* CVTRV290 EQU CVTRV289
* CVTRV288 EQU CVTRV280
* CVTRV287 EQU CVTRV280
* CVTRV286 EQU CVTRV280
* CVTRV285 EQU CVTRV280
* CVTRV284 EQU CVTRV280
* CVTRV283 EQU CVTRV280
* CVTRV282 EQU CVTRV280
* CVTRV281 EQU CVTRV280
* CVTRV279 EQU CVTRV271
* CVTRV278 EQU CVTRV271
* CVTRV277 EQU CVTRV271
* CVTRV276 EQU CVTRV271
* CVTRV275 EQU CVTRV271
* CVTRV274 EQU CVTRV271
* CVTRV273 EQU CVTRV271
* CVTRV272 EQU CVTRV271
* CVTRV270 EQU CVTRV262
* CVTRV269 EQU CVTRV262
* CVTRV268 EQU CVTRV262
* CVTRV267 EQU CVTRV262
* CVTRV266 EQU CVTRV262
* CVTRV265 EQU CVTRV262
* CVTRV264 EQU CVTRV262
* CVTRV263 EQU CVTRV262
* CVTVFP EQU   CVTS01+464
* CVTVSI EQU   CVTS01+460
* CVTVPSIB EQU CVTS01+456
* CVTMFACT EQU CVTMFRTR
* CVTMFCTL EQU CVTS01+448
* CVTPVBP EQU  CVTS01+444
* CVTPWI EQU   CVTS01+440
* CVTRV254 EQU CVTS01+438
* CVTRV253 EQU CVTS01+436
* CVTRV252 EQU CVTS01+434
* CVTRV251 EQU CVTS01+433
* CVTRV250 EQU CVTS01+432
* CVTRV249 EQU CVTS01+431
* CVTRV248 EQU CVTS01+430
* CVTRV247 EQU CVTS01+429
* CVTRV246 EQU CVTS01+428
* CVTRV245 EQU CVTRV237
* CVTRV244 EQU CVTRV237
* CVTRV243 EQU CVTRV237
* CVTRV242 EQU CVTRV237
* CVTRV241 EQU CVTRV237
* CVTRV240 EQU CVTRV237
* CVTRV239 EQU CVTRV237
* CVTRV238 EQU CVTRV237
* CVTRV236 EQU CVTRV228
* CVTRV235 EQU CVTRV228
* CVTRV234 EQU CVTRV228
* CVTRV233 EQU CVTRV228
* CVTRV232 EQU CVTRV228
* CVTRV231 EQU CVTRV228
* CVTRV230 EQU CVTRV228
* CVTRV229 EQU CVTRV228
* CVTRV227 EQU CVTRV219
* CVTRV226 EQU CVTRV219
* CVTRV225 EQU CVTRV219
* CVTRV224 EQU CVTRV219
* CVTRV223 EQU CVTRV219
* CVTRV222 EQU CVTRV219
* CVTRV221 EQU CVTRV219
* CVTRV220 EQU CVTRV219
* CVTRV218 EQU CVTRV210
* CVTRV217 EQU CVTRV210
* CVTRV216 EQU CVTRV210
* CVTRV215 EQU CVTRV210
* CVTRV214 EQU CVTRV210
* CVTRV213 EQU CVTRV210
* CVTRV212 EQU CVTRV210
* CVTRV211 EQU CVTRV210
* CVTLCCAT EQU CVTS01+420
* CVTPCCAT EQU CVTS01+416
* CVTIPCRP EQU CVTS01+412
* CVTIPCRI EQU CVTS01+408
* CVTIPCDS EQU CVTS01+404
* CVTAIDVT EQU CVTS01+400
* CVTSSAP EQU  CVTS01+396
* CVTRV202 EQU CVTS01+394
* CVTRV201 EQU CVTS01+392
* CVTRV200 EQU CVTS01+390
* CVTRV199 EQU CVTS01+388
* CVTRV198 EQU CVTS01+386
* CVTRV197 EQU CVTS01+384
* CVTRV196 EQU CVTS01+383
* CVTRV195 EQU CVTS01+382
* CVTRV194 EQU CVTS01+381
* CVTRV193 EQU CVTS01+380
* CVTRV192 EQU CVTRV184
* CVTRV191 EQU CVTRV184
* CVTRV190 EQU CVTRV184
* CVTRV189 EQU CVTRV184
* CVTRV188 EQU CVTRV184
* CVTRV187 EQU CVTRV184
* CVTRV186 EQU CVTRV184
* CVTRV185 EQU CVTRV184
* CVTRV183 EQU CVTRV175
* CVTRV182 EQU CVTRV175
* CVTRV181 EQU   CVTRV175
* CVTRV180 EQU   CVTRV175
* CVTRV179 EQU   CVTRV175
* CVTRV178 EQU   CVTRV175
* CVTRV177 EQU   CVTRV175
* CVTRV176 EQU   CVTRV175
* CVTRV174 EQU   CVTRV166
* CVTRV173 EQU   CVTRV166
* CVTRV172 EQU   CVTRV166
* CVTRV171 EQU   CVTRV166
* CVTRV170 EQU   CVTRV166
* CVTRV169 EQU   CVTRV166
* CVTRV168 EQU   CVTRV166
* CVTRV167 EQU   CVTRV166
* CVTRV165 EQU   CVTRV157
* CVTRV164 EQU   CVTRV157
* CVTRV163 EQU   CVTRV157
* CVTRV162 EQU   CVTRV157
* CVTRV161 EQU   CVTRV157
* CVTRV160 EQU   CVTRV157
* CVTRV159 EQU   CVTRV157
* CVTRV158 EQU   CVTRV157
* CVTRV156 EQU   CVTS01+372
* CVTRSTWD EQU   CVTS01+368
* CVTSPOST EQU   CVTS01+364
* CVTIOBP  EQU   CVTS01+360
* CVTASMVT EQU   CVTS01+356
* CVTRECRQ EQU   CVTS01+352
* CVTWSAC  EQU   CVTS01+348
* CVTWSAG  EQU   CVTS01+344
* CVTWSAL  EQU   CVTS01+340
* CVTSPSA  EQU   CVTS01+336
* CVTGLMN  EQU   CVTS01+332
* CVTVEAC0 EQU   CVTS01+328
* CVT062R1 EQU   CVTS01+324
* CVTRPOST EQU   CVTS01+320
* CVTDQIQE EQU   CVTS01+316
* CVTCSD   EQU   CVTS01+312
* CVTLKRMA EQU   CVTS01+308
* CVTRSPIE EQU   CVTS01+304
* CVTRENQ    EQU   CVTS01+300
* CVTLQCB    EQU   CVTS01+296
* CVTFQCB    EQU   CVTS01+292
* CVTQCS01 EQU     CVTS01+288
* CVTAPFT EQU   CVTS01+284
* CVTPARRL EQU  CVTS01+280
* CVTVWAIT EQU  CVTS01+276
* CVTGSPL EQU   CVTS01+272
* CVTLSMQ EQU   CVTS01+268
* CVTGSMQ EQU   CVTS01+264
* CVTEXPRO EQU  CVTS01+260
* CVTOPCTP EQU  CVTS01+256
* CVTSIC  EQU   CVTS01+252
* CVTTPIOS EQU  CVTS01+248
* CVTRTMS EQU   CVTS01+244
* CVTSDBF EQU   CVTS01+240
* CVTSCBP EQU   CVTS01+236
* CVTSDMP EQU   CVTS01+232
* CVTSV60 EQU   CVTS01+228
* CVTRTMCT EQU  CVTS01+224
* CVTASCBL EQU  CVTS01+220
* CVTASCBH EQU  CVTS01+216
* CVTGDA  EQU   CVTS01+212
* CVTASVT EQU   CVTS01+208
* CVTVVMDI EQU  CVTS01+204
* CVTAQTOP EQU  CVTS01+200
* CVTIOSCS EQU  CVTS01+196
* CVTSDRM EQU   CVTS01+192
* CVTOPTE EQU   CVTS01+188
* CVTSTXU EQU   CVTS01+184
* CVTQUIS EQU   CVTS01+180
* CVTQREC EQU   CVTS01+176
* CVTS1EE EQU   CVTS01+172
* CVTFRAS EQU   CVTS01+168
* CVTQSAS EQU   CVTS01+164
* CVTCRAS EQU   CVTS01+160
* CVTCRMN EQU   CVTS01+156
* CVTDELCP EQU  CVTS01+152
* CVTFRECL EQU  CVTS01+148
* CVTGETCL EQU  CVTS01+144
* CVTBLDCP EQU  CVTS01+140
* CVTAUTHL EQU  CVTS01+136
* CVTRV146 EQU  CVTS01+134
* CVTRV145 EQU  CVTS01+132
* CVTRV144 EQU  CVTS01+130
* CVTMAXMP EQU  CVTS01+128
* CVTRV142 EQU  CVTS01+126
* CVTRV141 EQU  CVTS01+125
* CVTRV140 EQU  CVTS01+124
* CVTRV139 EQU  CVTS01+123
* CVTDSSAC EQU  CVTS01+122
* CVTRV513 EQU  CVTS01+121
* CVTIOSPL EQU  CVTS01+120
* CVTRV135 EQU  CVTRV127
* CVTRV134 EQU  CVTRV127
* CVTRV133 EQU  CVTRV127
* CVTRV132 EQU  CVTRV127
* CVTRV131 EQU  CVTRV127
* CVTRV130 EQU  CVTRV127
* CVTRV129 EQU  CVTRV127
* CVTRV128 EQU  CVTRV127
* CVTRV126 EQU  CVTRV118
* CVTRV125 EQU  CVTRV118
* CVTRV124 EQU  CVTRV118
* CVTRV123 EQU  CVTRV118
* CVTRV122 EQU  CVTRV118
* CVTRV121 EQU  CVTRV118
* CVTRV120 EQU  CVTRV118
* CVTRV119 EQU  CVTRV118
* CVTRV117 EQU  CVTRV109
* CVTRV116 EQU  CVTRV109
* CVTRV115 EQU  CVTRV109
* CVTRV114 EQU  CVTRV109
* CVTRV113 EQU  CVTRV109
* CVTRV112 EQU  CVTRV109
* CVTRV111 EQU  CVTRV109
* CVTRV110 EQU  CVTRV109
* CVTRV108 EQU  CVTRV100
* CVTRV107 EQU  CVTRV100
* CVTRV106 EQU  CVTRV100
* CVTRV105 EQU  CVTRV100
* CVTRV104 EQU  CVTRV100
* CVTRV103 EQU  CVTRV100
* CVTRV102 EQU  CVTRV100
* CVTRV101 EQU  CVTRV100
* CVTCSPIE EQU  CVTS01+112
* CVTSMFEX EQU  CVTS01+108
* CVTOLT0A EQU  CVTS01+104
* CVTSRBRT EQU  CVTS01+100
* CVTRSV82 EQU  CVTS01+98
* CVTRSV81 EQU  CVTS01+96
* CVTSYSWT EQU  CVTS01+92
* CVTRV327 EQU  CVTS01+88
* CVTRV326 EQU  CVTS01+84
* CVTRV325 EQU  CVTS01+80
* CVTRV324 EQU  CVTS01+76
* CVT0VL01 EQU  CVTS01+72
* CVTSHRVM EQU  CVTS01+68
* CVTRV332 EQU  CVTS01+64
* CVTTAS  EQU   CVTS01+60
* CVTRSCN EQU   CVTS01+56
* CVTTRAC2 EQU  CVTS01+54
* CVTTRACE EQU  CVTS01+52
* CVTAPG  EQU   CVTS01+51
* CVTSDTRC EQU  CVTCTLFG
* CVTGTRCE EQU  CVTCTLFG
* CVTRSV80 EQU  CVTCTLFG
* CVTRSV79 EQU  CVTCTLFG
* CVTDSTAT EQU  CVTCTLFG
* CVTRSV78 EQU  CVTCTLFG
* CVTRV333 EQU  CVTCTLFG
* CVTRV323 EQU  CVTCTLFG
* CVTSPVLK EQU  CVTS01+49
* CVTRSV77 EQU  CVTS01+48
* CVTRV331 EQU  CVTS01+44
* CVTRV330 EQU  CVTS01+40
* CVTRV329 EQU  CVTS01+36
* CVTRV328 EQU  CVTS01+32
* CVTRV322 EQU  CVTS01+28
* CVTSLID EQU   CVTSLIDA+1
* CVTSYLK EQU   CVTSLIDA
* CVTRV321 EQU  CVTS01+20
* CVTRV320 EQU  CVTS01+16
* CVTLPDIR EQU  CVTLPDIA+1
* CVTRSV69 EQU  CVTDIRST
* CVTRSV68 EQU  CVTDIRST
* CVTRSV67 EQU  CVTDIRST
* CVTRSV66 EQU  CVTDIRST
* CVTRSV65 EQU  CVTDIRST
* CVTRSV64 EQU  CVTDIRST
* CVTRSV63 EQU  CVTDIRST
* CVTDICOM EQU  CVTDIRST
* CVTPVTP EQU   CVTS01+8
* CVTLPDSR EQU  CVTS01+4
* CVTRSVA2 EQU  CVTS01
* SMCASTCB EQU SMCABASE+176
* SMCAWTCB EQU SMCABASE+172
* SMCAU83 EQU  SMCABASE+168
* SMCAPGM EQU  SMCABASE+164
* SMCARGNM EQU SMCABASE+160
* SMCASPOT EQU SMCABASE+156
* SMCASPIN EQU SMCABASE+152
* SMCARGNS EQU SMCABASE+148
* SMCAPGRL EQU SMCABASE+144
* SMCAPGOT EQU SMCABASE+140
* SMCAPGIN EQU SMCABASE+136
* SMCATEXP EQU SMCABASE+132
* SMCARS22 EQU SMCABASE+128
* SMCARS21 EQU SMCABASE+124
* SMCATJID EQU SMCAASCB+2
* SMCAPOST EQU SMCAASCB
* SMCADSCT EQU SMCABASE+116
* SMCADSTM EQU SMCABASE+108
* SMCASWD EQU  SMCABASE+107
* SMCASWC EQU  SMCABASE+106
* SMCASWB EQU  SMCABASE+105
* SMCADSSW EQU SMCASWA
* SMCADSSP EQU SMCASWA
* SMCAZEOD EQU SMCASWA
* SMCANAVL EQU SMCASWA
* SMCANADA EQU SMCASWA
* SMCAOPFL EQU SMCASWA
* SMCADSTR EQU SMCASWA
* SMCASWAR EQU SMCASWA
* SMCAXNAM EQU SMCABASE+96
* @NM00048 EQU   SMCABASE+92
* SMCAXCTL EQU SMCABASE+88
* SMCAWRTP EQU SMCABASE+84
* SMCAENAL EQU SMCABASE+83
* SMCAFGN EQU  SMCAFOPT
* SMCAFTDS EQU SMCAFOPT
* SMCAFESV EQU SMCAFOPT
* SMCAFVOL EQU SMCAFOPT
* SMCAFDSA EQU SMCAFOPT
* SMCAFEXT EQU SMCAFOPT
* SMCAFOP2 EQU SMCAFOPT
* SMCAFOP1 EQU SMCAFOPT
* SMCAENOP EQU SMCAENTY+1
* SMCADSNF EQU SMCAENDI
* SMCARS20 EQU SMCAENDI
* SMCARS19 EQU SMCAENDI
* SMCARS18 EQU SMCAENDI
* SMCARS17 EQU SMCAENDI
* SMCARS16 EQU SMCAENDI
* SMCARS15 EQU SMCAENDI
* SMCARS14 EQU SMCAENDI
* SMCAWAIT EQU SMCABASE+72
* SMCASGFT EQU SMCABASE+68
* SMCASGWR EQU SMCABASE+64
* SMCABECB EQU SMCABASE+60
* SMCAWECB EQU SMCABASE+56
* SMCAADCB EQU SMCABASE+52
* SMCAYORX EQU SMCABASE+51
* SMCAANL EQU  SMCAALBL
* SMCAASL EQU  SMCAALBL
* SMCAANSL EQU SMCAALBL
* SMCARS13 EQU SMCAALBL
* SMCARS12 EQU SMCAALBL
* SMCARS11 EQU SMCAALBL
* SMCARS10 EQU SMCAALBL
* SMCARS09 EQU SMCAALBL
* SMCAADAR EQU SMCABASE+47
* SMCAAVOL EQU SMCASTA
* SMCAAUNT EQU SMCASTA
* SMCARS08 EQU SMCASTA
* SMCAAMOD EQU SMCASTA
* SMCAAMTY EQU SMCASTA
* SMCAADA EQU  SMCASTA
* SMCAATAP EQU SMCASTA
* SMCAANAV EQU SMCASTA
* SMCAADEV EQU SMCABASE+40
* SMCAPDCB EQU SMCABASE+36
* SMCAXORY EQU SMCABASE+35
* SMCAPNL EQU  SMCAPLBL
* SMCAPSL EQU  SMCAPLBL
* SMCAPNSL EQU SMCAPLBL
* SMCARS07 EQU SMCAPLBL
* SMCARS06 EQU SMCAPLBL
* SMCARS05 EQU SMCAPLBL
* SMCARS04 EQU SMCAPLBL
* SMCARS03 EQU SMCAPLBL
* SMCAPDAR EQU SMCABASE+31
* SMCAPVOL EQU SMCAPSTA
* SMCAPUNT EQU SMCAPSTA
* SMCARS02 EQU SMCAPSTA
* SMCAMOD EQU  SMCAPSTA
* SMCAPMTY EQU SMCAPSTA
* SMCAPDA EQU  SMCAPSTA
* SMCAPTAP EQU SMCAPSTA
* SMCAPNAV EQU SMCAPSTA
* SMCAPDEV EQU SMCABASE+24
* SMCABUFP EQU SMCABASE+20
* SMCASID EQU  SMCABASE+16
* SMCABSIZ EQU SMCABUF
* SMCATIOT EQU SMCABASE+4
* SMCATOFF EQU SMCABASE+2
* SMCADUMP EQU SMCAMISC
* SMCABSW EQU  SMCAMISC
* SMCADBSY EQU SMCAMISC
* SMCAPSDP EQU SMCAMISC
* SMCAOPI EQU  SMCAMISC
* SMCAUSER EQU SMCAMISC
* SMCAFGND EQU SMCAOPT
* SMCATDS EQU  SMCAOPT
* SMCARS01 EQU SMCAOPT
* SMCAVOL EQU  SMCAOPT
* SMCADSA EQU  SMCAOPT
* SMCAEXT EQU  SMCAOPT
* SMCAOPT2 EQU SMCAOPT
* SMCAOPT1 EQU SMCAOPT
MSSPARE  EQU   BASES01+52
MSABL    EQU   BASES01+48
MSUCBAL  EQU   BASES01+44
MSUCBPR  EQU   BASES01+40
MSBOBECB EQU   BASES01+36
MSSJQ    EQU   BASES01+32
MSECB    EQU   BASES01+28
MSPBP    EQU   BASES01+24
MSERM    EQU   BASES01+22
MSPASS   EQU   BASES01+14
MSVRB    EQU   BASES01+6
MSQHR    EQU   MSFHF
@NM00047 EQU   MSFHF
MSPSDT   EQU   MSFHF
MSREPLYB EQU   MSFHF
MSFAX    EQU   MSFHF
MSTTT    EQU   MSFHF
MSCSD    EQU   MSFHF
MSNMF    EQU   MSFHF
MSJNF    EQU   MSSSA
MSYOUT   EQU   MSNWP
MSNRP    EQU   MSSSA
MSSRDR   EQU   MSREOF
MSWRLOG  EQU   MSSSA
MSNUPSW  EQU   MSSSA
MSWRPEN  EQU   MSSSA
MSSSSIPL EQU   MSINLSW
MSSUM    EQU   MSECBFL
MSMCR    EQU   MSECBFL
MSYSOUT  EQU   MSECBFL
MSYSIN   EQU   MSECBFL
MSATTN   EQU   MSECBFL
MSWTL    EQU   MSECBFL
MSWTO    EQU   MSECBFL
MSEXT    EQU   MSECBFL
MSCCS    EQU   MSPFG
MSBSP    EQU   MSPFG
MSSYT    EQU   MSPFG
MSSYN    EQU   MSPFG
MSICR    EQU   MSPFG
MSCMC    EQU   MSPFG
MSPNB    EQU   MSPFG
MSDATE   EQU   MSPFG
@NM00046 EQU   MSBTN
MSTN     EQU   MSBTN
@NM00045 EQU   MSBTN
@NM00044 EQU   MSBTN
MSSO     EQU   MSBTN
MSROLFLG EQU   MSBTN
MSCANFLG EQU   MSBTN
MSCONFLG EQU   MSBTN
MSPNIP   EQU   MSNTAL
MSQNIP   EQU   MSNTAL
MSCURE34 EQU   MSNTAL
@NM00043 EQU   MSNTAL
@NM00042 EQU   MSNTAL
@NM00041 EQU   MSNTAL
@NM00040 EQU   MSNTAL
MSNIP    EQU   MSNTAL
@NM00039 EQU   MS1BASEX+40
@NM00038 EQU   MS1BASEX+20
@NM00037 EQU   MS1BASEX
@NM00036 EQU   BASE+128
MSLGJSCB EQU   BASE+124
@NM00035 EQU   MSSTRTSW
MSSTRTP  EQU   MSSTRTSW
MSSTRTW  EQU   MSSTRTSW
@NM00034 EQU   MSWTRSW
MSWTRP   EQU   MSWTRSW
MSWTRW   EQU   MSWTRSW
@NM00033 EQU   MSWLOGSW
MSWLOGP  EQU   MSWLOGSW
MSWLOGW  EQU   MSWLOGSW
@NM00032 EQU   MSCLOSSW
MSCLOSP  EQU   MSCLOSSW
MSCLOSW  EQU   MSCLOSSW
MSLOGLMT EQU   @NM00031+1
MSLOGCLS EQU   @NM00031
BAASCB   EQU   BASE+100
MSCOMMND EQU   BASE+92
BASP12   EQU   BASE+90
BASTCNT  EQU   BASE+88
BASESCT  EQU   BASE+86
BAJNCNT  EQU   BASE+84
BASUBECB EQU   BASE+80
BALOGCOM EQU   BASE+76
BADACNT  EQU   BASE+74
BATACNT  EQU   BASE+72
BAJBNR   EQU   BASE+64
BASP11   EQU   BASE+62
BALCCNT  EQU   BASE+61
BADUMPID EQU   BASE+60
BABCMAX  EQU   BASE+58
BAMONTR2 EQU   BASE+57
@NM00030 EQU   BAMONITR
BAMACTVE EQU   BAMONITR
@NM00029 EQU   BAMONITR
@NM00028 EQU   BAMONITR
@NM00027 EQU   BAMONITR
@NM00026 EQU   BAMONITR
BASPACE  EQU   BAMONITR
BADSN    EQU   BAMONITR
BADSO    EQU   BASE+52
BALOGECB EQU   BASE+48
@NM00025 EQU   BASPBYTE
@NM00024 EQU   BASPBYTE
@NM00023 EQU   BASPBYTE
@NM00022 EQU   BASPBYTE
@NM00021 EQU   BASPBYTE
@NM00020 EQU   BASPBYTE
@NM00019 EQU   BASPBYTE
BAMSSTAR EQU   BASPBYTE
@NM00018 EQU   MSLOGST
@NM00017 EQU   MSLOGST
MSLOGSTA EQU   MSLOGST
MSLOGIPL EQU   MSLOGST
MSLOGDAR EQU   MSLOGST
MSLOGCOM EQU   MSLOGST
MSLOGTHD EQU   MSLOGST
MSLOGENQ EQU   MSLOGST
BAMIPAR2 EQU   BASE+44
BAMINPAR EQU   BASE+42
BAPKES   EQU   BASE+40
BAICTR   EQU   BASE+38
@NM00016 EQU   BASE+37
BADSET   EQU   BARSW
BANOSET  EQU   BARSW
BAMIDNT  EQU   BARSW
BAHR     EQU   BARSW
BAVU     EQU   BARSW
BAINTSET EQU   BARSW
MSTODWTO EQU   BARSW
BAIN     EQU   BARSW
BACV     EQU   BASE+32
@NM00015 EQU   BALOG
@NM00014 EQU   BALOG
@NM00013 EQU   BALOG
@NM00012 EQU   BALOG
@NM00011 EQU   BALOG
@NM00010 EQU   BALOG
@NM00009 EQU   BALOG
BALOGINT EQU   BALOG
MSLOGSVC EQU   BALGSTAT
BAPRC    EQU   BASE+20
BAQ      EQU   BASE+16
BAIPLCC  EQU   @NM00007+2
@NM00008 EQU   @NM00007
BAIPL    EQU   BASE+12
BALAD    EQU   BASE+8
BATRM    EQU   BASE+4
BACHN    EQU   BASE
* CVTLEVL  EQU   CVTRELNO+2
* CVTNUMB  EQU   CVTRELNO
* CVTMDL   EQU   CVTFIX+250
@NM00006 EQU   CVTFIX+248
@NM00005 EQU   CVTFIX
* CVTRV482 EQU  CVTXTNT2+128
* CVTRV481 EQU  CVTXTNT2+124
* CVTRV480 EQU  CVTXTNT2+120
* CVTRV479 EQU  CVTXTNT2+118
* CVTRV478 EQU  CVTXTNT2+117
* CVTRV477 EQU  CVTXTNT2+116
* CVTRV476 EQU  CVTXTNT2+115
* CVTRV475 EQU  CVTXTNT2+114
* CVTRV474 EQU  CVTRV466
* CVTRV473 EQU  CVTRV466
* CVTRV472 EQU  CVTRV466
* CVTRV471 EQU  CVTRV466
* CVTRV470 EQU  CVTRV466
* CVTRV469 EQU  CVTRV466
* CVTRV468 EQU  CVTRV466
* CVTRV467 EQU  CVTRV466
* CVTRV465 EQU  CVTRV457
* CVTRV464 EQU  CVTRV457
* CVTRV463 EQU  CVTRV457
* CVTRV462 EQU  CVTRV457
* CVTRV461 EQU  CVTRV457
* CVTRV460 EQU  CVTRV457
* CVTRV459 EQU  CVTRV457
* CVTRV458 EQU  CVTRV457
* CVTRV456 EQU  CVTXTNT2+108
* CVTRV455 EQU  CVTXTNT2+104
* CVTRV454 EQU  CVTXTNT2+100
* CVTRV453 EQU  CVTXTNT2+96
* CVTRV452 EQU  CVTXTNT2+94
* CVTRV451 EQU  CVTXTNT2+92
* CVTRV450 EQU  CVTXTNT2+90
* CVTRV449 EQU  CVTXTNT2+88
* CVTRV448 EQU  CVTXTNT2+87
* CVTRV447 EQU  CVTXTNT2+86
* CVTRV446 EQU  CVTRV438
* CVTRV445 EQU  CVTRV438
* CVTRV444 EQU  CVTRV438
* CVTRV443 EQU  CVTRV438
* CVTRV442 EQU  CVTRV438
* CVTRV441 EQU  CVTRV438
* CVTRV440 EQU  CVTRV438
* CVTRV439 EQU  CVTRV438
* CVTRV437 EQU  CVTRV429
* CVTRV436 EQU  CVTRV429
* CVTRV435 EQU  CVTRV429
* CVTRV434 EQU  CVTRV429
* CVTRV433 EQU  CVTRV429
* CVTRV432 EQU  CVTRV429
* CVTRV431 EQU  CVTRV429
* CVTRV430 EQU  CVTRV429
* CVTRV428 EQU  CVTXTNT2+80
* CVTRV427 EQU  CVTXTNT2+76
* CVTRV426 EQU  CVTXTNT2+72
* CVTRV425 EQU  CVTXTNT2+68
* CVTATACT EQU  CVTATCVT
* CVTRV423 EQU  CVTXTNT2+62
* CVTRV422 EQU  CVTXTNT2+60
* CVTRV421 EQU  CVTXTNT2+58
* CVTRV420 EQU  CVTXTNT2+56
* CVTRV419 EQU  CVTXTNT2+55
* CVTRV418 EQU  CVTXTNT2+54
* CVTRV417 EQU  CVTRV409
* CVTRV416 EQU  CVTRV409
* CVTRV415 EQU  CVTRV409
* CVTRV414 EQU  CVTRV409
* CVTRV413 EQU  CVTRV409
* CVTRV412 EQU  CVTRV409
* CVTRV411 EQU  CVTRV409
* CVTRV410 EQU  CVTRV409
* CVTRV408 EQU  CVTRV400
* CVTRV407 EQU  CVTRV400
* CVTRV406 EQU  CVTRV400
* CVTRV405 EQU  CVTRV400
* CVTRV404 EQU  CVTRV400
* CVTRV403 EQU  CVTRV400
* CVTRV402 EQU  CVTRV400
* CVTRV401 EQU  CVTRV400
* CVTRSVA1 EQU  CVTXTNT2+48
* CVTRSVA0 EQU  CVTXTNT2+44
* CVTRSV99 EQU  CVTXTNT2+40
* CVTRSV98 EQU  CVTXTNT2+36
* CVTRSV97 EQU  CVTXTNT2+34
* CVTRSV96 EQU  CVTXTNT2+32
* CVTOLTEP EQU  CVTXTNT2+28
* CVTQIDA EQU   CVTQID+1
* CVTRSV95 EQU  CVTQID
* CVTRSV94 EQU  CVTXTNT2+20
* CVTRSV93 EQU  CVTXTNT2+16
* CVTRSV92 EQU  CVTXTNT2+12
* CVTDEBVR EQU  CVTXTNT2+8
* CVTRSV91 EQU  CVTXTNT2+6
* CVTRSV9H EQU  CVTRSV90
* CVTRSV9G EQU  CVTRSV90
* CVTRSV9F EQU  CVTRSV90
* CVTRSV9E EQU  CVTRSV90
* CVTRSV9D EQU  CVTRSV90
* CVTRSV9C EQU  CVTRSV90
* CVTRSV9B EQU  CVTRSV90
* CVTRSV9A EQU  CVTRSV90
* CVTNUCLS EQU  CVTXTNT2+4
* CVTDSSVA EQU  CVTDSSV+1
* CVTRSV89 EQU  CVTDSSV
* CVTRSV88 EQU  CVTXTNT1+8
* CVTRSV87 EQU  CVTXTNT1+4
* CVTFACHN EQU  CVTXTNT1
* CVTRV488 EQU  CVTMAP+412
* CVTRV487 EQU  CVTMAP+408
* CVTRV486 EQU  CVTMAP+404
* CVTRV485 EQU  CVTMAP+400
* CVTRV484 EQU  CVTMAP+396
* CVTRV483 EQU  CVTMAP+392
* CVTATMCA EQU  CVTATMCT+1
* CVTATMST EQU  CVTATMCT
* CVTRSV61 EQU  CVTMAP+384
* CVTRSV60 EQU  CVTMAP+380
* CVTSTOA EQU   CVTMAP+376
* CVTRSV58 EQU  CVTMAP+374
* CVTRSV57 EQU  CVTMAP+372
* CVTDDCE EQU   CVTMAP+368
* CVTPNWFR EQU  CVTMAP+364
* CVTSMF  EQU   CVTMAP+360
* CVTSULK EQU   CVTMAP+358
* CVTSLKO EQU   CVTSYSK
* CVTSLKP EQU   CVTSYSK
* CVTSLKQ EQU   CVTSYSK
* CVTSLKR EQU   CVTSYSK
* CVTRSV56 EQU  CVTSYSK
* CVTRSV55 EQU  CVTSYSK
* CVTRSV54 EQU  CVTSYSK
* CVTRSV53 EQU  CVTSYSK
* CVTRSV52 EQU  CVTA1F1
* CVTRSV51 EQU  CVTA1F1
* CVTRSV50 EQU  CVTA1F1
* CVTRSV49 EQU  CVTA1F1
* CVTRSV48 EQU  CVTA1F1
* CVTRSV47 EQU  CVTA1F1
* CVTSRSW EQU   CVTA1F1
* CVTPFSW EQU   CVTA1F1
* CVTPCVT EQU   CVTMAP+352
* CVTRSV46 EQU  CVTMAP+344
* CVTRSV45 EQU  CVTMAP+340
* CVTRSV44 EQU  CVTMAP+338
* CVTRSV43 EQU  CVTMAP+336
* CVTHJESA EQU  CVTHJES+1
* CVTRSV42 EQU  CVTHJES
* CVTEXT2A EQU  CVTEXT2+1
* CVTRSV41 EQU  CVTEXT2
* CVTAPFA EQU   CVTAPF+1
* CVTRSV40 EQU  CVTAPF
* CVTINTLA EQU  CVTMAP+320
* CVTERPV EQU   CVTMAP+316
* CVTEORM EQU   CVTMAP+312
* CVTMCHPR EQU  CVTMAP+308
* CVTTZ   EQU   CVTMAP+304
* CVTJEPS EQU   CVTMAP+300
* CVTJESCT EQU  CVTMAP+296
* CVTMODE EQU   CVTMAP+292
* CVTPTRV EQU   CVTMAP+288
* CVTREAL EQU   CVTMAP+284
* CVTRSV39 EQU  CVTMAP+280
* CVTRSV38 EQU  CVTMAP+276
* CVTDMSRA EQU  CVTDMSR+1
* CVTRSV37 EQU  CVTDMSR
* CVTQMSGA EQU  CVTQMSG+1
* CVTRSV36 EQU  CVTQMSG
* CVTAMFF EQU   CVTMAP+264
* CVTPURGA EQU  CVTPURG+1
* CVTRSV35 EQU  CVTPURG
* CVTCBSP EQU   CVTMAP+256
* CVTATERA EQU  CVTATER+1
* CVTSYST EQU   CVTATER
* CVTTAT  EQU   CVTTATA+1
* CVTTSKS EQU   CVTTATA
* CVTAQAVB EQU  CVTAQAVT+1
* CVTRSV34 EQU  CVTTCMFG
* CVTRSV33 EQU  CVTTCMFG
* CVTRSV32 EQU  CVTTCMFG
* CVTRSV31 EQU  CVTTCMFG
* CVTRSV30 EQU  CVTTCMFG
* CVTRSV29 EQU  CVTTCMFG
* CVTRSV28 EQU  CVTTCMFG
* CVTTCRDY EQU  CVTTCMFG
* CVTGTFA EQU   CVTGTF+1
* CVTRSV27 EQU  CVTGTFST
* CVTRSV26 EQU  CVTGTFST
* CVTRV319 EQU  CVTUSR
* CVTRV318 EQU  CVTFORM
* CVTRV317 EQU  CVTTMODE
* CVTRV316 EQU  CVTSTATE
* CVTRV315 EQU  CVTGTFS
* CVTGTFAV EQU  CVTGTFS
* CVT0SCR1 EQU  CVTMAP+232
* CVTTSCVB EQU  CVTTSCVT+1
* CVTRSV25 EQU  CVTTSFLG
* CVTRSV24 EQU  CVTTSFLG
* CVTRSV23 EQU  CVTTSFLG
* CVTRSV22 EQU  CVTTSFLG
* CVTRSV21 EQU  CVTTSFLG
* CVTRSV20 EQU  CVTTSFLG
* CVTRSV19 EQU  CVTTSFLG
* CVTTSRDY EQU  CVTTSFLG
* CVTRMS  EQU   CVTMAP+224
* CVTPATCH EQU  CVTMAP+220
* CVTTSCE EQU   CVTMAP+216
* CVTLNKSC EQU  CVTMAP+214
* CVTQABST EQU  CVTMAP+212
* CVTMDLDS EQU  CVTMAP+208
* CVTUSER EQU   CVTMAP+204
* CVTABEND EQU  CVTMAP+200
* CVTRSV18 EQU  CVTMAP+192
* CVTQLPAQ EQU  CVTMAP+188
* CVTQCDSR EQU  CVTMAP+184
* CVTRSV17 EQU  CVTOPTB
* CVTRSV16 EQU  CVTOPTB
* CVTFP   EQU   CVTOPTB
* CVTAPTHR EQU  CVTOPTB
* CVTNLOG EQU   CVTOPTB
* CVTTOD  EQU   CVTOPTB
* CVTCTIMS EQU  CVTOPTB
* CVTPROT EQU   CVTOPTB
* CVTXPFP EQU   CVTOPTA
* CVTASCII EQU  CVTOPTA
* CVTRSV13 EQU  CVTOPTA
* CVTRSV12 EQU  CVTOPTA
* CVTNIP  EQU   CVTOPTA
* CVTDDR  EQU   CVTOPTA
* CVTAPR  EQU   CVTOPTA
* CVTCCH  EQU   CVTOPTA
* CVTSNCTR EQU  CVTMAP+180
* CVTQMWR EQU   CVTMAP+176
* CVTQOCR EQU   CVTMAP+172
* CVT1EF00 EQU  CVTMAP+168
* CVTMZ00 EQU   CVTMAP+164
* CVTHEAD EQU   CVTMAP+160
* CVTRSV11 EQU  CVTMAP+156
* CVT0PT01 EQU  CVTMAP+152
* CVTIERLC EQU  CVTMAP+144
* CVTILCH EQU   CVTMAP+140
* CVT0DS  EQU   CVTMAP+136
* CVTFBOSV EQU  CVTMAP+132
* CVTNUCB EQU   CVTMAP+128
* CVTIXAVL EQU  CVTMAP+124
* CVTIOQET EQU  CVTMAP+120
* CVTDCBA EQU   CVTMAP+117
* CVTMVS2 EQU   CVTDCB
* CVT6DAT EQU   CVTDCB
* CVT4MPS EQU   CVTDCB
* CVTRSV09 EQU  CVTDCB
* CVT4MS1 EQU   CVTDCB
* CVT2SPS EQU   CVTDCB
* CVT1SSS EQU   CVTDCB
* CVTRSV08 EQU  CVTDCB
* CVTSTB  EQU   CVTMAP+112
* CVTQTD00 EQU  CVTMAP+108
* CVTQTE00 EQU  CVTMAP+104
* CVTCUCB EQU   CVTMAP+100
* CVTSJQ  EQU   CVTMAP+96
* CVTPBLDL EQU  CVTMAP+92
* CVTTPC  EQU   CVTMAP+88
* CVTSVDCB EQU  CVTMAP+84
* CVTBRET EQU   CVTMAP+82
* CVTEXIT EQU   CVTMAP+80
* CVT0FN00 EQU  CVTMAP+76
* CVTDARA EQU   CVTDAR+1
* CVTRSV07 EQU  CVTFLGS1
* CVTRSV06 EQU  CVTFLGS1
* CVTRSV05 EQU  CVTFLGS1
* CVTRSV04 EQU  CVTFLGS1
* CVTRSV03 EQU  CVTFLGS1
* CVTRSV02 EQU  CVTFLGS1
* CVTRSV01 EQU  CVTFLGS1
* CVTDMPLK EQU  CVTFLGS1
* CVTXITP EQU   CVTMAP+68
* CVTZDTAB EQU  CVTMAP+64
* CVTMSLT EQU   CVTMAP+60
* CVTDATE EQU   CVTMAP+56
* CVTBTERM EQU  CVTMAP+52
* CVTSYSAD EQU  CVTMAP+48
* CVTXTLER EQU  CVTMAP+44
* CVTILK2 EQU   CVTMAP+40
* CVTILK1 EQU   CVTMAP+36
* CVTPRLTV EQU  CVTMAP+32
* CVTPCNVT EQU  CVTMAP+28
* CVT0VL00 EQU  CVTMAP+24
* CVTXAPG EQU   CVTMAP+20
* CVTBUF  EQU   CVTMAP+16
* CVTJOB  EQU   CVTMAP+12
* CVTLINK EQU   CVTMAP+8
* CVT0EF00 EQU  CVTMAP+4
* CVTTCBP EQU   CVTMAP
* CVT     EQU   CVTMAP
@NM00002 EQU   @NM00001+2
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         CVT   DSECT=YES,LIST=YES
         IEESMCA
         END   IEEMB820
++SRC(IEEMB821) DISTLIB(AOS00) SYSLIB(SAMPLIB) .
         TITLE 'IEEMB821 - SMF PARAMETER PROCESSOR                   '
IEEMB821 CSECT ,                                                01.0001
@MAINENT DS    0H                                               01.0001
         USING *,@15                                            01.0001
         B     @PROLOG                                          01.0001
         DC    AL1(16)                                          01.0001
         DC    C'IEEMB821 '                                         SKV
         DC    C'&SYSDATE &SYSTIME '                                SKV
         DC    C'TSV0024 '                                          SKV
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01.0001
         BALR  @12,0                                            01.0001
@PSTART  DS    0H                                               01.0001
         USING @PSTART,@12                                      01.0001
         L     @00,@SIZDATD                                     01.0001
         GETMAIN R,LV=(0)
         LR    @11,@01                                          01.0001
         USING @DATD,@11                                        01.0001
         ST    @13,@SA00001+4                                   01.0001
         LM    @00,@01,20(@13)                                  01.0001
         ST    @11,8(,@13)                                      01.0001
         LR    @13,@11                                          01.0001
         MVC   @PC00001(12),0(@01)                              01.0001
REPLYN   EQU   100
*                                           MODULE                   */
*                                                               03.0028
*SMCAPTR=SMCADDR;                      /* GET ADDRESS OF SMCA        */
         L     @10,@PC00001+8                                   01.0029
         L     SMCAPTR,SMCADDR(,@10)                            01.0029
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= SMCADFLT                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= ESSTABLISH SMCA OPTION DEFAULTS                 */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT SETS UP THE DEFAULTS FOR THOSE SMCA                */
*/*  SMCA OPTIONS WHICH REQUIRE SETTINGS OF OTHER THAN ZEROS         */
*/*  THEY INCLUDE MAN=, EXT=, AND OPT= PARAMETER OPTIONS             */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    SMCA CONTROL BLOCK                                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, ALL DEFALUTS SET IN SMCA                     */
*/*  OUTPUT                                                          */
*/*    SMCAMAN SET TO ONE                                            */
*/*    SMCAUSER SET TO ONE                                           */
*/*    SMCAEXT SET TO ONE                                            */
*/*    SMCAOPT1 SET TO ONE                                           */
*/*    SMCAOPT2 SET TO ONE                                           */
*/*  RETURN CODE= NONE                                               */
*/*  CHANGE LOG:                                                     */
*/*    SKV  -  02/15/09  -  (YES, 2009) ADDED CHECK IF FIRST COL ON  */
*/*                         INPUT = * OR AN #, THEN SKIP LINE AND    */
*/*                         READ ANOTHER SINCE IT IS A COMMENT LINE. */
*/*                                                                  */
*/********************************************************************/
*SMCAMAN='1'B;                         /* MAN=ALL ASSUMED            */
*SMCAUSER='1'B;                                                 02.0031
         OI    SMCAMAN(SMCAPTR),B'11000000'                     02.0031
*SMCAEXT='1'B;                         /* EXT=YES ASSUMED            */
*SMCAOPT1='1'B;                        /* OPT=2 ASSUMED              */
*SMCAOPT2='1'B;                                                 02.0034
         OI    SMCAEXT(SMCAPTR),B'11100000'                     02.0034
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= PLIBPREP                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= SYS1.PARMLIB PROCESSOR                          */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT OPENS, READS AND CLOSES PARMLIB                    */
*/*  IF AN OPEN, I/O OR MEMBER NOT FOUND ERROR OCCURS, AN            */
*/*  APPROPRIATE ERROR MESSAGE IS ISSUED AND THE OPERATOR            */
*/*  PROMPTED TO ENTER THE SMF PARAMETERES                           */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT= NONE                                                     */
*/*EXIT=                                                             */
*/*  CONDITION= THE PARMLIB MEMBER HAS BEEN PROCESSED                */
*/*  OUTPUT=                                                         */
*/*    BUFFER -THE RECORDS FROM THE PARMLIB MEMBER ARE COMPRESSED,   */
*/*      AND CONCATINATED INTO THIS AREA                             */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/*  CONDITION= AN I/O ERROR, OPEN ERROR OR MEMBER NOT FOUND OCCURED */
*/*  OUTPUT=                                                         */
*/*    BUFFER - AN ERROR MESSAGE ISSUED AND THE OPERATOR             */
*/*      RESPONCE PLACED INTO THIS AREA                              */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*PLIBERR='0'B;                         /* INIT GENERAL ERROR SWC     */
         NI    PLIBERR,B'01111111'                              02.0035
*NOTFNDSC='0'B;                        /* INIT NOT FOUND SWC         */
*IOERRSC='0'B;                         /* INIT I/O ERROR SWC         */
*CONSOLE='0'B;                         /* INIT OPERATOR INPUT SWC    */
         NI    NOTFNDSC,B'01011011'                             02.0038
*GEN(MVC  RMACS(MACLEN),DMACS);        /* INIT L FORM MACROS         */
         MVC  RMACS(MACLEN),DMACS
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= OPENPLIB                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= PARMLIB OPEN PROCESSING                         */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  SYS1.PARMLIB IS OPENED. IF AN OPEN FAILURE OCCURS               */
*/*  MESSAGE IEE365I IS ISSUED TO THE OPERATOR                       */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    I365I - MESSAGE FROM MESSAGE MODULE IEEMB824                  */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, SYS1.PARMLIB OPENED SUCCESSFULLY             */
*/*  OUTPUT=                                                         */
*/*    DCBLST - DCB FOR PARMLIB OPENED                               */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/*  CONDITION= ERROR, SYS1.PARMLIB NOT OPENED                       */
*/*  OUTPUT=                                                         */
*/*    PLIBERR - SET TO INDICATE ERROR IN PROCESSING                 */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*GEN(OPEN (DCBLST,INPUT),MF=(E,OPENLST)); /* OPEN PARMLIB            */
         OPEN (DCBLST,INPUT),MF=(E,OPENLST)
*IF DCBOFOPN='0'B THEN                 /* WAS PARMLIB OPENED         */
         LA    @10,DCBLST                                       03.0041
         TM    DCBOFOPN+40(@10),B'00010000'                     03.0041
         BNZ   @RF00041                                         03.0041
*  DO;                                 /* NO,PROCESS ERROR           */
*    PLIBERR='1'B;                     /* INDICATE GENERAL ERROR     */
         OI    PLIBERR,B'10000000'                              03.0043
*    MSGBUF(1:L365I+4)=I365I;          /* GET MSG IEE365I            */
         L     @10,@CV00049                                     03.0044
         LA    @04,3                                            03.0044
         AH    @04,L365I(,@10)                                  03.0044
         L     @10,@CV00049                                     03.0044
         EX    @04,@SM00762                                     03.0044
*    MSGBUF(22:28)=CPARMLIB;           /* MOVE 'PARMLIB' TO MSG TEXT */
         MVC   MSGBUF+21(7),@CC00096                            03.0045
*    GEN(WTO  ,MF=(E,MSGBUF));         /* WRITE MESSAGE              */
         WTO  ,MF=(E,MSGBUF)
*  END;                                                         03.0047
*IF PLIBERR='0'B THEN                  /* OPEN SUCCESSFUL            */
@RF00041 TM    PLIBERR,B'10000000'                              02.0048
         BNZ   @RF00048                                         02.0048
*  DO;                                 /* YES, LETS TRY TO READ IT   */
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= FINDMEM                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= FIND SMF PARMLIB MEMBER IN SYS1.PARMLIB         */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  POSTION SYS1.PARMLIB (FIND) TO THE SMF PARMLIB                  */
*/*  MEMBER TO BE USED FOR THIS IPL. IF AN I/O ERROR OR MEMBER       */
*/*  NOT FOUND CONDITION OCCURS, APPROPRIATE ERROR SWITCHES          */
*/*  ARE SET.                                                        */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    DCBLST - OPEN DCB FOR PARMLIB                                 */
*/*    PARMMEM - PARMLIB MEMBER NAME FOR THIS IPL                    */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, PARMLIB MEMBER FOUND SUCCESSFULLY            */
*/*  OUTPUT=                                                         */
*/*    SYS1.PARMLIB POSITIONED TO PARMLIB MEMBER                     */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/*  CONDITION= PARMLIB MEMBER NOT FOUND                             */
*/*  OUTPUT=                                                         */
*/*    NOTFNDSC - SET TO INDICATE MEMBER NOT FOUND                   */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/*  CONDITION= I/O ERROR ON PARMLIB DIRECTORY                       */
*/*  OUTPUT=                                                         */
*/*    IOERRSC - SET TO INDICATE I/O ERROR ON PARMLIB                */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*RFY (R2,R15) RSTD;                    /* GET REGISTER CONTROL       */
*R2=ADDR(PARMMEM);                     /* ADDRESS OF SMF MEMBER      */
         L     R2,@PC00001                                      03.0051
*GEN(FIND  DCBLST,(R2),D);             /* FIND SMF PARMLIB MEMBER    */
         FIND  DCBLST,(R2),D
*FNDRTNCD=R15;                         /* SAVE FIND RETURN CODE      */
         LR    FNDRTNCD,R15                                     03.0053
*RFY (R2,R15) UNRSTD;                  /* RELEASE REGISTER CONTROL   */
*IF FNDRTNCD¬=0 THEN                   /* IS MEMBER IN PARMLIB       */
         LTR   FNDRTNCD,FNDRTNCD                                03.0055
         BZ    @RF00055                                         03.0055
* DO;                                  /* NO,FIND OUT WHY NOT        */
*   PLIBERR='1'B;                      /* INDICATE GENERAL ERROR     */
         OI    PLIBERR,B'10000000'                              03.0057
*   IF FNDRTNCD=4 THEN                 /* MEMBER NOT IN PARMLIB      */
         CH    FNDRTNCD,@CH00089                                03.0058
         BNE   @RF00058                                         03.0058
*     NOTFNDSC='1'B;                   /* YES, INDICATE NOT OFUND    */
         OI    NOTFNDSC,B'00000100'                             03.0059
*   ELSE                               /* IT MUST BE I/O ERROR       */
*     IOERRSC='1'B;                    /* INDICATE I/O ERROR         */
         B     @RC00058                                         03.0060
@RF00058 OI    IOERRSC,B'00100000'                              03.0060
* END;                                                          03.0061
@RC00058 DS    0H                                               03.0062
*    IF PLIBERR='0'B THEN              /* WAS MEMBER FOUND           */
@RF00055 TM    PLIBERR,B'10000000'                              02.0062
         BNZ   @RF00062                                         02.0062
*      DO;                             /* YES, READ IT INTO BUFFER   */
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= BUILDBUF                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= CONCATINATE PARMLIB RECORDS                     */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT CONCATINATES THE PARMLIB MEMBER RECORDS            */
*/*  INTO A SINGLE 'BUFFER'. EACH RECORD IS READ, SCANNED TO FIND    */
*/*  THE NON BLANK PROTION BETWEEN COLUMNS 1 AND 71, AND THIS        */
*/*  NON BLANK PORTION COPIED TO THE NEXT SPOT IN 'BUFFER'.          */
*/*  RECORDS THAT ARE BLANK BETWEEN COLUMNS 1 AND 71 ARE SKIPPED.    */
*/*  IF THE LAST NON BLANK CHARACTER OF A RECORD IS NOT A ',',       */
*/*  THE MEMBER IS CONSIDERED TO BE TERMINATED.                      */
*/*  THE TOTAL NUMBER OF CHARACTERS TAKEN FROM A PARMLIB             */
*/*  CANNOT EXCEED 120, OR THE REMAINDER OF THE                      */
*/*  RECORD/MEMBER IS TRUNCATED.                                     */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    DCBLST - OPEN DCB FOR PARMLIB                                 */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, BUFFER CONTANS ALL MEANINGFUL INFORMATION    */
*/*    FROM PARMLIB MEMBER                                           */
*/*  OUTPUT=                                                         */
*/*    BUFFER - CONTAINS CONCATINATED RECORDS FROM MEMBER            */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/*  CONDITION= I/O ERROR ON PARMLIB MEMBER                          */
*/*  OUTPUT=                                                         */
*/*    PLIBERR - SET TO INDICATE ERROR OCCURED                       */
*/*    IOERRSC - SET TO INDICATE I/O ERROR ON PARMLIB                */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*BUFFER=BUFFER&&BUFFER;                /* CLEAR BUFFER               */
         XC    BUFFER(121),BUFFER                               03.0064
*BUFINDX=1;                            /* INIT BUFFER INDEX          */
         LA    BUFINDX,1                                        03.0065
*ENDMEM='0'B;                          /* INIT END OF MEMBER TERM    */
         NI    ENDMEM,B'10111111'                               03.0066
*DO WHILE(ENDMEM='0'B&PLIBERR='0'B);   /* PROCESS PARMLIB LOOP       */
         B     @DE00067                                         03.0067
@DL00067 DS    0H                                               03.0068
*  GEN(READ  DECB,SF,DCBLST,INBUF,'S',,,MF=E); /* READ RECORD        */
         READ  DECB,SF,DCBLST,INBUF,'S',,,MF=E
*  GEN(CHECK DECB);                    /* WAIT FOR READ TO COMPLETE  */
         CHECK DECB
*  IF PLIBERR='0'B THEN                /* SYNAD ROUTINE GET CONTROL  */
         TM    PLIBERR,B'10000000'                              03.0070
         BNZ   @RF00070                                         03.0070
*    DO;                               /* NO, NO I/O ERROR - CONT.   */
*      DO INDX=1 TO 71 WHILE(INBUF(INDX)=' ');         /* FIND       */
         CLI   INBUF,C'*'        FIRST CHAR A * (IE COMMENT LINE)?  SKV
         BE    @DL00067           YES - SKIP LINE 9 GET NEXT        SKV
         CLI   INBUF,C'#'        FIRST CHAR A # (IE COMMENT LINE)?  SKV
         BE    @DL00067           YES - SKIP LINE 9 GET NEXT        SKV
         LA    INDX,1                                           03.0072
@DL00072 LA    @10,INBUF-1(INDX)                                03.0072
         CLI   0(@10),C' '                                      03.0072
         BNE   @DC00072                                         03.0072
*      END;                            /* FIRST NON BLANK            */
         AH    INDX,@CH00139                                    03.0073
         CH    INDX,@CH00679                                    03.0073
         BNH   @DL00072                                         03.0073
@DC00072 DS    0H                                               03.0074
*      IF INDX<=71 THEN                /* IS RECORD ALL BLANKS       */
         CH    INDX,@CH00679                                    03.0074
         BH    @RF00074                                         03.0074
*        DO;                           /* NO                         */
*          STRTCOL=INDX;               /* FIRST NON BLANK COL        */
         LR    STRTCOL,INDX                                     03.0076
*          DO INDX=STRTCOL TO 71 WHILE(INBUF(INDX)¬=' ');       03.0077
         LR    INDX,STRTCOL                                     03.0077
         B     @DE00077                                         03.0077
@DL00077 LA    @10,INBUF-1(INDX)                                03.0077
         CLI   0(@10),C' '                                      03.0077
         BE    @DC00077                                         03.0077
*          END;                        /* FIND END OF RECORD TEXT    */
         AH    INDX,@CH00139                                    03.0078
@DE00077 CH    INDX,@CH00679                                    03.0078
         BNH   @DL00077                                         03.0078
@DC00077 DS    0H                                               03.0079
*          NUMCOL=INDX-STRTCOL-1;      /* NUMBER OF CHARACTERS  03.0079
*                                         IN TEXT - 1                */
         LR    NUMCOL,INDX                                      03.0079
         SR    NUMCOL,STRTCOL                                   03.0079
         BCTR  NUMCOL,0                                         03.0079
*          IF BUFINDX+NUMCOL>=LENGTH(BUFFER) THEN /* ARE WE GOING
*                                         TO OVERFLOW BUFFER         */
         LA    @10,121                                          03.0080
         LR    @15,BUFINDX                                      03.0080
         AR    @15,NUMCOL                                       03.0080
         CR    @15,@10                                          03.0080
         BL    @RF00080                                         03.0080
*            DO;                       /* YES, TRUNCATE LAST RECORD  */
*              NUMCOL=LENGTH(BUFFER)-BUFINDX-1;   /* HOW MUCH FITS   */
         SR    @10,BUFINDX                                      03.0082
         BCTR  @10,0                                            03.0082
         LR    NUMCOL,@10                                       03.0082
*              ENDMEM='1'B;            /* LAST RECORD PROCESSED      */
         OI    ENDMEM,B'01000000'                               03.0083
*            END;                                               03.0084
*          BUFFER(BUFINDX:BUFINDX+NUMCOL)= /* MOVE NON BLANK PORTION */
*             INBUF(STRTCOL:STRTCOL+NUMCOL); /*OF RECORD TO BUFFER   */
@RF00080 LA    @10,BUFFER-1(BUFINDX)                            03.0085
         LA    @01,INBUF-1(STRTCOL)                             03.0085
         EX    NUMCOL,@SM00768                                  03.0085
*          BUFINDX=BUFINDX+NUMCOL+1;   /* NEXT SPOT IN BUFFER        */
         LR    @10,BUFINDX                                      03.0086
         AR    @10,NUMCOL                                       03.0086
         AH    @10,@CH00139                                     03.0086
         LR    BUFINDX,@10                                      03.0086
*          IF INBUF(STRTCOL+NUMCOL)¬=',' THEN   /* LAST CHAR A COMMA */
         LR    @10,STRTCOL                                      03.0087
         AR    @10,NUMCOL                                       03.0087
         LA    @01,INBUF-1(@10)                                 03.0087
         CLI   0(@01),C','                                      03.0087
         BE    @RF00087                                         03.0087
*            ENDMEM='1'B;              /* NO, LAST RECORD PROCESSED  */
         OI    ENDMEM,B'01000000'                               03.0088
*        END;                                                   03.0089
@RF00087 DS    0H                                               03.0090
*    END;                                                       03.0090
@RF00074 DS    0H                                               03.0091
*END;                                                           03.0091
@RF00070 DS    0H                                               03.0091
@DE00067 TM    ENDMEM,B'01000000'                               03.0091
         BNZ   @DC00067                                         03.0091
         TM    PLIBERR,B'10000000'                              03.0091
         BZ    @DL00067                                         03.0091
@DC00067 DS    0H                                               03.0092
*EODAD:                                /* THIS IS TARGET FOR END OF
*                                         MEMBER ROUTINE (EOD) AS
*                                         AS SPECIFIED IN PARMLIB DCB*/
*TR(BUFFER,TRANSTBL(1));               /* TRANSLATE TO UPPER CASE    */
EODAD    TR    BUFFER(121),TRANSTBL                             03.0092
*      END;                                                     02.0093
*  END;                                                         02.0094
@RF00062 DS    0H                                               02.0095
*IF PLIBERR='1'B THEN                  /* I/O,OPEN OR MEMBER NOT
*                                         FOUND ERROR                */
@RF00048 TM    PLIBERR,B'10000000'                              02.0095
         BNO   @RF00095                                         02.0095
*  DO;                                 /* TELL OPERATOR AND PROMPT   */
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= OPINPUT                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= PROMPT OPERATOR FOR SMF PARAMETERS              */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT WILL GET CONTROL IF AN OPEN, I/O OR                */
*/*  MEMBER NOT FOUND CONDITION OCCURED. IT WILL ISSUE AN            */
*/*  APPROPRIATE ERROR MESSAGE AND PROMPT THE OPERATOR FOR           */
*/*  THE SMF PARAMETERS TO BE USED THIS IPL.                         */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    DCBOFOPN - OPEN FLAGS IN DCB                                  */
*/*    NOTFNDSC - MEMBER NOT FOUND INDICATOR                         */
*/*    IOERRSC - I/O ERROR ON PARMLIB INDICATOR                      */
*/*    I356A - MESSAGE IEE356A                                       */
*/*    I352A - MESSAGE IEE352A                                       */
*/*    I353A - MESSAGE IEE353A                                       */
*/*EXIT=                                                             */
*/*  CONDITION= ERROR MESSAGE ISSUED AND OPERATOR RESPONCE           */
*/*    IN 'BUFFER'                                                   */
*/*  OUTPUT=                                                         */
*/*    BUFFER - OPERATOR RESPONCE PLACED INTO BUFFER                 */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*IF DCBOFOPN='0'B THEN                 /* PARMLIB OPEN               */
         LA    @10,DCBLST                                       03.0097
         TM    DCBOFOPN+40(@10),B'00010000'                     03.0097
         BNZ   @RF00097                                         03.0097
*  MSGBUF(1:L356A+12)=I356A;           /* NO, GET MSG IEE356A        */
         L     @10,@CV00046                                     03.0098
         LA    @04,11                                           03.0098
         AH    @04,L356A(,@10)                                  03.0098
         L     @10,@CV00046                                     03.0098
         EX    @04,@SM00770                                     03.0098
*ELSE                                                           03.0099
*  IF NOTFNDSC='1'B THEN               /* MEMBER NOT FOUND           */
         B     @RC00097                                         03.0099
@RF00097 TM    NOTFNDSC,B'00000100'                             03.0099
         BNO   @RF00099                                         03.0099
*    DO;                               /* YES, SET UP MISSING MSG    */
*      MSGBUF(1:L352A+12)=I352A;       /* GET MSG IEE352A            */
         L     @10,@CV00038                                     03.0101
         LA    @04,11                                           03.0101
         AH    @04,L352A(,@10)                                  03.0101
         L     @10,@CV00038                                     03.0101
         EX    @04,@SM00772                                     03.0101
*      MSGBUF(32:39)=PARMMEM;          /* MOVE IN PARMLIB MEMBER NAME*/
         L     @10,@PC00001                                     03.0102
         MVC   MSGBUF+31(8),PARMMEM(@10)                        03.0102
*    END;                                                       03.0103
*  ELSE                                                         03.0104
*    DO;                               /* MUST HAVE BEEN I/O ERROR   */
         B     @RC00099                                         03.0104
@RF00099 DS    0H                                               03.0105
*      MSGBUF(1:L353A+12)=I353A;       /* GET MESSAGE IEE353A        */
         L     @10,@CV00039                                     03.0105
         LA    @04,11                                           03.0105
         AH    @04,L353A(,@10)                                  03.0105
         L     @10,@CV00039                                     03.0105
         EX    @04,@SM00774                                     03.0105
*      MSGBUF(34:41)=PARMMEM;          /* MOVE IN PARMLIB MEMBER NAME*/
         L     @10,@PC00001                                     03.0106
         MVC   MSGBUF+33(8),PARMMEM(@10)                        03.0106
*    END;                                                       03.0107
*CALL PROMPTOP;                        /* GET RESPONCE FROM OPERATOR */
@RC00099 DS    0H                                               03.0108
@RC00097 BAL   @14,PROMPTOP                                     03.0108
*  END;                                                         02.0109
*IF DCBOFOPN='1'B THEN                 /* IS DCB FOR PARMLIB OPEN    */
@RF00095 LA    @10,DCBLST                                       02.0110
         TM    DCBOFOPN+40(@10),B'00010000'                     02.0110
         BNO   @RF00110                                         02.0110
*  GEN(CLOSE ,MF=(E,OPENLST));         /* YES,CLOSE IT               */
         CLOSE ,MF=(E,OPENLST)
*PROCS='1'B;                           /* INIT PARAMETER PARSE  01.0112
*                                         TERMINATOR                 */
@RF00110 OI    PROCS,B'01000000'                                01.0112
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= PARSEINT                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= INITIALIZE FOR PARSING BUFFER                   */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THE KEYWORD SPECIFIED AND REQUIRED TABLE ARE INITIALIZED        */
*/*  TO INDICATE THAT NO KEYWORDS HAVE BEEN SPECIFIED                */
*/*  AND THAT THE JWT=, BUF=, AND SID= KEYWORDS ARE REQUIRED.        */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT= NONE                                                     */
*/*EXIT=                                                             */
*/*  CONDITION= KEYWORD SPEC AND REQ TABLE INITIALIZED               */
*/*  OUTPUT=                                                         */
*/*    KEYSPEC - SET TO SET TO INDICATE NO KEYWORDS SPECIFIED        */
*/*      (FOR ALL KEYWORDS)                                          */
*/*    KEYREQ - SET TO INDICATE KEYWORD REQUIRED                     */
*/*      (FOR JWT, BUF, AND SID KEYWORDS)                            */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*DO TBLINDX=1 TO DIM(KEYCNTL);         /* INIT KEYWORD REQUIRED/
*                                         SPECIFIED TABLE            */
         LA    TBLINDX,1                                        02.0113
@DL00113 DS    0H                                               02.0114
*  KEYCNTL(TBLINDX)=KEYCNTL(TBLINDX)&&KEYCNTL(TBLINDX);         02.0114
         LA    @10,KEYCNTL-1(TBLINDX)                           02.0114
         XC    0(1,@10),0(@10)                                  02.0114
*END;                                                           02.0115
         AH    TBLINDX,@CH00139                                 02.0115
         CH    TBLINDX,@CH00127                                 02.0115
         BNH   @DL00113                                         02.0115
*KEYREQ(1)='1'B;                       /* SID KEYWORD REQUIRED       */
         OI    KEYREQ,B'01000000'                               02.0116
*KEYREQ(2)='1'B;                       /* JWT KEYWORD REQUIRED       */
         OI    KEYREQ+1,B'01000000'                             02.0117
*KEYREQ(3)='1'B;                       /* BUF KEYWORD REQUIRED       */
         OI    KEYREQ+2,B'01000000'                             02.0118
*OPISWC='0'B;                          /* OPI=YES NOT PROCESSED YET  */
         NI    OPISWC,B'11111101'                               01.0119
*DO WHILE(PROCS='1'B);                 /* PROCESS UNTIL ALL     01.0120
*                                         PARAMETERS ARE ARE VALID   */
         B     @DE00120                                         01.0120
@DL00120 DS    0H                                               01.0121
*  KEYINVLD='0'B;                      /* NO INVALID KEYWORDS YET    */
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= BUFRPARS                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= BUFFER PARSE CONTROLLER                         */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT IS RESPONSIBLE FOR PARSEING THE                    */
*/*  INPUT BUFFER. IT WILL:                                          */
*/*                                                                  */
*/*  . FIND THE RANGE OF THE NEXT KEYWORD IN THE BUFFER; I.E., THE   */
*/*    BEGINNING AND ENDING INDEX OF THE KEYWORD IN BUFFER.          */
*/*                                                                  */
*/*  . DETERMIN WHEN THE ENTIRE BUFFER HAS BEEN PARSED AND           */
*/*    TERMINATE THE SCAN IF IT HAS BEEN                             */
*/*                                                                  */
*/*  . CHECK FOR A VALID KEYWORD, AND INVOKE THE APPROPRIATE         */
*/*    KEYWORD PROCESSOR IF VALID.                                   */
*/*                                                                  */
*/*  . IF AN INVALID KEYWORD OR AN INVALID KEYWORD VALUE             */
*/*    HAS BEEN FOUND, ISSUE AN APPROPRIATE ERROR MESSAGE            */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    BUFFER - LINE TO BE PARSED                                    */
*/*    IEE355IK - EXTENSION OF MESSAGE IEE355I FROM IEEMB824         */
*/*    IEE355IV - EXTENSION OF MESSAGE IEE355I FROM IEEMB824         */
*/*                                                                  */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, ALL KEYWORDS IN BUFFER PARSED AND PROCESSED  */
*/*  OUTPUT=                                                         */
*/*    SMCA UPDATED (SEE KEYWORD PROCESSOR SPECS)                    */
*/*    PARSE - SET TO INDICATE PARSE COMPLETE                        */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*PARSE='0'B;                           /* INIT PARSE TERMINATOR      */
         NI    KEYINVLD,B'11110110'                             02.0122
*KEYSTART=1;                           /* INIT BUFFER INDEX          */
         LA    KEYSTART,1                                       02.0123
*DO WHILE(PARSE='0'B|BUFFER(KEYSTART)¬=' ');                    02.0124
         B     @DE00124                                         02.0124
@DL00124 DS    0H                                               02.0125
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= FINDEND                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= FIND RANGE OF NEXT KEYWORD IN 'BUFFER'          */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT FINDS THE INDEX OF THE FIRST CHARACTER OF THE      */
*/*  NEXT KEYWORD IN BUFFER AND THE INDEX OF THE LAST CHARACTER      */
*/*  OF THAT KEYWORD.                                                */
*/*  THE BUFFER IS SCANNED FROM THE END OF THE LAST KEYWORD          */
*/*  PROCESSED OR THE BEGINNING OF BUFFER IF THIS IS THE FIRST SCAN, */
*/*  UNTIL A CHARACTER IS FOUND WHICH IS NOT A COMMA OR              */
*/*  A BLANK.                                                        */
*/*  I.E., ANY NUMBER OF COMMAS MAY PRECEED OR FOLLOW A KEYWORD      */
*/*  IN THE BUFFER; A BLANK TERMINATES THE BUFFER.                   */
*/*  IF THE FIRST NON COMMA IS A BLANK, THE BUFFER HAS BEEN          */
*/*  COMPLETELY PROCESSED.                                           */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    KEYSTART - INDEX OF END OF LAST KEYWORD PROCESSED OR          */
*/*      1 IF FIRST BUFFER SCAN                                      */
*/*    BUFFER - BUFFER CONTAINNING PARAMETERS                        */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, RANGE OF NEXT KEYWORD DETERMINED             */
*/*  OUTPUT=                                                         */
*/*    KEYSTART - SET TO INDEX IN 'BUFFER' OF FIRST CHARACTER        */
*/*    KEYEND - SET TO INDEX IN 'BUFFER' OF LAST CHARACTER           */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/*  CONDITION= END OF BUFFER FOUND AND NO MORE KEYWORDS PRESENT     */
*/*  OUTPUT=                                                         */
*/*    PARSE - SET TO INDICATE BUFFER PARSING COMPLETE               */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*DO KEYSCAN=KEYSTART TO LENGTH(BUFFER) WHILE(BUFFER(KEYSCAN)=',');
         LR    KEYSCAN,KEYSTART                                 03.0125
         B     @DE00125                                         03.0125
@DL00125 LA    @10,BUFFER-1(KEYSCAN)                            03.0125
         CLI   0(@10),C','                                      03.0125
         BNE   @DC00125                                         03.0125
*END;                                  /* BYPASS ALL COMMAS          */
         AH    KEYSCAN,@CH00139                                 03.0126
@DE00125 CH    KEYSCAN,@CH00223                                 03.0126
         BNH   @DL00125                                         03.0126
@DC00125 DS    0H                                               03.0127
*KEYSTART=KEYSCAN;                     /* FIRST NON COMMA POSITION   */
         LR    KEYSTART,KEYSCAN                                 03.0127
*IF BUFFER(KEYSTART)=' ' THEN          /* IS POSITION A BLANK        */
         LA    @10,BUFFER-1(KEYSTART)                           03.0128
         CLI   0(@10),C' '                                      03.0128
         BNE   @RF00128                                         03.0128
*  PARSE='1'B;                         /* YES, BUFFER PARSE DONE     */
         OI    PARSE,B'00000001'                                03.0129
*ELSE                                                           03.0130
*  DO;                                                          03.0130
         B     @RC00128                                         03.0130
@RF00128 DS    0H                                               03.0131
*    DO KEYSCAN=KEYSTART TO LENGTH(BUFFER) WHILE(               03.0131
*      BUFFER(KEYSCAN)¬=' ' &          /* IF NOT BLANK AND           */
*      BUFFER(KEYSCAN)¬=',');          /* NOT COMMA THEN KEEP        */
         LR    KEYSCAN,KEYSTART                                 03.0131
         B     @DE00131                                         03.0131
@DL00131 LA    @10,BUFFER-1(KEYSCAN)                            03.0131
         CLI   0(@10),C' '                                      03.0131
         BE    @DC00131                                         03.0131
         LA    @10,BUFFER-1(KEYSCAN)                            03.0131
         CLI   0(@10),C','                                      03.0131
         BE    @DC00131                                         03.0131
*    END;                              /* LOOKING FOR END OF KEYWORD */
         AH    KEYSCAN,@CH00139                                 03.0132
@DE00131 CH    KEYSCAN,@CH00223                                 03.0132
         BNH   @DL00131                                         03.0132
@DC00131 DS    0H                                               03.0133
*    KEYEND=KEYSCAN-1;                 /* BACK UP TO KEYWORD END CHAR*/
         LR    @10,KEYSCAN                                      03.0133
         BCTR  @10,0                                            03.0133
         STH   @10,KEYEND                                       03.0133
*  END;                                                         03.0134
*  IF PARSE='0'B THEN                  /* ALL KEYWORDS PROCESSED     */
@RC00128 TM    PARSE,B'00000001'                                02.0135
         BNZ   @RF00135                                         02.0135
*    DO;                               /* NO, PROCESS NEXT KEYWORD   */
*      KEYLEN=KEYEND-KEYSTART+1;       /* LENGTH OF KEYWORD          */
         LA    @10,1                                            02.0137
         LH    KEYLEN,KEYEND                                    02.0137
         SR    KEYLEN,KEYSTART                                  02.0137
         AR    KEYLEN,@10                                       02.0137
*      KEYFOUND='0'B;                  /* ASSUM KEYWORD NOT VALID    */
         NI    KEYFOUND,B'11101111'                             02.0138
*      KEYRTNCD=0;                     /* INIT RTN CD FROM KEY PROC  */
         SR    KEYRTNCD,KEYRTNCD                                02.0139
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= KEYPROC                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= CHECK FOR VALID KEYWORD                         */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT WILL SCAN THE KEYWORD CURRENTLY                    */
*/*  BEING LOOKED AT IN THE BUFFER TO DETERMINE IF IT IS             */
*/*  ONE OF THE VALID SMF PARAMETERS. IF IT IS VALID                 */
*/*  THE APPROPRIATE KEYWORD PROCESSING ROUTINE IS CALLED TO         */
*/*  PROCESS THE KEYWORD VALUE.                                      */
*/*                                                                  */
*/*  OPERATION=                                                      */
*/*    THE BUFFER KEYWORD IS COMPARED TO ALL ENTRIES                 */
*/*    IN THE VALID KEYWORD TABLE. IF A MATCH IS FOUND,              */
*/*    THE KEYWORD IS VALID, AND THE ADDRESS OF THE APPROPRIATE      */
*/*    KEYWORD PROCESSOR IS OBTAINED FROM THE KEYWORD                */
*/*    PROCESSOR ADDRESS TABLE. THIS KEYWORD PROCESSOR IS THEN       */
*/*    CALLED TO PROCESS THE KEYWORD VALUE.                          */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    BUFFER - INPUT LINE CONTAINNING THOSE PARAMETERS              */
*/*             TO BE PARSED                                         */
*/*    KEYSTART - THE INDEX OF THE CURRENT KEYWORD IN BUFFER         */
*/*    KEYTBL - TABLE OF ALL VALID KEYWORDS                          */
*/*    ADDTBL - TABLE OF KEYWORD PROCESSOR ADDRESSES                 */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, KEYWORD FOUND                                */
*/*  OUTPUT=                                                         */
*/*    KEYFOUND - SET TO INDICATE KEYWORD FOUND AND PROCESSED        */
*/*  RETURN CODE=                                                    */
*/*    KEYRTNCD - SET BY KEYWORD PROCESSOR CALLED BY THIS            */
*/*               SEGMENT                                            */
*/*                                                                  */
*/*  CONDITION= ERROR, KEYWORD NOT FOUND, INVALID KEYWORD            */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*KEYPTR=ADDR(BUFFER(KEYSTART));        /* ADD OF KEYWORD IN BUFFER   */
         LA    KEYPTR,BUFFER-1(KEYSTART)                        03.0140
*IF KEYLEN>=4 THEN                     /* GREATER THAN FOUR CHARACTER*/
         CH    KEYLEN,@CH00089                                  03.0141
         BL    @RF00141                                         03.0141
*  DO TBLINDX=1 TO DIM(KEYTBL) WHILE(KEYFOUND='0'B); /* POSSIBLY VLD */
         LR    TBLINDX,@10                                      03.0142
@DL00142 TM    KEYFOUND,B'00010000'                             03.0142
         BNZ   @DC00142                                         03.0142
*    IF KEYTBL(TBLINDX)=KEYID THEN     /* IS BUFFER KEYWORD VALID    */
         LA    @10,4                                            03.0143
         LR    @01,TBLINDX                                      03.0143
         MR    @00,@10                                          03.0143
         LA    @09,KEYTBL-4(@01)                                03.0143
         CLC   0(4,@09),KEYID(KEYPTR)                           03.0143
         BNE   @RF00143                                         03.0143
*      DO;                             /* YES                        */
*        KEYFOUND='1'B;                /* INDICATE VALID KEYWD FOUND */
         OI    KEYFOUND,B'00010000'                             03.0145
*        PARMLEN=KEYLEN-4;             /* LENGTH OF KEYWORD VALUE    */
         LCR   @10,@10                                          03.0146
         AR    @10,KEYLEN                                       03.0146
         LR    PARMLEN,@10                                      03.0146
*        CALL KEYROUTN;                /* INVOKE KEYWORD PROCESSOR   */
         L     @15,ADDTBL-4(@01)                                03.0147
         BALR  @14,@15                                          03.0147
*      END;                                                     03.0148
*  END;                                                         03.0149
@RF00143 AH    TBLINDX,@CH00139                                 03.0149
         CH    TBLINDX,@CH00127                                 03.0149
         BNH   @DL00142                                         03.0149
@DC00142 DS    0H                                               03.0150
*      IF KEYFOUND='0'B THEN           /* KEYWORD VALID - FOUND      */
@RF00141 TM    KEYFOUND,B'00010000'                             02.0150
         BNZ   @RF00150                                         02.0150
*        DO;                           /* NO, PROCESS ERROR          */
*          MSGBUF(1:L355IK+4)=I355IK;      /* GET KEYWORD ERROR MSG  */
         L     @10,@CV00043                                     02.0152
         LA    @09,3                                            02.0152
         AH    @09,L355IK(,@10)                                 02.0152
         L     @10,@CV00043                                     02.0152
         EX    @09,@SM00780                                     02.0152
*          IF KEYLEN>25 THEN           /* MESSAGE ONLY HOLDS 25 CHARS*/
         LA    @10,25                                           02.0153
         CR    KEYLEN,@10                                       02.0153
         BNH   @RF00153                                         02.0153
*            KEYLEN=25;                /* MAXIMUM WE CAN MOVE        */
         LR    KEYLEN,@10                                       02.0154
*          MSGBUF(13:13+KEYLEN-1)=                              02.0155
*          KEYWORD(1:KEYLEN);          /* MOVE TEXT TO MSG           */
@RF00153 LR    @10,KEYLEN                                       02.0155
         BCTR  @10,0                                            02.0155
         EX    @10,@SM00782                                     02.0155
*          CALL ERRMSG;                /* WRITE ERROR MESSAGE(S)     */
         BAL   @14,ERRMSG                                       02.0156
*        END;                                                   02.0157
*      ELSE                                                     02.0158
*        IF KEYRTNCD¬=0 THEN           /* INVLAID KEYWORD VALUE      */
         B     @RC00150                                         02.0158
@RF00150 LTR   KEYRTNCD,KEYRTNCD                                02.0158
         BZ    @RF00158                                         02.0158
*          DO;                         /* YES, PROCESS ERROR         */
*            MSGBUF(1:L355IV+4)=I355IV;      /* GET VALUE ERROR MSG  */
         L     @10,@CV00044                                     02.0160
         LA    @09,3                                            02.0160
         AH    @09,L355IV(,@10)                                 02.0160
         L     @10,@CV00044                                     02.0160
         EX    @09,@SM00784                                     02.0160
*            IF KEYLEN>25 THEN         /* MESSAGE ONLY HOLDS 25 CHARS*/
         LA    @10,25                                           02.0161
         CR    KEYLEN,@10                                       02.0161
         BNH   @RF00161                                         02.0161
*              KEYLEN=25;              /* MAXIMUM WE CAN MOVE        */
         LR    KEYLEN,@10                                       02.0162
*            MSGBUF(13:13+KEYLEN-1)=                            02.0163
*            KEYWORD(1:KEYLEN);        /* MOVE TEXT TO MSG           */
@RF00161 LR    @10,KEYLEN                                       02.0163
         BCTR  @10,0                                            02.0163
         EX    @10,@SM00782                                     02.0163
*            CALL ERRMSG;              /* WRITE ERROR MESSAGE(S)     */
         BAL   @14,ERRMSG                                       02.0164
*          END;                                                 02.0165
*      KEYSTART=KEYEND+1;              /* START FOR NEXT KEYWORD     */
@RF00158 DS    0H                                               02.0166
@RC00150 LA    KEYSTART,1                                       02.0166
         AH    KEYSTART,KEYEND                                  02.0166
*    END;                                                       02.0167
*END;                                                           02.0168
@RF00135 DS    0H                                               02.0168
@DE00124 TM    PARSE,B'00000001'                                02.0168
         BZ    @DL00124                                         02.0168
         LA    @10,BUFFER-1(KEYSTART)                           02.0168
         CLI   0(@10),C' '                                      02.0168
         BNE   @DL00124                                         02.0168
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= CKMISSNG                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= CHECK FOR MISSING REQUIRED KEYWORDS             */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  ANY REQURIED KEYWORDS THAT WERE NOT SPECIFIED WILL              */
*/*  DISPLAYED TO THE OPERATOR.                                      */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    I355IM - MESSAGE IEE355I (KEYWORD MISSING)                    */
*/*    KEYREQ - KEYWORD REQUIRED TABLE                               */
*/*    KEYSPEC - KEYWORD SPECIFIED TABLE                             */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, ALL REQUIRED PARAMETERS WERE SPECIFIED       */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/*  CONDITION= AT LEAST ONE REQUIRED KEYWORD WAS NOT SPECIFIED      */
*/*  OUTPUT=                                                         */
*/*    ERROR MESSAGE FOR EACH MISSING KEYWORD                        */
*/*    KEYINVLD - SET TO INDICATE INVALID PARAMETERS                 */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*MSGBUF(1:L355IM+4)=I355IM;            /* INIT MISSING MESSAGE       */
         L     @10,@CV00045                                     02.0169
         LA    @04,3                                            02.0169
         AH    @04,L355IM(,@10)                                 02.0169
         L     @10,@CV00045                                     02.0169
         EX    @04,@SM00786                                     02.0169
*DO TBLINDX=1 TO DIM(KEYCNTL);         /* SCAN FOR MISSING KEYWORDS  */
         LA    TBLINDX,1                                        02.0170
@DL00170 DS    0H                                               02.0171
*  IF KEYREQ(TBLINDX)='1'B &           /* IF KEYWORD IS REQUIRED     */
*     KEYSPEC(TBLINDX)='0'B THEN       /* BUT NOT SPECIFIED          */
         LA    @10,KEYREQ-1(TBLINDX)                            02.0171
         TM    0(@10),B'01000000'                               02.0171
         BNO   @RF00171                                         02.0171
         TM    0(@10),B'10000000'                               02.0171
         BNZ   @RF00171                                         02.0171
*    DO;                               /* ISSUE MISSING MESSAGE      */
*      MSGBUF(13:15)=KEYTBL(TBLINDX);   /* MISSING KEYWORD TO MESSAGE*/
         LR    @10,TBLINDX                                      02.0173
         SLA   @10,2                                            02.0173
         LA    @06,KEYTBL-4(@10)                                02.0173
         MVC   MSGBUF+12(3),0(@06)                              02.0173
*      CALL ERRMSG;                    /* WRITE ERROR MESSAGE(S)     */
         BAL   @14,ERRMSG                                       02.0174
*    END;                                                       02.0175
*END;                                                           02.0176
@RF00171 AH    TBLINDX,@CH00139                                 02.0176
         CH    TBLINDX,@CH00127                                 02.0176
         BNH   @DL00170                                         02.0176
*  IF KEYINVLD='1'B THEN               /* ANY PARAMETER ERRORS       */
         TM    KEYINVLD,B'00001000'                             01.0177
         BNO   @RF00177                                         01.0177
*    DO;                               /* YES                        */
*      MSGBUF(1:L356A+12)=I356A;       /* ERROR MESSAGE              */
         L     @10,@CV00046                                     01.0179
         LA    @04,11                                           01.0179
         AH    @04,L356A(,@10)                                  01.0179
         L     @10,@CV00046                                     01.0179
         EX    @04,@SM00770                                     01.0179
*      CALL PROMPTOP;                  /* PROMPT OPERATOR FOR   01.0180
*                                         CORRECTED INFORMATION      */
         BAL   @14,PROMPTOP                                     01.0180
*    END;                                                       01.0181
*  ELSE                                                         01.0182
*    IF SMCAOPI='1'B &                 /* OPERATOR VERIFICATION REQ  */
*       OPISWC='0'B THEN               /* AND NOT PERFORMED BEFORE   */
         B     @RC00177                                         01.0182
@RF00177 TM    SMCAOPI(SMCAPTR),B'00100000'                     01.0182
         BNO   @RF00182                                         01.0182
         TM    OPISWC,B'00000010'                               01.0182
         BNZ   @RF00182                                         01.0182
*      DO;                             /* THEN SHOW OPERATOR CURRENT
*                                         KEYWORD AND VALUES         */
*        OPISWC='1'B;                  /* OPERATOR HAD HIS CHANCE    */
         OI    OPISWC,B'00000010'                               01.0184
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= OPVERIFY                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= OPERATOR PARAMETER VERIFICATION PROCESSING      */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT WILL TAKE THE VALUES CURRENTLY ENTERED             */
*/*  FOR ALL PARAMETERS AND LIST THEM FOR THE OPERATOR.              */
*/*  THE OPERATOR WILL THEN BE GIVEN A CHANCE TO ALTER               */
*/*  ANY OR ALL OF THE PARAMETERS. THE OPERATOR COULD ALSO           */
*/*  ENTER PARAMETERS WHICH HAVE NOT BEEN YET ENTERED.               */
*/*  THIS PROCESSES WILL OCCUR ONLY ONCE.                            */
*/*                                                                  */
*/*  OPERATION=                                                      */
*/*    THE KEYWORD SPECIFIED TABLE IS EXAMINED TO                    */
*/*    DETERMINE WHICH PARAMETERS ARE TO BE LISTED FOR THE OPERATOR. */
*/*    IF A PARAMETER IS TO BE LISTED, ITS NAME IS OBTAINED          */
*/*    FROM THE TABLE OF VALID KEYWORDS AND ITS VALUE FROM           */
*/*    THE VALUE TABLE.                                              */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    IEE354I - MESSAGE IEE354I FROM IEEMB824                       */
*/*    IEE354IX - EXTENSION OF MESSAGE IEE354I FROM IEEMB824         */
*/*    IEE357A - MESSAGE IEE357A FROM IEEMB824                       */
*/*    KEYSPEC - KEYWORD SPECIFIED ARRAY FOR INDICATION OF           */
*/*              THOSE KEYWORDS CURRENTLY ENTERED                    */
*/*    KEYTBL - VALID KEYWORD TABLE FOR NAME OF KEYWORDS             */
*/*    KEYVALUE - KEYWORD VALUE TABLE FOR CURRENT VALUE OF KEYWORD   */
*/*                                                                  */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, ALL PARAMETERS LISTED AND OPERATOR           */
*/*             ACCEPTS THEM                                         */
*/*  OUTPUT=                                                         */
*/*    ALL PARAMETERS LISTED FOR OPERATOR                            */
*/*    PROCS - SET TO INDICATE PARAMETER PROCESSING ALL DONE         */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/*  CONDITION= NORMAL, ALL PARAMETERS LISTED AND OPERATOR           */
*/*             DOES NOTACCEPTS THEM                                 */
*/*  OUTPUT=                                                         */
*/*    ALL PARAMETERS LISTED FOR OPERATOR                            */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*RFY R1 RSTD;                          /* GET REGISTER CONTROL       */
*R1=ADDR(I354I);                       /* ADDR MESSAGE IEE354I       */
         L     R1,@CV00040                                      02.0186
*GEN(WTO   ,MF=(E,(R1)));              /* ISSUE MESSAGE              */
         WTO   ,MF=(E,(R1))
*RFY R1 UNRSTD;                        /* RELEASE REGISTER CONTROL   */
*MSGBUF(1:L354IX+4)=I354IX;            /* GET OPERATOR VER. MESSAGE  */
         L     @10,@CV00041                                     02.0189
         LA    @04,3                                            02.0189
         AH    @04,L354IX(,@10)                                 02.0189
         L     @10,@CV00041                                     02.0189
         EX    @04,@SM00789                                     02.0189
*DO TBLINDX=1 TO DIM(KEYCNTL);         /* LOOK FOR ALL SPEC KEYWDS   */
         LA    TBLINDX,1                                        02.0190
@DL00190 DS    0H                                               02.0191
*  IF KEYSPEC(TBLINDX)='1'B THEN       /* WAS KEYWORD SPEC           */
         LA    @10,KEYSPEC-1(TBLINDX)                           02.0191
         TM    0(@10),B'10000000'                               02.0191
         BNO   @RF00191                                         02.0191
*    DO;                               /* YES, SHOW IT AND VALUE     */
*      MSGBUF(13:16)=KEYTBL(TBLINDX);   /* PLACE 'KEY=' IN MSG       */
         LR    @10,TBLINDX                                      02.0193
         SLA   @10,2                                            02.0193
         LA    @06,KEYTBL-4(@10)                                02.0193
         MVC   MSGBUF+12(4),0(@06)                              02.0193
*      MSGBUF(17:20)=KEYVALUE(TBLINDX);   /* PLACE VALUE IN MSG      */
         LA    @06,KEYVALUE-4(@10)                              02.0194
         MVC   MSGBUF+16(4),0(@06)                              02.0194
*      GEN(WTO   ,MF=(E,MSGBUF));      /* WRITE VERIFICATION MSG     */
         WTO   ,MF=(E,MSGBUF)
*    END;                                                       02.0196
*END;                                                           02.0197
@RF00191 AH    TBLINDX,@CH00139                                 02.0197
         CH    TBLINDX,@CH00127                                 02.0197
         BNH   @DL00190                                         02.0197
*MSGBUF(1:L357A+12)=I357A;             /* GET MESSAGE IEE357A        */
         L     @10,@CV00047                                     02.0198
         LA    @04,11                                           02.0198
         AH    @04,L357A(,@10)                                  02.0198
         L     @10,@CV00047                                     02.0198
         EX    @04,@SM00791                                     02.0198
*CALL PROMPTOP;                        /* GET OPERATOR ANSWER        */
         BAL   @14,PROMPTOP                                     02.0199
*IF BUFFER(1)=' ' |                    /* IS RESPONCE BLANK          */
*   BUFFER(1:2)='U ' THEN              /* OR 'U '                    */
         CLI   BUFFER,C' '                                      02.0200
         BE    @RT00200                                         02.0200
         CLC   BUFFER(2),@CC00695                               02.0200
         BNE   @RF00200                                         02.0200
@RT00200 DS    0H                                               02.0201
*  PROCS='0'B;                         /* YES, PARAMETER PROCESSING
*                                         DONE                       */
         NI    PROCS,B'10111111'                                02.0201
*      END;                                                     01.0202
@RF00200 DS    0H                                               01.0203
*    ELSE                                                       01.0203
*      PROCS='0'B;                     /* END OF KEYWORD PROCESSING  */
         B     @RC00182                                         01.0203
@RF00182 NI    PROCS,B'10111111'                                01.0203
*END;                                                           01.0204
@RC00182 DS    0H                                               01.0204
@RC00177 DS    0H                                               01.0204
@DE00120 TM    PROCS,B'01000000'                                01.0204
         BO    @DL00120                                         01.0204
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= COMPAT                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= COMPATIBLE OPTIONS CHECKER                      */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT CHECKS TO ASSURE THAT THE DSV= AND OPT=            */
*/*  PARAMETERS ARE COMPATIABLE.                                     */
*/*  DSV= 2|3 IMPLIES OPT=2 MUST HAVE BEEN ENTERED OR                */
*/*  DEFALUTED TO. IF DSV=2|3 AND OPT NOT EQUAL 2, AN                */
*/*  DIOGNOSTIC MESSAGE IS ISSUED AND OPT=2 ASSUMED.                 */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    SMCADSA - INDICATES DSV SETTING                               */
*/*    SMCAOPT2 - INDICATES OPT SETTING                              */
*/*    IEE359I - MESSAGE IEE359I FROM MODULE IEEMB824                */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, DSV AND OPT COMPATABLE                       */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/*  CONDITION= ERROR, DSV AND OPT INCOMPATABLE                      */
*/*  OUTPUT=                                                         */
*/*    IEE359I - DIAGNOSTIC MESSAGE                                  */
*/*    SMCAOPT2 - SET ON                                             */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*IF SMCADSA='1'B &                     /* DATA SET STATISTICS REQ    */
*   SMCAOPT2='0'B THEN                 /* AND JOB/STEP ACCT NOT SPEC */
         TM    SMCADSA(SMCAPTR),B'00010000'                     02.0205
         BNO   @RF00205                                         02.0205
         TM    SMCAOPT2(SMCAPTR),B'01000000'                    02.0205
         BNZ   @RF00205                                         02.0205
*  DO;                                 /* YES, INCOMPATIBLE PARMS    */
*    RFY R1 RSTD;                      /* GET REGISTER CONTROL       */
*    SMCAOPT2='1'B;                    /* JOB/STEP ACCT WILL BE 02.0208
*                                         PERFORMED                  */
         OI    SMCAOPT2(SMCAPTR),B'01000000'                    02.0208
*    R1=ADDR(I359I);                   /* ADDR OF MESSAGE IEE359I    */
         L     R1,@CV00048                                      02.0209
*    GEN(WTO   ,MF=(E,(R1)));          /* ISSUE WARNING MESSAGE      */
         WTO   ,MF=(E,(R1))
*    RFY R1 UNRSTD;                    /* RELEASE REGISTER CONTROL   */
*  END;                                                         02.0212
*SMCAFOPT=SMCAOPT;                     /* FOREGROUND OPTIONS EQ 01.0213
*                                         BACKGROUND OPTIONS         */
@RF00205 MVC   SMCAFOPT(1,SMCAPTR),SMCAOPT(SMCAPTR)             01.0213
*SMCAFGN='1'B;                                                  01.0214
         OI    SMCAFGN(SMCAPTR),B'00000001'                     01.0214
*RETURN;                                                        01.0215
@EL00001 L     @13,4(,@13)                                      01.0215
@EF00001 L     @00,@SIZDATD                                     01.0215
         LR    @01,@11                                          01.0215
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  01.0215
         BR    @14                                              01.0215
*BUFKEY: PROC;                                                  02.0216
BUFKEY   STM   @14,@05,@SA00002+12                              02.0216
         STM   @07,@12,@SA00002+48                              02.0216
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= BUFKEY                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= BUF= KEYWORD PROCESSOR                          */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE WILL VALIDATE THE VALUE SUPPLIED FOR THE           */
*/*  BUF KEYWORD. THE VALUE MUST BE 3 OR 4 DECIMAL DIGITS IN LENGTH, */
*/*  AND BE BETWEEN 400 AND 8192 BYTES, INCLUSIVE. THE VALUE         */
*/*  IS STORED IN SMCABUF.                                           */
*/*                                                                  */
*/*ENTRY POINT= BUFKEY                                               */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, THE VALUE GIVEN WAS ACCEPTABLE               */
*/*  OUTPUT=                                                         */
*/*    SMCABUF - NUMBER OF BYTES IN BOTH SMF BUFFERS                 */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 3 OR 4 DIGITS    */
*/*    OR THE VALUE SPEICIFIED WAS NOT BETWEEN 400                   */
*/*    AND 8192, INCLUSIVE.                                          */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*IF PARMLEN=3 | PARMLEN=4 THEN         /* BUF VALUE LENGTH OK        */
         CH    PARMLEN,@CH00086                                 02.0217
         BE    @RT00217                                         02.0217
         CH    PARMLEN,@CH00089                                 02.0217
         BNE   @RF00217                                         02.0217
@RT00217 DS    0H                                               02.0218
*  DO;                                 /* YES                        */
*    CALL DECCNVT;                     /* CONVERT BUFFER LENGTH 02.0219
*                                         TO DECIMAL                 */
         BAL   @14,DECCNVT                                      02.0219
*    IF KEYRTNCD=0 &                   /* NO ERROR IN CONVERSTION AND*/
*       DECVALUE>=MINBUFS &            /* BUFFER NOT SMALLER THAN MIN*/
*       DECVALUE<=MAXBUFS THEN         /* BUFFER NOT LARGER THAN MAX */
         LTR   KEYRTNCD,KEYRTNCD                                02.0220
         BNZ   @RF00220                                         02.0220
         LH    @10,DECVALUE                                     02.0220
         CH    @10,@CH00104                                     02.0220
         BL    @RF00220                                         02.0220
         CH    @10,@CH00100                                     02.0220
         BH    @RF00220                                         02.0220
*      DO;                             /* THEN, VALUE FOR BUF OK     */
*        SMCABUF=EVAL(DECVALUE/8)*8;         /* BUFFER SIZE IN  02.0222
*                                         MULTIPLE OF 8 TO SMCA      */
         LA    @07,8                                            02.0222
         LR    @00,@10                                          02.0222
         SRDA  @00,32                                           02.0222
         DR    @00,@07                                          02.0222
         MR    @00,@07                                          02.0222
         ST    @01,SMCABUF(,SMCAPTR)                            02.0222
*        KEYVALUE(3)=BLANKS;           /* INIT KEYWORD VALUE TABLE   */
         MVC   KEYVALUE+8(4),@CC00090                           02.0223
*        KEYVALUE(3,1:PARMLEN)=        /* SETUP VALUE TABLE FROM     */
*           PARMVALU(1:PARMLEN);       /* BUF = PARAMETER            */
         LR    @10,PARMLEN                                      02.0224
         BCTR  @10,0                                            02.0224
         EX    @10,@SM00793                                     02.0224
*        KEYSPEC(3)='1'B;              /* INDICATE KEYWORD SPECIFIED */
         OI    KEYSPEC+2,B'10000000'                            02.0225
*      END;                                                     02.0226
*    ELSE                                                       02.0227
*      KEYRTNCD=4;                     /* INVALID KEYWORD VALUE      */
         B     @RC00220                                         02.0227
@RF00220 LA    KEYRTNCD,4                                       02.0227
*  END;                                                         02.0228
@RC00220 DS    0H                                               02.0229
*ELSE                                                           02.0229
*  KEYRTNCD=4;                         /* INVALID VALUE SPECIFIED    */
         B     @RC00217                                         02.0229
@RF00217 LA    KEYRTNCD,4                                       02.0229
*RETURN;                                                        02.0230
@EL00002 DS    0H                                               02.0230
@EF00002 DS    0H                                               02.0230
@ER00002 LM    @14,@05,@SA00002+12                              02.0230
         LM    @07,@12,@SA00002+48                              02.0230
         BR    @14                                              02.0230
*END BUFKEY;                                                    02.0231
         B     @EL00002                                         02.0231
*DECCNVT: PROC;                                                 02.0232
DECCNVT  STM   @14,@05,12(@13)                                  02.0232
         STM   @07,@12,48(@13)                                  02.0232
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= DECCNVT                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= CONVERT TO BINARY ROUTINE                       */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE WILL ENSURE THAT THE PARAMETER VALUE               */
*/*  CONATINS NUMERIC DIGITS. THE DIGITS WILL BE CONVERTED           */
*/*  TO BINARY AND STORED IN DECVALUE.                               */
*/*                                                                  */
*/*  OPERATION=                                                      */
*/*    THE PARAMETER VALUE IS SCANNED FROM RIGHT TO LEFT             */
*/*    FOR 'PARMLEN' AND PLACED IN A PACK AREA IN THE SAME MANNER.   */
*/*    THE PACK AREA IS THEN PACKED AND CONVERTED TO BINARY          */
*/*                                                                  */
*/*ENTRY POINT= DECCNVT                                              */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, THE PARAMETER VALUE WAS SUCCESSFULLY         */
*/*    CONVERETED                                                    */
*/*  OUTPUT=                                                         */
*/*    DECVALUE EQUAL TO CONVERTED VALUE                             */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE PARAMETER VALUE CONTAINED OTHER THAN NUMERIC     */
*/*    DIGITS                                                        */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*POSITIN=4;                            /* LENGTH OF PACK FIELD       */
         LA    POSITIN,4                                        02.0233
*PACKFLD=PACKFLD&&PACKFLD;             /* CLEAR PACK FIELD           */
         XC    PACKFLD(4),PACKFLD                               02.0234
*DO PRANGE=0 TO (PARMLEN-1) WHILE(                              02.0235
*  PARMVALU(PARMLEN-PRANGE)>='0' &      /* DEC DIGIT >= 0 AND        */
*  PARMVALU(PARMLEN-PRANGE)<='9');      /* DEC DIGIT <= 9            */
         SR    PRANGE,PRANGE                                    02.0235
         B     @DE00235                                         02.0235
@DL00235 LR    @10,PARMLEN                                      02.0235
         SR    @10,PRANGE                                       02.0235
         ST    @10,@TF00001                                     02.0235
         ALR   @10,KEYPTR                                       02.0235
         CLI   PARMVALU-1(@10),C'0'                             02.0235
         BL    @DC00235                                         02.0235
         LR    @10,KEYPTR                                       02.0235
         AL    @10,@TF00001                                     02.0235
         CLI   PARMVALU-1(@10),C'9'                             02.0235
         BH    @DC00235                                         02.0235
*  PACKFLD(POSITIN)=PARMVALU(PARMLEN-PRANGE); /* DIGIT TO PACK FLD   */
         LA    @10,PACKFLD-1(POSITIN)                           02.0236
         LR    @02,KEYPTR                                       02.0236
         AL    @02,@TF00001                                     02.0236
         MVC   0(1,@10),PARMVALU-1(@02)                         02.0236
*  POSITIN=POSITIN-1;                  /* DECREMENT PACK INDX        */
         BCTR  POSITIN,0                                        02.0237
*END;                                                           02.0238
         AH    PRANGE,@CH00139                                  02.0238
@DE00235 LR    @10,PARMLEN                                      02.0238
         BCTR  @10,0                                            02.0238
         CR    PRANGE,@10                                       02.0238
         BNH   @DL00235                                         02.0238
@DC00235 DS    0H                                               02.0239
*IF PRANGE=PARMLEN THEN                /* ANY NON DEC DIGITS FOUND   */
         CR    PRANGE,PARMLEN                                   02.0239
         BNE   @RF00239                                         02.0239
*  DO;                                 /* NO, ALL DEC DIGITS         */
*    PACK(PACKFLD,PACKFLD);            /* ZONED DEC TO PACKED DEC    */
         PACK  PACKFLD(4),PACKFLD(4)                            02.0241
*    CVB(DECVALUE,PACKFLD);            /* PACKED DEC TO BINARY       */
         XC    @TS00001(8),@TS00001                             02.0242
         MVC   @TS00001+4(4),PACKFLD                            02.0242
         CVB   @10,@TS00001                                     02.0242
         STH   @10,DECVALUE                                     02.0242
*  END;                                                         02.0243
*ELSE                                                           02.0244
*  KEYRTNCD=4;                         /* INDICATE INVALID DEC DIGIT */
         B     @RC00239                                         02.0244
@RF00239 LA    KEYRTNCD,4                                       02.0244
*RETURN;                                                        02.0245
@EL00003 DS    0H                                               02.0245
@EF00003 DS    0H                                               02.0245
@ER00003 LM    @14,@05,12(@13)                                  02.0245
         LM    @07,@12,48(@13)                                  02.0245
         BR    @14                                              02.0245
*END DECCNVT;                                                   02.0246
         B     @EL00003                                         02.0246
*DSVKEY: PROC;                                                  02.0247
DSVKEY   STM   @14,@05,12(@13)                                  02.0247
         STM   @07,@12,48(@13)                                  02.0247
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= DSVKEY                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= DSV= KEYWORD PROCESSOR                          */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE WILL VALIDTAE THE PARAMETER SUPPLIED FOR           */
*/*  THE DSV KEYWORD. THE PARAMETER MUST BE 0,1,2, OR 3.             */
*/*  SMCADSA AND SMCAVOL ARE SET ACCORDINGLY                         */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= DSVKEY                                               */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, A VALID PARAMTER WAS SPECIFIED               */
*/*  OUTPUT=                                                         */
*/*    SMCADSA AND SMCAVOL ARE SET                                   */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT ONE              */
*/*    OR THE VALUE WAS NOT 0,1,2, OR 3.                             */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*IF PARMLEN=1 THEN                     /* IS PARAMETER LENGTH OK     */
         CH    PARMLEN,@CH00139                                 02.0248
         BNE   @RF00248                                         02.0248
*  DO;                                 /* YES                        */
*    IF PARMVALU(1)='0' THEN           /* IS D.A. OR D.S ACCT DESIRED*/
         CLI   PARMVALU(KEYPTR),C'0'                            02.0250
         BNE   @RF00250                                         02.0250
*      DO;                                                      02.0251
*        SMCADSA='0'B;                 /* NO D.S ACCOUNTING          */
*        SMCAVOL='0'B;                 /* NO D.A. ACCOUNTING         */
         NI    SMCADSA(SMCAPTR),B'11100111'                     02.0253
*      END;                                                     02.0254
*    ELSE                                                       02.0255
*      IF PARMVALU(1)='1' THEN         /* D.A ACCOUNTING ONLY        */
         B     @RC00250                                         02.0255
@RF00250 CLI   PARMVALU(KEYPTR),C'1'                            02.0255
         BNE   @RF00255                                         02.0255
*        DO;                           /* YES                        */
*          SMCADSA='0'B;               /* NO D.S ACCOUNTING          */
*          SMCAVOL='1'B;               /* D.A ACCOUNTING             */
         OI    SMCAVOL(SMCAPTR),B'00001000'                     02.0258
         NI    SMCADSA(SMCAPTR),B'11101111'                     02.0258
*        END;                                                   02.0259
*      ELSE                                                     02.0260
*        IF PARMVALU(1)='2' THEN       /* D.S. ACCOUNTING ONLY       */
         B     @RC00255                                         02.0260
@RF00255 CLI   PARMVALU(KEYPTR),C'2'                            02.0260
         BNE   @RF00260                                         02.0260
*          DO;                         /* YES                        */
*            SMCADSA='1'B;             /* D.S ACCOUNTING             */
*            SMCAVOL='0'B;             /* NO D.A. ACCOUNTING         */
         OI    SMCADSA(SMCAPTR),B'00010000'                     02.0263
         NI    SMCAVOL(SMCAPTR),B'11110111'                     02.0263
*          END;                                                 02.0264
*        ELSE                                                   02.0265
*          IF PARMVALU(1)='3' THEN        /* D.S. AND D.A ACCOUNTING */
         B     @RC00260                                         02.0265
@RF00260 CLI   PARMVALU(KEYPTR),C'3'                            02.0265
         BNE   @RF00265                                         02.0265
*            DO;                       /* YES                        */
*              SMCADSA='1'B;           /* D.S ACCOUNITNG             */
*              SMCAVOL='1'B;           /* D.A. ACCOUNITNG            */
         OI    SMCADSA(SMCAPTR),B'00011000'                     02.0268
*            END;                                               02.0269
*          ELSE                                                 02.0270
*            KEYRTNCD=4;               /* INVALID VALUE SPECIFIED    */
         B     @RC00265                                         02.0270
@RF00265 LA    KEYRTNCD,4                                       02.0270
*  END;                                                         02.0271
@RC00265 DS    0H                                               02.0271
@RC00260 DS    0H                                               02.0271
@RC00255 DS    0H                                               02.0271
@RC00250 DS    0H                                               02.0272
*ELSE                                                           02.0272
*  KEYRTNCD=4;                         /* INVALID VALUE SPECIFIED    */
         B     @RC00248                                         02.0272
@RF00248 LA    KEYRTNCD,4                                       02.0272
*IF KEYRTNCD=0 THEN                    /* WAS A VALID PARM. SPEC.    */
@RC00248 LTR   KEYRTNCD,KEYRTNCD                                02.0273
         BNZ   @RF00273                                         02.0273
*  DO;                                 /* YES                        */
*    KEYVALUE(7)=BLANKS;               /* INIT KEYWORD VALUE TABLE   */
         MVC   KEYVALUE+24(4),@CC00090                          02.0275
*    KEYVALUE(7,1)=                    /* DSV= PARAMETER VALUE       */
*       PARMVALU(1);                   /* TO VALUE TABLE             */
         MVC   KEYVALUE+24(1),PARMVALU(KEYPTR)                  02.0276
*    KEYSPEC(7)='1'B;                  /* INDICATE KEYWORD SPECIFIED */
         OI    KEYSPEC+6,B'10000000'                            02.0277
*  END;                                                         02.0278
*RETURN;                                                        02.0279
@EL00004 DS    0H                                               02.0279
@EF00004 DS    0H                                               02.0279
@ER00004 LM    @14,@05,12(@13)                                  02.0279
         LM    @07,@12,48(@13)                                  02.0279
         BR    @14                                              02.0279
*END DSVKEY;                                                    02.0280
         B     @EL00004                                         02.0280
*ERRMSG: PROC;                                                  02.0281
ERRMSG   STM   @14,@12,@SA00005+12                              02.0281
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= ERRMSG                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= ERROR MESSAGE PROCESSOR FOR KEYWORD ERRORS      */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE WILL ISSUE ALL INVALID KEYWORD, INVALID            */
*/*  KEYWORD VALUE, OR MISSING KEYWORD MESSAGES.                     */
*/*  IF THIS IS THE FIRST OF SUCH ERROR MESSAGES,                    */
*/*  THE 'SMF PARAMETER ERRORS' MESSAGE WILL BE ISSUED.              */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= ERRMSG                                               */
*/*  INPUT=                                                          */
*/*    MSGBUF - CONTAINS APPROPRIATE MESSAGE TO BE ISSUED            */
*/*    KEYINVLD - INDICATES WHETHER THIS IS FIRST ERROR              */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, MESSAGE(S) ISSUED TO OPERATOR                */
*/*  OUTPUT=                                                         */
*/*    MESSAGE TO OPERATOR                                           */
*/*    KEYINVLD - SET TO INDICATE AT LEAST ONE ERROR HAS OCCURED     */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*IF KEYINVLD='0'B THEN                 /* FIRST ERROR PROCESSED      */
         TM    KEYINVLD,B'00001000'                             02.0282
         BNZ   @RF00282                                         02.0282
*  DO;                                 /* YES, PROCESS HEADER MESSAGE*/
*    RFY R1 RSTD;                      /* GET REGISTER CONTROL       */
*    KEYINVLD='1'B;                    /* INDICATE ERROR OCCURED     */
         OI    KEYINVLD,B'00001000'                             02.0285
*    R1=ADDR(I355IE);                  /* SMF ERROR MESSAGE IEE355I  */
         L     R1,@CV00042                                      02.0286
*    GEN(WTO   ,MF=(E,(R1)));          /* WRITE MESSAGE              */
         WTO   ,MF=(E,(R1))
*    RFY R1 UNRSTD;                    /* RELEASE REGISTER CONTROL   */
*  END;                                                         02.0289
*GEN(WTO   ,MF=(E,MSGBUF));            /* WRITE KEYWORD ERROR MESSAGE*/
@RF00282 DS    0H                                               02.0290
         WTO   ,MF=(E,MSGBUF)
*END ERRMSG;                                                    02.0291
@EL00005 DS    0H                                               02.0291
@EF00005 DS    0H                                               02.0291
@ER00005 LM    @14,@12,@SA00005+12                              02.0291
         BR    @14                                              02.0291
*EXTKEY: PROC;                                                  02.0292
EXTKEY   STM   @14,@05,12(@13)                                  02.0292
         STM   @07,@12,48(@13)                                  02.0292
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= EXTKEY                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= EXT= KEYWORD PROCESSOR                          */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR           */
*/*  THE EXT KEYWORD. THE PARAMETER MUST BE EITHER YES OR NO.        */
*/*  SMCAEXT IS SET ACCORDINGLY                                      */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= EXTKEY                                               */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, A VALID PARAMETER WAS SPECIFIED              */
*/*  OUTPUT=                                                         */
*/*    SMCAEXT IS SET                                                */
*/*    KEYWORD VALUE TABLE IS UPDATED                                */
*/*    KEYWORD SPECIFIED TABLE IS UPDATED                            */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 3 OR 4,          */
*/*    OR THE VALUE SPECIFIED WAS NOT YES OR NO.                     */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*IF PARMLEN=2 | PARMLEN=3 THEN         /* IS PARAMETER LENGTH OK     */
         CH    PARMLEN,@CH00092                                 02.0293
         BE    @RT00293                                         02.0293
         CH    PARMLEN,@CH00086                                 02.0293
         BNE   @RF00293                                         02.0293
@RT00293 DS    0H                                               02.0294
*  DO;                                 /* YES                        */
*    IF PARMVALU(1:3)=CYES THEN        /* WAS EXIT =YES SPECIFIED    */
         CLC   PARMVALU(3,KEYPTR),@CC00098                      02.0295
         BNE   @RF00295                                         02.0295
*      SMCAEXT='1'B;                   /* YES, USER EXITS TO BE TAKEN*/
         OI    SMCAEXT(SMCAPTR),B'00100000'                     02.0296
*    ELSE                                                       02.0297
*      IF PARMLEN=2 &                  /* PARMETER VALUE LENGTH 2 AND*/
*         PARMVALU(1:2)=CNO THEN       /* WAS EXT=NO SPECIFIED       */
         B     @RC00295                                         02.0297
@RF00295 CH    PARMLEN,@CH00092                                 02.0297
         BNE   @RF00297                                         02.0297
         CLC   PARMVALU(2,KEYPTR),@CC00093                      02.0297
         BNE   @RF00297                                         02.0297
*        SMCAEXT='0'B;                 /* YES,USER EXITS NOT TO 02.0298
*                                         BE TAKEN                   */
         NI    SMCAEXT(SMCAPTR),B'11011111'                     02.0298
*      ELSE                                                     02.0299
*        KEYRTNCD=4;                   /* INVALID KEYWORD VALUE      */
         B     @RC00297                                         02.0299
@RF00297 LA    KEYRTNCD,4                                       02.0299
*  END;                                                         02.0300
@RC00297 DS    0H                                               02.0300
@RC00295 DS    0H                                               02.0301
*ELSE                                                           02.0301
*  KEYRTNCD=4;                         /* INVALID KEYWORD VALUE      */
         B     @RC00293                                         02.0301
@RF00293 LA    KEYRTNCD,4                                       02.0301
*IF KEYRTNCD=0 THEN                    /* WAS A VALID PARM ENTERED   */
@RC00293 LTR   KEYRTNCD,KEYRTNCD                                02.0302
         BNZ   @RF00302                                         02.0302
*  DO;                                 /* YES                        */
*    KEYVALUE(5)=BLANKS;               /* INIT KEYWORD VALUE TABLE   */
         MVC   KEYVALUE+16(4),@CC00090                          02.0304
*    KEYVALUE(5,1:PARMLEN)=            /* SET UP VALUE TABLE         */
*       PARMVALU(1:PARMLEN);           /* FROM PARAMETER VALUE       */
         LR    @10,PARMLEN                                      02.0305
         BCTR  @10,0                                            02.0305
         EX    @10,@SM00797                                     02.0305
*    KEYSPEC(5)='1'B;                  /* INDICATE KEYWORD SPECIFIED */
         OI    KEYSPEC+4,B'10000000'                            02.0306
*  END;                                                         02.0307
*RETURN;                                                        02.0308
@EL00006 DS    0H                                               02.0308
@EF00006 DS    0H                                               02.0308
@ER00006 LM    @14,@05,12(@13)                                  02.0308
         LM    @07,@12,48(@13)                                  02.0308
         BR    @14                                              02.0308
*END EXTKEY;                                                    02.0309
         B     @EL00006                                         02.0309
*JWTKEY: PROC;                                                  02.0310
JWTKEY   STM   @14,@05,@SA00007+12                              02.0310
         STM   @07,@12,@SA00007+48                              02.0310
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= JWTKEY                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= JWT= KEYWORD PROCESSOR                          */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT WILL VALIDATE THE VALUE SUPPLIED FOR THE           */
*/*  JWT KEYWORD. THE VALUE MUST BE 1 TO 3 DECIMAL DIGITS,           */
*/*  AND BE GREATER THAN ZERO. THE VALUE IS THEN CONVERTED           */
*/*  TO BINARY, MICROSECOND UNITS, AND STORED IN SMCA. THE           */
*/*  BINARY EQUIVALENT OF THE JWT PARAMETER VALUE IS RETURNED        */
*/*  TO THE CALLER                                                   */
*/*                                                                  */
*/*  OPERATION=                                                      */
*/*    THE FOLLOWING CALCULATION IS PERFORMED TO CONVERT THE         */
*/*    JWT VALUE TO MICROSECOND UNITS, WHERE N IS THE SPECIFIED      */
*/*    PARAMETER VALUE. DIVIDING BY 1048576 SHIFTS OUT THE           */
*/*    MEANINGLESS 12 LOW ORDER PLACES.                              */
*/*      SMACAJWT=(N*60000000)/1048576                               */
*/*                                                                  */
*/*ENTRY POINT= JWTKEY                                               */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION=  THE VALUE SPECIFIED WAS ACCEPTABLE                  */
*/*  OUTPUT=                                                         */
*/*    SMCAJWT - JWT VALUE IN MICROSECOND UNITS                      */
*/*    JWTMIN - JWT VALUE IN MINUTES                                 */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE LENGTH OF THE VALUE WAS NOT 1-3 DECIAML DIGITS   */
*/*    OR THE VALUE SPECIFIED WAS NOT GREATER THAN ZERO.             */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*IF PARMLEN>0 & PARMLEN<4 THEN         /* JWT VALUE LENGTH OK        */
         LTR   PARMLEN,PARMLEN                                  02.0311
         BNP   @RF00311                                         02.0311
         CH    PARMLEN,@CH00089                                 02.0311
         BNL   @RF00311                                         02.0311
*  DO;                                                          02.0312
*    CALL DECCNVT;                     /* CONVERT WAIT TIME TO DEC.  */
         BAL   @14,DECCNVT                                      02.0313
*    IF KEYRTNCD=0 &                   /* NO ERROR IN CONVERTING     */
*       DECVALUE>0 THEN                /* AND VALUE POSITIVE         */
         SR    @10,@10                                          02.0314
         CR    KEYRTNCD,@10                                     02.0314
         BNE   @RF00314                                         02.0314
         LH    @07,DECVALUE                                     02.0314
         CR    @07,@10                                          02.0314
         BNH   @RF00314                                         02.0314
*      DO;                             /* YES, PARM VALUE OK         */
*        JWTMIN=DECVALUE;              /* SAVE VALUE IN MIN     02.0316
*                                         FOR RECORD 0               */
         L     @10,@PC00001+4                                   02.0316
         ST    @07,JWTMIN(,@10)                                 02.0316
*        RFY (R0,R1) RSTD;             /* GET REGISTER CONTROL       */
*        R1=DECVALUE;                  /* VALUE TO MICRO SECONDS     */
         LR    R1,@07                                           02.0318
*        GEN(M     R0,MICROSEC);                                02.0319
         M     R0,MICROSEC
*        GEN(D     R0,SHIFT);                                   02.0320
         D     R0,SHIFT
*        SMCAJWT=R1;                   /* WAIT TIME IN MICRO SECS    */
         ST    R1,SMCAJWT(,SMCAPTR)                             02.0321
*        RFY (R0,R1) UNRSTD;           /* RELEASE REGISTER CONTROL   */
*        KEYVALUE(2)=BLANKS;           /* INIT VALUE TBL ENTRY       */
         MVC   KEYVALUE+4(4),@CC00090                           02.0323
*        KEYVALUE(2,1:PARMLEN)=PARMVALU(1:PARMLEN);             02.0324
         LR    @10,PARMLEN                                      02.0324
         BCTR  @10,0                                            02.0324
         EX    @10,@SM00799                                     02.0324
*        KEYSPEC(2)='1'B;              /* INDICATE KEYWORD SPECIFIED */
         OI    KEYSPEC+1,B'10000000'                            02.0325
*      END;                                                     02.0326
*    ELSE                                                       02.0327
*      KEYRTNCD=4;                     /* KEYWORD VALUE ERROR        */
         B     @RC00314                                         02.0327
@RF00314 LA    KEYRTNCD,4                                       02.0327
*  END;                                                         02.0328
@RC00314 DS    0H                                               02.0329
*ELSE                                                           02.0329
*  KEYRTNCD=4;                         /* KEYWORD VALUE ERROR        */
         B     @RC00311                                         02.0329
@RF00311 LA    KEYRTNCD,4                                       02.0329
*RETURN;                                                        02.0330
@EL00007 DS    0H                                               02.0330
@EF00007 DS    0H                                               02.0330
@ER00007 LM    @14,@05,@SA00007+12                              02.0330
         LM    @07,@12,@SA00007+48                              02.0330
         BR    @14                                              02.0330
*END JWTKEY;                                                    02.0331
         B     @EL00007                                         02.0331
*MANKEY: PROC;                                                  02.0332
MANKEY   STM   @14,@05,12(@13)                                  02.0332
         STM   @07,@12,48(@13)                                  02.0332
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= MANKEY                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= MAN= KEYWORD PROCESSOR                          */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR           */
*/*  THE MAN KEYWORD. THE VALUE MUST BE NONE, USER, OR ALL.          */
*/*  SMCAUSER AND SMCAMAN ARE SET ACCORDINGLY. IF NONE               */
*/*  WAS SPECIFIED THE BUF= KEYWORD IS NOT REQUIRED,                 */
*/*  OTHERWISE, THE BUF= KEYWORD IS REQUIRED                         */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS USED                           */
*/*                                                                  */
*/*ENTRY POINT= MANKEY                                               */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, A VALID PARAMTER WAS SPECIFIED               */
*/*  OUTPUT=                                                         */
*/*    SMCAMAN AND SMCAUSER SET                                      */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 3 OR 4,          */
*/*    OR THE VALUE SPECIFIED WAS NOT RECOGNIZED AS VALID            */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*IF PARMLEN=3 | PARMLEN=4 THEN         /* WAS MAN=ALL SPECIFIED      */
         CH    PARMLEN,@CH00086                                 02.0333
         BE    @RT00333                                         02.0333
         CH    PARMLEN,@CH00089                                 02.0333
         BNE   @RF00333                                         02.0333
@RT00333 DS    0H                                               02.0334
*  DO;                                 /* YES                        */
*    IF PARMLEN=3 &                    /* PARAMETER LENGTH THREE AND */
*       PARMVALU(1:3)=ALL THEN         /* WAS MAN=ALL SPECIFIED      */
         CH    PARMLEN,@CH00086                                 02.0335
         BNE   @RF00335                                         02.0335
         CLC   PARMVALU(3,KEYPTR),@CC00087                      02.0335
         BNE   @RF00335                                         02.0335
*      DO;                             /* YES                        */
*        SMCAMAN='1'B;                 /* USER RECORDING             */
*        SMCAUSER='1'B;                /* SYSTEM RECORDING           */
         OI    SMCAMAN(SMCAPTR),B'11000000'                     02.0338
*        KEYREQ(3)='1'B;               /* BUF= KEYWORD REQUIRED      */
         OI    KEYREQ+2,B'01000000'                             02.0339
*      END;                                                     02.0340
*    ELSE                                                       02.0341
*      IF PARMVALU(1:4)=USER THEN      /* WAS MAN=USER SPECIFIED     */
         B     @RC00335                                         02.0341
@RF00335 CLC   PARMVALU(4,KEYPTR),@CC00112                      02.0341
         BNE   @RF00341                                         02.0341
*        DO;                           /* YES                        */
*          SMCAUSER='0'B;              /* NO SYSTEM RECORDING        */
*          SMCAMAN='1'B;               /* USER RECORDING             */
         OI    SMCAMAN(SMCAPTR),B'01000000'                     02.0344
         NI    SMCAUSER(SMCAPTR),B'01111111'                    02.0344
*          KEYREQ(3)='1'B;             /* BUF= KEYWORD REQUIRED      */
         OI    KEYREQ+2,B'01000000'                             02.0345
*        END;                                                   02.0346
*      ELSE                                                     02.0347
*        IF PARMVALU(1:4)=NONE THEN      /* WAS MAN=NONE SPECIFIED   */
         B     @RC00341                                         02.0347
@RF00341 CLC   PARMVALU(4,KEYPTR),@CC00106                      02.0347
         BNE   @RF00347                                         02.0347
*          DO;                         /* YES                        */
*            SMCAUSER='0'B;            /* NO SYSTEM RECORDING        */
*            SMCAMAN='0'B;             /* NO USER RECORDING          */
         NI    SMCAUSER(SMCAPTR),B'00111111'                    02.0350
*            KEYREQ(3)='0'B;           /* BUF= KEYWORD NOT REQUIRED  */
         NI    KEYREQ+2,B'10111111'                             02.0351
*          END;                                                 02.0352
*        ELSE                                                   02.0353
*          KEYRTNCD=4;                 /* INVALID VALUE SPECIFIED    */
         B     @RC00347                                         02.0353
@RF00347 LA    KEYRTNCD,4                                       02.0353
*  END;                                                         02.0354
@RC00347 DS    0H                                               02.0354
@RC00341 DS    0H                                               02.0354
@RC00335 DS    0H                                               02.0355
*ELSE                                                           02.0355
*  KEYRTNCD=4;                         /* INVAILD VALUE SPECIFIED    */
         B     @RC00333                                         02.0355
@RF00333 LA    KEYRTNCD,4                                       02.0355
*IF KEYRTNCD=0 THEN                    /* KEYWORD VALUE OK           */
@RC00333 LTR   KEYRTNCD,KEYRTNCD                                02.0356
         BNZ   @RF00356                                         02.0356
*  DO;                                 /* YES                        */
*    KEYVALUE(4)=BLANKS;               /* INIT KEYWORD VALUE TABLE   */
         MVC   KEYVALUE+12(4),@CC00090                          02.0358
*    KEYVALUE(4,1:PARMLEN)=            /* SET VALUE TABLE =          */
*        PARMVALU(1:PARMLEN);          /* MAN PARAMETER VALUE        */
         LR    @10,PARMLEN                                      02.0359
         BCTR  @10,0                                            02.0359
         EX    @10,@SM00801                                     02.0359
*    KEYSPEC(4)='1'B;                  /* INDICATE KEYWORD SPECIFIED */
         OI    KEYSPEC+3,B'10000000'                            02.0360
*  END;                                                         02.0361
*RETURN;                                                        02.0362
@EL00008 DS    0H                                               02.0362
@EF00008 DS    0H                                               02.0362
@ER00008 LM    @14,@05,12(@13)                                  02.0362
         LM    @07,@12,48(@13)                                  02.0362
         BR    @14                                              02.0362
*END MANKEY;                                                    02.0363
         B     @EL00008                                         02.0363
*OPIKEY: PROC;                                                  02.0364
OPIKEY   STM   @14,@05,12(@13)                                  02.0364
         STM   @07,@12,48(@13)                                  02.0364
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= OPIKEY                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= OPI=KEYWORD PROCESSOR                           */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR THE       */
*/*  OPI KEYWORD. THE PARAMETER MUST BE EITHER YES OR NO.            */
*/*  SMCAOPI IS SET ACCORDINGLY.                                     */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= OPIKEY                                               */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, A VALID PARAMETER WAS SPECIFIED              */
*/*  OUTPUT=                                                         */
*/*    SMCAOPI SET                                                   */
*/*    KEYWORD SPECIFIED TABLE UPDTAED                               */
*/*    KEYWORD VALUE TABLE UPDATED                                   */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 2 OR 3,          */
*/*    OR THE VALUE SPECIFIED WAS NOT YES OR NO                      */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*IF PARMLEN=2 | PARMLEN=3 THEN         /* PARAMETER LENGTH OK        */
         CH    PARMLEN,@CH00092                                 02.0365
         BE    @RT00365                                         02.0365
         CH    PARMLEN,@CH00086                                 02.0365
         BNE   @RF00365                                         02.0365
@RT00365 DS    0H                                               02.0366
*  DO;                                 /* YES, CONTINUE VALIDITY CHK */
*    IF PARMVALU(1:3)=CYES THEN        /* WAS OPI=YES SPECIFIED      */
         CLC   PARMVALU(3,KEYPTR),@CC00098                      02.0367
         BNE   @RF00367                                         02.0367
*      DO;                             /* YES                        */
*        SMCAOPI='1'B;                 /* INDICATE OPI=YES SPECIFIED */
         OI    SMCAOPI(SMCAPTR),B'00100000'                     02.0369
*        IF CONSOLE='0'B THEN          /* IF INPUT WAS FROM PARMLIB  */
         TM    CONSOLE,B'10000000'                              02.0370
         BNZ   @RF00370                                         02.0370
*          DO;                         /* INIT KEY SPEC & VALUE TBL  */
*            KEYVALUE(9)=BLANKS;       /* INIT VALUE TABLE ENTRY     */
         MVC   KEYVALUE+32(4),@CC00090                          02.0372
*            KEYVALUE(9,1:PARMLEN)=PARMVALU(1:PARMLEN);         02.0373
         LR    @10,PARMLEN                                      02.0373
         BCTR  @10,0                                            02.0373
         EX    @10,@SM00803                                     02.0373
*            KEYSPEC(9)='1'B;          /* INDICATE KEYWORD SPECIFIED */
         OI    KEYSPEC+8,B'10000000'                            02.0374
*          END;                                                 02.0375
*      END;                                                     02.0376
@RF00370 DS    0H                                               02.0377
*    ELSE                                                       02.0377
*      IF PARMLEN=2 &                  /* PARAMETER LENGTH THREE AND */
*         PARMVALU(1:2)=CNO THEN       /* OPI=NO SPECIFIED           */
         B     @RC00367                                         02.0377
@RF00367 CH    PARMLEN,@CH00092                                 02.0377
         BNE   @RF00377                                         02.0377
         CLC   PARMVALU(2,KEYPTR),@CC00093                      02.0377
         BNE   @RF00377                                         02.0377
*        DO;                           /* YES                        */
*          SMCAOPI='0'B;               /* INDICATE OPI=NO SPECIFIED  */
         NI    SMCAOPI(SMCAPTR),B'11011111'                     02.0379
*        END;                                                   02.0380
*      ELSE                                                     02.0381
*        KEYRTNCD=4;                   /* INVALID VALUE SPECIFIED    */
         B     @RC00377                                         02.0381
@RF00377 LA    KEYRTNCD,4                                       02.0381
*  END;                                                         02.0382
@RC00377 DS    0H                                               02.0382
@RC00367 DS    0H                                               02.0383
*ELSE                                                           02.0383
*  KEYRTNCD=4;                         /* INVALID VALUE SPECIFIED    */
         B     @RC00365                                         02.0383
@RF00365 LA    KEYRTNCD,4                                       02.0383
*RETURN;                                                        02.0384
@EL00009 DS    0H                                               02.0384
@EF00009 DS    0H                                               02.0384
@ER00009 LM    @14,@05,12(@13)                                  02.0384
         LM    @07,@12,48(@13)                                  02.0384
         BR    @14                                              02.0384
*END OPIKEY;                                                    02.0385
         B     @EL00009                                         02.0385
*OPTKEY: PROC;                                                  02.0386
OPTKEY   STM   @14,@05,12(@13)                                  02.0386
         STM   @07,@12,48(@13)                                  02.0386
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= OPTKEY                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= OPT= KEYWORD PROCESSOR                          */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR THE       */
*/*  OPT KEYWORD. THE PARAMETER MUST BE EITHER 1 OR 2.               */
*/*  SMCAOPT1 AND SMCAOPT2 ARE SET ACCORDINGLY                       */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= OPTKEY                                               */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, A VALID PARAMETER WAS SPECIFIED              */
*/*  OUTPUT=                                                         */
*/*    SMCAOPT1 AND SMCAOPT2 SET                                     */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 1 OR 2,          */
*/*    OR THE VALUE SPECIFIED WAS NOT 1 OR 2.                        */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*IF PARMLEN=1 THEN                     /* PARMETER LENGTH OK         */
         CH    PARMLEN,@CH00139                                 02.0387
         BNE   @RF00387                                         02.0387
*  DO;                                 /* YES, CONTINUE CHECK PARM   */
*    IF PARMVALU(1)='1' THEN           /* JOB ACCOUNTING SPEC        */
         CLI   PARMVALU(KEYPTR),C'1'                            02.0389
         BNE   @RF00389                                         02.0389
*      DO;                             /* YES                        */
*        SMCAOPT1='1'B;                /* JOB ACCOUNTING ON          */
*        SMCAOPT2='0'B;                /* STEP ACCOUNTING OFF        */
         OI    SMCAOPT1(SMCAPTR),B'10000000'                    02.0392
         NI    SMCAOPT2(SMCAPTR),B'10111111'                    02.0392
*      END;                                                     02.0393
*    ELSE                                                       02.0394
*      IF PARMVALU(1)='2' THEN         /* STEP & JOB ACCOUNTING SPEC */
         B     @RC00389                                         02.0394
@RF00389 CLI   PARMVALU(KEYPTR),C'2'                            02.0394
         BNE   @RF00394                                         02.0394
*        DO;                           /* YES                        */
*          SMCAOPT1='1'B;              /* JOB ACCOUNTING ON          */
*          SMCAOPT2='1'B;              /* STEP ACCOUNTING ON         */
         OI    SMCAOPT1(SMCAPTR),B'11000000'                    02.0397
*        END;                                                   02.0398
*      ELSE                                                     02.0399
*        KEYRTNCD=4;                   /* PARAMETER VALUE ERROR      */
         B     @RC00394                                         02.0399
@RF00394 LA    KEYRTNCD,4                                       02.0399
*  END;                                                         02.0400
@RC00394 DS    0H                                               02.0400
@RC00389 DS    0H                                               02.0401
*ELSE                                                           02.0401
*  KEYRTNCD=4;                         /* INVALID VALUE LENGTH       */
         B     @RC00387                                         02.0401
@RF00387 LA    KEYRTNCD,4                                       02.0401
*IF KEYRTNCD=0 THEN                    /* KEYWORD VALUE OK           */
@RC00387 LTR   KEYRTNCD,KEYRTNCD                                02.0402
         BNZ   @RF00402                                         02.0402
*  DO;                                 /* YES, INIT SPEC & VALUE TBL */
*    KEYVALUE(6)=BLANKS;               /* INIT TBL ENTRY TO BLANKS   */
         MVC   KEYVALUE+20(4),@CC00090                          02.0404
*    KEYVALUE(6,1)=PARMVALU(1);          /* PARM TO VALUE TBL        */
         MVC   KEYVALUE+20(1),PARMVALU(KEYPTR)                  02.0405
*    KEYSPEC(6)='1'B;                  /* INDICATE KEYWORD SPECIFIED */
         OI    KEYSPEC+5,B'10000000'                            02.0406
*  END;                                                         02.0407
*RETURN;                                                        02.0408
@EL00010 DS    0H                                               02.0408
@EF00010 DS    0H                                               02.0408
@ER00010 LM    @14,@05,12(@13)                                  02.0408
         LM    @07,@12,48(@13)                                  02.0408
         BR    @14                                              02.0408
*END OPTKEY;                                                    02.0409
         B     @EL00010                                         02.0409
*PROMPTOP: PROC;                                                02.0410
PROMPTOP STM   @14,@12,@SA00011+12                              02.0410
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= PROMPTOP                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= PROMPT OPERATOR                                 */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT ISSUES A WTOR TO THE OPERATOR.                     */
*/*  HIS RESPONCE IS THEN PLACED INTO 'BUFFER' AND TRANSLATED        */
*/*  TO UPPER CASE.                                                  */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    OPERATOR RESPONCE                                             */
*/*    MSGBUF - CONTAINS MESSAGE TO BE ISSUED TO THE OPERATOR        */
*/*EXIT=                                                             */
*/*  CONDITION= OPERATOR RESPONCE PROCESSED                          */
*/*  OUTPUT=                                                         */
*/*    BUFFER - CONTAINS OPERATOR RESPONCE IN UPPER CASE             */
*/*    CONSOLE - BIT SET TO INDICATE INPUT FROM OPERATOR             */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*BUFFER=BUFFER&&BUFFER;                /* CLEAR BUFFER               */
         XC    BUFFER(121),BUFFER                               02.0411
*WTORECB=0;                            /* CLEAR WTOR ECB             */
         SR    @10,@10                                          02.0412
         ST    @10,WTORECB                                      02.0412
*GEN(WTOR  ,BUFFER,REPLYN,WTORECB,MF=(E,MSGBUF));               02.0413
         WTOR  ,BUFFER,REPLYN,WTORECB,MF=(E,MSGBUF)
*GEN(WAIT  ECB=WTORECB);               /* WAIT FOR OPERATOR REPLY    */
         WAIT  ECB=WTORECB
*TR(BUFFER,TRANSTBL(1));               /* TRANSLATE TO UPPER CASE    */
         TR    BUFFER(121),TRANSTBL                             02.0415
*CONSOLE='1'B;                         /* INDICATE INPUT FROM OP     */
         OI    CONSOLE,B'10000000'                              02.0416
*END PROMPTOP;                                                  02.0417
@EL00011 DS    0H                                               02.0417
@EF00011 DS    0H                                               02.0417
@ER00011 LM    @14,@12,@SA00011+12                              02.0417
         BR    @14                                              02.0417
*RECKEY: PROC;                                                  02.0418
RECKEY   STM   @14,@05,12(@13)                                  02.0418
         STM   @07,@12,48(@13)                                  02.0418
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= RECKEY                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= REC= KEYWORD PROCESSOR                          */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE WILL VALIDATE THE PARAMETER SUPPLIED FOR           */
*/*  THE REC KEYWORD. THE PARAMETER MUST BE EITHER 0 OR 2.           */
*/*  SMCTDS IS SET ACCORDINGLY                                       */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= RECKEY                                               */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORAML, A VALID PARAMETER WAS SPECIFIED.             */
*/*  OUTPUT=                                                         */
*/*    SMCATDS SET                                                   */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 1,               */
*/*    OR THE VALUE SPECIFIED WAS NOT 0 OR 2.                        */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*IF PARMLEN=1 THEN                     /* IS PARAMETER LENGTH OK     */
         CH    PARMLEN,@CH00139                                 02.0419
         BNE   @RF00419                                         02.0419
*  DO;                                 /* YES, CONTINUE PARM CHECK   */
*    IF PARMVALU(1)='0' THEN           /* IS TEMP. D.S. INFO RCDING
*                                         WANTED                     */
         CLI   PARMVALU(KEYPTR),C'0'                            02.0421
         BNE   @RF00421                                         02.0421
*      SMCATDS='0'B;                   /* NO, NO REC TYPE 17         */
         NI    SMCATDS(SMCAPTR),B'11111101'                     02.0422
*    ELSE                                                       02.0423
*      IF PARMVALU(1)='2' THEN         /* IS TEMP D.S. INFO     02.0423
*                                         WANTED                     */
         B     @RC00421                                         02.0423
@RF00421 CLI   PARMVALU(KEYPTR),C'2'                            02.0423
         BNE   @RF00423                                         02.0423
*        SMCATDS='1'B;                 /* YES, REC TYPE 17 SHOULD
*                                         BE ISSUED                  */
         OI    SMCATDS(SMCAPTR),B'00000010'                     02.0424
*      ELSE                                                     02.0425
*        KEYRTNCD=4;                   /* PARAMETER VALUE ERROR      */
         B     @RC00423                                         02.0425
@RF00423 LA    KEYRTNCD,4                                       02.0425
*    IF KEYRTNCD=0 THEN                /* WAS A VALID PARM FOUND     */
@RC00423 DS    0H                                               02.0426
@RC00421 LTR   KEYRTNCD,KEYRTNCD                                02.0426
         BNZ   @RF00426                                         02.0426
*      DO;                             /* YES, INIT VALUE & SPEC TBL */
*        KEYVALUE(8)=BLANKS;           /* BLANK TBL ENTRY            */
         MVC   KEYVALUE+28(4),@CC00090                          02.0428
*        KEYVALUE(8,1)=PARMVALU(1);          /* PARM VALUE TO VALUE
*                                         TABLE                      */
         MVC   KEYVALUE+28(1),PARMVALU(KEYPTR)                  02.0429
*        KEYSPEC(8)='1'B;              /* INDICATE KEYWORD SPECIFIED */
         OI    KEYSPEC+7,B'10000000'                            02.0430
*      END;                                                     02.0431
*  END;                                                         02.0432
@RF00426 DS    0H                                               02.0433
*ELSE                                  /* INPUT LENGTH IS INCORRECT  */
*  KEYRTNCD=4;                         /* SET ERROR RETURN CODE      */
         B     @RC00419                                         02.0433
@RF00419 LA    KEYRTNCD,4                                       02.0433
*RETURN;                                                        02.0434
@EL00012 DS    0H                                               02.0434
@EF00012 DS    0H                                               02.0434
@ER00012 LM    @14,@05,12(@13)                                  02.0434
         LM    @07,@12,48(@13)                                  02.0434
         BR    @14                                              02.0434
*END RECKEY;                                                    02.0435
         B     @EL00012                                         02.0435
*SIDKEY: PROC;                                                  02.0436
SIDKEY   STM   @14,@05,12(@13)                                  02.0436
         STM   @07,@12,48(@13)                                  02.0436
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= SIDKEY                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME=  SID= KEYWORD PROCESSOR                         */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS SEGMENT WILL VALIDATE THE VALUE SUPPLIED FOR THE           */
*/*  SID KEYWORD AND THEN STORE THIS VALUE IN SMCASID. THE           */
*/* VALUE MUST BE 4 ALPHMERIC CHARACTERS                             */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS                                */
*/*                                                                  */
*/*ENTRY POINT= SIDKEY                                               */
*/*  INPUT=                                                          */
*/*    PARMLEN - LENGTH OF KEYWORD VALUE                             */
*/*    KEYSTART - START OF KEYWORD IN BUFFER                         */
*/*    KEYEND - END OF KEYWORD IN BUFFER                             */
*/*    PARMVALUE - VALUE FIELD OF KEYWORD                            */
*/*EXIT=                                                             */
*/*  CONDITION= NORMAL, THE VALUE SPECIFIED WAS EXCEPTABLE           */
*/*  OUTPUT= SMCASID                                                 */
*/*  RETURN CODE= KEYRTNCD = 0                                       */
*/*                                                                  */
*/*  CONDITION= THE LENGTH OF THE PARAMETER WAS NOT 4 CHARACTERS     */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODE= KEYRTNCD = 4                                       */
*/*                                                                  */
*/********************************************************************/
*IF PARMLEN=4 THEN                     /* KEYWORD VALUE LENGTH OK    */
         CH    PARMLEN,@CH00089                                 02.0437
         BNE   @RF00437                                         02.0437
*  DO;                                 /* YES                        */
*    SMCASID=PARMVALU(1:4);            /* SID VALUE TO SMCA          */
         MVC   SMCASID(4,SMCAPTR),PARMVALU(KEYPTR)              02.0439
*    KEYVALUE(1)=BLANKS;               /* INIT VALUE TABLE ENTRY     */
         MVC   KEYVALUE(4),@CC00090                             02.0440
*    KEYVALUE(1,1:4)=                  /* SET VALUE TABLE FROM       */
*        PARMVALU(1:4);                /* SID = PARAMETER            */
         MVC   KEYVALUE(4),PARMVALU(KEYPTR)                     02.0441
*    KEYSPEC(1)='1'B;                  /* INDICATE KEYWORD SPECIFIED */
         OI    KEYSPEC,B'10000000'                              02.0442
*  END;                                                         02.0443
*ELSE                                                           02.0444
*  KEYRTNCD=4;                         /* KEYWORD LENGTH INCORRECT   */
         B     @RC00437                                         02.0444
@RF00437 LA    KEYRTNCD,4                                       02.0444
*RETURN;                                                        02.0445
@EL00013 DS    0H                                               02.0445
@EF00013 DS    0H                                               02.0445
@ER00013 LM    @14,@05,12(@13)                                  02.0445
         LM    @07,@12,48(@13)                                  02.0445
         BR    @14                                              02.0445
*END SIDKEY;                                                    02.0446
         B     @EL00013                                         02.0446
*SYNAD: PROC OPTIONS(NOSAVE);                                   02.0447
SYNAD    DS    0H                                               02.0448
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= SYNAD                                               */
*/*                                                                  */
*/*DESCRIPTIVE NAME= SYNAD EXIT FOR READS                            */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  THIS ROUTINE IS GIVEN CONTROL WHEN SEGMENT BUILDBUF ISSUES      */
*/*  CHECK TO WAIT FOR I/O TO COMPLETE AND THERE WAS AN I/O          */
*/*  ON THE READ OF A RECORD FROM PARMLIB.                           */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= SYNAD                                                */
*/*  INPUT= NONE                                                     */
*/*EXIT=                                                             */
*/*  CONDITION= ERROR, AN I/O ERROR OCCURED ON PARMLIB READ          */
*/*  OUTPUT=                                                         */
*/*    PLIBERR - SET TO INDICATE ERROR IN PROCESSING                 */
*/*    IOERRSC - SET TO INDICATE I/O ERROR ON PARMLIB                */
*/*  RETURN CODE= NONE                                               */
*/*                                                                  */
*/********************************************************************/
*PLIBERR='1'B;                         /* GENERAL ERROR SWC ON       */
         OI    PLIBERR,B'10000000'                              02.0448
*IOERRSC='1'B;                         /* INDICATE I/O ERROR OCCURED */
         OI    IOERRSC,B'00100000'                              02.0449
*END SYNAD;                                                     02.0450
@EL00014 DS    0H                                               02.0450
@EF00014 DS    0H                                               02.0450
@ER00014 BR    @14                                              02.0450
*END IEEMB821                                                   01.0451
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (B821SPEC)                                        *
*/*%INCLUDE SYSLIB  (B821DATA)                                        *
*/*%INCLUDE SYSLIB  (IEESMCA )                                        *
*/*%INCLUDE SYSLIB  (IHADCBDF)                                        *
*/*%INCLUDE SYSLIB  (IHADCB  )                                        *
*/*%INCLUDE SYSLIB  (SMCADFLT)                                        *
*/*%INCLUDE SYSLIB  (SMCADFLS)                                        *
*/*%INCLUDE SYSLIB  (PLIBPREP)                                        *
*/*%INCLUDE SYSLIB  (PLIBPRES)                                        *
*/*%INCLUDE SYSLIB  (OPENPLIB)                                        *
*/*%INCLUDE SYSLIB  (OPENPLIS)                                        *
*/*%INCLUDE SYSLIB  (FINDMEM )                                        *
*/*%INCLUDE SYSLIB  (FINDMEMS)                                        *
*/*%INCLUDE SYSLIB  (BUILDBUF)                                        *
*/*%INCLUDE SYSLIB  (BUILDBUS)                                        *
*/*%INCLUDE SYSLIB  (OPINPUT )                                        *
*/*%INCLUDE SYSLIB  (OPINPUTS)                                        *
*/*%INCLUDE SYSLIB  (PARSEINT)                                        *
*/*%INCLUDE SYSLIB  (PARSEINS)                                        *
*/*%INCLUDE SYSLIB  (BUFRPARS)                                        *
*/*%INCLUDE SYSLIB  (BUFRSPEC)                                        *
*/*%INCLUDE SYSLIB  (FINDEND )                                        *
*/*%INCLUDE SYSLIB  (FINDENDS)                                        *
*/*%INCLUDE SYSLIB  (KEYPROC )                                        *
*/*%INCLUDE SYSLIB  (KEYPROCS)                                        *
*/*%INCLUDE SYSLIB  (CKMISSNG)                                        *
*/*%INCLUDE SYSLIB  (CKMISSNS)                                        *
*/*%INCLUDE SYSLIB  (OPVERIFY)                                        *
*/*%INCLUDE SYSLIB  (OPVERIFS)                                        *
*/*%INCLUDE SYSLIB  (COMPAT  )                                        *
*/*%INCLUDE SYSLIB  (COMPATS )                                        *
*/*%INCLUDE SYSLIB  (BUFKEY  )                                        *
*/*%INCLUDE SYSLIB  (BUFSPEC )                                        *
*/*%INCLUDE SYSLIB  (DECCNVT )                                        *
*/*%INCLUDE SYSLIB  (DECCNVTS)                                        *
*/*%INCLUDE SYSLIB  (DSVKEY  )                                        *
*/*%INCLUDE SYSLIB  (DSVSPEC )                                        *
*/*%INCLUDE SYSLIB  (ERRMSG  )                                        *
*/*%INCLUDE SYSLIB  (ERRMSGS )                                        *
*/*%INCLUDE SYSLIB  (EXTKEY  )                                        *
*/*%INCLUDE SYSLIB  (EXTSPEC )                                        *
*/*%INCLUDE SYSLIB  (JWTKEY  )                                        *
*/*%INCLUDE SYSLIB  (JWTSPEC )                                        *
*/*%INCLUDE SYSLIB  (MANKEY  )                                        *
*/*%INCLUDE SYSLIB  (MANSPEC )                                        *
*/*%INCLUDE SYSLIB  (OPIKEY  )                                        *
*/*%INCLUDE SYSLIB  (OPISPEC )                                        *
*/*%INCLUDE SYSLIB  (OPTKEY  )                                        *
*/*%INCLUDE SYSLIB  (OPTSPEC )                                        *
*/*%INCLUDE SYSLIB  (PROMPTOP)                                        *
*/*%INCLUDE SYSLIB  (PROMPTOS)                                        *
*/*%INCLUDE SYSLIB  (RECKEY  )                                        *
*/*%INCLUDE SYSLIB  (RECSPEC )                                        *
*/*%INCLUDE SYSLIB  (SIDKEY  )                                        *
*/*%INCLUDE SYSLIB  (SIDSPEC )                                        *
*/*%INCLUDE SYSLIB  (SYNAD   )                                        *
*/*%INCLUDE SYSLIB  (SYNADS  )                                        *
*;                                                              01.0451
         B     @EL00001                                         01.0451
@DATA    DS    0H
@CH00139 DC    H'1'
@CH00092 DC    H'2'
@CH00086 DC    H'3'
@CH00089 DC    H'4'
@CH00127 DC    H'9'
@CH00679 DC    H'71'
@CH00223 DC    H'121'
@CH00104 DC    H'400'
@CH00100 DC    H'8192'
@SM00762 MVC   MSGBUF(0),I365I(@10)
@SM00768 MVC   0(0,@10),0(@01)
@SM00770 MVC   MSGBUF(0),I356A(@10)
@SM00772 MVC   MSGBUF(0),I352A(@10)
@SM00774 MVC   MSGBUF(0),I353A(@10)
@SM00780 MVC   MSGBUF(0),I355IK(@10)
@SM00782 MVC   MSGBUF+12(0),KEYWORD(KEYPTR)
@SM00784 MVC   MSGBUF(0),I355IV(@10)
@SM00786 MVC   MSGBUF(0),I355IM(@10)
@SM00789 MVC   MSGBUF(0),I354IX(@10)
@SM00791 MVC   MSGBUF(0),I357A(@10)
@SM00793 MVC   KEYVALUE+8(0),PARMVALU(KEYPTR)
@SM00797 MVC   KEYVALUE+16(0),PARMVALU(KEYPTR)
@SM00799 MVC   KEYVALUE+4(0),PARMVALU(KEYPTR)
@SM00801 MVC   KEYVALUE+12(0),PARMVALU(KEYPTR)
@SM00803 MVC   KEYVALUE+32(0),PARMVALU(KEYPTR)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    3F
@SA00007 DS    18F
@SA00002 DS    18F
@SA00011 DS    18F
@SA00005 DS    18F
@TF00001 DS    F
IEEMB821 CSECT
         DS    0F
@DATD    DSECT
         DS    0D
WTORECB  DS    F
DECVALUE DS    H
KEYEND   DS    H
         DS    0D
@TS00001 DS    CL8
SWITCHES DS    BL2
         ORG   SWITCHES
CONSOLE  DS    BL1
ENDMEM   EQU   SWITCHES+0
IOERRSC  EQU   SWITCHES+0
KEYFOUND EQU   SWITCHES+0
KEYINVLD EQU   SWITCHES+0
NOTFNDSC EQU   SWITCHES+0
OPISWC   EQU   SWITCHES+0
PARSE    EQU   SWITCHES+0
PLIBERR  DS    BL1
PROCS    EQU   SWITCHES+1
         ORG   SWITCHES+2
BUFFER   DS    CL121
INBUF    DS    CL80
         DS    CL1
MSGBUF   DS    CL88
PACKFLD  DS    CL4
KEYVALUE DS    9CL4
KEYCNTL  DS    BL1
         ORG   KEYCNTL+0
KEYSPEC  DS    BL1
KEYREQ   EQU   KEYCNTL+0
         ORG   KEYCNTL+9
IEEMB821 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00038 DC    V(IEE352A)
@CV00039 DC    V(IEE353A)
@CV00040 DC    V(IEE354I)
@CV00041 DC    V(IEE354IX)
@CV00042 DC    V(IEE355IE)
@CV00043 DC    V(IEE355IK)
@CV00044 DC    V(IEE355IV)
@CV00045 DC    V(IEE355IM)
@CV00046 DC    V(IEE356A)
@CV00047 DC    V(IEE357A)
@CV00048 DC    V(IEE359I)
@CV00049 DC    V(IEE365I)
         DS    0D
MICROSEC DC    F'60000000'
SHIFT    DC    F'1048576'
@CC00093 DC    C'NO'
@CC00695 DC    C'U '
@CC00087 DC    C'ALL'
@CC00098 DC    C'YES'
@CC00090 DC    C'    '
@CC00106 DC    C'NONE'
@CC00112 DC    C'USER'
@CC00096 DC    C'PARMLIB'
         DS    CL3
ADDTBL   DC    AL4(SIDKEY)
         DC    AL4(JWTKEY)
         DC    AL4(BUFKEY)
         DC    AL4(MANKEY)
         DC    AL4(EXTKEY)
         DC    AL4(OPTKEY)
         DC    AL4(DSVKEY)
         DC    AL4(RECKEY)
         DC    AL4(OPIKEY)
KEYTBL   DC    CL4'SID='
         DC    CL4'JWT='
         DC    CL4'BUF='
         DC    CL4'MAN='
         DC    CL4'EXT='
         DC    CL4'OPT='
         DC    CL4'DSV='
         DC    CL4'REC='
         DC    CL4'OPI='
TRANSTBL DC    64CL1' '
         DC    CL1' '
         DC    9CL1' '
         DC    X'4A'
         DC    CL1'.'
         DC    CL1'<'
         DC    CL1'('
         DC    CL1'+'
         DC    CL1'|'
         DC    CL1'&&'
         DC    9CL1' '
         DC    X'5A'
         DC    CL1'$'
         DC    CL1'*'
         DC    CL1')'
         DC    CL1';'
         DC    CL1'¬'
         DC    CL1'-'
         DC    CL1'/'
         DC    9CL1' '
         DC    CL1','
         DC    CL1'%'
         DC    CL1'_'
         DC    CL1'>'
         DC    CL1'?'
         DC    10CL1' '
         DC    CL1':'
         DC    CL1'#'
         DC    CL1'@'
         DC    CL1''''
         DC    CL1'='
         DC    CL1'"'
         DC    CL1' '
         DC    CL1'A'
         DC    CL1'B'
         DC    CL1'C'
         DC    CL1'D'
         DC    CL1'E'
         DC    CL1'F'
         DC    CL1'G'
         DC    CL1'H'
         DC    CL1'I'
         DC    7CL1' '
         DC    CL1'J'
         DC    CL1'K'
         DC    CL1'L'
         DC    CL1'M'
         DC    CL1'N'
         DC    CL1'O'
         DC    CL1'P'
         DC    CL1'Q'
         DC    CL1'R'
         DC    8CL1' '
         DC    CL1'S'
         DC    CL1'T'
         DC    CL1'U'
         DC    CL1'V'
         DC    CL1'W'
         DC    CL1'X'
         DC    CL1'Y'
         DC    CL1'Z'
         DC    23CL1' '
         DC    CL1'A'
         DC    CL1'B'
         DC    CL1'C'
         DC    CL1'D'
         DC    CL1'E'
         DC    CL1'F'
         DC    CL1'G'
         DC    CL1'H'
         DC    CL1'I'
         DC    7CL1' '
         DC    CL1'J'
         DC    CL1'K'
         DC    CL1'L'
         DC    CL1'M'
         DC    CL1'N'
         DC    CL1'O'
         DC    CL1'P'
         DC    CL1'Q'
         DC    CL1'R'
         DC    8CL1' '
         DC    CL1'S'
         DC    CL1'T'
         DC    CL1'U'
         DC    CL1'V'
         DC    CL1'W'
         DC    CL1'X'
         DC    CL1'Y'
         DC    CL1'Z'
         DC    6CL1' '
         DC    CL1'0'
         DC    CL1'1'
         DC    CL1'2'
         DC    CL1'3'
         DC    CL1'4'
         DC    CL1'5'
         DC    CL1'6'
         DC    CL1'7'
         DC    CL1'8'
         DC    CL1'9'
         DC    6CL1' '
@DATD    DSECT
RMACS    DS    0F                      RESERVE SPACE IN DYNAMIC AREA
OPENLST  OPEN  (,),MF=L                OPEN LIST FOR PARMLIB
DCBLST   DCB   DDNAME=IEFPARM,DSORG=PO,MACRF=(R)  DCB FOR PARMLIB
READLST  READ  DECB,SF,,,,,,MF=L       READ FOR PARMLIB LIST
IEEMB821 CSECT
DMACS    DS    0F                      BACK TO CSECT FOR STATIC COPY
         OPEN  (,),MF=L
         DCB   DDNAME=IEFPARM,DSORG=PO,MACRF=(R),EODAD=EODAD,          *
               SYNAD=SYNAD,RECFM=F,LRECL=80
         READ  DDECB,SF,,,,,,MF=L
MACLEN   EQU   *-DMACS                 LENGTH OF MACROS
@DATD    DSECT
@ENDDATD EQU   *
IEEMB821 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SMCAPTR  EQU   @05
PARMLEN  EQU   @03
KEYPTR   EQU   @04
KEYSTART EQU   @03
KEYSCAN  EQU   @04
KEYRTNCD EQU   @06
KEYLEN   EQU   @08
TBLINDX  EQU   @07
STRTCOL  EQU   @07
POSITIN  EQU   @07
NUMCOL   EQU   @04
PRANGE   EQU   @05
INDX     EQU   @03
FNDRTNCD EQU   @03
BUFINDX  EQU   @06
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R15      EQU   @15
I352A    EQU   0
L352A    EQU   I352A+8
I353A    EQU   0
L353A    EQU   I353A+8
I354I    EQU   0
I354IX   EQU   0
L354IX   EQU   I354IX
I355IE   EQU   0
I355IK   EQU   0
L355IK   EQU   I355IK
I355IV   EQU   0
L355IV   EQU   I355IV
I355IM   EQU   0
L355IM   EQU   I355IM
I356A    EQU   0
L356A    EQU   I356A+8
I357A    EQU   0
L357A    EQU   I357A+8
I359I    EQU   0
I365I    EQU   0
L365I    EQU   I365I
KEYROUTN EQU   0
KEYWORD  EQU   0
KEYID    EQU   KEYWORD
PARMVALU EQU   KEYWORD+4
SMCABASE EQU   0
SMCAOPT  EQU   SMCABASE
SMCAOPT1 EQU   SMCAOPT
SMCAOPT2 EQU   SMCAOPT
SMCAEXT  EQU   SMCAOPT
SMCADSA  EQU   SMCAOPT
SMCAVOL  EQU   SMCAOPT
SMCATDS  EQU   SMCAOPT
SMCAMISC EQU   SMCABASE+1
SMCAUSER EQU   SMCAMISC
SMCAMAN  EQU   SMCAMISC
SMCAOPI  EQU   SMCAMISC
SMCAJWT  EQU   SMCABASE+8
SMCABUF  EQU   SMCABASE+12
SMCASID  EQU   SMCABASE+16
SMCAPSTA EQU   SMCABASE+30
SMCAPLBL EQU   SMCABASE+34
SMCASTA  EQU   SMCABASE+46
SMCAALBL EQU   SMCABASE+50
SMCAENTY EQU   SMCABASE+80
SMCAENDI EQU   SMCAENTY
SMCAFOPT EQU   SMCABASE+82
SMCAFGN  EQU   SMCAFOPT
SMCASWA  EQU   SMCABASE+104
SMCAASCB EQU   SMCABASE+120
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
IHADCS26 EQU   0
DCBWRITE EQU   IHADCS26
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBCICB  EQU   IHADCS36+20
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS38 EQU   0
DCBEOBR  EQU   IHADCS38
DCBPOINT EQU   IHADCS38+12
DCBCNTRL EQU   DCBPOINT
PARMMEM  EQU   0
JWTMIN   EQU   0
SMCADDR  EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DCBNOTE  EQU   DCBCNTRL
DCBLRECL EQU   IHADCS38+10
@NM00027 EQU   IHADCS38+8
DCBEOBW  EQU   IHADCS38+4
DCBEOBRA EQU   DCBEOBR+1
DCBNCP   EQU   DCBEOBR
@NM00026 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00025 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00024 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00023 EQU   DCBCICB
DCBIOBA  EQU   IHADCS36+16
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00022 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00021 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBSYNA  EQU   DCBSYNAD+1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
@NM00020 EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBREAD  EQU   DCBWRITE
DCBDEBA  EQU   DCBDEBAD+1
@NM00019 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBIFPCT EQU   DCBIFLGS
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00018 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBIBPCT EQU   DCBIFLG
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00017 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00016 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00015 EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00014 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
DCBDSGMQ EQU   DCBDSRG1
DCBDSGCQ EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRBAL EQU   IHADCS01+6
@NM00013 EQU   IHADCS01+5
@NM00012 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00011 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00010 EQU   IHADCB
SMCASTCB EQU   SMCABASE+176
SMCAWTCB EQU   SMCABASE+172
SMCAU83  EQU   SMCABASE+168
SMCAPGM  EQU   SMCABASE+164
SMCARGNM EQU   SMCABASE+160
SMCASPOT EQU   SMCABASE+156
SMCASPIN EQU   SMCABASE+152
SMCARGNS EQU   SMCABASE+148
SMCAPGRL EQU   SMCABASE+144
SMCAPGOT EQU   SMCABASE+140
SMCAPGIN EQU   SMCABASE+136
SMCATEXP EQU   SMCABASE+132
SMCARS22 EQU   SMCABASE+128
SMCARS21 EQU   SMCABASE+124
SMCATJID EQU   SMCAASCB+2
SMCAPOST EQU   SMCAASCB
SMCADSCT EQU   SMCABASE+116
SMCADSTM EQU   SMCABASE+108
SMCASWD  EQU   SMCABASE+107
SMCASWC  EQU   SMCABASE+106
SMCASWB  EQU   SMCABASE+105
SMCADSSW EQU   SMCASWA
SMCADSSP EQU   SMCASWA
SMCAZEOD EQU   SMCASWA
SMCANAVL EQU   SMCASWA
SMCANADA EQU   SMCASWA
SMCAOPFL EQU   SMCASWA
SMCADSTR EQU   SMCASWA
SMCASWAR EQU   SMCASWA
SMCAXNAM EQU   SMCABASE+96
@NM00009 EQU   SMCABASE+92
SMCAXCTL EQU   SMCABASE+88
SMCAWRTP EQU   SMCABASE+84
SMCAENAL EQU   SMCABASE+83
SMCAFTDS EQU   SMCAFOPT
SMCAFESV EQU   SMCAFOPT
SMCAFVOL EQU   SMCAFOPT
SMCAFDSA EQU   SMCAFOPT
SMCAFEXT EQU   SMCAFOPT
SMCAFOP2 EQU   SMCAFOPT
SMCAFOP1 EQU   SMCAFOPT
SMCAENOP EQU   SMCAENTY+1
SMCADSNF EQU   SMCAENDI
SMCARS20 EQU   SMCAENDI
SMCARS19 EQU   SMCAENDI
SMCARS18 EQU   SMCAENDI
SMCARS17 EQU   SMCAENDI
SMCARS16 EQU   SMCAENDI
SMCARS15 EQU   SMCAENDI
SMCARS14 EQU   SMCAENDI
SMCAWAIT EQU   SMCABASE+72
SMCASGFT EQU   SMCABASE+68
SMCASGWR EQU   SMCABASE+64
SMCABECB EQU   SMCABASE+60
SMCAWECB EQU   SMCABASE+56
SMCAADCB EQU   SMCABASE+52
SMCAYORX EQU   SMCABASE+51
SMCAANL  EQU   SMCAALBL
SMCAASL  EQU   SMCAALBL
SMCAANSL EQU   SMCAALBL
SMCARS13 EQU   SMCAALBL
SMCARS12 EQU   SMCAALBL
SMCARS11 EQU   SMCAALBL
SMCARS10 EQU   SMCAALBL
SMCARS09 EQU   SMCAALBL
SMCAADAR EQU   SMCABASE+47
SMCAAVOL EQU   SMCASTA
SMCAAUNT EQU   SMCASTA
SMCARS08 EQU   SMCASTA
SMCAAMOD EQU   SMCASTA
SMCAAMTY EQU   SMCASTA
SMCAADA  EQU   SMCASTA
SMCAATAP EQU   SMCASTA
SMCAANAV EQU   SMCASTA
SMCAADEV EQU   SMCABASE+40
SMCAPDCB EQU   SMCABASE+36
SMCAXORY EQU   SMCABASE+35
SMCAPNL  EQU   SMCAPLBL
SMCAPSL  EQU   SMCAPLBL
SMCAPNSL EQU   SMCAPLBL
SMCARS07 EQU   SMCAPLBL
SMCARS06 EQU   SMCAPLBL
SMCARS05 EQU   SMCAPLBL
SMCARS04 EQU   SMCAPLBL
SMCARS03 EQU   SMCAPLBL
SMCAPDAR EQU   SMCABASE+31
SMCAPVOL EQU   SMCAPSTA
SMCAPUNT EQU   SMCAPSTA
SMCARS02 EQU   SMCAPSTA
SMCAMOD  EQU   SMCAPSTA
SMCAPMTY EQU   SMCAPSTA
SMCAPDA  EQU   SMCAPSTA
SMCAPTAP EQU   SMCAPSTA
SMCAPNAV EQU   SMCAPSTA
SMCAPDEV EQU   SMCABASE+24
SMCABUFP EQU   SMCABASE+20
SMCABSIZ EQU   SMCABUF
SMCATIOT EQU   SMCABASE+4
SMCATOFF EQU   SMCABASE+2
SMCADUMP EQU   SMCAMISC
SMCABSW  EQU   SMCAMISC
SMCADBSY EQU   SMCAMISC
SMCAPSDP EQU   SMCAMISC
SMCAFIRT EQU   SMCAMISC
SMCAFGND EQU   SMCAOPT
SMCARS01 EQU   SMCAOPT
L359I    EQU   I359I
@NM00008 EQU   I357A+4
@NM00007 EQU   I357A
@NM00006 EQU   I356A+4
@NM00005 EQU   I356A
L355IE   EQU   I355IE
L354I    EQU   I354I
@NM00004 EQU   I353A+4
@NM00003 EQU   I353A
@NM00002 EQU   I352A+4
@NM00001 EQU   I352A
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00217 EQU   @EL00002
@RC00239 EQU   @EL00003
@RF00273 EQU   @EL00004
@RF00302 EQU   @EL00006
@RC00311 EQU   @EL00007
@RF00356 EQU   @EL00008
@RC00365 EQU   @EL00009
@RF00402 EQU   @EL00010
@RC00419 EQU   @EL00012
@RC00437 EQU   @EL00013
@ENDDATA EQU   *
         END   IEEMB821
/*
//SMPCNTL  DD *
  RECEIVE S(TSV0024) .
/*
//APP    EXEC SMP,
//           RVOL=MVSRES
//SYSLIB   DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.MODGEN,DISP=SHR
//         DD  DSN=SYS1.AMACLIB,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SMPCNTL  DD *
  APPLY S(TSV0024)
       ASSEM
       CHECK .
  APPLY S(TSV0024)
       ASSEM .
/*
