//SCOTTS JOB 'SMFDUMPP ',CLASS=A,NOTIFY=SCOTT,
//       MSGLEVEL=(1,1),MSGCLASS=X
//*
//SMFDMPP EXEC ASMFCL,
//            PARM.LKED='LIST,XREF,AC=1'
//ASM.SYSLIB DD  DSN=SYS1.MACLIB,DISP=SHR
//       DD  DSN=SYS1.AMODGEN,DISP=SHR
//ASM.SYSIN  DD  *
SMFDUMPP START 0
*********************************************************************
*
*   NAME:     SMFDUMPP
*
*   PURPOSE:  TO DISPLAY THE SMF DATASETS USED AND UNUSED AND CALL THE
*           THE IFASMFDP PROGRAM REPETIVLY TO DUMP THE DATA.  THIS
*           PROGRAM ALSO TELLS SMF TO SWITCH THE ACTIVE DATASETS.
*
*   AUTHOR:   SCOTT VETTER
*
*   DATE WRITTEN:  07 AUGUST 2003
*
*   COPYRIGHT:
*      ALL RIGHTS RESIDE WITH THE AUTHOR SCOTT VETTER.
*      THIS PROGRAM MAY BE FREELY USED, DISTRIBUTED, OR MODIFIED.
*      THE COPYRIGHT NOTE MUST NOT BE REMOVED.
*
*   NOTICE:
*      YOU USE THIS PROGRAM AT YOUR OWN RISK.
*      NO WARRANTY IS GIVEN EITHER EXPRESSED OR IMPLIED.
*
*   MODIFICATIONS:
*      NONE
*
*   REQUIREMENTS:
*      MUST BE LINKEDITED WITH AC=1.
*      MUST BE LINKEDITED INTO AN APF AUTHORIZED LIBRARY.
*
*
*   REGISTER CONVENTIONS
*      0  =  WORK REGISTER
*      1  =  WORK REGISTER / PARM POINTER
*      2  =
*      3  =  RETURN CODE
*      4  =
*      5  =
*      6  =  POINTER TO S99RBP
*      7  =  POINTER TO S99RB
*      8  =  SUBROUTINE RETURN REGISTER
*      9  =  SUBROUTINE RETURN REGISTER
*      10 =
*      11 =
*      12 =  OUR BASE REGISTER
*      13 =  POINTER TO OUR SAVE AREA
*      14 =  RETURN REGISTER
*      15 =  CALL REGISTER / RETURN CODE
*
*   RETURN CODES:
*      0 = NORMAL - NO PROBLEMS
*      8 = ERROR  - SMF NOT ACTIVE
*
*   ABEND CODES:
*      U001 - DYNAMIC ALLOCATION DID NOT WORK
*      U002 - IFASMFDP EXITED WITH A NON-ZERO RETURN CODE
*
*   EXECUTION JCL:
*      //SCOTTS  JOB  'SMFDUMPP',CLASS=A,MSGCLASS=X,REGION=2048K,
*      //            MSGLEVEL=(1,1),NOTIFY=SCOTT
*      //GO      EXEC PGM=SMFDUMPP,REGION=2048K,DYNAMNBR=5
*      //STEPLIB  DD  DSN=SYS2.LINKLIB,DISP=SHR
*      //SYSPRINT DD  SYSOUT=*
*      //SYSUDUMP DD  SYSOUT=*
*      //DUMPOUT  DD  DSN=SMFDATA,DISP=(MOD,KEEP),UNIT=SYSDA
*      /*
*
*
*   INPUT:
*      NONE
*
*   PARMS:
*      NONE
*
*   OUTPUT:
*      SEE WTO MESSAGES IN THE CODE BELOW
*
*   EXTERNAL MODULES:
*      IFASMFDP - THE ACTUAL PROGRAM TO DUMP THE SMF DATA
*
*   CONTROL BLOCKS:
*      CVT - COMMUNICATION VECTOR TABLE
*      SMC -
*
*   MACROS:
*     WTO, MODESET, STIMER, DYNALLOC, ABEND, LINK,
*      CVT, IEESMCA
*
*
*
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         STM   R14,R12,12(R13)    SAVE CALLERS REGISTERS
         BALR  R12,0              ESTABLISH BASE REGISTER
         USING *,R12              AND TELL ASSEMBLER
         ST    R13,SAVEAREA+4     SAVE CALLERS SAP
         LA    R13,SAVEAREA       POIINT TO OUR SAVE AREA
         USING S99RBP,R6          DEF REG FOR REQ BLK PTR
         USING S99RB,R7           DEF REG FOR REQ BLK DSECT
         B     MAIN               GO START THE MAIN ROUTINE
EXITPGM0 EQU   *
         SR    R3,R3              SET RC = 0
EXITPGM  EQU   *
         L     R13,SAVEAREA+4     RESTORE PREVIOUS SAP
         LR    R15,R3             SET RETURN CODE
         L     R14,12(R13)        RESTORE REGISTER 14
         LM    R0,R12,20(R13)     RESTORE REGISTER 0 - 12
         BR    R14                RETURN TO CALLER
*     THE MAIN ROUTINE
MAIN     EQU   *
         SR    R3,R3              CLEAR RETURN CODE
         L     R10,16             POINT TO CVT
         USING CVT,R10            ESTAB. ADDRESSIBILITY TO CVT
         L     R11,CVTSMCA        POINT TO SMF CONTROL TABLE
         USING SMCABASE,R11       ESTAB. ADDRESSIB. TO SMF CONTROL AREA
         CLC   CVTSMCA(4),=F'0'   IS SMF ACTIVE?
         BNE   SMFACT              YES - CONTINUE
         WTO   '*WARNING SMF IS NOT ACTIVE'
         L     R3,=F'8'           SET BAD RC
         B     EXITPGM            GO EXIT THE PROGRAM
SMFACT   EQU   *
         BAL   R9,DSMF            GO DISPLAY SMF FILES
         BAL   R8,FREE            GO FREE THE DUMPIN DDNAME
         BAL   R8,ALLOC           GO ALLOCATE THE DATASET
         BAL   R8,DUMPSMF         GO DUMP THE SMF DATASET
*
         BAL   R9,ISSUECMD        GO ISSUE SWITCH COMMAND
*
         BAL   R9,DSMF            GO DISPLAY SMF FILES
         BAL   R8,FREE            GO FREE THE DUMPIN DDNAME
         BAL   R8,ALLOC           GO ALLOCATE THE DATASET
         BAL   R8,DUMPSMF         GO DUMP THE SMF DATASET
*
         B     EXITPGM0           GO EXIT THE PROGRAM
*
*   DISPLAY THE SMF DATASETS IN USE AND NOT
*
DSMF     EQU   *
         MVC   WTO1+16(1),SMCAXORY     MOVE ACTIVE FILE SUFFIX
         MVC   WTO2+16(1),SMCAYORX     MOVE INACTIVE FILE SUFFIX
WTO1     WTO   'SYS1.MAN_ IS CURRENTLY BEING WRITTEN TO.'
WTO2     WTO   'SYS1.MAN_ IS INACTIVE.'
         BR    R9                 GO RETURN TO CALLER
*
*   FREE THE SMF DATASET
*
FREE     EQU   *
         MVI   FLAG1,C'F'             SET FLAG TO FREE
         BAL   R9,FREEMAN             GO SET RB
         BAL   R9,SETRBPTR            GO SET RBPTR
         BAL   R9,DOSVC99             GO DO FREE OF DATASET
         BR    R8                     GO RETURN TO CALLER
*
*   ALLOCATE THE SYS1.MAN_ DATASET
*
ALLOC    EQU   *
         MVI   FLAG1,C'A'             SET FLAG TO ALLOCATE
         MVC   TUDSNA1+14(1),SMCAYORX  MOVE INACTIVE FILE SUFFIX
         BAL   R9,ALLOCMAN            GO SET RB
         BAL   R9,SETRBPTR            GO SET RBPTR
         BAL   R9,DOSVC99             GO DO FREE OF DATASET
         BR    R8                     GO RETURN TO CALLER
*
*   ISSUE THE SMF DATASET SWITCH COMMAND AND WAIT A BIT
*
ISSUECMD EQU   *
         MODESET MODE=SUP,KEY=ZERO  GET INTO SUPERVISOR STATE & KEY 0
         SLR   R0,R0                CLEAR REG 0
         LA    R1,CMDAREA           POINT TO COMMAND AREA
         SVC   34                   ISSUE THE COMMAND
         MODESET MODE=SUP,KEY=ZERO  GET INTO SUPERVISOR STATE & KEY 0
*
         STIMER WAIT,DINTVL=WAITTIME  WAIT FOR 8 SECONDS
*
         BR    R9                     GO RETURN TO CALLER
*
*   CALL THE SMF DUMP PROGRAM TO DUMP THE DATASET
*
CALLDUMP EQU   *
         MODESET MODE=SUP,KEY=ZERO  GET INTO SUPERVISOR STATE & KEY 0
         SLR   R0,R0                CLEAR REG 0
         LA    R1,CMDAREA           POINT TO COMMAND AREA
         SVC   34                   ISSUE THE COMMAND
         MODESET MODE=SUP,KEY=ZERO  GET INTO SUPERVISOR STATE & KEY 0
*
         STIMER WAIT,DINTVL=WAITTIME  WAIT FOR 8 SECONDS
*
         BR    R9                     GO RETURN TO CALLER
*
*   SETUP SVC 99 REQUEST BLOCK POINTER
*
SETRBPTR EQU   *
         LA    R6,RBPTR             ESTABLISH ADDRESSIBILITY FOR RBPTR
         LA    R7,REQBLK            LOAD ADDR OF RB
         ST    R7,S99RBPTR          STORE RB ADDR INTO RB PTR
         OI    S99RBPTR,S99RBPND    TURN ON HIGH ORDER BIT
         BR    R9                   RETURN TO CALLER
*
*   DO THE DYNAMIC ALLOCATION / DEALLOCATION
*
DOSVC99  EQU   *
         LA    R1,RBPTR             LOAD ADDR OF RB FOR SVC 99
         DYNALLOC                   ISSUE SVC 99
         LTR   R15,R15              DID IT WORK?
         BNZ   DOSVC992
         B     DOSVC991             GO RETURN
DOSVC992 EQU   *
         LR    R4,R15               SAVE RETURN CODE
         CLI   FLAG1,C'F'             IS FLAG SET TO FREE?
         BE    DOSVC991               YES, THEN GO CONTINUE
         WTO   'DYNAMIC DID NOT WORK'
         CVD   R4,DWORD             CONVERT RC
         UNPK  DYNAMSG+27(2),DWORD  INTO ERROR MSG
         OI    DYNAMSG+28,X'F0'     ENSURE PRINTABLE
         MVC   RBERROR(4),S99ERROR
         PACK  DYNAMSG+39(1),RBERROR(1)
         MVC   DYNAMSG+40(1),RBERROR
         PACK  DYNAMSG+41(1),RBERROR+1(1)
         MVC   DYNAMSG+42(1),RBERROR+1
         NC    DYNAMSG+39(4),OFFZONES
         TR    DYNAMSG+39(4),TRTABHX
         PACK  DYNAMSG+55(1),RBINFO(1)
         MVC   DYNAMSG+56(1),RBINFO
         PACK  DYNAMSG+57(1),RBINFO+1(1)
         MVC   DYNAMSG+58(1),RBINFO+1
         NC    DYNAMSG+55(4),OFFZONES
         TR    DYNAMSG+55(4),TRTABHX
         ABEND 001,DUMP
DOSVC991 BR    R9                   GO RETURN TO CALLER
*
*   FREE THE SYS1.MAN_ DATASET.
*
FREEMAN  EQU   *
         LA    R7,REQBLK            SET ADDRESSIBILITY TO RB DSECT
         XC    REQBLK,REQBLK        CLEAR RB
         MVI   S99RBLN,REQBLKLN     CLEAR RB LENGTH
         MVI   S99VERB,S99VRBUN     SET UNALLOCATION VERB
         LA    R1,TUPTR003          LOAD ADDR OF BG TEXT UNIT PTR LIST
         ST    R1,S99TXTPP          STORE THAT ADDR IN RB
         BR    R9                   GO RETURN TO CALLER
*
*   ALLOCATE THE SYS1.MAN_ DATASET.
*
ALLOCMAN EQU   *
         LA    R7,REQBLK            SET ADDRESSIBILITY TO RB DSECT
         XC    REQBLK,REQBLK        CLEAR RB
         MVI   S99RBLN,REQBLKLN     CLEAR RB LENGTH
         MVI   S99VERB,S99VRBAL     SET ALLOCATION VERB
         LA    R1,TUPTR001          LOAD ADDR OF BG TEXT UNIT PTR LIST
         ST    R1,S99TXTPP          STORE THAT ADDR IN RB
         BR    R9                   GO RETURN TO CALLER
*
*   LOAD, RUN, AND DELETE THE IFASMFDP PROGRAM.
*
DUMPSMF  EQU   *
         LINK  EP=IFASMFDP          LOAD AND RUN THE IFASMFDP
         LTR   R15,R15              DID THE PROGRAM GIVE AN RC = 0?
         BZ    DUMPOK               YES - GO CONTINUE
         LR    R4,R15               SAVE RETURN CODE
         WTO   '***  EXECUTION OF IFASMFDP FAILED. '
         ABEND 002,DUMP             YES - GO CONTINUE
DUMPOK   EQU   *
         WTO   '* EXECUTION OF IFASMFDP COMPLETED '
         BR    R8                   GO RETURN TO CALLER
*
FLAG1    DC    F'0'                 FLAG #1
EPPGM    DC    F'0'                 IFASMFDP PROGRAMS ENTRY POINT
RBPTR    DS    F
REQBLK   DS    CL20            WAS CL(S99RBEND-S99RB)
REQBLKLN EQU   L'REQBLK
*
TUPTR001 DS    0F
         DC    A(TUDDNA1)           POINT TO TU FOR DDNAME
         DC    A(TUDSNA1)           POINT TO TU FOR DSNAME
         DC    X'80'                INDICATE LAST TEXT-UNIT ADDRESS
         DC    AL3(TUDSSA1)         POINT TO TU FOR DS STATUS
*
*   KEY + NUMBER OF ENTRIES + ENTRY LENGTH + VALUE
TUDDNA1  DC    AL2(DALDDNAM),AL2(1),AL2(6),CL6'DUMPIN'
TUDSNA1  DC    AL2(DALDSNAM),AL2(1),AL2(44),CL44'SYS1.MANZ'
TUDSSA1  DC    AL2(DALSTATS),AL2(1),AL2(1),X'08'
*
TUPTR003 DS    0F
         DC    X'80'                INDICATE LAST TEXT-UNIT ADDRESS
         DC    AL3(TUDDNU1)         POINT TO U FOR DDNAME
*
TUDDNU1  DC    AL2(DUNDDNAM)        TU KEY FOR DDNAME
         DC    AL2(1)               NUMBER OF ENTRIES
         DC    AL2(6)               DDNAME LENGTH
         DC    CL6'DUMPIN'          DDNAME
         EJECT
SAVEAREA DS    18F
WAITTIME DC    C'00000800'          WAIT FOR 8 SECONDS
*                HHMMSSTH
CMDAREA  DS    0F
         DC    H'20'
         DC    H'00'
         DC    CL20'I SMF'
RBERROR  DC    XL2'0000'
RBINFO   DC    XL2'0000'
DYNAMSG  DC    C'* NOTE *  ALLOC ERROR. RC= ** ERR CDE= **** '
         DC    C'INFO CDE = ****     '
DWORD    DS    D
TRTABHX  DC    C'0123456789ABCDEF'
OFFZONES DC    4X'0F'
         EJECT
         PRINT GEN
         CVT   DSECT=YES,LIST=YES
         PRINT GEN
         IEESMCA
         IEFZB4D0
         IEFZB4D2
         END
//LKED.SYSLMOD DD  DSN=SYS2.LINKLIB(SMFDUMPP),DISP=SHR
/*
