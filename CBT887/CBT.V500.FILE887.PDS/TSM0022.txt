//SCOTTZ   JOB 'TSM0022 UMOD',NOTIFY=SCOTT,
//   CLASS=S,MSGCLASS=X,MSGLEVEL=(1,1),
//   USER=SCOTT,PASSWORD=SCOTTY
//*
//*   NAME:    SYS2.USERMODS(TSM0022)
//*   PURPOSE: TO INSTALL USERMOD TSM0022 WHICH INSTALLS THE TSO
//*            PRE-PROMPT EXIT.
//*
//*  --STATUS:  TESTING
//*
//*   NOTE(S): THE SYSTEM MUST BE RE-IPL'ED WITH THE CLPA OPTION.
//*
//*
//*
//*
//UCL    EXEC SMP,RVOL=MVSRES
//SMPCNTL  DD *
  UCLIN CDS .
    ADD MOD(IKJEFLD) LMOD(IKJEFLA) DISTLIB(AOST4) FMID(EBB1102) .
  ENDUCL .
/*
//RR     EXEC SMP,RVOL=MVSRES
//SMPCNTL  DD *
  RESTORE G(TSM0022,TSM0031) .
   RESETRC .
  REJECT  S(TSM0022, TSM0031) .
/*
//RECV   EXEC SMP,RVOL=MVSRES
//SMPPTFIN DD  *
++USERMOD(TSM0022) .
++VER(Z038) FMID(EBB1102)
            PRE(TSM0031)  .
++SRC(IKJEFLD) SYSLIB(SAMPLIB) DISTLIB(AOST4) .
         TITLE 'IKJEFLD - TSO LOGON PREPROMPT EXIT - DOCUMENTATION   '
* ********************************************************************
*
*  CHANGE LOG:
*     06/04/2006  SKV  EXTENSIVLY MODIFIED FROM CBT FILE ???
* ********************************************************************
*  DESCRIPTION: THE EXIT IS DESIGNED TO PREVENT THE DISPLAY OF THE
*               THE DEFAULT IBM TSO LOGON SCREEN AND THUS AUTOMATE
*               THE TSO SIGNON PROCESS SELECTED FROM THE VTAM
*               APPLICATION SELECTION MENU (NCI).
*               THE MOST COMMON EXECUTION OF THE EXIT WILL BE:
*               - NCI SUPPLIES THE LOGON PROCESSOR WITH USERID &
*                 PASSWORD & LOGON PROC & REGION SIZE & ACCOUNT NO.
*                 AND MAY SUPPLY A RACF GROUP NAME
*               - IF THE USERID IS ALREADY LOGGED ON IT SETS THE
*                 "RECONNECT_BIT" ON
*               - THE EXIT MOVES THE FIELDS FROM THE INPUT BUFFER
*                 TO THE COMMON PARMETERLIST
*               - SETS THE "DON'T_PROMPT_BIT" ON AND RETURNS TO THE
*                 LOGON PROCESSOR
*               - IF THE USER WAS ALREADY LOGGED ON (BECAUSE THE USER
*                 ENQ. FAILED) THE EXIT ALSO SETS THE RECONNECT BIT
*                 ON. SO THAT AUTOMATICALLY THE USER IS RECONNECTED
*               THUS THE LOGON COMMAND MUST BE:
* LOGON USERID/PSW PROC(PNAME) ACCT(ANAME) SIZE(SVALUE)
* <--POSITIONAL--> <-KEYWORD-> <-KEYWORD-> <-KEYWORD-->
*                  -  OR - OR - OR - OR -
* LOGON USERID/PSW PROC(PNAME) ACCT(ANAME) SIZE(SVALUE) GROUP(GNAME)
* <--POSITIONAL--> <-KEYWORD-> <-KEYWORD-> <-KEYWORD--> <-KEYWORD-->
*                  ALL OTHER POSSIBLE OPTIONS OF THE LOGON COMMAND
*                  ARE IGNORED.
*               IF THE LOGON COMMAND IS NOT ENTERED AS ABOVE
*               THIS EXIT WILL IGNORE ALL AND MAKE THE LOGON
*               PROCESSOR PROMPT WITH THE DEFAULT IBM TSO LOGON SCREEN
*               ALL OTHER POSSIBLE OPTIONS OF THE LOGON COMMAND ARE
*               IGNORED.
*  OPERATION: THE OPERATION OF THE MODULE IS CONTROLLED BY THE
*             DATA AREA'S POINTED TO BY REGISTER 1 UPON ENTRY:
*             SEE ALSO DSECT PARMLIST.
*    ATTRIBUTES:
*      LOCATION:      SYS1.LPALIB, LKEDIT TO IKJEFLA
*      STATE:         PROBLEM STATE, UPON ENTRY
*      AMODE:         24 BIT
*      RMODE:         24 BIT
*      KEY:           KEY 8
*      TYPE:          REENTRANT,REUSEABLE,REFRESHABLE
*
*    LOGON UID/OLD-PSWD/NEW-PSWD ACCT() PROC() SIZE() PERFORM()
*          GROUP() UNIT() NOTICES NONOTICES MAIL NOMAIL RECONNECT
*          OIDCARD
*
*    WHAT IS PROCESSED BY THIS EXIT IS: UID, OLD-PSWD, ACCT, PROC,
*    GROUP, AND SIZE
*
*
*
         TITLE 'IKJEFLD - TSO LOGON PREPROMPT EXIT - LOCAL MACROS     '
         MACRO
&LABEL   MICPNT &P1,&P2
         LA    R&P1,USTR
         B     ICB&P2
ICL&P2   $FSSBA &P2
ICB&P2   DS    0H
         MVC   ICTXTL(3,R&P1),ICL&P2
         MEND
*
IKJEFLD CSECT , REENTRANT          CSECT NAME DECLARED
*  CONSTANT EQUATES
*  BYTE 0 OF CNTL SWITCHES
UENQFAIL EQU   B'10000000'          USER ENQ FAILED
RSRCFAIL EQU   B'00100000'          OTHER THAN USERID RESOURCE FAILURE
DISCON   EQU   B'00010000'          DISCONNECT BIT ON
DONTPRMP EQU   B'00001000'          DON'T PROMPT BIT ON
*  BYTE 1 OF CNTL SWITCHES
DONTUENQ EQU   B'00001000'          DON'T ENQ USER ID
RECONECT EQU   B'00000001'          RECONNECT BIT ON
*  BYTE 2 OF CNTL SWITCHES
MAIL     EQU   B'10000000'          MAIL BIT ON
NOTICES  EQU   B'01000000'          NOTICES BIT ON
*  MISC SWITCHES
ON       EQU   X'F1'                FLAG VALUE ON
OFF      EQU   X'F0'                FLAG VALUE OFF
*   REASON CODE USED IN THE MSG'S
REASON01 EQU   X'01'
REASON02 EQU   X'02'
REASON03 EQU   X'03'
REASON04 EQU   X'04'
REASON05 EQU   X'05'
REASON06 EQU   X'06'
REASON07 EQU   X'07'
REASON08 EQU   X'08'
REASON09 EQU   X'09'
REASON10 EQU   X'10'
REASON11 EQU   X'11'
REASON12 EQU   X'12'
REASON13 EQU   X'13'
REASON14 EQU   X'14'
REASON15 EQU   X'15'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
BEGIN    SAVE  (14,12),,IKJEFLD_&SYSDATE._&SYSTIME
         LR    R11,R15               COPY ENTRY POINT
         LR    R12,R15               COPY ENTRY POINT
         USING IKJEFLD,R11,R12       SET UP BASE ADDRESSABILITY
START    LA    R12,4095(R12)         LOAD SECOND BASE ADDRESS
         LA    R12,1(R12)            LOAD SECOND BASE ADDRESS
         B     AROUND
BASEADR2 DC    A(START+4096)
AROUND   DS    0H
         LR    R10,R1                USER EXIT PARM IN R1 AND R10
*  GET WORKING STORAGE
         GETMAIN RU,LV=LWORKA,SP=21
         ST    R13,4(R1)             SAVE R13 IN PROG SAVEAREA
         ST    R1,8(R13)             SAVE R1 IN MAINPROG SAVEAREA
         LR    R13,R1                R13 POINTER TO EXITS SAVE AREA
         USING WORKA,R13             USE R13 = BASE INTO EXIT STORAGE
         ST    R10,PLSTPTR            SAVE ADDRESS OF PARMLIST
*  SET SWITCHES
         MVI   ACCTFLG,ON
         MVI   PROCFLG,ON
         MVI   SIZEFLG,ON
         MVI   RGRPFLG,OFF
*  SET INPUT FIELD DEFAULTS
         MVC   IBUIDDAT(8),=8CL1' '         USERID
         MVC   IBPSWDAT(8),=8CL1' '         USER PASSWORD
         MVC   IBNP1DAT(8),=8CL1' '         NEW USER PASSWORD #1
         MVC   IBPRODAT(8),=CL8'TSOUSER '   TSO LOGON PROC
         MVC   IBNP2DAT(8),=8CL1' '         NEW USER PASSWORD #2
         MVC   IBACNDAT(8),=8CL1' '         ACCOUNT NUMBER
         MVC   IBSIZDAT(4),ST6M             REGION SIZE - 6 MEG
         MVC   IBSYCDAT(1),=CL1'X'          SYSOUT CLASS
         MVC   IBPERDAT(2),=2CL1' '         PERFORMANCE GROUP
         MVC   IBSUSDAT(4),=CL4'JES2'       SUBSYSTEM NAME
         MVC   IBCMDDAT(8),=8CL1' '         INITIAL USER COMMAND
         MVC   IBNMDAT(1),=CL1' '           RECEIVE MAIL
         MVC   IBNNDAT(1),=CL1' '           RECEIVE NOTICES
         MVC   IBRCDAT(1),=CL1' '           RECONNECT
         MVC   IBOIDAT(1),=CL1' '           OIDCARD
*  REG 15 SHALL CONTAIN AN UNIQUE REASON CODE WHEN AN ERROR IS DETECTED
         MVI   TSOUIDNM,C' '         CLEAR TSOUIDNM FIELD
         MVC   TSOUIDNM+1(L'TSOUIDNM-1),TSOUIDNM
*        MVC   TSOUIDNM(L'TSONONM),TSONONM PRESET USERID FIELD
         USING PARMLIST,R10          SETUP ADDRESSABILITY INTO PARMLIST
         USING PARMLDES,R9           SETUP ADDRESSABILITY INTO BUFF DES
         L     R9,CNTLSW             R9 = ADDRESS OF CNTLSW DES
         L     R2,DATAPTR            R2 = ADDRESS OF CNTLSW DES
         NI    0(R2),X'FF'-DISCON    PRESET DISCONNECT BIT TO OFF
         NI    1(R2),X'FF'-DONTUENQ  MAKE SURE THAT LOGON PROCESSOR
*        OI    2(R2),MAIL+NOTICES    SET MAIL AND NOTICES BITS
*  TEST "RESOURCE-OTHER-THAN-USERID-FAILURE"
         TM    0(R2),RSRCFAIL        IF RESOURCE FAILED  THEN
         BO    ERRRSRC               GOTO ERROR HANDLING
*  TEST USERID ENQ FAILED
         TM    0(R2),UENQFAIL        IF USER ENQ FAILED BIT = OFF
         BNO   CONPROC                  CONTINUE THERE
RELOGON  DS    0H                    ELSE, IE USER WAS LOGGED ON
SKVQ1    OI    1(R2),RECONECT        SET RECONNECT BIT ON  WAS COMMENT
CONPROC  DS    0H
         L     R9,INBUF              R9 = ADDRESS OF INPUT BUFF DES
         L     R2,DATAPTR            R2 = ADDRESS OF INPUT BUFFER
         LH    R3,CURLN              R3 = CURRENT LENGTH OF INPUT BUFF
         C     R3,LLOGONU            IF LENGTH < L'LOGON UUUU/PPPP
         LA    R15,REASON01          SET R15 TO REASON CODE
         BL    ERRINBF1              ISSUE MSG & SHOW LOGON SRCEEN
         DROP  R10                   NOT REQUIRED ANY MORE
*        DROP  R9                    NOT REQUIRED ANY MORE
*  TRANSLATE TO UPPERCASE
         LR    R5,R3                 R5 CURENT LENGTH OF IN BUFFER
         BCTR  R5,0                  DECREMENT R5 FOR EX
         EX    R5,TRANUPPC
         B     SRCHLOGN              BRANCH AROUND
TRANUPPC OC    0(0,R2),SPACES        R2 = PTR TO INBUFF
SRCHLOGN DS    0H                    SEARCH FOR TEXT: "LOGON "
         CLC   0(L'LOGNTXT,R2),LOGNTXT
         BE    SRCHUID
         LA    R2,1(R2)              POINT TO NEXT CHARACTER IN BUFF
         BCT   R3,SRCHLOGN           COMPARE NEXT, IF NOT LAST
         LA    R15,REASON02          SET R15 TO REASON CODE
         B     ERRINBF1              NO LOGON TEXT FOUND, SO ISSUE MSG
*  SEARCH FOR USERID :
*  R2 POINTS TO THE BEGINNING OF THE TEXT: "LOGON ", MUST BE
*  ADVANCED TO END OF THIS TEXT
*  R3 MUST CONTAIN THE REMAING LENGTH OF TEXT FOLLOWING: "LOGON "
SRCHUID  DS    0H                    SEARCH FOR USERID
         A     R2,LLOGNTXT           R2 POINTS TO EXPECTED BEGIN OF UID
         S     R3,LLOGNTXT           R3 = REMAING LENGTH
SRCHUID1 DS    0H
         CLI   0(R2),C' '            IS THIS A SPACE
         BNE   STARTUID              NO SO HERE IS WHERE USERID STARTS
         LA    R2,1(R2)              INCREMENT R2
         BCT   R3,SRCHUID1           COMPARE NEXT CHAR., IF NOT LAST
         LA    R15,REASON03          SET R15 TO REASON CODE
         B     ERRINBF1              NO USERID FOUND, SO ERROR
STARTUID DS    0H                    START OF USERID FOUND NOW SEARCH
         LR    R4,R2                 R4 IS START OF USERID
         XR    R5,R5                 R5 WILL BECOME LENGTH OF USERID
         LA    R14,IBUIDDAT          POINT TO USERID SAVE AREA
         LA    R15,TSOUIDNM          POINT TO USERID SAVE AREA
         MVC   0(8,R14),=8CL1' '     CLEAR STRG AREA FOR UID
         MVC   0(8,R15),=8CL1' '     CLEAR STRG AREA FOR UID
LOOPUID  DS    0H
         CLI   0(R2),C'/'            IS THIS A / ?
         BE    PROCUID               END OF USERID FOUND LETS PROCESS
         CLI   0(R2),C' '            IS THIS A SPACE?
         BE    PROCUID               END OF USERID FOUND LETS PROCESS
         MVC   0(1,R14),0(R2)        MOVE A BYTE OF USERNAME
         MVC   0(1,R15),0(R2)        MOVE A BYTE OF USERNAME
         LA    R15,1(R15)            INCREMENT R15
         LA    R14,1(R14)            INCREMENT R4
         LA    R2,1(R2)              INCREMENT R2
         LA    R5,1(R5)              INCREMENT USERID LENGTH
         BCT   R3,LOOPUID            COMPARE NEXT CHAR., IF NOT LAST
*SKV1    LA    R15,REASON04          SET R15 TO REASON CODE
*SKV1    B     ERRINBF1              NO USERID FOUND, SO ERROR
         B     DOFULLS
*  USERID FOUND, BEGIN POINTED TO BY R4, LENGTH IN R5
PROCUID  DS    0H
         LTR   R5,R5                 IF LENGTH=0 THEN NO USERID, SO
         LA    R15,REASON05          SET R15 TO REASON CODE
         BZ    ERRINBF1              ISSUE MSG AND SHOW LOGON
         C     R5,LTSOUIDN           IF LENGTH>8 THEN INVALID USERID
         LA    R15,REASON06          SET R15 TO REASON CODE
         BZ    ERRINBF1              SO ISSUE MSG & SHOW LOGON
         MVI   TSOUIDNM,C' '         CLEAR TSOUIDNM FIELD
         MVC   TSOUIDNM+1(L'TSOUIDNM-1),TSOUIDNM
         STC   R5,TSOUIDLN           FILLIN LENGTH BYTE
         BCTR  R5,0                  DECREMENT LENGTH, FOR EX INSTR.
         EX    R5,MOVEUID            EXECUTE MOVEWRDS INSTRUCTION
         EX    R5,MOVEUID1           EXECUTE MOVEWRDS INSTRUCTION
         B     SRCHPSW               BRANCH OVER MOVEUID INSTR.
*        B     DOFULLS               GO DO FULL SCREEN
MOVEUID  MVC   TSOUIDNM(0),0(R4)     MOVE INSTR FROM EX
MOVEUID1 MVC   IBUIDDAT(0),0(R4)     MOVE INSTR FROM EX
*  SEARCH FOR PASSWORD :
*  R2 POINTS TO THE / PREFIXING THE PASSWORD
*  R3 CONTAINS THE REMAINING LENGTH IN THE BUFFER
SRCHPSW  DS    0H
         CLI   0(R2),C' '            IS THIS A SPACE?            *SKV
         BE    SRCHOPTN              NO PSWD - GO GET OPTIONS    *SKV
         LA    R2,1(R2)              P2 POINT TO PSW (PAST /)
         BCTR  R3,0                  DECREMENT REMAINING LENGTH TOO.
         LR    R4,R2                 R4 IS START OF PSW
         XR    R5,R5                 R5 WILL BECOME LENGTH OF PSW
LOOPPSW  DS    0H
         CLI   0(R2),C' '            IS THIS A SPACE
         BE    PROCPSW               END OF PSW FOUND LETS PROCESS
         CLI   0(R2),C'/'            A / MEANS THERE IS A NEWPSW
*                                    WHICH WILL NOT BE HANDLED BY EXIT
         LA    R15,REASON07          SET R15 TO REASON CODE
*SKV     BE    ERRINBF1              ISSUE MSG AND SHOW LOGON
         LA    R2,1(R2)              INCREMENT R2
         LA    R5,1(R5)              INCREMENT PSW LENGTH
         BCT   R3,LOOPPSW            COMPARE NEXT CHAR, IF NOT LAST
*                                    ELSE NOMORE DATA IN BUFF AND
*                                    PSW IS FOUND
*    PSW FOUND, BEGIN POINTED TO BY R4, LENGTH IN R5
PROCPSW  DS    0H
         LTR   R5,R5                 IF LENGTH=0 THEN NO PSW, SO
         LA    R15,REASON08          SET R15 TO REASON CODE
         BZ    ERRINBF1              AND ISSUE MSG AND SHOW LOGON
         C     R5,LRCFPSWN           IF LENGTH>8 THEN INVALID PSW
         LA    R15,REASON09          SET R15 TO REASON CODE
         BZ    ERRINBF1              ISSUE MSG AND SHOW LOGON
         MVI   RCFPSWNM,C' '         CLEAR RCFPSWNM FIELD
         MVC   RCFPSWNM+1(L'RCFPSWNM-1),RCFPSWNM
         STC   R5,RCFPSWLN           FILLIN LENGTH BYTE
         BCTR  R5,0                  DECREMENT LENGTH, FOR EX INSTR.
         EX    R5,MOVEPSW            EXECUTE MOVEWRDS INSTRUCTION
         EX    R5,MOVEPSW1           EXECUTE MOVEWRDS INSTRUCTION
         B     SRCHOPTN              BRANCH OVER MOVEPSW INSTR.
MOVEPSW  MVC   RCFPSWNM(0),0(R4)     MOVE INSTR FROM EX
MOVEPSW1 MVC   IBPSWDAT(0),0(R4)     MOVE INSTR FROM EX
*  SEARCH FOR OPTIONS:
*  R2 POINTS TO SPACE FOLLOWING PSW
*  R3 IS REMAINING LENGTH IN BUFFER
SRCHOPTN DS    0H
         MVC   MESSAGE(AWTOX),A1      MOVE MESSAGE
         MVC   MESSAGE+18(8),IBUIDDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         C     R3,LOPTION            IF LENGTH < L' SMALLEST OPTION
         LA    R15,REASON01          SET R15 TO REASON CODE
*SKV     BL    ERRINBF2              ISSUE MSG AND SHOW LOGON
         BL    DOFULLS               GO DO FULL SCREEN            *SKV
         LR    R6,R2                 SAVE R6 (START OF OPTIONS)
         LR    R7,R3                 SAVE R7 (LENGTH REMAINING)
*  SEARCH FOR STRING: ACCT(
SRCHACCT DS    0H                    SEARCH FOR TEXT: "ACCT("
         CLC   0(L'ACCTTXT,R2),ACCTTXT
         BE    STARTACC
         LA    R2,1(R2)              POINT TO NEXT CHARACTER IN BUFF
         BCT   R3,SRCHACCT           COMPARE NEXT, IF NOT LAST
         LA    R15,REASON02          SET R15 TO REASON CODE
*        B     ERRINBF2              ISSUE MSG AND SHOW LOGON
         B     SRCHPROC              GO SEARCH FOR PROC PARAMETER
*  ACCOUNT NUMBER FOUND R2 POINTS TO START OF TEXT ACCT(
*  AND R3 IS LENGTH REMAINING IN BUFFER
STARTACC DS    0H
         A     R2,LACCTTXT           R2 POINTS TO BEGIN OF ACCT #
         S     R3,LACCTTXT           R3 = REMAING LENGTH
         LR    R4,R2                 R4 IS START OF ACCT #
         XR    R5,R5                 R5 WILL BECOME LENGTH OF ACCT #
LOOPACC  DS    0H
         CLI   0(R2),C')'            IS THIS A ) ?
         BE    PROCACC               END OF ACCT FOUND LETS PROCESS
         LA    R2,1(R2)              INCREMENT R2
         LA    R5,1(R5)              INCREMENT ACCT LENGTH
         BCT   R3,LOOPACC            COMPARE NEXT CHAR., IF NOT LAST
         LA    R15,REASON03          SET R15 TO REASON CODE
*        B     ERRINBF2              ISSUE MSG AND SHOW LOGON
         B     ERRINBF2              ISSUE MSG AND SHOW LOGON
*  ACCT FOUND, BEGIN POINTED TO BY R4, LENGTH IN R5
PROCACC  DS    0H
         MVC   ACCTFLD(40),=40CL1' ' CLEAR STRG AREA FOR ACCT
         MVC   IBACNDAT(8),=8CL1' '  CLEAR STRG AREA FOR ACCT
         LTR   R5,R5                 IF LENGTH=0 THEN NO ACCT, SO
         LA    R15,REASON04          SET R15 TO REASON CODE
         BZ    ERRINBF2              ISSUE MSG AND SHOW LOGON
         C     R5,LACCTFLD           IF LENGTH>40 THEN INVALID ACC
         LA    R15,REASON05          SET R15 TO REASON CODE
         BH    ERRINBF2              ISSUE MSG AND SHOW LOGON
         MVI   ACCTFLD,C' '          CLEAR ACCOUNT FIELD
         MVC   ACCTFLD+1(L'ACCTFLD-1),ACCTFLD
         STC   R5,ACCTFLN            FILLIN LENGTH BYTE
         BCTR  R5,0                  DECREMENT LENGTH, FOR EX INSTR.
         EX    R5,MOVEACC            EXECUTE MOVEACC INSTRUCTION
         EX    R5,MOVEACC1           EXECUTE MOVEACC INSTRUCTION
         MVI   ACCTFLG,ON            SET ACCTFLAG TO ON
         B     SRCHPROC              BRANCH OVER MOVEACC INSTR.
MOVEACC  MVC   ACCTFLD(0),0(R4)      MOVE INSTR FROM EX
MOVEACC1 MVC   IBACNDAT(0),0(R4)     MOVE INSTR FROM EX
*  SEARCH FOR STRING: PROC(
SRCHPROC DS    0H                    SEARCH FOR TEXT: "PROC("
         LR    R2,R6                 RESET R2 TO START OF OPTIONS
         LR    R3,R7                 RESET R3 TO LENGTH REMAINING
SRCHPRO  DS    0H                    SEARCH FOR TEXT: "PROC("
         CLC   0(L'PROCTXT,R2),PROCTXT
         BE    STARTPRO
         LA    R2,1(R2)              POINT TO NEXT CHARACTER IN BUFF
         BCT   R3,SRCHPRO            COMPARE NEXT, IF NOT LAST
         LA    R15,REASON06          SET R15 TO REASON CODE
*        B     ERRINBF2              ISSUE MSG AND SHOW LOGON
         B     SRCHSIZE              GO SEARCH FOR SIZE PARAMETER
*    LOGON PROC FOUND R2 POINTS TO START OF TEXT PROC(
*    AND R3 IS LENGTH REMAINING IN BUFFER
STARTPRO DS    0H
         A     R2,LPROCTXT           R2 POINTS TO BEGIN OF PROC NAME
         S     R3,LPROCTXT           R3 = REMAINING LENGTH
         LR    R4,R2                 R4 IS START OF PROC NAME
         XR    R5,R5                 R5 WILL BECOME LENGTH OF PROC NAME
LOOPPRO  DS    0H
         CLI   0(R2),C')'            IS THIS A ) ?
         BE    PROCPRO               END OF PROC FOUND LETS PROCESS
         LA    R2,1(R2)              INCREMENT R2
         LA    R5,1(R5)              INCREMENT PROC LENGTH
         BCT   R3,LOOPPRO            COMPARE NEXT CHAR., IF NOT LAST
         LA    R15,REASON07          SET R15 TO REASON CODE
         B     ERRINBF2              ISSUE MSG AND SHOW LOGON
*  PROC FOUND, BEGIN POINTED TO BY R4, LENGTH IN R5
PROCPRO  DS    0H
         MVC   PROCFLD(8),=8CL1' '   SET DEFLT TSO PROC
         MVC   IBPRODAT(8),=8CL1' '  SET DEFLT TSO PROC
         LTR   R5,R5                 IF LENGTH=0 THEN NO PROC, SO
         LA    R15,REASON08          SET R15 TO REASON CODE
         BZ    ERRINBF2              ISSUE MSG AND SHOW LOGON
         C     R5,LPROCFLD           IF LENGTH>8  THEN INVALID PROC
         LA    R15,REASON09          SET R15 TO REASON CODE
         BH    ERRINBF2              ISSUE MSG AND SHOW LOGON
         MVI   PROCFLD,C' '          CLEAR LOGON PROC FLD
         MVC   PROCFLD+1(L'PROCFLD-1),PROCFLD
         STC   R5,PROCFLN            FILLIN LENGTH BYTE
         BCTR  R5,0                  DECREMENT LENGTH, FOR EX INSTR.
         EX    R5,MOVEPRO            EXECUTE MOVEPRO INSTRUCTION
         EX    R5,MOVEPRO1           EXECUTE MOVEPRO INSTRUCTION
         MVI   PROCFLG,ON            SET PROCFLAG TO ON
         B     SRCHSIZE              BRANCH OVER MOVEPRO INSTR.
MOVEPRO  MVC   PROCFLD(0),0(R4)      MOVE INSTR FROM EX
MOVEPRO1 MVC   IBPRODAT(0),0(R4)     MOVE INSTR FROM EX
*  SEARCH FOR STRING: SIZE(
SRCHSIZE DS    0H                    SEARCH FOR TEXT: "SIZE("
         LR    R2,R6                 RESET R2 TO START OF OPTIONS
         LR    R3,R7                 RESET R3 TO LENGTH REMAINING
SRCHSIZ  DS    0H                    SEARCH FOR TEXT: "SIZE("
         CLC   0(L'SIZETXT,R2),SIZETXT
         BE    STARTSIZ
         LA    R2,1(R2)              POINT TO NEXT CHARACTER IN BUFF
         BCT   R3,SRCHSIZ            COMPARE NEXT, IF NOT LAST
         LA    R15,REASON10          SET R15 TO REASON CODE
*        B     ERRINBF2              ISSUE MSG AND SHOW LOGON
         B     SRCHRGRP              GO SEARCH FOR GROUP
*    SIZE FOUND R2 POINTS TO START OF TEXT SIZE(
*    AND R3 IS LENGTH REMAINING IN BUFFER
STARTSIZ DS    0H
         A     R2,LSIZETXT           R2 POINTS TO BEGIN OF SIZE NAME
         S     R3,LSIZETXT           R3 = REMAING LENGTH
         LR    R4,R2                 R4 IS START OF SIZE NAME
         XR    R5,R5                 R5 WILL BECOME LENGTH OF SIZE NAME
LOOPSIZ  DS    0H
         CLI   0(R2),C')'            IS THIS A ) ?
         BE    PROCSIZ               END OF SIZE FOUND LET'S PROCESS
         CLI   0(R2),C'0'            CHARACTER: 0123456789  ?
         LA    R15,REASON11          SET R15 TO REASON CODE
         BL    ERRINBF2              NO, ISSUE MSG AND SHOW LOGON
         CLI   0(R2),C'9'            CHARACTER: 0123456789 ?
         LA    R15,REASON12          SET R15 TO REASON CODE
         BH    ERRINBF2              NO, ISSUE MSG AND SHOW LOGON
         LA    R2,1(R2)              INCREMENT R2
         LA    R5,1(R5)              INCREMENT SIZE LENGTH
         BCT   R3,LOOPSIZ            COMPARE NEXT CHAR, IF NOT LAST
         LA    R15,REASON13          SET R15 TO REASON CODE
         B     ERRINBF2              ISSUE MSG AND SHOW LOGON
*  SIZE FOUND, BEGIN POINTED TO BY R4, LENGTH IN R5
PROCSIZ  DS    0H
         LTR   R5,R5                 IF LENGTH=0 THEN NO SIZE, SO
         LA    R15,REASON14          SET R15 TO REASON CODE
*        BZ    ERRINBF2              ISSUE MSG AND SHOW LOGON
         BZ    SRCHRGRP              ISSUE MSG AND SHOW LOGON
         C     R5,LSIZEEBC           IF LENGTH>7 THEN INVALID SIZE
         LA    R15,REASON15          SET R15 TO REASON CODE
*        BH    ERRINBF2              ISSUE MSG AND SHOW LOGON
         BH    SRCHRGRP              ISSUE MSG AND SHOW LOGON
*   CONVERT SIZE TO HEX.
*        MVC   IBSIZDAT(4),=4CL1' '  SET DEFLT SIZE
         MVC   IBSIZDAT(4),=4CL1' '  SET DEFLT SIZE
         MVI   SIZEEBC,C'0'          CLEAR EBCDIC SIZE FIELD
         MVC   SIZEEBC+1(L'SIZEEBC-1),SIZEEBC
         LA    R3,SIZEEBC+L'SIZEEBC
         SR    R3,R5                 SUBTRACT LENGTH
         BCTR  R5,0                  DECREMENT LENGTH, FOR EX INSTR.
         EX    R5,EBCMSIZ            EXECUTE EBCMSIZ INSTRUCTION
         EX    R5,EBCMSIZ1           EXECUTE EBCMSIZ INSTRUCTION
         B     GOPACK                BRANCH OVER
EBCMSIZ  MVC   0(0,R3),0(R4)         MOVE INSTR FROM EX
EBCMSIZ1 MVC   IBSIZDAT(0),0(R4)  MOVE INSTR FROM EX
GOPACK   DS    0H
         PACK  SIZEPACK(L'SIZEPACK),SIZEEBC(L'SIZEEBC)
         CVB   R3,SIZEPACK           CONVERT TO BINARY
         ST    R3,SIZEFLD            AND STORE IN SIZEFLD
         L     R5,LSIZEFLD           FILLIN LENGTH TO BE COMPATIBLE
         STC   R5,SIZEFLN            WITH ACCT AND PROC
         MVI   SIZEFLG,ON            SET SIZEFLAG TO ON
*  SEARCH FOR STRING: GROUP(
SRCHRGRP DS    0H                    SEARCH FOR TEXT: "GROUP("
         LR    R2,R6                 RESET R2 TO START OF OPTIONS
         LR    R3,R7                 RESET R3 TO LENGTH REMAINING
SRCHRGR  DS    0H                    SEARCH FOR TEXT: "GROUP("
         CLC   0(L'RGRPTXT,R2),RGRPTXT
         BE    STARTRGR
         LA    R2,1(R2)              POINT TO NEXT CHARACTER IN BUFF
         BCT   R3,SRCHRGR            COMPARE NEXT, IF NOT LAST
         B     DOFULLS               GO DO FULL SCREEN
*    RACF GROUP NAME FOUND R2 POINTS TO START OF TEXT GROUP(
*    AND R3 IS LENGTH REMAINING IN BUFFER
STARTRGR DS    0H
         A     R2,LRGRPTXT           R2 POINTS TO BEGIN OF RGRP #
         S     R3,LRGRPTXT           R3 = REMAINING LENGTH
         LR    R4,R2                 R4 IS START OF RGRP #
         XR    R5,R5                 R5 WILL BECOME LENGTH OF RGRP #
LOOPRGR  DS    0H
         CLI   0(R2),C')'            IS THIS A ) ?
         BE    PROCRGR               END OF RGRP FOUND LETS PROCESS
         LA    R2,1(R2)              INCREMENT R2
         LA    R5,1(R5)              INCREMENT RGRP LENGTH
         BCT   R3,LOOPRGR            COMPARE NEXT CHAR., IF NOT LAST
         B     DOFULLS               GO DO FULL SCREEN
*  GROUP FOUND, BEGIN POINTED TO BY R4, LENGTH IN R5
PROCRGR  DS    0H
         LTR   R5,R5                 IF LENGTH=0 THEN NO RGRP, SO
         BZ    DOFULLS               GO DO FULL SCREEN
         C     R5,LRGRPFLD           IF LENGTH>8 THEN INVALID RACF GRP
         BH    FILLPARM              ALL OPTIONS FOUND
         MVI   RGRPFLD,C' '          CLEAR RACF GROUP FIELD
         MVC   RGRPFLD+1(L'RGRPFLD-1),RGRPFLD
         STC   R5,RGRPFLN            FILLIN LENGTH BYTE
         BCTR  R5,0                  DECREMENT LENGTH, FOR EX INSTR.
         EX    R5,MOVERGR            EXECUTE MOVERGR INSTRUCTION
         MVI   RGRPFLG,ON            SET RGRPFLAG TO ON
*        B     FILLPARM              ALL OPTIONS FOUND
         B     DOFULLS               GO DO FULL SCREEN
MOVERGR  MVC   RGRPFLD(0),0(R4)      MOVE INSTR FROM EX
TMSG1    WTO   'BEFORE TSU FULL SCR ',ROUTCDE=(11),MF=L
TMSG1X   EQU   *-TMSG1
TMSG2    WTO   'BEFORE TSU SCR      ',ROUTCDE=(11),MF=L
TMSG2X   EQU   *-TMSG2
*  PRESENT FULL SCREEN DISPLAY
DOFULLS  DS    0H
*        MVC   MESSAGE(AWTOX),A1      MOVE MESSAGE
*        MVC   MESSAGE+18(8),IBUIDDAT
*        WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
*        MVC   MESSAGE(AWTOX),A2      MOVE MESSAGE
*        MVC   MESSAGE+18(8),IBPSWDAT
*        WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
*        MVC   MESSAGE(AWTOX),A3      MOVE MESSAGE
*        MVC   MESSAGE+18(8),IBPRODAT
*        WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
*        MVC   MESSAGE(AWTOX),A4      MOVE MESSAGE
*        MVC   MESSAGE+18(8),IBACNDAT
*        WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
*        MVC   MESSAGE(AWTOX),A5      MOVE MESSAGE
*        MVC   MESSAGE+18(4),IBSIZDAT
*        WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
***      STFSMODE ON,INITIAL=YES
***      STTMPMD ON
*
*
         TPUT  CLEAR,10,FULLSCR    CLEAR THE SCREEN
         LA    R4,IUIDL            SET INITIAL CURSOR POSITION
         ST    R4,CURPOS           STORE THE POSITION
DISPL    DS    0H
*   MOVE THE SCREEN DEFINITION TO THE CHANGABLE STORAGE AREA
         LA    R14,USTR            POINT TO THE RECEIVING FIELD
         LA    R15,STREAMX         SET THE RECEIVING FIELD LENGTH
         LA    R4,STREAM           SET THE SENDING FIELD LOCATION
         LA    R5,STREAMX          SET THE SENDING FIELD LENGHT
         MVCL  R14,R4              MOVE SCREEN INTO TO DYNAMIC AREA
*    SET DEFAULTS ON SCREEN
DISPL1   DS    0H
         LA    R6,USTR                POINT TO SCREEN BUFFER START
         L     R14,16                 POINT TO CVT
         L     R15,196(R14)           POINT TO SMF SMC
         MVC   SIDL(4,R6),16(R15)     MOVE SMF ID
*        MVC   IUIDL(8,R6),=C'TSOUSER '   SET LOGON ID
         MVC   IUIDL(8,R6),TSOUIDNM       SET LOGON ID
         MVC   IPWL(8,R6),IBPSWDAT
         MVC   INPW1L(8,R6),IBNP1DAT
         MVC   IPROCL(8,R6),IBPRODAT
         MVC   INPW2L(8,R6),IBNP2DAT
         MVC   IACNL(8,R6),IBACNDAT
         MVC   ISIZL(4,R6),IBSIZDAT
         MVC   ISYOL(1,R6),IBSYCDAT
         MVC   IPERFL(2,R6),IBPERDAT
         MVC   ISUSL(4,R6),IBSUSDAT
         MVC   ICMDL(8,R6),IBCMDDAT
         MVC   IPTNML(1,R6),IBNMDAT
         MVC   IPTNNL(1,R6),IBNNDAT
         MVC   IPTRCL(1,R6),IBRCDAT
         MVC   IPTOIL(1,R6),IBOIDAT
*  CODE BELOW IS USED TO MODIFY THE SCREEN DISPLAY SO THAT THE IC (3270
*  INSTRUCTION - INSERT CURSOR) CAN BE PLACED IN SELECT SPOTS. THE
*  CURSOR IS SET ACCORDING TO THE VALUE PLACED IN THE VARIABLE CURPOS.
         TPUT  USTR,STREAMX,FULLSCR
*
*
*   GET INPUT FROM FULL SCREEN, DETERMINE WHAT KEY WAS ENTERED, AND
*   BASED ON THE KEYPRESS DO WHATEVER.
*
         TGET  INBUFF,INBUFFX,ASIS
*
         LA    R5,INBUFF            POINT TO INPUT BUFFER
*
         CLI   INBUFF,X'7D'         ENTER PRESSED?
         BE    PROCESS               YES - GO PROCESS
*        CLI   INBUFF,X'6C'         PA1 PRESSED?
*        BE    DOFULLS               YES - GO REDISPLAY
*        CLI   INBUFF,X'6C'         PA2 PRESSED?
*        BE    DOFULLS               YES - GO REDISPLAY
         CLI   INBUFF,X'F1'         PF1 PRESSED?
         BE    PROCESS1              YES - GO DISPLAY A BRIEF HELP MSG
         CLI   INBUFF,X'C1'         PF13 PRESSED?
         BE    PROCESS1              YES - GO DISPLAY A BRIEF HELP MSG
         CLI   INBUFF,X'F3'         PF3 PRESSED?
         BE    PREEXIT3              YES - GO EXIT - CANCEL LOGON
         CLI   INBUFF,X'C3'         PF15 PRESSED?
         BE    PREEXIT3              YES - GO EXIT - CANCEL LOGON
*
PROCESS  DS    0H
*  UPPERCASE INPUTS
         OC    IBUIDDAT(8),=8X'40'
         OC    IBPSWDAT(8),=8X'40'
         OC    IBPRODAT(8),=8X'40'
         OC    IBACNDAT(8),=8X'40'
*        OI    IBSIZDAT
*        OI    IBPERDAT
         OC    IBSYCDAT(1),=1X'40'
         OC    IBCMDDAT(8),=8X'40'
         OC    IBNP1DAT(8),=8X'40'
         OC    IBNP2DAT(8),=8X'40'
         OI    IBNMDAT,X'40'
         OI    IBNNDAT,X'40'
         OI    IBRCDAT,X'40'
         OI    IBOIDAT,X'40'
         OC    IBSUSDAT(4),=4X'40'
*
         LA    R6,USTR                POINT TO SCREEN BUFFER START
         MVC   IUIDL(8,R6),IBUIDDAT
         MVC   ISIZL(4,R6),IBSIZDAT
         MVC   IPROCL(8,R6),IBPRODAT
*
         MVI   MSGTXTL(R6),C' '          PREP TO BLANK MESSAGE FIELD
         MVC   MSGTXTL+1(59,R6),MSGTXTL    BLANK MESSAGE FIELD
         EJECT
* *********************************************************************
*    CHECK FIELDS FOR HELP (?), NO INPUT (FIELD IS BLANK(S)), OTHERWISE
*    WE ASSUME IT'S GOOD.
* *********************************************************************
*
***  CHECK THE USERID.
*
C0       DS    0H
         MICPNT 15,0520                SET CURSOR LOCATION
         CLC   IBUIDDAT(1),=1C'?'      HELP REQUESTED?
         BNE   C0A                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C0MSG,R6),C0MSG
         B     DISPL1
C0MSG    DC    C'A USERID IDENTIFIES YOU TO THE SYSTEM '
C0A      DS    0H
         CLC   IBUIDDAT(8),=8C' '      UID FIELD BLANK?
         BNE   C0B                      NO - CONTINUE
         MVC   MSGTXTL(L'C0AMSG,R6),C0AMSG
*        MVC   ICTXTL(3,R6),IUIDLOC    SET THE CURSOR TO UID INPUT
         B     DISPL1
C0AMSG   DC    C'ERROR: YOU MUST SPECIFY A USERID. '
C0B      DS    0H
*        LA    R9,USERID               POINT TO USERID PARM FIELD
*        LA    R5,DATAPTR              POINT TO THE DATA AREA
*        MVC   0(L'IBUIDDAT-1,R5),IBUIDDAT  MOVE THE DATA
*        L     R1,=F'8'                SET LENGTH
*        BCTR  R1,0                    REDUCE BY ONE
*        STH   R1,MAXLN                SET THE LENGTH
*        ABEND 404,DUMP
*
***  CHECK THE FIRST NEW PASSWORD.
*
C1       DS    0H
         MICPNT 15,0767                SET CURSOR LOCATION
         CLC   IBNP1DAT(1),=1C'?'      HELP REQUESTED?
         BNE   C1A                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C1MSG,R6),C1MSG
         B     DISPL1
C1MSG    DC    C'PUT YOUR NEW PASSWORD HERE. '
C1A      DS    0H
         CLC   IBNP1DAT(8),=8C' '      NEW PSWD BLANK?
         BE    C1B                      YES - CONTINUE
         MVC   MSGTXTL(L'C1AMSG,R6),C1AMSG
         B     DISPL1
C1AMSG   DC    C'ERROR: NEW PASSWORD SETTING IGNORED. '
C1B      DS    0H
*
***  CHECK THE SECOND NEW PASSWORD.  USED AS VERIFIER.
*
C2       DS    0H
         MICPNT 15,0967                SET CURSOR LOCATION
         CLC   IBNP2DAT(1),=1C'?'      HELP REQUESTED?
         BNE   C2A                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C2MSG,R6),C2MSG
         B     DISPL1
C2MSG    DC    C'ENTER PASSWORD AGAIN TO VERIFY. '
C2A      DS    0H
         CLC   IBNP2DAT(8),=8C' '      NEW PASSWORDS AGAIN BLANK?
         BE    C2B                      YES - CONTINUE
         MVC   MSGTXTL(L'C2AMSG,R6),C2AMSG
         B     DISPL1
C2AMSG   DC    C'ERROR: NEW PASSWORD SETTING IGNORED. '
C2B      DS    0H
*
***  VERIFY THE FIRST AND SECOND NEW PASSWORDS.
*
C3       DS    0H
*        CLC   IBNP1DAT(8),IBNP2DAT    NEW PASSWORDS EQUAL?
*        BE    C4                       YES - CONTINUE
*        MVC   MSGTXTL(L'C3MSG,R6),C3MSG
*        B     DISPL1
*C3MSG    DC    C'ERROR: NEW PASSWORDS UNEQUAL. '
*
***  VERIFY THE PROCNAME.
*
C4       DS    0H
         MICPNT 15,0920                SET CURSOR LOCATION
         CLC   IBPRODAT(1),=1C'?'      HELP REQUESTED?
         BNE   C4A                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C4MSG,R6),C4MSG
         B     DISPL1
C4MSG    DC    C'THE PROCNAME SETS YOUR RESOURCES. '
C4A      DS    0H
         CLC   IBPRODAT(8),=8C' '      PROC FIELD BLANK?
         BNE   C4AB                     NO - CONTINUE
         MVC   MSGTXTL(L'C4AMSG,R6),C4AMSG
         B     DISPL1
C4AMSG   DC    C'ERROR: LOGON PROC MUST BE SPECIFIED. '
C4AB     DS    0H
*        LA    R9,PROC                 POINT TO PROC PARM FIELD
*        LA    R5,DATAPTR              POINT TO THE DATA AREA
*        MVC   0(L'IBPRODAT-1,R5),IBPRODAT  MOVE THE DATA
*        L     R1,=F'8'                SET LENGTH
*        BCTR  R1,0                    REDUCE BY ONE
*        STH   R1,MAXLN                SET THE LENGTH
*
***  VERIFY THE ACCOUNT DATA.  (NO ENTRY IN THE FIELD IS NEEDED)
*
C4B      DS    0H
         MICPNT 15,1120                SET CURSOR LOCATION
         CLC   IBACNDAT(1),=1C'?'      HELP REQUESTED?
         BNE   C4C                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C4BMSG,R6),C4BMSG
         B     DISPL1
C4BMSG   DC    C'THE ACCUNT NUMBER IS FOR ACCOUNTING USE. '
C4C      DS    0H
         CLC   IBACNDAT(8),=8C' '      ACCOUNT FIELD BLANK?
         BNE   C4CB                     NO - CONTINUE
*        MVC   MSGTXTL(L'C4CMSG,R6),C4CMSG
*        B     DISPL1
*C4CMSG  DC    C'ERROR: ACCOUNT # MUST BE SPECIFIED. '
C4CB     DS    0H
*        LA    R9,ACCT                 POINT TO PROC PARM FIELD
*        LA    R5,DATAPTR              POINT TO THE DATA AREA
*        MVC   0(L'IBACNDAT-1,R5),IBACNDAT  MOVE THE DATA
*        L     R1,=F'8'                SET LENGTH
*        BCTR  R1,0                    REDUCE BY ONE
*        STH   R1,MAXLN                SET THE LENGTH
*
***  VERIFY THE PASSWORD DATA.  (NO ENTRY IN THE FIELD IS NEEDED)
*
C5       DS    0H
         MICPNT 15,0720                SET CURSOR LOCATION
         CLC   IBPSWDAT(1),=1C'?'      HELP REQUESTED?
         BNE   C5A                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C5MSG,R6),C5MSG
         B     DISPL1
C5MSG    DC    C'YOUR PASSWORD ENSURES ONLY YOU SIGNON '
C5A      DS    0H
         CLC   IBPSWDAT(8),=8C' '      PSWD FIELD BLANK?
         BNE   C5B                      NO - CONTINUE
*        MVC   MSGTXTL(L'C5AMSG,R6),C5AMSG
*        B     DISPL1
*C5AMSG   DC    C'ERROR: A PASSWORD MUST BE SPECIFIED. '
C5B      DS    0H
*        LA    R9,PASSW                POINT TO PASSWORD PARM FIELD
*        LA    R5,DATAPTR              POINT TO THE DATA AREA
*        MVC   0(L'IBPSWDAT-1,R5),IBPSWDAT  MOVE THE DATA
*        L     R1,=F'8'                SET LENGTH
*        BCTR  R1,0                    REDUCE BY ONE
*        STH   R1,MAXLN                SET THE LENGTH
*
***  VERIFY THE REGION SIZE DATA.
*
C6       DS    0H
         MICPNT 15,1320                SET CURSOR LOCATION
         CLC   IBSIZDAT(1),=1C'?'      HELP REQUESTED?
         BNE   C6A                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C6MSG,R6),C6MSG
         B     DISPL1
C6MSG    DC    C'DEFINES HOW MUCH MEMORY YOU NEED. '
C6A      DS    0H
         CLC   IBSIZDAT(4),=4C' '      SIZE FIELD BLANK?
         BNE   C6B                      NO - CONTINUE
         MVC   MSGTXTL(L'C6AMSG,R6),C6AMSG
         B     DISPL1
C6AMSG   DC    C'ERROR: A SIZE MUST BE SPECIFIED. '
C6BMSG   DC    C'ERROR: A NUMERIC SIZE IS NEEDED OR XM.'
C6CMSG   DC    C'ERROR: A NUMERIC SIZE IS NEEDED OR XM.'
C6B      DS    0H
*   CHECK FOR SHORT FORM INPUT ( 1M TO 9M )
*   CHECK FOR "M" IN SECOND POSITION
         OI    IBSIZDAT+1,X'40'    UPPERCASE SECOND POSIT
         CLI   IBSIZDAT+1,C'M'     GOT A M IN POSIT 2?
         BE    C6C                  YES TEST FIRST POSIT FOR #
         CLI   IBSIZDAT+1,X'F1'      GOT A NUMBER LT 1?
         BL    C6X1                 YES - GIVER ERROR
         CLI   IBSIZDAT+1,X'F9'      GOT A FIRST # GERATER THAN 9?
         BH    C6X1                 YES TEST FIRST POSIT FOR #
         B     C7                  ASSUME PROPER NUMBER AND CONTINUE
C6X1     DS    0H
         MVC   MSGTXTL(L'C6BMSG,R6),C6BMSG
         B     DISPL1              RETURN ERROR MSG
*   PROCESS A XM VALUE
C6C      DS    0H
         CLI   IBSIZDAT,X'F1'      GOT A FIRST # BELOW 1?
         BL    C6D                  YES TEST FIRST POSIT FOR #
         CLI   IBSIZDAT,X'F9'      GOT A FIRST # GERATER THAN 9?
         BH    C6D                  YES TEST FIRST POSIT FOR #
         B     C6E                  YES TEST FIRST POSIT FOR #
C6D      DS    0H
         MVC   MSGTXTL(L'C6CMSG,R6),C6CMSG
         B     DISPL1              RETURN ERROR MSG
C6E      DS    0H
         CLC   IBSIZDAT(2),=C'1M'  1M ENTERED?
         BNE   C6M2                GO CHECK FOR 2M
         MVC   IBSIZDAT(4),ST1M     YES - SET NUMERIC VALUE
         B     C7                         GO CONTINUE
C6M2     DS    0H
         CLC   IBSIZDAT(2),=C'2M'  2M ENTERED?
         BNE   C6M3                GO CHECK FOR 3M
         MVC   IBSIZDAT(4),ST2M     YES - SET NUMERIC VALUE
         B     C7                         GO CONTINUE
C6M3     DS    0H
         CLC   IBSIZDAT(2),=C'3M'  3M ENTERED?
         BNE   C6M4                GO CHECK FOR 4M
         MVC   IBSIZDAT(4),ST3M     YES - SET NUMERIC VALUE
         B     C7                         GO CONTINUE
C6M4     DS    0H
         CLC   IBSIZDAT(2),=C'4M'  4M ENTERED?
         BNE   C6M5                GO CHECK FOR 5M
         MVC   IBSIZDAT(4),ST4M     YES - SET NUMERIC VALUE
         B     C7                         GO CONTINUE
C6M5     DS    0H
         CLC   IBSIZDAT(2),=C'5M'  5M ENTERED?
         BNE   C6M6                GO CHECK FOR 6M
         MVC   IBSIZDAT(4),ST5M     YES - SET NUMERIC VALUE
         B     C7                         GO CONTINUE
C6M6     DS    0H
         CLC   IBSIZDAT(2),=C'6M'  6M ENTERED?
         BNE   C6M7                GO CHECK FOR 7M
         MVC   IBSIZDAT(4),ST6M     YES - SET NUMERIC VALUE
         B     C7                         GO CONTINUE
C6M7     DS    0H
         CLC   IBSIZDAT(2),=C'7M'  7M ENTERED?
         BNE   C6M8                GO CHECK FOR 8M
         MVC   IBSIZDAT(4),ST7M     YES - SET NUMERIC VALUE
         B     C7                         GO CONTINUE
C6M8     DS    0H
         CLC   IBSIZDAT(2),=C'8M'  8M ENTERED?
         BNE   C6M9                GO CHECK FOR 9M
         MVC   IBSIZDAT(4),ST8M     YES - SET NUMERIC VALUE
         B     C7                         GO CONTINUE
C6M9     DS    0H
         CLC   IBSIZDAT(2),=C'9M'  9M ENTERED?
         BNE   C6MX                GO SET FOR MAX
         MVC   IBSIZDAT(4),ST9M     YES - SET NUMERIC VALUE
         B     C7                         GO CONTINUE
C6MX     DS    0H
         MVC   IBSIZDAT(4),ST9M    SET MAXIMUM (BETTER THAN ABENDING)
*
***  VERIFY THE PERFORMANCE GROUP FIELD.  (NOT CHECKED)
*
C7       DS    0H
         MICPNT 15,1520                SET CURSOR LOCATION
         CLC   IBPERDAT(1),=1C'?'      HELP REQUESTED?
         BNE   C7A                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C7MSG,R6),C7MSG
         B     DISPL1
C7MSG    DC    C'SETS PERFORMANCE PARAMETER. '
C7A      DS    0H
*        CLC   IBPERDAT(2),=2C' '      PERFORM FIELD BLANK?
*        BNE   C7B                      NO - CONTINUE
*        MVC   MSGTXTL(L'C7AMSG,R6),C7AMSG
*        B     DISPL1
*C7AMSG   DC    C'ERROR: A PERFORM MUST BE SPECIFIED. '
C7B      DS    0H
*
***  VERIFY THE COMMAND NAME DATA. (OPTIONAL)
*
C8       DS    0H
         MICPNT 15,1720                SET CURSOR LOCATION
         CLC   IBCMDDAT(1),=1C'?'      HELP REQUESTED?
         BNE   C8A                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C8MSG,R6),C8MSG
         B     DISPL1
C8MSG    DC    C'SETS THE INITIAL COMMAND TO BE RUN. '
C8A      DS    0H
*        CLC   IBCMDDAT(2),=8C' '      COMMAND FIELD BLANK?
*        BNE   C8B                      NO - CONTINUE
*        MVC   MSGTXTL(L'C8AMSG,R6),C8AMSG
*        B     DISPL1
*C8AMSG   DC    C'ERROR: A COMMAND MUST BE SPECIFIED. '
C8B      DS    0H
*
***  VERIFY THE THE MAIL/NOMAIL OPTION.
*
C9       DS    0H
         MICPNT 15,2012                SET CURSOR LOCATION
         CLC   IBNMDAT(1),=1C'?'       HELP REQUESTED?
         BNE   C9A                      NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C9MSG,R6),C9MSG
         B     DISPL1
C9MSG    DC    C'LETS YOU RECEIVE NO MAIL AT LOGON. '
C9A      DS    0H
         CLC   IBNMDAT(1),=1C' '      NOMAIL FIELD BLANK?
         BE    C9B                      YES - CONTINUE
         CLC   IBNMDAT(1),=1C'S'      NOMAIL FIELD BLANK?
         BE    C9C                      YES - CONTINUE
         MVC   MSGTXTL(L'C9AMSG,R6),C9AMSG
         B     DISPL1
C9AMSG   DC    C'ERROR: A BLANK OF AN "S" IS REQUIRED FOR NOMAIL. '
C9C      DS    0H
*        LA    R9,CNTLSW               POINT TO CONTROL PARM FIELD
*        LA    R5,DATAPTR              POINT TO THE DATA AREA
*        OI    2(R2),MAIL              SET MAIL
C9B      DS    0H
*
***  VERIFY THE THE NOTICES/NONOTICES OPTION.
*
C10      DS    0H
         MICPNT 15,2026                SET CURSOR LOCATION
         CLC   IBNNDAT(1),=1C'?'       HELP REQUESTED?
         BNE   C10A                     NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C10MSG,R6),C10MSG
         B     DISPL1
C10MSG   DC    C'LETS YOU RECEIVE NO NOTICES AT LOGON. '
C10A     DS    0H
         CLC   IBNNDAT(1),=1C' '      NONOTICE FIELD BLANK?
         BE    C10B                     YES - CONTINUE
         CLC   IBNNDAT(1),=1C'S'      NONOTICE FIELD BLANK?
         BE    C10C                     YES - CONTINUE
         MVC   MSGTXTL(L'C10AMSG,R6),C10AMSG
         B     DISPL1
C10AMSG  DC    C'ERROR: A BLANK OF AN "S" IS REQUIRED FOR NONOTICE. '
C10B     DS    0H
*        LA    R9,CNTLSW               POINT TO CONTROL PARM FIELD
*        LA    R5,DATAPTR              POINT TO THE DATA AREA
*        OI    2(R2),NOTICES           SET NOTICES
C10C     DS    0H
*
***  VERIFY THE THE CONNECT/NOCONNECT OPTION.
*
C11      DS    0H
         MICPNT 15,2042                SET CURSOR LOCATION
         CLC   IBRCDAT(1),=1C'?'       HELP REQUESTED?
         BNE   C11A                     NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C11MSG,R6),C11MSG
         B     DISPL1
C11MSG   DC    C'LETS YOU RECONNECT TO A RUNNING SESSION. '
C11A     DS    0H
         CLC   IBRCDAT(1),=1C' '      RECONNECT FIELD BLANK?
         BE    C11C                     YES - CONTINUE
         CLC   IBRCDAT(1),=1C'S'      RECONNECT FIELD BLANK?
         BE    C11B                     YES - CONTINUE
         MVC   MSGTXTL(L'C11AMSG,R6),C11AMSG
         B     DISPL1
C11AMSG  DC    C'ERROR: A BLANK OF AN "S" IS REQUIRED FOR RECONNECT. '
C11B     DS    0H
*        LA    R9,CNTLSW               POINT TO CONTROL PARM FIELD
*        LA    R5,DATAPTR              POINT TO THE DATA AREA
*        OI    1(R2),RECONECT         SET RECONNECT
C11C     DS    0H
*
***  VERIFY THE THE OIDCARD/NOOIDCARD OPTION. (NOTHING DONE WITH THIS)
*
C12      DS    0H
         MICPNT 15,2059                SET CURSOR LOCATION
         CLC   IBOIDAT(1),=1C'?'       HELP REQUESTED?
         BNE   C12A                     NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C12MSG,R6),C12MSG
         B     DISPL1
C12MSG   DC    C'I"M WONDERING TOO! '
C12A     DS    0H
         CLC   IBOIDAT(1),=1C' '      OIDCARD FIELD BLANK?
         BE    C12B                     YES - CONTINUE
         CLC   IBOIDAT(1),=1C'S'      OIDCARD FIELD BLANK?
         BE    C12B                     YES - CONTINUE
         MVC   MSGTXTL(L'C12AMSG,R6),C12AMSG
         B     DISPL1
C12AMSG  DC    C'ERROR: A BLANK OF AN "S" IS REQUIRED FOR OIDCARD. '
C12B     DS    0H
C13      DS    0H
         MICPNT 15,1567                SET CURSOR LOCATION
         CLC   IBSUSDAT(1),=1C'?'      HELP REQUESTED?
         BNE   C13A                     NO - CHECK FOR FIELD VALIDITY
         MVC   MSGTXTL(L'C13MSG,R6),C13MSG
         B     DISPL1
C13MSG   DC    C'I"M WONDERING TOO! '
C13A     DS    0H
*        CLC   IBSUSDAT(4),=4C' '     SUBSYSTEM FIELD BLANK?
*        BNE   C13B                     NO - CONTINUE
*        MVC   MSGTXTL(L'C13AMSG,R6),C13AMSG
*        B     DISPL1
*C13AMSG  DC    C'ERROR: SUBSYSTEM NAME MUST BE SPECIFIED. '
         B     COMPLETE            GO EXIT SINCE EVERYTHING SEEMS OK
C13B     DS    0H
         EJECT
* ********************************************************************
*
* ********************************************************************
PROCESS1 DS    0H
         MVC   MSGTXTL(L'PF1AMSG,R6),PF1AMSG
         B     DISPL1
PF1AMSG  DC    C'NOTE: FOR FIELD HELP ENTER A ? ON FIELD AND ENTER'
COMPLETE DS    0H
*?*      B     RETURN
*  MOVE GOTTEN INFORMATION INTO PARM AREA (NOT DONE YET)
*  OR MOVE SUCH CODE INTO THE CHECKING ROUTINE ABOVE. - PROBABLY BEST
         OC    IBUIDDAT(8),=8X'40'
         OC    IBPSWDAT(8),=8X'40'
         OC    IBPRODAT(8),=8X'40'
         OC    IBACNDAT(8),=8X'40'
*        OI    IBSIZDAT
*        OI    IBPERDAT
         OC    IBSYCDAT(1),=1X'40'
         OC    IBCMDDAT(8),=8X'40'
         OC    IBNP1DAT(8),=8X'40'
         OC    IBNP2DAT(8),=8X'40'
         OI    IBNMDAT,X'40'
         OI    IBNNDAT,X'40'
         OI    IBRCDAT,X'40'
         OI    IBOIDAT,X'40'
         OC    IBSUSDAT(4),=4X'40'
*
*  MOVE AVAILABLE ITEMS INTO PARMLIST
FILLPARM DS 0H
         L     R10,PLSTPTR           GET ADDRESS OF PARMLIST
         USING PARMLIST,R10          SETUP ADDRESSABILITY INTO PARMLIST
         DROP  R9
         USING PARMLDES,R9           SETUP ADDRESSABILITY INTO BUFF DES
*  MOVE USERID INTO PARMLIST
         L     R9,USERID             R9 = ADDRESS OF USERID DES
         L     R5,DATAPTR            R5 = ADDRESS OF USERID IN PARMLIST
         LA    R4,IBUIDDAT           R4 = ADDRESS OF RETRIEVED USERID
         XR    R3,R3                 CLEAR R3
         L     R1,=F'8'              MAX LEN OF FIELD
FPU1     EQU   *
         CR    R3,R1                 AT END OF MAX LENGTH?
         BE    FPU3
         CLI   0(R4),C' '            IS THIS A SPACE?
         BE    FPU3                   DONE -
         MVC   0(0,R5),0(R4)         MOVE A BYTE
         LA    R5,1(R5)              POINT TO NEXT POSIT - OUTPUT
         LA    R4,1(R4)              POINT TO NEXT POSIT - INPUT
         LA    R3,1(R3)              ADD 1 TO COUNTER
         B     FPU1                  GO BACK AND CHECK NEXT POSIT
FPU3     EQU   *
         STH   R3,CURLN              MOVE LENGTH TO PARMLIST
*  MOVE PASSWORD INTO PARMLIST
         L     R9,PASSW              R9 = ADDRESS OF PASSWORD DES
         L     R5,DATAPTR            R5 = ADDRESS OF PSW IN PARMLIST
         LA    R4,IBPSWDAT           R4 = ADDRESS OF RETRIEVED PASSWORD
         XR    R3,R3                 CLEAR R3
         L     R1,=F'8'              MAX LEN OF FIELD
FPP1     EQU   *
         CR    R3,R1                 AT END OF MAX LENGTH?
         BE    FPP3
         CLI   0(R4),C' '            IS THIS A SPACE?
         BE    FPP3                   DONE -
         MVC   0(0,R5),0(R4)         MOVE A BYTE
         LA    R5,1(R5)              POINT TO NEXT POSIT - OUTPUT
         LA    R4,1(R4)              POINT TO NEXT POSIT - INPUT
         LA    R3,1(R3)              ADD 1 TO COUNTER
         B     FPP1                  GO BACK AND CHECK NEXT POSIT
FPP3     EQU   *
         STH   R3,CURLN              MOVE LENGTH TO PARMLIST
*  MOVE ACCT NO. INTO PARMLIST
DOACCT   DS    0H
         CLI   ACCTFLG,OFF           IF ACCOUNT NOT AVAILABLE THEN
         BE    DOPROC                SKIP
         L     R9,ACCT               R9 = ADDRESS OF ACCT DES
         L     R5,DATAPTR            R5 = ADDRESS OF ACCT IN PARMLIST
         LA    R4,IBACNDAT           R4 = ADDRESS OF RETRIEVED ACCT
         XR    R3,R3                 CLEAR R3
         L     R1,=F'8'              MAX LEN OF FIELD
FPA1     EQU   *
         CR    R3,R1                 AT END OF MAX LENGTH?
         BE    FPA3
         CLI   0(R4),C' '            IS THIS A SPACE?
         BE    FPA3                   DONE -
         MVC   0(0,R5),0(R4)         MOVE A BYTE
         LA    R5,1(R5)              POINT TO NEXT POSIT - OUTPUT
         LA    R4,1(R4)              POINT TO NEXT POSIT - INPUT
         LA    R3,1(R3)              ADD 1 TO COUNTER
         B     FPA1                  GO BACK AND CHECK NEXT POSIT
FPA3     EQU   *
         STH   R3,CURLN              MOVE LENGTH TO PARMLIST
*  MOVE LOGON PROC INTO PARMLIST
DOPROC   DS    0H
         CLI   PROCFLG,OFF           IF PROC NOT AVAILABLE THEN
         BE    DOSIZE                SKIP
         L     R9,PROC               R9 = ADDRESS OF PROC DES
         L     R5,DATAPTR            R5 = ADDRESS OF PROC IN PARMLIST
         LA    R4,IBPRODAT           R4 = ADDRESS OF RETRIEVED PROC
         XR    R3,R3                 CLEAR R3
         L     R1,=F'8'              MAX LEN OF FIELD
FPR1     EQU   *
         CR    R3,R1                 AT END OF MAX LENGTH?
         BE    FPR3
         CLI   0(R4),C' '            IS THIS A SPACE?
         BE    FPR3                   DONE -
         MVC   0(0,R5),0(R4)         MOVE A BYTE
         LA    R5,1(R5)              POINT TO NEXT POSIT - OUTPUT
         LA    R4,1(R4)              POINT TO NEXT POSIT - INPUT
         LA    R3,1(R3)              ADD 1 TO COUNTER
         B     FPR1                  GO BACK AND CHECK NEXT POSIT
FPR3     EQU   *
         STH   R3,CURLN              MOVE LENGTH TO PARMLIST
*  MOVE SIZE NO. INTO PARMLIST
DOSIZE   DS    0H
         MVC   SIZEEBC(L'SIZEEBC),=7C'0'  ZERO RESULTS FIELD
         LA    R5,SIZEEBC+L'SIZEEBC   POINT TO END OF OUTPUT FIELD
         LA    R3,IBSIZDAT+L'IBSIZDAT POINT TO END OF INPUT FIELD
         LA    R4,IBSIZDAT            POINIT TO START OF INPUT FIELD
DS1      EQU   *
         CR    R3,R4                  WE AT THE START OF FIELD?
         BL    DSX                     YES - END - GO COMPRESS
         CLI   0(R3),C' '             WE GOT A SPACE?
         BE    DS2                     YES - GO SKIP IT
         MVC   0(1,R5),0(R3)          MOVE A CHARACTER
         BCTR  R5,0                  POINT TO THE PREVIOUS POSITION
DS2      EQU   *
         BCTR  R3,0                  POINT TO THE PREVIOUS POSITION
         B     DS1                   GO CHECK PREVIOUS CHAR/POSIT
DSX      EQU   *
         PACK  SIZEPACK(L'SIZEPACK),SIZEEBC(L'SIZEEBC)
         CVB   R3,SIZEPACK           CONVERT TO BINARY (WHAT WE WANT)
         L     R9,REGION
         ST    R3,SIZEFLD            SAVE THE VALUE OF THE REGION
         L     R4,LSIZEFLD           SET THE LENGTH
         IC    R4,SIZEFLN               OF THE FIELD
         MVI   SIZEFLG,ON            SET SIZEFLAG TO ON
         MVC   0(L'SIZEFLD,R9),SIZEFLD MOVE SIZE INTO REGION - WORKS
*  MOVE RACF GROUP INTO PARMLIST
DORGRP   DS    0H
         CLI   RGRPFLG,OFF           IF RGRP NOT AVAILABLE THEN
         BE    DOPRFG                SKIP
         L     R9,GROUP              R9 = ADDRESS OF GROUP DES
         L     R5,DATAPTR            R5 = ADDRESS OF GROUP IN PARMLIST
         LA    R4,RGRPFLD            R4 = ADDRESS OF RETRIEVED GROUP
         XR    R3,R3                 CLEAR R3
         IC    R3,RGRPFLN            R3 = LENGTH OF RACF GROUP
         STH   R3,CURLN              MOVE LENGTH TO PARMLIST
         BCTR  R3,0                  DECREMENT LENGTH, FOR EX INSTR.
         EX    R3,MOVEWRDS           EXECUTE MOVEWRDS INSTRUCTION
*  SET DON'T PROMPT BIT TO ON
*  MOVE PERFORMANCE GROUP INTO PARMLIST
DOPRFG   DS    0H
         MVC   SIZEEBC(L'SIZEEBC),=7C'0'  ZERO RESULTS FIELD
         LA    R5,SIZEEBC+L'SIZEEBC   POINT TO END OF OUTPUT FIELD
         LA    R3,IBPERDAT+L'IBPERDAT POINT TO END OF INPUT FIELD
         LA    R4,IBPERDAT            POINIT TO START OF INPUT FIELD
DP1      EQU   *
         CR    R3,R4                  WE AT THE START OF FIELD?
         BL    DPX                     YES - END - GO COMPRESS
         CLI   0(R3),C' '             WE GOT A SPACE?
         BE    DP2                     YES - GO SKIP IT
         MVC   0(1,R5),0(R3)          MOVE A CHARACTER
         BCTR  R5,0                  POINT TO THE PREVIOUS POSITION
DP2      EQU   *
         BCTR  R3,0                  POINT TO THE PREVIOUS POSITION
         B     DP1                   GO CHECK PREVIOUS CHAR/POSIT
DPX      EQU   *
         PACK  SIZEPACK(L'SIZEPACK),SIZEEBC(L'SIZEEBC)
         CVB   R3,SIZEPACK           CONVERT TO BINARY (WHAT WE WANT)
         L     R9,PERFORM
*        ABEND 333,DUMP
         ST    R3,PERFORM            SAVE THE VALUE OF THE P.G.
*        L     R4,LSIZEFLD           SET THE LENGTH
*        IC    R4,SIZEFLN               OF THE FIELD
*        STH   R4,CURLN              MOVE STORAGE AMOUNT TO HOLD AREA
*        L     R15,LSIZEFLD          SET FIELD LENGTH
*        STC   R15,SIZEFLN           R9 = ADDRESS OF REGION
*        MVI   SIZEFLG,ON            SET SIZEFLAG TO ON
         MVC   0(L'SIZEFLD,R9),PERFORM MOVE P.G. INTO REGION - WORKS
SETBITS  DS    0H
*  SET NOTICES
         CLI   IBNNDAT,C'S'          NONOTICES SET?
         BE    SBNXT1                PROMPT FOR TSO LOGON SCREEN
         L     R9,CNTLSW             R9 = ADDRESS OF CNTLSW DES
         L     R5,DATAPTR            R5 = ADDRESS OF CNTL IN PARMLIST
         OI    2(R5),NOTICES         SET NOTICES BIT ON
SBNXT1   DS    0H
*  SET NOTICES
         CLI   IBNMDAT,C'S'          NOMAIL SET?
         BE    SBNXT2                PROMPT FOR TSO LOGON SCREEN
         L     R9,CNTLSW             R9 = ADDRESS OF CNTLSW DES
         L     R5,DATAPTR            R5 = ADDRESS OF CNTL IN PARMLIST
         OI    2(R5),MAIL            SET MAIL BIT ON
SBNXT2   DS    0H
*  SET RECONNECT
         CLI   IBRCDAT,C'S'          RECONNECT SET?
         BE    SBNXT3                PROMPT FOR TSO LOGON SCREEN
         L     R9,CNTLSW             R9 = ADDRESS OF CNTLSW DES
         L     R5,DATAPTR            R5 = ADDRESS OF CNTL IN PARMLIST
*        OI    1(R5),RECONECT        SET RECONNECT BIT ON
SBNXT3   DS    0H
*  SETS FOR PROMPT/NOPROMPT
         CLI   ACCTFLG,OFF           IF ACCOUNT ¬IN INPUT BUFFER THEN
         BE    PROMPT                PROMPT FOR TSO LOGON SCREEN
         CLI   PROCFLG,OFF           IF PROC ¬IN INPUT BUFFER THEN
         BE    PROMPT                PROMPT FOR TSO LOGON SCREEN
         CLI   SIZEFLG,OFF           IF SIZE ¬IN INPUT BUFFER THEN
         BE    PROMPT                PROMPT FOR TSO LOGON SCREEN
         L     R9,CNTLSW             R9 = ADDRESS OF CNTLSW DES
         L     R5,DATAPTR            R5 = ADDRESS OF CNTL IN PARMLIST
SKVUC1   OI    0(R5),DONTPRMP        SET DON'T PROMPT BIT ON
*        DROP  R10                   NOT REQUIRED ANY MORE
*        DROP  R9                    NOT REQUIRED ANY MORE
PROMPT   DS   0H
SKVUC2   OI    0(R5),DONTPRMP        SET DON'T PROMPT BIT ON - TMP?
         B    RETURN
MOVEWRDS MVC   0(0,R5),0(R4)         MOVE INSTR FROM EX
* EXIT ERROR PROCESSING SECTION                                       *
*  RESOURCE ENQ FAILE (OTHER THAN USERID)
*  SET DISCONNECT BIT ON; AND ISSUE MSG
ERRRSRC  DS    0H
         OI    0(R2),DISCON          R2 STILL POINTS TO CNTLSW
         MVC   MESSAGE(LIFFC03A),IFFC03A        MOVE MSG TO WORK
         MVC   MESSAGE+29(L'TSOUIDNM),TSOUIDNM  INSERT USERID
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         B     FREEWKST
*  MISSING LOGON/USERID/PSW; REG. 15 TELLS WHAT IS WRONG
ERRINBF1 DS    0H
         LR    R1,R15
         BAL   R8,CONVEBC          CONVERT REASON CODE TO EBCEDIC
         MVC   MESSAGE(LIFFC01I),IFFC01I        MOVE MSG TO WORK
         MVC   MESSAGE+29(L'TSOUIDNM),TSOUIDNM  INSERT USERID
         MVC   MESSAGE+82(LCONVFLD),CONVFLD     INSERT RET CODE
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         B     PREEXIT3
*        B     FREEWKST
*  MISSING OR INVALID ACCOUNT/PROC/SIZE; REG. 15 TELLS WHAT IS WRONG
ERRINBF2 DS    0H
         LR    R1,R15
         BAL   R8,CONVEBC          CONVERT REASON CODE TO EBCEDIC
         MVC   MESSAGE(LIFFC02I),IFFC02I        MOVE MSG TO WORK
         MVC   MESSAGE+29(L'TSOUIDNM),TSOUIDNM  INSERT USERID
         MVC   MESSAGE+82(LCONVFLD),CONVFLD     INSERT RET CODE
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         B     PREEXIT3
*        B     FREEWKST
* EXIT CLEAN UP SECTION:                                              *
RETURN   DS    0H                  FINISHED
FREEWKST DS    0H
*  TURN OFF TSO USER FULL SCREEN MODE                                 *
SQ       TPUT  CLEAR,10,FULLSCR    CLEAR THE SCREEN
*S?      STLINENO LINE=1
*S?      STFSMODE OFF
*S?      STTMPMD  OFF
*
*  DISPLAY WHAT WE GOT (USED FOR DIAGNOSTIC PURPOSES)
*
         B     TERM0               BYPASS TEMP MESSAGES
         MVC   MESSAGE(AWTOX),A1      MOVE MESSAGE
         MVC   MESSAGE+18(8),IBUIDDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A2      MOVE MESSAGE
         MVC   MESSAGE+18(8),IBPSWDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A3      MOVE MESSAGE
         MVC   MESSAGE+18(8),IBPRODAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A4      MOVE MESSAGE
         MVC   MESSAGE+18(8),IBACNDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A5      MOVE MESSAGE -SIZE
         MVC   MESSAGE+18(4),IBSIZDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A6      MOVE MESSAGE
         MVC   MESSAGE+18(2),IBPERDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A7      MOVE MESSAGE
         MVC   MESSAGE+18(8),IBCMDDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A8      MOVE MESSAGE
         MVC   MESSAGE+18(8),IBNP1DAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A9      MOVE MESSAGE
         MVC   MESSAGE+18(8),IBNP2DAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A10     MOVE MESSAGE
         MVC   MESSAGE+18(1),IBNMDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A11     MOVE MESSAGE
         MVC   MESSAGE+18(1),IBNNDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A12     MOVE MESSAGE
         MVC   MESSAGE+18(1),IBRCDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A13     MOVE MESSAGE
         MVC   MESSAGE+18(1),IBOIDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A14     MOVE MESSAGE
         MVC   MESSAGE+18(1),IBSYCDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A15     MOVE MESSAGE
         MVC   MESSAGE+18(4),IBSUSDAT
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         MVC   MESSAGE(AWTOX),A16     MOVE MESSAGE
         MVC   MESSAGE+18(1),ACCTFLG
         MVC   MESSAGE+19(1),PROCFLG
         MVC   MESSAGE+20(1),SIZEFLG
         MVC   MESSAGE+21(1),RGRPFLG
TERM0    EQU   *
         L     R9,CNTLSW             R9 = ADDRESS OF CNTLSW DES
         L     R5,DATAPTR            R5 = ADDRESS OF CNTL IN PARMLIST
         TM    0(R5),DONTPRMP
         BO    BTM1
         MVC   MESSAGE+22(1),=C'N'
         B     BTM2
BTM1     EQU   *
         MVC   MESSAGE+22(1),=C'Y'
BTM2     EQU   *
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         XR    R2,R2               SET RETURN CODE - RC = 0
         B     PREEXIT
PREEXIT3 DS    0H
*SKV     TPUT  CLEAR,10,FULLSCR    CLEAR THE SCREEN
         L     R9,CNTLSW           R9 = ADDRESS OF CNTLSW DES
         L     R2,DATAPTR          R2 = ADDRESS OF CNTLSW DES
         OI    0(R2),DISCON        SET IT TO CANCEL LOGON
*        L     R2,=F'16'           SET RETURN CODE - RC = 16
         B     PREEXIT
PREEXIT  DS    0H
* FREE MAIN WORKING STORAGE
         LR    R1,R13              ADDRESS OF WORKA IN R1
         L     R13,4(R13)          R13 POINT TO CALLER SAVE AREA
         FREEMAIN RU,LV=LWORKA,A=(1),SP=21  FREE STORAGE
* RETURN TO CALLER
         LM    R14,R12,12(R13)      LOAD R14 WITH RETURN ADDRESS
         SR    R15,R15             CLREAR REG 15 - DOESN'T MATTER
         BR    R14                 RETURN TO CALLER
*    INTERNAL ROUTINES                                                *
*   CONVEBC ROUTINE
*   CONVERT R1 CONTENTS INTO EBCEDIC
*    ENTRY :    CONVEBC
*    INPUT :    REGISTER 1 ( ONLY RIGHT HALF)
*               REGISTER 8  RETURN ADDRESS
*    OUTPUT:    CONVFLD
*    DESTROYES: REGISTER: 4,6,7
*    NOTE     : THIS ROUTINE DOES NOT USE CONVENTIONS
CONVEBC  DS    0H
         LA    R4,4                    LOOP COUNTER
         LR    R6,R1                   REASON OR RETURNCD INTO REG 6
RCERRLP  DS    0H
         SRDL  R6,4                    SHIFT R6 THRU R7
         SRL   R7,4                    SHIFT R7 APPEND 0 BEFORE DIGIT
         BCT   R4,RCERRLP              LOOP 4 TIMES
         ST    R7,CONVFLD              PREPARE FOR TR INSTR.
         TR    CONVFLD(LCONVFLD),CONVTAB   CONVERT TO EBCEDIC
*  RETURN TO CALLER
         BR    R8                          RETURN
*  TRANSLATE ROW/COL INTO 3270 LOCATION
XLATE    DS    0H
         L     R0,ROW
         L     R1,COL
         BCTR  R0,0
         BCTR  R1,0
         MH    R0,=H'80'
         AR    R1,R0
         SLL   R1,2
         STCM  R1,B'0010',SBACMD
         NC    SBACMD(2),=X'3F3F'
SBACMD   DC    XL2'0000'
ROW      DC    F'0'
COL      DC    F'0'
TBL3270  DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
*                        CONSTANT DEFINITIONS
         LTORG
LLOGONU  DC    A(7)      * WAS 15    LENGTH OF TEXT: LOGON UU
*                                    UUUU = FOUR DIGIT USERID AND
*                                    PPPP = FOUR DIGIT PASSWORD
TSONONM  DC    C'NONAME'             USERID ID UNKNOWN
LOGNTXT  DC    C'LOGON '             LOGON TEXT
ACCTTXT  DC    C'ACCT('              ACCT NUMBER KEYWORD
PROCTXT  DC    C'PROC('              LOGON PROC KEYWORD
SIZETXT  DC    C'SIZE('              REGION SIZE KEYWORD
RGRPTXT  DC    C'GROUP('             GROUP KEYWORD
LLOGNTXT DC    A(L'LOGNTXT)          LENGTH OF LOGON TEXT
LTSOUIDN DC    A(L'TSOUIDNM)         MAX LENGTH OF USERID
LRCFPSWN DC    A(L'RCFPSWNM)         MAX LENGTH OF PSW
LOPTION  DC    A(8)                  LENGTH OF SMALLEST OPTION +1
LACCTTXT DC    A(L'ACCTTXT)          LENGTH OF ACCT TEXT
LPROCTXT DC    A(L'PROCTXT)          LENGTH OF PROC TEXT
LSIZETXT DC    A(L'SIZETXT)          LENGTH OF SIZE TEXT
LRGRPTXT DC    A(L'RGRPTXT)          LENGTH OF GROUP TEXT
LACCTFLD DC    A(L'ACCTFLD)          LENGTH OF ACCOUNT NUMBER FIELD
LPROCFLD DC    A(L'PROCFLD)          LENGTH OF LOGON PROC FIELD
LSIZEFLD DC    A(L'SIZEFLD)          LENGTH OF HEXADECIMAL SIZE FIELD
LRGRPFLD DC    A(L'RGRPFLD)          LENGTH OF RACF GROUP NAME FIELD
LSIZEEBC DC    A(L'SIZEEBC)          LENGTH OF EBECEDIC SIZE FIELD
LPERFFLD DC    A(L'PERFFLD)          LENGTH OF PERFORMANCE GRP FIELD
CONVTAB  DC    C'0123456789ABCDEF'   HEX TO EBCEDIC CONVERSION TABLE
*   MESSAGE TEMPLATES
IFFC01I  WTO   'IFFC01I IKJEFLD, USERID: ??????? LOGON/USERID/PSW MISSIX
               NG OR INVALID REASON = ???? ',ROUTCDE=(11),MF=L
LIFFC01I EQU   *-IFFC01I
IFFC02I  WTO   'IFFC02I IKJEFLD, USERID: ??????? ACCNT/PROC/SIZE  MISSIX
               NG OR INVALID REASON = ???? ',ROUTCDE=(11),MF=L
LIFFC02I EQU   *-IFFC02I
IFFC03A  WTO   'IFFC03A IKJEFLD, USERID: ??????? RESOURCE ENQ FAILURE, X
               NOTIFY TDS',ROUTCDE=(1,9,11),MF=L
LIFFC03A EQU   *-IFFC03A
SPACES   DC    CL252' '
A1       WTO   'USERID:      >--------<  ',ROUTCDE=(11),MF=L
AWTOX    EQU   *-A1
A2       WTO   'PSWD:        >--------<  ',ROUTCDE=(11),MF=L
A3       WTO   'PROC:        >--------<  ',ROUTCDE=(11),MF=L
A4       WTO   'ACCT NMBR:   >--------<  ',ROUTCDE=(11),MF=L
A5       WTO   'SIZE:        >--------<  ',ROUTCDE=(11),MF=L
A6       WTO   'PERFORM:     >--------<  ',ROUTCDE=(11),MF=L
A7       WTO   'COMMAND:     >--------<  ',ROUTCDE=(11),MF=L
A8       WTO   'NEW PSWD 1:  >--------<  ',ROUTCDE=(11),MF=L
A9       WTO   'NEW PSWD 2:  >--------<  ',ROUTCDE=(11),MF=L
A10      WTO   'NM:          >--------<  ',ROUTCDE=(11),MF=L
A11      WTO   'NN:          >--------<  ',ROUTCDE=(11),MF=L
A12      WTO   'RC:          >--------<  ',ROUTCDE=(11),MF=L
A13      WTO   'OI:          >--------<  ',ROUTCDE=(11),MF=L
A14      WTO   'SYSOUT CL:   >--------<  ',ROUTCDE=(11),MF=L
A15      WTO   'SUBSYSTEM:   >--------<  ',ROUTCDE=(11),MF=L
A16      WTO   'SWITCHES:    >--------<  ',ROUTCDE=(11),MF=L
         TITLE 'IKJEFLD - TABLES                                      '
         SPACE
STRGTBL  DS    0C
ST1M     DC    CL4'1024'            1 MEG
ST2M     DC    CL4'2048'            2 MEG
ST3M     DC    CL4'3072'            3 MEG
ST4M     DC    CL4'4096'            4 MEG
ST5M     DC    CL4'5120'            5 MEG
ST6M     DC    CL4'6144'            6 MEG
ST7M     DC    CL4'7168'            7 MEG
ST8M     DC    CL4'8192'            8 MEG
ST9M     DC    CL4'9216'            9 MEG
STEND    DC    CL4'****'            END OF TABLE
         TITLE 'IKJEFLD - 3270 SCREEN DEFINITIONS                     '
         SPACE
*   3270 DATASTREAM TO CLEAR THE SCREEN
         SPACE 3
CLEAR    DC    X'27'          ECC
         DC    X'F5'          ERASE/WRITE
         DC    X'C1'          WCC
         DC    X'115D7F'      SET BUFFER ADDRESS L24C80
         DC    X'3C5D7F00'    RA L24C80,X'00'
CLEARX   EQU   *-CLEAR       LENGTH OF CLEAR STREAM
         SPACE
*   3270 DATASTREAM TO HAVE TSO USER BE PROMPTED AND GET USER INPUT
         SPACE 3
STREAM   DS    0C
         DC    X'27'          ECC
         DC    X'F5'          ERASE/WRITE
         DC    X'C3'          WCC
         DC    X'1140C6'      SET BUFFER ADDRESS L01C07
         DC    X'1DF8'        SF (PROT, HIGH INTENS)
         DC    C'-----------------  '
SIDL     EQU   *-STREAM
SID      DC    CL4'XXXX'
         DC    C' TSO LOGON MANAGER (V0.5)'
         DC    C'  -----------------'
         DC    X'11C2E4'      SET BUFFER ADDRESS L03C05
         DC    X'1DF8'        SF (PROT, HIGH INTENS)
         DC    C'ENTER LOGON PARAMETERS BELOW:'
OUID     DC    X'11C5C4'      SET BUFFER ADDRESS L05C05
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'USERID    ==>' LABEL
IUIDP    EQU   0519
IUIDP1   $FSSBA 0519
*UIDLOC  DC    X'11C5D2'      SET BUFFER ADDRESS L05C19
         DC    X'1DC1'        SF (UNPROT, ALPHA, NORM INTENS,LPD, MDT)
IUIDL    EQU   *-STREAM
IUID     DC    8XL1'40'       INPUT AREA
         DC    X'11C55B'      SET BUFFER ADDRESS L05C28
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
OPW      DC    X'11C7E4'      SET BUFFER ADDRESS L07C05
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'PASSWORD  ==>'
IPWLOC   DC    X'11C7F2'      SET BUFFER ADDRESS L07C19
         DC    X'1DCD'        SF (UNPROT, ALPHA, NON DISPL,LPD, MDT)
IPWL     EQU   *-STREAM
IPW      DC    8XL1'40'       INPUT AREA
         DC    X'11C77B'      SET BUFFER ADDRESS L07C28
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
OPROC    DC    X'114AC4'      SET BUFFER ADDRESS L09C05
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'PROCEDURE ==>'
IPROCLOC DC    X'114AD2'      SET BUFFER ADDRESS L09C19
         DC    X'1DC1'        SF (UNPROT, ALPHA, NORM INTENS,LPD, MDT)
IPROCL   EQU   *-STREAM
IPROC    DC    8XL1'40'       INPUT AREA
         DC    X'114A5B'      SET BUFFER ADDRESS L09C28
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
OACN     DC    X'114CE4'      SET BUFFER ADDRESS L11C05
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'ACCT NMBR ==>'
IACNLOC  DC    X'114CF2'      SET BUFFER ADDRESS L11C19
         DC    X'1DC1'        SF (UNPROT, NUM, NORM INTENS,LPD, MDT)
IACNL    EQU   *-STREAM
IACN     DC    8XL1'40'       INPUT AREA
         DC    X'114C7B'      SET BUFFER ADDRESS L11C28
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
OSIZ     DC    X'114FC4'      SET BUFFER ADDRESS L13C05
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'SIZE      ==>'
ISIZLOC  DC    X'114FD2'      SET BUFFER ADDRESS L13C19
         DC    X'1DC1'        SF (UNPROT, NUM, NORM INTENS,LPD, MDT)
ISIZL    EQU   *-STREAM
ISIZ     DC    4XL1'40'       INPUT AREA
         DC    X'114FD7'      SET BUFFER ADDRESS L13C24
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
OPREF    DC    X'11D1E4'      SET BUFFER ADDRESS L15C05
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'PERFORM   ==>'
IPERFLOC DC    X'11D1F2'      SET BUFFER ADDRESS L15C19
         DC    X'1DC1'        SF (UNPROT, NUM, NORM INTENS,LPD, MDT)
IPERFL   EQU   *-STREAM
IPERF    DC    2XL1'40'       INPUT AREA
         DC    X'11D1F5'      SET BUFFER ADDRESS L15C22
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
OCMD     DC    X'11D4C4'      SET BUFFER ADDRESS L17C05
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'COMMAND   ==>'
ICMDLOC  DC    X'11D4D2'      SET BUFFER ADDRESS L17C19
         DC    X'1DC1'        SF (UNPROT, ALPHA, NORM INTENS,LPD, MDT)
ICMDL    EQU   *-STREAM
ICMD     DC    8XL1'40'       INPUT AREA
         DC    X'11D45B'      SET BUFFER ADDRESS L17C28
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
         DC    X'11C34E'      SET BUFFER ADDRESS L03C47
         DC    X'1DF8'        SF (PROT, HIGH INTENS)
         DC    C'ENTER NEW PASSWORDS BELOW:'
*
ONPW1    DC    X'11C84E'      SET BUFFER ADDRESS L07C47
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'NEW PASSWORD 1 ==>'
INPW1LOC DC    X'11C861'      SET BUFFER ADDRESS L07C66
         DC    X'1DCD'        SF (UNPROT, ALPHA, NON DISPL,LPD, MDT)
INPW1L   EQU   *-STREAM
INPW1    DC    8XL1'40'       INPUT AREA
         DC    X'11C86A'      SET BUFFER ADDRESS L07C75
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
ONPW2    DC    X'114A6E'      SET BUFFER ADDRESS L09C47
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'NEW PASSWORD 2 ==>'
INPW2LOC DC    X'114BC1'      SET BUFFER ADDRESS L09C66
         DC    X'1DCD'        SF (UNPROT, ALPHA, NON DISPL,LPD, MDT)
INPW2L   EQU   *-STREAM
INPW2    DC    8XL1'40'       INPUT AREA
         DC    X'114B4A'      SET BUFFER ADDRESS L09C75
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
OSYO     DC    X'114F6E'      SET BUFFER ADDRESS L13C47
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'SYSOUT CLASS   ==>'
ISYOLOC  DC    X'1150C1'      SET BUFFER ADDRESS L13C66
         DC    X'1DC1'        SF (UNPROT, ALPHA, NORM INTENS,LPD, MDT)
ISYOL    EQU   *-STREAM
ISYO     DC    1XL1'40'       INPUT AREA
         DC    X'1150C3'      SET BUFFER ADDRESS L13C68
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
OSUS     DC    X'11D24E'      SET BUFFER ADDRESS L15C47
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'SUBSYSTEM      ==>'
ISUSLOC  DC    X'11D261'      SET BUFFER ADDRESS L15C66
         DC    X'1DC1'        SF (UNPROT, ALPHA, NORM INTENS,LPD, MDT)
ISUSL    EQU   *-STREAM
ISUS     DC    4XL1'40'       INPUT AREA
         DC    X'11D2E6'      SET BUFFER ADDRESS L15C71
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'<'           INPUT AREA
*
         DC    X'11D6F0'      SET BUFFER ADDRESS L19C17
         DC    X'1DF8'        SF (PROT, HIGH INTENS)
         DC    C'ENTER AN "S" BEFORE EACH OPTION DESIRED BELOW:'
*
IPTNMLOC DC    X'11D77A'      SET BUFFER ADDRESS L20C11
         DC    X'1DC1'        SF (UNPROT, ALPHA, NORM INTENS,LPD, MDT)
IPTNML   EQU   *-STREAM
IPTNM    DC    1XL1'40'
OPTNM    DC    X'11D77C'      SET BUFFER ADDRESS L20C13
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'-NOMAIL'
IPTNNLOC DC    X'11D8C8'      SET BUFFER ADDRESS L20C25
         DC    X'1DC1'        SF (UNPROT, ALPHA, NORM INTENS,LPD, MDT)
IPTNNL   EQU   *-STREAM
IPTNN    DC    1XL1'40'
OPTNN    DC    X'11D84A'      SET BUFFER ADDRESS L20C27
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'-NONOTICE'
IPTRCLOC DC    X'11D8D8'      SET BUFFER ADDRESS L20C41
         DC    X'1DC1'        SF (UNPROT, ALPHA, NORM INTENS,LPD, MDT)
IPTRCL   EQU   *-STREAM
IPTRC    DC    1XL1'40'
OPTRC    DC    X'11D85A'      SET BUFFER ADDRESS L20C43
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'-RECONNECT'
IPTOILOC DC    X'11D8E9'      SET BUFFER ADDRESS L20C58
         DC    X'1DC1'        SF (UNPROT, ALPHA, NORM INTENS,LPD, MDT)
IPTOIL   EQU   *-STREAM
IPTOI    DC    1XL1'40'
OPTOI    DC    X'11D86B'      SET BUFFER ADDRESS L20C60
         DC    X'1DF0'        SF (PROT, NORM INTENS, SKIP)
         DC    C'-OIDCARD'
*
         DC    X'115AD2'      SET BUFFER ADDRESS L22C03
         DC    X'1DF8'        SF (PROT, HIGH INTENS)
         DC    C'PF1/PF13 ==> HELP  PF3/PF15 ==> LOGOFF'
         DC    C'  PA1 ==> ATTENTION   PA2 ==> RESHOW'
*
         DC    X'115B60'      SET BUFFER ADDRESS L23C01
         DC    X'1DF8'        SF (PROT, HIGH INTENS)
         DC    C'YOU MAY REQUEST SPECIFIC HELP INFORMATION BY'
         DC    C' ENTERING A "?" IN ANY ENTRY FIELD.'
*
MSG      DC    X'115C7B'      SET BUFFER ADDRESS L24C12
         DC    X'1DF8'        SF (PROT, HIGH INTENS)
MSGTXTL  EQU   *-STREAM
MSGTXT   DC    CL60' '
*        DC    X'115CE5'      SET BUFFER ADDRESS L23C70
*        DC    X'1DF8'        SF (PROT, HIGH INTENS)
*        DC    C' '          SKIP TO NEXT FIELD
ICTXTL   EQU   *-STREAM
ICOLOC   $FSSBA 0720
         DC    X'13'          IC
STREAMX  EQU   *-STREAM      LENGTH OF USER STREAM
STREAM1  DS    0C
         DC    X'27'          ECC
         DC    X'F1'          WRITE BUFFER W/O ERASE
         DC    X'C3'          WCC
ICLOCL   EQU   *-STREAM1
ICLOCC   DC    X'11C7F2'      SET BUFFER ADDRESS L07C19
*        DC    X'1DF8'        SF (PROT, HIGH INTENS)
         DC    X'13'          IC
STREAM1X EQU   *-STREAM1
PARMLEN  EQU   *-CLEAR
         TITLE 'IKJEFLD - MAPPING DSECT   DEFINITIONS'
*   DSECT DESCRIBING THE PARAMETERS PASSED FROM THE
*   LOGON PROCESSOR I.E. PARMLIST MAPPING
PARMLIST DSECT
CNTLSW   DS    F       PTR TO CONTROL SWITCH DESCRIPTOR
INBUF    DS    F       PTR TO INPUT BUFFER DESCRIPTOR
USERID   DS    F       PTR TO USER-ID DESCRIPTOR
PASSW    DS    F       PTR TO PASSWORD DESCRIPTOR
ACCT     DS    F       PTR TO ACCOUNT DISCRIPTOR
PROC     DS    F       PTR TO PROCEDURE DESCRIPTOR
REGION   DS    F       PTR TO REGION-SIZE AREA
JCL      DS    F       PTR TO JCL DESCRIPTOR
NPASSW   DS    F       PTR TO NEW PASSWORD DESCRIPTOR
SYSATTR  DS    F       PTR TO SYSTEM ATTRIBUTES DESCRIPTOR
USERATTR DS    F       PTR TO INSTALLATION ATTRIBUTES DESCRIPTOR
UNIT     DS    F       PTR TO UNIT DESCRIPTOR
UPT      DS    F       PTR TO UPT DESCRIPTOR
ECT      DS    F       PTR TO ECT
CECB     DS    F       PTR TO CECB
LSCC     DS    F       PTR TO LSCC
PERFORM  DS    F       PTR TO PERFORMANCE GROUP
DEST     DS    F       PTR TO DESTINATION DESCRIPTOR
GROUP    DS    F       PTR TO RACF-GROUP DESCRIPTOR
*   MAP OF PARMLIST DESCRIPTOR-BLOCK
PARMLDES DSECT
DATAPTR  DS    F       PTR TO DATA-AREA
MAXLN    DS    H       MAXIMUM LENGTH OF DATA-AREA
CURLN    DS    H       CURRENT LENGTH OF DATA-AREA
*               GETMAINED DSECT  DEFINITIONS                          *
WORKA    DSECT
SAVEAREA DS    18F     SAVE AREA
PLSTPTR  DS    F       INPUT PARMLIST ADDRESS
CONVFLD  DS    4X      WORK FIELD: HEX TO EBCEDIC CONV.
LCONVFLD EQU   *-CONVFLD
TSOUID   DS    0F
TSOUIDLN DS    AL1     MUST CONTAIN ACTUAL LENGTH
TSOUIDNM DS    CL8     ACTUAL USERID NAME
RCFPSW   DS    0F      PASSWORD
RCFPSWLN DS    AL1     PASSWORD LENGTH
RCFPSWNM DS    CL8     PASSWORD ITSELF
ACCTF    DS    0F
ACCTFLN  DS    AL1     WILL CONTAIN ACTUAL LENGTH
ACCTFLD  DS    CL40    ACCOUNT DESTINATION FIELD
PROCF    DS    0F
PROCFLN  DS    AL1     WILL CONTAIN ACTUAL LENGTH
PROCFLD  DS    CL8     PROC    DESTINATION FIELD
SIZEF    DS    0F
SIZEALGN DS    AL3     FOR ALINGMENT
SIZEFLN  DS    AL1     WILL CONTAIN ACTUAL LENGTH
SIZEFLD  DS    F       SIZE    DESTINATION FIELD
RGRPF    DS    0F
RGRPFLN  DS    AL1     WILL CONTAIN ACTUAL LENGTH
RGRPFLD  DS    CL8     RACFGROUP DESTINATION FIELD
PERFF    DS    0F
PERFFLN  DS    AL1     WILL CONTAIN ACTUAL LENGTH
PERFFLD  DS    CL8     PERFORMANC GROUP FIELD
ACCTFLG  DS    C       ACCOUNT FLAG ON ==> ACCOUNT # AVAILABLE IN INBUF
PROCFLG  DS    C       PROC FLAG    ON ==> LOGONPROC AVAILABLE IN INBUF
SIZEFLG  DS    C       SIZE FLAG    ON ==> SIZE AVAILABLE IN INBUF
RGRPFLG  DS    C       RGRP FLAG    ON ==> RGRP AVAILABLE IN INBUF
SIZEEBC  DS    CL7     MAXIMUM EBCEDIC SIZE FIELD
SIZEPACK DS    D       PACKED FORMAT OF SIZE
CURPOS   DS    A(0)                CURSOR POSITION
MESSAGE  DS    CL100   WTO MESSAGE AREA
INBUFF   DS    0XL300
IBAID    DS    CL1                 AID
IBCURLOC DS    CL2                 CURSOR LOCATION AT AID
         DS    CL1                 X11
IBUIDLOC DS    CL2                 UID LOCATION
IBUIDDAT DS    CL8                 UID INFORMATION
         DS    CL1                 X11
IBPSWLOC DS    CL2                 PSWD LOCATION
IBPSWDAT DS    CL8                 PSWD INFORMATION
         DS    CL1                 X11
IBNP1LOC DS    CL2                 NEW PASSWORD 1 LOCATION
IBNP1DAT DS    CL8                 NEW PASSWORD 1 INFORMATION
         DS    CL1                 X11
IBPROLOC DS    CL2                 PROC LOCATION
IBPRODAT DS    CL8                 PROC INFORMATION
         DS    CL1                 X11
IBNP2LOC DS    CL2                 NEW PASSWORD 2 LOCATION
IBNP2DAT DS    CL8                 NEW PASSWORD 2 INFORMATION
         DS    CL1                 X11
IBACNLOC DS    CL2                 SIZE LOCATION
IBACNDAT DS    CL8                 SIZE INFORMATION
         DS    CL1                 X11
IBSIZLOC DS    CL2                 SIZE LOCATION
IBSIZDAT DS    CL4                 SIZE INFORMATION
         DS    CL1                 X11
IBSYCLOC DS    CL2                 SYSOUT CLASS LOCATION
IBSYCDAT DS    CL1                 SYSOUT CLASS INFORMATION
         DS    CL1                 X11
IBPERLOC DS    CL2                 PERFOM LOCATION
IBPERDAT DS    CL2                 PERFORM INFORMATION
         DS    CL1                 X11
IBSUSLOC DS    CL2                 SUBSYSTEM NAME LOCATION
IBSUSDAT DS    CL4                 SUBSYSTEM NAME INFORMATION
         DS    CL1                 X11
IBCMDLOC DS    CL2                 COMMAND LOCATION
IBCMDDAT DS    CL8                 COMMAND INFORMATION
         DS    CL1                 X11
IBNMLOC  DS    CL2                 NOMAIL LOCATION
IBNMDAT  DS    CL1                 NOMAIL INFORMATION
         DS    CL1                 X11
IBNNLOC  DS    CL2                 NONOTICE LOCATION
IBNNDAT  DS    CL1                 NONOTICE INFORMATION
         DS    CL1                 X11
IBRCLOC  DS    CL2                 RECONNECT LOCATION
IBRCDAT  DS    CL1                 RECONNECT INFORMATION
         DS    CL1                 X11
IBOILOC  DS    CL2                 OIDCARD LOCATION
IBOIDAT  DS    CL1                 OIDCARD INFORMATION
         DS    CL20                FILLER
INBUFFX  EQU   *-INBUFF
USTR0    DS    1CL1
USTR     DS    254CL1
         DS    254CL1
         DS    254CL1
         DS    254CL1
         DS    254CL1
USTR1    DS    07CL1
USTR1X   EQU   *-USTR1
LWORKA   EQU   *-WORKA LENGTH OF GETMAINED AREA
         END
/*
//SMPCNTL  DD *
  RECEIVE S(TSM0022) .
/*
//APP    EXEC SMP,RVOL=MVSRES
//SMPCNTL  DD *
  APPLY S(TSM0022)
       ASSEM
       CHECK .
  APPLY S(TSM0022)
       ASSEM .
/*
