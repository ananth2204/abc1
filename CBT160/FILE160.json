{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011351000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1881152, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 20, "INMDSNAM": "CBT.V500.FILE160.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1881152, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1881152, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE160.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00 \\x02'", "DS1TRBAL": "b'\\xd6\\\\'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x18\\x00\\x08\\x01\\x1a\\x00\\n\\x00!'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00\\x03\\x01\\x18\\x04O\\x01\\x18\\x04O\\x14\\x03\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-02-13T00:00:00", "modifydate": "2018-02-13T14:03:03", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-496"}, "text": "REGULAR CBT TAPE - VERSION 496    FILE:  160\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT496.FILE160\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 86 MEMBERS COUNTED; CUMULATIVE SIZE IS 17,350 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/13/18    14:03:03    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x00\\x850_\\x00\\x850_\\x13U\\x00g\\x00g\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:03", "lines": 103, "newlines": 103, "modlines": 0, "user": "HOFFMAN"}, "text": "\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\n--------------------------------------------------------------------------------\n\nThis dataset contains a collection of TSO command processors and\nmacros created by Chuck Hoffman.  The following command\nprocessors are contained in this dataset:\n\n   BULLETIN - A command for putting up nicely formatted bulletin\n              messages into the system broadcast dataset.  The\n              command has the ability to add and drop bulletin\n              messages on selected dates.\n\n\n   DSNCHECK - A command to check for the existence of a cataloged\n              dataset name, and, optionally, to check for the\n              existence of a member within a PDS.  Sets &LASTCC\n              for CLIST writers.\n\n   FREEALL  - A completely new FREEALL, with lots of nice\n              options, like the EXCEPT operand.  Uses SVC-99, and\n              can be maintained by more junior systems\n              programmers.  Compatible with J/TIP.\n\n   INSTREAM - The INSTREAM command is used to create 80-byte\n              control card images in a temporary file.  This\n              command can be run under CLIST control, with\n              symbolic substitution of variables allowed.\n              INSTREAM uses VIO instead of datasets, and uses\n              system generated names instead of cataloging.\n\n   ISPFPROF - This is an alias of the PDF command processor (see\n              description, below).  When using this alias, the\n              profile dataset will be allocated, but the program\n              will not enter ISPF/PDF.\n\n   LIBCALL  - LIBCALL transfers control to modules with a 'CALL'\n              type of parameter list, with a 'STEPLIB' option.\n              LIBCALL also can accept program parameters in lower\n              case.\n\n   NEWSPACE - A command for easily creating new, moderately\n              sized, datasets and libraries.  It was written with\n              beginners in mind.  Can be executed from the\n              ISPF/PDF command line (for allocating that dataset\n              you suddenly need).\n\n   PDF      - The PDF Command is used to preallocate the ISPF\n              profile dataset, then bring the user into ISPF/PDF.\n              PDF is a frontend which uses the ISRPCP entrypoint\n              of ISPF/PDF, enabling the user to select optional\n              panel numbers when invoking the product.\n\n   SAFECOPY - This program is a copy command which enables\n              several users to update the same dataset\n              simultaneously, without conflicting with each other\n              or with users who are reading the dataset.\n              SAFECOPY is especially useful in CLISTs which write\n              to a common dataset.\n\n   SYSDSN   - A command to list the names of everyone who has a\n              dataset allocated, or is waiting for allocation.\n              Very useful after 'DATASET IN USE' and 'WAITING FOR\n              DATASETS' messages.\n\n   XPRINT   - A front-end command processor for a user-written\n              hexidecimal listing utility program.  Allocates the\n              input and output files, then executes the utility.\n              Loads the utility if it is not already linked in.\n\n\nAdditionally, this PDS contains the following macros used by\nseveral of the command processors:\n\n   EQ$R     - Register equates.\n   GTEDAALC - Executes dynamic allocation and DAIRFAIL.\n   GTEDADAT - Creates SVC99/IKJEFF18 control blocks.\n   GTEDADOC - Documentation for GTEDAxxx macros.\n   GTEDASET - Links SVC99/IKJEFF18 control blocks together.\n   LINKSAVE - Linkage conventions upon entry to a module.\n   LINKBACK - Linkage conventions upon exit from a module.\n\nFor each command processor 'AAAAAAA', with alias 'BB' the\nfollowing pattern of names is in use:\n\n   BBDOC    - Documentation for that command processor.\n   BBJCL    - JCL for non-SMP install.\n   #AAAAAAA - HELP entry for that command processor.\n              (Last letter will be truncated for 8-byte names.)\n   #BB      - Alias for HELP entry, used in non-SMP install.\n   BBCPY    - IEBCOPY control cards used in non-SMP install.\n   BBLNK    - LKED control cards used in non-SMP install.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#BULLETI": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x00\\x850_\\x00\\x850_\\x13U\\x00d\\x00d\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:03", "lines": 100, "newlines": 100, "modlines": 0, "user": "HOFFMAN"}, "text": "* CAH0  REVIEWER=      11/13/85    BULLETIN CATEGORY=SYSTEMS\n*\n)F FUNCTION -\n    The BULLETIN command is used for maintenance of the bulletin\n    messages in the broadcast dataset.\n\n)X SYNTAX -\n    BULLETIN   CLEAR(nn)  BROADCAST(dsn)\n               NOCLEAR    NOBROADCAST\n\n    ALIASES  - none\n\n    DEFAULTS - NOCLEAR, NOBROADCAST\n             - If CLEAR is used:  CLEAR(30)\n             - If BROADCAST is used:  BROADCAST('SYS1.BULLETIN.DATA')\n    REQUIRED - none\n\n)O OPERANDS -\n\n))CLEAR(nn)\n    The maximum number of messages to clear from the broadcast\n    dataset.  DEFAULT:  CLEAR(30)\n\n))NOCLEAR\n    Messages will not be cleared from the broadcast dataset.\n\n))BROADCAST(dsn)\n    Messages will be added to the broadcast dataset using 'dsn'\n    as input.  DEFAULT:  BROADCAST('SYS1.BULLETIN.DATA')\n\n))NOBROADCAST\n    Messages will not be added to the broadcast dataset.\n\n))EXAMPLES\n    1.  To add an item temporarily to the bottom of the bulletin\n        board, from your own MYLIB.DATA(MEMO1):\n\n            BULLETIN B(MYLIB.DATA(MEMO1))\n\n    3.  To clear up to 15 lines from the broadcast dataset:\n\n            BULLETIN C(15)\n\n    4.  To clear up to 30 lines from the broadcast dataset, and\n        to recreate the bulletins from the system bulletin dataset:\n\n            BULLETIN C B\n\n)S SUBCOMMANDS -\n    The BULLETIN command has no subcommands.\n)M\n))BUL0001I text\n\n    This is the first 71 characters of text processed by the\n    BULLETIN command.  Apostrophes will be expanded to double\n    apostrophes.\n\n))BUL0002I CLEAR operation complete.\n\n    A number of messages have been cleared from the broadcast\n    dataset through use of the CLEAR operand of the command.\n\n))BUL0003E OPERATOR authority is required for CLEAR or BROADCAST.\n\n    The CLEAR or BROADCAST operation was not performed because the\n    you did not have OPERATOR authority.  Contact your computer\n    security administrator.\n\n))BUL0004E Input file must have 80-byte, fixed length records.\n\n    The BROADCAST operation was not performed because the input\n    dataset was in a format which BULLETIN could not process.\n    Copy the text to a dataset with fixed length, 80-byte records\n    and try again.\n\n))BUL0005C Unable to process date: xxxxxxxx.  Current date assumed.\n\n    A date field on a '-dates' input card image was not in the\n    format of MM/DD/YY.  BULLETIN assumed the current date for\n    both the start and stop dates.  Check for two-digit MM, DD,\n    and YY.  Check for MM less than 13, and DD less than 32.\n    Also check for a slash (/) in the third and sixth positions,\n    and check for the correct starting position of the date on\n    the card image.  (E.g., '-dates 07/04/76 07/05/76')\n\n))BUL0006E Line ignored.  Too many apostrophes (46, max).\n\n    BULLETIN must change apostrophes in your input into double\n    apostrophes before passing the text along to MVS.  When more\n    than 46 apostrophes are used, the total line length is longer\n    than the operating system can accept, so the text line cannot\n    be placed into the broadcast dataset.  Revise the text and\n    try again.\n\n))BUL0007C CLEAR function ignored.  Quantity less than 1.\n\n    CLEAR(n) was used, and the value of 'n' was less than 1.\n    Note that if you want to prevent clearing message lines, you\n    should use NOCLEAR (which is the default) instead of\n    CLEAR(0).\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#DSNC": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x00\\x850_\\x00\\x850_\\x13U\\x00[\\x00[\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:03", "lines": 91, "newlines": 91, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n  DSNCHECK is a command which checks the system catalogs for the\n  existence of a dataset name or alias.  If a library (PDS) member\n  name is specified with the dataset name, DSNCHECK will check for the\n  existence of the named member.\n\n)X Syntax\n\n     DSNCHECK  dsname  LIST    VOLCHECK\n     DSNC              NOLIST  NOVOLCHECK\n\n\n  Required - none, you will be prompted for dsname\n  Defaults - LIST, VOLCHECK\n  Alias    - DSNC\n\n  Return codes:  0 - successful in locating catalog entry, (and,\n                     optionally, member name).\n                12 - unsuccessful.\n\n)O OPERANDS -\n\n))dsname - The dataset name you are checking the catalog for.  If the\n             name is enclosed in single quotes ('), it will be used as\n             is.  If it is not enclosed in single quotes, your TSO\n             prefix will be added to the beginning of the name.  If\n             you want to check a library (PDS) for a particular member\n             name, include the member name within parentheses at the\n             end of the library name.\n             Examples:\n                  library (dataset) name: 'ABC.YOURLIB.TEXT'\n                 library and member name: 'ABC.YOURLIB.TEXT(LETTER)'\n\n))LIST - Causes DSNCHECK to write a message on the terminal screen\n             saying whether or not the dataset was cataloged.  NOTE -\n             LIST is the default.\n\n))NOLIST - Supresses writing a message to the screen concerning\n             whether or not the dataset was cataloged.  This is useful\n             in CLISTs.\n\n))VOLCHECK - Causes DSNCHECK to physically check the volume table of\n             contents for the dataset, instead of just reporting on\n             the existence of a catalog entry.\n             Note: - With VOLCHECK, DSNCHECK requires more resources\n                     and takes longer to run.  If your catalog entries\n                     normally are correct, NOVOLCHECK should be used\n                     instead.  Also, if you are using DSNCHECK to check\n                     for names of tape datasets, NOVOLCHECK must be\n                     used instead.\n             Note: - The use of a member name with the dataset name\n                     implies VOLCHECK.\n\n))NOVOLCHECK - Causes DSNCHECK to bypass physically checking the\n             volume table of contents for the dataset.\n             Note: - The use of NOVOLCHECK requires fewer resources\n                     and runs faster than the use of VOLCHECK.\n             Note: - NOVOLCHECK must be used when using DSNCHECK for\n                     tape datasets.\n             Note: - If a member name is used with the dataset name,\n                     NOVOLCHECK will be ignored.\n\n))EXAMPLES -\n             1.  Find out whether 'MASSTAX' is a member of\n                 your own dataset called LIB.LOAD:\n                       DSNCHECK  LIB.LOAD(MASSTAX)\n\n             2.  Find out whether a catalog entry exists for\n                 a dataset named: 'ABC1234.STARTUP.CLIST'\n                       DSNCHECK  'ABC1234.STARTUP.CLIST'\n\n             3.  Write a CLIST to execute a program named 'ACCTREPT'\n                 if it exists in either library 'ABC.PROD.LOAD' or\n                 'XYZ.TEST.LOAD':\n\n                     PROC 0\n                       DSNCHECK 'ABC.PROD.LOAD(ACCTREPT)' NOLIST\n                       IF &LASTCC EQ 0 THEN +\n                         DO\n                           CALL 'ABC.PROD.LOAD(ACCTREPT)'\n                           GOTO ENDING\n                         END\n                       DSNCHECK 'XYZ.TEST.LOAD(ACCTREPT)' NOLIST\n                       IF &LASTCC EQ 0 THEN +\n                         DO\n                           CALL 'XYZ.TEST.LOAD(ACCTREPT)'\n                           GOTO ENDING\n                         END\n                     ENDING: +\n                       EXIT CODE(&MAXCC)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#DSNCHEC": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x00\\x850_\\x00\\x850_\\x13U\\x00[\\x00[\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:03", "lines": 91, "newlines": 91, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n  DSNCHECK is a command which checks the system catalogs for the\n  existence of a dataset name or alias.  If a library (PDS) member\n  name is specified with the dataset name, DSNCHECK will check for the\n  existence of the named member.\n\n)X Syntax\n\n     DSNCHECK  dsname  LIST    VOLCHECK\n     DSNC              NOLIST  NOVOLCHECK\n\n\n  Required - none, you will be prompted for dsname\n  Defaults - LIST, VOLCHECK\n  Alias    - DSNC\n\n  Return codes:  0 - successful in locating catalog entry, (and,\n                     optionally, member name).\n                12 - unsuccessful.\n\n)O OPERANDS -\n\n))dsname - The dataset name you are checking the catalog for.  If the\n             name is enclosed in single quotes ('), it will be used as\n             is.  If it is not enclosed in single quotes, your TSO\n             prefix will be added to the beginning of the name.  If\n             you want to check a library (PDS) for a particular member\n             name, include the member name within parentheses at the\n             end of the library name.\n             Examples:\n                  library (dataset) name: 'ABC.YOURLIB.TEXT'\n                 library and member name: 'ABC.YOURLIB.TEXT(LETTER)'\n\n))LIST - Causes DSNCHECK to write a message on the terminal screen\n             saying whether or not the dataset was cataloged.  NOTE -\n             LIST is the default.\n\n))NOLIST - Supresses writing a message to the screen concerning\n             whether or not the dataset was cataloged.  This is useful\n             in CLISTs.\n\n))VOLCHECK - Causes DSNCHECK to physically check the volume table of\n             contents for the dataset, instead of just reporting on\n             the existence of a catalog entry.\n             Note: - With VOLCHECK, DSNCHECK requires more resources\n                     and takes longer to run.  If your catalog entries\n                     normally are correct, NOVOLCHECK should be used\n                     instead.  Also, if you are using DSNCHECK to check\n                     for names of tape datasets, NOVOLCHECK must be\n                     used instead.\n             Note: - The use of a member name with the dataset name\n                     implies VOLCHECK.\n\n))NOVOLCHECK - Causes DSNCHECK to bypass physically checking the\n             volume table of contents for the dataset.\n             Note: - The use of NOVOLCHECK requires fewer resources\n                     and runs faster than the use of VOLCHECK.\n             Note: - NOVOLCHECK must be used when using DSNCHECK for\n                     tape datasets.\n             Note: - If a member name is used with the dataset name,\n                     NOVOLCHECK will be ignored.\n\n))EXAMPLES -\n             1.  Find out whether 'MASSTAX' is a member of\n                 your own dataset called LIB.LOAD:\n                       DSNCHECK  LIB.LOAD(MASSTAX)\n\n             2.  Find out whether a catalog entry exists for\n                 a dataset named: 'ABC1234.STARTUP.CLIST'\n                       DSNCHECK  'ABC1234.STARTUP.CLIST'\n\n             3.  Write a CLIST to execute a program named 'ACCTREPT'\n                 if it exists in either library 'ABC.PROD.LOAD' or\n                 'XYZ.TEST.LOAD':\n\n                     PROC 0\n                       DSNCHECK 'ABC.PROD.LOAD(ACCTREPT)' NOLIST\n                       IF &LASTCC EQ 0 THEN +\n                         DO\n                           CALL 'ABC.PROD.LOAD(ACCTREPT)'\n                           GOTO ENDING\n                         END\n                       DSNCHECK 'XYZ.TEST.LOAD(ACCTREPT)' NOLIST\n                       IF &LASTCC EQ 0 THEN +\n                         DO\n                           CALL 'XYZ.TEST.LOAD(ACCTREPT)'\n                           GOTO ENDING\n                         END\n                     ENDING: +\n                       EXIT CODE(&MAXCC)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#FA": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x9b\\x00\\x9b\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:03", "lines": 155, "newlines": 155, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n    FREEALL is a command for freeing (unallocating) several unused\n    files all at once.  This command should be executed from time to\n    time during a TSO session to reduce session overhead.\n\n    FREEALL will free all files except:\n        1.  Those which are in use (for example, open datasets).\n        2.  Those which are excepted from processing by the computer\n            center (see the SYSMASKS operand).\n        3.  Those which you designate not to be unallocated (see\n            the EXCEPT operand, and the NOTEMP, NODUMMY, NOSYSOUT       TS05203\n            and NOTERM operands).                                       TS05203\n\n\n)X Syntax -\n\n    FREEALL  EXCEPT(MASK1,MASK2,...)                                    TS05203\n             SYSMASKS                                                   TS05203\n             NOLIST | LIST                                              TS05203\n             CONCATS | NOCONCATS                                        TS05203\n             DYNAM | ALL                                                TS05203\n             TEMP | NOTEMP  (OR  SCRATCH | NOSCRATCH)                   TS05203\n             DUMMY | NODUMMY                                            TS05203\n             SYSOUT | NOSYSOUT                                          TS05203\n             TERM | NOTERM                                              TS05203\n\n    ALIAS:  FA\n\n    REQUIRED:  None\n    DEFAULTS:  NOLIST, CONCATS, DYNAM, TEMP (OR SCRATCH),               TS05203\n               DUMMY, SYSOUT, TERM                                      TS05203\n\n\n)O Operands -\n\n))LIST -\n    List the names and types of all files which are freed.  List        TS05203\n    the dataset names associated with each file (for concaten-          TS05203\n    ations:  list the first dataset name).  Default: NOLIST             TS05203\n))NOLIST -\n    Don't list the names of files which are freed.  Default:\n    NOLIST\n\n))CONCATS -\n    Unallocate concatenations.  (Concatenations are groupings           TS05203\n    of several datasets into a single logical file.)                    TS05203\n    Default: CONCATS                                                    TS05203\n))NOCONCATS -\n    Don't unallocate concatenations.  Default: CONCATS\n\n))DYNAM -\n    Only free files which have been allocated during the current\n    TSO session.  Do not free files which were allocated during\n    initial LOGON processing, or with JCL when running TSO in\n    batch.  Default: DYNAM\n))ALL -\n    Free files which have been allocated during the current TSO\n    session, and also files which were allocated during initial\n    LOGON processing, or with JCL when running TSO in batch.\n    Default: DYNAM\n\n))SYSMASKS -\n    Show the list of file name (ddname) masks which are                 TS05203\n    installation defined.  These file names will always be\n    excepted from unallocation processing.\n\n    Note:  When SYSMASKS is used, all other operands are ignored.\n           Only a list will be produced.  No files will be freed.\n\n))EXCEPT(mask1,mask2,...)\n    This operand instructs FREEALL not to free files whose\n    names match the masks in the parentheses.  See EXAMPLES,\n    below.\n                                                                        TS05203\n))TEMP                                                                  TS05203\n    Temporary datasets (those which have system-assigned dataset        TS05203\n    names) will be freed.  Default: TEMP                                TS05203\n))NOTEMP                                                                TS05203\n    Temporary datasets (those which have system-assigned dataset        TS05203\n    names) will not be freed.  Default: TEMP                            TS05203\n                                                                        TS05203\n))SCRATCH                                                               TS05203\n    Means the same thing as TEMP.                                       TS05203\n))NOSCRATCH                                                             TS05203\n    Means the same thing as NOTEMP.                                     TS05203\n                                                                        TS05203\n))DUMMY                                                                 TS05203\n    Dummy files will be freed.  Default: DUMMY                          TS05203\n))NODUMMY                                                               TS05203\n    Dummy files will not be freed.  Default: DUMMY                      TS05203\n                                                                        TS05203\n))SYSOUT                                                                TS05203\n    Files allocated to JES output (printers, punches, TSO hold          TS05203\n    queues, etc.) will be freed.  Default: SYSOUT                       TS05203\n))NOSYSOUT                                                              TS05203\n    Files allocated to JES output (printers, punches, TSO hold          TS05203\n    queues, etc.) will not be freed.  Default: SYSOUT                   TS05203\n                                                                        TS05203\n))TERM                                                                  TS05203\n    Files allocated to the TSO terminal will be freed.  Default: TERM   TS05203\n))NOTERM                                                                TS05203\n    Files allocated to the TSO terminal will not be freed.              TS05203\n    Default: TERM                                                       TS05203\n\n))EXAMPLES:\n\n    1.  FA\n\n          Frees all files not in use which were dynamically\n          allocated during the TSO session.\n\n    2.  FA  L\n\n          Same as example 1, but also lists the file names.\n\n    3.  FA  L  EXCEPT(AUDITOUT,FT22F001)\n\n          Frees and lists all files not in use which were\n          dynamically allocated during the TSO session, except\n          for files FT22F001 and AUDITOUT.\n\n    4.  FA  L  EXCEPT(AUDIT-,FT**F001)\n\n          Same as Example 3, except doesn't free ANY file name\n          beginning with the letters 'AUDIT', nor any file\n          name beginning with 'FT', followed by two characters,\n          then followed by 'F001'.\n\n          Note: '*' is a placeholder.\n                '-' means anything is a match from that point on.\n\n    5.  FA  L  EXCEPT(***Z-)\n\n          Frees and lists all files not in use which were\n          dynamically allocated during the TSO session, except\n          for any file name with a 'Z' in the fourth position.\n\n    6.  FA  SYSMASKS                                                    TS05203\n          Creates a listing of the installation defined file            TS05203\n          name masks.  Does not free any files.                         TS05203\n                                                                        TS05203\n    7.  FA  NOCONCATS                                                   TS05203\n          Frees all files not in use which were dynamically             TS05203\n          allocated during the TSO session, except for                  TS05203\n          concatenations.                                               TS05203\n                                                                        TS05203\n    8.  FA  NOTERM  NOSYSOUT                                            TS05203\n          Frees all files not in use except those allocated to          TS05203\n          the terminal, and those which are going directly to           TS05203\n          JES output (printers, punches, TSO hold queues, etc.).        TS05203\n                                                                        TS05203\n    9.  FA  NOTEMP  NODUMMY                                             TS05203\n          Frees all files not in use except those allocated to          TS05203\n          temporary datasets and dummy files.                           TS05203\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#FREEALL": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x9b\\x00\\x9b\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:03", "lines": 155, "newlines": 155, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n    FREEALL is a command for freeing (unallocating) several unused\n    files all at once.  This command should be executed from time to\n    time during a TSO session to reduce session overhead.\n\n    FREEALL will free all files except:\n        1.  Those which are in use (for example, open datasets).\n        2.  Those which are excepted from processing by the computer\n            center (see the SYSMASKS operand).\n        3.  Those which you designate not to be unallocated (see\n            the EXCEPT operand, and the NOTEMP, NODUMMY, NOSYSOUT       TS05203\n            and NOTERM operands).                                       TS05203\n\n\n)X Syntax -\n\n    FREEALL  EXCEPT(MASK1,MASK2,...)                                    TS05203\n             SYSMASKS                                                   TS05203\n             NOLIST | LIST                                              TS05203\n             CONCATS | NOCONCATS                                        TS05203\n             DYNAM | ALL                                                TS05203\n             TEMP | NOTEMP  (OR  SCRATCH | NOSCRATCH)                   TS05203\n             DUMMY | NODUMMY                                            TS05203\n             SYSOUT | NOSYSOUT                                          TS05203\n             TERM | NOTERM                                              TS05203\n\n    ALIAS:  FA\n\n    REQUIRED:  None\n    DEFAULTS:  NOLIST, CONCATS, DYNAM, TEMP (OR SCRATCH),               TS05203\n               DUMMY, SYSOUT, TERM                                      TS05203\n\n\n)O Operands -\n\n))LIST -\n    List the names and types of all files which are freed.  List        TS05203\n    the dataset names associated with each file (for concaten-          TS05203\n    ations:  list the first dataset name).  Default: NOLIST             TS05203\n))NOLIST -\n    Don't list the names of files which are freed.  Default:\n    NOLIST\n\n))CONCATS -\n    Unallocate concatenations.  (Concatenations are groupings           TS05203\n    of several datasets into a single logical file.)                    TS05203\n    Default: CONCATS                                                    TS05203\n))NOCONCATS -\n    Don't unallocate concatenations.  Default: CONCATS\n\n))DYNAM -\n    Only free files which have been allocated during the current\n    TSO session.  Do not free files which were allocated during\n    initial LOGON processing, or with JCL when running TSO in\n    batch.  Default: DYNAM\n))ALL -\n    Free files which have been allocated during the current TSO\n    session, and also files which were allocated during initial\n    LOGON processing, or with JCL when running TSO in batch.\n    Default: DYNAM\n\n))SYSMASKS -\n    Show the list of file name (ddname) masks which are                 TS05203\n    installation defined.  These file names will always be\n    excepted from unallocation processing.\n\n    Note:  When SYSMASKS is used, all other operands are ignored.\n           Only a list will be produced.  No files will be freed.\n\n))EXCEPT(mask1,mask2,...)\n    This operand instructs FREEALL not to free files whose\n    names match the masks in the parentheses.  See EXAMPLES,\n    below.\n                                                                        TS05203\n))TEMP                                                                  TS05203\n    Temporary datasets (those which have system-assigned dataset        TS05203\n    names) will be freed.  Default: TEMP                                TS05203\n))NOTEMP                                                                TS05203\n    Temporary datasets (those which have system-assigned dataset        TS05203\n    names) will not be freed.  Default: TEMP                            TS05203\n                                                                        TS05203\n))SCRATCH                                                               TS05203\n    Means the same thing as TEMP.                                       TS05203\n))NOSCRATCH                                                             TS05203\n    Means the same thing as NOTEMP.                                     TS05203\n                                                                        TS05203\n))DUMMY                                                                 TS05203\n    Dummy files will be freed.  Default: DUMMY                          TS05203\n))NODUMMY                                                               TS05203\n    Dummy files will not be freed.  Default: DUMMY                      TS05203\n                                                                        TS05203\n))SYSOUT                                                                TS05203\n    Files allocated to JES output (printers, punches, TSO hold          TS05203\n    queues, etc.) will be freed.  Default: SYSOUT                       TS05203\n))NOSYSOUT                                                              TS05203\n    Files allocated to JES output (printers, punches, TSO hold          TS05203\n    queues, etc.) will not be freed.  Default: SYSOUT                   TS05203\n                                                                        TS05203\n))TERM                                                                  TS05203\n    Files allocated to the TSO terminal will be freed.  Default: TERM   TS05203\n))NOTERM                                                                TS05203\n    Files allocated to the TSO terminal will not be freed.              TS05203\n    Default: TERM                                                       TS05203\n\n))EXAMPLES:\n\n    1.  FA\n\n          Frees all files not in use which were dynamically\n          allocated during the TSO session.\n\n    2.  FA  L\n\n          Same as example 1, but also lists the file names.\n\n    3.  FA  L  EXCEPT(AUDITOUT,FT22F001)\n\n          Frees and lists all files not in use which were\n          dynamically allocated during the TSO session, except\n          for files FT22F001 and AUDITOUT.\n\n    4.  FA  L  EXCEPT(AUDIT-,FT**F001)\n\n          Same as Example 3, except doesn't free ANY file name\n          beginning with the letters 'AUDIT', nor any file\n          name beginning with 'FT', followed by two characters,\n          then followed by 'F001'.\n\n          Note: '*' is a placeholder.\n                '-' means anything is a match from that point on.\n\n    5.  FA  L  EXCEPT(***Z-)\n\n          Frees and lists all files not in use which were\n          dynamically allocated during the TSO session, except\n          for any file name with a 'Z' in the fourth position.\n\n    6.  FA  SYSMASKS                                                    TS05203\n          Creates a listing of the installation defined file            TS05203\n          name masks.  Does not free any files.                         TS05203\n                                                                        TS05203\n    7.  FA  NOCONCATS                                                   TS05203\n          Frees all files not in use which were dynamically             TS05203\n          allocated during the TSO session, except for                  TS05203\n          concatenations.                                               TS05203\n                                                                        TS05203\n    8.  FA  NOTERM  NOSYSOUT                                            TS05203\n          Frees all files not in use except those allocated to          TS05203\n          the terminal, and those which are going directly to           TS05203\n          JES output (printers, punches, TSO hold queues, etc.).        TS05203\n                                                                        TS05203\n    9.  FA  NOTEMP  NODUMMY                                             TS05203\n          Frees all files not in use except those allocated to          TS05203\n          temporary datasets and dummy files.                           TS05203\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#IN": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x7f\\x00\\x7f\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:03", "lines": 127, "newlines": 127, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n  The INSTREAM command is used to create 80-byte control\n  card images in a temporary file.  This command can be run\n  under CLIST control, with symbolic substitution of\n  variables allowed.\n\n)X Syntax -\n\n      INSTREAM   DDNAME(name)  END(string)  CAPS  NOTIFY\n      IN           FILE(name)               ASIS  NONOTIFY\n\n  REQUIRED - none\n  DEFAULTS - DDNAME(SYSIN) END(END) CAPS NOTIFY\n  ALIAS    - IN\n\n)O Operands -\n\n))DDNAME(name) -\n             Name of the temporary file where the data will\n             be stored.\n             DEFAULT:  DDNAME(SYSIN)\n\n))FILE(name) -\n             Means the same thing as DDNAME.\n             DEFAULT:  FILE(SYSIN)\n\n))END(string) -\n             The character string which will signal the end\n             of data.  When this character string is entered\n             at the beginning of a line, with nothing\n             following, INSTREAM will treat it as an end of\n             file mark.\n             DEFAULT:  END(END)\n                NOTE:  When using INSTREAM to enter data\n                       from a terminal, or variable blocked\n                       CLIST, a null line will also be\n                       treated as an end of file mark.\n\n))CAPS -\n             Indicates that all alphabetic data entered from\n             a keyboard should be shifted to upper case.\n             CAPS is the opposite of ASIS.\n             DEFAULT:  CAPS\n                NOTE:  CAPS applies to the string in the\n                       END operand.\n\n))ASIS -\n             Indicates that all alphabetic data entered from\n             a keyboard should remain in whatever case it was\n             in when it was typed.\n             ASIS is the opposite of CAPS.\n             DEFAULT:  CAPS\n                NOTE:  ASIS applies to the string in the\n                       END operand.\n\n))NOTIFY -\n             When INSTREAM completes, NOTIFY directs it to\n             put out an 'OPERATION COMPLETE' message.\n             NOTIFY is the opposite of NONOTIFY.\n             DEFAULT:  NOTIFY\n\n))NONOTIFY -\n             When INSTREAM completes, NONOTIFY will suppress\n             the writing of an an 'OPERATION COMPLETE'\n             message.\n             NONOTIFY is the opposite of NOTIFY.\n             DEFAULT:  NOTIFY\n\n))EXAMPLES -\n    1.  Create the following control card images in a file\n        called SYSIN:\n                  PRINT MAXNAME=1,MAXFLDS=1\n                  NAME=PAYROLL1\n                  RECORD FIELD=(20,,,80)\n\n        INSTREAM\n          PRINT MAXNAME=1,MAXFLDS=1\n          NAME=PAYROLL1\n          RECORD FIELD=(20,,,80)\n        END\n\n    2.  Do the same thing as in Example 1, but make the name\n        a variable in a CLIST.\n\n        PROC 1 PROGRAM\n        INSTREAM\n          PRINT MAXNAME=1,MAXFLDS=1\n          NAME=&PROGRAM.\n          RECORD FIELD=(20,,,80)\n        END\n\n    3.  Do the same thing as in Example 2, but put the data\n        into a file named SYSUT1.\n\n        PROC 1 PROGRAM\n        INSTREAM  DDNAME(SYSUT1)\n          PRINT MAXNAME=1,MAXFLDS=1\n          NAME=&PROGRAM.\n          RECORD FIELD=(20,,,80)\n        END\n\n)M Messages -\n))The following messages are issued by the INSTREAM command.\n\n))INS0000I - INSTREAM OPERATION COMPLETE\n           Normal completion of the INSTREAM command.\n\n))INS0004E - UNABLE TO ALLOCATE OUTPUT FILE/DD NAME\n           The file named in the FILE or DDNAME operand is\n           unavailable.  Use the FREE command to free the\n           file, or LOGOFF then LOGON again.\n\n))INS0008E - UNABLE TO OPEN OUTPUT FILE\n           System problem.  The output file is allocated to\n           a temporary dataset which cannot be opened.  (If\n           the output file name is SYSIN, the output dataset\n           name is &&SYSIN.  The file name and dataset name\n           will match.)\n\n))INS000CE - UNABLE TO CLOSE - OUTPUT FILE\n           This will usually be preceeded by some other problem.\n           LOGOFF to force the file to close.\n\n))INS0010E - UNABLE TO READ DATA FROM TERMINAL OR CLIST\n           Probably caused by a hardware or communications\n           problem.  Try again.  If the problem persists,\n           ask for systems programming support.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#INSTREA": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x7f\\x00\\x7f\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 127, "newlines": 127, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n  The INSTREAM command is used to create 80-byte control\n  card images in a temporary file.  This command can be run\n  under CLIST control, with symbolic substitution of\n  variables allowed.\n\n)X Syntax -\n\n      INSTREAM   DDNAME(name)  END(string)  CAPS  NOTIFY\n      IN           FILE(name)               ASIS  NONOTIFY\n\n  REQUIRED - none\n  DEFAULTS - DDNAME(SYSIN) END(END) CAPS NOTIFY\n  ALIAS    - IN\n\n)O Operands -\n\n))DDNAME(name) -\n             Name of the temporary file where the data will\n             be stored.\n             DEFAULT:  DDNAME(SYSIN)\n\n))FILE(name) -\n             Means the same thing as DDNAME.\n             DEFAULT:  FILE(SYSIN)\n\n))END(string) -\n             The character string which will signal the end\n             of data.  When this character string is entered\n             at the beginning of a line, with nothing\n             following, INSTREAM will treat it as an end of\n             file mark.\n             DEFAULT:  END(END)\n                NOTE:  When using INSTREAM to enter data\n                       from a terminal, or variable blocked\n                       CLIST, a null line will also be\n                       treated as an end of file mark.\n\n))CAPS -\n             Indicates that all alphabetic data entered from\n             a keyboard should be shifted to upper case.\n             CAPS is the opposite of ASIS.\n             DEFAULT:  CAPS\n                NOTE:  CAPS applies to the string in the\n                       END operand.\n\n))ASIS -\n             Indicates that all alphabetic data entered from\n             a keyboard should remain in whatever case it was\n             in when it was typed.\n             ASIS is the opposite of CAPS.\n             DEFAULT:  CAPS\n                NOTE:  ASIS applies to the string in the\n                       END operand.\n\n))NOTIFY -\n             When INSTREAM completes, NOTIFY directs it to\n             put out an 'OPERATION COMPLETE' message.\n             NOTIFY is the opposite of NONOTIFY.\n             DEFAULT:  NOTIFY\n\n))NONOTIFY -\n             When INSTREAM completes, NONOTIFY will suppress\n             the writing of an an 'OPERATION COMPLETE'\n             message.\n             NONOTIFY is the opposite of NOTIFY.\n             DEFAULT:  NOTIFY\n\n))EXAMPLES -\n    1.  Create the following control card images in a file\n        called SYSIN:\n                  PRINT MAXNAME=1,MAXFLDS=1\n                  NAME=PAYROLL1\n                  RECORD FIELD=(20,,,80)\n\n        INSTREAM\n          PRINT MAXNAME=1,MAXFLDS=1\n          NAME=PAYROLL1\n          RECORD FIELD=(20,,,80)\n        END\n\n    2.  Do the same thing as in Example 1, but make the name\n        a variable in a CLIST.\n\n        PROC 1 PROGRAM\n        INSTREAM\n          PRINT MAXNAME=1,MAXFLDS=1\n          NAME=&PROGRAM.\n          RECORD FIELD=(20,,,80)\n        END\n\n    3.  Do the same thing as in Example 2, but put the data\n        into a file named SYSUT1.\n\n        PROC 1 PROGRAM\n        INSTREAM  DDNAME(SYSUT1)\n          PRINT MAXNAME=1,MAXFLDS=1\n          NAME=&PROGRAM.\n          RECORD FIELD=(20,,,80)\n        END\n\n)M Messages -\n))The following messages are issued by the INSTREAM command.\n\n))INS0000I - INSTREAM OPERATION COMPLETE\n           Normal completion of the INSTREAM command.\n\n))INS0004E - UNABLE TO ALLOCATE OUTPUT FILE/DD NAME\n           The file named in the FILE or DDNAME operand is\n           unavailable.  Use the FREE command to free the\n           file, or LOGOFF then LOGON again.\n\n))INS0008E - UNABLE TO OPEN OUTPUT FILE\n           System problem.  The output file is allocated to\n           a temporary dataset which cannot be opened.  (If\n           the output file name is SYSIN, the output dataset\n           name is &&SYSIN.  The file name and dataset name\n           will match.)\n\n))INS000CE - UNABLE TO CLOSE - OUTPUT FILE\n           This will usually be preceeded by some other problem.\n           LOGOFF to force the file to close.\n\n))INS0010E - UNABLE TO READ DATA FROM TERMINAL OR CLIST\n           Probably caused by a hardware or communications\n           problem.  Try again.  If the problem persists,\n           ask for systems programming support.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#ISPFPRO": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 12, "newlines": 12, "modlines": 0, "user": "HOFFMAN"}, "text": ")F FUNCTION -\n  ISPFPROF Command is used to allocate the ISPF user profile dataset\n  without going into ISPF/PDF.\n\n)X SYNTAX -\n            ISPFPROF\n\n\n)O OPERANDS:\n     Required - none\n     Defaults - none\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#LCALL": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00v\\x00v\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 118, "newlines": 118, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n     LIBCALL is a command which enables you to execute a program\n     which is in a group (concatenation) of libraries, without\n     your knowing exactly which library the program is in.  The\n     group may be the MVS System libraries and program areas, or\n     it may be a collection of other libraries which you can name.\n\n     NOTE:  For those who run batch JCL, LIBCALL with the STEPLIB\n            operand is a facility similar to using an EXEC\n            statement with a //STEPLIB DD statement to look for\n            the program in a concatenation of libraries before\n            looking for the program in the MVS System libraries\n            and program areas.  The omission of the STEPLIB\n            operand is similar to omitting the //STEPLIB DD\n            statement to look for the program only in the MVS\n            System libraries and program areas.\n\n)X Syntax -\n\n     LIBCALL   name  'parm'  CAPS  SYSLIBS                              TS04902\n     LCALL                   ASIS  STEPLIB('dsn1' 'dsn2' ...)           TS04902\n                                   TASKLIB('dsn1' 'dsn2' ...)           TS04902\n                                       LIB('dsn1' 'dsn2' ...)           TS04902\n                                    CONCAT('dsn1' 'dsn2' ...)           TS04902\n\n     ALIAS:  LCALL\n\n     REQUIRED:  1.  name.  If not supplied, LIBCALL will prompt for it.\n\n     DEFAULTS:  1.  SYSLIBS.  Use the MVS System libraries and program\n                    areas.\n                2.  CAPS.  If a 'parm' is used, shift it to upper case.\n\n)O Operands -\n\n))name\n    The 1-8 character name of the program you want to execute.\n\n))parm\n    The optional 1-100 character parameter which some programs require.\n\n))CAPS\n    If a 'parm' is used, shift it to upper case.  Opposite of ASIS.\n    DEFAULT:  CAPS\n\n))ASIS\n    If a 'parm' is used, use it as is.  Do not shift to upper case.\n    Opposite of CAPS.\n    DEFAULT:  CAPS\n\n))SYSLIBS\n    SYSLIBS indicates that LIBCOPY is to locate the program you want\n    by checking only the MVS System libraries and program areas.  Use\n    the SYSLIBS operand when you want to execute a system program.\n\n      NOTE:  If you don't use any library name, SYSLIBS is assumed.\n\n))STEPLIB('dsn1' 'dsn2' ...)\n    A list of library names.  They will be logically connected\n    (concatenated) in the order that they appear in the list.  The\n    selected program will be executed from the first library in which\n    it is found.  If it is not found in one of the libraries named,\n    LIBCALL will search the MVS System libraries and program areas.\n\n))TASKLIB('dsn1' 'dsn2' ...)\n      Means the same thing as STEPLIB.\n\n))LIB('dsn1' 'dsn2' ...)\n      Means the same thing as STEPLIB.\n\n))CONCAT('dsn1' 'dsn2' ...)\n      Means the same thing as STEPLIB.\n\n\n))EXAMPLES -\n\n  1.  You want to execute program PROG01.  It normally resides in\n      library 'ABC1234.PRODUCTN.LOAD', but if there is a version\n      in your private library MYLIB.LOAD, you would rather execute\n      your private version.  The program requires a parm of\n      'JDATE(84147),ALLREPORTS'.  Your TSO userid is DEF5678.\n\n        JCL:\n            //STEP1  EXEC PGM=PROG01,PARM='JDATE(84147),ALLREPORTS'\n            //STEPLIB  DD DSN=DEF5678.MYLIB.LOAD,DISP=SHR\n            //            DSN=ABC1234.PRODUCTN.LOAD,DISP=SHR\n\n        TSO:\n            LIBCALL  PROG01 'JDATE(84147),ALLREPORTS'            +\n                STEPLIB(MYLIB.LOAD 'ABC1234.PRODUCTN.LOAD')\n\n  2.  IEBUPDTE is an MVS utility for maintaining partitioned\n      datasets (PDS libraries).  The following methods could be\n      used to copy module 'PROGABC', with an alias of 'ABC',\n      from library ABC.LIB1.DATA into library ABC.LIB2.DATA:\n\n        JCL:\n            //STEP1   EXEC PGM=IEBUPDTE,PARM='MOD'\n            //SYSUT1    DD DSN=ABC.LIB1.DATA,DISP=SHR\n            //SYSUT2    DD DSN=ABC.LIB2.DATA,DISP=OLD\n            //SYSPRINT  DD SYSOUT=*\n            //SYSIN     DD *\n            ./ REPRO  NAME=PROGABC\n            ./ ALIAS  NAME=ABC\n            ./ ENDUP\n            /*\n\n        TSO:\n            ALLOC  DD(SYSUT1)   DSN('ABC.LIB1.DATA') SHR\n            ALLOC  DD(SYSUT2)   DSN('ABC.LIB2.DATA') OLD\n            ALLOC  DD(SYSPRINT) DSN(*)\n            ALLOC  DD(SYSIN)    DSN(*)\n            LIBCALL  IEBUPDTE 'MOD'\n            ./ REPRO  NAME=PROGABC\n            ./ ALIAS  NAME=ABC\n            ./ ENDUP\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#LIBCALL": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00v\\x00v\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 118, "newlines": 118, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n     LIBCALL is a command which enables you to execute a program\n     which is in a group (concatenation) of libraries, without\n     your knowing exactly which library the program is in.  The\n     group may be the MVS System libraries and program areas, or\n     it may be a collection of other libraries which you can name.\n\n     NOTE:  For those who run batch JCL, LIBCALL with the STEPLIB\n            operand is a facility similar to using an EXEC\n            statement with a //STEPLIB DD statement to look for\n            the program in a concatenation of libraries before\n            looking for the program in the MVS System libraries\n            and program areas.  The omission of the STEPLIB\n            operand is similar to omitting the //STEPLIB DD\n            statement to look for the program only in the MVS\n            System libraries and program areas.\n\n)X Syntax -\n\n     LIBCALL   name  'parm'  CAPS  SYSLIBS                              TS04902\n     LCALL                   ASIS  STEPLIB('dsn1' 'dsn2' ...)           TS04902\n                                   TASKLIB('dsn1' 'dsn2' ...)           TS04902\n                                       LIB('dsn1' 'dsn2' ...)           TS04902\n                                    CONCAT('dsn1' 'dsn2' ...)           TS04902\n\n     ALIAS:  LCALL\n\n     REQUIRED:  1.  name.  If not supplied, LIBCALL will prompt for it.\n\n     DEFAULTS:  1.  SYSLIBS.  Use the MVS System libraries and program\n                    areas.\n                2.  CAPS.  If a 'parm' is used, shift it to upper case.\n\n)O Operands -\n\n))name\n    The 1-8 character name of the program you want to execute.\n\n))parm\n    The optional 1-100 character parameter which some programs require.\n\n))CAPS\n    If a 'parm' is used, shift it to upper case.  Opposite of ASIS.\n    DEFAULT:  CAPS\n\n))ASIS\n    If a 'parm' is used, use it as is.  Do not shift to upper case.\n    Opposite of CAPS.\n    DEFAULT:  CAPS\n\n))SYSLIBS\n    SYSLIBS indicates that LIBCOPY is to locate the program you want\n    by checking only the MVS System libraries and program areas.  Use\n    the SYSLIBS operand when you want to execute a system program.\n\n      NOTE:  If you don't use any library name, SYSLIBS is assumed.\n\n))STEPLIB('dsn1' 'dsn2' ...)\n    A list of library names.  They will be logically connected\n    (concatenated) in the order that they appear in the list.  The\n    selected program will be executed from the first library in which\n    it is found.  If it is not found in one of the libraries named,\n    LIBCALL will search the MVS System libraries and program areas.\n\n))TASKLIB('dsn1' 'dsn2' ...)\n      Means the same thing as STEPLIB.\n\n))LIB('dsn1' 'dsn2' ...)\n      Means the same thing as STEPLIB.\n\n))CONCAT('dsn1' 'dsn2' ...)\n      Means the same thing as STEPLIB.\n\n\n))EXAMPLES -\n\n  1.  You want to execute program PROG01.  It normally resides in\n      library 'ABC1234.PRODUCTN.LOAD', but if there is a version\n      in your private library MYLIB.LOAD, you would rather execute\n      your private version.  The program requires a parm of\n      'JDATE(84147),ALLREPORTS'.  Your TSO userid is DEF5678.\n\n        JCL:\n            //STEP1  EXEC PGM=PROG01,PARM='JDATE(84147),ALLREPORTS'\n            //STEPLIB  DD DSN=DEF5678.MYLIB.LOAD,DISP=SHR\n            //            DSN=ABC1234.PRODUCTN.LOAD,DISP=SHR\n\n        TSO:\n            LIBCALL  PROG01 'JDATE(84147),ALLREPORTS'            +\n                STEPLIB(MYLIB.LOAD 'ABC1234.PRODUCTN.LOAD')\n\n  2.  IEBUPDTE is an MVS utility for maintaining partitioned\n      datasets (PDS libraries).  The following methods could be\n      used to copy module 'PROGABC', with an alias of 'ABC',\n      from library ABC.LIB1.DATA into library ABC.LIB2.DATA:\n\n        JCL:\n            //STEP1   EXEC PGM=IEBUPDTE,PARM='MOD'\n            //SYSUT1    DD DSN=ABC.LIB1.DATA,DISP=SHR\n            //SYSUT2    DD DSN=ABC.LIB2.DATA,DISP=OLD\n            //SYSPRINT  DD SYSOUT=*\n            //SYSIN     DD *\n            ./ REPRO  NAME=PROGABC\n            ./ ALIAS  NAME=ABC\n            ./ ENDUP\n            /*\n\n        TSO:\n            ALLOC  DD(SYSUT1)   DSN('ABC.LIB1.DATA') SHR\n            ALLOC  DD(SYSUT2)   DSN('ABC.LIB2.DATA') OLD\n            ALLOC  DD(SYSPRINT) DSN(*)\n            ALLOC  DD(SYSIN)    DSN(*)\n            LIBCALL  IEBUPDTE 'MOD'\n            ./ REPRO  NAME=PROGABC\n            ./ ALIAS  NAME=ABC\n            ./ ENDUP\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#NEW": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x9c\\x00\\x9c\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 156, "newlines": 156, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n     NEWSPACE is a command for easily creating new, moderately sized,\n     datasets and libraries.  It was written with beginners in mind.\n     (Larger or more complex datasets should be created with the\n     ALLOCATE and ATTRIB commands, or with the ISPF/PDF Dataset Utility\n     (Option 3.2))\n\n)X Syntax -\n\n   NEWSPACE  dataset-name  type   LIBRARY     FIXED         FILE(name)\n                                  SEQUENTIAL  VARIABLE    DDNAME(name)\n                                              UNFORMATTED\n   REQUIRED:  dataset-name\n   DEFAULTS:  1.  LIBRARY\n              2.  FIXED, VARIABLE or UNFORMATTED, depending on type\n                  or dataset-name.\n              3.  If a FILE/DD name is not selected, a system-\n                  generated name will be used.\n\n)O Operands -\n\n))dataset-name -\n    The name of the dataset to be created.  If single quotes (') are\n    placed around the name, it will be used as is.  If not, the TSO\n    user prefix will be added to the front of the name, and the dataset\n    'type', if used, will be added to the end.  For example, if your\n    user prefix is ABC0:\n\n            'ABC0.PROJECT.DATA'  will be used as is\n\n                       PROGRAM1  will have the user prefix and type\n                                 added to it.  If it is to contain\n                                 FORTRAN statements, the name would\n                                 become:  'ABC0.PROGRAM1.FORT'\n\n))type -\n    This designates the intended use of the dataset.  Datasets for\n    different uses have different internal characteristics.  You do not\n    have to specify 'type'.  'Types' recognized by NEWSPACE are:\n\n    ASM     - Assembler programs     FORT    - FORTRAN PROGRAMS\n    C       - C Language programs    LIST    - Program output listings\n  * CLIST   - TSO Command Lists      LOAD    - Executable load modules\n    CNTL    - Job Control Language   OBJ     - Compiler output (object)\n    COBOL   - COBOL programs         PLI     - PL/1 programs\n  * COMMAND - TSO Command Lists      PLIF    - PL/1(F) programs\n    DATA    - General Data           TEXT    - Text, especially SCRIPT\n ** DIALOG  - ISPF DIALOG DATASETS   VSBASIC - IBM VS BASIC PROGRAMS\n\n\n  _______\n  * CLIST and COMMAND are the same, except for different default\n    internal characteristics.  COMMAND type is used for personal CLISTs\n    which are to be used as if they are TSO commands.  See the FIXED\n    and VARIABLE operands, below.\n ** DIALOG is for the following files used with ISPF Dialog Manager:\n                  FIXED - ISPPLIB, Panels\n                  FIXED - ISPMLIB, Messages\n                  FIXED - ISPSLIB, Skeletons\n                  FIXED - ISPTLIB, Table Input\n                  FIXED - ISPPROF, Profiles\n                  FIXED - SYSPROC, CLISTs\n            UNFORMATTED - ISPLLIB, Link Library\n\n))SEQUENTIAL -\n    The dataset will be constructed to hold a single group of data,\n    such as one FORTRAN program, or one Memo.\n\n))LIBRARY (or PARTITIONED, or PDS) -\n    The dataset will be constructed as a library (partitioned dataset)\n    which can hold many groups of data, such as many FORTRAN programs\n    or many Memos.  LIBRARY IS THE DEFAULT.\n\n))FIXED -\n    All lines of data have the same length.  This is the default if no\n    'type' is selected and the dataset name doesn't end with a 'type'\n    name.  It is also the default if the following types are selected:\n\n                ASM       COMMAND   LIST\n                C         DATA      OBJ\n                CNTL      DIALOG    PLIF\n                COBOL     FORT\n\n))VARIABLE -\n    Each line of data may be a different length from the rest.  This\n    is the default if one of these types is selected.\n\n                CLIST      TEXT\n                PLI        VSBASIC\n\n))UNFORMATTED -\n    This is the default format for LOAD datasets.  It is an optional\n    format for DIALOG datasets, for the ISPLLIB file.\n\n))FILE(name) -\n    An optional 1-8 character file name to be used when creating\n    the dataset.  Means the same thing as DDNAME.  This operand\n    is not required.  If you do not select a DDNAME or FILE name,\n    the system will generate one.\n\n))DDNAME(name) -\n    An optional 1-8 character file name to be used when creating\n    the dataset.  Means the same thing as FILE.  This operand\n    is not required.  If you do not select a DDNAME or FILE name,\n    the system will generate one.\n\n))Examples:\n\n     (Assume your TSO user prefix is ABC0)\n\n\n        1.  NEWSPACE  MYPROJ\n                Creates library 'ABC0.MYPROJ'.  Since no TYPE is\n                designated, and MYPROJ doesn't end in a TYPE name, a\n                default internal characteristics are used.\n\n        2.  NEWSPACE  MYPROJ  DATA\n               - or - MYPROJ.DATA\n                Creates library 'ABC0.MYPROJ.DATA', using the DATA type\n                internal characteristics, with the default FIXED\n                format.\n\n        3.  NEWSPACE  MYPROJ.DATA  SEQUENTIAL\n                Creates sequential dataset 'ABC0.MYPROJ.DATA'\n\n        4.  NEWSPACE  MYPROJ.DATA  VARIABLE\n                Creates library 'ABC0.MYPROJ.DATA', using the DATA type\n                internal characteristics, and the VARIABLE format.\n\n        5.  NEWSPACE 'XYZ9.SHARE.JOB82'\n                Creates library 'XYZ9.SHARE.JOB82'.  Since no TYPE is\n                designated, and JOB82 isn't a type name, the default\n                internal characteristics are used.\n\n        6.  NEWSPACE  MONEND  DATA  SEQUENTIAL  FILE(INRECS)\n                Creates sequential dataset 'ABC0.MONEND.DATA' and\n                associates it with file name (ddname) 'INRECS'.\n\n)M\n))Messages issued by NEWSPACE are:\n\n))NSP0001 - RECORD FORMAT IS INVALID FOR THIS DATA TYPE.\n          You have requested an invalid combination, such as CNTL type\n          and VARIABLE format.\n\n))NSP0002 - DATASET WAS NOT CREATED.\n          The dataset wasn't created because of some problem, such as\n          another dataset already having the same name.\n\n))NSP0003 - organization DATASET 'dataset-name' CREATED\n          The dataset named in this message has been successfully\n          created.\n\n))NSP0004 - IMPROPER DATASET NAME\n          Dataset name was incorrect, such as zero length or ending\n          with a period.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#NEWSPAC": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x9c\\x00\\x9c\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 156, "newlines": 156, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n     NEWSPACE is a command for easily creating new, moderately sized,\n     datasets and libraries.  It was written with beginners in mind.\n     (Larger or more complex datasets should be created with the\n     ALLOCATE and ATTRIB commands, or with the ISPF/PDF Dataset Utility\n     (Option 3.2))\n\n)X Syntax -\n\n   NEWSPACE  dataset-name  type   LIBRARY     FIXED         FILE(name)\n                                  SEQUENTIAL  VARIABLE    DDNAME(name)\n                                              UNFORMATTED\n   REQUIRED:  dataset-name\n   DEFAULTS:  1.  LIBRARY\n              2.  FIXED, VARIABLE or UNFORMATTED, depending on type\n                  or dataset-name.\n              3.  If a FILE/DD name is not selected, a system-\n                  generated name will be used.\n\n)O Operands -\n\n))dataset-name -\n    The name of the dataset to be created.  If single quotes (') are\n    placed around the name, it will be used as is.  If not, the TSO\n    user prefix will be added to the front of the name, and the dataset\n    'type', if used, will be added to the end.  For example, if your\n    user prefix is ABC0:\n\n            'ABC0.PROJECT.DATA'  will be used as is\n\n                       PROGRAM1  will have the user prefix and type\n                                 added to it.  If it is to contain\n                                 FORTRAN statements, the name would\n                                 become:  'ABC0.PROGRAM1.FORT'\n\n))type -\n    This designates the intended use of the dataset.  Datasets for\n    different uses have different internal characteristics.  You do not\n    have to specify 'type'.  'Types' recognized by NEWSPACE are:\n\n    ASM     - Assembler programs     FORT    - FORTRAN PROGRAMS\n    C       - C Language programs    LIST    - Program output listings\n  * CLIST   - TSO Command Lists      LOAD    - Executable load modules\n    CNTL    - Job Control Language   OBJ     - Compiler output (object)\n    COBOL   - COBOL programs         PLI     - PL/1 programs\n  * COMMAND - TSO Command Lists      PLIF    - PL/1(F) programs\n    DATA    - General Data           TEXT    - Text, especially SCRIPT\n ** DIALOG  - ISPF DIALOG DATASETS   VSBASIC - IBM VS BASIC PROGRAMS\n\n\n  _______\n  * CLIST and COMMAND are the same, except for different default\n    internal characteristics.  COMMAND type is used for personal CLISTs\n    which are to be used as if they are TSO commands.  See the FIXED\n    and VARIABLE operands, below.\n ** DIALOG is for the following files used with ISPF Dialog Manager:\n                  FIXED - ISPPLIB, Panels\n                  FIXED - ISPMLIB, Messages\n                  FIXED - ISPSLIB, Skeletons\n                  FIXED - ISPTLIB, Table Input\n                  FIXED - ISPPROF, Profiles\n                  FIXED - SYSPROC, CLISTs\n            UNFORMATTED - ISPLLIB, Link Library\n\n))SEQUENTIAL -\n    The dataset will be constructed to hold a single group of data,\n    such as one FORTRAN program, or one Memo.\n\n))LIBRARY (or PARTITIONED, or PDS) -\n    The dataset will be constructed as a library (partitioned dataset)\n    which can hold many groups of data, such as many FORTRAN programs\n    or many Memos.  LIBRARY IS THE DEFAULT.\n\n))FIXED -\n    All lines of data have the same length.  This is the default if no\n    'type' is selected and the dataset name doesn't end with a 'type'\n    name.  It is also the default if the following types are selected:\n\n                ASM       COMMAND   LIST\n                C         DATA      OBJ\n                CNTL      DIALOG    PLIF\n                COBOL     FORT\n\n))VARIABLE -\n    Each line of data may be a different length from the rest.  This\n    is the default if one of these types is selected.\n\n                CLIST      TEXT\n                PLI        VSBASIC\n\n))UNFORMATTED -\n    This is the default format for LOAD datasets.  It is an optional\n    format for DIALOG datasets, for the ISPLLIB file.\n\n))FILE(name) -\n    An optional 1-8 character file name to be used when creating\n    the dataset.  Means the same thing as DDNAME.  This operand\n    is not required.  If you do not select a DDNAME or FILE name,\n    the system will generate one.\n\n))DDNAME(name) -\n    An optional 1-8 character file name to be used when creating\n    the dataset.  Means the same thing as FILE.  This operand\n    is not required.  If you do not select a DDNAME or FILE name,\n    the system will generate one.\n\n))Examples:\n\n     (Assume your TSO user prefix is ABC0)\n\n\n        1.  NEWSPACE  MYPROJ\n                Creates library 'ABC0.MYPROJ'.  Since no TYPE is\n                designated, and MYPROJ doesn't end in a TYPE name, a\n                default internal characteristics are used.\n\n        2.  NEWSPACE  MYPROJ  DATA\n               - or - MYPROJ.DATA\n                Creates library 'ABC0.MYPROJ.DATA', using the DATA type\n                internal characteristics, with the default FIXED\n                format.\n\n        3.  NEWSPACE  MYPROJ.DATA  SEQUENTIAL\n                Creates sequential dataset 'ABC0.MYPROJ.DATA'\n\n        4.  NEWSPACE  MYPROJ.DATA  VARIABLE\n                Creates library 'ABC0.MYPROJ.DATA', using the DATA type\n                internal characteristics, and the VARIABLE format.\n\n        5.  NEWSPACE 'XYZ9.SHARE.JOB82'\n                Creates library 'XYZ9.SHARE.JOB82'.  Since no TYPE is\n                designated, and JOB82 isn't a type name, the default\n                internal characteristics are used.\n\n        6.  NEWSPACE  MONEND  DATA  SEQUENTIAL  FILE(INRECS)\n                Creates sequential dataset 'ABC0.MONEND.DATA' and\n                associates it with file name (ddname) 'INRECS'.\n\n)M\n))Messages issued by NEWSPACE are:\n\n))NSP0001 - RECORD FORMAT IS INVALID FOR THIS DATA TYPE.\n          You have requested an invalid combination, such as CNTL type\n          and VARIABLE format.\n\n))NSP0002 - DATASET WAS NOT CREATED.\n          The dataset wasn't created because of some problem, such as\n          another dataset already having the same name.\n\n))NSP0003 - organization DATASET 'dataset-name' CREATED\n          The dataset named in this message has been successfully\n          created.\n\n))NSP0004 - IMPROPER DATASET NAME\n          Dataset name was incorrect, such as zero length or ending\n          with a period.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#PDF": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00.\\x00.\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 46, "newlines": 46, "modlines": 0, "user": "HOFFMAN"}, "text": ")F FUNCTION -\n  The PDF Command is used to enter the ISPF Program Development\n  Facility (PDF).  For more information about this facility, enter the\n  \"PDF\" command, then select the \"TUTORIAL\" option or the \"CHANGES\"\n  option.  IBM manuals are listed in the \"CHANGES\" option.\n\n\n)X SYNTAX -\n        PDF\n            option TEST/TESTX/TRACE/TRACEX\n\n\n)O OPERANDS:\n     Required - none\n     Defaults - none\n     Optional - option, TEST, TESTX, TRACE, TRACEX\n\n))option   - An initial option that may be entered to bypass the first\n             display of the primary option menu and go directly to the\n             option you select.  (This is not a keyword parameter.\n             Simply enter the option number, or omit to display the\n             primary option menu.)  For example, typing \"PDF 3.2\" in\n             TSO will take you directly to the ISPF/PDF dataset utility\n             option.\n\n))TEST     - PDF is to be run in TEST mode.  Test mode includes:\n              1. re-reading from disk all panels and messages.  This\n                 enhances the ability to test panels and messages in\n                 the same PDF session that they are modified.\n              2. Disabling ABEND recovery.  This allows ABENDs to be\n                 tracked down using TSO TEST.\n              3. Disabling ATTENTION key handling.  This allows the\n                 ATTENTION key to be used to enter TSO TEST.\n\n))TESTX    - PDF is to be run in TEST mode EXTENDED.  In addition to\n             TEST mode, any lines that are written to the LOG file are\n             also displayed on the display screen.\n\n))TRACE    - PDF is to be run in TRACE mode.  TRACE mode includes all\n             of the functions of TEST mode.  In addition, all ISPEXEC\n             service invocations from a dialog will be logged.\n\n))TRACEX   - PDF is to be run in TRACE mode EXTENDED.  In addition to\n             TRACE mode, any lines that are written to the LOG file are\n             also displayed on the display screen.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#SAFEC": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\xe0\\x00\\xe0\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 224, "newlines": 224, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n     SAFECOPY is a copy command which enables several users to update\n     the same dataset simultaneously, without conflicting with each\n     other or with users who are reading the dataset.  SAFECOPY is\n     especially useful in CLISTs which write to a common dataset.\n\n)X Syntax -\n\n     SAFECOPY  FROMDSNAME(dsname|*)   TODSNAME(dsname)                  TS04902\n     SAFEC     FROMDATASET(dsname|*)  TODATASET(dsname)                 TS04902\n               FROMFILE(filename)     TOFILE(filename)\n               FROMDDNAME(filename)   TODDNAME(filename)\n\n               OLD   NONUM   NOTIFY\n               MOD   NUM     NONOTIFY\n\n\n     REQUIRED:  1.  FROMDSNAME or FROMDATASET or FROMFILE or FROMDDNAME\n                2.  TODSNAME or TODATASET or TOFILE or TODDNAME\n\n     DEFAULTS:  1.  OLD\n                2.  NONUM\n                3.  NOTIFY\n\n)O Operands -\n\n))FROMDSNAME(dsname|*)\n    The name of the dataset from which the data is to be copied.\n    'dsname' may be the name of a member of a partitioned dataset.\n    The use of an asterisk (*) indicates that the data will come from\n    the timesharing terminal, or from instream data in a CLIST.\n\n    NOTE:  When using FROMDSNAME(*), the end of the input data is\n           signalled by a null line, or the characters 'END'.\n           See examples in this HELP document.\n\n))FROMDATASET(dsname|*)\n    Means the same thing as FROMDSNAME.\n\n))FROMFILE(filename)\n    The name of the preallocated file from which the data is to be\n    copied.  Some files are allocated automatically during LOGON.\n    After LOGON, you can allocate files dynamically with the ALLOCATE\n    command.\n\n))FROMDDNAME(filename)\n    Means the same thing as FROMFILE.\n\n))TODSNAME(dsname)\n    The name of the dataset to which the data is to be copied.\n    'dsname' may be the name of a member of a partitioned dataset.\n\n    NOTE:  This dataset may be shared with other users.\n\n))TODATASET(dsname)\n    Means the same thing as TODSNAME.\n\n))TOFILE(filename)\n    The name of the preallocated file to which the data is to be\n    copied.  Some files are allocated automatically during LOGON.\n    After LOGON, you can allocate files dynamically with the ALLOCATE\n    command.\n\n))TODDNAME(filename)\n    Means the same thing as TOFILE.\n\n))OLD\n    The data copied into the output dataset will REPLACE data which is\n    already there.  You have the choice of OLD or MOD.\n\n    NOTE:  OLD is the default.\n\n))MOD\n    The data copied into the output dataset will be ADDED ONTO THE END\n    of data which is already there.  You have the choice of OLD or MOD.\n\n    NOTE:  MOD is invalid if you are copying into a member of a\n           partitioned dataset.\n\n))NUM\n    Indicates that the data contains line numbers.  When copying data,\n    the line numbers may be physically moved to conform to the output\n    dataset's record format.\n\n))NONUM\n    Indicates that the data does not contain line numbers.  All data\n    will be copied as is, without special processing of line number\n    fields.\n\n    NOTE:  NONUM is the default.\n\n))NOTIFY\n    Indicates that message SCY0000I is to be printed if the SAFECOPY\n    operation is successful.\n\n    NOTE:  NOTIFY is the default.\n\n))NONOTIFY\n    Indicates that message SCY0000I is not to be printed if the\n    SAFECOPY operation is successful.\n\n\n))EXAMPLES -\n\n  1.  Copy MYSET.TEXT into member MEM1 of 'YOURID.YOURLIB.TEXT':\n\n        SAFEC  FROMDS(myset.text)  TODS('yourid.yourlib.text(mem1)')\n\n\n  2.  Add data from MYSET.DATA onto the end of data already in\n     'YOURID.YOURSET.DATA':\n\n        SAFEC  FROMDS(myset.data)  TODS('yourid.yourset.data')  MOD\n\n\n  3.  Copy data from MYSET.TEXT to file name OUTDD2:\n\n        SAFEC  FROMDS(myset.text)  TOFILE(outdd2)\n\n\n  4.  CLIST to write three-line message, including your userid,\n      current date and time onto the end of 'YOURID.USAGE.DATA'.\n      The end of instream data is indicated by the word 'END':\n\n        PROC 0\n        SAFECOPY FROMDSNAME(*) TODATASET('yourid.usage.data') MOD\n        DATA ADDED BY &SYSUID\n        DATA WAS ADDED ON &SYSDATE\n        AT &SYSTIME\n        END\n        EXIT\n\n\n)M\n))Messages issued by SAFECOPY are:\n\n))SCY0000I - COPY OPERATION COMPLETE\n           Normal end of copy operation.\n\n))SCY0004E - 'TO' DATASET OR FILE NAME IS REQUIRED\n           Either TODATASET or TODSNAME or TOFILE or TODDNAME must be\n           used.\n\n))SCY0008E - UNABLE TO ALLOCATE 'TO' FILE/DD NAME\n           SAFECOPY was not able to use the name designated in the\n           TOFILE or TODDNAME operand.  This message should be\n           preceeded by another explaining the cause of the failure.\n\n))SCY000CE - UNABLE TO ALLOCATE 'TO' DATASET NAME\n           SAFECOPY was not able to use the name designated in the\n           TODSNAME or TODATASET operand.  This message should be\n           preceeded by another explaining the cause of the failure.\n\n))SCY0010E - UNABLE TO ALLOCATE 'FROM' DATASET NAME\n           SAFECOPY was not able to use the name designated in the\n           FROMDSNAME or FROMDATASET operand.  This message should be\n           preceeded by another explaining the cause of the failure.\n\n))SCY0014E - UNABLE TO ALLOCATE 'FROM' FILE/DD NAME\n           SAFECOPY was not able to use the name designated in the\n           FROMFILE or FROMDDNAME operand.  This message should be\n           preceeded by another explaining the cause of the failure.\n\n))SCY0018E - 'FROM' DATASET OR FILE NAME IS REQUIRED\n           Either FROMDATASET or FROMDSNAME or FROMFILE or FROMDDNAME\n           must be used.\n\n))SCY001CE - UNABLE TO OPEN INPUT FILE\n           Input file failed to open.  Call systems programmer.\n\n))SCY0020E - UNABLE TO OPEN OUTPUT FILE\n           Output file failed to open.  Call systems programmer.\n\n))SCY0024E - UNABLE TO CLOSE INPUT FILE\n           Input file failed to close.  LOGOFF, then call systems\n           programmer.\n\n))SCY0028E - UNABLE TO CLOSE OUTPUT FILE\n           Output file failed to close.  LOGOFF, then call systems\n           programmer.\n\n))SCY002CE - UNABLE TO READ DATA FROM TERMINAL OR CLIST\n           Flow of data from the terminal was interrupted.  Retry.  If\n           problem persists, call systems programmer.\n\n))SCY0030E - UNABLE TO PROCESS INPUT OR OUTPUT RECORD FORMAT\n           Input and output formats must be fixed or variable.  One or\n           both are not.  This condition will also occur if the TOFILE\n           or TODDNAME operand is used, and the file name it\n           designates has been allocated to the terminal.\n\n))SCY0034E - UNABLE TO CONVERT FROM INPUT TO OUTPUT RECORD FORMAT\n           Internal error.  Call systems programmer.\n\n))SCY0038E - 'TO' MEMBER NAME IS REQUIRED.  DATASET IS PARTITIONED.\n           If the dataset designated by TODSNAME or TODATASET is\n           partitioned, or if the dataset allocated to the file name\n           designated by TOFILE or TODD is partitioned, a member name\n           must be supplied.\n\n))SCY003CE - 'FROM' MEMBER NAME IS REQUIRED.  DATSET IS PARTITIONED.\n           If the dataset designated by FROMDSNAME or FROMDATASET is\n           partitioned, or if the dataset allocated to the file name\n           designated by FROMFILE or FROMDD is partitioned, a member\n           name must be supplied.\n\n))SCY0040E - 'MOD' IS INVALID WHEN COPYING INTO A PARTITIONED DATASET\n           MOD is only valid for adding data onto the end of a\n           sequential dataset.\n\n))SCY0044E - 'FROM' AND 'TO' DATASETS MUST BE DIFFERENT\n           Data cannot be copied from a dataset onto itself.  Also,\n           data cannot be copied from one member of a partitioned\n           dataset to another member of the same partitioned dataset.\n           An intermediate dataset must be used.\n\n))SCY0048E - RECORD TOO SHORT FOR LINE NUMBER.  USE 'NONUM.'\n           The record length of the input or output output data is too\n           short to contain an 8-digit line number.  Minimum record\n           length for fixed length records is 8.  Minimum length for\n           variable length records is 12.  Data may still be copied,\n           as is, by using the 'NONUM' operand.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#SAFECOP": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\xe0\\x00\\xe0\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 224, "newlines": 224, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n     SAFECOPY is a copy command which enables several users to update\n     the same dataset simultaneously, without conflicting with each\n     other or with users who are reading the dataset.  SAFECOPY is\n     especially useful in CLISTs which write to a common dataset.\n\n)X Syntax -\n\n     SAFECOPY  FROMDSNAME(dsname|*)   TODSNAME(dsname)                  TS04902\n     SAFEC     FROMDATASET(dsname|*)  TODATASET(dsname)                 TS04902\n               FROMFILE(filename)     TOFILE(filename)\n               FROMDDNAME(filename)   TODDNAME(filename)\n\n               OLD   NONUM   NOTIFY\n               MOD   NUM     NONOTIFY\n\n\n     REQUIRED:  1.  FROMDSNAME or FROMDATASET or FROMFILE or FROMDDNAME\n                2.  TODSNAME or TODATASET or TOFILE or TODDNAME\n\n     DEFAULTS:  1.  OLD\n                2.  NONUM\n                3.  NOTIFY\n\n)O Operands -\n\n))FROMDSNAME(dsname|*)\n    The name of the dataset from which the data is to be copied.\n    'dsname' may be the name of a member of a partitioned dataset.\n    The use of an asterisk (*) indicates that the data will come from\n    the timesharing terminal, or from instream data in a CLIST.\n\n    NOTE:  When using FROMDSNAME(*), the end of the input data is\n           signalled by a null line, or the characters 'END'.\n           See examples in this HELP document.\n\n))FROMDATASET(dsname|*)\n    Means the same thing as FROMDSNAME.\n\n))FROMFILE(filename)\n    The name of the preallocated file from which the data is to be\n    copied.  Some files are allocated automatically during LOGON.\n    After LOGON, you can allocate files dynamically with the ALLOCATE\n    command.\n\n))FROMDDNAME(filename)\n    Means the same thing as FROMFILE.\n\n))TODSNAME(dsname)\n    The name of the dataset to which the data is to be copied.\n    'dsname' may be the name of a member of a partitioned dataset.\n\n    NOTE:  This dataset may be shared with other users.\n\n))TODATASET(dsname)\n    Means the same thing as TODSNAME.\n\n))TOFILE(filename)\n    The name of the preallocated file to which the data is to be\n    copied.  Some files are allocated automatically during LOGON.\n    After LOGON, you can allocate files dynamically with the ALLOCATE\n    command.\n\n))TODDNAME(filename)\n    Means the same thing as TOFILE.\n\n))OLD\n    The data copied into the output dataset will REPLACE data which is\n    already there.  You have the choice of OLD or MOD.\n\n    NOTE:  OLD is the default.\n\n))MOD\n    The data copied into the output dataset will be ADDED ONTO THE END\n    of data which is already there.  You have the choice of OLD or MOD.\n\n    NOTE:  MOD is invalid if you are copying into a member of a\n           partitioned dataset.\n\n))NUM\n    Indicates that the data contains line numbers.  When copying data,\n    the line numbers may be physically moved to conform to the output\n    dataset's record format.\n\n))NONUM\n    Indicates that the data does not contain line numbers.  All data\n    will be copied as is, without special processing of line number\n    fields.\n\n    NOTE:  NONUM is the default.\n\n))NOTIFY\n    Indicates that message SCY0000I is to be printed if the SAFECOPY\n    operation is successful.\n\n    NOTE:  NOTIFY is the default.\n\n))NONOTIFY\n    Indicates that message SCY0000I is not to be printed if the\n    SAFECOPY operation is successful.\n\n\n))EXAMPLES -\n\n  1.  Copy MYSET.TEXT into member MEM1 of 'YOURID.YOURLIB.TEXT':\n\n        SAFEC  FROMDS(myset.text)  TODS('yourid.yourlib.text(mem1)')\n\n\n  2.  Add data from MYSET.DATA onto the end of data already in\n     'YOURID.YOURSET.DATA':\n\n        SAFEC  FROMDS(myset.data)  TODS('yourid.yourset.data')  MOD\n\n\n  3.  Copy data from MYSET.TEXT to file name OUTDD2:\n\n        SAFEC  FROMDS(myset.text)  TOFILE(outdd2)\n\n\n  4.  CLIST to write three-line message, including your userid,\n      current date and time onto the end of 'YOURID.USAGE.DATA'.\n      The end of instream data is indicated by the word 'END':\n\n        PROC 0\n        SAFECOPY FROMDSNAME(*) TODATASET('yourid.usage.data') MOD\n        DATA ADDED BY &SYSUID\n        DATA WAS ADDED ON &SYSDATE\n        AT &SYSTIME\n        END\n        EXIT\n\n\n)M\n))Messages issued by SAFECOPY are:\n\n))SCY0000I - COPY OPERATION COMPLETE\n           Normal end of copy operation.\n\n))SCY0004E - 'TO' DATASET OR FILE NAME IS REQUIRED\n           Either TODATASET or TODSNAME or TOFILE or TODDNAME must be\n           used.\n\n))SCY0008E - UNABLE TO ALLOCATE 'TO' FILE/DD NAME\n           SAFECOPY was not able to use the name designated in the\n           TOFILE or TODDNAME operand.  This message should be\n           preceeded by another explaining the cause of the failure.\n\n))SCY000CE - UNABLE TO ALLOCATE 'TO' DATASET NAME\n           SAFECOPY was not able to use the name designated in the\n           TODSNAME or TODATASET operand.  This message should be\n           preceeded by another explaining the cause of the failure.\n\n))SCY0010E - UNABLE TO ALLOCATE 'FROM' DATASET NAME\n           SAFECOPY was not able to use the name designated in the\n           FROMDSNAME or FROMDATASET operand.  This message should be\n           preceeded by another explaining the cause of the failure.\n\n))SCY0014E - UNABLE TO ALLOCATE 'FROM' FILE/DD NAME\n           SAFECOPY was not able to use the name designated in the\n           FROMFILE or FROMDDNAME operand.  This message should be\n           preceeded by another explaining the cause of the failure.\n\n))SCY0018E - 'FROM' DATASET OR FILE NAME IS REQUIRED\n           Either FROMDATASET or FROMDSNAME or FROMFILE or FROMDDNAME\n           must be used.\n\n))SCY001CE - UNABLE TO OPEN INPUT FILE\n           Input file failed to open.  Call systems programmer.\n\n))SCY0020E - UNABLE TO OPEN OUTPUT FILE\n           Output file failed to open.  Call systems programmer.\n\n))SCY0024E - UNABLE TO CLOSE INPUT FILE\n           Input file failed to close.  LOGOFF, then call systems\n           programmer.\n\n))SCY0028E - UNABLE TO CLOSE OUTPUT FILE\n           Output file failed to close.  LOGOFF, then call systems\n           programmer.\n\n))SCY002CE - UNABLE TO READ DATA FROM TERMINAL OR CLIST\n           Flow of data from the terminal was interrupted.  Retry.  If\n           problem persists, call systems programmer.\n\n))SCY0030E - UNABLE TO PROCESS INPUT OR OUTPUT RECORD FORMAT\n           Input and output formats must be fixed or variable.  One or\n           both are not.  This condition will also occur if the TOFILE\n           or TODDNAME operand is used, and the file name it\n           designates has been allocated to the terminal.\n\n))SCY0034E - UNABLE TO CONVERT FROM INPUT TO OUTPUT RECORD FORMAT\n           Internal error.  Call systems programmer.\n\n))SCY0038E - 'TO' MEMBER NAME IS REQUIRED.  DATASET IS PARTITIONED.\n           If the dataset designated by TODSNAME or TODATASET is\n           partitioned, or if the dataset allocated to the file name\n           designated by TOFILE or TODD is partitioned, a member name\n           must be supplied.\n\n))SCY003CE - 'FROM' MEMBER NAME IS REQUIRED.  DATSET IS PARTITIONED.\n           If the dataset designated by FROMDSNAME or FROMDATASET is\n           partitioned, or if the dataset allocated to the file name\n           designated by FROMFILE or FROMDD is partitioned, a member\n           name must be supplied.\n\n))SCY0040E - 'MOD' IS INVALID WHEN COPYING INTO A PARTITIONED DATASET\n           MOD is only valid for adding data onto the end of a\n           sequential dataset.\n\n))SCY0044E - 'FROM' AND 'TO' DATASETS MUST BE DIFFERENT\n           Data cannot be copied from a dataset onto itself.  Also,\n           data cannot be copied from one member of a partitioned\n           dataset to another member of the same partitioned dataset.\n           An intermediate dataset must be used.\n\n))SCY0048E - RECORD TOO SHORT FOR LINE NUMBER.  USE 'NONUM.'\n           The record length of the input or output output data is too\n           short to contain an 8-digit line number.  Minimum record\n           length for fixed length records is 8.  Minimum length for\n           variable length records is 12.  Data may still be copied,\n           as is, by using the 'NONUM' operand.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#SYSD": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00%\\x00%\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 37, "newlines": 37, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n     SYSDSN is a command for finding out which jobs and TSO users have\n     a dataset allocated, or are waiting for allocation.\n\n)X Syntax -\n\n     SYSDSN    dsname                                                   TS04902\n     SYSD                                                               TS04902\n\n     REQUIRED:  1.  None, dsname will be prompted for.\n     ALIAS:     SYSD\n\n)O Operands -\n\n))dsname\n    The name of the dataset which is to be checked.  SYSDSN will\n    check to see which jobs or TSO users are using this name.\n    Put single quotes (') around the name if you do not want your\n    TSO userid added to the front end of the name.\n\n))EXAMPLE:\n    1.  Find out which jobs and TSO users have your dataset XYZ.DATA\n    allocated.\n                   SYSDSN  XYZ.DATA\n\n    2.  Find out which jobs and TSO users have 'ABC1234.TEST.DATA'\n    allocated.\n                   SYSDSN  'ABC1234.TEST.DATA'\n\n    On the screen will be listed the following information for each\n    job or TSO user using or waiting to use your dataset.\n\n        Job Name:  The name of the job or TSO userid.\n           Scope:  STEP, SYSTEM, SYSTEMS or GLOBAL.\n            Type:  SHR or EXCL.\n          Status:  USING or WAITING.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#SYSDSN": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00%\\x00%\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 37, "newlines": 37, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n     SYSDSN is a command for finding out which jobs and TSO users have\n     a dataset allocated, or are waiting for allocation.\n\n)X Syntax -\n\n     SYSDSN    dsname                                                   TS04902\n     SYSD                                                               TS04902\n\n     REQUIRED:  1.  None, dsname will be prompted for.\n     ALIAS:     SYSD\n\n)O Operands -\n\n))dsname\n    The name of the dataset which is to be checked.  SYSDSN will\n    check to see which jobs or TSO users are using this name.\n    Put single quotes (') around the name if you do not want your\n    TSO userid added to the front end of the name.\n\n))EXAMPLE:\n    1.  Find out which jobs and TSO users have your dataset XYZ.DATA\n    allocated.\n                   SYSDSN  XYZ.DATA\n\n    2.  Find out which jobs and TSO users have 'ABC1234.TEST.DATA'\n    allocated.\n                   SYSDSN  'ABC1234.TEST.DATA'\n\n    On the screen will be listed the following information for each\n    job or TSO user using or waiting to use your dataset.\n\n        Job Name:  The name of the job or TSO userid.\n           Scope:  STEP, SYSTEM, SYSTEMS or GLOBAL.\n            Type:  SHR or EXCL.\n          Status:  USING or WAITING.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#XP": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00/\\x00/\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 47, "newlines": 47, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n     XPRINT is a command for producing a hexadecimal\n     'over-under' listing of a sequential file, or member of\n     a partitioned dataset.\n\n\n)X Syntax -\n\n     XPRINT  dataset-name  record-limit\n     XP\n\n     ALIAS: XP\n\n     REQUIRED:  dataset-name\n     DEFAULTS:  none\n\n)O Operands -\n\n))dataset-name -\n    The name of the dataset to be printed.  If single quotes\n    (') are placed around the name, it will be used as is.\n    If not, the TSO user prefix will be added to the front\n    of the name.\n\n))record-limit\n    A decimal number (0-999) to limit the number of input\n    records XPRINT will print from the file.\n\n\n))EXAMPLES:\n\n     (Assume your TSO user prefix is ABCD123)\n\n\n        1.  XPRINT  MYPROJ.DATA\n                Creates a listing of 'ABCD123.MYPROJ.DATA'.\n\n        2.  XPRINT  MYPROJ.DATA  50\n                Creates a listing of 'ABCD123.MYPROJ.DATA',\n                using a limit of 50 input records.\n\n        3.  XPRINT  'WXYZ789.USERLIB.CNTL(ALPHA)'\n                Creates a listing of library member ALPHA,\n                in library USERLIB.CNTL belonging to user\n                WXYZ789.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#XPRINT": {"ttr": 1296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00/\\x00/\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 47, "newlines": 47, "modlines": 0, "user": "HOFFMAN"}, "text": ")F Function -\n\n     XPRINT is a command for producing a hexadecimal\n     'over-under' listing of a sequential file, or member of\n     a partitioned dataset.\n\n\n)X Syntax -\n\n     XPRINT  dataset-name  record-limit\n     XP\n\n     ALIAS: XP\n\n     REQUIRED:  dataset-name\n     DEFAULTS:  none\n\n)O Operands -\n\n))dataset-name -\n    The name of the dataset to be printed.  If single quotes\n    (') are placed around the name, it will be used as is.\n    If not, the TSO user prefix will be added to the front\n    of the name.\n\n))record-limit\n    A decimal number (0-999) to limit the number of input\n    records XPRINT will print from the file.\n\n\n))EXAMPLES:\n\n     (Assume your TSO user prefix is ABCD123)\n\n\n        1.  XPRINT  MYPROJ.DATA\n                Creates a listing of 'ABCD123.MYPROJ.DATA'.\n\n        2.  XPRINT  MYPROJ.DATA  50\n                Creates a listing of 'ABCD123.MYPROJ.DATA',\n                using a limit of 50 input records.\n\n        3.  XPRINT  'WXYZ789.USERLIB.CNTL(ALPHA)'\n                Creates a listing of library member ALPHA,\n                in library USERLIB.CNTL belonging to user\n                WXYZ789.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE160": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x004\\x01\\x18\\x04O\\x01\\x18\\x04O\\x14\\x02\\x00\\xf1\\x00\\xf1\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-02-13T00:00:00", "modifydate": "2018-02-13T14:02:34", "lines": 241, "newlines": 241, "modlines": 0, "user": "CBT-496"}, "text": "//***FILE 160 IS FROM MR CHUCK HOFFMAN OF GTE LABS AND THE          *   FILE 160\n//*           COMMONWEALTH OF MASSACHUSETTS AND CONTAINS SEVERAL    *   FILE 160\n//*           TSO COMMAND PROCESSORS AND MACROS.  THE FOLLOWING     *   FILE 160\n//*           ARE CONTAINED IN THIS DATASET :                       *   FILE 160\n//*                                                                 *   FILE 160\n//*           email:  sbgolob@cbttape.org                           *   FILE 160\n//*                                                                 *   FILE 160\n//*          BULLETIN - A COMMAND FOR PUTTING UP NICELY FORMATTED   *   FILE 160\n//*                     BULLETIN MESSAGES INTO THE SYSTEM           *   FILE 160\n//*                     BROADCAST DATASET.  THE COMMAND HAS THE     *   FILE 160\n//*                     ABILITY TO ADD AND DROP BULLETIN MESSAGES   *   FILE 160\n//*                     ON SELECTED DATES.                          *   FILE 160\n//*                                                                 *   FILE 160\n//*          DSNCHECK - A COMMAND TO CHECK FOR THE EXISTENCE OF A   *   FILE 160\n//*                     CATALOGED DATASET NAME, AND, OPTIONALLY,    *   FILE 160\n//*                     TO CHECK FOR THE EXISTENCE OF A MEMBER      *   FILE 160\n//*                     WITHIN A PDS.  SETS &LASTCC FOR CLIST       *   FILE 160\n//*                     WRITERS.                                    *   FILE 160\n//*                                                                 *   FILE 160\n//*          FREEALL  - A COMPLETELY NEW FREEALL, WITH LOTS OF      *   FILE 160\n//*                     NICE OPTIONS, LIKE THE EXCEPT OPERAND.      *   FILE 160\n//*                     USES SVC-99, AND CAN BE MAINTAINED BY       *   FILE 160\n//*                     MORE JUNIOR SYSTEMS PROGRAMMERS.            *   FILE 160\n//*                     COMPATIBLE WITH J/TIP.  (MODIFIED BY        *   FILE 160\n//*                     JEFFREY R. BROIDO TO ADD SEVERAL OPTIONS)   *   FILE 160\n//*                     (OLDER VERSION IS MEMBER FREEALL0)          *   FILE 160\n//*                                                                 *   FILE 160\n//*          INSTREAM - THE INSTREAM COMMAND IS USED TO CREATE      *   FILE 160\n//*                     80-BYTE CONTROL CARD IMAGES IN A            *   FILE 160\n//*                     TEMPORARY FILE.  THIS COMMAND CAN BE RUN    *   FILE 160\n//*                     UNDER CLIST CONTROL, WITH SYMBOLIC          *   FILE 160\n//*                     SUBSTITUTION OF VARIABLES ALLOWED.          *   FILE 160\n//*                     INSTREAM USES VIO INSTEAD OF DATASETS,      *   FILE 160\n//*                     AND USES SYSTEM GENERATED NAMES INSTEAD     *   FILE 160\n//*                     OF CATALOGING.                              *   FILE 160\n//*                                                                 *   FILE 160\n//*          ISPFPROF - THIS IS AN ALIAS OF THE PDF COMMAND         *   FILE 160\n//*                     PROCESSOR (SEE DESCRIPTION, BELOW).  WHEN   *   FILE 160\n//*                     USING THIS ALIAS, THE PROFILE DATASET       *   FILE 160\n//*                     WILL BE ALLOCATED, BUT THE PROGRAM WILL     *   FILE 160\n//*                     NOT ENTER ISPF/PDF.                         *   FILE 160\n//*                                                                 *   FILE 160\n//*          LIBCALL  - LIBCALL TRANSFERS CONTROL TO MODULES WITH   *   FILE 160\n//*                     A 'CALL' TYPE OF PARAMETER LIST, WITH A     *   FILE 160\n//*                     'STEPLIB' OPTION.  LIBCALL ALSO CAN         *   FILE 160\n//*                     ACCEPT PROGRAM PARAMETERS IN LOWER CASE.    *   FILE 160\n//*                                                                 *   FILE 160\n//*          NEWSPACE - A COMMAND FOR EASILY CREATING NEW,          *   FILE 160\n//*                     MODERATELY SIZED, DATASETS AND LIBRARIES.   *   FILE 160\n//*                     IT WAS WRITTEN WITH BEGINNERS IN MIND.      *   FILE 160\n//*                     CAN BE EXECUTED FROM THE ISPF/PDF COMMAND   *   FILE 160\n//*                     LINE (FOR ALLOCATING THAT DATASET YOU       *   FILE 160\n//*                     SUDDENLY NEED).                             *   FILE 160\n//*                                                                 *   FILE 160\n//*          PDF      - THE PDF COMMAND IS USED TO PREALLOCATE      *   FILE 160\n//*                     THE ISPF PROFILE DATASET, THEN BRING THE    *   FILE 160\n//*                     USER INTO ISPF/PDF.  PDF IS A FRONT END     *   FILE 160\n//*                     WHICH USES THE ISRPCP ENTRY POINT OF        *   FILE 160\n//*                     ISPF/PDF, ENABLING THE USER TO SELECT       *   FILE 160\n//*                     OPTIONAL PANEL NUMBERS WHEN INVOKING THE    *   FILE 160\n//*                     PRODUCT.                                    *   FILE 160\n//*                                                                 *   FILE 160\n//*                    THE PDF COMMAND IS USED TO ENTER THE         *   FILE 160\n//*                    ISPF PROGRAM DEVELOPMENT FACILITY            *   FILE 160\n//*                    (PDF).  IT IS A FRONT END FOR ISPF/PDF.      *   FILE 160\n//*                                                                 *   FILE 160\n//*                     SYNTAX -                                    *   FILE 160\n//*                          PDF                                    *   FILE 160\n//*                              OPTION TEST/TESTX/TRACE/TRACEX     *   FILE 160\n//*                     OPERANDS:                                   *   FILE 160\n//*                       REQUIRED - NONE                           *   FILE 160\n//*                       DEFAULTS - NONE                           *   FILE 160\n//*                       OPTIONAL - OPTION, TEST, TESTX, TRACE,    *   FILE 160\n//*                                  TRACEX                         *   FILE 160\n//*                                                                 *   FILE 160\n//*                    OPTION   - AN INITIAL OPTION THAT MAY BE     *   FILE 160\n//*                               ENTERED TO BYPASS THE FIRST       *   FILE 160\n//*                               DISPLAY OF THE PRIMARY OPTION     *   FILE 160\n//*                               MENU AND GO DIRECTLY TO THE       *   FILE 160\n//*                               OPTION YOU SELECT.  (THIS IS      *   FILE 160\n//*                               NOT A KEYWORD PARAMETER.          *   FILE 160\n//*                               SIMPLY ENTER THE OPTION           *   FILE 160\n//*                               NUMBER, OR OMIT TO DISPLAY THE    *   FILE 160\n//*                               PRIMARY OPTION MENU.)  FOR        *   FILE 160\n//*                               EXAMPLE, TYPING \"PDF 3.2\" IN      *   FILE 160\n//*                               TSO WILL TAKE YOU DIRECTLY TO     *   FILE 160\n//*                               THE ISPF/PDF DATASET UTILITY      *   FILE 160\n//*                               OPTION.                           *   FILE 160\n//*                                                                 *   FILE 160\n//*                    TEST     - PDF IS TO BE RUN IN TEST MODE.    *   FILE 160\n//*                               TEST MODE INCLUDES:               *   FILE 160\n//*                                                                 *   FILE 160\n//*                                1. RE-READING FROM DISK          *   FILE 160\n//*                                   ALL PANELS AND                *   FILE 160\n//*                                   MESSAGES.  THIS               *   FILE 160\n//*                                   ENHANCES THE ABILITY TO       *   FILE 160\n//*                                   TEST PANELS AND               *   FILE 160\n//*                                   MESSAGES IN THE SAME          *   FILE 160\n//*                                   PDF SESSION THAT THEY         *   FILE 160\n//*                                   ARE MODIFIED.                 *   FILE 160\n//*                                                                 *   FILE 160\n//*                                2. DISABLING ABEND               *   FILE 160\n//*                                   RECOVERY.  THIS ALLOWS        *   FILE 160\n//*                                   ABENDS TO BE TRACKED          *   FILE 160\n//*                                   DOWN USING TSO TEST.          *   FILE 160\n//*                                                                 *   FILE 160\n//*                                3. DISABLING ATTENTION KEY       *   FILE 160\n//*                                   HANDLING.  THIS ALLOWS        *   FILE 160\n//*                                   THE ATTENTION KEY TO BE       *   FILE 160\n//*                                   USED TO ENTER TSO TEST.       *   FILE 160\n//*                                                                 *   FILE 160\n//*                    TESTX    - PDF IS TO BE RUN IN TEST          *   FILE 160\n//*                               MODE EXTENDED.  IN ADDITION       *   FILE 160\n//*                               TO TEST MODE, ANY LINES           *   FILE 160\n//*                               THAT ARE WRITTEN TO THE LOG       *   FILE 160\n//*                               FILE ARE ALSO DISPLAYED ON        *   FILE 160\n//*                               THE DISPLAY SCREEN.               *   FILE 160\n//*                                                                 *   FILE 160\n//*                    TRACE    - PDF IS TO BE RUN IN TRACE         *   FILE 160\n//*                               MODE.  TRACE MODE INCLUDES        *   FILE 160\n//*                               ALL OF THE FUNCTIONS OF           *   FILE 160\n//*                               TEST MODE.  IN ADDITION,          *   FILE 160\n//*                               ALL ISPEXEC SERVICE               *   FILE 160\n//*                               INVOCATIONS FROM A DIALOG         *   FILE 160\n//*                               WILL BE LOGGED.                   *   FILE 160\n//*                                                                 *   FILE 160\n//*                    TRACEX   - PDF IS TO BE RUN IN TRACE         *   FILE 160\n//*                               MODE EXTENDED.  IN ADDITION       *   FILE 160\n//*                               TO TRACE MODE, ANY LINES          *   FILE 160\n//*                               THAT ARE WRITTEN TO THE LOG       *   FILE 160\n//*                               FILE ARE ALSO DISPLAYED ON        *   FILE 160\n//*                               THE DISPLAY SCREEN.               *   FILE 160\n//*                                                                 *   FILE 160\n//*                    DETAILED INFORMATION:                        *   FILE 160\n//*                                                                 *   FILE 160\n//*                          PDF FIRST FREES DD(ISPPROF),           *   FILE 160\n//*                          THEN TRIES TO ALLOCATE                 *   FILE 160\n//*                          DD(ISPPROF) TO                         *   FILE 160\n//*                          DSN('&SYSPREF..ISPF.PROFILE')          *   FILE 160\n//*                          WITH DISP=(OLD,KEEP,KEEP).  IF         *   FILE 160\n//*                          IT CANNOT ALLOCATE BECAUSE OF          *   FILE 160\n//*                          LOCATE ERROR 1708 (NOT FOUND IN        *   FILE 160\n//*                          CATALOG), IT ALLOCATES THE             *   FILE 160\n//*                          DATASET WITH                           *   FILE 160\n//*                          DISP=(NEW,CATLG,CATLG),                *   FILE 160\n//*                          UNIT=SYSTSO,                           *   FILE 160\n//*                          DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,   *   FILE 160\n//*                          DSORG=PO), SPACE=(TRK,(1,2,10)).       *   FILE 160\n//*                          FOR ANY OTHER ALLOCATION ERROR         *   FILE 160\n//*                          CODE, THE PROGRAM TERMINATES AND       *   FILE 160\n//*                          GIVES THE NORMAL IKJEFF18 ERROR        *   FILE 160\n//*                          MESSAGES.                              *   FILE 160\n//*                                                                 *   FILE 160\n//*                          PDF MAKES A NEW COPY OF THE            *   FILE 160\n//*                          COMMAND BUFFER (CBUF) AND THE          *   FILE 160\n//*                          COMMAND PROCESSOR PARAMETER LIST       *   FILE 160\n//*                          (CPPL), POINTING THE NEW CPPL TO       *   FILE 160\n//*                          THE NEW CBUF.  IF THE USER USED        *   FILE 160\n//*                          'SPF' RATHER THAN 'PDF,' PDF           *   FILE 160\n//*                          WILL PUT OUT AN INFO MESSAGE           *   FILE 160\n//*                          SAYING THAT 'SPF' HAS BEEN             *   FILE 160\n//*                          REPLACED BY 'PDF.'  PDF THEN           *   FILE 160\n//*                          PLACES THE LITERAL 'ISP' INTO          *   FILE 160\n//*                          THE NEW CBUF BEGINNING AT THE          *   FILE 160\n//*                          LOCATION OF THE FIRST NONBLANK         *   FILE 160\n//*                          CHARACTER OF THE COMMAND TEXT.         *   FILE 160\n//*                          IF DATASET                             *   FILE 160\n//*                          '&SYSPREF..ISPF.PROFILE' WAS           *   FILE 160\n//*                          ALLOCATED NEW, MESSAGES                *   FILE 160\n//*                          CONCERNING THE NEW DATASET ARE         *   FILE 160\n//*                          WRITTEN TO THE TERMINAL.               *   FILE 160\n//*                                                                 *   FILE 160\n//*                          PDF THEN POINTS R1 TO THE NEW          *   FILE 160\n//*                          CPPL, AND ATTACHES ISRPCP.  IT         *   FILE 160\n//*                          THEN WAITS FOR ISRPCP TO               *   FILE 160\n//*                          COMPLETE, DETACHES ISRPCP, FREES       *   FILE 160\n//*                          STORAGE AND TERMINATES.                *   FILE 160\n//*                                                                 *   FILE 160\n//*                        RETURN CODES:                            *   FILE 160\n//*                          IF ISP EXECUTES, THE CODE              *   FILE 160\n//*                          RETURNED IS THE CODE FROM ISP.         *   FILE 160\n//*                          OTHERWISE THE RETURN CODE IS 12.       *   FILE 160\n//*                                                                 *   FILE 160\n//*          SAFECOPY - THIS PROGRAM IS A TSO COMMAND PROCESSOR     *   FILE 160\n//*                     WHICH ENABLES MANY USERS TO COPY DATA INTO  *   FILE 160\n//*                     THE SAME DATASET SIMULTANEOUSLY WITHOUT     *   FILE 160\n//*                     CONFLICTING WITH EACH OTHER.  INPUT DATA    *   FILE 160\n//*                     MAY COME FROM A DATASET, FROM THE           *   FILE 160\n//*                     TERMINAL, OR FROM DATA STACKED INSTREAM IN  *   FILE 160\n//*                     A CLIST.                                    *   FILE 160\n//*                                                                 *   FILE 160\n//*                     SAFECOPY IS ESPECIALLY USEFUL IN CLISTS     *   FILE 160\n//*                     WHICH WRITE TO A COMMON DATASET.            *   FILE 160\n//*                                                                 *   FILE 160\n//*                     SAFECOPY ACCOMPLISHES THIS BY PERFORMING A  *   FILE 160\n//*                     SYSTEM ENQUEUE BEFORE WRITING TO THE        *   FILE 160\n//*                     DATASET.  MAJOR NAME IS USERDSN, MINOR      *   FILE 160\n//*                     NAME IS THE NAME OF THE DATASET INTO WHICH  *   FILE 160\n//*                     SAFECOPY IS WRITING.                        *   FILE 160\n//*                                                                 *   FILE 160\n//*                     INPUT AND OUTPUT CAN BE DESIGNATED BY       *   FILE 160\n//*                     DATASET NAME, OR BY FILE/DD NAME.  IF THE   *   FILE 160\n//*                     OUTPUT DATASET IS NOT PARTITIONED, THE MOD  *   FILE 160\n//*                     OPERAND WILL CAUSE THE USE OF THE EXTEND    *   FILE 160\n//*                     OPERAND OF OPEN, ALLOWING DATA TO BE ADDED  *   FILE 160\n//*                     ON TO THE END OF A SEQUENTIAL DATASET.      *   FILE 160\n//*                                                                 *   FILE 160\n//*                     THE DEFAULT IS NONUM.  THE USE OF THE NUM   *   FILE 160\n//*                     OPERAND WILL CAUSE THE PHYSICAL RELOCATION  *   FILE 160\n//*                     OF LINE NUMBERS WHEN SAFECOPYING BETWEEN    *   FILE 160\n//*                     VARIABLE AND FIXED RECORD LENGTH DATASETS,  *   FILE 160\n//*                     OR BETWEEN FIXED RECORD LENGTH DATASETS OF  *   FILE 160\n//*                     DIFFERENT LOGICAL RECORD LENGTHS.           *   FILE 160\n//*                                                                 *   FILE 160\n//*          SYSDSN   - A COMMAND TO LIST THE NAMES OF EVERYONE     *   FILE 160\n//*                     WHO HAS A DATASET ALLOCATED, OR IS          *   FILE 160\n//*                     WAITING FOR ALLOCATION.  VERY USEFUL        *   FILE 160\n//*                     AFTER 'DATASET IN USE' AND 'WAITING FOR     *   FILE 160\n//*                     DATASETS' MESSAGES.                         *   FILE 160\n//*                                                                 *   FILE 160\n//*          XPRINT   - A FRONT-END COMMAND PROCESSOR FOR A         *   FILE 160\n//*                     USER-WRITTEN HEXADECIMAL LISTING UTILITY    *   FILE 160\n//*                     PROGRAM.  ALLOCATES THE INPUT AND OUTPUT    *   FILE 160\n//*                     FILES, THEN EXECUTES THE UTILITY.  LOADS    *   FILE 160\n//*                     THE UTILITY IF IT IS NOT ALREADY LINKED     *   FILE 160\n//*                     IN.                                         *   FILE 160\n//*                                                                 *   FILE 160\n//*       ADDITIONALLY, THIS PDS CONTAINS THE FOLLOWING             *   FILE 160\n//*       MACROS USED BY SEVERAL OF THE COMMAND PROCESSORS:         *   FILE 160\n//*                                                                 *   FILE 160\n//*          EQ$R     - REGISTER EQUATES.                           *   FILE 160\n//*          GTEDAALC - EXECUTES DYNAMIC ALLOCATION AND DAIRFAIL.   *   FILE 160\n//*          GTEDADAT - CREATES SVC99/IKJEFF18 CONTROL BLOCKS.      *   FILE 160\n//*          GTEDADOC - DOCUMENTATION FOR GTEDAXXX MACROS.          *   FILE 160\n//*          GTEDASET - LINKS SVC99/IKJEFF18 CONTROL BLOCKS         *   FILE 160\n//*                     TOGETHER.                                   *   FILE 160\n//*          LINKSAVE - LINKAGE CONVENTIONS UPON ENTRY TO A         *   FILE 160\n//*                     MODULE.                                     *   FILE 160\n//*          LINKBACK - LINKAGE CONVENTIONS UPON EXIT FROM A        *   FILE 160\n//*                     MODULE.                                     *   FILE 160\n//*                                                                 *   FILE 160\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BUCPY": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x05\\x00\\x05\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 5, "newlines": 5, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n    SELECT MEMBER=((#BULLETI,BULLETIN,R))            <== HELP MEMBER\n  COPY OUTDD=PROC,INDD=PDSIN\n  SELECT MEMBER=((BUSTC,BULLETIN,R),                 <== PROCLIB STC   X\n               (BUSTCDTA,BULLET01,R))                <== PROCLIB DATA\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUDOC": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\xd3\\x00\\xd3\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 211, "newlines": 211, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                         BULLETIN Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n    The BULLETIN command is used for maintenance of the bulletin\n    messages in the broadcast dataset.\n\n\n    Syntax -\n\n        BULLETIN   CLEAR(nn)  BROADCAST(dsn)\n                   NOCLEAR    NOBROADCAST\n\n\nDIRECTORY:\n\n    This PDS contains the following members relating to BULLETIN:\n\n    BUDOC    - This documentation.\n    BUJCL    - Non-SMP install jobstream.\n    #BULLETI - HELP member.\n    #BU      - Alias for HELP member.  Needed for IEBCOPY in\n               the non-SMP install.\n    BUSTC    - Procedure for nightly started task.\n    BUSTCDTA - SYSIN input data for started task.\n    BUCPY    - IEBCOPY control cards.  Used in non-SMP install.\n    BULNK    - LKED control cards.  Used in non-SMP install.\n    BULLETIN - Source program.\n    BUJEFTE2 - Sample SMP code for IKJEFTE2\n    BUISPTCM - Sample SMP code for ISPTCM\n\n    EQ$R     - Register equates, described below.\n    GTEDAALC - Dynamic allocation macro, described below.\n    GTEDADAT - Dynamic allocation macro, described below.\n    GTEDADOC - Documentation for dynamic allocation macros,\n               described below.\n    GTEDASET - Dynamic allocation macro, described below.\n    LINKBACK - Linkage conventions, described below.\n    LINKSAVE - Linkage conventions, described below.\n\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  The following non-IBM macros are used to assemble\n          BULLETIN. If you already have older versions in your\n          system, replace them with the ones from this PDS.\n\n            EQ$R     - Register equates.\n            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).\n            GTEDADAT - Create SVC99/IKJEFF18 control blocks.\n            GTEDASET - Link SVC99/IKJEFF18 control blocks together.\n            LINKBACK - Linkage conventions out.\n            LINKSAVE - Linkage conventions in.\n\n(  )  2.  The following macro is documentation for the GTEDAxxx\n          macros, above.  It is not used by BULLETIN, but should\n          be copied into your system.\n\n            GTEDADOC - Documentation of GTEDAxxx macros.\n\n(  )  3.  This command interfaces with SVC-34, the Console Operator\n          SVC.  To do so, the command must be authorized to\n          use the MODESET macro to change into supervisor state,\n          key zero.  This is usually done in one of two ways:\n\n          A.  Use an installation-provided SVC which changes the\n              JSCBAUTH bit in the JSCB.  This requires a minor\n              change to the source in member BULLETIN.\n          B.  Use this procedure:\n              (1)  Linkedit with parm AC=1, or control card\n                   SETCODE AC(1), into LINKLIB or a library on\n                   the APF list.\n              (2)  Add an entry into the APF command list in\n                   module IKJEFTE2, which is a CSECT in IKJEFT02.\n                   Sample code is in member BUJEFTE2.\n             ==>   This should be done by an MVS systems programmer.\n\n          There is much more detail in the comments in the source\n          in member BULLETIN.  Read the comments and choose an\n          authorization method.\n\n(  )  4.  This command uses the STIMER macro, so it will not run\n          correctly under ISPF.  Add an entry into ISPTCM.\n          Details are explained in the comments in the source in\n          member BULLETIN.  Sample code is in member BUISPTCM.\n          This ISPTCM entry will prevent ISPF from invoking\n          BULLETIN, and the user will get the same message as\n          when invoking other commands not supported under ISPF\n          (E.g. LOGON, ISPF, TEST).\n\n          ==>   This should be done by an MVS systems programmer.\n\n(  )  5.  Set the local variables at the beginning of the source\n          in member BULLETIN.  Comments explaining the variables\n          are further up in the source.  Your new system bulletin\n          dataset will be initialized in the next step.\n\n(  )  6.  Allocate an input dataset to match the name selected in\n          the previous step.  Attributes should be DSORG=FB,\n          LRECL=80, RECFM=PS.  Sample input data is in member\n          BUINPUT.  Copy the data into the new input dataset.  If\n          you use a name other than 'SYS1.BULLETIN.DATA':\n\n          A.  Change the name in member BUSTCDTA, which is the\n              input to the STC.\n          B.  Change the name in member #BULLETI, which is the\n              HELP member.\n\n(  )  7.  The STC distributed in member BUSTC must be installed\n          in a proclib available to JES.  If you choose to use a\n          library for the input data (member BUSTCDTA) other than\n          SYST.PROCLIB, edit the name in member BUSTC.\n\n(  )  8.  For a non-SMP install, run the jobstream in member\n          BUJCL of this PDS.  Recommended load libraries are:\n\n          A.  SYS1.LINKLIB\n          B.  SYS1.CMDLIB\n          C.  library named on the LNKLST\n\n          Note: For the bulletin command, this library must be\n                APF authorized.  Unless LPALIB is on the APF\n                list, BULLETIN will not run from LPALIB.\n\n          Note: For MVS/370, LINKLIB and the libraries on the\n                LNKLST are APF authorized, whether or not they\n                are on the APF list.  This is not true for\n                MVS/XA.\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, PROC library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles BULLETIN using the source in member\n              BULLETIN of this PDS.\n\n              Note: Access to SYS1.AMODGEN is required because\n                    BULLETIN uses the CVT macro.\n\n          B.  Linkedits BULLETIN into the selected load library.\n              Attributes are RENT, REUS, REFR, and AC=1.\n\n              Note:  If an installation-provided SVC will be used\n                     for authorization, change the control card\n                     in member BULNK to AC(0)\n\n          C.  IEBCOPYs member #BULLETI to the selected HELP\n              library, renaming it to BULLETIN.\n\n(  )      For an SMP install, follow your installation's procedures\n          for installation of a RENT, REUS, REFR, AC=1 module into\n          LPALIB, LINKLIB, CMDLIB, or another library on the\n          LNKLST, with the HELP member being installed as a\n          ++MAC into HELP or another library in the SYSHELP\n          concatenation.\n\n(  )  9.  If you have Dynamic BLDL, and already have a version\n          of BULLETIN installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n(  ) 10.  If you have ACF2 and are using command limiting lists,\n          and are not already running a version of BULLETIN, you\n          must do either one of the following:\n\n          A.  Remove the TSOCMDS entry from the LOGONID of selected\n              users.  Do this from the READY state by typing in:\n\n                   ACF\n                   LIST logonid\n                   CHANGE * TSOCMDS()\n                   END\n\n              Note:  Setting the ALLCMDS bit will not enable you\n                     to test BULLETIN, since the command has an\n                     eight character name.  ALLCMDS is limited to\n                     seven characters because the 'command list\n                     bypass character,' usually #, must be added\n                     to the command name.  When added to an eight\n                     character name, the resulting string of nine\n                     characters will not be recognized as a\n                     command by the terminal monitor program\n                     (TMP).\n\n          B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes BULLETIN available to everyone.\n\n                   $TSOCMD  (BULLETIN)\n\n(  ) 11.  Add the following automatic command to your system.  In\n          the example below, at 3:00 a.m. the started task in\n          proclib member BULLETIN (distributed in member BUSTC)\n          uses the input in proclib member BULLET01 (distributed\n          in member BUSTCDTA) to execute BULLETIN command.\n\n             $TA,T=03.00,'$VS,''START BULLETIN'''\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BUINPUT": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00$\\x00$\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 36, "newlines": 36, "modlines": 0, "user": "HOFFMAN"}, "text": "******************************************************************\n*                                                                *\n*  This is the input for TCC bulletin board.                     *\n*                                                                *\n*  Nightly, data will be selected from this dataset and copied   *\n*  into the system broadcast dataset.                            *\n*                                                                *\n*  The messages are created from 80-byte card images.            *\n*                                                                *\n*  The card type is designated by characters in the beginning    *\n*  of the card image.  Types can be in lower/UPPER case.         *\n*                                                                *\n*  '*'      = Comment.                                           *\n*  '-com'   = Comment.                                           *\n*  '-dates' = MM/DD/YY dates for message to begin and end.       *\n*             (Default is the previous -dates card.)             *\n*  blank    = Message text.  65-bytes, beginning with cc 2.      *\n*  '-end'   = End of message text.  Causes break line of hyphens.*\n*                                                                *\n******************************************************************\n*\n*....+....1....+....2....+....3....+....4....+....5....+....6....+\n-end\n                           TCC BULLETINS\n-end\n*\n*....+....1....+....2....+....3....+....4....+....5....+....6....+\n-dates 11/14/85 11/16/85\n The System will be unavailable Saturday, 11/16, 08:00-12:00,\n due to system testing.\n-end\n*\n*....+....1....+....2....+....3....+....4....+....5....+....6....+\n-dates 10/31/85 10/31/85\n Happy Halloween!\n-end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BUISPTCM": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x011\\x011\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 305, "newlines": 305, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'ISPTCM - FOR COMMAND LIMITING UNDER ISPF'\n**********************************************************************\n***                                                                ***\n***  ASSEMBLE THIS MODULE INTO AN OBJECT LIBRARY, THEN RECEIVE     ***\n***  AND APPLY IT USING THE FOLLOWING SMP INPUT.                   ***\n***                                                                ***\n***  FC02403 IS ONLY AN EXAMPLE NAME FOR THE USERMOD.  USE         ***\n***  WHATEVER YOU WANT.                                            ***\n***                                                                ***\n***                                                                ***\n***  //SMPPTFIN  DD DATA,DLM='??'                                  ***\n***  ++USERMOD(FC02403)  /*                                        ***\n***                                                                ***\n***      FC02403 - ADD BULLETIN COMMAND AS NOT SUPPORTED.          ***\n***                                                                ***\n***    */.                                                         ***\n***  ++VER(Z038) FMID(HIF1102)     SUP(FC02402)    .               ***\n***  ++JCLIN.                                                      ***\n***  //LKEDSTEP EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL,RENT,REUS', ***\n***  //             REGION=256K,COND=(8,LT,ASM)                    ***\n***  //AOS31     DD DSN=SYS1.ISPF.AOS31,DISP=SHR                   ***\n***  //SYSLMOD   DD DSN=SYS1.LINKLIB,DISP=SHR                      ***\n***  //SYSUT1    DD DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))      ***\n***  //SYSPRINT  DD SYSOUT=*                                       ***\n***  //SYSLIN    DD *                                              ***\n***    INCLUDE AOS31(ISPTCM)                                       ***\n***    NAME ISPTCM(R)                                              ***\n***  /*                                                            ***\n***  ++MOD(ISPTCM) TXLIB(GTEOBJ) DISTLIB(AOS31).                   ***\n***  ??                                                            ***\n***  //SMPCNTL  DD *                                               ***\n***  RECEIVE S(FC02403).                                           ***\n***  APPLY   S(FC02403) DIS(NO).                                   ***\n***  /*                                                            ***\n***                                                                ***\n**********************************************************************\n         EJECT\n***********************************************************************\n***                                                                 ***\n***   A NON-EXECUTABLE CSECT USED BY ISPF TO DETERMINE HOW TO       ***\n***   TREAT A COMMAND.  THE BIT VALUES HAVE THE FOLLOWING MEANING:  ***\n***                                                                 ***\n***   B'00000000'                                                   ***\n***     111.....     RESERVED                                       ***\n***     ...1....     NOT LOGGED BY ISPDIC                           ***\n***     ....1...     NOT SUPPORTED UNDER ISPF                       ***\n***     .....1..     CLIST                                          ***\n***     ......1.     CP FROM LPA OR LINKLIST, OR CLIST              ***\n***     .......1     CP FROM LINKLIST, OR CLIST                     ***\n***                                                                 ***\n***       +-------------------------------------------------+       ***\n***       |  WHEN THE ACF2 COMMAND LIMITING LISTS ARE UP-   |       ***\n***       |  DATED, THIS MODULE ALSO SHOULD BE UPDATED.     |       ***\n***       +-------------------------------------------------+       ***\n***                                                                 ***\n***********************************************************************\nISPTCM   CSECT\n         DC    CL8'ISPTCM  '               PROGRAM ID\n         DC    A(*+12)                     ADDRESS OF TABLE\n         DC    2F'0'\n*\n*\n         DC    CL8'$       ',B'00000010'   COMMAND\n         DC    CL8'$AI     ',B'00000010'   COMMAND\n         DC    CL8'$AR     ',B'00000010'   COMMAND\n         DC    CL8'$HASP   ',B'00000010'   COMMAND\n         DC    CL8'$RL     ',B'00000010'   COMMAND\n         DC    CL8'$SM     ',B'00000010'   COMMAND\n         DC    CL8'$SP     ',B'00000010'   COMMAND\n         DC    CL8'$SQ     ',B'00000010'   COMMAND\n         DC    CL8'$US     ',B'00000010'   COMMAND\n         DC    CL8'ACCOUNT ',B'00000010'   COMMAND\n         DC    CL8'ACCTNUM ',B'00000010'   COMMAND\n         DC    CL8'ACF     ',B'00000010'   COMMAND\n         DC    CL8'ACFCOMP ',B'00000010'   COMMAND\n         DC    CL8'ACFNRULE',B'00000010'   COMMAND\n         DC    CL8'ALIAS   ',B'00000010'   COMMAND\n         DC    CL8'ALLOC   ',B'00000010'   COMMAND\n         DC    CL8'ALLOCATE',B'00000010'   COMMAND\n         DC    CL8'ALTER   ',B'00000010'   COMMAND\n         DC    CL8'APANDIR ',B'00000010'   COMMAND\n         DC    CL8'APANL   ',B'00000010'   COMMAND\n         DC    CL8'APANLIST',B'00000010'   COMMAND\n         DC    CL8'APLNUM  ',B'00000010'   COMMAND\n         DC    CL8'APLTEST ',B'00000010'   COMMAND\n         DC    CL8'APL31   ',B'00000010'   COMMAND\n         DC    CL8'APL40   ',B'00000010'   COMMAND\n         DC    CL8'ASM     ',B'00000010'   COMMAND\n         DC    CL8'ATTR    ',B'00000010'   COMMAND\n         DC    CL8'ATTRIB  ',B'00000010'   COMMAND\n         DC    CL8'BIX     ',B'00000010'   COMMAND\n         DC    CL8'BLDINDEX',B'00000010'   COMMAND\n         DC    CL8'BULLETIN',B'00001000'   NOT SUPPORTED UNDER ISPF\n         DC    CL8'CALC    ',B'00000010'   COMMAND\n         DC    CL8'CALL    ',B'00000010'   COMMAND\n         DC    CL8'CALLOC  ',B'00000010'   COMMAND\n         DC    CL8'CANCEL  ',B'00000010'   COMMAND\n         DC    CL8'CHKLIST ',B'00000010'   COMMAND\n         DC    CL8'CKLST   ',B'00000010'   COMMAND\n         DC    CL8'CNVTCAT ',B'00000010'   COMMAND\n         DC    CL8'COB     ',B'00000010'   COMMAND\n         DC    CL8'COBOL   ',B'00000010'   COMMAND\n         DC    CL8'COMPARE ',B'00000010'   COMMAND\n         DC    CL8'CON     ',B'00000010'   COMMAND\n         DC    CL8'CONCAT  ',B'00000010'   COMMAND\n         DC    CL8'CONVERT ',B'00000010'   COMMAND\n         DC    CL8'COPY    ',B'00000010'   COMMAND\n         DC    CL8'CPU     ',B'00000010'   COMMAND\n         DC    CL8'D       ',B'00000010'   COMMAND\n         DC    CL8'DCON    ',B'00000010'   COMMAND\n         DC    CL8'DEF     ',B'00000010'   COMMAND\n         DC    CL8'DEFINE  ',B'00000010'   COMMAND\n         DC    CL8'DEL     ',B'00000010'   COMMAND\n         DC    CL8'DELETE  ',B'00000010'   COMMAND\n         DC    CL8'DEX     ',B'00000010'   COMMAND\n         DC    CL8'DIDOCS  ',B'00000010'   COMMAND\n         DC    CL8'DIR     ',B'00000010'   COMMAND\n         DC    CL8'DLIM    ',B'00000010'   COMMAND\n         DC    CL8'DMN     ',B'00000010'   COMMAND\n         DC    CL8'DSCB    ',B'00000010'   COMMAND\n         DC    CL8'DSPACE  ',B'00000010'   COMMAND\n         DC    CL8'DSPRINT ',B'00000010'   COMMAND\n         DC    CL8'E       ',B'00000010'   COMMAND\n         DC    CL8'EDIT    ',B'00000010'   COMMAND\n         DC    CL8'END     ',B'00000010'   COMMAND\n         DC    CL8'EX      ',B'00000010'   COMMAND\n         DC    CL8'EXEC    ',B'00000010'   COMMAND\n         DC    CL8'EXP     ',B'00000010'   COMMAND\n         DC    CL8'EXPORT  ',B'00000010'   COMMAND\n         DC    CL8'EXPORTRA',B'00000010'   COMMAND\n         DC    CL8'FA      ',B'00000010'   COMMAND\n         DC    CL8'FETCH   ',B'00000010'   COMMAND\n         DC    CL8'FILESTAT',B'00000010'   COMMAND\n         DC    CL8'FORM    ',B'00000010'   COMMAND\n         DC    CL8'FORMAT  ',B'00000010'   COMMAND\n         DC    CL8'FORT    ',B'00000010'   COMMAND\n         DC    CL8'FREE    ',B'00000010'   COMMAND\n         DC    CL8'FREEALL ',B'00000010'   COMMAND\n         DC    CL8'GOFORT  ',B'00000010'   COMMAND\n         DC    CL8'GTAB    ',B'00000010'   COMMAND\n         DC    CL8'GTEPROF ',B'00000010'   COMMAND\n         DC    CL8'H       ',B'00000010'   COMMAND\n         DC    CL8'HELP    ',B'00000010'   COMMAND\n         DC    CL8'ID      ',B'00000010'   COMMAND\n         DC    CL8'IDENTIFY',B'00000010'   COMMAND\n         DC    CL8'IIS     ',B'00000010'   COMMAND\n         DC    CL8'IKJEFT25',B'00000010'   COMMAND\n         DC    CL8'IMP     ',B'00000010'   COMMAND\n         DC    CL8'IMPORT  ',B'00000010'   COMMAND\n         DC    CL8'IMPORTRA',B'00000010'   COMMAND\n         DC    CL8'IN      ',B'00000010'   COMMAND\n         DC    CL8'INFO    ',B'00000010'   COMMAND\n         DC    CL8'INSTREAM',B'00000010'   COMMAND\n         DC    CL8'IPCS    ',B'00000010'   COMMAND\n         DC    CL8'IPCSDDIR',B'00000010'   COMMAND\n         DC    CL8'ISP     ',B'00000010'   COMMAND\n         DC    CL8'ISPCALL ',B'00000010'   COMMAND\n         DC    CL8'ISPF    ',B'00001000'   NOT SUPPORTED UNDER ISPF\n         DC    CL8'ISPFPROF',B'00000010'   COMMAND\n         DC    CL8'ISPSTART',B'00001000'   NOT SUPPORTED UNDER ISPF\n         DC    CL8'L       ',B'00000010'   COMMAND\n         DC    CL8'LATTR   ',B'00000010'   COMMAND\n         DC    CL8'LCALL   ',B'00000010'   COMMAND\n         DC    CL8'LIBCALL ',B'00000010'   COMMAND\n         DC    CL8'LINK    ',B'00000010'   COMMAND\n         DC    CL8'LIST    ',B'00000010'   COMMAND\n         DC    CL8'LISTA   ',B'00000010'   COMMAND\n         DC    CL8'LISTALC ',B'00000010'   COMMAND\n         DC    CL8'LISTB   ',B'00000010'   COMMAND\n         DC    CL8'LISTBC  ',B'00000010'   COMMAND\n         DC    CL8'LISTC   ',B'00000010'   COMMAND\n         DC    CL8'LISTCAT ',B'00000010'   COMMAND\n         DC    CL8'LISTCRA ',B'00000010'   COMMAND\n         DC    CL8'LISTD   ',B'00000010'   COMMAND\n         DC    CL8'LISTDS  ',B'00000010'   COMMAND\n         DC    CL8'LISTM   ',B'00000010'   COMMAND\n         DC    CL8'LISTR   ',B'00000010'   COMMAND\n         DC    CL8'LOAD    ',B'00000010'   COMMAND\n         DC    CL8'LOADGO  ',B'00000010'   COMMAND\n         DC    CL8'LOCATE  ',B'00000010'   COMMAND\n         DC    CL8'LOGOFF  ',B'00001000'   NOT SUPPORTED UNDER ISPF\n         DC    CL8'LOGON   ',B'00001000'   NOT SUPPORTED UNDER ISPF\n         DC    CL8'LTERM   ',B'00000010'   COMMAND\n         DC    CL8'M       ',B'00000010'   COMMAND\n         DC    CL8'MEMSTAT ',B'00000010'   COMMAND\n         DC    CL8'MERGE   ',B'00000010'   COMMAND\n         DC    CL8'MPRA    ',B'00000010'   COMMAND\n         DC    CL8'N       ',B'00000010'   COMMAND\n         DC    CL8'NC      ',B'00000010'   COMMAND\n         DC    CL8'NEW     ',B'00000010'   COMMAND\n         DC    CL8'NEWCMD  ',B'00000010'   COMMAND\n         DC    CL8'NEWSPACE',B'00000010'   COMMAND\n         DC    CL8'ON      ',B'00000010'   COMMAND\n         DC    CL8'OPER    ',B'00000010'   COMMAND\n         DC    CL8'OPERATOR',B'00000010'   COMMAND\n         DC    CL8'OUT     ',B'00000010'   COMMAND\n         DC    CL8'OUTPUT  ',B'00000010'   COMMAND\n         DC    CL8'PAGES   ',B'00000010'   COMMAND\n         DC    CL8'PAN     ',B'00000010'   COMMAND\n         DC    CL8'PANDIR  ',B'00000010'   COMMAND\n         DC    CL8'PANI    ',B'00000010'   COMMAND\n         DC    CL8'PANINDEX',B'00000010'   COMMAND\n         DC    CL8'PANL    ',B'00000010'   COMMAND\n         DC    CL8'PANLIST ',B'00000010'   COMMAND\n         DC    CL8'PASCALVS',B'00000100'   CLIST\n         DC    CL8'PDF     ',B'00001000'   NOT SUPPORTED UNDER ISPF\n         DC    CL8'PDS     ',B'00000010'   COMMAND\n         DC    CL8'PFK     ',B'00000010'   COMMAND\n         DC    CL8'PLI     ',B'00000010'   COMMAND\n         DC    CL8'PLIC    ',B'00000010'   COMMAND\n         DC    CL8'PLICINFO',B'00000010'   COMMAND\n         DC    CL8'PRINT   ',B'00000010'   COMMAND\n         DC    CL8'PRINTO  ',B'00000010'   COMMAND\n         DC    CL8'PRINTOFF',B'00000010'   COMMAND\n         DC    CL8'PROF    ',B'00000010'   COMMAND\n         DC    CL8'PROFILE ',B'00000010'   COMMAND\n***      DC    CL8'PROT    ',B'00010010'   COMMAND, NOT LOGGED\n***      DC    CL8'PROTECT ',B'00010010'   COMMAND, NOT LOGGED\n         DC    CL8'PURGE   ',B'00000010'   COMMAND\n         DC    CL8'Q       ',B'00000010'   COMMAND\n         DC    CL8'QED     ',B'00000010'   COMMAND\n         DC    CL8'QUEUE   ',B'00000010'   COMMAND\n         DC    CL8'R       ',B'00000010'   COMMAND\n         DC    CL8'RCAT    ',B'00000010'   COMMAND\n         DC    CL8'RCVSTEP ',B'00000010'   COMMAND\n         DC    CL8'RECEIVE ',B'00000010'   COMMAND\n         DC    CL8'REN     ',B'00000010'   COMMAND\n         DC    CL8'RENAME  ',B'00000010'   COMMAND\n         DC    CL8'REPRO   ',B'00000010'   COMMAND\n         DC    CL8'RES     ',B'00000010'   COMMAND\n         DC    CL8'RESETCAT',B'00000010'   COMMAND\n         DC    CL8'RMFMON  ',B'00000010'   COMMAND\n         DC    CL8'ROUTE   ',B'00000010'   COMMAND\n         DC    CL8'RUN     ',B'00000010'   COMMAND\n         DC    CL8'SAFEC   ',B'00000010'   COMMAND\n         DC    CL8'SAFECOPY',B'00000010'   COMMAND\n         DC    CL8'SAL     ',B'00000010'   COMMAND\n         DC    CL8'SASCP   ',B'00000010'   COMMAND\n         DC    CL8'SCHED   ',B'00000010'   COMMAND\n         DC    CL8'SCHEDULE',B'00000010'   COMMAND\n         DC    CL8'SCLR    ',B'00000010'   COMMAND\n         DC    CL8'SCREEN  ',B'00000010'   COMMAND\n         DC    CL8'SCRIPT  ',B'00000010'   COMMAND\n         DC    CL8'SE      ',B'00000010'   COMMAND\n         DC    CL8'SEARCH  ',B'00000010'   COMMAND\n         DC    CL8'SEND    ',B'00000010'   COMMAND\n         DC    CL8'SH      ',B'00000010'   COMMAND\n         DC    CL8'SHOW    ',B'00000010'   COMMAND\n         DC    CL8'SMC     ',B'00000010'   COMMAND\n         DC    CL8'SMCOPY  ',B'00000010'   COMMAND\n         DC    CL8'SMF     ',B'00000010'   COMMAND\n         DC    CL8'SMFIND  ',B'00000010'   COMMAND\n         DC    CL8'SMP     ',B'00000010'   COMMAND\n         DC    CL8'SMPUT   ',B'00000010'   COMMAND\n         DC    CL8'SORT    ',B'00000010'   COMMAND\n         DC    CL8'SPANL   ',B'00000010'   COMMAND\n         DC    CL8'SPANLIST',B'00000010'   COMMAND\n         DC    CL8'SPEAKEZ ',B'00000010'   COMMAND\n         DC    CL8'SPF     ',B'00001000'   NOT SUPPORTED UNDER ISPF\n         DC    CL8'ST      ',B'00000010'   COMMAND\n         DC    CL8'STATUS  ',B'00000010'   COMMAND\n         DC    CL8'STEP    ',B'00000010'   COMMAND\n         DC    CL8'STEPT   ',B'00000010'   COMMAND\n         DC    CL8'STEPU   ',B'00000010'   COMMAND\n         DC    CL8'SUB     ',B'00000010'   COMMAND\n         DC    CL8'SUBMIT  ',B'00000010'   COMMAND\n         DC    CL8'SYSDSCAN',B'00000010'   COMMAND\n         DC    CL8'SYSRC   ',B'00000010'   COMMAND\n         DC    CL8'TERM    ',B'00000010'   COMMAND\n         DC    CL8'TERMINAL',B'00000010'   COMMAND\n         DC    CL8'TEST    ',B'00001000'   NOT SUPPORTED UNDER ISPF\n         DC    CL8'TESTCMD ',B'00000010'   COMMAND\n         DC    CL8'TESTCOB ',B'00000010'   COMMAND\n         DC    CL8'TESTFORT',B'00000010'   COMMAND\n         DC    CL8'TIME    ',B'00000010'   COMMAND\n         DC    CL8'TRANSMIT',B'00000010'   COMMAND\n         DC    CL8'TSIONUM ',B'00000010'   COMMAND\n         DC    CL8'TSO     ',B'00000010'   COMMAND\n         DC    CL8'TSONUM  ',B'00000010'   COMMAND\n         DC    CL8'TSPRINT ',B'00000010'   COMMAND\n         DC    CL8'USER    ',B'00000010'   COMMAND\n         DC    CL8'VBS     ',B'00000010'   COMMAND\n         DC    CL8'VERIFY  ',B'00000010'   COMMAND\n         DC    CL8'VFY     ',B'00000010'   COMMAND\n         DC    CL8'VSBASIC ',B'00000010'   COMMAND\n         DC    CL8'WHEN    ',B'00000010'   COMMAND\n         DC    CL8'WKLOAD  ',B'00000010'   COMMAND\n         DC    CL8'XC      ',B'00000010'   COMMAND\n         DC    CL8'XCOPY   ',B'00000010'   COMMAND\n         DC    CL8'XDEL    ',B'00000010'   COMMAND\n         DC    CL8'XDELETE ',B'00000010'   COMMAND\n         DC    CL8'XL      ',B'00000010'   COMMAND\n         DC    CL8'XLIST   ',B'00000010'   COMMAND\n         DC    CL8'XMIT    ',B'00000010'   COMMAND\n         DC    CL8'XPRA    ',B'00000010'   COMMAND\n         DC    CL8'        ',B'00000010'   COMMAND (ROOM FOR ZAPS)\n         DC    CL8'        ',B'00000010'   COMMAND (ROOM FOR ZAPS)\n         DC    CL8'        ',B'00000010'   COMMAND (ROOM FOR ZAPS)\n         DC    CL8'        ',B'00000010'   COMMAND (ROOM FOR ZAPS)\n         DC    CL8'        ',B'00000010'   COMMAND (ROOM FOR ZAPS)\n         DC    CL8'        ',B'00000010'   COMMAND (ROOM FOR ZAPS)\n         DC    CL8'        ',B'00000010'   COMMAND (ROOM FOR ZAPS)\n         DC    CL8'        ',B'00000010'   COMMAND (ROOM FOR ZAPS)\n         DC    XL8'FFFFFFFFFFFFFFFF',B'00000100'  CLIST (DEFAULT)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUJCL": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00B\\x00B\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 66, "newlines": 66, "modlines": 0, "user": "HOFFMAN"}, "text": "//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             PROCLIB=,                   <== PROCLIB FOR STC         X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//*  COPY MEMBERS FOR PROCLIB, RENAMING              ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//PROC     DD  DSN=&PROCLIB,DISP=SHR                     <== PROC LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.CMDLIB',\n//             HELPLIB='SYST.HELP',\n//             PROCLIB='SYST.PROCLIB',\n//             CMDNAME=BULLETIN,LINKMEM=BULNK,COPYMEM=BUCPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUJEFTE2": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00 \\x00 \\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 32, "newlines": 32, "modlines": 0, "user": "HOFFMAN"}, "text": "**********************************************************************\n***                                                                ***\n***  ASSEMBLE THIS MODULE INTO AN OBJECT LIBRARY, THEN RECEIVE     ***\n***  AND APPLY IT USING THE FOLLOWING SMP INPUT.                   ***\n***                                                                ***\n***  SC04602 IS ONLY AN EXAMPLE NAME FOR THE USERMOD.  USE         ***\n***  WHATEVER YOU WANT.                                            ***\n***                                                                ***\n***                                                                ***\n***  //SMPPTFIN DD DATA,DLM='??'                                   ***\n***  ++USERMOD(SC04602)  /*  AUTHORIZED PROGRAMS */ .              ***\n***  ++VER(Z038) FMID(EBB1102) SUP(IPOTE80,SC04601).               ***\n***  ++MOD(IKJEFTE2) TXLIB(GTEOBJ) DISTLIB(AOST4).                 ***\n***  ??                                                            ***\n***  //SMPCNTL DD *                                                ***\n***   RECEIVE S(SC04602).                                          ***\n***   APPLY   S(SC04602).                                          ***\n***  /*                                                            ***\n***                                                                ***\n**********************************************************************\n         EJECT\nIKJEFTE2  CSECT\n          ENTRY  APFCTABL\n          DC    CL8'IKJEFTE2'     MODULE\n          DC    CL8'&SYSDATE'     ASSEMBLY DATE\nAPFCTABL  DC    CL8'TRANSMIT'\n          DC    CL8'XMIT    '\n          DC    CL8'RECEIVE '\n          DC    CL8'BULLETIN'\n          DC    CL8'        '\n          DC    CL8'        '     BLANK ENTRY TERMINATES THE LIST\n          END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BULLETIN": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x057\\x057\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 1335, "newlines": 1335, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'BULLETIN - COMMAND PROCESSOR FOR BULLETINS'\n         PRINT NOGEN\n**********************************************************************\n***                                                                ***\n***  Syntax -                                                      ***\n***                                                                ***\n***  BULLETIN  CLEAR(NN)  BROADCAST(dsname)                        ***\n***            K(NN)      BC(DSNAME)                               ***\n***            NOCLEAR    NOBROADCAST                              ***\n***            NOK        NOBC                                     ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  The BULLETIN command is an interface between TSO and SVC-34,  ***\n***  the console operator SVC.                                     ***\n***                                                                ***\n***  BULLETIN reads text from a dataset, then builds and executes  ***\n***  operator  SEND 'text',SAVE  commands.  When reading entries   ***\n***  from the input dataset, BULLETIN will process start/stop      ***\n***  dates for individual items.                                   ***\n***                                                                ***\n***  The CLEAR and BROADCAST functions of BULLETIN require the     ***\n***  TSO OPERATOR privilege, or require the JOB/STC name to be     ***\n***  'BULLETIN'.                                                   ***\n***                                                                ***\n**********************************************************************\n         SPACE 3\n**********************************************************************\n***                                                                ***\n***  Set the following global variables at the beginning of the    ***\n***  program:                                                      ***\n***                                                                ***\n***    &STC     - The name of a batch JOB or STC which will be     ***\n***               allowed to execute the CLEAR and BROADCAST       ***\n***               functions.  This would be a JOB or STC to run    ***\n***               the TMP (IKJEFT01) to execute the BULLETIN       ***\n***               command nightly from the system bulletin         ***\n***               dataset.                                         ***\n***                                                                ***\n***    &SYSBC   - The name of the system bulletin dataset, which   ***\n***               will be the default used with the BROADCAST      ***\n***               operand.                                         ***\n***                                                                ***\n***    &WAIT    - The number of hundredths of seconds to wait      ***\n***               between succeeding SEND commands.                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  Installation considerations:                                  ***\n***                                                                ***\n***  This program uses the MODESET macro to switch into supervisor ***\n***  state and to run under storage protect key zero.  This is     ***\n***  required by SVC-34.  It uses MODESET again to switch back     ***\n***  to problem state, key nonzero (8).  Authorize the program to  ***\n***  use the MODESET macro in one of the following ways:           ***\n***                                                                ***\n***  1.  If you do not use an installation-provided SVC for        ***\n***      dynamically switching on the JSCBAUTH bit:                ***\n***                                                                ***\n***      A.  Link the program with AC=1 into SYS1.LINKLIB, or      ***\n***          into a library on the linklist (LNKLSTxx).  Under     ***\n***          MVS/XA, the library must also be on the APF list      ***\n***          (IEAAPFxx).  Under MVS/370, the library must also     ***\n***          be on the APF list only if you are using the          ***\n***          library as a STEPLIB, tasklib, etc.                   ***\n***                                                                ***\n***      B.  TSO needs to know about authorized programs which     ***\n***          run as commands.  Add the name 'BULLETIN' to the      ***\n***          APF command list in module IKJEFTE2.  SMP will link   ***\n***          IKJEFTE2 into IKJEFT02.                               ***\n***                                                                ***\n***  2.  If you do use an installation-provided SVC for dynamic-   ***\n***      ally switching on the JSCBAUTH bit:                       ***\n***                                                                ***\n***      A.  Replace the NOPR instructions at labels SVC1, SVC2,   ***\n***          SVC3 and SVC4 with the installation SVC instruction.  ***\n***                                                                ***\n***      B.  Link the program with AC=0 into SYS1.LPALIB,          ***\n***          SYS1.LINKLIB or any library named on the linklist     ***\n***          or named in a LOGON STEPLIB statement.                ***\n***                                                                ***\n***                      (continued)                               ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  Installation considerations (continued):                      ***\n***                                                                ***\n***  This program uses the STIMER macro because of the asynchron-  ***\n***  ous nature of SVC-34.  Programs using STIMER are not          ***\n***  supported under ISPF (e.g. from Option 6 or from the command  ***\n***  line).  Module ISPTCM is a list of command names, and         ***\n***  attribute bytes defining whether the commands are or are not  ***\n***  allowed to run under ISPF.  If your default entry at the      ***\n***  bottom of ISPTCM (X'FFFFFFFFFFFFFFFF') is followed            ***\n***  immediately by an attribute byte with the X'02' bit on, you   ***\n***  must add the following entry into ISPTCM.  The entries do not ***\n***  have to be in alphabetic order:                               ***\n***                                                                ***\n***          CL8'BULLETIN',B'00001000'  NOT SUPPORTED UNDER ISPF   ***\n***                                                                ***\n***                                                                ***\n***  The following ZAP would do the same thing.  ZAP into one of   ***\n***  the blank entries provided, or ZAP over the name of a command ***\n***  you do not use.  Use the DUMPT function of AMASPZAP to locate ***\n***  the blank entries and compute their offset (xxxx).            ***\n***                                                                ***\n***          NAME ISPTCM ISPTCM                                    ***\n***          VER xxxx 40404040,40404040,02                         ***\n***          REP xxxx C2E4D3D3,C5E3C9D5,08                         ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  ASM options:   RENT                                           ***\n***                                                                ***\n***  LKED options:  RENT, REUS, REFR, AC=(1 or 0, see note above)  ***\n***                                                                ***\n***  Return codes:  04 - A. Error in parsing operands.             ***\n***                      B. Error in dynamic allocation.           ***\n***                      C. ABEND was trapped by the command.      ***\n***                 00 - Anything else.                            ***\n***                                                                ***\n***  Register Usage:                                               ***\n***      R0-R1 - Linkage conventions, macros, work registers.      ***\n***      R2-R3 - Macros, work registers.                           ***\n***      R4-R6 - Work registers.                                   ***\n***         R7 - (unused)                                          ***\n***         R8 - (unused)                                          ***\n***         R9 - Base of PARMPDL, returned by IKJPARS.             ***\n***        R10 - BAL register.                                     ***\n***        R11 - Second base register (BULLET01+4096)              ***\n***        R12 - First base register (BULLET01)                    ***\n***        R13 - Linkage conventions, base of WORKD work area.     ***\n***    R14-R15 - Linkage conventions, macros, work registers.      ***\n***                                                                ***\n***                                                                ***\n***  Non-IBM macros used:                                          ***\n***    GTEDADAT - Creates dynamic allocation control blocks.       ***\n***    GTEDASET - Links together control blocks created by         ***\n***               GTEDADAT.                                        ***\n***    GTEDAALC - Executes dynamic allocation using control        ***\n***               blocks created by GTEDADAT and linked together   ***\n***               by GTEDASET.                                     ***\n***    GTEDADOC - Not actually used.  This macro is documentation  ***\n***               for the other GTEDAxxx macros.                   ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PROLOG                                                       ***\n***                                                                ***\n***     1.  Linkage conventions and addressability.                ***\n***     2.  Clear the completion code                              ***\n***     3.  Save the pointer to the CPPL.                          ***\n***                                                                ***\n**********************************************************************\n         LCLC  &STC,&SYSBC,&WAIT        DEFINE LOCAL CONSTANTS\n&STC     SETC  'BULLETIN'               STC AUTH TO USE CLEAR/BROADCAST\n&SYSBC   SETC  'SYS1.BULLETIN.DATA'     SYSTEM BULLETIN DSN (DSORG=PS)\n&WAIT    SETC  '020'                    NO OF 100THS OF SECONDS WAIT\n*\nBULLET01 CSECT\n         STM   R14,R12,12(R13)          SAVE INTO CALLERS S.A.\n         B     BASE-BULLET01(0,R15)     BRANCH TO AROUND EYECATCHER\n         DC    AL1(L'NAME)                LENGTH OF NAME\nNAME     DC    C'BULLET01'                MODULE NAME\n         DC    C' &SYSDATE &SYSTIME '     DD.MM.YY HH.MM\nBASE     LR    RBASE,R15                RBASE IS BASE REGISTER\n         USING BULLET01,RBASE             TELL ASSEMBLER\n         GETMAIN  R,LV=WORKDLEN,SP=0    GET AREA FOR MYSAVE AND WORK\n         ST    R13,4(0,R1)              CALLERS S.A. ADDR TO MY S.A.\n         ST    R1,8(0,R13)              MY S.A. ADDR TO CALLERS S.A.\n         LM    R15,R1,16(R13)           RESTORE REGS USED BY GETMAIN\n         L     R13,8(0,R13)             R13 POINTS TO MY S.A.\n         USING WORKD,R13                  TELL ASSEMBLER\n*\n         L     RBASE2,VBASE2            R11 HAS SECOND BASE ADDRESS\n         USING BULLET01+4096,RBASE2       TELL ASSEMBLER\n*\n         USING PARMPDL,R9               ADDRESSABILITY OF PDE LIST\n*\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE TO ZERO\n         ST    R1,CPPLPTR               SAVE CPPL POINTER\n*\n         B     MAINLINE\n*\nVBASE2   DC    A(BULLET01+4096)         BEGINNING OF 2ND BASE REG RANGE\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAIN LINE ROUTINE                                            ***\n***                                                                ***\n**********************************************************************\n*\nMAINLINE BAL   RBAL,ABEND               SET UP ABEND EXIT\n         BAL   RBAL,PPLSETUP            SET UP PARSE PARM LIST\n*\nMAPARSE  BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BNE   ENDING04                   GO TO CC=4 ENDING\n*\nMAALLOC  BAL   RBAL,DSNALLOC            ALLOCATE THE INPUT DSNAME\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BE    MACLEAR                    THEN\n         MVC   COMPCODE(4),F4               SET CC=4\n         B     MAUNALC                      GO TO UNALLOCATION\n*\nMACLEAR  BAL   RBAL,CLEAR               CLEAR THE OLD MESSAGES\n*\nMABC     BAL   RBAL,BC                  SEND BROADCAST MESSAGES\n*\nMAUNALC  BAL   RBAL,UNALLOC             UNALLOCATE THE FILE NAMES\n*\n         B     ENDING                   BRANCH TO ENDING\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EPILOG                                                       ***\n***                                                                ***\n***     1.  Release storage used by IKJPARS.                       ***\n***     2.  Linkage conventions.                                   ***\n***                                                                ***\n**********************************************************************\nENDING04 LA       R15,X'04'(0,0)          RETURN CODE TO R15\n         ST       R15,COMPCODE              SAVE IN COMPLETION CODE\n*\nENDING   LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R2,0(0,R2)              R4 POINTS TO PDL\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL\n*\nENDABEND ESTAE    0                       CANCEL THE ABEND EXIT\n*\n         L        R14,COMPCODE            R14 TEMPORARILY HAS COMP CODE\n         LR       R15,R13                 R15 HAS MY SAVE AREA ADDRESS\n         L        R13,4(0,R13)            R13 RESTORE, PNT TO CALLER SA\n         FREEMAIN R,LV=WORKDLEN,SP=0,A=(R15)  FREE MYSAVE,COMPCODE,ETC\n         LM       R0,R12,20(R13)          R0-R12 RESTORE FROM CALLER SA\n         LR       R15,R14                 R15 GETS COMP CODE\n         L        R14,12(0,R13)           R14 RESTORE FROM CALLERS S.A.\n         MVI      12(R13),X'FF'           SIGNAL MODULE COMPLETE\n         BR       R14                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***           SET UP EXIT FOR ABENDS                               ***\n***                                                                ***\n***  Use ESTAE to set up an environment to trap ABENDs.            ***\n***                                                                ***\n***  1.  The exit is ESTXIT.                                       ***\n***  2.  The return point is at label ENDING04 in main routine.    ***\n***  3.  The parm list passed to the exit will be:                 ***\n***                                                                ***\n***         ESTUPL                                                 ***\n***         +-----------+                                          ***\n***         |           |==> Return point                          ***\n***         +-----------+                                          ***\n***         |           |==> User work area                        ***\n***         +-----------+    +-----------+                         ***\n***                          | Register  |                         ***\n***                          | save area |                         ***\n***                         ---         ---                        ***\n***                         ---         ---                        ***\n***                          |           |                         ***\n***                          +-----------+                         ***\n***                          | Other data|                         ***\n***                          +-----------+                         ***\n***                                                                ***\n**********************************************************************\nABEND    ST    RBAL,ABRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   ESTAEL(ESTAELLN),ESTAED  INITIALIZE ESTAE PARM LIST\n         LA    R15,ENDING04             ADDRESS OF RETURN POINT\n         ST    R15,ESTUPL                 INTO USER PARM LIST\n         LA    R15,ESTUWK               ADDRESS OF USER WORK AREA\n         ST    R15,ESTUPL+4               INTO USER PARM LIST\n         LA    R4,ESTUPL                R4 HAS ADDRESS OF USER PARM LST\n         L     R5,VESTXIT               R5 HAS ADDRESS OF ESTAE EXIT\n*\nABESTAE  ESTAE (R5),PARAM=(R4),MF=(E,ESTAEL)  EXECUTE ESTAE\n*\nABENDEND L     RBAL,ABRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST AND I/O PARM LIST           ***\n***                                                                ***\n***        PARSE                                                   ***\n***          1.  Copy addresses of UPT, ECT and CBUF from CPPL.    ***\n***          2.  Add addresses of own ECB, ANS and UWA, and        ***\n***              address of PCE List (PCL) created by macros.      ***\n***                                                                ***\n***        I/O                                                     ***\n***          1.  Copy addresses of UPT and ECT from CPPL.          ***\n***          2.  Add address of own I/O ECB.                       ***\n***          3.  Zero the IOPLIOPB pointer.  This will point to    ***\n***              the parm block for the appropriate I/O routine.   ***\n***              It will be filled in by the execute form of the   ***\n***              STACK, GETLINE, PUTLINE or PUTGET macro when      ***\n***              executed.                                         ***\n**********************************************************************\nPPLSETUP ST    RBAL,PPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         LA    R6,MYPPL                 ADDRESS OF MY PARSE PARM LIST\n         USING PPL,R6                     ADDRESSABILITY\n*\n         MVC   PPLUPT(4),CPPLUPT        UPT  (CPPL)\n         MVC   PPLECT(4),CPPLECT        ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,PPLECB                ECB  (MINE)\n         MVC   PPLPCL(4),VPARMPCL       PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,PPLANS                ANS  (MINE)\n         MVC   PPLCBUF(4),CPPLCBUF      CBUF (CPPL)\n         LA    R5,MYUWA\n         ST    R5,PPLUWA                UWA  (MINE)\n         DROP  R6                       DROP ADDRESSABILITY\n*\n         LA    R6,MYIOPL                ADDRESS OF MY IO PARM LIST\n         USING IOPL,R6                    ADDRESSABILITY\n         MVC   IOPLUPT(4),CPPLUPT       UPT  (CPPL)\n         MVC   IOPLECT(4),CPPLECT       ECT  (CPPL)\n         LA    R15,MYIOECB\n         ST    R15,IOPLECB              ECB  (MINE)\n         XC    IOPLIOPB(4),IOPLIOPB     IOPB (0000)\n*\n         DROP  R4,R6\n*\nPPEND    L     RBAL,PPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n***      1.  Execute IKJPARS with CALLTSSR using own PPL.          ***\n***      2.  Load address of Parm Descriptor Element List (PDL)    ***\n***          from own ANS word into R9 for addressability.         ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   UNALLOCATE FILE NAME                                         ***\n***                                                                ***\n**********************************************************************\nUNALLOC  ST    RBAL,UNRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n*                                     INITIALIZE SVC-99 CONTROL BOLCKS\nUNSET    MVC   MY0(MY0LEN),@M0          INITIALIZE DATA\n         GTEDASET MY0,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n*\nUNINPUT  MVC   MY0DDNAM(8),DSDDNAM1     DDNAME TO T.U.\n         BAL   R4,UNDYNALC              PERFORM DYNAMIC UNALLOCATION\n*\nUNEND    L     RBAL,UNRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\nUNDYNALC GTEDAALC MY0,VERB=UN,ERRMSG=NO PERFORM SVC-99/DAIRFAIL\n         BR    R4\n         EJECT\n**********************************************************************\n***                                                                ***\n***   ALLOCATE THE INPUT DSNAME WITH GTEDAxxx                      ***\n***                                                                ***\n**********************************************************************\nDSNALLOC ST    RBAL,DSRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nDSDSNBC  TM    KEYBC+1,X'01'            IF NOT USING BC KEYWORD\n         BNO   DSEND                      GO TO NEXT ROUTINE\n*\n         MVC   DSDDNAM1(8),DSDDNAM      DUMMY DDNAME TO SAVE AREA\n*\n*                                     INITIALIZE SVC-99 CONTROL BOLCKS\nDSBCSET  MVC   MY1(MY1LEN),@M1          INITIALIZE DATA\n         GTEDASET MY1,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n*\nDSDSNB   L     R4,SBCDSN                R4 POINTS TO BC-DSN\n         LH    R5,SBCDSN+4              R5 HAS LENGTH\n         BCTR  R5,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   MY1DSNAM(0),0(R4)          MOVE DSNAME TO T.U.\n         EX    R5,*-6                   EXECUTE THE MOVE\n         TM    SBCDSN+14,X'80'          IF MEMBER NAME NOT USED\n         BNO   DSDSNBCX                   BRANCH AROUND\n         L     R4,SBCDSN+8              R4 POINTS TO BC-MEMBNAME\n         LH    R5,SBCDSN+12             R5 HAS LENGTH\n         BCTR  R5,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   MY1MEMBR(0),0(R4)          MOVE MEMBER NAME TO T.U.\n         EX    R5,*-6                   EXECUTE THE MOVE\n         B     DSNALC1                  BRANCH TO ALLOCATE\nDSDSNBCX XC    MY1MEMKY(2),MY1MEMKY     NO MEMBER, ZERO THE KEY\nDSNALC1  GTEDAALC MY1,VERB=AL,ERRMSG=YES  PERFORM SVC-99/DAIRFAIL\n         MVC   DSDDNAM1(8),MY1RTDDN     SAVE THE RETURNED DDNAME\n         CLC   MY1S99RC,F0              IF SVC-99 R/C NON-ZERO\n         BNE   DSERR04                    GO TO ERROR\n*\n         B     DSEND\n*\nDSERR04  LA    R15,X'04'(0,0)           SET VALUE\n         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE\n*\nDSEND    L     RBAL,DSRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   Execute the operator SEND command.                           ***\n***                                                                ***\n**********************************************************************\nBC       ST    RBAL,BCRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nBCCHECK  TM    KEYBC+1,X'01'            IF BROADCAST KEYWORD NOT USED\n         BNO   BCEND                      BYPASS THE WHOLE ROUTINE\n*\nBCOPERX  L     R1,CPPLPTR                    R1 POINTS TO CPPL\n         L     R1,(CPPLPSCB-CPPL)(R1)        R1 POINTS TO PSCB\n         TM    (PSCBATR1-PSCB)(R1),PSCBCTRL  IF USER HAS OPER\n         BO    BCOPERXN                        BRANCH TO CONTINUE\n         LA    R4,TIOTADDR                   ELSE POINT TO RETURN AREA\n         MVC   EXTRACTL(EXTRLEN),EXTRACTD      INITIALIZE EXTRACT PARM\n         EXTRACT (R4),'S',FIELDS=(TIOT),MF=(E,EXTRACTL)  GET TIOT ADDR\n         L     R1,TIOTADDR                   R1 POINTS TO TIOT\n         CLC   (TIOCNJOB-TIOT)(8,R1),STCNAM  IF STC NAME IS OK\n         BE    BCOPERXN                        BRANCH TO CONTINUE\n         LA    R15,3                         ELSE SELECT MESSAGE #3\n         BAL   RBAL,PUTLPROC                   WRITE IT\n         B     BCRET04                         GO TO R/C=4 ENDING\nBCOPERXN B     BCTIME                        NORMAL END OF ROUTINE\n*\nBCTIME   TIME                         , R1 GETS 00YYDDDF\n         ST    R1,BCYYDDD               SAVE IT\n         NI    BCYYDDD+3,X'FC'          SET POSITIVE SIGN\n         MVC   LOYYDDD,P0               INITIALIZE LOW YYDDD\n         MVC   HIYYDDD,P99365           INITIALIZE HIGH YYDDD\n         XC    BITEXTWK(8),BITEXTWK     INITIALIZE TEXT WORK SAVE AREA\n*\nBCDCBSET MVC   BCDCB(BCDCBL),@BCDCB     INITIALIZE DCB\n         MVC   BCDCB+(DCBDDNAM-IHADCB)(8),DSDDNAM1  INITIALIZE DDN\n*\nBCOPEN   MVC   OPENL(OPENLLEN),@OPENL   INITIALIZE OPEN PARM LIST\n         LA    R4,BCDCB                 POINT TO DCB\n         OPEN  ((R4),INPUT),MF=(E,OPENL)  OPEN THE FILE\n         TM    (DCBRECFM-IHADCB)(R4),DCBRECF   IF RECFM NOT FIXED\n         BNO   BCBADFIL                          OR\n         CLC   (DCBLRECL-IHADCB)(2,R4),H80     IF LRECL NOT 80\n         BNE   BCBADFIL                          GO TO ERROR ROUTINE\n*\nSVC1     NOPR  0                        SWITCH JSCBAUTH BIT\nBCSUP    MODESET MODE=SUP,KEY=ZERO      GET SUP STATE, KEY 0\nBCIO     BAL   RBAL,BIO                 PERFORM IO ROUTINE\n         TM    BISWITCH,X'80'           IF END OF FILE\n         BO    BCEOF                      GET OUT OF LOOP\n         B     BCIO                     ELSE LOOP UP TILL END OF FILE\nBCEOF    NOPR  0                        EOF RETURN POINT\nBCPROB   MODESET MODE=PROB,KEY=NZERO    RETURN TO PROB STATE, KEY 8\nSVC2     NOPR  0                        SWITCH JSCBAUTH BIT\n*\nBCCLOSE  MVC   CLOSL(CLOSLLEN),@CLOSL   INITIALIZE CLOSE PARM LIST\n         LA    R4,BCDCB                 POINT TO DCB\n         CLOSE ((R4)),MF=(E,CLOSL)      CLOSE THE FILE\n*\n         B     BCEND\n*\nBCBADFIL LA    R15,4                    SELECT MESSAGE #4\n         BAL   RBAL,PUTLPROC              WRITE THE MESSAGE\n         B     BCRET04                  GO TO ERROR RETURN\n*\nBCRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     BCEND                    BRANCH TO ENDING\n*\nBCEND    L     RBAL,BCRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  If the CLEAR keyword has been used, clear old messages.       ***\n***                                                                ***\n**********************************************************************\nCLEAR    ST    RBAL,CLRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nCLEARCK  TM    KEYC+1,X'01'             IF CLEAR KEYWORD NOT USED\n         BNO   CLEND                      GO TO END OF ROUTINE\n*\nCLOPERX  L     R1,CPPLPTR                    R1 POINTS TO CPPL\n         L     R1,(CPPLPSCB-CPPL)(R1)        R1 POINTS TO PSCB\n         TM    (PSCBATR1-PSCB)(R1),PSCBCTRL  IF USER HAS OPER\n         BO    CLOPERXN                        BRANCH TO CONTINUE\n         LA    R4,TIOTADDR                   ELSE POINT TO RETURN AREA\n         MVC   EXTRACTL(EXTRLEN),EXTRACTD      INITIALIZE EXTRACT PARM\n         EXTRACT (R4),'S',FIELDS=(TIOT),MF=(E,EXTRACTL)  GET TIOT ADDR\n         L     R1,TIOTADDR                   R1 POINTS TO TIOT\n         CLC   (TIOCNJOB-TIOT)(8,R1),STCNAM  IF STC NAME IS OK\n         BE    CLOPERXN                        BRANCH TO CONTINUE\n         LA    R15,3                         ELSE SELECT MESSAGE #3\n         BAL   RBAL,PUTLPROC                   WRITE IT\n         B     CLRET04                         GO TO R/C=4 ENDING\nCLOPERXN B     CLCOUNT                       NORMAL END OF ROUTINE\n*\nCLCOUNT  L     R3,SC                    R3 POINTS TO CLEAR COUNT\n         L     R3,0(0,R3)               R3 CONTAINS BINARY COUNT\n         LTR   R3,R3                    IF COUNT NOT POSITIVE\n         BP    CLMSGNO                    THEN\n         LA    R15,7                        SELECT MESSAGE #7\n         BAL   RBAL,PUTLPROC                WRITE THE MESSAGE\n         LA    R15,0                        SELECT BLANK LINE\n         BAL   RBAL,PUTLPROC                WRITE THE MESSAGE\n         B     CLRET04                      GO TO RC=4 ENDING\nCLMSGNO  XR    R4,R4                    CLEAR R4 MSG NUMBER\n*\nSVC3     NOPR  0                        SWITCH JSCBAUTH BIT\nCLSUP    MODESET MODE=SUP,KEY=ZERO      GET SUP STATE, KEY 0\n*\nCLLOOP1  LA    R4,1(0,R4)               INCR MSG NUMBER BY 1, BINARY\n         CVD   R4,CLDOUBLE              CLDOUBLE HAS MSG NUMBER PACK\n         OI    CLDOUBLE+7,X'0F'         KILL THE SIGN\n         UNPK  CLZONE(3),CLDOUBLE+6(2)  CLZONE HAS MSG NUMBER ZD\n         MVC   CLCMD(18),@CLCMD         INITIALIZE THE COMMAND\n         MVC   CLCMD+9(2),CLZONE+1      INSERT THE MSG NUMBER\n         LA    R1,CLCMD                 POINT TO THE COMMAND FOR SVC-34\n         XR    R0,R0                    CLEAR R0 FOR SVC-34\n         SVC   34                       OPERATOR\n         STIMER WAIT,BINTVL=BIWAITIM    WAIT A LITTLE BIT\n         BCT   R3,CLLOOP1               LOOP BACK UP\n*\nCLPROB   MODESET MODE=PROB,KEY=NZERO    RETURN TO PROB STATE, KEY 8\nSVC4     NOPR  0                        SWITCH JSCBAUTH BIT\n*\n         LA    R15,2                    SELECT MESSAGE #2\n         BAL   RBAL,PUTLPROC            WRITE THE MESSAGE\n         LA    R15,0                    SELECT BLANK LINE\n         BAL   RBAL,PUTLPROC            WRITE THE MESSAGE\n*\n         B     CLEND\n*\nCLRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     CLEND                    BRANCH TO ENDING\n*\nCLEND    L     RBAL,CLRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  Transfer BROADCAST input to output.                           ***\n***                                                                ***\n**********************************************************************\nBIO      ST    RBAL,BIRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,BCDCB                 POINT TO DCB\n         NI    BISWITCH,X'7F'           INITIALIZE EOF SWITCH OFF\n         GET   (R4),BITEXT              GET INPUT\n         B     BIEDIT                   BRANCH AROUND EOF ROUTINE\n*\nBIEOF    OI    BISWITCH,X'80'           SET EOF SWITCH ON\n         CLC   BITEXTWK(5),ETENDE       IF PREV USED CARD WAS '-END '\n         BE    BIEND                      GO TO ENDING\n         CLI   BITEXTWK,X'00'           IF NO PREV CARD WAS USED\n         BE    BIEND                      GO TO ENDING\n         MVC   BIMAIN(87),@BIHYPH       INITIALIZE COMMAND\n         B     BIMSG                    BRANCH AROUND EDITING\n*\nBIEDIT   BAL   RBAL,ETEXT               EDIT THE INPUT\n         CLC   RETCDE(4),F0             IF NOT PRINT RETURN CODE\n         BNE   BIEND                      GO TO ENDING\n*\nBIMSG    MVC   MSG0001B(2),H75          SET MESSAGE SEGMENT LENGTH\n         MVC   MSG0001B+2(2),H9           SET MESSAGE SEGMENT OFFSET\n         MVC   MSG0001B+4(71),BIDATA-3    SET TEXT\n         LA    R15,1(0,0)                 SET MESSAGE NUMBER\n         BAL   RBAL,PUTLPROC              WRITE THE MESSAGE\n         LH    R4,BIMAIN                R4 HAS LENGTH OF SEND COMMAND\n         C     R4,F133                  IF LENGTH NOT GREATER THAN 133\n         BNH   BICMD                      GO EXECUTE THE COMMAND\n         LA    R15,6                    ELSE SELECT MESSAGE #6\n         BAL   RBAL,PUTLPROC              WRITE IT\n         LA    R15,0                      SELECT BLANK LINE\n         BAL   RBAL,PUTLPROC              WRITE IT\n         B     BIRET04                    GO TO HIGH RETURN\n*\nBICMD    LA    R1,BIMAIN                POINT TO COMMAND\n         XR    R0,R0                    CLEAR R0 FOR SVC-34\nBICONSOL SVC   34                       EXECUTE CONSOLE SVC\n         ST    R15,BIRC                 SAVE THE RETURN CODE\n         MVC   BITEXTWK(8),ETTEXTWK     SAVE THE TEXT WORK AREA\nBIWAIT   STIMER WAIT,BINTVL=BIWAITIM    WAIT FOR A LITTLE\n*\n         B     BIEND                    GO TO ENDING\n*\nBIRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     BIEND                    BRANCH TO ENDING\n*\nBIEND    L     RBAL,BIRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  Edit the text.                                                ***\n***                                                                ***\n***  1.  Process control cards.                                    ***\n***                                                                ***\n***     The card type is designated by characters in the beginning ***\n***     of the card image.  Types can be in lower/UPPER case.      ***\n***                                                                ***\n***     '*'      = Comment.                                        ***\n***     '-com'   = Comment.                                        ***\n***     '-dates' = MM/DD/YY dates for message to begin and end.    ***\n***                (Default is the previous -dates card.)          ***\n***     blank    = Message text.  65-bytes, beginning with cc 2.   ***\n***     '-end'   = End of message text.  Causes line of hyphens.   ***\n***                                                                ***\n***  2.  Expand apostrophes to double apostrophes in text.         ***\n***  3.  Set RETCDE:                                               ***\n***        00 - Convert this to a SEND command.                    ***\n***        04 - Don't convert this to a SEND command.              ***\n***                                                                ***\n**********************************************************************\nETEXT    ST    RBAL,ETRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nETFORMX  MVC   ETTEXTWK(8),BITEXT       GET FIRST 8 CHARACTERS TO WORK\n         OC    ETTEXTWK(8),BLANKS       SHIFT TO UPPER CASE\n*\n         CLI   ETTEXTWK,X'40'           IF IT BEGINS WITH A BLANK\n         BE    ETTEXT                     GO PROCESS THE TEXT CARD\n         CLC   ETTEXTWK(7),ETDATES      IF IT IS A '-DATES ' CARD\n         BE    ETDATE                     GO PROCESS THE DATE CARD\n         CLC   ETTEXTWK(5),ETENDE       IF IT IS A '-END' CARD\n         BE    ETEOD                      GO PROCESS THE EOD CARD\n         CLI   ETTEXTWK,C'*'            IF IT IS A '*' CARD\n         BE    ETRET04                  OR\n         CLC   ETTEXTWK(5),ETCOM        IF IT IS A '-COM ' CARD\n         BE    ETRET04                    GO TO NO-SEND RETURN\n*                                       IF NO MATCH ABOVE\n         B     ETRET04                    GO TO NO-SEND RETURN\n*\nETTEXT   CP    LOYYDDD(4),BCYYDDD       IF LOW DATE HIGHER THAN CURRENT\n         BH    ETRET04                    GO TO NO-SEND RETURN\n         CP    HIYYDDD(4),BCYYDDD       IF HIGH DATE LESS THAN CURRENT\n         BL    ETRET04                    GO TO NO-SEND RETURN\n         MVC   BIMAIN(87),@BIMAIN       INITIALIZE COMMAND\n         MVC   BIDATA(65),BITEXT+1      MOVE TEXT TO OUTPUT AREA\n         BAL   RBAL,APOST               EXPAND TEXT APOSTROPHES\n         B     ETEND                    ELSE GO TO SEND RETURN\n*\nETEOD    CP    LOYYDDD(4),BCYYDDD       IF LOW DATE HIGHER THAN CURRENT\n         BH    ETRET04                    GO TO NO-SEND RETURN\n         CP    HIYYDDD(4),BCYYDDD       IF HIGH DATE LESS THAN CURRENT\n         BL    ETRET04                    GO TO NO-SEND RETURN\n         MVC   BIMAIN(87),@BIHYPH       INITIALIZE COMMAND\n         B     ETEND                    GO TO SEND RETURN\n*\nETDATE   MVC   DATE(8),BITEXT+7         MOVE BEGIN DATE TO WORK AREA\n         BAL   RBAL,DATECONV            CONVERT TO 00YYDDDC\n         CLC   RETCDE(4),F0             IF BAD RETURN\n         BNE   ETDATERR                   GO TO ERROR ROUTINE\n         MVC   LOYYDDD(4),DATEPACK      ELSE MOVE TO STORAGE\n         MVC   DATE(8),BITEXT+16        MOVE END DATE TO WORK AREA\n         BAL   RBAL,DATECONV            CONVERT TO 00YYDDDC\n         CLC   RETCDE(4),F0             IF BAD RETURN\n         BNE   ETDATERR                   GO TO ERROR ROUTINE\n         MVC   HIYYDDD(4),DATEPACK      ELSE MOVE TO STORAGE\n         B     ETRET04                  BRANCH TO NO-SEND RETURN\n*\nETDATERR MVC   MSG0005B(13),WRK0005B    INITIALIZE MESSAGE SEGMENT\n         MVC   MSG0005B+4(8),DATE       MOVE BAD DATE INTO SEGMENT\n         MVC   LOYYDDD(4),BCYYDDD       MOVE CURRENT DATE TO START DATE\n         MVC   HIYYDDD(4),BCYYDDD         AND TO END DATE\n         LA    R15,0                    SELECT BLANK LINE\n         BAL   RBAL,PUTLPROC              WRITE IT\n         LA    R15,5                    SELECT MESSAGE #5\n         BAL   RBAL,PUTLPROC              WRITE IT\n         LA    R15,0                    SELECT BLANK LINE\n         BAL   RBAL,PUTLPROC              WRITE IT\n         B     ETRET04                  BRANCH TO NO-SEND RETURN\n*\nETRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     ETEND                    BRANCH TO ENDING\n*\nETEND    L     RBAL,ETRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  Expand single apostrophes to double apostrophes.              ***\n***                                                                ***\n**********************************************************************\nAPOST    ST    RBAL,APRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R3,BIDATA-1              R3 POINTS TO TEXT-1\n         LA    R4,65(0,R3)              R4 POINTS TO LAST TEXT CHAR\n         LA    R1,65(0,0)               R1 IS COUNTER FOR OUTER LOOP\nAPLOOP1  LA    R3,1(0,R3)               R3 POINTS TO NEXT CHAR\n         CLI   0(R3),X'7D'              IF NOT APOSTROPHE\n         BNE   APLOOP1X                   GO TO OUTER LOOP END\n*\n         LR    R2,R1                    R2 IS INNER LOOP COUNTER\n         LR    R5,R4                    R5 IS INNER LOOP POINTER\n         LA    R4,1(0,R4)               R4 POINTS TO NEW LAST CHAR\nAPLOOP2  MVC   1(1,R5),0(R5)            COPY FROM CHAR TO CHAR+1\n         BCTR  R5,0                     DECR POINTER BY ONE\nAPLOOP2X BCT   R2,APLOOP2               LOOP BACK UP TO INNER LOOP\n*\n         LA    R3,1(0,R3)               MOVE POINTER TO 'NEW' APOST\n*\nAPLOOP1X BCT   R1,APLOOP1               LOOP BACK UP TO OUTER LOOP\n*\n*\nAPSAVE   MVC   1(9,R4),APSENDSV         MOVE B--,'SAVE TO SEND COMMAND\n         LA    R4,10(0,R4)              R4 POINTS JUST BEYOND LAST CHAR\n*\nAPLEN    LA    R1,BIMAIN                R1 POINTS TO SEND COMMAND LEN\n         SR    R4,R1                    R4 IS LENGTH OF COMMAND\n         STH   R4,BIMAIN                  SAVE LEN IN COMMAND BUFFER\n         B     APEND\n*\nAPRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     APEND                    BRANCH TO ENDING\n*\nAPEND    L     RBAL,APRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   Convert MM/DD/YY (ZD) to 00YYDDDC (packed)                   ***\n***                                                                ***\n**********************************************************************\nDATECONV ST    RBAL,DARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nDAFORMAT XC    DATEPACK,DATEPACK        ZERO THE RETURN DATE\n         MVC   DATEWORK(8),DATE         COPY DATE TO TEST AREA\n         NC    DATEWORK(8),DATSTPAT     'AND' IT WITH TEST PATTERN\n         CLC   DATEWORK(8),DARESPAT     IF RESULT IS NOT '00/00/00'\n         BNE   DARET04                    GO TO HIGH RETURN\n*\nDAYEAR   NI    DASWITCH,X'7F'           TURN OFF LEAP YEAR SWITCH\n         PACK  DADOUBLE(8),DAYY(2)      CONVERT TO 00000000 00000YYF\n         MVC   DAYYPACK(4),DATEPACK       SAVE IT\n         CVB   R3,DADOUBLE              R3 HAS BINARY YEAR\nDALEAP   XR    R2,R2                    CLEAR R2 FOR DIVIDE\n         D     R2,F4                    CHECK FOR LEAP YEAR\n         LTR   R2,R2                    IF LEAP YEAR\n         BNZ   *+8                        THEN\n         OI    DASWITCH,X'80'               TURN ON LEAP YEAR SWITCH\n*\nDAMONTH  CLC   DAMM(2),ZD12             IF MM GREATER THAN 12\n         BNH   DAMONPK                    THEN\n         XC    DATEPACK,DATEPACK            ZERO THE RETURN DATE\n         B     DARET04                      AND GO TO HIGH RETURN\nDAMONPK  PACK  DADOUBLE(8),DAMM(2)      CONVERT TO 00000000 00000MMF\n         CVB   R3,DADOUBLE              R3 HAS BINARY MONTH 1 TO 12\n         BCTR  R3,0                     R3 IS BINARY 0 TO 11\n         SLL   R3,1                     R3 IS OFFSET INTO TABLE\n         TM    DASWITCH,X'80'           IF LEAPYEAR\n         BNO   *+12                       THEN\n         LA    R2,DALEAPTB                  R2 HAS ADDR OF LEAP TABLE\n         B     *+8                      ELSE\n         LA    R2,DAREGTB                   R2 HAS ADDR OF REGULAR TBL\n         LH    R2,0(R3,R2)              R2 HAS DDD FOR DAY 0 OF MONTH\n*\nDADAY    CLC   DADD(2),ZD31             IF DD GREATER THAN 31\n         BNH   DADAYPK                    THEN\n         XC    DATEPACK,DATEPACK            ZERO THE RETURN DATE\n         B     DARET04                      AND GO TO HIGH RETURN\nDADAYPK  PACK  DADOUBLE(8),DADD(2)      CONVERT TO 00000000 00000DDF\n         CVB   R3,DADOUBLE              R3 HAS BINARY DAY OF MONTH\n         AR    R3,R2                    R3 HAS BINARY DAY OF YEAR\n         CVD   R3,DADOUBLE              DADOUBLE HAS 00000000 0000DDDC\n         L     R3,DATEPACK              R3 HAS 0000DDDC\n*\nDACOMB   L     R2,DAYYPACK              R2 HAS 00000YYF\n         SRL   R2,4                     R2 HAS 000000YY\n         SLL   R2,16                    R2 HAS 00YY0000\n         OR    R2,R3                    R2 HAS 00YYDDDC\n         ST    R2,DATEPACK                SAVE IT\n*\n         B     DAEND\n*\nDARET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DAEND                    BRANCH TO ENDING\n*\nDAEND    L     RBAL,DARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   WRITE MESSAGE WITH PUTLINE                                   ***\n***                                                                ***\n***    1.  IOPL was initialized at beginning of program, IOPLIOPB  ***\n***        field will be filled in by PUTLINE execute macro.       ***\n***    2.  PTPB will be filled in by PUTLINE execute macro.        ***\n***    3.  OLD will be filled in by this procedure.                ***\n***                                                                ***\n***    Message number in R15 is multiplied by four and used as     ***\n***    offset into PUTABLE.  PUTABLE contains branch addresses     ***\n***    for processing appropriate message.                         ***\n**********************************************************************\nPUTLPROC ST    RBAL,PURBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         SLL   R15,2                    R15 IS NOW OFFSET INTO PUTABLE\n         L     R15,PUTABLE(R15)         R15 NOW POINTS TO PROCESSING\n         BR    R15                      GO TO APPROPRIATE PROCESSING\n*\nPUTABLE  DC    A(PU0000)                PROCESS ADDR FOR BLANK LINE\n         DC    A(PU0001)                PROCESS ADDR FOR BUL0001I\n         DC    A(PU0002)                PROCESS ADDR FOR BUL0002I\n         DC    A(PU0003)                PROCESS ADDR FOR BUL0003E\n         DC    A(PU0004)                PROCESS ADDR FOR BUL0004E\n         DC    A(PU0005)                PROCESS ADDR FOR BUL0005C\n         DC    A(PU0006)                PROCESS ADDR FOR BUL0006E\n         DC    A(PU0007)                PROCESS ADDR FOR BUL0007C\n*\nPU0000   LA    R15,1(0,0)               SEGMENTS = 1\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0000              ADDR OF BLANK LINE\n         ST    R15,MYOLD+4                INTO O.L.D.\n         B     PUOUTPUT                 GO WRITE IT\n*\nPU0001   LA    R15,2(0,0)               SEGMENTS = 2\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0001A             ADDR OF BUL0001I, SEG #1\n         ST    R15,MYOLD+4                INTO O.L.D.\n         LA    R15,MSG0001B             ADDR OF BUL0001I, SEG #2\n         ST    R15,MYOLD+8                INTO OLD\n         B     PUOUTPUT                 GO WRITE IT\n*\nPU0002   LA    R15,1(0,0)               SEGMENTS = 1\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0002              ADDR OF BUL0002I\n         ST    R15,MYOLD+4                INTO O.L.D.\n         B     PUOUTPUT                 GO WRITE IT\n*\nPU0003   LA    R15,1(0,0)               SEGMENTS = 1\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0003              ADDR OF BUL0003E\n         ST    R15,MYOLD+4                INTO O.L.D.\n         B     PUOUTPUT                 GO WRITE IT\n*\nPU0004   LA    R15,1(0,0)               SEGMENTS = 1\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0004              ADDR OF BUL0004E\n         ST    R15,MYOLD+4                INTO O.L.D.\n         B     PUOUTPUT                 GO WRITE IT\n*\nPU0005   LA    R15,2(0,0)               SEGMENTS = 2\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0005A             ADDR OF BUL0005C, SEG #1\n         ST    R15,MYOLD+4                INTO O.L.D.\n         LA    R15,MSG0005B             ADDR OF BUL0005C, SEG #2\n         ST    R15,MYOLD+8                INTO OLD\n         B     PUOUTPUT                 GO WRITE IT\n*\nPU0006   LA    R15,1(0,0)               SEGMENTS = 1\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0006              ADDR OF BUL0006E\n         ST    R15,MYOLD+4                INTO O.L.D.\n         B     PUOUTPUT                 GO WRITE IT\n*\nPU0007   LA    R15,1(0,0)               SEGMENTS = 1\n         ST    R15,MYOLD                  INTO O.L.D.\n         LA    R15,MSG0007              ADDR OF BUL0007C\n         ST    R15,MYOLD+4                INTO O.L.D.\n         B     PUOUTPUT                 GO WRITE IT\n*\nPUOUTPUT XC    MYPTPB(MYPTPBLN),MYPTPB  ZERO THE PUTLINE PARM BLOCK\n         XC    MYIOECB,MYIOECB          ZERO THE ECB\n         PUTLINE PARM=MYPTPB,OUTPUT=MYOLD,MF=(E,MYIOPL)\n         LTR   R15,R15                  IF RETURN IS ZERO\n         BZ    PUEND                      GO TO END\n         B     PUERR04                  ELSE GO TO ERROR\n*\nPUERR04  LA    R15,X'04'(0,0)           SET VALUE\n         ST    R15,RETCDE                 INTO INTERNAL RETURN CODE\n*\nPUEND    L     RBAL,PURBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA CONSTANTS                                               ***\n***                                                                ***\n**********************************************************************\nCONSTDTA DS    0D                       AREA FOR DATA CONSTANTS\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\nVESTXIT  DC    V(ESTXIT)                ADDR OF ABEND EXIT\n*\nF0       DC    F'0'                     CONSTANT\nF4       DC    F'4'                     CONSTANT\nF133     DC    F'133'                   CONSTANT\nH2       DC    H'2'                     CONSTANT\nH9       DC    H'9'                     CONSTANT\nH75      DC    H'75'                    CONSTANT\nH80      DC    H'80'                    CONSTANT\nP0       DC    PL4'+0'                  CONSTANT\nP99365   DC    PL4'+99365'              CONSTANT\nBLANKS   DC    CL80' '                  BLANK LINE\nZDZEROES DC    XL8'F0F0F0F0F0F0F0F0'    ZONE DECIMAL ZEROES\nZD12     DC    CL2'12'                  CONSTANT\nZD31     DC    CL2'31'                  CONSTANT\n*\nSTCNAM   DC    CL8'&STC'                ALLOWED STC NAME\n*                              0....+....1....+....2....+....3....+\n*              4....+....5....+....6....+\nMSG0000  DC    H'06',H'00',CL02'  '\nMSG0001A DC    H'79',H'00',CL75'BUL0001I '\nMSG0002  DC    H'38',H'00',CL34'BUL0002I CLEAR operation complete.'\nMSG0003  DC    H'67',H'00',CL63'BUL0003E OPERATOR authority is requiredx\n                for CLEAR or BROADCAST.'\nMSG0004  DC    H'64',H'00',CL60'BUL0004E Input file must have 80-byte, X\n               fixed length records.'\nMSG0005A DC    H'68',H'00',CL64'BUL0005C Unable to process date:   CurrX\n               ent date assumed.'\nWRK0005B DC    H'13',H'33',CL09'        .'\nMSG0006  DC    H'59',H'00',CL55'BUL0006E Line ignored.  Too many apostrX\n               ophes (46, max).'\nMSG0007  DC    H'63',H'00',CL59'BUL0007C CLEAR function ignored.  QuantX\n               ity was less than 1.'\n*\nEXTRACTD EXTRACT MF=L                   PARM LIST FOR EXTRACT\n*\nBIWAITIM DC    F'&WAIT'                 WAIT TIME (100THS OF SECONDS)\n*\n*                0-   --       -+--- -1----+----2----+----3----+----4--\n*              --+----5----+----6----+----7----+----8 ----+-\n@BIMAIN  DC    H'87',H'0',CL83'SEND ''-- ....+....1....+....2....+....3X\n               ....+....4....+....5....+....6....+ --'',SAVE'\n@BIHYPH  DC    H'87',H'0',CL83'SEND ''---------------------------------X\n               --------------------------------------'',SAVE'\n*\n@CLCMD   DC    H'18',H'0',CL14'SEND NN,DELETE'\n*\n@M0      GTEDADAT DDNAM=X,UNALC=YES\n@M1      GTEDADAT DSNAM=X,MEMBR=X,STATS=SHR,RTDDN=X\n*\nETDATES  DC    CL7'-DATES '             LITERAL\nETCOM    DC    CL5'-COM '               LITERAL\nETENDE   DC    CL5'-END '               LITERAL\n*\nAPSENDSV DC    CL9' --'',SAVE'          SUFFIX OF SEND TEXT\n*\nDAREGTB  DC    H'000,031,059,090,120,151,181,212,243,273,304,334'\nDALEAPTB DC    H'000,031,060,091,121,152,182,213,244,274,305,335'\nDATSTPAT DC    XL8'F0F0FFF0F0FFF0F0'    'AND' TEST FOR 'NN/NN/NN'\nDARESPAT DC    CL8'00/00/00'            RESULT OF GOOD TEST\n*\nESTAED   ESTAE MF=L\n*\nDSDDNAM  DC    CL8'SYS99999'            DUMMY DDNAME\n*\n@OPENL   OPEN  (),MF=L                  OPEN PARM LIST\n@CLOSL   CLOSE (),MF=L                  CLOSE PARM LIST\n*\n@BCDCB   DCB   DSORG=PS,MACRF=(GM),EODAD=BIEOF\n*\nCONSTEND DS    0D\nCONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n***    See syntax description at beginning of program.             ***\n***                                                                ***\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\nKEYC     IKJKEYWD DEFAULT='NOCLEAR'\n         IKJNAME  'CLEAR',ALIAS=('K'),SUBFLD=SUBC\n         IKJNAME  'NOCLEAR',ALIAS=('NOK')\n*\nKEYBC    IKJKEYWD DEFAULT='NOBROADCAST'\n         IKJNAME  'BROADCAST',ALIAS=('BC'),SUBFLD=SUBBCDSN\n         IKJNAME  'NOBROADCAST',ALIAS=('NOBC')\n*\nSUBBCDSN IKJSUBF\nSBCDSN   IKJPOSIT DSNAME,                                              X\n               USID,                                                   X\n               DEFAULT='''&SYSBC''',                                   X\n               HELP=('1-44 CHARACTER DSNAME AND 1-8 CHARACTER MEMBER')\n*\nSUBC     IKJSUBF\nSC       IKJIDENT 'NUMBER OF MESSAGES',                                X\n               MAXLNTH=2,                                              X\n               FIRST=NUMERIC,OTHER=NUMERIC,                            X\n               INTEG,                                                  X\n               DEFAULT='30',                                           X\n               HELP=('NUMBER OF MESSAGES TO DELETE')\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA AREA IN SUBPOOL 000                                     ***\n***                                                                ***\n**********************************************************************\nWORKD    DSECT                          AREA-13 FOR VARIABLES\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nCPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nRETCDE   DS    F                        INTERNAL RETURN CODE\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\n*\nABRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nUNRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDSRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nBCRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCLRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nETRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nAPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nBIRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPURBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nTIOTADDR DS    F                        ADDRESS OF TIOT\n*\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\n*\nMYUWA    DS    0D                       WORK/SAVE AREA FOR PARSE EXITS\nMYUWASV  DS    18F                      SAVE AREA FOR EXITS\nMYUWAWRK DS    14F                      WORK AREA FOR EXITS\n*\nETTEXTWK DS    CL8                      WORK AREA FOR TEXT\nBCYYDDD  DS    PL4                      CURRENT 00YYDDDC\nLOYYDDD  DS    PL4                      LOW 00YYDDDC\nHIYYDDD  DS    PL4                      HIGH 00YYDDDC\n*\nDASWITCH DS    B'00000000'              SWITCHES\n*                1.......                 X'80' - IT IS A LEAPYEAR\n*\nDADOUBLE DS    0D\n         DS    PL4                      00YYDDDF\nDATEPACK DS    PL4                      WORK AREA FOR PACKED VALUES\nDAYYPACK DS    PL4                      PACKED YEAR\n*\nDATEWORK DS    CL8\n*\nDATE     DS    0CL8\nDAMM     DS    CL2\n         DS    CL1\nDADD     DS    CL2\n         DS    CL1\nDAYY     DS    CL2\n*\nMY0      GTEDADAT MAP=ONLY,DDNAM=X,UNALC=YES\nMY1      GTEDADAT MAP=ONLY,DSNAM=X,MEMBR=X,STATS=SHR,RTDDN=X\n*\nMSG0001B DS    H,H,CL71                 SEGMENT TWO OF MESSAGE\nMSG0005B DS    H,H,CL9                  SEGMENT TWO OF MESSAGE\n*\nMYIOPL   DS    4F                       IO PARM LIST\nMYIOECB  DS    F                        ECB FOR I/O ROUTINES\nMYPTPB   PUTLINE MF=L                   PUTLINE PARM BLOCK (PTPB)\nMYPTPBLN EQU   *-MYPTPB                   LENGTH OF PTPB\n*\n*                                       OUTPUT LINE DESCRIPTOR, 1 LEVEL\nMYOLD    DS    F                          NUMBER OF SEGMENTS\n         DS    5A                         ADDRS OF UP TO FIVE SEGMENTS\n*\nEXTRACTL EXTRACT MF=L                   PARM LIST FOR EXTRACT\nEXTRLEN  EQU   *-EXTRACTL\n*\nBIMAIN   DC    H'87',H'0'               LENGTH, OFFSET\n         DC    CL9'SEND ''-- '          SEND '--B\nBIDATA   DS    CL65                     TEXT\n         DC    CL9' --'',SAVE'          B--',SAVE\n         DS    CL65                     EXPANSION AREA DUE TO APOST'S\n*\nBIRC     DS    F\nBISWITCH DS    B '00000000'             SWITCH AREA\n*                 1.......                X'80' - EOF\n*                 .1111111                      - NOT USED\nBITEXTWK DS    CL8                      SAVE WORK AREA FOR TEXT\n*\nCLCMD    DS    2H,CL14                  SEND DELETE COMMAND\nCLZONE   DS    CL3                      MESSAGE NUMBER, ZD\nCLDOUBLE DS    D                        MESSAGE NUMBER, PACKED\n*\nESTAEL   ESTAE MF=L\nESTAELLN EQU   *-ESTAEL\nESTUPL   DS    0D                       ESTAE USER PARM LIST\n         DS    A                          ADDRESS OF RETURN POINT\n         DS    A                          ADDRESS OF USER WORK AREA\nESTUWK   DS    0D                       ESTAE USER WORK AREA\n         DS    18F                        REGISTER SAVE AREA\n         DS    D                          DOUBLE WORD FOR UNPACK\n         DS    F                          BAL REGISTER SAVE AREA\n         WTO   '.+....1....+....2....+....3....+....4....+....5',      X\n               ROUTCDE=(11),DESC=(7),MF=L\n*\nDSDDNAM1 DS    CL8                      SAVE AREA FOR RETURNED DDNAME\nDSDDNAM2 DS    CL8                      SAVE AREA FOR RETURNED DDNAME\n*\nOPENL    OPEN  (),MF=L                  OPEN PARM LIST\nOPENLLEN EQU   *-OPENL\nCLOSL    CLOSE (),MF=L                  CLOSE PARM LIST\nCLOSLLEN EQU   *-CLOSL\n*\nBCDCB    DCB   DSORG=PS,MACRF=(GM),EODAD=BIEOF\nBCDCBL   EQU   *-BCDCB\n*\nBITEXT   DS    CL255                    BROADCAST TEXT WORK AREA\n*\nWORKDEND DS    0D\nWORKDLEN EQU   *-WORKD                  TOTAL LENGTH OF WORK-13 AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAPPING DSECTS                                               ***\n***                                                                ***\n**********************************************************************\n         CVT   DSECT=YES              , CVTMAP FOR IKJPARS\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n         IKJIOPL                        I/O PARM LIST\n         IKJPSCB                        PROTECTED STEP CONTROL BLOCK\nTIOT     DSECT\n         IEFTIOT1                       TASK I/O TABLE\n*\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES  MAPS DAIRFAIL CONTROL BLOCKS\n         IEFZB4D0                       MAPS SVC99 CONTROL BLOCKS\n*\n         IHASDWA                      , SDWA FOR ESTAE EXIT\n*\n         IHADCB DSORG=PS,DEVD=DA        MAPS DCB\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EQUATES                                                      ***\n***                                                                ***\n**********************************************************************\nRBASE    EQU   12                       BASE REGISTER\nRBASE2   EQU   11                       BASE REGISTER #2\nRBAL     EQU   10                       BAL REGISTER\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n**********************************************************************\n***                  ESTAE (ABEND) EXIT                            ***\n***                                                                ***\n***   This exit will receive control from RTM during ABEND         ***\n***   processing.  Data areas available to this exit will be       ***\n***   the System Diagnostic Work Area (SDWA) provided by the       ***\n***   RTM, and the user parm list and the areas it points to       ***\n***   which are provided by the main routine.                      ***\n***                                                                ***\n***   This exit will format an ABEND message, and write it         ***\n***   with a WTO.  It will then return to RTM.                     ***\n***                                                                ***\n***   The register save area used by this exit has already been    ***\n***   obtained by a GETMAIN by the main program, prior to the      ***\n***   execution of the ESTAE macro.                                ***\n***                                                                ***\n***   This exit is entered by RTM with standard MVS linkage        ***\n***   conventions.  Upon entry, the following relationships        ***\n***   exist:                                                       ***\n***                                                                ***\n*** R1              SDWA (IHASDWA)   ESTUSRPL                      ***\n*** +-----------+   +------------+   +-----------+                 ***\n*** |           |==>| SDWAPARM   |==>| ESURETA   |==> Return point ***\n*** +-----------+   +------------+   +-----------+                 ***\n***                 | SDWAABCC   |   | ESUWRKA   |==> ESUWKD       ***\n***                 +------------+   +-----------+   +-----------+ ***\n***                 |            |                   | Save area | ***\n***                ---          ---                 ---         ---***\n***                ---          ---                 ---         ---***\n***                 |            |                   |           | ***\n***                 +------------+                   +-----------+ ***\n***                 | SDWAGR15   |                   | Other work| ***\n***                 +------------+                   |   areas   | ***\n***                 |            |                   +-----------+ ***\n***                ---          ---                                ***\n***                ---          ---                                ***\n***                 |            |                                 ***\n***                 +------------+                                 ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***          SEE DOCUMENTATION ON PREVIOUS PAGE                    ***\n***                                                                ***\n**********************************************************************\nESTXIT   CSECT\n         STM   R14,R12,12(R13)          SAVE REGS INTO CALLER'S S.A.\n         LR    R12,R15                  R12 HAS BASE ADDRESS\n         USING ESTXIT,R12                 ADDRESSABILITY\n         LR    R11,R1                   R11 POINTS TO SDWA\n         USING SDWA,R11                   ADDRESSABILITY\n         L     R10,SDWAPARM             R10 POINTS TO USER PARM LIST\n         USING ESTUSRPL,R10               ADDRESSABILITY\n         L     R15,ESUSRWKA             R15 POINTS TO USER WORK AREA\n         ST    R13,4(0,R15)             CALLER'S S.A. ADDR TO OWN S.A.\n         ST    R15,8(0,R13)             OWN S.A. ADDR TO CALLER'S S.A.\n         LR    R13,R15                  R13 POINTS TO OWN S.A.\n         USING ESUWKD,R13                 ADDRESSABILITY\n*\nESTMESSG BAL   R9,ESMSG                 FORMAT AND WRITE A MESSAGE\n*\n         PRINT GEN\n         L     R4,ESURETA               R4 CONTAINS RETURN ADDRESS\nESTSETRP SETRP WKAREA=(R11),RC=4,RETADDR=(R4),RETREGS=YES,FRESDWA=YES\n         PRINT NOGEN\n*\nESTEND   XR    R15,R15                  CLEAR RETURN CODE\n         L     R13,4(0,R13)             RESTORE R13, PNT TO CALLER'S SA\n         LM    R0,R12,20(R13)           RESTORE R0-R12 FROM CALLER'S SA\n         L     R14,12(0,R13)            RESTORE R14 FROM CALLER'S S.A.\n         BR    R14                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***                  WRITE ABEND MESSAGE                           ***\n***                                                                ***\n**********************************************************************\nESMSG    ST    R9,ESUBALS1              SAVE BAL REGISTER\n*\n         MVC   WTOL(WTOLLEN),WTOD       INITIALIZE WTO PARM LIST\n*\nESSYSCDE L     R3,SDWAABCC              R3 HAS ABEND CODES\n         SLL   R3,8                     LEFT JUSTIFY SYSTEM CODE\n         LA    R4,WTOL+26               R4 POINTS INTO MESSAGE\n         LA    R5,3                     R5 COUNTER SET TO 3\n         BAL   R9,ESHEX                 CONVERT TO DISPLAYABLE HEX\n*\nESR15CDE L     R3,SDWAGR15              R3 HAS ABEND R15 CONTENTS\n         LA    R4,WTOL+42               R4 POINTS INTO MESSAGE\n         LA    R5,8                     R5 COUNTER SET TO 8\n         BAL   R9,ESHEX                 CONVERT TO DISPLAYABLE HEX\n*\nESUSRCDE L     R3,SDWAABCC              R3 HAS ABEND CODES\n         N     R3,ESXFFF                R3 HAS ONLY USER CODE\n         CVD   R3,ESUWKDBL              CONVERT TO DECIMAL\n         OI    ESUWKDBL+7,X'0F'         KILL THE SIGN\n         UNPK  WTOL+33(4),ESUWKDBL(8)   UNPACK INTO MESSAGE\n*\nESWTO    WTO   MF=(E,WTOL)              WRITE THE MESSAGE\n*\nESMSGEND L     R9,ESUBALS1              RESTORE THE BAL REGISTER\n         BR    R9                       RETURN\n*\n*\nESHEX    XR    R2,R2                    CLEAR EVEN REG OF EVEN/ODD\n         SLDL  R2,4                     R2 RECEIVES ONE HEX DIGIT\n         LA    R4,1(0,R4)               R4 POINTS TO NEXT MESSAGE CHAR\n         LA    R2,ESHEXTBL(R2)          R2 POINTS TO CHAR IN TABLE\n         MVC   0(1,R4),0(R2)            MOVE CHAR FROM TABLE TO MESSAGE\n         BCT   R5,ESHEX                 LOOP BACK UP\n         BR    R9                       RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***          DATA AREAS AND DSECTS FOR ESTAE EXIT                  ***\n***                                                                ***\n**********************************************************************\nESHEXTBL DC    CL16'0123456789ABCDEF'   TRANSLATE TABLE\n         DS    0F                       ALIGN\nESXFFF   DC    X'00000FFF'              MASK TO CLEAR BITS 0-19\nWTOD     WTO   '*** ABEND ***  Codes: SXXX, U9999, R15=XXXXXXXX',      X\n               ROUTCDE=(11),DESC=(7),MF=L\n*\n*\n*\nESTUSRPL DSECT                          USER PARM LIST\nESURETA  DS    A                          RETURN ADDRESS FOR RTM\nESUSRWKA DS    A                          WORK AREA ADDRESS FOR ME\n*\n*\n*\nESUWKD   DSECT                          USER WORK AREA\nESUWKSAV DS    18F                        REGISTER SAVE AREA\nESUWKDBL DS    D                          DOUBLE WORD FOR UNPACK\nESUBALS1 DS    F                          BAL REGISTER SAVE AREA\nWTOL     WTO   '.+....1....+....2....+....3....+....4....+....5',      X\n               ROUTCDE=(11),DESC=(7),MF=L\nWTOLLEN  EQU   *-WTOL                     LENGTH OF WTO PARM LIST\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BULNK": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY BULLET01('TS05801')\n  SETCODE AC(1)       <=== AC(0) IF INSTALLATION-PROVIDED SVC IN USE\n  NAME BULLETIN(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUSTC": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x04\\x00\\x04\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 4, "newlines": 4, "modlines": 0, "user": "HOFFMAN"}, "text": "//BULLETIN PROC\n//BULLETIN EXEC PGM=IKJEFT01,DYNAMNBR=10,REGION=4000K\n//SYSTSPRT DD SYSOUT=A\n//SYSTSIN  DD DSN=SYST.PROCLIB(BULLET01),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUSTCDTA": {"ttr": 2318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x02\\x00\\x02\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 2, "newlines": 2, "modlines": 0, "user": "HOFFMAN"}, "text": "  BULLETIN  CLEAR(50) BROADCAST('SYS1.BULLETIN.DATA')\n  LOGOFF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSNCCPY": {"ttr": 2320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n  SELECT MEMBER=((#DSNCHEC,DSNCHECK,R),              <== HELP MEMBER   X\n               (#DSNC,DSNC,R))                       <== HELP ALIAS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSNCDOC": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\xa2\\x00\\xa2\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 162, "newlines": 162, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                        DSNCHECK Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n    This command checks for the existence of a catalog entry for\n    a given dataset name.  If a member name is selected, DSNCHECK\n    will open the dataset to check for the existence of the\n    member.  If the name/member exists, the return code will be\n    00.  If not, the code will be 12.  In this way, you can check\n    for the existence of a dataset name or member before trying\n    to allocate it in a CLIST.\n\n    Syntax\n\n      DSNCHECK  dsname  LIST    VOLCHECK\n      DSNC              NOLIST  NOVOLCHECK\n\n\nDIRECTORY:\n\n    This PDS contains the following members relating to DSNCHECK:\n\n    DSNCDOC  - This documentation.\n    DSNCJCL  - Non-SMP install jobstream.\n    #DSNCHEC - HELP member.\n    #DSNC    - Alias for HELP member.  Needed for IEBCOPY in\n               the non-SMP install.\n    DSNCCPY  - IEBCOPY control cards.  Used in non-SMP install.\n    DSNCLNK  - LKED control cards.  Used in non-SMP install.\n    DSNCHECK - Source program.\n\n    GTEDAALC - Dynamic allocation macro, described below.\n    GTEDADAT - Dynamic allocation macro, described below.\n    GTEDADOC - Documentation for dynamic allocation macros,\n               described below.\n    GTEDASET - Dynamic allocation macro, described below.\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  The following non-IBM macros are used to assemble\n          DSNCHECK.  If you already have older versions in your\n          system, replace them with the ones from this PDS.\n\n            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).\n            GTEDADAT - Create SVC99/IKJEFF18 control blocks.\n            GTEDASET - Link SVC99/IKJEFF18 control blocks together.\n\n(  )  2.  The following macro is documentation for the GTEDAxxx\n          macros, above.  It is not used by DSNCHECK, but should\n          be copied into your system.\n\n            GTEDADOC - Documentation of GTEDAxxx macros.\n\n(  )  3.  Browse source member DSNCHECK of this PDS.  It contains\n          general information about the module.\n\n      4.  DSNCHECK uses LOCATE through the IKJEFCIR macro to\n          find a catalog entry for the dataset.  If the VOLCHECK\n          operand is used, DSNCHECK then performs an OBTAIN against\n          the VTOC to find the FORMAT-1 DSCB.  This requires more\n          resources and takes a few seconds to run.  If you have\n          catalog entries without corresponding VTOC entries,\n          VOLCHECK should be set as the default.  Otherwise,\n          NOVOLCHECK should be set as the default.\n\n(  )      A.  Edit the source at label 'KOBTAIN'.  Set the\n              default to:\n                      OBTAIN - for VOLCHECK\n                    NOOBTAIN - for NOVOLCHECK\n\n          B.  If you changed the default in 'A', above, change\n              the HELP document as follows:\n\n(  )          (1)  Delete the alias entry #DSNC from this PDS:\n\n                    DELETE 'thispds(#DSNC)' ALIAS\n\n(  )          (2)  Edit the default line of the SYNTAX section\n                   of HELP member #DSNCHEC.\n\n(  )          (3)  Reassign the alias #DSNC to #DSNCHEC:\n\n                    RENAME 'thispds(#DSNCHEC)' 'thispds(#DSNC)' ALIAS\n\n\n(  )  5.  For a non-SMP install, run the jobstream in member\n          DSNCJCL of this PDS.  Recommended load libraries are:\n\n          A.  SYS1.CMDLIB\n          B.  library named on the LNKLST\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles DSNCHECK using the source in member\n              DSNCHECK of this PDS. Note: Access to SYS1.AMODGEN\n              is required because DSNCHECK uses the CVT macro.\n\n          B.  Linkedits DSNCHECK into the selected load library,\n              assigning an alias of DSNC.  Attributes are RENT,\n              REUS and REFR.\n\n          C.  IEBCOPYs member #DSNCHECK and alias entry #DSNC to the\n              selected HELP library, renaming them DSNCHECK and\n              DSNC.\n\n(  )      For an SMP install, follow your installation's procedures\n          for installation of a RENT, REUS, REFR module into\n          LPALIB, LINKLIB, CMDLIB, or another library on the\n          LNKLST, with the HELP member being installed as a\n          ++MAC into HELP or another library in the SYSHELP\n          concatenation.   The ++MOD entry should have TALIAS(DSNC),\n          and the ++MAC entry should have MALIAS(DSNC).\n\n(  )  5.  If you select SYS1.LPALIB as your target library, you\n          will need to IPL, including 'CLPA' in the response to\n          the system parameters prompt.  This will create a new\n          LPA, picking up your DSNCHECK and DSNC alias in the\n          process.\n\n(  )      If you have Dynamic BLDL, and already have a version\n          of DSNCHECK installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n          If you have ACF2 and are using command limiting lists,\n          and are not already running a version of DSNCHECK, you\n          must do one of the following:\n\n(  )      A.  Turn the ALLCMDS bit on in the LOGONID of selected\n              users, and invoke DSNCHECK with the '#' prefix.\n              That is, use the alias name #DSNC.  This limits the\n              use of DSNCHECK only to those LOGONIDs with the\n              ALLCMDS bit on.  Turn the bit on with the following\n              sequence from TSO READY state using a LOGONID with\n              appropriate authority to change the bit.\n\n                   ACF\n                   LIST logonid\n                   CHANGE * ALLCMDS\n                   END\n\n(  )      B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes DSNCHECK available to everyone.\n\n                   $TSOCMD  (DSNCHECK,DSNC)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DSNCHECK": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x02\\xc8\\x02\\xc8\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 712, "newlines": 712, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'DSNCHECK - CHECK FOR DSN OR MEMBER NAME'     CAH83351A\n         PRINT NOGEN\n**********************************************************************\n***                      DSNCHECK                                  ***\n***                                                                ***\n***   THIS TSO COMMAND PROCESSOR CHECKS THE SYSTEM CATALOG FOR     ***\n***   THE EXISTENCE OF A NAME OR ALIAS.  IF A MEMBER NAME IS CAH83351A\n***   SPECIFIED, DSNCHECK ATTEMPTS TO ALLOCATE THE DATASET,  CAH83351A\n***   OPEN IT, AND CHECK FOR A MEMBER NAME WITH BLDL.        CAH83351A\n***                                                                ***\n***   SYNTAX:                                                      ***\n***                                                                ***\n***        DSNCHECK  DSNAME  LIST    VOLCHECK                CAH84310A\n***        DSNC              NOLIST  NOVOLCHECK              CAH84310A\n***                                                                ***\n***                                                                ***\n***   ASM OPTIONS:   RENT                                          ***\n***   LKED OPTIONS:  RENT, REUS, ALIAS(DSNC)                       ***\n***                                                                ***\n***   RETURN CODES:                                                ***\n***        00 - SUCCESSFUL                                   CAH83351A\n***        12 - UNSUCCESSFUL                                 CAH83351A\n***                                                                ***\n***   NON-IBM MACROS:  GTEDADAT - CREATE SVC99/DAIRFAIL      CAH83351A\n***                               CONTROL BLOCKS             CAH83351A\n***                    GTEDASET - LINK GTEDADAT BLOCKS       CAH83351A\n***                    GTEDAALC - DYNAMIC ALLOCATE/DAIRFAIL  CAH83351A\n***                                                                ***\n***   REGISTER USAGE:                                              ***\n***        R0-R1 - LINKAGE CONVENTIONS, MACROS                     ***\n***        R2-R3 - (UNUSED)                                        ***\n***        R4-R5 - WORK                                            ***\n***        R6-R8 - (UNUSED)                                        ***\n***           R9 - BASE OF DSECT IKJPARMD                          ***\n***          R10 - BAL REGISTER                                    ***\n***          R11 - BASE OF CSECT MYPCL                             ***\n***          R12 - BASE OF CSECT CHECKDSN                          ***\n***          R13 - BASE OF REG SAVE AREA AND WORK0                 ***\n***          R14 - LINKAGE CONVENTIONS                             ***\n***          R15 - LINKAGE CONVENTIONS, RETURN CODE                ***\n***                                                                ***\n***   AUTHOR:                                                      ***\n***      CHUCK HOFFMAN, CONSULTANT                                 ***\n***                                                                ***\n***      USER SERVICES CENTER                                      ***\n***      BUREAU OF SYSTEMS OPERATIONS                              ***\n***      OFFICE OF MANAGEMENT INFORMATION SYSTEMS                  ***\n***      EXECUTIVE OFFICE FOR ADMINISTRATION AND FINANCE           ***\n***      COMMONWEALTH OF MASSACHUSETTS (PHEW!)                     ***\n***                                                               ***\n***      ONE ASHBURTON PLACE                                       ***\n***      BOSTON, MA  02108                                         ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAINTENANCE HISTORY:                                         ***\n***                                                                ***\n***   1.  A.  ADD FEATURE TO ALLOCATE, OPEN, AND BLDL IF A   CAH83351A\n***           MEMBER NAME IS SPECIFIED IN THE DSNAME.        CAH83351A\n***                                                          CAH83351A\n***       B.  MODIFY REPORTING TO ACCOUNT FOR MEMBER NAMES.  CAH83351A\n***                                                          CAH83351A\n***       C.  CHANGE DEFAULT FROM NOLIST TO LIST.            CAH83351A\n***                                                          CAH83351A\n***   2.  A.  ADD OBTAIN|NOOBTAIN OPERAND,                   CAH84310A\n***           ALIAS VOLCHECK|NOVOLCHECK.                     CAH84310A\n***                                                          CAH84310A\n***       B.  CHANGE WORDING OF OUTPUT MESSAGE.              CAH84310A\n***                                                          CAH84310A\n***       C.  CHANGE OUTPUT BUFFER LENGTH FROM 80 TO 120.    CAH84310A\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***      MACROS                                                    ***\n**********************************************************************\n         MACRO\n&LABL    PRFRM &NAME,&ERRAD=\n&LABL    BAL   RBAL,&NAME               PERFORM PROCEDURE\n         CLC   RETCDE(4),F0               IF RETURN CODE 0\n         BE    *+12                         BRANCH AROUND\n         BAL   RBAL,ERROR                 ELSE PERFORM ERROR ROUTINE\n         B     &ERRAD                       AND GO TO ERROR ADDRESS\n         MEND\n         EJECT\n**********************************************************************\n***            EQUATES                                             ***\n**********************************************************************\nRBASE    EQU   12                       BASE REGISTER NUMBER\nRBAL     EQU   10                       BAL REGISTER NUMBER\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n**********************************************************************\n***      LINKAGE CONVENTIONS IN                                    ***\n**********************************************************************\nDSNCHECK CSECT                        , CSECTID\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(8)                     LENGTH\n         DC    CL8'DSNCHECK'              ID\n         DC    CL8'&SYSDATE'              SYSTEM DATE MM/DD/YY\n         DC    CL6' &SYSTIME'             SYSTEM TIME HH.MM\n         STM   R14,R12,12(R13)          SAVE R0-R12, R14-R15\n         LR    RBASE,R15                LOAD BASE ADDRESS BASER\n         USING DSNCHECK,RBASE           ADDRESSABILTIY OF CSECT\n         GETMAIN R,LV=WORK0LEN          GET STORAGE FOR S.A. + WORK\n         ST    R13,4(0,R1)              ADDR OF PREV S.A. TO MY S.A.\n         ST    R1,8(0,R13)              ADDR OF MY S.A. TO PREV S.A.\n         LM    R0,R1,20(R13)            RESTORE R0-R1 TO PRE-GETMAIN\n         L     R13,8(0,R13)             R13 POINTS TO MY S.A.\n         USING WORK0,R13                ADDRESSABILITY OF WORK0\n         ST    R1,R1SAVE                INITIAL VAL OF R1 TO MY STORAGE\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n         XC    OBCDE,OBCDE              CLEAR OBTAIN RET CDE  CAH84310A\n         EJECT\n**********************************************************************\n***      MAINLINE PROCESSING                                       ***\n**********************************************************************\nMAIN     CNOP  0,4                      ALIGN\n*\n         LA    R11,MYPPL                ADDRESSABILITY OF\n         USING PPL,R11                    MY PARS PARM LIST\n         USING IKJPARMD,R9                PARM DESCRIPTOR LIST\n*\n         PRFRM PARSE,ERRAD=MAEND        PARSE THE PARMS\n         PRFRM DSN,ERRAD=MAEND          GET DATASET NAME\n         BAL   RBAL,INITCIR             INITIALIZE CIR PARM LIST\n         PRFRM CIR,ERRAD=MALIST         GET CATALOG INFORMATION\n         PRFRM MEMBR,ERRAD=MALIST       GET MEMBER INFO      CAH83351A\n*                                                            CAH83351A\nMALIST   BAL   RBAL,LIST                PRODUCE MESSAGE\n*\n         B     MAEND                    GO TO END OF MAINLINE\n*\nMAEND    B     ENDING                   GO TO LINKAGE BACK TO CALLER\n         EJECT\n**********************************************************************\n***      LINKAGE CONVENTIONS BACK                                  ***\n**********************************************************************\nENDING   XC    COMPCODE,COMPCODE        CLEAR COMPLETION CDE CAH83351A\n         CLC   OBCDE(4),F0              IF OBTAIN R/C BAD     CAH84310A\n         BE    *+14                       THEN                CAH84310A\n         MVC   COMPCODE(4),F12            SET COMP CODE 12    CAH84310A\n         B     ENDRLSE                  ELSE                  CAH84310A\n         CLC   BLDLCDE(4),F0            IF BLDL R/C BAD      CAH83351A\n         BE    *+14                       THEN               CAH83351A\n         MVC   COMPCODE(4),F12            SET COMP CODE 12   CAH83351A\n         B     ENDRLSE                  ELSE                 CAH83351A\n         CLC   CIRCDE(4),F0             IF CIR R/C BAD       CAH83351A\n         BE    ENDRLSE                    THEN               CAH83351A\n         MVC   COMPCODE(4),F12            SET COMP CODE 12   CAH83351A\n*                                                            CAH83351A\nENDRLSE  L     R4,MYANS                 ADDRESS OF PDL       CAH83351A\n         IKJRLSA  (R4)                    RELEASE SPACE\n*\n         LR    R1,R13                   LOAD MY S.A. ADDR FOR FREEMAIN\n         L     R14,COMPCODE             SAVE PROGRAM COMPLETION CODE\n         L     R13,4(0,R13)             RESTORE R13 FROM MY S.A.\n         FREEMAIN R,LV=WORK0LEN,A=(R1)  FREE STORAGE FOR WORK0\n         LR    R15,R14                  SET PROGRAM COMPLETION CODE\n         LM    R0,R12,20(R13)           RESTORE R0-R12 FM CALLERS S.A.\n         L     R14,12(0,R13)            RESTORE R14 FROM CALLERS S.A.\n         MVI   12(R13),X'FF'            RETURN INDCATR TO CALLERS S.A.\n         BR    R14                      RETURN TO CALLER\n         EJECT\n**********************************************************************\n***    ERROR PROCEDURE,  --- RETCDE IS NOT CLEARED ---             ***\n**********************************************************************\nERROR    ST    RBAL,ERBALSAV            SAVE BAL REGISTER VALUE\n*\n         L     R15,RETCDE               R15 HAS RETURN CODE\n         C     R15,COMPCODE             IF R15 GREATER THAN COMP CODE\n         BNH   *+8                        THEN\n         ST    R15,COMPCODE               REPLACE CC WITH HIGHER R15\n*\nEREND    L     RBAL,ERBALSAV            RELOAD BAL REGISTER\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***    PARSE THE PARMS                                             ***\n**********************************************************************\nPARSE    ST    RBAL,PABALSAV            SAVE BAL REGISTER VALUE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         L     R4,R1SAVE                ADDRESSABILITY\n         USING CPPL,R4                    OF CPPL\n*\n         MVC   PPLUPT(4),CPPLUPT        ADDR OF UPT TO MYPPL\n         MVC   PPLECT(4),CPPLECT          .     ECT     .\n         LA    R1,MYECB                   .             .\n         ST    R1,PPLECB                  .     ECB     .\n         MVC   PPLPCL(4),VMYPCL           .     PCL     .\n         LA    R1,MYANS                   .             .\n         ST    R1,PPLANS                  .     ANS     .\n         MVC   PPLCBUF(4),CPPLCBUF        .     CBUF    .\n         XC    PPLUWA(4),PPLUWA         ZERO TO UWA IN MYPPL\n*\n         CALLTSSR  EP=IKJPARS,MF=(E,MYPPL)\n         LTR   R15,R15                  IF BAD PARSE\n         BNZ   PAERR0C                    GO TO ERROR\n         L     R9,MYANS                 ELSE ADDR OF IKJPARMD TO R9\n*\n         B     PAEND                    BRANCH TO ENDING\n*\nPAERR0C  LA    R15,X'0C'(0,0)           CREATE RETURN CODE\n         ST    R15,RETCDE               PUT INTO STORAGE\n         B     PAEND                    BRANCH TO END OF ROUTINE\n*\nPAEND    L     RBAL,PABALSAV            RELOAD BAL REGISTER\n         BR    RBAL                     RETURN\n*\n         DROP  R4                       DROP ADDRESSABILITY OF CPPL\n         EJECT\n**********************************************************************\n***    GET DATASET NAME                                            ***\n**********************************************************************\nDSN      ST    RBAL,DSBALSAV            SAVE BAL REGISTER VALUE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         MVC   DSNARG(45),BLANKS        CLEAR DSN PLUS TRAILING SPACE\n         LA    R4,PDSN                  R4 POINTER TO PDE FOR DSN\n         LH    R5,4(0,R4)               R5 IS LEN OF DSN\n         STH   R5,DSNARGLN              SAVE IT\n         BCTR  R5,0                     R5-1 FOR EXEC\n         L     R4,0(0,R4)               R4 POINTS TO DSN\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   DSNARG(0),0(R4)            MOVE DSN TO STORAGE\n         EX    R5,*-6                   EXECUTE THE MOVE\n*\n         B     DSEND                    BRANCH TO ENDING\n*\nDSERR0C  LA    R15,X'0C'(0,0)           CREATE RETURN CODE\n         ST    R15,RETCDE               PUT INTO STORAGE\n         B     DSEND                    BRANCH TO END OF ROUTINE\n*\nDSEND    L     RBAL,DSBALSAV            RELOAD BAL REGISTER\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***    INITIALIZE CIR PARM LIST                                    ***\n**********************************************************************\nINITCIR  ST    RBAL,INBALSAV            SAVE BAL REGISTER VALUE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         MVC   CIRPARM(CIRPARML),CIRDATA  CONSTANTS TO PARM LIST\n         LA    R1,CIRWORK                 ADDR OF WORK AREA\n         ST    R1,CIRWA                     INTO PARM LIST\n         ST    R13,CIRSAVE                ADDR OF S.A. INTO PARM LIST\n         LA    R1,DSNARG                  ADDR OF DSN\n         ST    R1,CIRSRCH                   INTO PARM LIST\n*\n         MVC   AREALN(2),H255           SET LENGTH OF WORK AREA\n*\n         B     INEND                    BRANCH TO ENDING\n*\nINERR00  LA    R15,X'00'(0,0)           CREATE RETURN CODE\n         ST    R15,RETCDE               PUT INTO STORAGE\n         B     INEND                    BRANCH TO END OF ROUTINE\n*\nINEND    L     RBAL,INBALSAV            RELOAD BAL REGISTER\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***    GET INFORMATION FROM CATALOG                                ***\n**********************************************************************\nCIR      ST    RBAL,CIBALSAV            SAVE BAL REGISTER VALUE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\nCIREXEC  CALLTSSR EP=IKJEHCIR,MF=(E,CIRPARM)\n         ST    R15,CIRCDE               SAVE RETURN CODE     CAH83351A\n         LTR   R15,R15                  IF NOT ZERO\n         BNZ   CIERR0C                    GO TO ERROR\n*\n         B     CIEND                    BRANCH TO ENDING\n*\nCIERR0C  LA    R15,X'0C'(0,0)           CREATE RETURN CODE\n         ST    R15,RETCDE               PUT INTO STORAGE\n         B     CIEND                    BRANCH TO END OF ROUTINE\n*\nCIEND    L     RBAL,CIBALSAV            RELOAD BAL REGISTER\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***    LIST DSN AND VOLUME, OR ERROR MESSAGE                       ***\n**********************************************************************\nLIST     ST    RBAL,LIBALSAV            SAVE BAL REGISTER VALUE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         CLC   KLIST(2),H1              IF 'LIST' OPERAND NOT USED\n         BNE   LIEND                      GO TO ENDING\n*\n         MVC   MSGAREA(120),BLANKS      CLEAR MESSAGE AREA\n         LH    R4,DSNARGLN              R4 IS LENGTH OF DSNARG\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   MSGAREA(0),DSNARG          MOVE DSN PLUS TRAILING BLANK\n         EX    R4,*-6                   EXECUTE THE MOVE\n         LA    R4,MSGAREA+1(R4)         R4 POINTS TO NEXT PLACE IN MSG\n         ST    R4,NXTMSGCH                SAVE IT\n         CLC   CIRCDE(4),F0             IF CIR R/C NOT ZERO   CAH84310A\n         BNE   LINOTFND                   GO TO 'NOT FOUND'   CAH84310A\n*                                                             CAH84310A\n         CLC   KOBTAIN,H1               IF 'OBTAIN' NOT USED  CAH84310A\n         BNE   LIFOUND                    GO TO 'FOUND'       CAH84310A\n*                                                             CAH84310A\n         BAL   RBAL,OBTAIN              CHECK VTOC INFO       CAH84310A\n         CLC   RETCDE,F0                IF VTOC OBTAIN GOOD   CAH84310A\n         BE    LIFOUND                    GO TO 'FOUND'       CAH84310A\n         B     LINVOL                   ELSE 'NOT ON VOLUME'  CAH84310A\n*                                                             CAH84310A\nLIFOUND  BAL   RBAL,CATLGMSG            BUILD 'FOUND' MSG     CAH84310A\n         B     LIMSG                    GO TO WRITE MSG       CAH84310A\n*                                                             CAH84310A\nLINOTFND BAL   RBAL,NOTFOUND            BUILD 'NOT FOUND' MSG CAH84310A\n         B     LIMSG                    GO TO WRITE MSG       CAH84310A\n*                                                             CAH84310A\nLINVOL   BAL   RBAL,NVOLMSG             BUILD 'NOT ON VOL' MS CAH84310A\n         B     LIMSG                    GO TO WRITE MSG       CAH84310A\n*                                                             CAH84310A\nLIMSG    LA    R4,MSGAREA               POINT TO MSG AREA     CAH84310A\n         TPUT  (R4),120                 WRITE THE MESSAGE\n*\n         B     LIEND                    BRANCH TO ENDING\n*\nLIERR0C  LA    R15,X'0C'(0,0)           CREATE RETURN CODE\n         ST    R15,RETCDE               PUT INTO STORAGE\n         B     LIEND                    BRANCH TO END OF ROUTINE\n*\nLIEND    L     RBAL,LIBALSAV            RELOAD BAL REGISTER\n         BR    RBAL                     RETURN\n         EJECT\n************************************************************* CAH84310A\n***    OBTAIN INFORMATION FROM VTOC                       *** CAH84310A\n************************************************************* CAH84310A\nOBTAIN   ST    RBAL,OBBALSAV            SAVE BAL REG VALUE    CAH84310A\n         XC    RETCDE,RETCDE            CLEAR INTERNAL R/C    CAH84310A\n*                                                             CAH84310A\n         XC    OBWORK,OBWORK            CLEAR WORK AREA       CAH84310A\n         MVC   OBDSN(44),BLANKS         CLEAR DSN-44 AREA     CAH84310A\n         LH    R4,DSNARGLN              R4 LEN OF DSN         CAH84310A\n         BCTR  R4,0                       -1 FOR EXEC         CAH84310A\n         L     R5,PDSN                  R5 POINTS TO DSN      CAH84310A\n         B     *+10                     BRANCH AROUND MOVE    CAH84310A\n         MVC   OBDSN(0),0(R5)             MAKE 44-BYTE DSN    CAH84310A\n         EX    R4,*-6                   EXECUTE THE MOVE      CAH84310A\n         MVC   OBLIST(OBLISTLN),@OBLIST INITIALIZE CAMLIST    CAH84310A\n         LA    R4,OBDSN                 ADDR OF DSN-44        CAH84310A\n         ST    R4,OBLIST+4                INTO CAMLIST        CAH84310A\n         LA    R4,VOLSER                ADDR OF VOLSER        CAH84310A\n         ST    R4,OBLIST+8                INTO CAMLIST        CAH84310A\n         LA    R4,OBWORK                ADDR OF WORK AREA     CAH84310A\n         ST    R4,OBLIST+12               INTO CAMLIST        CAH84310A\n*                                                             CAH84310A\nOBVTOC   OBTAIN OBLIST                  OBTAIN VTOC INFO      CAH84310A\n         ST    R15,OBCDE                SAVE RETURN CODE      CAH84310A\n         LTR   R15,R15                  IF R/C NOT ZERO       CAH84310A\n         BNZ   OBERR0C                    GO TO ERROR         CAH84310A\n         B     OBEND                    ELSE GO TO END        CAH84310A\n*                                                             CAH84310A\nOBERR0C  LA    R15,X'0C'(0,0)           CREATE RETURN CODE    CAH84310A\n         ST    R15,RETCDE               PUT INTO STORAGE      CAH84310A\n         B     OBEND                    GO TO ENDING          CAH84310A\n*                                                             CAH84310A\nOBEND    L     RBAL,OBBALSAV            RELOAD BAL REGISTER   CAH84310A\n         BR    RBAL                     RETURN                CAH84310A\n         EJECT\n**********************************************************************\n***    CONSTRUCT 'CATALOGED' MESSAGE                               ***\n**********************************************************************\nCATLGMSG ST    RBAL,CABALSAV            SAVE BAL REGISTER VALUE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         L     R4,NXTMSGCH              R4 POINTS TO NEXT MSG CHAR\n*                                                             CAH84310A\nCACAT    CLC   PDSN+12(4),H0            IF MEMBER NAME USED   CAH84310A\n         BE    CACAT2                        AND              CAH84310A\n         CLI   DAWRB+(S99ERROR-S99RB),X'67'  NO 67XX ERROR    CAH84310A\n         BNE   CAONVOL                    SKIP 'CATALOGED'    CAH84310A\nCACAT2   CLC   KOBTAIN,H1               IF 'OBTAIN' USED      CAH84310A\n         BE    CAONVOL                    SKIP 'CATALOGED'    CAH84310A\n         MVC   0(10,R4),CATALOGD        ELSE 'CATALOGED' MSG  CAH84310A\n         LA    R4,10(0,R4)                INCR POINTER        CAH84310A\n*                                                             CAH84310A\nCAONVOL  MVC   0(10,R4),CATMSG          'ON VOLUME ' TO MSG   CAH84310A\n         LA    R4,10(0,R4)              INCR POINTER          CAH84310A\n         MVC   0(6,R4),VOLSER           VOLSER TO MSG LINE\n         LA    R4,6(0,R4)               INCR POINTER         CAH83351A\n*                                                            CAH83351A\n         TM    PDSN+14,X'80'            IF NO MEMBER NAME    CAH83351A\n         BNO   CAEND                      GO TO END          CAH83351A\n*                                                            CAH83351A\n         MVC   0(2,R4),COMMA            ', ' TO MSG          CAH83351A\n         LA    R4,2(0,R4)               INCR POINTER         CAH83351A\n         LH    R5,PDSN+12               R5 IS LEN OF MEMNAME CAH83351A\n         BCTR  R5,0                     R5 - 1 FOR EXEC      CAH83351A\n         L     R6,PDSN+8                R6 POINTS TO MEMNAME CAH83351A\n         B     *+10                     BRANCH AROUND MOVE   CAH83351A\n         MVC   0(0,R4),0(R6)              MEMNAME TO LINE    CAH83351A\n         EX    R5,*-6                   EXECUTE THE MOVE     CAH83351A\n         LA    R4,1(R5,R4)              INCR POINTER         CAH83351A\n*                                                            CAH83351A\n         TM    SWITCH1,X'80'            IF MEMBR WAS ABORTED CAH83351A\n         BNO   *+14                       THEN               CAH83351A\n         MVC   0(12,R4),NOCHECK           ' NOT CHECKED' MSG CAH83351A\n         B     CAEND                    ELSE                 CAH83351A\n         CLC   BLDLCDE(4),F0            IF BLDL WAS BAD      CAH83351A\n         BE    *+14                       THEN               CAH83351A\n         MVC   0(10,R4),NOFIND            ' NOT FOUND' MSG   CAH83351A\n         B     CAEND                    ELSE                 CAH83351A\n         MVC   0(12,R4),ISMEMBER          ' IS A MEMBER' MSG CAH83351A\n*\nCAEND    L     RBAL,CABALSAV            RELOAD BAL REGISTER\n         BR    RBAL                     RETURN\n         EJECT                                                CAH84310A\n**********************************************************************\n***    CONSTRUCT 'NOT FOUND' MESSAGE                               ***\n**********************************************************************\nNOTFOUND ST    RBAL,NOBALSAV            SAVE BAL REGISTER VALUE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         L     R4,NXTMSGCH              R4 POINTS TO NEXT MSG CHAR\n         MVC   0(20,R4),NOTMSG          'NOT FOUND IN CATALOG'\n*\nNOEND    L     RBAL,NOBALSAV            RELOAD BAL REGISTER\n         BR    RBAL                     RETURN\n         SPACE 3                                              CAH84310A\n************************************************************* CAH84310A\n***    CONSTRUCT 'NOT ON VOLUME' MESSAGE                  *** CAH84310A\n************************************************************* CAH84310A\nNVOLMSG  ST    RBAL,NVBALSAV            SAVE BAL REGISTER     CAH84310A\n         XC    RETCDE,RETCDE            CLEAR INTERNAL R/C    CAH84310A\n*                                                             CAH84310A\n         L     R4,NXTMSGCH              R4 -> NEXT MSG CHAR   CAH84310A\n         MVC   0(14,R4),NVOLTEXT        'NOT ON VOLUME '      CAH84310A\n         LA    R4,14(0,R4)              INCREMENT POINTER     CAH84310A\n         MVC   0(6,R4),VOLSER           FILL IN VOLSER        CAH84310A\n*                                                             CAH84310A\nNVEND    L     RBAL,NVBALSAV            RELOAD BAL REGISTER   CAH84310A\n         BR    RBAL                     RETURN                CAH84310A\n         EJECT                                               CAH83351A\n************************************************************ CAH83351A\n***    GET MEMBER NAME INFORMATION                       *** CAH83351A\n************************************************************ CAH83351A\nMEMBR    ST    RBAL,MEBALSAV            SAVE BAL REG VALUE   CAH83351A\n         XC    RETCDE,RETCDE            0 INTERNAL RET CODE  CAH83351A\n*                                                            CAH83351A\nMEBYPASS TM    PDSN+14,X'80'            IF NO MEMBER NAME    CAH83351A\n         BNO   MEEND                      BR TO ENDING       CAH83351A\n*                                                            CAH83351A\nMENONZRO MVC   BLDLCDE(4),F1            SET NON 0 BLDL R/C   CAH83351A\n*                                                            CAH83351A\n         MVC   DAW(DAWLEN),DAD          INITIALIZE CNTL BLKS CAH83351A\nMESET    GTEDASET DAW,CPPLPTR=R1SAVE    LINK CNTL BLOCKS     CAH83351A\n         L     R4,PDSN+00               R4 POINTS TO DSN     CAH83351A\n         LH    R5,PDSN+04               R5 IS DSN LENGTH     CAH83351A\n         BCTR  R5,0                     R5 - 1 FOR EXEC      CAH83351A\n         B     *+10                     BRANCH AROUND MOVE   CAH83351A\n         MVC   DAWDSNAM(0),0(R4)          MOVE DSN TO T.U.   CAH83351A\n         EX    R5,*-6                   EXECUTE MOVE         CAH83351A\nMEALLOC  GTEDAALC DAW,VERB=AL,ERRMSG=NO   DO DYNAMIC ALC     CAH83351A\n         CLC   DAWS99RC(4),F0           IF BAD RETURN CODE   CAH83351A\n         BNE   MEABORT                    GO TO ABORT        CAH83351A\n         TM    DAWRTORG,X'02'           IF DSORG NE PO/POU   CAH83351A\n         BNO   MEABORT                    GO TO ABORT        CAH83351A\n*                                                            CAH83351A\n         MVC   INDCB(INDCBLN),DCBMODEL  INITIALIZE DCB       CAH83351A\n         LA    R4,INDCB                 R5 POINTS TO IN DCB  CAH83351A\n         USING IHADCB,R4                ADDRESSABILITY       CAH83351A\n         MVC   DCBDDNAM(8),DAWRTDDN     FILL IN DDNAME       CAH83351A\n*                                                            CAH83351A\nMEOPEN   MVC   OPENLIST(4),OPENLI       OPTIONS TO PARM LIST CAH83351A\n         LA    R5,INDCB                 ADDRESS OF INPUT DCB CAH83351A\n         STCM  R5,7,OPENLIST+1            INTO PARM LIST     CAH83351A\nMEOPEN2  OPEN  MF=(E,OPENLIST)        , OPEN THE DATSET      CAH83351A\n         TM    DCBOFLGS,X'10'           IF NOT SUCCESSFUL    CAH83351A\n         BZ    MEABORT                    GO TO ABORT        CAH83351A\n*                                                            CAH83351A\n         DROP  R4                       DROP ADDRESSABILITY  CAH83351A\n*                                                            CAH83351A\nMEBLDL   MVC   BLDLLIST(16),BLDLDAT     INITIALIZE BLDL LIST CAH83351A\n         L     R4,PDSN+08               R4 POINT TO MEM NAME CAH83351A\n         LH    R5,PDSN+12               R5 IS MEM NAME LEN   CAH83351A\n         BCTR  R5,0                     R5 - 1 FOR EXEC      CAH83351A\n         B     *+10                     BRANCH AROUND MOVE   CAH83351A\n         MVC   BLDLLIST+4(0),0(R4)        NAME TO BLDL LIST  CAH83351A\n         EX    R5,*-6                   EXECUTE MOVE         CAH83351A\nMEBLDL2  BLDL  INDCB,BLDLLIST           DO BLDL              CAH83351A\n         ST    R15,BLDLCDE              SAVE RETURN CODE     CAH83351A\n         LTR   R15,R15                  IF BAD RETURN        CAH83351A\n         BZ    *+8                        THEN SET           CAH83351A\n         ST    R15,BLDLCDE                  INTO LOCAL R/C   CAH83351A\n*                                                            CAH83351A\nMECLOSE  LA    R4,INDCB                 ADDRESS OF INPUT DCB CAH83351A\n         MVC   CLOSLIST(4),CLOSPRTI     INITIALIZE PARM LIST CAH83351A\nMECLOSE2 CLOSE ((R4)),MF=(E,CLOSLIST)   CLOSE THE DATASETS   CAH83351A\n         LTR   R15,R15                  IF RET CODE NOT ZERO CAH83351A\n         BNZ   MEERR0C                    GO TO ERROR        CAH83351A\n*                                                            CAH83351A\nMEUNALC  MVC   DUW(DUWLEN),DUD          INITIALIZE CNTL BLKS CAH83351A\n         GTEDASET DUW,CPPLPTR=R1SAVE    LINK CNTL BLOCKS     CAH83351A\n         MVC   DUWDDNAM(8),DAWRTDDN     SET DDNAME           CAH83351A\nMEUNALC2 GTEDAALC DUW,VERB=UN,ERRMSG=YES  DO DYNAMIC FREE    CAH83351A\n         CLC   DUWS99RC(4),F0           IF BAD RETURN CODE   CAH83351A\n         BNE   MEERR0C                    GO TO ERROR        CAH83351A\n*                                                            CAH83351A\nMELOCBAD CLC   BLDLCDE,F0               IF BLDL WAS BAD      CAH83351A\n         BNE   MEERR0C                    SET BAD RETCDE     CAH83351A\n         B     MEEND                    ELSE GO TO END       CAH83351A\n*                                                            CAH83351A\nMEABORT  OI    SWITCH1,X'80'            TURN ON ABORT SW     CAH83351A\n         B     MEERR0C                  GO TO ERROR          CAH83351A\n*                                                            CAH83351A\nMEERR0C  LA    R15,X'0C'(0,0)           CREATE RETURN CODE   CAH83351A\n         ST    R15,RETCDE               PUT INTO STORAGE     CAH83351A\n         B     MEEND                    BRANCH TO END        CAH83351A\n*                                                            CAH83351A\nMEEND    L     RBAL,MEBALSAV            RELOAD BAL REGISTER  CAH83351A\n         BR    RBAL                     RETURN               CAH83351A\n         EJECT\n**********************************************************************\n***    DATA CONSTANTS                                              ***\n**********************************************************************\nCONST    DS    0D\nD0       DS    0D                       DOUBLEWORD OF ZEROES\nF0       DS    0F                       FULLWORD OF ZEROES\nH0       DS    0H                       HALFWORD OF ZEROES\n         DC    D'0'\nF1       DC    F'1'                     FULLWORD 1           CAH83351A\nF4       DC    F'4'                     FULLWORD 4\nF8       DC    F'8'                     FULLWORD 8\nF12      DC    F'12'                    FULLWORD 12\nF16      DC    F'16'                    FULLWORD 16\nXFFS     DC    XL4'FFFFFFFF'            FULLWORD X'FF'\nBLANKS   DC    CL120' '                 120 BLANKS\nH255     DC    H'255'                   CONSTANT\nH1       DC    H'1'                     KEYWORD CHOICE 1\nCATALOGD DC    C'CATALOGED '            LITERAL               CAH84310A\nCATMSG   DC    C'ON VOLUME '            LITERAL              CAH83351A\nCOMMA    DC    C', '                    LITERAL              CAH83351A\nISMEMBER DC    C' IS A MEMBER'          LITERAL              CAH83351A\nNOFIND   DC    C' NOT FOUND'            LITERAL              CAH83351A\nNOCHECK  DC    C' NOT CHECKED'          LITERAL              CAH83351A\nNOTMSG   DC    C'NOT FOUND IN CATALOG'  LITERAL\nNVOLTEXT DC    C'NOT ON VOLUME '        LITERAL               CAH84310A\n*\nCIRDATA  DS    0D                       CONSTANTS FOR CIR PARM\n         DC    X'04'                    OPTIONS = GET VOLUME\n         DS    X'0000'                  RESERVED\n         DC    X'00'                    LOCATE RETURN CODE\n         DS    A                        ADDRESS OF SEARCH ARGUMENT\n         DC    A(0)                     ADDR OF VOLID OF CVOL\n         DS    A                        ADDR OF WORK AREA\n         DS    A                        ADDR OF SAVE AREA\n         DC    A(0)                     ADDR OF PASSWORD\n*\nDAD      GTEDADAT  DSNAM=X,STATS=SHR,RTDDN=YES,RTORG=YES     CAH83351A\nDUD      GTEDADAT  DDNAM=X                                   CAH83351A\n*                                                            CAH83351A\nDCBMODEL DCB   DSORG=PO,MACRF=R                              CAH83351A\nOPENLI   OPEN  (,(INPUT)),MF=L                               CAH83351A\nCLOSPRTI CLOSE (,),MF=L                                      CAH83351A\n*                                                            CAH83351A\nBLDLDAT  DS    0H                                            CAH83351A\nBLDLFF   DC    H'1'                     1 ENTRY              CAH83351A\nBLDLLL   DC    H'12'                    SHORT FORMAT         CAH83351A\nBLDLNAME DC    CL8' '                   NAME                 CAH83351A\nBLDLTTRK DC    XL4'00'                  TT, R, K             CAH83351A\n*                                                            CAH83351A\nVMYPCL   DC    V(MYPCL)                 ADDRESS OF PCE LIST\n*\n@OBLIST  CAMLST SEARCH,0,0,0            CAMLIST FOR OBTAIN    CAH84310A\n*                                                             CAH84310A\n         DS    0D                       ALIGN\nCONSTLEN EQU   *-CONST                  LENGTH OF CONSTANT DATA AREA\n         EJECT\n**********************************************************************\n***    PARMS                                                       ***\n**********************************************************************\nMYPCL    IKJPARM  DSECT=IKJPARMD\n*\nPDSN     IKJPOSIT DSNAME,USID,PROMPT='NAME OF DATASET TO BE LOCATED'\n*\nKLIST    IKJKEYWD DEFAULT='LIST'                             CAH83351A\n         IKJNAME  'LIST'\n         IKJNAME  'NOLIST'\n*                                                             CAH84310A\nKOBTAIN  IKJKEYWD DEFAULT='OBTAIN'                            CAH84310A\n         IKJNAME  'OBTAIN',ALIAS=('VOLCHECK')                 CAH84310A\n         IKJNAME  'NOOBTAIN',ALIAS=('NOVOLCHECK')             CAH84310A\n*\n         IKJENDP\n         EJECT\n**********************************************************************\n***    DATA AREA (BASE ADDR IS R13)                                ***\n**********************************************************************\nWORK0    DSECT\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nRETCDE   DS    F                        INTERNAL RETURN CODE\nR1SAVE   DS    F                        INITIAL VALUE OF R1\nPABALSAV DS    F                        BAL REGISTER SAVE AREA\nDSBALSAV DS    F                        BAL REGISTER SAVE AREA\nINBALSAV DS    F                        BAL REGISTER SAVE AREA\nCIBALSAV DS    F                        BAL REGISTER SAVE AREA\nNOBALSAV DS    F                        BAL REGISTER SAVE AREA\nNVBALSAV DS    F                        BAL REG SAVE AREA     CAH84310A\nCABALSAV DS    F                        BAL REGISTER SAVE AREA\nLIBALSAV DS    F                        BAL REGISTER SAVE AREA\nOBBALSAV DS    F                        BAL REG SAVE AREA     CAH84310A\nERBALSAV DS    F                        BAL REGISTER SAVE AREA\nMEBALSAV DS    F                        BAL REG SAVE AREA    CAH83351A\n*\nBLDLCDE  DS    F                        BLDL RETURN CODE     CAH83351A\nCIRCDE   DS    F                        IKJEFCIR RET CODE    CAH83351A\nSWITCH1  DC    B'00000000'              SWITCHES             CAH83351A\n*                1.......                 NO CHECK MEM NAME  CAH83351A\n*                .1111111                 UNUSED             CAH83351A\n*                                                            CAH83351A\nCIRPARM  DS    0D\nCIROPT   DC    X'04'                    OPTIONS = GET VOLUME\n         DS    X'0000'                  RESERVED\nCIRLOCRC DC    X'00'                    LOCATE RETURN CODE\nCIRSRCH  DS    A                        ADDRESS OF SEARCH ARGUMENT\nCIRCVOL  DC    A(0)                     ADDR OF VOLID OF CVOL\nCIRWA    DS    A                        ADDR OF WORK AREA\nCIRSAVE  DS    A                        ADDR OF SAVE AREA\nCIRPSWD  DC    A(0)                     ADDR OF PASSWORD\nCIRPARML EQU   *-CIRPARM                LENGTH OF PARM BLOCK\n*\nDAW      GTEDADAT  MAP=ONLY,                                 CAH83351A X\n               DSNAM=X,STATS=SHR,RTDDN=YES,RTORG=YES         CAH83351A\n*\nDUW      GTEDADAT  MAP=ONLY,DDNAM=X                          CAH83351A\n*                                                            CAH83351A\nINDCB    DCB   DSORG=PO,MACRF=R                              CAH83351A\n         DS    0D                                            CAH83351A\nINDCBLN  EQU   *-INDCB                                       CAH83351A\nOPENLIST DS    2F                       OPEN PARM LIST       CAH83351A\nCLOSLIST DS    2F                       CLOSE PARM LIST      CAH83351A\n*                                                            CAH83351A\nCIRWORK  DS    0H                       CIR WORK AREA\nAREALN   DS    H                        LENGTH OF AREA\nDATALN   DS    H                        LENGTH OF RETURNED DATA\nVOLDATA  DS    0CL251                   RETURNED DATA\n         DS    CL1                      RESERVED\nDEVTYPE  DS    XL4                      DEVICE TYPE\nVOLSER   DS    CL6                      VOLUME SERIAL NUMBER\nFILESEQ  DS    XL2                      FILE SEQUENCE NUMBER (TAPE)\n         DS    CL2                      RESERVED\n         DS    CL236\n*\nDSNARGLN DS    H                        LENGTH OF DSN\nDSNARG   DS    CL45                     DSN PLUS TRAILING SPACE\n*\nNXTMSGCH DS    A                        ADDR OF NEXT MESSAGE CHARACTER\nMSGAREA  DS    CL120                    OUTPUT MESSAGE LINE\n*\nMYPPL    DS    7A                       MY PARSE PARM LIST\nMYECB    DS    F                        EVENT CONTROL BLOCK\nMYANS    DS    F                        PTR TO PDL\n*                                                            CAH83351A\nBLDLLIST DS    4F                       BLDL ENTRY LIST      CAH83351A\n*                                                            CAH83351A\nOBCDE    DS    F                        OBTAIN RETURN CDE     CAH84310A\nOBWORK   DS    XL140                    WORK AREA FOR VTOC    CAH84310A\nOBDSN    DS    CL44                     WORK AREA FOR DSN     CAH84310A\nOBLIST   CAMLST SEARCH,0,0,0            CAMLIST FOR OBTAIN    CAH84310A\nOBLISTLN EQU   *-OBLIST                 LENGTH OF CAMLIST     CAH84310A\n*                                                             CAH84310A\n         DS    0D                       ALIGN FOR GETMAIN\nWORK0LEN EQU   *-WORK0                  LENGTH OF WORK0 DATA AREA\n         EJECT\n**********************************************************************\n***    MAPPING MACROS                                              ***\n**********************************************************************\n         PRINT NOGEN\n         CVT   DSECT=YES                COMM VECTOR TABLE\n         IKJPPL                         PARSE PARAMETER LIST\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IEFZB4D0                       MAPS SVC-99 BLOCKS   CAH83351A\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES  MAPS IKJEFF18 BLK CAH83351A\n         IHADCB DSORG=PS,DEVD=DA      , MAPS THE DCB FOR DA  CAH83351A\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSNCJCL": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00>\\x00>\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 62, "newlines": 62, "modlines": 0, "user": "HOFFMAN"}, "text": "//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.CMDLIB',\n//             HELPLIB='SYST.HELP',\n//             CMDNAME=DSNCHECK,LINKMEM=DSNCLNK,COPYMEM=DSNCCPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSNCLNK": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY DSNCHECK('CAH83351A')\n  ALIAS DSNC\n  NAME DSNCHECK(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQ$R": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x13\\x00\\x13\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 19, "newlines": 19, "modlines": 0, "user": "HOFFMAN"}, "text": "         MACRO\n         EQ$R\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FACPY": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n  SELECT MEMBER=((#FREEALL,FREEALL,R),               <== HELP MEMBER   X\n               (#FA,FA,R))                           <== HELP ALIAS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FADOC": {"ttr": 2831, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\xbc\\x00\\xbc\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 188, "newlines": 188, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                         FREEALL Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n    This command is a new version of FREEALL which utilizes SVC99\n    to unallocate files.  This version has the advantage of using\n    all IBM supported code.  SVC99 does all the dealing with the\n    TIOT, etc., so that this program can be maintained by more\n    junior systems programmers.  This version also allows the\n    designation of masks for installation excepted DDNAMEs,\n    instead of just explicit names.\n\n    The user is able to supply a list of DDNAMEs and/or masks to\n    be excepted from the unallocation process.  The user can also\n    choose whether to unallocate concatenations, and whether to\n    unallocate datasets not dynamically allocated (useful when\n    running TSO in batch, or when you need to free datasets\n    allocated during LOGON).  The user can also see a list of the\n    default installation masks/DDNAMEs which will always be\n    excepted from the unallocations.\n\n\n    Syntax -\n\n        FREEALL  EXCEPT(mask1,mask2,...)                                    TS05\n                 SYSMASKS                                                   TS05\n                 NOLIST | LIST                                              TS05\n                 CONCATS | NOCONCATS                                        TS05\n                 DYNAM | ALL                                                TS05\n                 TEMP | NOTEMP  (or  SCRATCH | NOSCRATCH)                   TS05\n                 DUMMY | NODUMMY                                            TS05\n                 SYSOUT | NOSYSOUT                                          TS05\n                 TERM | NOTERM                                              TS05\n\nDIRECTORY:\n\n    This PDS contains the following members relating to FREEALL:\n\n    FADOC    - This documentation.\n    FAJCL    - Non-SMP install jobstream.\n    #FREEALL - HELP member.\n    #FA      - Alias for HELP member.  Needed for IEBCOPY in\n               the non-SMP install.\n    FACPY    - IEBCOPY control cards.  Used in non-SMP install.\n    FALNK    - LKED control cards.  Used in non-SMP install.\n    FREEALL  - Source program.\n\n    EQ$R     - Register equates, described below.\n    GTEDAALC - Dynamic allocation macro, described below.\n    GTEDADAT - Dynamic allocation macro, described below.\n    GTEDADOC - Documentation for dynamic allocation macros,\n               described below.\n    GTEDASET - Dynamic allocation macro, described below.\n    LINKBACK - Linkage conventions, described below.\n    LINKSAVE - Linkage conventions, described below.\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  The following non-IBM macros are used to assemble\n          FREEALL.  If you already have older versions in your\n          system, replace them with the ones from this PDS.\n\n            EQ$R     - Register equates.\n            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).\n            GTEDADAT - Create SVC99/IKJEFF18 control blocks.\n            GTEDASET - Link SVC99/IKJEFF18 control blocks together.\n            LINKBACK - Linkage conventions out.\n            LINKSAVE - Linkage conventions in.\n\n(  )  2.  The following macro is documentation for the GTEDAxxx\n          macros, above.  It is not used by FREEALL, but should\n          be copied into your system.\n\n            GTEDADOC - Documentation of GTEDAxxx macros.\n\n(  )  3.  Edit source member FREEALL of this PDS.  It contains\n          general information about the module.  Add EXNAM\n          macros as desired to define masks of DDNAMEs which\n          your installation will except from processing.  The\n          following examples show the use of the EXNAM macro:\n\n          A.  To permanently except file names SYSIN and SYSOUT\n              from processing:\n\n                      EXNAM  SYSIN\n                      EXNAM  SYSOUT\n\n          B.  To permanently except ANY file name beginning with\n              'ISP' (ISPF files) and any 6-character file name\n              beginning with 'PANDD' (Panvalet files):\n\n                      EXNAM  ISP-\n                      EXNAM  PANDD*\n\n              Note: '*' is a placeholder.\n                    '-' means anything is a match from that\n                        point on.\n\n          C.  To permanently except ANY file name containing the\n              letter 'T' in the third position:\n\n                      EXNAM  **T-\n\n          Several DDNAME masks are already in the source code.\n          Modify the list to suit your installation's needs.  The\n          list is searched sequentially.  Those file names most\n          often used should be placed at the top of the list.\n\n(  )  4.  For a non-SMP install, run the jobstream in member\n          FAJCL of this PDS.  Recommended load libraries are:\n\n          A.  SYS1.LPALIB\n          B.  SYS1.LINKLIB\n          C.  SYS1.CMDLIB\n          D.  library named on the LNKLST\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles FREEALL using the source in member\n              FREEALL of this PDS.  Note: Access to SYS1.AMODGEN\n              is required because FREEALL uses the CVT macro.\n\n          B.  Linkedits FREEALL into the selected load library,\n              assigning an alias of FA.  Attributes are RENT,\n              REUS and REFR.\n\n          C.  IEBCOPYs member #FREEALL and alias entry #FA to the\n              selected HELP library, renaming them FREEALL and\n              FA.\n\n(  )      For an SMP install, follow your installation's procedures\n          for installation of a RENT, REUS, REFR module into\n          LPALIB, LINKLIB, CMDLIB, or another library on the\n          LNKLST, with the HELP member being installed as a\n          ++MAC into HELP or another library in the SYSHELP\n          concatenation.   The ++MOD entry should have TALIAS(FA),\n          and the ++MAC entry should have MALIAS(FA).\n\n(  )  5.  If you select SYS1.LPALIB as your target library, you\n          will need to IPL, including 'CLPA' in the response to\n          the system parameters prompt.  This will create a new\n          LPA, picking up your FREEALL and FA alias in the\n          process.\n\n(  )      If you have Dynamic BLDL, and already have a version\n          of FREEALL installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n          If you have ACF2 and are using command limiting lists,\n          and are not already running a version of FREEALL, you\n          must do one of the following:\n\n(  )      A.  Turn the ALLCMDS bit on in the LOGONID of selected\n              users, and invoke FREEALL with the '#' prefix.\n              That is, use the name #FREEALL or alias #FA.  This\n              limits the use of FREEALL only to those LOGONIDs\n              with the ALLCMDS bit on.  Turn the bit on with the\n              following sequence from TSO READY state using a\n              LOGONID with appropriate authority to change the\n              bit.\n\n                   ACF\n                   LIST logonid\n                   CHANGE * ALLCMDS\n                   END\n\n(  )      B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes FREEALL available to everyone.\n\n                   $TSOCMD  (FREEALL,FA)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FAJCL": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00>\\x00>\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 62, "newlines": 62, "modlines": 0, "user": "HOFFMAN"}, "text": "//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.LPALIB',\n//             HELPLIB='SYST.HELP',\n//             CMDNAME=FREEALL,LINKMEM=FALNK,COPYMEM=FACPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FALNK": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY FREEALL('TS05204')\n  ALIAS FA\n  NAME FREEALL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FREEALL": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x11\\x00\\x98$\\x7f\\x01\\x18\\x04O\\x13D\\t&\\t%\\t&\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1998-09-04T00:00:00", "modifydate": "2018-02-13T13:44:11", "lines": 2342, "newlines": 2341, "modlines": 2342, "user": "SBGOLOB"}, "text": "         TITLE 'FREEALL - FREE ALLOCATED FILES WITH SVC99'\n*%A PPLINK NOTEST                                                  JRB\n*L ALIAS FA                                                        JRB\n*L NAME  FREEALL(R)                                                JRB\n*                                                                  JRB\n**********************************************************************\n***                                                                ***\n***                   FREEALL COMMAND                              ***\n***                                                                ***\n***  THIS COMMAND IS A NEW VERSION OF FREEALL WHICH UTILIZES SVC99 ***\n***  TO UNALLOCATE FILES.  THIS VERSION HAS THE ADVANTAGE OF USING ***\n***  ALL IBM SUPPORTED CODE.  SVC99 DOES ALL THE DEALING WITH THE  ***\n***  TIOT, ETC., SO THAT THIS PROGRAM CAN BE MAINTAINED BY MORE    ***\n***  JUNIOR SYSTEMS PROGRAMMERS.  THIS VERSION ALSO ALLOWS THE     ***\n***  DESIGNATION OF MASKS FOR INSTALLATION EXCEPTED DDNAMES,       ***\n***  INSTEAD OF JUST EXPLICIT NAMES.                               ***\n***                                                                ***\n***  THE USER IS ABLE TO SUPPLY A LIST OF DDNAMES AND/OR MASKS TO  ***\n***  BE EXCEPTED FROM THE UNALLOCATION PROCESS.  THE USER CAN ALSO ***\n***  CHOOSE WHETHER TO UNALLOCATE CONCATENATIONS, AND WHETHER TO   ***\n***  UNALLOCATE DATASETS NOT DYNAMICALLY ALLOCATED (USEFUL WHEN    ***\n***  RUNNING TSO IN BATCH, OR WHEN YOU NEED TO FREE DATASETS       ***\n***  ALLOCATED DURING LOGON).  THE USER CAN ALSO SEE A LIST OF THE ***\n***  DEFAULT INSTALLATION MASKS/DDNAMES WHICH WILL ALWAYS BE       ***\n***  EXCEPTED FROM THE UNALLOCATIONS.  (SEE THE HELP DOCUMENT FOR  ***\n***  INSTRUCTIONS ON HOW TO CONSTRUCT DDNAME MASKS.  INSTALLATION  ***\n***  MASKS ARE DEFINED WITH MACRO 'EXNAM'.)                     TS05204\n***                                                                ***\n***  THE TEMP (ALIAS SCRATCH), DUMMY, SYSOUT AND TERM OPERANDS  TS05203\n***  HAVE BEEN ADDED TO THIS VERSION TO MAKE IT COMPATABLE WITH TS05203\n***  THE J/TIP PRODUCT.                                         TS05203\n***                                                             TS05203\n***                                                                ***\n***  SYNTAX:                                                       ***\n***                                                                ***\n***  FREEALL  EXCEPT(MASK1,MASK2,...)                           TS05203\n***           ONLY(PREFIX)                                         JRB\n***           SYSMASKS                                          TS05203\n***           NOLIST | LIST                                     TS05203\n***           CONCATS | NOCONCATS                               TS05203\n***           DYNAM | ALL | NOEXCEPTIONS                 TS05203   JRB\n***           TEMP | NOTEMP  (OR  SCRATCH | NOSCRATCH)          TS05203\n***           DUMMY | NODUMMY                                   TS05203\n***           SYSOUT | NOSYSOUT                                 TS05203\n***           TERM | NOTERM                                     TS05203\n***                                                                ***\n***                                                                ***\n***  ALIAS: FA                                                     ***\n***                                                                ***\n***  REQUIRED OPERANDS:  NONE                                      ***\n***   DEFAULT OPERANDS:  NOLIST,CONCATS,DYNAM,TEMP,             TS05203\n***                      DUMMY,SYSOUT,TERM                      TS05203\n***                                                                ***\n*************************************************************** TS05203\n         EJECT                                                  TS05203\n*************************************************************** TS05203\n***                                                                ***\n***  NON-IBM MACROS:  (ALL FROM CBT MODS TAPE, SAME AUTHOR)        ***\n***    LINKSAVE - LINKAGE CONVENTIONS IN                           ***\n***    LINKBACK - LINKAGE CONVENTIONS BACK                         ***\n***    GTEDADAT - CREATE SVC99 AND DAIRFAIL CONTROL BLOCKS         ***\n***    GTEDASET - LINK SVC99 AND DAIRFAIL CONTROL BLOCKS TOGETHER  ***\n***    GTEDAALC - EXECUTE SVC99 AND DAIRFAIL                       ***\n***                                                                ***\n***                                                                ***\n***  ASM OPTIONS:   RENT                                           ***\n***  LKED OPTIONS:  RENT REUS REFR                                 ***\n***                                                                ***\n***                                                                ***\n***  RECOMMENDED LIBRARY:                                          ***\n***        (1)  LPALIB                                             ***\n***        (2)  LINKLIB                                            ***\n***        (3)  CMDLIB                                             ***\n***                                                                ***\n**********************************************************************\n         EJECT 6                                                TS05203\n**********************************************************************\n***                                                                ***\n***  AUTHOR:                                                       ***\n***     CHUCK HOFFMAN, CONSULTANT                                  ***\n***     USER SERVICES CENTER                                       ***\n***     BUREAU OF SYSTEMS OPERATIONS (BSO)                         ***\n***     OFFICE OF MANAGEMENT INFORMATION SYSTEMS (OMIS)            ***\n***     EXECUTIVE OFFICE FOR ADMINISTRATION AND FINANCE (A&F)      ***\n***     COMMONWEALTH OF MASSACHUSETTS                              ***\n***     ONE ASHBURTON PLACE, ROOM 1619                             ***\n***     BOSTON, MA  02108                                          ***\n***                                 (617) 727-5725  WORK           ***\n***                                 (617) 769-8547  HOME           ***\n***  ALIAS:                                                     TS05203\n***     CHUCK HOFFMAN, SYSTEMS PROGRAMMER                       TS05203\n***     GTE LABORATORIES, INC.                                  TS05203\n***     TECHNICAL COMPUTATION CENTER                            TS05203\n***     40 SYLVAN ROAD                                          TS05203\n***     WALTHAM, MA  02254                                      TS05203\n***                                 (617) 466-2131              TS05203\n***                                                                ***\n***  MODIFIED SEPTEMBER 1998:                                      JRB\n***     JEFFREY R. BROIDO                                          JRB\n***     broidoj@gmail.com                                          JRB\n***                                                                JRB\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***                                                                ***\n***     R0-R3  LINKAGE CONVENTIONS, MACROS, WORK                   ***\n***     R4-R6  WORK                                                ***\n***     R7-R8  (UNUSED)                                            ***\n***        R9  BASE OF IKJPARMD DSECT                              ***\n***       R10  BAL REGISTER                                        ***\n***       R11  (UNUSED)                                            ***\n***       R12  BASE OF PROGRAM                                     ***\n***       R13  LINKAGE CONVENTIONS, BASE OF WORKD DSECT            ***\n***   R14-R15  LINKAGE CONVENTIONS, WORK                           ***\n***                                                                ***\n*************************************************************** TS05203\n         SPACE 3                                                TS05203\n*************************************************************** TS05203\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                             TS05201\n***  1.  ADD FT05F001 AND FT06F001 TO SYSTEM MASKS.             TS05201\n***                                                             TS05201\n***  2.  A.  ADD TEMP|NOTEMP (SCRATCH|NOSCRATCH), TERM|NOTERM,  TS05203\n***          SYSOUT|NOSYSOUT, DUMMY|NODUMMY OPERANDS FOR        TS05203\n***          COMPATABILITY WITH J/TIP.  (J/TIP 'SCHEDULE'       TS05203\n***          COMMAND USES A HARDCODED CALL TO 'FREEALL' WITH    TS05203\n***          THESE OPERANDS.)                                   TS05203\n***                                                             TS05203\n***      B.  ADD NOTATION ON OUTPUT OF WHETHER THE FILE IS      TS05203\n***          A DATASET, CONCATENATION, TERMINAL, TEMP,          TS05203\n***          SYSOUT OR DUMMY FILE.  REMOVE THE 'CONCATENATION'  TS05203\n***          FOOTNOTE PROCESSING.                               TS05203\n***                                                             TS05203\n***      C.  SHOW EXPANSION OF TEXT UNITS FOR DYNAMIC           TS05203\n***          ALLOCATION.                                        TS05203\n***                                                             TS05203\n***      D.  VARIOUS PAGE EJECTS, ETC., TO MAKE THE LISTING     TS05203\n***          EASIER TO READ.                                    TS05203\n***                                                             TS05203\n***  3.  ADD MACROS EXNAM AND EXTBL TO MAKE IT EASIER TO DEFINE TS05204\n***      INSTALLATION-EXCEPTED MASKS.                           TS05204\n***                                                             TS05204\n***  4.  PANVALET REMOVED FROM SYSTEM MASKS.                       JRB\n***                                                                JRB\n***  5.  PSEUDO STEPLIB, IPCS, SMP TABLE, STEPLIB AND PSEUDO-      JRB\n***      STEPLIB, SYSEXEC, SYSLBC AND SYSUADS ADDED TO SYSTEM      JRB\n***      MASKS.                                                    JRB\n***                                                                JRB\n***  6.  \"NOEXCEPTIONS\" PARM ADDED.                                JRB\n***                                                                JRB\n***  7.  \"ONLY\" PARM ADDED.                                        JRB\n***                                                                ***\n**********************************************************************\n         EJECT                                                  TS05204\n*************************************************************** TS05204\n***                                                         *** TS05204\n***   LOCAL MACROS                                          *** TS05204\n***                                                         *** TS05204\n*************************************************************** TS05204\n*                                                               TS05204\n         TITLE 'FREEALL - LOCAL MACROS'\n         MACRO\n&NAME    EQ$R\n         LCLA  &I\n&I       SETA  0\n.LUP     ANOP\nR&I      EQU   &I\n&I       SETA  &I+1\n         AIF   (&I LE 15).LUP\n         MEND\n         MACRO\n&CSNAME  LINKSAVE &BASE=,&GETMAIN=NO,&GETAMT=136\n.*********************************************************************\n.*  MACRO FOR STANDARD LINKAGE CONVENTIONS AT PROGRAM ENTRY.       ***\n.*  USED IN CONJUNCTION WITH THE LINKBACK MACRO.                   ***\n.*                                                                 ***\n.*  BASE=NN     REGISTER NUMBER OF BASE REGISTER.                  ***\n.*                                                                 ***\n.*  GETMAIN=YES WILL DO A GETMAIN FOR STORAGE SPACE.  THIS         ***\n.*              STORAGE WILL BE POINTED TO BY R13, AND WILL BE     ***\n.*              FREED AUTOMATICALLY BY THE LINKBACK MACRO.         ***\n.*                                                                 ***\n.*  GETAMT=NNNN (VALID ONLY IF GETMAIN=YES) DEFAULT AMOUNT OF      ***\n.*              SPACE OBTAINED WILL BE 72 BYTES FOR SAVE AREA,     ***\n.*              PLUS 64 BYTES FOR PROGRAMMER'S USE.  R13 WILL BE   ***\n.*              THE BASE ADDRESS OF THE STORAGE AREA.  THIS        ***\n.*              AMOUNT WILL BE FREED BY THE LINKBACK MACRO.        ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*********************************************************************\n         GBLC  &GMN,&GAMT\n         LCLA  &C,&D\n&GAMT    SETC  '&GETAMT'\n&GMN     SETC  '&GETMAIN'\n         AIF   ('&GMN' EQ 'YES').FORM2\n&CSNAME  CSECT\n&C       SETA  K'&CSNAME\n&D       SETA  ((20+&C)/2)*2\n         B     &D.(0,15)                BRANCH AROUND ID\n         DC    AL1(&C)                    LENGTH\n         DC    CL&C'&CSNAME'              ID\n         DC    CL8'&SYSDATE'              SYSTEM DATE:  MM/DD/YY\n         DC    CL6' &SYSTIME'             SYSTEM TIME:  HH.MM\n         STM   14,12,12(13)             SAVE R0-R12, R14-R15\n         LR    &BASE,15                 LOAD BASE ADDRESS\n         USING &CSNAME,&BASE            ASSIGN BASE REGISTER\n         ST    13,MYSV&SYSNDX+4         STORE ADDR OF PREV SAVE AREA\n*                                         INTO MY SAVE AREA\n         LA    14,MYSV&SYSNDX           LOAD ADDR OF MY SAVE AREA\n         ST    14,8(0,13)                 STORE IT INTO PREV SAVE AREA\n         LR    13,14                      ALSO LOAD IT INTO R13\n         B     MYSV&SYSNDX+72           BRANCH AROUND MY SAVE AREA\nMYSV&SYSNDX DC 18F'0'                   MY SAVE AREA\n         MEXIT\n.FORM2   ANOP\n&CSNAME  CSECT\n&C       SETA  K'&CSNAME\n&D       SETA  ((20+&C)/2)*2\n         B     &D.(0,15)                BRANCH AROUND ID\n         DC    AL1(&C)                    LENGTH\n         DC    CL&C'&CSNAME'              ID\n         DC    CL8'&SYSDATE'              SYSTEM DATE:  MM/DD/YY\n         DC    CL6' &SYSTIME'             SYSTEM TIME:  HH.MM\n         STM   14,12,12(13)             SAVE R0-R12, R14-R15\n         LR    &BASE,15                 LOAD BASE ADDRESS\n         USING &CSNAME,&BASE            ASSIGN BASE REGISTER\n*        GETMAIN R,LV=&GETAMT           GET STORAGE FOR S.A. + WORK\n         GETMAIN R,LV=&GETAMT           GET STORAGE FOR S.A. + WORK\n         ST    13,4(0,1)                STORE ADDR OF PREV SAVE AREA\n*                                         INTO MY SAVE AREA\n         ST    1,8(0,13)                ADDR OF MY SA TO PREV SAVE AREA\n         LM    0,1,20(13)               RESTORE R0-R1 TO ORIGINAL VALUE\n         L     13,8(0,13)               POINT R13 TO MY SAVE AREA\n         MEND\n         MACRO\n&ENDNAME LINKBACK &RCADDR=\n.*********************************************************************\n.*  MACRO FOR STANDARD LINKAGE CONVENTIONS AT PROGRAM EXIT.        ***\n.*  USED IN CONJUNCTION WITH THE LINKSAVE MACRO.                   ***\n.*                                                                 ***\n.*  RCADDR=NAME   NAME OF FULLWORD RETURN CODE TO BE LOADED        ***\n.*                INTO R15.  IF THIS OPERAND IS NOT USED, THE      ***\n.*                RETURN CODE WILL BE THE VALUE CONTAINED IN R15   ***\n.*                JUST PRIOR TO ENTERING THE CODE GENERATED BY     ***\n.*                THIS MACRO.                                      ***\n.*                                                                 ***\n.* NOTE -                                                          ***\n.*  IF GETMAIN=YES WAS USED WITH LINKSAVE, THIS MACRO WILL         ***\n.*  FREEMAIN THE STORAGE AREA WHICH LINKSAVE GOTMAINED.            ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*********************************************************************\n         GBLC  &GMN,&GAMT\n         LCLA  &RCLEN\n&RCLEN   SETA  K'&RCADDR               LENGTH OF NAME OF RETURN CODE\n         AIF ('&GMN' EQ 'YES').FORM2   IF LINKSAVE USED A GETMAIN, GO\n&ENDNAME L     13,4(0,13)              RESTORE R13 FROM MY SAVE AREA\n         AIF (&RCLEN EQ 0).FORM1A\n         L     15,&RCADDR              SET RETURN CODE\n.FORM1A  ANOP\n         LM    0,12,20(13)             RESTORE R0-12\n         L     14,12(0,13)             RESTORE R14\n         MVI   12(13),X'FF'            RETURN INDICATOR\n         BR    14                      RETURN TO CALLING PROGRAM\n         MEXIT\n.FORM2   ANOP\n&ENDNAME LR    1,13                    COPY MY SA ADDR FOR FREEMAIN\n         AIF (K'&RCADDR EQ 0).FORM2C\n         L     14,&RCADDR              SAVE RETURN CODE\n         AGO .FORM2A\n.FORM2C  LR    14,15                   SAVE RETURN CODE\n.FORM2A  ANOP\n         L     13,4(0,13)              RESTORE R13 FROM MY SAVE AREA\n*        FREEMAIN R,LV=&GAMT,A=(1)     FREE STORAGE\n         FREEMAIN R,LV=&GAMT,A=(1)     FREE STORAGE\n         LR    15,14                   SET RETURN ADDRESS\n.FORM2B  ANOP\n         LM    0,12,20(13)             RESTORE R0-12\n         L     14,12(0,13)             RESTORE R14\n         MVI   12(13),X'FF'            RETURN INDICATOR\n         BR    14                      RETURN TO CALLING PROGRAM\n         MEND\n         MACRO\n&NM      GTEDADAT  &MAP=,&DDNAM=,&DSNAM=,&MEMBR=,&STATS=,              X\n               &NDISP=,&CDISP=,                                        X\n               &TRK=,&CYL=,&BLKLN=,&PRIME=,&SECND=,&DIR=,&RLSE=,       X\n               &SPFRM=,&ROUND=,&VLSER=,&PRIVT=,&VLSEQ=,&VLCNT=,        X\n               &VLRDS=,&UNIT=,&UNCNT=,&PARAL=,&SYSOU=,&SPGNM=,&SFMNO=, X\n               &OUTLM=,&CLOSE=,&COPYS=,&LABEL=,&DSSEQ=,&PASPR=,        X\n               &INOUT=,&EXPDT=,&RETPD=,&DUMMY=,&FCBIM=,&FCBAV=,        X\n               &QNAME=,&TERM=,&UCS=,&UFOLD=,&UVRFY=,&DCBDS=,&DCBDD=,   X\n               &SUSER=,&SHOLD=,&MSVGP=,&SSNM=,&PROT=,&BFALN=,&BFTEK=,  X\n               &BLKSZ=,&BUFIN=,&BUFL=,&BUFMX=,&BUFNO=,&BUFOF=,&BUFOU=, X\n               &BUFRQ=,&BUFSZ=,&CODE=,&CPRI=,&DEN=,&DSORG=,&EROPT=,    X\n               &GNCP=,&INTVL=,&KYLEN=,&LIMCT=,&LRECL=,&MODE=,&NCP=,    X\n               &OPTCD=,&PCIR=,&PCIS=,&PRTSP=,&RECFM=,&RSRVF=,&RSRVS=,  X\n               &SOWA=,&STACK=,&THRSH=,&TRTCH=,&IPLTX=,&DIAGN=,&FUNC=,  X\n               &FRID=,&PASSW=,&PERMA=,&CNVRT=,                         X\n               &RTDDN=,&RTDSN=,&RTORG=,       <== FOR DSN ALLOCATION   X\n               &INDDN=,&INDSN=,&INORG=,       <== FOR INFO RETRIEVAL   X\n               &RTMEM=,&RTSTA=,&RTNDP=,&RTCDP=,&RTLIM=,&RTATT=,        X\n               &RTLST=,&RTTYP=,&RELNO=,                                X\n               &RTVOL=,&SSPRM=,&TCBAD=,&REMOV=,&UNALC=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n           LCLA  &TUPLEN\n&TUPLEN    SETA  0\n*\n&NM        DS  0D                       ALIGN FOR GETMAIN\n*\n**********************************************************************\n***        TEXT UNITS FOR SVC99                                    ***\n**********************************************************************\n*\n&NM.TU     DS  0F   TEXT UNITS FOR SVC99\n.*\n.*********************************************************************\n.***       DSNAME ALLOCATION TEXT UNITS - VERB CODE 01             ***\n.*********************************************************************\n.*\n.TUDDNAM   AIF ('&DDNAM' EQ '').TUDSNAM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDDNA#\n           DS  XL6\n&NM.DDNAM  DS  CL8                      DDNAME\n           AGO .TUDSNAM\n.TUDDNA#   ANOP\n           DC  X'0001,0001,0008'\n&NM.DDNAM  DC  CL8'&DDNAM'              DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSNAM   AIF ('&DSNAM' EQ '').TUMEMBR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSNA#\n           DS  XL6\n&NM.DSNAM  DS  CL44                     DATASET NAME\n           AGO .TUMEMBR\n.TUDSNA#   ANOP\n           DC  X'0002,0001,002C'        DATASET NAME (NEXT LINE)\n&NM.DSNAM  DC  CL44'&DSNAM'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMEMBR   AIF ('&MEMBR' EQ '').TUSTATS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUMEMB#\n&NM.MEMKY  DS  XL6\n&NM.MEMBR  DS  CL8                      MEMBER NAME\n           AGO .TUSTATS\n.TUMEMB#   ANOP\n&NM.MEMKY  DC  X'0003,0001,0008'\n&NM.MEMBR  DC  CL8'&MEMBR'              MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSTATS   AIF ('&STATS' EQ '').TUNDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSTAT#\n&NM.STATS  DS  XL7                      STATUS\n           AGO .TUNDISP\n.TUSTAT#   AIF ('&STATS' NE 'OLD').TUSTAT2\n&NM.STATS  DC  X'0004,0001,0001,01'     STATUS=OLD\n           AGO .TUNDISP\n.TUSTAT2   AIF ('&STATS' NE 'MOD').TUSTAT4\n&NM.STATS  DC  X'0004,0001,0001,02'     STATUS=MOD\n           AGO .TUNDISP\n.TUSTAT4   AIF ('&STATS' NE 'NEW').TUSTAT8\n&NM.STATS  DC  X'0004,0001,0001,04'     STATUS=NEW\n           AGO .TUNDISP\n.TUSTAT8   AIF ('&STATS' NE 'SHR').TUNDISP\n&NM.STATS  DC  X'0004,0001,0001,08'     STATUS=SHR\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNDISP   AIF ('&NDISP' EQ '').TUCDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNDIS#\n&NM.NDISP  DS  XL7                      NORMAL DISP\n           AGO .TUCDISP\n.TUNDIS#   AIF ('&NDISP' NE 'UNCATLG').TUNDIS2\n&NM.NDISP  DC  X'0005,0001,0001,01'     NORMAL DISP=UNCATLG\n           AGO .TUCDISP\n.TUNDIS2   AIF ('&NDISP' NE 'CATLG').TUNDIS4\n&NM.NDISP  DC  X'0005,0001,0001,02'     NORMAL DISP=CATLG\n           AGO .TUCDISP\n.TUNDIS4   AIF ('&NDISP' NE 'DELETE').TUNDIS8\n&NM.NDISP  DC  X'0005,0001,0001,04'     NORMAL DISP=DELETE\n           AGO .TUCDISP\n.TUNDIS8   AIF ('&NDISP' NE 'KEEP').TUCDISP\n&NM.NDISP  DC  X'0005,0001,0001,08'     NORMAL DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCDISP   AIF ('&CDISP' EQ '').TUTRK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCDIS#\n&NM.CDISP  DS  XL7                      COND DISP\n           AGO .TUTRK\n.TUCDIS#   AIF ('&CDISP' NE 'UNCATLG').TUCDIS2\n&NM.CDISP  DC  X'0006,0001,0001,01'     COND DISP=UNCATLG\n           AGO .TUTRK\n.TUCDIS2   AIF ('&CDISP' NE 'CATLG').TUCDIS4\n&NM.CDISP  DC  X'0006,0001,0001,02'     COND DISP=CATLG\n           AGO .TUTRK\n.TUCDIS4   AIF ('&CDISP' NE 'DELETE').TUCDIS8\n&NM.CDISP  DC  X'0006,0001,0001,04'     COND DISP=DELETE\n           AGO .TUTRK\n.TUCDIS8   AIF ('&CDISP' NE 'KEEP').TUTRK\n&NM.CDISP  DC  X'0006,0001,0001,08'     COND DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTRK     AIF ('&TRK' EQ '').TUCYL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTRKA\n&NM.TRK    DS  XL4                      TRK\n           AGO .TUCYL\n.TUTRKA    ANOP\n&NM.TRK    DC  X'0007,0000'             TRK\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCYL     AIF ('&CYL' EQ '').TUBLKLN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCYLA\n&NM.CYL    DS  XL4                      CYL\n           AGO .TUBLKLN\n.TUCYLA    ANOP\n&NM.CYL    DC  X'0008,0000'             CYL\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKLN   AIF ('&BLKLN' EQ '').TUPRIME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKL#\n           DS  XL6\n&NM.BLKLN  DS  AL3                      AVERAGE BLOCK LENGTH\n           AGO .TUPRIME\n.TUBLKL#   ANOP\n           DC  X'0009,0001,0003'\n&NM.BLKLN  DC  AL3(&BLKLN)              AVERAGE BLOCK LENGTH\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIME   AIF ('&PRIME' EQ '').TUSECND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIM#\n           DS  XL6\n&NM.PRIME  DS  AL3                      PRIMARY SPACE QUANTITY\n           AGO .TUSECND\n.TUPRIM#   ANOP\n           DC  X'000A,0001,0003'\n&NM.PRIME  DC  AL3(&PRIME)              PRIMARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSECND   AIF ('&SECND' EQ '').TUDIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSECN#\n           DS  XL6\n&NM.SECND  DS  AL3                      SECONDARY SPACE QUANTITY\n           AGO .TUDIR\n.TUSECN#   ANOP\n           DC  X'000B,0001,0003'\n&NM.SECND  DC  AL3(&SECND)              SECONDARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDIR     AIF ('&DIR' EQ '').TURLSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDIRA\n           DS  XL6\n&NM.DIR    DS  AL3                      NUMBER OF DIRECTORY BLOCKS\n           AGO .TURLSE\n.TUDIRA    ANOP\n           DC  X'000C,0001,0003'\n&NM.DIR    DC  AL3(&DIR)                NUMBER OF DIRECTORY BLOCKS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURLSE    AIF ('&RLSE' EQ '').TUSPFRM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURLSEA\n&NM.RLSE   DS  XL4                      RLSE\n           AGO .TUSPFRM\n.TURLSEA   ANOP\n&NM.RLSE   DC  X'000D,0000'             RLSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPFRM   AIF ('&SPFRM' EQ '').TUROUND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPFR#\n&NM.SPFRM  DS  XL7                      SPACE FORMAT\n           AGO .TUROUND\n.TUSPFR#   AIF ('&SPFRM' NE 'ALX').TUSPFR4\n&NM.SPFRM  DC  X'000E,0001,0001,02'     ALX\n           AGO .TUROUND\n.TUSPFR4   AIF ('&SPFRM' NE 'MXIG').TUSPFR8\n&NM.SPFRM  DC  X'000E,0001,0001,04'     MXIG\n           AGO .TUROUND\n.TUSPFR8   AIF ('&SPFRM' NE 'CONTIG').TUROUND\n&NM.SPFRM  DC  X'000E,0001,0001,08'     CONTIG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUROUND   AIF ('&ROUND' EQ '').TUVLSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUROUN#\n&NM.ROUND  DS  XL4                      ROUND\n           AGO .TUVLSER\n.TUROUN#   ANOP\n&NM.ROUND  DC  X'000F,0000'             ROUND\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSER   AIF ('&VLSER' EQ '').TUPRIVT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSE#\n           DS  XL6\n&NM.VLSER  DS  CL6                      VOLUME SERIAL NUMBER\n           AGO .TUPRIVT\n.TUVLSE#   ANOP\n           DC  X'0010,0001,0006'\n&NM.VLSER  DC  CL6'&VLSER'              VOLUME SERIAL NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIVT   AIF ('&PRIVT' EQ '').TUVLSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIV#\n&NM.PRIVT  DS  XL4                      PVT\n           AGO .TUVLSEQ\n.TUPRIV#   ANOP\n&NM.PRIVT  DC  X'0011,0000'             PVT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSEQ   AIF ('&VLSEQ' EQ '').TUVLCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSQ#\n           DS  XL6\n&NM.VLSEQ  DS  AL2                      VOLUME SEQUENCE NUMBER\n           AGO .TUVLCNT\n.TUVLSQ#   ANOP\n           DC  X'0012,0001,0002'\n&NM.VLSEQ  DC  AL2(&VLSEQ)              VOLUME SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLCNT   AIF ('&VLCNT' EQ '').TUVLRDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLCN#\n           DS  XL6\n&NM.VLCNT  DC  AL1                      VOLUME COUNT\n           AGO .TUVLRDS\n.TUVLCN#   ANOP\n           DC  X'0013,0001,0001'\n&NM.VLCNT  DC  AL1(&VLCNT)              VOLUME COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLRDS   AIF ('&VLRDS' EQ '').TUUNIT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLRD#\n           DS  XL6\n&NM.VLRDS  DS  CL44                     VOLUME REF TO THIS DSN\n           AGO .TUUNIT\n.TUVLRD#   ANOP\n           DC  X'0014,0001,002C'        VOLUME REF TO DSN (BELOW)\n&NM.VLRDS  DC  CL44'&VLRDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNIT    AIF ('&UNIT' EQ '').TUUNCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNITA\n           DS  XL6\n&NM.UNIT   DS  CL6                      UNIT\n           AGO .TUUNCNT\n.TUUNITA   ANOP\n           DC  X'0015,0001,0006'\n&NM.UNIT   DC  CL6'&UNIT'               UNIT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNCNT   AIF ('&UNCNT' EQ '').TUPARAL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNCN#\n           DS  XL6\n&NM.UNCNT  DS  AL1                      UNIT COUNT\n           AGO .TUPARAL\n.TUUNCN#   ANOP\n           DC  X'0016,0001,0001'\n&NM.UNCNT  DC  AL1(&UNCNT)              UNIT COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPARAL   AIF ('&PARAL' EQ '').TUSYSOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPARA#\n&NM.PARAL  DS  XL4                      PARALLEL MOUNT\n           AGO .TUSYSOU\n.TUPARA#   ANOP\n&NM.PARAL  DC  X'0017,0000'             PARALLEL MOUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSYSOU   AIF ('&SYSOU' EQ '').TUSPGNM\n           AIF ('&SYSOU' NE '*').TUSYSO2\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYSO#\n&NM.SYSOU  DS  XL4                      SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO#   ANOP\n&NM.SYSOU  DC  X'0018,0000'             SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO2   ANOP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYS##\n           DS  XL6\n&NM.SYSOU  DS  CL1                      SYSOUT CLASS\n           AGO .TUSPGNM\n.TUSYS##   ANOP\n           DC  X'0018,0001,0001'\n&NM.SYSOU  DC  CL1'&SYSOU'              SYSOUT CLASS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPGNM   AIF ('&SPGNM' EQ '').TUSFMNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPGN#\n           DS  XL6\n&NM.SPGNM  DS  CL8                      SYSOUT PROGRAM NAME\n           AGO .TUSFMNO\n.TUSPGN#   ANOP\n           DC  X'0019,0001,0008'\n&NM.SPGNM  DC  CL8'&SPGNM'              SYSOUT PROGRAM NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSFMNO   AIF ('&SFMNO' EQ '').TUOUTLM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSFMN#\n           DS  XL6\n&NM.SFMNO  DS  CL4                      SYSOUT FORM NAME/NUMBER\n           AGO .TUOUTLM\n.TUSFMN#   ANOP\n           DC  X'001A,0001,0004'\n&NM.SFMNO  DC  CL4'&SFMNO'              SYSOUT FORM NAME/NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOUTLM   AIF ('&OUTLM' EQ '').TUCLOSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOUTL#\n           DS  XL6\n&NM.OUTLM  DS  AL3                      OUTLIM\n           AGO .TUCLOSE\n.TUOUTL#   ANOP\n           DC  X'001B,0001,0003'\n&NM.OUTLM  DC  AL3(&OUTLM)              OUTLIM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCLOSE   AIF ('&CLOSE' EQ '').TUCOPYS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCLOS#\n&NM.CLOSE  DS  XL4                      FREE=CLOSE\n           AGO .TUCOPYS\n.TUCLOS#   ANOP\n&NM.CLOSE  DC  X'001C,0000'             FREE=CLOSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCOPYS   AIF ('&COPYS' EQ '').TULABEL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCOPY#\n           DS  XL6\n&NM.COPYS  DS  AL1                      COPIES\n           AGO .TULABEL\n.TUCOPY#   ANOP\n           DC  X'001D,0001,0001'\n&NM.COPYS  DC  AL1(&COPYS)              COPIES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULABEL   AIF ('&LABEL' EQ '').TUDSSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULABE#\n&NM.LABEL  DS  XL7                      LABEL\n           AGO .TUDSSEQ\n.TULABE#   AIF ('&LABEL' NE 'NL').TULABE2\n&NM.LABEL  DC  X'001E,0001,0001,01'     LABEL=NL\n           AGO .TUDSSEQ\n.TULABE2   AIF ('&LABEL' NE 'SL').TULABE3\n&NM.LABEL  DC  X'001E,0001,0001,02'     LABEL=SL\n           AGO .TUDSSEQ\n.TULABE3   AIF ('&LABEL' NE 'NSL').TULABE4\n&NM.LABEL  DC  X'001E,0001,0001,04'     LABEL=NSL\n           AGO .TUDSSEQ\n.TULABE4   AIF ('&LABEL' NE 'SUL').TULABE5\n&NM.LABEL  DC  X'001E,0001,0001,0A'     LABEL=SUL\n           AGO .TUDSSEQ\n.TULABE5   AIF ('&LABEL' NE 'BLP').TULABE6\n&NM.LABEL  DC  X'001E,0001,0001,10'     LABEL=BLP\n           AGO .TUDSSEQ\n.TULABE6   AIF ('&LABEL' NE 'LTM').TULABE7\n&NM.LABEL  DC  X'001E,0001,0001,21'     LABEL=LTM\n           AGO .TUDSSEQ\n.TULABE7   AIF ('&LABEL' NE 'AL').TULABE8\n&NM.LABEL  DC  X'001E,0001,0001,40'     LABEL=AL\n           AGO .TUDSSEQ\n.TULABE8   AIF ('&LABEL' NE 'AUL').TUDSSEQ\n&NM.LABEL  DC  X'001E,0001,0001,48'     LABEL=AUL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSSEQ   AIF ('&DSSEQ' EQ '').TUPASPR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSSE#\n           DS  XL6\n&NM.DSSEQ  DS  AL2                      LABEL= DATASET SEQUENCE NUMBER\n           AGO .TUPASPR\n.TUDSSE#   ANOP\n           DC  X'001F,0001,0002'\n&NM.DSSEQ  DC  AL2(&DSSEQ)              LABEL= DATASET SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPASPR   AIF ('&PASPR' EQ '').TUINOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINOUT   AIF ('&INOUT' EQ '').TUEXPDT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOU#\n&NM.INOUT  DS  XL7                      LABEL=IN OR OUT\n           AGO .TUEXPDT\n.TUINOU#   AIF ('&INOUT' NE 'IN').TUINOU2\n&NM.INOUT  DC  X'0021,0001,0001,40'     LABEL=IN\n           AGO .TUEXPDT\n.TUINOU2   AIF ('&INOUT' NE 'OUT').TUEXPDT\n&NM.INOUT  DC  X'0021,0001,0001,80'     LABEL=OUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEXPDT   AIF ('&EXPDT' EQ '').TURETPD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEXPD#\n           DS  XL6\n&NM.EXPDT  DS  CL5                      EXPDT\n           AGO .TURETPD\n.TUEXPD#   ANOP\n           DC  X'0022,0001,0005'\n&NM.EXPDT  DC  CL5'&EXPDT'              EXPDT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURETPD   AIF ('&RETPD' EQ '').TUDUMMY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURETP#\n           DS  XL6\n&NM.RETPD  DS  AL2                      RETPD\n           AGO .TUDUMMY\n.TURETP#   ANOP\n           DC  X'0023,0001,0002'\n&NM.RETPD  DC  AL2(&RETPD)              RETPD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDUMMY   AIF ('&DUMMY' EQ '').TUFCBIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDUMM#\n&NM.DUMMY  DS  XL4                      DD DUMMY / DSN=NULLFILE\n           AGO .TUFCBIM\n.TUDUMM#   ANOP\n&NM.DUMMY  DC  X'0024,0000'             DD DUMMY / DSN=NULLFILE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBIM   AIF ('&FCBIM' EQ '').TUFCBAV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBI#\n           DS  XL6\n&NM.FCBIM  DS  CL4                      FCB\n           AGO .TUFCBAV\n.TUFCBI#   ANOP\n           DC  X'0025,0001,0004'\n&NM.FCBIM  DC  CL4'&FCBIM'              FCB\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBAV   AIF ('&FCBAV' EQ '').TUQNAME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBA#\n&NM.FCBAV  DS  XL7                      FCB VERIFY OR ALIGN\n           AGO .TUQNAME\n.TUFCBA#   AIF ('&FCBAV' NE 'VERIFY').TUFCBA2\n&NM.FCBAV  DC  X'0026,0001,0001,04'     FCB VERIFY\n           AGO .TUQNAME\n.TUFCBA2   AIF ('&FCBAV' NE 'ALIGN').TUQNAME\n&NM.FCBAV  DC  X'0026,0001,0001,08'     FCB ALIGN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUQNAME   AIF ('&QNAME' EQ '').TUTERM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTERM    AIF ('&TERM' EQ '').TUUCS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTERMA\n&NM.TERM   DS  XL4                      TERM=TS / DSN(*)\n           AGO .TUUCS\n.TUTERMA   ANOP\n&NM.TERM   DC  X'0028,0000'             TERM=TS / DSN(*)\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUCS     AIF ('&UCS' EQ '').TUUFOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUCSA\n           DS  XL6\n&NM.UCS    DS  CL4                      UCS CHARACTER SET\n           AGO .TUUFOLD\n.TUUCSA    ANOP\n           DC  X'0029,0001,0004'\n&NM.UCS    DC  CL4'&UCS'                UCS CHARACTER SET\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUFOLD   AIF ('&UFOLD' EQ '').TUUVRFY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUFOL#\n&NM.UFOLD  DS  XL4                      UCS FOLD\n           AGO .TUUVRFY\n.TUUFOL#   ANOP\n&NM.UFOLD  DC  X'002A,0000'             UCS FOLD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUVRFY   AIF ('&UVRFY' EQ '').TUDCBDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUVRF#\n&NM.UVRFY  DS  XL4                      UCS VERIFY\n           AGO .TUDCBDS\n.TUUVRF#   ANOP\n&NM.UVRFY  DC  X'002B,0000'             UCS VERIFY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDS   AIF ('&DCBDS' EQ '').TUDCBDD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBS#\n           DS  XL6\n&NM.DCBDS  DS  CL44                     DCB REFERENCE TO DSN\n           AGO .TUDCBDD\n.TUDCBS#   ANOP\n           DC  X'002C,0001,0003'        DCB REFERENCE TO DSN (BELOW)\n&NM.DCBDS  DC  CL44'&DCBDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDD   AIF ('&DCBDD' EQ '').TUSUSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBD#\n           DS  XL6\n&NM.DCBDD  DS  CL8                      DCB REFERENCE TO DDNAME\n           AGO .TUSUSER\n.TUDCBD#   ANOP\n           DC  X'002D,0001,0008'\n&NM.DCBDD  DC  CL8'&DCBDD'              DCB REFERENCE TO DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSUSER   AIF ('&SUSER' EQ '').TUSHOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSUSE#\n           DS  XL6\n&NM.SUSER  DS  CL8                      SYSOUT DESTINATION\n           AGO .TUSHOLD\n.TUSUSE#   ANOP\n           DC  X'0058,0001,0008'\n&NM.SUSER  DC  CL8'&SUSER'              SYSOUT DESTINATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSHOLD   AIF ('&SHOLD' EQ '').TUMSVGP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSHOL#\n&NM.SHOLD  DS  XL4                      SYSOUT HOLD=YES\n           AGO .TUMSVGP\n.TUSHOL#   ANOP\n&NM.SHOLD  DC  X'0059,0000'             SYSOUT HOLD=YES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMSVGP   AIF ('&MSVGP' EQ '').TUSSNM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSNM    AIF ('&SSNM' EQ '').TUSSPRM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSPRM   AIF ('&SSPRM' EQ '').TUPROT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPROT    AIF ('&PROT' EQ '').TUBFALN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.*\n.*********************************************************************\n.***          DCB ATTRIBUTE TEXT UNITS - VERB CODE 01              ***\n.*********************************************************************\n.*\n.TUBFALN   AIF ('&BFALN' EQ '').TUBFTEK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFAL#\n&NM.BFALN  DS  XL7                      BFALN\n           AGO .TUBFTEK\n.TUBFAL#   AIF ('&BFALN' NE 'F').TUBFAL2\n&NM.BFALN  DC  X'002E,0001,0001,01'     BFALN=F\n           AGO .TUBFTEK\n.TUBFAL2   AIF ('&BFALN' NE 'D').TUBFTEK                        MI04303\n&NM.BFALN  DC  X'002E,0001,0001,02'     BFALN=D\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBFTEK   AIF ('&BFTEK' EQ '').TUBLKSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFTE#\n&NM.BFTEK  DS  XL7                      BFTEK\n           AGO .TUBLKSZ\n.TUBFTE#   AIF ('&BFTEK' NE 'D').TUBFTE2\n&NM.BFTEK  DC  X'002F,0001,0001,08'     BFTEK=D\n           AGO .TUBLKSZ\n.TUBFTE2   AIF ('&BFTEK' NE 'E').TUBFTE3\n&NM.BFTEK  DC  X'002F,0001,0001,10'     BFTEK=E\n           AGO .TUBLKSZ\n.TUBFTE3   AIF ('&BFTEK' NE 'R').TUBFTE4\n&NM.BFTEK  DC  X'002F,0001,0001,20'     BFTEK=R\n           AGO .TUBLKSZ\n.TUBFTE4   AIF ('&BFTEK' NE 'S').TUBFTE5\n&NM.BFTEK  DC  X'002F,0001,0001,40'     BFTEK=S\n           AGO .TUBLKSZ\n.TUBFTE5   AIF ('&BFTEK' NE 'A').TUBLKSZ\n&NM.BFTEK  DC  X'002F,0001,0001,60'     BFTEK=A\n           AGO .TUBLKSZ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKSZ   AIF ('&BLKSZ' EQ '').TUBUFIN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKS#\n           DS  XL6\n&NM.BLKSZ  DS  AL2                      BLKSIZE\n           AGO .TUBUFIN\n.TUBLKS#   ANOP\n           DC  X'0030,0001,0002'\n&NM.BLKSZ  DC  AL2(&BLKSZ)              BLKSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFIN   AIF ('&BUFIN' EQ '').TUBUFL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFI#\n           DS  XL6\n&NM.BUFIN  DS  AL1                      BUFIN\n           AGO .TUBUFL\n.TUBUFI#   ANOP\n           DC  X'0031,0001,0001'\n&NM.BUFIN  DC  AL1(&BUFIN)              BUFIN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFL    AIF ('&BUFL' EQ '').TUBUFMX\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFLA\n           DS  XL6\n&NM.BUFL   DC  AL2                      BUFL\n           AGO .TUBUFMX\n.TUBUFLA   ANOP\n           DC  X'0032,0001,0002'\n&NM.BUFL   DC  AL2(&BUFL)               BUFL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFMX   AIF ('&BUFMX' EQ '').TUBUFNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFM#\n           DS  XL6\n&NM.BUFMX  DS  AL1                      BUFMAX\n           AGO .TUBUFNO\n.TUBUFM#   ANOP\n           DC  X'0033,0001,0001'\n&NM.BUFMX  DC  AL1(&BUFMX)              BUFMAX\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFNO   AIF ('&BUFNO' EQ '').TUBUFOF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFN#\n           DS  XL6\n&NM.BUFNO  DC  AL1                      BUFNO\n           AGO .TUBUFOF\n.TUBUFN#   ANOP\n           DC  X'0034,0001,0001'\n&NM.BUFNO  DC  AL1(&BUFNO)              BUFNO\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOF   AIF ('&BUFOF' EQ '').TUBUFOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&BUFOF' NE 'L').TUBUFO2\n           AIF ('&MAP' NE 'ONLY').TUBUFF#\n&NM.BUFOF  DS  XL7                      BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFF#   ANOP\n&NM.BUFOF  DC  X'0035,0001,0001,80'     BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFO2   ANOP\n           AIF ('&MAP' NE 'ONLY').TUBUF##\n           DS  XL6\n&NM.BUFOF  DS  AL1                      BUFOFF\n           AGO .TUBUFOU\n.TUBUF##   ANOP\n           DC  X'0035,0001,0001'\n&NM.BUFOF  DC  AL1(&BUFOF)              BUFOFF\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOU   AIF ('&BUFOU' EQ '').TUBUFRQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFO#\n           DS  XL6\n&NM.BUFOU  DS  AL1                      BUFOUT\n           AGO .TUBUFRQ\n.TUBUFO#   ANOP\n           DC  X'0036,0001,0001'\n&NM.BUFOU  DC  AL1(&BUFOU)              BUFOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFRQ   AIF ('&BUFRQ' EQ '').TUBUFSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFR#\n           DS  XL6\n&NM.BUFRQ  DS  AL1                      BUFRQ\n           AGO .TUBUFSZ\n.TUBUFR#   ANOP\n           DC  X'0037,0001,0001'\n&NM.BUFRQ  DC  AL1(&BUFRQ)              BUFRQ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFSZ   AIF ('&BUFSZ' EQ '').TUCODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFS#\n           DS  XL6\n&NM.BUFSZ  DS  AL2                      BUFSIZE\n           AGO .TUCODE\n.TUBUFS#   ANOP\n           DC  X'0038,0001,0002'\n&NM.BUFSZ  DC  AL2(&BUFSZ)              BUFSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCODE    AIF ('&CODE' EQ '').TUCPRI\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCPRI    AIF ('&CPRI' EQ '').TUDEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDEN     AIF ('&DEN' EQ '').TUDSORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDENA\n&NM.DEN    DS  XL7                      DEN\n           AGO .TUDSORG\n.TUDENA    AIF ('&DEN' NE '0').TUDE2\n&NM.DEN    DC  X'003B,0001,0001,03'     DEN=0  (200 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE2     AIF ('&DEN' NE '1').TUDE3\n&NM.DEN    DC  X'003B,0001,0001,43'     DEN=1  (556 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE3     AIF ('&DEN' NE '2').TUDE4\n&NM.DEN    DC  X'003B,0001,0001,83'     DEN=2  (800 BPI, 7/9-TRACK)\n           AGO .TUDSORG\n.TUDE4     AIF ('&DEN' NE '3').TUDE5\n&NM.DEN    DC  X'003B,0001,0001,C3'     DEN=3  (1600 BPI, 9-TRACK)\n           AGO .TUDSORG\n.TUDE5     AIF ('&DEN' NE '4').TUDSORG\n&NM.DEN    DC  X'003B,0001,0001,D3'     DEN=4  (6250 BPI, 9-TRACK)\n           AGO .TUDSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSORG   AIF ('&DSORG' EQ '').TUEROPT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSOR#\n&NM.DSORG  DS  XL8                      DSORG\n           AGO .TUEROPT\n.TUDSOR#   AIF ('&DSORG' NE 'VS').TUDSOR2\n&NM.DSORG  DC  X'003C,0001,0002,0008'   DSORG=VS\n           AGO .TUEROPT\n.TUDSOR2   AIF ('&DSORG' NE 'TQ').TUDSOR3\n&NM.DSORG  DC  X'003C,0001,0002,0020'   DSORG=TQ\n           AGO .TUEROPT\n.TUDSOR3   AIF ('&DSORG' NE 'TX').TUDSOR4\n&NM.DSORG  DC  X'003C,0001,0002,0040'   DSORG=TX\n           AGO .TUEROPT\n.TUDSOR4   AIF ('&DSORG' NE 'GS').TUDSOR5\n&NM.DSORG  DC  X'003C,0001,0002,0080'   DSORG=GS\n           AGO .TUEROPT\n.TUDSOR5   AIF ('&DSORG' NE 'PO').TUDSOR6\n&NM.DSORG  DC  X'003C,0001,0002,0200'   DSORG=PO\n           AGO .TUEROPT\n.TUDSOR6   AIF ('&DSORG' NE 'POU').TUDSOR7\n&NM.DSORG  DC  X'003C,0001,0002,0300'   DSORG=POU\n           AGO .TUEROPT\n.TUDSOR7   AIF ('&DSORG' NE 'MQ').TUDSOR8\n&NM.DSORG  DC  X'003C,0001,0002,0400'   DSORG=MQ\n           AGO .TUEROPT\n.TUDSOR8   AIF ('&DSORG' NE 'CQ').TUDSOR9\n&NM.DSORG  DC  X'003C,0001,0002,0800'   DSORG=CQ\n           AGO .TUEROPT\n.TUDSOR9   AIF ('&DSORG' NE 'CX').TUDSORA\n&NM.DSORG  DC  X'003C,0001,0002,1000'   DSORG=CX\n           AGO .TUEROPT\n.TUDSORA   AIF ('&DSORG' NE 'DA').TUDSORB\n&NM.DSORG  DC  X'003C,0001,0002,2000'   DSORG=DA\n           AGO .TUEROPT\n.TUDSORB   AIF ('&DSORG' NE 'DAU').TUDSORC\n&NM.DSORG  DC  X'003C,0001,0002,2100'   DSORG=DAU\n           AGO .TUEROPT\n.TUDSORC   AIF ('&DSORG' NE 'PS').TUDSORD\n&NM.DSORG  DC  X'003C,0001,0002,4000'   DSORG=PS\n           AGO .TUEROPT\n.TUDSORD   AIF ('&DSORG' NE 'PSU').TUEROPT\n&NM.DSORG  DC  X'003C,0001,0002,4100'   DSORG=PSU\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEROPT   AIF ('&EROPT' EQ '').TUGNCP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEROP#\n&NM.EROPT  DS  XL7                      EROPT\n           AGO .TUGNCP\n.TUEROP#   AIF ('&EROPT' NE 'T').TUEROP2\n&NM.EROPT  DC  X'003D,0001,0001,10'     EROPT=T\n           AGO .TUGNCP\n.TUEROP2   AIF ('&EROPT' NE 'ABE').TUEROP3\n&NM.EROPT  DC  X'003D,0001,0001,20'     EROPT=ABE\n           AGO .TUGNCP\n.TUEROP3   AIF ('&EROPT' NE 'SKP').TUEROP4\n&NM.EROPT  DC  X'003D,0001,0001,40'     EROPT=SKP\n           AGO .TUGNCP\n.TUEROP4   AIF ('&EROPT' NE 'ACC').TUGNCP\n&NM.EROPT  DC  X'003D,0001,0001,80'     EROPT=ACC\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUGNCP    AIF ('&GNCP' EQ '').TUINTVL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUGNCPA\n           DS  XL6\n&NM.GNCP   DC  AL1                      GNCP\n           AGO .TUINTVL\n.TUGNCPA   ANOP\n           DC  X'003E,0001,0001'                                MI04303\n&NM.GNCP   DC  AL1(&GNCP)               GNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINTVL   AIF ('&INTVL' EQ '').TUKYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUKYLEN   AIF ('&KYLEN' EQ '').TULIMCT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUKYLE#\n           DS  XL6\n&NM.KYLEN  DS  AL1                      KEYLEN\n           AGO .TULIMCT\n.TUKYLE#   ANOP\n           DC  X'0040,0001,0001'\n&NM.KYLEN  DC  AL1(&KYLEN)              KEYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULIMCT   AIF ('&LIMCT' EQ '').TULRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULRECL   AIF ('&LRECL' EQ '').TUMODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULREC#\n           DS  XL6\n&NM.LRECL  DS  AL2                      LRECL\n           AGO .TUMODE\n.TULREC#   ANOP\n           DC  X'0042,0001,0002'\n&NM.LRECL  DC  AL2(&LRECL)              LRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMODE    AIF ('&MODE' EQ '').TUNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNCP     AIF ('&NCP' EQ '').TUOPTCD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNCPA\n           DS  XL6\n&NM.NCP    DS  AL1                      NCP\n           AGO .TUOPTCD\n.TUNCPA    ANOP\n           DC  X'0044,0001,0001'\n&NM.NCP    DC  AL1(&NCP)                NCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOPTCD   AIF ('&OPTCD' EQ '').TUPCIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOPTC#\n&NM.OPTCD  DS  XL7                      OPTCD\n           AGO .TUPCIR\n.TUOPTC#   AIF ('&OPTCD' NE 'W').TUPCIR\n&NM.OPTCD  DC  X'0045,0001,0001,80'     OPTCD=W\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIR    AIF ('&PCIR' EQ '').TUPCIS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIS    AIF ('&PCIS' EQ '').TUPRTSP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRTSP   AIF ('&PRTSP' EQ '').TURECFM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRTS#\n&NM.PRTSP  DS  XL7                      PRTSP\n           AGO .TURECFM\n.TUPRTS#   AIF ('&PRTSP' NE '0').TUPRTS2\n&NM.PRTSP  DC  X'0048,0001,0001,01'     PRTSP=0\n           AGO .TURECFM\n.TUPRTS2   AIF ('&PRTSP' NE '1').TUPRTS3\n&NM.PRTSP  DC  X'0048,0001,0001,09'     PRTSP=1\n           AGO .TURECFM\n.TUPRTS3   AIF ('&PRTSP' NE '2').TUPRTS4\n&NM.PRTSP  DC  X'0048,0001,0001,11'     PRTSP=2\n           AGO .TURECFM\n.TUPRTS4   AIF ('&PRTSP' NE '3').TURECFM\n&NM.PRTSP  DC  X'0048,0001,0001,19'     PRTSP=3\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURECFM   AIF ('&RECFM' EQ '').TURSRVF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURECF#\n&NM.RECFM  DS  XL7                      RECFM=F\n           AGO .TURSRVF\n.TURECF#   AIF ('&RECFM' NE 'F').TURECF2\n&NM.RECFM  DC  X'0049,0001,0001,80'     RECFM=F\n           AGO .TURSRVF\n.TURECF2   AIF ('&RECFM' NE 'FA').TURECF3\n&NM.RECFM  DC  X'0049,0001,0001,84'     RECFM=FA\n           AGO .TURSRVF\n.TURECF3   AIF ('&RECFM' NE 'FB').TURECF4\n&NM.RECFM  DC  X'0049,0001,0001,90'     RECFM=FB\n           AGO .TURSRVF\n.TURECF4   AIF ('&RECFM' NE 'FBA').TURECF5\n&NM.RECFM  DC  X'0049,0001,0001,94'     RECFM=FBA\n           AGO .TURSRVF\n.TURECF5   AIF ('&RECFM' NE 'V').TURECF6\n&NM.RECFM  DC  X'0049,0001,0001,40'     RECFM=V\n           AGO .TURSRVF\n.TURECF6   AIF ('&RECFM' NE 'VB').TURECF7\n&NM.RECFM  DC  X'0049,0001,0001,50'     RECFM=VB\n           AGO .TURSRVF\n.TURECF7   AIF ('&RECFM' NE 'U').TURSRVF\n&NM.RECFM  DC  X'0049,0001,0001,C0'     RECFM=U\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURSRVF   AIF ('&RSRVF' EQ '').TURSRVS\n.TURSRVS   AIF ('&RSRVS' EQ '').TUSOWA\n.TUSOWA    AIF ('&SOWA' EQ '').TUSTACK\n.TUSTACK   AIF ('&STACK' EQ '').TUTHRSH\n.TUTHRSH   AIF ('&THRSH' EQ '').TUTRTCH\n.TUTRTCH   AIF ('&TRTCH' EQ '').TUIPLTX\n.TUIPLTX   AIF ('&IPLTX' EQ '').TUDIAGN\n.TUDIAGN   AIF ('&DIAGN' EQ '').TUFUNC\n.TUFUNC    AIF ('&FUNC' EQ '').TUFRID\n.TUFRID    AIF ('&FRID' EQ '').TUPASSW\n.*\n.*********************************************************************\n.***       NON-JCL DYNAMIC ALLOCATION FUNCTIONS - VERB CODE 01     ***\n.*********************************************************************\n.*\n.TUPASSW   AIF ('&PASSW' EQ '').TUPERMA\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPERMA   AIF ('&PERMA' EQ '').TUCNVRT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPERM#\n&NM.PERMA  DS  XL4                      PERMANENT ALLOCATION\n           AGO .TUCNVRT\n.TUPERM#   ANOP\n&NM.PERMA  DC  X'0052,0000'             PERMANENT ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCNVRT   AIF ('&CNVRT' EQ '').TURTDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCNVR#\n&NM.CNVRT  DS  XL4                      CONVERTABLE ALLOCATION\n           AGO .TURTDDN\n.TUCNVR#   ANOP\n&NM.CNVRT  DC  X'0053,0000'             CONVERTABLE ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDDN   AIF ('&RTDDN' EQ '').TURTDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.RTDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TURTDSN\n.TURTDD#   ANOP\n           DC  X'0055,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.RTDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDSN   AIF ('&RTDSN' EQ '').TURTORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.RTDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TURTORG\n.TURTDS#   ANOP\n           DC  X'0056,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.RTDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTORG   AIF ('&RTORG' EQ '').TURTVOL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTOR#\n           DS  XL6\n&NM.RTORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTVOL\n.TURTOR#   DC  X'0057,0001,0002'\n&NM.RTORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTVOL   AIF ('&RTVOL' EQ '').TUREMOV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTVO#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED VOLSER\n&NM.RTVOL  DS  CL6                      RETURNED VOLSER\n           AGO .TUREMOV\n.TURTVO#   ANOP\n           DC  X'005D,0001'\n           DC  XL2'0006'                LEN OF RETURNED VOLSER\n&NM.RTVOL  DC  CL6' '                   RETURNED VOLSER\n.*\n.*********************************************************************\n.***       UNALLOCATE - VERB CODE 02                               ***\n.*********************************************************************\n.*\n.TUREMOV   AIF ('&REMOV' EQ '').TUUNALC\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUREMO#\n&NM.REMOV  DS  XL4                      REMOVE INUSE EVEN IF PERMANENT\n           AGO .TUUNALC\n.TUREMO#   ANOP\n&NM.REMOV  DC  X'0008,0000'             REMOVE INUSE EVEN IF PERMANENT\n.*\n.TUUNALC   AIF ('&UNALC' EQ '').TUTCBAD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNAL#\n&NM.UNALC  DS  XL4                      UNALLOCATE EVEN IF PERMANENT\n           AGO .TUTCBAD\n.TUUNAL#   ANOP\n&NM.UNALC  DC  X'0007,0000'             UNALLOCATE EVEN IF PERMANENT\n.*\n.*********************************************************************\n.***       REMOVE IN-USE ATTRIBUTE - VERB CODE 05                  ***\n.*********************************************************************\n.*\n.TUTCBAD   AIF ('&TCBAD' EQ '').TUINDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTCBA#\n           DS  XL6\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n           AGO .TUINDDN\n.TUTCBA#   ANOP\n           DC  X'0001,0001,0004'\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n.*\n.*********************************************************************\n.***       RETURN INFORMATION - VERB CODE 07                       ***\n.*********************************************************************\n.*\n.TUINDDN   AIF ('&INDDN' EQ '').TUINDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.INDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TUINDSN\n.TUINDD#   ANOP\n           DC  X'0004,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.INDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINDSN   AIF ('&INDSN' EQ '').TUINORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.INDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TUINORG\n.TUINDS#   ANOP\n           DC  X'0005,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.INDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINORG   AIF ('&INORG' EQ '').TURTMEM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOR#\n           DS  XL6\n&NM.INORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTMEM\n.TUINOR#   DC  X'000A,0001,0002'\n&NM.INORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTMEM   AIF ('&RTMEM' EQ '').TURTSTA\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTME#\n           DS  XL6\n&NM.RTMEM  DS  CL8                      RETURNED MEMBER NAME\n           AGO .TURTSTA\n.TURTME#   ANOP\n           DC  X'0006,0001,0008'\n&NM.RTMEM  DC  CL8' '                   RETURNED MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTSTA   AIF ('&RTSTA' EQ '').TURTNDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTST#\n           DS  XL6\n&NM.RTSTA  DS  XL1                      RETURNED DATASET STATUS\n           AGO .TURTNDP\n.TURTST#   ANOP\n           DC  X'0007,0001,0001'\n&NM.RTSTA  DS  XL1'00'                  RETURNED DATASET STATUS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTNDP   AIF ('&RTNDP' EQ '').TURTCDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTND#\n           DS  XL6\n&NM.RTNDP  DS  XL1                      RETURNED NORMAL DISP\n           AGO .TURTCDP\n.TURTND#   ANOP\n           DC  X'0008,0001,0001'\n&NM.RTNDP  DS  XL1'00'                  RETURNED NORMAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTCDP   AIF ('&RTCDP' EQ '').TURTLIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTCD#\n           DS  XL6\n&NM.RTCDP  DS  XL1                      RETURNED CONDITIONAL DISP\n           AGO .TURTLIM\n.TURTCD#   ANOP\n           DC  X'0009,0001,0001'\n&NM.RTCDP  DS  XL1'00'                  RETURNED CONDITIONAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLIM   AIF ('&RTLIM' EQ '').TURTATT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLI#\n           DS  XL6\n&NM.RTLIM  DS  XL2                      RETURNED LIMIT SPECIFICATION\n           AGO .TURTATT\n.TURTLI#   ANOP\n           DC  X'000B,0001,0002'\n&NM.RTLIM  DS  XL2'0000'                RETURNED LIMIT SPECIFICATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTATT   AIF ('&RTATT' EQ '').TURTLST\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTAT#\n           DS  XL6\n&NM.RTATT  DS  XL1                      RETURNED D.A. ATTRIBUTE\n           AGO .TURTLST\n.TURTAT#   ANOP\n           DC  X'000C,0001,0001'\n&NM.RTATT  DS  XL1'00'                  RETURNED D.A. ATTRIBUTE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLST   AIF ('&RTLST' EQ '').TURTTYP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLS#\n           DS  XL6\n&NM.RTLST  DS  XL1                      RETURNED LAST ENTRY SPEC.\n           AGO .TURTTYP\n.TURTLS#   ANOP\n           DC  X'000D,0001,0001'\n&NM.RTLST  DS  XL1'00'                  RETURNED LAST ENTRY SPEC.\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTTYP   AIF ('&RTTYP' EQ '').TURELNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTTY#\n           DS  XL6\n&NM.RTTYP  DS  XL1                      RETURNED DATASET TYPE\n           AGO .TURELNO\n.TURTTY#   ANOP\n           DC  X'000E,0001,0001'\n&NM.RTTYP  DS  XL1'00'                  RETURNED DATASET TYPE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURELNO   AIF ('&RELNO' EQ '').TUENDM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURELN#\n           DS  XL6\n&NM.RELNO  DS  XL2                      RETURNED RELATIVE REQUEST NO.\n           AGO .TUENDM\n.TURELN#   ANOP\n           DC  X'000F,0001,0002'\n&NM.RELNO  DS  XL2'0000'                RETURNED RELATIVE REQUEST NO.\n.*\n.*********************************************************************\n.***       MARK END OF LIST OF TEXT UNITS                          ***\n.*********************************************************************\n.*\n.TUENDM    AIF ('&MAP' NE 'ONLY').TUENDU#\n           DS  XL1                      END OF LIST MARKER\n           AGO .TUEND\n.TUENDU#   ANOP\n           DC  X'FF'                    END OF LIST MARKER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEND     ANOP\n.*\n**********************************************************************\n***        REQUEST BLOCKS FOR SVC99                                ***\n**********************************************************************\n*\n&NM.RBP    DS  A                        POINTER TO REQUEST BLOCK\n&NM.RB     DS  5A                       REQUEST BLOCK\n&NM.TUPL   DS  &TUPLEN.A                TEXT UNIT POINTER LIST\n*\n**********************************************************************\n***        DAIRFAIL PARAMETER BLOCK & MISCELLANEOUS STORAGE        ***\n**********************************************************************\n*\n&NM.DFPRM  DS  6F                       PARM BLOCK FOR IKJEFF18\n*\n&NM.S99RC  DS  F                        STORAGE AREA FOR SVC 99 R/C\n           AIF ('&MAP' NE 'ONLY').DF2\n&NM.F02EP  DS  F                        STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DS  XL2                      DAIRFAIL SWITCHES & CALLER ID\n           AGO .DF3\n.DF2       ANOP\n&NM.F02EP  DC  F'0'                     STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DC  X'0032'                  DAIRFAIL SWITCHES & CALLER ID\n.DF3       ANOP\n*\n**********************************************************************\n***        EQUATE FOR TOTAL LENGTH                                 ***\n**********************************************************************\n*\n           DS  0D                       ALIGN FOR GETMAIN\n&NM.LEN    EQU *-&NM                    TOTAL LENGTH\n         MEND\n         MACRO\n&LABEL   GTEDASET &NM,&CPPLPTR=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   SET POINTERS AND DATA FOR DYNAMIC ALLOCATION IN DATA AREAS   ***\n***   CREATED BY MACRO GTEDADAT.                                   ***\n**********************************************************************\n*\n**********************************************************************\n***      PLACE ADDRESS OF S99RB INTO S99RBPTR.                     ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB                       ==> R1 POINTS TO S99RB\n         ST    1,&NM.RBP                          FILL IN S99RBPTR\n         OI    &NM.RBP,X'80'                      TURN ON HI BIT\n*\n**********************************************************************\n***      FILL IN S99RB REQUEST BLOCK.                              ***\n***      MAPPING MACRO IEFZB4D0 MUST APPEAR IN SOURCE.             ***\n**********************************************************************\n*\n         MVI   (S99RBLN-S99RB)(1),X'14'           FILL IN LENGTH\n         MVI   (S99VERB-S99RB)(1),X'00'           ZERO VERB CODE\n         XC    (S99FLAG1-S99RB)(4,1),(S99FLAG1-S99RB)(1)   ZERO FLAGS1\n         OI    (S99FLAG1-S99RB)(1),S99ONCNV       SET FLAGS1 OK CONVRT\n         OI    (S99FLAG1-S99RB)(1),S99NOMNT       SET FLAGS1 NO MOUNT\n         LA    2,&NM.TUPL                     ==> R2 POINTS TO TUPL\n         ST    2,(S99TXTPP-S99RB)(0,1)            TUPL ADDR INTO RB\n         XC    (S99FLAG2-S99RB)(4,1),(S99FLAG2-S99RB)(1)   ZERO FLAGS2\n*\n**********************************************************************\n***  BUILD TUPL.                                                   ***\n***  KEY OF LAST TEXT UNIT MUST BE X'FF..'                         ***\n**********************************************************************\n*\n         LA    1,&NM.TU                       ==> R1 POINTS TO TUNITS\n         XR    0,0                                CLEAR R0 FOR COUNTER\n         XR    15,15                              CLEAR R15 WORK REG\n*\nRBA&SYSNDX CLI (S99TUKEY-S99TUNIT)(1),X'FF'       IF KEY IS X'FF..'\n         BE    RBD&SYSNDX                           BRANCH OUT OF LOOP\n         ST    1,0(0,2)                           ADDR OF KEY TO TUPL\n         LA    2,4(0,2)                           INCR POINTER TO TUPL\n*\n         ICM   0,3,(S99TUNUM-S99TUNIT)(1)         TU NUM TO R0\n         LA    1,4(0,1)                           R1 POINTS BEYOND NUM\n         LTR   0,0                                IF TU NUM IS 0\n         BZ    RBA&SYSNDX                         PROCESS NEXT TU\n*\n         ICM   15,3,0(1)                          TU LEN TO R15\n         LA    1,2(15,1)                          PNT BEYND LEN & PARM\n         BCT   0,*-8                              DO FOR EACH LEN+PARM\n*\n         B     RBA&SYSNDX                         PROCESS NEXT TU\n*\nRBD&SYSNDX LA  15,4(0,0)                          POINT TO LAST\n         SR    2,15                                 TUPL ENTRY\n         OI    0(2),S99TUPLN                      MARK LAST TUPL ENTRY\n*\n**********************************************************************\n***  FILL IN THE DAIRFAIL PARAMETER BLOCK.                         ***\n***  IKJEFFDF DFDSECT=YES,DFDSEC2=YES MUST APPEAR IN SOURCE.       ***\n**********************************************************************\n*\n         MVC   &NM.DFPRM+(DFS99RBP-DFDSECTD)(4),&NM.RBP *PTR TO RB\n*\n         LA    1,&NM.S99RC\n         ST    1,&NM.DFPRM+(DFRCP-DFDSECTD)             *PTR TO S99RC\n*\n         LA    1,&NM.F02EP\n         ST    1,&NM.DFPRM+(DFJEFF02-DFDSECTD)          *PTR TO EP\n*\n         LA    1,&NM.ID\n         ST    1,&NM.DFPRM+(DFIDP-DFDSECTD)             *PTR TO SW+ID\n*\n         MVC   &NM.DFPRM+(DFCPPLP-DFDSECTD)(4),&CPPLPTR *PTR TO CPPL\n*\n         XC  &NM.DFPRM+(DFBUFP-DFDSECTD)(4),&NM.DFPRM+(DFBUFP-DFDSECTD)\n*                                                       *ZERO BUFF ADDR\n         MEND\n         MACRO\n&LABEL   GTEDAALC  &NM,&VERB=AL,&ERRMSG=YES\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   PERFORM DYNAMIC ALLOCATION USING A DATA AREA CREATED         ***\n***   BY MACRO GTEDADAT, AND POINTERS/DATA SET BY MACRO GTEDASET.  ***\n**********************************************************************\n*\n**********************************************************************\n***   SET VERB CODE INTO S99RB.                                    ***\n***   MAPPING MACRO IEFZB4D0 MUST APPEAR IN THE SOURCE.            ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB\n.*\n.VBAL    AIF   ('&VERB' NE 'AL').VBUN\n         MVI   (S99VERB-S99RB)(1),S99VRBAL   SET VERB, DSN ALLOC\n         AGO   .VBEND\n.VBUN    AIF   ('&VERB' NE 'UN').VBCC\n         MVI   (S99VERB-S99RB)(1),S99VRBUN   SET VERB, DSN UNALLOC\n         AGO   .VBEND\n.VBCC    AIF   ('&VERB' NE 'CC').VBDC\n         MVI   (S99VERB-S99RB)(1),S99VRBCC   SET VERB, CONCATENATE\n         AGO   .VBEND\n.VBDC    AIF   ('&VERB' NE 'DC').VBRI\n         MVI   (S99VERB-S99RB)(1),S99VRBDC   SET VERB, DECONCATENATE\n         AGO   .VBEND\n.VBRI    AIF   ('&VERB' NE 'RI').VBDN\n         MVI   (S99VERB-S99RB)(1),S99VRBRI   SET VERB, REMOVE IN-USE\n         AGO   .VBEND\n.VBDN    AIF   ('&VERB' NE 'DN').VBIN\n         MVI   (S99VERB-S99RB)(1),S99VRBDN   SET VERB, DDN ALLOC\n         AGO   .VBEND\n.VBIN    AIF   ('&VERB' NE 'IN').VBEND\n         MVI   (S99VERB-S99RB)(1),S99VRBIN   SET VERB, REQUEST INFO\n         AGO   .VBEND\n.VBEND   ANOP\n.*\n*\n**********************************************************************\n***    DO DYNAMIC ALLOCATION                                       ***\n**********************************************************************\n*\n         LA    1,&NM.RBP                ADDRESS OF PTR TO SVC-99 RB\n         SVC   99                       DYNALLOC\n         ST    15,&NM.S99RC             SAVE RETURN CODE FROM SVC-99\n.*\n.*********************************************************************\n.**                                                                ***\n.**   IF &ERRMSG=NO, DO NOT EVER GENERATE CODE FOR IKJEFF18        ***\n.**                                                                ***\n.*********************************************************************\n.*\n         AIF   ('&ERRMSG' EQ 'NO').NOPR\n.*\n*\n**********************************************************************\n***    IF R/C FROM DYNAMIC ALLOCATION NOT ZERO,                    ***\n***    EXECUTE THE IKJEFF18 (DAIRFAIL) PROGRAM TO PRODUCE          ***\n***    ERROR MESSAGES.                                             ***\n**********************************************************************\n*\n         CNOP  2,4                      ALIGN FOR BRANCH INSTRUCTION\n         LTR   15,15                    IF RETURN CODE IS GOOD\n         BZ    EXZ&SYSNDX                 BRANCH TO END OF ROUTINE\n         BAL   1,EXA&SYSNDX  BRANCH AROUND LIST\n*\n**********************************************************************\n***    EXCEPTIONS, DON'T USE IKJEFF18 FOR THESE VERB/ERROR COMBOS  ***\n***                                                                ***\n         DC    H'1'          NUMBER OF MEMBERS IN THIS LIST\n         DC    X'02,0438'    VERB 02 ERR 0438 DDNAME NOT FOUND\n***                                                                ***\n**********************************************************************\n*\nEXA&SYSNDX LA    2,2(0,1)                    R2 IS POINTER TO COMBOS\n           LH    1,0(0,1)                    R1 IS COUNT OF COMBOS\n           LA    15,&NM.RB                   R15 IS BASE OF RB\n*\n           CLC   (S99VERB-S99RB)(1,15),0(2)  IF NO MATCH ON VERB\n           BNE   *+14                          BRANCH TO END OF LOOP\n           CLC   (S99ERROR-S99RB)(2,15),1(2) ELSE IF ERRCDE MATCHES\n           BE    EXZ&SYSNDX                    BRANCH TO ENDING\n           LA    2,6(0,2)                    POINT TO NEXT ENTRY\n           BCT   1,*-24                      LOOP BACK UP TIL EOL\n*\n         LA    1,&NM.DFPRM              POINT TO IKJEFF18 PARM BLOCK\n         CNOP  0,4                      ALIGN FOR FOLLOWING BAL\n         BAL   15,*+20                  LOAD CONST ADDR AND BRANCH\n         DC    A(*+8)                   ADDR OF LINK PARM LIST\n         DC    A(0)                     ADDR OF DCB (NONE)\n         DC    CL8'IKJEFF18'            EP NAME\n         SVC   6                        LINK\n*\n.NOPR    ANOP\nEXZ&SYSNDX NOPR  0                        END POINT\n         MEND\n         MACRO                                                  TS05204\n         EXNAM  &MASK                                           TS05204\n.************************************************************** TS05204\n.** CREATE NAME TABLE FOR INST.-EXCEPTED NAMES OR MASKS     *** TS05204\n.************************************************************** TS05204\n         GBLA  &EXNUM                                           TS05204\n         LCLA  &EXLEN                                           TS05204\n         AIF   (&EXNUM NE 0).EXNAME1                            TS05204\nEXNAMES  DS    0D                                               TS05204\n.EXNAME1 ANOP                                                   TS05204\n&EXLEN   SETA  K'&MASK                                          TS05204\n         DC    CL8'&MASK',H'&EXLEN'                             TS05204\n&EXNUM   SETA  &EXNUM+1                                         TS05204\n         MEND                                                   TS05204\n*                                                               TS05204\n         SPACE 4                                                TS05204\n*                                                               TS05204\n         MACRO                                                  TS05204\n         EXTBL ,                                                TS05204\n.************************************************************** TS05204\n.**   CREATE PSEUDO-PDE'S FOR INST.-EXCEPTED NAMES OR MASKS *** TS05204\n.************************************************************** TS05204\n         GBLA  &EXNUM                                           TS05204\nEXNUMNAM EQU   &EXNUM                                           TS05204\nEXNAMTBL DS    0D                       TBL FOR EXCEPTED NAMES  TS05204\n.EXNTBL1 DS    A,H,XL2,A                  PSEUDO-PDE            TS05204\n&EXNUM   SETA  &EXNUM-1                                         TS05204\n         AIF   (&EXNUM GT 0).EXNTBL1                            TS05204\n         MEND                                                   TS05204\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PROLOG                                                       ***\n***                                                                ***\n**********************************************************************\n         PRINT NOGEN\nFREEALL  LINKSAVE  BASE=12,GETMAIN=YES,GETAMT=WORKDLEN\n         USING WORKD,R13\n         USING PARMPDL,R9               ADDRESSABILITY OF PRM DESC LST\n         EQ$R\n*\n         ST    R1,CPPLPTR               SAVE THE CPPL POINTER\n         XC    COMPCODE,COMPCODE        CLEAR THE COMPLETION CODE\n         XC    RETCDE,RETCDE            CLEAR THE INTERNAL RETURN CODE\n         MVI   SWITCH1,B'00000000'      INITIALIZE SWITCHES\n         B     MAINLINE                 BRANCH TO MAINLINE ROUTINE\n         EJECT\nFREEALL  TITLE 'FREEALL - MAINLINE ROUTINE'                        JRB\n**********************************************************************\n***                                                                ***\n***   MAINLINE ROUTINE                                             ***\n***                                                                ***\n**********************************************************************\n*\nMAINLINE MVC   TUI(TUILEN),TUA          INITIALIZE INFO RETRIEVAL BLKS\n         GTEDASET TUI,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n         MVC   TUU(TUULEN),TUB          INITIALIZE UNALLOCATION BLOCKS\n         GTEDASET TUU,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n*\n         BAL   R10,PPLSETUP             SET UP PARSE PARM LIST\n         BAL   R10,PARSE                PARSE THE INPUT PARAMETERS\n*\n         BAL   R10,IEXCEPTS             INITIALIZE NAME EXCEPTION TABLE\n*\n         CLC   KSYSMASK,H1              IF 'SYSMASKS' OPERAND IS IN USE\n         BNE   MINFOINI                 THEN\n         BAL   R10,SYSMASKS               PRINT LIST OF DEFAULT MASKS\n         B     END00                      AND GO TO ENDING\n*\nMINFOINI XC    RELNO,RELNO              INITIALIZE RELATIVE ALLOC NBR.\nMINFO    BAL   R10,INFO                 GET INFO ABOUT NEXT DATASET\n         L     R4,RETCDE                RETURN CODE TO R4\n         B     *+4(R4)                    GO TO:\n         B     MINFO                        00 - PROCESS NEXT DSN\n         B     END00                        04 - END OF DATASETS\n         B     MINFOINI                     08 - START OVER FROM TOP\n         B     END0C                        0C - ERROR RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   ENDING                                                       ***\n***                                                                ***\n**********************************************************************\nEND00    BAL   R10,FOOTNOTE             WRITE FOOTNOTE\n         XR    R15,R15                  R15 = 00\n         ST    R15,COMPCODE             SAVE IT\n         B     ENDING                   BRANCH TO ENDING\n*\nEND0C    BAL   R10,FOOTNOTE             WRITE FOOTNOTE\n         LA    R15,X'0C'                R15 = 0C\n         ST    R15,COMPCODE             SAVE IT\n         B     ENDING                   BRANCH TO ENDING\n*\nENDING   LA       R4,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R4,0(0,R4)              R4 POINTS TO PDL\n         IKJRLSA  (R4)                    FREE STORAGE OF PDL\n         LINKBACK RCADDR=COMPCODE\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST                             ***\n***                                                                ***\n**********************************************************************\nPPLSETUP ST    R10,PPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)\n         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)\n         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)\n         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)\n         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)\n         DROP  R4\n*\nPPEND    L     R10,PPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    R10,PAR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     R10,PAR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   INITIALIZE LIST OF BLOCKS RELATING TO EXCEPTION DDNAMES.     ***\n***   THESE BLOCKS LOOK LIKE PDE'S, AND IF THE 'EXCEPT' KEYWORD    ***\n***   IS USED, WILL BE CHAINED AHEAD OF THE IKJIDENT PDE'S WHICH   ***\n***   REFER TO DDNAMES ENTERED AS SUBPARAMETERS.                   ***\n***                                                                ***\n**********************************************************************\nIEXCEPTS ST    R10,IER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,EXNAMES               R4 POINTS TO LIST OF LEN+NAMES\n         LA    R5,EXNAMTBL              R5 IS ADDRESS OF PSEUDO-PDE'S\n         LA    R2,EXNUMNAM              R2 HAS NUMBER OF NAMES\nIELOOP   ST    R4,0(0,R5)               ADDR OF NAME TO EXNAMTBL ENTRY\n         MVC   4(2,R5),8(R4)            LGTH OF NAME TO EXNAMTBL ENTRY\n         MVC   6(2,R5),X8000            FLAGS+RESERVED TO EXNAMTBL NTRY\n         LA    R4,10(0,R4)              R4 POINTS TO NEXT NAME+LENGTH\n         LR    R3,R5                    R3 POINTS TO CURR EXNAMTBL NTRY\n         LA    R5,12(0,R5)              R5 POINTS TO NEXT EXNAMTBL NTRY\n         ST    R5,8(0,R3)               ADDR OF NEXT NTRY TO CURR NTRY\n         BCT   R2,IELOOP                IF NOT DONE, LOOP BACK UP\n*\n         MVC   8(4,R3),FF000000         MARK END OF LIST FOR NOW\n*\n         CLC   KEXCEPT,H1               IF 'EXCEPT' KEYWORD NOT IN USE\n         BNE   IEEND                      BRANCH TO ENDING\n*\n         LA    R4,SBEXMASK              R4 HAS ADDR OF MASK PDE CHAIN\n         ST    R4,8(0,R3)               CHAIN TO EXNAMTBL\n*\nIEEND    L     R10,IER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GIVE A LISTING OF THE DEFAULT DDNAME MASKS IN TABLE EXNAMES.  ***\n***                                                                ***\n**********************************************************************\nSYSMASKS ST    R10,SYR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TPUT  SYSM1,72                 WRITE HEADING\n         TPUT  BLANKS,72                WRITE BLANK LINE\n*\n         LA    R4,EXNUMNAM(0,0)         R4 HAS NUMBER OF NAMES\n         LA    R5,EXNAMES-10            R5 POINTS TO -1 ENTRY\nSYLOOP   LA    R5,10(0,R5)              INCR POINTER\n         MVC   RPTLINE(80),BLANKS       CLEAR REPORT LINE\n         MVC   RPTLINE+2(8),0(R5)       MOVE DDNAME TO REPORT LINE\n         TPUT  RPTLINE,72               WRITE REPORT LINE\n         BCT   R4,SYLOOP                IF NAMES REMAIN, LOOP BACK UP\n*\n         TPUT  BLANKS,72                TRAILING BLANK LINE\n*\nSYEND    L     R10,SYR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***      SVC99 INFO RETRIEVAL, THEN PERFORM DDNAME UNALLOCATION,   ***\n***      IF APPROPRIATE.                                           ***\n***                                                                ***\n**********************************************************************\nINFO     ST    R10,INR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LH    R4,RELNO                   GET LAST ALLOC NUMBER\n         LA    R4,1(0,R4)                   INCR BY 1\n         MVC   TUITU(TUIRBP-TUITU),TUATU  INITIALIZE INFO TEXT UNITS\n         STCM  R4,3,TUIRELNO              ALLOC NUMBER TO TEXT UNIT\n         STH   R4,RELNO                   ALSO SAVE IT IN STORAGE\n         GTEDAALC TUI,VERB=IN,ERRMSG=YES  GET INFO ABOUT ALLOCATION\n         CLC   TUIS99RC(4),F0             IF RETURN NOT ZERO\n         BNE   INRET0C                      ABORT INFORMATION LOOP\n*\nINCKUSE  TM    TUIRTATT,X'40'           IF IN USE\n         BO    INNEXT                     SKIP THIS DSN\n*                                                                  JRB\nINCKONLY TM    SBONPFX+6,X'80'     USER SPECIFY KEYWORD \"ONLY?\"    JRB\n         BZ    INSWINIT            B IF NOT.                       JRB\n         CLC   =H'0',TUIINDDN-2    DDNAME LENGTH ZERO              JRB\n         BE    INNEXT              B IF YES.  IGNORE.              JRB\n         CLC   TUIINDDN-2(2),SBONPFX+4 LEN OF DDNAME < PREFIX?     JRB\n         BL    INSWINIT            B IF YES.                       JRB\n         L     R15,SBONPFX         POINT TO \"ONLY\" PREFIX.         JRB\n         LH    R4,SBONPFX+4        LOAD LENGTH OF PREFIX.          JRB\n         BCTR  R4,0                ADJUST FOR SS LENGTH FIELD.     JRB\n         EX    R4,COMPONLY         COMPARE PREFIX TO DDNAME.       JRB\n*        CLC   TUIINDDN(*-*),0(R15) *** EXECUTED ***               JRB\n         BE    INCKCAT             FREE DDNAME IF PREFIX MATCHES,  JRB\n         B     INNEXT              ... SKIP DDNAME IF IT DOESN'T.  JRB\n*                                                               TS05203\nINSWINIT MVI   TYPESW,X'00'             INITIALIZE SWITCHES     TS05203\n*                                                               TS05203\nINCKNOE  CLC   =H'3',KSCOPE        IS SCOPE \"NOEXCEPTIONS?\"        JRB\n         BNE   INCKDUMY            B IF NOT                        JRB\n         MVC   KCONCAT,H1          FORCE FREE CONCATENATION SW.    JRB\n         B     INCKCAT             GO FREE DATASET.                JRB\nINCKDUMY TM    TUIRTTYP,X'80'           IF DUMMY DATASET        TS05203\n         BNO   INCKTERM                 THEN                    TS05203\n         MVI   TYPESW,X'10'               SET TYPE SWITCH       TS05203\n         CLC   KDUMMY(2),H2               IF NODUMMY OPERAND    TS05203\n         BE    INNEXT                       SKIP THIS DSN       TS05203\n         B     INCKDYNA                   ELSE CONTINUE CHECKS  TS05203\n*                                       ELSE                    TS05203\nINCKTERM TM    TUIRTTYP,X'40'           IF TERMINAL DATASET     TS05203\n         BNO   INCKSYSO                 THEN                    TS05203\n         MVI   TYPESW,X'18'               SET TYPE SWITCH       TS05203\n         CLC   KTERM(2),H2                IF NOTERM OPERAND     TS05203\n         BE    INNEXT                       SKIP THIS DSN       TS05203\n         B     INCKDYNA                   ELSE CONTINUE CHECKS  TS05203\n*                                       ELSE                    TS05203\nINCKSYSO TM    TUIRTTYP,X'10'           IF SYSOUT DATASET       TS05203\n         BNO   INCKSCR                  THEN                    TS05203\n         MVI   TYPESW,X'28'               SET TYPE SWITCH       TS05203\n         CLC   KSYSOUT(2),H2              IF NOSYSOUT OPERAND   TS05203\n         BE    INNEXT                       SKIP THIS DSN       TS05203\n         B     INCKDYNA                   ELSE CONTINUE CHECKS  TS05203\n*                                       ELSE                    TS05203\nINCKSCR  XR    R4,R4                    CLEAR R4 FOR INSERT     TS05203\n         ICM   R4,3,TUIINDSN-2          R4 HAS LENGTH OF DSN    TS05203\n         CH    R4,H17                   IF LENGTH LT 17         TS05203\n         BL    INCKDYNA                   BYPASS THIS CHECK     TS05203\n         MVC   DSN17(17),TUIINDSN       MOVE FIRST 17 CHARACTRS TS05203\n         NC    DSN17(17),DSNNCM         KILL NUMERIC BITS       TS05203\n         CLC   DSN17(17),DSNTMASK       IF=C'SYS00000.T000000.' TS05203\n         BNE   INCKDYNA                 THEN                    TS05203\n         MVI   TYPESW,X'20'               SET TYPE SWITCH       TS05203\n         CLC   KTEMP(2),H2                IF NOTEMP OPERAND     TS05203\n         BE    INNEXT                       SKIP THIS DSN       TS05203\n         B     INCKDYNA                   ELSE CONTINUE CHECKS  TS05203\n*\n         EJECT                                                  TS05203\nINCKDYNA TM    TUIRTATT,X'08'           IF NOT DYNAMICALLY ALLOCATED\n         BO    INCKDDN                  THEN\n         CLC   KSCOPE(2),H1               IF 'DYNAM' KEYWORD IN USE\n         BE    INNEXT                       SKIP THIS DSN\n*\nINCKDDN  BAL   R10,EXCEPT               CHECK DDNAME FOR EXCEPTION\n         CLC   RETCDE,F0                IF RETURN NOT 00\n         BNE   INNEXT                     SKIP THIS DSN\n*\nINCKCAT  TM    TUIRTATT,X'80'           IF A MEMBER OF A CONCATENATION\n         BNO   INUNALC                  THEN\n         CLC   KCONCAT,H1                 IF 'CONCAT' KEYWORD IN USE\n         BNE   INCKCAT1                   THEN\n         MVI   TYPESW,X'08'                 SET TYPE SWITCH     TS05203\n         BAL   R10,DECONCAT                 DECONCATENATE\n         CLC   RETCDE,F0                      IF RC NOT 00\n         BNE   INNEXT                         THEN SKIP THIS DSN\n         B     INRET08                      RETURN, START CHAIN OVER\nINCKCAT1 B     INNEXT                   ELSE SKIP THIS DSN\n*\nINUNALC  MVC   TUUTU(TUURBP-TUUTU),TUBTU  INIT TEXT UNITS FROM PROTO\n         MVC   TUUDDNAM-2(10),TUIINDDN-2  INIT DDNAME FROM INFO\n         GTEDAALC TUU,VERB=UN,ERRMSG=YES  UNALLOCATE THE DDNAME\n*\n         CLC   TUUS99RC(4),F0           IF RETURN NOT ZERO\n         BNE   INNEXT                     GO TO PROCESS NEXT DSN\n         BAL   R10,REPORT               ELSE PERFORM REPORT\n         LH    R4,RELNO                   LOAD COUNTER TO R4\n         BCTR  R4,0                       DECR BY 1\n         STH   R4,RELNO                   SAVE IT AGAIN\n*\nINNEXT   TM    TUIRTLST,X'80'           IF LAST ENTRY\n         BO    INRET04                    BRANCH TO RETURN=04\n         B     INRET00                  ELSE BRANCH TO RETURN=00\n*\nINRET00  LA    R15,X'00'                INDICATE LOOK FOR NEXT DSN\n         ST    R15,RETCDE               SAVE IT INTO RETCDE\n         B     INEND                    GO TO ENDING\n*\nINRET04  LA    R15,X'04'                INDICATE LAST ENTRY\n         ST    R15,RETCDE               SAVE IT INTO RETCDE\n         B     INEND                    GO TO ENDING\n*\nINRET08  LA    R15,X'08'                INDICATE DECONCAT AND RESTART\n         ST    R15,RETCDE               SAVE IT INTO RETCDE\n         B     INEND                    GO TO ENDING\n*\nINRET0C  LA    R15,X'0C'                INDICATE INFORMATION ERROR\n         ST    R15,RETCDE               SAVE IT INTO RETCDE\n         B     INEND                    GO TO ENDING\n*\nINEND    L     R10,INR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    CHECK FOR EXCEPTIONS TO DDNAMES TO BE FREED                 ***\n***                                                                ***\n**********************************************************************\nEXCEPT   ST    R10,EXR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XR    R4,R4                    CLEAR R4 FOR INSERT\n         ICM   R4,3,TUIINDDN-2          R4 HAS LEN OF DDNAME\n         LTR   R4,R4                    IF LENGTH ZERO\n         BZ    EXRET04                    RETURN = 04\n         BCTR  R4,0                     R4 MINUS 1 FOR EXEC\n         MVC   EXDDN(8),BLANKS          CLEAR THE WORK FIELD\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   EXDDN(0),TUIINDDN          MOVE DDNAME TO WORK\n         EX    R4,*-6                   EXECUTE THE MOVE\n*\n         LA    R3,EXNAMTBL              ADDRESS OF PSEUDO-PDE'S\n         USING EXPDE,R3                 ADDRESSABILITY\n         B     EXLOOP1A                 BRANCH INTO LOOP\n*\nEXLOOP1  CLC   EXNEXT,FF000000          IF END OF CHAIN\n         BE    EXEND                      RETURN\n         CLC   EXNEXT,F0                ELSE IF NO SUBFIELD\n         BE    EXEND                      RETURN\n         L     R3,EXNEXT                POINT TO NEXT PSEUDO-PDE\n*\nEXLOOP1A L     R4,EXADDR                R4 POINTS TO DDN MASK\n         BCTR  R4,0                       MINUS 1 FOR LOOP\n         LH    R5,EXLEN                 R5 IS LENGTH OF MASK\n         LA    R6,EXDDN-1               R6 POINTS TO WORK DDN MINUS 1\n*\nEXLOOP2  LA    R6,1(0,R6)               POINT TO NEXT WORK DDN CHAR\n         LA    R4,1(0,R4)               POINT TO NEXT MASK CHAR\n         CLI   0(R4),C'-'               IF MASK CHAR IS HYPHEN\n         BE    EXMATCH                    TREAT AS MATCH\n         CLI   0(R6),X'40'              IF WORK CHAR BLANK\n         BE    EXNOMTCH                   LEAVE THE LOOP\n         CLI   0(R4),C'*'               IF MASK CHAR IS ASTERISK,\n         BE    EXLOOP2N                   STAY IN LOOP\n         CLC   0(1,R4),0(R6)            IF CHARS DON'T MATCH\n         BNE   EXNOMTCH                   LEAVE THE LOOP\nEXLOOP2N BCT   R5,EXLOOP2               MATCH SO FAR, LOOP BACK UP\n*                       ***FALL OUT OF LOOP ***\n         CLC   TUIINDDN-2(2),EXLEN      IF DDNAME LEN GT MASK LEN\n         BH    EXNOMTCH                   NO MATCH AT END OF LOOP\nEXMATCH  B     EXRET04                  ALL CHARS MATCH, RETURN = 04\n*\nEXNOMTCH B     EXLOOP1                  MISMATCH, STAY IN OUTER LOOP\n*\nEXRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     EXEND                    BRANCH TO ENDING\n*\nEXEND    L     R10,EXR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    UNALLOCATE A CONCATENATION.  IF UNALLOCATION IS SUCCESSFUL, ***\n***    THE FILE RELATIVE NUMBERS MAY CHANGE UNPREDICTABLY.         ***\n***    THEREFORE, THE RETURN CODE OF 4 WILL CAUSE AN EVENTUAL      ***\n***    RETURN CODE TO THE MAINLINE PROCEDURE WHICH WILL INDICATE   ***\n***    THAT THE RELATIVE NUMBER OF THE FILES SHOULD BE RESET TO    ***\n***    ONE, AND THE PROCESS OF OBTAINING INFORMATION SHOULD BE     ***\n***    BEGUN AGAIN FROM THE TOP.                                   ***\n***                                                                ***\n**********************************************************************\nDECONCAT ST    R10,DER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   TUUTU(TUURBP-TUUTU),TUBTU  INIT TEXT UNITS FROM PROTO\n         MVC   TUUDDNAM-2(10),TUIINDDN-2  MOVE DDNAME INTO CNTRL BLOCK\n         GTEDAALC TUU,VERB=UN,ERRMSG=YES  DECONCATENATE\n         CLC   TUUS99RC(4),F0             IF RETURN CODE NOT ZERO\n         BNE   DERET04                      RETURN = 04\n*\n         OI    SWITCH1,X'40'            INDICATE CONCATENATION FREED\n         BAL   R10,REPORT               WRITE A MESSAGE\n         B     DEEND                    RETURN = 00\n*\nDERET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DEEND                    BRANCH TO ENDING\n*\nDEEND    L     R10,DER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    CREATE ONE LINE OF A LISTING OF FREED DDNAMES/DSNAMES       ***\n***                                                                ***\n**********************************************************************\nREPORT   ST    R10,RER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         CLC   KLIST,H1                 IF 'LIST' OPERAND NOT IN USE\n         BNE   REEND                      BYPASS THIS WHOLE PROCEDURE\n*\n         TM    SWITCH1,X'80'            IF HEADING ALREADY PRINTED\n         BO    REBODY                     SKIP WRITING HEADING\n         TPUT  BLANKS,1                 WRITE BLANK LINE\n         LA    R4,HDG1                  POINT TO HEADING\n         LA    R5,L'HDG1                LENGTH OF HEADING\n         TPUT  (R4),(R5)                  WRITE THE HEADING\n         TPUT  BLANKS,1                 WRITE BLANK LINE\n         OI    SWITCH1,X'80'            SET HEADING-PRINTED SWITCH\n*\nREBODY   MVC   RPTLINE(80),BLANKS       INITIALIZE REPORT LINE\n         XR    R4,R4                    CLEAR R4 FOR INSERT\n         ICM   R4,3,TUIINDDN-2          LENGTH OF DDNAME TO R4\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   RPTLINE+2(0),TUIINDDN      MOVE DDNAME TO REPORT\n         EX    R4,*-6                   PERFORM THE MOVE\n*                                                               TS05203\n         XR    R4,R4                    CLEAR R4 FOR INSERT     TS05203\n         IC    R4,TYPESW                OFFSET INTO TYPETABL    TS05203\n         LA    R4,TYPETABL(R4)          ADDR OF TYPE LITERAL    TS05203\n         MVC   RPTLINE+12(8),0(R4)      MOVE TYPE TO REPORT     TS05203\n*\n         XR    R4,R4                    CLEAR R4 FOR INSERT\n         ICM   R4,3,TUIINDSN-2          LENGTH OF DSNAME TO R4\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   RPTLINE+22(0),TUIINDSN     MOVE DSNAME TO REPORT TS05203\n         EX    R4,*-6                   PERFORM THE MOVE\n*\n*        TM    SWITCH1,X'40'     IF A CONCATENATION WAS FREED   TS05203\n*        BNO   *+12              THEN                           TS05203\n*        MVI   RPTLINE,C'*'        PUT AN '*' ON THE PRINT LINE TS05203\n*        OI    SWITCH1,X'20'       REMEMBER FOOTNOTE            TS05203\n*        NI    SWITCH1,X'BF'       TURN OFF CONCAT-FREED SWITCH TS05203\n*\n         LA    R4,RPTLINE               POINT TO REPORT LINE\n         LA    R5,80(0,0)               LENGTH OF LINE\n         TPUT  (R4),(R5)                WRITE THE REPORT LINE\n*\n         B     REEND\n*\nREEND    L     R10,RER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   WRITE THE FOOTNOTE                                           ***\n***                                                                ***\n**********************************************************************\nFOOTNOTE ST    R10,FOR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         CLC   KLIST,H1                 IF 'LIST' OPERAND NOT IN USE\n         BNE   FOEND                      BYPASS THIS WHOLE PROCEDURE\n*\n         TM    SWITCH1,X'80'            IF HEADING NOT WRITTEN\n         BNO   FOEND                      SKIP ALL\n         TM    SWITCH1,X'20'            IF A CONCATENATION NOT FREED\n         BNO   FOBLANK                    SKIP FOOTNOTE #1 AND #2\n*        TPUT  FOOT1,72                 WRITE FOOTNOTE #1       TS05203\n*        TPUT  FOOT2,72                 WRITE FOOTNOTE #2       TS05203\n*\nFOBLANK  TPUT  BLANKS,72                POINT TO BLANK LINE\n*\nFOEND    L     R10,FOR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    DATA CONSTANTS                                              ***\n***                                                                ***\n**********************************************************************\nDATACNST DS    0D\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\nF0       DC    F'0'                     CONSTANT\nH1       DC    H'1'                     CONSTANT\nH2       DC    H'2'                     CONSTANT                TS05203\nH17      DC    H'17'                    CONSTANT                TS05203\nCOMPONLY CLC   TUIINDDN(*-*),0(R15) *** EXECUTED ***               JRB\nDSNNCM   DC    X'FFFFFFF0F0F0F0F0FFFFF0F0F0F0F0F0FF'            TS05203\n*                S Y S # # # # # . T # # # # # # .              TS05203\nDSNTMASK DC    CL17'SYS00000.T000000.'  FORMAT OF TEMP DSN (17) TS05203\nTYPETABL DS    0D                                               TS05203\n         DC    CL8'Dataset'             LITERAL                 TS05203\n         DC    CL8'Concat.'             LITERAL                 TS05203\n         DC    CL8'Dummy'               LITERAL                 TS05203\n         DC    CL8'Terminal'            LITERAL                 TS05203\n         DC    CL8'Temp.'               LITERAL                 TS05203\n         DC    CL8'Sysout'              LITERAL                 TS05203\n*                                                               TS05203\nBLANKS   DC    CL80' '                  LITERAL\nHDG1     DC    CL72'The following files have been freed:'\nSYSM1    DC    CL72'Installation defined masks in use are:'\n*   FOOT1    DC    CL72'_____________________________'          TS05203\n*   FOOT2    DC    CL72'* Indicates a concatenation'            TS05203\n*\n*                                                               TS05204\n         PUSH  PRINT                                            TS05204\n         PRINT GEN                                              TS05204\n*    +-----------------------------------------+                TS05204\n*    |                                         |\n*    |  SEE THE HELP DOCUMENT FOR INSTRUCTIONS |\n*    |  ON HOW TO CONSTRUCT THESE MASKS.       |\n*    |                                         |\n*    +-----------------------------------------+\n*                                                               TS05204\n         EXNAM  $$$$-                   STEPLIB COMMAND LIBRARY    JRB\n         EXNAM  ISP-                    ISPF FILES              TS05204\n         EXNAM  IPCS-                   IPCS FILES                 JRB\n         EXNAM  LOADLIB-                PSEUDO STEPLIB FOR $$      JRB\n         EXNAM  SMPTABL                 SMP DIALOG TABLES          JRB\n         EXNAM  STEPLIB                 STEPLIB DATASET            JRB\n         EXNAM  SYSEXEC                 TSO REXX LIBRARY           JRB\n         EXNAM  SYSPROC                 TSO CLISTS              TS05204\n         EXNAM  SYSLBC                  BRODCAST DATASET           JRB\n         EXNAM  SYSHELP                 TSO HELP                TS05204\n         EXNAM  SYSIN                   UTILITY INPUT           TS05204\n         EXNAM  SYSPRINT                UTILITY OUTPUT          TS05204\n         EXNAM  SYSUADS                 USER ATTRIB DATASET        JRB\n         EXNAM  FT05F001                FORTRAN INPUT           TS05201\n         EXNAM  FT06F001                FORTRAN OUTPUT          TS05201\n*        EXNAM  PANDD*                  PANVALET FILES          TS05204\n         POP    PRINT                                           TS05204\n*\n*\nFF000000 DC    XL4'FF000000'\nX8000    DC    XL2'8000'\n*                                       CHANGE MACRO, BELOW:    TS05203\nTUA      GTEDADAT  RELNO=X,RTLST=X,INDDN=X,INDSN=X,RTATT=X,            X\n               RTTYP=X                                          TS05203\nTUB      GTEDADAT  DDNAM=X,UNALC=X\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n***  SYNTAX:                                                       ***\n***                                                                ***\n***  FREEALL  EXCEPT(MASK1,MASK2,...)                           TS05203\n***           ONLY(PREFIX)                                         JRB\n***           SYSMASKS                                          TS05203\n***           NOLIST | LIST                                     TS05203\n***           CONCATS | NOCONCATS                               TS05203\n***           DYNAM | ALL | NOEXCEPTIONS                  TS05203  JRB\n***           TEMP | NOTEMP  (OR  SCRATCH | NOSCRATCH)          TS05203\n***           DUMMY | NODUMMY                                   TS05203\n***           SYSOUT | NOSYSOUT                                 TS05203\n***           TERM | NOTERM                                     TS05203\n***                                                                ***\n***  REQUIRED OPERANDS:  NONE                                   TS05203\n***   DEFAULT OPERANDS:  NOLIST,CONCATS,DYNAM,TEMP,             TS05203\n***                      DUMMY,SYSOUT,TERM                      TS05203\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\nKLIST    IKJKEYWD DEFAULT='NOLIST'\n         IKJNAME 'LIST'\n         IKJNAME 'NOLIST'\n*\nKSCOPE   IKJKEYWD DEFAULT='DYNAM'\n         IKJNAME 'DYNAM'\n         IKJNAME 'ALL'\n         IKJNAME 'NOEXCEPTIONS'                                    JRB\n*\nKCONCAT  IKJKEYWD DEFAULT='CONCATS'\n         IKJNAME 'CONCATS'\n         IKJNAME 'NOCONCATS'\n*\nKONLY    IKJKEYWD ,                                                JRB\n         IKJNAME 'ONLY',SUBFLD=SBONLY                              JRB\n*                                                                  JRB\nKEXCEPT  IKJKEYWD\n         IKJNAME 'EXCEPT',SUBFLD=SBEXCEPT\n*\nKSYSMASK IKJKEYWD\n         IKJNAME 'SYSMASKS'\n*                                                               TS05203\n*     ----  OPERANDS FOR COMPATABILITY WITH J/TIP ---           TS05203\nKTEMP    IKJKEYWD DEFAULT='TEMP'                                TS05203\n         IKJNAME 'TEMP',ALIAS=('SCRATCH')                       TS05203\n         IKJNAME 'NOTEMP',ALIAS=('NOSCRATCH')                   TS05203\n*                                                               TS05203\nKTERM    IKJKEYWD DEFAULT='TERM'                                TS05203\n         IKJNAME 'TERM'                                         TS05203\n         IKJNAME 'NOTERM'                                       TS05203\n*                                                               TS05203\nKDUMMY   IKJKEYWD DEFAULT='DUMMY'                               TS05203\n         IKJNAME 'DUMMY'                                        TS05203\n         IKJNAME 'NODUMMY'                                      TS05203\n*                                                               TS05203\nKSYSIN   IKJKEYWD DEFAULT='SYSIN'                               TS05203\n         IKJNAME 'SYSIN'                                        TS05203\n         IKJNAME 'NOSYSIN'                                      TS05203\n*                                                               TS05203\nKSYSOUT  IKJKEYWD DEFAULT='SYSOUT'                              TS05203\n         IKJNAME 'SYSOUT'                                       TS05203\n         IKJNAME 'NOSYSOUT'                                     TS05203\n*\nSBONLY   IKJSUBF ,                                                 JRB\nSBONPFX  IKJIDENT 'FILE/DD NAME OR PREFIX',                        JRB +\n               UPPERCASE,MAXLNTH=8,                                JRB +\n               FIRST=ANY,OTHER=ANY,                                JRB +\n               PROMPT='FILE/DD NAME OR PREFIX',                    JRB +\n               HELP=('1-8 CHARACTER FILE NAME (DDNAME) OR PREFIX.')\n*                                                                  JRB\nSBEXCEPT IKJSUBF\nSBEXMASK IKJIDENT 'FILE/DD NAME OR MASK',LIST,                         X\n               UPPERCASE,MAXLNTH=8,                                    X\n               FIRST=ANY,OTHER=ANY,                                    X\n               PROMPT='FILE/DD NAME OR MASK',                          X\n               HELP=('1-8 CHARACTER FILE NAME (DDNAME) OR MASK')\n*\n         IKJENDP\n         EJECT\n**********************************************************************\n***                                                                ***\n***    WORK DATA AREA, POINTED TO BY R13                           ***\n***                                                                ***\n**********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nCPPLPTR  DS    F                        POINTER TO CPPL\nRETCDE   DS    F                        INTERNAL RETURN CODE\nINR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nEXR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nIER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nSYR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nDER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nFOR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPAR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nRER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nRELNO    DS    H                        RELATIVE NUMBER OF ALLOCATION\nRPTLINE  DS    CL80                     REPORT LINE\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\nDSN17    DS    CL17                     WORK AREA FOR TEMP DSN  TS05203\nSWITCH1  DS    B'00000000'              SWITCHES\n*                1.......                X'80' - HEADING LINE PRINTED\n*                .1......                X'40' - CONCATENATION IS FREED\n*                ..1.....                X'20' - CONCAT WAS FREED ONCE\n*                ...11111                UNUSED\nTYPESW   DS    XL1                      INDICATE FILE TYPE      TS05203\n*                                         X'00' - NOT SPECIAL   TS05203\n*                                         X'08' - CONCATENATION TS05203\n*                                         X'10' - DUMMY FILE    TS05203\n*                                         X'18' - TERMINAL FILE TS05203\n*                                         X'20' - TEMP FILE     TS05203\n*                                         X'28' - SYSOUT FILE   TS05203\nEXDDN    DS    CL8                      WORK AREA FOR DDNAME\n*\n*\n         PUSH  PRINT                                            TS05204\n         PRINT GEN                                              TS05204\n*    +-----------------------------------------+                TS05204\n*    |  TABLE OF PSEUDO-PDE'S FOR INSTALLATION |                TS05204\n*    |  EXCEPTED DDNAMES OR MASKS.             |                TS05204\n*    +-----------------------------------------+                TS05204\n         EXTBL                                                  TS05204\n         POP   PRINT                                            TS05204\n*                                                               TS05204\n*                                                               TS05204\n*                                                               TS05204\n*                                                               TS05204\n*                                                               TS05204\n*\n         PUSH  PRINT                                            TS05203\n         PRINT GEN                                              TS05203\n         EJECT                                                  TS05203\n*                                       CHANGE MACRO, BELOW:    TS05203\nTUI      GTEDADAT  MAP=ONLY,RELNO=X,RTLST=X,INDDN=X,INDSN=X,RTATT=X,   X\n               RTTYP=X                                          TS05203\n         EJECT                                                  TS05203\nTUU      GTEDADAT  MAP=ONLY,DDNAM=X,UNALC=X\n         POP   PRINT                                            TS05203\n*\n         DS    0D                       ALIGN FOR GETMAIN\nWORKDLEN EQU   *-WORKD                  LENGTH OF AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***    MAPPING DSECTS                                              ***\n***                                                                ***\n**********************************************************************\n         PRINT NOGEN\n         IEFZB4D0\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n*\nEXPDE    DSECT                          PDE FOR LIST OF DDNAME MASKS\nEXADDR   DS    F                          ADDRESS OF MASK\nEXLEN    DS    H                          LENGTH OF MASK\nEXFLAGS  DS    BL1                        FLAGS X'80'\n         DS    XL1                        NOT USED X'00'\nEXNEXT   DS    F                          ADDR OF NEXT PDE\n*\n         CVT   DSECT=YES              , CVTMAP FOR IKJPARS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FREEALL$": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x02\\x01\\x126?\\x01\\x18\\x04O\\x13Y\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-12-28T00:00:00", "modifydate": "2018-02-13T13:59:02", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT496.FILE160(FREEALL)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   FREEALL\n SETSSI  CB486300\n SETCODE AC(0)\n ENTRY   FREEALL\n NAME    FREEALL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FREEALL0": {"ttr": 4098, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x03@\\x03@\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 832, "newlines": 832, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'FREEALL - FREE ALLOCATED FILES WITH SVC99'\n**********************************************************************\n***                                                                ***\n***                   FREEALL COMMAND                              ***\n***                                                                ***\n***  THIS COMMAND IS A NEW VERSION OF FREEALL WHICH UTILIZES SVC99 ***\n***  TO UNALLOCATE FILES.  THIS VERSION HAS THE ADVANTAGE OF USING ***\n***  ALL IBM SUPPORTED CODE.  SVC99 DOES ALL THE DEALING WITH THE  ***\n***  TIOT, ETC., SO THAT THIS PROGRAM CAN BE MAINTAINED BY MORE    ***\n***  JUNIOR SYSTEMS PROGRAMMERS.  THIS VERSION ALSO ALLOWS THE     ***\n***  DESIGNATION OF MASKS FOR INSTALLATION EXCEPTED DDNAMES,       ***\n***  INSTEAD OF JUST EXPLICIT NAMES.                               ***\n***                                                                ***\n***  THE USER IS ABLE TO SUPPLY A LIST OF DDNAMES AND/OR MASKS TO  ***\n***  BE EXCEPTED FROM THE UNALLOCATION PROCESS.  THE USER CAN ALSO ***\n***  CHOOSE WHETHER TO UNALLOCATE CONCATENATIONS, AND WHETHER TO   ***\n***  UNALLOCATE DATASETS NOT DYNAMICALLY ALLOCATED (USEFUL WHEN    ***\n***  RUNNING TSO IN BATCH, OR WHEN YOU NEED TO FREE DATASETS       ***\n***  ALLOCATED DURING LOGON).  THE USER CAN ALSO SEE A LIST OF THE ***\n***  DEFAULT INSTALLATION MASKS/DDNAMES WHICH WILL ALWAYS BE       ***\n***  EXCEPTED FROM THE UNALLOCATIONS.  (SEE THE HELP DOCUMENT FOR  ***\n***  INSTRUCTIONS ON HOW TO CONSTRUCT DDNAME MASKS.  INSTALLATION  ***\n***  MASKS ARE DEFINED WITH MACRO 'EXNAM'.)                     TS05204\n***                                                                ***\n***  THE TEMP (ALIAS SCRATCH), DUMMY, SYSOUT AND TERM OPERANDS  TS05203\n***  HAVE BEEN ADDED TO THIS VERSION TO MAKE IT COMPATABLE WITH TS05203\n***  THE J/TIP PRODUCT.                                         TS05203\n***                                                             TS05203\n***                                                                ***\n***  SYNTAX:                                                       ***\n***                                                                ***\n***  FREEALL  EXCEPT(MASK1,MASK2,...)                           TS05203\n***           SYSMASKS                                          TS05203\n***           NOLIST | LIST                                     TS05203\n***           CONCATS | NOCONCATS                               TS05203\n***           DYNAM | ALL                                       TS05203\n***           TEMP | NOTEMP  (OR  SCRATCH | NOSCRATCH)          TS05203\n***           DUMMY | NODUMMY                                   TS05203\n***           SYSOUT | NOSYSOUT                                 TS05203\n***           TERM | NOTERM                                     TS05203\n***                                                                ***\n***                                                                ***\n***  ALIAS: FA                                                     ***\n***                                                                ***\n***  REQUIRED OPERANDS:  NONE                                      ***\n***   DEFAULT OPERANDS:  NOLIST,CONCATS,DYNAM,TEMP,             TS05203\n***                      DUMMY,SYSOUT,TERM                      TS05203\n***                                                                ***\n*************************************************************** TS05203\n         EJECT                                                  TS05203\n*************************************************************** TS05203\n***                                                                ***\n***  NON-IBM MACROS:  (ALL FROM CBT MODS TAPE, SAME AUTHOR)        ***\n***    LINKSAVE - LINKAGE CONVENTIONS IN                           ***\n***    LINKBACK - LINKAGE CONVENTIONS BACK                         ***\n***    GTEDADAT - CREATE SVC99 AND DAIRFAIL CONTROL BLOCKS         ***\n***    GTEDASET - LINK SVC99 AND DAIRFAIL CONTROL BLOCKS TOGETHER  ***\n***    GTEDAALC - EXECUTE SVC99 AND DAIRFAIL                       ***\n***                                                                ***\n***                                                                ***\n***  ASM OPTIONS:   RENT                                           ***\n***  LKED OPTIONS:  RENT REUS REFR                                 ***\n***                                                                ***\n***                                                                ***\n***  RECOMMENDED LIBRARY:                                          ***\n***        (1)  LPALIB                                             ***\n***        (2)  LINKLIB                                            ***\n***        (3)  CMDLIB                                             ***\n***                                                                ***\n**********************************************************************\n         EJECT 6                                                TS05203\n**********************************************************************\n***                                                                ***\n***  AUTHOR:                                                       ***\n***     CHUCK HOFFMAN, CONSULTANT                                  ***\n***     USER SERVICES CENTER                                       ***\n***     BUREAU OF SYSTEMS OPERATIONS (BSO)                         ***\n***     OFFICE OF MANAGEMENT INFORMATION SYSTEMS (OMIS)            ***\n***     EXECUTIVE OFFICE FOR ADMINISTRATION AND FINANCE (A&F)      ***\n***     COMMONWEALTH OF MASSACHUSETTS                              ***\n***     ONE ASHBURTON PLACE, ROOM 1619                             ***\n***     BOSTON, MA  02108                                          ***\n***                                 (617) 727-5725  WORK           ***\n***                                 (617) 769-8547  HOME           ***\n***  ALIAS:                                                     TS05203\n***     CHUCK HOFFMAN, SYSTEMS PROGRAMMER                       TS05203\n***     GTE LABORATORIES, INC.                                  TS05203\n***     TECHNICAL COMPUTATION CENTER                            TS05203\n***     40 SYLVAN ROAD                                          TS05203\n***     WALTHAM, MA  02254                                      TS05203\n***                                 (617) 466-2131              TS05203\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***                                                                ***\n***     R0-R3  LINKAGE CONVENTIONS, MACROS, WORK                   ***\n***     R4-R6  WORK                                                ***\n***     R7-R8  (UNUSED)                                            ***\n***        R9  BASE OF IKJPARMD DSECT                              ***\n***       R10  BAL REGISTER                                        ***\n***       R11  (UNUSED)                                            ***\n***       R12  BASE OF PROGRAM                                     ***\n***       R13  LINKAGE CONVENTIONS, BASE OF WORKD DSECT            ***\n***   R14-R15  LINKAGE CONVENTIONS, WORK                           ***\n***                                                                ***\n*************************************************************** TS05203\n         SPACE 3                                                TS05203\n*************************************************************** TS05203\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                             TS05201\n***  1.  ADD FT05F001 AND FT06F001 TO SYSTEM MASKS.             TS05201\n***                                                             TS05201\n***  2.  A.  ADD TEMP|NOTEMP (SCRATCH|NOSCRATCH), TERM|NOTERM,  TS05203\n***          SYSOUT|NOSYSOUT, DUMMY|NODUMMY OPERANDS FOR        TS05203\n***          COMPATABILITY WITH J/TIP.  (J/TIP 'SCHEDULE'       TS05203\n***          COMMAND USES A HARDCODED CALL TO 'FREEALL' WITH    TS05203\n***          THESE OPERANDS.)                                   TS05203\n***                                                             TS05203\n***      B.  ADD NOTATION ON OUTPUT OF WHETHER THE FILE IS      TS05203\n***          A DATASET, CONCATENATION, TERMINAL, TEMP,          TS05203\n***          SYSOUT OR DUMMY FILE.  REMOVE THE 'CONCATENATION'  TS05203\n***          FOOTNOTE PROCESSING.                               TS05203\n***                                                             TS05203\n***      C.  SHOW EXPANSION OF TEXT UNITS FOR DYNAMIC           TS05203\n***          ALLOCATION.                                        TS05203\n***                                                             TS05203\n***      D.  VARIOUS PAGE EJECTS, ETC., TO MAKE THE LISTING     TS05203\n***          EASIER TO READ.                                    TS05203\n***                                                             TS05203\n***  3.  ADD MACROS EXNAM AND EXTBL TO MAKE IT EASIER TO DEFINE TS05204\n***      INSTALLATION-EXCEPTED MASKS.                           TS05204\n***                                                             TS05204\n***                                                                ***\n**********************************************************************\n         EJECT                                                  TS05204\n*************************************************************** TS05204\n***                                                         *** TS05204\n***   LOCAL MACROS                                          *** TS05204\n***                                                         *** TS05204\n*************************************************************** TS05204\n*                                                               TS05204\n         MACRO                                                  TS05204\n         EXNAM  &MASK                                           TS05204\n.************************************************************** TS05204\n.** CREATE NAME TABLE FOR INST.-EXCEPTED NAMES OR MASKS     *** TS05204\n.************************************************************** TS05204\n         GBLA  &EXNUM                                           TS05204\n         LCLA  &EXLEN                                           TS05204\n         AIF   (&EXNUM NE 0).EXNAME1                            TS05204\nEXNAMES  DS    0D                                               TS05204\n.EXNAME1 ANOP                                                   TS05204\n&EXLEN   SETA  K'&MASK                                          TS05204\n         DC    CL8'&MASK',H'&EXLEN'                             TS05204\n&EXNUM   SETA  &EXNUM+1                                         TS05204\n         MEND                                                   TS05204\n*                                                               TS05204\n         SPACE 4                                                TS05204\n*                                                               TS05204\n         MACRO                                                  TS05204\n         EXTBL ,                                                TS05204\n.************************************************************** TS05204\n.**   CREATE PSEUDO-PDE'S FOR INST.-EXCEPTED NAMES OR MASKS *** TS05204\n.************************************************************** TS05204\n         GBLA  &EXNUM                                           TS05204\nEXNUMNAM EQU   &EXNUM                                           TS05204\nEXNAMTBL DS    0D                       TBL FOR EXCEPTED NAMES  TS05204\n.EXNTBL1 DS    A,H,XL2,A                  PSEUDO-PDE            TS05204\n&EXNUM   SETA  &EXNUM-1                                         TS05204\n         AIF   (&EXNUM GT 0).EXNTBL1                            TS05204\n         MEND                                                   TS05204\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PROLOG                                                       ***\n***                                                                ***\n**********************************************************************\n         PRINT NOGEN\nFREEALL  LINKSAVE  BASE=12,GETMAIN=YES,GETAMT=WORKDLEN\n         USING WORKD,R13\n         USING PARMPDL,R9               ADDRESSABILITY OF PRM DESC LST\n         EQ$R\n*\n         ST    R1,CPPLPTR               SAVE THE CPPL POINTER\n         XC    COMPCODE,COMPCODE        CLEAR THE COMPLETION CODE\n         XC    RETCDE,RETCDE            CLEAR THE INTERNAL RETURN CODE\n         MVI   SWITCH1,B'00000000'      INITIALIZE SWITCHES\n         B     MAINLINE                 BRANCH TO MAINLINE ROUTINE\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAINLINE ROUTINE                                             ***\n***                                                                ***\n**********************************************************************\n*\nMAINLINE MVC   TUI(TUILEN),TUA          INITIALIZE INFO RETRIEVAL BLKS\n         GTEDASET TUI,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n         MVC   TUU(TUULEN),TUB          INITIALIZE UNALLOCATION BLOCKS\n         GTEDASET TUU,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n*\n         BAL   R10,PPLSETUP             SET UP PARSE PARM LIST\n         BAL   R10,PARSE                PARSE THE INPUT PARAMETERS\n*\n         BAL   R10,IEXCEPTS             INITIALIZE NAME EXCEPTION TABLE\n*\n         CLC   KSYSMASK,H1              IF 'SYSMASKS' OPERAND IS IN USE\n         BNE   MINFOINI                 THEN\n         BAL   R10,SYSMASKS               PRINT LIST OF DEFAULT MASKS\n         B     END00                      AND GO TO ENDING\n*\nMINFOINI XC    RELNO,RELNO              INITIALIZE RELATIVE ALLOC NBR.\nMINFO    BAL   R10,INFO                 GET INFO ABOUT NEXT DATASET\n         L     R4,RETCDE                RETURN CODE TO R4\n         B     *+4(R4)                    GO TO:\n         B     MINFO                        00 - PROCESS NEXT DSN\n         B     END00                        04 - END OF DATASETS\n         B     MINFOINI                     08 - START OVER FROM TOP\n         B     END0C                        0C - ERROR RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   ENDING                                                       ***\n***                                                                ***\n**********************************************************************\nEND00    BAL   R10,FOOTNOTE             WRITE FOOTNOTE\n         XR    R15,R15                  R15 = 00\n         ST    R15,COMPCODE             SAVE IT\n         B     ENDING                   BRANCH TO ENDING\n*\nEND0C    BAL   R10,FOOTNOTE             WRITE FOOTNOTE\n         LA    R15,X'0C'                R15 = 0C\n         ST    R15,COMPCODE             SAVE IT\n         B     ENDING                   BRANCH TO ENDING\n*\nENDING   LA       R4,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R4,0(0,R4)              R4 POINTS TO PDL\n         IKJRLSA  (R4)                    FREE STORAGE OF PDL\n         LINKBACK RCADDR=COMPCODE\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST                             ***\n***                                                                ***\n**********************************************************************\nPPLSETUP ST    R10,PPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)\n         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)\n         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)\n         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)\n         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)\n         DROP  R4\n*\nPPEND    L     R10,PPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    R10,PAR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     R10,PAR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   INITIALIZE LIST OF BLOCKS RELATING TO EXCEPTION DDNAMES.     ***\n***   THESE BLOCKS LOOK LIKE PDE'S, AND IF THE 'EXCEPT' KEYWORD    ***\n***   IS USED, WILL BE CHAINED AHEAD OF THE IKJIDENT PDE'S WHICH   ***\n***   REFER TO DDNAMES ENTERED AS SUBPARAMETERS.                   ***\n***                                                                ***\n**********************************************************************\nIEXCEPTS ST    R10,IER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,EXNAMES               R4 POINTS TO LIST OF LEN+NAMES\n         LA    R5,EXNAMTBL              R5 IS ADDRESS OF PSEUDO-PDE'S\n         LA    R2,EXNUMNAM              R2 HAS NUMBER OF NAMES\nIELOOP   ST    R4,0(0,R5)               ADDR OF NAME TO EXNAMTBL ENTRY\n         MVC   4(2,R5),8(R4)            LGTH OF NAME TO EXNAMTBL ENTRY\n         MVC   6(2,R5),X8000            FLAGS+RESERVED TO EXNAMTBL NTRY\n         LA    R4,10(0,R4)              R4 POINTS TO NEXT NAME+LENGTH\n         LR    R3,R5                    R3 POINTS TO CURR EXNAMTBL NTRY\n         LA    R5,12(0,R5)              R5 POINTS TO NEXT EXNAMTBL NTRY\n         ST    R5,8(0,R3)               ADDR OF NEXT NTRY TO CURR NTRY\n         BCT   R2,IELOOP                IF NOT DONE, LOOP BACK UP\n*\n         MVC   8(4,R3),FF000000         MARK END OF LIST FOR NOW\n*\n         CLC   KEXCEPT,H1               IF 'EXCEPT' KEYWORD NOT IN USE\n         BNE   IEEND                      BRANCH TO ENDING\n*\n         LA    R4,SBEXMASK              R4 HAS ADDR OF MASK PDE CHAIN\n         ST    R4,8(0,R3)               CHAIN TO EXNAMTBL\n*\nIEEND    L     R10,IER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GIVE A LISTING OF THE DEFAULT DDNAME MASKS IN TABLE EXNAMES.  ***\n***                                                                ***\n**********************************************************************\nSYSMASKS ST    R10,SYR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TPUT  SYSM1,72                 WRITE HEADING\n         TPUT  BLANKS,72                WRITE BLANK LINE\n*\n         LA    R4,EXNUMNAM(0,0)         R4 HAS NUMBER OF NAMES\n         LA    R5,EXNAMES-10            R5 POINTS TO -1 ENTRY\nSYLOOP   LA    R5,10(0,R5)              INCR POINTER\n         MVC   RPTLINE(80),BLANKS       CLEAR REPORT LINE\n         MVC   RPTLINE+2(8),0(R5)       MOVE DDNAME TO REPORT LINE\n         TPUT  RPTLINE,72               WRITE REPORT LINE\n         BCT   R4,SYLOOP                IF NAMES REMAIN, LOOP BACK UP\n*\n         TPUT  BLANKS,72                TRAILING BLANK LINE\n*\nSYEND    L     R10,SYR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***      SVC99 INFO RETRIEVAL, THEN PERFORM DDNAME UNALLOCATION,   ***\n***      IF APPROPRIATE.                                           ***\n***                                                                ***\n**********************************************************************\nINFO     ST    R10,INR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LH    R4,RELNO                   GET LAST ALLOC NUMBER\n         LA    R4,1(0,R4)                   INCR BY 1\n         MVC   TUITU(TUIRBP-TUITU),TUATU  INITIALIZE INFO TEXT UNITS\n         STCM  R4,3,TUIRELNO              ALLOC NUMBER TO TEXT UNIT\n         STH   R4,RELNO                   ALSO SAVE IT IN STORAGE\n         GTEDAALC TUI,VERB=IN,ERRMSG=YES  GET INFO ABOUT ALLOCATION\n         CLC   TUIS99RC(4),F0             IF RETURN NOT ZERO\n         BNE   INRET0C                      ABORT INFORMATION LOOP\n*\nINCKUSE  TM    TUIRTATT,X'40'           IF IN USE\n         BO    INNEXT                     SKIP THIS DSN\n*                                                               TS05203\nINSWINIT MVI   TYPESW,X'00'             INITIALIZE SWITCHES     TS05203\n*                                                               TS05203\nINCKDUMY TM    TUIRTTYP,X'80'           IF DUMMY DATASET        TS05203\n         BNO   INCKTERM                 THEN                    TS05203\n         MVI   TYPESW,X'10'               SET TYPE SWITCH       TS05203\n         CLC   KDUMMY(2),H2               IF NODUMMY OPERAND    TS05203\n         BE    INNEXT                       SKIP THIS DSN       TS05203\n         B     INCKDYNA                   ELSE CONTINUE CHECKS  TS05203\n*                                       ELSE                    TS05203\nINCKTERM TM    TUIRTTYP,X'40'           IF TERMINAL DATASET     TS05203\n         BNO   INCKSYSO                 THEN                    TS05203\n         MVI   TYPESW,X'18'               SET TYPE SWITCH       TS05203\n         CLC   KTERM(2),H2                IF NOTERM OPERAND     TS05203\n         BE    INNEXT                       SKIP THIS DSN       TS05203\n         B     INCKDYNA                   ELSE CONTINUE CHECKS  TS05203\n*                                       ELSE                    TS05203\nINCKSYSO TM    TUIRTTYP,X'10'           IF SYSOUT DATASET       TS05203\n         BNO   INCKSCR                  THEN                    TS05203\n         MVI   TYPESW,X'28'               SET TYPE SWITCH       TS05203\n         CLC   KSYSOUT(2),H2              IF NOSYSOUT OPERAND   TS05203\n         BE    INNEXT                       SKIP THIS DSN       TS05203\n         B     INCKDYNA                   ELSE CONTINUE CHECKS  TS05203\n*                                       ELSE                    TS05203\nINCKSCR  XR    R4,R4                    CLEAR R4 FOR INSERT     TS05203\n         ICM   R4,3,TUIINDSN-2          R4 HAS LENGTH OF DSN    TS05203\n         CH    R4,H17                   IF LENGTH LT 17         TS05203\n         BL    INCKDYNA                   BYPASS THIS CHECK     TS05203\n         MVC   DSN17(17),TUIINDSN       MOVE FIRST 17 CHARACTRS TS05203\n         NC    DSN17(17),DSNNCM         KILL NUMERIC BITS       TS05203\n         CLC   DSN17(17),DSNTMASK       IF=C'SYS00000.T000000.' TS05203\n         BNE   INCKDYNA                 THEN                    TS05203\n         MVI   TYPESW,X'20'               SET TYPE SWITCH       TS05203\n         CLC   KTEMP(2),H2                IF NOTEMP OPERAND     TS05203\n         BE    INNEXT                       SKIP THIS DSN       TS05203\n         B     INCKDYNA                   ELSE CONTINUE CHECKS  TS05203\n*\n         EJECT                                                  TS05203\nINCKDYNA TM    TUIRTATT,X'08'           IF NOT DYNAMICALLY ALLOCATED\n         BO    INCKDDN                  THEN\n         CLC   KSCOPE(2),H1               IF 'DYNAM' KEYWORD IN USE\n         BE    INNEXT                       SKIP THIS DSN\n*\nINCKDDN  BAL   R10,EXCEPT               CHECK DDNAME FOR EXCEPTION\n         CLC   RETCDE,F0                IF RETURN NOT 00\n         BNE   INNEXT                     SKIP THIS DSN\n*\nINCKCAT  TM    TUIRTATT,X'80'           IF A MEMBER OF A CONCATENATION\n         BNO   INUNALC                  THEN\n         CLC   KCONCAT,H1                 IF 'CONCAT' KEYWORD IN USE\n         BNE   INCKCAT1                   THEN\n         MVI   TYPESW,X'08'                 SET TYPE SWITCH     TS05203\n         BAL   R10,DECONCAT                 DECONCATENATE\n         CLC   RETCDE,F0                      IF RC NOT 00\n         BNE   INNEXT                         THEN SKIP THIS DSN\n         B     INRET08                      RETURN, START CHAIN OVER\nINCKCAT1 B     INNEXT                   ELSE SKIP THIS DSN\n*\nINUNALC  MVC   TUUTU(TUURBP-TUUTU),TUBTU  INIT TEXT UNITS FROM PROTO\n         MVC   TUUDDNAM-2(10),TUIINDDN-2  INIT DDNAME FROM INFO\n         GTEDAALC TUU,VERB=UN,ERRMSG=YES  UNALLOCATE THE DDNAME\n*\n         CLC   TUUS99RC(4),F0           IF RETURN NOT ZERO\n         BNE   INNEXT                     GO TO PROCESS NEXT DSN\n         BAL   R10,REPORT               ELSE PERFORM REPORT\n         LH    R4,RELNO                   LOAD COUNTER TO R4\n         BCTR  R4,0                       DECR BY 1\n         STH   R4,RELNO                   SAVE IT AGAIN\n*\nINNEXT   TM    TUIRTLST,X'80'           IF LAST ENTRY\n         BO    INRET04                    BRANCH TO RETURN=04\n         B     INRET00                  ELSE BRANCH TO RETURN=00\n*\nINRET00  LA    R15,X'00'                INDICATE LOOK FOR NEXT DSN\n         ST    R15,RETCDE               SAVE IT INTO RETCDE\n         B     INEND                    GO TO ENDING\n*\nINRET04  LA    R15,X'04'                INDICATE LAST ENTRY\n         ST    R15,RETCDE               SAVE IT INTO RETCDE\n         B     INEND                    GO TO ENDING\n*\nINRET08  LA    R15,X'08'                INDICATE DECONCAT AND RESTART\n         ST    R15,RETCDE               SAVE IT INTO RETCDE\n         B     INEND                    GO TO ENDING\n*\nINRET0C  LA    R15,X'0C'                INDICATE INFORMATION ERROR\n         ST    R15,RETCDE               SAVE IT INTO RETCDE\n         B     INEND                    GO TO ENDING\n*\nINEND    L     R10,INR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    CHECK FOR EXCEPTIONS TO DDNAMES TO BE FREED                 ***\n***                                                                ***\n**********************************************************************\nEXCEPT   ST    R10,EXR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XR    R4,R4                    CLEAR R4 FOR INSERT\n         ICM   R4,3,TUIINDDN-2          R4 HAS LEN OF DDNAME\n         LTR   R4,R4                    IF LENGTH ZERO\n         BZ    EXRET04                    RETURN = 04\n         BCTR  R4,0                     R4 MINUS 1 FOR EXEC\n         MVC   EXDDN(8),BLANKS          CLEAR THE WORK FIELD\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   EXDDN(0),TUIINDDN          MOVE DDNAME TO WORK\n         EX    R4,*-6                   EXECUTE THE MOVE\n*\n         LA    R3,EXNAMTBL              ADDRESS OF PSEUDO-PDE'S\n         USING EXPDE,R3                 ADDRESSABILITY\n         B     EXLOOP1A                 BRANCH INTO LOOP\n*\nEXLOOP1  CLC   EXNEXT,FF000000          IF END OF CHAIN\n         BE    EXEND                      RETURN\n         CLC   EXNEXT,F0                ELSE IF NO SUBFIELD\n         BE    EXEND                      RETURN\n         L     R3,EXNEXT                POINT TO NEXT PSEUDO-PDE\n*\nEXLOOP1A L     R4,EXADDR                R4 POINTS TO DDN MASK\n         BCTR  R4,0                       MINUS 1 FOR LOOP\n         LH    R5,EXLEN                 R5 IS LENGTH OF MASK\n         LA    R6,EXDDN-1               R6 POINTS TO WORK DDN MINUS 1\n*\nEXLOOP2  LA    R6,1(0,R6)               POINT TO NEXT WORK DDN CHAR\n         LA    R4,1(0,R4)               POINT TO NEXT MASK CHAR\n         CLI   0(R4),C'-'               IF MASK CHAR IS HYPHEN\n         BE    EXMATCH                    TREAT AS MATCH\n         CLI   0(R6),X'40'              IF WORK CHAR BLANK\n         BE    EXNOMTCH                   LEAVE THE LOOP\n         CLI   0(R4),C'*'               IF MASK CHAR IS ASTERISK,\n         BE    EXLOOP2N                   STAY IN LOOP\n         CLC   0(1,R4),0(R6)            IF CHARS DON'T MATCH\n         BNE   EXNOMTCH                   LEAVE THE LOOP\nEXLOOP2N BCT   R5,EXLOOP2               MATCH SO FAR, LOOP BACK UP\n*                       ***FALL OUT OF LOOP ***\n         CLC   TUIINDDN-2(2),EXLEN      IF DDNAME LEN GT MASK LEN\n         BH    EXNOMTCH                   NO MATCH AT END OF LOOP\nEXMATCH  B     EXRET04                  ALL CHARS MATCH, RETURN = 04\n*\nEXNOMTCH B     EXLOOP1                  MISMATCH, STAY IN OUTER LOOP\n*\nEXRET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     EXEND                    BRANCH TO ENDING\n*\nEXEND    L     R10,EXR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    UNALLOCATE A CONCATENATION.  IF UNALLOCATION IS SUCCESSFUL, ***\n***    THE FILE RELATIVE NUMBERS MAY CHANGE UNPREDICTABLY.         ***\n***    THEREFORE, THE RETURN CODE OF 4 WILL CAUSE AN EVENTUAL      ***\n***    RETURN CODE TO THE MAINLINE PROCEDURE WHICH WILL INDICATE   ***\n***    THAT THE RELATIVE NUMBER OF THE FILES SHOULD BE RESET TO    ***\n***    ONE, AND THE PROCESS OF OBTAINING INFORMATION SHOULD BE     ***\n***    BEGUN AGAIN FROM THE TOP.                                   ***\n***                                                                ***\n**********************************************************************\nDECONCAT ST    R10,DER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   TUUTU(TUURBP-TUUTU),TUBTU  INIT TEXT UNITS FROM PROTO\n         MVC   TUUDDNAM-2(10),TUIINDDN-2  MOVE DDNAME INTO CNTRL BLOCK\n         GTEDAALC TUU,VERB=UN,ERRMSG=YES  DECONCATENATE\n         CLC   TUUS99RC(4),F0             IF RETURN CODE NOT ZERO\n         BNE   DERET04                      RETURN = 04\n*\n         OI    SWITCH1,X'40'            INDICATE CONCATENATION FREED\n         BAL   R10,REPORT               WRITE A MESSAGE\n         B     DEEND                    RETURN = 00\n*\nDERET04  LA    R15,X'04'                RETURN CODE TO R15\n         ST    R15,RETCDE               SAVE IT\n         B     DEEND                    BRANCH TO ENDING\n*\nDEEND    L     R10,DER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    CREATE ONE LINE OF A LISTING OF FREED DDNAMES/DSNAMES       ***\n***                                                                ***\n**********************************************************************\nREPORT   ST    R10,RER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         CLC   KLIST,H1                 IF 'LIST' OPERAND NOT IN USE\n         BNE   REEND                      BYPASS THIS WHOLE PROCEDURE\n*\n         TM    SWITCH1,X'80'            IF HEADING ALREADY PRINTED\n         BO    REBODY                     SKIP WRITING HEADING\n         TPUT  BLANKS,1                 WRITE BLANK LINE\n         LA    R4,HDG1                  POINT TO HEADING\n         LA    R5,L'HDG1                LENGTH OF HEADING\n         TPUT  (R4),(R5)                  WRITE THE HEADING\n         TPUT  BLANKS,1                 WRITE BLANK LINE\n         OI    SWITCH1,X'80'            SET HEADING-PRINTED SWITCH\n*\nREBODY   MVC   RPTLINE(80),BLANKS       INITIALIZE REPORT LINE\n         XR    R4,R4                    CLEAR R4 FOR INSERT\n         ICM   R4,3,TUIINDDN-2          LENGTH OF DDNAME TO R4\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   RPTLINE+2(0),TUIINDDN      MOVE DDNAME TO REPORT\n         EX    R4,*-6                   PERFORM THE MOVE\n*                                                               TS05203\n         XR    R4,R4                    CLEAR R4 FOR INSERT     TS05203\n         IC    R4,TYPESW                OFFSET INTO TYPETABL    TS05203\n         LA    R4,TYPETABL(R4)          ADDR OF TYPE LITERAL    TS05203\n         MVC   RPTLINE+12(8),0(R4)      MOVE TYPE TO REPORT     TS05203\n*\n         XR    R4,R4                    CLEAR R4 FOR INSERT\n         ICM   R4,3,TUIINDSN-2          LENGTH OF DSNAME TO R4\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   RPTLINE+22(0),TUIINDSN     MOVE DSNAME TO REPORT TS05203\n         EX    R4,*-6                   PERFORM THE MOVE\n*\n*        TM    SWITCH1,X'40'     IF A CONCATENATION WAS FREED   TS05203\n*        BNO   *+12              THEN                           TS05203\n*        MVI   RPTLINE,C'*'        PUT AN '*' ON THE PRINT LINE TS05203\n*        OI    SWITCH1,X'20'       REMEMBER FOOTNOTE            TS05203\n*        NI    SWITCH1,X'BF'       TURN OFF CONCAT-FREED SWITCH TS05203\n*\n         LA    R4,RPTLINE               POINT TO REPORT LINE\n         LA    R5,80(0,0)               LENGTH OF LINE\n         TPUT  (R4),(R5)                WRITE THE REPORT LINE\n*\n         B     REEND\n*\nREEND    L     R10,RER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   WRITE THE FOOTNOTE                                           ***\n***                                                                ***\n**********************************************************************\nFOOTNOTE ST    R10,FOR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         CLC   KLIST,H1                 IF 'LIST' OPERAND NOT IN USE\n         BNE   FOEND                      BYPASS THIS WHOLE PROCEDURE\n*\n         TM    SWITCH1,X'80'            IF HEADING NOT WRITTEN\n         BNO   FOEND                      SKIP ALL\n         TM    SWITCH1,X'20'            IF A CONCATENATION NOT FREED\n         BNO   FOBLANK                    SKIP FOOTNOTE #1 AND #2\n*        TPUT  FOOT1,72                 WRITE FOOTNOTE #1       TS05203\n*        TPUT  FOOT2,72                 WRITE FOOTNOTE #2       TS05203\n*\nFOBLANK  TPUT  BLANKS,72                POINT TO BLANK LINE\n*\nFOEND    L     R10,FOR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    DATA CONSTANTS                                              ***\n***                                                                ***\n**********************************************************************\nDATACNST DS    0D\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\nF0       DC    F'0'                     CONSTANT\nH1       DC    H'1'                     CONSTANT\nH2       DC    H'2'                     CONSTANT                TS05203\nH17      DC    H'17'                    CONSTANT                TS05203\nDSNNCM   DC    X'FFFFFFF0F0F0F0F0FFFFF0F0F0F0F0F0FF'            TS05203\n*                S Y S # # # # # . T # # # # # # .              TS05203\nDSNTMASK DC    CL17'SYS00000.T000000.'  FORMAT OF TEMP DSN (17) TS05203\nTYPETABL DS    0D                                               TS05203\n         DC    CL8'Dataset'             LITERAL                 TS05203\n         DC    CL8'Concat.'             LITERAL                 TS05203\n         DC    CL8'Dummy'               LITERAL                 TS05203\n         DC    CL8'Terminal'            LITERAL                 TS05203\n         DC    CL8'Temp.'               LITERAL                 TS05203\n         DC    CL8'Sysout'              LITERAL                 TS05203\n*                                                               TS05203\nBLANKS   DC    CL80' '                  LITERAL\nHDG1     DC    CL72'The following files have been freed:'\nSYSM1    DC    CL72'Installation defined masks in use are:'\n*   FOOT1    DC    CL72'_____________________________'          TS05203\n*   FOOT2    DC    CL72'* Indicates a concatenation'            TS05203\n*\n*                                                               TS05204\n         PUSH  PRINT                                            TS05204\n         PRINT GEN                                              TS05204\n*    +-----------------------------------------+                TS05204\n*    |                                         |\n*    |  SEE THE HELP DOCUMENT FOR INSTRUCTIONS |\n*    |  ON HOW TO CONSTRUCT THESE MASKS.       |\n*    |                                         |\n*    +-----------------------------------------+\n*                                                               TS05204\n         EXNAM  ISP-                    ISPF FILES              TS05204\n         EXNAM  SYSPROC                 TSO CLISTS              TS05204\n         EXNAM  SYSHELP                 TSO HELP                TS05204\n         EXNAM  SYSPRINT                UTILITY OUTPUT          TS05204\n         EXNAM  SYSIN                   UTILITY INPUT           TS05204\n         EXNAM  FT05F001                FORTRAN INPUT           TS05201\n         EXNAM  FT06F001                FORTRAN OUTPUT          TS05201\n         EXNAM  PANDD*                  PANVALET FILES          TS05204\n         POP    PRINT                                           TS05204\n*\n*\nFF000000 DC    XL4'FF000000'\nX8000    DC    XL2'8000'\n*                                       CHANGE MACRO, BELOW:    TS05203\nTUA      GTEDADAT  RELNO=X,RTLST=X,INDDN=X,INDSN=X,RTATT=X,            X\n               RTTYP=X                                          TS05203\nTUB      GTEDADAT  DDNAM=X,UNALC=X\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n***  SYNTAX:                                                       ***\n***                                                                ***\n***  FREEALL  EXCEPT(MASK1,MASK2,...)                           TS05203\n***           SYSMASKS                                          TS05203\n***           NOLIST | LIST                                     TS05203\n***           CONCATS | NOCONCATS                               TS05203\n***           DYNAM | ALL                                       TS05203\n***           TEMP | NOTEMP  (OR  SCRATCH | NOSCRATCH)          TS05203\n***           DUMMY | NODUMMY                                   TS05203\n***           SYSOUT | NOSYSOUT                                 TS05203\n***           TERM | NOTERM                                     TS05203\n***                                                                ***\n***  REQUIRED OPERANDS:  NONE                                   TS05203\n***   DEFAULT OPERANDS:  NOLIST,CONCATS,DYNAM,TEMP,             TS05203\n***                      DUMMY,SYSOUT,TERM                      TS05203\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\nKLIST    IKJKEYWD DEFAULT='NOLIST'\n         IKJNAME 'LIST'\n         IKJNAME 'NOLIST'\n*\nKSCOPE   IKJKEYWD DEFAULT='DYNAM'\n         IKJNAME 'DYNAM'\n         IKJNAME 'ALL'\n*\nKCONCAT  IKJKEYWD DEFAULT='CONCATS'\n         IKJNAME 'CONCATS'\n         IKJNAME 'NOCONCATS'\n*\nKEXCEPT  IKJKEYWD\n         IKJNAME 'EXCEPT',SUBFLD=SBEXCEPT\n*\nKSYSMASK IKJKEYWD\n         IKJNAME 'SYSMASKS'\n*                                                               TS05203\n*     ----  OPERANDS FOR COMPATABILITY WITH J/TIP ---           TS05203\nKTEMP    IKJKEYWD DEFAULT='TEMP'                                TS05203\n         IKJNAME 'TEMP',ALIAS=('SCRATCH')                       TS05203\n         IKJNAME 'NOTEMP',ALIAS=('NOSCRATCH')                   TS05203\n*                                                               TS05203\nKTERM    IKJKEYWD DEFAULT='TERM'                                TS05203\n         IKJNAME 'TERM'                                         TS05203\n         IKJNAME 'NOTERM'                                       TS05203\n*                                                               TS05203\nKDUMMY   IKJKEYWD DEFAULT='DUMMY'                               TS05203\n         IKJNAME 'DUMMY'                                        TS05203\n         IKJNAME 'NODUMMY'                                      TS05203\n*                                                               TS05203\nKSYSIN   IKJKEYWD DEFAULT='SYSIN'                               TS05203\n         IKJNAME 'SYSIN'                                        TS05203\n         IKJNAME 'NOSYSIN'                                      TS05203\n*                                                               TS05203\nKSYSOUT  IKJKEYWD DEFAULT='SYSOUT'                              TS05203\n         IKJNAME 'SYSOUT'                                       TS05203\n         IKJNAME 'NOSYSOUT'                                     TS05203\n*\nSBEXCEPT IKJSUBF\nSBEXMASK IKJIDENT 'FILE/DD NAME OR MASK',LIST,                         X\n               UPPERCASE,MAXLNTH=8,                                    X\n               FIRST=ANY,OTHER=ANY,                                    X\n               PROMPT='FILE/DD NAME OR MASK',                          X\n               HELP=('1-8 CHARACTER FILE NAME (DDNAME) OR MASK')\n*\n         IKJENDP\n         EJECT\n**********************************************************************\n***                                                                ***\n***    WORK DATA AREA, POINTED TO BY R13                           ***\n***                                                                ***\n**********************************************************************\nWORKD    DSECT\nMYSAVE   DS    18F                      MY SAVE AREA\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nCPPLPTR  DS    F                        POINTER TO CPPL\nRETCDE   DS    F                        INTERNAL RETURN CODE\nINR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nEXR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nIER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nSYR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nDER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nFOR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPAR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nRER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nRELNO    DS    H                        RELATIVE NUMBER OF ALLOCATION\nRPTLINE  DS    CL80                     REPORT LINE\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\nDSN17    DS    CL17                     WORK AREA FOR TEMP DSN  TS05203\nSWITCH1  DS    B'00000000'              SWITCHES\n*                1.......                X'80' - HEADING LINE PRINTED\n*                .1......                X'40' - CONCATENATION IS FREED\n*                ..1.....                X'20' - CONCAT WAS FREED ONCE\n*                ...11111                UNUSED\nTYPESW   DS    XL1                      INDICATE FILE TYPE      TS05203\n*                                         X'00' - NOT SPECIAL   TS05203\n*                                         X'08' - CONCATENATION TS05203\n*                                         X'10' - DUMMY FILE    TS05203\n*                                         X'18' - TERMINAL FILE TS05203\n*                                         X'20' - TEMP FILE     TS05203\n*                                         X'28' - SYSOUT FILE   TS05203\nEXDDN    DS    CL8                      WORK AREA FOR DDNAME\n*\n*\n         PUSH  PRINT                                            TS05204\n         PRINT GEN                                              TS05204\n*    +-----------------------------------------+                TS05204\n*    |  TABLE OF PSEUDO-PDE'S FOR INSTALLATION |                TS05204\n*    |  EXCEPTED DDNAMES OR MASKS.             |                TS05204\n*    +-----------------------------------------+                TS05204\n         EXTBL                                                  TS05204\n         POP   PRINT                                            TS05204\n*                                                               TS05204\n*                                                               TS05204\n*                                                               TS05204\n*                                                               TS05204\n*                                                               TS05204\n*\n         PUSH  PRINT                                            TS05203\n         PRINT GEN                                              TS05203\n         EJECT                                                  TS05203\n*                                       CHANGE MACRO, BELOW:    TS05203\nTUI      GTEDADAT  MAP=ONLY,RELNO=X,RTLST=X,INDDN=X,INDSN=X,RTATT=X,   X\n               RTTYP=X                                          TS05203\n         EJECT                                                  TS05203\nTUU      GTEDADAT  MAP=ONLY,DDNAM=X,UNALC=X\n         POP   PRINT                                            TS05203\n*\n         DS    0D                       ALIGN FOR GETMAIN\nWORKDLEN EQU   *-WORKD                  LENGTH OF AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***    MAPPING DSECTS                                              ***\n***                                                                ***\n**********************************************************************\n         PRINT NOGEN\n         IEFZB4D0\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n*\nEXPDE    DSECT                          PDE FOR LIST OF DDNAME MASKS\nEXADDR   DS    F                          ADDRESS OF MASK\nEXLEN    DS    H                          LENGTH OF MASK\nEXFLAGS  DS    BL1                        FLAGS X'80'\n         DS    XL1                        NOT USED X'00'\nEXNEXT   DS    F                          ADDR OF NEXT PDE\n*\n         CVT   DSECT=YES              , CVTMAP FOR IKJPARS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDAALC": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00g\\x00g\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 103, "newlines": 103, "modlines": 0, "user": "HOFFMAN"}, "text": "         MACRO\n&LABEL   GTEDAALC  &NM,&VERB=AL,&ERRMSG=YES\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   PERFORM DYNAMIC ALLOCATION USING A DATA AREA CREATED         ***\n***   BY MACRO GTEDADAT, AND POINTERS/DATA SET BY MACRO GTEDASET.  ***\n**********************************************************************\n*\n**********************************************************************\n***   SET VERB CODE INTO S99RB.                                    ***\n***   MAPPING MACRO IEFZB4D0 MUST APPEAR IN THE SOURCE.            ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB\n.*\n.VBAL    AIF   ('&VERB' NE 'AL').VBUN\n         MVI   (S99VERB-S99RB)(1),S99VRBAL   SET VERB, DSN ALLOC\n         AGO   .VBEND\n.VBUN    AIF   ('&VERB' NE 'UN').VBCC\n         MVI   (S99VERB-S99RB)(1),S99VRBUN   SET VERB, DSN UNALLOC\n         AGO   .VBEND\n.VBCC    AIF   ('&VERB' NE 'CC').VBDC\n         MVI   (S99VERB-S99RB)(1),S99VRBCC   SET VERB, CONCATENATE\n         AGO   .VBEND\n.VBDC    AIF   ('&VERB' NE 'DC').VBRI\n         MVI   (S99VERB-S99RB)(1),S99VRBDC   SET VERB, DECONCATENATE\n         AGO   .VBEND\n.VBRI    AIF   ('&VERB' NE 'RI').VBDN\n         MVI   (S99VERB-S99RB)(1),S99VRBRI   SET VERB, REMOVE IN-USE\n         AGO   .VBEND\n.VBDN    AIF   ('&VERB' NE 'DN').VBIN\n         MVI   (S99VERB-S99RB)(1),S99VRBDN   SET VERB, DDN ALLOC\n         AGO   .VBEND\n.VBIN    AIF   ('&VERB' NE 'IN').VBEND\n         MVI   (S99VERB-S99RB)(1),S99VRBIN   SET VERB, REQUEST INFO\n         AGO   .VBEND\n.VBEND   ANOP\n.*\n*\n**********************************************************************\n***    DO DYNAMIC ALLOCATION                                       ***\n**********************************************************************\n*\n         LA    1,&NM.RBP                ADDRESS OF PTR TO SVC-99 RB\n         SVC   99                       DYNALLOC\n         ST    15,&NM.S99RC             SAVE RETURN CODE FROM SVC-99\n.*\n.*********************************************************************\n.**                                                                ***\n.**   IF &ERRMSG=NO, DO NOT EVER GENERATE CODE FOR IKJEFF18        ***\n.**                                                                ***\n.*********************************************************************\n.*\n         AIF   ('&ERRMSG' EQ 'NO').NOPR\n.*\n*\n**********************************************************************\n***    IF R/C FROM DYNAMIC ALLOCATION NOT ZERO,                    ***\n***    EXECUTE THE IKJEFF18 (DAIRFAIL) PROGRAM TO PRODUCE          ***\n***    ERROR MESSAGES.                                             ***\n**********************************************************************\n*\n         CNOP  2,4                      ALIGN FOR BRANCH INSTRUCTION\n         LTR   15,15                    IF RETURN CODE IS GOOD\n         BZ    EXZ&SYSNDX                 BRANCH TO END OF ROUTINE\n         BAL   1,EXA&SYSNDX  BRANCH AROUND LIST\n*\n**********************************************************************\n***    EXCEPTIONS, DON'T USE IKJEFF18 FOR THESE VERB/ERROR COMBOS  ***\n***                                                                ***\n         DC    H'1'          NUMBER OF MEMBERS IN THIS LIST\n         DC    X'02,0438'    VERB 02 ERR 0438 DDNAME NOT FOUND\n***                                                                ***\n**********************************************************************\n*\nEXA&SYSNDX LA    2,2(0,1)                    R2 IS POINTER TO COMBOS\n           LH    1,0(0,1)                    R1 IS COUNT OF COMBOS\n           LA    15,&NM.RB                   R15 IS BASE OF RB\n*\n           CLC   (S99VERB-S99RB)(1,15),0(2)  IF NO MATCH ON VERB\n           BNE   *+14                          BRANCH TO END OF LOOP\n           CLC   (S99ERROR-S99RB)(2,15),1(2) ELSE IF ERRCDE MATCHES\n           BE    EXZ&SYSNDX                    BRANCH TO ENDING\n           LA    2,6(0,2)                    POINT TO NEXT ENTRY\n           BCT   1,*-24                      LOOP BACK UP TIL EOL\n*\n         LA    1,&NM.DFPRM              POINT TO IKJEFF18 PARM BLOCK\n         CNOP  0,4                      ALIGN FOR FOLLOWING BAL\n         BAL   15,*+20                  LOAD CONST ADDR AND BRANCH\n         DC    A(*+8)                   ADDR OF LINK PARM LIST\n         DC    A(0)                     ADDR OF DCB (NONE)\n         DC    CL8'IKJEFF18'            EP NAME\n         SVC   6                        LINK\n*\n.NOPR    ANOP\nEXZ&SYSNDX NOPR  0                        END POINT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDADAT": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x04u\\x04u\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 1141, "newlines": 1141, "modlines": 0, "user": "HOFFMAN"}, "text": "         MACRO\n&NM      GTEDADAT  &MAP=,&DDNAM=,&DSNAM=,&MEMBR=,&STATS=,              X\n               &NDISP=,&CDISP=,                                        X\n               &TRK=,&CYL=,&BLKLN=,&PRIME=,&SECND=,&DIR=,&RLSE=,       X\n               &SPFRM=,&ROUND=,&VLSER=,&PRIVT=,&VLSEQ=,&VLCNT=,        X\n               &VLRDS=,&UNIT=,&UNCNT=,&PARAL=,&SYSOU=,&SPGNM=,&SFMNO=, X\n               &OUTLM=,&CLOSE=,&COPYS=,&LABEL=,&DSSEQ=,&PASPR=,        X\n               &INOUT=,&EXPDT=,&RETPD=,&DUMMY=,&FCBIM=,&FCBAV=,        X\n               &QNAME=,&TERM=,&UCS=,&UFOLD=,&UVRFY=,&DCBDS=,&DCBDD=,   X\n               &SUSER=,&SHOLD=,&MSVGP=,&SSNM=,&PROT=,&BFALN=,&BFTEK=,  X\n               &BLKSZ=,&BUFIN=,&BUFL=,&BUFMX=,&BUFNO=,&BUFOF=,&BUFOU=, X\n               &BUFRQ=,&BUFSZ=,&CODE=,&CPRI=,&DEN=,&DSORG=,&EROPT=,    X\n               &GNCP=,&INTVL=,&KYLEN=,&LIMCT=,&LRECL=,&MODE=,&NCP=,    X\n               &OPTCD=,&PCIR=,&PCIS=,&PRTSP=,&RECFM=,&RSRVF=,&RSRVS=,  X\n               &SOWA=,&STACK=,&THRSH=,&TRTCH=,&IPLTX=,&DIAGN=,&FUNC=,  X\n               &FRID=,&PASSW=,&PERMA=,&CNVRT=,                         X\n               &RTDDN=,&RTDSN=,&RTORG=,       <== FOR DSN ALLOCATION   X\n               &INDDN=,&INDSN=,&INORG=,       <== FOR INFO RETRIEVAL   X\n               &RTMEM=,&RTSTA=,&RTNDP=,&RTCDP=,&RTLIM=,&RTATT=,        X\n               &RTLST=,&RTTYP=,&RELNO=,                                X\n               &RTVOL=,&SSPRM=,&TCBAD=,&REMOV=,&UNALC=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n           LCLA  &TUPLEN\n&TUPLEN    SETA  0\n*\n&NM        DS  0D                       ALIGN FOR GETMAIN\n*\n**********************************************************************\n***        TEXT UNITS FOR SVC99                                    ***\n**********************************************************************\n*\n&NM.TU     DS  0F   TEXT UNITS FOR SVC99\n.*\n.*********************************************************************\n.***       DSNAME ALLOCATION TEXT UNITS - VERB CODE 01             ***\n.*********************************************************************\n.*\n.TUDDNAM   AIF ('&DDNAM' EQ '').TUDSNAM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDDNA#\n           DS  XL6\n&NM.DDNAM  DS  CL8                      DDNAME\n           AGO .TUDSNAM\n.TUDDNA#   ANOP\n           DC  X'0001,0001,0008'\n&NM.DDNAM  DC  CL8'&DDNAM'              DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSNAM   AIF ('&DSNAM' EQ '').TUMEMBR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSNA#\n           DS  XL6\n&NM.DSNAM  DS  CL44                     DATASET NAME\n           AGO .TUMEMBR\n.TUDSNA#   ANOP\n           DC  X'0002,0001,002C'        DATASET NAME (NEXT LINE)\n&NM.DSNAM  DC  CL44'&DSNAM'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMEMBR   AIF ('&MEMBR' EQ '').TUSTATS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUMEMB#\n&NM.MEMKY  DS  XL6\n&NM.MEMBR  DS  CL8                      MEMBER NAME\n           AGO .TUSTATS\n.TUMEMB#   ANOP\n&NM.MEMKY  DC  X'0003,0001,0008'\n&NM.MEMBR  DC  CL8'&MEMBR'              MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSTATS   AIF ('&STATS' EQ '').TUNDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSTAT#\n&NM.STATS  DS  XL7                      STATUS\n           AGO .TUNDISP\n.TUSTAT#   AIF ('&STATS' NE 'OLD').TUSTAT2\n&NM.STATS  DC  X'0004,0001,0001,01'     STATUS=OLD\n           AGO .TUNDISP\n.TUSTAT2   AIF ('&STATS' NE 'MOD').TUSTAT4\n&NM.STATS  DC  X'0004,0001,0001,02'     STATUS=MOD\n           AGO .TUNDISP\n.TUSTAT4   AIF ('&STATS' NE 'NEW').TUSTAT8\n&NM.STATS  DC  X'0004,0001,0001,04'     STATUS=NEW\n           AGO .TUNDISP\n.TUSTAT8   AIF ('&STATS' NE 'SHR').TUNDISP\n&NM.STATS  DC  X'0004,0001,0001,08'     STATUS=SHR\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNDISP   AIF ('&NDISP' EQ '').TUCDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNDIS#\n&NM.NDISP  DS  XL7                      NORMAL DISP\n           AGO .TUCDISP\n.TUNDIS#   AIF ('&NDISP' NE 'UNCATLG').TUNDIS2\n&NM.NDISP  DC  X'0005,0001,0001,01'     NORMAL DISP=UNCATLG\n           AGO .TUCDISP\n.TUNDIS2   AIF ('&NDISP' NE 'CATLG').TUNDIS4\n&NM.NDISP  DC  X'0005,0001,0001,02'     NORMAL DISP=CATLG\n           AGO .TUCDISP\n.TUNDIS4   AIF ('&NDISP' NE 'DELETE').TUNDIS8\n&NM.NDISP  DC  X'0005,0001,0001,04'     NORMAL DISP=DELETE\n           AGO .TUCDISP\n.TUNDIS8   AIF ('&NDISP' NE 'KEEP').TUCDISP\n&NM.NDISP  DC  X'0005,0001,0001,08'     NORMAL DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCDISP   AIF ('&CDISP' EQ '').TUTRK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCDIS#\n&NM.CDISP  DS  XL7                      COND DISP\n           AGO .TUTRK\n.TUCDIS#   AIF ('&CDISP' NE 'UNCATLG').TUCDIS2\n&NM.CDISP  DC  X'0006,0001,0001,01'     COND DISP=UNCATLG\n           AGO .TUTRK\n.TUCDIS2   AIF ('&CDISP' NE 'CATLG').TUCDIS4\n&NM.CDISP  DC  X'0006,0001,0001,02'     COND DISP=CATLG\n           AGO .TUTRK\n.TUCDIS4   AIF ('&CDISP' NE 'DELETE').TUCDIS8\n&NM.CDISP  DC  X'0006,0001,0001,04'     COND DISP=DELETE\n           AGO .TUTRK\n.TUCDIS8   AIF ('&CDISP' NE 'KEEP').TUTRK\n&NM.CDISP  DC  X'0006,0001,0001,08'     COND DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTRK     AIF ('&TRK' EQ '').TUCYL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTRKA\n&NM.TRK    DS  XL4                      TRK\n           AGO .TUCYL\n.TUTRKA    ANOP\n&NM.TRK    DC  X'0007,0000'             TRK\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCYL     AIF ('&CYL' EQ '').TUBLKLN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCYLA\n&NM.CYL    DS  XL4                      CYL\n           AGO .TUBLKLN\n.TUCYLA    ANOP\n&NM.CYL    DC  X'0008,0000'             CYL\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKLN   AIF ('&BLKLN' EQ '').TUPRIME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKL#\n           DS  XL6\n&NM.BLKLN  DS  AL3                      AVERAGE BLOCK LENGTH\n           AGO .TUPRIME\n.TUBLKL#   ANOP\n           DC  X'0009,0001,0003'\n&NM.BLKLN  DC  AL3(&BLKLN)              AVERAGE BLOCK LENGTH\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIME   AIF ('&PRIME' EQ '').TUSECND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIM#\n           DS  XL6\n&NM.PRIME  DS  AL3                      PRIMARY SPACE QUANTITY\n           AGO .TUSECND\n.TUPRIM#   ANOP\n           DC  X'000A,0001,0003'\n&NM.PRIME  DC  AL3(&PRIME)              PRIMARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSECND   AIF ('&SECND' EQ '').TUDIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSECN#\n           DS  XL6\n&NM.SECND  DS  AL3                      SECONDARY SPACE QUANTITY\n           AGO .TUDIR\n.TUSECN#   ANOP\n           DC  X'000B,0001,0003'\n&NM.SECND  DC  AL3(&SECND)              SECONDARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDIR     AIF ('&DIR' EQ '').TURLSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDIRA\n           DS  XL6\n&NM.DIR    DS  AL3                      NUMBER OF DIRECTORY BLOCKS\n           AGO .TURLSE\n.TUDIRA    ANOP\n           DC  X'000C,0001,0003'\n&NM.DIR    DC  AL3(&DIR)                NUMBER OF DIRECTORY BLOCKS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURLSE    AIF ('&RLSE' EQ '').TUSPFRM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURLSEA\n&NM.RLSE   DS  XL4                      RLSE\n           AGO .TUSPFRM\n.TURLSEA   ANOP\n&NM.RLSE   DC  X'000D,0000'             RLSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPFRM   AIF ('&SPFRM' EQ '').TUROUND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPFR#\n&NM.SPFRM  DS  XL7                      SPACE FORMAT\n           AGO .TUROUND\n.TUSPFR#   AIF ('&SPFRM' NE 'ALX').TUSPFR4\n&NM.SPFRM  DC  X'000E,0001,0001,02'     ALX\n           AGO .TUROUND\n.TUSPFR4   AIF ('&SPFRM' NE 'MXIG').TUSPFR8\n&NM.SPFRM  DC  X'000E,0001,0001,04'     MXIG\n           AGO .TUROUND\n.TUSPFR8   AIF ('&SPFRM' NE 'CONTIG').TUROUND\n&NM.SPFRM  DC  X'000E,0001,0001,08'     CONTIG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUROUND   AIF ('&ROUND' EQ '').TUVLSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUROUN#\n&NM.ROUND  DS  XL4                      ROUND\n           AGO .TUVLSER\n.TUROUN#   ANOP\n&NM.ROUND  DC  X'000F,0000'             ROUND\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSER   AIF ('&VLSER' EQ '').TUPRIVT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSE#\n           DS  XL6\n&NM.VLSER  DS  CL6                      VOLUME SERIAL NUMBER\n           AGO .TUPRIVT\n.TUVLSE#   ANOP\n           DC  X'0010,0001,0006'\n&NM.VLSER  DC  CL6'&VLSER'              VOLUME SERIAL NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIVT   AIF ('&PRIVT' EQ '').TUVLSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIV#\n&NM.PRIVT  DS  XL4                      PVT\n           AGO .TUVLSEQ\n.TUPRIV#   ANOP\n&NM.PRIVT  DC  X'0011,0000'             PVT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSEQ   AIF ('&VLSEQ' EQ '').TUVLCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSQ#\n           DS  XL6\n&NM.VLSEQ  DS  AL2                      VOLUME SEQUENCE NUMBER\n           AGO .TUVLCNT\n.TUVLSQ#   ANOP\n           DC  X'0012,0001,0002'\n&NM.VLSEQ  DC  AL2(&VLSEQ)              VOLUME SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLCNT   AIF ('&VLCNT' EQ '').TUVLRDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLCN#\n           DS  XL6\n&NM.VLCNT  DC  AL1                      VOLUME COUNT\n           AGO .TUVLRDS\n.TUVLCN#   ANOP\n           DC  X'0013,0001,0001'\n&NM.VLCNT  DC  AL1(&VLCNT)              VOLUME COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLRDS   AIF ('&VLRDS' EQ '').TUUNIT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLRD#\n           DS  XL6\n&NM.VLRDS  DS  CL44                     VOLUME REF TO THIS DSN\n           AGO .TUUNIT\n.TUVLRD#   ANOP\n           DC  X'0014,0001,002C'        VOLUME REF TO DSN (BELOW)\n&NM.VLRDS  DC  CL44'&VLRDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNIT    AIF ('&UNIT' EQ '').TUUNCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNITA\n           DS  XL6\n&NM.UNIT   DS  CL6                      UNIT\n           AGO .TUUNCNT\n.TUUNITA   ANOP\n           DC  X'0015,0001,0006'\n&NM.UNIT   DC  CL6'&UNIT'               UNIT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNCNT   AIF ('&UNCNT' EQ '').TUPARAL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNCN#\n           DS  XL6\n&NM.UNCNT  DS  AL1                      UNIT COUNT\n           AGO .TUPARAL\n.TUUNCN#   ANOP\n           DC  X'0016,0001,0001'\n&NM.UNCNT  DC  AL1(&UNCNT)              UNIT COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPARAL   AIF ('&PARAL' EQ '').TUSYSOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPARA#\n&NM.PARAL  DS  XL4                      PARALLEL MOUNT\n           AGO .TUSYSOU\n.TUPARA#   ANOP\n&NM.PARAL  DC  X'0017,0000'             PARALLEL MOUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSYSOU   AIF ('&SYSOU' EQ '').TUSPGNM\n           AIF ('&SYSOU' NE '*').TUSYSO2\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYSO#\n&NM.SYSOU  DS  XL4                      SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO#   ANOP\n&NM.SYSOU  DC  X'0018,0000'             SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO2   ANOP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYS##\n           DS  XL6\n&NM.SYSOU  DS  CL1                      SYSOUT CLASS\n           AGO .TUSPGNM\n.TUSYS##   ANOP\n           DC  X'0018,0001,0001'\n&NM.SYSOU  DC  CL1'&SYSOU'              SYSOUT CLASS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPGNM   AIF ('&SPGNM' EQ '').TUSFMNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPGN#\n           DS  XL6\n&NM.SPGNM  DS  CL8                      SYSOUT PROGRAM NAME\n           AGO .TUSFMNO\n.TUSPGN#   ANOP\n           DC  X'0019,0001,0008'\n&NM.SPGNM  DC  CL8'&SPGNM'              SYSOUT PROGRAM NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSFMNO   AIF ('&SFMNO' EQ '').TUOUTLM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSFMN#\n           DS  XL6\n&NM.SFMNO  DS  CL4                      SYSOUT FORM NAME/NUMBER\n           AGO .TUOUTLM\n.TUSFMN#   ANOP\n           DC  X'001A,0001,0004'\n&NM.SFMNO  DC  CL4'&SFMNO'              SYSOUT FORM NAME/NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOUTLM   AIF ('&OUTLM' EQ '').TUCLOSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOUTL#\n           DS  XL6\n&NM.OUTLM  DS  AL3                      OUTLIM\n           AGO .TUCLOSE\n.TUOUTL#   ANOP\n           DC  X'001B,0001,0003'\n&NM.OUTLM  DC  AL3(&OUTLM)              OUTLIM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCLOSE   AIF ('&CLOSE' EQ '').TUCOPYS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCLOS#\n&NM.CLOSE  DS  XL4                      FREE=CLOSE\n           AGO .TUCOPYS\n.TUCLOS#   ANOP\n&NM.CLOSE  DC  X'001C,0000'             FREE=CLOSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCOPYS   AIF ('&COPYS' EQ '').TULABEL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCOPY#\n           DS  XL6\n&NM.COPYS  DS  AL1                      COPIES\n           AGO .TULABEL\n.TUCOPY#   ANOP\n           DC  X'001D,0001,0001'\n&NM.COPYS  DC  AL1(&COPYS)              COPIES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULABEL   AIF ('&LABEL' EQ '').TUDSSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULABE#\n&NM.LABEL  DS  XL7                      LABEL\n           AGO .TUDSSEQ\n.TULABE#   AIF ('&LABEL' NE 'NL').TULABE2\n&NM.LABEL  DC  X'001E,0001,0001,01'     LABEL=NL\n           AGO .TUDSSEQ\n.TULABE2   AIF ('&LABEL' NE 'SL').TULABE3\n&NM.LABEL  DC  X'001E,0001,0001,02'     LABEL=SL\n           AGO .TUDSSEQ\n.TULABE3   AIF ('&LABEL' NE 'NSL').TULABE4\n&NM.LABEL  DC  X'001E,0001,0001,04'     LABEL=NSL\n           AGO .TUDSSEQ\n.TULABE4   AIF ('&LABEL' NE 'SUL').TULABE5\n&NM.LABEL  DC  X'001E,0001,0001,0A'     LABEL=SUL\n           AGO .TUDSSEQ\n.TULABE5   AIF ('&LABEL' NE 'BLP').TULABE6\n&NM.LABEL  DC  X'001E,0001,0001,10'     LABEL=BLP\n           AGO .TUDSSEQ\n.TULABE6   AIF ('&LABEL' NE 'LTM').TULABE7\n&NM.LABEL  DC  X'001E,0001,0001,21'     LABEL=LTM\n           AGO .TUDSSEQ\n.TULABE7   AIF ('&LABEL' NE 'AL').TULABE8\n&NM.LABEL  DC  X'001E,0001,0001,40'     LABEL=AL\n           AGO .TUDSSEQ\n.TULABE8   AIF ('&LABEL' NE 'AUL').TUDSSEQ\n&NM.LABEL  DC  X'001E,0001,0001,48'     LABEL=AUL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSSEQ   AIF ('&DSSEQ' EQ '').TUPASPR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSSE#\n           DS  XL6\n&NM.DSSEQ  DS  AL2                      LABEL= DATASET SEQUENCE NUMBER\n           AGO .TUPASPR\n.TUDSSE#   ANOP\n           DC  X'001F,0001,0002'\n&NM.DSSEQ  DC  AL2(&DSSEQ)              LABEL= DATASET SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPASPR   AIF ('&PASPR' EQ '').TUINOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINOUT   AIF ('&INOUT' EQ '').TUEXPDT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOU#\n&NM.INOUT  DS  XL7                      LABEL=IN OR OUT\n           AGO .TUEXPDT\n.TUINOU#   AIF ('&INOUT' NE 'IN').TUINOU2\n&NM.INOUT  DC  X'0021,0001,0001,40'     LABEL=IN\n           AGO .TUEXPDT\n.TUINOU2   AIF ('&INOUT' NE 'OUT').TUEXPDT\n&NM.INOUT  DC  X'0021,0001,0001,80'     LABEL=OUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEXPDT   AIF ('&EXPDT' EQ '').TURETPD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEXPD#\n           DS  XL6\n&NM.EXPDT  DS  CL5                      EXPDT\n           AGO .TURETPD\n.TUEXPD#   ANOP\n           DC  X'0022,0001,0005'\n&NM.EXPDT  DC  CL5'&EXPDT'              EXPDT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURETPD   AIF ('&RETPD' EQ '').TUDUMMY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURETP#\n           DS  XL6\n&NM.RETPD  DS  AL2                      RETPD\n           AGO .TUDUMMY\n.TURETP#   ANOP\n           DC  X'0023,0001,0002'\n&NM.RETPD  DC  AL2(&RETPD)              RETPD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDUMMY   AIF ('&DUMMY' EQ '').TUFCBIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDUMM#\n&NM.DUMMY  DS  XL4                      DD DUMMY / DSN=NULLFILE\n           AGO .TUFCBIM\n.TUDUMM#   ANOP\n&NM.DUMMY  DC  X'0024,0000'             DD DUMMY / DSN=NULLFILE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBIM   AIF ('&FCBIM' EQ '').TUFCBAV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBI#\n           DS  XL6\n&NM.FCBIM  DS  CL4                      FCB\n           AGO .TUFCBAV\n.TUFCBI#   ANOP\n           DC  X'0025,0001,0004'\n&NM.FCBIM  DC  CL4'&FCBIM'              FCB\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBAV   AIF ('&FCBAV' EQ '').TUQNAME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBA#\n&NM.FCBAV  DS  XL7                      FCB VERIFY OR ALIGN\n           AGO .TUQNAME\n.TUFCBA#   AIF ('&FCBAV' NE 'VERIFY').TUFCBA2\n&NM.FCBAV  DC  X'0026,0001,0001,04'     FCB VERIFY\n           AGO .TUQNAME\n.TUFCBA2   AIF ('&FCBAV' NE 'ALIGN').TUQNAME\n&NM.FCBAV  DC  X'0026,0001,0001,08'     FCB ALIGN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUQNAME   AIF ('&QNAME' EQ '').TUTERM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTERM    AIF ('&TERM' EQ '').TUUCS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTERMA\n&NM.TERM   DS  XL4                      TERM=TS / DSN(*)\n           AGO .TUUCS\n.TUTERMA   ANOP\n&NM.TERM   DC  X'0028,0000'             TERM=TS / DSN(*)\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUCS     AIF ('&UCS' EQ '').TUUFOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUCSA\n           DS  XL6\n&NM.UCS    DS  CL4                      UCS CHARACTER SET\n           AGO .TUUFOLD\n.TUUCSA    ANOP\n           DC  X'0029,0001,0004'\n&NM.UCS    DC  CL4'&UCS'                UCS CHARACTER SET\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUFOLD   AIF ('&UFOLD' EQ '').TUUVRFY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUFOL#\n&NM.UFOLD  DS  XL4                      UCS FOLD\n           AGO .TUUVRFY\n.TUUFOL#   ANOP\n&NM.UFOLD  DC  X'002A,0000'             UCS FOLD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUVRFY   AIF ('&UVRFY' EQ '').TUDCBDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUVRF#\n&NM.UVRFY  DS  XL4                      UCS VERIFY\n           AGO .TUDCBDS\n.TUUVRF#   ANOP\n&NM.UVRFY  DC  X'002B,0000'             UCS VERIFY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDS   AIF ('&DCBDS' EQ '').TUDCBDD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBS#\n           DS  XL6\n&NM.DCBDS  DS  CL44                     DCB REFERENCE TO DSN\n           AGO .TUDCBDD\n.TUDCBS#   ANOP\n           DC  X'002C,0001,0003'        DCB REFERENCE TO DSN (BELOW)\n&NM.DCBDS  DC  CL44'&DCBDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDD   AIF ('&DCBDD' EQ '').TUSUSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBD#\n           DS  XL6\n&NM.DCBDD  DS  CL8                      DCB REFERENCE TO DDNAME\n           AGO .TUSUSER\n.TUDCBD#   ANOP\n           DC  X'002D,0001,0008'\n&NM.DCBDD  DC  CL8'&DCBDD'              DCB REFERENCE TO DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSUSER   AIF ('&SUSER' EQ '').TUSHOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSUSE#\n           DS  XL6\n&NM.SUSER  DS  CL8                      SYSOUT DESTINATION\n           AGO .TUSHOLD\n.TUSUSE#   ANOP\n           DC  X'0058,0001,0008'\n&NM.SUSER  DC  CL8'&SUSER'              SYSOUT DESTINATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSHOLD   AIF ('&SHOLD' EQ '').TUMSVGP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSHOL#\n&NM.SHOLD  DS  XL4                      SYSOUT HOLD=YES\n           AGO .TUMSVGP\n.TUSHOL#   ANOP\n&NM.SHOLD  DC  X'0059,0000'             SYSOUT HOLD=YES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMSVGP   AIF ('&MSVGP' EQ '').TUSSNM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSNM    AIF ('&SSNM' EQ '').TUSSPRM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSPRM   AIF ('&SSPRM' EQ '').TUPROT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPROT    AIF ('&PROT' EQ '').TUBFALN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.*\n.*********************************************************************\n.***          DCB ATTRIBUTE TEXT UNITS - VERB CODE 01              ***\n.*********************************************************************\n.*\n.TUBFALN   AIF ('&BFALN' EQ '').TUBFTEK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFAL#\n&NM.BFALN  DS  XL7                      BFALN\n           AGO .TUBFTEK\n.TUBFAL#   AIF ('&BFALN' NE 'F').TUBFAL2\n&NM.BFALN  DC  X'002E,0001,0001,01'     BFALN=F\n           AGO .TUBFTEK\n.TUBFAL2   AIF ('&BFALN' NE 'D').TUBFTEK                        MI04303\n&NM.BFALN  DC  X'002E,0001,0001,02'     BFALN=D\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBFTEK   AIF ('&BFTEK' EQ '').TUBLKSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFTE#\n&NM.BFTEK  DS  XL7                      BFTEK\n           AGO .TUBLKSZ\n.TUBFTE#   AIF ('&BFTEK' NE 'D').TUBFTE2\n&NM.BFTEK  DC  X'002F,0001,0001,08'     BFTEK=D\n           AGO .TUBLKSZ\n.TUBFTE2   AIF ('&BFTEK' NE 'E').TUBFTE3\n&NM.BFTEK  DC  X'002F,0001,0001,10'     BFTEK=E\n           AGO .TUBLKSZ\n.TUBFTE3   AIF ('&BFTEK' NE 'R').TUBFTE4\n&NM.BFTEK  DC  X'002F,0001,0001,20'     BFTEK=R\n           AGO .TUBLKSZ\n.TUBFTE4   AIF ('&BFTEK' NE 'S').TUBFTE5\n&NM.BFTEK  DC  X'002F,0001,0001,40'     BFTEK=S\n           AGO .TUBLKSZ\n.TUBFTE5   AIF ('&BFTEK' NE 'A').TUBLKSZ\n&NM.BFTEK  DC  X'002F,0001,0001,60'     BFTEK=A\n           AGO .TUBLKSZ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKSZ   AIF ('&BLKSZ' EQ '').TUBUFIN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKS#\n           DS  XL6\n&NM.BLKSZ  DS  AL2                      BLKSIZE\n           AGO .TUBUFIN\n.TUBLKS#   ANOP\n           DC  X'0030,0001,0002'\n&NM.BLKSZ  DC  AL2(&BLKSZ)              BLKSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFIN   AIF ('&BUFIN' EQ '').TUBUFL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFI#\n           DS  XL6\n&NM.BUFIN  DS  AL1                      BUFIN\n           AGO .TUBUFL\n.TUBUFI#   ANOP\n           DC  X'0031,0001,0001'\n&NM.BUFIN  DC  AL1(&BUFIN)              BUFIN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFL    AIF ('&BUFL' EQ '').TUBUFMX\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFLA\n           DS  XL6\n&NM.BUFL   DC  AL2                      BUFL\n           AGO .TUBUFMX\n.TUBUFLA   ANOP\n           DC  X'0032,0001,0002'\n&NM.BUFL   DC  AL2(&BUFL)               BUFL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFMX   AIF ('&BUFMX' EQ '').TUBUFNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFM#\n           DS  XL6\n&NM.BUFMX  DS  AL1                      BUFMAX\n           AGO .TUBUFNO\n.TUBUFM#   ANOP\n           DC  X'0033,0001,0001'\n&NM.BUFMX  DC  AL1(&BUFMX)              BUFMAX\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFNO   AIF ('&BUFNO' EQ '').TUBUFOF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFN#\n           DS  XL6\n&NM.BUFNO  DC  AL1                      BUFNO\n           AGO .TUBUFOF\n.TUBUFN#   ANOP\n           DC  X'0034,0001,0001'\n&NM.BUFNO  DC  AL1(&BUFNO)              BUFNO\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOF   AIF ('&BUFOF' EQ '').TUBUFOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&BUFOF' NE 'L').TUBUFO2\n           AIF ('&MAP' NE 'ONLY').TUBUFF#\n&NM.BUFOF  DS  XL7                      BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFF#   ANOP\n&NM.BUFOF  DC  X'0035,0001,0001,80'     BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFO2   ANOP\n           AIF ('&MAP' NE 'ONLY').TUBUF##\n           DS  XL6\n&NM.BUFOF  DS  AL1                      BUFOFF\n           AGO .TUBUFOU\n.TUBUF##   ANOP\n           DC  X'0035,0001,0001'\n&NM.BUFOF  DC  AL1(&BUFOF)              BUFOFF\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOU   AIF ('&BUFOU' EQ '').TUBUFRQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFO#\n           DS  XL6\n&NM.BUFOU  DS  AL1                      BUFOUT\n           AGO .TUBUFRQ\n.TUBUFO#   ANOP\n           DC  X'0036,0001,0001'\n&NM.BUFOU  DC  AL1(&BUFOU)              BUFOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFRQ   AIF ('&BUFRQ' EQ '').TUBUFSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFR#\n           DS  XL6\n&NM.BUFRQ  DS  AL1                      BUFRQ\n           AGO .TUBUFSZ\n.TUBUFR#   ANOP\n           DC  X'0037,0001,0001'\n&NM.BUFRQ  DC  AL1(&BUFRQ)              BUFRQ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFSZ   AIF ('&BUFSZ' EQ '').TUCODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFS#\n           DS  XL6\n&NM.BUFSZ  DS  AL2                      BUFSIZE\n           AGO .TUCODE\n.TUBUFS#   ANOP\n           DC  X'0038,0001,0002'\n&NM.BUFSZ  DC  AL2(&BUFSZ)              BUFSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCODE    AIF ('&CODE' EQ '').TUCPRI\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCPRI    AIF ('&CPRI' EQ '').TUDEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDEN     AIF ('&DEN' EQ '').TUDSORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDENA\n&NM.DEN    DS  XL7                      DEN\n           AGO .TUDSORG\n.TUDENA    AIF ('&DEN' NE '0').TUDE2\n&NM.DEN    DC  X'003B,0001,0001,03'     DEN=0  (200 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE2     AIF ('&DEN' NE '1').TUDE3\n&NM.DEN    DC  X'003B,0001,0001,43'     DEN=1  (556 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE3     AIF ('&DEN' NE '2').TUDE4\n&NM.DEN    DC  X'003B,0001,0001,83'     DEN=2  (800 BPI, 7/9-TRACK)\n           AGO .TUDSORG\n.TUDE4     AIF ('&DEN' NE '3').TUDE5\n&NM.DEN    DC  X'003B,0001,0001,C3'     DEN=3  (1600 BPI, 9-TRACK)\n           AGO .TUDSORG\n.TUDE5     AIF ('&DEN' NE '4').TUDSORG\n&NM.DEN    DC  X'003B,0001,0001,D3'     DEN=4  (6250 BPI, 9-TRACK)\n           AGO .TUDSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSORG   AIF ('&DSORG' EQ '').TUEROPT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSOR#\n&NM.DSORG  DS  XL8                      DSORG\n           AGO .TUEROPT\n.TUDSOR#   AIF ('&DSORG' NE 'VS').TUDSOR2\n&NM.DSORG  DC  X'003C,0001,0002,0008'   DSORG=VS\n           AGO .TUEROPT\n.TUDSOR2   AIF ('&DSORG' NE 'TQ').TUDSOR3\n&NM.DSORG  DC  X'003C,0001,0002,0020'   DSORG=TQ\n           AGO .TUEROPT\n.TUDSOR3   AIF ('&DSORG' NE 'TX').TUDSOR4\n&NM.DSORG  DC  X'003C,0001,0002,0040'   DSORG=TX\n           AGO .TUEROPT\n.TUDSOR4   AIF ('&DSORG' NE 'GS').TUDSOR5\n&NM.DSORG  DC  X'003C,0001,0002,0080'   DSORG=GS\n           AGO .TUEROPT\n.TUDSOR5   AIF ('&DSORG' NE 'PO').TUDSOR6\n&NM.DSORG  DC  X'003C,0001,0002,0200'   DSORG=PO\n           AGO .TUEROPT\n.TUDSOR6   AIF ('&DSORG' NE 'POU').TUDSOR7\n&NM.DSORG  DC  X'003C,0001,0002,0300'   DSORG=POU\n           AGO .TUEROPT\n.TUDSOR7   AIF ('&DSORG' NE 'MQ').TUDSOR8\n&NM.DSORG  DC  X'003C,0001,0002,0400'   DSORG=MQ\n           AGO .TUEROPT\n.TUDSOR8   AIF ('&DSORG' NE 'CQ').TUDSOR9\n&NM.DSORG  DC  X'003C,0001,0002,0800'   DSORG=CQ\n           AGO .TUEROPT\n.TUDSOR9   AIF ('&DSORG' NE 'CX').TUDSORA\n&NM.DSORG  DC  X'003C,0001,0002,1000'   DSORG=CX\n           AGO .TUEROPT\n.TUDSORA   AIF ('&DSORG' NE 'DA').TUDSORB\n&NM.DSORG  DC  X'003C,0001,0002,2000'   DSORG=DA\n           AGO .TUEROPT\n.TUDSORB   AIF ('&DSORG' NE 'DAU').TUDSORC\n&NM.DSORG  DC  X'003C,0001,0002,2100'   DSORG=DAU\n           AGO .TUEROPT\n.TUDSORC   AIF ('&DSORG' NE 'PS').TUDSORD\n&NM.DSORG  DC  X'003C,0001,0002,4000'   DSORG=PS\n           AGO .TUEROPT\n.TUDSORD   AIF ('&DSORG' NE 'PSU').TUEROPT\n&NM.DSORG  DC  X'003C,0001,0002,4100'   DSORG=PSU\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEROPT   AIF ('&EROPT' EQ '').TUGNCP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEROP#\n&NM.EROPT  DS  XL7                      EROPT\n           AGO .TUGNCP\n.TUEROP#   AIF ('&EROPT' NE 'T').TUEROP2\n&NM.EROPT  DC  X'003D,0001,0001,10'     EROPT=T\n           AGO .TUGNCP\n.TUEROP2   AIF ('&EROPT' NE 'ABE').TUEROP3\n&NM.EROPT  DC  X'003D,0001,0001,20'     EROPT=ABE\n           AGO .TUGNCP\n.TUEROP3   AIF ('&EROPT' NE 'SKP').TUEROP4\n&NM.EROPT  DC  X'003D,0001,0001,40'     EROPT=SKP\n           AGO .TUGNCP\n.TUEROP4   AIF ('&EROPT' NE 'ACC').TUGNCP\n&NM.EROPT  DC  X'003D,0001,0001,80'     EROPT=ACC\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUGNCP    AIF ('&GNCP' EQ '').TUINTVL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUGNCPA\n           DS  XL6\n&NM.GNCP   DC  AL1                      GNCP\n           AGO .TUINTVL\n.TUGNCPA   ANOP\n           DC  X'003E,0001,0001'                                MI04303\n&NM.GNCP   DC  AL1(&GNCP)               GNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINTVL   AIF ('&INTVL' EQ '').TUKYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUKYLEN   AIF ('&KYLEN' EQ '').TULIMCT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUKYLE#\n           DS  XL6\n&NM.KYLEN  DS  AL1                      KEYLEN\n           AGO .TULIMCT\n.TUKYLE#   ANOP\n           DC  X'0040,0001,0001'\n&NM.KYLEN  DC  AL1(&KYLEN)              KEYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULIMCT   AIF ('&LIMCT' EQ '').TULRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULRECL   AIF ('&LRECL' EQ '').TUMODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULREC#\n           DS  XL6\n&NM.LRECL  DS  AL2                      LRECL\n           AGO .TUMODE\n.TULREC#   ANOP\n           DC  X'0042,0001,0002'\n&NM.LRECL  DC  AL2(&LRECL)              LRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMODE    AIF ('&MODE' EQ '').TUNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNCP     AIF ('&NCP' EQ '').TUOPTCD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNCPA\n           DS  XL6\n&NM.NCP    DS  AL1                      NCP\n           AGO .TUOPTCD\n.TUNCPA    ANOP\n           DC  X'0044,0001,0001'\n&NM.NCP    DC  AL1(&NCP)                NCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOPTCD   AIF ('&OPTCD' EQ '').TUPCIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOPTC#\n&NM.OPTCD  DS  XL7                      OPTCD\n           AGO .TUPCIR\n.TUOPTC#   AIF ('&OPTCD' NE 'W').TUPCIR\n&NM.OPTCD  DC  X'0045,0001,0001,80'     OPTCD=W\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIR    AIF ('&PCIR' EQ '').TUPCIS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIS    AIF ('&PCIS' EQ '').TUPRTSP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRTSP   AIF ('&PRTSP' EQ '').TURECFM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRTS#\n&NM.PRTSP  DS  XL7                      PRTSP\n           AGO .TURECFM\n.TUPRTS#   AIF ('&PRTSP' NE '0').TUPRTS2\n&NM.PRTSP  DC  X'0048,0001,0001,01'     PRTSP=0\n           AGO .TURECFM\n.TUPRTS2   AIF ('&PRTSP' NE '1').TUPRTS3\n&NM.PRTSP  DC  X'0048,0001,0001,09'     PRTSP=1\n           AGO .TURECFM\n.TUPRTS3   AIF ('&PRTSP' NE '2').TUPRTS4\n&NM.PRTSP  DC  X'0048,0001,0001,11'     PRTSP=2\n           AGO .TURECFM\n.TUPRTS4   AIF ('&PRTSP' NE '3').TURECFM\n&NM.PRTSP  DC  X'0048,0001,0001,19'     PRTSP=3\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURECFM   AIF ('&RECFM' EQ '').TURSRVF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURECF#\n&NM.RECFM  DS  XL7                      RECFM=F\n           AGO .TURSRVF\n.TURECF#   AIF ('&RECFM' NE 'F').TURECF2\n&NM.RECFM  DC  X'0049,0001,0001,80'     RECFM=F\n           AGO .TURSRVF\n.TURECF2   AIF ('&RECFM' NE 'FA').TURECF3\n&NM.RECFM  DC  X'0049,0001,0001,84'     RECFM=FA\n           AGO .TURSRVF\n.TURECF3   AIF ('&RECFM' NE 'FB').TURECF4\n&NM.RECFM  DC  X'0049,0001,0001,90'     RECFM=FB\n           AGO .TURSRVF\n.TURECF4   AIF ('&RECFM' NE 'FBA').TURECF5\n&NM.RECFM  DC  X'0049,0001,0001,94'     RECFM=FBA\n           AGO .TURSRVF\n.TURECF5   AIF ('&RECFM' NE 'V').TURECF6\n&NM.RECFM  DC  X'0049,0001,0001,40'     RECFM=V\n           AGO .TURSRVF\n.TURECF6   AIF ('&RECFM' NE 'VB').TURECF7\n&NM.RECFM  DC  X'0049,0001,0001,50'     RECFM=VB\n           AGO .TURSRVF\n.TURECF7   AIF ('&RECFM' NE 'U').TURSRVF\n&NM.RECFM  DC  X'0049,0001,0001,C0'     RECFM=U\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURSRVF   AIF ('&RSRVF' EQ '').TURSRVS\n.TURSRVS   AIF ('&RSRVS' EQ '').TUSOWA\n.TUSOWA    AIF ('&SOWA' EQ '').TUSTACK\n.TUSTACK   AIF ('&STACK' EQ '').TUTHRSH\n.TUTHRSH   AIF ('&THRSH' EQ '').TUTRTCH\n.TUTRTCH   AIF ('&TRTCH' EQ '').TUIPLTX\n.TUIPLTX   AIF ('&IPLTX' EQ '').TUDIAGN\n.TUDIAGN   AIF ('&DIAGN' EQ '').TUFUNC\n.TUFUNC    AIF ('&FUNC' EQ '').TUFRID\n.TUFRID    AIF ('&FRID' EQ '').TUPASSW\n.*\n.*********************************************************************\n.***       NON-JCL DYNAMIC ALLOCATION FUNCTIONS - VERB CODE 01     ***\n.*********************************************************************\n.*\n.TUPASSW   AIF ('&PASSW' EQ '').TUPERMA\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPERMA   AIF ('&PERMA' EQ '').TUCNVRT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPERM#\n&NM.PERMA  DS  XL4                      PERMANENT ALLOCATION\n           AGO .TUCNVRT\n.TUPERM#   ANOP\n&NM.PERMA  DC  X'0052,0000'             PERMANENT ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCNVRT   AIF ('&CNVRT' EQ '').TURTDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCNVR#\n&NM.CNVRT  DS  XL4                      CONVERTABLE ALLOCATION\n           AGO .TURTDDN\n.TUCNVR#   ANOP\n&NM.CNVRT  DC  X'0053,0000'             CONVERTABLE ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDDN   AIF ('&RTDDN' EQ '').TURTDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.RTDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TURTDSN\n.TURTDD#   ANOP\n           DC  X'0055,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.RTDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDSN   AIF ('&RTDSN' EQ '').TURTORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.RTDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TURTORG\n.TURTDS#   ANOP\n           DC  X'0056,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.RTDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTORG   AIF ('&RTORG' EQ '').TURTVOL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTOR#\n           DS  XL6\n&NM.RTORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTVOL\n.TURTOR#   DC  X'0057,0001,0002'\n&NM.RTORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTVOL   AIF ('&RTVOL' EQ '').TUREMOV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTVO#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED VOLSER\n&NM.RTVOL  DS  CL6                      RETURNED VOLSER\n           AGO .TUREMOV\n.TURTVO#   ANOP\n           DC  X'005D,0001'\n           DC  XL2'0006'                LEN OF RETURNED VOLSER\n&NM.RTVOL  DC  CL6' '                   RETURNED VOLSER\n.*\n.*********************************************************************\n.***       UNALLOCATE - VERB CODE 02                               ***\n.*********************************************************************\n.*\n.TUREMOV   AIF ('&REMOV' EQ '').TUUNALC\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUREMO#\n&NM.REMOV  DS  XL4                      REMOVE INUSE EVEN IF PERMANENT\n           AGO .TUUNALC\n.TUREMO#   ANOP\n&NM.REMOV  DC  X'0008,0000'             REMOVE INUSE EVEN IF PERMANENT\n.*\n.TUUNALC   AIF ('&UNALC' EQ '').TUTCBAD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNAL#\n&NM.UNALC  DS  XL4                      UNALLOCATE EVEN IF PERMANENT\n           AGO .TUTCBAD\n.TUUNAL#   ANOP\n&NM.UNALC  DC  X'0007,0000'             UNALLOCATE EVEN IF PERMANENT\n.*\n.*********************************************************************\n.***       REMOVE IN-USE ATTRIBUTE - VERB CODE 05                  ***\n.*********************************************************************\n.*\n.TUTCBAD   AIF ('&TCBAD' EQ '').TUINDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTCBA#\n           DS  XL6\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n           AGO .TUINDDN\n.TUTCBA#   ANOP\n           DC  X'0001,0001,0004'\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n.*\n.*********************************************************************\n.***       RETURN INFORMATION - VERB CODE 07                       ***\n.*********************************************************************\n.*\n.TUINDDN   AIF ('&INDDN' EQ '').TUINDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.INDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TUINDSN\n.TUINDD#   ANOP\n           DC  X'0004,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.INDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINDSN   AIF ('&INDSN' EQ '').TUINORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.INDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TUINORG\n.TUINDS#   ANOP\n           DC  X'0005,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.INDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINORG   AIF ('&INORG' EQ '').TURTMEM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOR#\n           DS  XL6\n&NM.INORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTMEM\n.TUINOR#   DC  X'000A,0001,0002'\n&NM.INORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTMEM   AIF ('&RTMEM' EQ '').TURTSTA\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTME#\n           DS  XL6\n&NM.RTMEM  DS  CL8                      RETURNED MEMBER NAME\n           AGO .TURTSTA\n.TURTME#   ANOP\n           DC  X'0006,0001,0008'\n&NM.RTMEM  DC  CL8' '                   RETURNED MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTSTA   AIF ('&RTSTA' EQ '').TURTNDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTST#\n           DS  XL6\n&NM.RTSTA  DS  XL1                      RETURNED DATASET STATUS\n           AGO .TURTNDP\n.TURTST#   ANOP\n           DC  X'0007,0001,0001'\n&NM.RTSTA  DS  XL1'00'                  RETURNED DATASET STATUS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTNDP   AIF ('&RTNDP' EQ '').TURTCDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTND#\n           DS  XL6\n&NM.RTNDP  DS  XL1                      RETURNED NORMAL DISP\n           AGO .TURTCDP\n.TURTND#   ANOP\n           DC  X'0008,0001,0001'\n&NM.RTNDP  DS  XL1'00'                  RETURNED NORMAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTCDP   AIF ('&RTCDP' EQ '').TURTLIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTCD#\n           DS  XL6\n&NM.RTCDP  DS  XL1                      RETURNED CONDITIONAL DISP\n           AGO .TURTLIM\n.TURTCD#   ANOP\n           DC  X'0009,0001,0001'\n&NM.RTCDP  DS  XL1'00'                  RETURNED CONDITIONAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLIM   AIF ('&RTLIM' EQ '').TURTATT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLI#\n           DS  XL6\n&NM.RTLIM  DS  XL2                      RETURNED LIMIT SPECIFICATION\n           AGO .TURTATT\n.TURTLI#   ANOP\n           DC  X'000B,0001,0002'\n&NM.RTLIM  DS  XL2'0000'                RETURNED LIMIT SPECIFICATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTATT   AIF ('&RTATT' EQ '').TURTLST\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTAT#\n           DS  XL6\n&NM.RTATT  DS  XL1                      RETURNED D.A. ATTRIBUTE\n           AGO .TURTLST\n.TURTAT#   ANOP\n           DC  X'000C,0001,0001'\n&NM.RTATT  DS  XL1'00'                  RETURNED D.A. ATTRIBUTE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLST   AIF ('&RTLST' EQ '').TURTTYP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLS#\n           DS  XL6\n&NM.RTLST  DS  XL1                      RETURNED LAST ENTRY SPEC.\n           AGO .TURTTYP\n.TURTLS#   ANOP\n           DC  X'000D,0001,0001'\n&NM.RTLST  DS  XL1'00'                  RETURNED LAST ENTRY SPEC.\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTTYP   AIF ('&RTTYP' EQ '').TURELNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTTY#\n           DS  XL6\n&NM.RTTYP  DS  XL1                      RETURNED DATASET TYPE\n           AGO .TURELNO\n.TURTTY#   ANOP\n           DC  X'000E,0001,0001'\n&NM.RTTYP  DS  XL1'00'                  RETURNED DATASET TYPE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURELNO   AIF ('&RELNO' EQ '').TUENDM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURELN#\n           DS  XL6\n&NM.RELNO  DS  XL2                      RETURNED RELATIVE REQUEST NO.\n           AGO .TUENDM\n.TURELN#   ANOP\n           DC  X'000F,0001,0002'\n&NM.RELNO  DS  XL2'0000'                RETURNED RELATIVE REQUEST NO.\n.*\n.*********************************************************************\n.***       MARK END OF LIST OF TEXT UNITS                          ***\n.*********************************************************************\n.*\n.TUENDM    AIF ('&MAP' NE 'ONLY').TUENDU#\n           DS  XL1                      END OF LIST MARKER\n           AGO .TUEND\n.TUENDU#   ANOP\n           DC  X'FF'                    END OF LIST MARKER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEND     ANOP\n.*\n**********************************************************************\n***        REQUEST BLOCKS FOR SVC99                                ***\n**********************************************************************\n*\n&NM.RBP    DS  A                        POINTER TO REQUEST BLOCK\n&NM.RB     DS  5A                       REQUEST BLOCK\n&NM.TUPL   DS  &TUPLEN.A                TEXT UNIT POINTER LIST\n*\n**********************************************************************\n***        DAIRFAIL PARAMETER BLOCK & MISCELLANEOUS STORAGE        ***\n**********************************************************************\n*\n&NM.DFPRM  DS  6F                       PARM BLOCK FOR IKJEFF18\n*\n&NM.S99RC  DS  F                        STORAGE AREA FOR SVC 99 R/C\n           AIF ('&MAP' NE 'ONLY').DF2\n&NM.F02EP  DS  F                        STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DS  XL2                      DAIRFAIL SWITCHES & CALLER ID\n           AGO .DF3\n.DF2       ANOP\n&NM.F02EP  DC  F'0'                     STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DC  X'0032'                  DAIRFAIL SWITCHES & CALLER ID\n.DF3       ANOP\n*\n**********************************************************************\n***        EQUATE FOR TOTAL LENGTH                                 ***\n**********************************************************************\n*\n           DS  0D                       ALIGN FOR GETMAIN\n&NM.LEN    EQU *-&NM                    TOTAL LENGTH\n           MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDADOC": {"ttr": 4870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00\\xec\\x00\\xec\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 236, "newlines": 236, "modlines": 0, "user": "HOFFMAN"}, "text": "         MACRO\n&LABEL   GTEDADOC\n*\n*  +----------------------------------------------------------------+\n*  |  This is an explanation of the GTE Dynamic Allocation macros.  |\n*  |                                                                |\n*  |         Chuck Hoffman                                          |\n*  |         Systems Programming                                    |\n*  |         GTE Laboratories - Technical Computation Center        |\n*  |         40 Sylvan Road                                         |\n*  |         Waltham, MA  02254                                     |\n*  |                               617/466-2131  v/n 679-2131       |\n*  +----------------------------------------------------------------+\n*\n* PURPOSE:\n*     DAIR/IKJDAIR is now being maintained only for compatability with\n* older programs.  IBM states that all new applications should be\n* written using SVC-99 rather than DAIR.  The purpose of these macros\n* is to make the use of SVC-99 and IKJEFF18 (DAIRFAIL messages) easy\n* from assembler programs.\n*\n* REFERENCE:\n*     The user of these routines should have available the IBM manual:\n* 'GC28-0627, OS/VS2 MVS Systems Programming Library:  Job Management'\n* which describes SVC-99.  A detailed knowledge of SVC-99 is not\n* necessary.\n*\n* FUNCTION:\n*     GTEDADAT - Allocates space at assembly time for control blocks.\n*                Generates literals and constants.\n*     GTEDASET - Initializes control blocks at exection time.\n*     GTEDAALC - Invokes SVC-99 and IKJEFF18.\n*\n*\n* GTEDADAT - creating control blocks.\n*\n* 1.  The name of the control blocks is limited to three characters,\n*     because it is used as a prefix for data items in the generated\n*     control blocks.\n*                okay:  ABC      GTEDADAT ...\n*                  no:  ABCD     GTEDADAT ...\n*\n* 2.  The use of MAP=ONLY will produce DS entries without initializing\n*     the contents of the blocks.\n*          DC entries:  ABC      GTEDADAT ...\n*          DS entries:  ABC      GTEDADAT MAP=ONLY,...\n*\n* 3.  The names of text unit operands are the same as those used in the\n*     'Job Management' manual.  For instance, DSNAM and DDNAM rather\n*     than DSNAME and DDNAME.  By limiting operands to five characters,\n*     labels can be created using the 3-character block name as a\n*     prefix, followed by the 5-character (max) operand name.  The\n*     dataset name in the example in 2, above, would be labeled\n*     ABCDSNAM.\n*           -------------------------------------------------\n*           ---  There is one exception because IBM uses  ---\n*           ---  the same last 5 characters for infor-    ---\n*           ---  mation retrieval with two different      ---\n*           ---  SVC-99 verb codes.  If using the DSN     ---\n*           ---  Allocation SVC-99 verb (X'01') use the   ---\n*           ---  IBM names on the left.  If using the     ---\n*           ---  Information Retrieval SVC-99 verb (X'07')---\n*           ---  use the GTE names on the right:          ---\n*           ---                                           ---\n*           ---     DSN Alloc.        Info. Retrieval     ---\n*           ---       RTDDN              INDDN            ---\n*           ---       RTDSN              INDSN            ---\n*           ---       RTORG              INORG            ---\n*           -------------------------------------------------\n*\n* 4.  Text unit operands come in three flavors (refer to 'Job\n*     Management')\n*\n*     A.  Those for which an explicit value is supplied, e.g. DDNAME.\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*\n*     B.  Those which are either on or off:  e.g. Space type TRK\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*                    +ADCTRK   DC     X'0007,0000'\n*         ----------------------------------------------------------\n*         ---  Note.  Information retrieval is in this category. ---\n*         ----------------------------------------------------------\n*\n*     C.  Those for which there is a choice which can be coded,\n*         e.g. Dataset organization.\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES,DSORG=PS\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*                    +ADCTRK   DC     X'0007,0000'\n*                    +ADCDSORG DC     X'003C,0001,0002,4000'\n*\n*   NOTE 1. -\n*     Each operand generates a text unit which begins with a two-byte\n*     key.  Each operand generates a label.  The label may be at the\n*     key, as in ADCTRK and ADCDSORG, above, or it may be at the\n*     literal, as in ADCDDNAM, above.  Location of the label is based\n*     on a best guess of anticipated use of that text unit.\n*\n*   NOTE 2. -\n*     Setting a key value to X'0000' will cause SVC-99 to ignore that\n*     text unit.  After executing GTEDASET which builds a list of\n*     pointers to the text units, values in the text units can be\n*     changed at will.\n*\n*   NOTE 3. -\n*     At this time, not all operands generate executable code, and\n*     those which do may be in error.  If you discover errors or need\n*     new functions, call Systems Programming.\n*\n*\n* GTEDASET - setting addresses in control blocks\n*\n* 1.  This macro needs to be executed once before the GTEDAALC macro\n*     executes.  It simply links together the control blocks generated\n*     by GTEDADAT.  After this macro has been executed, there is no\n*     problem changing values in the control blocks.\n*\n* 2.  The CPPLPTR operand is the name of a fullword.  If the program is\n*     a TSO Command Processor, the fullword must contain the address of\n*     the Command Processor Parameter List (CPPL).  If the program is\n*     not a Command Processor, the fullword should contain the address\n*     of a fake CPPL, or ERRMSG=NO should be coded in the GTEDAALC\n*     macro (below).\n*\n*\n* GTEDAALC - executing SVC-99 and IKJEFF18\n*\n* 1.  This macro is executed once each time you want SVC-99 to\n*     execute.\n*\n* 2.  The choice of VERB= are as follows.  Again, keywords correspond\n*     to names in the 'Job Management' manual.\n*       VERB=AL  dsn allocation        VERB=UN  dsn or ddn unallocation\n*       VERB=CC  concatenation         VERB=DC  deconcatenation\n*       VERB=RI  remove in-use         VERB=DN  ddn allocation\n*       VERB=IN  information retrieveal\n*\n*     Concatenation and deconcatenation aren't yet supported, but they\n*     will be.\n*\n* 3.  This macro has the ERRMSG=NO operand to suppress creating code to\n*     return the SVC-99 failure messages to the TSO terminal.  Use this\n*     operand when the CPPLPTR operand of the GTEDASET macro points to\n*     a fullword which does not contain the address of a CPPL.  When\n*     this operand is used, the SVC-99 return code and the error and\n*     info codes are still available to your program.  Only the writing\n*     of an error message to the terminal is suppressed.  E.g.:\n*\n*                         GTEDAALC  ADC,VERB=AL,ERRMSG=NO\n*\n*     Places the return and error/info codes in these areas:\n*\n*               +ADCS99RC DS     F        SVC-99 RETURN CODE\n*\n*               +ADCERROR DS     H        SVC-99 ERROR CODE\n*               +ADCINFO  DS     H        SVC-99 INFO CODE\n*\n*     The error and info codes are contiguous, and the error code is\n*     aligned on a fullword boundry.\n*\n*\n* MAPPING MACROS:\n*     The following mapping macros must appear in the source.  Base\n* registers do not need to be assigned.\n*\n*     IEFZB4D0                             Maps SVC-99 blocks\n*     IKJEFFDF DFDSECT=YES,DFDSEC2=YES     Maps IKJEFF18 control blocks\n* ---------------------------------------------------------------------\n         EJECT\n* ---------------------------------------------------------------------\n*                        *** EXAMPLE ***\n*\n* We want to allocate member CURVES of CAH0.PDS.DATA to file FT12F001,\n* and we want to allocate member SPLINE of the same dataset to file\n* FT14F001.  Dataset status should be SHR, and sequential organization\n* will be used.  Further, we want the program to be reenterable, so all\n* variable data will be located in storage obtained with GETMAIN.\n*\n* Choose operands for the GTEDADAT macro by reference to the 'Job\n* Management' manual.\n*\n*\n*\n*             PRINT NOGEN\n*    EXMPL1   LINKSAVE BASE=12,GETMAIN=YES           LINKAGE CNVNTNS\n*             LR    5,1                              HOLD CPPL ADDRESS\n*             GETMAIN R,LV=1024                      GET WORK STORAGE\n*             LR    11,1                             ADDRESSABILITY OF\n*             USING AREA1,11                           WORK STORAGE\n*              .       .\n*             ST    5,CPPLADDR                       SAVE CPPL ADDRESS\n*              .       .\n*              .       .\n*             MVC   XYZ(XYZLEN),ABC                  COPY TO WORK AREA\n*             GTEDASET XYZ,CPPLPTR=CPPLADDR          SET POINTERS\n*              .       .\n*              .       .\n*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT12F001\n*              .       .\n*              .       .\n*             MVC   XYZMEMBR,=C'SPLINE  '            CHANGE MEMBER NME\n*             MVC   XYZDDNAM,=C'FT14F001'            CHANGE FILE NAME\n*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT14F001\n*              .       .\n*              .       .\n*    ENDUP    FREEMAIN R,LV=1024,A=(11)              FREE STORAGE\n*             XR    15,15                            ZERO R/C\n*             LINKBACK                               LINKAGE CNVNTNS\n*              .       .\n*              .       .\n*              .       .\n*    ABC      GTEDADAT DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,              X\n*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES\n*              .       .\n*              .       .\n*    AREA1    DSECT\n*    CPPLADDR DS    F\n*    XYZ      GTEDADAT MAP=ONLY,DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,     X\n*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES\n*              .       .\n*              .       .\n*             IEFZB4D0\n*             IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n*             END\n* ---------------------------------------------------------------------\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDASET": {"ttr": 4875, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x00\\x850_\\x00\\x850_\\x13U\\x00V\\x00V\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:04", "lines": 86, "newlines": 86, "modlines": 0, "user": "HOFFMAN"}, "text": "         MACRO\n&LABEL   GTEDASET &NM,&CPPLPTR=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   SET POINTERS AND DATA FOR DYNAMIC ALLOCATION IN DATA AREAS   ***\n***   CREATED BY MACRO GTEDADAT.                                   ***\n**********************************************************************\n*\n**********************************************************************\n***      PLACE ADDRESS OF S99RB INTO S99RBPTR.                     ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB                       ==> R1 POINTS TO S99RB\n         ST    1,&NM.RBP                          FILL IN S99RBPTR\n         OI    &NM.RBP,X'80'                      TURN ON HI BIT\n*\n**********************************************************************\n***      FILL IN S99RB REQUEST BLOCK.                              ***\n***      MAPPING MACRO IEFZB4D0 MUST APPEAR IN SOURCE.             ***\n**********************************************************************\n*\n         MVI   (S99RBLN-S99RB)(1),X'14'           FILL IN LENGTH\n         MVI   (S99VERB-S99RB)(1),X'00'           ZERO VERB CODE\n         XC    (S99FLAG1-S99RB)(4,1),(S99FLAG1-S99RB)(1)   ZERO FLAGS1\n         OI    (S99FLAG1-S99RB)(1),S99ONCNV       SET FLAGS1 OK CONVRT\n         OI    (S99FLAG1-S99RB)(1),S99NOMNT       SET FLAGS1 NO MOUNT\n         LA    2,&NM.TUPL                     ==> R2 POINTS TO TUPL\n         ST    2,(S99TXTPP-S99RB)(0,1)            TUPL ADDR INTO RB\n         XC    (S99FLAG2-S99RB)(4,1),(S99FLAG2-S99RB)(1)   ZERO FLAGS2\n*\n**********************************************************************\n***  BUILD TUPL.                                                   ***\n***  KEY OF LAST TEXT UNIT MUST BE X'FF..'                         ***\n**********************************************************************\n*\n         LA    1,&NM.TU                       ==> R1 POINTS TO TUNITS\n         XR    0,0                                CLEAR R0 FOR COUNTER\n         XR    15,15                              CLEAR R15 WORK REG\n*\nRBA&SYSNDX CLI (S99TUKEY-S99TUNIT)(1),X'FF'       IF KEY IS X'FF..'\n         BE    RBD&SYSNDX                           BRANCH OUT OF LOOP\n         ST    1,0(0,2)                           ADDR OF KEY TO TUPL\n         LA    2,4(0,2)                           INCR POINTER TO TUPL\n*\n         ICM   0,3,(S99TUNUM-S99TUNIT)(1)         TU NUM TO R0\n         LA    1,4(0,1)                           R1 POINTS BEYOND NUM\n         LTR   0,0                                IF TU NUM IS 0\n         BZ    RBA&SYSNDX                         PROCESS NEXT TU\n*\n         ICM   15,3,0(1)                          TU LEN TO R15\n         LA    1,2(15,1)                          PNT BEYND LEN & PARM\n         BCT   0,*-8                              DO FOR EACH LEN+PARM\n*\n         B     RBA&SYSNDX                         PROCESS NEXT TU\n*\nRBD&SYSNDX LA  15,4(0,0)                          POINT TO LAST\n         SR    2,15                                 TUPL ENTRY\n         OI    0(2),S99TUPLN                      MARK LAST TUPL ENTRY\n*\n**********************************************************************\n***  FILL IN THE DAIRFAIL PARAMETER BLOCK.                         ***\n***  IKJEFFDF DFDSECT=YES,DFDSEC2=YES MUST APPEAR IN SOURCE.       ***\n**********************************************************************\n*\n         MVC   &NM.DFPRM+(DFS99RBP-DFDSECTD)(4),&NM.RBP *PTR TO RB\n*\n         LA    1,&NM.S99RC\n         ST    1,&NM.DFPRM+(DFRCP-DFDSECTD)             *PTR TO S99RC\n*\n         LA    1,&NM.F02EP\n         ST    1,&NM.DFPRM+(DFJEFF02-DFDSECTD)          *PTR TO EP\n*\n         LA    1,&NM.ID\n         ST    1,&NM.DFPRM+(DFIDP-DFDSECTD)             *PTR TO SW+ID\n*\n         MVC   &NM.DFPRM+(DFCPPLP-DFDSECTD)(4),&CPPLPTR *PTR TO CPPL\n*\n         XC  &NM.DFPRM+(DFBUFP-DFDSECTD)(4),&NM.DFPRM+(DFBUFP-DFDSECTD)\n*                                                       *ZERO BUFF ADDR\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INCPY": {"ttr": 4878, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n  SELECT MEMBER=((#INSTREA,INSTREAM,R),              <== HELP MEMBER   X\n               (#IN,IN,R))                           <== HELP ALIAS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INDOC": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x89\\x00\\x89\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 137, "newlines": 137, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                         INSTREAM Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n  The INSTREAM command is used to create 80-byte control card\n  images in a temporary file.  This command can be run under\n  CLIST control, with symbolic substitution of variables allowed.\n  INSTREAM uses VIO instead of datasets, and uses system\n  generated names instead of cataloging.\n\n  Syntax -\n\n    INSTREAM   DDNAME(name)  END(string)  CAPS  NOTIFY\n    IN           FILE(name)               ASIS  NONOTIFY\n\n\nDIRECTORY:\n\n    This PDS contains the following members relating to INSTREAM:\n\n    INDOC    - This documentation.\n    INJCL    - Non-SMP install jobstream.\n    #INSTREA - HELP member.\n    #IN      - Alias for HELP member.  Needed for IEBCOPY in\n               the non-SMP install.\n    INCPY    - IEBCOPY control cards.  Used in non-SMP install.\n    INLNK    - LKED control cards.  Used in non-SMP install.\n    INSTREAM - Source program.\n\n    EQ$R     - Register equates, described below.\n    GTEDAALC - Dynamic allocation macro, described below.\n    GTEDADAT - Dynamic allocation macro, described below.\n    GTEDADOC - Documentation for dynamic allocation macros,\n               described below.\n    GTEDASET - Dynamic allocation macro, described below.\n    LINKBACK - Linkage conventions, described below.\n    LINKSAVE - Linkage conventions, described below.\n\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  The following non-IBM macros are used to assemble\n          INSTREAM. If you already have older versions in your\n          system, replace them with the ones from this PDS.\n\n            EQ$R     - Register equates.\n            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).\n            GTEDADAT - Create SVC99/IKJEFF18 control blocks.\n            GTEDASET - Link SVC99/IKJEFF18 control blocks together.\n            LINKBACK - Linkage conventions out.\n            LINKSAVE - Linkage conventions in.\n\n(  )  2.  The following macro is documentation for the GTEDAxxx\n          macros, above.  It is not used by INSTREAM, but should\n          be copied into your system.\n\n            GTEDADOC - Documentation of GTEDAxxx macros.\n\n(  )  3.  For a non-SMP install, run the jobstream in member\n          INJCL of this PDS.  Recommended load libraries are:\n\n          A.  SYS1.CMDLIB\n          B.  library named on the LNKLST\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles INSTREAM using the source in member\n              INSTREAM of this PDS.\n\n              Note: Access to SYS1.AMODGEN is required because\n                    INSTREAM uses the CVT macro.\n\n          B.  Linkedits INSTREAM into the selected load library,\n              assigning an alias of IN.  Attributes are RENT,\n              REUS and REFR.\n\n          C.  IEBCOPYs member #INSTREA and alias entry #IN to the\n              selected HELP library, renaming them INSTREAM and\n              IN.\n\n(  )      For an SMP install, follow your installation's procedures\n          for installation of a RENT, REUS, REFR module into\n          LPALIB, LINKLIB, CMDLIB, or another library on the\n          LNKLST, with the HELP member being installed as a\n          ++MAC into HELP or another library in the SYSHELP\n          concatenation.   The ++MOD entry should have TALIAS(IN),\n          and the ++MAC entry should have MALIAS(IN).\n\n(  )  4.  If you select SYS1.LPALIB as your target library, you\n          will need to IPL, including 'CLPA' in the response to\n          the system parameters prompt.  This will create a new\n          LPA, picking up your INSTREAM and IN alias in the\n          process.\n\n(  )      If you have Dynamic BLDL, and already have a version\n          of INSTREAM installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n(  )      If you have ACF2 and are using command limiting lists,\n          and are not already running a version of INSTREAM, you\n          must do either one of the following:\n\n          A.  Turn the ALLCMDS bit on in the LOGONID of selected\n              users, and invoke INSTREAM with the '#' prefix.\n              That is, use the alias name #IN. This limits the\n              use of INSTREAM only to those LOGONIDs with the\n              ALLCMDS bit on.  Turn the bit on with the following\n              sequence from TSO READY state using a LOGONID with\n              appropriate authority to change the bit.\n\n                   ACF\n                   LIST logonid\n                   CHANGE * ALLCMDS\n                   END\n\n          B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes INSTREAM available to everyone.\n\n                   $TSOCMD  (INSTREAM,IN)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INJCL": {"ttr": 5124, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00>\\x00>\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 62, "newlines": 62, "modlines": 0, "user": "HOFFMAN"}, "text": "//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.CMDLIB',\n//             HELPLIB='SYST.HELP',\n//             CMDNAME=INSTREAM,LINKMEM=INLNK,COPYMEM=INCPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INLNK": {"ttr": 5126, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY INSTREAM('BASE')\n  ALIAS IN\n  NAME INSTREAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INSTREAM": {"ttr": 5128, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x02\\x94\\x02\\x94\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 660, "newlines": 660, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'INSTREAM - GET INPUT FROM TERMINAL OR CLIST'\n**********************************************************************\n***                                                                ***\n***                INSTREAM COMMAND  (ALIAS INS)                   ***\n***                                                                ***\n***  GENERAL FUNCTION:                                             ***\n***                                                                ***\n***      THIS COMMAND GETS INPUT FROM THE TERMINAL OR CLIST        ***\n***      COMMAND STACK AND WRITES IT TO A TEMPORARY DATASET        ***\n***      ALLOCATED TO A FILE NAME AND TEMPORARY DATASET NAME.      ***\n***      THE DEFAULTS ARE DATASET NAME &&SYSIN AND FILE NAME       ***\n***      SYSIN.  THE TEMPORARY DATASET NAME WILL MATCH THE         ***\n***      FILE NAME.                                                ***\n***                                                                ***\n***  FORMAT:                                                       ***\n***                                                                ***\n***    INSTREAM   DDNAME(NAME)  END(STRING)  CAPS  NOTIFY          ***\n***    IN           FILE(NAME)               ASIS  NONOTIFY        ***\n***                                                                ***\n***  REQUIRED:                                                     ***\n***    NONE                                                        ***\n***                                                                ***\n***  DEFAULTS:                                                     ***\n***    DDNAME(SYSIN) END(END) CAPS NOTIFY                          ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  RETURN CODES -                                                ***\n***       00 - NORMAL COMPLETION                                   ***\n***   NON-00 - CORRESPOND TO ERROR MESSAGES                        ***\n***                                                                ***\n***  REGISTER USAGE                                                ***\n***                                                                ***\n***      R0-R1 - MACROS, LINKAGE CONVENTIONS                       ***\n***      R2-R3 - MACROS, WORK                                      ***\n***      R4-R6 - WORK                                              ***\n***      R7-R8 - << NOT USED >>                                    ***\n***         R9 - BASE FOR PARM DESCRIPTOR LIST CREATED BY PARSE    ***\n***        R10 - BAL REGISTER                                      ***\n***        R11 - BASE FOR WORK1 PROGRAM VARIABLES AREA             ***\n***        R12 - BASE FOR PROGRAM                                  ***\n***        R13 - BASE OF WORK0 AREA, REG SAVE AREA AND CODES       ***\n***        R14 - MACROS, LINKAGE CONVENTIONS                       ***\n***        R15 - MACROS, WORK, LINKAGE CONVENTIONS                 ***\n***          +---------------------------------------------+       ***\n***          |  EXCEPT FOR BASE REGISTERS, DATA IS NEVER   |       ***\n***          |  PASSED IN REGISTERS BETWEEN SUBSECTIONS OF |       ***\n***          |  CODE.                                      |       ***\n***          +---------------------------------------------+       ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***     LINKSAVE - LINKAGE CONVENTIONS IN                          ***\n***     EQ$R     - REGISTER EQUATES                                ***\n***     LINKBACK - LINKAGE CONVENTIONS BACK                        ***\n***     GTEDADAT - CREATE SVC-99 AND IKJEFF18 CONTROL BLOCKS       ***\n***     GTEDASET - INITIALIZE AND LINK SVC-99 AND IKJEFF18 CONTROL ***\n***                BLOCKS                                          ***\n***     GTEDAALC - PERFORM DYNAMIC ALLOCATION AND DAIRFAIL         ***\n***                ANALYSIS OF FAILURES                            ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR, ALIAS(SAFEC)       ***\n***                                                                ***\n***  CULPRIT:                                                      ***\n***     CHUCK HOFFMAN                                              ***\n***     USER SERVICES CENTER                                       ***\n***     BUREAU OF SYSTEMS OPERATIONS (BSO)                         ***\n***     OFFICE OF MANAGEMENT INFORMATION SYSTEMS (OMIS)            ***\n***     EXECUTIVE OFFICE FOR ADMINISTRATION AND FINANCE (A&F)      ***\n***     COMMONWEALTH OF MASSACHUSETTS                              ***\n***     ONE ASHBURTON PLACE, ROOM 1619                             ***\n***     BOSTON, MA  02108                                          ***\n***                                 (617) 727-5725                 ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n         PRINT NOGEN\n**********************************************************************\n***                                                                ***\n***   PROLOGUE                                                     ***\n***                                                                ***\n**********************************************************************\n*\nINSTREAM LINKSAVE BASE=12,GETMAIN=YES\n         EQ$R\n         USING WORK0,R13                ADDRESSABILITY OF WORK0\n         USING PARMPDL,R9               ADDRESSABILITY OF PRM DESC LST\n         ST    R1,CPPLPTR               SAVE CPPL POINTER\n         GETMAIN  R,LV=WORK1LEN         GET MAIN STORAGE\n         LR    R11,R1                   ADDRESS OF MAIN STORAGE\n         USING WORK1,R11                ADDRESSABILITY OF WORK1\n         XC    COMPCODE,COMPCODE        CLEAR PROGRAM RETURN CODE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n         B     MAINLINE\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAIN LINE ROUTINE                                            ***\n***                                                                ***\n**********************************************************************\n*\nMAINLINE BAL   R10,PPLSETUP             SET UP PARSE PARM LIST\n         BAL   R10,PARSE                PARSE THE INPUT PARAMETERS\n*\n         BAL   R10,IOPLSET              SET UP IOPL AND GTPB\n*\n         BAL   R10,GETPARMS             GET THE PARMS\n*\n         BAL   R10,ALLOCOUT             ALLOCATE THE OUTPUT DATASET\n         CLC   RETCDE(4),DZIPS          IF RETCDE 0\n         BE    *+14                       BRANCH AROUND\n         MVC   COMPCODE(4),RETCDE       ELSE SET COMPLETION CODE\n         B     ENDING                     AND BRANCH TO ENDING\n*\n         BAL   R10,OPENSETS             OPEN THE DATASETS\n         CLC   RETCDE(4),DZIPS          IF RETCDE 0\n         BE    *+14                       BRANCH AROUND\n         MVC   COMPCODE(4),RETCDE       ELSE SET COMPLETION CODE\n         B     ENDING                     AND BRANCH TO ENDING\n*\n         BAL   R10,COPY                 COPY THE DATA\n         CLC   RETCDE(4),DZIPS          IF RETCDE 0\n         BE    *+14                       BRANCH AROUND\n         MVC   COMPCODE(4),RETCDE       ELSE SET COMPLETION CODE\n*\n         BAL   R10,CLOSSETS             CLOSE THE DATASETS\n*\n         B     ENDING                   BRANCH TO ENDING\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EPILOGUE                                                     ***\n***                                                                ***\n**********************************************************************\nENDING   LA       R4,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R4,0(0,R4)              R4 POINTS TO PDL\n         IKJRLSA  (R4)                    FREE STORAGE OF PDL\n*\n         CLC      COMPCODE,DZIPS          IF COMPLETION CODE NOT ZERO\n         BNE      ENDFREE                   BRANCH TO ENDING\n*\n         TM       SWITCH1,X'02'           IF 'NONOTIFY' SELECTED\n         BO       ENDFREE                   BRANCH TO ENDING\n         XC       RETCDE,RETCDE           ELSE SET CODE=00 FOR MSG 00\n         BAL      R10,MSGPUT                AND PUT OUT MESSAGE\n*\nENDFREE  FREEMAIN R,LV=WORK1LEN,A=(R11) , FREE MAIN STORAGE\n         LINKBACK RCADDR=COMPCODE\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST                             ***\n***                                                                ***\n**********************************************************************\nPPLSETUP ST    R10,PPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)\n         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)\n         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)\n         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)\n         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)\n         DROP  R4\n*\nPPEND    L     R10,PPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    R10,PAR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     R10,PAR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    SET UP THE INPUT OUTPUT PARM LIST.                          ***\n***                                                                ***\n***    IOPLIOPB, THE ADDR OF THE GETLINE/PUTLINE/PUTGET PARM       ***\n***    BLOCK WILL BE FILLED IN BEFORE EACH GETLINE/PUTLINE/PUTGET. ***\n***                                                                ***\n***    INITIALIZE MY GETLINE PARM BLOCK.                           ***\n***    INITIALIZE MY PUTLINE PARM BLOCK.                           ***\n***    INITIALIZE MY OUTPUT LINE DESCRIPTOR BLOCK.                 ***\n***                                                                ***\n**********************************************************************\nIOPLSET  ST    R10,IOR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               R4 POINTS TO CPPL\n         USING CPPL,R4                  ADDRESSABILITY\n         LA    R5,MYIOPL                R5 POINTS TO IOPL\n         USING IOPL,R5                  ADDRESSABILITY\n*\n         MVC   IOPLUPT(4),CPPLUPT       GET ADDR OF UPT FROM CPPL\n         MVC   IOPLECT(4),CPPLECT       GET ADDR OF ECT FROM CPPL\n         LA    R6,MYECB                 ADDR OF MY ECB\n         ST    R6,IOPLECB                 SET IN IOPL\n         XC    IOPLIOPB(4),IOPLIOPB     CLEAR IOPB ADDRESS\n*\n         MVC   MYGTPB(8),GTPBPROT       INITIALIZE MY GTPB\n*\n         MVC   MYPTPB(12),PTPBPROT      INITIALIZE MY PTPB\n*\n         MVC   MYOLD(8),OLDPROT         INITIALIZE MY OLD\n*\nIOEND    L     R10,IOR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\n         DROP  R4\n         DROP  R5\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    GET THE PARMS                                               ***\n***                                                                ***\n**********************************************************************\nGETPARMS ST    R10,GER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nGECAPS   CLC   KCAPS,H1                 IF CAPS OPERAND IN USE\n         BNE   *+8                        THEN\n         OI    SWITCH1,X'04'              TURN ON 'CAPS' SWITCH\n*\nGENOTE   CLC   KNOTE,H2                 IF NONOTIFY OPERAND IN USE\n         BNE   *+8                        THEN\n         OI    SWITCH1,X'02'              TURN ON 'NONOTIFY' SWITCH\n*\nGEND     L     R4,SBENDCH               R4 POINTS TO END CHARACTERS\n         LH    R5,SBENDCH+4             R5 IS LENGTH OF END CHARS\n         XC    ENDWORD(12),ENDWORD      CLEAR END WORD\n         A     R5,F4                    R5 IS LENGTH OF END INPUT\n         STH   R5,ENDWORD               SAVE THE LENGTH\n         S     R5,F5                    R5 IS LENGTH-1 OF CHARS\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   ENDWORD+4(0),0(R4)         MOVE CHARS TO STORAGE\n         EX    R5,*-6                   EXECUTE THE MOVE\n         TM    SWITCH1,X'04'            IF 'CAPS' NOT SELECTED\n         BNO   GEFILE                     GO TO NEXT ROUTINE\n         B     *+10                     BRANCH AROUND CAPITALIZE\n         TR    ENDWORD+4(0),CAPTABL       CAPITALIZE\n         EX    R5,*-6                   EXECUTE THE CAPITALIZE\n*\nGEFILE   L     R4,SBFILCH               R4 POINTS TO DDNAME\n         LH    R5,SBFILCH+4             R5 IS LENGTH OF DDNAME\n         BCTR  R5,0                       MINUS 1 FOR EXEC\n         MVC   DDNIN(8),BLANKS          CLEAR THE DDNAME FIELD\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   DDNIN(0),0(R4)             MOVE DDNAME TO STORAGE\n         EX    R5,*-6                   EXECUTE THE MOVE\n*\nGEEND    L     R10,GER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    ALLOCATE THE OUTPUT DATASET                                 ***\n***                                                                ***\n**********************************************************************\nALLOCOUT ST    R10,ALR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   DDB(DDBLEN),DD2          INITIALIZE CONTROL BLOCKS\n         MVC   DDBDDNAM(8),DDNIN        INSERT THE DDNAME\n         GTEDASET DDB,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n         GTEDAALC DDB,VERB=UN,ERRMSG=NO UNALLOCATE OUTPUT FILE\n*\n         MVC   DDA(256),DD1             INITIALIZE THE CONTROL\n         MVC   DDA+256(DDALEN-256),DD1+256  BLOCKS FOR SVC99/DAIRFAIL\n         MVC   DDADDNAM(8),DDNIN        INSERT THE DDNAME\n         MVC   DDADSNAM+2(8),DDNIN      CONSTRUCT DSN AS &&DDNAME\nALSET    GTEDASET DDA,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\nALALC    GTEDAALC DDA,VERB=AL           ALLOCATE THE DATASET\nALRETCK  CLC   DDAS99RC(4),DZIPS        IF RETURN NOT ZERO\n         BNE   ALERR04                    GO TO ERROR\n         B     ALEND\n*\nALERR04  LA    R15,X'04'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     ALEND                    GO TO ENDING\n*\nALEND    L     R10,ALR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    OPEN THE OUTPUT DATASET                                     ***\n***                                                                ***\n**********************************************************************\nOPENSETS ST    R10,OPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,OUTDCB                R5 POINTS TO OUTPUT DCB\n         USING IHADCB,R4                ADDRESSABILITY OF DCB\n*\n         MVC   OUTDCB(DCBOLEN),DCBPROTO INITIALIZE THE DCB\n         MVC   DCBDDNAM(8),DDNIN        SET THE DDNAME\n*\nOPENOUT  MVC   OPENLIST(4),OPENLO       MOVE OPTIONS TO LIST\n         LA    R5,OUTDCB                ADDRESS OF OUTPUT DCB\n         STCM  R5,7,OPENLIST+1            INTO OPEN PARM LIST\n         OPEN  MF=(E,OPENLIST)        , OPEN THE DATASET\n         TM    DCBOFLGS,X'10'           IF NOT SUCCESSFUL\n         BZ    OPERR08                    GO TO ERROR ROUTINE\n         B     OPEND                    ELSE GO TO ENDING\n*\n         DROP  R4\n*\nOPERR08  LA    R15,X'08'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     OPEND                    GO TO ENDING\n*\nOPEND    L     R10,OPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   CLOSE THE DATASETS                                           ***\n***                                                                ***\n**********************************************************************\nCLOSSETS ST    R10,CLR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nCLOSOUT  LA    R4,OUTDCB                ADDRESS OF INPUT DCB\n         MVC   CLOSLIST(4),CLOSPRTO     INITIALIZE PARM LIST\n         CLOSE ((R4)),MF=(E,CLOSLIST)   CLOSE THE DATASETS\n         LTR   R15,R15                  IF RETURN CODE NOT ZERO\n         BNZ   CLERR0C                    GO TO ERROR ROUTINE\n*\n         B     CLEND\n*\nCLERR0C  LA    R15,X'0C'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     CLEND                    GO TO ENDING\n*\nCLEND    L     R10,CLR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     PERFORM THE DATA COPY                                      ***\n***                                                                ***\n**********************************************************************\nCOPY     ST    R10,COR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nCOGET    BAL   R10,GTREC                GET A RECORD\n         CLC   RETCDE(4),DZIPS          IF RETURN NOT ZERO\n         BNE   COEOF                      TERMINATE INPUT\nCOPUT    BAL   R10,PTREC                PUT THE RECORD\n         B     COGET                    LOOP BACK UNTIL END OF FILE\n*\nCOEOF    B     COEND                    END OF FILE\n*\nCOEND    L     R10,COR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     GET AN INPUT RECORD                                        ***\n***                                                                ***\n***     GTTRM  IS USED TO GET DATA FROM THE KEYBOARD OR DATA       ***\n***       STACKED INSTREAM BY A CLIST.                             ***\n***                                                                ***\n**********************************************************************\nGTREC    ST    R10,GTR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nGTTRM    GETLINE PARM=MYGTPB,MF=(E,MYIOPL)  GET ONE LINE FROM STACK\n         C     R15,F4                   IF RETURN CODE GREATER THAN 4\n         BH    GTERR10                    BRANCH TO ERROR ROUTINE\n         L     R4,MYGTPB+4              R4 POINTS TO INPUT AREA\n         LH    R1,0(0,R4)               R1 IS TOTAL LENGTH OF INPUT\n         C     R1,F4                    IF INPUT IS 4 CHARS (NULL LINE)\n         BNH   COEOF                      BRANCH TO EODAD POINT\n*\n         XC    ENDCK(12),ENDCK          CLEAR THE WORK AREA\n         LH    R2,ENDWORD               R2 IS LENGTH OF AREA\n         BCTR  R2,0                       MINUS ONE FOR EXECS TO FOLLOW\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   ENDCK(0),0(R4)             MOVE TO CHECK WORD AREA\n         EX    R2,*-6                   EXECUTE THE MOVE\n*\n         TM    SWITCH1,X'04'            IF 'CAPS' NOT SELECTED\n         BNO   GTCOMPAR                   BRANCH TO COMPARE\n         B     *+10                     BRANCH AROUND CAPITALIZE\n         TR    ENDCK(0),CAPTABL           CAPITALIZE\n         EX    R2,*-6                   EXECUTE THE CAPITALIZE\n*\nGTCOMPAR B     *+10                     BRANCH AROUND COMPARE\n         CLC   ENDCK(0),ENDWORD           COMPARE WITH ENDWORD\n         EX    R2,*-6                   EXECUTE THE COMPARE\n         BE    COEOF                    IF INPUT EQUAL ENDWORD: EOF\n*\n         STH   R1,LRECLI                SAVE THE INPUT LENGTH\n         MVC   DATAWK24(80),BLANKS      CLEAR THE OUTPUT AREA\n         S     R1,F5                    R1 IS LEN -1 OF CHARACTERS\n         B     *+10                     BRANCH AROUND EXECUTED INSTR\n         MVC   DATAWK24(0),4(R4)          MOVE DATA TO OUTPUT AREA\n         EX    R1,*-6                   EXECUTE THE MOVE\n         TM    SWITCH1,X'04'            IF 'CAPS' NOT SELECTED\n         BNO   GTEND                      BRANCH TO ENDING\n         B     *+10                     BRANCH AROUND CAPITALIZE\n         TR    DATAWK24(0),CAPTABL        CAPITALIZE\n         EX    R1,*-6                   EXECUTE THE CAPITALIZE\n         B     GTEND                    GO TO ENDING\n*\nGTERR10  LA    R15,X'10'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     GTEND                    GO TO ENDING\n*\nGTEND    L     R10,GTR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     PUT AN OUTPUT RECORD                                       ***\n***                                                                ***\n**********************************************************************\nPTREC    ST    R10,PTR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,DATAWK24              ADDRESS OF OUTPUT AREA\n         PUT   OUTDCB,(R4)              PUT THE RECORD\n*\nPTEND    L     R10,PTR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     PUT A PUTLINE MESSAGE                                      ***\n***                                                                ***\n***                                                                ***\n***   +++  NOTE, RETCDE IS AN INPUT ARGUMENT.  IS NOT ZEROED.      ***\n***                                                                ***\n**********************************************************************\nMSGPUT   ST    R10,MSR10SAV             SAVE RETURN ADDRESS\n*\n         L     R4,RETCDE                R4 HAS OFFSET (MESSAGE NUMBER)\n         L     R4,MSGTBLA(R4)           R4 HAS ADDR OF MESSAGE\n         ST    R4,MYOLD+4               ADDRESS INTO O.L.D.\n*\n         PUTLINE PARM=MYPTPB,OUTPUT=MYOLD,MF=(E,MYIOPL)\n*\nMSEND    L     R10,MSR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA CONSTANTS                                               ***\n***                                                                ***\n**********************************************************************\nCONSTDTA DS    0D                       AREA FOR DATA CONSTANTS\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\nDZIPS    DS    0D                       DOUBLE WORD OF ZEROES\n         DC    2F'0'\nBLANKS   DC    CL80' '                  10 DOUBLE WORDS OF BLANKS\n*\nDD1      GTEDADAT  DDNAM=X,STATS=NEW,NDISP=PASS,CDISP=DELETE,          X\n               TRK=YES,PRIME=1,SECND=1,BLKSZ=80,DSORG=PS,LRECL=80,     X\n               RECFM=F,UNIT=DISK,DSNAM=&&&&\n*\nDD2      GTEDADAT  DDNAM=X,UNALC=X\n*\nMSGTBLA  DC    A(MSG00),A(MSG04),A(MSG08),A(MSG0C)\n         DC    A(MSG10)\n*\n         DS    0D\nDCBPROTO DCB   DSORG=PS,MACRF=PM\nDCBOLEN  EQU   *-DCBPROTO\n*\nOPENLO   OPEN  (,(OUTPUT)),MF=L\nCLOSPRTO CLOSE (),MF=L                  CLOSE PARM LIST, OUTPUT FILE\nF4       DC    F'4'                     CONSTANT\nF5       DC    F'5'                     CONSTANT\nF8       DC    F'8'                     CONSTANT\nF12      DC    F'12'                    CONSTANT\nF320     DC    F'320'                   CONSTANT\nH1       DC    H'1'                     CONSTANT\nH2       DC    H'2'                     CONSTANT\nGTPBPROT GETLINE MF=L\nPTPBPROT PUTLINE MF=L\nOLDPROT  DC    F'1',A(0)\n*SG--  DC  H'--',H'0',C'INS00--E .+....2....+....3....+....4....+....5.X\n               ...+....6....+....7\nMSG00  DC  H'40',H'0',C'INS0000I INSTREAM OPERATION COMPLETE'\nMSG04  DC  H'51',H'0',C'INS0004E UNABLE TO ALLOCATE OUTPUT FILE/DD NAMEX\n               '\nMSG08  DC  H'39',H'0',C'INS0008E UNABLE TO OPEN OUTPUT FILE'\nMSG0C  DC  H'40',H'0',C'INS000CE UNABLE TO CLOSE OUTPUT FILE'\nMSG10  DC  H'55',H'0',C'INS0010E UNABLE TO READ DATA FROM TERMINAL OR CX\n               LIST'\n*\nCAPTABL  DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    X'80',C'ABCDEFGHI',X'8A8B8C8D8E8F'\n         DC    X'90',C'JKLMNOPQR',X'9A9B9C9D9E9F'\n         DC    X'A0A1',C'STUVWXYZ',X'AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n*\nCONSTEND DS    0D\nCONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\nKEND     IKJKEYWD DEFAULT='END'\n         IKJNAME 'END',SUBFLD=SUBEND\n*\nKFILE    IKJKEYWD DEFAULT='FILE'\n         IKJNAME 'FILE',SUBFLD=SUBFILE,ALIAS=('DDNAME')\n*\nKCAPS    IKJKEYWD DEFAULT='CAPS'\n         IKJNAME 'CAPS'\n         IKJNAME 'ASIS'\n*\nKNOTE    IKJKEYWD DEFAULT='NOTIFY'\n         IKJNAME 'NOTIFY'\n         IKJNAME 'NONOTIFY'\n*\nSUBEND   IKJSUBF\nSBENDCH  IKJIDENT 'END OF FILE INDICATOR',                             X\n               ASIS,MAXLNTH=8,FIRST=ANY,OTHER=ANY,                     X\n               HELP='1-8 CHARACTERS (DEFAULT: END)',                   X\n               DEFAULT='END'\n*\nSUBFILE  IKJSUBF\nSBFILCH  IKJPOSIT DSNAME,DDNAM,                                        X\n               DEFAULT='SYSIN',                                        X\n               HELP='1-8 CHARACTER FILE NAME (DEFAULT: SYSIN)'\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA AREA OBTAINED WITH LINKSAVE                             ***\n***                                                                ***\n**********************************************************************\nWORK0    DSECT                          AREA-0 FOR VARIABLES\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nCPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nRETCDE   DS    F                        INTERNAL RETURN CODE\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  DATA VARIABLES                                                ***\n***                                                                ***\n**********************************************************************\nWORK1    DSECT                          AREA-1 FOR VARIABLES\nPPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPAR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nIOR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nGER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nALR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nOPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nCLR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nCOR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nGTR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPTR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nMSR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\nMYIOPL   DS    4F                       IOP LIST FOR PUT/GET LINE\nMYPTPB   DS    3F                       PUTLINE PARM BLOCK\nMYGTPB   DS    2F                       GETLINE PARM BLOCK\nMYOLD    DS    2F                       OUTPUT LINE DESCRIPTR BLOCK\nDDNIN    DS    CL8                      INPUT DDNAME\n*\nDDA      GTEDADAT  MAP=ONLY,                                           X\n               DDNAM=X,STATS=NEW,NDISP=PASS,CDISP=DELETE,              X\n               TRK=YES,PRIME=1,SECND=1,BLKSZ=80,DSORG=PS,LRECL=80,     X\n               RECFM=F,UNIT=DISK,DSNAM=&&&&\nDDB      GTEDADAT  MAP=ONLY,DDNAM=X,UNALC=X\nOPENLIST DS    2F                       PARM LIST FOR OPEN\nCLOSLIST DS    F                        PARM LIST FOR CLOSE\nOUTDCB   DCB   DSORG=PS,MACRF=PM\nLRECLI   DS    H                        INPUT LRECL\nSWITCH1  DC    B'00000000'              SWITCHES AREA #1\n*                .....1..   X'04'         'CAPS' OPERAND IS IN USE\n*                ......1.   X'02'         'NONOTIFY' OPERAND IS IN USE\n*\n         DS    0F                       ALIGN\nENDWORD  DS    0XL12                    LITERAL FOR 'END'\n         DS    H                          TOTAL LENGTH (CHARS+4)\n         DS    H                          X'0000' OFFSET\n         DS    CL8                        CHARACTERS FROM PARM\nENDCK    DS    CL12                     WORK AREA FOR 'END'\n*\nTEMPNUM  DS    CL8                      TEMP STORAGE FOR LINE NUMBER\nOUTBEGIN DS    F\n*\nDATAWK24 DS    XL320                    OUTPUT AREA\n*\nWORK1END DS    0D\nWORK1LEN EQU   *-WORK1                  TOTAL LENGTH OF WORK-1 AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAPPING MACROS                                               ***\n***                                                                ***\n**********************************************************************\n         CVT   DSECT=YES              , CVTMAP FOR IKJPARS\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n         IKJIOPL                        IO PARM LIST FOR GET/PUTLINE\n         IKJGTPB                        GETLINE PARM BLOCK\n         IKJPTPB                        PUTLINE PARM BLOCK\n         IEFZB4D0                       MAPS SVC-99 CONTROL BLOCKS\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES  MAPS IKJEFF18 CONTROL BLOCKS\n         IHADCB DSORG=PS,DEVD=DA      , MAPS THE DCB FOR DA DEVICES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCALLCPY": {"ttr": 5383, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n  SELECT MEMBER=((#LIBCALL,LIBCALL,R),               <== HELP MEMBER   X\n               (#LCALL,LCALL,R))                     <== HELP ALIAS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCALLDOC": {"ttr": 5385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x97\\x00\\x97\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 151, "newlines": 151, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                         LIBCALL Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n    LIBCALL transfers control to modules with a 'CALL' type of\n    parameter list, with a 'STEPLIB' option.  LIBCALL also can\n    accept program parameters in lower case.\n\n    Syntax -\n\n      LIBCALL   name  'parm'  CAPS  SYSLIBS                              TS04902\n      LCALL                   ASIS  STEPLIB('dsn1' 'dsn2' ...)           TS04902\n                                    TASKLIB('dsn1' 'dsn2' ...)           TS04902\n                                        LIB('dsn1' 'dsn2' ...)           TS04902\n                                     CONCAT('dsn1' 'dsn2' ...)           TS04902\n\nDIRECTORY:\n\n    This PDS contains the following members relating to LIBCALL:\n\n    LCALLDOC - This documentation.\n    LCALLJCL - Non-SMP install jobstream.\n    #LIBCALL - HELP member.\n    #LCALL   - Alias for HELP member.  Needed for IEBCOPY in\n               the non-SMP install.\n    LCALLCPY - IEBCOPY control cards.  Used in non-SMP install.\n    LCALLLNK - LKED control cards.  Used in non-SMP install.\n    LIBCALL  - Source program.\n\n    GTEDAALC - Dynamic allocation macro, described below.\n    GTEDADAT - Dynamic allocation macro, described below.\n    GTEDADOC - Documentation for dynamic allocation macros,\n               described below.\n    GTEDASET - Dynamic allocation macro, described below.\n\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  The following non-IBM macros are used to assemble\n          LIBCALL. If you already have older versions in your\n          system, replace them with the ones from this PDS.\n\n            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).\n            GTEDADAT - Create SVC99/IKJEFF18 control blocks.\n            GTEDASET - Link SVC99/IKJEFF18 control blocks together.\n\n(  )  2.  The following macro is documentation for the GTEDAxxx\n          macros, above.  It is not used by LIBCALL, but should\n          be copied into your system.\n\n            GTEDADOC - Documentation of GTEDAxxx macros.\n\n(  )  3.  For a non-SMP install, run the jobstream in member\n          LCALLJCL of this PDS. Recommended load libraries are:\n\n          A.  SYS1.CMDLIB\n          B.  library named on the LNKLST\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles LIBCALL using the source in member\n              LIBCALL of this PDS.\n\n              Note: Access to SYS1.AMODGEN is required because\n                    LIBCALL uses the CVT macro.\n\n          B.  Linkedits LIBCALL into the selected load library,\n              assigning an alias of LCALL. Attributes are RENT,\n              REUS and REFR.\n\n          C.  IEBCOPYs member #LIBCALL and alias entry #LCALL to the\n              selected HELP library, renaming them LIBCALL and\n              LCALL.\n\n(  )      For an SMP install, follow your installation's procedures\n          for installation of a RENT, REUS, REFR module into\n          LPALIB, LINKLIB, CMDLIB, or another library on the\n          LNKLST, with the HELP member being installed as a\n          ++MAC into HELP or another library in the SYSHELP\n          concatenation.   The ++MOD entry should have TALIAS(LCALL),\n          and the ++MAC entry should have MALIAS(LCALL).\n\n(  )  4.  If you select SYS1.LPALIB as your target library, you\n          will need to IPL, including 'CLPA' in the response to\n          the system parameters prompt.  This will create a new\n          LPA, picking up your LIBCALL and LCALL alias in the\n          process.\n\n(  )      If you have Dynamic BLDL, and already have a version\n          of LIBCALL installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n(  )      If you have ACF2, the following addition must be made\n          to the ACF99@RB macro to define program pathing for\n          LIBCALL to be the same as for CALL.  Without this\n          change, ACF2 will not allow programs executing under\n          LIBCALL to access datasets for which there are dataset\n          access rules.  Refer to the ACF2 System Programmer's\n          Guide for information concerning program pathing, and\n          updating the ACF99@RB macro.\n\n          *\n          *\n          *        LIBCALL COMMAND STRUCTURE\n          *        -------------------------\n          *\n          LIBCALL  @CMD  LCALL\n                   @TCB  (#LIBCALL,#LCALL)\n          #LIBCALL @RB   LIBCALL,CALL,END,CMD=(CMD,NEXTTCB)\n          #LCALL   @RB   LCALL,CALL,END,CMD=(CMD,NEXTTCB)\n\n(  )      If you have ACF2 and are using command limiting lists,\n          and are not already running a version of LIBCALL, you\n          must do either one of the following:\n\n          A.  Turn the ALLCMDS bit on in the LOGONID of selected\n              users, and invoke LIBCALL with the '#' prefix.\n              That is, use the name #LIBCALL or alias #LCALL. This\n              limits the use of LIBCALL only to those LOGONIDs\n              with the ALLCMDS bit on.  Turn the bit on with the\n              following sequence from TSO READY state using a\n              LOGONID with appropriate authority to change the\n              bit.\n\n                   ACF\n                   LIST logonid\n                   CHANGE * ALLCMDS\n                   END\n\n          B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes LIBCALL available to everyone.\n\n                   $TSOCMD  (LIBCALL,LCALL)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LCALLJCL": {"ttr": 5389, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00>\\x00>\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 62, "newlines": 62, "modlines": 0, "user": "HOFFMAN"}, "text": "//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.CMDLIB',\n//             HELPLIB='SYST.HELP',\n//             CMDNAME=LIBCALL,LINKMEM=LCALLLNK,COPYMEM=LCALLCPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCALLLNK": {"ttr": 5391, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY LIBCALL('CAH84284A TS05102')\n  ALIAS LCALL\n  NAME LIBCALL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LIBCALL": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x02\\xcd\\x02\\xcd\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 717, "newlines": 717, "modlines": 0, "user": "HOFFMAN"}, "text": "         PRINT NOGEN\n         TITLE 'LIBCALL - CALL A LPA/LNKLST OR TASKLIB MODULE'\n**********************************************************************\n***                                                                ***\n***                      LIBCALL COMMAND                           ***\n***                                                                ***\n***  GENERAL FUNCTION:                                             ***\n***                                                                ***\n***     TRANSFER CONTROL TO MODULES IN JPA/LPA/LINKLIST WITH       ***\n***     A 'CALL' TYPE PARAMETER LIST.  THIS ALLOWS THE USER TO     ***\n***     INVOKE PROGRAMS WITHOUT HAVING TO KNOW THE NAME OF THE     ***\n***     LIBRARIES THEY ARE IN.                                CAH84198A\n***                                                           CAH84198A\n***                                                                ***\n***     THE USE OF THE 'STEPLIB' OPERAND WILL CAUSE THE USE   CAH84198A\n***     OF A CONCATENATION OF LIBRARY NAMES AS A TASKLIB,     CAH84198A\n***     AHEAD OF THE USE OF JPA/LPA/LINKLIST MODULES.  THE    CAH84198A\n***     LIBRARIES WILL BE ALLOCATED AND CONCATENATED BEFORE   CAH84198A\n***     TRANSFER OF CONTROL TO THE MODULE.  CONTROL WILL BE   CAH84198A\n***     TRANSFERRED WITH THE ATTACH SVC (SVC 42).  AFTER      CAH84198A\n***     MODULE EXECUTION, CONTROL WILL RETURN TO THIS COMMAND CAH84198A\n***     PROCESSOR, WHERE THE PROGRAM WILL BE DETACHED, AND    CAH84198A\n***     THE LIBRARIES WILL BE DECONCATENATED, AND MARKED NOT  CAH84198A\n***     IN USE.                                               CAH84198A\n***                                                           CAH84198A\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  FORMAT:                                                       ***\n***                                                                ***\n***  LIBCALL  NAME  'PARMS'  CAPS  SYSLIBS                    CAH84160A\n***  LCALL                   ASIS  STEPLIB('DSN1' 'DSN2' ...) CAH84160A\n***                                TASKLIB('DSN1' 'DSN2' ...) CAH84198A\n***                                    LIB('DSN1' 'DSN2' ...) CAH84160A\n***                                 CONCAT('DSN1' 'DSN2' ...) CAH84160A\n***                                                                ***\n***    ALIAS:  LCALL                                               ***\n***                                                                ***\n***    REQUIRED:                                                   ***\n***      1.  NAME - LIBCALL WILL PROMPT FOR NAME IF NOT SUPPLIED.  ***\n***                                                                ***\n***    DEFAULTS:                                                   ***\n***      1.  SYSLIBS - SYSTEM LIBRARIES AND PROGRAM AREAS.         ***\n***      2.  CAPS - IF A 'PARM' IS USED, SHIFT TO UPPER CASE. CAH84160A\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  RETURN CODES -                                                ***\n***       RETURN CODE IS THE CODE FROM THE EXECUTED MODULE.        ***\n***                                                                ***\n***  REGISTER USAGE                                                ***\n***       R0-R2  LINKAGE CONVENTIONS, MACROS                       ***\n***          R3  (NOT USED)                                        ***\n***          R4  WORK, TEMPORARY BASE OF PDE                       ***\n***       R5-R6  WORK                                              ***\n***       R7-R8  (NOT USED)                                        ***\n***          R9  BASE OF PARM DESCRIPTOR ELEMENT LIST (PDL)        ***\n***         R10  BAL REGISTER                                      ***\n***         R11  (NOT USED)                                   CAH84198A\n***         R12  PROGRAM BASE REGISTER                             ***\n***         R13  LINKAGE CONVENTIONS, BASE OF AREA IN SP-000       ***\n***     R14-R15  LINKAGE CONVENTIONS                               ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***     GTEDADAT  - CREATE CONTROL BLOCKS FOR DYNALLOC/DAIRFAIL    ***\n***     GTEDASET  - LINK CONTROL BLOCKS TOGETHER                   ***\n***     GTEDAALC  - EXECUTE DYNALLOC/DAIRFAIL                      ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  REUS,RENT,REFR  ALIAS(LCALL)         ***\n***                                                                ***\n***  CULPRIT:                                                      ***\n***     CHUCK HOFFMAN                                              ***\n***     USER SERVICES CENTER                                       ***\n***     BUREAU OF SYSTEMS OPERATIONS (BSO)                         ***\n***     OFFICE OF MANAGEMENT INFORMATION SYSTEMS (OMIS)            ***\n***     EXECUTIVE OFFICE FOR ADMINISTRATION AND FINANCE (A&F)      ***\n***     COMMONWEALTH OF MASSACHUSETTS                              ***\n***     ONE ASHBURTON PLACE, ROOM 1619                             ***\n***     BOSTON, MA  02108                                          ***\n***                                 (617) 727-5725                 ***\n***  ALIAS:                                           TS05103 CAH84284A\n***     CHUCK HOFFMAN                                 TS05103 CAH84284A\n***     GTE LABORATORIES COMPUTER CENTER              TS05103 CAH84284A\n***     40 SYLVAN ROAD                                TS05103 CAH84284A\n***     WALTHAM, MA  02254-1168                       TS05103 CAH84284A\n***                                 (617) 466-2131    TS05103 CAH84284A\n***                                 (V/N) 679-2131    TS05103 CAH84284A\n***                                                   TS05103 CAH84284A\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***  1.  A.  ADD CAPS/ASIS OPERAND.                           CAH84160A\n***      B.  CHANGE PARM OPERAND FROM CAPS TO ASIS.           CAH84160A\n***      C.  IF CAPS IS SELECTED, TRANSLATE PARM TO UPPER     CAH84160A\n***          CASE.                                            CAH84160A\n***                                                           CAH84160A\n***  2.  A.  CHANGE FROM LINK MACRO TO ATTACH MACRO FOR       CAH84198A\n***          EXECUTION OF COMMAND WITH 'LIB' OPERAND.         CAH84198A\n***      B.  CHANGE FROM XCTL MACRO TO ATTACH MACRO FOR       CAH84198A\n***          EXECUTION WITHOUT 'LIB' OPERAND.                 CAH84198A\n***      C.  ADD 'TASKLIB' ALIAS FOR 'LIB' OPERAND.           CAH84198A\n***      D.  CHANGE WORDING OF PROMPT FOR PROGRAM NAME.       CAH84198A\n***      E.  CHANGE COMMENTS REFERRING TO 'SYSLIST' OPERAND   CAH84198A\n***          TO REFER TO 'SYSLIBS' OPERAND.                   CAH84198A\n***      F.  PUT PARAMETERS INTO SP-000 INSTEAD OF SP-001.    CAH84198A\n***      G.  SHARE SP-078 WITH THE ATTACHED TASK.             CAH84198A\n***                                                           CAH84198A\n***  3.  A.  ADD ALTERNATE PROGRAMMER ID INFORMATION. TS05103 CAH84284A\n***      B.  FIX LOSS OF RETURN CODE DURING WAIT      TS05103 CAH84284A\n***          AFTER ATTACH.                            TS05103 CAH84284A\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PROLOGUE                                                     ***\n***                                                                ***\n**********************************************************************\n*\nLIBCALL  CSECT\n         STM   R14,R12,12(R13)          SAVE INTO CALLERS S.A.\n         B     BASE-LIBCALL(0,R15)      BRANCH TO AROUND EYECATCHER\n         DC    AL1(L'NAME)                LENGTH OF NAME\nNAME     DC    C'LIBCALL'                 MODULE NAME\n         DC    C' &SYSDATE &SYSTIME '     DD.MM.YY HH.MM\nBASE     LR    RBASE,R15                RBASE IS BASE REGISTER\n         USING LIBCALL,RBASE              TELL ASSEMBLER\n         GETMAIN  R,LV=WORK0LEN,SP=0    GET AREA FOR MYSAVE AND WORK\n         ST    R13,4(0,R1)              CALLERS S.A. ADDR TO MY S.A.\n         ST    R1,8(0,R13)              MY S.A. ADDR TO CALLERS S.A.\n         LM    R15,R1,16(R13)           RESTORE REGS USED BY GETMAIN\n         L     R13,8(0,R13)             R13 POINTS TO MY S.A.\n         USING WORK0,R13                  TELL ASSEMBLER\n*\n         USING PARMPDL,R9               ADDRESSABILITY OF PDE LIST\n*\n         ST    R1,CPPLPTR               SAVE CPPL POINTER\n*\n         MVC   SWITCH1(1),INIT1         INITIALIZE SWITCHES\n*\n         B     MAINLINE\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAIN LINE ROUTINE                                            ***\n***                                                                ***\n**********************************************************************\n*\nMAINLINE BAL   RBAL,PPLSETUP            SET UP PARSE PARM LIST\n         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS\n         BAL   RBAL,MOVEDATA            MOVE THE PARM DATA\n         BAL   RBAL,LIBS                PARSE THE LIBS PARAMETER\n         BAL   RBAL,CONCAT              CONCATENATE THE LIBRARIES\n         BAL   RBAL,XFER                TRANSFER CONTROL\n         BAL   RBAL,DECONCAT            DECONCATENATE THE LIBRARIES\n*\n         B     ENDING                   BRANCH TO ENDING\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EPILOGUE                                                     ***\n***                                                                ***\n**********************************************************************\nENDING   LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R2,0(0,R2)              R4 POINTS TO PDL\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL\n*\n         L        R14,COMPCODE            R14 TEMPORARILY HAS COMP CODE\n         LR       R15,R13                 R15 HAS MY SAVE AREA ADDRESS\n         L        R13,4(0,R13)            R13 RESTORE, PNT TO CALLER SA\n         FREEMAIN R,LV=WORK0LEN,SP=0,A=(R15)  FREE MYSAVE,COMPCODE,ETC\n         LM       R0,R12,20(R13)          R0-R12 RESTORE FROM CALLER SA\n         LR       R15,R14                 R15 GETS COMP CODE\n         L        R14,12(0,R13)           R14 RESTORE FROM CALLERS S.A.\n         MVI      12(R13),X'FF'           SIGNAL MODULE COMPLETE\n         BR       R14                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST                             ***\n***                                                                ***\n**********************************************************************\nPPLSETUP ST    RBAL,PPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)\n         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)\n         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)\n         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)\n         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)\n         DROP  R4\n*\nPPEND    L     RBAL,PPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    MOVE THE PARM DATA FOR PROGRAM NAME AND PROB PROGRAM PARM   ***\n***                                                                ***\n**********************************************************************\nMOVEDATA ST    RBAL,MORBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,PARMNAME              R4 BASE OF PDE FOR PARM NAME\n         USING PPDE,R4                    TELL THE ASSEMBLER\n*\n         MVC   MYNAME(8),BLANKS         CLEAR THE NAME FIELD\n         L     R5,PPDEADR               R5 POINTS TO PARM NAME\n         LH    R6,PPDELTH               R6 IS LENGTH OF NAME\n         BCTR  R6,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   MYNAME(0),0(R5)            MOVE THE NAME\n         EX    R6,*-6                   EXECUTE THE MOVE\n*\n         LA    R4,PARMSTNG              R4 BASE OF PDE FOR PARM STRING\n*\n         LA    R5,MYPARM                ADDRESS OF PARM (LENGTH+CHAR)\n         ST    R5,MYPARML                 INTO PARM LIST\n         OI    MYPARML+00,X'80'           MARK END OF LIST\n         XC    MYPARM(102),MYPARM       CLEAR MYPLEN AND MYPCHAR\n         TM    PPDEFLG,X'80'            IF NO CHARACTER STRING PRESENT\n         BZ    MOEND                      BRANCH OUT\n         L     R5,PPDEADR               R5 POINTS TO PARM CHARS\n         LH    R6,PPDELTH               R6 IS LENGTH OF CHARS\n         LTR   R6,R6                    IF CHAR STRING NOT POSITIVE LEN\n         BNP   MOEND                      BRANCH OUT\n         STH   R6,MYPLEN                SAVE TO PASS TO PROGRAM\n         BCTR  R6,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   MYPCHAR(0),0(R5)           MOVE THE CHARS\n         EX    R6,*-6                   EXECUTE THE MOVE\n         CLC   PARMCASE(2),H1           IF 'CAPS' NOT USED    CAH84160A\n         BNE   MOEND                      BRANCH TO ENDING    CAH84160A\n         B     *+10                     BRANCH AROUND TRANSLT CAH84160A\n         TR    MYPCHAR(0),CAPTABL         TRANSL TO UPPER CSE CAH84160A\n         EX    R6,*-6                   EXECUTE THE TRANSLATE CAH84160A\n*\n         DROP  R4                       END ADDRESSABILITY OF PDE\n*\nMOEND    L     RBAL,MORBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    GET LIBRARY NAMES FROM THE LIB PARAMETER, IF ANY            ***\n***                                                                ***\n**********************************************************************\nLIBS     ST    RBAL,LIRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    CCNUM,CCNUM              SET DSN COUNT TO ZERO\n         CLC   PARMLIB(2),H2            IF SYSLIBS PARM USED  CAH84198A\n         BE    LINOLIB                    SET FLAG AND BYPASS PROC.\n*\n         LA    R4,LIBNAMES              POINT TO FIRST DSN PDE\n         USING PDSN,R4                  ADDRESSABILITY\n*\n         MVC   CCKEY(2),H1              SET CONCATENATION TEXT KEY\n         XC    CCNUM(2),CCNUM           SET CONCATENATION TEXT NUMB.\n         LA    R0,CCDATA                POINT TO FIRST TEXT LEN\n         ST    R0,CCNEXTAD              SET THE ADDRESS\n*\n         MVC   XYZ(XYZLEN),ABC          INITIALIZE DATA FOR ALLOC\n         GTEDASET XYZ,CPPLPTR=CPPLPTR   LINK DATA TOGETHER\n*\nLINAMES  CLC   PDSNDADR(4),F0           IF NO ADDRESS\n         BE    LIEND                      BRANCH OUT\n*\n         BAL   RBAL,CCTEXT              BUILD 1 CONCATENATION T.U.\n*\n         CLC   PDSNNEXT(4),FF000000     IF END OF CHAIN\n         BE    LIEND                      BRANCH OUT\n         L     R4,PDSNNEXT              ELSE LOAD THE NEXT ADDRESS\n         B     LINAMES                    AND LOOP BACK UP\n*\nLINOLIB  OI    SWITCH1,X'80'            TURN ON NOLIB SWITCH\n         B     LIEND                    GO TO ENDING\n*\nLIEND    L     RBAL,LIRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    ADD ONE DDNAME INTO TEXT UNIT FOR CONCATENATION             ***\n***                                                                ***\n**********************************************************************\nCCTEXT   ST    RBAL,CCRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LH    R1,PDSNDLTH              R1 HAS LENGTH OF DSN\n         BCTR  R1,0                       MINUS 1 FOR EXEC\n         L     R2,PDSNDADR              R2 POINTS TO DSN\n         MVC   XYZDSNAM(44),BLANKS      INITIALIZE T.U. DSNAME FIELD\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   XYZDSNAM(0),0(R2)          MOVE NAME TO TEXT UNIT\n         EX    R1,*-6                   EXECUTE THE MOVE\n*\n         GTEDAALC XYZ,VERB=AL           ALLOCATE THE DATASET\n         CLC   XYZS99RC(4),F0           IF R/C NOT ZERO\n         BNE   CCERROR                    BRANCH TO ERROR\n*\n         L     R1,CCNEXTAD              R1 POINTS TO NEXT BYTE OF T.U.\n         XR    R2,R2                    CLEAR R2 FOR INSERT\n         ICM   R2,3,XYZRTDDN-2            R2 IS LENGTH OF NEXT NAME\n         LA    R2,2(0,R2)                 PLUS 2 FOR LENGTH FIELD\n         BCTR  R2,0                       MINUS ONE FOR EXEC\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   0(0,R1),XYZRTDDN-2         MOVE LENGTH AND DDNAME\n         EX    R2,*-6                   EXECUTE THE MOVE\n         LA    R1,1(R2,R1)              POINT TO NEXT FREE BYTE OF TU.\n         ST    R1,CCNEXTAD                SAVE THE ADDRESS\n         LH    R1,CCNUM                 INCREMENT THE\n         LA    R1,1(0,R1)                 NUMBER OF\n         STH   R1,CCNUM                     DDNAMES IN TEXT UNIT\n         B     CCEND                    BRANCH TO END\n*\nCCERROR  LA    R15,8(0,0)               SET AN ERROR CODE\n         ST    R15,RETCDE                 SAVE IT\n         B     CCEND                    BRANCH TO END\n*\nCCEND    L     RBAL,CCRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***      CONCATENATE THE LIBRARY FILES                             ***\n***                                                                ***\n**********************************************************************\nCONCAT   ST    RBAL,CORBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TM    SWITCH1,X'80'            IF SYSLIBS PARM USED  CAH84198A\n         BO    COEND                      BRANCH TO ENDING\n*\n         CLC   CCNUM(2),H0              IF LIB USED, BUT NO NAMES\n         BNE   *+12                       THEN\n         OI    SWITCH1,X'80'                TURN ON 'NOLIB' SWITCH\n         B     COEND                        BRANCH TO ENDING\n*\n         CLC   CCNUM(2),H1              IF LESS THAN 2 NAMES\n         BH    COCC                       THEN\n         OI    SWITCH1,X'40'                SET '<2' SWITCH\n         B     CODCB                        SKIP CONCATENATION\n*\nCOCC     LA    R1,CCTUPL                R1 POINTER TO CONCAT. TUPL\n         ST    R1,XYZRB+(S99TXTPP-S99RB)  SAVE IN REQUEST BLOCK\n         LA    R1,CCTEXTUT              R1 POINTER TO CONCAT TEXT UNIT\n         ST    R1,CCTUPL                  SAVE IN CONCAT TUPL\n         OI    CCTUPL,X'80'             MARK END OF LIST\n         GTEDAALC XYZ,VERB=CC           CONCATENATE\n         CLC   XYZS99RC(4),F0           IF R/C NOT ZERO\n         BNE   COERROR                    BRANCH TO END\n*\nCODCB    MVC   LIBSDCB(LIBSDCBL),PODCB  INITIALIZE THE DCB\n*\n         LA    R5,LIBSDCB               ADDRESSABILITY OF\n         USING IHADCB,R5                  INPUT DCB\n         MVC   DCBDDNAM(8),BLANKS       INITIALIZE DDNAME\n         XR    R6,R6                    CLEAR R6 FOR INSERT\n         ICM   R6,3,CCDATA              R6 HAS LEN OF CONCAT DDNAME\n         BCTR  R6,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND THE MOVE\n         MVC   DCBDDNAM(0),CCDATA+2       MOVE THE DDNAME TO DCB\n         EX    R6,*-6                   EXECUTE THE MOVE\n         B     COEND                    BRANCH TO ENDING\n*\nCOERROR  LA    R15,8(0,0)               SET INTERNAL CODE TO 8\n         ST    R15,RETCDE               SAVE IT\n         B     COEND                    BRANCH TO ENDING\n*\nCOEND    L     RBAL,CORBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***      TRANSFER CONTROL TO THE PROBLEM PROGRAM MODULE            ***\n***                                                                ***\n**********************************************************************\nXFER     ST    RBAL,XFRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R5,MYNAME                R5 PNTS TO MODULE NAM CAH84198A\n         LA    R6,ATTECB                R6 PNTS TO ECB        CAH84198A\n*                                                             CAH84198A\n         LH    R0,CCNUM                 R0 IS NO OF LIB NAMES CAH84198A\n         CH    R0,H0                    IF NONE               CAH84198A\n         BE    XFXCTL                     NO TASKLIB          CAH84198A\n         B     XFLINK                   ELSE USE TASKLIB      CAH84198A\n*                                                             CAH84198A\nXFXCTL   MVC   ATCHL(ATCHLLTH),ATCHD    INITIALIZE CTRL LIST  CAH84198A\n         XC    ATTECB,ATTECB            CLEAR ECB             CAH84198A\n         LA    R1,MYPARML               R1 PNTS TO PARM ADDR  CAH84198A\n         ATTACH EPLOC=(R5),ECB=(R6),SF=(E,ATCHL),                      X\n               SHSPV=78                                       CAH84198A\n         ST    R1,ATTTCBAD              SAVE THE TCB ADDRESS  CAH84198A\n         WAIT  1,ECB=ATTECB             WAIT ON THE TASK      CAH84198A\n         MVC   COMPCODE(4),ATTECB       SAVE ECB R/C  TS05103 CAH84284A\n         DETACH ATTTCBAD                DETACH THE TASK       CAH84198A\n         B     XFEND                                          CAH84198A\n*                                                             CAH84198A\nXFLINK   LA    R2,LIBSDCB               R2 HAS TASKLIB ADDR   CAH84198A\n         MVC   OPENL(8),OPEND           INIT OPEN PARM LIST   CAH84198A\n         OPEN  (LIBSDCB,(INPUT)),MF=(E,OPENL)  OPEN TASKLIB   CAH84198A\n         MVC   ATCHL(ATCHLLTH),ATCHD    INITIALIZE CTRL LIST  CAH84198A\n         XC    ATTECB,ATTECB            CLEAR ECB             CAH84198A\n         LA    R1,MYPARML               R1 PNTS TO PARM ADDR  CAH84198A\n         ATTACH EPLOC=(R5),TASKLIB=(R2),ECB=(R6),SF=(E,ATCHL),         X\n               SHSPV=78                                       CAH84198A\n         ST    R1,ATTTCBAD              SAVE THE TCB ADDRESS  CAH84198A\n         WAIT  1,ECB=ATTECB             WAIT ON THE TASK      CAH84198A\n         MVC   COMPCODE(4),ATTECB       SAVE ECB R/C  TS05103 CAH84284A\n         DETACH ATTTCBAD                DETACH THE TASK       CAH84198A\n         MVC   CLOSEL(8),CLOSED         INIT CLOSE PARM LIST  CAH84198A\n         CLOSE (LIBSDCB),MF=(E,CLOSEL)  CLOSE THE FILES       CAH84198A\n         B     XFEND                                          CAH84198A\n*\nXFEND    L     RBAL,XFRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***      DECONCATENATE THE LIBRARIES                               ***\n***                                                                ***\n**********************************************************************\nDECONCAT ST    RBAL,DERBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*                                                             CAH84198A\n         LH    R0,CCNUM                 R0 IS NO OF LIB NAMES CAH84198A\n         CH    R0,H0                    IF NONE               CAH84198A\n         BE    DEEND                      NO DECONCAT         CAH84198A\n*\n         TM    SWITCH1,X'40'            CHECK FOR '<2' SWITCH\n         BO    DEEND                      IF '<2' BYPASS DECONCAT.\n*\n         LA    R1,DCTEXTUT              R1 ADDR OF DECONCAT T.U.\n         ST    R1,DCTUPL                STORE IN T.U. POINTER LIST\n         OI    DCTUPL,X'80'             MARK END OF LIST\n         MVC   DCKEY(2),H1              SET KEY TO X'0001'\n         MVC   DCNUM(2),H1              SET # TO X'0001'\n         MVC   DCDATA(12),CCDATA        TAKE DDNAME AND LEN FROM CONCAT\n         LA    R1,DCTUPL                R1 POINTER TO DECONCAT. TUPL\n         ST    R1,XYZRB+(S99TXTPP-S99RB)  SAVE IN REQUEST BLOCK\n         GTEDAALC XYZ,VERB=DC           DECONCATENATE\n         CLC   XYZS99RC(4),F0           IF R/C NOT ZERO\n         BNE   DEERROR                    BRANCH TO ERROR\n         B     DEEND\n*\nDEERROR  LA    R15,8(0,0)               SET INTERNAL CODE TO 8\n         ST    R15,RETCDE               SAVE IT\n         B     DEEND                    BRANCH TO ENDING\n*\nDEEND    L     RBAL,DERBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA CONSTANTS                                               ***\n***                                                                ***\n**********************************************************************\nCONSTDTA DS    0D                       AREA FOR DATA CONSTANTS\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\nDZIPS    DS    0D                       DOUBLE WORD OF ZEROES\n         DC    2F'0'\nBLANKS   DC    CL80' '                  10 DOUBLE WORDS OF BLANKS\nFF000000 DC    XL4'FF000000'            IKJPARS END OF LIST INDICATOR\nF0       DC    F'0'                     CONSTANT\nF4       DC    F'4'                     CONSTANT\nF8       DC    F'8'                     CONSTANT\nF12      DC    F'12'                    CONSTANT\nH0       DC    H'0'                     CONSTANT\nH1       DC    H'1'                     CONSTANT\nH2       DC    H'2'                     CONSTANT\n*\nINIT1    DC    B'00000000'              INITIAL SETTINGS FOR SWITCH1\n*                1.......               X'80' - NO USE OF LIB PARM\n*                .1......               X'40' - FEWER THAN 2 DSN'S\n*\nABC      GTEDADAT DSNAM=X,STATS=SHR,CNVRT=YES,RTDDN=X\n*\nOPEND    OPEN  (,(INPUT)),MF=L\nCLOSED   CLOSE (),MF=L\n*\nPODCB    DCB  DSORG=PO,MACRF=R\n*\nATCHD    ATTACH SF=L                                          CAH84198A\nATCHDLTH EQU   *-ATCHD                                        CAH84198A\n*\n*                                                             CAH84198A\n*                                                             CAH84160A\nCAPTABL  DC    XL16'000102030405060708090A0B0C0D0E0F'         CAH84160A\n         DC    XL16'101112131415161718191A1B1C1D1E1F'         CAH84160A\n         DC    XL16'202122232425262728292A2B2C2D2E2F'         CAH84160A\n         DC    XL16'303132333435363738393A3B3C3D3E3F'         CAH84160A\n         DC    XL16'404142434445464748494A4B4C4D4E4F'         CAH84160A\n         DC    XL16'505152535455565758595A5B5C5D5E5F'         CAH84160A\n         DC    XL16'606162636465666768696A6B6C6D6E6F'         CAH84160A\n         DC    XL16'707172737475767778797A7B7C7D7E7F'         CAH84160A\n         DC    X'80',C'ABCDEFGHI',X'8A8B8C8D8E8F'             CAH84160A\n         DC    X'90',C'JKLMNOPQR',X'9A9B9C9D9E9F'             CAH84160A\n         DC    X'A0A1',C'STUVWXYZ',X'AAABACADAEAF'            CAH84160A\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'         CAH84160A\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'         CAH84160A\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'         CAH84160A\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'         CAH84160A\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'         CAH84160A\n*\nCONSTEND DS    0D\nCONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\n*                      ==> CHANGE WORDING OF PROMPT=, BELOW   CAH84198A\nPARMNAME IKJIDENT 'PROGRAM NAME',                                      X\n               UPPERCASE,                                              X\n               MAXLNTH=8,                                              X\n               FIRST=ALPHA,                                            X\n               OTHER=ALPHANUM,                                         X\n               PROMPT='NAME OF PROGRAM YOU ARE TRYING TO EXECUTE',     X\n               HELP='1-8 CHARACTER NAME OF LOAD LIBRARY MEMBER'\n*\nPARMSTNG IKJPOSIT QSTRING,                                             X\n               ASIS                                           CAH84160A\n*\nPARMCASE IKJKEYWD DEFAULT='CAPS'                              CAH84160A\n         IKJNAME  'CAPS'                                      CAH84160A\n         IKJNAME  'ASIS'                                      CAH84160A\n*                                                             CAH84160A\nPARMLIB  IKJKEYWD DEFAULT='SYSLIBS'\n         IKJNAME  'LIB',SUBFLD=LIBSUBF,                                X\n               ALIAS=('STEPLIB','CONCAT','TASKLIB')           CAH84198A\n         IKJNAME  'SYSLIBS'\n*\nLIBSUBF  IKJSUBF\nLIBNAMES IKJPOSIT  DSNAME,                                             X\n               LIST,                                                   X\n               USID\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA AREA IN SUBPOOL 000                                     ***\n***                                                                ***\n**********************************************************************\nWORK0    DSECT                          AREA-0 FOR VARIABLES\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nCPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nRETCDE   DS    F                        INTERNAL RETURN CODE\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\n*\nPPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nMORBALSV DS    F                        RETURN ADDRESS SAVE AREA\nLIRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCCRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nCORBALSV DS    F                        RETURN ADDRESS SAVE AREA\nXFRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nDERBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nATTECB   DS    F                        ECB FOR ATTACH        CAH84198A\nATTTCBAD DS    F                        TCB ADDR FROM ATTACH  CAH84198A\nMYANS    DS    F                        POINTER TO THE PDL\n*\nMYNAME   DS    CL8                      NAME OF PROGRAM TO LINK TO\n*\nSWITCH1  DS    B'00000000'              SWITCH AREA 1\n*                1.......               X'80' - NO USE OF LIB PARM\n*                .1......               X'40' - FEWER THAN 2 DSN'S\n*\nATCHL    ATTACH SF=L                                          CAH84198A\nATCHLLTH EQU   *-ATCHL                                        CAH84198A\n*\n*                                                             CAH84198A\n*                                                             CAH84198A\n*\nXYZ      GTEDADAT MAP=ONLY,DSNAM=X,STATS=SHR,CNVRT=YES,RTDDN=X\n*\nOPENL    OPEN  (,(INPUT)),MF=L\nCLOSEL   CLOSE (),MF=L\n*\nDCTUPL   DS    F                        DECONCAT TEXT UNIT PTR LIST\n*\nDCTEXTUT DS    0H                       DECONCATENATION TEXT UNIT\nDCKEY    DS    H                          X'0001'\nDCNUM    DS    H                          X'0001'\nDCDATA   DS    CL12                       AREA FOR 1 12-BYTE FIELD\n*\nCCNEXTAD DS    F                        POINTER INTO CONCATEN T.U.\n*\nCCTUPL   DS    F                        CONCAT TEXT UNIT PTR LIST\n*\nCCTEXTUT DS    0H                       CONCATENATION TEXT UNIT\nCCKEY    DS    H                          X'0001'\nCCNUM    DS    H                          NUMBER OF DDNAMES\nCCDATA   DS    CL3072                     AREA FOR 256 12-BYTE FIELDS\n*\n         DS    0D\nMYPARML  DS    A                        ADDRESS OF MYPARM\n*\nMYPARM   DS    0D                       PARM TO PASS TO PGM 'MYNAME'\nMYPLEN   DS    H                          LENGTH\nMYPCHAR  DS    CL100                      DATA\n*\nLIBSDCB  DCB  DSORG=PO,MACRF=R\nLIBSDCBL EQU  *-LIBSDCB\n*\nWORK0END DS    0D\nWORK0LEN EQU   *-WORK0                  TOTAL LENGTH OF WORK-1 AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAPPING MACROS                                               ***\n***                                                                ***\n**********************************************************************\n         CVT   DSECT=YES              , CVTMAP FOR IKJPARS\n         PRINT GEN\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n         PRINT NOGEN\n         IEFZB4D0\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         IHADCB DSORG=PO,DEVD=DA\n         EJECT\n**********************************************************************\n***                                                                ***\n***   OTHER DSECTS                                                 ***\n***                                                                ***\n**********************************************************************\nPDSN     DSECT                          PDE FOR DSNAME\nPDSNDADR DS    AL4                        ADDRESS OF DSN\nPDSNDLTH DS    H                          LENGTH OF DSN\nPDSNDFLG DS    BL1                        FLAG BITS\n         DS    XL1                        RESERVED\nPDSNMADR DS    AL4                        ADDRESS OF MEMBER NAME\nPDSNMLTH DS    H                          LENGTH OF MEMBER NAME\nPDSNMFLG DS    BL1                        FLAG BITS\n         DS    XL1                        RESERVED\nPDSNPADR DS    AL4                        ADDRESS OF PASSWORD\nPDSNPLTH DS    H                          LENGTH OF PASSWORD\nPDSNPFLG DS    BL1                        FLAG BITS\n         DS    XL1                        RESERVED\nPDSNNEXT DS    AL4                        NEXT PDE ADDRESS IN LIST\n         SPACE 3\nPPDE     DSECT                          PDE FOR IKJIDENT OR IKJPOSIT\nPPDEADR  DS    AL4                        ADDRESS\nPPDELTH  DS    H                          LENGTH\nPPDEFLG  DS    BL1                        FLAG BITS\n         DS    XL1                        RESERVED\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EQUATES                                                      ***\n***                                                                ***\n**********************************************************************\nRBASE    EQU   12                       BASE REGISTER\nRBAL     EQU   10                       BAL REGISTER\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LINKBACK": {"ttr": 5892, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x000\\x000\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 48, "newlines": 48, "modlines": 0, "user": "HOFFMAN"}, "text": "         MACRO\n&ENDNAME LINKBACK &RCADDR=\n.*********************************************************************\n.*  MACRO FOR STANDARD LINKAGE CONVENTIONS AT PROGRAM EXIT.        ***\n.*  USED IN CONJUNCTION WITH THE LINKSAVE MACRO.                   ***\n.*                                                                 ***\n.*  RCADDR=NAME   NAME OF FULLWORD RETURN CODE TO BE LOADED        ***\n.*                INTO R15.  IF THIS OPERAND IS NOT USED, THE      ***\n.*                RETURN CODE WILL BE THE VALUE CONTAINED IN R15   ***\n.*                JUST PRIOR TO ENTERING THE CODE GENERATED BY     ***\n.*                THIS MACRO.                                      ***\n.*                                                                 ***\n.* NOTE -                                                          ***\n.*  IF GETMAIN=YES WAS USED WITH LINKSAVE, THIS MACRO WILL         ***\n.*  FREEMAIN THE STORAGE AREA WHICH LINKSAVE GOTMAINED.            ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*********************************************************************\n         GBLC  &GMN,&GAMT\n         LCLA  &RCLEN\n&RCLEN   SETA  K'&RCADDR               LENGTH OF NAME OF RETURN CODE\n         AIF ('&GMN' EQ 'YES').FORM2   IF LINKSAVE USED A GETMAIN, GO\n&ENDNAME L     13,4(0,13)              RESTORE R13 FROM MY SAVE AREA\n         AIF (&RCLEN EQ 0).FORM1A\n         L     15,&RCADDR              SET RETURN CODE\n.FORM1A  ANOP\n         LM    0,12,20(13)             RESTORE R0-12\n         L     14,12(0,13)             RESTORE R14\n         MVI   12(13),X'FF'            RETURN INDICATOR\n         BR    14                      RETURN TO CALLING PROGRAM\n         MEXIT\n.FORM2   ANOP\n&ENDNAME LR    1,13                    COPY MY SA ADDR FOR FREEMAIN\n         AIF (K'&RCADDR EQ 0).FORM2C\n         L     14,&RCADDR              SAVE RETURN CODE\n         AGO .FORM2A\n.FORM2C  LR    14,15                   SAVE RETURN CODE\n.FORM2A  ANOP\n         L     13,4(0,13)              RESTORE R13 FROM MY SAVE AREA\n*        FREEMAIN R,LV=&GAMT,A=(1)     FREE STORAGE\n         FREEMAIN R,LV=&GAMT,A=(1)     FREE STORAGE\n         LR    15,14                   SET RETURN ADDRESS\n.FORM2B  ANOP\n         LM    0,12,20(13)             RESTORE R0-12\n         L     14,12(0,13)             RESTORE R14\n         MVI   12(13),X'FF'            RETURN INDICATOR\n         BR    14                      RETURN TO CALLING PROGRAM\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LINKSAVE": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00@\\x00@\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 64, "newlines": 64, "modlines": 0, "user": "HOFFMAN"}, "text": "         MACRO\n&CSNAME  LINKSAVE &BASE=,&GETMAIN=NO,&GETAMT=136\n.*********************************************************************\n.*  MACRO FOR STANDARD LINKAGE CONVENTIONS AT PROGRAM ENTRY.       ***\n.*  USED IN CONJUNCTION WITH THE LINKBACK MACRO.                   ***\n.*                                                                 ***\n.*  BASE=NN     REGISTER NUMBER OF BASE REGISTER.                  ***\n.*                                                                 ***\n.*  GETMAIN=YES WILL DO A GETMAIN FOR STORAGE SPACE.  THIS         ***\n.*              STORAGE WILL BE POINTED TO BY R13, AND WILL BE     ***\n.*              FREED AUTOMATICALLY BY THE LINKBACK MACRO.         ***\n.*                                                                 ***\n.*  GETAMT=NNNN (VALID ONLY IF GETMAIN=YES) DEFAULT AMOUNT OF      ***\n.*              SPACE OBTAINED WILL BE 72 BYTES FOR SAVE AREA,     ***\n.*              PLUS 64 BYTES FOR PROGRAMMER'S USE.  R13 WILL BE   ***\n.*              THE BASE ADDRESS OF THE STORAGE AREA.  THIS        ***\n.*              AMOUNT WILL BE FREED BY THE LINKBACK MACRO.        ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*********************************************************************\n         GBLC  &GMN,&GAMT\n         LCLA  &C,&D\n&GAMT    SETC  '&GETAMT'\n&GMN     SETC  '&GETMAIN'\n         AIF   ('&GMN' EQ 'YES').FORM2\n&CSNAME  CSECT\n&C       SETA  K'&CSNAME\n&D       SETA  ((20+&C)/2)*2\n         B     &D.(0,15)                BRANCH AROUND ID\n         DC    AL1(&C)                    LENGTH\n         DC    CL&C'&CSNAME'              ID\n         DC    CL8'&SYSDATE'              SYSTEM DATE:  MM/DD/YY\n         DC    CL6' &SYSTIME'             SYSTEM TIME:  HH.MM\n         STM   14,12,12(13)             SAVE R0-R12, R14-R15\n         LR    &BASE,15                 LOAD BASE ADDRESS\n         USING &CSNAME,&BASE            ASSIGN BASE REGISTER\n         ST    13,MYSV&SYSNDX+4         STORE ADDR OF PREV SAVE AREA\n*                                         INTO MY SAVE AREA\n         LA    14,MYSV&SYSNDX           LOAD ADDR OF MY SAVE AREA\n         ST    14,8(0,13)                 STORE IT INTO PREV SAVE AREA\n         LR    13,14                      ALSO LOAD IT INTO R13\n         B     MYSV&SYSNDX+72           BRANCH AROUND MY SAVE AREA\nMYSV&SYSNDX DC 18F'0'                   MY SAVE AREA\n         MEXIT\n.FORM2   ANOP\n&CSNAME  CSECT\n&C       SETA  K'&CSNAME\n&D       SETA  ((20+&C)/2)*2\n         B     &D.(0,15)                BRANCH AROUND ID\n         DC    AL1(&C)                    LENGTH\n         DC    CL&C'&CSNAME'              ID\n         DC    CL8'&SYSDATE'              SYSTEM DATE:  MM/DD/YY\n         DC    CL6' &SYSTIME'             SYSTEM TIME:  HH.MM\n         STM   14,12,12(13)             SAVE R0-R12, R14-R15\n         LR    &BASE,15                 LOAD BASE ADDRESS\n         USING &CSNAME,&BASE            ASSIGN BASE REGISTER\n*        GETMAIN R,LV=&GETAMT           GET STORAGE FOR S.A. + WORK\n         GETMAIN R,LV=&GETAMT           GET STORAGE FOR S.A. + WORK\n         ST    13,4(0,1)                STORE ADDR OF PREV SAVE AREA\n*                                         INTO MY SAVE AREA\n         ST    1,8(0,13)                ADDR OF MY SA TO PREV SAVE AREA\n         LM    0,1,20(13)               RESTORE R0-R1 TO ORIGINAL VALUE\n         L     13,8(0,13)               POINT R13 TO MY SAVE AREA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NEWCPY": {"ttr": 5896, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n  SELECT MEMBER=((#NEWSPAC,NEWSPACE,R),              <== HELP MEMBER   X\n               (#NEW,NEW,R))                         <== HELP ALIAS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NEWDOC": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\xb0\\x00\\xb0\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 176, "newlines": 176, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                         NEWSPACE Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n    NEWSPACE is a command for easily creating new, moderately\n    sized, datasets and libraries.  It was written with beginners\n    in mind.  Can be executed from the ISPF/PDF command line, for\n    allocating that dataset you suddenly need.  (Larger or more\n    complex datasets should be created with the ALLOCATE and\n    ATTRIB commands, or with the ISPF/PDF Dataset Utility (Option\n    3.2))\n\n    Syntax -\n\n    NEWSPACE  dataset-name type  LIBRARY     FIXED         FILE(name)\n                                 SEQUENTIAL  VARIABLE    DDNAME(name)\n                                             UNFORMATTED\n\n\nDIRECTORY:\n\n    This PDS contains the following members relating to NEWSPACE:\n\n    NEWDOC   - This documentation.\n    NEWJCL   - Non-SMP install jobstream.\n    #NEWSPAC - HELP member.\n    #NEW     - Alias for HELP member.  Needed for IEBCOPY in\n               the non-SMP install.\n    NEWCPY   - IEBCOPY control cards.  Used in non-SMP install.\n    NEWLNK   - LKED control cards.  Used in non-SMP install.\n    NEWSPACE - Source program.\n\n    EQ$R     - Register equates, described below.\n    GTEDAALC - Dynamic allocation macro, described below.\n    GTEDADAT - Dynamic allocation macro, described below.\n    GTEDADOC - Documentation for dynamic allocation macros,\n               described below.\n    GTEDASET - Dynamic allocation macro, described below.\n    LINKBACK - Linkage conventions, described below.\n    LINKSAVE - Linkage conventions, described below.\n\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  The following non-IBM macros are used to assemble\n          NEWSPACE. If you already have older versions in your\n          system, replace them with the ones from this PDS.\n\n            EQ$R     - Register equates.\n            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).\n            GTEDADAT - Create SVC99/IKJEFF18 control blocks.\n            GTEDASET - Link SVC99/IKJEFF18 control blocks together.\n            LINKBACK - Linkage conventions out.\n            LINKSAVE - Linkage conventions in.\n\n(  )  2.  The following macro is documentation for the GTEDAxxx\n          macros, above.  It is not used by NEWSPACE, but should\n          be copied into your system.\n\n            GTEDADOC - Documentation of GTEDAxxx macros.\n\n      3.  Edit source member NEWSPACE for the following.\n\n          A.  At labels '@DS' and 'DS' are the following values\n              for space allocation.  Change them in both places\n              as needed.\n\n              (1) UNIT=SYSTSO            Generic unit name.\n              (2) VLSER (not defined)    Specific volume serial.\n              (3) PRIME=2                Primary space.\n              (4) SECND=2                Secondary space.\n              (5) DIR=10                 Directory blocks.\n\n          B.  At label 'DATATBLE' is a variable format list of\n              attributes for various data types.  The comments in\n              the code explain how to construct new entries.  Add\n              new data types to meet your installation needs.\n\n          C.  If you add a new data type into 'DATATBLE', you\n              must make a corresponding entry in the list of\n              IKJNAME macros following the IKJKEYWD macro at\n              label 'TYPE'.  The 'DEFAULT' type must be the last\n              entry in the list.  The relative number of entries\n              in the list must correspond to the hexidecimal\n              sequence number in the first byte of the type entry\n              you made in 'DATATBLE'.\n\n          D.  Change the HELP document in member '#NEWSPAC' of\n              this dataset.  Then execute the following TSO\n              commands to reset the alias:\n\n                  DELETE  pdsname(#NEW)  ALIAS\n                  RENAME  pdsname(#NEWSPAC) pdsname(#NEW)  ALIAS\n\n              where 'pdsname' is the name of this PDS.  Be sure\n              to use the keyword 'ALIAS'.\n\n(  )  4.  For a non-SMP install, run the jobstream in member\n          NEWJCL of this PDS. Recommended load libraries are:\n\n          A.  SYS1.CMDLIB\n          B.  library named on the LNKLST\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles NEWSPACE using the source in member\n              NEWSPACE of this PDS.\n\n              Note: Access to SYS1.AMODGEN is required because\n                    NEWSPACE uses the CVT macro.\n\n          B.  Linkedits NEWSPACE into the selected load library,\n              assigning an alias of NEW. Attributes are RENT,\n              REUS and REFR.\n\n          C.  IEBCOPYs member #NEWSPAC and alias entry #NEW to the\n              selected HELP library, renaming them NEWSPACE and\n              NEW.\n\n(  )      For an SMP install, follow your installation's procedures\n          for installation of a RENT, REUS, REFR module into\n          LPALIB, LINKLIB, CMDLIB, or another library on the\n          LNKLST, with the HELP member being installed as a\n          ++MAC into HELP or another library in the SYSHELP\n          concatenation.   The ++MOD entry should have TALIAS(NEW),\n          and the ++MAC entry should have MALIAS(NEW).\n\n(  )  5.  If you select SYS1.LPALIB as your target library, you\n          will need to IPL, including 'CLPA' in the response to\n          the system parameters prompt.  This will create a new\n          LPA, picking up your NEWSPACE and NEW alias in the\n          process.\n\n(  )      If you have Dynamic BLDL, and already have a version\n          of NEWSPACE installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n(  )      If you have ACF2 and are using command limiting lists,\n          and are not already running a version of NEWSPACE, you\n          must do either one of the following:\n\n          A.  Turn the ALLCMDS bit on in the LOGONID of selected\n              users, and invoke NEWSPACE with the '#' prefix.\n              That is, use the alias name #NEW. This limits the\n              use of NEWSPACE only to those LOGONIDs with the\n              ALLCMDS bit on.  Turn the bit on with the following\n              sequence from TSO READY state using a LOGONID with\n              appropriate authority to change the bit.\n\n                   ACF\n                   LIST logonid\n                   CHANGE * ALLCMDS\n                   END\n\n          B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes NEWSPACE available to everyone.\n\n                   $TSOCMD  (NEWSPACE,NEW)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NEWJCL": {"ttr": 5902, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00>\\x00>\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 62, "newlines": 62, "modlines": 0, "user": "HOFFMAN"}, "text": "//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.CMDLIB',\n//             HELPLIB='SYST.HELP',\n//             CMDNAME=NEWSPACE,LINKMEM=NEWLNK,COPYMEM=NEWCPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NEWLNK": {"ttr": 5904, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY NEWSPACE('TS04204')\n  ALIAS NEW\n  NAME NEWSPACE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NEWSPACE": {"ttr": 5906, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x02\\xb8\\x02\\xb8\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 696, "newlines": 696, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'NEWSPACE - EASY ALLOCATION OF DATASETS'\n**********************************************************************\n***                                                                ***\n***                NEWSPACE COMMAND                                ***\n***                                                                ***\n***  DESCRIPTION:                                                  ***\n***    THE FUNCTION OF THIS COMMAND IS TO PROVIDE AN EASY WAY FOR  ***\n***    NEW TSO USERS TO CREATE NEW SEQUENTIAL AND PARTITIONED      ***\n***    DATASETS.  THIS COMMAND IS MUCH EASIER TO USE THAN          ***\n***    ISPF/PDF OPTION 3.2, OR THE ALLOCATE AND ATTRIB COMMANDS.   ***\n***    HOWEVER, IT IS NOT AS VERSITILE AS THOSE COMMANDS.          ***\n***                                                                ***\n***  FORMAT:                                                       ***\n***          NEWSPACE  DSNAME ORG TYPE FORMAT DDNAME(NAME)  CAH TS04204\n***                                             FILE(NAME)  CAH TS04204\n***                                                                ***\n***      REQUIRED: DSNAME                                          ***\n***                                                                ***\n***  FUNCTION:                                                     ***\n***                                                                ***\n***  1. NEWSPACE FIRST PARSES THE PARM STRING, THEN DETERMINES     ***\n***     THE LENGTH AND TEXT OF THE LOW-LEVEL QUALIFIER OF THE      ***\n***     DSNAME.                                                    ***\n***                                                                ***\n***  2. A TABLE IS THEN USED.  THE ENTRY IN THE TABLE IS LOCATED   ***\n***     ON THE BASIS OF THE 'TYPE' OPERAND.  IF 'TYPE' IS NOT      ***\n***     USED, THE ENTRY IS LOCATED BY USE OF THE LOW-LEVEL         ***\n***     QUALIFIER.                                                 ***\n***                                                                ***\n***  3. EACH DATA TYPE ENTRY IS FOLLOWED BY ONE OR MORE SETS OF    ***\n***     DCB INFORMATION (SUBENTRY).  IF THE 'FORMAT' OPTION HAS    ***\n***     BEEN USED, THAT SUBENTRY IS SEARCHED FOR.  IF NOT, THE     ***\n***     FIRST SUBENTRY IN THE LIST IS USED AS A DEFAULT.  THE      ***\n***     TABLE IS AT THE 'DATATBLE' LABEL IN THE SOURCE CODE.       ***\n***                                                                ***\n***  4. NEWSPACE THEN ALTERS THE SVC-99 DYNAMIC ALLOCATION TEXT    ***\n***     UNITS CREATED BY THE GTEDADAT MACRO.  THE ALTERATION FILLS ***\n***     IN THE DATASET NAME AND DCB INFORMATION.  IF A FILE CAH TS04204\n***     NAME HAS BEEN SELECTED, IT IS FILLED INTO THE TEXT  CAH TS04204\n***     UNIT, ELSE THE KEY IS SET TO X'0000'.  THE TYPE IS  CAH TS04204\n***     APPENDED ONTO THE END OF THE DATASET NAME, UNLESS QUOTES   ***\n***     HAVE BEEN USED AROUND THE NAME, OR THE TYPE OPERAND HAS    ***\n***     NOT BEEN USED.  THE DATASET IS THEN DYNAMICALLY ALLOCATED. ***\n***     THE GTEDAALC MACRO USES DAIRFAIL TO PRODUCE DYNAMIC        ***\n***     ALLOCATION ERROR MESSAGES.                                 ***\n***                                                                ***\n***  5. NEWSPACE THEN CLEANS UP AND TERMINATES.                    ***\n***                                                                ***\n***  6. ERROR/INFO MESSAGES ARE HANDLED BY THE ERRMSG ROUTINE.     ***\n***     MOST MESSAGES ARE A SINGLE SEGMENT.  MESSAGE #3, THE       ***\n***     'DATASET CREATED' MESSAGE HAS THREE SEGMENTS WHICH ARE     ***\n***     GLUED TOGETHER BY PUTLINE BEFORE BEING WRITTEN TO THE      ***\n***     TERMINAL.                                                  ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  RETURN CODES:                                                 ***\n***     00 - OKAY                                                  ***\n***     12 - SOMETHING WAS WRONG.  SHOULD ALSO HAVE AN ERROR MSG.  ***\n***                                                                ***\n***  REGISTER USAGE:                                               ***\n***     R0-R3   - USED BY MACROS                                   ***\n***     R4-R7   - WORK REGISTERS, NOT USED TO PASS INFORMATION     ***\n***               BETWEEN ROUTINES.                                ***\n***     R8      - UNUSED                                           ***\n***     R9      - BASE OF PARM DESCRIPTOR LIST (PDL) RETURNED BY   ***\n***               IKJPARS PARSE SERVICE ROUTINE                    ***\n***     R10     - LINKAGE REGISTER USED WITH BAL                   ***\n***     R11     - BASE OF WORK AREA OBTAINED WITH GETMAIN          ***\n***     R12     - BASE REGISTER OF PROGRAM CODE.                   ***\n***     R13-R15 - LINKAGE REGISTERS                                ***\n***                                                                ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***     LINKSAVE - LINKAGE CONVENTIONS IN                          ***\n***     EQ$R     - REGISTER EQUATES                                ***\n***     LINKBACK - LINKAGE CONVENTIONS BACK                        ***\n***     GTEDADAT - CREATE SVC-99 AND IKJEFF18 CONTROL BLOCKS       ***\n***     GTEDASET - INITIALIZE AND LINK SVC-99 AND IKJEFF18 CONTROL ***\n***                BLOCKS                                          ***\n***     GTEDAALC - PERFORM DYNAMIC ALLOCATION AND DAIRFAIL         ***\n***                ANALYSIS OF FAILURES                            ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, ALIAS(NEW)               ***\n***                                                                ***\n***  CULPRIT:                                                      ***\n***     CHUCK HOFFMAN, SYSTEMS PROGRAMMING                         ***\n***     GTE LABORATORIES TECHNICAL COMPUTING CENTER                ***\n***     WALTHAM, MASSACHUSETTS  617/466-2131    V/N 466-2131       ***\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***     1.  A. CHANGE CLIST AND COMMAND, FIXED, BLKSIZE     CAH TS04202\n***            FROM 6160 TO 1680.                           CAH TS04202\n***         B. CREATE DATA TYPE 'DIALOG'                    CAH TS04202\n***         C. ADD 'EJECT' AFTER THIS BOX.                  CAH TS04202\n***     2.  A. CHANGE LRECL TO 133 FOR DEFAULT FOR LIST.    CAH TS04203\n***         B. ADD OPTIONAL RECFM FIXED FOR LIST.           CAH TS04203\n***         C. ADD OPTIONAL RECFM UNFORMATTED FOR DIALOG.   CAH TS04203\n***     3.  A. ADD DATA TYPE 'C'.                           CAH TS04204\n***         B. ADD DSECT=YES TO CVT EXPANSION.              CAH TS04204\n***         C. ADD FILE/DDNAME OPERAND.                     CAH TS04204\n***         D. SET CC=12 IF FAILURE TO ALLOCATE             CAH TS04204\n***                                                                ***\n**********************************************************************\n         EJECT                                              CAH TS04202\n         PRINT NOGEN\n         MACRO\n&LABEL   HIREP &WORD=,&CODE=,&REG=15    SET HIGHER CODE\n&LABEL   LA    &REG,&CODE.(0,0)         NEW CODE TO REG\n         C     &REG,&WORD               IF EXISTING CODE HIGHER\n         BNH   *+8                        BRANCH AROUND\n         ST    &REG,&WORD               ELSE SAVE NEW CODE\n         CNOP  0,4                      ALIGN\n         MEND\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PROLOGUE                                                     ***\n***                                                                ***\n**********************************************************************\n*\nNEWSPACE LINKSAVE BASE=12,GETMAIN=YES\n         EQ$R\n         USING WORK0,R13                ADDRESSABILITY OF WORK0\n         USING PARMPDL,R9               ADDRESSABILITY OF PRM DESC LST\n         ST    R1,CPPLPTR               SAVE CPPL POINTER\n         GETMAIN  R,LV=WORK1LEN         GET MAIN STORAGE\n         LR    R11,R1                   ADDRESS OF MAIN STORAGE\n         USING WORK1,R11                ADDRESSABILITY OF WORK1\n         XC    COMPCODE,COMPCODE        CLEAR PROGRAM RETURN CODE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAIN LINE ROUTINE                                            ***\n***                                                                ***\n**********************************************************************\n*\n         BAL   R10,PPLSETUP             SET UP PARSE PARM LIST\n         BAL   R10,PARSE                PARSE THE INPUT PARAMETERS\n         BAL   R10,LOLEVEL              FIND LOW LEVEL OF NAME\n         L     R4,RETCDE                IF RETURN CODE NOT GOOD\n         LTR   R4,R4                      THEN\n         BNZ   ENDING                     BRANCH TO ENDING\n         BAL   R10,DATATYPE             FIND DATA TYPE\n         BAL   R10,DCBSELCT             SELECT DCB INFO FROM TABLE\n         L     R4,RETCDE                IF RETURN CODE NOT GOOD\n         LTR   R4,R4                      THEN\n         BNZ   ENDING                     BRANCH TO ENDING\n         BAL   R10,ALLOC                ALLOCATE THE DATASET\n         L     R4,RETCDE                IF RETURN CODE\n         LTR   R4,R4                      IS ZERO\n         BZ    GOODMSG                  BRANCH AROUND\n         LA    R4,2(0,0)                ELSE\n         ST    R4,RETCDE                  SELECT MESSAGE #2\n         BAL   R10,ERRMSG                 AND WRITE IT\n         HIREP WORD=COMPCODE,CODE=12      SET CC=12         CAH TS04204\n         B     ENDING                     THEN BRANCH TO ENDING\n*\nGOODMSG  LA    R4,3(0,0)\n         ST    R4,RETCDE                SELECT MESSAGE #3\n         BAL   R10,ERRMSG                 AND WRITE IT\n         B     ENDING                     THEN BRANCH TO ENDING\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EPILOGUE                                                     ***\n***                                                                ***\n**********************************************************************\nENDING   LA       R4,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R4,0(0,R4)              R4 POINTS TO PDL\n         IKJRLSA  (R4)                    FREE STORAGE OF PDL\n         FREEMAIN R,LV=WORK1LEN,A=(R11) , FREE MAIN STORAGE\n         LINKBACK RCADDR=COMPCODE\n*\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST                             ***\n***                                                                ***\n**********************************************************************\nPPLSETUP ST    R10,PPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)\n         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)\n         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)\n         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)\n         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)\n         DROP  R4\n*\nPPEND    L     R10,PPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    R10,PAR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     R10,PAR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   FIND LENGTH AND VALUE OF LOW LEVEL QUALIFIER                 ***\n***                                                                ***\n**********************************************************************\nLOLEVEL  ST    R10,LOR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,NAME+0                R4 POINTS TO DSN\n         LH    R5,NAME+4                R5 HAS LENGTH OF DSN\n         LA    R6,0(R5,R4)              R6 POINTS JUST BEYOND DSN\n*\nLOLOOP   BCTR  R6,0                     DECR POINTER BY 1\n         CLI   0(R6),C'.'               IF PRECEEDING DECIMAL POINT\n         BE    *+12                       BRANCH OUT\n         BCT   R5,LOLOOP                ELSE KEEP LOOKING\n*                                    ** REACH HERE ONLY IF 1 LEVEL DSN\n         B     *+8                      POINTING AT BEGINNING, SO BR\n*                                    ** REACH HERE IF FOUND '.'\n         LA    R6,1(0,R6)               POINTING TO '.', SO INCR BY 1\n*                                    ** R6 POINTS TO 1ST CHAR OF QULFR\n*\n         AH    R4,NAME+4                R4 POINTS JUST BEYOND NAME\n         SR    R4,R6                    R4 IS LENGTH OF NAME\n*\n         ST    R6,LOADDR                SAVE ADDR OF LOW LEVEL OF DSN\n         STH   R4,LOLEN                 SAVE LEN OF LOW LEVEL OF DSN\n*\n         LTR   R4,R4                    IF LOW LEVEL IS LENGTH 0\n         BP    LOSAVE                     BRANCH TO END\n         LA    R4,4(0,0)                ELSE\n         ST    R4,RETCDE                  SET INTERNAL RETCDE TO 4\n         BAL   R10,ERRMSG                 PUT OUT ERROR MESSAGE #4\n         HIREP WORD=COMPCODE,CODE=12      SET COMPLETION CODE TO 12\n         B     LOEND                      BRANCH TO END OF ROUTINE\n*\nLOSAVE   BCTR  R4,0                     MINUS 1 FOR EXECUTE\n         B     *+10                     BRANCH AROUND EXECUTED INSTR\n         MVC   LOTEXT(0),0(R6)            SAVE TEXT OF LOW LEVEL\n         EX    R4,*-6                   EXECUTE THE MOVE\n*\nLOEND    L     R10,LOR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    LOCATE DATA TYPE IN TABLE                                   ***\n***                                                                ***\n***    IF THE TYPE OPERAND HAS BEEN USED, USE THE INTEGER RETURNED ***\n***    FROM IKJPARS AS THE KEY TO ENTERING THE TABLE.  OTHERWISE,  ***\n***    USE THE TEXT AND LENGTH OF THE LOW LEVEL QUALIFIER AS THE   ***\n***    KEY FOR ENTERING THE TABLE.                                 ***\n***                                                                ***\n**********************************************************************\nDATATYPE ST    R10,DAR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LH    R4,TYPE                  LOAD TYPE NUMBER FROM PARM\n         LTR   R4,R4                    IF NO TYPE DESIGNATED\n         BNP   DATAFIND                   USE TABLE FOR TYPE\n         B     DATAPARM                 ELSE LOOK UP TYPE DIRECTLY\n*\nDATAFIND LH    R4,LOLEN                 LENGTH OF LO LEVEL QUALIFIER\n         XR    R5,R5                    CLEAR R5 FOR IC\n         LA    R6,DATATBLE              BASE ADDRESS OF TABLE\n*\nDALOOP   CLI   0(R6),X'FF'              IF AT END OF TABLE,\n         BE    DAFOUND                    BRANCH OUT OF LOOP\n         IC    R5,1(0,R6)               R5 HAS LEN OF NAME IN TABLE\n         CR    R4,R5                    IF NO MATCH\n         BNE   DANEXT                     BRANCH TO BOTTOM OF LOOP\n         BCTR  R5,0                     MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND COMPARE\n         CLC   2(0,R6),LOTEXT             COMPARE LO TEXT WITH TBL TXT\n         EX    R5,*-6                   EXECUTE COMPARE\n         BE    DAFOUND                  IF EQUAL, BRANCH OUT OF LOOP\n*\nDANEXT   LH    R5,10(0,R6)              RECFM COUNT TO R5\n         LA    R6,12(0,R6)              POINT TO FIRST RECFM\n         LA    R6,6(0,R6)               POINT TO NEXT RECFM\n         BCT   R5,*-4                   PERFORM TILL NO MORE RECFM'S\n         B     DALOOP                   LOOP BACK UP FOR NEXT ENTRY\n*\nDATAPARM LA    R6,DATATBLE              BASE ADDRESS OF TABLE\nDAPLOOP  CLI   0(R6),X'FF'              IF AT END OF TABLE\n         BE    DAFOUND                    BRANCH OUT OF LOOP\n         XR    R5,R5                    CLEAR R5 FOR IC\n         IC    R5,0(0,R6)               DATA TYPE FROM TBL TO R5\n         CR    R4,R5                    IF A MATCH\n         BE    DAFOUND                    BRANCH OUT OF LOOP\n         LH    R5,10(0,R6)              RECFM COUNT TO R5\n         LA    R6,12(0,R6)              POINT TO FIRST RECFM\n         LA    R6,6(0,R6)               POINT TO NEXT RECFM\n         BCT   R5,*-4                   PERFORM TILL NO MORE RECFM'S\n         B     DAPLOOP\n*\nDAFOUND  ST    R6,DATYPADR              SAVE ADDR OF TABLE ENTRY\n*\nDAEND    L     R10,DAR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   SELECT DCB INFO FROM TABLE                                   ***\n***                                                                ***\n***   LOOK FOR DCB-INFO SUBENTRIES IN THE TABLE TO MATCH THE       ***\n***   INTEGER RETURNED BY IKJPARS FOR THE FORMAT OPERAND.  IF      ***\n***   THE FORMAT OPERAND HAS NOT BEEN USED, SELECT THE FIRST       ***\n***   DCB-INFO SUBENTRY.                                           ***\n***                                                                ***\n**********************************************************************\nDCBSELCT ST    R10,DCR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,DATYPADR              R4 IS ADDR OF TABLE ENTRY\n         LH    R5,10(0,R4)              R5 IS COUNT OF DCB ENTRIES\n         LA    R6,12(0,R4)              R6 POINTS TO FIRST DCB ENTRY\n*\n         LH    R7,RFORM                 RFORM OPERAND TO R7\n         LTR   R7,R7                    IF RFORM OPERAND NOT USED\n         BZ    DCBMATCH                   BRANCH AROUND\n*\n         LA    R6,12-6(0,R4)            POINT TO -1 DCB ENTRY\nDCBLOOP  LA    R6,6(0,R6)               R6 POINTS TO NEXT DCB ENTRY\n         B     *+8                      BRANCH AROUND COMPARE\n         CLI   0(R6),0                    REG FOR EXEC : DCB ENTRY\n         EX    R7,*-4                   EXECUTE COMPARE\n         BE    DCBMATCH                 IF HIT, BRANCH OUT\n         BCT   R5,DCBLOOP               LOOP UP IF MORE DCB ENTRIES\n*          ***  GET HERE ONLY IF NO HIT ***\n         LA    R15,1(0,0)               SET INTERNAL R/C\n         ST    R15,RETCDE                 TO ONE\n         BAL   R10,ERRMSG               PERFORM ERROR MSG\n         HIREP WORD=COMPCODE,CODE=12    SET COMP CODE TO 12\n         B     DCEND                    BRANCH TO ENDING\n*\nDCBMATCH ST    R6,DCBADDR               SAVE DCB ENTRY ADDR\n*\nDCEND    L     R10,DCR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   ERROR MESSAGES                                               ***\n***                                                                ***\n***     ===> NOTE THAT RETCDE IS USED AS AN INPUT ARGUMENT <===    ***\n***                                                                ***\n**********************************************************************\nERRMSG   ST    R10,ERR10SAV             SAVE RETURN ADDRESS\n*\n*    +-------------------------------------+\n*    |  SPECIAL PROCESSING FOR MESSAGE #3  |\n*    +-------------------------------------+\n         LA    R4,3(0,0)                CONSTANT FOR COMPARE\n         C     R4,RETCDE                IF RETCODE WAS NOT 3\n         BNE   ERRMSGS                    BRANCH AROUND SPECL PROCESS\n         LA    R6,OLD0003V              ADDRESS OF WORK O.L.D.\n         MVC   OLD0003V(16),OLD0003     COPY CONSTANTS TO WORK O.L.D.\n         CLI   ORG+1,X'01'              IF ORG PARM NOT 'SEQUENTIAL'\n         BNE   *+12                       BRANCH AROUND\n         LA    R4,MSG0003S              ELSE ADDR OF 'SEQ' LITERAL\n         ST    R4,OLD0003V+8              INTO WORK O.L.D.\n         MVC   MSG0003C(48),MSG0003B    INITIALIZE WORK MSG SEGMENT\n         LA    R4,MSG0003C              ADDRESS OF WORK MSG SEGMENT\n         ST    R4,OLD0003V+12             INTO WORK O.L.D\n         LH    R4,DSNLEN                R4 IS TOTAL DSN LENGTH\n         LA    R4,4(0,R4)                 PLUS HEADER IN MSG SEGMENT\n         STH   R4,MSG0003C+0              INTO WORK MSG SEGMENT\n         MVC   MSG0003C+4(44),DSDSNAM   MOVE DSNAME INTO WORK MSG SEG\n         B     ERIOPL                   BRANCH TO INITIALIZE IOPL\n*\nERRMSGS  L     R6,RETCDE                RET CODE TO R4\n         SLA   R6,2                     R6 IS OFFSET FROM ERADDRS-4\n         LA    R6,ERADDRS-4(R6)         R6 POINTS TO ERADNNNN\n         L     R6,0(0,R6)               R6 POINTS TO OLDNNNN\n*\nERIOPL   XC    MYECB,MYECB              CLEAR ECB\n         L     R4,CPPLPTR               R4 POINTS TO CPPL\n         L     R4,(CPPLUPT-CPPL)(0,R4)  R4 CONTAINS UPT ADDRESS\n         L     R5,CPPLPTR               R5 POINTS TO CPPL\n         L     R5,(CPPLECT-CPPL)(0,R5)  R5 CONTAINS ECT ADDR\nERRPUTL  PUTLINE PARM=MYPTPB,UPT=(R4),ECT=(R5),                        X\n               ECB=MYECB,OUTPUT=((R6)),MF=(E,MYIOPL)\n*\nEREND    L     R10,ERR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\n*\nERADDRS  DS    0F                       TABLE OF OUTPUT LINE DESCRIPTRS\nERAD0001 DC    A(OLD0001)               #1 BAD TYPE/FORMAT COMBO\nERAD0002 DC    A(OLD0002)               #2 DATASET NOT ALLOCATED\nERAD0003 DC    A(0)                     DUMMY\nERAD0004 DC    A(OLD0004)               #4 IMPROPER DSN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   ALLOCATE THE DATASET                                         ***\n***                                                                ***\n**********************************************************************\nALLOC    ST    R10,ALR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   DS(256),@DS              COPY CNTROL BLOCK DTA TO WORK1\n         MVC   DS+256(DSLEN-256),@DS+256  COPY THE REMAINDER TO WORK1\n*\nALDSN    L     R4,NAME                  R4 POINTS TO PARM DSNAME\n         LH    R5,NAME+4                R5 IS LENGTH OF NAME\n         STH   R5,DSNLEN                SAVE THE LENGTH\n         BCTR  R5,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MVC\n         MVC   DSDSNAM(0),0(R4)           MOVE PARM NAME TO TEXT UNIT\n         EX    R5,*-6                   PERFORM MOVE\nALDDN    CLC   KDDNAME(2),H0            IF DDNAME NOT USED  CAH TS04204\n         BE    ALNODDN                    GO TO ZERO THE TU CAH TS04204\n         L     R4,SDDNAME               R4 POINTS TO DDNAME CAH TS04204\n         LH    R5,SDDNAME+4             R5 IS LENGTH OF DDN CAH TS04204\n         STH   R5,DDNLEN                SAVE THE LENGTH     CAH TS04204\n         BCTR  R5,0                       MINUS 1 FOR EXEC  CAH TS04204\n         B     *+10                     BRANCH AROUND MVC   CAH TS04204\n         MVC   DSDDNAM(0),0(R4)           MOVE DDN TO T.U.  CAH TS04204\n         EX    R5,*-6                   PERFORM THE MOVE    CAH TS04204\n         B     *+10                     GO TO NEXT PROCESS  CAH TS04204\nALNODDN  MVC   DSDDNAM-6(2),H0          NO DDNAME: KEY=0000 CAH TS04204\n         L     R4,DATYPADR              R4 POINTS TO TABLE TYPE-ENTRY\n         TM    NAME+6,X'40'             IF PARM HAD QUOTES\n         BO    ALDSORG                    BRANCH TO NEXT ROUTINE\n         LH    R6,TYPE                  ELSE\n         LTR   R6,R6                    IF NOT USING 'TYPE' PARM\n         BZ    ALDSORG                    BRANCH TO NEXT ROUTINE\n         CLI   0(R4),X'FF'              ELSE IF USING DEFALT TYPE-ENTRY\n         BE    ALDSORG                    BRANCH TO NEXT ROUTINE\n         LA    R5,DSDSNAM+1(R5)         R5 POINTS JUST BEYOND DSNAME\n         MVI   0(R5),C'.'               PUT DOT AT END OF NAME\n         IC    R6,1(0,R4)               R6 HAS LENGTH OF TYPE-NAME\n         BCTR  R6,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND MVC\n         MVC   1(0,R5),2(R4)              TYPE-NAME TO END OF DSNAM\n         EX    R6,*-6                   EXECUTE MVC\n         LA    R6,2(0,R6)               LENGTH OF SUFFIX + DOT\n         AH    R6,DSNLEN                ADD THE PREVIOUS LENGTH OF DSN\n         STH   R6,DSNLEN                  AND SAVE IT\nALDSORG  LH    R4,ORG                   PARM ORG TO R4\n         LA    R5,1(0,0)                CONSTANT FOR COMPARE\n         CR    R4,R5                    IF 1 (SEQUENTIAL)\n         BNE   ALRECFM                  THEN\n         XC    DSDIR-6(2),DSDIR-6         SET DIRECTORY SPACE KEY=0000\n         MVC   DSDSORG+6(2),PS            SET DSORG TO PS (X'4000')\nALRECFM  L     R4,DCBADDR               R4 POINTS TO DCB INFO IN TABLE\n         MVC   DSRECFM+6(1),1(R4)       MOVE RECORD FORMAT TO T.U.\nALLRECL  MVC   DSLRECL(2),2(R4)         MOVE LRECL TO T.U.\nALBLKSZ  MVC   DSBLKSZ(2),4(R4)         MOVE BLKSIZE TO T.U.\n*\n*\nALSET    GTEDASET DS,CPPLPTR=CPPLPTR    LINK CONTROL BLOCKS TOGETHER\n*\nALALC    GTEDAALC DS,VERB=AL,ERRMSG=YES ALLOCATE THE DATASET\n         MVC   RETCDE,DSS99RC           COPY ALLOCATION R/C\n*\nALEND    L     R10,ALR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA CONSTANTS                                               ***\n***                                                                ***\n**********************************************************************\nCONSTDTA DS    0D                       AREA FOR DATA CONSTANTS\nPS       DC    XL2'4000'                TEXT UNIT DATA FOR DSORG=PS\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\nH0       DC    H'0'                     X'0000' CONSTANT    CAH TS04204\nCONSTEND DS    0D\n*\n*----------------------------------------------------------------------\nDATATBLE DC    X'01,03',CL8'ASM     ',H'1'  +------------------------+\n         DC    X'01,90',H'080',H'6160'      | TABLE ENTRIES:         |\n*                                           |                        |\n         DC    X'02,05',CL8'CLIST   ',H'2'  | TYPE ENTRY:            |\n         DC    X'02,50',H'255',H'6160'      |   BYTE 1  SEQUENCE NO, |\n         DC    X'01,90',H'080',H'1680'      |     DEFAULT=X'FF' (EOL)|\n*                                           |   BYTE 2  NAME LENGTH  |\n         DC    X'03,04',CL8'CNTL    ',H'1'  |   BYTE 3-10  NAME      |\n         DC    X'01,90',H'080',H'6160'      |   BYTE 11-12 NUMBER-OF |\n*                                           |     DCB-INFO SUBENTRIES|\n         DC    X'04,05',CL8'COBOL   ',H'1'  |                        |\n         DC    X'01,90',H'080',H'6160'      | DCB INFO SUBENTRY:     |\n*                                           |   BYTE 1  FORMAT PARM  |\n         DC    X'05,07',CL8'COMMAND ',H'2'  |     01 FIXED           |\n         DC    X'01,90',H'080',H'1680'      |     02 VARIABLE        |\n         DC    X'02,50',H'255',H'6160'      |     03 UNFORMATTED     |\n*                                           |   BYTE 2  RECFM        |\n         DC    X'06,04',CL8'DATA    ',H'2'  |     50 VB              |\n         DC    X'01,90',H'080',H'6160'      |     54 VBA             |\n         DC    X'02,50',H'255',H'6160'      |     90 FB              |\n*                                           |     94 FBA             |\n         DC    X'07,04',CL8'FORT    ',H'1'  |     C0 U               |\n         DC    X'01,90',H'080',H'6160'      |   BYTE 3-4  LRECL      |\n*                                           |   BYTE 5-6  BLKSIZE    |\n         DC    X'08,04',CL8'LIST    ',H'2'  +-------------- CAH TS04203\n         DC    X'01,94',H'133',H'6118'                      CAH TS04203\n         DC    X'02,54',H'255',H'6160'                      CAH TS04203\n*\n         DC    X'09,04',CL8'LOAD    ',H'1'\n         DC    X'03,C0',H'000',H'6233'\n*\n         DC    X'0A,03',CL8'OBJ     ',H'1'\n         DC    X'01,90',H'080',H'0800'\n*\n         DC    X'0B,03',CL8'PLI     ',H'1'\n         DC    X'02,50',H'104',H'6160'\n*\n         DC    X'0C,04',CL8'PLIF    ',H'1'\n         DC    X'01,90',H'080',H'0400'\n*\n         DC    X'0D,04',CL8'TEXT    ',H'2'\n         DC    X'02,50',H'255',H'6160'\n         DC    X'01,90',H'080',H'6160'\n*\n         DC    X'0E,07',CL8'VSBASIC ',H'1'\n         DC    X'02,50',H'255',H'6160'\n*                                                           CAH TS04202\n         DC    X'0F,06',CL8'DIALOG  ',H'2'                  CAH TS04203\n         DC    X'01,90',H'080',H'3120'                      CAH TS04202\n         DC    X'03,C0',H'000',H'6233'                      CAH TS04203\n*                                                           CAH TS04204\n         DC    X'10,01',CL8'C       ',H'1'                  CAH TS04204\n         DC    X'01,90',H'080',H'6160'                      CAH TS04204\n*\n         DC    X'FF,07',CL8'DEFAULT ',H'2'\n         DC    X'01,90',H'080',H'6160'\n         DC    X'02,50',H'255',H'6160'\n*----------------------------------------------------------------------\n         EJECT\n*\n         PRINT GEN\n***  CHANGED MACRO, BELOW                                   CAH TS04204\n@DS      GTEDADAT  DDNAM=X,                                            X\n               DSNAM=X,STATS=NEW,NDISP=CATLG,CDISP=DELETE,TRK=YES,     X\n               PRIME=2,SECND=2,DIR=10,UNIT=SYSTSO,BLKSZ=0,DSORG=PO,    X\n               LRECL=0,RECFM=FB\n         PRINT NOGEN\n*\nOLD0001  DC    F'1',A(MSG0001)\nMSG0001  DC    H'55',H'00',CL51'NSP0001 RECORD FORMAT IS INVALID FOR THX\n               IS DATA TYPE'\n*\nOLD0002  DC    F'1',A(MSG0002)\nMSG0002  DC    H'35',H'00',CL31'NSP0002 DATASET WAS NOT CREATED'\n*\nOLD0003  DC    F'3',A(MSG0003),A(MSG0003P),A(0)\n*                               ....+....1....+.. . .2....+....3....+\nMSG0003  DC    H'30',H'00',CL26'NSP0003 DATASET '''' CREATED'\nMSG0003P DC    H'16',H'08',CL12'PARTITIONED '\nMSG0003S DC    H'15',H'08',CL12'SEQUENTIAL '\nMSG0003B DC    H'0',H'17',CL44' '\n*\nOLD0004  DC    F'1',A(MSG0004)\nMSG0004  DC    H'33',H'00',CL29'NSP0004 IMPROPER DATASET NAME'\n*\nCONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\nNAME     IKJPOSIT DSNAME,PROMPT='DATASET NAME +',USID,                 X\n               HELP=('NAME OF SEQUENTIAL DATASET OR LIBRARY (PARTITIONEX\n               D DATASET) TO BE CREATED')\n*\nTYPE     IKJKEYWD\n         IKJNAME 'ASM'\n         IKJNAME 'CLIST'\n         IKJNAME 'CNTL',ALIAS=('JCL')\n         IKJNAME 'COBOL'\n         IKJNAME 'COMMAND'\n         IKJNAME 'DATA'\n         IKJNAME 'FORT',ALIAS=('FORTGI','FORTVS','FORTRAN')\n         IKJNAME 'LIST'\n         IKJNAME 'LOAD'\n         IKJNAME 'OBJ',ALIAS=('OBJECT')\n         IKJNAME 'PLI',ALIAS=('PL1')\n         IKJNAME 'PLIF',ALIAS=('PL1F')\n         IKJNAME 'TEXT'\n         IKJNAME 'VSBASIC'\n         IKJNAME 'DIALOG' ,                                 CAH TS04202\n         IKJNAME 'C' ,                                      CAH TS04204\n*\nORG      IKJKEYWD DEFAULT='PARTITIONED'\n         IKJNAME  'SEQUENTIAL'\n         IKJNAME  'PARTITIONED',ALIAS=('PDS','LIBRARY')\n*\nRFORM    IKJKEYWD\n         IKJNAME  'FIXED'\n         IKJNAME  'VARIABLE'\n         IKJNAME  'UNFORMATTED'\n*                                                           CAH TS04204\nKDDNAME  IKJKEYWD ,                                         CAH TS04204\n         IKJNAME 'DDNAME',SUBFLD=KSDDNAME                   CAH TS04204\n         IKJNAME 'FILE',SUBFLD=KSDDNAME                     CAH TS04204\n*                                                           CAH TS04204\nKSDDNAME IKJSUBF ,                                          CAH TS04204\n*                                           FOLLOWING MACRO CAH TS04204\nSDDNAME  IKJPOSIT DSNAME,DDNAM,PROMPT='1-8 CHARACTER FILE/DD NAME'\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA AREA OBTAINED WITH LINKSAVE                             ***\n***                                                                ***\n**********************************************************************\nWORK0    DSECT                          AREA-0 FOR VARIABLES\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nCPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nRETCDE   DS    F                        INTERNAL RETURN CODE\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  DATA VARIABLES                                                ***\n***                                                                ***\n**********************************************************************\nWORK1    DSECT                          AREA-1 FOR VARIABLES\nPPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPAR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nLOR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nDAR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nDCR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nERR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nALR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\nMYIOPL   DS    4F                       IOP LIST FOR PUTLINE\nMYPTPB   DS    3F                       PUTLINE PARM BLOCK\nLOADDR   DS    F                        ADDR OF LOW LEVEL QUALIFIER\nLOLEN    DS    H                        LENGTH OF LOW LEVEL QUALIFIER\nLOTEXT   DS    CL8                      TEXT OF LOW LEVEL QUALIFIER\nDATYPADR DS    F                        ADDR OF TABLE ENTRY\nDCBADDR  DS    F                        DCB ENTRY ADDRESS\nDSNLEN   DS    H                        TOTAL LENGTH OF DSN\nDDNLEN   DS    H                        LENGTH OF DDNAME    CAH TS04204\nOLD0003V DS    F,3A                     WORK O.L.D. FOR MSG #3\nMSG0003C DS    2H,CL44                  WORK MSG SEG #2 FOR MSG #3\n         PRINT GEN\n*     CHANGED MACRO, BELOW                                  CAH TS04204\nDS       GTEDADAT MAP=ONLY,DDNAM=X,                                    X\n               DSNAM=X,STATS=NEW,NDISP=CATLG,CDISP=DELETE,TRK=YES,     X\n               PRIME=2,SECND=2,DIR=10,UNIT=SYSTSO,BLKSZ=0,DSORG=PO,    X\n               LRECL=0,RECFM=FB\n         PRINT NOGEN\nWORK1END DS    0D\nWORK1LEN EQU   *-WORK1                  TOTAL LENGTH OF WORK-1 AREA\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAPPING MACROS                                               ***\n***                                                                ***\n**********************************************************************\n         CVT   DSECT=YES              , CVTMAP FOR IKJPARS\n         PRINT GEN\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n         IKJPTPB                        PUTLINE PARM BLOCK\n         PRINT NOGEN\n         IEFZB4D0                       MAPS SVC-99 CONTROL BLOCKS\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES  MAPS IKJEFF18 CONTROL BLOCKS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDF": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x01\\xc2\\x01\\xc2\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 450, "newlines": 450, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'PDF - FRONTEND FOR ISPF/PDF'\n         PRINT NOGEN\n**********************************************************************\n***                   PDF (ALIAS SPF AND ISPFPROF) COMMAND      TS04002\n***   DESC:                                                        ***\n***     THIS COMMAND IS A FRONTEND FOR ISPF/PDF.                   ***\n***                                                                ***\n***   FORMAT:                                                      ***\n***        PDF  OPTION  TEST/TESTX/TRACE/TRACEX                    ***\n***                                                                ***\n***   FUNCTION:                                                    ***\n***                                                                ***\n***     PDF FIRST FREES DD(ISPPROF), THEN TRIES TO ALLOCATE        ***\n***     DD(ISPPROF) TO DSN('&SYSUID..ISPF.PROFILE') WITH        TS04002\n***     DISP=(OLD,KEEP,KEEP).  IF IT CANNOT ALLOCATE BECAUSE OF    ***\n***     LOCATE ERROR 1708 (NOT FOUND IN CATALOG), IT ALLOCATES THE ***\n***     DATASET WITH DISP=(NEW,CATLG,CATLG), UNIT=SYSTSO,          ***\n***     DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO),             ***\n***     SPACE=(TRK,(1,2,10)).  FOR ANY OTHER ALLOCATION ERROR      ***\n***     CODE, THE PROGRAM TERMINATES AND GIVES THE NORMAL IKJEFF18 ***\n***     ERROR MESSAGES.                                            ***\n***                                                                ***\n***     PDF MAKES A NEW COPY OF THE COMMAND BUFFER (CBUF) AND THE  ***\n***     COMMAND PROCESSOR PARAMETER LIST (CPPL), POINTING THE NEW  ***\n***     CPPL TO THE NEW CBUF.  IF THE USER USED 'SPF' RATHER THAN  ***\n***     'PDF,' PDF WILL PUT OUT AN INFO MESSAGE SAYING THAT 'SPF'  ***\n***     HAS BEEN REPLACED BY 'PDF.'  PDF THEN PLACES THE LITERAL   ***\n***     'ISP' INTO THE NEW CBUF BEGINNING AT THE LOCATION OF THE   ***\n***     FIRST NONBLANK CHARACTER OF THE COMMAND TEXT.  IF DATASET  ***\n***     '&SYSUID..ISPF.PROFILE' WAS ALLOCATED NEW, MESSAGES     TS04002\n***     CONCERNING THE NEW DATASET ARE WRITTEN TO THE TERMINAL.    ***\n***                                                                ***\n***     PDF THEN POINTS R1 TO THE NEW CPPL, AND ATTACHES ISRPCP.   ***\n***     IT THEN WAITS FOR ISRPCP TO COMPLETE, DETACHES ISRPCP,     ***\n***     FREES STORAGE AND TERMINATES.  IF ALIAS ISPFPROF HAS    TS04002\n***     HAS BEEN USED, ISRPCP IS BYPASSED.                      TS04002\n***                                                                ***\n***   RETURN CODES:                                                ***\n***     IF ISP EXECUTES, THE CODE RETURNED IS THE CODE FROM ISP.   ***\n***     OTHERWISE THE RETURN CODE IS 12.                           ***\n***                                                                ***\n***   REGISTER USAGE:                                              ***\n***     R0-R3    - USED BY MACROS                                  ***\n***     R4-R5    - WORK REGISTERS                                  ***\n***     R6-R9    - (UNUSED)                                        ***\n***     R10      - LINKAGE REGISTER USED WITH BAL                  ***\n***     R11      - BASE OF SP0A1 WORK AREA IN SP-000               ***\n***     R12      - BASE REGISTER FOR PROGRAM PDF                   ***\n***     R13      - BASE REGISTER FOR AREA OBTAINED IN LINKSAVE,    ***\n***                AREA BEGINS WITH REGISTER SAVE AREA             ***\n***     R14      - USED BY MACROS                                  ***\n***     R15      - USED BY MACROS, RETURN CODE AT END              ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MACROS:                                                      ***\n***                                                                ***\n***     IBM:                                                       ***\n***       IKJUPT    - MAP OF THE USER PROFILE TABLE                ***\n***       IKJCPPL   - MAP OF THE COMMAND PROCESSOR PARM LIST       ***\n***       IEFZB4D0  - MAP OF SVC-99 CONTROL BLOCKS                 ***\n***       IKJEFFDF  - MAP OF IKJEFF18 (DAIRFAIL) CONTROL BLOCKS    ***\n***       ATTACH    - ATTACH A COMMAND                             ***\n***       WAIT      - WAIT FOR AN ECB TO BE POSTED                 ***\n***       DETACH    - DETACH A COMMAND                             ***\n***       GETMAIN   - GET STORAGE IN SUBPOOL 0                     ***\n***       FREEMAIN  - FREE STORAGE IN SUBPOOL 0                    ***\n***       TPUT      - WRITE TO THE TERMINAL                        ***\n***       TGET      - READ FROM THE TERMINAL                       ***\n***                                                                ***\n***     GTEL:                                                      ***\n***       LINKSAVE  - LINKAGE CONVENTIONS UPON ENTRY, AND OBTAIN   ***\n***                   A SMALL AMOUNT OF WORKING STORAGE.           ***\n***       EQ$R      - REGISTER EQUATES                             ***\n***       LINKBACK  - THE OPPOSITE OF LINKSAVE                     ***\n***       GTEDADAT  - CREATE SVC-99 AND IKJEFF18 CONTROL BLOCKS    ***\n***       GTEDASET  - INITIALIZE SVC-99 AND IKJEFF18 CONTROL BLKS  ***\n***       GTEDAALC  - EXECUTE SVC-99 AND IKJEFF18                  ***\n***                                                                ***\n***   ASSEMBLER OPTIONS:      RENT                                 ***\n***   LINKAGE EDITOR OPTIONS: RENT, REUS                           ***\n***                                                                ***\n***   CULPRIT:                                                     ***\n***     CHUCK HOFFMAN, SYSTEMS PROGRAMMING,                        ***\n***     GTE LABORATORIES TECHNICAL COMPUTING CENTER,               ***\n***     WALTHAM, MASSACHUSETTS.  617/466-2131.  12/29/82           ***\n***                                                                ***\n***   MAINTENANCE HISTORY:                                         ***\n***                                                                ***\n***   1.  USE &SYSUID INSTEAD OF &SYSPREF IN DATASET NAME.      TS04002\n***                                                             TS04002\n***   2.  IF NAME ISPFPROF IS USED, BYPASS GOING INTO ISPF.     TS04002\n***                                                             TS04002\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***          MAINLINE                                              ***\n***                                                                ***\n**********************************************************************\n*\nPDF      LINKSAVE BASE=12,GETMAIN=YES   LINKAGES PLUS A LITTLE STORAGE\n         EQ$R                           REGISTER EQUATES\n         USING SP0A0,R13                R13 BASE OF GETMAIN AREA\n         ST    R1,CPPLADR               SAVE ADDRESS OF CPPL\n*\n         BAL   R10,GETSTRGE             GET MORE STORAGE\n         USING SP0A1,R11                R11 BASE OF NEW AREA\n         MVI   SWITCH1,X'00'            INITIALIZE SWITCH1      TS04002\n*\n         BAL   R10,CHNGECMD             CREATE ISP COMMAND FROM INPUT\n*\n         BAL   R10,BILDSN               BILD DSN &SYSUID..ISPF. TS04002\n*\n         BAL   R10,OLDALLOC                     ALLOCATE DATASET OLD\n         CLC   RETCDE,HWZERO                    IF OKAY\n         BE    ISP                                GO TO PERFORM ISPF\n         LA    R4,OLDRB                         ELSE\n         CLC   (S99ERROR-S99RB)(2,R4),LOCERR08  IF NOT 'NOT IN CATLG'\n         BNE   RETCDE12                           BRANCH TO END OF PGM\n*\n         BAL   R10,NEWALLOC                     ELSE ALLOCATE NEW\n         CLC   RETCDE,HWZERO                    IF NOT OKAY\n         BNE   RETCDE12                           BRANCH TO END OF PGM\n         BAL   R10,ALLOCMSG                     WRITE PROFILE MESSAGES\n*\nISP      TM    SWITCH1,X'80'            IF 'ISPFPROF' NOT USED  TS04002\n         BO    *+8                        THEN                  TS04002\n         BAL   R10,ATTCHISP                 PERFORM ISPF PROC   TS04002\n         B     ENDING                   GO TO ENDING\n*\nRETCDE12 MVC   COMPCDE(4),FW12          IF BAD ALLOCATION, SET RC=12\n*\nENDING   FREEMAIN R,LV=SP0A1LEN,A=(11)  FREE MAIN STORAGE\n         L     R15,COMPCDE              LOAD COMPLETION CODE TO R15\n         LINKBACK                       RETURN TO CALLER\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GET MAIN STORAGE FOR WORK AREA.                               ***\n***                                                                ***\n**********************************************************************\nGETSTRGE ST    R10,GER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         GETMAIN R,LV=SP0A1LEN        , GET MAIN STORAGE\n         LR    R11,R1                   R11 POINTS TO NEW AREA\n*\nGEEND    L     R10,GER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   CREATE NEW ISP COMMAND BUFFER FROM OLD PDF COMMAND           ***\n***                                                                ***\n**********************************************************************\nCHNGECMD ST    R10,CHR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLADR               R4 POINTS TO CPPL\n         MVC   NCPPL(16),0(R4)          COPY CPPL TO NEW CPPL\n         LA    R4,NCPPL                 SAVE ADDR OF\n         ST    R4,NCPPLADR                OF NEW CPPL\n         LA    R4,NCBUF                 PLACE ADDR OF NEW CMMD\n         ST    R4,NCPPL+(CPPLCBUF-CPPL)   INTO NEW CPPL\n*\n         L     R4,CPPLADR               R4 POINTS TO CPPL\n         L     R4,(CPPLCBUF-CPPL)(0,R4) R4 POINTS TO OLD CBUF\n         LH    R5,0(0,R4)               R5 IS LEN OF OLD CBUF\n         BCTR  R5,0                       MINUS ONE FOR EXEC\n         EX    R5,CHMVC1                MOVE OLD BUFFER TO NEW\n*\n         LA    R4,NCBUFTXT-1            R4 PNTS 1 CHAR BEFORE NCBUFTXT\nCHLOOP1  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHAR IN TEXT\n         CLI   0(R4),X'40'              IF BLANK,\n         BE    CHLOOP1                    STAY IN LOOP\n*\n         CLC   0(8,R4),CHISPROF         IF USER USED 'ISPFPROF' TS04002\n         BNE   *+8                        THEN                  TS04002\n         OI    SWITCH1,X'80'                TURN ON SWITCH1-0   TS04002\n*                                                               TS04002\n         CLC   0(3,R4),CHSPF            IF USER DID NOT USE 'SPF'\n         BNE   CHOVRLAY                   BRANCH AROUND\n         ST    R4,CHR4SAV               ELSE SAVE WORK REGISTER\n         BAL   R10,SPFMSG                 PUT OUT SPF INFO MESSAGE\n         L     R4,CHR4SAV                 RESTORE WORK REGISTER\nCHOVRLAY MVC   0(3,R4),CHISP            MOVE 'ISP' OVER 'PDF' OR 'SPF'\n*\nCHEND    L     R10,CHR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\nCHMVC1   MVC   NCBUF(0),0(R4)           MOVE OLD BUFFER TO NEW\n         EJECT\n**********************************************************************\n***                                                                ***\n***   BUILD DATASET NAME '&SYSUID..ISPF.PROFILE'                TS04002\n***                                                                ***\n**********************************************************************\nBILDSN   ST    R10,BIR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   PROFDSN(44),BLANK44      CLEAR DSN FIELD\n         XR    R4,R4                    CLEAR R4 FOR IC\n         L     R5,CPPLADR               ADDR OF CPPL TO R5\n         L     R5,(CPPLPSCB-CPPL)(0,R5) R5 POINTS TO PSCB       TS04002\n         IC    R4,(PSCBUSRL-PSCB)(0,R5) R4 IS LENGTH OF USERID  TS04002\n         BCTR  R4,0                       MINUS ONE FOR EXEC\n         EX    R4,BIMVC1                MOVE &SYSUID TO PROFILE TS04002\n*\n         LA    R5,PROFDSN               R5 IS ADDR OF PROFILE DSN\n         AR    R5,R4                    R5 IS ADDR OF LAST CHAR OF PREF\n         MVI   1(R5),C'.'               PUT DOT INTO NAME\n         MVC   2(12,R5),LOWDSN          MOVE LOW END OF DSN TO NAME\n*\n         LA    R4,14(0,R4)              R4 IS LENGTH OF PROFILE DSN\n         STH   R4,PROFDSLN              SAVE THE LENGTH\n*\nBIEND    L     R10,BIR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\n*\nBIMVC1   MVC   PROFDSN(0),(PSCBUSER-PSCB)(R5) MOVE &SYSUID TO P TS04002\n         EJECT\n**********************************************************************\n***                                                                ***\n*** TRY TO ALLOCATE '&SYSUID..ISPF.PROFILE'   DISP=(OLD,KEEP,KE TS04002\n***                                                                ***\n**********************************************************************\nOLDALLOC ST    R10,OLR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   FRE(@FRLEN),@FR          COPY DATA TO WORK AREA\n         GTEDASET FRE,CPPLPTR=NCPPLADR  INITIALIZE WORK DATA\n         GTEDAALC FRE,VERB=UN           FREE DD(ISPPROF)\n*\n         MVC   OLD(@OLLEN),@OL          COPY DATA TO WORK AREA\n         GTEDASET OLD,CPPLPTR=NCPPLADR  INITIALIZE WORK DATA\n         MVC   OLDDSNAM(44),PROFDSN     MOVE DSN TO WORK DATA\n         GTEDAALC OLD,VERB=AL,ERRMSG=NO TRY TO ALLOCATE OLD (NOMSG)\n         MVC   RETCDE(2),OLDS99RC+2     MOVE SVC-99 RC TO PROC RETCDE\n*\nOLEND    L     R10,OLR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n*** TRY TO ALLOCATE '&SYSUID..ISPF.PROFILE' DISP=(NEW,CATLG,CAT TS04002\n***                                                                ***\n**********************************************************************\nNEWALLOC ST    R10,NER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         GTEDAALC FRE,VERB=UN           FREE DD(ISPPROF)\n*\n         MVC   NEW(256),@NE             COPY DATA TO WORK AREA\n         MVC   NEW+256(@NELEN-256),@NE+256 COPY THE REST OF IT\n         GTEDASET NEW,CPPLPTR=NCPPLADR  INITIALIZE WORK DATA\n         MVC   NEWDSNAM(44),PROFDSN     MOVE DSN TO WORK DATA\n         GTEDAALC NEW,VERB=AL           TRY TO ALLOCATE NEW\n         MVC   RETCDE(2),NEWS99RC+2     MOVE SVC-99 RC TO PROC RETCDE\n*\nNEEND    L     R10,NER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PUT OUT INFORMATION MESSAGE ABOUT CREATING NEW PROFILE.      ***\n***                                                                ***\n**********************************************************************\nALLOCMSG ST    R10,ALR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,ALMSG-80              R4 POINTS TO -1 MESSAGE\n         LA    R5,4(0,0)                R5 IS LOOP COUNTER\nALLOOP1  LA    R4,80(0,R4)              POINT TO NEXT MESSAGE\n         TPUT  (R4),80                  WRITE MESSAGE\n         BCT   R5,ALLOOP1               LOOP BACK UP IF MSGS REMAIN\n*\n         MVC   WKMSGB(80),ALMSGB1       START MESSAGE LINE WITH DSN\n         MVC   WKMSGB+23(44),PROFDSN    ADD DSN TO MESSAGE LINE\n         LA    R4,WKMSGB+23             R4 POINTS\n         AH    R4,PROFDSLN                JUST BEYOND DSN IN MESSAGE\n         MVC   0(36,R4),ALMSGB2         COMPLETE MESSAGE LINE WITH DSN\n         TPUT  WKMSGB,80                WRITE THE MESSAGE\n*\n         LA    R4,ALMSGC-80             R4 POINTS TO -1 MESSAGE\n         LA    R5,7(0,0)                R5 IS LOOP COUNTER\nALLOOP2  LA    R4,80(0,R4)              POINT TO NEXT MESSAGE\n         TPUT  (R4),80                  WRITE MESSAGE\n         BCT   R5,ALLOOP2               LOOP BACK UP IF MSGS REMAIN\n*\n         TGET  ALENTER,1                REQUIRE ENTER KEY\n*\nALEND    L     R10,ALR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PUT OUT INFO MESSAGE ABOUT SPF NO LONGER BEING SUPPORTED     ***\n***                                                                ***\n**********************************************************************\nSPFMSG   ST    R10,SPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,SPMSGE-80             R4 POINTS TO -1 MESSAGE\n         LA    R5,7(0,0)                R5 IS LOOP COUNTER\nSPLOOP1  LA    R4,80(0,R4)              POINT TO NEXT MESSAGE\n         TPUT  (R4),80                  WRITE MESSAGE\n         BCT   R5,SPLOOP1               LOOP BACK UP IF MSGS REMAIN\n*\n         TGET  SPENTER,1                REQUIRE ENTER KEY\n*\nSPEND    L     R10,SPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     ATTACH ISRPCP COMMAND PROCESSOR                            ***\n***                                                                ***\n**********************************************************************\nATTCHISP ST    R10,ATR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R1,NCPPLADR              LOAD POINTER TO NEW CPPL\n         ATTACH EP=ISRPCP,ECB=ISPECB,SF=(E,LISTATT) ATTACH ISRPCP\n         ST    R1,ISPTCBAD              SAVE TCB ADDRESS\n         WAIT  ECB=ISPECB             , WAIT FOR ISPF TO COMPLETE\n         ST    R15,COMPCDE              SAVE COMPLETION CODE\n         DETACH ISPTCBAD              , DETACH ISPF\n*\nATEND    L     R10,ATR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***      DATA CONSTANTS                                            ***\n**********************************************************************\nCONSTNTS DS    0F\nBLANK44  DC    CL44' '                  CLEAR DSN\nLOWDSN   DC    CL12'ISPF.PROFILE'       LOWER END OF DSN\n@FR      GTEDADAT DDNAM=ISPPROF,UNALC=YES\n@OL      GTEDADAT DDNAM=ISPPROF,DSNAM=00,STATS=OLD,NDISP=KEEP,         X\n               CDISP=KEEP,CNVRT=YES\n@NE      GTEDADAT DDNAM=ISPPROF,DSNAM=00,STATS=NEW,NDISP=CATLG,        X\n               CDISP=CATLG,CNVRT=YES,TRK=YES,PRIME=1,SECND=2,DIR=10,   X\n               UNIT=SYSTSO,BLKSZ=3120,DSORG=PO,LRECL=80,               X\n               RECFM=FB\nCHISP    DC    CL3'ISP'                 NEW COMMAND NAME\nCHSPF    DC    CL3'SPF'                 SPF COMMAND NAME\nCHISPROF DC    CL8'ISPFPROF'            ISPFPROF COMMAND NAME   TS04002\nHWZERO   DC    H'0'                     ZERO ERROR CODE\nLOCERR08 DC    X'1708'                  LOCATE ERR CODE 08 (NOT CATLG)\nFW12     DC    F'12'                    COMPLETION CODE 12\nALMSG    DC    CL80' '\n         DC    CL80'                         YOUR ISPF/PDF PROFILE'\n         DC    CL80' '\n         DC    CL80'No standard ISPF/PDF profile dataset was found for X\n               your user id, so one was'\nALMSGB1  DC    CL80'created.  It is named '''\nALMSGB2  DC    CL36''', and is allocated to file ISPPROF.'\nALMSGC   DC    CL80' '\n         DC    CL80'Since this is a new profile, you may want to changeX\n                some of your ISPF/PDF'\n         DC    CL80'parameters (in Option 0).'\n         DC    CL80' '\n         DC    CL80'***************************************************X\n               ***************************'\n         DC    CL40'                    Type in a NULL LINE '   TS04002\n         DC    CL40'to continue.'                               TS04002\n         DC    CL80'***************************************************X\n               ***************************'\nSPMSGE   DC    CL80'***************************************************X\n               ***************************'\n         DC    CL80' '\n         DC    CL80'       ''SPF'' is no longer supported.  ''PDF'' hasX\n                been invoked instead.'\n         DC    CL80' '\n         DC    CL80'             Type in a NULL LINE to continue into IX\n               SPF/PDF'\n         DC    CL80' '\n         DC    CL80'***************************************************X\n               ***************************'\n         EJECT\n**********************************************************************\n***     AREA OBTAINED WITH LINKSAVE GETMAIN=YES,  ADDRESSED BY R13 ***\n**********************************************************************\nSP0A0    DSECT\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nCPPLADR DS     F                        ADDRESS OF CPPL\nGER10SAV DS    F                        RETURN ADDR SAVE AREA\nCOMPCDE  DS    F                        FINAL COMPLETION CODE\nRETCDE   DS    H                        RETURN CODE FROM PROC BLOCKS\n         DS    CL50                     UNUSED\n         EJECT\n**********************************************************************\n***      WORK STORAGE AREA, ADDRESSED BY R11                       ***\n**********************************************************************\nSP0A1    DSECT\n         DS    0D\nNCBUF    DS    0CL255                   NEW COMMAND BUFFER\nNCBUFLN  DS    H                          LENGTH\nNCBUFOFF DS    H                          OFFSET\nNCBUFTXT DS    CL251                      TEXT\nNCPPLADR DS    A\nNCPPL    DS    4F                       NEW COMMAND CPPL\nLISTATT  ATTACH EP=ISRPCP,ECB=ISPECB,SF=L  ATTACH LIST FOR ISRPCP\nISPECB   DS    F                        ECB FOR ATTACHED ISPF\nISPTCBAD DS    F                        ISPF TCB ADDRESS\nCHR4SAV  DS    F                        WORK REGISTER SAVE AREA\nCHR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nBIR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nOLR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nNER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nADR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nALR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nATR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nSPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nWKMSGB   DS    CL102                    MESSAGE WITH DSN IN IT\nPROFDSLN DS    H                        LENGTH OF DSN OF PROFILE DS\nPROFDSN  DS    CL44                     DSN OF PROFILE DATASET\nALENTER  DS    CL1                      RESPONSE FROM ENTER KEY\nSPENTER  DS    CL1                      RESPONSE FROM ENTER KEY\nFRE      GTEDADAT DDNAM=ISPPROF,UNALC=YES,MAP=ONLY\nOLD      GTEDADAT DDNAM=ISPPROF,DSNAM=00,STATS=OLD,NDISP=KEEP,         X\n               CDISP=KEEP,CNVRT=YES,MAP=ONLY\nNEW      GTEDADAT DDNAM=ISPPROF,DSNAM=00,STATS=NEW,NDISP=CATLG,        X\n               CDISP=CATLG,CNVRT=YES,TRK=YES,PRIME=1,SECND=2,DIR=10,   X\n               UNIT=SYSTSO,BLKSZ=3120,DSORG=PO,LRECL=80,               X\n               RECFM=FB,MAP=ONLY\nSWITCH1  DC    B'00000000'              SWITCH1 AREA            TS04002\n*                1.......                 0: ISPFPROF IN USE    TS04002\n*                .1111111               1-7: NOT USED           TS04002\n*                                                               TS04002\nSP0A1END DS    0D                       D/W BOUNDRY FOR GETMAIN\nSP0A1LEN EQU   SP0A1END-SP0A1           EQUATE FOR LENGTH\n         EJECT\n**********************************************************************\n***      MAPPING DSECTS                                            ***\n**********************************************************************\n         PRINT NOGEN\n         SPACE 3\nPSCB     IKJPSCB                        PROT STEP CONTROL BLOCK TS04002\n         SPACE 3\nCPPL     IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         SPACE 3\n         IEFZB4D0\n         SPACE 3\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDFCPY": {"ttr": 6409, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n  SELECT MEMBER=((#PDF,PDF,R),                       <== HELP MEMBER   X\n               (#ISPFPRO,ISPFPROF,R))                <== HELP ALIAS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDFDOC": {"ttr": 6411, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\xd3\\x00\\xd3\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 211, "newlines": 211, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                         PDF Command\n                           - and -\n                      ISPFPROF Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n\n  The PDF Command is used to preallocate the ISPF profile dataset,\n  then bring the user into ISPF/PDF.  PDF is a frontend which uses\n  the ISRPCP entrypoint of ISPF/PDF, enabling the user to select\n  optional panel numbers when invoking the product.\n\n  ISPFPROF is an alias of the PDF command.  When using this alias,\n  the profile dataset will be allocated, but the program will not\n  enter ISPF/PDF.\n\n  Syntax -\n\n        PDF  option  TEST/TESTX/TRACE/TRACEX\n\n\n  Syntax -\n\n        ISPFPROF\n\n\n  +--------+\n  |  NOTE  |\n  +--------+\n        ISPFPROF is an alias of the PDF command processor.  But\n        ISPFPROF is ** NOT ** an alias of the HELP member.  There\n        are two help members, ISPFPROF and PDF.\n\n\nDIRECTORY:\n\n    This PDS contains the following members relating to PDF:\n\n    PDFDOC   - This documentation.\n    PDFJCL   - Non-SMP install jobstream.\n    #PDF     - HELP member for PDF.\n    #ISPFPRO - HELP member for alias ISPFPROF.\n    PDFCPY   - IEBCOPY control cards. Used in non-SMP install.\n    PDFLNK   - LKED control cards. Used in non-SMP install.\n    PDF      - Source program.\n\n    EQ$R     - Register equates, described below.\n    GTEDAALC - Dynamic allocation macro, described below.\n    GTEDADAT - Dynamic allocation macro, described below.\n    GTEDADOC - Documentation for dynamic allocation macros,\n               described below.\n    GTEDASET - Dynamic allocation macro, described below.\n    LINKBACK - Linkage conventions, described below.\n    LINKSAVE - Linkage conventions, described below.\n\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  The following non-IBM macros are used to assemble\n          PDF. If you already have older versions in your\n          system, replace them with the ones from this PDS.\n\n            EQ$R     - Register equates.\n            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).\n            GTEDADAT - Create SVC99/IKJEFF18 control blocks.\n            GTEDASET - Link SVC99/IKJEFF18 control blocks together.\n            LINKBACK - Linkage conventions out.\n            LINKSAVE - Linkage conventions in.\n\n(  )  2.  The following macro is documentation for the GTEDAxxx\n          macros, above.  It is not used by PDF, but should\n          be copied into your system.\n\n            GTEDADOC - Documentation of GTEDAxxx macros.\n\n(  )  3.  Edit source member PDF.  At labels '@NE' and 'NEW'\n          are macros containing UNIT=SYSTSO for allocation of\n          the profile dataset.  Change this to match your\n          installation's generic unit name.  Make the change\n          at both labels.\n\n          A specific volume serial number can be designated by\n          including VLSER=xxxxxx in both macros, where xxxxxx\n          is the selected serial number.\n\n(  )  4.  Remove aliases 'SPF', 'PDF', and 'ISPFPROF' if they\n          exist for module ISRPCP.  The module is probably in\n          SYS1.LPALIB.  If the module was installed with SMP,\n          follow your installation standards for removing the\n          aliases.  The following TSO commands would remove the\n          aliases without SMP.  If the module is in LPALIB,\n          an IPL with CLPA will be required.\n\n              DELETE 'SYS1.LPALIB(SPF)' ALIAS\n              DELETE 'SYS1.LPALIB(PDF)' ALIAS\n              DELETE 'SYS1.LPALIB(ISPFPROF)' ALIAS\n\n(  )  5.  For a non-SMP install, run the jobstream in member\n          PDFJCL of this PDS. Recommended load libraries are:\n\n          A.  SYS1.LPALIB\n          B.  SYS1.LINKLIB\n          C.  SYS1.CMDLIB\n          D.  library named on the LNKLST\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles PDF using the source in member PDF of\n              this PDS.\n\n          B.  Linkedits PDF into the selected load library,\n              assigning aliases of SPF and ISPFPROF.  Attributes\n              are RENT, REUS and REFR.\n\n          C.  IEBCOPYs members #PDF and #ISPFPRO to the selected\n              HELP library, renaming them PDF and ISPFPROF.\n              #ISPFPRO is not an alias of #PDF.\n\n(  )      For an SMP install, follow your installation's\n          procedures for installation of a RENT, REUS, REFR\n          module into LPALIB, LINKLIB, CMDLIB, or another library\n          on the LNKLST, with the HELP member being installed as\n          a ++MAC into HELP or another library in the SYSHELP\n          concatenation.   The ++MOD entry should have\n          TALIAS(ISPFPROF,SPF), and the ++MAC entry should have\n          MALIAS(ISPFPROF).\n\n(  )  5.  If you select SYS1.LPALIB as your target library, you\n          will need to IPL, including 'CLPA' in the response to\n          the system parameters prompt.  This will create a new\n          LPA, picking up your PDF, ISPFPROF, and SPF names in\n          the process.\n\n(  )      If you have Dynamic BLDL, and already have a version\n          of PDF installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n(  )      If you have ACF2, the following addition needs to be\n          made to the ACF99@RB macro in order to be able to use\n          datasets for which rules exist.  Refer to the ACF2\n          System Programmer's Guide for more information about\n          program pathing and updating the ACF99@RB macro.\n\n          *\n          *        PDF COMMAND STRUCTURE\n          *        ---------------------\n          *\n          PDF      @CMD  SPF\n                   @TCB  (#PDF,#PPF)\n                   @TCB  (#PSRPCP),(#PSPMAIN,#PPFMAIN)            (c.72)\n                   @TCB  (#PPFPMD,#PSPTASK),                         X\n                         (#PSRYXDR,#PSPANRC,#PSPXC,#PSPXP,#PSRPTC),  X\n                         FLAGS=SISTER\n                   @TCB  #PSPRINT\n          #PDF     @RB   PDF,CMD=CMD\n          #PPF     @RB   SPF,CMD=CMD\n          #PSRPCP  @RB   ISRPCP,CMD=CMD\n          #PPFMAIN @RB   SPFMAIN,CMD=CMD\n          #PSPMAIN @RB   ISPMAIN,CMD=CMD\n          #PPFPMD  @RB   SPFPMD\n          #PSPRINT @RB     DSPRINT,END,CMD=CDE\n          #PSPTASK @RB   ISPTASK,LASTTCB,CMD=(CMD,NEXTTCB)\n          #PSRPTC  @RB   ISRPTC,LASTTCB,CMD=(CMD,NEXTTCB)\n          #PSRYXDR @RB     ISRYXDR,NEXT=(RB,#PSRYXX),CMD=CMD      (c.72)\n          #PSRYXX  @RB       ISRY**,NEXT=(RB,#PSPXC,#PSPXP),         X\n                         LASTTCB,CMD=(CMD,NEXTTCB)\n          #PSPANRC @RB     ISPANREC,NEXT=(RB,#PSPXC)\n          #PSPXC   @RB     ********,END,RENT,SYSLIB,CMD=(CDE,NEXTTCB)\n          #PSPXP   @RB     ********,END,NORENT,NOSYSLIB,CMD=CDE\n\n\n(  )      If you have ACF2 and are using command limiting lists,\n          and are not already running a version of PDF, you\n          must do either one of the following:\n\n          A.  Turn the ALLCMDS bit on in the LOGONID of selected\n              users, and invoke PDF with the '#' prefix.\n              That is, use the name #PDF or alias #SPF. This\n              limits the use of PDF only to those LOGONIDs\n              with the ALLCMDS bit on.  Turn the bit on with the\n              following sequence from TSO READY state using a\n              LOGONID with appropriate authority to change the\n              bit.\n\n                   ACF\n                   LIST logonid\n                   CHANGE * ALLCMDS\n                   END\n\n          B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes PDF available to everyone.\n\n                   $TSOCMD  (PDF,ISPFPROF,SPF)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDFJCL": {"ttr": 6660, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00>\\x00>\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 62, "newlines": 62, "modlines": 0, "user": "HOFFMAN"}, "text": "//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.LPALIB',\n//             HELPLIB='SYST.HELP',\n//             CMDNAME=PDF,LINKMEM=PDFLNK,COPYMEM=PDFCPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDFLNK": {"ttr": 6662, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x04\\x00\\x04\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 4, "newlines": 4, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY PDF('TS04202')\n  ALIAS ISPFPROF\n  ALIAS SPF\n  NAME PDF(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAFECCPY": {"ttr": 6664, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n  SELECT MEMBER=((#SAFECOP,SAFECOPY,R),              <== HELP MEMBER   X\n               (#SAFEC,SAFEC,R))                     <== HELP ALIAS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAFECDOC": {"ttr": 6666, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x96\\x00\\x96\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 150, "newlines": 150, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                         SAFECOPY Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n    SAFECOPY is a copy command which enables several users to\n    update the same dataset simultaneously, without conflicting\n    with each other or with users who are reading the dataset.\n    SAFECOPY is especially useful in CLISTs which write to a\n    common dataset.\n\n    Syntax -\n\n     SAFECOPY  FROMDSNAME(dsname|*)   TODSNAME(dsname)                  TS04902\n     SAFEC     FROMDATASET(dsname|*)  TODATASET(dsname)                 TS04902\n               FROMFILE(filename)     TOFILE(filename)\n               FROMDDNAME(filename)   TODDNAME(filename)\n\n               OLD   NONUM   NOTIFY\n               MOD   NUM     NONOTIFY\n\nDIRECTORY:\n\n    This PDS contains the following members relating to SAFECOPY:\n\n    SAFECDOC - This documentation.\n    SAFECJCL - Non-SMP install jobstream.\n    #SAFECOP - HELP member.\n    #SAFEC   - Alias for HELP member.  Needed for IEBCOPY in\n               the non-SMP install.\n    SAFECCPY - IEBCOPY control cards.  Used in non-SMP install.\n    SAFECLNK - LKED control cards.  Used in non-SMP install.\n    SAFECOPY - Source program.\n\n    EQ$R     - Register equates, described below.\n    GTEDAALC - Dynamic allocation macro, described below.\n    GTEDADAT - Dynamic allocation macro, described below.\n    GTEDADOC - Documentation for dynamic allocation macros,\n               described below.\n    GTEDASET - Dynamic allocation macro, described below.\n    LINKBACK - Linkage conventions, described below.\n    LINKSAVE - Linkage conventions, described below.\n\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  The following non-IBM macros are used to assemble\n          SAFECOPY. If you already have older versions in your\n          system, replace them with the ones from this PDS.\n\n            EQ$R     - Register equates.\n            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).\n            GTEDADAT - Create SVC99/IKJEFF18 control blocks.\n            GTEDASET - Link SVC99/IKJEFF18 control blocks together.\n            LINKBACK - Linkage conventions out.\n            LINKSAVE - Linkage conventions in.\n\n(  )  2.  The following macro is documentation for the GTEDAxxx\n          macros, above.  It is not used by SAFECOPY, but should\n          be copied into your system.\n\n            GTEDADOC - Documentation of GTEDAxxx macros.\n\n(  )  3.  The major queue name is 'USERDSN' and is at label 'QNAM1'.\n          Because all SAFECOPY users enqueue on this name, they\n          do not conflict with each other.  You may want to\n          use one of these other names so that SAFECOPY users\n          will not conflict with users of these other utilities:\n\n            SPFUSER  - ISPF/PDF Edit and Utilities.\n            SYSIEWLP - Linkage Editor SYSLMOD files.\n\n(  )  4.  For a non-SMP install, run the jobstream in member\n          SAFECJCL of this PDS. Recommended load libraries are:\n\n          A.  SYS1.CMDLIB\n          B.  library named on the LNKLST\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles SAFECOPY using the source in member\n              SAFECOPY of this PDS.\n\n              Note: Access to SYS1.AMODGEN is required because\n                    SAFECOPY uses the CVT macro.\n\n          B.  Linkedits SAFECOPY into the selected load library,\n              assigning an alias of SAFEC. Attributes are RENT,\n              REUS and REFR.\n\n          C.  IEBCOPYs member #SAFECOP and alias entry #SAFEC to the\n              selected HELP library, renaming them SAFECOPY and\n              SAFEC.\n\n(  )      For an SMP install, follow your installation's procedures\n          for installation of a RENT, REUS, REFR module into\n          LPALIB, LINKLIB, CMDLIB, or another library on the\n          LNKLST, with the HELP member being installed as a\n          ++MAC into HELP or another library in the SYSHELP\n          concatenation.   The ++MOD entry should have TALIAS(SAFEC),\n          and the ++MAC entry should have MALIAS(SAFEC).\n\n(  )  5.  If you select SYS1.LPALIB as your target library, you\n          will need to IPL, including 'CLPA' in the response to\n          the system parameters prompt.  This will create a new\n          LPA, picking up your SAFECOPY and SAFEC alias in the\n          process.\n\n(  )      If you have Dynamic BLDL, and already have a version\n          of SAFECOPY installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n(  )      If you have ACF2 and are using command limiting lists,\n          and are not already running a version of SAFECOPY, you\n          must do either one of the following:\n\n          A.  Turn the ALLCMDS bit on in the LOGONID of selected\n              users, and invoke SAFECOPY with the '#' prefix.\n              That is, use the alias name #SAFEC. This limits the\n              use of SAFECOPY only to those LOGONIDs with the\n              ALLCMDS bit on.  Turn the bit on with the following\n              sequence from TSO READY state using a LOGONID with\n              appropriate authority to change the bit.\n\n                   ACF\n                   LIST logonid\n                   CHANGE * ALLCMDS\n                   END\n\n          B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes SAFECOPY available to everyone.\n\n                   $TSOCMD  (SAFECOPY,SAFEC)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAFECJCL": {"ttr": 6670, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00>\\x00>\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 62, "newlines": 62, "modlines": 0, "user": "HOFFMAN"}, "text": "//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.CMDLIB',\n//             HELPLIB='SYST.HELP',\n//             CMDNAME=SAFECOPY,LINKMEM=SAFECLNK,COPYMEM=SAFECCPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAFECLNK": {"ttr": 6672, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY SAFECOPY('TS04902')\n  ALIAS SAFEC\n  NAME SAFECOPY(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAFECOPY": {"ttr": 6674, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x05\\xf5\\x05\\xf5\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 1525, "newlines": 1525, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'SAFECOPY - USER ENQUEUE THEN WRITE TO A DATASET'\n**********************************************************************\n***                                                                ***\n***                      SAFECOPY COMMAND                          ***\n***                                                                ***\n***  GENERAL FUNCTION:                                             ***\n***                                                                ***\n***      THIS COMMAND ENQUEUES THE OUTPUT DATASET NAME, COPIES     ***\n***      DATA FROM THE INPUT DATASET TO THE OUTPUT DATASET, THEN   ***\n***      DEQUEUES THE NAME.  BY USING SAFECOPY, A USER DOES NOT    ***\n***      HAVE TO WAIT FOR EXCLUSIVE CONTROL OF A DATASET BEFORE    ***\n***      COPYING INTO IT.  THE USER WILL NOT CONFLICT WITH OTHERS  ***\n***      READING THE DATASET, OR WITH OTHERS WHO ARE ALSO WRITING  ***\n***      TO THE DATASET WITH SAFECOPY.                             ***\n***                                                                ***\n***      THE INPUT AND OUTPUT DATASETS CAN BE DESIGNATED BY        ***\n***      DATASET NAME OR FILE NAME.  ADDITIONALLY, THE INPUT       ***\n***      DATA CAN COME DIRECTLY FROM THE TIMESHARING TERMINAL      ***\n***      OR FROM INSTREAM DATA IN A COMMAND LIST (CLIST).          ***\n***                                                                ***\n***                                                                ***\n***  FORMAT:                                                       ***\n***                                                                ***\n***    SAFECOPY                                                    ***\n***                                                                ***\n***       FROMDSNAME(DSNAME|*)                                CAH84308A\n***       FROMDATASET(DSNAME|*)                               CAH84308A\n***       FROMDDNAME(DDNAME)                                  CAH84308A\n***       FROMFILE(DDNAME)                                    CAH84308A\n***                                                           CAH84308A\n***       TODSNAME(DSNAME)                                    CAH84308A\n***       TODATASET(DSNAME)                                   CAH84308A\n***       TODDNAME(DDNAME)                                    CAH84308A\n***       TOFILE(DDNAME)                                      CAH84308A\n***                                                           CAH84308A\n***       OLD | MOD                                           CAH84308A\n***                                                           CAH84308A\n***       NONUM | NUM                                         CAH84308A\n***                                                           CAH84308A\n***       NOTIFY | NONOTIFY                                   CAH84308A\n***                                                                ***\n***                                                                ***\n***    REQUIRED:                                                   ***\n***      1. FROMDSNAME/FROMDATASET OR FROMDDNAME/FROMFILE          ***\n***      2. TODSNAME/TODATASET OR TODDNAME/TOFILE                  ***\n***                                                                ***\n***    DEFAULTS:                                                   ***\n***      1. OLD                                                    ***\n***      2. NONUM                                                  ***\n***      3. NOTIFY                                            CAH84308A\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  RETURN CODES -                                                ***\n***       00 - NORMAL COMPLETION                                   ***\n***   NON-00 - CORRESPOND TO ERROR MESSAGES                        ***\n***                                                                ***\n***  REGISTER USAGE                                                ***\n***                                                                ***\n***      R0-R1 - MACROS, LINKAGE CONVENTIONS                       ***\n***      R2-R3 - MACROS, WORK                                      ***\n***      R4-R5 - WORK                                              ***\n***         R6 - WORK, BASE FOR WORK2 FILE I/O AREA                ***\n***         R7 - << NOT USED >>                                    ***\n***         R8 - BASE FOR SECOND HALF OF PROGRAM (SEE R12)         ***\n***         R9 - BASE FOR PARM DESCRIPTOR LIST CREATED BY PARSE    ***\n***        R10 - BAL REGISTER                                      ***\n***        R11 - BASE FOR WORK1 PROGRAM VARIABLES AREA             ***\n***        R12 - BASE FOR FIRST HALF OF PROGRAM (SEE R8)           ***\n***        R13 - BASE OF WORK0 AREA, REG SAVE AREA AND CODES       ***\n***        R14 - MACROS, LINKAGE CONVENTIONS                       ***\n***        R15 - MACROS, WORK, LINKAGE CONVENTIONS                 ***\n***          +---------------------------------------------+       ***\n***          |  EXCEPT FOR BASE REGISTERS, DATA IS NEVER   |       ***\n***          |  PASSED IN REGISTERS BETWEEN SUBSECTIONS OF |       ***\n***          |  CODE.  IF YOU WRITE NEW ROUTINES TO WHICH  |       ***\n***          |  YOU BAL USING R10, YOU ARE FREE TO USE     |       ***\n***          |  R0-R5 WITHOUT SAVING AND RESTORING THEM.   |       ***\n***          +---------------------------------------------+       ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***     GTEDADAT - CREATE SVC-99 AND IKJEFF18 CONTROL BLOCKS       ***\n***     GTEDASET - INITIALIZE AND LINK SVC-99 AND IKJEFF18 CONTROL ***\n***                BLOCKS                                          ***\n***     GTEDAALC - PERFORM DYNAMIC ALLOCATION AND DAIRFAIL         ***\n***                ANALYSIS OF FAILURES                            ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, ALIAS(SAFEC)             ***\n***                                                                ***\n***  CULPRIT:                                                      ***\n***     CHUCK HOFFMAN, SYSTEMS PROGRAMMING                         ***\n***     GTE LABORATORIES                                           ***\n***     TECHNICAL COMPUTATION CENTER                               ***\n***     40 SYLVAN ROAD                                             ***\n***     WALTHAM, MASSACHUSETTS  617/466-2131    V/N 679-2131       ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n***    1.  CORRECTED BRANCH AROUND BAL IN MAINLINE TO CLOSE   CAH84274A\n***        FILES.                                             CAH84274A\n***                                                                ***\n***    2.  ADDED NOTIFY|NONOTIFY OPERAND.                     CAH84308A\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  PROGRAM LOGIC:                                                ***\n***                                                                ***\n***  SAFECOPY:  PERFORMS LINKAGE CONVENTIONS, GETS WORK SPACE,     ***\n***             ASSIGNS BASE REGISTERS.                            ***\n***                                                                ***\n***  MAINLINE:  CONTROLS BALS TO SUBSECTIONS OF CODE.              ***\n***                                                                ***\n***    PPLSETUP:  CREATES PARSE PARAMETER LIST.                    ***\n***                                                                ***\n***    PARSE:     PARSES PARMS WITH IKJPARS.                       ***\n***                                                                ***\n***    IOPLSET:   CREATES THE IO PARM LIST, GETLINE PARM LIST,     ***\n***               AND PUTLINE PARM LIST.                           ***\n***                                                                ***\n***    GETPARMS:  CONTROLS EXECUTION OF BALS TO SUBSECTIONS TO     ***\n***               INITIALIZE PARM FIELDS.  ENSURES THAT DSNAMES    ***\n***               ARE DIFFERENT FOR INPUT AND OUTPUT.              ***\n***                                                                ***\n***      DFNGET:    GETS THE DATASET NAME IF THE FROMDSN PARM      ***\n***                 IS IN USE.  UNALLOCATES THE DATASET NAME, THEN ***\n***                 ALLOCATES IT SHR AND SAVES THE DDNAME.  CHECKS ***\n***                 FOR A NONBLANK MEMBER NAME IF THE DSORG IS PO  ***\n***                 (UNLESS FROMDSN(*) IS IN USE).                 ***\n***                                                                ***\n***      DGET:      GETS THE DDNAME IF THE FROMDDNAME PARM         ***\n***                 IS IN USE.  GETS THE DSNAME AND SAVES IT.      ***\n***                 CHECKS FOR A NONBLANK MEMBER NAME IF THE       ***\n***                 DSORG IS PO.                                   ***\n***                                                                ***\n***      DSNGET:    SAME AS DFNGET, BUT FOR OUTPUT DSNAME.         ***\n***                 (*) IS NOT AN OPTION FOR OUTPUT.               ***\n***                                                                ***\n***      DDNGET:    SAME AS DGET, BUT FOR OUTPUT DDNAME.           ***\n***                                                                ***\n***    ENQUEUE:   ENQUEUES THE OUTPUT DATASET NAME USING MAJOR     ***\n***               NAME 'USERDSN' AND MINOR NAME MATCHING THE DSN.  ***\n***                                                                ***\n***    OPENSETS:  OPENS THE INPUT DATASET.  OPENS THE OUTPUT       ***\n***               DATASET.  CHECKS FOR INVALID USE OF 'MOD'        ***\n***               IF OUTPUT DATASET IS PARTITIONED.                ***\n***                                                                ***\n***      SETCHK:    CHECKS FOR VALID COMBINATIONS OF INPUT AND     ***\n***                 OUTPUT RECORD FORMATS.  SETS SWITCH BITS IN    ***\n***                 SWITCH1 VARIABLE FOR LATER USE BY EDIT         ***\n***                 SUBSECTION.                                    ***\n***                                                                ***\n***    COPY:      GETS WORK SPACE FOR FILE I/O.  AMOUNT IS THE     ***\n***               LARGER BLOCKSIZE OF THE INPUT OR OUTPUT DATASET. ***\n***               MINIMUM IS 320 BYTES.                            ***\n***                                                                ***\n***      GTREC:     GETS RECORD FROM QSAM FOR FILE INPUT, OR USES  ***\n***                 GETLINE FOR TERMINAL/INSTREAM INPUT.  FOR      ***\n***                 TERMINAL/INSTREAM, CHECKS FOR 'END' ENTRY      ***\n***                 TO INDICATE TERMINATION OF INPUT.  IF SO,      ***\n***                 BRANCHES TO EODAD POINT IN COPY SUBROUTINE.    ***\n***                                                                ***\n***      EDIT:      FORMATS OUTPUT LOGICAL RECORD FROM INPUT.      ***\n***                 HANDLES DIFFERENCES IN RECORD FORMAT AND       ***\n***                 LOGICAL RECORD LENGTHS.                        ***\n***                                                                ***\n***      PTREC:     PUTS A LOGICAL RECORD WITH QSAM.               ***\n***                                                                ***\n***                                                                ***\n***    CLOSSETS:  BUILDS PARM LISTS AND CLOSES THE DATASETS.       ***\n***                                                                ***\n***    DEQUEUE:   DEQUEUES THE OUTPUT DATASET NAME.                ***\n***                                                                ***\n***  ENDING:    RELEASES SPACE USED BY PARM DESCRIPTOR LIST,       ***\n***             AND WORK SPACE ACQUIRED BY PROGRAM.  SETS          ***\n***             RETURN CODE.  FOLLOWS LINKAGE CONVENTIONS BACK     ***\n***             TO CALLER.                                         ***\n***                                                                ***\n***  MSGPUT:    SELECTS MESSAGE ON THE BASIS OF INTERNAL RETCDE,   ***\n***             USED AS AN INPUT ARGUMENT.  COMPLETES OUTPUT       ***\n***             LINE DESCRIPTOR (O.L.D.) AND DISPLAYS THE MESSAGE  ***\n***             WITH PUTLINE.                                      ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***            EQUATES                                             ***\n**********************************************************************\nRBASE    EQU   12                       BASE REGISTER NUMBER\nRBAL     EQU   10                       BAL REGISTER NUMBER\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         PRINT NOGEN\n**********************************************************************\n***                                                                ***\n***   PROLOGUE                                                     ***\n***                                                                ***\n**********************************************************************\n*\nSAFECOPY CSECT                        , CSECTID\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(8)                     LENGTH\n         DC    CL8'SAFECOPY'              ID\n         DC    CL8'&SYSDATE'              SYSTEM DATE MM/DD/YY\n         DC    CL6' &SYSTIME'             SYSTEM TIME HH.MM\n         STM   R14,R12,12(R13)          SAVE R0-R12, R14-R15\n         LR    RBASE,R15                LOAD BASE ADDRESS BASER\n         USING SAFECOPY,RBASE           ADDRESSABILTIY OF CSECT\n         GETMAIN R,LV=WORK0LEN          GET STORAGE FOR S.A. + WORK\n         ST    R13,4(0,R1)              ADDR OF PREV S.A. TO MY S.A.\n         ST    R1,8(0,R13)              ADDR OF MY S.A. TO PREV S.A.\n         LM    R0,R1,20(R13)            RESTORE R0-R1 TO PRE-GETMAIN\n         L     R13,8(0,R13)             R13 POINTS TO MY S.A.\n         USING WORK0,R13                ADDRESSABILITY OF WORK0\n         ST    R1,R1SAVE                INITIAL VAL OF R1 TO MY STORAGE\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         USING PARMPDL,R9               ADDRESSABILITY OF PRM DESC LST\n         L     R8,AHALF2                R8 BASE FOR SECOND HALF OF PGM\n         USING HALF2,R8\n         ST    R1,CPPLPTR               SAVE CPPL POINTER\n         GETMAIN  R,LV=WORK1LEN         GET MAIN STORAGE\n         LR    R11,R1                   ADDRESS OF MAIN STORAGE\n         USING WORK1,R11                ADDRESSABILITY OF WORK1\n         XC    COMPCODE,COMPCODE        CLEAR PROGRAM RETURN CODE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n         B     MAINLINE\n*\nHALF2    EQU   SAFECOPY+4096\nAHALF2   DC    A(HALF2)                 SECOND BASE ADDRESS\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAIN LINE ROUTINE                                            ***\n***                                                                ***\n**********************************************************************\n*\nMAINLINE BAL   R10,PPLSETUP             SET UP PARSE PARM LIST\n         BAL   R10,PARSE                PARSE THE INPUT PARAMETERS\n*\n         BAL   R10,IOPLSET              SET UP IOPL AND GTPB\n*\n         BAL   R10,GETPARMS             GET AND CHECK PARMS\n         CLC   RETCDE(4),DZIPS          IF RETCDE 0\n         BE    *+14                       BRANCH AROUND\n         MVC   COMPCODE(4),RETCDE       ELSE SET COMPLETION CODE\n         B     ENDING                     AND BRANCH TO ENDING\n*\n         BAL   R10,ENQUEUE              PERFORM ENQUEUE\n*\n         BAL   R10,OPENSETS             OPEN THE DATASETS\n         CLC   RETCDE(4),DZIPS          IF RETCDE 0\n         BE    *+14                       BRANCH AROUND\n         MVC   COMPCODE(4),RETCDE       ELSE SET COMPLETION CODE\n         B     ENDING                     AND BRANCH TO ENDING\n*\n         BAL   R10,COPY                 COPY THE DATA\n         CLC   RETCDE(4),DZIPS          IF RETCDE 0\n         BE    MACLOSE                    BRANCH AROUND       CAH84274A\n         MVC   COMPCODE(4),RETCDE       ELSE SET COMPLETION CODE\n*\nMACLOSE  BAL   R10,CLOSSETS             CLOSE THE DATASETS    CAH84274A\n*\n         BAL   R10,DEQUEUE              PERFORM DEQUEUE\n*\n         B     ENDING                   BRANCH TO ENDING\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EPILOGUE                                                     ***\n***                                                                ***\n**********************************************************************\nENDING   LA       R4,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R4,0(0,R4)              R4 POINTS TO PDL\n         IKJRLSA  (R4)                    FREE STORAGE OF PDL\n*\n         CLC      COMPCODE,DZIPS          IF COMPLETION CODE NOT ZERO\n         BNE      ENDFREE                   BRANCH TO ENDING  CAH84308A\n*                                                             CAH84308A\n         TM       SWITCH1,X'02'           IF 'NONOTIFY'       CAH84308A\n         BO       ENDFREE                   BRANCH TO ENDING  CAH84308A\n         XC       RETCDE,RETCDE           ELSE SET CODE=00 FOR MSG 00\n         BAL      R10,MSGPUT                AND PUT OUT MESSAGE\n*\nENDFREE  FREEMAIN R,LV=WORK1LEN,A=(R11) , FREE MAIN STORAGE   CAH84308A\n*\n         LR    R1,R13                   LOAD MY S.A. ADDR FOR FREEMAIN\n         L     R14,COMPCODE             SAVE PROGRAM COMPLETION CODE\n         L     R13,4(0,R13)             RESTORE R13 FROM MY S.A.\n         FREEMAIN R,LV=WORK0LEN,A=(R1)  FREE STORAGE FOR WORK0\n         LR    R15,R14                  SET PROGRAM COMPLETION CODE\n         LM    R0,R12,20(R13)           RESTORE R0-R12 FM CALLERS S.A.\n         L     R14,12(0,R13)            RESTORE R14 FROM CALLERS S.A.\n         MVI   12(R13),X'FF'            RETURN INDCATR TO CALLERS S.A.\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST                             ***\n***                                                                ***\n**********************************************************************\nPPLSETUP ST    R10,PPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)\n         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)\n         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)\n         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)\n         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)\n         DROP  R4\n*\nPPEND    L     R10,PPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    R10,PAR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     R10,PAR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    SET UP THE INPUT OUTPUT PARM LIST.                          ***\n***                                                                ***\n***    IOPLIOPB, THE ADDR OF THE GETLINE/PUTLINE/PUTGET PARM       ***\n***    BLOCK WILL BE FILLED IN BEFORE EACH GETLINE/PUTLINE/PUTGET. ***\n***                                                                ***\n***    INITIALIZE MY GETLINE PARM BLOCK.                           ***\n***    INITIALIZE MY PUTLINE PARM BLOCK.                           ***\n***    INITIALIZE MY OUTPUT LINE DESCRIPTOR BLOCK.                 ***\n***                                                                ***\n**********************************************************************\nIOPLSET  ST    R10,IOR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               R4 POINTS TO CPPL\n         USING CPPL,R4                  ADDRESSABILITY\n         LA    R5,MYIOPL                R5 POINTS TO IOPL\n         USING IOPL,R5                  ADDRESSABILITY\n*\n         MVC   IOPLUPT(4),CPPLUPT       GET ADDR OF UPT FROM CPPL\n         MVC   IOPLECT(4),CPPLECT       GET ADDR OF ECT FROM CPPL\n         LA    R6,MYECB                 ADDR OF MY ECB\n         ST    R6,IOPLECB                 SET IN IOPL\n         XC    IOPLIOPB(4),IOPLIOPB     CLEAR IOPB ADDRESS\n*\n         MVC   MYGTPB(8),GTPBPROT       INITIALIZE MY GTPB\n*\n         MVC   MYPTPB(12),PTPBPROT      INITIALIZE MY PTPB\n*\n         MVC   MYOLD(8),OLDPROT         INITIALIZE MY OLD\n*\nIOEND    L     R10,IOR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\n         DROP  R4\n         DROP  R5\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    GET AND ANALYZE THE PARMS                                   ***\n***                                                                ***\n**********************************************************************\nGETPARMS ST    R10,GER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*                                                             CAH84308A\nGENOTE   CLC   KNOTE,H2                 IF NONOTIFY IN USE    CAH84308A\n         BNE   *+8                        THEN                CAH84308A\n         OI    SWITCH1,X'02'              TURN ON SWITCH      CAH84308A\n*\nGECKFDSN CLC   KFROMDSN(2),DZIPS        IF FROMDSNAME OPRND NOT IN USE\n         BE    GECKFDDN                   GO TO CHECK FOR FROMDDNAME\n         BAL   R10,DFNGET               ELSE PERFORM DSN GET/ALLOCATE\n         CLC   RETCDE,DZIPS             IF RETURN NOT 0\n         BNE   GEEND                      GO TO ENDING\n         B     GECKTDSN                 GO TO CHECK FOR TODSNAME\n*\nGECKFDDN CLC   KFROMDDN(2),DZIPS        IF FROMDDNAME OPRND NOT IN USE\n         BE    GEERR18                    BRANCH TO ERROR 18\n         BAL   R10,DGET                 ELSE PERFORM FROMDDNAME GET\n         CLC   RETCDE,DZIPS             IF RETURN NOT 0\n         BNE   GEEND                      GO TO ENDING\n         B     GECKTDSN                 GO TO CHECK FOR TODSNAME\n*\nGECKTDSN CLC   KTODSN(2),DZIPS          IF TODSNAME OPERAND NOT IN USE\n         BE    GECKTDDN                   GO TO CHECK FOR TODDNAME\n         BAL   R10,DSNGET               ELSE PERFORM DSN GET/ALLOCATE\n         CLC   RETCDE,DZIPS             IF RETURN NOT 0\n         BNE   GEEND                      GO TO ENDING\n         B     GECKDIFF                 ELSE GO TO NEXT CHECK\n*\nGECKTDDN CLC   KTODDN(2),DZIPS          IF TODDNAME OPERAND NOT IN USE\n         BE    GEERR04                    BRANCH TO ERROR 04\n         BAL   R10,DDNGET               ELSE PERFORM TODDNAME GET\n         CLC   RETCDE,DZIPS             IF RETURN NOT 0\n         BNE   GEEND                      GO TO ENDING\n         B     GECKDIFF                 ELSE GO TO NEXT CHECK\n*\nGECKDIFF LH    R4,RLEN2                 INPUT DSN LENGTH TO R4\n         CH    R4,RLEN1                 COMPARE WITH OUTPUT LENGTH\n         BNE   GEEND                      IF DIFFERENT, GO TO ENDING\n         BCTR  R4,0                     R4 -1 FOR EXEC\n         B     *+10                     BRANCH AROUND EXECUTED INSTR\n         CLC   RNAM2(0),RNAM1             COMPARE DATASET NAMES\n         EX    R4,*-6                   EXECUTE THE COMPARE\n         BE    GEERR44                  IF NAMES ARE SAME, GO TO ERROR\n         B     GEEND                      ELSE GO TO ENDING\n*\nGEERR04  LA    R15,X'04'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT ERROR MESSAGE\n         B     GEEND                    GO TO END OF ROUTINE\n*\nGEERR18  LA    R15,X'18'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT ERROR MESSAGE\n         B     GEEND                    GO TO END OF ROUTINE\n*\nGEERR44  LA    R15,X'44'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT ERROR MESSAGE\n         B     GEEND                    GO TO END OF ROUTINE\n*\nGEEND    L     R10,GER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    GET/ALLOCATE FROMDSNAME                                     ***\n***                                                                ***\n**********************************************************************\nDFNGET   ST    R10,DFR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,DS3LEN(0,0)           LENGTH OF DDSAME UNALLOC T.U.\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         EX    R4,DFMVC4                EXECUTE MOVE\n         LA    R4,DS4LEN(0,0)           LENGTH OF DSNAME ALLOC T.U.\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         EX    R4,DFMVC5                EXECUTE MOVE\n         L     R4,EFROMDSN              R4 IS POINTER TO DSN\n         LH    R5,EFROMDSN+4            R5 IS LENGTH OF DSN\n         STH   R5,RLEN2                 SAVE FOR LATER\n         BCTR  R5,0                     R5 -1 FOR EXEC\n         EX    R5,DFMVC1                EXECUTE MOVE TO RNAM2\n         EX    R5,DFMVC2                  AND TO DEALLOCATE T.U.\n         EX    R5,DFMVC3                  AND TO ALLOCATE T.U.\n*\n         CLI   0(R4),C'*'               IF FROMDSN(*) IS IN USE\n         BNE   *+12                     THEN\n         OI    SWITCH1,X'80'              TURN ON SWITCH1-0\n         B     DFEND                      AND BYPASS ALLOCATIONS\n*\n         XC    RMEMLEN2(2),RMEMLEN2     ZERO MEMBER LENGTH\n         MVC   RMEM2(8),BLANKS          BLANK MEMBER NAME\n         TM    EFROMDSN+14,X'80'        IF MEMBER NAME IN USE\n         BZ    DF0KEY                     THEN\n         L     R4,EFROMDSN+8                R4 POINTS TO MEMBER NAME\n         LH    R5,EFROMDSN+12               R5 IS LENGTH OF MEMBER NME\n         STH   R5,RMEMLEN2                  SAVE THE LENGTH\n         BCTR  R5,0                         -1 FOR EXEC\n         EX    R5,DFMVC6                    MOVE NAME TO ALLOC T.U.\n         EX    R5,DFMVC7                    MOVE NAME TO WORK AREA\n         B     DFSET                      ELSE\nDF0KEY   XC    DSDMEMBR-6(2),DSDMEMBR-6     ZERO ALLOC T.U. KEY\n*\nDFSET    GTEDASET DSC,CPPLPTR=CPPLPTR , LINK CONTROL BLOCKS TOGETHER\n         GTEDAALC DSC,VERB=UN,ERRMSG=NO UNALLOCATE DATASET NAME\n         GTEDASET DSD,CPPLPTR=CPPLPTR , LINK CONTROL BLOCKS TOGETHER\n         GTEDAALC DSD,VERB=AL         , ALLOCATE DATASET NAME\n         CLC   DSDS99RC(4),DZIPS        IF RETURN CODE NOT ZERO\n         BNE   DFERR10                    SET RETURN CODE TO 16\n         MVC   RDDN2(8),DSDRTDDN        SAVE RETURNED DDNAME\n         LA    R4,DD3LEN(0,0)           LENGTH OF INFO T.U.\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         EX    R4,DFMVC8                EXECUTE THE MOVE\n         MVC   DDCDDNAM(8),RDDN2        SET THE DDNAME\n         GTEDASET DDC,CPPLPTR=CPPLPTR , LINK CONTROL BLOCKS TOGETHER\n         GTEDAALC DDC,VERB=IN         , GET INFO\n         TM    DDCINORG,X'02'           IF NOT PARTITIONED ORGANIZATION\n         BNO   DFEND                      BRANCH TO ENDING\n         CLC   DDCRTMEM(8),BLANKS       ELSE IF MEMBER NAME NOT BLANK\n         BNE   DFEND                      BRANCH TO ENDING\n         B     DFERR3C                  ELSE (IF PO AND BLANK) ERROR\n*\nDFERR10  LA    R15,X'10'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT MESSAGE\n         B     DFEND                    GO TO ENDING\n*\nDFERR3C  LA    R15,X'3C'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT ERROR MESSAGE\n         B     DFEND                    GO TO END OF ROUTINE\n*\nDFEND    L     R10,DFR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\nDFMVC1   MVC   RNAM2(0),0(R4)           EXECUTED INSTRUCTION\nDFMVC2   MVC   DSCDSNAM(0),0(R4)        EXECUTED INSTRUCTION\nDFMVC3   MVC   DSDDSNAM(0),0(R4)        EXECUTED INSTRUCTION\nDFMVC4   MVC   DSC(0),DS3               MOVE CONSTANTS\nDFMVC5   MVC   DSD(0),DS4               MOVE CONSTANTS\nDFMVC6   MVC   DSDMEMBR(0),0(R4)        EXECUTED INSTRUCTION\nDFMVC7   MVC   RMEM2(0),0(R4)           EXECUTED INSTRUCTION\nDFMVC8   MVC   DDC(0),DD3               MOVE CONSTANTS\n         EJECT\n**********************************************************************\n***                                                                ***\n***         GET FROMDDNAME                                         ***\n***                                                                ***\n**********************************************************************\nDGET     ST    R10,DGR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,DD2LEN(0,0)           LENGTH OF DDNAME T.U.\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND EXECUTED INSTR\n         MVC   DDB(0),DD2                 MOVE CONSTANTS\n         EX    R4,*-6                   EXECUTE MOVE\n         L     R4,EFROMDDN              R4 POINTS TO DDNAME\n         MVC   RDDN2(8),BLANKS          BLANK WORK DDNAME\n         LH    R5,EFROMDDN+4            R5 IS LENGTH OF DDNAME\n         C     R5,F8                    IF MORE THAN 8 CHARS\n         BNH   *+8                      THEN\n         L     R5,F8                      SET LENGTH TO 8\n         BCTR  R5,0                     R5 MINUS 1 FOR EXEC\n         B     *+16                     BRANCH AROUND EXECUTED INSTR\n         MVC   DDBDDNAM(0),0(R4)          MOVE DDNAME TO T.U.\n         MVC   RDDN2(0),0(R4)             ALSO TO WORK AREA\n         EX    R5,*-12                  EXECUTE MOVE TO T.U.\n         EX    R5,*-10                  EXECUTE MOVE TO WORK AREA\n         GTEDASET  DDB,CPPLPTR=CPPLPTR , LINK CONTROL BLOCKS TOGETHER\n         GTEDAALC  DDB,VERB=IN,ERRMSG=YES\n         L     R4,DDBS99RC              LOAD SVC-99 RETURN CODE\n         LTR   R4,R4                    IF NOT ZERO\n         BNZ   DGERR14                    BRANCH TO ERROR 20\n         MVC   RNAM2(44),DDBINDSN       SAVE RETURNED DSNAME\n         MVC   RLEN2(2),DDBINDSN-2        AND LENGTH\n         TM    DDBINORG,X'02'           IF NOT PARTITIONED ORGANIZATION\n         BNO   DGEND                      BRANCH TO ENDING\n         CLC   DDBRTMEM(8),BLANKS       ELSE IF MEMBER NAME NOT BLANK\n         BNE   DGEND                      BRANCH TO ENDING\n         B     DGERR3C                  ELSE (IF PO AND BLANK) ERROR\n*\nDGERR14  LA    R15,X'14'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     DGEND                    GO TO ENDING\n*\nDGERR3C  LA    R15,X'3C'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     DGEND                    GO TO END OF ROUTINE\n*\nDGEND    L     R10,DGR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    GET/ALLOCATE TODSNAME                                       ***\n***                                                                ***\n**********************************************************************\nDSNGET   ST    R10,DSR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,DS1LEN(0,0)           LENGTH OF DDSAME UNALLOC T.U.\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         EX    R4,DSMVC4                EXECUTE MOVE\n         LA    R4,DS2LEN(0,0)           LENGTH OF DSNAME ALLOC T.U.\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         EX    R4,DSMVC5                EXECUTE MOVE\n         L     R4,ETODSN                R4 IS POINTER TO DSN\n         LH    R5,ETODSN+4              R5 IS LENGTH OF DSN\n         STH   R5,RLEN1                 SAVE FOR LATER\n         BCTR  R5,0                     R5 -1 FOR EXEC\n         EX    R5,DSMVC1                EXECUTE MOVE TO RNAM1\n         EX    R5,DSMVC2                  AND TO DEALLOCATE T.U.\n         EX    R5,DSMVC3                  AND TO ALLOCATE T.U.\n         XC    RMEMLEN1(2),RMEMLEN1     ZERO MEMBER LENGTH\n         MVC   RMEM1(8),BLANKS          BLANK MEMBER NAME\n         TM    ETODSN+14,X'80'          IF MEMBER NAME IN USE\n         BZ    DS0KEY                     THEN\n         L     R4,ETODSN+8                  R4 POINTS TO MEMBER NAME\n         LH    R5,ETODSN+12                 R5 IS LENGTH OF MEMBER NME\n         STH   R5,RMEMLEN1                  SAVE THE LENGTH\n         BCTR  R5,0                         -1 FOR EXEC\n         EX    R5,DSMVC6                    MOVE NAME TO ALLOC T.U.\n         EX    R5,DSMVC7                    MOVE NAME TO WORK AREA\n         B     DSSET                      ELSE\nDS0KEY   XC    DSBMEMBR-6(2),DSBMEMBR-6     ZERO ALLOC T.U. KEY\n*\nDSSET    GTEDASET DSA,CPPLPTR=CPPLPTR , LINK CONTROL BLOCKS TOGETHER\n         GTEDAALC DSA,VERB=UN,ERRMSG=NO UNALLOCATE DATASET NAME\n         GTEDASET DSB,CPPLPTR=CPPLPTR , LINK CONTROL BLOCKS TOGETHER\n         GTEDAALC DSB,VERB=AL         , ALLOCATE DATASET NAME\n         CLC   DSBS99RC(4),DZIPS        IF RETURN CODE NOT ZERO\n         BNE   DSERR0C                    SET RETURN CODE TO 12\n         MVC   RDDN1(8),DSBRTDDN        SAVE RETURNED DDNAME\n         LA    R4,DD3LEN(0,0)           LENGTH OF INFO T.U.\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         EX    R4,DSMVC8                EXECUTE THE MOVE\n         MVC   DDCDDNAM(8),RDDN1        SET THE DDNAME\n         GTEDASET DDC,CPPLPTR=CPPLPTR , LINK CONTROL BLOCKS TOGETHER\n         GTEDAALC DDC,VERB=IN         , GET INFO\n         TM    DDCINORG,X'02'           IF NOT PARTITIONED ORGANIZATION\n         BNO   DSEND                      BRANCH TO ENDING\n         CLC   DDCRTMEM(8),BLANKS       ELSE IF MEMBER NAME NOT BLANK\n         BNE   DSMOD                      BRANCH TO NEXT CHECK\n         B     DSERR38                  ELSE (IF PO AND BLANK) ERROR\nDSMOD    CLI   KMOD+1,X'01'             IF PO AND NONBLANK AND 'MOD'\n         BE    DSERR40                    GO TO ERROR\n         B     DSEND                    ELSE GO TO ENDING\n*\nDSERR0C  LA    R15,X'0C'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     DSEND                    GO TO ENDING\n*\nDSERR38  LA    R15,X'38'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     DSEND                    GO TO END OF ROUTINE\n*\nDSERR40  LA    R15,X'40'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     DSEND                    GO TO END OF ROUTINE\n*\nDSEND    L     R10,DSR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\nDSMVC1   MVC   RNAM1(0),0(R4)           EXECUTED INSTRUCTION\nDSMVC2   MVC   DSADSNAM(0),0(R4)        EXECUTED INSTRUCTION\nDSMVC3   MVC   DSBDSNAM(0),0(R4)        EXECUTED INSTRUCTION\nDSMVC4   MVC   DSA(0),DS1               MOVE CONSTANTS\nDSMVC5   MVC   DSB(0),DS2               MOVE CONSTANTS\nDSMVC6   MVC   DSBMEMBR(0),0(R4)        EXECUTED INSTRUCTION\nDSMVC7   MVC   RMEM1(0),0(R4)           EXECUTED INSTRUCTION\nDSMVC8   MVC   DDC(0),DD3               MOVE CONSTANTS\n         EJECT\n**********************************************************************\n***                                                                ***\n***         GET TODDNAME                                           ***\n***                                                                ***\n**********************************************************************\nDDNGET   ST    R10,DDR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,DD1LEN(0,0)           LENGTH OF DDNAME T.U.\n         BCTR  R4,0                       MINUS 1 FOR EXEC\n         B     *+10                     BRANCH AROUND EXECUTED INSTR\n         MVC   DDA(0),DD1                 MOVE CONSTANTS\n         EX    R4,*-6                   EXECUTE MOVE\n         L     R4,ETODDN                R4 POINTS TO DDNAME\n         MVC   RDDN1(8),BLANKS          BLANK WORK DDNAME\n         LH    R5,ETODDN+4              R5 IS LENGTH OF DDNAME\n         C     R5,F8                    IF MORE THAN 8 CHARS\n         BNH   *+8                      THEN\n         L     R5,F8                      SET LENGTH TO 8\n         BCTR  R5,0                     R5 MINUS 1 FOR EXEC\n         B     *+16                     BRANCH AROUND EXECUTED INSTR\n         MVC   DDADDNAM(0),0(R4)          MOVE DDNAME TO T.U.\n         MVC   RDDN1(0),0(R4)             ALSO TO WORK AREA\n         EX    R5,*-12                  EXECUTE MOVE TO T.U.\n         EX    R5,*-10                  EXECUTE MOVE TO WORK AREA\n         GTEDASET  DDA,CPPLPTR=CPPLPTR , LINK CONTROL BLOCKS TOGETHER\n         GTEDAALC  DDA,VERB=IN,ERRMSG=YES\n         L     R4,DDAS99RC              LOAD SVC-99 RETURN CODE\n         LTR   R4,R4                    IF NOT ZERO\n         BNZ   DDERR08                    BRANCH TO ERROR 08\n         MVC   RNAM1(44),DDAINDSN       SAVE RETURNED DSNAME\n         MVC   RLEN1(2),DDAINDSN-2        AND LENGTH\n         TM    DDAINORG,X'02'           IF NOT PARTITIONED ORGANIZATION\n         BNO   DDEND                      BRANCH TO ENDING\n         CLC   DDARTMEM(8),BLANKS       ELSE IF MEMBER NAME NOT BLANK\n         BNE   DDMOD                      BRANCH TO NEXT CHECK\n         B     DDERR38                  ELSE (IF PO AND BLANK) ERROR\nDDMOD    CLI   KMOD+1,X'01'             IF PO AND NONBLANK AND 'MOD'\n         BE    DDERR40                    GO TO ERROR\n         B     DDEND                    ELSE GO TO ENDING\n*\nDDERR08  LA    R15,X'08'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT ERROR MESSAGE\n         B     DDEND                    GO TO ENDING\n*\nDDERR38  LA    R15,X'38'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT ERROR MESSAGE\n         B     DDEND                    GO TO END OF ROUTINE\n*\nDDERR40  LA    R15,X'40'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT ERROR MESSAGE\n         B     DDEND                    GO TO END OF ROUTINE\n*\nDDEND    L     R10,DDR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    ENQUEUE THE RNAM1 NAME                                      ***\n***                                                                ***\n**********************************************************************\nENQUEUE  ST    R10,ENR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   ENQLIST(12),ENQPROTO     INITIALIZE PARM LIST FOR ENQ\n         MVC   ENQLIST+1(1),RLEN1+1     LENGTH TO PARM LIST\n         LA    R5,RNAM1                 ADDR OF MINOR NAME TO R5\n         ST    R5,ENQLIST+8               THEN TO PARM LIST\n         ENQ   MF=(E,ENQLIST)           ENQUEUE THE NAME\n*\nENEND    L     R10,ENR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\n         SPACE 6\n**********************************************************************\n***                                                                ***\n***    DEQUEUE THE RNAM1 NAME                                      ***\n***                                                                ***\n**********************************************************************\nDEQUEUE  ST    R10,DER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   DEQLIST(12),DEQPROTO     INITIALIZE PARM LIST FOR DEQ\n         MVC   DEQLIST+1(1),RLEN1+1     LENGTH TO PARM LIST\n         LA    R5,RNAM1                 ADDR OF MINOR NAME TO R5\n         ST    R5,DEQLIST+8               THEN TO PARM LIST\n         DEQ   MF=(E,DEQLIST)           DEQUEUE THE NAME\n*\nDEEND    L     R10,DER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    OPEN THE DATASETS                                           ***\n***                                                                ***\n**********************************************************************\nOPENSETS ST    R10,OPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         USING IHADCB,R4                ADDRESSABILITY OF DCB\n*\n         LA    R5,DCBILEN(0,0)          LENGTH OF INPUT DCB\n         BCTR  R5,0                       -1 FOR EXEC\n         EX    R5,OPMVC1                INITIALIZE DCB\n         LA    R5,DCBOLEN(0,0)          LENGTH OF OUTPUT DCB\n         BCTR  R5,0                       -1 FOR EXEC\n         EX    R5,OPMVC2                INITIALIZE DCB\n*\nOPENINCK TM    SWITCH1,X'80'            IF USING FROMDSN(*)\n         BO    OPENOUT                    SKIP OPENING INPUT FILE\n*\nOPENIN   LA    R4,INDCB                 R5 POINTS TO INPUT DCB\n         MVC   DCBDDNAM(8),RDDN2        FILL IN DDNAME\n         MVC   OPENLIST(4),OPENLI       INPUT OPTIONS TO PARM LIST\n         LA    R5,INDCB                 ADDRESS OF INPUT DCB\n         STCM  R5,7,OPENLIST+1            INTO OPEN PARM LIST\n         OPEN  MF=(E,OPENLIST)        , OPEN THE INPUT DATASET\n         TM    DCBOFLGS,X'10'           IF NOT SUCCESSFUL\n         BZ    OPERR1C                    GO TO ERROR ROUTINE\n         MVC   RECFMI(1),DCBRECFM       SAVE THE RECORD FORMAT\n         MVC   LRECLI(2),DCBLRECL         AND THE LRECL\n         MVC   BLKSIZEI(2),DCBBLKSI       AND THE BLOCKSIZE\n         B     OPENOUT                  GO TO OPEN OTHER FILE\n*\nOPENOUT  LA    R4,OUTDCB                R5 POINTS TO OUTPUT DCB\n         MVC   DCBDDNAM(8),RDDN1        FILL IN DDNAME\n         CLI   KMOD+1,X'01'             IF 'MOD' OPERAND IS USED\n         BNE   *+14                       THEN\n         MVC   OPENLIST(4),OPENLOX          'EXTEND' OPTIONS TO LIST\n         B     *+10                       ELSE\n         MVC   OPENLIST(4),OPENLO           'OUTPUT' OPTIONS TO LIST\n         LA    R5,OUTDCB                ADDRESS OF OUTPUT DCB\n         STCM  R5,7,OPENLIST+1            INTO OPEN PARM LIST\n         OPEN  MF=(E,OPENLIST)        , OPEN THE DATASET\n         TM    DCBOFLGS,X'10'           IF NOT SUCCESSFUL\n         BZ    OPERR20                    GO TO ERROR ROUTINE\n         MVC   RECFMO(1),DCBRECFM       SAVE THE RECORD FORMAT\n         MVC   LRECLO(2),DCBLRECL         AND THE LRECL\n         MVC   BLKSIZEO(2),DCBBLKSI       AND THE BLOCKSIZE\n         B     OPSETCHK                 GO TO CHECK FORMATS, ETC.\n*\n         DROP  R4\n*\nOPSETCHK BAL   R10,SETCHK               CHECK DATASET INFORMATION\n         B     OPEND                    BRANCH TO END OF ROUTINE\n*\nOPERR1C  LA    R15,X'1C'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     OPEND                    GO TO ENDING\n*\nOPERR20  LA    R15,X'20'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     OPEND                    GO TO ENDING\n*\nOPEND    L     R10,OPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\nOPMVC1   MVC   OUTDCB(0),DCBPROTO       INITIALIZE DCB\nOPMVC2   MVC   INDCB(0),DCBPROTI        INITIALIZE DCB\n         EJECT\n**********************************************************************\n***                                                                ***\n***   CLOSE THE DATASETS                                           ***\n***                                                                ***\n**********************************************************************\nCLOSSETS ST    R10,CLR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TM    SWITCH1,X'80'            IF USING FROMDSN(*)\n         BO    CLOSOUT                    BRANCH AROUND CLOSE INPUT\n*\nCLOSIN   LA    R4,INDCB                 ADDRESS OF INPUT DCB\n         MVC   CLOSLIST(4),CLOSPRTI     INITIALIZE PARM LIST\n         CLOSE ((R4)),MF=(E,CLOSLIST)   CLOSE THE DATASETS\n         LTR   R15,R15                  IF RETURN CODE NOT ZERO\n         BNZ   CLERR24                    GO TO ERROR ROUTINE\n*\nCLOSOUT  LA    R4,OUTDCB                ADDRESS OF INPUT DCB\n         MVC   CLOSLIST(4),CLOSPRTO     INITIALIZE PARM LIST\n         CLOSE ((R4)),MF=(E,CLOSLIST)   CLOSE THE DATASETS\n         LTR   R15,R15                  IF RETURN CODE NOT ZERO\n         BNZ   CLERR28                    GO TO ERROR ROUTINE\n*\n         B     CLEND\n*\nCLERR24  LA    R15,X'24'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     CLEND                    GO TO ENDING\n*\nCLERR28  LA    R15,X'28'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     CLEND                    GO TO ENDING\n*\nCLEND    L     R10,CLR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   CHECK DATASET INFORMATION (BLKSIZE, LRECL, ETC.)             ***\n***                                                                ***\n**********************************************************************\nSETCHK   ST    R10,SER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TM    SWITCH1,X'80'            IF USING FROMDSN(*)\n         BO    SECKO                      SKIP CHECKING INPUT DATASET\n*\nSECKI    TM    RECFMI,DCBRECU           IF UNDEFINED FORMAT (F+V)\n         BO    SEERR30                    BRANCH TO ERROR\n         TM    RECFMI,DCBRECF           IF FIXED FORMAT\n         BNO   *+12                       THEN\n         OI    SWITCH1,X'40'              TURN ON SWITCH1-1\n         B     SECKO                      AND GO TO CHECK OUTPUT D'SET\n         TM    RECFMI,DCBRECV           ELSE\n         BNO   *+12                     IF VARIABLE FORMAT\n         OI    SWITCH1,X'20'              TURN ON SWITCH1-2\n         B     SECKO                      AND GO TO CHECK OUTPUT D'SET\n         B     SEERR30                  ELSE GO TO ERROR ROUTINE\n*\nSECKO    TM    RECFMO,DCBRECU           IF UNDEFINED FORMAT (F+V)\n         BO    SEERR30                    BRANCH TO ERROR\n         TM    RECFMO,DCBRECF           IF FIXED FORMAT\n         BNO   *+12                       THEN\n         OI    SWITCH1,X'10'              TURN ON SWITCH1-3\n         B     SEEND                      AND GO TO CHECK OUTPUT D'SET\n         TM    RECFMO,DCBRECV           ELSE\n         BNO   *+12                     IF VARIABLE FORMAT\n         OI    SWITCH1,X'08'              TURN ON SWITCH1-4\n         B     SEEND                      AND GO TO CHECK OUTPUT D'SET\n         B     SEERR30                  ELSE GO TO ERROR ROUTINE\n*\nSEERR30  LA    R15,X'30'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     SEEND                    GO TO ENDING\n*\nSEEND    L     R10,SER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     PERFORM THE DATA COPY                                      ***\n***                                                                ***\n**********************************************************************\nCOPY     ST    R10,COR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         USING IHADCB,R4                ADDRESSABILITY OF DCB\n         LA    R4,INDCB                 POINT TO INPUT DCB\n         LH    R5,DCBBLKSI              R5 HAS INPUT BLOCKSIZE\n         STH   R5,BLKSIZEI              SAVE THE BLOCKSIZE\n         LA    R4,OUTDCB                POINT TO OUTPUT DCB\n         LH    R6,DCBBLKSI              R6 HAS OUTPUT BLOCKSIZE\n         STH   R6,BLKSIZEO              SAVE THE BLOCKSIZE\n         CR    R6,R5                    IF R6 GREATEST SIZE\n         BNL   *+6                        BRANCH AROUND\n         LR    R6,R5                    ELSE PUT GREATEST SIZE TO R6\n         STH   R6,BLKSIZE               SAVE THE BLOCKSIZE\n         C     R6,F320                  IF BLOCKSIZE GREATER THAN 320\n         BH    *+8                        BRANCH AROUND\n         L     R6,F320                  ELSE USE 320\n         STH   R6,USESIZE                 SAVE LENGTH FOR FREEMAIN\n         GETMAIN R,LV=(R6)              GET ONE BLOCKSIZE OF SPACE\n         LR    R6,R1                    R6 POINTS TO NEW SPACE\n         USING WORK2,R6                 ADDRESSABILITY\n*\n         DROP  R4                       DROP ADDRESSABILITY\n*\nCOGET    BAL   R10,GTREC                GET A RECORD\n         CLC   RETCDE(4),DZIPS          IF RETURN NOT ZERO\n         BNE   COEOF                      TERMINATE INPUT\nCOEDIT   BAL   R10,EDIT                 EDIT THE DATA\n         CLC   RETCDE(4),DZIPS          IF RETURN NOT ZERO\n         BNE   COEOF                      TERMINATE INPUT\nCOPUT    BAL   R10,PTREC                PUT THE RECORD\n         B     COGET                    LOOP BACK UNTIL END OF FILE\nCOEOF    LH    R5,USESIZE               LENGTH OF GETMAIN AREA\n         LA    R4,WORK2                 ADDRESS OF GETMAIN AREA\n         FREEMAIN R,LV=(R5),A=(R4)      FREE THE AREA\n*\nCOEND    L     R10,COR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     GET AN INPUT RECORD                                        ***\n***                                                                ***\n***     GTFILE IS USED TO GET DATA FROM AN INPUT DATASET.          ***\n***     GTTRM  IS USED TO GET DATA FROM THE KEYBOARD OR DATA       ***\n***       STACKED INSTREAM BY A CLIST.                             ***\n***                                                                ***\n**********************************************************************\nGTREC    ST    R10,GTR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R4,INDCB                 POINT TO INPUT DCB\n         USING IHADCB,R4                ADDRESSABILITY\n*\n         TM    SWITCH1,X'80'            IF USING FROMDSN(*)\n         BO    GTTRM                      BRANCH TO TERMINAL READ\n*\nGTFILE   GET   INDCB,DATAWK24           GET ONE LOGICAL RECORD\n         MVC   LRECLI(2),DCBLRECL       SAVE THE INPUT LRECL\n         B     GTEND                    BRANCH TO ENDING\n*\n         DROP  R4\n*\nGTTRM    GETLINE PARM=MYGTPB,MF=(E,MYIOPL)  GET ONE LINE FROM STACK\n         C     R15,F4                   IF RETURN CODE GREATER THAN 4\n         BH    GTERR2C                    BRANCH TO ERROR ROUTINE\n         L     R4,MYGTPB+4              R4 POINTS TO INPUT AREA\n         LH    R1,0(0,R4)               R1 IS TOTAL LENGTH OF INPUT\n         C     R1,F4                    IF INPUT IS 4 CHARS (NULL LINE)\n         BNH   COEOF                      BRANCH TO EODAD POINT\n         MVC   ENDCK(7),0(R4)           MOVE TO CHECK WORK AREA\n         OC    ENDCK+4(3),BLANKS        CAPITALIZE\n         CLC   ENDCK(7),ENDWORD         IF X'00070000',C'END'\n         BE    COEOF                      BRANCH TO EODAD POINT\n         STH   R1,LRECLI                SAVE THE INPUT LENGTH\n         BCTR  R1,0                     R1 -1 FOR EXEC\n         B     *+10                     BRANCH AROUND EXECUTED INSTR\n         MVC   DATAWK24(0),0(R4)          MOVE DATA TO OUTPUT AREA\n         EX    R1,*-6                   EXECUTE THE MOVE\n         B     GTEND                    GO TO ENDING\n*\nGTERR2C  LA    R15,X'2C'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     GTEND                    GO TO ENDING\n*\nGTEND    L     R10,GTR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     EDIT THE DATA                                              ***\n***                                                                ***\n**********************************************************************\nEDIT     ST    R10,EDR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nEDFF     TM    SWITCH1,X'50'            IF NOT (IN F AND OUT F)\n         BNO   EDTF                       THEN BRANCH TO NEXT CHECK\n         LA    R2,DATAWK24              R2 OUTPUT ADDRESS\n         ST    R2,OUTBEGIN              SAVE OUTPUT ADDRESS\n         LH    R3,LRECLO                R3 OUTPUT LENGTH\n         LA    R4,DATAWK24              R4 INPUT ADDRESS\n         LH    R5,LRECLI                R5 INPUT LENGTH\n         CR    R3,R5                    IF OUTPUT LEN NGT INPUT LEN\n         BNH   *+10                       BRANCH AROUND\n         ICM   R5,8,BLANKS              ELSE PAD CHAR X'40' TO R5\n         MVCL  R2,R4                      MOVE OVER SELF, THEN PAD\n         BAL   R10,FFNUM                PERFORM LINE NUMBER PROCESSING\n         B     EDEND                    BRANCH TO ENDING\n*\nEDTF     TM    SWITCH1,X'90'            IF NOT (IN * AND OUT F)\n         BNO   EDVF                       THEN BRANCH TO NEXT CHECK\n         B     *+12                     ELSE BRANCH INTO (V TO F)\nEDVF     TM    SWITCH1,X'30'            IF NOT (IN V AND OUT F)\n         BNO   EDTV                       THEN BRANCH TO NEXT CHECK\n         LA    R2,DATAWK28              R2 OUTPUT ADDRESS\n         ST    R2,OUTBEGIN              SAVE OUTPUT ADDRESS\n         LH    R3,LRECLO                R3 OUTPUT LENGTH\n         LA    R4,DATAWK28              R4 INPUT ADDRESS\n         LH    R5,LRECLI                R5 INPUT LENGTH\n         S     R5,F4                      -4 FOR LOSING RCW\n         CR    R3,R5                    IF OUTPUT LEN NGT INPUT LEN\n         BNH   *+10                       BRANCH AROUND\n         ICM   R5,8,BLANKS              ELSE PAD CHAR X'40' TO R5\n         MVCL  R2,R4                      MOVE OVER SELF, THEN PAD\n         TM    SWITCH1,X'30'            IF NOT (IN V AND OUT F)\n         BNO   EDEND                      BRANCH TO ENDING\n         BAL   R10,VFNUM                ELSE PERFORM LINENO PROCESSING\n         B     EDEND                      AND BRANCH TO ENDING\n*\nEDTV     TM    SWITCH1,X'88'            IF NOT (IN * AND OUT V)\n         BNO   EDVV                       THEN BRANCH TO NEXT CHECK\n         B     *+12                     ELSE BRANCH INTO (V TO V)\nEDVV     TM    SWITCH1,X'28'            IF NOT (IN V AND OUT V)\n         BNO   EDFV                       THEN BRANCH TO NEXT CHECK\n         LH    R4,LRECLO                R4 HAS OUTPUT MAX LRECL\n         CH    R4,DATAWK24              IF MAX ALLOWED NL DATA LENGTH\n         BNL   *+8                        BRANCH AROUND\n         STH   R4,DATAWK24              ELSE USE MAX ALLOWED\n         LA    R4,DATAWK24              R4 IS ADDR OF OUTPUT\n         ST    R4,OUTBEGIN              SAVE OUTPUT ADDRESS\n         B     EDEND                    BRANCH TO ENDING\n*\nEDFV     TM    SWITCH1,X'48'            IF NOT (IN F AND OUT V)\n         BNO   EDERR34                    THEN BRANCH TO ERROR\n         XC    DATAWK20(4),DATAWK20     CLEAR NEW RCW\n         LH    R4,LRECLI                R4 HAS INPUT LRECL\n         LA    R4,4(0,R4)                 PLUS LENGTH OF RCW\n         STH   R4,DATAWK20              WRITE LENGTH INTO RCW\n         LH    R4,LRECLO                R4 HAS OUTPUT MAX LRECL\n         CH    R4,DATAWK20              IF MAX ALLOWED NL DATA LENGTH\n         BNL   *+8                        BRANCH AROUND\n         STH   R4,DATAWK20              ELSE USE MAX ALLOWED\n         LA    R4,DATAWK20              R4 IS ADDR OF OUTPUT\n         ST    R4,OUTBEGIN              SAVE OUTPUT ADDRESS\n         BAL   R10,FVNUM                PERFORM LINENO PROCESSING\n         B     EDEND                    BRANCH TO ENDING\n*\nEDERR34  LA    R15,X'34'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     EDEND                    GO TO ENDING\n*\nEDEND    L     R10,EDR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     MOVE LINE NUMBERS IN RECFM=F TO F CONVERSION               ***\n***                                                                ***\n***     AT ENTRY, OUTBEGIN POINTS TO DATAWK24                      ***\n***                                                                ***\n**********************************************************************\nFFNUM    ST    R10,FFR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         CLI   KNUM+1,X'01'             IF 'NUM' OPERAND NOT IN USE\n         BNE   FFEND                      BYPASS THIS PROCESS\n*\n         LH    R4,LRECLI                R4 HAS INPUT LRECL\n         C     R4,F8                    IF LESS THAN 8\n         BL    FFERR48                    BRANCH TO ERROR\n         LH    R5,LRECLO                R5 HAS OUTPUT LRECL\n         C     R5,F8                    IF LESS THAN 8\n         BL    FFERR48                    BRANCH TO ERROR\n*\n         CR    R4,R5                    IF LRECLS IN AND OUT ARE SAME\n         BE    FFEND                      BYPASS THE REMAINDER\n*\n         LA    R4,DATAWK24-8(R4)        R4 POINTS TO INPUT LINE NUM\n         LA    R5,DATAWK24-8(R5)        R5 POINTS TO OUTPUT LINE NUM\n         MVC   TEMPNUM(8),0(R4)         SAVE THE INPUT LINE NUMBER\n         MVC   0(8,R4),BLANKS           CLEAR INPUT LINE NUM TO BLANKS\n         MVC   0(8,R5),TEMPNUM          LINE NUM TO OUTPUT LINE NUM FLD\n         B     FFEND                    GO TO ENDING\n*\nFFERR48  LA    R15,X'48'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     FFEND                    GO TO ENDING\n*\nFFEND    L     R10,FFR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     MOVE LINE NUMBERS IN RECFM=F TO V CONVERSION               ***\n***                                                                ***\n***     AT ENTRY, OUTBEGIN POINTS TO DATAWK20                      ***\n***                                                                ***\n**********************************************************************\nFVNUM    ST    R10,FVR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         CLI   KNUM+1,X'01'             IF 'NUM' OPERAND NOT IN USE\n         BNE   FVEND                      BYPASS THIS PROCESS\n*\n         LA    R4,DATAWKM8              POINT 8 PLACES BEFORE RECORD\n         ST    R4,OUTBEGIN              RESET POINTER\n         MVC   DATAWKM8(4),DATAWK20     MOVE RCW TO NEW BEGINNING\n         LH    R5,DATAWKM8              R5 IS LENGTH OF RECORD\n         C     R5,F12                   IF LESS THAN 12\n         BL    FVERR48                    BRANCH TO ERROR\n         LA    R5,DATAWKM8(R5)          R5 POINTS TO OLD LINE NUMBER\n         MVC   DATAWKM8+4(8),0(R5)      MOVE OLD LINE NUMBER TO NEW\n         B     FVEND                    GO TO END OF ROUTINE\n*\nFVERR48  LA    R15,X'48'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     FVEND                    GO TO ENDING\n*\nFVEND    L     R10,FVR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     MOVE LINE NUMBERS IN RECFM=V TO F CONVERSION               ***\n***                                                                ***\n***     AT ENTRY, OUTBEGIN POINTS TO DATAWK28                      ***\n***                                                                ***\n**********************************************************************\nVFNUM    ST    R10,VFR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         CLI   KNUM+1,X'01'             IF 'NUM' OPERAND NOT IN USE\n         BNE   VFEND                      BYPASS THIS PROCESS\n*\n         LA    R4,DATAWK28              R4 POINTS TO NONUM OUT AREA\n         LA    R5,DATAWK36              R5 POINTS TO NUM OUTPUT AREA\n         ST    R5,OUTBEGIN              UPDATE POINTER\n         LH    R5,LRECLO                R5 IS LENGTH OF OUTPUT REC\n         C     R5,F8                    IF LESS THAN 8\n         BL    VFERR48                    BRANCH TO ERROR\n         LA    R5,DATAWK28(R5)          R5 POINTS TO NUM LINENO AREA\n         MVC   0(8,R5),DATAWK28         MVE NONUM LINENO TO NUM LINENO\n         B     VFEND                    GO TO END OF ROUTINE\n*\nVFERR48  LA    R15,X'48'(0,0)           CONSTANT TO R15\n         ST    R15,RETCDE               SET INTERNAL RETURN CODE\n         BAL   R10,MSGPUT               PUT OUT THE MESSAGE\n         B     VFEND                    GO TO ENDING\n*\nVFEND    L     R10,VFR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     PUT AN OUTPUT RECORD                                       ***\n***                                                                ***\n**********************************************************************\nPTREC    ST    R10,PTR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,OUTBEGIN              ADDRESS OF OUTPUT AREA\n         PUT   OUTDCB,(R4)              PUT THE RECORD\n*\nPTEND    L     R10,PTR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     PUT A PUTLINE MESSAGE                                      ***\n***                                                                ***\n***                                                                ***\n***   +++  NOTE, RETCDE IS AN INPUT ARGUMENT.  IS NOT ZEROED.      ***\n***                                                                ***\n**********************************************************************\nMSGPUT   ST    R10,MSR10SAV             SAVE RETURN ADDRESS\n*\n         L     R4,RETCDE                R4 HAS OFFSET (MESSAGE NUMBER)\n         L     R4,MSGTBLA(R4)           R4 HAS ADDR OF MESSAGE\n         ST    R4,MYOLD+4               ADDRESS INTO O.L.D.\n*\n         PUTLINE PARM=MYPTPB,OUTPUT=MYOLD,MF=(E,MYIOPL)\n*\nMSEND    L     R10,MSR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA CONSTANTS                                               ***\n***                                                                ***\n**********************************************************************\nCONSTDTA DS    0D                       AREA FOR DATA CONSTANTS\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\nDZIPS    DS    0D                       DOUBLE WORD OF ZEROES\n         DC    2F'0'\nBLANKS   DC    CL80' '                  10 DOUBLE WORDS OF BLANKS\nDD1      GTEDADAT  DDNAM=X,INDSN=X,RTMEM=X,INORG=X\nDS1      GTEDADAT  DSNAM=X\nDS2      GTEDADAT  DSNAM=X,RTDDN=X,MEMBR=X,                            X\n               STATS=SHR,NDISP=KEEP,CDISP=KEEP\nDD2      GTEDADAT  DDNAM=X,INDSN=X,RTMEM=X,INORG=X\nDS3      GTEDADAT  DSNAM=X\nDS4      GTEDADAT  DSNAM=X,RTDDN=X,MEMBR=X,                            X\n               STATS=SHR,NDISP=KEEP,CDISP=KEEP\nDD3      GTEDADAT  DDNAM=X,INORG=X,RTMEM=X\n*\nMSGTBLA  DC    A(MSG00),A(MSG04),A(MSG08),A(MSG0C)\n         DC    A(MSG10),A(MSG14),A(MSG18),A(MSG1C)\n         DC    A(MSG20),A(MSG24),A(MSG28),A(MSG2C)\n         DC    A(MSG30),A(MSG34),A(MSG38),A(MSG3C)\n         DC    A(MSG40),A(MSG44),A(MSG48)\n*\nENQPROTO ENQ   (QNAM1,,E,,SYSTEM),RET=NONE,MF=L\nDEQPROTO ENQ   (QNAM1,,E,,SYSTEM),RET=NONE,MF=L\nQNAM1    DC    CL8'USERDSN'             MAJOR NAME\n         DS    0D\nDCBPROTI DCB   DSORG=PS,MACRF=GM,EODAD=COEOF\nDCBILEN  EQU   *-DCBPROTI\n         DS    0D\nDCBPROTO DCB   DSORG=PS,MACRF=PM\nDCBOLEN  EQU   *-DCBPROTO\nOPENLI   OPEN  (,(INPUT)),MF=L\nOPENLO   OPEN  (,(OUTPUT)),MF=L\nOPENLOX  OPEN  (,(EXTEND)),MF=L\nCLOSPRTI CLOSE (,),MF=L                 CLOSE PARM LIST, INPUT FILE\nCLOSPRTO CLOSE (,),MF=L                 CLOSE PARM LIST, OUTPUT FILE\nENDWORD  DC    X'00070000',C'END'       LITERAL 'END', LENGTH 7\nF4       DC    F'4'                     CONSTANT\nF8       DC    F'8'                     CONSTANT\nF12      DC    F'12'                    CONSTANT\nF320     DC    F'320'                   CONSTANT\nH2       DC    H'2'                     CONSTANT              CAH84308A\nGTPBPROT GETLINE MF=L\nPTPBPROT PUTLINE MF=L\nOLDPROT  DC    F'1',A(0)\n*SG--  DC  H'--',H'0',C'SCY00--E .+....2....+....3....+....4....+....5.X\n               ...+....6....+....7\nMSG00  DC  H'36',H'0',C'SCY0000I COPY OPERATION COMPLETE'\nMSG04  DC  H'50',H'0',C'SCY0004E ''TO'' DATASET OR FILE NAME IS REQUIREX\n               D'\nMSG08  DC  H'49',H'0',C'SCY0008E UNABLE TO ALLOCATE ''TO'' FILE/DD NAMEX\n               '\nMSG0C  DC  H'49',H'0',C'SCY000CE UNABLE TO ALLOCATE ''TO'' DATASET NAMEX\n               '\nMSG10  DC  H'51',H'0',C'SCY0010E UNABLE TO ALLOCATE ''FROM'' DATASET NAX\n               ME'\nMSG14  DC  H'51',H'0',C'SCY0014E UNABLE TO ALLOCATE ''FROM'' FILE/DD NAX\n               ME'\nMSG18  DC  H'52',H'0',C'SCY0018E ''FROM'' DATASET OR FILE NAME IS REQUIX\n               RED'\nMSG1C  DC  H'38',H'0',C'SCY001CE UNABLE TO OPEN INPUT FILE'\nMSG20  DC  H'39',H'0',C'SCY0020E UNABLE TO OPEN OUTPUT FILE'\nMSG24  DC  H'39',H'0',C'SCY0024E UNABLE TO CLOSE INPUT FILE'\nMSG28  DC  H'40',H'0',C'SCY0028E UNABLE TO CLOSE OUTPUT FILE'\nMSG2C  DC  H'55',H'0',C'SCY002CE UNABLE TO READ DATA FROM TERMINAL OR CX\n               LIST'\nMSG30  DC  H'60',H'0',C'SCY0030E UNABLE TO PROCESS INPUT OR OUTPUT RECOX\n               RD FORMAT'\nMSG34  DC  H'65',H'0',C'SCY0034E UNABLE TO CONVERT FROM INPUT TO OUTPUTX\n                RECORD FORMAT'\nMSG38  DC  H'67',H'0',C'SCY0038E ''TO'' MEMBER NAME IS REQUIRED.  DATASX\n               ET IS PARTITIONED.'\nMSG3C  DC  H'69',H'0',C'SCY003CE ''FROM'' MEMBER NAME IS REQUIRED.  DATX\n               ASET IS PARTITIONED.'\nMSG40  DC  H'69',H'0',C'SCY0040E ''MOD'' IS INVALID WHEN COPYING INTO AX\n                PARTITIONED DATASET'\nMSG44  DC  H'55',H'0',C'SCY0044E ''FROM'' AND ''TO'' DATASETS MUST BE DX\n               IFFERENT'\nMSG48  DC  H'61',H'0',C'SCY0048E RECORD TOO SHORT FOR LINE NUMBER.  USEX\n                ''NONUM.'''\n*\nCONSTEND DS    0D\nCONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\nKFROMDSN IKJKEYWD\n         IKJNAME 'FROMDSNAME',SUBFLD=SFROMDSN\n         IKJNAME 'FROMDATASET',SUBFLD=SFROMDSN\n*\nKFROMDDN IKJKEYWD\n         IKJNAME 'FROMDDNAME',SUBFLD=SFROMDDN\n         IKJNAME 'FROMFILE',SUBFLD=SFROMDDN\n*\nKTODSN   IKJKEYWD\n         IKJNAME 'TODSNAME',SUBFLD=STODSN\n         IKJNAME 'TODATASET',SUBFLD=STODSN\n*\nKTODDN   IKJKEYWD\n         IKJNAME 'TODDNAME',SUBFLD=STODDN\n         IKJNAME 'TOFILE',SUBFLD=STODDN\n*\nKNUM     IKJKEYWD DEFAULT='NONUM'\n         IKJNAME 'NUM'\n         IKJNAME 'NONUM'\n*\nKMOD     IKJKEYWD DEFAULT='OLD'\n         IKJNAME 'MOD'\n         IKJNAME 'OLD'\n*                                                             CAH84308A\nKNOTE    IKJKEYWD DEFAULT='NOTIFY'                            CAH84308A\n         IKJNAME 'NOTIFY'                                     CAH84308A\n         IKJNAME 'NONOTIFY'                                   CAH84308A\n*\nSFROMDSN IKJSUBF\nEFROMDSN IKJPOSIT DSTHING,USID,PROMPT='''FROM'' DATASET NAME'\n*\nSFROMDDN IKJSUBF\nEFROMDDN IKJPOSIT DSNAME,DDNAM,PROMPT='''FROM'' DD/FILE NAME'\n*\nSTODSN   IKJSUBF\nETODSN   IKJPOSIT DSNAME,USID,PROMPT='''TO'' DATASET NAME'\n*\nSTODDN   IKJSUBF\nETODDN   IKJPOSIT DSNAME,DDNAM,PROMPT='''TO'' DD/FILE NAME'\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA AREA OBTAINED WITH LINKSAVE                             ***\n***                                                                ***\n**********************************************************************\nWORK0    DSECT                          AREA-0 FOR VARIABLES\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nR1SAVE   DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nCPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nRETCDE   DS    F                        INTERNAL RETURN CODE\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\n         DS    0D\nWORK0LEN EQU   *-WORK0\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***  DATA VARIABLES                                                ***\n***                                                                ***\n**********************************************************************\nWORK1    DSECT                          AREA-1 FOR VARIABLES\nPPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPAR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nIOR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nGER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nENR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nDER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nDSR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nDDR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nDFR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nDGR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nOPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nSER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nCLR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nCOR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nGTR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nEDR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPTR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nMSR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nFFR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nFVR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nVFR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\nMYIOPL   DS    4F                       IOP LIST FOR PUT/GET LINE\nMYPTPB   DS    3F                       PUTLINE PARM BLOCK\nMYGTPB   DS    2F                       GETLINE PARM BLOCK\nMYOLD    DS    2F                       OUTPUT LINE DESCRIPTR BLOCK\nRLEN1    DS    H                        MINOR QUEUE NAME LENGTH\nRLEN2    DS    H                        FROM DATASET NAME LENGTH\nRNAM1    DS    CL44                     MINOR QUEUE NAME\nRNAM2    DS    CL44                     FROM DATASET NAME\nRDDN1    DS    CL8                      RETURNED DDNAME\nRDDN2    DS    CL8                      RETURNED DDNAME\nRMEM1    DS    CL8                      MEMBER NAME\nRMEM2    DS    CL8                      MEMBER NAME\nRMEMLEN1 DS    H                        LENGTH OF MEMBER NAME\nRMEMLEN2 DS    H                        LENGTH OF MEMBER NAME\nRECFMI   DS    BL1                      INPUT RECORD FORMAT\nRECFMO   DS    BL1                      OUTPUT RECORD FORMAT\nDDA      GTEDADAT  MAP=ONLY,DDNAM=X,INDSN=X,RTMEM=X,INORG=X\nDSA      GTEDADAT  MAP=ONLY,DSNAM=X\nDSB      GTEDADAT  MAP=ONLY,DSNAM=X,RTDDN=X,MEMBR=X,                   X\n               STATS=SHR,NDISP=KEEP,CDISP=KEEP\nDDB      GTEDADAT  MAP=ONLY,DDNAM=X,INDSN=X,RTMEM=X,INORG=X\nDSC      GTEDADAT  MAP=ONLY,DSNAM=X\nDSD      GTEDADAT  MAP=ONLY,DSNAM=X,RTDDN=X,MEMBR=X,                   X\n               STATS=SHR,NDISP=KEEP,CDISP=KEEP\nDDC      GTEDADAT  MAP=ONLY,DDNAM=X,INORG=X,RTMEM=X\nENQLIST  DS    3F                       PARM LIST FOR ENQUEUE\nDEQLIST  DS    3F                       PARM LIST FOR DEQUEUE\nOPENLIST DS    2F                       PARM LIST FOR OPEN\nCLOSLIST DS    2F                       PARM LIST FOR CLOSE\nOUTDCB   DCB   DSORG=PS,MACRF=PM\nINDCB    DCB   DSORG=PS,MACRF=GM,EODAD=COEOF\nBLKSIZE  DS    H                        LARGEST OF INPUT/OUTPUT BLKSIZE\nUSESIZE  DS    H                        SIZE USED FOR WORK2 GETMAIN\nBLKSIZEI DS    H                        INPUT BLOCKSIZE\nBLKSIZEO DS    H                        OUTPUT BLOCKSIZE\nLRECLI   DS    H                        INPUT LRECL\nLRECLO   DS    H                        OUTPUT LRECL\nSWITCH1  DC    B'00000000'              SWITCHES AREA #1\n*                1.......   X'80'         FROMDSN(*) IS IN USE\n*                .1......   X'40'         INPUT RECFM IS F\n*                ..1.....   X'20'         INPUT RECFM IS V\n*                ...1....   X'10'         OUTPUT RECFM IS F\n*                ....1...   X'08'         OUTPUT RECFM IS V\n*                ......1.   X'02'         NONOTIFY IS IN USE  CAH84308A\nENDCK    DS    CL7                      WORK AREA FOR 'END'\nTEMPNUM  DS    CL8                      TEMP STORAGE FOR LINE NUMBER\nOUTBEGIN DS    F\n*\nWORK1END DS    0D\nWORK1LEN EQU   *-WORK1                  TOTAL LENGTH OF WORK-1 AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***     DATA WORK AREA                                             ***\n***                                                                ***\n**********************************************************************\nWORK2    DSECT\nDATAWKM8 DS    XL8   OUTPUT AREA FOR RECFM=F TO V CONVERSION (NUM)\nDATAWK20 DS    XL4   OUTPUT AREA FOR RECFM=F TO V CONVERSION (NONUM)\nDATAWK24 DS    XL4   OUTPUT AREA FOR RECFM=F TO F AND RECFM=V TO V\nDATAWK28 DS    XL8   OUTPUT AREA FOR RECFM=V TO F CONVERSION (NONUM)\nDATAWK36 DS    XL4   OUTPUT AREA FOR RECFM=V TO F CONVERSION (NUM)\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAPPING MACROS                                               ***\n***                                                                ***\n**********************************************************************\n         CVT                          , CVTMAP FOR IKJPARS\n         PRINT GEN\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n         IKJIOPL                        IO PARM LIST FOR GET/PUTLINE\n         IKJGTPB                        GETLINE PARM BLOCK\n         IKJPTPB                        PUTLINE PARM BLOCK\n         PRINT NOGEN\n         IEFZB4D0                       MAPS SVC-99 CONTROL BLOCKS\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES  MAPS IKJEFF18 CONTROL BLOCKS\n         IHADCB DSORG=PS,DEVD=DA      , MAPS THE DCB FOR DA DEVICES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSDCPY": {"ttr": 7428, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n  SELECT MEMBER=((#SYSDSN,SYSDSN,R),                 <== HELP MEMBER   X\n               (#SYSD,SYSD,R))                       <== HELP ALIAS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSDDOC": {"ttr": 7430, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00q\\x00q\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 113, "newlines": 113, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                         SYSDSN Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n    The SYSDSN command makes a list of all JOBs, TSO users, and\n    started tasks which are using a dataset, or waiting to use\n    it.  If you receive a message that a dataset has not been\n    allocated because it is in use by another task or user, the\n    SYSDSN command can be used to determine who the other task or\n    user is.  SYSDSN is also useful when an operator receives a\n    message that a job is waiting for datasets.\n\n    Syntax -\n\n      SYSDSN    dsname                                                   TS04902\n      SYSD                                                               TS04902\n\nDIRECTORY:\n\n    This PDS contains the following members relating to SYSDSN:\n\n    SYSDDOC  - This documentation.\n    SYSDJCL  - Non-SMP install jobstream.\n    #SYSDSN  - HELP member.\n    #SYSD    - Alias for HELP member.  Needed for IEBCOPY in\n               the non-SMP install.\n    SYSDCPY  - IEBCOPY control cards.  Used in non-SMP install.\n    SYSDLNK  - LKED control cards.  Used in non-SMP install.\n    SYSDSN   - Source program.\n\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  For a non-SMP install, run the jobstream in member\n          SYSDJCL of this PDS. Recommended load libraries are:\n\n          A.  SYS1.CMDLIB\n          B.  library named on the LNKLST\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles SYSDSN using the source in member\n              SYSDSN of this PDS.\n\n              Note: Access to SYS1.AMODGEN is required because\n                    SYSDSN uses the CVT macro.\n\n          B.  Linkedits SYSDSN into the selected load library,\n              assigning an alias of SYSD. Attributes are RENT,\n              REUS and REFR.\n\n          C.  IEBCOPYs member #SYSDSN and alias entry #SYSD to the\n              selected HELP library, renaming them SYSDSN and\n              SYSD.\n\n(  )      For an SMP install, follow your installation's procedures\n          for installation of a RENT, REUS, REFR module into\n          LPALIB, LINKLIB, CMDLIB, or another library on the\n          LNKLST, with the HELP member being installed as a\n          ++MAC into HELP or another library in the SYSHELP\n          concatenation.   The ++MOD entry should have TALIAS(SYSD),\n          and the ++MAC entry should have MALIAS(SYSD).\n\n(  )  2.  If you select SYS1.LPALIB as your target library, you\n          will need to IPL, including 'CLPA' in the response to\n          the system parameters prompt.  This will create a new\n          LPA, picking up your SYSDSN and SYSD alias in the\n          process.\n\n(  )      If you have Dynamic BLDL, and already have a version\n          of SYSDSN installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n(  )      If you have ACF2 and are using command limiting lists,\n          and are not already running a version of SYSDSN, you\n          must do either one of the following:\n\n          A.  Turn the ALLCMDS bit on in the LOGONID of selected\n              users, and invoke SYSDSN with the '#' prefix.\n              That is, use the name #SYSDSN or alias #SYSD. This\n              limits the use of SYSDSN only to those LOGONIDs\n              with the ALLCMDS bit on.  Turn the bit on with the\n              following sequence from TSO READY state using a\n              LOGONID with appropriate authority to change the\n              bit.\n\n                   ACF\n                   LIST logonid\n                   CHANGE * ALLCMDS\n                   END\n\n          B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes SYSDSN available to everyone.\n\n                   $TSOCMD  (SYSDSN,SYSD)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSDJCL": {"ttr": 7433, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00>\\x00>\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 62, "newlines": 62, "modlines": 0, "user": "HOFFMAN"}, "text": "//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.CMDLIB',\n//             HELPLIB='SYST.HELP',\n//             CMDNAME=SYSDSN,LINKMEM=SYSDLNK,COPYMEM=SYSDCPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSDLNK": {"ttr": 7435, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY SYSDSN('BASE')\n  ALIAS SYSD\n  NAME SYSDSN(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSDSN": {"ttr": 7437, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x02\\x0b\\x02\\x0b\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 523, "newlines": 523, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'SYSDSN - FIND WHO IS USING/WAITING FOR A DSNAME'\n**********************************************************************\n***                                                                ***\n***                       SYSDSN COMMAND                           ***\n***                                                                ***\n***  GENERAL FUNCTION:                                             ***\n***                                                                ***\n***      THIS COMMAND CHECKS THE SYSDSN GENERALIZED RESOURCE       ***\n***      QUEUE FOR QUEUING ON DATASET NAMES.  IT USES GQSCAN       ***\n***      TO CREATE RESOURCE INFORMATION BLOCKS (RIB), THEN         ***\n***      EXTRACTS INFORMATION FOR A REPORT TO THE TERMINAL.        ***\n***                                                                ***\n***  FORMAT:                                                       ***\n***                                                                ***\n***    SYSDSN  'DSNAME'                                            ***\n***      SYSD                                                      ***\n***                                                                ***\n***    ALIAS:                                                      ***\n***      1. SYSD                                                   ***\n***                                                                ***\n***    REQUIRED:                                                   ***\n***      1. NONE.  DSNAME WILL BE PROMPTED FOR.                    ***\n***                                                                ***\n***    DEFAULTS:                                                   ***\n***      1. NONE                                                   ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  RETURN CODES -                                                ***\n***       00 - NORMAL COMPLETION                                   ***\n***       04 - NORMAL, LIST TRUNCATED                              ***\n***       12 - ERROR                                               ***\n***                                                                ***\n***  REGISTER USAGE                                                ***\n***                                                                ***\n***      R0-R1 - MACROS, LINKAGE CONVENTIONS                       ***\n***      R2-R3 - MACROS, WORK                                      ***\n***      R4-R6 - WORK                                              ***\n***      R7-R8 - (NOT USED)                                        ***\n***         R9 - BASE FOR PARM DESCRIPTOR LIST CREATED BY PARSE    ***\n***        R10 - BAL REGISTER                                      ***\n***        R11 - BASE FOR RIB WORK AREA                            ***\n***        R12 - BASE FOR PROGRAM                                  ***\n***        R13 - BASE OF WORK0 AREA, REG SAVE AREA AND CODES       ***\n***        R14 - MACROS, LINKAGE CONVENTIONS                       ***\n***        R15 - MACROS, WORK, LINKAGE CONVENTIONS                 ***\n***          +---------------------------------------------+       ***\n***          |  EXCEPT FOR BASE REGISTERS, DATA IS NEVER   |       ***\n***          |  PASSED IN REGISTERS BETWEEN SUBSECTIONS OF |       ***\n***          |  CODE.                                      |       ***\n***          +---------------------------------------------+       ***\n***                                                                ***\n***  NON-IBM MACROS USED:  NONE                                    ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR, ALIAS(SYSD)        ***\n***                                                                ***\n***  CULPRIT:                                                      ***\n***     CHUCK HOFFMAN, CONSULTANT                                  ***\n***     USER SERVICES CENTER                                       ***\n***                                                                ***\n***     BUREAU OF SYSTEMS OPERATIONS                               ***\n***     OFFICE OF MANAGEMENT INFORMATION SYSTEMS                   ***\n***     EXECUTIVE OFFICE FOR ADMINISTRATION AND FINANCE            ***\n***                                                                ***\n***     COMMONWEALTH OF MASSACHUSETTS                              ***\n***     ONE ASHBURTON PLACE, ROOM 1619                             ***\n***     BOSTON, MA  02108                                          ***\n***                           (617) 727-5725                       ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***  MAINTENANCE HISTORY:                                          ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  PROGRAM LOGIC:                                                ***\n***                                                                ***\n***  1.  GET WORKSPACE AND ASSIGN BASE REGISTERS.  FOLLOW          ***\n***      STANDARD LINKAGE CONVENTIONS.  GET INPUT STORAGE FOR      ***\n***      RESOURCE INFORMATION BLOCK (RIB) AND EXTENSIONS (RIBE).   ***\n***                                                                ***\n***  2.  CREATE PARSE PARAMETER LIST (PPL), THEN PARSE THE PARM.   ***\n***                                                                ***\n***  3.  SCAN THE GENERALIZED RESOURCE QUEUES FOR MAJOR NAME       ***\n***      'SYSDSN' AND MINOR NAME MATCHING THE PARM.  ASSIGN        ***\n***      RETURN CODES.  IF MORE THAN ONE RIB IS RETURNED, OR IF    ***\n***      RETURNED INFORMATION OVERFLOWS THE INPUT AREA, SET A      ***\n***      SWITCH TO NOTE THAT THE LIST WILL BE TRUNCATED.           ***\n***                                                                ***\n***  4.  CREATE A LIST BY PROCESSING THE FIRST RETURNED RIB, AND   ***\n***      ALL ITS RIBES WHICH FIT INTO THE RETURN AREA.             ***\n***                                                                ***\n***  5.  GENERATE A MESSAGE FOR ANY BUT 00 RETURN CODES.           ***\n***                                                                ***\n***  6.  FREE STORAGE AND TERMINATE USING STANDARD LINKAGE         ***\n***      CONVENTIONS.                                              ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***            EQUATES                                             ***\n**********************************************************************\nRBASE    EQU   12                       BASE REGISTER NUMBER\nRBAL     EQU   10                       BAL REGISTER NUMBER\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         PRINT NOGEN\n**********************************************************************\n***                                                                ***\n***   PROLOGUE                                                     ***\n***                                                                ***\n**********************************************************************\n*\nSYSDSN   CSECT                        , CSECTID\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(8)                     LENGTH\n         DC    CL8'SYSDSN'                ID\n         DC    CL8'&SYSDATE'              SYSTEM DATE MM/DD/YY\n         DC    CL6' &SYSTIME'             SYSTEM TIME HH.MM\n         STM   R14,R12,12(R13)          SAVE R0-R12, R14-R15\n         LR    RBASE,R15                LOAD BASE ADDRESS BASER\n         USING SYSDSN,RBASE             ADDRESSABILTIY OF CSECT\n         GETMAIN R,LV=WORK0LEN          GET STORAGE FOR S.A. + WORK\n         ST    R13,4(0,R1)              ADDR OF PREV S.A. TO MY S.A.\n         ST    R1,8(0,R13)              ADDR OF MY S.A. TO PREV S.A.\n         LM    R0,R1,20(R13)            RESTORE R0-R1 TO PRE-GETMAIN\n         L     R13,8(0,R13)             R13 POINTS TO MY S.A.\n         USING WORK0,R13                ADDRESSABILITY OF WORK0\n         ST    R1,R1SAVE                INITIAL VAL OF R1 TO MY STORAGE\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         USING PARMPDL,R9               ADDRESSABILITY OF PRM DESC LST\n         ST    R1,CPPLPTR               SAVE CPPL POINTER\n         GETMAIN  R,LV=WORK1LEN         GET MAIN STORAGE FOR RIB\n         LR    R11,R1                   ADDRESS OF RIB STORAGE\n         USING WORK1,R11                ADDRESSABILITY OF RIB\n         XC    COMPCODE,COMPCODE        CLEAR PROGRAM RETURN CODE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n         B     MAINLINE\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAIN LINE ROUTINE                                            ***\n***                                                                ***\n**********************************************************************\n*\nMAINLINE BAL   R10,PPLSETUP             SET UP PARSE PARM LIST\n         BAL   R10,PARSE                PARSE THE INPUT PARAMETERS\n         BAL   R10,GQPROC               SCAN THE GLOBAL RESOURCE QUEUES\n         CLC   RETCDE,F4                IF RETURN GT 4 (NO LISTING)\n         BH    MAINEND                    GO TO END\n         BAL   R10,REPORT               ELSE WRITE REPORT\n*\nMAINEND  B     ENDING                   BRANCH TO ENDING\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EPILOGUE                                                     ***\n***                                                                ***\n**********************************************************************\nENDING   BAL      R10,KISSOFF             PRINT KISSOFF MESSAGE, IF ANY\n         LA       R4,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R4,0(0,R4)              R4 POINTS TO PDL\n         IKJRLSA  (R4)                    FREE STORAGE OF PDL\n         FREEMAIN R,LV=WORK1LEN,A=(R11) , FREE MAIN STORAGE\n*\n         LR    R1,R13                   LOAD MY S.A. ADDR FOR FREEMAIN\n         L     R14,COMPCODE             SAVE PROGRAM COMPLETION CODE\n         L     R13,4(0,R13)             RESTORE R13 FROM MY S.A.\n         FREEMAIN R,LV=WORK0LEN,A=(R1)  FREE STORAGE FOR WORK0\n         LR    R15,R14                  SET PROGRAM COMPLETION CODE\n         LM    R0,R12,20(R13)           RESTORE R0-R12 FM CALLERS S.A.\n         L     R14,12(0,R13)            RESTORE R14 FROM CALLERS S.A.\n         MVI   12(R13),X'FF'            RETURN INDCATR TO CALLERS S.A.\n         BR    R14                      RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST                             ***\n***                                                                ***\n**********************************************************************\nPPLSETUP ST    R10,PPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)\n         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)\n         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)\n         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)\n         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)\n         DROP  R4\n*\nPPEND    L     R10,PPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    R10,PAR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     R10,PAR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    SCAN THE GENERALIZED RESOURCE QUEUES                        ***\n***                                                                ***\n**********************************************************************\nGQPROC   ST    R10,GQR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R5,PDSN                  R2 POINTS TO DSN PDE\n         LH    R6,4(0,R5)               R3 IS LENGTH OF DSN\n         L     R5,0(0,R5)               R2 POINTS TO DSN\n         XC    GQTOKEN,GQTOKEN          ZERO THE TOKEN\n         LA    R4,GQTOKEN               R4 POINTS TO TOKEN (FOR CONT)\n         MVC   GQSCANL(GQSLLEN),GQSCANP INITIALIZE PARM LIST\n*\nGQSCAN   GQSCAN AREA=((R11),L'RETAREA),RESNAME=(,(R5),(R6)),           X\n               TOKEN=(R4),MF=(E,GQSCANL),SCOPE=ALL\n*\n         STM   R0,R1,GQRETREG\n         ST    R15,GQRETREG+8\n         NI    SWITCH1,B'00001111'      INITIALIZE SW0-SW3 TO ZERO\n*\n         LTR   R15,R15                  IF RC NOT ZERO\n         BNZ   GQCK4                      GO TO CHECKS\n         C     R1,F1                    ELSE IF NUMBER OF RIBS NOT 1\n         BNE   GQRIB                      GO TO ERROR ROUTINE\n         B     GQEND                    ELSE GO TO END\n*\nGQCK4    C     R15,F4                   IF RC=04  (NONE FOUND)\n         BNE   *+24                       NO: BRANCH AROUND\n         OI    SWITCH1,X'80'             YES: SET SW0 ON\n         MVC   RETCDE,F4                      SET PROC RETCDE=04\n         MVC   COMPCODE,F4                    SET PGM RETCDE=04\n         B     GQEND                          AND GO TO ENDING\n*\n         C     R15,F8                   IF RC=08  (OVERFLOW)\n         BNE   *+24                       NO: BRANCH AROUND\n         OI    SWITCH1,X'40'             YES: SET SW1 ON\n         MVC   RETCDE,F4                      SET PROC RETCDE=04\n         MVC   COMPCODE,F8                    SET PGM RETCDE=08\n         B     GQEND                          AND GO TO ENDING\n*\n*                                       RC MUST BE GREATER THAN 08\n         OI    SWITCH1,X'10'              SET SW3 ON\n         MVC   RETCDE,F12                 SET PROC RETCDE=12\n         MVC   COMPCODE,F12               SET PGM RETCDE=12\n         B     GQEND                          AND GO TO ENDING\n*\nGQRIB    OI    SWITCH1,X'20'            SET SW2 ON\n         MVC   RETCDE,F4                SET PROC RETCDE=04\n         MVC   COMPCODE,F8              SET PGM RETCDE=08\n         B     GQEND                    GO TO ENDING\n*\nGQEND    L     R10,GQR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***    WRITE THE REPORT                                            ***\n**********************************************************************\nREPORT   ST    R10,RER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TM    SWITCH1,X'80'            IF NO INFO WAS FOUND\n         BO    REEND                      BRANCH TO ENDING\n*\nRERNAME  MVC   OUTLINE(80),BLANKS       INITIALIZE OUTPUT LINE\n         LA    R4,RETAREA               R4 POINTS TO RETURNED DATA\n         USING RIB,R4                   ADDRESSABILITY OF RIB\n         LH    R5,RIBVLEN               R5 LENGTH OF VARIABLE SEG\n         AH    R5,GQRETREG+00           R5 LEN OF BASE + VARIABLE SEG\n         LA    R5,0(R5,R4)              R5 POINTS TO FIRST RIBE\n         USING RIBE,R5                  ADDRESSABILITY OF RIBE\n*\n         XR    R1,R1                    CLEAR R1\n         IC    R1,RIBRNMLN              LENGTH OF RNAME\n         BCTR  R1,0                       MINUS 1 FOR EXEC\n         LH    R2,GQRETREG+00           R2 IS LEN OF BASE\n         LA    R2,0(R2,R4)              R2 POINTS TO RNAME\n         B     *+10                     BRANCH AROUND EXEC\n         MVC   OUTLINE(0),0(R2)           MOVE RNAME TO OUTPUT\n         EX    R1,*-6                   EXECUTE MOVE\n*\n         LA    R3,OUTLINE               ADDR OF OUTPUT LINE\n         TPUT  (R3),70                  WRITE THE LINE\n         LA    R3,BLANKS                ADDR OF OUTPUT LINE\n         TPUT  (R3),70                  WRITE THE LINE\n*\nRETITLE  LA    R3,TITLE1                POINT TO FIRST TITLE\n         TPUT  (R3),70                    PRINT IT\n         LA    R3,TITLE2                POINT TO SECOND TITLE\n         TPUT  (R3),70                    PRINT IT\n*\n         MVC   OUTLINE(80),BLANKS       INITIALIZE OUTPUT LINE\nRESCOPE  TM    RIBSCOPE,RIBSYS          IF SCOPE NE SYSTEM\n         BNO   *+14                       BRANCH AROUND\n         MVC   OF1SCPE(7),SYSTEM        ELSE MOVE 'SYSTEM' TO SCOPE\n         B     RERIBENO                   AND BRANCH TO NEXT PIECE\n         TM    RIBSCOPE,RIBSYSS         IF SCOPE NE SYSTEMS\n         BNO   *+14                       BRANCH AROUND\n         MVC   OF1SCPE(7),SYSTEMS       ELSE MOVE 'SYSTEMS' TO SCOPE\n         B     RERIBENO                   AND BRANCH TO NEXT PIECE\n         TM    RIBSCOPE,RIBSTEP         IF SCOPE NE STEP\n         BNO   *+14                       BRANCH AROUND\n         MVC   OF1SCPE(7),STEP          ELSE MOVE 'STEP' TO SCOPE\n         B     RERIBENO                   AND BRANCH TO NEXT PIECE\n         TM    RIBSCOPE,RIBGLBL         IF SCOPE NE GLOBAL\n         BNO   *+10                       BRANCH AROUND\n         MVC   OF1SCPE(7),GLOBAL        ELSE MOVE 'GLOBAL' TO SCOPE\n         B     RERIBENO                   AND BRANCH TO NEXT PIECE\n*\nRERIBENO L     R3,RIBNRIBE              NUMBER OF RIBE IN USER AREA\n*\nREJOBID  MVC   OF1JNAM(8),RIBEJBNM      MOVE JOB NAME TO LINE\n*\nRETYPE   TM    RIBERFLG,RIBETYPE        IF TYPE IS SHR\n         BNO   *+14                       THEN\n         MVC   OF1TYPE(4),SHR               MOVE 'SHR' TO LINE\n         B     *+10                     ELSE\n         MVC   OF1TYPE(4),EXCL            MOVE 'EXCL' TO LINE\n*\nRESTAT   TM    RIBESFLG,RIBESTAT        IF STATUS IS OWNS\n         BNO   *+14                       THEN\n         MVC   OF1STAT(7),USING             MOVE 'USING' TO LINE\n         B     *+10                     ELSE\n         MVC   OF1STAT(7),WAITING         MOVE 'WAITING' TO LINE\n*\n         AH    R5,GQRETREG+02           R5 POINTS TO NEXT RIBE\n         LA    R2,OUTLINE               R3 POINTS TO OUTPUT LINE\n         TPUT  (R2),70                  WRITE THE LINE\n         BCT   R3,REJOBID               LOOP BACK UP FOR NEXT RIBE\n*\n         DROP  R4\n         DROP  R5\n*\nREEND    L     R10,RER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***    WRITE THE KISSOFF MESSAGE, IF ANY                           ***\n**********************************************************************\nKISSOFF  ST    R10,KIR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TM    SWITCH1,X'F0'            IF NO PROBLEMS\n         BZ    KIEND                      GO TO ENDING (NO MESSAGE)\nKINOMAT  TM    SWITCH1,X'80'            ELSE IF NO MATCH\n         BZ    KITRUNC                    THEN\n         LA    R3,NOTINUSE                  WRITE\n         TPUT  (R3),70                        'NOT IN USE' MSG\n         B     KIEND                        AND GO TO END\nKITRUNC  TM    SWITCH1,X'60'            ELSE IF TRUNCATED LIST\n         BZ    KIBADRC                    THEN\n         LA    R3,TRUNC                     WRITE\n         TPUT  (R3),70                        'LIST TRUNCATED' MSG\n         B     KIEND                        AND GO TO END\nKIBADRC  TM    SWITCH1,X'10'            ELSE IF GQSCAN R/C GT 8\n         BZ    KIEND                      THEN\n         LA    R3,BADSCAN                   WRITE\n         TPUT  (R3),70                        'BAD GQSCAN' MSG\n         B     KIEND                        AND GO TO END\n*\nKIEND    L     R10,KIR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA CONSTANTS                                               ***\n***                                                                ***\n**********************************************************************\nCONSTDTA DS    0D                       AREA FOR DATA CONSTANTS\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\nDZIPS    DS    0D                       DOUBLE WORD OF ZEROES\n         DC    2F'0'\nBLANKS   DC    CL80' '                  10 DOUBLE WORDS OF BLANKS\nF1       DC    F'1'                     CONSTANT\nF4       DC    F'4'                     CONSTANT\nF8       DC    F'8'                     CONSTANT\nF12      DC    F'12'                    CONSTANT\n*\nGQSCANP  GQSCAN SCOPE=ALL,RESNAME=(MAJNAME,,),MF=L\nGQSPLEN  EQU   *-GQSCANP\nMAJNAME  DC    CL8'SYSDSN'\n*\nTITLE1   DC    CL80'    Job Name  Scope    Type  Status'\nTITLE2   DC    CL80'    --------  -------  ----  --------'\n*\nSYSTEM   DC    CL7'System'\nSYSTEMS  DC    CL7'Systems'\nSTEP     DC    CL7'Step'\nGLOBAL   DC    CL7'Global'\nSHR      DC    CL4'SHR'\nEXCL     DC    CL4'EXCL'\nUSING    DC    CL7'Using'\nWAITING  DC    CL7'Waiting'\nNOTINUSE DC    CL80'*** Not in use ***'\nTRUNC    DC    CL80'*** List truncated due to length ***'\nBADSCAN  DC    CL80'*** Bad GQSCAN, disregard all data ***'\n*\nCONSTEND DS    0D\nCONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\nPDSN     IKJPOSIT DSNAME,USID,PROMPT='DATASET NAME TO BE CHECKED'\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA AREA OBTAINED WITH LINKSAVE                             ***\n***                                                                ***\n**********************************************************************\nWORK0    DSECT                          AREA-0 FOR VARIABLES\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nR1SAVE   DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nCPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nRETCDE   DS    F                        INTERNAL RETURN CODE\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nPPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPAR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nMSR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nGQR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nRER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nKIR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\nSWITCH1  DC    B'00000000'              SWITCHES AREA #1\n*                1.......   X'80'         NO RESOURCES MATCHED\n*                .1......   X'40'         RETURN AREA FULL\n*                ..1.....   X'20'         MORE THAN ONE RIB\n*                ...1....   X'10'         RC GT 08 FROM GQSCAN\n*                ....1111                 (NOT USED)\n         PRINT GEN\nGQSCANL  GQSCAN SCOPE=ALL,RESNAME=(MAJNAME,,),MF=L\nGQSLLEN  EQU   *-GQSCANL\n         PRINT NOGEN\nGQTOKEN  DS    F                        TOKEN FOR CONTINUING SCAN\nGQRETREG DS    3F                       RETURN OF R0,R1,R15 FROM SCAN\n*\nOUTLINE  DS    CL80                     OUTPUT LINE FOR TPUT\nOF1      ORG   OUTLINE                  FORMAT 1 OUTPUT\n         DS    CL4                        FILLER\nOF1JNAM  DS    CL8                        JOBNAME\n         DS    CL2                        FILLER\nOF1SCPE  DS    CL7                        SCOPE\n         DS    CL2                        FILLER\nOF1TYPE  DS    CL4                        TYPE\n         DS    CL2                        FILLER\nOF1STAT  DS    CL7                        STATUS\n         DS    CL44                       FILLER\n*\n         DS    0D\nWORK0LEN EQU   *-WORK0\n*\n         EJECT\n**********************************************************************\n***  WORK AREA FOR RESOURCE INFORMATION BLOCK                      ***\n**********************************************************************\nWORK1    DSECT                          AREA-1 FOR RESOURCE INFO BLOCKS\nRETAREA  DS    CL4096\n*\nWORK1END DS    0D\nWORK1LEN EQU   *-WORK1                  TOTAL LENGTH OF WORK-1 AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAPPING MACROS                                               ***\n***                                                                ***\n**********************************************************************\n         CVT   DSECT=YES              , CVTMAP FOR IKJPARS\n         PRINT GEN\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n         ISGRIB                         RESOURCE INFO BLOCK (3 DSECTS)\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XPCPY": {"ttr": 7687, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  COPY OUTDD=HELP,INDD=PDSIN\n  SELECT MEMBER=((#XPRINT,XPRINT,R),                 <== HELP MEMBER   X\n               (#XP,XP,R))                           <== HELP ALIAS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XPDOC": {"ttr": 7689, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\xb4\\x00\\xb4\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 180, "newlines": 180, "modlines": 0, "user": "HOFFMAN"}, "text": "\n                         XPRINT Command\n\nDisclaimer:\n\n         This software is in the public domain.  You are free to\n         use it on an 'as is' basis.  Although the software\n         performed to specifications when written, it is not\n         guaranteed to work on your system, nor to continue to\n         work on your system.  No warrantee or commitment of\n         support is stated, intended or implied in supplying\n         this software, and no liability of any kind is assumed\n         by the supplier(s).\n\nGENERAL:\n\n\n     )X Syntax -\n\n          XPRINT  dataset-name  record-limit  NOTEST\n          XP                                  TEST\n\n          ALIAS: XP\n\n          REQUIRED:  dataset-name\n          DEFAULTS:  NOTEST\n\n\n          Note - NOTEST/TEST are not documented in the HELP.\n                 TEST is used to print the first 48 bytes of the\n                 utility before it is invoked, and to write a\n                 message telling whether or not the utility was\n                 dynamically loaded.\n\n\nDIRECTORY:\n\n    This PDS contains the following members relating to XPRINT:\n\n    XPDOC    - This documentation.\n    XPJCL    - Non-SMP install jobstream.\n    #XPRINT  - HELP member.\n    #XP      - Alias for HELP member.  Needed for IEBCOPY in\n               the non-SMP install.\n    XPCPY    - IEBCOPY control cards.  Used in non-SMP install.\n    XPLNK    - LKED control cards.  Used in non-SMP install.\n    XPRINT   - Source program.\n\n    GTEDAALC - Dynamic allocation macro, described below.\n    GTEDADAT - Dynamic allocation macro, described below.\n    GTEDADOC - Documentation for dynamic allocation macros,\n               described below.\n    GTEDASET - Dynamic allocation macro, described below.\n\n\nINSTALLATION CHECK LIST:\n\n(  )  1.  The following non-IBM macros are used to assemble\n          XPRINT. If you already have older versions in your\n          system, replace them with the ones from this PDS.\n\n            GTEDAALC - Execute SVC99 and IKJEFF18 (DAIRFAIL).\n            GTEDADAT - Create SVC99/IKJEFF18 control blocks.\n            GTEDASET - Link SVC99/IKJEFF18 control blocks together.\n\n(  )  2.  The following macro is documentation for the GTEDAxxx\n          macros, above.  It is not used by XPRINT, but should\n          be copied into your system.\n\n            GTEDADOC - Documentation of GTEDAxxx macros.\n\n      3.  Edit the source program.\n\n(  )      A.  XPRINT is a frontend for a print utility, referred\n              to as 'HEXPRINT' in the source.  Change the\n              references at label VPGM and UTILNAME to the actual\n              name of your utility.\n\n(  )      B.  XPRINT allocates two files for the utility, their\n              DDNAMEs are at labels INPUTLIT and LISTLIT.  They\n              are in the source as 'INPUT' and 'LIST'.  Change\n              them to the actual DDNAMEs used by your utility.\n\n          C.  The utility does not have to be link edited in with\n              the XPRINT module.  If the utility is not linked\n              in, XPRINT will LOAD it from the system libraries\n              at execution time.\n\n              You should NOT link in the utility if:\n\n              (1)  You are going to use LPA and the utility is\n                   not reenterable, or for any other reason\n                   cannot or should not go into LPA.\n\n              (2)  The utility is maintained by people other than\n                   those responsible for command processors.\n\n              (3)  The utility will be used stand-alone, without\n                   the front end.\n\n              (4)  The utility is being changed frequently.\n\n(  )          If you do want to link it in add the following line\n              of JCL at the bottom of member XPJCL:\n\n                 //LKED.UTILLIB  DD DSN=library-name,DISP=SHR\n\n(  )          and also add the following LKED control statement\n              at the top of member XPLNK:\n\n                   INCLUDE UTILLIB(utility-pgm-name)\n\n(  )  4.  For a non-SMP install, run the jobstream in member\n          XPJCL of this PDS.  Recommended load libraries are:\n\n          A.  SYS1.CMDLIB\n          B.  library named on the LNKLST\n\n          Add a JOB card at the top, and edit the last few lines\n          to provide the name of the selected load library, HELP\n          library, and the name of this PDS.\n\n          The jobstream does the following:\n\n          A.  Assembles XPRINT using the source in member\n              XPRINT of this PDS.\n\n              Note: Access to SYS1.AMODGEN is required because\n                    XPRINT uses the CVT macro.\n\n          B.  Linkedits XPRINT into the selected load library,\n              assigning an alias of XP.  Attributes are RENT,\n              REUS and REFR.\n\n          C.  IEBCOPYs member #XP and alias entry #XPRINT to the\n              selected HELP library, renaming them XPRINT and\n              XP.\n\n(  )      For an SMP install, follow your installation's procedures\n          for installation of a RENT, REUS, REFR module into\n          LPALIB, LINKLIB, CMDLIB, or another library on the\n          LNKLST, with the HELP member being installed as a\n          ++MAC into HELP or another library in the SYSHELP\n          concatenation.   The ++MOD entry should have TALIAS(XP),\n          and the ++MAC entry should have MALIAS(XP).\n\n(  )  5.  If you select SYS1.LPALIB as your target library, you\n          will need to IPL, including 'CLPA' in the response to\n          the system parameters prompt.  This will create a new\n          LPA, picking up your XPRINT and XP alias in the\n          process.\n\n(  )      If you have Dynamic BLDL, and already have a version\n          of XPRINT installed, you will have to stop and restart\n          the Dynamic BLDL table.\n\n(  )      If you have ACF2 and are using command limiting lists,\n          and are not already running a version of XPRINT, you\n          must do either one of the following:\n\n          A.  Turn the ALLCMDS bit on in the LOGONID of selected\n              users, and invoke XPRINT with the '#' prefix.\n              That is, use the name #XPRINT or alias #XP. This\n              limits the use of XPRINT only to those LOGONIDs\n              with the ALLCMDS bit on.  Turn the bit on with the\n              following sequence from TSO READY state using a\n              LOGONID with appropriate authority to change the\n              bit.\n\n                   ACF\n                   LIST logonid\n                   CHANGE * ALLCMDS\n                   END\n\n          B.  Add the following macro to the command limiting\n              list, then assemble, link, and IPL with CLPA.  This\n              makes XPRINT available to everyone.\n\n                   $TSOCMD  (XPRINT,XP)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XPJCL": {"ttr": 7693, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00A\\x00A\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 65, "newlines": 65, "modlines": 0, "user": "HOFFMAN"}, "text": "//CAH0FRAL JOB GTE4,CHUCK,TIME=10,\n//  MSGLEVEL=(1,1),MSGCLASS=A,NOTIFY=CAH0\n/*JOBPARM  QUEUE=FETCH,LINES=15\n//*\n//*\n//*    INSTALL TSO COMMAND WITHOUT SMP\n//*\n//*\n//*********************************************************************\n//*                BEGIN INSTREAM INSTALLATION PROC                 ***\n//*********************************************************************\n//CMDINST  PROC                                                        X\n//             PDSIN=,                     <== INPUT PDS (THIS PDS)    X\n//             LINKLIB=,                   <== LPALIB LINKLIB CMDLIB   X\n//             HELPLIB=,                   <== HELP LIBRARY            X\n//             CMDNAME=,                   <== SOURCE/LOAD NAME        X\n//             LINKMEM=,                   <== LKED CARDS MEMBER NAME  X\n//             COPYMEM=                    <== IEBCOPY CARDS MEMBER NME\n//******************************************************\n//*         ASSEMBLE   REENTERABLE                   ***\n//******************************************************\n//ASM     EXEC PGM=IFOX00,REGION=256K,\n//             PARM='OBJ,NODECK,RENT'                    <== NOTE PARMS\n//SYSIN    DD  DSN=&PDSIN(&CMDNAME),DISP=SHR             <== THIS PDS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR                 <== CVT MACRO\n//         DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSUT2   DD  DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=3146\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//******************************************************\n//*  LINK  REENTERABLE REUSABLE REFRESHABLE          ***\n//*  ADD ALIAS                                       ***\n//******************************************************\n//LKED    EXEC PGM=IEWL,COND=(8,LT,ASM),REGION=256K,\n//             PARM='LET,LIST,XREF,NCAL,RENT,REUS,REFR'  <== NOTE PARMS\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LINKLIB,DISP=SHR                     <== LOAD LIB\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&LINKMEM),DISP=SHR\n//******************************************************\n//*  COPY HELP AND ALIAS ENTRY, RENAMING             ***\n//******************************************************\n//CPYHELP EXEC PGM=IEBCOPY,REGION=256K,COND=(8,LE)\n//PDSIN    DD  DSN=*.ASM.SYSIN,DISP=SHR                  <== THIS PDS\n//HELP     DD  DSN=&HELPLIB,DISP=SHR                     <== HELP LIB\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&PDSIN(&COPYMEM),DISP=SHR\n//CMDINST PEND\n//*********************************************************************\n//*               END OF INSTALLATION PROC                          ***\n//*********************************************************************\n//*\n//INSTALL EXEC CMDINST,\n//             PDSIN='SYST.COMMANDS.PDS',\n//             LINKLIB='SYST.LPALIB',\n//             HELPLIB='SYST.HELP',\n//             CMDNAME=XPRINT,LINKMEM=XPLNK,COPYMEM=XPCPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XPLNK": {"ttr": 7695, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x00\\x03\\x00\\x03\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 3, "newlines": 3, "modlines": 0, "user": "HOFFMAN"}, "text": "  IDENTIFY XPRINT('CAH84259A')\n  ALIAS XP\n  NAME XPRINT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XPRINT": {"ttr": 7937, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x00\\x850_\\x00\\x850_\\x13U\\x02\\x95\\x02\\x95\\x00\\x00\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-11-01T00:00:00", "modifydate": "1985-11-01T13:55:05", "lines": 661, "newlines": 661, "modlines": 0, "user": "HOFFMAN"}, "text": "         TITLE 'XPRINT - COMMAND PROCESSOR FRONT-END FOR PRINT UTILITY'\n         PRINT NOGEN\n**********************************************************************\n***                                                                ***\n***                      XPRINT COMMAND                            ***\n***                                                                ***\n***  GENERAL FUNCTION:                                             ***\n***                                                                ***\n***     THIS COMMAND PROCESSOR IS A FRONT-END FOR A PRINT          ***\n***     UTILITY.                                                   ***\n***                                                                ***\n***                                                                ***\n***  PROCESSING:                                                   ***\n***                                                                ***\n***     1.  LINKAGE CONVENTIONS IN, GET STORAGE.                   ***\n***     2.  CREATE PARSE PARM LIST.                                ***\n***     3.  PARSE THE PARMS WITH IKJPARS.                          ***\n***     4.  CREATE PARM LISTS FOR DYNAMIC ALLOCATION SVC-99.       ***\n***     5.  FREE THE FILE NAMES WITH SVC-99.                       ***\n***     6.  ALLOCATE THE FILES WITH SVC-99.                        ***\n***     7.  CREATE PARMS FOR PRINT UTILITY.                        ***\n***     8.  IF THE UTILITY IS NOT ALREADY A CSECT IMBEDDED         ***\n***         IN THE PROGRAM, LOAD IT FROM STEPLIB/LPA/JPA/LNKLST.   ***\n***     9.  EXECUTE THE UTILITY.                                   ***\n***    10.  FREE THE FILES WITH SVC-99.                            ***\n***    11.  FREE STORAGE, LINKAGE CONVENTIONS BACK.                ***\n***                                                                ***\n**********************************************************************\n         SPACE 6\n**********************************************************************\n***                                                                ***\n***  CUSTOMIZATION:                                                ***\n***                                                                ***\n***  1.  DDNAMES AT LABELS INPUTLIT AND LISTLIT.                   ***\n***  2.  UTILITY PROGRAM NAME AT LABELS VPGM AND UTILNAME.         ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***                        HELP TEXT                               ***\n***                        =========                               ***\n***                                                                ***\n***                                                                ***\n***  )F Function -                                                 ***\n***                                                                ***\n***       XPRINT is a command for producing a hexadecimal          ***\n***       'over-under' listing of a sequential file, or member of  ***\n***       a partitioned dataset.                                   ***\n***                                                                ***\n***                                                                ***\n***  )X Syntax -                                                   ***\n***                                                                ***\n***       XPRINT  dataset-name  record-limit                       ***\n***       XP                                                       ***\n***                                                                ***\n***       ALIAS: XP                                                ***\n***                                                                ***\n***       REQUIRED:  dataset-name                                  ***\n***       DEFAULTS:  none                                          ***\n***                                                                ***\n***  )O Operands -                                                 ***\n***                                                                ***\n***  ))dataset-name -                                              ***\n***      The name of the dataset to be printed.  If single quotes  ***\n***      (') are placed around the name, it will be used as is.    ***\n***      If not, the TSO user prefix will be added to the front    ***\n***      of the name.                                              ***\n***                                                                ***\n***  ))record-limit                                                ***\n***      A decimal number (0-999) to limit the number of input     ***\n***      records XPRINT will print from the file.                  ***\n***                                                                ***\n***                                                                ***\n***  ))EXAMPLES:                                                   ***\n***                                                                ***\n***       (Assume your TSO user prefix is ABCD123)                 ***\n***                                                                ***\n***                                                                ***\n***          1.  XPRINT  MYPROJ.DATA                               ***\n***                  Creates a listing of 'ABCD123.MYPROJ.DATA'.   ***\n***                                                                ***\n***          2.  XPRINT  MYPROJ.DATA  50                           ***\n***                  Creates a listing of 'ABCD123.MYPROJ.DATA',   ***\n***                  using a limit of 50 input records.            ***\n***                                                                ***\n***          3.  XPRINT  'WXYZ789.USERLIB.CNTL(ALPHA)'             ***\n***                  Creates a listing of library member ALPHA,    ***\n***                  in library USERLIB.CNTL belonging to user     ***\n***                  WXYZ789.                                      ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  NOTES FOR PROGRAMMER:                                         ***\n***                                                                ***\n***  1.  A.  THERE IS A NOTEST/TEST OPERAND WHICH SHOULD NOT BE    ***\n***          DOCUMENTED IN THE HELP TEXT.  THE TEST OPERAND WILL   ***\n***          USE TPUT TO WRITE THE FIRST 48 BYTES OF THE UTILITY   ***\n***          LOAD MODULE TO THE SCREEN.  THIS IS FOR THE PURPOSE   ***\n***          OF DISPLAYING THE GENERAL AREA OF AN EYECATCHER       ***\n***          DURING DEBUGGING.                                     ***\n***                                                                ***\n***      B.  IT WILL ALSO NOTE WHETHER THE UTILITY HAD TO BE       ***\n***          DYNAMICALLY LOADED DURING EXECUTION.                  ***\n***                                                                ***\n***  2.  THE UTILITY PROGRAM MAY BE LINKEDITED WITH THIS COMMAND   ***\n***      PROCESSOR, BUT IT DOESN'T HAVE TO BE.  IF THE UTILITY     ***\n***      IS NOT LINKED IN, THIS CP WILL LOAD IT FROM THE SYSTEM    ***\n***      LIBRARIES.                                                ***\n***                                                                ***\n***      THIS COMMAND PROCESSOR IS REUSABLE, REENTERABLE AND       ***\n***      REFRESHABLE.  YOU SHOULD NOT LINK IN THE UTILITY:         ***\n***                                                                ***\n***      A.  IF THIS CP IS GOING TO RESIDE IN LPA AND THE UTILITY  ***\n***          IS NOT REENTERABLE, OR CANNOT GO INTO LPA FOR ANY     ***\n***          OTHER REASON.                                         ***\n***                                                                ***\n***      B.  IF THE UTILITY IS MAINTAINED BY A GROUP OTHER THAN    ***\n***          THOSE RESPONSIBLE FOR COMMAND PROCESSORS.             ***\n***                                                                ***\n***      C.  THE UTILITY WILL STILL BE RUN STAND-ALONE, WITHOUT    ***\n***          THE COMMAND PROCESSOR (SUCH AS IN BATCH).             ***\n***                                                                ***\n***      D.  IF THE UTILITY IS STILL BEING DEVELOPED, OR IS BEING  ***\n***          CHANGED FREQUENTLY.                                   ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  RETURN CODES -                                                ***\n***       00 - OKAY                                                ***\n***       0C - SOMETHING WRONG.                                    ***\n***                                                                ***\n***  REGISTER USAGE                                                ***\n***       R0-R2  LINKAGE CONVENTIONS, MACROS                       ***\n***          R3  (NOT USED)                                        ***\n***          R4  WORK, TEMPORARY BASE OF PDE                       ***\n***       R5-R6  WORK                                              ***\n***       R7-R8  (NOT USED)                                        ***\n***          R9  BASE OF PARM DESCRIPTOR ELEMENT LIST (PDL)        ***\n***         R10  BAL REGISTER                                      ***\n***         R11  (NOT USED)                                        ***\n***         R12  PROGRAM BASE REGISTER                             ***\n***         R13  LINKAGE CONVENTIONS, BASE OF AREA IN SP-000       ***\n***     R14-R15  LINKAGE CONVENTIONS                               ***\n***                                                                ***\n***  NON-IBM MACROS USED:                                          ***\n***     GTEDADAT  - CREATE CONTROL BLOCKS FOR DYNALLOC/DAIRFAIL    ***\n***     GTEDASET  - LINK CONTROL BLOCKS TOGETHER                   ***\n***     GTEDAALC  - EXECUTE DYNALLOC/DAIRFAIL                      ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  REUS,RENT,REFR  ALIAS(XP)            ***\n***                                                                ***\n***  CULPRIT:                                                      ***\n***     CHUCK HOFFMAN                                              ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  LINKAGE CONVENTIONS WHEN UTILITY GETS CONTROL:                ***\n***                                                                ***\n***     R1 - POINTING TO 3-MEMBER LIST OF ADDRESSES.               ***\n***          A.  ADDRESS OF COUNT HALFWORD, FOLLOWED BY COUNT      ***\n***              IN DISPLAY FORMAT.  LEADING ZEROES ARE PROVIDED.  ***\n***          B.  ADDRESS OF 44-CHARACTER DATASET NAME.             ***\n***          C.  ADDRESS OF 8-CHARACTER MEMBER NAME.               ***\n***                                                                ***\n***          THE LAST ADDRESS IN THE LIST IS FLAGGED WITH THE      ***\n***          HIGH ORDER BIT ON.                                    ***\n***                                                                ***\n***    R13 - POINTING TO 18-FULLWORD SAVE AREA OF CALLER.          ***\n***                                                                ***\n***    R14 - RETURN ADDRESS IN CALLER.                             ***\n***                                                                ***\n***    R15 - TWO USES.                                             ***\n***          A.  ADDRESS OF SUBROUTINE UPON ENTRY.                 ***\n***          B.  RETURN CODE UPON EXIT.                            ***\n***                                                                ***\n***  THE UTILITY MUST RESTORE REGISTERS 0-14 BEFORE RETURNING      ***\n***  CONTROL TO THIS FRONTEND.                                     ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  MAINTENANCE HISTORY:                                     CAH84259A\n***                                                                ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***   PROLOGUE                                                     ***\n***                                                                ***\n**********************************************************************\n*\nXPRINT   CSECT\n         STM   R14,R12,12(R13)          SAVE INTO CALLERS S.A.\n         B     BASE-XPRINT(0,R15)       BRANCH TO AROUND EYECATCHER\n         DC    AL1(L'NAME)                LENGTH OF NAME\nNAME     DC    C'XPRINT'                  MODULE NAME\n         DC    C' &SYSDATE &SYSTIME '     DD.MM.YY HH.MM\nBASE     LR    RBASE,R15                RBASE IS BASE REGISTER\n         USING XPRINT,RBASE               TELL ASSEMBLER\n         GETMAIN  R,LV=WORKDLEN,SP=0    GET AREA FOR MYSAVE AND WORK\n         ST    R13,4(0,R1)              CALLERS S.A. ADDR TO MY S.A.\n         ST    R1,8(0,R13)              MY S.A. ADDR TO CALLERS S.A.\n         LM    R15,R1,16(R13)           RESTORE REGS USED BY GETMAIN\n         L     R13,8(0,R13)             R13 POINTS TO MY S.A.\n         USING WORKD,R13                  TELL ASSEMBLER\n*\n         USING PARMPDL,R9               ADDRESSABILITY OF PDE LIST\n*\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE TO ZERO\n         MVI   SWITCH1,B'00000000'      INITIALIZE SWITCHES\n         ST    R1,CPPLPTR               SAVE CPPL POINTER\n*\n         B     MAINLINE\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAIN LINE ROUTINE                                            ***\n***                                                                ***\n**********************************************************************\n*\nMAINLINE BAL   RBAL,PPLSETUP            SET UP PARSE PARM LIST\n*\n         BAL   RBAL,PARSE               PARSE THE INPUT PARAMETERS\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BE    *+14                     THEN\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12\n         B     ENDING                     AND GO TO ENDING\n*\n         BAL   RBAL,ALLOCATE            ALLOCATE THE FILES\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BE    *+14                     THEN\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12\n         B     ENDING                     AND GO TO ENDING\n*\n         BAL   RBAL,UTILITY             PERFORM SUBROUTINE\n         LTR   R15,R15                  IF RETURN CODE IS BAD\n         BE    *+10                     THEN\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12\n*\n         BAL   RBAL,FREE                FREE THE FILES\n         CLC   RETCDE(4),F0             IF RETURN CODE IS BAD\n         BE    *+14                     THEN\n         MVC   COMPCODE(4),F12            SET RETURN CODE TO 12\n         B     ENDING                     AND GO TO ENDING\n*\n         B     ENDING                   BRANCH TO ENDING\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EPILOGUE                                                     ***\n***                                                                ***\n**********************************************************************\nENDING   LA       R2,MYPPL+(PPLANS-PPL)   ADDRESS OF PTR TO PDL\n         L        R2,0(0,R2)              R4 POINTS TO PDL\n         IKJRLSA  (R2)                    FREE STORAGE OF PDL\n*\n         L        R14,COMPCODE            R14 TEMPORARILY HAS COMP CODE\n         LR       R15,R13                 R15 HAS MY SAVE AREA ADDRESS\n         L        R13,4(0,R13)            R13 RESTORE, PNT TO CALLER SA\n         FREEMAIN R,LV=WORKDLEN,SP=0,A=(R15)  FREE MYSAVE,COMPCODE,ETC\n         LM       R0,R12,20(R13)          R0-R12 RESTORE FROM CALLER SA\n         LR       R15,R14                 R15 GETS COMP CODE\n         L        R14,12(0,R13)           R14 RESTORE FROM CALLERS S.A.\n         MVI      12(R13),X'FF'           SIGNAL MODULE COMPLETE\n         BR       R14                     RETURN\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***        CREATE PARSE PARAMETER LIST                             ***\n***                                                                ***\n**********************************************************************\nPPLSETUP ST    RBAL,PPRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)\n         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)\n         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)\n         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)\n         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)\n         DROP  R4\n*\nPPEND    L     RBAL,PPRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PARSE THE INPUT PARAMETER STRING                            ***\n***                                                                ***\n**********************************************************************\nPARSE    ST    RBAL,PARBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     RBAL,PARBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    ALLOCATE THE FILES                                          ***\n***                                                                ***\n**********************************************************************\nALLOCATE ST    RBAL,ALRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         BAL   RBAL,FREE                FREE THE DDNAMES\n*\nALSETL   MVC   DLD(DLDLEN),DLP          INITIALIZE 'LIST' BLOCKS\n         GTEDASET DLD,CPPLPTR=CPPLPTR   LINK 'LIST' BLOCKS TOGETHER\nALSETI   MVC   DID(DIDLEN),DIP          INITIALIZE 'INPUT' BLOCKS\n         GTEDASET DID,CPPLPTR=CPPLPTR   LINK 'INPUT' BLOCKS TOGETHER\n*\nALDSN    LA    R4,PARMDSN               POINT TO PDE\n         USING PDSN,R4                  ADDRESSABILITY OF DSN PDE\n         LH    R5,PDSNDLTH              R5 IS LENGTH OF DSN\n         BCTR  R5,0                       MINUS ONE FOR EXEC\n         L     R6,PDSNDADR              R6 IS ADDRESS OF DSN\n         MVC   DIDDSNAM(44),BLANKS      CLEAR THE T.U. DSNAME FIELD\n         B     *+10                     BRANCH AROUND MOVES\n         MVC   DIDDSNAM(0),0(R6)          MOVE DSN TO ALLOCATE T.U.\n         EX    R5,*-6                   EXECUTE THE MOVE\n         MVC   MYPDSNAM(44),DIDDSNAM    COPY TO OUTPUT PARM\n*\nALTSTMEM TM    PDSNMFLG,X'80'           IF NO MEMBER NAME\n         BNO   ALNOMEM                    GO TO NO MEMBERS PROC\n*\nALMEM    LH    R5,PDSNMLTH              R5 IS LENGTH OF MEMBER NAME\n         BCTR  R5,0                       MINUS ONE FOR EXEC\n         L     R6,PDSNMADR              R6 IS ADDRESS OF MEMBER NAME\n         MVC   DIDMEMBR(8),BLANKS       CLEAR THE T.U. MEMBER FIELD\n         B     *+10                     BRANCH AROUND MOVES\n         MVC   DIDMEMBR(0),0(R6)          MOVE NAME TO ALLOCATE T.U.\n         EX    R5,*-6                   EXECUTE THE MOVE\n         MVC   MYPMEMBR(8),DIDMEMBR     COPY TO OUTPUT PARM\n         B     ALALCL                   BRANCH AROUND NO MEMBERS PROC\n*\nALNOMEM  MVC   MYPMEMBR(8),BLANKS       CLEAR OUTPUT PARM FIELD\n         XC    DIDMEMKY(2),DIDMEMKY     CLEAR THE KEY FOR MEMBER T.U.\n*\nALALCL   MVC   DLDDDNAM(8),LISTLIT        INITIALIZE DDNAME\n         GTEDAALC DLD,VERB=AL,ERRMSG=YES  ALLOCATE 'LIST' FILE\n         CLC   DLDS99RC,F0                IF BAD ALLOCATION\n         BNE   ALERR0C                      GO TO BAD RETURN\nALALCI   MVC   DIDDDNAM(8),INPUTLIT       INITIALIZE DDNAME\n         GTEDAALC DID,VERB=AL,ERRMSG=YES  ALLOCATE 'INPUT' FILE\n         CLC   DIDS99RC,F0                IF BAD ALLOCATION\n         BNE   ALERR0C                      GO TO BAD RETURN\n*\nALOK     B     ALEND\n*\nALERR0C  LA    R15,X'0C'(0,0)           SET RETURN CODE\n         ST    R15,RETCDE               SAVE IT\n         B     ALEND                    GO TO END OF PROC\n*\n         DROP  R4                       DROP ADDRESSABILITY OF PDE\n*\nALEND    L     RBAL,ALRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    UNALLOCATE THE FILES                                        ***\n***                                                                ***\n**********************************************************************\nFREE     ST    RBAL,FRRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nFRSET    MVC   DUD(DUDLEN),DUP          INITIALIZE CONTROL BLOCKS\n         GTEDASET DUD,CPPLPTR=CPPLPTR   LINK BLOCKS TOGETHER\n*\nFRLIST   MVC   DUDDDNAM(8),LISTLIT      RESET THE DDNAME\n         GTEDAALC DUD,VERB=UN,ERRMSG=YES  FREE THE LIST FILE\n*\nFRINPUT  MVC   DUDDDNAM(8),INPUTLIT     RESET THE DDNAME\n         GTEDAALC DUD,VERB=UN,ERRMSG=YES  FREE THE INPUT FILE\n*\nFREND    L     RBAL,FRRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    EXECUTE THE UTILITY SUBROUTINE                              ***\n***                                                                ***\n**********************************************************************\nUTILITY  ST    RBAL,UTRBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\nUTPARM1  XC    MYPLEN,MYPLEN            ZERO THE LENGTH PARM\n         XC    MYPCHAR,MYPCHAR          ZERO THE COUNT PARM\n         LA    R4,PARMCHR               R4 POINTS TO PARM CHAR PDE\n         USING PPDE,R4                  ADDRESSABILITY OF PDE\n         TM    PPDEFLG,X'80'            IF PARMCHR OPERAND NOT USED\n         BNO   UTLOAD                     BRANCH AROUND\n         LH    R5,PPDELTH               R5 IS PARMCHR OPERAND LENGTH\n         BCTR  R5,0                       MINUS 1 FOR EXEC\n         L     R6,PPDEADR               R6 POINTS TO PARMCHR OPERAND\n         DROP  R4                       DROP ADDRESSABILITY OF PDE\n         MVI   MYPLEN+1,X'03'           SET LENGTH PARM\n         MVC   MYPCHAR(2),XF0S          MOVE X'F0'S TO LEADING DIGITS\n         LA    R4,MYPCHAR+2             R4 POINTS TO LAST DIGIT\n         SR    R4,R5                    R4 POINTS TO TARGET OF MOVE\n         B     *+10                     BRANCH AROUND MOVE\n         MVC   0(0,R4),0(R6)              MOVE PARMCHR TO PARMLEN\n         EX    R5,*-6                   EXECUTE THE MOVE\n*\nUTLOAD   MVC   UTILADDR(4),VPGM         MOVE VCON TO STORAGE\n         CLC   VPGM,F0                  IF VCON WASN'T RESOLVED\n         BNE   UTLINK                     THEN\n         MVC   UTLOADL(UTLOADLN),UTLOADD    INITIALIZE LIST FOR LOAD\n         LOAD  ERRET=UTERR04,SF=(E,UTLOADL) LOAD THE UTILITY\n         ST    R0,UTILADDR                  PUT THE ADDR INTO STORAGE\n         OI    SWITCH1,X'80'                NOTE THAT UTIL WAS LOADED\n*\nUTLINK   CLC   PARMTEST(2),H1           IF 'TEST' OPERAND IS USED\n         BNE   *+8                        THEN\n         BAL   RBAL,TEST                    PERFORM THE TEST PROC\n         LA    R4,MYPLEN                ADDR OF PLEN\n         ST    R4,MYPARML+00              INTO PARM ADDRESS LIST\n         LA    R4,MYPDSNAM              ADDR OF DSNAME\n         ST    R4,MYPARML+04              INTO PARM ADDRESS LIST\n         LA    R4,MYPMEMBR              ADDR OF MEMBER NAME\n         ST    R4,MYPARML+08              INTO PARM ADDRESS LIST\n         OI    MYPARML+08,X'80'         MARK END OF LIST\n         LA    R1,MYPARML               R1 POINTS TO PARM ADDR LIST\n         L     R15,UTILADDR             R15 POINTS TO SUBROUTINE\n         BALR  R14,R15                  LINK TO SUBROUTINE\n         ST    R15,RETCDE               SAVE SUBROUTINE RETURN CODE\n         B     UTEND                    GO TO ENDING\n*\nUTERR04  LA    R15,X'04'(0,0)           RETURN CODE TO R15\n         ST    R15,RETCDE               PUT IT INTO RETCDE\n         B     UTEND                    GO TO ENDING\n*\n*\nUTEND    L     RBAL,UTRBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***    PUT OUT TEST INFORMATION                                    ***\n***                                                                ***\n**********************************************************************\nTEST     ST    RBAL,TERBALSV            SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,UTILADDR              R4 POINTS TO UTILITY\n         TPUT  (R4),48                  PRINT AROUND EYECATCHER\n*\n         TM    SWITCH1,X'80'            IF UTILITY WAS LOADED\n         BNO   *+12                       THEN\n         LA    R4,UTLOADMS                  POINT TO 'LOADED' MSG\n         B     *+8                      ELSE\n         LA    R4,UTNOLOAD                  POINT TO 'NOT LOADED' MSG\n         TPUT  (R4),47                  WRITE THE MESSAGE\n         TPUT  BLANKS,1                 WRITE A BLANK LINE\n*\nTEEND    L     RBAL,TERBALSV            RESTORE RETURN ADDRESS\n         BR    RBAL                     RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA CONSTANTS                                               ***\n***                                                                ***\n**********************************************************************\nCONSTDTA DS    0D                       AREA FOR DATA CONSTANTS\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\n*\nINPUTLIT DC    CL8'INPUT'               INPUT DDNAME\nLISTLIT  DC    CL8'LIST'                OUTPUT DDNAME\nVPGM     DC    V(HEXPRINT)              ADDR OF CALLED UTILITY PGM\nUTILNAME DC    CL8'HEXPRINT'            MUST BE CL8, (BLANK PAD OKAY)\n*\nUTLOADD  LOAD EPLOC=UTILNAME,SF=L       DATA FOR LOAD PARM LIST\n*\nBLANKS   DC    CL80' '                  LITERAL\nF0       DC    F'0'                     CONSTANT\nF12      DC    F'12'                    CONSTANT\nH1       DC    H'1'                     CONSTANT\nXF0S     DC    X'F0F0'                  LITERAL\nUTLOADMS DC    CL47'--- Utility was loaded during execution ---    '\nUTNOLOAD DC    CL47'--- Utility was NOT loaded during execution ---'\n*\nDUP      GTEDADAT DDNAM=X\nDIP      GTEDADAT DSNAM=X,DDNAM=X,STATS=SHR,NDISP=KEEP,CDISP=KEEP,     X\n               MEMBR=X\nDLP      GTEDADAT DDNAM=X,TERM=YES\n*\nCONSTEND DS    0D\nCONSTLEN EQU   *-CONSTDTA               TOTAL LENGTH OF CONSTANTS\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***    COMMAND OPERANDS                                            ***\n***                                                                ***\n***                                                                ***\n***         SYNTAX -                                               ***\n***                                                                ***\n***           XPRINT  dataset-name  record-limit  NOTEST           ***\n***                                               TEST             ***\n***                                                                ***\n***           REQUIRED:  dataset-name                              ***\n***           DEFAULTS:  NOTEST                                    ***\n***                                                                ***\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\nPARMDSN  IKJPOSIT DSNAME,                                              X\n               USID,                                                   X\n               PROMPT='the name of the dataset you want to list',      X\n               HELP=('1-44 character DSNAME with optional member name')\n*\nPARMCHR  IKJIDENT 'Record count',                                      X\n               MAXLNTH=3,                                              X\n               FIRST=NUMERIC,OTHER=NUMERIC,                            X\n               HELP=('number of records to print (0-999) +',           X\n               'null if you want the whole file to print')\n*\nPARMTEST IKJKEYWD DEFAULT='NOTEST'\n         IKJNAME  'TEST'\n         IKJNAME  'NOTEST'\n*\n         IKJENDP\n*\n         EJECT\n**********************************************************************\n***                                                                ***\n***   DATA AREA IN SUBPOOL 000                                     ***\n***                                                                ***\n**********************************************************************\nWORKD    DSECT                          AREA-13 FOR VARIABLES\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nCPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nRETCDE   DS    F                        INTERNAL RETURN CODE\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\n*\nPPRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nPARBALSV DS    F                        RETURN ADDRESS SAVE AREA\nALRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nFRRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nUTRBALSV DS    F                        RETURN ADDRESS SAVE AREA\nTERBALSV DS    F                        RETURN ADDRESS SAVE AREA\n*\nUTILADDR DS    F                        ADDRESS OF UTILITY ROUTINE\n*\nMYPPL    DS    7F                       PARSE PARAMETER LIST\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\n*\nDUD      GTEDADAT MAP=ONLY,DDNAM=X\nDID      GTEDADAT MAP=ONLY,DSNAM=X,DDNAM=X,STATS=SHR,NDISP=KEEP,       X\n               CDISP=KEEP,MEMBR=X\nDLD      GTEDADAT MAP=ONLY,DDNAM=X,TERM=YES\n*\nUTLOADL  LOAD SF=L                      LOAD PARM LIST\nUTLOADLN EQU  *-UTLOADL\n*\nSWITCH1  DS    B'00000000'              SWITCHES\n*                1.......                 UTILITY LOADED DURING RUN\n*                .1111111                 (NOT USED)\n*\n         DS    0D\nMYPARML  DS    A                        ADDRESS OF MYPARM\n         DS    A                        ADDRESS OF MYPDSNAM\n         DS    A                        ADDRESS OF MYPMEMBR\n*\nMYPARM   DS    0D                       PARM TO PASS TO UTILITY\nMYPLEN   DS    H                          LENGTH\nMYPCHAR  DS    CL100                      DATA\nMYPDSNAM DS    CL44                     DATASET NAME FROM PARM\nMYPMEMBR DS    CL8                      MEMBER NAME FROM PARM\n*\nWORKDEND DS    0D\nWORKDLEN EQU   *-WORKD                  TOTAL LENGTH OF WORK-13 AREA\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MAPPING MACROS                                               ***\n***                                                                ***\n**********************************************************************\n         CVT   DSECT=YES              , CVTMAP FOR IKJPARS\n         PRINT GEN\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         IKJPPL                         PARSE PARM LIST\n         PRINT NOGEN\n         IEFZB4D0\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         IHADCB DSORG=PO,DEVD=DA\n         EJECT\n**********************************************************************\n***                                                                ***\n***   OTHER DSECTS                                                 ***\n***                                                                ***\n**********************************************************************\nPDSN     DSECT                          PDE FOR DSNAME\nPDSNDADR DS    AL4                        ADDRESS OF DSN\nPDSNDLTH DS    H                          LENGTH OF DSN\nPDSNDFLG DS    BL1                        FLAG BITS\n         DS    XL1                        RESERVED\nPDSNMADR DS    AL4                        ADDRESS OF MEMBER NAME\nPDSNMLTH DS    H                          LENGTH OF MEMBER NAME\nPDSNMFLG DS    BL1                        FLAG BITS\n         DS    XL1                        RESERVED\nPDSNPADR DS    AL4                        ADDRESS OF PASSWORD\nPDSNPLTH DS    H                          LENGTH OF PASSWORD\nPDSNPFLG DS    BL1                        FLAG BITS\n         DS    XL1                        RESERVED\nPDSNNEXT DS    AL4                        NEXT PDE ADDRESS IN LIST\n         SPACE 3\nPPDE     DSECT                          PDE FOR IKJIDENT OR IKJPOSIT\nPPDEADR  DS    AL4                        ADDRESS\nPPDELTH  DS    H                          LENGTH\nPPDEFLG  DS    BL1                        FLAG BITS\n         DS    XL1                        RESERVED\n         EJECT\n**********************************************************************\n***                                                                ***\n***   EQUATES                                                      ***\n***                                                                ***\n**********************************************************************\nRBASE    EQU   12                       BASE REGISTER\nRBAL     EQU   10                       BAL REGISTER\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT160/FILE160.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT160", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}