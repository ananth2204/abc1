/*>Rexx --------------------------------------------------------------*/
/*                                                                    */
/* ACEEFRC: ForeGround Rexx Compilation                               */
/*                                                                    */
/*--------------------------------------------------------------------*/
/* Other objects: ACEEMON Monitor utility                             */
/*--------------------------------------------------------------------*/
/* Changes:2002/12/13 Acevedo First Development                       */
/*         2002/10/17 Acevedo Setting NOSOURCE to reduce output       */
/*         2003/01/23 Acevedo SAVE Before executing                   */
/*--------------------------------------------------------------------*/

address isredit
"MACRO NOPROCESS"

call start
call Compilation
call process_output
call finish

/*--------------------------------------------------------------------*/
/* Desc.: start                                                       */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
start:
z_winttl='ForeGround Rexx Compiler'

_mon=ACEEMON(Z_WINTTL,'Validating First Line',)
"(member)  = member"
"(library) = dataset"

"(line) = line 1"
if pos('REXX',translate(line))=0 then do
   zerrsm='';zerralrm='yes';zerrhm='*'
   zerrlm='               First Line should contain the word REXX'
   address ispexec "setmsg msg(isrz002)"

   call msg_line_after 0 zerrlm
   exit 4
   end

"recovery on"
"hi auto"
"save"

hlq='your-hlq'
llq='your-llq'
hlq=userid()
llq='temp'
dsn_temp=hlq'.'userid()'.'llq
return


/*--------------------------------------------------------------------*/
/* Desc.: Compilation                                                 */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
Compilation:
x=msg("OFF")
address tso "delete '"dsn_temp"'"

address tso "alloc fi(sysin)  da('"library"("member")') shr reuse "
address tso "alloc fi(systerm)  dummy reuse "
address tso "alloc fi(syspunch) dummy reuse "
address tso "alloc fi(syscexec) dummy reuse "
address tso "alloc fi(sysdump)  dummy reuse "
address tso "alloc fi(sysprint) da('"dsn_temp"') new reuse"
/* "alloc fi(SYSEXEC)  da('REXX.V1R3M0.SFANLMD') shr reuse " */

os="NOCEXEC SL NOSOURCE"
os=strip(os,'B')
_mon=ACEEMON(Z_WINTTL,'Invoking Compiler....',)
address linkmvs 'REXXCOMP OS'

rc_rexx=rc
select
   when rc=0  then txt='No messages or only informational messages'
   when rc=4  then txt='Warning'
   when rc=8  then txt='Error'
   when rc=12 then txt='Severe error'
   when rc=16 then txt='Terminating error'
   otherwise       txt='ooooooops'
   end
_mon=ACEEMON(Z_WINTTL,'Return Code:'rc_rexx'('txt')' )

address tso "free (sysin,systerm,syspunch,syscexec,sysdump,sysprint)"
return

/*--------------------------------------------------------------------*/
/* Desc.: process_output                                              */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
process_output:
_mon=ACEEMON(Z_WINTTL,'Processing Output' )

address tso "alloc fi(aceffrc) dsn('"dsn_temp"') shr reuse"
address tso "execio * diskr aceffrc(stem frc."
address tso "execio 0 diskr aceffrc(finis"
address tso "free fi(aceffrc)"
address tso "delete '"dsn_temp"'"

"res"
"exclude all"
linenum=0
n_msg=0

do i=1 to frc.0 while(pos('===> Source Listing',frc.i)=0)
   _mon=ACEEMON(Z_WINTTL,'Processing' i 'of' frc.0)
   end i

do i=i to frc.0 while(pos('===> Compilation Statistics',frc.i)=0)
   _mon=ACEEMON(Z_WINTTL,'Processing' i 'of' frc.0)
   if substr(frc.i,2,3)='+++' then do
      "locate" linenum
      n_msg=n_msg+1

      call msg_line_after linenum frc.i
      B4=i-1
      call msg_line_after linenum substr(frc.B4,22)
      end
   else do
      number=substr(frc.i,13,6)
      number=strip(number)
      if datatype(number)='NUM' then linenum=number
      end
   end i
drop frc.
"locate" 0
return

/*--------------------------------------------------------------------*/
/* Desc.: msg_line_after                                              */
/*        include line in source                                      */
/* Parms: LINEN   LINE NUMBER                                         */
/*        TEXT    TEXT TO SHOW                                        */
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
msg_line_after: PARSE arg LINEN TEXT
text= translate(text,'7f'x,'7d'x)
"line_after" LINEN "= msgline '"text"'"
return

/*--------------------------------------------------------------------*/
/* Desc.: finish                                                      */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
finish:
if n_msg=0 then do
   "res"
   zedsmsg = 'No Messages'
   end
else
   zedsmsg = n_msg 'Messages'
address ispexec "setmsg msg(isrz001)"
exit
