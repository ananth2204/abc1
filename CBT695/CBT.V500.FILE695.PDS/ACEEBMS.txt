/*>Rexx --------------------------------------------------------------*/
/*                                                                    */
/* ACEEBMS: ForeGround Rexx Compiler                                  */
/*                                                                    */
/*--------------------------------------------------------------------*/
/* Parameters:                                                        */
/*        library LIBRARY                                             */
/*        member  BMS Source                                          */
/*        option  P-Panel, other DISPLAY                              */
/*--------------------------------------------------------------------*/
/* Other objects: ACEPBMS Dynamic panel                               */
/*                ACEEMON Monitor utility                             */
/*--------------------------------------------------------------------*/
/* Changes:2001/01/13 Acevedo First Development                       */
/*         2002/06/30 Acevedo Add Dynamic Panel                       */
/*--------------------------------------------------------------------*/

arg library member option .
option='P'

call start
call verify_bms
call populate_dyn
call show_dyn
call finish

/*--------------------------------------------------------------------*/
/* Desc.: Start                                                       */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
start:
z_winttl='TSO BMS'

   /*________________________________________________ Verify Source */
_mon=ACEEMON(Z_WINTTL,'Verifying Source',)
dd=library'('member')'
if sysdsn("'"dd"'")¬="OK" then do
   zerrsm='';zerralrm='YES';zerrhm='*'
   zerrlm=dd sysdsn("'"dd"'")
   address ispexec "setmsg msg(isrz002)"
   exit
   end

   /*________________________________________________ Read   Source */
_mon=ACEEMON(Z_WINTTL,'Reading   Source',)
address tso "alloc dd(acefbms) da('"dd"') shr "
address tso "execio * diskr acefbms (stem bms."
address tso "execio 0 diskr acefbms (finis"
address tso "free dd(acefbms)"
return

/*--------------------------------------------------------------------*/
/* Desc.: verify_bms                                                  */
/*        simple test                                                 */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
verify_bms:
do i=1 to bms.0 while(pos(' DFHMDF ',bms.i)=0)
   end

if i=bms.0 & pos(' DFHMDF ',bms.i)=0 then do
   zerrsm='';zerralrm='YES';zerrhm='*'
   zerrlm='Sure it is BMS?'
   address ispexec "setmsg msg(isrz002)"
   exit
   end
return


/*--------------------------------------------------------------------*/
/* Desc.: populate_dyn                                                */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
populate_dyn:
line=''
dyn.  =''; dyn =''
sdyn. =''; sdyn=''
datain='08'x;dataout='09'x

_mon=ACEEMON(Z_WINTTL,'Parsing   Source',)
do i = 1 to bms.0
   if left(bms.i,1) = '*' then iterate i

   sigue = substr(bms.i,72,1) = ' '
   bms.i = left(bms.i,71)   /* ignorar la ultima */

   p = pos("DFHMDF",bms.i)
   if p > 0 then line = substr(bms.i,p+7)
   if line = '' then iterate
   if p=0 then line = line || substr(bms.i,16)
   if ¬sigue then iterate

    /*--------------------------*/
    /* calcular las coordenadas */
    /*--------------------------*/
   parse var line 'POS=(' x1 ',' x2 ')' .
   x1=format(x1)
   x2=format(x2)
   if x1 = '' | x2 = '' then iterate

    /*--------------------------*/
    /* calculate length         */
    /*--------------------------*/
   parse var line 'LENGTH=' long ',' .

    /*--------------------------*/
    /* determine INITIAL        */
    /*--------------------------*/
   parse var line "INITIAL='" initial "'"

   if initial¬='' then dyn.x1=overlay(initial,dyn.x1,x2)
   if pos('UNPROT',line)>0 then
      dyn.x1=overlay(datain||copies('_',long)||dataout,dyn.x1,x2-1)

   if option='P' then do
      parse var line 'COLOR=' color ','
      select
         when color='BLUE'      then color='01'
         when color='RED'       then color='03'
         when color='PINK'      then color='07'
         when color='GREEN'     then color='04'
         when color='TURQUOISE' then color='05'
         when color='YELLOW'    then color='06'
         when color='NEUTRAL'   then color='02'
         otherwise                   color='01'
         end

      parse var line 'HILIGHT=' hilight ','
      select
         when hilight='REVERSE'   then color=overlay('1',color,1)
         when hilight='UNDERLINE' then color=overlay('2',color,1)
         when hilight='BLINK'     then color=overlay('4',color,1)
         otherwise nop
         end

      if initial='' & left(color,1)='0' then color=overlay('2',color,1)

      interpret "color='"left(color,2)"'x"
      sdyn.x1=overlay(copies(color,long),sdyn.x1,x2)
      end

   line = ''
   end i
drop bms.
return

/*--------------------------------------------------------------------*/
/* Desc.: show_dyn                                                    */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
show_dyn:

if option='P' then do
   dyn=''
   do i=1 to x1
      dyn =dyn ||left(dyn.i ,80)
      sdyn=sdyn||left(sdyn.i,80)
      end i

   address ispexec "display panel(acepbms)"
   end
else do /* for compatibility ;)  */
   say copies('_',79)
   do i=1 to x1
      dyn.i=translate(dyn.i,'aeiou','áéíóú')
      say dyn.i
      end i
   say copies('_',79)
   end
return

/*--------------------------------------------------------------------*/
/* Desc.: finish                                                      */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
finish:
exit
