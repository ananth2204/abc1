Monitoring used space for VSAM datasets

MVS/DFP 3.2 provides a new AMS command, DCOLLECT,
to collect dataset information, volume usage information, and
information about datasets and storage controlled by a
migration utility. The output dataset created by DCOLLECT
can be used as input to SLR (Service Level Reporter), which
collects data in tables (like DASD_DSNSTAT,
DASD_VOLSTAT etc) from which reports can be generated.
The records produced by DCOLLECT are described in DFP
3.2 Access Method Services for ICF manual.

The Active Dataset Record (DCURCTYP = 'D') generated by
the above process contains the correct value of actually used
space only for non-VSAM and non-ISAM datasets. For VSAM
and ISAM datasets this field (DCDUSESP) is set to zero.
Hence the report based on these records does not give a correct
value of actual dataset utilization, especially if the installation
has got a large number of VSAM datasets.

The purpose of the accompanying program modules is to get
the actual utilization for VSAM datasets. There are two
programs:

o      VVDSREAD      This reads the VVDS to get actual space
            utilization for VSAM datasets.

o      USEDSPCE      This updates the output of DCOLLECT
            with the space utilization information
            from VVDSREAD.

VVDSREAD

This program accepts the volume names from SYSIN,
dynamically allocates VVDS dataset (SYS1.VVDS.Vvolid),
and reads the entire VVDS to get dataset space utilization
information. The layout of a VVDS is shown in Figure 1.

VVCR is the VSAM volume control record. It contains names
of ICF catalogs having a VSAM component on this volume.
VVR is the VSAM Volume Record. There is one for each
dataset component residing on this volume. Figure 2 shows the
layout of a VVR, Figures 3 shows details of a VVR header
cell, and Figure 4 shows details of the VVR volume component
cell.

Type -      X'E9'  Header cell
      X'23'  Volume component cell
      HURBA  High Used Relative Byte Address
      HARBA  High Allocated Relative Byte Address.

Ext Type -      X'00'  Contiguous extent
      X'20'  Converted from VSAM to ICF catalog
      X'40'  Extent not pre-formatted
      X'80'  Sequence set track adjacent to Control Area
      X'FF'  Candidate volume.

In the case of SMS-managed volumes, VVR entries exists for
non-VSAM datasets also (header type not X'E9'). These are to
be ignored.

The allocated and used tracks can be computed from the values
of HURBA, HKRBA, blocksize, and blocks/track. Allocated
tracks can also be computed by summing up the number of
tracks per extent. The two values of allocated tracks are
different when an index is IMBEDDED along with the data
component. In such a case the actual used tracks can be
obtained by:

      USETRK(actual) = USETRK * ALOCTRK(actual) / ALOCTRK

Also the space utilization for an IMBEDDED index component
is ignored because it is added to the data component.


PROGRAM

* PROGRAM TO READ VVDS TO GET THE VSAM DATASET SPACE ALLOCATION
* AND USAGE INFORMATION
* SHOULD BE LINK EDITED INTO AN APF AUTHORIZED LIBRARY
VVDSREAD  CSECT
          SAVE   (14,12)           SAVE REGS
          LR     12,15             SET UP BASE REG
          USING  VVDSREAD,12,11    ESTABLISH ADDRESSABILITY
          LA     11,4095(12)
          LA     11,1(11)          SET UP SECOND BASE REG
          ST     13,SAVE+4         FORWARD POINTER
          LA     10,SAVE
          ST     10,8(13)          BACKWARD POINTER
          LR     13,10             NEW SAVE AREA ADDRESS
          OPEN   VOLFILE           FILE CONTAINING LIST OF VOLUMES
          LTR    15,15
          BNZ    OPNERR1
          OPEN   (OUTFILE,(OUTPUT))
          LTR    15,15             OK ?
          BNZ    OPNERR2           OUTPUT OPEN ERROR
NEXTVOL   GET    VOLFILE           READ ONE VOLID
          MVC    $$VOLID(6),0(1)   MOVE VOLID TO VVDS NAME
*  DYNAMICALLY ALLOCATE VVDS
          LA     1,$$VVDS
          DYNALLOC ,
          LTR    15,15
          L      3,$$VVDS
          BNZ    ALOCERR           ERROR IN DYNAMIC ALLOCATION
          OPEN   VVDSACB           OPEN RDO FILE
          LTR    15,15             OPEN OK ?
          BNZ    OPNERR3           OPEN ERROR QUIT
          GET    RPL=VVDSRPL       READ VVCR AND SKIP IT
          LTR    15,15
          BNZ    CLOSE1            END OF DATA
NEXTREC   GET    RPL=VVDSRPL
          LTR    15,15             READ NOT OK
          BNZ    CLOSE1            END OF DATA
          LA     2,VVDSREC         ADDRESS OF RECORD
          MVC    HWORD(2),VVDSREC  TAKE THE LENGTH FIELD
          LH     3,HWORD           RECORD LENGTH
          LA     2,2(2)            POINT 0 STARTING POINT OF RECORD
          SH     3,=H'2'           REDUCE THE LENGTH
          CLI    2(2),X'E9'        VSAM DATASET COMPONENT HEADER ?
          BNE    NEXTREC           IF NOT SKIP IT
NEXTCOMP  MVC    HWORD,0(2)        GET COMPONENT LENGTH
          LH     4,HWORD
          CLI    2(2),X'E9'        HEADER CELL
          BE     HEADER
          CLI    2(2),X'23'        VOLUME COMPONENT
          BE     VOLCOMP
SKIPIT    AR     2,4               POINT TO NEXT COMPONENT
          SR     3,4               REMAINING LENGTH
          BH     NEXTCOMP          PROCESS NEXT COMPONENT
PRINTREC  PUT    OUTFILE,OUTREC    WRITE A RECORD
          B      NEXTREC           GET NEXT VVDS RECORD
*  PROCESS HEADER CELL HERE
HEADER    MVC    OCOMPNT,=CL44' '  INITALIZE WITH SPACE
          LA     6,9(2)            COMPONENT NAME
          SLR    7,7
          IC     7,8(2)            COMPONENT LENGTH
          SH     7,=H'1'           REDUCE BY 1
          LA     8,OCOMPNT         COMPONENT NAME
          LR     9,7
          MVCL   8,6               COMPONENT NAME TO OUTPUT REC
          MVC    OVOLID,$$VOLID    VOLUME ID TO OUTPUT REC
          B      SKIPIT            NOW SKIP THE REMAINING
*  PROCESS VOLUME COMPONENT HERE
VOLCOMP   CLI    25(2),X'80'        IS IT IMBEDDED PORTION OF INDEX
          BE     NEXTREC               THEN SKIP THIS RECORD
          CLI    25(2),X'C0'        IMBED WITH NO PRE FORMAT
          BE     NEXTREC               THEN SKIP THIS ENTRY ALSO
          MVC    FWORD,17(2)        GET  PHYSICAL BLOCK SIZE
          L      8,FWORD
          MVC    HWORD,21(2)        GET BLOCKS PER TRACK
          LH     9,HWORD
          MVC    FWORD(4),9(2)      HIGH USED RBA
          L      7,FWORD
          AR     7,8                ROUND TO NEXT BLOCK SIZE
          SLR    6,6
          S      7,=F'1'
          DR     6,8                GET NO OF BLOCKS USED
          SLR    6,6                IGNORE REMINDER ..
          AR     7,9                ROUND TO TRACK BOUNDARY IF NOT
          S      7,=F'1'
          DR     6,9                GET TRACKS USED
          ST     7,USETRK           USED TRACKS
          MVC    FWORD(4),13(2)     HIGH ALLOCATED RBA
          L      7,FWORD
          AR     7,8                ROUND TO BLOCK BOUNDARY
          SLR    6,6
          S      7,=F'1'
          DR     6,8                GET NO OF BLOCKS ALLOCATED
          SLR    6,6                CLEAR THE REMINDER
          AR     7,9                ROUND TO TRACK BOUNDARY
          S      7,=F'1'            LESS 1
          DR     6,9                GET TRACKS ALLLOCATED
          ST     7,ALCTRK           ALLOCATED TRACKS
          LA     2,42(2)            POINT TO EXTENT INFORMATION
          SH     4,=H'42'           REMAINING LENGTH
          SLR    5,5                INITIALISE ACTUAL TRACKS
NEXTEXT   MVC    HWORD,10(2)        EXTENT LENGTH
          AH     5,HWORD            ADD CURRENT EXTENT LENGTH
          LA     2,20(2)            POINT TO NEXT EXT
          SH     4,=H'20'           REMAINING LENGTH
          BH     NEXTEXT            NEXT EXTENT
          LR     7,5                ALLOCATED TRACKS
*  HERE TRACKS CONVERTED TO KILOBYTES
*  1 TRACK OF 3380 DASD = 1499 BLOCKS OF 32 BYTE UNITS .
*  FOR OTHER TYPE OF DEVICES MODIFICATION IS NECESSARY
          M      6,=F'1499'         TRACKS CAPACITY IN 32 BYTE UNITS
          A      7,=F'16'           ROUNDING UP
          D      6,=F'32'           GET SPACE IN KB
          ST     7,OALOCKB          ALLOCATED KB
          CLC    OCOMPNT(4),=CL4'PAGE'   IS IT A PAGE DATASET
          BE     PAGE
          L      7,USETRK
          MR     6,5                USE TRACKS * ACTUAL ALLOCATED
          D      6,ALCTRK           GET ACTUAL USED TRACKS
          LTR    6,6                REMINDER ZERO
          BZ     *+8
          LA     7,1(7)             OTHERWISE INCREMENT QUOTIENT 1
          M      6,=F'1499'         TRACKS CAPACITY IN 32 BYTE UNITS
          A      7,=F'16'           ROUNDING UP
          D      6,=F'32'           GET SPACE IN KB
          ST     7,OUSEDKB          ALLOCATED KB
          B      PRINTREC
*  FOR PAGE DATASET VVDS CONTAINING USED SPACE .
*   SET USED-SPACE SAME AS ALLOCATED-SPACE
PAGE      MVC    OUSEDKB,OALOCKB    FOR PAGE DATSETS FULL USED
          B      PRINTREC
CLOSE1    CLOSE  VVDSACB
DEALLOC   LA     1,$$VVDSU
          DYNALLOC ,                NOW DEALLOCATE THE VVDS
          LTR    15,15
          BNZ    DALOCERR
          B      NEXTVOL
ENDVOL    CLOSE  VOLFILE
          CLOSE  OUTFILE
          B      RETURN
OPNERR1   WTO    '  ERROR IN OPENING VOLFILE ',ROUTCDE=(1,10),DESC=(6)
          B      RETURN
OPNERR2   WTO    '  ERROR IN OPENING OUTPUT  ',ROUTCDE=(1,10),DESC=(6)
          B      RETURN
OPNERR3   WTO    '  ERROR IN OPENING VVDS',ROUTCDE=(1,10),DESC=(6)
          B      DEALLOC
DALOCERR  WTO    '  ERROR IN DEALLOCATING VVDS',ROUTCDE=(1,10),DESC=(6)
          B      NEXTVOL
***  VVDS ALLOCATION ERROR
ALOCERR   CVD    15,DWORD
          UNPK   RETCODE(2),DWORD+6(2)
          OI     RETCODE+1,X'F0'
          USING  S99RB,3
          UNPK   ERRCODE,S99ERROR(3)
          TR     ERRCODE,HEXTOCHR
          MVI    ERRCODE+4,C' '
          UNPK   INFCODE,S99INFO(3)
          TR     INFCODE,HEXTOCHR
          MVI    INFCODE+4,C' '
WTO1      WTO    '                                                     C
                                          ',ROUTCDE=(1,10),DESC=(6)
** DYNALLOC ERROR MESSAGES
ALOCMSG   ORG    WTO1+8
          DC     CL25'VVDS ALLOCATION ERROR RC='
RETCODE   DC     CL3' ',CL15'ERROR CODE ='
ERRCODE   DC     CL5' ',CL15'INFO CODE ='
INFCODE   DC     CL5' '
          DC     CL12' '
          ORG
RETURN    L      13,4(13)
          RETURN (14,12),RC=0
*  FILE AND DATA DEFINTIONS
VVDSACB   ACB    AM=VSAM,DDNAME=VVDS1,MACRF=(ADR,SEQ,IN)
VVDSRPL   RPL    AM=VSAM,ACB=VVDSACB,AREA=VVDSREC,AREALEN=4089,        C
               OPTCD=(ADR,SEQ,MVE)
OUTFILE   DCB    DDNAME=OUTFILE,DSORG=PS,MACRF=(PM)
VOLFILE   DCB    DDNAME=VOLIN,DSORG=PS,MACRF=(GL),EODAD=ENDVOL
*  RECORD DEFINITIONS
VVDSREC   DS    CL4089                  VVDS RECORD
          DS    0F
OUTREC    DS    0CL60                   OUTPUT RECORD
OCOMPNT   DS    CL44                    COMPONENT  NAME
OVOLID    DS    CL6                     VOLUME ID
OALOCKB   DS    F                       ALLOCATED KILOBYTES
OUSEDKB   DS    F                       USED KILOBYTES
HWORD     DS    H
FWORD     DS    F
DWORD     DS    D
ALCTRK    DS    F                      ALLOCATED TRACKS - FROM RBA
USETRK    DS    F                      USED TRACKS      - FROM RBA
SAVE      DS    18F
*** DYNAMIC ALLOCATION PARAMETER FOR VVDS DATASET
$$VVDS    DC   A(X'80000000'+$$VVDSA)
$$VVDSA   DC   AL1(S99RBEND-S99RB,S99VRBAL,S99NOMNT,0)
          DC   Y(0,0),A($$VVDSX,0,0)
$$VVDSX   DC   A($$DSNAME1)             DATASET NAME
          DC   A($$DDNAME1)             DDNAME
          DC   A($$STAT1)
          DC   A($$DISP1)
          DC   A(X'80000000')
*** DYNAMIC ALLOCATION TEXT UNITS
$$DDNAME1 DC   Y(DALDDNAM,1,5),CL5'VVDS1'
$$DSNAME1 DC   Y(DALDSNAM,1,17)
          DC   CL11'SYS1.VVDS.V'
$$VOLID   DC   CL6' '                    VOLUME ID
$$STAT1   DC   Y(DALSTATS,1,1),X'08'
$$DISP1   DC   Y(DALNDISP,1,1),X'08'
*** DYNAMIC DEALLOCATION PARAMETER FOR VVDS DATASET
$$VVDSU   DC   A(X'80000000'+$$VVDSUA)
$$VDSUA   DC   AL1(S99RBEND-S99RB,S99VRBUN,0,0)
          DC   Y(0,0),A($$VVDSUX,0,0)
$$VVDSUX  DC   A($$DSNAME1)              DSNAME
          DC   A($$DDNAME1)              DDNAME
          DC   A($$DISP1)                DISPOSITION
          DC   A(X'80000000')
HEXTOCHR  EQU  *-C'0'
          DC   C'0123456789ABCDEF'
          IEFZB4D0
          IEFZB4D2
          END   VVDSREAD


USEDSPCE

This program reads the outputs of the DCOLLECT command
and VVDSREAD, merges the used space information, and
creates a new file. This output dataset can be used as input to
the SLR collect job. A sample job stream is shown below.

//DCOLLCT  JOB  (0),'XXXXXX',CLASS=A,MSGCLASS=X
//*
//DCOL   EXEC  PGM=IDCAMS
//SYSPRINT  DD  SYSOUT=*
//DCOUT    DD    DSN=&&DCOUT,DISP=(,PASS),UNIT=SYSDA,
//         SPACE=(CYL,(1,1)),DSORG=PS,RECFM=VB,LRECL=264,BLKSIZE=23476
//SYSIN    DD    *
     DCOLLECT -
           OUTFILE(DCOUT) -
           VOLUME(*)
/*
//VVDS  EXEC PGM=VVDSREAD,COND=(0,NE)
//OUTFILE DD DSN=&&VVDSOUT,SPACE=(CYL,(1,1)),UNIT=SYSDA,
//  DCB=(RECFM=FB,LRECL=60,BLKSIZE=6000),DISP=(,PASS)
//VOLIN   DD *
 ** List of volumes in the order of unit Number ..
/*
//USESP EXEC PGM=USEDSPAC,COND=(0,NE)
//VVDS1   DD DSN=&&VVDSOUT,DISP=(OLD,DELETE)
//DCOUT   DD DSN=&&DCOUT,DISP=(OLD,DELETE)
//SLRIN   DD DSN=&&DCOUT1,DISP=(,PASS),UNIT=SYSDA,
//   SPACE=(CYL,(1,1)),RECFM=VB,LRECL=264,BLKSIZE=23476
//*
//SLRCOL   EXEC PGM=DREMNBEB,PARM=UPDATE,REGION=6144K,COND=(0,NE)
//LOAD        DSN=SLR.V3R2M0.SLRSAMP,disp=shr
//OUT      DD SYSOUT=*
//MAINFILE DD DISP=OLD,DSN=** Slr main database **
//WORKFILE DD DISP=OLD,DSN=** Slr work file **
//COLLOG   DD DSN=&&DCOUT1,DISP=(OLD,DELETE)
//IN       DD *
   COLLECT ALL LOGSOURCE(DFPX) BUF(10000K) DIA FILE(COLLOG)
/*


PROGRAM

* PROGRAM TO UPDATE THE OUTPUT OF DCOLLECT COMMAND WITH THE SPACE
* INFORMATION OBTAINED FROM VVDSREAD FOR VSAM DATASETS
USEDSPAC  CSECT
          PRINT NOGEN
          SAVE   (14,12)           SAVE REGS
          LR     12,15             SET UP BASE REG
          USING  USEDSPAC,12       ESTABLISH ADDRESSABILITY
          ST     13,SAVE+4         FORWARD POINTER
          LA     10,SAVE
          ST     10,8(13)          BACKWARD POINTER
          LR     13,10             NEW SAVE AREA ADDRESS
          OPEN   DCOUT             FILE CONTAINING DCOLLECT OUTPUT
          LTR    15,15
          BNZ    ERROR1
          OPEN   VVDSOUT           FILE CONTAINING OUTPUT OF VVDSREAD
          LTR    15,15             OK ?
          BMZ    ERROR2            OUTPUT OPEN ERROR
          OPEN   (SLRIN,OUTPUT)    FILE FOR INPUT TO SLR
          LTR    15,15             OK ?
          BNZ    ERROR3            OUTPUT OPEN ERROR
NEXTVV    GET    VVDSOUT           READ ONE VOLID
          MVC    VVREC(60),0(1)    SAVE THE RECORD
NEXTDC    GET    DCOUT
          LA     2,DCOUT           DCB ADDRESS
          USING  IHADCB,2          DUMMY SECTION
          LH     5,DCBLRECL        RECORD LENGTH
          LR     3,1               RECORD ADDRESS
          USING  DCREC,3
          CLI    DCRTYPE,C'D'      DATA COMPONENT
          BNE    PUTREC            WRITE RECORD
          CLC    VCOMPNT,DCCOMPNT  BOTH DATASET NAMES SAME
          BNE    PUTREC            IF NOT SAME WRITE IT
          CLC    VVOLID,DCVOLID    VOLUME ID'S SAME
          BNE    PUTREC
          MVC    DCUSEDKB,VUSEDKB  MOVE USED KB
          LA     2,SLRIN
          STH    5,DCBLRECL
          PUT    SLRIN,DCREC
          B      NEXTVV
PUTREC    LA     2,SLRIN
          STH    5,DCBLRECL
          PUT    SLRIN,DCREC
          B      NEXTDC
VVDSEND   GET    DCOUT
          LA     2,DCOUT
          LH     5,DCBLRECL        RECORD LENGTH
          LR     3,1               RECORD ADDRESS
          LA     2,SLRIN
          STH    5,DCBLRECL
          DROP   2
          PUT    SLRIN,DCREC
          DROP   3
          B      VVDSEND
DCEND     CLOSE  DCOUT
          CLOSE  VVDSOUT
          CLOSE  SLRIN
          B      RETURN
ERROR1    WTO    '  ERROR IN OPENING VVDSOUT',ROUTCDE=(1,10),DESC=(6)
          B      RETURN
ERROR2    WTO    '  ERROR IN OPENING DCOUT   ',ROUTCDE=(1,10),DESC=(6)
          B      RETURN
ERROR3    WTO    '  ERROR IN OPENING SLRIN   ',ROUTCDE=(1,10),DESC=(6)
          B      RETURN
RETURN    L      13,4(13)
          RETURN (14,12),RC=0
SLRIN     DCB    DDNAME=SLRIN,DSORG=PS,MACRF=(PM)
VVDSOUT   DCB    DDNAME=VVDS1,DSORG=PS,MACRF=(GL),RECFM=FB,            C
               EODAD=VVDSEND
DCOUT     DCB    DDNAME=DCOUT,DSORG=PS,MACRF=(GL),RECFM=VB,            C
               EODAD=DCEND
SAVE      DS    18F
          DS    0F
VVREC     DS    0CL60
VCOMPNT   DS    CL44                    COMPONENT  NAME
VVOLID    DS    CL6                     VOLUME ID
VALOCKB   DS    F                       ALLOCATED KB
VUSEDKB   DS    F                       USED KB
DCREC     DSECT                         DCOLLECT OUTPUT RECORD
          DS    CL8
DCRTYPE   DS    CL2                     RECORD TYPE
          DS    CL18
DCCOMPNT  DS    CL44                    COMPONENT NAME
          DS    CL10
DCVOLID   DS    CL6                     VOLUME ID
          DS    CL8
DCUSEDKB  DS    CL4                     SPACE USED IN KB
          DS    CL164                   REMAINING SPACE
          DCBD  DSORG=PS
          END   USEDSPAC

M V George
Systems Programmer
Ministry of Interior (Qatar)

