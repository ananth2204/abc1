Compact VSAM ESDS printout


PURPOSE

The standard IBM utility for processing VSAM clusters,
IDCAMS, is characterized by its lack of many elementary
functions, eg the ability to process individual records.
However, such processing can often be achieved by using
IDCAMS facilities in combination; eg record deletion can be
performed by copying those records which are not to be deleted
to another dataset, deleting the original dataset, and then
renaming the second dataset to the name of the first dataset.
This, however, requires that the records can be identified; for
KSDS clusters this is easily done by means of the key, for
ESDS clusters the record identification is the RBA (Relative
Byte Address).  The dataset must be printed to obtain the RBA.
Such a printout is practicable only for a small dataset - this is
especially true for datasets containing large records (only
complete records can be printed).

The ESDSLIST program produces a compact listing giving:

o      One (selected) line for each record

o      Only each nth record is printed (eg every hundredth record).

The part of the records to be printed and the step size (n) can
be specified as parameters.  The listed records are
automatically formatted in character or hexadecimal, as
appropriate.


SAMPLE JOB

//S1       EXEC PGM=ESDSLIST,PARM=01000140
//SYSUT1   DD   DSN=VSAM.TEST.ESDS,DISP=SHR
//SYSPRINT DD   SYSOUT=A

SYSUT1 is the VSAM cluster, and SYSPRINT gives the name
of the list file.  The optional EXEC PARM (mmmmnnnnpppp)
specifies the following parameters:

o      mmmm      first position in the record to be listed (default 0001)

o      nnnn      last position in the record to be listed (default 0080)

o      pppp      step size (default 0001).

Each of these sub-options can be omitted from the right-hand side.


SAMPLE OUTPUT

Figure 1 shows an example of the output.  The dataset name (in
this case VSAM.TEST.ESDS) is printed in the second heading

line.

RECNO gives the record number, RBA the relative byte
address of the listed record, RECLEN specifies the record
length, FLAGS lists any status flags.  These could be:

o      X - record printed in hexadecimal format

o      L - record length warning, the specified last position (from
      the EXEC PARM) lies outside the record

o      T - truncation error, the specified first position (from the
      EXEC PARM) lies outside the record - no record data are
      printed.

RECORD gives the displayed data.


PROGRAM

         TITLE 'VSAM RBA-PRINT'
         PRINT NOGEN
         SPACE 2
* Compact analysis-program for VSAM-ESDS file (record number and RBA)
         SPACE 1
* DD-Statements:
*    SYSUT1 - INPUT (VSAM) FILE
*  SYSPRINT - LIST-FILE
         SPACE 1
* EXEC-Parameter (optional): mmmmnnnnpppp
*    mmmm - start position of data in record (default 0001)
*    nnnn - end position of data in record (default 0080)
*    pppp - step size (default 0001)
         SPACE 1
* Return Code:
*   0 - ok
*   8 - nok, EXEC-parameter length error (not 0, 4, 8 or 12)
*  12 - nok, EXEC-parameter formal error
         SPACE 3
ESDSLIST CSECT
* initialise addressing
         STM   R14,R12,12(R13)    save registers
         BALR  R12,0              base register
         USING *,R12
         LA    R15,SA             A(save-area)
         ST    R13,4(R15)         backward ptr
         ST    R15,8(R13)         forward ptr
         LR    R13,R15            A(new save-area)
         B     SA_END             jump over save-area
SA       DS    18A                save-area
SA_END   DS    0H
         SPACE 1
         L     R2,0(R1)           A(EXEC-parameter)
         LH    R0,0(R2)           L(EXEC-parameter)
         LTR   R0,R0
         BZ    A010               :no parameter
         SR    R1,R1              zeroize R1
         SRDL  R0,2               R0-R1 / 4
* test for ramainder (= error)
         MVC   RC,=H'8'           set default ReturnCode
         LTR   R1,R1
         BNZ   EOJ                :length error
         CH    R1,3               maximum no. of sub-parameters
         BH    EOJ                :too many
* process parameters
         MVC   RC,=H'12'          set default ReturnCode (if error)
         LA    R3,STARTADD        first parameter (processed)
         SPACE 1
A020     PACK  D,2(4,R2)
         CVB   R1,D
         LTR   R1,R1
         BZ    EOJ                zero value invalid
         ST    R1,0(R3)           save processed parameter
         LA    R2,4(R2)           update pointer (input)
         LA    R3,4(R3)           update pointer (output)
         BCT   R0,A020            :loop
         SPACE 1
* validate parameters
         L     R1,ENDADD          end address
         S     R1,STARTADD        - start address (=difference)
         BM    EOJ                end address < start address
         C     R1,=A(L'P1REC)     test maximum length
         BH    EOJ                too long
         SPACE 1
A010     MVC   RC,=H'0'           reset ReturnCode
         SPACE 1
         OPEN  (SYSUT1,(INPUT),SYSPRINT,(OUTPUT))
         SPACE 1
         LA    R5,SYSUT1          A(ACB)
         USING IFGACB,R5
         BAL   R14,GETDSN         get DS-Name
         MVC   P3DSNAME,DSNAME
* get date and time-of-day
         TIME
* R0: time of day (hhmmssth)
* R1: date (00yydddF)
         ST    R0,WK
         MVC   P3TOD,=X'4021207A2020'
         ED    P3TOD,WK
         ST    R1,WK
         MVC   P2DATE,=X'4021204B202020'
         ED    P2DATE,WK+1
         SPACE 1
* print headings
         PUT   SYSPRINT,P2
         PUT   SYSPRINT,P3
         PUT   SYSPRINT,P5
         SPACE 2
* set stepsize (for display)
A100     L     R4,STEPSIZE
* read record
A110     LA    R3,RPL
         GET   RPL=RPL            get record
         STH   R15,RC
         BAL   R14,MSG
         DC    CL8'GET'
* increment record-count
         AP    RECCT,=P'1'        total count
         SPACE 1
         BCT   R4,A110
         SPACE 1
* get RBA and record length
         SHOWCB RPL=RPL,                                               X
               AREA=RBA,                                               X
               LENGTH=8,                                               X
               FIELDS=(RBA,RECLEN)
         SPACE 1
* format record number
         MVC   P1RECNO,=X'4020202020202120'
         ED    P1RECNO,RECCT
         SPACE 1
* format RBA
         L     R0,RBA
         CVD   R0,D
         MVC   P1RBA,=X'4020202020202120'
         ED    P1RBA,D+4
         SPACE 1
* format record length
         L     R0,RECLEN
         CVD   R0,D
         MVC   P1RECLEN,=X'4020202020202120'
         ED    P1RECLEN,D+4
         SPACE 1
* display record identifier
         SPACE 1
         BAL   R14,PRINTREC
         SPACE 1
         B     A100               next step block
         SPACE 3
A200     DS    0H                 end-of-file
         SPACE 1
         MVC   P1,P1-1            clear P1
         PUT   SYSPRINT,P1        print blank line
         ZAP   D,RECCT
         SPACE 1
         MVC   P1+12(24),=CL24'RECORD(S) READ'
         BAL   R14,PRINTCT        print record count
         SPACE 2
A300     CLOSE (SYSPRINT,,SYSUT1)
         SPACE 1
EOJ      DS    0H
         LH    R15,RC             program ReturnCode
         L     R13,4(R13)         restore A(old save-area)
         RETURN (14,12),RC=(15)
         SPACE 1
* symbolic register equates
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
RC       DS    H
         EJECT
         DC    A(0)
MSG      ST    R14,MSG-4
         MVC   P0OP,0(R14)
         SR    R1,R1
         IC    R1,15(R3)          Reason code (feedback code)
         ST    R1,FDBK
         CVD   R1,D
         UNPK  P0FDBK,D
         OC    P0FDBK,=C'00'
         SPACE
         LTR   R15,R15
         BZ    MSG1
         CVD   R15,D
         UNPK  P0RC,D
         OC    P0RC,=C'00'
         CVD   R0,D
         UNPK  P0R0,D
         OC    P0R0,=C'00'
         SPACE
         PUT   SYSPRINT,P0
         SPACE
MSG1     L     R14,MSG-4
         B     8(R14)
         EJECT
         SPACE 1
         DS    A
PRINTREC ST    R14,PRINTREC-4
* print current record (partial)
* input:
         SPACE 1
* get record address (-> R8)
         BAL   R14,GETREC
* R2: L(data)
* format data
         SPACE
* truncate if record longer than <P1REC>
         LA    R15,L'P1REC        L(P1REC) = maximum length
         CR    R2,R15             L(data):L(P1REC)
         BL    *+6                L(data)<L(P1REC)
         LR    R2,R15
         LTR   R2,R2
         BZ    PRINTREC1          :no data
         SPACE
         BCTR  R2,0               LC(data)
         MVC   P1REC(0),0(R8)
         EX    R2,*-6
         SPACE 1
PRINTREC1 PUT   SYSPRINT,P1
         MVC   P1,P1-1            clear
         SPACE 1
         L     R14,PRINTREC-4
         BR    R14
         SPACE 3
         DS    A
GETREC   ST    R14,GETREC-4
* get record
* output:
*        R2: L(record)
*    <ADDR>: A(record)
*  <RECLEN>: L(record)
         SPACE 1
         LA    R2,0               R2:=0
         SPACE 1
         L     R8,ADDR
         A     R8,STARTADD
         BCTR  R8,0
*       R8: A(partial record)
* check whether record non-display
         L     R3,ENDADD          end address
         C     R3,RECLEN
         BL    *+12
         L     R3,RECLEN
         MVI   P1LENFL,C'L'       set length flag
         SPACE
         S     R3,STARTADD        - start address
         MVI   P1TRUNFL,C'T'      set truncated flag
         SH    R3,=H'1'           LC(partial record)
         BM    GETREC1
         MVI   P1TRUNFL,C' '      reset truncated flag
         TRT   0(0,R8),TRT1
         EX    R3,*-6
         LA    R2,1(R3)           L(partial record)
         BZ    GETREC1            OK
* non-display character
* convert to hex
         MVI   P1HEXFL,C'X'       set hex flag
         SPACE
         LR    R0,R2              L(partial record)
         SRL   R0,1               LENGTH/2
         LR    R1,R8              A(partial record - input)
         LA    R15,RECHEX         A(RECHEX) - output
         LR    R8,R15             A(RECHEX) - output
         SPACE
GETREC2  UNPK  WK,0(2,R1)         WK:X'FAFBXX'
         NC    WK,=X'0F0F00'      WK:X'0A0B00'
         TR    WK,TR1             WK:C'AB0'
         MVC   0(2,R15),WK
         LA    R1,1(R1)
         LA    R15,2(R15)
         BCT   R0,GETREC2
         SPACE
GETREC1  L     R14,GETREC-4
         BR    R14
         SPACE 2
TRT1     DC    256X'1'
         ORG   TRT1+X'40'
         DC    X'0'               BLANK
         ORG   TRT1+C''
         DC    X'0'
         ORG   TRT1+C'#'
         DC    X'0'
         ORG   TRT1+C'@'
         DC    X'0'
         ORG   TRT1+X'81'
         DC    9X'0'              A-I
         ORG   TRT1+X'91'
         DC    9X'0'              J-R
         ORG   TRT1+X'A2'
         DC    8X'0'              S-Z
         ORG   TRT1+C'A'
         DC    9X'0'
         ORG   TRT1+C'J'
         DC    9X'0'
         ORG   TRT1+C'S'
         DC    8X'0'
         ORG   TRT1+C'0'
         DC    10X'0'
         ORG
         SPACE 2
TR1      DC    C'0123456789ABCDEF'
         SPACE 2
RECHEX   DC    CL(L'P1REC)' '
         DC    C' '
         SPACE 1
WK       DS    CL3,C              work-area
         SPACE 3
         DS    A
PRINTCT  ST    R14,PRINTCT-4
         MVC   P1+3(8),=X'4020202020202120'
         ED    P1+3(8),D+4
         SPACE 1
         PUT   SYSPRINT,P1
         MVC   P1,P1-1            CLEAR
         L     R14,PRINTCT-4
         BR    R14
         SPACE 3
         DS    A
GETDSN   ST    R14,GETDSN-4
         SPACE 2
* input:
*  <ACBTIOT>: offset from TIOT origin to TIOELNGH field
* output:
*  <DSNAME>: DSNAME result
         SPACE
* GET TIOT-ADDRESS
         EXTRACT ATIOT,FIELDS=(TIOT)
         L     R1,ATIOT
* R1: A(TIOT)
         SPACE
         USING TIODSECT,R1
         AH    R1,ACBTIOT         + offset
         SPACE 1
         ICM   R1,B'0111',TIOEJFCB A(JFCB)
         USING JFCDSECT,R1
         SPACE
         MVC   DSNAME,JFCBDSNM
         SPACE
         L     R14,GETDSN-4
         BR    R14                RETURN
         SPACE
ATIOT    DS    A
DSNAME   DS    CL44
         EJECT
P0       DC    CL121' '
         ORG   P0+1
         DC    C'VSAM error '
P0OP     DS    CL8
         DC    C'  RC:'
P0RC     DS    CL2
         DC    C' FDBK:'
P0FDBK   DS    CL2
         DC    C'  R0:'
P0R0     DS    CL2
         ORG
         SPACE 2
         DC    C' '               clear byte
P1       DC    CL121' '
         ORG   P1+1
P1RECNO  DS    CL8,CL2
P1RBA    DS    CL8,CL2
P1RECLEN DS    CL8,CL2
P1HEXFL  DS    CL1
P1LENFL  DS    CL1
P1TRUNFL DS    CL1,CL4
P1REC    DS    CL80
         ORG
         SPACE 1
P2       DC    CL121'1'
         ORG   P2+50
         DC    C'VSAM ESDS LIST'
         ORG   P2+110
P2DATE   DS    C' yy.ddd'
         ORG
         SPACE 1
P3       DC    CL121'0'
         ORG   P3+50
P3DSNAME DS    CL44
         ORG   P3+110
P3TOD    DS    C' hh:mm'
         ORG
         SPACE 1
* heading line
P5       DC    CL121' '
         ORG   P5+P1RECNO-P1
         DC    CL8'   RECNO'
         ORG   P5+P1RBA-P1
         DC    CL8'     RBA'
         ORG   P5+P1RECLEN-P1
         DC    CL8'  RECLEN'
         ORG   P5+P1HEXFL-P1
         DC    C'FLAGS'
         ORG   P5+P1REC-P1
         DC    C'RECORD'
         ORG
         SPACE 2
FDBK     DS    A
D        DS    D
         SPACE 2
* counters
RECCT    DC    PL4'0'             record count
         SPACE 3
* DCBS, ACBS, ETC.
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,RECFM=FBA,                     X
               LRECL=121,BLKSIZE=2420,DSORG=PS,DEVD=DA
         SPACE 2
SYSUT1   ACB   DDNAME=SYSUT1,MACRF=(IN,ADR,SEQ),EXLST=EXLST
         SPACE 1
EXLST    EXLST EODAD=A200
         SPACE 2
RPL      RPL   ACB=SYSUT1,                                             X
               OPTCD=(NUP,ADR,SYN,LOC,FWD),                            X
               AREA=ADDR,                                              X
               AREALEN=4
         SPACE 2
ADDR     DS    A                  address of data-record
         SPACE 1
RBA      DS    A                  RBA address
RECLEN   DS    A                  record length as read
         SPACE 1
STARTADD DC    A(1)
ENDADD   DC    A(64)
STEPSIZE DC    A(1)
         SPACE 2
         LTORG
         SPACE 3
* dummy-sections
TIODSECT DSECT
TIOELNGH DS    AL1                entry length
         DS    XL3
TIOEDDNM DS    CL8                DD-Name
TIOEJFCB DS    AL3                A(JFCB)
         SPACE 2
JFCDSECT DSECT
         DS    XL16               prefix (16 bytes)
         IEFJFCBN                 , JFCB mapping
         SPACE 2
         IFGACB                   , ACB mapping
         SPACE 2
ACBDSECT DSECT
         END
A S Rudd (Germany)                  c A S Rudd 1991


