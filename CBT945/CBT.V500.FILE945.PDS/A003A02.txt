Displaying VSAM information

We use this program to find out if any of our VSAM files
should be reorganized.  The files are displayed in green,
yellow, or red.  The program also creates a list which contains
some of the information.  We update the lists every morning.

Figure 1 shows an example of the menu, Figure 2 shows a file
display, and Figure 3 shows a display for a specified file.

The colours mean:

o      Green   - file is OK

o      Yellow - file should be examined and perhaps reorganized


o      Red      - file should be reorganized.

These colours are set to our own specifications and can be
changed in the program VSAMCALC.

The program can also create a list of how many tracks are
assigned to a volume on a catalog and how many of these are
used and how many are free.

The programs that update the lists are running on a machine
(LISTCAT) that is autologged every morning.  Their names
are:

o      PROFILE EXEC

o      MAKECAT EXEC

o      LISTCAT EXEC

o      SPACECAL EXEC

o      VSAMCALC EXEC

o      TEMPDISK EXEC

o      LISTCALL AMSERV

o      LISTCSPA AMSERV.

The TEMPDISK EXEC creates a temporary disk, but if one
has already been created and its size is equal to or greater than
the requested size, it is simply re-accessed using the ERASE
option.

The other programs, VCAT EXEC and VCATPROF XEDIT,
are placed on a general disk.  The TEMPDISK EXEC can also
be placed on the general disk; it could be useful for other users.

The display has a search field where you can type part of a
VSAM name and/or colour and/or the volser.  The colours
must be specified as *GRE, *YEL, or *RED.  The volser must
be specified as VOL=volser.  If more than one of the options
are entered they must be separated by a comma.  The cursor
must be placed at the catalog you wish to display.  You can
also enter catalog and search together with VCAT command, ie
VCAT catalog search.

To update catalog information enter:

      MAKECAT catalog ALL

To update space information lists enter:

      MAKECAT catalog SPACE

We autolog the LISTCAT machine the following way:

o      CP AUTOLOG LISTCAT password WEEKLY - This will
      run a MAKECAT ALL and a MAKECAT SPACE for all
      our catalogs.  We also print the lists weekly.

o      CP AUTOLOG LISTCAT password DAILY - This will
      run a MAKECAT ALL for all our catalogs.

The PROFILE EXEC on the LISTCAT machine controls this.

Note: the LISTCAT machine has two mini-disks and the
VCAT EXEC links to its E disk (300).

Example of the directory definition for the LISTCAT machine:

USER LISTCAT passw 3M 3M G
...
...
MDISK 191 3380 001 005 volid rpass wpass mpass
MDISK 300 3380 006 003 volid ALL   wpass mpass

Our system is VM/SP 5.0 HPO, VSE/SP 4.1.0.


PROFILE EXEC

/**  Profile for the LISTCAT machine                                 **/
'ACC 300 E'
/**  Check for AUTOLOG                                               **/
 Parse Value Diag(8,'QUERY' Userid()) With . . Check '15'X
 If Check <> 'DSC' Then Exit
/**  If we get here we have been autologged                          **/
'CP PURGE PRT ALL'
 Parse Pull Command
 If Command <> 'DAILY' & Command <> 'WEEKLY' Then Signal Exit
'EXEC MAKECAT PP1    ALL'
'EXEC MAKECAT PP2    ALL'
'EXEC MAKECAT PP3    ALL'
'EXEC MAKECAT EGUCAT ALL'
'EXEC MAKECAT VSESP  ALL'
 If Command = 'DAILY' Then Signal Exit
'PRINT PP1    LISTING A'
'PRINT PP2    LISTING A'
'PRINT PP3    LISTING A'
'PRINT EGUCAT LISTING A'
'PRINT VSESP  LISTING A'
'EXEC MAKECAT PP1    SPACE'
'EXEC MAKECAT PP2    SPACE'
'EXEC MAKECAT PP3    SPACE'
'EXEC MAKECAT EGUCAT SPACE'
'EXEC MAKECAT VSESP  SPACE'
'PRINT PP1    SPACE   A (CC'
'PRINT PP2    SPACE   A (CC'
'PRINT PP3    SPACE   A (CC'
'PRINT EGUCAT SPACE   A (CC'
'PRINT VSESP  SPACE   A (CC'
Exit:
'CP LOGOFF'


MAKECAT EXEC

/** MAKECAT: Make catalog informations. ALL or SPACE.                **/
 Arg Cat Function
'EXEC LISTCAT' Cat Function
 If Rc <> 0 Then Exit Rc
 If Function = 'ALL'   Then 'EXEC VSAMCALC' Cat
 If Function = 'SPACE' Then 'EXEC SPACECAL' Cat


LISTCAT EXEC

/** LISTCAT: Run listcat for a specific catalog.                     **/
 Arg Cat Function
 Amserv =
 If Function = 'SPACE' Then Amserv = 'LISTCSPA'
 If Function = 'ALL'   Then Amserv = 'LISTCALL'
 If Amserv = ' ' Then Exit
'SET DOS ON (VSAM'
 Select
    When Cat = 'PP1'     Then Do
         Call Mast_Setup 'VSEIPO VSEIPO 144'
         Input = 'PP1.USER.CATALOG    VSEIPO  VSEIPO  146'
         End
    When Cat = 'PP2'     Then Do
         Call Mast_Setup 'VSEIPO VSEIPO 144'
         Input = 'PP2.USER.CATALOG    VSEIPO  VSEIPO  145'
         End
    When Cat = 'PP3'     Then Do
         Call Mast_Setup 'VSEIPO VSEIPO 144'
         Input = 'PP3.USER.CATALOG    VSEIPO  VSEIPO  147'
         End
    When Cat = 'EGUCAT'  Then Do
         Call Mast_Setup 'VSEIPO VSEIPO 144'
         Input = 'EGUCAT.USER.CATALOG VSEOKO  VSEOKO  244'
         End
    When Cat = 'VSESP'   Then Do
         Call Mast_Setup 'VSETEST VSETEST 24E'
         Input = 'VSESP.USER.CATALOG  VSETEST VSETEST 24F'
         End
    Otherwise
         Say 'Unknown catalog name'
         Exit 100
    End
 Parse Value Input With Vsamname UserSys UserPass UserCuu
'CP LINK' UserSys UserCuu '146 RR' UserPass
'ACCESS 146 O'
'ASSGN SYS146 O'
'DLBL IJSYSUC O DSN' Vsamname '(VSAM SYS146 BUFSP 3584'
'EXEC TEMPDISK 30'
'REL 191'                      /* Release A disk                      */
'ACC 100 A'                    /* Access tempdisk as A                */
'AMSERV' Amserv   Cat          /* AMSERV will write to first R/W disk */
'ACC 191 A'                    /* Restore disks                       */
'ACC 100 T'
'DLBL * CLEAR'
'SET DOS OFF'
'REL 144 (DET'
'REL 146 (DET'
Exit
Mast_Setup:
      Parse Arg MasterSys MasterPass MasterCuu
     'REL 144 (DET'
     'CP LINK' MasterSys MasterCuu '144 RR' MasterPass
     'ACCESS 144 N'
     'ASSGN SYSCAT N'
     'DLBL IJSYSCT N DSN VSAM MASTER CATALOG (SYSCAT VSAM'
      Return


SPACECAL EXEC

/** This EXEC calculates the space used on a specific volume.        **/
          Parse Arg Catalog .
          Input_File  = Catalog 'LISTING T'
          Output_File = Catalog 'SPACE A'
          Line.1 = '1VOLUME  EXT. TOTAL-TRK  USED-TRK  FREE-TRK'
          Count = 1
Again:
          Total_T_Trk = 0
          Total_U_Trk = 0
          Total_Ext   = 0
/** Find VOLUME id.                                                  **/
       'EXECIO * DISKR' Input_File '(ZONE 2 7 MARGINS 18 23 LO /VOLUME/'
          If Rc <> 0 Then Do
            'ERASE' Output_File
            'EXECIO' Count 'DISKW' Output_File '(FINIS STEM LINE.'
             Exit
             End
          Pull .
          Pull Vol_Id
/** Find dataspaces.                                                **/
          'EXECIO * DISKR'
                 Input_File '(ZONE 96 103 MARGINS 117 119 LO /DATASPCS/'
          Pull .
          Pull Spaces
          Spaces = Reform(Spaces)
/** Is spaces not 0, find number of extents.                         **/
          If Spaces = 0 Then Signal MakeLine
          Spa_Count = 0
LocExt:
     'EXECIO * DISKR' Input_File '(ZONE 9 15 MARGINS 30 32 LO /EXTENTS/'
          Pull .
          Pull Extents
          Extents = Reform(Extents)
          Total_Ext = Total_Ext + Extents
          Ext_Count = 0
/** Find number of tracks.                                           **/
LocTrk:
      'EXECIO * DISKR' Input_File '(ZONE 9 14 MARGINS 28 32 LO /TRACKS/'
          Pull .
          Pull T_Tracks
          T_Tracks = Reform(T_Tracks)
          Total_T_Trk = Total_T_Trk + T_Tracks
      'EXECIO * DISKR' Input_File '(ZONE 9 14 MARGINS 28 32 LO /TRACKS/'
          Pull .
          Pull U_Tracks
          U_Tracks = Reform(U_Tracks)
          Total_U_Trk = Total_U_Trk + U_Tracks
          Ext_Count = Ext_Count + 1
          If Ext_Count < Extents Then Signal LocTrk
          Spa_Count = Spa_Count + 1
          If Spa_Count < Spaces  Then Signal LocExt
/** Make one more output line.                                       **/
MakeLine:
          Free_Track  = Total_T_Trk - Total_U_Trk
          Total_Ext   = Right(Total_Ext,4)
          Total_T_Trk = Right(Total_T_Trk,10)
          Total_U_Trk = Right(Total_U_Trk,9)
          Free_Track  = Right(Free_Track,9)
          Count = Count + 1
          Line.Count = ' 'Vol_id Total_Ext Total_T_Trk Total_U_Trk Free_Track
          Signal Again
Reform:
         Parse Arg Input , Start , Length
         If Start  = ' ' Then Start = 1
         If Length = ' ' Then Length = Length(Input)
         Input = Abs(Translate(Substr(Input,Start,Length),'0','-'))
         Return Input


VSAMCALC EXEC

/** Creates xxxxxxxx VSAM files.                                     **/
         Arg Catalog .
         Output_File  = Catalog 'VSAM E'
         Listing_File = Catalog 'LISTING A'
         LineCount = 47
         LineCheck = LineCount - 1
         Prt_Count =  0
         PageCount =  0
         Count     =  0
         Red       =  0
         Yel       =  0
         Gre       =  0
         CatLine   =
         CatLine.  =
         IndexLine =
         Calc. =
         Calc.512    = 46
         Calc.1024   = 31
         Calc.1536   = 23
         Calc.2048   = 18
         Calc.2560   = 15
         Calc.3072   = 13
         Calc.3584   = 11
         Calc.4096   = 10
         Calc.4608   = 9
         Calc.5120   = 8
         Calc.5632   = 7
         Calc.6144   = 7
         Calc.6656   = 6
         Calc.7168   = 6
         Calc.7680   = 5
         Calc.8192   = 5
         Calc.10240  = 4
         Calc.12288  = 3
         Calc.14336  = 3
         Calc.16384  = 2
         Calc.18432  = 2
         Calc.20480  = 2
         Calc.22528  = 2
         Calc.24576  = 1
         Calc.26624  = 1
         Calc.28672  = 1
         Calc.30720  = 1
         Calc.32768  = 1
         PrtHeader   = '1'Left('CLUSTER NAME',41) ,
                'EXTENTS  TRACKS FREE-TRACKS  RECORDS   CREATE   VOLUME'
/**  Read the input file - Stop if 'IDC0002'.                        **/
Again:
        'EXECIO 1 DISKR' Catalog 'LISTING T (VAR INLIN'
         If Rc <> 0 Then Exit Rc
         Art  = Substr(Inlin,2,7)
         ArtX = Substr(Inlin,5,7)
         If Art  = 'CLUSTER' | Art = 'AIX ---' Then Do
            Call Get_Name
            Call Locate 'DATA  5 9 * *'
            Pull Inline
            Data_Name = Strip(Substr(Inline,18,44))
            Call Get_Info
            Call Make_Prtline
            C_Extent = Extent
            C_Ttrack = Ttrack
            Maxnote = '-.'
            PrtNote = '-.'
            If Ttrack <> 0 Then Call Check 'C'
            If PrtNote = '-;' Then Do
               PrtSaveLine = '+'Substr(PrtLine.Prt_Count,2)
               Do 3
                  Prt_Count = Prt_Count + 1
                  PrtLine.Prt_Count = PrtSaveline
                  End
               End
            C_Note  = Maxnote
            Catline = ClustName C_Note || Data_Name Extent Ttrack ,
                                        Ftrack Trec Spci Spca Fsci Fsca
            Catline = Catline Keylen Rkp Avglrecl MaxLrecl ,
                                      Ci_Pr_Ca Ci SpcType SpcPri SpcSec
            Catline = Catline Buffersp Attributes Create Volser
            Catline = Space(Catline,1)
            End
         If ArtX = 'INDEX -' Then Do
            IndexName = Strip(Substr(Inlin,18,44))
            Call Get_Info
            Maxnote = '-.'
            If Ttrack <> 0 Then Do
               If Find(Attributes,'IMBED') <> 0 Then Do
                  Extent = Extent - C_Extent
                  Ttrack = Ttrack - C_Ttrack
                  End
               Call Check 'I'
               End
            I_Note  = Maxnote
            IndexLine = I_Note || IndexName Levels Extent Ttrack ,
                                        Ftrack Trec Ci_Pr_Ca Ci Spctype
         IndexLine = IndexLine Spcpri spcsec Buffersp Volser Attributes
            End
         If Art <> 'IDC0002' Then Signal Again
         Call Makeline
         Catline.1 = Red Yel Gre
        'ERASE' Output_File
        'EXECIO' Count 'DISKW' Output_File '(FINIS STEM CATLINE.'
         If Rc <> 0 Then Do
            Say 'Error' Rc 'writing' Output_File 'to disk.'
           'ERASE' Output_File
            Exit
            End
        'ERASE' Listing_File
        'EXECIO' Prt_Count 'DISKW' Listing_File '(FINIS STEM PRTLINE.'
         If Rc <> 0 Then Do
            Say 'Error' Rc 'writing' Listing_File 'to disk.'
           'ERASE' Listing_File
            Exit
            End
         Exit
Get_Name:
         Call Makeline
         IndexLine =
         ClustName = Substr(Inlin,18,44)
         Chk.    = 'N'
         Call Locate 'CREATION 38 45 56 61'
         Pull Create .
         Return
Get_Info:
         Ttrack  = 0
         Ftrack  = 0
         Call Locate 'CISIZE 96 101 * *'
         Pull Inline
         Ci       = Reform(Inline,115,5)
         Keylen   = Reform(Inline,25,8)
         Avglrecl = Reform(Inline,57,5)
         Buffersp = Reform(Inline,84,7)
         Call Locate 'RKP---- 9 15 * *'
         Pull Inline
         Rkp      = Reform(Substr(Inline,25,8))
         Maxlrecl = Reform(Substr(Inline,57,5))
         Ci_Pr_Ca = Reform(Substr(Inline,116,4))
         Call Attri
         Call Locate 'REC-TOT 9 15 * *'
         Pull Inlin
         Trec    = Reform(Substr(Inlin,25,8))
         Spci    = Reform(Substr(Inlin,58,4))
         Call Locate 'EXTENTS 67 73 * *'
         Pull Inlin
         Extent = Reform(Substr(Inlin,88,3))
         Spca    = Reform(Substr(Inlin,59,3))
         Levels  = Reform(Substr(Inlin,115,5))
         Call Locate 'FREESPACE-%CI 38 50 60 61'
         Pull Fsci
         Fsci = Reform(Fsci)
         Call Locate 'FREESPACE-%CA 38 50 60 61'
         Pull Fsca
         Fsca = Reform(Fsca)
         If Extent = 0 Then Signal Vol_Loc
         Call Locate 'FREESPC 38 44 53 61'
         Pull Fsb
         Fsb = Reform(Fsb)
         If Fsb = 0 Then Signal Vol_Loc
         If Ci  = 0 Then Signal Vol_Loc
/**              Calculate number of free tracks.                    **/
         Ftrack = (Fsb % Ci) % Calc.Ci
Vol_Loc:
         Call Locate 'SPACE-TYPE 9 18 19 32'
         Pull SpcType
         SpcType = Strip(Translate(SpcType,' ','-'))
         Call Locate 'SPACE-PRI 9 17 25 32'
         Pull SpcPri
         SpcPri = Strip(Translate(SpcPri,' ','-'))
         Call Locate 'SPACE-SEC 9 17 25 32'
         Pull SpcSec
         SpcSec = Strip(Translate(SpcSec,' ','-'))
         Call Locate 'VOLSER 9 14 27 32'
         Pull Volser .
         If Extent <> 0 Then Do A=1 To Extent By 1
            Call Locate 'TRACKS 67 72 86 91'
            Pull Atrack .
            Ttrack = Ttrack + Reform(Atrack)
            End
         Return
/**                     S u b r o u t i n e s                        **/
Check:   Parse Arg Check_Type
         Note    = '-.'
         If Extent > 2      Then Call SetNote ','
         If Extent > 4      Then Call SetNote ';'
         Extent = Note || Strip(Extent)
         Note   = '-.'
         If Ttrack <> 1 & Ttrack = Ftrack Then Call SetNote ','
         Ttrack = Note || Strip(Ttrack)
         Ftrack = Note || Strip(Ftrack)
         Note   = '-.'
         If Ftrack  > 45     Then Call SetNote ','
         If Ftrack  > 75     Then Call SetNote ';'
         If Note <> '-.' Then FTrack = Note || Stirp(Substr(FTrack,3))
         If Check_Type = 'I' Then Do
            If Levels = 3  Then Call SetNote ','
            If Levels > 3  Then Call SetNote ';'
            Levels = Note || Strip(Levels)
            Return
            End
         PrtNote = MaxNote
         Note    = '-.'
         If Spci > 10  Then Call SetNote ','
         If Spci > 30  Then Call SetNote ';'
         Spci    = Note || Strip(Spci)
         Note    = '-.'
         If Spca > 5   Then Call SetNote ','
         If Spca > 15  Then Call SetNote ';'
         Spca    = Note || Strip(Spca)
         Return
MakeLine:
         Select
            When C_Note = '-;' Then MaxNote = '-;'
            When I_Note = '-;' Then MaxNote = '-;'
            When C_Note = '-,' Then MaxNote = '-,'
            When I_Note = '-,' Then MaxNote = '-,'
            Otherwise MaxNote = '-.'
            End
         Count = Count + 1
         If Count = 1 Then Return
         CatLine.Count = MaxNote || CatLine IndexLine
         IndexLine =
         If MaxNote = '-;' Then Red = Red + 1
         If MaxNote = '-,' Then Yel = Yel + 1
         If MaxNote = '-.' Then Gre = Gre + 1
         Return
Make_Prtline:
         Prt_Prefix = ' '
         Prt_Count = Prt_Count + 1
         LineCheck = LineCheck + 1
         If LineCheck = LineCount Then Do
            PageCount = PageCount + 1
            PrtLine.Prt_Count = PrtHeader ,
                '  CATALOG:' Left(Catalog,10) 'PAGE' Right(PageCount,4)
            Prt_Count = Prt_Count + 1
            Prt_Prefix = '0'
            Linecheck  =  0
            End
         Prt_Extent = Right(Abs(Extent),4)
         Prt_Ttrack = Right(Abs(Ttrack),7)
         Prt_Ftrack = Right(Abs(Ftrack),11)
         Prt_Trec   = Right(Abs(Trec),8)
         PrtLine.Prt_Count = Prt_Prefix || ClustName Prt_Extent,
                   Prt_Ttrack PrT_Ftrack Prt_Trec'   'Create'   'Volser
         Return
SetNote: Parse Arg Note
         Note = '-'Note
         If MaxNote = '-;' Then Return
         MaxNote = Note
         Return
Reform:
         Parse Arg Input , Start , Length
         If Start  = ' ' Then Start = 1
         If Length = ' ' Then Length = Length(Input)
         If Substr(Input,Start,Length) = ' ' Then Return ' '
         Input = Abs(Translate(Substr(Input,Start,Length),'0','-'))
         Return Input
Locate:  Parse Arg Locate Zon1 Zon2 Marg1 Marg2
         If Zon1  <> '*' Then Zone = 'ZONE' Zon1 Zon2
                         Else Zone = ' '
         If Marg1 <> '*' Then Marg = 'MARGINS' Marg1 Marg2
                         Else Marg = ' '
        'EXECIO * DISKR' Catalog 'LISTING T (STRIP' ,
                                           Zone Marg 'LOCATE #'Locate'#'
         Pull . Lastread .
         Return
Attri:   Call Locate 'SHROPTN 9 15 2 130'
         Pull OldLin
Atr_Again:
        'EXECIO 1 DISKR' Catalog 'LISTING T' (Lastread+1) ,
                                              '(MARGINS 2 130 VAR INLIN'
         If Substr(Inlin,1,7) = '1IDCAMS' Then Do
            Lastread = Lastread + 2
            Signal Atr_Again
            END
         Attributes = Space('+++' Oldlin Inlin' +++',1)
         Return


TEMPDISK EXEC

/** TEMPDISK - Define (or re-access) a temporary disk.               **/
/**            Input: Number of cylinder - 10 is default.            **/
Trace Off
Arg Size
If Size = '' Then Size = 10
'QUERY DISK T (STACK'
 Pull . . Accessed .
 If Accessed <> 'NOT' Then Do
    Pull Check1 . . Check2 Check3 .
    Call Check 'TEMP01'
    End
 Parse Value DiagRc(08,'QUERY VIRTUAL 100') With Rc . . . . Check1,
                                                        Check2 Check3 .
 If Rc = 0 Then Call Check '(TEMP)'
'SET CMSTYPE HT'
'RELEASE 100'
 Parse Value Diag(08,'DETACH 100') With .
 Parse Value DiagRc(08,'DEFINE T3380 100' Size) With Rc . Error
 If Rc <> 0 Then Do
   'SET CMSTYPE RT'
    Say Strip(Error)
    Exit Rc
    End
'DESBUF'
 Queue 'YES'
 Queue 'TEMP01'
'FORMAT 100 T'
'SET CMSTYPE RT'
 Exit
Check:
    Arg Test1
    Select
       When Check1 <> Test1 Then Return
       When Check2 <> 'R/W' Then Return
       When Check3 <  Size  Then Return
       Otherwise
           'SET CMSTYPE HT'
           'ACCESS 100 T (ERASE'
           'SET CMSTYPE RT'
            Exit
       End


LISTCALL AMSERV

       LISTCAT ALL


LISTCSPA AMSERV

       LISTCAT SPACE ALL


VCAT EXEC

/**                                                                  **/
 Trace Off
 Arg Selected File
'SET CMSTYPE HT'
'GETFMADR'
 Pull . Fm Addr Check .
 If Check <> ' ' Then Do
   'SET CMSTYPE RT'
    Say 'No free disk modes.'
    Exit
    End
 Parse Value Diagrc(8,'LINK LISTCAT 300' Addr 'RR') With Rc .
 If Rc <> 0 Then Exit Rc
'ACCESS' Addr Fm'/'Fm
'SET CMSTYPE RT'
 Parse Value Diag(8,'QUERY SET') With 'EMSG' Emsg ','
'CP SET EMSG OFF'
 Queue 'MACRO VCATPROF' Fm Selected File
'XEDIT VCAT' Userid() Fm '(NOPROF'
 Rx = Rc
'CP SET EMSG' Emsg
'RELEASE' Addr
 Parse Value Diag(8,'DETACH' Addr) With .
 Exit Rx


VCATPROF XEDIT

/* VCATPROF - Profile for VCAT.                                       */
          Arg Fm Selected Input .
         'EXTRACT /LSCREEN/'
         'SET TOFEOF  OFF'
         'SET CMDLINE OFF'
         'SET PREFIX  OFF'
         'SET SCALE   OFF'
         'SET LINEND  OFF'
         'SET ENTER   AFTER'
         'SET REMOTE  ON'
         'SET MSGLINE ON -3 OVERLAY'
         'SET MSGMODE ON'
         'SET CTLCHAR -   ESCAPE'
         'SET CTLCHAR #   PROTECT BLU NON NOHIGH'
         'SET CTLCHAR %   PROTECT   HIGH'
         'SET CTLCHAR ¬ NOPROTECT RED NON   HIGH'
         'SET CTLCHAR ` NOPROTECT BLU NON NOHIGH'
         'SET CTLCHAR ( NOPROTECT WHI NON   HIGH'
         'SET CTLCHAR )   PROTECT BLU NON NOHIGH'
         'SET CTLCHAR \   PROTECT GRE NON NOHIGH'
         'SET CTLCHAR /   PROTECT YEL NON   HIGH'
         'SET CTLCHAR +   PROTECT WHI REV   HIGH'
         'SET CTLCHAR -   PROTECT WHI NON   HIGH'
          Do A=1 To 24 By 1
            'SET PF'A 'BEFORE QUIT'
             End
          Month.1  = 'Jan'
          Month.2  = 'Feb'
          Month.3  = 'Mar'
          Month.4  = 'Apr'
          Month.5  = 'May'
          Month.6  = 'Jun'
          Month.7  = 'Jul'
          Month.8  = 'Aug'
          Month.9  = 'Sep'
          Month.10 = 'Oct'
          Month.11 = 'Nov'
          Month.12 = 'Dec'
          Catname. =
          Line.    =
          Line.5   = '   -+Catalog -# -+Entries-#  -+*RED-#  ',
                            '-+*YEL-#  -+*GRE-# -+    Last update    -#'
          Getnum   = 0
          Curpos1 = '3 12'
         'LISTFILE * VSAM' Fm '(NOHEADER STACK DATE'
          If Rc <> 0 Then Do
             Say 'No VCAT informations found.'
             Call Exit Rc
             End
          Do X=1 To Queued() By 1
             Pull Catname.X . . . . Size . MM '/' DD '/' YY Up_Time .
             Catname.X = Left(Catname.X,8)
             Lcount = X + 5
             MM = Strip(MM)
             Up_date = Right(DD,2) Month.MM YY
             Up_Time = Right(Up_Time,8)
             Updated.X = Up_date Right(Up_Time,8)
            'EXECIO 1 DISKR' Catname.X 'VSAM' Fm '1 (FINIS VAR STATUS'
             Size = Size - 1
             Parse Value Status With Red_num Yel_num Gre_Num
             Line.Lcount = '-(_-)' Catname.X'   'Right(Size,7)'-;',
                             Right(Red_Num,7)'-,'Right(Yel_Num,7)'-.',
                             Right(Gre_Num,7)'-)  'Up_Date'  'Up_time
             If Catname.X = Selected Then Do
                Getnum  = X
                Curpos1 = X+5 '2'
                End
             End
          Call Check_Input
          If Getnum <> 0 Then Queue 'CMD'
/** Display available catalogs                                       **/
Menu_Start:
         'SET CTLCHAR .   PROTECT GRE NON NOHIGH'
         'SET CTLCHAR ,   PROTECT YEL NON NOHIGH'
         'SET CTLCHAR ;   PROTECT RED NON   HIGH'
          Pfkeys = '3=Exit'
Menu:     Call Header
         'SET RESERVED 3 BLU NON NOHIGH' Search_Line
          Do X=4 To Lscreen.1-2 By 1
            'SET RESERVED' X 'BLU NON N' LINE.X
             End
         'CURSOR SCREEN' Curpos1
         'READ NO TAG'
          Cursor.1 = 0
          SELECTED =
          Do Queued()
             Pull Key Num Pos Input
             Select
                When Key = 'PFK' Then Do
                    'DROPBUF'
                     If Num = 3 | Num = 15 Then Call Exit 0
                     End
                When Key = 'RES' & Num = 3 Then Call Check_Input
                When Key = 'RES' Then Do
                     Cursor.1 = Num
                     Cursor.2 = Pos
                     End
                When Key = 'CMD' Then Do
                     If Cursor.1 = 0 Then 'EXTRACT /CURSOR/'
                     Curpos1 = Cursor.1 Cursor.2
                     Getnum = Cursor.1 - 5
                     SELECTED = CATNAME.GETNUM
                     If Cursor.1 = All Then Selected = 'ALL'
                     End
                Otherwise Nop
                End
             End
          If Selected = ' ' Then Signal Menu
/** Specific catalog display                                         **/
Catalog_Ok:
         'DESBUF'
          If Search_Error = 'YES' Then Do
            "EMSG Error in search field."
             Curpos1 = '3 12'
             Signal Menu_Start
             End
          CATLINES. =
          Selected   = Strip(Selected)
          Prefix = '*'
          If Color = '*RED' Then Prefix = '-;'
          If Color = '*YEL' Then Prefix = '-,'
          If Color = '*GRE' Then Prefix = '-.'
         'EXECIO * DISKR' Selected 'VSAM' FM '2 (FINIS STEM CATLINES.'
          If Color <> ' ' | File <> ' ' | AskVol <> ' ' Then Do
             Loops = Catlines.0
             Match = 0
             Do Y=1 To Loops
        Parse Value Catlines.Y With Chk_Name . '+++' . '+++' . Chk_Vol .
           If Prefix = '*' | Substr(Chk_Name,1,2) = Prefix Then Do
              If file = ' ' | Pos(File,Substr(Chk_Name,3)) <> 0 Then Do
                      If Askvol = ' ' | AskVol = Chk_Vol Then Do
                         Match = Match + 1
                         MatchLine.Match = Catlines.Y
                         End
                      End
                   End
                End
             If Match = 0 Then Do
       "EMSG No files in" Selected "catalog match the requested search."
                Signal Menu_Start
                End
             Catlines. =
             Catlines.0 = Match
             Do Y=1 To Match
                Catlines.Y = Matchline.Y
                End
             End
          CLine   = 0
          Curpos2 = '3 12'
          If Catlines.0 = 1 Then Do
             Curpos2 = '4 2'
             Queue 'CMD'
             End
XtraHead =
Scroll:  'SET CTLCHAR . NOPROTECT GRE NON NOHIGH'
         'SET CTLCHAR , NOPROTECT YEL NON NOHIGH'
         'SET CTLCHAR ; NOPROTECT RED NON   HIGH'
          Pre_Cline = Cline
          Do X=4 To Lscreen.1-2 By 1
             Cline = Cline + 1
            'SET RESERVED' X 'N' Word(CatLines.Cline,1)
             End
          If Pre_Cline = 0       Then Pf7 = '     '
                                 Else Pf7 = '7=Bwd'
          If Cline >= Catlines.0 Then Pf8 = '     '
                                 Else Pf8 = '8=Fwd'
          Pfkeys = Left('3=Return  4=Exit  'Pf7'  'Pf8,47),
                                            '-\Updated:' UpDated.Getnum
          Call Header Selected XtraHead
         'SET RESERVED 3 BLU NON NOHIGH' Search_Line
         'CURSOR SCREEN' Curpos2
CatRead: 'READ NO TAG'
          Do Queued()
             Pull Key Num Pos Input
             Select
                When Key = 'PFK' Then Do
                    'DROPBUF'
                     Curpos2 = '3 12'
                     If Num > 12 Then Num = Num - 12
                     If Num = 3 Then Signal Menu_Start
                     If Num = 4 Then Call Exit 0
                     If Num = 7 & Pf7 <> ' ' Then Do
                        Cline = Pre_Cline - (Lscreen.1-5)
                        If Cline < 1 Then Cline = 0
                        Signal Scroll
                        End
                     If Num = 8 & Pf8 <> ' ' Then Do
                        If Cline > Catlines.0 Then Cline = Pre_Cline
                        Signal Scroll
                        End
                     End
                When Key = 'RES' & Num = 3 Then Do
                     Call Check_Input
                    'DROPBUF'
                     Queue 'CMD'
                     Signal Menu_Start
                     End
                When Key = 'CMD' Then Do
                    'EXTRACT /CURSOR/'
                     If Cursor.1 > 3 & Cursor.1 < Lscreen.1-1 Then Do
                        SelLine = Pre_Cline + (Cursor.1-3)
                        Curpos2 = Cursor.1 Cursor.2
                        If Catlines.Selline <> ' ' Then Call Specific
                        End
                     Cline = Pre_Cline
                     Signal Scroll
                     End
                Otherwise Nop
                End
             End
          Signal CatRead
/** Detailed display                                                 **/
Specific:
         'SET CTLCHAR .   PROTECT BLU NON NOHIGH'
         'SET CTLCHAR ,   PROTECT YEL NON NOHIGH'
         'SET CTLCHAR ;   PROTECT RED NON   HIGH'
Specific_Scroll:
          X = Selline - 1
          If X > 0 Then Pf7 = '7=File-1'
                   Else Pf7 = '        '
          X = Selline + 1
          If Catlines.X <> ' ' Then Pf8 = '8=File+1'
                               Else Pf8 = '        '
          Today  = Insert('.',Date('J'),2)
          Parse Value Catlines.Selline With,
                Vsamname,
                DataName,
                Ext,
                Ttrk,
                Ftrk,
                Records,
                CiSp,
                CaSp,
                CIfree,
                CAfree,
                Keylen,
                Rkp,
                Avglrecl,
                Maxlrecl,
                Clust_Ci_Pr_Ca,
                Clust_CiSize,
                Spctype,
                Spcpri,
                Spcsec,
                Bufsp,
                '+++' Clust_Attri '+++',
                Create,
                Volume,
                IndexName,
                Levels,
                I_Ext,
                I_Ttrk,
                I_Ftrk,
                I_Recs,
                I_Ci_Pr_Ca,
                I_Cisize,
                I_Spctype,
                I_Spcpri,
                I_Spcsec,
                I_BUFSP,
                I_VOLUME,
                '+++' Index_Attri '+++'
          If Substr(DataName,1,2)  = '-.' ,
                              Then DataName  = '-\'Substr(DataName,3)
          If Substr(IndexName,1,2) = '-.' ,
                              Then IndexName = '-\'Substr(IndexName,3)
          Name_Prefix = Substr(Vsamname,1,2)
          If Name_Prefix = '-.' Then Name_Prefix = '-\'
          Vsamname = Left(Substr(Vsamname,3),47)
          Xtra5. =
          If Keylen <> 0 Then Do
             Xtra5.1 = 'Key-length/Offset'
             Xtra5.2 = Keylen' / 'Rkp
             End
          Display = 'DATA'
Data_Index:
          If Display = 'DATA' Then Do
             Call Reserve  7 'Record-length Avg/Max' ,
                       Avglrecl' / 'Maxlrecl , 'CI-Size' , Clust_Cisize
             Call Reserve  8 Xtra5.1 , Xtra5.2 , 'CI per CA' ,
                                                         Clust_Ci_Pr_Ca
             Call Reserve  9 'Records' , Records , 'CI Splits' , CiSp
             Call Reserve 10 'Extents' , Ext     , 'CA Splits' , CaSp
             Call Reserve 11 'Tracks'  , Ttrk    , 'CI Free space' ,
                                                                 CiFree
             Call Reserve 12 'Free Tracks' , Ftrk , 'CA Free space' ,
                                                                 CaFree
             Call Reserve 13 'Allocation Pri/Sec' , SpcPri' / 'Spcsec ,
                                           'Bufferspace' , Strip(Bufsp)
             Call Reserve 14 'Allocation Type' , SpcType , 'Volser' ,
                                                                 Volume
             Call Reserve 15
             Call Split_Attri Clust_Attri
             If Levels <> ' ' Then Pf12 = '12=Index'
                              Else Pf12 = ' '
             Point4 = 'WHI NON H'
             Point5 = 'BLU NON N'
             End
          If Display = 'INDEX' Then Do
             Call Reserve 7  'Levels' , Levels , 'CI-Size' , I_Cisize
             Call Reserve 8  ' '       ,            , 'CI per CA' ,
                                                             I_Ci_pr_Ca
             Call Reserve 9  'Records' , I_Recs , ' ' , ' '
             Call Reserve 10 'Extents' , I_Ext     , ' ' , ' '
             Call Reserve 11 'Tracks'  , I_Ttrk    , ' ' , ' '
             Call Reserve 12 'Free Tracks' , I_Ftrk , ' ' , ' '
             Call Reserve 13 'Allocation Pri/Sec' ,
                                      I_Spcpri' / 'I_Spcsec , ' ' , ' '
             Call Reserve 14 'Allocation Type' , I_Spctype , 'Volser' ,
                                                               I_Volume
             Call Reserve 15
             Call Split_Attri Index_Attri
             Pf12   = '12=Data'
             Point4 = 'BLU NON N'
             Point5 = 'WHI NON H'
             End
         'SET RESERVED 3 BLU NON N Cluster....'Name_Prefix'',
                                        VsamName '-#Create date='Create
         'SET RESERVED 4' Point4 'Data.......'Left(Dataname,49),
                                                  '-#Todays date='Today
          If Levels <> ' ' Then  'SET RESERVED 5' Point5,
                                                 'Index......'Indexname
                           Else  'SET RESERVED 5 N'
         'SET RESERVED  6 GRE NON N' Copies('=',80)
         'SET RESERVED 16 BLU NON N'
         'SET RESERVED 17 BLU NON N' Attri1
         'SET RESERVED 18 BLU NON N' Attri2
          Do X=19 To (Lscreen.1-2)
            'SET RESERVED' X 'N'
             End
          Pfkeys = Left('3=Return  4=Exit  'Pf7'  'Pf8,
                                '  'Pf12,47)'-\Updated:' Updated.Getnum
          Call Header Selected
         'CURSOR SCREEN 1 1'
          Do Forever
            'READ ALL TAG'
             Pull Key Lin .
             If Key = 'PFK' Then Do
                If Lin > 12 Then Lin = Lin - 12
                If Lin = 3  Then Return
                If Lin = 4  Then Call Exit 0
                If Lin = 7  & Pf7 <> ' ' Then Do
                   Selline = Selline - 1
                   Signal Specific_Scroll
                   End
                If Lin = 8  & Pf8 <> ' ' Then Do
                   Selline = Selline + 1
                   Signal Specific_Scroll
                   End
                If Lin = 12 & Levels <> ' ' Then Do
                   Select
                      When Display = 'DATA'  Then Display = 'INDEX'
                      When Display = 'INDEX' Then Display = 'DATA'
                      Otherwise Nop
                      End
                   Signal Data_Index
                   End
                End
             End
/**                   E n d   o f   p r o g r a m                    **/
Exit:     Arg Rx
         'DROPBUF'
         'COMMAND QUIT' Rx
          Exit Rx
/**                      S u b r o u t i n e s                       **/
/** Check input in search field.                                     **/
Check_Input:
          SaveInput = Strip(Input)
          File   =
          AskVol =
          Color  =
          Search_Error = 'NO'
          If SaveInput <> ' ' Then Do
             InputFile = SaveInput','
             Xpos = Pos(',',Inputfile)
             Do Until Xpos = 0
                Parse Value Inputfile With Check ',' Inputfile
                Xpos = Pos(',',Inputfile)
                Select
                   When Color  = ' ' & Check              = '*RED' ,
                                                   Then Color  = '*RED'
                   When Color  = ' ' & Check              = '*YEL' ,
                                                   Then Color  = '*YEL'
                   When Color  = ' ' & Check              = '*GRE' ,
                                                   Then Color  = '*GRE'
                   When AskVol = ' ' & Substr(Check,1,4)  = 'VOL=' ,
                                          Then AskVol = Substr(Check,5)
                   When File   = ' ' Then Do
                        If Check             = '*RED' ,
                                              Then Search_Error = 'YES'
                        If Check             = '*YEL' ,
                                              Then Search_Error = 'YES'
                        If Check             = '*GRE' ,
                                              Then Search_Error = 'YES'
                        If Substr(Check,1,4) = 'VOL=' ,
                                              Then Search_Error = 'YES'
                        If Search_Error      = 'NO'   ,
                                                      Then File = Check
                        End
                   Otherwise Search_Error = 'YES'
                   End
                End
             End
          Search_Line = 'Search -->-('Left(SaveInput,50)'-)'
          Return
/** Create top and bottom lines for all pictures.                    **/
Header:   Parse Arg Text1 , Text2
          Text1 = Strip(Text1)
          Text2 = Strip(Text2)
          If Text1 <> ' ' Then Text1 = ' - 'Text1
         'SET RESERVED 1 YEL NON N' Left(Date(),11) ,
                Center('Vsam catalog display'Text1,53) Right(Time(),11)
         'SET RESERVED 2 GRE NON N' Copies('=',80)
         'SET RESERVED -2 GRE NON N' Copies('=',80)
         'SET RESERVED -1 YEL NON H Pf:' Pfkeys
          Return
/** Justify the lines for the detailed display.                      **/
Reserve:  Parse Arg Lnum T1 , D1 , T2 , D2
          If T1 = ' ' Then F1 = ' '
                      Else F1 = '.'
          If T2 = ' ' Then F2 = ' '
                      Else F2 = '.'
          If Substr(D1,1,1) <> '-' Then D1 = '-.'D1
          If Substr(D2,1,1) <> '-' Then D2 = '-.'D2
         'SET RESERVED' Lnum 'BLU NON N',
                      Left(Left(T1,28,F1)''D1,44)'-#'Left(T2,28,F2)''D2
          Return
/** Split attribute lines - Put as many on first line as possible.   **/
Split_Attri:
          Parse Arg Attributes
          Temp =
          Do While Attributes <> ' '
             Temp = Temp || Word(Attributes,1)' '
             If Length(Temp) > 79 Then Leave
             Attri1 = Temp
             Attributes = Delword(Attributes,1,1)
             End
          Attri2 = Strip(Attributes,L)
          Return

Michael Plannthin (Denmark)

