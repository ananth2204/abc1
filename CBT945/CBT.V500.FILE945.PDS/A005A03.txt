KSDS data component information

This is an Assembler program that will process the data
component of a KSDS either physically or logically. Among
other information, the average length of all records processed
will be reported, as well as showing the fragmentation of
spanned records (if any).

VSAMDST  TITLE 'PROGRAM FOR PRINTING CONTROL INTERVAL AND OTHER STATS'
         PRINT NOGEN
         SPACE 1
*        THIS PROGRAM WILL PRINT FOR EVERY CI, THE FOLLOWING DATA:
*              FREE SPACE IN THE CI
*              NUMBER OF LOGICAL RECORDS IN THE CI
*              THE AVERAGE RECORD LENGTH OF THE RECORDS IN THE CI
*              THE LONGEST RECORD LENGTH IN THE CI
*              THE SHORTEST RECORD LENGTH IN THE CI
         SPACE 1
*        THIS PROGRAM WILL, ON REACHING THE END OF THE VSAM USAGE,
*        PRINT THE FOLLOWING DATA:
*              TOTAL FREE SPACE BYTES IN THE VSAM USAGE (THIS WILL
*                  INCLUDE THE UNUSED BYTES IN CIS AS WELL AS THE
*                  UNUSED CIS IN CAS)
*              TOTAL NUMBER OF LOGICAL DATA RECORDS IN THE OBJECT
*              AVERAGE RECORD LENGTH OF ALL LOGICAL DATA RECORDS IN
*                  THE OBJECT
*              THE LONGEST RECORD LENGTH IN THE OBJECT
*              THE SHORTEST RECORD LENGTH IN THE OBJECT
         SPACE 1
*        SUGGESTED JCL - TO PROCESS THE DATA COMPONENT
         SPACE 1
*        //       EXEC PGM=VSAMDST
*        //SYSUDUMP DD SYSOUT=*
*        //SYSPRINT DD SYSOUT=*
*        //VSAM     DD DSN=CLUSTER.NAME,DISP=SHR
         SPACE 2
*        THE PROGRAM MAY PROCESS THE CIS WITHIN A CA EITHER
*        LOGICALLY OR PHYSICALLY.  THE SPECIFIC PROCESS IS
*        CONTROLLED BY JOB STEP PARAMETER.  IF NO PARAMETER
*        IS SPECIFIED, THE DEFAULT IS A LOGICAL PROCESS.
*        SIMILARLY, IF THE INPUT OBJECT PERMITS SPANNED
*        RECORDS, THE PROCESS IS FORCED TO LOGICAL AS THERE
*        MAY BE LOGIC PROBLEMS WHEN SPANNED CIS ARE PROCESSED
*        PHYSICALLY.
*        FOR EXAMPLE:
         SPACE 1
*        //       EXEC PGM=VSAMDST,PARM=P    PHYSICAL
         SPACE 1
*        //       EXEC PGM=VSAMDST,PARM=L    LOGICAL
         TITLE 'MACROS, DSECTS AND CONTROL BLOCKS USED'
*        ABEND                          TO ABEND THE PROGRAM
*        ACB                            ACCESS METHOD CONTROL BLOCK
*        CLOSE                          CLOSE FILE(S)
*        DCB                            DATA CONTROL BLOCK
*        DCBD (IHADCB)                  DCB DSECT FOR MAPPING DCB
*        EXLST                          VSAM EXIT LIST
*        FREEMAIN                       RELEASE STORAGE
*        FREEPOOL                       RELEASE BUFFER POOL
*        GET - VSAM                     ACCESS A RECORD
*        GETMAIN                        ACQUIRE STORAGE
*        IDAAMB                         DSECT MAPPING THE AMB
*        IDAAMBL                        DSECT MAPPING THE AMBL
*        IDAAMDSB                       DSECT MAPPING THE AMDSB
*        IEFJFCBN                       DSECT MAPPING THE JFCB
*        IFGACB                         DSECT MAPPING THE ACB
*        OPEN                           PREPARE FILE(S) FOR PROCESSING
*        PUT - QSAM                     WRITE A RECORD
*        RDJFCB                         READ SPECIFIC JFCB
*        RPL                            VSAM REQUEST PARAMETER LIST
*        SHOWCB                         OBTAIN DATA FROM A VSAM CB
*        TESTCB                         TEST DATA WITHIN A VSAM CB
*        WTO                            WRITE TO OPERATOR
         SPACE 2
*        REGISTER EQUATES
         SPACE 1
Editor's note: register equates go here.
         TITLE 'PROGRAM CONTROL CODE'
*        1.    SAVE CALLER'S REGISTERS
*        2.    ESTABLISH CSECT ADDRESSABILITY
*        3.    OBTAIN SAVE AREA
*        4.    ESTABLISH HSA AND LSA CHAINS
*        5.    PERFORM PROGRAM INITIALIZATION
*        6.    PERFORM BULK OF PROGRAM PROCESSING
*        7.    PERFORM PROGRAM TERMINATION
*        8.    RESTORE CALLER'S SAVE AREA
*        9.    FREE ACQUIRED SAVE AREA
*        10.   RESTORE REGISTERS
*        11.   EXIT PROGRAM
*
*        REGISTER USAGE
*        0     MACROS
*        1     MACROS - ADDRESS OF ACQUIRED SAVE AREA
*        2     WORK - ADDRESS OF ACQUIRED SAVE AREA
*        10    BRANCH AND SAVE RETURN ADDRESS
*        11    PROGRAM CSECT BASE REGISTER - 1
*        12    PROGRAM CSECT BASE REGISTER - 2
*        13    SAVE AREA ADDRESS
*        14    RETURN ADDRESS
*        15    ENTRY POINT ADDRESS / CONDITION CODE
VSAMDST  CSECT
         STM   R14,R12,12(R13)          . SAVE CALLER'S REGISTERS
         LR    R11,R15                  . LOAD 11 AS PROGRAM BASE
         USING VSAMDST,R11,R12          . ESTABLISH ADDRESSABILITY
         LA    R12,4095(,R11)           . FOR SECOND BASE AS WELL
         LA    R12,1(,R12)
         GETMAIN R,                     . GETMAIN FOR SAVE AREA        C
               LV=72
         ST    R13,4(,R1)               . BACKWARD SAVE AREA ->
         ST    R1,8(,R13)               . FORWARD SAVE AREA ->
         LR    R13,R1                   . 13 -> PROGRAM'S SAVE AREA
         BAS   R10,INITIAL              . PERFORM INITIALIZATION
         BAS   R10,PROCESS              . PERFORM MAIN PROCESSING
         BAS   R10,TERMIN               . PERFORM PROGRAM TERMINATION
         LR    R2,R13                   . 2 -> SAVE AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN R,                    . RELEASE ACQUIRED SAVE AREA   C
               A=(R2),                                                 C
               LV=72
         L     R14,12(,R13)             . RESTORE 14
         SLR   R15,R15                  . 15 - ZERO (CONDITION CODE)
         LM    R0,R12,20(R13)           . RESTORE 0 THROUGH 12
         BR    R14                      . EXIT PROGRAM
         TITLE 'PROGRAM INITIALIZATION'
INITIAL  EQU   *
*        1.    PROCESS JOB STEP PARAMETER
*        2.    ISSUE READ JFCB
*        3.    OPEN FILES AND CHECK OPEN
*        4.    PERFORM VSAM INITIALIZATION
*        5.    INITIALIZE DATA AREAS
*
*        REGISTER USAGE
*        1     MACROS AND WORK
*        2     ADDRESS OF DCB
*        10    BRANCH AND SAVE RETURN ADDRESS
*        15    RETURN CODE
*
B0001    EQU   *
         ST    R10,BSAVE                . SAVE REGISTER 10
*                                       . PROCESS JOB STEP PARAMETER
         MVI   LOGICAL,ON               . DEFAULT TO LOGICAL PROCESS
         L     R1,4(,R13)               . 1 -> CALLER'S SAVE AREA
         L     R1,24(,R1)               . 1 -> PARAMETER LIST
         L     R1,0(,R1)                . 1 -> PARAMETER
         OC    0(2,R1),0(R1)            . Q. JOB STEP PARAMETER?
         BZ    B0002                    . A. NO
         CLI   2(R1),C'L'               . Q. "L" SPECIFIED?
         BE    B0002                    . A. YES
         MVI   LOGICAL,OFF              . INDICATE PHYSICAL PROCESS
B0002    EQU   *
*                                       . ISSUE READ JFCB FOR DSN
         RDJFCB DUMMY                   . GO GET JFCB
         LTR   R15,R15                  . Q. RDJFCB WORK?
         BNZ   B0003                    . A. NO
         MVC   TDSN,JFCBDSNM            . MOVE OUT DSN
B0003    EQU   *
*                                       . OPEN FILES
         OPEN  (VSAM,,SYSPRINT,OUTPUT)
         LTR   R15,R15                  . Q. OPENS OKAY
         BZ    B0004                    . A. YES
         LA    R2,SYSPRINT              . 2 -> SYSPRINT DCB
         USING IHADCB,R2                . USE DSECT TO MAP DCB
         TM    DCBOFLGS,DCBOFOPN        . Q. OPEN OF SYSPRINT OK?
         BNO   B0005                    . A. NO - OPEN FAILED
         DROP  R2                       . DCB DSECT NOT REQUIRED
         LA    R2,VSAM                  . 2 -> VSAM ACB
         USING IFGACB,R2                . USE DSECT TO MAP ACB
         TM    ACBOFLGS,ACBOPEN         . Q. OPEN OF VSAM OK?
         BNO   B0006                    . A. NO - OPEN FAILED
         DROP  R2                       . ACB DSECT NOT REQUIRED
B0004    EQU   *
         BAS   R10,CHKVSAM              . PERFORM VSAM INITIALIZATION
*                                       . INITIALIZE DATA AREAS
         XC    TOTREC,TOTREC
         XC    TOTBYTES,TOTBYTES
         XC    SPANL,SPANL
         MVC   SHORTREC,=H'-1'
         XC    LONGREC,LONGREC
         ZAP   TOTFSPC,=P'+0'
         ZAP   #CIREAD,=P'+0'
         ZAP   #LINE,=P'+60'
         ZAP   #PAGE,=P'+1'
         MVI   LEFT,OFF
         MVI   SPAN,OFF
         L     R10,BSAVE                . RESTORE 10
         BR    R10                      . RETURN FROM WHENCE
         TITLE 'PROGRAM INITIALIZATION FAILURES'
B0005    EQU   *
*                                       . OPEN FAILURE SYSPRINT
         WTO   'OPEN FAILURE FOR FILE SYSPRINT',                       C
               ROUTCDE=11
         LR    R2,R13                   . 2 -> SAVE AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN R,                    . FREEMAIN OF SAVE AREA        C
               A=(R2),                                                 C
               LV=72
         L     R14,12(,R13)             . 14 -> RETURN ADDRESS
         LA    R15,10                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 - 12
         BR    R14                      . RETURN
         SPACE 2
B0006    EQU   *
*                                       . OPEN FAILURE VSAM
         ST    R15,REG15                . SAVE 15
         WTO   'OPEN FAILURE FOR FILE VSAM',                           C
               ROUTCDE=11
*                                       . GET ACB ERROR CODE
         SHOWCB ACB=VSAM,                                              C
               AREA=OPENERR,                                           C
               FIELDS=ERROR,                                           C
               LENGTH=4
         LM    R2,R3,VSAMERR            . LOAD REGISTERS
         ABEND 100,                                                    C
               DUMP
         TITLE 'MAIN PROCESSING LOOP'
PROCESS  EQU   *
*        1.    IF LOGICAL PROCESS
*              A.    DIRECT READ OF SEQUENCE SET RECORD
*              B.    EXTRACT INDEX HEADER
*              C.    ESTABLISH ADDRESSES WITHIN RECORD
*              D.    DETERMINE CI ADDRESS OF DATA COMPONENT
*                    CI
*        2.    READ DATA COMPONENT CI
*        3.    PERFORM DATA CI PROCESSING
*        4.    IF LOGICAL PROCESS
*              A.    ACCESS NEXT INDEX ENTRY
*              B.    IF NO MORE INDEX ENTRIES IN CURRENT
*                    INDEX RECORD
*                    CHECK HORIZONTAL POINTER
*                    IF BINARY ZEROS - END OF TASK
*                    IF NOT BINARY ZEROS - READ NEXT LOGICAL
*                    INDEX RECORD
*        5.    IF NOT LOGICAL PROCESS, READ NEXT DATA CI
*
*        REGISTER USAGE
*        1     MACROS AND WORK
*        2     WORK
*        3     WORK
*        4     WORK
*        7     CURRENT POSITION WITHIN INDEX RECORD
*        8     ADDRESS OF HIGH-KEY IN CURRENT SECTION
*        9     ADDRESS OF HIGH-KEY IN HIGHEST KEYED SECTION
*        10    BRANCH AND SAVE RETURN ADDRESS
*        14    MACROS - RETURN ADDRESS
*        15    MACROS - ENTRY POINT ADDRESS, RETURN CODE
C0001    EQU   *
         ST    R10,CSAVE                . SAVE 10
         CLI   LOGICAL,ON               . Q. LOGICAL PROCESS?
         BNE   C0004                    . A. NO
C0002    EQU   *
         MVC   IXRBA,SSRBA              . POINT GETIX RBA TO SEQ. SET
         GETIX RPL=IXRPL                . GET THE INDEX CI
         LTR   R15,R15                  . Q. GET OKAY?
         BNZ   C0007                    . A. NO
         L     R7,@IXCI                 . 7 -> INDEX CI
         MVC   IXHFORM,0(R7)            . PULL OUT INDEX HEADER
         MVC   SSRBA,IXHHP              . SAVE HORIZONTAL POINTER
         TR    IXHPTLS,PLTBL            . DETERMINE VERTICAL POINTER
*                                       .   LENGTH
         SLR   R2,R2                    . 2 - ZERO
         IC    R2,IXHPTLS               . 2 - LENGTH OF VERTICAL PTR
         ST    R2,PTLS                  . SAVE POINTER LENGTH
         MVC   CARBA,IXHBRBA            . SAVE DATA COMPONENT CA RBA
         LH    R8,IXHSEO                . 8 - DISP HIGH-KEY FIRST
*                                       .   SECTION
         AR    R8,R7                    . 8 -> HIGH-KEY FIRST SECTION
         LH    R9,IXHLEO                . 9 - DISPLACEMENT HIGH-KEY
         AR    R9,R7                    . 9 -> HIGHEST KEY IN INDEX CI
         LH    R4,IXRDFDSP              . 4 - INDEX RDF DISPLACEMENT
         AR    R7,R4                    . 7 -> INDEX RDF
C0003    EQU   *
         S     R7,PTLS                  . 7 -> VERTICAL POINTER
         L     R4,PTLS                  . 4 - VERTICAL POINTER LENGTH
         SLR   R2,R2                    . 2 - ZERO
         EX    R4,ICM                   . LOAD POINTER INTO REGISTER
         B     *+8                      . BRANCH ROUND EXECUTE
ICM      ICM   R2,1,0(R7)               . 2 - CI RELATIVE NUMBER
         SRDA  R2,32(R0)                . 3 - CI RELATIVE NUMBER
         M     R2,CISZ                  . 3 - CI DISPLACEMENT IN CA
         A     R3,CARBA                 . 3 - CI'S RBA
         ST    R3,PTRBA                 . SAVE CI'S RBA
*                                       . COMMON CODE TO BOTH LOGICAL
*                                       .   AND PHYSICAL PROCESSING
C0004    EQU   *
         GET   RPL=GETRPL               . GET THE NEXT CI
         LTR   R15,R15                  . Q. GET ON VSAM OK?
         BNZ   C0008                    . A. NO - GET FAILED
         BAS   R10,DATAPROC             . PROCESS THE DATA COMPONENT
*                                       .   CONTROL INTERVAL
         CLI   LOGICAL,ON               . Q. LOGICAL PROCESS?
         BNE   C0004                    . A. NO
         BCTR  R7,R0                    . 7 -> LENGTH OF KEY
         SLR   R2,R2                    . 2 - ZERO
         IC    R2,0(,R7)                . 2 - LENGTH OF KEY
         BCTR  R7,R0                    . 7 -> FRONT KEY COMP. COUNT
         SLR   R7,R2                    . 7 -> START OF KEY
         CR    R7,R8                    . Q. END OF SECTION?
         BH    C0003                    . A. NO - PROCESS NEXT INDEX
*                                       .   ENTRY
         CR    R7,R9                    . Q. END OF KEYS?
         BNH   C0005                    . A. YES - GET NEXT INDEX CI
         SH    R7,=H'+2'                . 7 -> SECTION POINTER
         ICM   R2,3,0(R7)               . 2 - OFFSET TO NEXT HIGH-KEY
         SLR   R8,R2                    . 8 -> HIGH-KEY NEXT SECTION
         B     C0003                    . PROCESS NEXT SECTION
C0005    EQU   *
*                                       . END OF INDEX CI PROCESS
         OC    SSRBA,SSRBA              . Q. END OF SEQUENCE SET?
         BNZ   C0002                    . A. NO - GET NEXT INDEX CI
C0006    EQU   *
         L     R10,CSAVE                . RESTORE 10
         BR    R10                      . RETURN
         TITLE 'MAIN PROGRAM PROCESSING FAILURES'
C0007    EQU   *
*                                       . GET FAILURE VSAM - INDEX
         ST    R15,REG15                . SAVE 15
         LA    R3,VSAM                  . 3 -> ACB
         ST    R3,OPENERR               . SAVE
         WTO   'GET FAILURE FOR FILE VSAM',                            C
               ROUTCDE=11
*                                       . GET RPL FEED BACK CODE
         SHOWCB RPL=IXRPL,                                             C
               AREA=RPLFDBK,                                           C
               FIELDS=FDBK,                                            C
               LENGTH=4
         LM    R2,R4,VSAMERR            . 2 - 4 VSAM ERROR CODES
         ABEND 101,                                                    C
               DUMP
C0008    EQU   *
*                                       . GET FAILURE VSAM
         ST    R15,REG15                . SAVE 15
         LA    R3,VSAM                  . 3 -> ACB
         ST    R3,OPENERR               . SAVE
         WTO   'GET FAILURE FOR FILE VSAM',                            C
               ROUTCDE=11
*                                       . GET RPL FEED BACK CODE
         SHOWCB RPL=GETRPL,                                            C
               AREA=RPLFDBK,                                           C
               FIELDS=FDBK,                                            C
               LENGTH=4
         LM    R2,R4,VSAMERR            . 2 - 4 VSAM ERROR CODES
         ABEND 102,                                                    C
               DUMP
         TITLE 'PROGRAM TERMINATION PROCESSING'
TERMIN   EQU   *
*        1.    OUTPUT ANY PARTIALLY COMPLETED PRINT LINE
*        2.    FORMAT AND OUTPUT TOTAL LINE
*        3.    CLOSE FILES
*        4.    FREE BUFFERS
*        REGISTER USAGE
*        1     MACROS
*        2     WORK
*        3     WORK
*        10    BRANCH AND SAVE RETURN ADDRESS
*        14    MACROS - RETURN ADDRESS
*        15    MACROS - ENTRY POINT
D0001    EQU   *
*                                       . CHECK FOR ANY LAST CI DATA
         CLI   LEFT,ON                  . Q. LAST CI'S DATA TO BE
*                                       .   OUTPUT?
         BNE   D0002                    . A. NO
         PUT   SYSPRINT,                                               C
               LINEA
D0002    EQU   *
         MVC   CINUM2,MASK9             . EDIT AND OUTPUT TOTALS
         ED    CINUM2,#CIREAD           . CIS READ
         MVC   CIFSPC2,MASK9            . TOTAL FREE SPACE
         ED    CIFSPC2,TOTFSPC+4
         L     R2,TOTREC                . TOTAL NUMBER OF RECORDS
         CVD   R2,WORKD
         MVC   CIRECS2,MASK9
         ED    CIRECS2,WORKD+3
         LTR   R2,R2                    . Q. ANY RECORDS?
         BZ    D0003                    . A. NO - NO AVERAGE
         LH    R2,LONGREC               . LONGEST RECORD LENGTH
         CVD   R2,WORKD
         MVC   MAXREC2,MASK5
         ED    MAXREC2,WORKD+5
         LH    R2,SHORTREC              . SHORTEST RECORD LENGTH
         CVD   R2,WORKD
         MVC   MINREC2,MASK5
         ED    MINREC2,WORKD+5
         SLR   R2,R2                    . 2 - ZERO
         L     R3,TOTBYTES              . 3 - TOTAL BYTES IN RECORDS
         D     R2,TOTREC                . AVERAGE RECORD LENGTH
         CVD   R3,WORKD
         MVC   AVGREC2,MASK5
         ED    AVGREC2,WORKD+5
D0003    EQU   *
         MVC   LINEBD,LINE2             . OUTPUT OBJECT TOTALS
         PUT   SYSPRINT,                                               C
               LINEB
         CLOSE (VSAM,,SYSPRINT)         . CLOSE FILES
         FREEPOOL SYSPRINT              . FREE BUFFER POOL
         BR    R10                      . RETURN
         TITLE 'VSAM INITIALIZATION PROCESSING'
CHKVSAM  EQU   *
*        1.    CHECK VSAM ORGANIZATION FOR KSDS - ONLY KSDS PROCESSED
*        2.    DETERMINE IF SPANNED RECORDS PERMITTED - ONLY LOGICAL
*              PROCESSING OF SPANNED OBJECTS
*        3.    IF LOGICAL PROCESSING
*              A.    DETERMINE INDEX COMPONENT CI SIZE
*              B.    DETERMINE END OF INDEX RECORD
*        4.    DETERMINE DATA COMPONENT CI SIZE
*        5.    ACCESS ACB AND AMBL
*        6.    IF LOGICAL PROCESSING
*              A.    ACCESS INDEX AMB AND AMDSB
*              B.    STORE SEQUENCE SET RBA
*        7.    ACCESS DATA AMB AND AMDSB
*        8.    DETERMINE VARIOUS DATA ELEMENTS
*        9.    COMPUTE CA SIZE IN BYTES
*        10.   IF NOT LOGICAL PROCESSING
*              A.    MODIFY RPL TO SEQUENTIAL
*
*        REGISTER USAGE
*        1     MACROS
*        2     WORK
*        3     WORK
*        4     WORK
*        5     WORK
*        10    BRANCH AND SAVE RETURN ADDRESS
E0001    EQU   *
         TESTCB ACB=VSAM,               . Q. KSDS INPUT                C
               ATRB=KSDS
         BNE   E0005                    . A. NO
         TESTCB ACB=VSAM,               . Q. SPANNED RECORDS PERMITTED?C
               ATRB=SPAN
         BNE   E0002                    . A. NO - CONTINUE
         MVI   LOGICAL,ON               . A. YES - FORCE LOGICAL
E0002    EQU   *
         CLI   LOGICAL,ON               . Q. LOGICAL PROCESS?
         BNE   E0003                    . A. NO
         SHOWCB ACB=VSAM,               . DETERMINE CI SIZE FOR INDEX  C
               AREA=CISZ,                                              C
               FIELDS=CINV,                                            C
               LENGTH=4,                                               C
               OBJECT=INDEX
         L     R2,CISZ                  . 2 - INDEX CI SIZE
         SH    R2,=H'+7'                . SUBTRACT SEVEN (CIDF + RDF)
         STH   R2,IXRDFDSP              . SAVE INDEX RDF DISPLACEMENT
E0003    EQU   *
         SHOWCB ACB=VSAM,                                              C
               AREA=CISZ,                                              C
               FIELDS=CINV,                                            C
               LENGTH=4
         L     R2,CISZ                  . 2 - CONTROL INTERVAL SIZE
         CVD   R2,WORKD                 . CONVERT TO DECIMAL
         MVC   TCISZ,MASK5              . OUTPUT CI SIZE
         ED    TCISZ,WORKD+5
*                                       . DETERMINE CIDF OFFSET
         SH    R2,=H'4'                 . SUBTRACT FOUR FROM CI SIZE
         ST    R2,CIDFDISP              . SAVE CIDF DISPLACEMENT
*                                       . GET THE OTHER CATALOG MAIN-
*                                       . TAINED DATA FROM THE ACCESS
*                                       . METHOD DATA SET STATISTICS
*                                       . BLOCK.
         LA    R2,VSAM                  . 2 -> ACB
         USING IFGACB,R2                . ADDRESSABILITY TO ACB DSECT
         L     R3,ACBAMBL               . 2 -> AMBL
         DROP  R2
         USING IDAAMBL,R3               . ADDRESSABILITY TO AMBL DSECT
         CLI   LOGICAL,ON               . Q. LOGICAL PROCESS?
         BNE   E0004                    . A. NO
         L     R2,AMBLIX                . 2 -> AMB FOR INDEX COMPONENT
         USING IDAAMB,R2                . ADDRESSABILITY TO AMB DSECT
         L     R2,AMBDSB                . 2 -> AMDSB FOR INDEX
         DROP  R2
         USING IDAAMDSB,R2              . ADDRESSABILITY TO AMDSB
         MVC   SSRBA,AMDSSRBA           . SAVE SEQUENCE SET RBA
         DROP  R2
E0004    EQU   *
         L     R3,AMBLDTA               . 3 -> AMB FOR DATA COMPONENT
         DROP  R3
         USING IDAAMB,R3                . ADDRESSABILITY TO AMB DSECT
         L     R3,AMBDSB                . 3 -> AMDSB
         DROP  R3
         USING IDAAMDSB,R3              . ADDRESSABILITY TO AMDSB
         LH    R2,AMDCIPCA              . CIS PER CA
         CVD   R2,WORKD                 . OUTPUT TO PRINT LINE
         MVC   TCICA,MASK3
         ED    TCICA,WORKD+6
         LH    R2,AMDFSCA               . FREE CIS PER CA
         CVD   R2,WORKD                 . OUTPUT TO PRINT LINE
         MVC   TCAFSPC,MASK3
         ED    TCAFSPC,WORKD+6
         L     R2,AMDFSCI               . FREE BYTES PER CI
         CVD   R2,WORKD                 . OUTPUT TO PRINT LINE
         MVC   TCIFSPC,MASK5
         ED    TCIFSPC,WORKD+5
         SLR   R2,R2                    . 2 - ZERO
         LA    R4,127                   . 4 - ONE HUNDRED TWENTY SEVEN
         IC    R2,AMDPCTCA              . FREE SPACE % - CA
         NR    R2,R4                    . MAKE POSITIVE
         CVD   R2,WORKD                 . OUTPUT TO PRINT LINE
         MVC   TCAPERC,MASK3
         ED    TCAPERC,WORKD+6
         IC    R2,AMDPCTCI              . FREE SPACE % - CI
         NR    R2,R4                    . MAKE POSITIVE
         CVD   R2,WORKD                 . OUTPUT TO PRINT LINE
         MVC   TCIPERC,MASK3
         ED    TCIPERC,WORKD+6
         LH    R5,AMDCIPCA              . COMPUTE CA SIZE IN BYTES
         DROP  R3
         M     R4,CISZ                  . 5 - CA SIZE
         ST    R5,CASZ                  . SAVE CA SIZE IN BYTES
         CLI   LOGICAL,ON               . Q. LOGICAL PROCESS?
         BER   R10                      . A. YES - RETURN
         MODCB RPL=GETRPL,              . MODIFY RPL FOR SEQUENTIAL    C
               OPTCD=SEQ
         BR    R10                      . RETURN
         TITLE 'VSAM INITAILIZATION PROCESSING FAILURES'
E0005    EQU   *                        . NON KSDS INPUT
         WTO   'ONLY KSDS PROCESSED BY THIS PROGRAM',                  C
               ROUTCDE=11
         LR    R2,R13                   . 2 -> CURRENT SAVE AREA
         L     R13,4(,R13)              . 13 -> PREVIOUS SAVE AREA
         FREEMAIN R,                    . FREE SAVE AREA STORAGE       C
               A=(R2),                                                 C
               LV=72
         L     R14,12(,R13)             . 14 -> RETURN ADDRESS
         LA    R15,20                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 THROUGH 12
         BR    R14
         TITLE 'DATA COMPONENT CI PROCESSING'
DATAPROC EQU   *
*        1.    DETERMINE THE RBA OF THE DATA COMPONENT CI
*        2.    COMPUTE THE CA AND CI NUMBER OF THE CI
*        3.    ACCESS THE CIDF
*        4.    DETERMINE THE FREE SPACE VALUE
*        5.    PROCESS RDFS IF ANY RECORDS IN CI
*              A.    CHECK FOR AND PROCESS SPANNED RECORD
*              B.    CHECK FOR AND PROCESS EQUI-LENGTH RECORDS
*              C.    CHECK FOR AND PROCESS NON-EQUI-LENGTH RECORD(S)
*        6.    FORMAT CI DATA
*        7.    INCREMENT OBJECT TOTALS
*        8.    CHECK FOR FULL PRINT LINE
*              IF FULL, CHECK IF PAGE HEADINGS REQUIRED
*        REGISTER USAGE
*        1     MACROS
*        2     WORK
*        3     WORK
*        4     CURRENT POSITION WITHIN DATA COMPONENT CI
*        5     ADDRESS OF DATA COMPONENT CI
*        6     ADDRESS OF BEGINNING OF FREE SPACE IN CI
*        10    BRANCH AND SAVE RETURN ADDRESS
*        14    MACROS - RETURN ADDRESS
*        15    MACROS - ENTRY POINT ADDRESS
F0001    EQU   *
         ST    R10,FSAVE                . SAVE 10
         SHOWCB RPL=GETRPL,             . DETERMINE RBA OF CI          C
               AREA=CIRBA,                                             C
               FIELDS=RBA,                                             C
               LENGTH=4
         SLR   R2,R2                    . 2 - ZERO
         L     R3,CIRBA                 . 3 - RBA OF CI
         D     R2,CASZ                  . DETERMINE CA NUMBER
         LA    R3,1(,R3)                . INCREMENT CA NUMBER BY ONE
         CVD   R3,WORKD                 . OUTPUT TO PRINT LINE
         MVC   CANUM,MASK5
         ED    CANUM,WORKD+5
         SRDA  R2,32(R0)                . 3 - CI DISPLACEMENT IN CA
         D     R2,CISZ                  . DETERMINE CI NUMBER
         LA    R3,1(,R3)                . INCREMENT CI NUMBER BY ONE
         CVD   R3,WORKD                 . OUTPUT TO PRINT LINE
         MVC   CINUM,MASK5
         ED    CINUM,WORKD+5
         AP    #CIREAD,=P'+1'           . INCREMENT CIS READ
         L     R5,@CI                   . 5 -> CI
         L     R2,CIDFDISP              . 2 - CIDF DISPLACEMENT
         LA    R4,0(R2,R5)              . 4 -> CIDF
         USING CIDF,R4                  . DSECT ADDRESSABILITY
         LH    R2,CIDFLL                . 2 - CI FREE SPACE
         CVD   R2,WORKD                 . OUTPUT TO PRINT LINE
         MVC   CIFSPC,MASK5
         ED    CIFSPC,WORKD+5
         AP    TOTFSPC,WORKD+5(3)       . INCREMENT TOTAL FREE SPACE
         XC    #CIREC,#CIREC            . ZEROIZE CI ACCUMULATORS
         XC    CIRECL,CIRECL
         XC    CILREC,CILREC
         MVC   CISREC,=H'-1'
         LH    R2,CIDFOSET              . 2 - CI FREE SPACE OFFSET
         DROP  R4
         LTR   R2,R2                    . Q. CI FREE SPACE OFFSET ZERO?
         BZ    F0007                    . A. YES - NO RECORDS OR RDFS
         LA    R6,0(R2,R5)              . 6 -> LAST DATA BYTE IN CI
         USING RDF,R4
F0002    EQU   *
         SH    R4,=H'+3'                . 4 -> RDF
         CR    R4,R6                    . Q. LAST RDF PROCESSED?
         BL    F0007                    . A. YES - EXIT RDF PROCESS
         OC    RDFFLD,RDFFLD            . Q. RDF NULL?
         BZ    F0007                    . A. YES - EXIT RDF PROCESS
         MVC   RDFLEN,RDFBIN#           . MAKE SURE BINARY HALF-WORD
*                                        .   IS ALIGNED
         LH    R3,RDFLEN                . 3 - RECORD LENGTH
         TM    RDFCF,RDFISPN            . Q. RDF FOR SPANNED RECORD?
         BNZ   F0004                    . A. YES
         CLC   RDFLEN,CILREC            . Q. LONGEST RECORD IN CI?
         BNH   *+10                     . A. NO
         MVC   CILREC,RDFLEN            . SAVE LONGEST RECORD LENGTH
         CLC   RDFLEN,CISREC            . Q. SHORTEST RECORD IN CI?
         BNL   *+10                     . A. NO
         MVC   CISREC,RDFLEN            . SAVE SHORTEST RECORD LENGTH
         TM    RDFCF,RDFPAIR            . Q. RIGHTMOST RDF OF A PAIR?
         BZ    F0003                    . A. NO - ONE RECORD FOR RDF
*                                       . PROCESS NON-SPANNED PAIRED
*                                       .   RDFS
         SH    R4,=H'+3'                . 4 -> LEFT RDF OF PAIR
         MVC   H#REC,RDFBIN#            . NUMBER OF EQUI-LENGTH RECORDS
         L     R2,#CIREC                . INCREMENT NUMBER OF RECORDS
         AH    R2,H#REC                 .   IN CI
         ST    R2,#CIREC
         MH    R3,H#REC                 . TOTAL LENGTH OF RECORDS
         A     R3,CIRECL                . INCREMENT NUMBER OF BYTES IN
         ST    R3,CIRECL                .   RECORDS WITHIN CI
         B     F0002                    . GO LOOK FOR MORE RDFS
F0003    EQU   *                        . PROCESS NON-SPANNED, NON-
*                                       .   PAIRED RDF
         A     R3,CIRECL                . INCREMENT NUMBER OF BYTES IN
         ST    R3,CIRECL                .   RECORDS WITHIN CI
         L     R2,#CIREC                . INCREMENT NUMBER OF RECORDS
         LA    R2,1(,R2)                .   IN CI BY ONE
         ST    R2,#CIREC
         B     F0002                    . GO LOOK FOR MORE RDFS
F0004    EQU   *                        . PROCESS SPANNED RECORDS
         TM    RDFCF,RDFLSPN            . Q. FIRST SEGMENT?
         BO    F0005                    . A. NO - INTERMEDIATE OR LAST
         MVI   SPAN,NOTLAST             . SET SPAN INDICATOR ON
         XC    SPANL,SPANL              . ZEROIZE RECORD LENGTH
         B     F0006                    . ACCUMULATE RECORD LENGTH
F0005    EQU   *
         TM    RDFCF,RDFISPN            . Q. INTERMEDIATE SEGMENT?
         BO    F0006                    . A. YES - JUST ACCUMULATE
         MVI   SPAN,LAST                . LAST SEGMENT INDICATOR
         LA    R2,1                     . 2 - ONE
         ST    R2,#CIREC                . ONE RECORD IN THIS CI
F0006    EQU   *                        . ALL SPANNED SEGMENTS ARE
*                                       .   ACCUMULATED HERE
         L     R2,CIRECL
         MVC   RDFLEN,RDFBIN#
         AH    R2,RDFLEN                . INCREMENT BY SEGMENT LENGTH
         ST    R2,CIRECL
         L     R2,SPANL                 . SUM ALL SEGMENTS
         AH    R2,RDFLEN
         ST    R2,SPANL
         MVC   CILREC,SPANL+2
         MVC   CISREC,SPANL+2
*                                       . IGNORE THE OTHER RDF FOR
*                                       .   SPANNED RECORDS
F0007    EQU   *                        . ALL RDFS PROCESSED
         DROP  R4
         L     R2,#CIREC                . OUTPUT RECORDS IN CI
         CVD   R2,WORKD
         MVC   CIRECS,MASK5
         ED    CIRECS,WORKD+5
         A     R2,TOTREC                . INCREMENT TOTAL RECORDS FOR
         ST    R2,TOTREC                .   OBJECT
         L     R2,CIRECL                . INCREMENT TOTAL BYTES USED
         A     R2,TOTBYTES              .   BY RECORDS IN OBJECT
         ST    R2,TOTBYTES
         CLC   CILREC,LONGREC           . Q. LONGEST RECORD SO FAR?
         BNH   *+10                     . A. NO
         MVC   LONGREC,CILREC
         CLI   SPAN,NOTLAST             . Q. FIRST OR INTERMEDIATE
*                                       .   SEGMENT?
         BE    F0008                    . A. YES
         CLC   CISREC,SHORTREC          . Q. SHORTEST RECORD SO FAR?
         BNL   *+10                     . A. NO
         MVC   SHORTREC,CISREC
*                                       . COMPUTE AVERAGE RECORD LENGTH
*                                       . WITHIN THIS CI
         CLI   SPAN,LAST                . Q. LAST SEGMENT OF SPANNED
*                                       .   RECORD?
         BE    F0009                    . A. YES
         MVC   AVGREC,=6C' '            . INITIALIZE OUTPUT AREA
         MVC   MAXREC,=6C' '
         MVC   MINREC,=6C' '
         L     R3,#CIREC                . 3 - NUMBER OF RECORDS
         LTR   R3,R3                    . Q. ZERO RECORDS IN CI?
         BZ    F0010                    . A. YES
         SLR   R2,R2                    . 2 - ZERO
         L     R3,CIRECL                . 3 - TOTAL BYTES USED
         D     R2,#CIREC                . GET AVERAGE
         CVD   R3,WORKD                 . CONVERT TO DECIMAL
         MVC   AVGREC,MASK5             . OUTPUT TO REPORT LINE
         ED    AVGREC,WORKD+5
         LH    R2,CILREC                . LONGEST RECORD IN CI
         CVD   R2,WORKD
         MVC   MAXREC,MASK5
         ED    MAXREC,WORKD+5
         LH    R2,CISREC                . SHORTEST RECORD IN CI
         CVD   R2,WORKD
         MVC   MINREC,MASK5
         ED    MINREC,WORKD+5
         B     F0010                    . CHECK FOR OUTPUT
F0008    EQU   *                        . NOT LAST SEGMENT OF SPANNED
         MVC   AVGREC,=C' SPANS'        . OUTPUT SPANNED LITERAL
         MVC   MAXREC,=6C' '
         MVC   MINREC,=6C' '
         B     F0010                    . CHECK FOR OUTPUT
F0009    EQU   *                        . LAST SEGMENT OF SPANNED
         L     R2,SPANL                 . OUTPUT LENGTH OF SPANNED
         CVD   R2,WORKD                 .   RECORD
         MVC   AVGREC,MASK5
         ED    AVGREC,WORKD+5
         MVC   MAXREC,AVGREC
         MVC   MINREC,AVGREC
         MVI   SPAN,OFF                 . RESET SPANNED INDICATOR
F0010    EQU   *
         CP    #LINE,=P'+57'            . Q. HEADINGS REQUIRED?
         BL    F0011                    . A. NO
         BAS   R10,HEADING
         MVI   LEFT,ON                  . SET LEFT HAND SIDE ON
F0011    EQU   *
         CLI   LEFT,ON                  . Q. LEFT HAND SIDE ON?
         BNE   F0012                    . A. NO - RIGHT
         MVC   LINEA(66),LINE1          . OUTPUT LEFT-HAND SIDE OF
         MVI   LEFT,C'0'                .   REPORT LINE AND SWITCH
         B     F0013                    . EXIT
F0012    EQU   *
         MVC   LINEA+66(66),LINE1       . OUTPUT RIGHT-HAND SIDE OF
         PUT   SYSPRINT,                .   REPORT AND PRINT IT        C
               LINEA
         AP    #LINE,=P'+1'             . INCREMENT LINES OUTPUT
         MVI   LINEA,C' '               . RE-INITIALIZE OUTPUT LINE
         MVC   LINEA+1(132),LINEA
         MVI   LEFT,ON                  . SET LEFT-HAND SIDE ON
F0013    EQU   *
         L     R10,FSAVE                . RESTORE 10
         BR    R10                      . RETURN
         TITLE 'REPORT PAGE HEADING ROUTINE'
HEADING  EQU   *
*        1.    OUTPUT REPORT HEADINGS
*        2.    INCREMENT PAGE NUMBER
*        3.    RESET LINE ACCUMULATOR
*        REGISTER USAGE
*        1     MACROS
*        10    BRANCH AND SAVE RETURN ADDRESS
*        14    MACROS - RETURN ADDRESS
*        15    MACROS - ENTRY POINT ADDRESS
G0001    EQU   *
         MVC   PAGEOUT,MASK5            . OUTPUT PAGE NUMBER
         ED    PAGEOUT,#PAGE
         PUT   SYSPRINT,                . OUTPUT HEADING LINE          C
               TITLE
         PUT   SYSPRINT,                . OUTPUT SUB-HEADING LINES     C
               STITLE1
         PUT   SYSPRINT,                                               C
               STITLE2
         PUT   SYSPRINT,                                               C
               STITLE3
         PUT   SYSPRINT,                                               C
               STITLE4
         AP    #PAGE,=P'+1'             . INCREMENT PAGE NUMBER
         ZAP   #LINE,=P'+7'             . RESET LINE COUNTER
         BR    R10                      . RETURN
         TITLE 'DATA AREAS'
WORKD    DS    D                        . DOUBLE WORD CVD WORK AREA
#CIREC   DS    F                        . NUMBER OF RECORDS IN CI
@CI      DS    F                        . ADDRESS OF DATA CI
@IXCI    DS    F                        . ADDRESS OF INDEX CI
BSAVE    DS    F                        . REGISTER SAVE AREA
CARBA    DS    F                        . RBA OF DATA CA
CASZ     DS    F                        . CA SIZE IN BYTES
CIDFDISP DS    F                        . DISPLACEMENT OF CIDF
CIRBA    DS    F                        . RBA OF DATA CI
CIRECL   DS    F                        . LENGTH OF CURRENT RECORD
CISZ     DS    F                        . DATA CI SIZE
CSAVE    DS    F                        . REGISTER SAVE AREA
FSAVE    DS    F                        . REGISTER SAVE AREA
IXRBA    DS    F                        . RBA OF INDEX RECORD
PTLS     DS    F                        . SEQ SET VERTICAL PTR LENGTH
PTRBA    DS    F                        . RBA OF DATA CI FOR DIRECT
SPANL    DS    F                        . LENGTH ACCUMULATOR FOR SPAN
SSRBA    DS    F                        . SEQUENCE SET RECORD RBA
TOTBYTES DS    F                        . TOTAL BYTES IN RECORDS
TOTREC   DS    F                        . TOTAL RECORDS IN OBJECT
VSAMERR  DS    0F                       . VSAM ERROR FIELDS
REG15    DS    F
OPENERR  DS    F
RPLFDBK  DS    F
CILREC   DS    H                        . LONGEST RECORD IN CI
CISREC   DS    H                        . SHORTEST RECORD IN CI
H#REC    DS    H                        . NUMBER OF EQUI-LENGTH RECORDS
IXRDFDSP DS    H                        . INDEX RECORD RDF DISPLACEMENT
LONGREC  DS    H                        . LONGEST RECORD LENGTH
RDFLEN   DS    H                        . RECORD LENGTH FROM RDF
SHORTREC DS    H                        . SHORTEST RECORD LENGTH
TOTFSPC  DS    PL9                      . TOTAL FREE SPACE
#CIREAD  DS    PL5                      . NUMBER OF CIS READ
#LINE    DS    PL2                      . NUMBER OF LINES ON PAGE
#PAGE    DS    PL3                      . NUMBER OF PAGE
LEFT     DS    CL1                      . LEFT / RIGHT SWITCH
ON       EQU   X'01'                    . LOGICAL ON
OFF      EQU   X'00'                    . LOGICAL OFF
LOGICAL  DS    CL1                      . EXECUTION TIME PARAMETER
SPAN     DS    CL1                      . SPANNED RECORD SWITCH
LAST     EQU   X'02'                    . LAST SEGMENT VALUE
NOTLAST  EQU   X'01'                    . FIRST OR INTERMEDIATE VALUE
*                                       . EDIT MASKS
MASK3    DC    X'40202120'
MASK5    DC    X'402020202120'
MASK9    DC    X'40202020202020202120'
*                                       . VERTICAL PTR TRANSLATE TABLE
PLTBL    DC    X'0001000200000003'
*                                       . PRINT LINES
TITLE    DC    CL15'1'
         DC    CL49'ANALYSIS OF DATA COMPONENT CONTROL INTERVALS FOR '
TDSN     DC    CL44' '
         DC    CL15' '
         DC    CL4'PAGE'
PAGEOUT  DS    CL6
STITLE1  DC    CL25'0 CONTROL INTERVAL SIZE: '
TCISZ    DS    CL6
         DC    CL31'  FREE BYTES REQUESTED PER CI: '
TCIFSPC  DS    CL6
         DC    CL1' '
         DC    CL24'  NUMBER OF CIS PER CA: '
TCICA    DS    CL4
         DC    CL29'  FREE CIS REQUESTED PER CA: '
         DC    CL3' '
TCAFSPC  DS    CL4
STITLE2  DC    CL31' '
         DC    CL33'  FREE SPACE PERCENTAGE PER CI:  '
TCIPERC  DS    CL4
         DC    CL29' '
         DC    CL32'  FREE SPACE PERCENTAGE PER CA: '
TCAPERC  DS    CL4
STITLE3  DC    CL66'0                                                REC
               CORD LENGTH    '
         DC    CL67'                                                 REC
               CORD LENGTH     '
STITLE4  DC    CL66'     CA #  CI #   FREE SPACE   # OF RECORDS    AVG C
                  MAX    MIN  '
         DC    CL67'     CA #  CI #   FREE SPACE   # OF RECORDS    AVG C
                  MAX    MIN   '
LINEA    DS    CL133
LINEB    DC    CL40'0'
         DC    CL26'TOTALS FOR OBJECT'
LINEBD   DC    CL67' '
LINE1    DC    CL3' '
CANUM    DS    CL6
CINUM    DS    CL6
         DC    CL7' '
CIFSPC   DS    CL6
         DC    CL9' '
CIRECS   DS    CL6
         DC    CL1' '
AVGREC   DS    CL6
         DC    CL1' '
MAXREC   DS    CL6
         DC    CL1' '
MINREC   DS    CL6
         DC    CL2' '
LINE2    DC    CL5' '
CINUM2   DS    CL10
         DC    CL3' '
CIFSPC2  DS    CL10
         DC    CL5' '
CIRECS2  DS    CL10
         DC    CL1' '
AVGREC2  DS    CL6
         DC    CL1' '
MAXREC2  DS    CL6
         DC    CL1' '
MINREC2  DS    CL6
         DC    CL3' '
         DS    0F                       . FULL WORD ALIGNMENT
IXHFORM  DS    0CL24                    . INDEX HEADER FORMAT
         DS    CL3
IXHPTLS  DS    CL1                      . VERTICAL PTR LENGTH
IXHBRBA  DS    F                        . RBA OF ASSOCIATED DATA CA
IXHHP    DS    F                        . HORIZONTAL POINTER
         DS    CL8
IXHLEO   DS    H                        . OFFSET OF LAST ENTRY
IXHSEO   DS    H                        . OFFSET HIGH KEY FIRST SECTION
         TITLE 'CONTROL BLOCKS'
VSAM     ACB   AM=VSAM,                                                C
               DDNAME=VSAM,                                            C
               EXLST=EXITLIST,                                         C
               MACRF=(ADR,CNV)
EXITLIST EXLST EODAD=C0006
GETRPL   RPL   ACB=VSAM,                                               C
               AM=VSAM,                                                C
               AREA=@CI,                                               C
               AREALEN=4,                                              C
               ARG=PTRBA,                                              C
               OPTCD=(CNV,LOC,DIR)
IXRPL    RPL   ACB=VSAM,                                               C
               AM=VSAM,                                                C
               AREA=@IXCI,                                             C
               AREALEN=4,                                              C
               ARG=IXRBA,                                              C
               OPTCD=(CNV,LOC,DIR)
SYSPRINT DCB   BLKSIZE=15428,                                          C
               DDNAME=SYSPRINT,                                        C
               DSORG=PS,                                               C
               LRECL=133,                                              C
               MACRF=PM,                                               C
               RECFM=ABFS
DUMMY    DCB   DDNAME=VSAM,                                            C
               DSORG=PS,                                               C
               EXLST=DCBEXIT,                                          C
               MACRF=GM
         DS    0F                       . FULL WORD ALIGN DCB EXIT
DCBEXIT  EQU   *                        . DCB EXIT FOR JFCB
         DC    X'87'
         DC    AL3(INFMJFCB)
         IEFJFCBN
         DCBD  DEVD=DA,                                                C
               DSORG=PS
         IFGACB
IDAAMBL  DSECT
         DS    XL52
AMBLDTA  DS    F
AMBLIX   DS    F
IDAAMB   DSECT
         DS    XL20
AMBDSB   DS    F
IDAAMDSB DSECT
         DS    XL10
AMDPCTCA DS    CL1
AMDPCTCI DS    CL1
AMDCIPCA DS    H
AMDFSCA  DS    H
AMDFSCI  DS    F
         DS    XL12
AMDSSRBA DS    F
CIDF     DSECT
CIDFOSET DS    H                        . FREE SPACE OFFSET
*                                       . OR LEFT-MOST RDF OFFSET
CIDFLL   DS    H                        . LENGTH OF FREE SPACE
RDF      DSECT
RDFFLD   DS    0CL3
RDFCF    DS    C
RDFPAIR  EQU   X'40'                    . RDF PART OF PAIR
RDFFSPN  EQU   X'10'                    . FIRST SEGMENT - SPANNED
RDFLSPN  EQU   X'20'                    . LAST SEGMENT - SPANNED
RDFISPN  EQU   X'30'                    . INTERMEDIATE SEGMENT
RDFNUMB  EQU   X'08'                    . BINARY NUMBER IS
*                                       .   NUMBER OF EQUI-LENGTH REC
*                                       .   OR UPDATE NO. OF SEGMENT
RDFNORC  EQU   X'04'                    . RRDS - EMPTY SLOT
RDFBIN#  DS    CL2                      . BINARY NUMBER
         TITLE 'LITERALS AND TERMINATION'
VSAMDST  CSECT                          . RE-ESTABLISH CSECT
         LTORG
         END


Dave Loveluck
Instructor/Consultant (USA)                              c Dave Loveluck 1992

