Writing to KSDS files from REXX


PURPOSE

The MVS (TSO/E) implementation of REXX lacks VSAM
support.  The RXVSWRIT program can be invoked directly
from a REXX EXEC to write records into a VSAM KSDS.
The records to be written may be either REXX (stem) variables
or stack entries.


PROGRAM DESCRIPTION

The VSAM file must have been allocated to the file name
(DDname) VSAM before RXVSWRIT is invoked.  The EXEC
parameter specifies the source of the records to be written.  The
EXEC parameter, if present, specifies the stem name,
otherwise the stack is used.  The write operation is terminated
by either the first uninitialized variable or the count in
<varname>0, <varname> being the name of the variable
specified in the EXEC parameter.  If named variables are used,
then the variables <varname>i (i = 1 to <varname>0) are
written to the VSAM file.

Note: REXX programs must be linked with addressing mode
(AMODE) 31, residency mode (RMODE) may be 24.

The REXX named variables used are:

o      <varname>0      number of records to be written

o      <varname>i      ith record to be written.

The return codes used are:

o      0      successful processing

o      4      no records written

o      8      VSAM write error

o      12      REXX environment error (error returned from IRXEXCOM).


SAMPLE PROCEDURES

Example 1 using named variables.

/* REXX - VSAM-KSDS Write Interface Example */
/* allocate VSAM file */
ADDRESS TSO "ALLOC F(VSAM) DA('VSAM.TEST.INFO') SHR REUS"
/* set stem variables */
RECORD.1 = "ssaassdddsdssdadasaddasdssddssddssdddddsdds";
RECORD.2 = "rttrtrttrtrreerwwewewrertrrttrtrtrtrrtr";
RECORD.3 = "zutrztutuztutuuuzuzutzjujtjtzjtttjtjzttttt";
/* set record count */
RECORD.0 = 3;
ADDRESS LINK "RXVSWRIT RECORD.";
SAY "rc" rc;

Example 2 using stack variables.

/* REXX - VSAM-KSDS Write Interface Example */
/* allocate VSAM file */
ADDRESS TSO "ALLOC F(VSAM) DA('VSAM.TEST.INFO') SHR REUS";
/* set entries into stack */
QUEUE = "ssaassdddsdssdadasaddasdssddssddssdsddssddsdds";
QUEUE = "rttrtrttrtrreerwwewewrertrrttrtrtrtrtrtrtrtr";
QUEUE = "zutrztutuztutuuuzuzutzjujtjtzjtttjtjzttttzztt";
ADDRESS LINK "RXVSWRIT";
SAY "rc" rc;


PROGRAM

         TITLE 'REXX-VSAM(KSDS) INTERFACE (WRITE OPERATIONS)'
         PRINT NOGEN
* REGISTER USAGE:
*  R2:   work-register
*  R3:   work-register
*  R4:   work-register
*  R5:   A(SHVBLOCK)
*  R6:   loop counter
*  R7:   L(varname)
*  R8:
*  R9:
*  R10:
*  R11:
*  R12:  base register
**
RXVSWRIT CSECT
* initialise addressing
         STM   R14,R12,12(R13)         save registers
         BALR  R12,0                   base register
         USING *,R12
         LA    R15,SA                  A(save-area)
         ST    R13,4(R15)              backward ptr
         ST    R15,8(R13)              forward ptr
         LR    R13,R15                 A(new save-area)
         B     SA_END                  jump over save-area
SA       DS    18A                     save-area
SA_END   DS    0H
         SPACE 1
         LM    R6,R7,0(R1)
* R6: A(A(varname))
* R7: A(L(varname))
         L     R6,0(R6)
         L     R7,0(R7)
* R6: A(varname)
* R7: L(varname)
         LA    R0,=CL8'IRXSTK'    IRX stack processing (default)
         LR    R1,R7              L(varname)
         SH    R1,=H'1'           LC(EXEC-Parameter)
         BM    A010               no EXEC-parameter
         LA    R0,=CL8'IRXEXCOM'  IRX variable module
         MVC   VARNAME(0),0(R6)
         EX    R1,*-6             move variable name
         SPACE 1
* load REXX access module (IRXSTK or IRXEXCOM, as appropriate)
A010     LOAD  EPLOC=(0)          load IRX module
         ST    R0,AIRXMOD         save EP-address
         SPACE 1
* suppress VSAM OPEN warning messages
         LA    R1,VSAM            A(ACB)
         USING IFGACB,R1
         OI    ACBINFL2,ACBSWARN  set 'suppress warning messages flag'
         SPACE 1
* open VSAM dataset
         OPEN  (VSAM)
* obtain VSAM dataset attributes
         SHOWCB ACB=VSAM,                                              X
               AREA=VSAM_ATTR,                                         X
               LENGTH=L'VSAM_ATTR,                                     X
               OBJECT=DATA,                                            X
               FIELDS=(KEYLEN,LRECL,RKP)
         SPACE 1
* allocate record buffer
         L     R2,LRECL
* R2: VSAM logical (maximum) record length
         GETMAIN EU,LV=(2),A=AREC
* pass parameters to VSAM
         L     R2,AREC            A(record)
         A     R2,RKP             +RKP
         ST    R2,AKEY            A(key)
         SPACE 1
         MODCB RPL=RPL,AREA=(*,AREC),AREALEN=(*,LRECL)
         MODCB RPL=RPL,ARG=(*,AKEY)
         SPACE 2
         ZAP   INDEX,=P'0'        initialize record number
         SPACE 1
         MVC   RC,=H'12'          preset ReturnCode (REXX error)
* test whether access via variables or stack
         LTR   R7,R7              L(varname)
         BZ    A100               0 = access via stack
* else variable access
         SPACE 1
* obtain <varname0> (no. of output records)
         MVC   VN,VARNAME         variable name
         LA    R1,VN(R7)
         MVC   0(2,R1),=C'0 '
         LA    R3,NREC
         LA    R4,L'NREC
         BAL   R14,GETVAR
* R4: actual parameter length
         L     R6,=F'99999999'    set default
         MVC   RC,=H'4'           preset RC: zero records
         SH    R4,=H'1'           LC(parameter)
         BM    A100               null variable, use default
         PACK  D,NREC(0)          pseudo-PACK
         EX    R4,*-6             PACK using correct length
         CVB   R6,D               no. of records
         LTR   R6,R6
         BZ    EOJ
* write record
A100     LTR   R7,R7              L(varname)
         BZ    A200               0 = access via stack
A110     AP    INDEX,=P'1'        increment record count
* convert INDEX to character format (.n)
         MVC   VNINDEX,=X'4020202020202120'
         LA    R1,VNINDEX+7
         EDMK  VNINDEX,INDEX
         MVC   VNINDEX,0(R1)      set into <VNINDEX>
         SPACE 1
* get record content
         MVC   VN,VARNAME         variable name
         LA    R1,VN(R7)
         MVC   0(8,R1),VNINDEX
         L     R3,AREC
         L     R4,LRECL
         BAL   R14,GETVAR
* R4: actual record length
A130     LTR   R4,R4
         BZ    EOJ                null variable (=job end)
         ST    R4,RECRECL
         MVC   RC,=H'0'           reset RC: records processed
         SPACE 1
         MODCB RPL=RPL,OPTCD=(NUP)
         POINT RPL=RPL
         LTR   R15,R15
         BNZ   A120               ok, new record
         SPACE 1
         MODCB RPL=RPL,OPTCD=(UPD,LOC),AREA=AINREC
         GET   RPL=RPL
         SPACE 1
A120     MODCB RPL=RPL,RECLEN=(4),OPTCD=(MVE),AREA=(*,AREC)
         PUT   RPL=RPL
         LTR   R15,R15
         BNZ   VSAMERR            read error
         SPACE 1
         BCT   R6,A100            return to write-loop
* end of processing
         LA    R15,0              set RC value
EXIT     STH   R15,RC             reset RC
         SPACE 2
EOJ      DS    0H                 End of job
         CLOSE (VSAM)
         SPACE 1
         L     R13,4(R13)         restore A(old save-area)
         LH    R15,RC
         RETURN (14,12),RC=(15)
         SPACE 1
* symbolic register equates
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
RC       DS    H                  return code
         SPACE 3
A200     DS    0H                 get next stack element
         L     R15,AIRXMOD        A(IRXSTK)
         CALL  (15),(PULL,AELEM,LELEM,FRC),VL
         CH    R15,=H'4'          service return code
         BH    EXIT
         LA    R15,0
         BE    EXIT               end of stack
* else stack element retrieved, move to buffer
         LM    R0,R1,AELEM
         LR    R15,R1             length
         LR    R4,R1              length
         L     R14,AREC           address
         MVCL  R14,R0             move record
         B     A130
         SPACE 1
AELEM    DS    2A
LELEM    EQU   AELEM+4
         TITLE 'SUBROUTINES'
VSAMERR  DS    0H
* retrieve VSAM error code, and display
         SHOWCB RPL=RPL,                                               X
               AREA=VSAM_FDBK,                                         X
               LENGTH=L'VSAM_FDBK,                                     X
               OBJECT=DATA,                                            X
               FIELDS=(FDBK)
* display message
         L     R0,VSAM_FDBK
         CVD   R0,D
         MVC   M0FDBK,=X'40202120'
         ED    M0FDBK,D+6
         TPUT  M0,M0L
         SPACE 1
         MVC   RC,=H'8'           set return code
         B     EOJ
         SPACE 2
M0       DC    C'VSAM error - feedback code:'
M0FDBK   DS    CL4
M0L      EQU   *-M0
         SPACE 3
GETVNL   DS    0H
* determine actual length of name
* input: <VN> - name
* output: R0 - L(name)
*         R15 - A(FIRST BLANK)
         LA    R1,L'VN
         SR    R0,R0              counter
         LA    R15,VN
GETVNL1  CLI   0(R15),C' '
         BER   R14                end found
         AH    R0,=H'1'
         LA    R15,1(R15)
         BCT   R1,GETVNL1
* R0: L(name), without trailing blanks
         BR    R14
         SPACE 3
         DS    A
GETVAR   ST    R14,GETVAR-4
* get REXX variable
*  <VN>: variable name
*  R4: L(variable buffer/data)
*  R3: A(variable buffer/data)
         BAL   R14,GETVNL        get L(VN)
* R0: L(VN), R15: A(first blank in <VN>)
         LA    R5,IRX_SHVBLOCK
         USING SHVBLOCK,R5
         ST    R0,SHVNAML         L(name), normalized
         MVC   SHVNAMA,=A(VN)     A(name)
         MVI   SHVCODE,SHVFETCH   set fetch-flag
         ST    R3,SHVVALA         A(buffer)
         ST    R4,SHVBUFL         L(buffer)
         L     R15,AIRXMOD        A(IRXEXCOM)
         CALL  (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL
         L     R4,SHVVALL         L(data)
         L     R14,GETVAR-4
         TM    SHVRET,SHVNEWV     new variable
         BZR   R14                :no (=ok), return
         SR    R4,R4              else zero length
         BR    R14                return
         TITLE 'DATA AREAS'
VARNAMEL DS    H                  L(VARNAME)
VARNAME  DC    CL100' '
VN       DS    2CL16              variable-name
         SPACE 1
INDEX    DS    PL4
VNINDEX  DC    CL8' ',C' '
         SPACE 1
D        DS    0D,PL8             double-word work-area
WK       DS    CL6
         SPACE 3
NREC     DS    PL8                no. of records to be output
         SPACE 1
AINREC   DS    A
         SPACE 1
         DS    0A                 alignment
AREC     DS    A                  .)
RECLEN   DS    A                  .)
         SPACE 1
AKEY     DS    A
         SPACE 2
VSAM_ATTR DS   0XL12
KEYLEN   DS    F                  VSAM key length
LRECL    DS    F                  VSAM logical (maximum) record length
RKP      DS    F                  relative key position
         SPACE 1
VSAM_FDBK DS   F
         SPACE 1
RECRECL  DS    F
         SPACE 3
         LTORG
         SPACE 1
PULL     DC    CL8'PULL'
FRC      DS    F                  function return code
AIRXMOD  DS    A
         SPACE 1
IRX_IRXEXCOM DC CL8'IRXEXCOM'
         DS    0A                 align
IRX_SHVBLOCK DC (SHVBLEN)X'0'
         TITLE 'VSAM control blocks'
VSAM     ACB   DDNAME=VSAM,MACRF=(KEY,DIR,DSN,OUT)
         SPACE 2
RPL      RPL   ACB=VSAM,OPTCD=(KEY,DIR,NUP,KEQ,FKS,MVE)
         TITLE 'DSECTS'
* REXX Shared Variable request Block
         IRXSHVB
         SPACE 1
* VSAM ACB
         IFGACB
* VSAM RPL
         IFGRPL
         END


A S Rudd
Systems Programmer (Germany)                              c A S Rudd 1992

