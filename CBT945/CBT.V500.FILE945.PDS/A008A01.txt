The right time to reorganize a VSAM KSDS


THE PROBLEM.

At our company we have a lot of VSAM KSDS files (about
100), which need to be reorganized at different times. We
spent a lot of time deciding on which day to reorganize the
different files. Unfortunately, the batch run, which caused the
CI and CA splits to the KSDS file, sometimes ran on a
different day in the week from the day we ran the REORG, or
the CICS use of a KSDS file was moved to another day. The
result was that we did not reorganize the KSDS files at the
right time, and wasted a lot of runtime and manpower. We
were also spending a lot of time reading output from
LISTCAT, because we needed to know if a KSDS had more
than three data extents or more than two index levels. Finally
we had problems with files with no records. After we had
reorganized a file with no records, we would try to open it for
update in the next CICS run, and we would get an open error.
We could not open the file until we had done an init on the file.
You may ask why reorganize a file with no records. It is
because we never knew when a file was empty.


THE SOLUTION.

We wrote a program which would check the following things:

1      Is it a KSDS file?
2      Are there more than 10 CI splits?
3      Are there more than 5 CA splits?

If the answer to 1 is no, don't try to reorganize, RC = 03.

If the answer to 2 or 3 is yes, then reorganize the file, RC = 00.

If the answer to 2 or 3 is yes and there are no records in the
file, then delete/define and init the file, RC = 02.

If the answer to 2 or 3 is no, then EOJ, RC = 01.

After reloading the data, check the following things:

1      Are there more than 3 data extents.
2      Are there more than 2 index levels.

If the answer to 1 and 2 is yes, then display information on the console.

We use the return code to check whether we have to build an
AIX for the file.

It is possible to use a PARM parameter on the EXEC card. For
example:

o      PARM='O'      - don't reload data
o      PARM='F'      - force REORG
o      PARM='E'      - force only unload of data.

Finally, we made it possible to remove the console messages
by the UPSI-card (see program comments).


THE RESULT

We have one reorganize job that runs every day. It checks 100
KSDS files, and if needed reorganizes them. The last jobstep in
the job is listlog. The only thing we have to look at to check
our KSDS files is the output from listlog.

We saved a lot of runtime and man-hours. The best result is
that we now reorganize ours KSDS files at the right time.
Savings are shown in Figure 1. The runtime for all the
LISTCAT runs that get information about the KSDS files is not
included in these figures. An example of the console output is
shown in Figure 2.


HINT AND TIPS

Have only one copy of your VSAM definitions. Ours are kept
in SLI-books.

The reason for the large BUFSP in the program is that, for read
only, we are able to read an entire CA with a single I/O so long
as there is enough room in the VSAM buffer for the number of
CIs per CA plus one CI. (You can use this information to
optimize some of your other programs.)

Remember the SPEED parameter in your VSAM definitions.


SAMPLE JCL

* $$ JOB JNM=ITTREOR,CLASS=0,DISP=H
// JOB ITTREOR
// PAUSE   * * *  MOUNT SCRATCH-TAPE ON X'390'  * * *
// ON $RC > 3 GOTO ERRINFO
// ASSGN SYS002,390
* JOBSTEP ITTREOR  ITTEST.TEST
// DLBL DSKIO,'ITTEST1.TEST',,VSAM,CAT=ITTEST
// EXEC ITTREOR,SIZE=AUTO
 DELETE      (ITTEST1.TEST) PURGE              -
             CATALOG(ITTEST.USER.CATALOG)
 DEFINE      CLUSTER                           -
              (NAME(ITTEST1.TEST)              -
              VOLUMES(TEST01)                  -
              SPEED                            -
              RECSZ(190 190)                   -
              KEYS(9 0)                        -
              SHR(2)                           -
              IXD)                             -
             DATA                              -
              (NAME(ITTEST1.TEST.DATA)         -
              TRK (15  15)                     -
              CISZ (4096))                     -
             INDEX                             -
              (NAME(ITTEST1.TEST.INDEX))       -
             CATALOG(ITTEST.USER.CATALOG)
/*
*
* JOBSTEP ITTREOR  ITTEST2.TEST
// DLBL DSKIO,'ITTEST2.TEST',,VSAM,CAT=ITTEST
// EXEC ITTREOR,SIZE=AUTO
* $$ SLI MEM=ITTEST2.V
/*
// IF $RC > 0 THEN
// GOTO NITTEST2
* $$ SLI MEM=ITTEST2A.V         Build alternate index for ITTEST2
/. NITTEST2
*
* JOBSTEP ITTREOR  ITTEST3.TEST
// DLBL DSKIO,'ITTEST3.TEST',,VSAM,CAT=ITTEST
// EXEC ITTREOR,SIZE=AUTO
* $$ SLI MEM=ITTEST3.V
/*
*
// GOTO NORMEOJ
*
/. ERRINFO
* E R R O R     E R R O R     E R R O R     E R R O R
* CHECK OUTPUT,CORRECT AND RERUN THE JOB
// PAUSE
/. NORMEOJ
// MTC RUN,SYS002
*
* JOBSTEP LISTLOG
// EXEC LISTLOG
/&
* $$ EOJ


PROGRAM

         PRINT NOGEN
*
R0       EQU   0
R1       EQU   1
R2       EQU   2                        BASE.
R3       EQU   3                        BASE.
R4       EQU   4                        COMREG.
R5       EQU   5                        BASE FOR RPL DSECT.
R6       EQU   6                        WORK.
R7       EQU   7                        BAL.
R8       EQU   8                        WORK AREA FOR TAPE OUTPUT.
R9       EQU   9                        REC LENGTH (CONSOLE)
R10      EQU   10                       1. I/O AREA FOR TAPE.
R11      EQU   11                       2. I/O AREA FOR TAPE.
R12      EQU   12                       BASE FOR ACB DSECT.
R13      EQU   13                       VSAM.
R14      EQU   14                       VSAM/EXIT.
R15      EQU   15
ITTREOR  CSECT
         USING *,R2,R3                  USE R2,R3 AS BASE REG'S.
         LR    R2,R15                   SET BASE REG FROM ENTRY ADDRESS
         L     R3,BASER                 LOAD BASE R3
         B     BEGIN                    SKIP CONSTANT
BASER    DC    A(ITTREOR+4096)
BEGIN    EQU   *
         CR    R1,R15                   WAS A PARM PASSED ?
         BE    NOPARM
         L     R6,0(R1)                 LOAD ADDR OF POINTER
         MVC   PARMTST,2(R6)            MOVE PARM TO PARMTST
NOPARM   EQU   *
         COMRG REG=R4                   POINT TO COMREG.
         LA    R13,R13VSAM0             PUT SAVE AREA ADDR IN R13
         USING IKQRPL,R5                SET UP BASE FOR VSAM RPL DSECT
         LA    R5,SRPL10
         USING IKQACB,R12               SET UP BASE FOR VSAM ACB DSECT
         LA    R12,SACB1
         OPEN  SACB1                    OPEN VSAM FILE.
         LTR   R15,R15                  TEST FOR OPEN ERRORS
         BNZ   ERRFINO
OKOPEACB EQU   *
         TESTCB AM=VSAM,ERET=ERRCLDO,ACB=(12),                         C
               ATRB=KSDS                IS IT A KSDS FILE ?
         BNE   NOTKSDS                  NO, GO AND TELL OPERATOR.
         CLI   PARMTST,C'F'             DO WE WANT TO FORCE A REORG ?
         BE    OKREOR                   YES, DROP CI/CA TEST.
         CLI   PARMTST,C'E'             DO WE WANT TO FORCE EMPTY
*                                       THE FILE ONLY ?
         BE    OKREOR                   YES, DROP CI/CA TEST.
         TESTCB AM=VSAM,ERET=ERRCLDO,ACB=(12),                         C
               NCIS=10                  MORE THAN 10 CI-SPLIT IN FILE ?
         BH    OKREOR
         TESTCB AM=VSAM,ERET=ERRCLDO,ACB=(12),                         C
               NSSS=5                   MORE THAN  5 CA-SPLIT IN FILE ?
         BH    OKREOR
         BAL   R7,ENDMSG
         B     NOREOR
OKREOR   EQU   *
         SHOWCB AM=VSAM,ACB=(12),                                      C
               FIELDS=(NLOGR,LRECL),                                   C
               AREA=WSHOWCB,LENGTH=8
         LTR   R15,R15                  TEST FOR SHOWCB ERRORS
         BNZ   ERRCLDO                  ERROR.
*
         SR    R6,R6                    CLEAR R6.
         LA    R7,2                     NUMBER OF VSAM BUFFERS.
         M     R6,WLRECL                MULTIPLY NUMBER AND SIZE.
         LR    R6,R7                    MOVE RESULT TO R6 AND,
         LA    R7,8                     02 X 4 FOR VAR. LENGTH REC.
         AR    R6,R7                    ADD 08 BYTES.
         A     R6,TALENGT1              ADD THE LENGTH OF 2 X TAPE
         A     R6,TALENGT1              I/O AREA. NOW WE HAVE THE
*                                       GETVIS SIZE IN R6.
*
         GETVIS ADDRESS=STRTVIS,                                       C
               LENGTH=(6)
         LTR   R15,R15                  TEST FOR GETVIS ERRORS
         BNZ   ERRCLDO                  ERROR.
*
**********************************************************************
         L     R6,STRTVIS               LOAD START ADDR TO R6 (WORK).
         L     R10,STRTVIS              LOAD START ADDR. TO R10 TAPE
*                                       I/O AREA 1.
         A     R6,TALENGT1              GET START ADDR FOR TAPE I/O
*                                       AREA 2 AND
         LR    R11,R6                   LOAD IT TO R11.
         A     R6,TALENGT1              GET START ADDR FOR R0BUF1L
         ST    R6,R0BUF1L               AND STORE IT.
         AH    R6,VARPRE                GET START ADDR FOR R0BUF1
         ST    R6,R0BUF1                AND STORE IT.
         A     R6,WLRECL                GET START ADDR FOR R0BUF2L
         ST    R6,R0BUF2L               AND STORE IT.
         AH    R6,VARPRE                GET START ADDR FOR R0BUF2
         ST    R6,R0BUF2                AND STORE IT.
*                 MODIFY AREALEN ON A RPL                            *
         L     R6,WLRECL                LOAD RECL TO R6.
         MODCB AM=VSAM,RPL=(5),AREALEN=(6)
         LTR   R15,R15                  TEST FOR MODCB ERRORS
         BNZ   ERRCLDO                  ERROR.
         CLC   WNLOGR,=F'0'             0 RECS IN FILE ?
         BNE   OKREORT                  NO. REORG ON TAPE
         CLOSE SACB1                    CLOSE VSAM FILE.
         LTR   R15,R15                  TEST FOR CLOSE ERRORS
         BNZ   ERRFINO                  ERROR.
         B     FDELDEF                  GO TO IDCAMS DELETE/DEFINE
OKREORT  EQU   *
         TM    23(R4),B'10000000'       TEST UPSI-0
         BNZ   MSGOP01D                 SET DROP MESSAGE
         LA    R6,MSGOP01
         LA    R9,L'MSGOP01-1
         BAL   R7,PUTMSG0
MSGOP01D EQU   *
         OPEN  OUTTAPE
         ZAP   TOUTRECP,P0              ZERO REC COUNTER FOR OUTPUT.
         ZAP   TOUTEXP,P0               ZERO EXIT COUNTER FOR OUTPUT.
         MVI   TSTEX,C'Y'               WE DON'T WANT EXCPAD ON THE 1.
*                                       READ.
         BAL   R7,USEBUF2               POINT BUFFER 2 DISK
         GET   RPL=SRPL10               GET 1 REC 1 TIME
         LTR   R15,R15                  TEST FOR READ ERRORS
         BNZ   EOFOUT
         BAL   R7,USEBUF2L              SAVE REC LENGTH BUF 2
NXTDSK1I EQU   *
         MVI   TSTEX,C'N'               NOW WE WANT EXCPAD.
         BAL   R7,USEBUF1               POINT BUFFER 1 DISK
         MVC   R0BUFWL,R0BUF2L          POINT BUFFER 2 TAPE
         GET   RPL=SRPL10               GET 1 REC.
         LTR   R15,R15                  TEST FOR READ ERRORS
         BNZ   EOFOUT
         BAL   R7,USEBUF1L              SAVE REC LENGTH BUF 1
         CLI   TSTEX,C'Y'               TAPE WRITTEN ?
         BE    NXTDSK2I                 YES, NEXT READ
         MVC   R0BUFWL,R0BUF2L          POINT BUFFER 2 TAPE
         BAL   R7,OTAPE                 NO, GO AND WRITE IT.
NXTDSK2I EQU   *
         MVI   TSTEX,C'N'               NOW WE WANT EXCPAD.
         BAL   R7,USEBUF2               POINT BUFFER 2 DISK
         MVC   R0BUFWL,R0BUF1L          POINT BUFFER 1 TAPE
         GET   RPL=SRPL10               GET 1 REC.
         LTR   R15,R15                  TEST FOR READ ERRORS
         BNZ   EOFOUT
         BAL   R7,USEBUF2L              SAVE REC LENGTH. BUF 2
         CLI   TSTEX,C'Y'               TAPE WRITTEN ?
         BE    NXTDSK1I                 YES, NEXT READ
         MVC   R0BUFWL,R0BUF1L          POINT BUFFER 1 TAPE
         BAL   R7,OTAPE                 NO, GO AND WRITE IT.
         B     NXTDSK1I                 GO AND READ AGAIN
EOFOUT   EQU   *
         CLI   TSTEX,C'Y'               IS TAPE WRITTEN ?
         BE    ENDPUT
         BAL   R7,OTAPE
ENDPUT   EQU   *
         TESTCB AM=VSAM,ERET=ERRCLDTO,RPL=(5),FDBK=4   TEST FOR  E O J
         BE    EOJOUT
         B     ERRCLDTO                 ERROR.
EOJOUT   EQU   *
         CLOSE OUTTAPE
         CNTRL OUTTAPE,REW              REWIND OUTPUT TAPE
         CLOSE SACB1
         LTR   R15,R15                  TEST FOR CLOSE ERRORS
         BNZ   ERRFINO                  ERROR.
         TM    23(R4),B'01000000'       TEST UPSI-1
         BNZ   MSG001OD                 SET DROP MESSAGE
         UNPK  TOUTRECD,TOUTRECP
         OI    TOUTRECD+8,X'F0'
         MVC   MSG001O+20(9),TOUTRECD
         LA    R6,MSG001O
         LA    R9,L'MSG001O-1
         BAL   R7,PUTMSG0
MSG001OD EQU   *
         TM    23(R4),B'00100000'       TEST UPSI-2
         BNZ   MSG002OD                 SET DROP MESSAGE
         UNPK  TOUTEXD,TOUTEXP
         OI    TOUTEXD+8,X'F0'
         MVC   MSG002O+32(9),TOUTEXD
         LA    R6,MSG002O
         LA    R9,L'MSG002O-1
         BAL   R7,PUTMSG0
MSG002OD EQU   *
FDELDEF  EQU   *
         TM    23(R4),B'10000000'       TEST UPSI-0
         BNZ   MSGOP03D                 SET DROP MESSAGE
         LA    R6,MSGOP03               TELL OPERATOR ABOUT IDCAMS,
         LA    R9,L'MSGOP03-1           DELETE/DEFINE
         BAL   R7,PUTMSG0
MSGOP03D EQU   *
         CDLOAD IDCAMS                  LOAD PH. IN GETVIS R1 => ENTRY
         LTR   R15,R15                  LOAD SUCCESSFUL ?
         BZ    LOADOK                   YES - NO ERROR
         EOJ   RC=(R15)                  NO - END PROGRAM RC IN R15
LOADOK   EQU   *
         LA    R15,6(,R1)               R15 = ENTRY POINT PLUS 6
         CALL  (15),(OPTION,DDNAME,PAGE,IOLIST) R15=ENTRY R1=>PARMLIST
         LTR   R15,R15                  DELETE / DEFINE OK ?
         BZ    TAPIN                    YES
         EOJ   RC=(R15)                 NO - END PROGRAM RC IN R15
TAPIN    EQU   *
         CLI   PARMTST,C'O'             DO WE WANT TO EMPTY THE FILE
         BE    NORMEOJ                  ONLY ?
         CLI   PARMTST,C'E'             DO WE WANT TO FORCE A EMPTY OF
         BE    NORMEOJ                  THE FILE ONLY ?
         MODCB AM=VSAM,ACB=(12),                                       C
               EXLST=SACBIEX
         LTR   R15,R15                  TEST FOR MODCB ERRORS
         BNZ   ERRCLTI                  ERROR.
         OPEN  SACB1                    OPEN FILE FOR INPUT
         LTR   R15,R15                  TEST FOR OPEN ERRORS
         BNZ   ERRCLTI                  ERROR.
TZEROREC EQU   *
         CLC   WNLOGR,=F'0'             0 RECS IN FILE ?
         BE    FILINT                   YES, GO AND INIT FILE.
*
*   OOO    BBBB     SSSS                WE HAVE LEARNED BY EXPERIENCE
*  O   O   B   B   S                    THAT YOU CAN'T ALWAYS RELY ON
*  O   O   BBBB     SSS                 THE INFORMATION IN NLOGR.
*  O   O   B   B       S                BECAUSE OF THIS, WE WILL DO
*   OOO    BBBB    SSSS                 OUR OWN TEST TOO.
*
         CP    TOUTRECP,P0              0 RECS ON TAPE ?
         BE    FILINT                   YES, GO AND INIT FILE.
         TM    23(R4),B'10000000'       TEST UPSI-0
         BNZ   MSGOP02D                 SET DROP MESSAGE
         LA    R6,MSGOP02
         LA    R9,L'MSGOP02-1
         BAL   R7,PUTMSG0
MSGOP02D EQU   *
         ZAP   TINRECP,P0               ZERO REC COUNTER FOR OUTPUT.
         ZAP   TINEXP,P0                ZERO EXIT COUNTER FOR OUTPUT.
         OPEN  INTAPE                   OPEN TAPE FOR INPUT
         MVC   R0BUFWL,R0BUF1L          POINT BUFFER 1 TAPE
         BAL   R7,ITAPE
NXTDSK1O EQU   *
         CLI   EOFTST,C'Y'              EOF ON TAPE ?
         BE    EOJIN                    STOP
         MVI   TSTEX,C'N'               NOW WE WANT EXCPAD.
         BAL   R7,USEBUF1               POINT BUFFER 1 DISK
         BAL   R7,LDB1RECL              GET REC LENGTH FROM BUF1
         MVC   R0BUFWL,R0BUF2L          POINT BUFFER 2 TAPE
         PUT   RPL=SRPL10               PUT 01 REC.
         LTR   R15,R15                  TEST FOR WRITE ERRORS
         BNZ   ERRCLDTI                 ERROR UNDER INPUT
         AP    TINRECP,P1               ADD 01 TO REC COUNTER INPUT
         CLI   TSTEX,C'Y'               TAPE READ ?
         BE    NXTDSK2O                 YES, NEXT WRITE
         BAL   R7,ITAPE                 NO, GO AND READ IT.
NXTDSK2O EQU   *
         CLI   EOFTST,C'Y'              EOF ON TAPE ?
         BE    EOJIN                    STOP
         MVI   TSTEX,C'N'               NOW WE WANT EXCPAD.
         BAL   R7,USEBUF2               POINT BUFFER 2 DISK
         BAL   R7,LDB2RECL              GET REC LENGTH FROM BUF2
         MVC   R0BUFWL,R0BUF1L          POINT BUFFER 1 TAPE
         PUT   RPL=SRPL10               PUT 01 REC.
         LTR   R15,R15                  TEST FOR WRITE ERRORS
         BNZ   ERRCLDTI                 ERROR UNDER INPUT
         AP    TINRECP,P1               ADD 01 TO REC COUNTER INPUT
         CLI   TSTEX,C'Y'               TAPE READ ?
         BE    NXTDSK1O                 YES, NEXT WRITE.
         BAL   R7,ITAPE                 NO, GO AND READ IT.
         B     NXTDSK1O                 GO AND WRITE AGAIN.
EOJIN    EQU   *
         BAL   R7,ENDMSG
         CLOSE SACB1
         LTR   R15,R15                  TEST FOR CLOSE ERRORS
         BNZ   ERRFINI                  ERROR.
         TM    23(R4),B'01000000'       TEST UPSI-1
         BNZ   MSG001ID                 SET DROP MESSAGE
         UNPK  TINRECD,TINRECP
         OI    TINRECD+8,X'F0'
         MVC   MSG001I+19(9),TINRECD
         LA    R6,MSG001I
         LA    R9,L'MSG001I-1
         BAL   R7,PUTMSG0
MSG001ID EQU   *
         TM    23(R4),B'00100000'       TEST UPSI-2
         BNZ   MSG002ID                 SET DROP MESSAGE
         UNPK  TINEXD,TINEXP
         OI    TINEXD+8,X'F0'
         MVC   MSG002I+31(9),TINEXD
         LA    R6,MSG002I
         LA    R9,L'MSG002I-1
         BAL   R7,PUTMSG0
MSG002ID EQU   *
NORMEOJ  EOJ                            NORMAL  E O J
ERRCLDO  EQU   *
         CLOSE SACB1
         B     ERRFINO
ERRCLTO  EQU   *
         CLOSE OUTTAPE
         B     ERRFINO
ERRCLDTO EQU   *
         CLOSE SACB1
         CLOSE OUTTAPE
         B     ERRFINO
ERRFINO  EQU   *
         CNTRL OUTTAPE,REW               REWIND OUTPUT TAPE
         LA    R15,9
         EOJ   RC=(R15)
ERRCLDI  EQU   *
         CLOSE SACB1
         B     ERRFINI
ERRCLTI  EQU   *
         CLOSE INTAPE
         B     ERRFINI
ERRCLDTI EQU   *
         CLOSE SACB1
         CLOSE INTAPE
         B     ERRFINI
ERRFINI  EQU   *
         CNTRL INTAPE,REW               REWIND INPUT TAPE
         LA    R15,10
         EOJ   RC=(R15)
FILINT   EQU   *
         LA    R6,MSGOP04
         LA    R9,L'MSGOP04-1
         BAL   R7,PUTMSG0
         L     R7,R0BUF1                LOAD ADDR ON RECORD FIELD
         L     R6,WLRECL                LOAD LENGTH ON RECORD FIELD
         BCTR  R6,0
         EX    R6,INTREC                MAKE A LOW-VALUE RECORD.
         L     R0,WLRECL                LOAD LENGTH ON RECORD
         LA    R1,SRPL10
         MODCB AM=VSAM,RPL=(1),RECLEN=(0)
         LTR   R15,R15                  TEST FOR MODCB ERRORS
         BNZ   ERRFINI                  ERROR.
         BAL   R7,USEBUF1               POINT BUFFER 1 DISK
         MVI   TSTEX,C'Y'               WE DON'T WANT EXCPAD.
         PUT   RPL=SRPL10               PUT DUMMY REC.
         LTR   R15,R15                  TEST FOR WRITE ERRORS
         BNZ   ERRCLDI                  ERROR UNDER INIT.
         CLOSE SACB1
         LTR   R15,R15                  TEST FOR CLOSE ERRORS
         BNZ   ERRFINI                  ERROR.
         OPEN  SACB1
         LTR   R15,R15                  TEST FOR OPEN ERRORS
         BNZ   ERRFINI                  ERROR.
         MODCB AM=VSAM,RPL=(5),                                        C
               OPTCD=(KEY,SEQ,UPD,MVE)
         LTR   R15,R15                  TEST FOR MODCB ERRORS
         BNZ   ERRCLDI                  ERROR.
         GET   RPL=SRPL10               GET DUMMY RECORD.
         LTR   R15,R15                  TEST FOR GET ERROR.
         BNZ   ERRCLDI                  ERROR.
         ERASE RPL=SRPL10               DELETE DUMMY RECORD.
         LTR   R15,R15                  TEST FOR DELETE ERROR.
         BNZ   ERRCLDI                  ERROR.
         CLOSE SACB1
         LTR   R15,R15                  TEST FOR CLOSE ERRORS
         BNZ   ERRFINI                  ERROR.
         LA    R15,2                    TELL BY RETURN CODE, ABOUT
         EOJ   RC=(R15)                 INIT OF VSAM FILE.
INTREC   XC    0(0,R7),0(R7)
ENDMSG   EQU   *
         ST    R7,SAVBALR7              SAVE R7
         TESTCB AM=VSAM,ERET=ERRFINI,ACB=(12),OBJECT=DATA,             C
               NEXT=3                   MORE THAN 3 EXTENTS FOR DATA ?
         BNH   TSTINDXE
         LA    R6,MSGOP06
         LA    R9,L'MSGOP06-1
         BAL   R7,PUTMSG0
TSTINDXE EQU   *
         TESTCB AM=VSAM,ERET=ERRFINI,ACB=(12),OBJECT=INDEX,            C
               NEXT=2                   MORE THAN 2 EXTENTS FOR INDEX ?
         BNH   TSTINDXL
         LA    R6,MSGOP07
         LA    R9,L'MSGOP07-1
         BAL   R7,PUTMSG0
TSTINDXL EQU   *
         TESTCB AM=VSAM,ERET=ERRFINI,ACB=(12),OBJECT=INDEX,            C
               NIXL=2                   MORE THAN 2 LEVELS IN INDEX ?
         BNH   OKEXTENT
         LA    R6,MSGOP08
         LA    R9,L'MSGOP08-1
         BAL   R7,PUTMSG0
OKEXTENT EQU   *
         L     R7,SAVBALR7              RESTORE R7
         BR    R7                       GO BACK
NOTKSDS  EQU   *
         LA    R6,MSGOP05
         LA    R9,L'MSGOP05-1
         BAL   R7,PUTMSG0
         BAL   R7,EMPTYIPT
         CLOSE SACB1                    CLOSE VSAM FILE
         LA    R15,3                    TELL BY RETURN CODE, ABOUT
         EOJ   RC=(R15)                 NO KSDS VSAM FILE.
NOREOR   EQU   *
         BAL   R7,EMPTYIPT
         CLOSE SACB1
         LA    R15,1                    TELL BY RETURN CODE, ABOUT
         EOJ   RC=(R15)                 NO REORG OF VSAM FILE.
EMPTYIPT EQU   *
         OPEN  SYSIPT                   OPEN SYSIPT
GETIPT   GET   SYSIPT                   EMPTY SYSIPT
         B     GETIPT
CLOSEIPT CLOSE SYSIPT                   CLOSE SYSIPT
         BR    R7                       GO BACK
OTAPE    EQU   *
         L     R8,R0BUFWL               GET 1 REC FROM BUFFER AND
         PUT   OUTTAPE,(8)              PUT IT TO TAPE.
         AP    TOUTRECP,P1              ADD 01 TO REC COUNTER OUTPUT
         BR    R7                       GO BACK
ITAPE    EQU   *
         L     R8,R0BUFWL               GET 1. REC FROM TAPE AND
         GET   INTAPE,(8)               PUT IT TO BUFFER.
         BR    R7                       GO BACK
*                 MODIFY AREA ON A RPL                               *
USEBUF1  EQU   *
         MVC   R0BUFW,R0BUF1            NOW WE USE BUFFER 1.
         B     USEBUF
USEBUF2  EQU   *
         MVC   R0BUFW,R0BUF2            NOW WE USE BUFFER 2.
USEBUF   EQU   *
         L     R6,R0BUFW                LOAD ADDR FOR AREA FIELD
         MODCB AM=VSAM,RPL=(5),AREA=(6)
         LTR   R15,R15                  TEST FOR MODCB ERRORS
         BNZ   ERRCLDI                  ERROR.
         BR    R7                       GO BACK
*                 SAVE RECORD LENGTH FROM RPL                        *
USEBUF1L EQU   *
         MVC   R0BUFWL,R0BUF1L
         B     USEBUFL
USEBUF2L EQU   *
         MVC   R0BUFWL,R0BUF2L
USEBUFL  EQU   *
         LA    R1,SRPL10
         SHOWCB AM=VSAM,RPL=(1),RECLEN=(0)
         LTR   R15,R15                  TEST FOR SHOWCB ERRORS
         BNZ   ERRCLDTO                 ERROR.
         AH    R0,VARPRE                ADD 4 BYTES FOR LENGTH FIELD
         L     R6,R0BUFWL               LOAD ADDR FOR AREALEN FIELD
         STH   R0,0(R6)                 SAVE NEW REC LENGTH
         XC    2(2,R6),2(R6)            CLEAR RESERVED BYTES
         BR    R7                       GO BACK
*    GET RECORD LENGTH FROM BUFFER X FOR INPUT RPL                  *
LDB1RECL EQU   *
         MVC   R0BUFWL,R0BUF1L
         B     LDBRECL
LDB2RECL EQU   *
         MVC   R0BUFWL,R0BUF2L
LDBRECL  EQU   *
         L     R6,R0BUFWL               LOAD ADDR FOR REC LENGTH
         SR    R0,R0                    CLEAR R0.
         LH    R0,0(,R6)                LOAD VALUE FOR REC LENGTH
         SH    R0,VARPRE                SUBTRACT 4 BYTES FOR LENGTH
*                                       FIELD.
         LA    R1,SRPL10
         MODCB AM=VSAM,RPL=(1),RECLEN=(0)
         LTR   R15,R15                  TEST FOR MODCB ERRORS
         BNZ   ERRCLDTI                 ERROR.
         BR    R7                       GO BACK
*                 E O F  F O R  I N P U T  T A P E                   *
EOFIN    EQU   *
         MVI   TSTEX,C'Y'               NOW WE DON'T WANT EXCPAD.
         CLOSE INTAPE
         CNTRL INTAPE,REW               REWIND INPUT TAPE
         MVI   EOFTST,C'Y'              NOW WE HAVE EOF ON INPUT TAPE
         BR    R7                       GO BACK
*                 MESSAGE                                            *
PUTMSG0  EQU   *
         TM    23(R4),B'00000001'       TEST UPSI-7
         BNZR  R7                       SET DROP MESSAGE
         EX    R9,PUTMSGEX
         LA    R9,10(,R9)               ADD 1 AND 9 TO R9.
         PUT   MESSAG0                  TELL OPERATOR.
         BR    R7
PUTMSGEX MVC   MSGOUT02(0),0(R6)        MOVE MESSAGE TO OUTPUT
*                 START EXIT EXCPAD. ( OUTPUT )                      *
EXTAPOUT DS    0H
         CLI   TSTEX,C'Y'               IS IT FIRST TIME ?
         BE    NOEXITO                  NO, TAPE IS ALREADY WRITTEN.
         STM   R1,R0,R1TR0SAV           SAVE REGS FOR MAIN PROGRAM.
         AP    TOUTEXP,P1               ADD 1 TO EXIT COUNTER.
         BAL   R7,OTAPE                 YES, GO AND WRITE TAPE.
         MVI   TSTEX,C'Y'               TELL THAT WE HAVE BEEN HERE.
         LM    R1,R0,R1TR0SAV           LOAD REGS FOR MAIN PROGRAM.
NOEXITO  BR    R14                      RETURN TO MAIN PROGRAM.
*                 START EXIT EXCPAD. ( INPUT )                       *
EXTAPIN  DS    0H
         CLI   TSTEX,C'Y'               IS IT FIRST TIME ?
         BE    NOEXITI                  NO, TAPE IS ALREADY READ.
         STM   R1,R0,R1TR0SAV           SAVE REGS FOR MAIN PROGRAM.
         AP    TINEXP,P1                ADD 1 TO EXIT COUNTER.
         BAL   R7,ITAPE                 YES, GO AND READ TAPE.
         MVI   TSTEX,C'Y'               TELL THAT WE HAVE BEEN HERE.
         LM    R1,R0,R1TR0SAV           LOAD REGS FOR MAIN PROGRAM.
NOEXITI  BR    R14                      RETURN TO MAIN PROGRAM.
*                  END  EXIT EXCPAD.                                 *
SACB1    ACB   AM=VSAM,DDNAME=DSKIO,                                   C
               BUFSP=655360,                                           C
               EXLST=SACBOEX,                                          C
               MACRF=(KEY,SEQ,OUT)
SRPL10   RPL   AM=VSAM,ACB=SACB1,                                      C
               RECLEN=VRECL0,                                          C
               OPTCD=(KEY,SEQ,NUP,MVE)
SACBOEX  EXLST EXCPAD=(EXTAPOUT,A)
SACBIEX  EXLST EXCPAD=(EXTAPIN,A)
OUTTAPE  DTFMT BLKSIZE=32767,                                          C
               DEVADDR=SYS002,                                         C
               ERROPT=ERRCLDTO,                                        C
               ERREXT=YES,                                             C
               FILABL=NO,                                              C
               IOAREA1=(10),                                           C
               IOAREA2=(11),                                           C
               WORKA=YES,                                              C
               RECFORM=VARBLK,                                         C
               REWIND=NORWD,                                           C
               TYPEFLE=OUTPUT
INTAPE   DTFMT BLKSIZE=32767,                                          C
               DEVADDR=SYS002,                                         C
               ERROPT=ERRCLDTI,                                        C
               EOFADDR=EOFIN,                                          C
               ERREXT=YES,                                             C
               FILABL=NO,                                              C
               IOAREA1=(10),                                           C
               IOAREA2=(11),                                           C
               WORKA=YES,                                              C
               RECFORM=VARBLK,                                         C
               REWIND=NORWD,                                           C
               TYPEFLE=INPUT
MESSAG0  DTFCN DEVADDR=SYSLOG,                                         C
               IOAREA1=MSGOUT0,                                        C
               BLKSIZE=65,                                             C
               RECFORM=UNDEF,                                          C
               RECSIZE=(9),                                            C
               TYPEFLE=OUTPUT
SYSIPT   DTFCD DEVADDR=SYSIPT,                                         C
               EOFADDR=CLOSEIPT,                                       C
               IOAREA1=CARDIN,                                         C
               BLKSIZE=80
R13VSAM0 DS    18F                      SAVEAREA MAINLINE VSAM
R1TR0SAV DS    16F                      SAVEAREA REGS IN EXCPAD
SAVBALR7 DS    F                        SAVEAREA FOR R7 IN A DOUBLE BAL
R0BUF1L  DS    F
R0BUF1   DS    F
R0BUF2L  DS    F
R0BUF2   DS    F
R0BUFWL  DS    F
R0BUFW   DS    F
STRTVIS  DS    F                        START ADDR. OF GETVIS.
WSHOWCB  DS    0F                       ONE REF. TO ALL SHOWCB FIELDS
WNLOGR   DS    F                        ... 1. SHOWCB FIELD,
WLRECL   DS    F                        ... 2. SHOWCB FIELD.
TALENGT1 DC    F'32767'                 1 X TAPE IOAREA LENGTH.
VRECL0   DS    F
IOLIST   DC    F'0'                     IDCAMS PARM
OPTION   DC    H'0'                     IDCAMS PARM
DDNAME   DC    H'0'                     IDCAMS PARM
PAGE     DC    H'0'                     IDCAMS PARM
VARPRE   DC    H'4'                     VAR RECORD LENGTH PREFIX.
MSGOUT0  DS    0CL65
MSGOUT01 DC    CL7'ITTREOR'
MSGOUTB  DC    CL2'  '
MSGOUT02 DS    CL56
MSG001O  DC    C'TOTAL RECORD''S OUT  XXXXXXXXX'
MSG002O  DC    C'NUMBER OF TIME''S IN OUTPUT EXIT XXXXXXXXX'
MSG001I  DC    C'TOTAL RECORD''S IN  XXXXXXXXX'
MSG002I  DC    C'NUMBER OF TIME''S IN INPUT EXIT XXXXXXXXX'
MSGOP01  DC    C'COPY FROM DISK TO TAPE'
MSGOP02  DC    C'COPY FROM TAPE TO DISK'
MSGOP03  DC    C'DELETE/DEFINE VSAM FILE'
MSGOP04  DC    C'INIT VSAM FILE'
MSGOP05  DC    C'DON''T TRY TO REORG A NON KSDS FILE'
MSGOP06  DC    C'MORE THAN 3 EXTENTS FOR DATA'
MSGOP07  DC    C'MORE THAN 2 EXTENTS FOR INDEX'
MSGOP08  DC    C'MORE THAN 3 LEVELS FOR INDEX'
TOUTEXD  DS    CL9                      REC COUNTER FOR OUTPUT EXIT.
TOUTEXP  DS    PL5                      REC COUNTER FOR OUTPUT EXIT.
TOUTRECD DS    CL9                      REC COUNTER FOR OUTPUT.
TOUTRECP DS    PL5                      REC COUNTER FOR OUTPUT.
TINEXD   DS    CL9                      REC COUNTER FOR INPUT EXIT.
TINEXP   DS    PL5                      REC COUNTER FOR INPUT EXIT.
TINRECD  DS    CL9                      REC COUNTER FOR INPUT.
TINRECP  DS    PL5                      REC COUNTER FOR INPUT.
P0       DC    PL1'0'
P1       DC    PL1'1'
PARMTST  DC    CL1' '              SAVE AREA FOR PARM FROM EXEC CARD
EOFTST   DC    CL1'N'                   EOF TEST FOR INPUT.
TSTEX    DS    CL1
CARDIN   DS    CL80                     SYSIPT BUFFER
         LTORG
         IKQACB                         VSAM ACB DSECT
         IKQRPL                         VSAM RPL DSECT
         END


Ivan Tullberg
Systems Programmer (Denmark)

