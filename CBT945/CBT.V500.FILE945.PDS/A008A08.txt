Print records from a VSAM object

This is an Assembler program that prints the records from a
VSAM object. The program prints using the over/under style
(which I prefer to the IDCAMS PRINT DUMP option) - see
Figure 1.

By default, all the records from the input object will be printed.
To print a range, an optional job step parameter must be
provided. The parameter specifies the start and stop record
numbers, expressed as nine-digit integers. The input object
may not contain spanned records because locate mode
processing is performed.

Suggested JCL to print all data component records (by default):

//       EXEC PGM=VSAMRECP
//SYSUDUMP DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//VSAM     DD DSN=CLUSTER.NAME,DISP=SHR

To print a specific component's records:

//VSAM     DD DSN=CLUSTER.NAME.INDEX,DISP=SHR

or:

//VSAM     DD DSN=CLUSTER.NAME.DATA,DISP=SHR

Suggested JCL to print a range of data component records:

//       EXEC PGM=VSAMRECP,PARM='000000001000000010'
//SYSUDUMP DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//VSAM     DD DSN=CLUSTER.NAME,DISP=SHR

This will cause the first 10 records from the data component of
the named cluster to be printed.

The program prints 100 bytes of data per 'pass'. The
calculation to determine the number of 'passes' required to
print the whole record is rather primitive, and relies on the
largest record not exceeding 1,000,000 bytes. The method is to
divide the record length by 101 and add 1. Any remainder
generated is ignored ((length/101) + 1).

This works fine unless the record is greater than 10,000 bytes
when an additional 1 must be added to the result ((length/101)
+ 2).

If the record is greater than 1,000,000 bytes, an additional
unitary incrementation must be performed ((length/101) + 3).

This will not happen, because this program utilizes locate mode
processing. Therefore, the largest permitted record size is
32,761 bytes because VSAM's largest CI size is 32,768 bytes.

VSAMRECP TITLE 'PROGRAM FOR PRINTING VSAM RECORDS'
         PRINT NOGEN
         SPACE 1
*        PROGRAM ATTRIBUTES: REENTRANT
         TITLE 'MACROS, DSECTS AND CONTROL BLOCKS USED'
*        ABEND                          ABEND THE PROGRAM
*        CLOSE          MF=E            CLOSE FILE(S)
*        DCB                            DATA CONTROL BLOCK
*        DCBD (IHADCB)                  DCB DSECT MAPPING
*        FREEMAIN                       RELEASE STORAGE
*        FREEPOOL                       RELEASE BUFFER POOL
*        GENCB          MF=G            GENERATE A VSAM CONTROL BLOCK
*        GET - VSAM                     ACCESS A RECORD
*        GETMAIN                        ACQUIRE STORAGE
*        IEFJFCBN                       JFCB MAPPING
*        IFGACB                         ACB DSECT MAPPING
*        MODCB          MF=G            MODIFY A VSAM CONTROL BLOCK
*        OPEN           MF=L/E          PREPARE FILE(S) FOR PROCESSING
*        PUT - QSAM                     WRITE A RECORD
*        RDJFCB         MF=E            READ SPECIFIC JFCB
*        SHOWCB         MF=G            OBTAIN DATA FOR VSAM OBJECT
*        TESTCB         MF=L/E          TEST A VSAM CONTROL BLOCK
*        WTO            MF=L/E          WRITE TO OPERATOR
         SPACE 2
*        REGISTER EQUATES
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         TITLE 'PROGRAM INITIALIZATION CODE'
*        1.    PROGRAM PROLOG
*        2.    PROCESS THE JOB STEP PARAMETER, IF PRESENT
*        3.    PERFORM PROGRAM INITIALIZATION
*        4.    PERFORM MAIN PROGRAM PROCESSING
*        5.    PERFORM PROGRAM TERMINATION PROCESSING
*        6.    PROGRAM EPILOG
*
*        REGISTER USAGE
*        0                              . MACROS
*        1                              . MACROS
*        2                              . -> DYNAMIC AREA
*        3                              . LENGTH OF DYNAMIC AREA
*        10                             . BRANCH AND SAVE
*        11                             . CSECT BASE REGISTER 1
*        12                             . CSECT BASE REGISTER 2
*        13                             . -> SAVE AREA
*        14                             . -> RETURN
*        15                             . -> ENTRY POINT
         SPACE 2
VSAMRECP CSECT
         STM   R14,R12,12(R13)          . SAVE CALLER'S REGISTERS
         LR    R11,R15                  . LOAD 11 AS PROGRAM BASE
         USING VSAMRECP,R11,R12         . ESTABLISH ADDRESSABILITY
         LA    R12,4095(,R11)           . ESTABLISH SECOND BASE
         LA    R12,1(,R12)              .   REGISTER
         LA    R3,WORKL                 . 3 - LENGTH OF DYNAMIC AREA
         GETMAIN R,                     . GETMAIN FOR DYNAMIC AREA     C
               LV=(R3)
         ST    R13,4(,R1)               . BACKWARD SAVE AREA ->
         ST    R1,8(,R13)               . FORWARD SAVE AREA ->
         LR    R13,R1                   . 13 -> PROGRAM'S DYNAMIC AREA
         USING WORKAREA,R13             . ESTABLISH ADDRESSABILITY
         BAS   R10,JOBPARM              . PROCESS JOB STEP PARAMETER
         BAS   R10,INITIAL              . PROGRAM INITIALIZATION
         BAS   R10,MAINPROC             . MAIN PROCESSING LOGIC
         BAS   R10,TERMIN               . PROGRAM TERMINATION
         LA    R3,WORKL                 . 3 - LENGTH OF DYNAMIC AREA
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN R,                    . FREEMAIN DYNAMIC AREA        C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . 14 -> RETURN
         SLR   R15,R15                  . 15 - ZERO
         LM    R0,R12,20(R13)           . RESTORE 0 - 12
         BR    R14                      . RETURN
         TITLE 'PROCESS OPTIONAL JOB STEP PARAMETER'
*        1.    ACCESS JOB STEP PARAMETER
*        2.    IF LENGTH ZERO, DEFAULT TO ALL RECORDS
*        3.    IF LENGTH NON-ZERO, EDIT FOR NUMERIC DATA
*        4.    IF NON-NUMERIC DATA ENTERED, ABEND
*
*        REGISTER USAGE
*        1                              . WORK
*        10                             . BRANCH AND SAVE
         SPACE 2
JOBPARM  EQU   *
         MVI   PARM,OFF                 . SWITCH OFF PARAMETER SWITCH
         L     R1,4(,R13)               . 1 -> CALLER'S SAVE AREA
         L     R1,24(,R1)               . 1 - CALLER'S REGISTER 1 VALUE
         L     R1,0(,R1)                . 1 -> JOB STEP PARAMETER
         OC    0(2,R1),0(R1)            . Q. PARAMETER PRESENT?
         BZR   R10                      . A. NO - EXIT
         MVC   TEST(18),ZEROS           . EDIT PARAMETER FOR NUMERIC
         MVZ   TEST(18),2(R1)
         CLC   TEST(18),ZEROS           . Q. ZONE BYTES ALL 'F'?
         BNE   B0001                    . A. NO - ABEND
         PACK  FROM#(5),2(9,R1)         . SAVE STARTING RECORD NUMBER
         PACK  TO#(5),11(9,R1)          . SAVE ENDING RECORD NUMBER
         MVI   PARM,ON                  . INDICATE VALID PARAMETER
         BR    R10                      . EXIT
B0001    EQU   *
*                                       . NON-NUMERIC PARAMETER
         WTO   MF=(E,WTO1)              . ISSUE WTO
         ABEND 101,                                                    C
               DUMP
         TITLE 'PROGRAM INITIALIZATION LOGIC'
*        1.    ISSUE READ JFCB FOR DSN OF INPUT FILE
*        2.    INITIALIZE DATA AREAS
*        3.    ACQUIRE STORAGE FOR A GENCB PARAMETER LIST
*        4.    GENERATE AN ACB
*        5.    GENERATE AN EXIT LIST
*        6.    MODIFY THE ACB TO POINT TO THE EXIT LIST
*        7.    OPEN THE FILES AND CHECK THE OPENS
*        8.    DETERMINE IF SPANNED RECORDS ARE PERMITTED
*        9.    DETERMINE OBJECT ORGANIZATION
*        10.   IF OBJECT IS NOT AN ESDS, MODIFY ACB FOR KEYED
*              ACCESS
*        11.   IF OBJECT IS A KSDS, DETERMINE KEY LENGTH
*        12.   IF OBJECT IS NOT AN ESDS, ACQUIRE STORAGE FOR KEY
*        13.   GENERATE AN RPL
*        14.   IF OBJECT IS AN ESDS, MODIFY THE RPL FOR ADDRESSED
*              PROCESSING
*
*        REGISTER USAGE
*        0                              . MACROS
*        1                              . MACROS
*        2                              . -> JFCB
*                                       . -> ACB
*        3                              . -> DCB EXIT
*                                       . -> EXIT LIST
*                                       . KEY LENGTH
*                                       . -> KEY LENGTH
*                                       . -> RPL
*        4                              . -> DCB
*        5                              . -> RECORD ADDRESS
*        6                              . LENGTH ADD. PARAMETER LIST
*                                       . -> ADDITIONAL PARAMETER LIST
*        9                              . LENGTH OF PARAMETER LIST
*                                       . -> PARAMETER LIST
*        10                             . BRANCH AND SAVE
         SPACE 2
INITIAL  EQU   *
         LA    R4,DDDCB                 . 4 -> DCB IN DYNAMIC AREA
         USING IHADCB,R4                . USE DSECT MAPPING
         MVC   DDDCB(DCBLEN),DUMMYDCB   . MOVE IN DUMMY DCB FOR JFCB
         LA    R3,DCBEXIT               . 3 -> DCB EXIT LIST
         LA    R2,INFMJFCB              . 2 -> JFCB MAPPING
         ST    R2,0(,R3)                . SAVE IN DCB EXIT
         MVI   0(R3),X'87'              . INITIALIZE HIGH-ORDER BYTE
         ST    R3,DCBEXLST              . ZAP EXIT LIST IN DCB
         MVI   DMAL,X'80'               . ZAP DATA MANAGEMENT ADDRESS
         RDJFCB ((R4)),                 . ISSUE RDJFCB                 C
               MF=(E,DMAL)
         LTR   R15,R15                  . Q. RDJFCB SUCCESSFUL?
         BNZ   C0001                    . A. NO
         MVC   DSN,JFCBDSNM             . SAVE DSNAME
C0001    EQU   *
         ZAP   #PRINT,=P'+0'            . NUMBER OF RECORDS PRINTED
         ZAP   #READ,=P'+0'             . NUMBER OF RECORDS READ
         ZAP   #LINE,=P'+60'            . NUMBER OF LINES ON PAGE
         ZAP   #PAGE,=P'+1'             . PAGE NUMBER
         MVI   OUTLINE,C' '             . OUTPUT REPORT LINE
         MVC   OUTLINE+1(132),OUTLINE
         LA    R9,GENRPL                . 9 - LENGTH OF LONGEST
*                                       .   PARAMETER LIST
         GETMAIN R,                     . GET PARAMETER LIST STORAGE   C
               LV=(R9)
         LR    R9,R1                    . 9 -> PARAMETER LIST STORAGE
         GENCB BLK=ACB,                 . GENERATE ACB                 C
               AM=VSAM,                                                C
               DDNAME=VSAM,                                            C
               MACRF=(SEQ,IN),                                         C
               MF=(G,(R9))
         ST    R1,@ACB                  . SAVE ACB ADDRESS
         GENCB BLK=EXLST,               . GENERATE EXIT LIST           C
               AM=VSAM,                                                C
               EODAD=D0007,                                            C
               MF=(G,(R9))
         ST    R1,@EXIT                 . SAVE EXIT LIST ADDRESS
         L     R2,@ACB                  . 2 -> ACB
         LR    R3,R1                    . 3 -> EXIT
         MODCB ACB=(R2),                . MODIFY ACB TO INCLUDE EXIT   C
               EXLST=(R3),                                             C
               MF=(G,(R9))
*                                       . OPEN FILES
         MVC   DDDCB(DCBLEN),SYSPRINT   . MOVE DCB MASK INTO DYNAMIC
         MVC   DMAL(8),OPEN             . ZAP DATA MANAGEMENT ADDRESS
         OPEN  ((R2),,(R4),OUTPUT),                                    C
               MF=(E,DMAL)
         LTR   R15,R15                  . Q. OPENS OKAY?
         BZ    C0002                    . A. YES
         TM    DCBOFLGS,DCBOFOPN        . Q. SYSPRINT OPEN OKAY?
         BNO   C0005                    . A. NO - OPEN FAILED
         USING IFGACB,R2                . ACB DSECT ADDRESSABILITY
         TM    ACBOFLGS,ACBOPEN         . Q. VSAM OPEN OKAY?
         BNO   C0006                    . A. NO - OPEN FAILED
         DROP  R2                       . ACB DSECT NOT REQUIRED
C0002    EQU   *
         TESTCB ACB=(R2),               . ESTABLISH SHARED PARAMETER   C
               ATRB=SPAN,               .   LIST                       C
               MF=(L,(R9))
         TESTCB ACB=(R2),               . Q. SPANNED RECORDS ALLOWED?  C
               MF=(E,(R9))
         BE    C0007                    . A. YES - TERMINATE PROCESSING
         MVI   OBJTYP,C'E'              . DEFAULT TO ESDS
         LA    R3,4                     . DEFAULT KEY LENGTH 4 BYTES
         ST    R3,#KEY
         TESTCB ACB=(R2),               . Q. INPUT AN ESDS?            C
               ATRB=ESDS,                                              C
               MF=(E,(R9))
         BE    C0003                    . A. YES
         MVI   OBJTYP,C'R'
         LA    R6,MODKEY                . 6 - LENGTH OF STORAGE
         GETMAIN R,                     . GET STORAGE AREA FOR         C
               LV=(R6)                  .   ADDITIONAL PARAMETER LIST
         LR    R6,R1                    . 6 -> STORAGE AREA
         MODCB ACB=(R2),                . ADD MACRF OF KEY FOR RRDS    C
               MACRF=KEY,               .   AND KSDS                   C
               MF=(G,(R6),MODKEY)
         LA    R4,MODKEY                . 4 - LENGTH OF STORAGE
         FREEMAIN R,                    . ADDITIONAL PARAMETER LIST    C
               LV=(R4),                 .   NOT REQUIRED - RELEASE     C
               A=(R6)
         TESTCB ACB=(R2),               . Q. INPUT A RRDS?             C
               ATRB=RRDS,                                              C
               MF=(E,(R9))
         BE    C0003                    . A. YES
         MVI   OBJTYP,C'K'              . INPUT IS KSDS
         LA    R3,#KEY                  . 3 -> KEY LENGTH AREA
         SHOWCB ACB=(R2),               . DETERMINE KEY LENGTH         C
               AREA=(R3),                                              C
               FIELDS=KEYLEN,                                          C
               LENGTH=4,                                               C
               MF=(G,(R9))
         L     R3,#KEY                  . 3 - KEY LENGTH
C0003    EQU   *
         GETMAIN R,                     . GETMAIN FOR KEY AREA         C
               LV=(R3)
         ST    R1,@KEY                  . SAVE ADDRESS OF KEY AREA
         LA    R5,@REC                  . 5 -> RECORD ADDRESS
         LR    R3,R1                    . 3 -> KEY AREA
         GENCB BLK=RPL,                 . GENERATE RPL                 C
               ACB=(R2),                                               C
               AM=VSAM,                                                C
               AREA=(R5),                                              C
               AREALEN=4,                                              C
               ARG=(R3),                                               C
               OPTCD=(SEQ,LOC),                                        C
               MF=(G,(R9),GENRPL)
         ST    R1,@RPL                  . SAVE RPL ADDRESS
         CLI   OBJTYP,C'E'              . Q. INPUT AN ESDS?
         BNE   C0004                    . A. NO
         LR    R3,R1                    . 3 -> RPL
         MODCB RPL=(R3),                . ADD OPTCD OF RBA FOR ESDS    C
               OPTCD=ADR,                                              C
               MF=(G,(R9))
C0004    EQU   *
         LA    R3,GENRPL                . 3 - LENGTH OF STORAGE
         FREEMAIN R,                    . RELEASE STORAGE USED FOR     C
               A=(R9),                  .   PARAMETER LIST             C
               LV=(R3)
         BR    R10                      . EXIT
         TITLE 'PROGRAM INITIALIZATION - ERRORS'
C0005    EQU   *
*                                       . OPEN FAILURE SYSPRINT
         WTO   MF=(E,WTO2)              . ISSUE WTO
         LA    R3,WORKL                 . 3 - LENGTH OF DYNAMIC AREA
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN R,                    . FREEMAIN OF DYNAMIC AREA     C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . 14 -> RETURN ADDRESS
         LA    R15,10                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 - 12
         BR    R14                      . RETURN
         SPACE 2
C0006    EQU   *
*                                       . OPEN FAILURE VSAM
         ST    R15,REG15                . SAVE 15
         WTO   MF=(E,WTO3)              . ISSUE WTO
         L     R2,@ACB                  . 2 -> ACB
         LA    R3,OPENERR               . 3 -> ERROR CODE
         LA    R9,SHOWERR               . 9 - LENGTH OF PARAMETER LIST
         GETMAIN R,                     . ACQUIRE PARAMETER LIST AREA  C
               LV=(R9)
         LR    R9,R1                    . 9 -> PARAMETER LIST STORAGE
         SHOWCB ACB=(R2),               . OBTAIN ACB ERROR CODE        C
               AREA=(R3),                                              C
               FIELDS=ERROR,                                           C
               LENGTH=4,                                               C
               MF=(G,(R9),SHOWERR)
         LM    R2,R4,VSAMERR            . 2 - 4 VSAM ERROR CODES
         ABEND 102,                     . ABEND THE TASK               C
               DUMP
C0007    EQU   *
*                                       . ACB PERMITS SPANNED RECORDS
         WTO   MF=(E,WTO4)              . ISSUE WTO
         LA    R3,WORKL                 . 3 - LENGTH OF DYNAMIC AREA
         LR    R2,R13                   . 2 -> DYNAMIC AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN R,                    . FREEMAIN OF DYNAMIC AREA     C
               A=(R2),                                                 C
               LV=(R3)
         L     R14,12(,R13)             . 14 -> RETURN ADDRESS
         LA    R15,20                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 - 12
         BR    R14                      . RETURN
         TITLE 'MAIN PROCESSING LOGIC OF PROGRAM'
*        1.    GET THE NEXT LOGICAL RECORD
*        2.    IF JOB STEP PARAMETER SPECIFIED, DETERMINE IF IN
*              REQUIRED RANGE
*        3.    DETERMINE THE LENGTH OF THE RECORD READ
*        4.    PREPARE RECORD HEADING LINE
*        5.    COMPUTE NUMBER OF "PASSES" TO PRINT RECORD
*        6.    CHECK IF PAGE HEADINGS REQUIRED
*        7.    FORMAT PRINT LINES
*
*        REGISTER USAGE
*        0                              . MACROS
*        1                              . MACROS
*        2                              . -> RPL
*                                       . COMPUTATIONS
*                                       . CVD INSTRUCTIONS
*        3                              . -> RECORD LENGTH
*                                       . COMPUTATION
*                                       . NUMBER OF PRINT "PASSES"
*        4                              . LENGTH OF PARAMETER LIST
*                                       . -> POSITION IN RECORD
*        5                              . NUMBER OF BYTES OF RECORD
*                                       .   STILL TO PRINT
*        6                              . -> OUTPUT DCB
*        7                              . BYTES TO OUTPUT THIS LINE
*        8                              . START BYTE # FOR LINE
*                                       . END BYTE # FOR LINE
*        9                              . -> PARAMETER LIST
*        10                             . BRANCH AND SAVE
         SPACE 2
MAINPROC EQU   *
         LA    R6,DDDCB                 . 6 -> DCB IN DYNAMIC AREA
D0001    EQU   *
         L     R2,@RPL                  . 2 -> RPL
         GET   RPL=(R2)                 . GET THE NEXT RECORD
         LTR   R15,R15                  . Q. VSAM GET OKAY?
         BNZ   D0008                    . A. NO - GET FAILED
         AP    #READ,=P'+1'             . INCREMENT RECORDS READ
         CLI   PARM,ON                  . Q. VALID JOB STEP PARAMETER?
         BNE   D0002                    . A. NO - PRINT THE RECORD
         CP    #READ,FROM#              . Q. BEFORE START OF RANGE?
         BL    D0001                    . A. YES - READ NEXT RECORD
         CP    #READ,TO#                . Q. BEYOND END OF RANGE?
         BH    D0007                    . A. YES - TERMINATE PROCESSING
D0002    EQU   *
         MVC   CONT,=9C' '              . INDICATE START OF RECORD
         LA    R3,LRECL                 . 3 -> RECORD LENGTH
         LA    R4,SHOWREC               . 4 - LENGTH OF PARAMETER LIST
         GETMAIN R,                     . ACQUIRE PARAMETER LIST AREA  C
               LV=(R4)
         LR    R9,R1                    . 9 -> PARAMETER LIST
         SHOWCB RPL=(R2),               . GET THE CURRENT LOGICAL      C
               AREA=(R3),               .   RECORD LENGTH              C
               FIELDS=RECLEN,                                          C
               LENGTH=4,                                               C
               MF=(G,(R9),SHOWREC)
         FREEMAIN R,                    . RELEASE PARAMETER LIST AREA  C
               A=(R9),                                                 C
               LV=(R4)
*                                       . COMPUTE NUMBER OF PRINT
*                                       .   "PASSES"
         L     R3,LRECL                 . 3 - RECORD LENGTH
         LR    R5,R3                    . 5 - RECORD LENGTH
         LA    R7,1                     . 7 - ONE
         C     R3,=F'+10000'            . Q. RECORD LENGTH > 10000?
         BNH   *+8                      . A. NO
         LA    R7,2                     . 7 - TWO
         SLR   R2,R2                    . 2 - ZERO
         D     R2,=F'+101'              . DIVIDE RECORD SIZE BY 101
         AR    R3,R7                    . INCREMENT QUOTIENT BY
*                                       .   CONTENT OF 7
         L     R4,@REC                  . 4 -> RECORD
         LA    R8,1                     . 8 - FIRST BYTE
D0003    EQU   *
*                                       . DETERMINE IF A FULL PRINT
*                                       .   LINE IS REQUIRED
         LA    R7,100                   . 7 - ONE HUNDRED
         CR    R7,R5                    . Q. PARTIAL PRINT LINE?
         BNH   D0004                    . A. NO
         LR    R7,R5                    . 7 - AMOUNT TO BE PRINTED
D0004    EQU   *
*                                       . PAGE HEADING PROCESS
         CP    #LINE,=P'+57'            . Q. HEADINGS REQUIRED?
         BL    D0005                    . A. NO - HEADINGS NOT REQUIRED
         MVC   LINE,TITLE               . MOVE TITLE INTO DYNAMIC AREA
         MVC   LINE+124(6),MASK5        . OUTPUT PAGE NUMBER EDIT MASK
         ED    LINE+124(6),#PAGE
         MVC   LINE+67(44),DSN          . OUTPUT DATA SET NAME
         PUT   (R6),                    . OUTPUT HEADINGS              C
               LINE
         PUT   (R6),                                                   C
               STITLE1
         PUT   (R6),                                                   C
               STITLE2
         MVC   LINE,STITLE3             . FORMAT RECORD HEADING
         L     R2,LRECL                 . 2 - RECORD LENGTH
         CVD   R2,WORKD
         MVC   LINE+41(6),MASK5
         ED    LINE+41(6),WORKD+5
         MVC   LINE+15(10),MASK9        . RECORD NUMBER
         ED    LINE+15(10),#READ
         MVC   LINE+53(9),CONT
         PUT   (R6),                    . OUTPUT RECORD HEADING        C
               LINE
         MVC   CONT,=C'CONTINUED'       . INDICATE CONTINUATION
*                                       .   FOR NEXT TIME POSSIBLY
         AP    #PAGE,=P'+1'             . INCREMENT PAGE NUMBER
         ZAP   #LINE,=P'+6'             . RESET LINE NUMBER
         B     D0006
D0005    EQU   *
         CLI   CONT,C'C'                . Q. REC NUMBER TO BE OUTPUT?
         BE    D0006                    . A. NO
         MVC   LINE,STITLE3             . FORMAT RECORD HEADING
         L     R2,LRECL                 . 2 - RECORD LENGTH
         CVD   R2,WORKD
         MVC   LINE+41(6),MASK5
         ED    LINE+41(6),WORKD+5
         MVC   LINE+15(10),MASK9        . RECORD NUMBER
         ED    LINE+15(10),#READ
         MVC   LINE+53(9),CONT
         PUT   (R6),                    . OUTPUT RECORD NUMBER         C
               LINE
         MVC   CONT,=C'CONTINUED'
         AP    #LINE,=P'+2'             . INCREMENT LINES OUTPUT
D0006    EQU   *
*                                       . FORMAT PRINT LINES
         MVI   OUTLINE,C'0'             . SET ASA CONTROL CHARACTER
         BCTR  R7,R0                    . DECREMENT 7 BY ONE
         MVC   BYTES,=C'BYTES'          . OUTPUT BYTE RANGE BEING
         MVC   TO,=C' TO '              .   PRINTED
         CVD   R8,WORKD                 . START BYTE
         MVC   OUTSBYTE,MASK5
         ED    OUTSBYTE,WORKD+5
         LA    R8,0(R7,R8)              . INCREMENT 8 BY 7
         CVD   R8,WORKD                 . END BYTE
         MVC   OUTEBYTE,MASK5
         ED    OUTEBYTE,WORKD+5
         LA    R8,1(,R8)                . INCREMENT 8 BY ONE
         EX    R7,MVC                   . OUTPUT EBCDIC DATA
         TR    OUTLINED,PRTBL           . MAKE PRINTABLE
         PUT   (R6),                    . OUTPUT CHARACTER DATA        C
               OUTLINE
         MVI   OUTLINE,C' '             . RESET ASA CONTROL CHARACTER
         MVC   OUTLINE+1(132),OUTLINE
         EX    R7,MVC                   . PROCESS ZONE NIBBLES
         EX    R7,NCZ
         EX    R7,TRZ
         PUT   (R6),                    . OUTPUT ZONE NIBBLES          C
               OUTLINE
         EX    R7,MVC                   . PROCESS NUMERIC NIBBLES
         EX    R7,NCN
         EX    R7,TRN
         PUT   (R6),                    . OUTPUT NUMERIC NIBBLES       C
               OUTLINE
         MVI   OUTLINED,C' '            . RE-INITIALIZE OUTPUT LINE
         MVC   OUTLINED+1(99),OUTLINED
         AP    #LINE,=P'+4'             . INCREMENT LINES PRINTED
         LA    R4,100(,R4)              . INDEX ALONG INPUT RECORD
         SH    R5,=H'+100'              . DECREMENT WHAT IS LEFT TO
*                                       .   PRINT IN RECORD
         BCT   R3,D0003                 . OUTPUT REST OF RECORD
         AP    #PRINT,=P'+1'            . INCREMENT RECORDS PRINTED
         B     D0001                    . GO GET NEXT RECORD
D0007    EQU   *
         BR    R10                      . EXIT
         TITLE 'MAIN PROCESSING - GET ERROR'
D0008    EQU   *
*                                       . GET FAILURE VSAM
         ST    R15,REG15                . SAVE 15
         WTO   MF=(E,WTO5)              . ISSUE WTO
         L     R2,@RPL                  . 2 -> RPL
         LA    R3,RPLFDBK               . 3 -> FEED BACK CODE
         LA    R9,SHOWFDB               . 9 - LENGTH OF PARAMETER LIST
         GETMAIN R,                     . ACQUIRE PARAMETER LIST AREA  C
               LV=(R9)
         LR    R9,R1                    . 9 -> PARAMETER LIST STORAGE
         SHOWCB RPL=(R2),               . OBTAIN RPL FEED BACK CODE    C
               AREA=(R3),                                              C
               FIELDS=FDBK,                                            C
               LENGTH=4,                                               C
               MF=(G,(R9),SHOWFDB)
         LM    R2,R4,VSAMERR            . 2 - 4 VSAM ERROR CODES
         ABEND 103,                     . ABEND TASK                   C
               DUMP
         TITLE 'END OF PROCESSING ROUTINE'
*        1.    OUTPUT TOTALS
*        2.    CLOSE FILES
*        3.    RELEASE BUFFER POOL
*
*        REGISTER USAGE
*        0                              . MACROS
*        1                              . MACROS
*        2                              . -> STORAGE AREA
*                                       . -> ACB
*        3                              . LENGTH STORAGE AREA
*        6                              . -> DCB
*        10                             . BRANCH AND SAVE
         SPACE 2
TERMIN   EQU   *
         MVC   LINE,STITLE4             . PROGRAM EOJ
         MVC   LINE+17(10),MASK9        . OUTPUT RECORDS PRINTED
         ED    LINE+17(10),#PRINT
         PUT   (R6),                                                   C
               LINE
         L     R2,@KEY                  . 2 -> KEY STORAGE
         L     R3,#KEY                  . 3 - LENGTH OF KEY STORAGE
         FREEMAIN R,                    . FREE KEY STORAGE             C
               A=(R2),                                                 C
               LV=(R3)
         L     R2,@ACB                  . 2 -> ACB
         MVC   DMAL(8),OPEN             . ZAP DATA MANAGEMENT ADDRESS
*                                       .   LIST
         CLOSE ((R2),,(R6)),            . CLOSE FILES                  C
               MF=(E,DMAL)
         FREEPOOL (R6)                  . RELEASE BUFFER POOL
         BR    R10
         TITLE 'EXECUTED INSTRUCTIONS AND LIST FORM INSTRUCTIONS'
*                                       . EXECUTED INSTRUCTIONS
MVC      MVC   OUTLINED(0),0(R4)
NCN      NC    OUTLINED(0),=100X'0F'
NCZ      NC    OUTLINED(0),=100X'F0'
TRN      TR    OUTLINED(0),NUMTBL
TRZ      TR    OUTLINED(0),ZONETBL
*                                       . LIST FORM INSTRUCTIONS
OPEN     OPEN  (,,,),                                                  C
               MF=L
WTO1     WTO   'JOB STEP PARAMETER NOT NUMERIC',                       C
               ROUTCDE=11,                                             C
               MF=L
WTO2     WTO   'OPEN FAILURE FOR FILE SYSPRINT',                       C
               ROUTCDE=11,                                             C
               MF=L
WTO3     WTO   'OPEN FAILURE FOR FILE VSAM',                           C
               ROUTCDE=11,                                             C
               MF=L
WTO4     WTO   'OBJECT PERMITS SPANNED RECORDS',                       C
               ROUTCDE=11,                                             C
               MF=L
WTO5     WTO   'GET FAILURE FOR FILE VSAM',                            C
               ROUTCDE=11,                                             C
               MF=L
         TITLE 'DATA AREAS'
*                                       . PRINT LINES
TITLE    DC    CL21'1'
         DC    CL46'HEXADECIMAL AND CHARACTER LISTING OF DATASET: '
         DS    CL44
         DC    CL9' '
         DC    CL4'PAGE'
         DS    CL6
         DC    CL3' '
STITLE1  DC    CL33' '
         DC    CL50'         1         2         3         4         5'
         DC    CL50'         6         7         8         9         0'
STITLE2  DC    CL33' '
         DC    CL50'12345678901234567890123456789012345678901234567890'
         DC    CL50'12345678901234567890123456789012345678901234567890'
STITLE3  DC    CL15'0RECORD NUMBER '
         DS    CL10
         DC    CL16'    RECORD SIZE '
         DS    CL6
         DC    CL6' '
         DS    CL9
         DC    CL71' '
STITLE4  DC    CL17'-RECORDS PRINTED '
RECOUT   DC    CL10' '
         DC    CL106' '
MASK5    DC    X'402020202120'          . EDIT MASK
MASK9    DC    X'40202020202020202120'  . EDIT MASK
ZEROS    DC    18C'0'
         TITLE 'TRANSLATE TABLES'
NUMTBL   DC    C'0123456789ABCDEF'
ZONETBL  DC    C'0',15C'*',C'1',15C'*',C'2',15C'*',C'3',15C'*'
         DC    C'4',15C'*',C'5',15C'*',C'6',15C'*',C'7',15C'*'
         DC    C'8',15C'*',C'9',15C'*',C'A',15C'*',C'B',15C'*'
         DC    C'C',15C'*',C'D',15C'*',C'E',15C'*',C'F',15C'*'
PRTBL    DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'404B4B4B4B4B4B4B4B4B4A4B4C4D4E4F'
         DC    X'504B4B4B4B4B4B4B4B4B5A5B5C5D5E5F'
         DC    X'60614B4B4B4B4B4B4B4B4B6B6C6D6E6F'
         DC    X'4B4B4B4B4B4B4B4B4B4B7A7B7C7D7E7F'
         DC    X'4B8182838485868788894B4B4B4B4B4B'
         DC    X'4B9192939495969798994B4B4B4B4B4B'
         DC    X'4B4BA2A3A4A5A6A7A8A94B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4BC1C2C3C4C5C6C7C8C94B4B4B4B4B4B'
         DC    X'4BD1D2D3D4D5D6D7D8D94B4B4B4B4B4B'
         DC    X'4B4BE2E3E4E5E6E7E8E94B4B4B4B4B4B'
         DC    X'F0F1F2F3F4F5F6F7F8F94B4B4B4B4B4B'
         TITLE 'CONTROL BLOCKS'
SYSPRINT DCB   BLKSIZE=15428,                                          C
               DDNAME=SYSPRINT,                                        C
               DSORG=PS,                                               C
               LRECL=133,                                              C
               MACRF=PM,                                               C
               RECFM=ABFS
DCBLEN   EQU   *-SYSPRINT               . LENGTH OF DCB
DUMMYDCB DCB   DDNAME=VSAM,             . DUMMY DCB FOR RDJFCB         C
               DSORG=PS,                                               C
               MACRF=GM
         TITLE 'DUMMY SECTIONS'
WORKAREA DSECT                          . DYNAMIC AREA
         DS    18F                      . STANDARD OS SAVE AREA
WORKD    DS    D                        . USED FOR CVD INSTRUCTIONS
@ACB     DS    F                        . ADDRESS OF ACB
@EXIT    DS    F                        . ADDRESS OF EXIT LIST
@KEY     DS    F                        . ADDRESS OF KEY AREA
@REC     DS    F                        . ADDRESS OF RECORD READ
@RPL     DS    F                        . ADDRESS OF RPL
#KEY     DS    F                        . NUMBER OF BYTES IN KEY
DCBEXIT  DS    F                        . DCB EXIT USED RDJFCB
DMAL     DS    2F                       . DATA MANAGEMENT ADDRESS LIST
LRECL    DS    F                        . LENGTH OF RECORD READ
VSAMERR  DS    0F                       . VSAM ERROR AREA
REG15    DS    F                        . CONTENT OF REGISTER 15
OPENERR  DS    F                        . ACB ERROR CODE
RPLFDBK  DS    F                        . RPL FEED BACK CODE
OBJTYP   DS    C                        . TYPE OF OBJECT
PARM     DS    C                        . JOB STEP PARAMETER INDICATOR
ON       EQU   X'01'                    . LOGICAL ON
OFF      EQU   X'00'                    . LOGICAL OFF
#READ    DS    PL5                      . NUMBER OF RECORDS READ
#PRINT   DS    PL5                      . NUMBER OF RECORDS PRINTED
FROM#    DS    PL5                      . START OF RANGE
TO#      DS    PL5                      . END OF RANGE
#LINE    DS    PL2                      . LINE COUNTER
#PAGE    DS    PL3                      . PAGE COUNTER
CONT     DS    CL9                      . RECORD CONTINUATION OVER PAGE
TEST     DS    CL18                     . NUMERIC TEST WORK AREA
DSN      DS    CL44                     . DATA SET NAME FROM JFCB
LINE     DS    CL133                    . OUTPUT PRINT LINE - TITLES
OUTLINE  DS    CL7                      . OUTPUT DATA LINE
BYTES    DS    CL5
OUTSBYTE DS    CL6
TO       DS    CL4
OUTEBYTE DS    CL6
         DS    CL5
OUTLINED DS    CL100
         DS    0F
DDDCB    DS    CL(DCBLEN)               . AREA FOR DCB
         DS    0F
         IEFJFCBN                       . JFCB MAPPING
WORKL    EQU   *-WORKAREA               . LENGTH OF DYNAMIC AREA
         DCBD  DEVD=DA,                 . DSECT MAPPING DCB            C
               DSORG=PS
         IFGACB                         . DSECT MAPPING ACB
         TITLE 'LITERALS AND TERMINATION'
VSAMRECP CSECT                          . RE-ESTABLISH CSECT
         LTORG
         END


Dave Loveluck
Instructor/Consultant (USA)                        c Dave Loveluck 1993

