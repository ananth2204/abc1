Mapping VSAM dataspaces on FBA devices

When reviewing VSAM dataspace consumption, I often find it
useful to review the space map that is part of the output from
the IDCAMS LISTCAT SPACE ALL command. This shows,
in groupings of contiguous blocks, which blocks are in use and
which are free. This not only helps to show the total amount
still free, but also the size of the areas that are still free, since
these are often fragmented within the dataspace.

To improve the information visually, I wrote the VSAMMAPS
EXEC which converts the hexadecimal 'run length codes' in
the IDCAMS output into graphical characters, with each print
position representing 64 FBA blocks. (This is the minimum
allocation value for our 9336 drives.) Please note that, for
brevity, the sample output in Figure 1 has been truncated on
the right and shortened in total length. The actual space map
lines print 132 characters per line.

To create the input to the EXEC, submit an IDCAMS job that
has the LISTCAT SPACE ALL command, followed by the
LISTCAT ALL command. Route the output to your CMS
machine. When it arrives, issue the CMS command READ
VSAMMAPS INPUT A. This will create the necessary CMS
file, and will strip its carriage controls.

Running VSAMMAPS EXEC produces the print file
VSAMMAPS OUTPUT A, which includes carriage controls.
In the space map, all print positions that represent used blocks
display as asterisks, and those that represent 'free' display as
full stops. The EXEC can be further customized to display
something other than just asterisks for certain key files. The
REXX variable clusterTab defines certain cluster name prefixes
that are to be represented by a single character. For example,
any cluster beginning with the characters RECORDS.DLI will
display using an R in the space map, instead of just an *.

Although this EXEC was written to handle FBA DASD, it
could be modified to support CKD instead. Whichever is
chosen, VSAMMAPS enables anyone responsible for DASD
planning to produce an at-a-glance representation of their
current VSAM allocations.


VSAMMAPS EXEC

/* */
numeric digits(12)
fin  = 'VSAMMAPS INPUT A'
fout = 'VSAMMAPS OUTPUT A'
/*------------------------------*/
/* Parse LIST SPACE ALL info... */
/*------------------------------*/
say 'Parsing LIST SPACE ALL...'
volcnt = 0
endit = 'N'
do until rc ¬= 0 | endit = 'Y'
   'EXECIO 1 DISKR' fin '0'
   if rc = 0 then do
      parse pull inrec
      call Seek
      end
   end
/*-------------------------------*/
/* Print volume summary lines... */
/*-------------------------------*/
say 'Printing Volume Summaries...'
orec = '1VSAMMAPS FOR' catnam 'ON' data(u) 'AT' time()
'EXECIO 1 DISKW' fout '0 V 133 ( VAR OREC'
orec = '0VOLUME DS FILES TOT-BLOCK USE-BLOCK USE% FREE-BLOCK HIGH-FREE'
'EXECIO 1 DISKW' fout '0 ( VAR OREC'
do i = 1 to volcnt
   do j = 1 to DSPTOT.i
      BLFRE.i.j = BLKTOT.i.j - BLKUSE.i.j
      USEPCT.i.j = (BLKUSE.i.j / BLKTOT.i.j) * 100
      RLCTOT.i.j = length(SPCMAP.i.j) / 8
      if pos('.',(RLCTOT.i.j / 2)) > 0 then do
         RLCTOT.i.j = RLCTOT.i.j + 1
         SPCMAP.i.j = SPCMAP.i.j || '00000000'
         end
      HIFREE.i.j = 0
      mappos = -7
      do k = 2 to RLCTOT.i.j by 2
         mappos = mappos + 16
         freerlc = c2d(x2c(substr(SPCMAP.i.j,mappos,8)))
         if freerlc > HIFREE.i.j then do
            HIFREE.i.j = freerlc
            end
         end
      orec = '0' || substr(VOLNAM.i.1,6) || ' '
      orec = orec || format(j,2) || ' '
      orec = orec || format(DSNTOT.i.j,5) || ' '
      orec = orec || format(BLKTOT.i.j,9) || ' '
      orec = orec || format(BLKUSE.i.j,9) || '  '
      orec = orec || format(USEPCT.i.j,3,0) || '  '
      orec = orec || format(BLKFRE.i.j,9) || ' '
      orec = orec || format(HIFREE.i.j,9)
      'EXECIO 1 DISKW' fout '0 ( VAR OREC'
      end
   end
/*-----------------------------------------*/
/* Build preliminary graphic space maps... */
/*-----------------------------------------*/
say 'Building Preliminary Maps...'
do i = 1 to volcnt
   do j = 1 to DSPTOT.i
      mappos = -7
      mapchr  = '*'
      OMAP.i.j = ''
      do k = 1 to RLCTOT.i.j

         mappos = mappos + 8
         rlc = c2d(x2c(substr(SPCMAP.i.j,mappos,8)))
         if rlc > 0 then do
            rlc2 = rlc / 64
            OMAP.i.j = OMAP.i.j || substr(mapchr,1,rlc2,mapchr)
            end
         if mapchr = '*' then mapchr = '.'; else mapchr = '*'
         end
      end
   end
/*----------------------------------------*/
/* table of important cluster prefixes... */
/*----------------------------------------*/
clusterTab =               'RECORDS.DLI R '
clusterTab = clusterTab || 'COURSE.DLI C '
clusterTab = clusterTab || 'STAFF.DLI S '
clusterTab = clusterTab || 'BK. B '
clusterTab = clusterTab || 'EZT. E '
clusterTab = clusterTab || 'FINAID.SAFE A '
clusterTab = clusterTab || 'IC. I '
clusterTab = clusterTab || 'PROD.CICS P '
clusterTab = clusterTab || 'SORT. Z '
clusterTab = clusterTab || 'SQL Q '
ctwords = words(clusterTab)
/*------------------------*/
/* parse LIST ALL info... */
/*------------------------*/
say 'Parsing LIST ALL...'
useit = 'N'
do until rc ¬= 0
   'EXECIO 1 DISKR' fin '0'
   if rc = 0 then do
      parse pull inrec
      call Seek2
      end
   end
/*---------------------------*/
/* Print final space maps... */
/*---------------------------*/
say 'Printing Final Maps...'
do i = 1 to volcnt
   do j = 1 to DSPTOT.i
      orec = '0' || VOLNAM.i || ' ' || format(j,2) || ' SPACE MAP:'
      'EXECIO 1 DISKW' fout '0 ( VAR OREC'
      olines = length(OMAP.i.j) / 132
      p = pos('.',olines)
      if p > 0 then olines = substr(olines,1,(p-1)) + 1
      mappos = -131
      do k = 1 to olines
         mappos = mappos + 132
         orec = '0' || substr(OMAP.i.j,mappos,132)
         'EXECIO 1 DISKW' fout '0 ( VAR OREC'
         end
      end
   end
/*--------------*/
/* Terminate... */
/*--------------*/
exit 0
/* Procedure to parse LIST SPACE ALL output ... */
Seek:
select
   when substr(inrec,1,8) = 'IDC0001I' then do
        endit = 'Y'
        xlast = 'END'
        end
   when substr(inrec,30,24) = 'LISTING FROM CATALOG -- ' then do
        catnam = strip(substr(inrec,54,48))
        xlast = 'CAT'
        end
   when substr(inrec,1,16) = 'VOLUME -------- ' then do
        volcnt = volcnt + 1
        VOLNAM.volcnt = substr(inrec,17,6)
        DSPTOT.volcnt = 0
        dspcnt = 0
        xlast = 'VOL'
        end
   when substr(inrec,1,14) = '     DATASPACE' then do
        dspcnt = dspcnt + 1
        DSPTOT.volcnt = dspcnt
        xlast = 'DSP'
        end
   when substr(inrec,1,15) = '       DATASETS' then do
        inrec = translate(inrec,' ','-')
        DSNTOT.volcnt.dspcnt = strip(substr(inrec,27,5))
        dsncnt = 0
        xlast = 'DSET'
        end
   when substr(inrec,1,19) = '       BLOCKS-TOTAL' then do
        inrec = translate(inrec,' ','-')
        BLKTOT.volcnt.dspcnt = strip(substr(inrec,20,12))
        BLKBEG.volcnt.dspcnt = strip(substr(inrec.47,14))
        BLKEND.volcnt.dspcnt = BLKBEG.volcnt.dspcnt + ,
                               BLKTOT.volcnt.dspcnt - 1
        SPCMAP.volcnt.dspcnt = strip(substr(inrec,86,34))
        xlast = 'BTOT'
        end
   when substr(inrec,1,85) = ' ' & xlast = 'BTOT' then do
        a = SPCMAP.volcnt.dspcnt
        b = strip(substr(inrec,86,34))
        SPCMAP.volcnt.dspcnt = a || b
        end
   when substr(inrec,1,18) = '       BLOCKS-USED' then do
        inrec = translate(inrec,' ','-')
        BLKUSE.volcnt.dspcnt = strip(substr(inrec,20,12))
        xlast = 'BUSE'
        end
   when substr(inrec,1,16) = '         DSN----' then do
        dsncnt = dsncnt + 1
        DSNNAM.volcnt.dspcnt.dsncnt = strip(substr(inrec,17,48))
        xlast = 'DSN'
        end
   otherwise do
        xlast = 'JUNK'
        end
   end
return
/* Procedure to parse LIST ALL output ... */
Seek2:
select
   when substr(inrec,1,16) = 'CLUSTER ------- ' then do
        useit = 'N'
        clsnam = strip(substr(inrec,17,48))
        do i = 1 to (ctwords - 1) by 2
           z = word(clusterTab,i)
           if z = substr(clsnam,1,length(z)) then do
              chrsub = word(clusterTab,(i+1))
              useit = 'Y'
              leave i
              end
           end
        xlast = 'CLS'
        end
   when useit = 'N' then do
        nop
        end
   when substr(inrec,8,6) = 'VOLSER' then do
        inrec = translate(inrec,' ','-')
        volser = strip(substr(inrec,26,6))
        xlast = 'VSER'
        end
   when substr(inrec,8,9) = 'LOW-BLOCK' then do
        inrec = translate(inrec,' ','-')
        lowblk = strip(substr(inrec,18,14))
        xlast = 'LBLK'
        end
   when substr(inrec,8,10) = 'HIGH-BLOCK' then do
        inrec = translate(inrec,' ','-')
        hiblk = strip(substr(inrec,19,13))
        totblk = hiblk - lowblk + 1
        do i = 1 to volcnt
           if VOLNAM.i = volser then do j = 1 to DSPTOT.i
              if lowblk ¬< BLKBEG.i.j & hiblk ¬> BLKEND.i.j then do
                 opos = lowblk / 64
                 p = pos('.',opos)
                 if p > 0 then opos = substr(opos,1,(p-1)) + 1
                 ocnt = totblk / 64
                 OMAP.i.j = overlay(chrsub,OMAP.i.j,opos,ocnt,chrsub)
                 leave i
                 end
              end
           end
        xlast = 'HBLK'
        end
   otherwise do
        xlast = 'JUNK'
        end
   end
return

Lawrence Holder
Senior Programmer/Analyst
The University of Tennessee at Martin (USA)                  c UTMCC 1992

