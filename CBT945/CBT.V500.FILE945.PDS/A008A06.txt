Buffers and performance

There are many VSAM files that perform badly. In many
instances, performance improvements can be brought about
simply by changing the buffer allocation. This article suggest
ways of improving VSAM performance.

The first choice that a programmer must make is which mode
to use when accessing a VSAM file. The choices for a COBOL
programmer are sequential, random, and dynamic. For
sequential access, most buffers are allocated for data and one
or two for the index. For random access, most buffers are
allocated to the index, which is where most I/O is expected.
For dynamic access, most buffers are allocated for data in the
same way as for sequential. This is because dynamic access is
thought to select a record randomly, and then access records
sequentially from that point in the file. If a VSAM file is
opened using dynamic and accessed randomly this will result in
a lot of unnecessary I/O to the index because there will not be
enough buffers to keep the higher level indexes in memory.
Changing the access to random and recompiling the program
can dramatically improve its performance.

If a program does have the wrong buffer allocation, the
problem can be overcome by using the AMP parameter in JCL.
If a file is effectively being accessed randomly but the COBOL
program thinks it should be dynamic, extra buffer space can be
allocated for higher level indexes by using the BUFNI
parameter. It is also possible to specify data buffers with the
AMP parameter, for example:

      AMP=('BUFNI=4','BUFND=2/')

The default bufferspace for a KSDS is almost always too small.
The amount is one index CI and two data CIs. Poor
performance often results from using the default because extra
I/O is being performed.

For sequential files, one index CI plus STRNO is usually
enough. For data CIs, enough space to hold two tracks of data
records is usually considered to be optimal. For random files,
two data CIs are usually enough. For index CIs, enough space
to hold index records equal to the number of index levels plus
one for each string is considered to be a good working target.

Buffering cannot solve those problems that are caused by bad
choices for CI sizes in the first place. The size of an index CI
must be large enough to point to all the data CIs in a CA.
Failure to choose the correct CI size is a common mistake.

The IMBED parameter is considered by many people to
improve performance. It replicates the sequence set on the top
track of a cylinder. However, if the default bufferspace is used
for random processing, there is no performance advantage
because the HDA has to repeatedly move to read the high level
indexes and then move back to the sequence set cylinder.

In fact, the IMBED parameter offers no advantage to users of
3380 and 3390 disks with cache memory. On a 3330, IMBED
uses 3.3% of the dataspace, while on 3380s it uses 6.7% and
causes a degradation in performance. If cache is used, the
sequence set will often remain in cache memory and so its
repetitive placement on the disk is unnecessary and can impair
performance.

J Phillips
Senior Consultant (UK)

