Display allocation information for VSAM datasets

The VSAT program is used to display allocation information
for all types of VSAM datasets.  VSAT will report on statistics
using the Access Method Control Block.  The VSAT listing is
similar to the formatted listing given by the DSAT program
from CBT.  VSAT may be invoked from a LINKLIST library
through either TSO or batch.  On TSO, type in VSAT at the
READY prompt or at option 6 (TSO Command Processor) of ISPF.

The following instructions are displayed for TSO invocations
only.

INPUT IS CLUSTER NAME STARTING IN COL 1 W/O QUOTES
      AND IS ALLOCATED TO SYSIN
OUTPUT IS ALLOCATED TO SYSOUT
WHEN YOU ARE FINISHED TYPE IN /* TO END

As the instructions state, the SYSIN and SYSOUT DDnames
must be allocated to the terminal.  At this point you may key in
a VSAM cluster name. You can key in as many cluster names
as necessary.  When you have finished, key in /* to end the
program input.

If CISV.PROD.MXRF is the cluster name entered, the VSAT
listing shown in Figure 1 would result.

For batch invocation, the following JCL can be used.

//JOBNAME JOB MSGCLASS=?,CLASS=?
//VSAT    EXEC PGM=VSAT
//STEPLIB DD DSN=YOUR.STEPLIB,DISP=SHR    <==STEPLIB IF NOT IN LINKLIST
//SYSOUT  DD SYSOUT=?
//SYSIN   DD *
CISV.PROD.MXRF
CISV.TEST.MXRF
CISV.INTG.MXRF

An example of the batch VSAT listing is shown in Figure 2.

In the reports, the following abbreviations are used:

TYPE
      KS-DA - KSDS cluster data component
      KS-IX - KSDS cluster index component
      ES-DA - ESDS cluster data component
      RR-DA - RRDS cluster data component
      LD-DA - LDS cluster data component.

LRECL      The maximum LRECL of the data component or
            the index component.

K-LEN      The key length of the respective component.  Zero
            will be displayed if it is not a KSDS type cluster.

RKP      The relative key position of the respective component.

CISZ      The CI size of the respective component.

%USED      The amount of primary space used in the component.

XTNT      The number of extents used in the component.

SPLITS CI/CA
      The number of CI splits and CA splits in the component.

RECORDS TOTAL-INSERT-DELETE
      The total number of records, records inserted, and records
      deleted within the component.


VSAT

*      R0  = REASON CODE FOR DISPLAY ERROR                            *
*      R1  = ADDRESS OF COMMON BUFFER OR PARMLIST                     *
*      R2  = USED FOR EVEN-ODD PAIR IN DIVIDE                         *
*      R3  = USED FOR EVEN-ODD PAIR IN DIVIDE                         *
*      R4  = WORK REGISTER FOR DYNALLOC                               *
*      R5  = WORK AREA FOR FORMATTING PRINT                           *
*      R6  = WORK AREA FOR DIVIDE                                     *
*      R7  = STORAGE AREA FOR PRINT LINE                              *
*      R8  =                                                          *
*      R9  = WORK AREA USED FOR PRINT MASKING                         *
*      R10 =                                                          *
*      R11 = BASE REGISTER                                            *
*      R12 = SECOND BASE REGISTER                                     *
*      R13 = SAVE AREA AND SAVE AREA POINTER                          *
*      R14 = CONTENTS OF REGISTERS UPON ENTRY                         *
*      R15                                                            *

Editor's note: register equates go here.

VSAT CSECT
         AMODE 24
         RMODE 24
         SAVE  (14,12)                   SAVE REGISTERS
         LR    R11,R15                   SET BASE REG FROM ENTRY ADDR.
         USING VSAT,R11                  ADDRESSABILITY FOR ASSEMBLER
         L     R12,$VSAT2                SET R12 FOR SECOND BASE REG
         USING VSAT+4096,R12             ADDRESSABILITY FOR 2ND BASE
         ST    R13,SAVE+4                STORE BACKWARD SAVEAREA PTR
         LA    R14,SAVE                  ADDRESS CURRENT SAVE AREA
         ST    R14,8(R13)                STORE FORWARD SAVEAREA PTR
         LR    R13,R14                   PUT SAVEAREA ADDR IN R13
*        CHECK FOR TSO OR BATCH INVOCATION                            *
START    L     R2,0(,R1)              ADDR. OF COMM. BUFFER OR PARMLIST
         LH    R3,0(,R2)              GET PARM LENGTH
         LTR   R2,R2                  IS CALLER TSO OR BATCH
         BL    BATCH                  BATCH.... GO TO BATCH ROUTINE
*        OPEN SYSOUT DD IF TSO ENVOCATION                             *
TSO      OPEN  (MSGDCB,OUTPUT)            OPEN MSG DATASET (SYSOUT)
         LA    R7,MSGOPERR                POINT TO SYSOUT OPEN ERROR
         TM    MSGDCB+48,X'10'            GOOD OPEN?  CHECK DCBOFLGS
*                                              NUMBER 3
         BNO   NOCLOSE                    NO....SYSOUT OPEN ERROR
INFO     PUT   MSGDCB,SPACES              PRINT LINE OF SPACES
         LA    R7,INFO0                   POINT TO INPUT INFO0 MESSAGE
         PUT   MSGDCB,0(R7)               PRINT MESSAGE
         LA    R7,INFOA                   POINT TO INPUT INFOA MESSAGE
         PUT   MSGDCB,0(R7)               PRINT MESSAGE
         LA    R7,INFOB                   POINT TO INPUT INFOB MESSAGE
         PUT   MSGDCB,0(R7)               PRINT MESSAGE
         LA    R7,INFO1                   POINT TO TSO INFO1 MESSAGE
         PUT   MSGDCB,0(R7)               PRINT MESSAGE
         PUT   MSGDCB,SPACES              PRINT LINE OF SPACES
         B     OPENINC                    MSGDCB IS OPEN....OPEN SYSIN
*        OPEN SYSOUT DD FOR BATCH USE                                 *
BATCH    OPEN  (MSGDCB,OUTPUT)            OPEN MSG DATASET (SYSOUT)
         LA    R7,MSGOPERR                POINT TO SYSOUT OPEN ERROR
         TM    MSGDCB+48,X'10'            GOOD OPEN?  CHECK DCBOFLGS
*                                              NUMBER 3
         BNO   NOCLOSE                    NO....SYSOUT OPEN ERROR
*        OPEN SYSIN DD                                                *
OPENINC  OPEN  (INCARDS,INPUT)
         LA    R7,OPERRIN                 POINT TO OPEN ERROR
         TM    INCARDS+48,X'10'           GOOD OPEN?  CHECK DCBOFLGS
*                                              NUMBER 3
         BNO   NOCLOSE                    NO....SYSIN OPEN ERROR.
READLOOP GET   INCARDS,INCAREA
         CLI   INCLUST,C' '               BLANK NAME ENTERED ?
         BE    BADINPUT                         YES....ISSUE MESSAGE
         LA    R4,CLUSTIN                 POINT AT RECEIVING AREA
         MVC   0(44,R4),INCLUST           MOVE SYSIN TO CLUSTIN
*                ALLOCATE THE CLUSTER TO BE DISPLAYED
ALLOC8   CNOP  0,4           ALIGN LIST TO FULLWORD
         BAL   1,IGX0020     BRANCH AROUND LIST, POINT REG1 TO LIST
AK0ORG   DC     0F'0'
*                SVC 99 INPUT REQUEST BLOCK
AK0RBP   DS    0F
AK0RBPTR DC    A(AK0RB+X'80000000')    REQUEST BLOCK POINTER
AK0RB    DS    0F
AK0RBLN  DC    AL1(AK0RBEND-AK0RB)     LENGTH OF REQUEST BLOCK
AK0VERB  DC    AL1(S99VRBAL)    VERB CODE
AK0FLAG1 DS    0CL2             FLAGS
AK0FLG11 DC    AL1(0)           FIRST FLAGS BYTE
AK0FLG12 DC    AL1(0)           SECOND BYTE OF FLAGS
AK0RSC   DS    0CL4             REASON CODE FIELDS
AK0ERROR DC    XL2'0'           ERROR REASON CODE
AK0INFO  DC    XL2'0'           INFORMATION REASON CODE
AK0TXTPP DC    A(AK0TUPL)       ADDR OF LIST OF TEXT UNIT PTRS
AK0RSV01 DC    F'0'             RESERVED
AK0FLAG2 DS    0CL4             FLAGS FOR AUTHORIZED FUNCTIONS
AK0FLG21 DC    AL1(0)           FIRST BYTE OF FLAGS
AK0FLG22 DC    AL1(0)           SECOND BYTE OF FLAGS
AK0FLG23 DC    AL1(0)           THIRD BYTE OF FLAGS
AK0FLG24 DC    AL1(0)           FOURTH BYTE OF FLAGS
AK0RBEND EQU   *                END MARKER
* SVC 99 TEXT UNIT POINTER LIST
AK0TUPL  DS    0F                      TEXT UNIT POINTER LIST
AK0PTR1  DC    A(AK0TU1)               1ST TEXT UNIT POINTER, DDNAM
AK0PTR2  DC    A(AK0TU2)               2ND TEXT UNIT POINTER, DSNAM
AK0PTR3  DC    A(AK0TU3+X'80000000')   3RD TEXT UNIT POINTER, STATS
* SVC 99 TEXT UNITS
AK0TU1   DS    0F                 BEGIN 1ST TEXT UNIT, DALDDNAM
AK0KEY1  DC    AL2(DALDDNAM)      1ST KEY
AK0NUM1  DC    AL2(1)             # OF LENGTH+PARAMETER ENTRIES  .XCHK
AK0ENT1  DS    0C                 ENTRY OF LENGTH+PARAMETER      .XCHK
AK0LNG1  DC    AL2(7)             LENGTH OF 1ST PARM. OF 1ST KEY .XCHK
AK0DDNAM DS    0CL7               CREATE LABEL FOR USER
AK0PAR1  DC    CL7'CLUSTIN'       VALUE OF 1ST PARM. OF 1ST KEY  .XCHK
AK0TU2   DS    0F                 BEGIN 2ND TEXT UNIT, DALDSNAM
AK0KEY2  DC    AL2(DALDSNAM)      2ND KEY
AK0NUM2  DC    AL2(1)             # OF LENGTH+PARAMETER ENTRIES  .XCHK
AK0ENT2  DS    0C                 ENTRY OF LENGTH+PARAMETER      .XCHK
AK0LNG2  DC    AL2(44)            LENGTH OF 1ST PARM. OF 2ND KEY .XCHK
AK0DSNAM DS    0CL44              CREATE LABEL FOR USER
AK0PAR2  DC    CL44' '            VALUE OF 1ST PARM. OF 2ND KEY  .XCHK
AK0TU3   DS    0F                 BEGIN 3RD TEXT UNIT, DALSTATS
AK0KEY3  DC    AL2(DALSTATS)      3RD KEY
AK0NUM3  DC    AL2(1)             # OF LENGTH+PARAMETER ENTRIES  .XLAT
AK0ENT3  DS    0C                 ENTRY OF LENGTH+PARAMETER      .XLAT
AK0LNG3  DC    AL2(1)             LENGTH OF 1ST PARM. OF 3RD KEY .XLAT
AK0PAR3  DC    AL1(X'08')         VALUE OF 1ST PARM. OF 3RD KEY  .XLAT
         DS    0D                 FILL OUT DATA SECTION
AK0AK0A  EQU   *-AK0ORG           CALCULATE THE HEX LENGTH
AK0DSECT DS    CL(AK0AK0A)        NOW L'&CEC#P.DSECT AVAILABLE
IGX0020  DS    0H                 BRANCHED AROUND LIST
         MVC   AK0PAR2,CLUSTIN    1ST PARM. OF 2ND KEY  .XCHK .AAACH
         DYNALLOC
         MVC   DYNRCLUS,INCLUST           MOVE CLUSTER NAME TO MSG
         LA    R7,DYNERR                  POINT TO DYNALLOC ERROR
         LTR   R15,R15                    SUCCESSFUL DYNALLOC
         BNZ   DYNAERR                    NOT ZERO PUT ERROR MSG
*        SETUP AND PRINT HEADINGS                                     *
         MVC   CLUSTHD,INCLUST            MOVE CLUSTER NAME TO MSG
         PUT   MSGDCB,SPACES              PRINT LINE OF SPACES
         PUT   MSGDCB,CLHEAD              PRINT VSAM FILE NAME
*        OPEN VSAM DATASET                                            *
OPENVSAM OPEN  VSAMACB                    OPEN VSAM CLUSTER SEQUENTIAL
         LA    R7,OPERR                   POINT TO OPEN ERROR
         TM    INCARDS+48,X'10'           GOOD OPEN?  CHECK DCBOFLGS
*                                              NUMBER 3
         BNO   NOCLOSE                    NO....SYSIN OPEN ERROR.
*        SET UP REPORT LINE FOR PRINT                                 *
         MVI   REPORT,X'40'               MOVE SPACE TO FIRST BYTE
         MVC   REPORT+1(79),REPORT        SPACE OUT REMAINDER
         MVI   RDASH,C'-'                 MOVE DASH TO REPORT LINE
         MVI   RPCENT,C'%'                MOVE % TO REPORT LINE
         MVI   RSLASH,C'/'                MOVE SLASH TO REPORT LINE
         SHOWCB AREA=DATAFACT,                                         X
               FIELDS=ACB,                                             X
               LENGTH=4,                                               X
               RPL=VSAMRPL
         LA    R7,SHOWERR                 POINT TO SHOWCB ERROR
         LTR   R15,R15                    SUCCESSFUL SHOWCB
         BNZ   PRTEND                     NOT ZERO PUT ERROR MSG
*        TEST TO SEE IF DATASET IS KSDS, ESDS, OR RRDS                *
         TESTCB ACB=VSAMACB,                                           X
               ATRB=LDS,                                               X
               ERET=TESTERR               TEST FOR ESDS
         MVC   RTYPED,LLDS                MOVE LDS TO O/P LINE
         BE    PROCESD                    DATASET IS LDS
         TESTCB ACB=VSAMACB,                                           X
               ATRB=ESDS,                                              X
               ERET=TESTERR               TEST FOR ESDS
         MVC   RTYPED,LESDS               MOVE ESDS TO O/P LINE
         BE    PROCESD                    DATASET IS ESDS
         TESTCB ACB=VSAMACB,                                           X
               ATRB=RRDS,                                              X
               ERET=TESTERR               TEST FOR RRDS
         MVC   RTYPED,LRRDS               MOVE RRDS TO O/P LINE
         BE    PROCESD                    DATASET IS RRDS
         TESTCB ACB=VSAMACB,                                           X
               ATRB=KSDS,                                              X
               ERET=TESTERR               TEST FOR KSDS
         MVC   RTYPED,LKSDS               MOVE KSDS TO O/P LINE
         BE    PROCESD                    DATASET IS ESDS
*        NAME ENTERED IS NOT AN ESDS, KSDS, RRDS, OR LDS TYPE CLUSTER *
         LA    R7,TYPERROR
         PUT   MSGDCB,0(R7)               PRINT MESSAGE
         B     END                        SKIP AND GET ANOTHER LCLUSTER
*        ACCESS THE AMDSB FOR THE DATA COMPONENT                      *
PROCESD EQU    *
         MVC   RTYPEC,LDATA               MOVE "DATA" TO HEADER
         PUT   MSGDCB,HEADER              PRINT HEADING LINE
         SHOWCB ACB=VSAMACB,              GET VALUSE FOR: KEY LENGTH,  X
               AREA=DISPLAY,              LRECL, RKP, CINV, ENDRBA,    X
               OBJECT=DATA,               DISPLAY DATA COMPONENT       X
               FIELDS=(KEYLEN,            NEXT, NCIS, NSSS, NLOGR,     X
               LRECL,RKP,CINV,            NINSR, HALCRBA AND NDELR     X
               ENDRBA,NEXT,NCIS,                                       X
               NSSS,NLOGR,NINSR,                                       X
               HALCRBA,NDELR),                                         X
               LENGTH=48
         LA    R7,SHOWERR                 POINT TO SHOWCB ERROR
         LTR   R15,R15                    SUCCESSFUL SHOWCB
         BNZ   PRTEND                     NOT ZERO PUT ERROR MSG
         L     R9,KEYLEN                  GET KEY LENGTH
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RKEYL,WORKB+3              MOVE KEYLEN TO O/P LINE
         L     R9,RKP                     GET RKP
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RRKP,WORKB+5               MOVE RKP TO O/P LINE
         L     R9,LRECL                   GET LRECL
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RLRECL,WORKB+3             MOVE LRECL TO O/P LINE
         L     R9,CINV                    GET CI SIZE
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RCINV,WORKB+3              MOVE TO O/P LINE
         SR    R2,R2                      LOAD R2 WITH ZEROS
         L     R3,ENDRBA                  LOAD R3 WITH HI USED RBA
         M     R2,=F'100'                 MULTIPLY BY 100 FOR PERCENT
         D     R2,HALCRBA                 DIVIDE HI-USED BY HI-ALLOC
         LR    R9,R3                      LOAD R9 WITH DIVIDEND
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RUSED,WORKB+5              MOVE TO O/P LINE
         L     R9,NEXT                    GET NUMBER OF EXTENTS
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNEXT,WORKB+4              MOVE TO O/P LINE
         L     R9,NCIS                    GET NUMBER OF CI SPLITS
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNCIS,WORKB+4              MOVE TO O/P LINE
         L     R9,NSSS                    GET NUMBER OF CA SPLITS
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNSSS,WORKB+4              MOVE TO O/P LINE
         L     R9,NLOGR                   GET NUMBER RECORDS
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNLOGR,WORKB               MOVE TO O/P LINE
         L     R9,NINSR                   GET NUMBER RECORDS INSERTED
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNINSR,WORKB+2             MOVE TO O/P LINE
         L     R9,NDELR                   GET NUMBER RECORDS DELETED
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNDELR,WORKB+2             MOVE TO O/P LINE
         LA    R7,REPORT                  LOAD REPORT LINE TO R7
         PUT   MSGDCB,0(R7)               PRINT REPORT DATA LINE
         CLC   =C'KS',RTYPED              IF TYPE NOT = KSDS
         BNE   END                           THEN GO TO END
*        NOW ACCESS THE AMDSB FOR THE INDEX COMPONENT                 *
PROCESI  EQU   *
         MVI   RPCENT,C' '                MOVE SLASH TO REPORT LINE
         MVC   RTYPEC,LINDEX              MOVE "INDEX" TO HEADER
         SHOWCB ACB=VSAMACB,              GET VALUSE FOR: KEY LENGTH,  X
               AREA=DISPLAY,              LRECL, RKP, CINV, ENDRBA,    X
               OBJECT=INDEX,              DISPLAY INDEX COMPONENT      X
               FIELDS=(KEYLEN,            NEXT, NCIS, NSSS, NLOGR,     X
               LRECL,RKP,CINV,            NINSR, HALCRBA AND NDELR     X
               ENDRBA,NEXT,NCIS,                                       X
               NSSS,NLOGR,NINSR,                                       X
               HALCRBA,NDELR),                                         X
               LENGTH=48
         LA    R7,SHOWERR                 POINT TO SHOWCB ERROR
         LTR   R15,R15                    SUCCESSFUL SHOWCB
         BNZ   PRTEND                     NOT ZERO PUT ERROR MSG
         L     R9,KEYLEN                  GET KEY LENGTH
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RKEYL,WORKB+3              MOVE KEYLEN TO O/P LINE
         L     R9,RKP                     GET RKP
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RRKP,WORKB+5               MOVE RKP TO O/P LINE
         L     R9,LRECL                   GET LRECL
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RLRECL,WORKB+3             MOVE LRECL TO O/P LINE
         L     R9,CINV                    GET CI SIZE
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RCINV,WORKB+3              MOVE TO O/P LINE
         MVC   RUSED,C' '                 MOVE SPACES TO %USED
         L     R9,NEXT                    GET NUMBER OF EXTENTS
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNEXT,WORKB+4              MOVE TO O/P LINE
         L     R9,NCIS                    GET NUMBER OF CI SPLITS
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNCIS,WORKB+4              MOVE TO O/P LINE
         L     R9,NSSS                    GET NUMBER OF CA SPLITS
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNSSS,WORKB+4              MOVE TO O/P LINE
         L     R9,NLOGR                   GET NUMBER RECORDS
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNLOGR,WORKB               MOVE TO O/P LINE
         L     R9,NINSR                   GET NUMBER RECORDS INSERTED
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNINSR,WORKB+2             MOVE TO O/P LINE
         L     R9,NDELR                   GET NUMBER RECORDS DELETED
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   RNDELR,WORKB+2             MOVE TO O/P LINE
         LA    R7,REPORT                  LOAD REPORT LINE TO R7
         B     PRTEND
FORMAT   CVD   R9,WORKA                   CONVERT TO PACKED DECIMAL
         OI    WORKA+7,X'0F'              SWAP LAST BIT
         MVC   WORKB,EDMASK               MOVE EDIT MASK TO WORKB
         ED    WORKB,WORKA+4              SUPPRESS LEADING ZEROS
         BR    R5                         GO BACK TO ADDRESS IN R5
*        PRINT CURRENT REPORT LINE                                    *
PRTEND   PUT   MSGDCB,0(R7)               PRINT MESSAGE
*        CLOSE CURRENT AND GET NEXT RECORD (CLUSTER NAMES COLS. 1-44) *
END      CLOSE VSAMACB                    CLOSE VSAM DATASET
*                THIS CODE IS FOR DE-ALLOCATION
         CNOP  0,4           ALIGN LIST TO FULLWORD
         BAL   1,IGX0633     BRANCH AROUND LIST, POINT REG1 TO LIST
ALHORG   DC     0F'0'
*                SVC 99 INPUT REQUEST BLOCK
ALHRBP   DS    0F
ALHRBPTR DC    A(ALHRB+X'80000000')   REQUEST BLOCK POINTER
ALHRB    DS    0F
ALHRBLN  DC    AL1(ALHRBEND-ALHRB)    LENGTH OF REQUEST BLOCK
ALHVERB  DC    AL1(S99VRBUN)         VERB CODE
ALHFLAG1 DS    0CL2                  FLAGS
ALHFLG11 DC    AL1(0)                FIRST FLAGS BYTE
ALHFLG12 DC    AL1(0)                SECOND BYTE OF FLAGS
ALHRSC   DS    0CL4                  REASON CODE FIELDS
ALHERROR DC    XL2'0'                ERROR REASON CODE
ALHINFO  DC    XL2'0'                INFORMATION REASON CODE
ALHTXTPP DC    A(ALHTUPL)            ADDR OF LIST OF TEXT UNIT PTRS
ALHRSV01 DC    F'0'                  RESERVED
ALHFLAG2 DS    0CL4                  FLAGS FOR AUTHORIZED FUNCTIONS
ALHFLG21 DC    AL1(0)                FIRST BYTE OF FLAGS
ALHFLG22 DC    AL1(0)                SECOND BYTE OF FLAGS
ALHFLG23 DC    AL1(0)                THIRD BYTE OF FLAGS
ALHFLG24 DC    AL1(0)                FOURTH BYTE OF FLAGS
ALHRBEND EQU   *                     END MARKER
* SVC 99 TEXT UNIT POINTER LIST
ALHTUPL  DS    0F                      TEXT UNIT POINTER LIST
ALHPTR1  DC    A(ALHTU1+X'80000000')   1ST TEXT UNIT POINTER, DDNAM
* SVC 99 TEXT UNITS
ALHTU1   DS    0F               BEGIN 1ST TEXT UNIT, DUNDDNAM
ALHKEY1  DC    AL2(DUNDDNAM)    1ST KEY
ALHNUM1  DC    AL2(1)           # OF LENGTH+PARAMETER ENTRIES  .XCHK
ALHENT1  DS    0C               ENTRY OF LENGTH+PARAMETER      .XCHK
ALHLNG1  DC    AL2(7)           LENGTH OF 1ST PARM. OF 1ST KEY .XCHK
ALHDDNAM DS    0CL7             CREATE LABEL FOR USER
ALHPAR1  DC    CL7'CLUSTIN'     VALUE OF 1ST PARM. OF 1ST KEY  .XCHK
         DS    0D               FILL OUT DATA SECTION
ALHALHA  EQU   *-ALHORG         CALCULATE THE HEX LENGTH
IGX0633  DS    0H               BRANCHED AROUND LIST
         DYNALLOC
         LA    R7,DEALERR                 POINT TO DYNALLOC ERROR
         LTR   R15,R15                    SUCCESSFUL DYNALLOC
         BNZ   NOCLOSE                    NOT ZERO PUT ERROR MSG
         B     READLOOP
*        CLOSE THE DATASETS AND RETURN                                *
EOF      LA    R7,NORMAL                  EOF SUCCESSFUL
         B     NOCLOSE
DEALERR  LA    R7,DALLER                  POINT TO SHOWCB ERROR
*
NOCLOSE  EQU   *
         PUT   MSGDCB,0(R7)               PRINT MESSAGE
         CLOSE (MSGDCB,,INCARDS)          CLOSE MESSAGE DATASET
         L     R13,SAVE+4                 POINT TO PREVIOUS SAVE AREA
         RETURN (14,12),RC=0              RETURN BACK TO SYSTEM
BADINPUT PUT   MSGDCB,SPACES              PRINT LINE OF SPACES
         LA    R7,INERROR1                POINT TO BAD INPUT MSG
         PUT   MSGDCB,0(R7)               PRINT MESSAGE
         LA    R7,INPTGRID                LOAD INPUT NAME GRID
         PUT   MSGDCB,0(R7)               PRINT INPUT NAME GRID
         MVC   INERRCLS,INCLUST           MOVE CLUSTER NAME TO MSG
         LA    R7,INERROR2                LOAD CLUSTER NAME DISPLAY
         PUT   MSGDCB,0(R7)               PRINT CLUSTER NAME DISPLAY
         B     READLOOP                   GET NEXT SYSIN RECORD
DYNAERR  PUT   MSGDCB,0(R7)               PRINT MESSAGE
         B     READLOOP                   GET NEXT SYSIN RECORD
*        ERROR HANDLING ROUTINE FOR TESTCB                            *
TESTERR  LR    R9,R15                     SETUP RETURN CODE FOR DISPLAY
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   TCBRC,WORKB+6              MOVE TO O/P LINE
         LR    R9,R0                      SETUP REASON CODE FOR DISPLAY
         BAL   R5,FORMAT                  FORMAT PRINT
         MVC   TCBRSN,WORKB+6             MOVE TO O/P LINE
         LA    R7,TESTMSG                 POINT TO TESTCB ERROR
         PUT   MSGDCB,0(R7)               PRINT ERROR MESSAGE
         B     END                        GET ANOTHER CLUSTER
         LTORG
SAVE     DS    18F
$VSAT2   DC    A(VSAT+4096)
CLUSTIN  DS    CL44
CLHEAD   DS    0CL80
CLUSTHD  DS    CL44
         DC    CL36' SPLITS           RECORDS           '
SPACES   DC    CL80' '
DISPLAY  DS    0F
KEYLEN   DS    F
LRECL    DS    F
RKP      DS    F
CINV     DS    F
ENDRBA   DS    F
NEXT     DS    F
NCIS     DS    F
NSSS     DS    F
NLOGR    DS    F
NINSR    DS    F
HALCRBA  DS    F
NDELR    DS    F
DATAFACT DS    F
WORKA    DS    D
WORKB    DS    D
WORKC    DS    D
EDMASK   DC    X'4020202020202120'
FDBKCDE  DS    F
         DS    C                          EXTRA BYTE FOR UNPACK
WKFLD    DS    CL4
RECNO    DS    CL4                        RELATIVE RECORD NUMBER
         DS    0F          FULLWORD ALIGNMENT
*==>                ....+....1....+....2....+....3....+....4....+....5
LKSDS    DC    CL02'KS'
LESDS    DC    CL02'ES'
LRRDS    DC    CL02'RR'
LLDS     DC    CL02'LD'
LDATA    DC    CL02'DA'
LINDEX   DC    CL02'IX'
INERROR1 DC    CL80'SYSIN INPUT ERROR - INPUT IS CLUSTER NAME STARTING X
               IN COL 1 W/O QUOTES'
INPTGRID DC    CL80'                 ....+....1....+....2....+....3....X
               +....4....'
INERROR2 DS    0CL80
         DC    CL17'INPUT RECEIVED = '
INERRCLS DS    CL63
INFO0    DC    CL80'INPUT IS CLUSTER NAME STARTING IN COL 1 W/O QUOTES'
INFOA    DC    CL80'      AND IS ALLOCATED TO SYSIN'
INFOB    DC    CL80'OUTPUT IS ALLOCATED TO SYSOUT'
INFO1    DC    CL80'WHEN YOU ARE FINISHED TYPE IN /* TO END'
OPERRIN  DC    CL80'ERROR OPENING SYSIN DATASET'
OPERR    DC    CL80'ERROR OPENING VSAM DATASET'
MSGOPERR DC    CL80'ERROR OPENING SYSOUT DATASET'
         DS    0F          FULLWORD ALIGNMENT
DYNERR   DS    0CL80
         DC    CL25'VSAM CLUSTER NOT FOUND = '
DYNRCLUS DS    CL55
DALLER   DC    CL80'DE-ALLOCATION FAILED FOR DDNAME CLUSTIN'
SHOWERR  DC    CL80'UNABLE TO RETRIEVE ACCESS METHOD CONTROL BLOCK'
TYPERROR DC    CL80'  NAME ENTERED IS NOT AN ESDS, KSDS, RRDS, OR LDS TX
               YPE VSAM CLUSTER'
CLOSERR  DC    CL80'UNABLE TO CLOSE VSAM DATASET'
TESTMSG  DS    0CL80
*==>                ....+....1....+....2....+....3....+....4....+....5
         DC    CL48'UNABLE TO TEST ACCESS METHOD CONTROL BLOCK / RC='
TCBRC    DS    CL02
         DC    CL14', REASON CODE='
TCBRSN   DS    CL02
         DC    CL14'              '
NORMAL   DC    CL80'*** NORMAL END OF TASK ***'
HEADER   DC    CL80'     TYPE LRECL K-LEN RKP  CISZ %USED XTNT  CI / CAX
                    TOTAL-INSERT-DELETE     '
REPORT   DS    0CL80
         DC    CL04' '
RTYPED   DS    CL02
RDASH    DC    CL01'-'
RTYPEC   DS    CL02
         DC    CL01' '
RLRECL   DS    CL05
         DC    CL01' '
RKEYL    DS    CL05
         DC    CL01' '
RRKP     DS    CL03
         DC    CL01' '
RCINV    DS    CL05
         DC    CL02' '
RUSED    DS    CL03
RPCENT   DS    CL01
         DC    CL01' '
RNEXT    DS    CL04
         DC    CL01' '
RNCIS    DS    CL04
RSLASH   DC    CL01'/'
RNSSS    DS    CL04
         DC    CL01' '
RNLOGR   DS    CL08
         DC    CL01' '
RNINSR   DS    CL06
         DC    CL01' '
RNDELR   DS    CL06
MSGFDBK  DS    0CL80
         DC    CL80'VSAM FEEDBACK CODE IS '
MSGCDE   DS    CL3
         DC    CL55' '
TRTBL    DC    C'0123456789ABCDE'
         DS    0F          FULLWORD ALIGNMENT
INCAREA  DS    0CL80
INCLUST  DS    CL44
         DS    CL36
INCARDS  DCB   DSORG=PS,RECFM=FB,MACRF=GM,                             X
               LRECL=80,DDNAME=SYSIN,EODAD=EOF
VSAMACB  ACB   DDNAME=CLUSTIN
VSAMRPL  RPL   ACB=VSAMACB
MSGDCB   DCB   BLKSIZE=080,                                            X
               LRECL=080,                                              X
               DDNAME=SYSOUT,                                          X
               DSORG=PS,                                               X
               MACRF=PM,                                               X
               RECFM=F
         IEFZB4D0                             IBM SUPPLIED MACROS
         IEFZB4D2                             IBM SUPPLIED MACROS
         END   VSAT

Lorenzo DiCioccio
Systems Programmer
Centerior Energy Corporation (USA)      c Lorenzo DiCioccio 1992

