Deleting VSAM SAM files

VSAM space managed SAM files can be explicitly or
implicitly defined.  Explicit SAM files are defined by
IDCAMS.  When an explicitly defined SAM file is closed,
with DISP=(,DELETE) on the DLBL, all space acquired by the
file is released and only the definition remains in the VSAM
catalog.  An implicit SAM file is defined automatically by
VSAM, when it is opened for output, based on information in
the program's DTF and in the RECORDS and RECSIZE
operands on the file's DLBL.  When an implicitly defined SAM
file is closed, with DISP=(,DELETE) on the DLBL, all space
acquired by the file is released and its definition is deleted from
the VSAM catalog.  But what if we don't want to delete a SAM
file immediately an application program closes it?  Perhaps it is
desirable to keep some SAM files until an entire job has
executed successfully or even longer.  How do we get rid of
SAM files later?

Using IDCAMS to DELETE SAM files is not a good solution
because the definition is deleted for explicit SAM files.
Implicit SAM files are easily created without the use of
IDCAMS.  Shouldn't there be an equally simple way to delete
those files without using IDCAMS?  Shouldn't there be a
common solution for both implicit and explicit SAM files?
The answer is yes.

The solution is simple.  Consider a program which does
nothing more than open and close a sequential disk file named
UOUT.  Call it OPNCLOSE.  This program could be used to
open and close any SAM file, thereby allowing VSAM to
delete or reset the file as appropriate.  For an explicit SAM
file, execute the following job step:

// DLBL UOUT,'file-id',,VSAM,DISP=(,DELETE)
// EXEC OPNCLOSE

The file UOUT is opened and immediately closed.  VSAM,
because of the DISP=(,DELETE) operand on the DLBL, frees
any space acquired by the file and resets the file's RBA pointer
to zero.  If you are sure an implicit SAM file exists, the same
JCL can be used.  However, attempting to open a SAM file
which does not exist without coding the RECORDS and
RECSIZE operands on the DLBL will cause the program to
cancel.  If there is any doubt as to the existence of an implicit
SAM file, code the DLBL like this:

// DLBL UOUT,'file-id',,VSAM,DISP=(NEW,DELETE),   *
       RECORDS=1,RECSIZE=512
// EXEC OPNCLOSE

Whether or not the implicit SAM file exists, the open
command will be successful.  When the file is closed, any
space acquired by the file is released and the definition
removed from the VSAM catalog.

When a close disposition for a SAM file is not specified on the
DLBL, it defaults to KEEP unless the file is defined in the
program as a work file, in which case the default is DELETE.
Thus, if the OPNCLOSE program defines file UOUT as
TYPEFLE=WORK rather than OUTPUT, no close disposition
is required on the DLBL to delete the file.

The seven character name of a file is stored in bytes 23 to 29 of
its DTF.  If the OPNCLOSE program is written in Assembler,
the programmer might code the following:

      MVC   UOUT+22(7),=C'SAMFILE'
      OPEN  UOUT
      CLOSE UOUT

Although the program seems to open and close a file named
UOUT it actually opens and closes a file named SAMFILE.
The same DTF could be used again for another file by moving
a different seven-character name into the DTF and opening and
closing UOUT again.  Thus, one execution of the program
could be used to open and close more than one file.  The ability
to tell the program what files to open and close could make it a
useful tool because one execution of the program could delete
one or more SAM files whose names are provided by the user.
This could be done easily be providing the file names to the
program via the PARM operand on the EXEC statement.  To
open and close the files FILE1, FILE2 and FILE3, the EXEC
statement would look like this:

// EXEC OPNCLOSE,PARM='FILE1,FILE2,FILE3'

In this and the preceding examples it might be necessary to
code the SIZE=AUTO operand on the EXEC statement
although the default SIZE coded in your ASI PROC is probably
sufficient.

The following program implements all that is described above.
If one or more files are specified in the PARM operand, those
files are opened and closed.  If the PARM operand is omitted,
the file UOUT is opened and closed.  Both implicit and explicit
SAM files can be specified in the same execution and, because
the DTF is defined as a work file, it is not necessary to code a
delete disposition on the DLBLs.  Also, this program can be
used to delete ordinary sequential disk files from a volume.

         TITLE 'OPNCLOSE - *** OPEN/CLOSE SD WORK FILES'
         PRINT NOGEN
OPNCLOSE START 0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R11      EQU   11
         BALR  R11,0
         USING *,R11
         LA    R2,PARM                    POINT TO PARM WORK AREA
         TM    0(R1),X'80'                IS THERE A PARM
         BZ    OPEN                       ...NO
         L     R1,0(R1)                   ..YES, GET PARM ADDRESS
         LH    R3,0(R1)                   GET LENGTH OF PARM DATA
         BCTR  R3,0                           MINUS 1
         EX    R3,MVC                     GET PARM DATA
         B     CHKPARM1
MVC      MVC   PARM(1),2(R2)
CHKPARM1 LA    R3,FILE
         MVC   FILE,CLEAR
CHKPARM2 CLI   0(R2),C' '                 IS THIS A BLANK
         BE    CHKPARM4                   ...YES
         CLI   0(R2),C','                 IS THIS A COMMA
         BE    CHKPARM3                   ...YES
         MVC   0(1,R3),0(R2)              GET ONE BYTE OF THE FILE NAME
         CLI   TEST,C'  '                 IS FILE NAME TOO LONG
         BNE   EOJ                        ...YES, QUIT
         LA    R2,1(,R2)                  POINT TO NEXT BYTE OF NAME
         LA    R3,1(,R3)
         B     CHKPARM2                   LOOP BACK
CHKPARM3 LA    R2,1(,R2)                  POINT PAST COMMA
CHKPARM4 CLI   FILE,C' '                  IS THERE A FILE NAME
         BE    EOJ                        ...NO, QUIT
         MVC   UOUT+22(7),FILE            MOVE FILE NAME TO DTF
OPEN     OPEN  UOUT
EOF      CLOSE UOUT
         B     CHKPARM1                   GO CHECK FOR ANOTHER FILE
EOJ      EOJ
PARM     DC    CL256' '
CLEAR    DC    CL7' '
FILE     DC    CL7' '
TEST     DC    C' '
UOUT     DTFSD BLKSIZE=512,RECFORM=UNDEF,EOFADDR=EOF,    *
               DEVADDR=SYS000,TYPEFLE=WORK
         LTORG
         END

James E Holler
Little Blue Systems (USA)                   c Little Blue Systems 1991

