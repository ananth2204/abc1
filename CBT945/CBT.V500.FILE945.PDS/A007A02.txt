Automating catalog and VVDS error correction

Something many data centres tend to ignore, except when there
is a critical problem, is routine error detection on VVDS and
ICF catalog structures. Since early detection of errors can lead
to timely correction of system related problems, I decided to
take an aggressive approach to identifying errors on a
scheduled basis. The facility used within MVS to determine
error situations is typically the DIAGNOSE command under
IDCAMS. When an out-of-sync or illogical condition arises in
or between a VVDS and catalog, the DIAGNOSE process can
be used to specifically identify what error condition exists and
then appropriate action can be taken. Problems with a VVDS
or catalog can occur any number of ways. I have seen them
caused by items such as system bugs, system upgrades, system
crashes, and system programmer procedural errors. Regardless
of how the problems occur, it is important that they are
identified and fixed, and their origin understood so that future
problems are avoided.

As mentioned, IDCAMS DIAGNOSE provides a way of
determining what errors exist. To determine structures that are
candidates for analysis, it is necessary to know all catalogs,
VVDSs, and accompanying relationships in the environment. I
had periodically taken the time to understand and code up
DIAGNOSE jobs that matched our structures. However, I was
concerned that an ever changing environment would not be
properly analyzed without frequent and error-prone changes to
a fairly large jobstream. To avoid the time required to
understand what needed analyzing, I wrote a program to
dynamically determine the catalogs, VVDSs, and inter-
relationships in the environment, and in turn invoke
DIAGNOSE on their behalf.

The Assembler program, called AUTODIAG, was written to
retrieve data from IDCAMS LISTCAT and DCOLLECT which
is used to determine the current catalog and VVDS structures.
Since some problems are detected only by comparing
structures, DIAGNOSE offers the ability to compare entries
between a catalog and a VVDS. This maximizes the
opportunity to find corrupted information. AUTODIAG
exploits comparison processing to its fullest by including a
COMPAREDS of all VVDSs in a catalog up to the first 99 - an
IDCAMS limitation. Likewise, when AUTODIAG is
processing a VVDS, the entire catalog structure is used in a
COMPAREDS. If a VVDS happens to not have an entry
pointing to a compared catalog, there is a simple warning
message which can be ignored.

DFSMS is active in my shop so a VVDS dataset exists on
nearly all the volumes. In the pre-DFSMS environment, VVDS
structures were found only on volumes containing VSAM
datasets. DIAGNOSE is applicable to a VVDS in either
situation, but different relationships and checks take place. A
good discussion of what problems are detected and possible
ways to correct them can be found in the IBM manual related
to catalog administration. Depending on your release of DFP,
the manual name may be either Catalog Administration Guide
or Managing Catalogs.

In addition to providing the ability to interface with
DIAGNOSE in a changing environment, I found it useful for
AUTODIAG to determine what errors were new since the
previous run. After examining DIAGNOSE output a few times,
it was evident that some situations were acceptable and
corrective action was never taken. One example was when a
catalog was removed from the system. Some VVDSs still
contained a reference to it. Since the message given to indicate
this situation was justified and acceptable, it was not worth
rebuilding the VVDS to correct. However, the message
continued to show up on each run. To permit a quick review of
only the most recent errors, AUTODIAG determines which
messages are new since the previous run and marks them with
a bar in the first column of the DIAGPRNT report. The
DIAGPRNT report is constructed from a DIAGNOSE
SYSPRINT of all requests, and should be used to recognize
and correct error situations as you would with any DIAGNOSE
report.

I decided to run AUTODIAG weekly. The idea was to run it
often enough to detect problems before they got too far out of
control. The activity generated by AUTODIAG on the catalog
and VVDS structures is best performed during periods of low
system activity so minimal contention takes place. In my
environment, with approximately 90 volumes and 11 catalogs
containing 18,000 datasets to examine, the process takes about
60 minutes. To follow the progress of the job, WTO messages
are issued indicating which catalog or VVDS is being
processed. As an indicator of which structures should be
reviewed in the DIAGPRNT report, a WTO is issued for any
catalog or VVDS receiving a return code greater than 4 in the
DIAGNOSE. A copy of the JCL required to run AUTODIAG
along with the code follows. Note that on the first run of this
job the PRIOR DD should be DUMMY.


JCL

//STEP1    EXEC PGM=AUTODIAG
//SYSOUT   DD   SYSOUT=*
//LISTPRNT DD   SYSOUT=*
//DIAGPRNT DD   SYSOUT=*
//PRIOR    DD   DSN=SYS2.AUTODIAG.SAVE(0),DISP=SHR
//CURRENT  DD   DSN=SYS2.AUTODIAG.SAVE(+1),DISP=(,CATLG,DELETE),
//    SPACE=(CYL,(1,1))
//SORTEDP  DD   UNIT=VIO,SPACE=(CYL,(10,1))
//SORTEDC  DD   UNIT=VIO,SPACE=(CYL,(10,1))
//SYSPRINT DD   UNIT=VIO,SPACE=(CYL,(10,1))
//SYSIN    DD   UNIT=VIO,SPACE=(CYL,(10,1))
//SORTIN   DD   UNIT=VIO,SPACE=(CYL,(10,1))
//SORTOUT  DD   UNIT=VIO,SPACE=(CYL,(10,1))
//DCOLLECT DD   UNIT=VIO,SPACE=(CYL,(10,1)),
//  DCB=(LRECL=264,RECFM=VB,DSORG=PS)


AUTODIAG PROGRAM

R1       EQU   1                     IDCAMS AND GET WORK
R2       EQU   2                     GETMAIN CHAIN
R3       EQU   3                     WORK
R6       EQU   6                     WORK
R9       EQU   9                     DCOLLECT RECORD BASE
R11      EQU   11                    BASE REG TWO
R12      EQU   12                    BASE REG ONE
R13      EQU   13                    SAVE AREA
R14      EQU   14                    RETURN ADDRESS
R15      EQU   15                    RETURN CODES
AUTODIAG CSECT
         STM   R14,R12,12(R13)       SAVE REGS
         BALR  R12,0                 ESTABLISH ADDRESSABILITY
         USING *,R12,R11             NEED TWO BASE REGS
         LA    R11,4095(,R12)        SET UP
         LA    R11,1(,R11)              BASE TWO
         LA    R3,REGSAVE            ADDRESS OF OUR SAVE AREA
         ST    R3,8(R13)             SAVE OUR ADDRESS
         ST    R13,4(R3)             SAVE CALLING SAVE AREA
         LR    R13,R3                LOAD OUR SAVE ADDRESS
         OPEN  (SYSIN,(OUTPUT))      GET READY FOR LISTC OUTPUT
         PUT   SYSIN,LISTCARD        PUT LISTC ALL OUT TO IDCAMS
         OPEN  (LISTPRNT,(OUTPUT),CURRENT,(OUTPUT))
         MVC   WTOCATL+24(6),=C'MASTER' INDICATE MASTER CATALOG
         MVC   WTOLISTL+42(6),=C'MASTER'
AUTODG01 WTO   MF=(E,WTOCATL)        TELL WHAT WE'RE PROCESSING
         MVI   PRCESFLG,C'L'         SET PROCESS FLAG TO LISTCAT
         MVI   WRITEFLG,C'Y'         SET WRITE FLAG TO YES
         CLOSE SYSIN                 CLOSE SYSIN SO IDCAMS CAN READ
         LA    R1,0                  PREPARE FOR IDCAMS LINK
         LINK  EP=IDCAMS             CALL IDCAMS TO DO LISTCAT
         LTR   R15,R15               ZERO RC FROM IDCAMS?
         BZ    AUTODG03              IF YES, CONTINUE
         WTO   MF=(E,WTOLISTL)       INDICATE NON ZERO RC
AUTODG03 OPEN  (SYSIN,(OUTPUT),SYSPRINT)
         ZAP   COMPDCNT,=P'0'        ZERO NUMBER OF COMPARES
AUTODG05 GET   SYSPRINT              READ OUTPUT FROM IDCAMS LISTC
         LH    R3,0(R1)              GET THE LENGTH
         SH    R3,=H'5'              GET READY FOR SYSPRINT MOVE
         LR    R6,R1                 HOLD RECORD ADDRESS
         MVI   SAVEPRNT,X'40'        SPACE OUT THE SAVE AREA
         MVC   SAVEPRNT+1(L'SAVEPRNT-1),SAVEPRNT
         EX    R3,PRNTMOVE           MOVE THE SYSPRINT RECORD
         PUT   LISTPRNT,SAVEPRNT     DISPLAY SYSPRINT
         LA    R6,5(R6)              SKIP OVER LENGTH
         CLC   0(7,R6),=C'USERCAT'   IS THIS A USERCAT ENTRY?
         BE    AUTODG12              IF YES, WE WANT IT
         CLC   0(7,R6),=C'CLUSTER'   IS THIS A CLUSTER ENTRY?
         BE    AUTODG07              IF YES, WE WANT IT
         CLI   MASTRFLG,C'1'         DID WE GET MASTER CAT YET?
         BE    AUTODG05              IF YES, GET NEXT RECORD
         CLC   53(7,R6),=C'CATALOG'  IS MASTER CATALOG HERE?
         BNE   AUTODG05              IF NO, KEEP LOOKING
         LA    R6,37(R6)             POINT TO CATALOG NAME
         MVI   SAVEDSN,X'40'         SPACE OUT THE SAVE AREA
         MVC   SAVEDSN+1(L'SAVEDSN-1),SAVEDSN
         SH    R3,=H'54'             GET READY FOR DSN MOVE
         EX    R3,DSNMOVE            SAVE MASTER CATALOG NAME
         MVC   DIAGDSN(44),SAVEDSN   PUT MASTER CATALOG IN DIAGNOSE
         MVI   MASTRFLG,C'1'         SET MASTER FOUND FLAG
         B     AUTODG05              GO READ SYSPRINT
AUTODG07 CLC   16(11,R6),=C'SYS1.VVDS.V' IS THIS A VVDS ENTRY?
         BNE   AUTODG05              IF NOT, DON'T WANT IT
         CP    COMPDCNT,=P'99'       HAVE WE ISSUED 99 COMPARES
         BE    AUTODG05              IF YES, CAN'T HANDLE ANY MORE
         AP    COMPDCNT,=P'1'        ADD 1 TO NUMBER OF COMPARES
         CLI   WRITEFLG,C'Y'         DIAGNOSE CARD1 REQUIRED?
         BNE   AUTODG09              IF NOT, SKIP IT
         MVI   DIAGCONT,C'-'         SET UP CONTINUATION
         PUT   SYSIN,DIAGCRD1        WRITE DIAGNOSE RECORD
         PUT   SYSIN,DIAGCRD2        WRITE COMPAREDS RECORD
         MVI   WRITEFLG,C'N'         INDICATE CARD1 NOT NEEDED
AUTODG09 MVC   DIAGCDSN(17),16(R6)   SETUP DIAGNOSE COMPARE DSN
         PUT   SYSIN,DIAGCRD3        WRITE COMPAREDS RECORD
         B     AUTODG05              GO READ SYSPRINT
AUTODG12 CLI   PHASEFLG,C'M'         STILL IN MASTER PHASE?
         BNE   AUTODG05              IF NOT, BYPASS USERCAT INFO
         GETMAIN R,LV=48             NEED 48 BYTES FOR CATALOG NAME
         MVC   0(4,R1),GETMNQUE      SAVE PRIOR GETMAIN ADDRESS
         MVI   SAVEDSN,X'40'         SPACE OUT THE SAVE AREA
         MVC   SAVEDSN+1(L'SAVEDSN-1),SAVEDSN
         SH    R3,=H'17'             GET READY FOR DSN MOVE
         EX    R3,DSNMOVE            SAVE USERCATALOG NAME
         MVC   4(44,R1),SAVEDSN      PUT CATALOG IN STORAGE
         ST    R1,GETMNQUE           SAVE CURRENT GETMAIN ADDRESS
         B     AUTODG05              GO READ SYSPRINT
AUTODG15 MVC   SAVECDSN,DIAGDSN      SAVE NAME INTO CURRENT AREA
         MVI   PRCESFLG,C'D'         INDICATE CATALOG DIAGNOSE
         CLI   WRITEFLG,C'Y'         STILL WAITING FOR CARD1?
         BNE   AUTODG17              IF NO, SKIP WRITE
         MVI   DIAGCONT,C' '         NO NEED TO CONTINUE RECORD
         PUT   SYSIN,DIAGCRD1        WRITE DIAGNOSE RECORD
         B     AUTODG20              GO CLOSE SYSIN
AUTODG17 PUT   SYSIN,DIAGCRD4        FINISH WITH RIGHT PAREN
AUTODG20 CLOSE SYSIN                 CLOSE SYSIN SO IDCAMS CAN READ
         LA    R1,0                  PREPARE FOR IDCAMS LINK
         LINK  EP=IDCAMS             CALL IDCAMS
         LA    R1,5                  PREPARE FOR < 5 COMPARE
         CR    R15,R1                WAS RC < 5?
         BL    AUTODG22              IF YES, THAT'S GOOD
         MVC   WTODIAGL+38(44),DIAGDSN PLUG DSN INTO WTO
         WTO   MF=(E,WTODIAGL)       INDICATE BAD RC
AUTODG22 OPEN  (SYSIN,(OUTPUT),SYSPRINT)
AUTODG24 GET   SYSPRINT              READ DIAGNOSE OUTPUT
         LH    R3,0(R1)              GET THE LENGTH
         SH    R3,=H'5'              GET READY FOR SYSPRINT MOVE
         MVI   SAVEPRNT,X'40'        SPACE OUT THE SAVE AREA
         MVC   SAVEPRNT+1(L'SAVEPRNT-1),SAVEPRNT
         EX    R3,PRNTMOVE           MOVE THE SYSPRINT RECORD
         MVC   SAVECPRT,SAVEPRNT     SAVE INTO CURRENT
         AP    SAVECCNT,=P'1'        ADD 1 TO LINE POSITION
         PUT   CURRENT,SAVCURNT      SAVE THE CURRENT DIAG INFO
         B     AUTODG24              GO READ NEXT DIAGNOSE LINE
AUTODG27 CLOSE SYSPRINT              NO MORE SYSPRINT, SO CLOSE
         CLI   PRCESFLG,C'V'         ARE VVDS'S BEING PROCESSED?
         BE    AUTODG38              IF YES, READ DCOLLECT INFO
         CLI   PRCESFLG,C'L'         WAS THIS A LISTCAT PROCESS?
         BE    AUTODG15              IF YES, DIAGNOSE IS NEXT
         CLI   PHASEFLG,C'U'         IN USERCATALOG PHASE?
         BE    AUTODG30              IF YES, GO PROCESS NEXT CATLG
         L     R2,GETMNQUE           GET CHAIN START ADDRESS
         MVI   PHASEFLG,C'U'         SET PHASE TO USERCATALOGS
         MVC   LISTCAT,=C' CAT('     PREPARE TO GET
         MVC   LISTRPRN,=C') '            ASSOCIATED
         MVC   LISTVVDS,=C' LVL(SYS1.VVDS)'     VVDS'S
         B     AUTODG32              READY FOR FIRST CATALOG
AUTODG30 L     R2,0(R2)              LOAD NEXT ADDRESS IN CHAIN
AUTODG32 LTR   R2,R2                 IF ZERO,
         BZ    AUTODG34                  AT END OF CHAIN
         LA    R3,4(R2)              POSTION TO CATALOG NAME
         MVC   DIAGDSN(44),0(R3)     SAVE USERCATALOG FOR DIAGNOSE
         MVC   LISTDSN(44),DIAGDSN   SAVE USERCATALOG FOR LISTC
         MVC   WTOLISTL+42(44),LISTDSN PLUG CATALOG INTO ERROR MSG
         PUT   SYSIN,LISTCARD        GIVE LISTCAT TO IDCAMS
         MVC   WTOCATL+24(44),LISTDSN PLUG CATALOG INTO PROCESS MSG
         B     AUTODG01              GO CALL IDCAMS
AUTODG34 CLOSE LISTPRNT              NO MORE LIST PROCESSING
         MVI   PRCESFLG,C'V'         INDICATE VVDS PROCESSING
         MVC   DIAGTYPE,=C' VVDS  '  PREP FOR VVDS DIAGNOSE
         MVI   DIAGCONT,C'-'         ALWAYS CONTINUE
         OPEN  (SYSIN,(OUTPUT))      GET READY FOR DCOLLECT
         PUT   SYSIN,DCOLCARD        PUT DCOLLECT OUT TO IDCAMS
         CLOSE SYSIN                 CLOSE SYSIN FOR IDCAMS
         WTO   '* DCOLLECT DATA RETRIEVAL IN PROGRESS *'
         LA    R1,0                  PREPARE FOR IDCAMS LINK
         LINK  EP=IDCAMS             CALL IDCAMS TO DO DCOLLECT
         LTR   R15,R15               ZERO RC FROM IDCAMS DCOLLECT?
         BZ    AUTODG36              IF YES, CONTINUE ON
         WTO   '* WARNING - NON ZERO RC FROM DCOLLECT *'
AUTODG36 OPEN  DCOLLECT              GET READY TO READ DCOLLECT
AUTODG38 GET   DCOLLECT              READ OUTPUT FROM DCOLLECT
         LA    R9,4(R1)              POINT TO RECORD
         USING IDCDOUT,R9            ESTABLISH ADDRESSABILITY
         CLI   DCURCTYP,C'D'         IS THIS A DATASET RECORD?
         BNE   AUTODG38              IF NOT, DONT WANT IT
         CLC   DCDDSNAM(10),=C'SYS1.VVDS.'  IS THIS A VVDS ENTRY?
         BNE   AUTODG38              IF NOT, DON'T WANT IT
         MVC   DIAGDSN(44),DCDDSNAM  SAVE THE VVDS FOR DIAGNOSE
         MVC   SAVECDSN,DIAGDSN      SAVE THE VVDS FOR CURRENT
         MVC   WTOVVDSL+21(44),DIAGDSN  PLUG VVDS NAME INTO WTO
         WTO   MF=(E,WTOVVDSL)       INDICATE WHO PROCESSING
         OPEN  (SYSIN,(OUTPUT))      GET READY FOR DIAGNOSE
         PUT   SYSIN,DIAGCRD1        WRITE DIAGNOSE RECORD
         PUT   SYSIN,DIAGCRD2        WRITE COMPAREDS RECORD
         L     R2,GETMNQUE           GET CHAIN START ADDRESS
         B     AUTODG42              READY FOR FIRST CATALOG
AUTODG40 L     R2,0(R2)              LOAD NEXT ADDRESS IN CHAIN
AUTODG42 LTR   R2,R2                 IF ZERO,
         BZ    AUTODG17                  AT END OF CHAIN
         LA    R3,4(R2)              POSTION TO CATALOG NAME
         MVC   DIAGCDSN(44),0(R3)    USERCATALOG FOR COMPAREDS
         PUT   SYSIN,DIAGCRD3        WRITE COMPARE CATALOG DSN
         B     AUTODG40              GO GET NEXT CATALOG
AUTODG45 WTO   '* COMPARISON OF CURRENT/PRIOR DIAGNOSE IN PROGRESS *'
         CLOSE CURRENT               END OF CURRENT DIAGNOSING
         OPEN  (PRIOR,,CURRENT,,SYSIN,(OUTPUT),SORTIN,(OUTPUT))
         OPEN  (SORTEDC,(OUTPUT),SORTEDP,(OUTPUT))
         MVI   PHASEFLG,C'P'         INDICATE PRIOR PROCESSING
AUTODG50 GET   PRIOR,SAVCURNT        READ A PRIOR DIAGNOSE RECORD
         PUT   SORTIN,SAVCURNT       PUT RECORD OUT TO SORT
         B     AUTODG50              GO PROCESS NEXT RECORD
AUTODG55 GET   CURRENT,SAVPRIOR      READ A CURRENT DIAGNOSE RECORD
         PUT   SORTIN,SAVPRIOR       PUT RECORD OUT TO SORT
         B     AUTODG55              GO PROCESS NEXT RECORD
AUTODG57 CLOSE SORTIN                CLOSE SORTIN SO SORT CAN READ
         LA    R1,POINTER            PREPARE FOR SORT
         LINK  EP=SORT               CALL SORT
         LTR   R15,R15               WAS SORT RC ZERO?
         BZ    AUTODG62              IF YES, CONTINUE ON
         WTO   '* WARNING - NON ZERO RC FROM SORT *'
         B     AUTODG99              SHOULD NEVER HAVE A SORT PROBLEM
AUTODG62 OPEN  SORTOUT               GET READY TO READ SORTED INFO
         CLI   PHASEFLG,C'E'         CHECKING FOR NEW ERRORS PHASE?
         BE    AUTODG90              IF YES, GO WRITE DIAGPRNT OUTPUT
AUTODG65 GET   SORTOUT               READ A SORTED RECORD
         MVC   SAVCURNT(181),0(R1)   SAVE THE SORTED RECORD
         CLI   PHASEFLG,C'P'         PROCESSING PRIOR DIAGNOSE?
         BE    AUTODG68              IF YES, GO WRITE PRIOR
         PUT   SORTEDC,SAVCURNT      MUST BE CURRENT DIAGNOSE INFO
         B     AUTODG65              GET ANOTHER RECORD
AUTODG68 PUT   SORTEDP,SAVCURNT      WRITE OUT THE PRIOR DIAGNOSE
         B     AUTODG65              GET ANOTHER RECORD
AUTODG70 CLOSE SORTOUT               END OF SORTED INFO
         CLI   PHASEFLG,C'C'         IS THIS THE CURRENT PHASE?
         BE    AUTODG72              IF YES, GO COMPARE INFO
         CLI   PHASEFLG,C'E'         IS THIS THE NEW ERRORS PHASE?
         BE    AUTODG95              IF YES, TIME TO GET OUT
         MVI   PHASEFLG,C'C'         INDICATE CURRENT PHASE
         OPEN  (SORTIN,OUTPUT)       GET READY TO PUT RECORDS TO SORT
         B     AUTODG55              GO PROCESS CURRENT DIAGNOSE INFO
AUTODG72 CLOSE (SORTEDC,,SORTEDP)    CLOSE WORK FILES
         OPEN  (SORTEDC,,SORTEDP,,SORTIN,(OUTPUT))
         MVC   SAVPRIOR(3),=X'FFFFFF' HIGH VALUES IN CASE EMPTY
AUTODG74 GET   SORTEDC,SAVCURNT      READ A SORTED CURRENT DIAG LINE
AUTODG76 GET   SORTEDP,SAVPRIOR      READ A SORTED PRIOR DIAG LINE
AUTODG78 CLC   SAVPRIOR(177),SAVCURNT COMPARE PRIOR LINE TO CURRENT
         BE    AUTODG86              IF EQUAL, PROCESS NO CHANGE
         BL    AUTODG76              IF LESS, READ NEXT PRIOR LINE
AUTODG80 CLC   SAVCURNT+45(6),=C'IDCAMS' IS THIS A HEADER LINE?
         BE    AUTODG82              IF YES, DON'T CARE IF CHANGED
         MVI   SAVECCHG,C'|'         INDICATE CHANGE ON THIS LINE
         B     AUTODG84              SKIP NO CHANGE
AUTODG82 MVI   SAVECCHG,C' '         INDICATE NO CHANGE ON LINE
AUTODG84 PUT   SORTIN,SAVCURNT       WRITE LINE OUT TO SORT
         GET   SORTEDC,SAVCURNT      GET NEXT CURRENT DIAGNOSE LINE
         B     AUTODG78              GO COMPARE
AUTODG86 MVI   SAVECCHG,C' '         INDICATE NO CHANGE
         PUT   SORTIN,SAVCURNT       WRITE LINE OUT TO SORT
         B     AUTODG74              GO READ CURRENT AND PRIOR
AUTODG88 CLOSE (SORTEDC,,SORTEDP)    END OF DIAGNOSE COMPARING
         MVC   SORTPARM,SORTFLD      PREPARE TO SORT ORIGINAL ORDER
         MVI   PHASEFLG,C'E'         INDICATE NEW ERRORS PROCESSING
         B     AUTODG57              GO SORT
AUTODG90 OPEN  (DIAGPRNT,(OUTPUT))   GET READY FOR DIAGNOSE PRINT
AUTODG92 GET   SORTOUT               READ A CURRENT DIAGNOSE LINE
         MVC   DIAGVFC(1),44(R1)     SAVE VERTICAL FORMAT CONTROL
         MVC   DIAGCHG(1),180(R1)    SAVE CHANGE INDICATOR
         MVC   DIAGPRT(132),45(R1)   SAVE ORIGINAL DIAGNOSE LINET
         PUT   DIAGPRNT,DIAGLINE     WRITE OUT TO DIAGNOSE PRINT
         B     AUTODG92              CONTINUE TILL END
AUTODG95 CLOSE (DIAGPRNT,,SORTOUT)   CLOSE REMAINING OPEN FILES
AUTODG99 LA    R15,0                 ZERO RC
         L     R13,REGSAVE+4         RESTORE REGISTERS
         ST    R15,16(R13)                  AND
         LM    R14,R12,12(R13)                 GO
         BR    R14                                HOME
         LTORG
DSNMOVE  MVC   SAVEDSN(0),16(R6)     MVC FOR DATASET NAME
PRNTMOVE MVC   SAVEPRNT(0),4(R1)     MVC FOR SYSPRINT
WTOCATL  WTO   'PROCESSING CATALOG:                                    C
                              ',MF=L
WTOVVDSL WTO   'PROCESSING VVDS:                                       C
                              ',MF=L
WTOLISTL WTO   '* WARNING - NON ZERO RC IN LISTCAT OF                  C
                                          ',MF=L
WTODIAGL WTO   '* WARNING - RC > 4 IN DIAGNOSE OF                      C
                                      ',MF=L
REGSAVE  DS    18F                   REGISTER SAVE AREA
GETMNQUE DC    A(0)                  GETMAIN QUE ADDRESS
PHASEFLG DC    C'M'                  PHASE IN PROGRESS FLAG
MASTRFLG DC    C' '                  MASTER CATALOG REQUIRED FLAG
WRITEFLG DC    C' '                  DIAGNOSE CARD REQUIRED FLAG
PRCESFLG DC    C' '                  PROCESS IN PROGRESS FLAG
SORTFLD  DC    CL33'178,3,PD,A)'     DIAGNOSE ORIGINAL ORDER SORT
SAVEDSN  DS    CL44                  CATALOG NAME SAVE
SAVEPRNT DS    CL133                 IDCAMS SYSPRINT SAVE
DIAGLINE DS    0CL134                LINE TO OUTPUT TO DIAGPRNT
DIAGVFC  DS    C                     VERTICAL FORMAT CONTROL
DIAGCHG  DS    C                     LINE CHANGED INDICATOR
DIAGPRT  DS    CL132                 ORIGINAL DIAGNOSE OUTPUT
SAVPRIOR DS    CL181                 PRIOR DIAGNOSE SAVE
SAVCURNT DS    0CL181                CURRENT DIAGNOSE SAVE
SAVECDSN DS    CL44                  CURRENT DIAGNOSE DSN SAVE
SAVECPRT DS    CL133                 CURRENT DIAGNOSE PRINT LINE
SAVECCNT DC    PL3'0'                CURRENT DIAGNOSE LINE COUNT
SAVECCHG DC    C' '                  CURRENT LINE CHANGED INDICATOR
COMPDCNT DC    PL3'0'                COUNT OF COMPARE DATASETS
DIAGCRD1 DC    CL80' '               IDCAMS DIAGNOSE CARD1
         ORG   DIAGCRD1
         DC    C' DIAGNOSE'
DIAGTYPE DC    C' ICFCAT'
         DC    C' IDS('
DIAGDSN  DS    CL44
         DC    C') '
DIAGCONT DC    C' '
         ORG
DIAGCRD2 DC    CL80' '               IDCAMS DIAGNOSE CARD2
         ORG   DIAGCRD2
         DC    C' COMPAREDS( -'
         ORG
DIAGCRD3 DC    CL80' '               IDCAMS DIAGNOSE CARD3
         ORG   DIAGCRD3
         DC    C' '
DIAGCDSN DS    CL44
         DC    C'  -'
         ORG
DIAGCRD4 DC    CL80' '               IDCAMS DIAGNOSE CARD4
         ORG   DIAGCRD4
         DC    C' )'
         ORG
LISTCARD DC    CL80' '               IDCAMS LISTC CARD
         ORG   LISTCARD
         DC    C' LISTC'
LISTCAT  DS    CL5
LISTDSN  DS    CL44
LISTRPRN DS    CL2
LISTVVDS DS    CL15
         ORG
DCOLCARD DC    CL80' '               IDCAMS DCOLLECT CARD
         ORG   DCOLCARD
         DC    C' DCOLLECT'
         DC    C' OFILE(DCOLLECT)'
DCOLVOL1 DC    C' VOLUME(*)'
         DC    C' NOVOLUMEINFO'
         ORG
         CNOP  2,4
BYTECNT  DC    Y(24)                 SORT PARAMETERS
         DC    A(SORTBEG)
         DC    A(SORTEND)
         DC    A(RECBEG)
         DC    A(RECEND)
         DC    2F'0'
POINTER  DC    X'80'
         DC    AL3(BYTECNT)
SORTBEG  DC    C' SORT FIELDS=('
SORTPARM DC    C'1,44,CH,A,45,133,CH,A,178,3,PD,A)'
SORTEND  DC    C' '
RECBEG   DC    C' RECORD TYPE=F,LENGTH=181'
RECEND   DC    C' '
DCOLLECT DCB   DDNAME=DCOLLECT,DSORG=PS,MACRF=GL,EODAD=AUTODG45
PRIOR    DCB   DDNAME=PRIOR,DSORG=PS,MACRF=GM,EODAD=AUTODG57
CURRENT  DCB   DDNAME=CURRENT,DSORG=PS,MACRF=(GM,PM),RECFM=FB,         C
               LRECL=181,EODAD=AUTODG57
SORTEDP  DCB   DDNAME=SORTEDP,DSORG=PS,MACRF=(GM,PM),RECFM=FB,         C
               LRECL=181,EODAD=AUTODG80
SORTEDC  DCB   DDNAME=SORTEDC,DSORG=PS,MACRF=(GM,PM),RECFM=FB,         C
               LRECL=181,EODAD=AUTODG88
DIAGPRNT DCB   DDNAME=DIAGPRNT,DSORG=PS,MACRF=PM,RECFM=FA,LRECL=133,   C
               BLKSIZE=133
LISTPRNT DCB   DDNAME=LISTPRNT,DSORG=PS,MACRF=PM,RECFM=FA,LRECL=133,   C
               BLKSIZE=133
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=GL,EODAD=AUTODG27
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,RECFM=F,LRECL=80,        C
               BLKSIZE=80
SORTOUT  DCB   DDNAME=SORTOUT,DSORG=PS,MACRF=GL,EODAD=AUTODG70,        C
               LRECL=181
SORTIN   DCB   DDNAME=SORTIN,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=181
         IDCDOUT
         END


Ernie Ishman
Senior Systems Programmer
Geisinger Systems Services (USA)

