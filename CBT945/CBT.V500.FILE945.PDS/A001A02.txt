VSAM initialization routine

The following program will initialize an empty KSDS (one that
has just been defined) by inserting a record and then deleting
the record.  No parameters are required.

I00VLOAD CSECT
         USING I00VLOAD,R15
         B     START
         DC    C'I00VLOAD'
         DC    C'NMGC/SS '
         DC    C'&SYSDATE'
         DROP  R15
START    DS    0H
         STM   R14,R12,12(R13)    save registers
         BALR  R12,0              load base register
         USING *,R12              assign base register
         ST    R13,SAVEAREA+4     backward pointer
         LA    R14,SAVEAREA       address of my savearea
         ST    R14,8(R13)         forward pointer
         LR    R13,R14            R13 --> my savearea
         MVC   FUNCTION(8),=C'OPEN ACB'
         OPEN  (VSAMACB)          open the VSAM DATASET
         LTR   R15,R15
         BNZ   ERROR
         MVC   FUNCTION(8),C='SHOWCB  '
         SHOWCB ACB=VSAMACB,      determine attributes                 X
               AREA=DISPLAY,      keylength                            X
               FIELDS=(KEYLEN,    record length                        X
               LRECL,RKP,ENDRBA), record key position                  X
               LENGTH=16          and end rba
         LTR   R15,R15
         BNZ   ERROR
         MVC   FUNCTION(8),=C'ENDRBA  '
         CLC   ENDRBA(4),=F'0'    empty ?
         BNE   ERROR
         MVC   FUNCTION(8),=C'LRECL   '
         L     R2,LRECL
         C     R2,=F'2048'
         BH    ERROR
         MVC   FUNCTION(8),=C'MODCB RL'
         MODCB RPL=RPLLIST,       set up record length                 X
               RECLEN=(2)         in request parameter list
         LTR   R15,R15
         BNE   ERROR
         MVC   FUNCTION(8),=C'PUT     '
         PUT   RPL=RPLLIST        add the "null" record
         LTR   R15,R15
         BNZ   ERROR
         MVC   FUNCTION(8),=C'CLOSE   '
         CLOSE (VSAMACB)
         LTR   R15,R15
         BNZ   ERROR
         MVC   FUNCTION(8),=C'OPEN (2)'
         OPEN  (VSAMACB)
         LTR   R15,R15
         BNZ   ERROR
         MVC   FUNCTION(8),=C'MODCB OP'
         MODCB RPL=RPLLIST,       set RPL for keyed read               X
               ARG=LVKEY,                                              X
               OPTCD=(KEY,DIR,SYN,UPD,MVE,FKS,KEQ)
         LTR   R15,R15
         BNZ   ERROR
         MVC   FUNCTION(8),=C'GET     '
         GET   RPL=RPLLIST        read the "null" record
         LTR   R15,R15
         BNZ   ERROR
         MVC   FUNCTION(8),=C'ERASE   '
         ERASE RPL=RPLLIST        delete the "null" record
         LTR   R15,R15
         BNZ   ERROR
         CLOSE (VSAMACB)
         L     R13,4(R13)         R13 --> callers savearea
         L     R14,12(R13)        return address
         LM    R0,R12,20(R13)     restore caller's registers
         BR    R14                return to MVS
ERROR    ABEND 99,DUMP
         EJECT
SAVEAREA DC    18F'0'
FUNCTION DC    CL12' '
DISPLAY  DS    0F
KEYLEN   DC    F'0'
LRECL    DC    F'0'
RKP      DC    F'0'
ENDRBA   DC    F'0'
         SPACE
VSAMACB  ACB   AM=VSAM,DDNAME=VSAM,                                    X
               MACRF=(KEY,SEQ,DIR,OUT),STRNO=1
         SPACE
RPLLIST  RPL   ACB=VSAMACB,AREA=RECORD,                                X
               AREALEN=2048,                                           X
               OPTCD=(KEY,SEQ,SYN,MVE)
         SPACE
         LTORG
LVKEY    DC    64X'00'
RECORD   DC    2048X'00'
         END

David Welch
Systems Programmer
National Mutual Group Computing (New Zealand)


