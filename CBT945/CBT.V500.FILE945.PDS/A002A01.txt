Reading KSDS files from REXX


PURPOSE

Although the REXX procedural language is a powerful programming
tool, a number of features are missing from the MVS (TSO/E)
implementation.  The most important deficiency is probably the lack
of VSAM support - particularly for KSDS, which is the most
frequently used access method.  To read a keyed record, the
RXVSREAD program can be invoked directly from a REXX EXEC.
The record is returned as a number of REXX variables.

To keep the RXVSREAD program to a publishable size, only the read
function for a single record is implemented.


PROGRAM DESCRIPTION

The VSAM file must have been allocated to the file name (DDname)
VSAM before RXVSREAD is invoked.  RXVSREAD uses the
contents of the KEY variable to read the record matching this key.
The data length of the KEY variable is used as the length of the
generic key.  The record matching this (generic) key is returned in the
RECORD variable.  The RECLEN variable is set to contain the length
of the read record.

Note: REXX programs must be linked with addressing mode
(AMODE) 31, residency mode (RMODE) may be 24.

The REXX variables used are:

o      KEY      (generic) key field - search criterion
o      RECORD      VSAM record read
o      RECLEN      length of the VSAM record read.

The return codes used are:

o      0      successful processing
o      4      no record found
o      8      VSAM read error
o      12      REXX environment error (error returned from IRXEXCOM).


SAMPLE PROCEDURE

/* REXX - VSAM-KSDS Read Interface Example */
/* allocate VSAM file */
ADDRESS TSO "ALLOC F(VSAM) DA('VSAM.TEST.INFO') SHR REUS"
/* set access key */
key = 'BETA'
ADDRESS LINK "RXVSREAD";
IF rc = 0 THEN DO;
  SAY 'record' record;
  SAY 'reclen' reclen;
END;


PROGRAM

RXVSREAD TITLE 'REXX-VSAM(KSDS) INTERFACE (READ OPERATION)'
         PRINT NOGEN
* Function: Read VSAM record and return contents as REXX variables
* Note: Program AMODE must be 31 (for REXX)
* VSAM dataset: VSAM (DD-name)
* input variable:   <KEY> - key
* output variables: <RECORD> - record
*                   <RECLEN> - record length
         SPACE 1
* ReturnCode: 0 ok - record retrieved
*             4 nok - record not found
*             8 nok - VSAM read error
*            12 nok - REXX variable access error
* register usage:
*   R3: A(current data item)
*   R4: L(current data item)
*   R6: A(SHVBLOCK)
*  R12: base register
* other registers are general work registers
RXVSREAD CSECT
* initialise addressing
         STM   R14,R12,12(R13)    save registers
         BALR  R12,0              base register
         USING *,R12
         LA    R15,SA             A(save-area)
         ST    R13,4(R15)         backward ptr
         ST    R15,8(R13)         forward ptr
         LR    R13,R15            A(new save-area)
         B     SA_END             jump over save-area
SA       DS    18A                save-area
SA_END   DS    0H
         SPACE 1
* load REXX communications module (IRXEXCOM)
         LOAD  EP=IRXEXCOM        load IRXEXCOM
         ST    R0,AIRXEXCOM       save EP-address
         SPACE 1
* suppress VSAM OPEN warning messages
         LA    R1,VSAM            A(ACB)
         USING IFGACB,R1
         OI    ACBINFL2,ACBSWARN  set 'suppress warning messages flag'
         SPACE 1
* open VSAM dataset
         OPEN  (VSAM)
* obtain VSAM dataset attributes
         SHOWCB ACB=VSAM,                                              X
               AREA=VSAM_ATTR,                                         X
               LENGTH=L'VSAM_ATTR,                                     X
               OBJECT=DATA,                                            X
               FIELDS=(KEYLEN,LRECL,RKP)
         SPACE 1
         MVC   RC,=H'12'          preset ReturnCode (REXX error)
         SPACE 1
* Obtain <KEY>
         LA    R6,IRX_SHVBLOCK
         USING SHVBLOCK,R6
         MVI   SHVCODE,SHVFETCH
         MVC   SHVBUFL,=A(L'IKEY)
         MVC   SHVVALA,=A(IKEY)
         LA    R1,=C'KEY'         A(varname)
         ST    R1,SHVNAMA
         LA    R0,3               L(varname)
         ST    R0,SHVNAML
         L     R15,AIRXEXCOM      A(IRXEXCOM)
         CALL  (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL
         LTR   R15,R15            REXX return code
         BNZ   EOJ                parameter error
         L     R1,SHVVALL         L(parameter)
         ST    R1,IKEYLEN         generic length
         SPACE 1
         MODCB RPL=RPL,KEYLEN=(*,IKEYLEN),OPTCD=(GEN)
         SPACE 1
* allocate record buffer
         L     R2,LRECL
* R2: VSAM logical (maximum) record length
         GETMAIN EU,LV=(2),A=AREC
* pass parameters to VSAM
         SPACE 1
         MODCB RPL=RPL,AREA=(*,AREC),AREALEN=(*,LRECL)
         POINT RPL=RPL            position
         SPACE 2
* read record
         MVC   RC,=H'4'           preset ReturnCode (EOF)
         GET   RPL=RPL
         MVC   RC,=H'8'           preset ReturnCode (read error)
         LTR   R15,R15
         BNZ   EOJ                read error
         SHOWCB RPL=RPL,                                               X
               AREA=RECLEN,                                            X
               LENGTH=4,                                               X
               FIELDS=(RECLEN)
         SPACE 1
* get key and pass to REXX
* calculate address of key
         L     R3,AREC            A(record)
         A     R3,RKP             +RKP (key displacement)
* R3: A(key)
         L     R4,KEYLEN          L(key)
* R4: L(key)
         LA    R0,3               L(VN)
         LA    R1,=C'KEY'
* set data into REXX variable
         BAL   R14,SETVAR
         SPACE 2
* get record and pass to REXX (variable name: RECORD)
         L     R3,AREC            A(record)
         L     R4,RECLEN          L(record)
         LA    R0,6               L(varname)
         LA    R1,=C'RECORD'      A(varname)
         BAL   R14,SETVAR         pass to REXX
         SPACE 1
* convert record length to display format
* and pass to REXX (variable name: RECLEN)
         L     R4,RECLEN          L(record)
         CVD   R4,D               convert to decimal
         OI    D+7,X'0F'          remove sign
         UNPK  WK,D
         LA    R3,WK              A(converted record length)
         LA    R4,L'WK            L(converted record length)
         LA    R0,6               L(varname)
         LA    R1,=C'RECLEN'      A(varname)
         BAL   R14,SETVAR         pass to REXX
         SPACE 2
         MVC   RC,=H'0'           set ReturnCode (=ok)
         SPACE 1
EOJ      DS    0H                 job end
         CLOSE (VSAM)
         SPACE 1
         L     R13,4(R13)         restore A(old save-area)
         LH    R15,RC             load ReturnCode
         RETURN (14,12),RC=(15)
         SPACE 1
* symbolic register equates
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R6       EQU   6
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 2
RC       DS    H                  return code
         TITLE 'Subroutines'
         DS    A                  savearea
SETVAR   ST    R14,SETVAR-4       save return address
* set REXX variable
*   R0: L(variable name)
*   R1: A(variable name)
*   R3: A(variable data)
*   R4: L(variable data)
         LA    R6,IRX_SHVBLOCK
         USING SHVBLOCK,R6
         ST    R0,SHVNAML         L(varname), normalised
         ST    R1,SHVNAMA         A(varname)
         MVI   SHVCODE,SHVSTORE   set store-flag
         ST    R3,SHVVALA         A(data)
         ST    R4,SHVVALL         L(data)
         L     R15,AIRXEXCOM      A(IRXEXCOM)
         CALL  (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL
         L     R14,SETVAR-4
         BR    R14                RETURN
         TITLE 'Data areas'
D        DS    0D,PL8             double-word work-area
WK       DS    CL6
         SPACE 2
IKEYLEN  DS    A                  input key length
IKEY     DS    CL256              input key
         SPACE 1
         DS    0A                 alignment
AREC     DS    A                  A(record)
RECLEN   DS    A                  L(record)
         SPACE 2
VSAM_ATTR DS   0XL12              VSAM attributes (3 contiguous fields)
KEYLEN   DS    A                  .) key length
LRECL    DS    A                  .) logical (maximum) record length
RKP      DS    A                  .) relative key position
         SPACE 3
         LTORG
         SPACE 1
AIRXEXCOM DS   A                  A(IRXEXCOM)
         SPACE 1
IRX_IRXEXCOM DC CL8'IRXEXCOM'
         DS    0A                 align
IRX_SHVBLOCK DC (SHVBLEN)X'0'
         TITLE 'VSAM control blocks'
VSAM     ACB   DDNAME=VSAM,MACRF=(KEY,DSN,DIR),EXLST=EXLST
         SPACE 1
EXLST    EXLST EODAD=EOJ
         SPACE 2
RPL      RPL   ACB=VSAM,ARG=IKEY,OPTCD=(NUP,KEQ,GEN,MVE)
         TITLE 'DSECTs'
* REXX Shared Variable request Block
         IRXSHVB
         SPACE 1
* VSAM ACB
         IFGACB
         END

A S Rudd
Systems Programmer (Germany)                  c A S Rudd 1991

