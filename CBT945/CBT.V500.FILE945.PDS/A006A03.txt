KSDS index component information

This is an Assembler program that will process the index
component of a KSDS using GETIX macros. Among other
information, the calculated minimum requirement for the index
component CI size is computed using the worst case key
compression found.

This program will print the following data for every section:

o      Section number - relative to one

o      Number of entries in the section

o      The average number of bytes per stored key

o      The maximum number of bytes per stored key

o      The minimum number of bytes per stored key.

For every sequence set CI, the following data will be printed:

o      Number of unused vertical pointers

o      Number of keys currently stored in the CI

o      Number of bytes of unused space in the CI

o      The average number of bytes per stored key

o      The maximum number of bytes per stored key

o      The minimum number of bytes per stored key.

For every index set CI, the following data will be printed:

o      Number of keys currently stored in the CI

o      Number of bytes of unused space in the CI

o      The average number of bytes per stored key

o      The maximum number of bytes per stored key

o      The minimum number of bytes per stored key.

This program will, on reaching the end of the sequence set or
index set records, print the following data for the sequence set:

o      Total number of keys stored (this will not always be equal
      to the number of data CIs in use because limited index
      maintenance is performed on deletion of data)

o      The average number of bytes per stored key

o      The maximum number of bytes per stored key

o      The minimum number of bytes per stored key.

For the index set the following data is printed:

o      The average number of bytes per stored key

o      The maximum number of bytes per stored key

o      The minimum number of bytes per stored key.

The program will compute a suggested index component size
using the value from the sequence set record with the largest
average number of bytes per key. Following the sequence set
totals, a message will be output indicating whether the actual
and computed value of the index component CI sizes agree or
not. The computed value may vary with a change in actual
value for a specific object.

VSAMIST  TITLE 'PROGRAM FOR PRINTING CONTROL INTERVAL AND OTHER STATS'
         PRINT NOGEN
         SPACE 1
*        SUGGESTED JCL
         SPACE 1
*        //        EXEC PGM=VSAMIST
*        //STEPLIB   DD DSN=MY.LOAD,DISP=SHR
*        //SYSUDUMP  DD SYSOUT=*
*        //SYSPRINT  DD SYSOUT=*
*        //VSAM      DD DSN=CLUSTER.NAME,DISP=SHR
         TITLE 'MACROS, DSECTS AND CONTROL BLOCKS USED'
*        ABEND                          TO ABEND THE PROGRAM
*        ACB                            ACCESS METHOD CONTROL BLOCK
*        CLOSE                          CLOSE FILE(S)
*        DCB                            DATA CONTROL BLOCK
*        DCBD (IHADCB)                  DCB DSECT FOR MAPPING DCB
*        FREEMAIN                       RELEASE STORAGE
*        FREEPOOL                       RELEASE BUFFER POOL
*        GETIX                          GET A VSAM INDEX CI
*        GETMAIN                        ACQUIRE STORAGE
*        IDAAMB                         DSECT MAPPING THE AMB
*        IDAAMBL                        DSECT MAPPING THE AMBL
*        IDAAMDSB                       DSECT MAPPING THE AMDSB
*        IEFJFCBN                       DSECT MAPPING THE JFCB
*        IFGACB                         DSECT MAPPING THE ACB
*        OPEN                           PREPARE FILE(S) FOR PROCESSING
*        PUT - QSAM                     WRITE A RECORD
*        RPL                            VSAM REQUEST PARAMETER LIST
*        SHOWCB                         OBTAIN DATA FROM A VSAM CB
*        TESTCB                         TEST DATA IN A VSAM CB
*        WTO                            WRITE TO OPERATOR
         SPACE 1
*        REGISTER EQUATES
         SPACE 1

Editor's note: register equates go here.

         TITLE 'PROGRAM MAIN LINE CODE'
*        1.    PROGRAM INITIALIZATION
*        2.    PERFORM INITIAL PROCESSING
*        3.    PERFORM MAIN PROCESSING
*        4.    PERFORM TERMINATION PROCESSING
*        5.    PROGRAM TERMINATION
*
*        REGISTER USAGE
*        0     USED BY MACROS
*        1     USED BY MACROS
*        2     WORK
*        10    RETURN ADDRESS FOR BRANCH AND SAVE INSTRUCTIONS
*        11    PROGRAM BASE REGISTER #1
*        12    PROGRAM BASE REGISTER #2
*        13    ADDRESS OF SAVE AREA
*        14    ADDRESS OF RETURN
*        15    ENTRY POINT ADDRESS / RETURN CODE
         SPACE 2
VSAMIST  CSECT
         STM   R14,R12,12(R13)          . SAVE CALLER'S REGISTERS
         LR    R11,R15                  . 11 - PROGRAM BASE
         USING VSAMIST,R11,R12          . ESTABLISH ADDRESSABILITY
         LA    R12,4095(,R11)
         LA    R12,1(,R12)
         GETMAIN R,                     . ISSUE GETMAIN FOR SAVE AREA  C
               LV=72
         ST    R13,4(,R1)               . BACKWARD SAVE AREA ->
         ST    R1,8(,R13)               . FORWARD SAVE AREA ->
         LR    R13,R1                   . 13 -> SAVE AREA
         BAS   R10,INITIAL              . INITIAL PROCESS
         BAS   R10,PROCESS              . MAIN PROCESSING
         BAS   R10,TERMIN               . TERMINATION PROCESSING
         LR    R2,R13                   . 2 -> CURRENT SAVE AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN R,                    . FREEMAIN SAVE AREA           C
               A=(R2),                                                 C
               LV=72
         L     R14,12(,R13)             . 14 -> RETURN
         SLR   R15,R15                  . 15 - ZERO
         LM    R0,R12,20(R13)           . RESTORE 0 - 12
         BR    R14                      . EXIT
         TITLE 'PROGRAM INITIALIZATION PROCESSING'
INITIAL  EQU   *
*
*        1.    DO READ JFCB FOR VSAM CLUSTER NAME
*        2.    OPEN FILES
*        3.    CHECK OPENS
*        4.    DETERMINE ATTRIBUTES OF VSAM OBJECT
*        5.    ACCESS OBJECT'S INDEX AMDSB FOR RBAS
*        6.    INITIALIZE DATA AREAS
*
*        REGISTER USAGE
*        0     USED BY MACROS
*        1     USED BY MACROS
*        2     WORK
*        10    RETURN ADDRESS FOR BRANCH AND SAVE INSTRUCTIONS
*        15    RETURN CODE
         SPACE 2
B0001    EQU   *
*                                       . ISSUE READ JFCB FOR DSN
         RDJFCB DUMMY                   . ISSUE READ JFCB
         LTR   R15,R15                  . Q. RDJFCB OKAY?
         BNZ   B0002                    . A. NO
         MVC   DSNTITLE,JFCBDSNM        . MOVE OUT DSN
B0002    EQU   *
*                                       . OPEN FILES
         OPEN  (VSAM,,SYSPRINT,OUTPUT)
         LTR   R15,R15                  . Q. OPENS OKAY?
         BZ    B0003                    . A. YES
         LA    R2,SYSPRINT              . 2 -> SYSPRINT DCB
         USING IHADCB,R2                . CHECK OPEN OF SYSPRINT
         TM    DCBOFLGS,DCBOFOPN        . Q. OPEN OKAY?
         BNO   B0008                    . A. NO - OPEN FAILED
         DROP  R2                       . DCB DSECT NOT WANTED
         LA    R2,VSAM                  . 2 -> VSAM ACB
         USING IFGACB,R2                . CHECK OPEN OF VSAM
         TM    ACBOFLGS,ACBOPEN         . Q. OPEN OKAY?
         BNO   B0009                    . A. NO - ABEND
         DROP  R2                       . ACB DSECT NOT WANTED
B0003    EQU   *                        . CHECK FOR KSDS INPUT
         TESTCB ACB=VSAM,                                              C
               ATRB=KSDS                . Q. IS THIS A KSDS?
         BNE   B0010                    . A. NO
*                                       . DETERMINE INDEX OPTIONS
         TESTCB ACB=VSAM,               . Q. SEQUENCE SET IMBEDDED?    C
               ATRB=SSWD
         BE    B0004                    . A. YES
         MVC   IMBED,=C'NOIMBED'        . INDICATE NOT IMBEDDED
         B     B0005
B0004    EQU   *
         MVC   IMBED,=C'IMBED  '        . INDICATE IMBEDDED
B0005    EQU   *
         TESTCB ACB=VSAM,               . Q. INDEX REPLICATED?         C
               ATRB=REPL
         BE    B0006                    . A. YES
         MVC   REPL,=C'NOREPLICATE'     . INDICATE NOT REPLICATED
         B     B0007
B0006    EQU   *
         MVC   REPL,=C'REPLICATE  '     . INDICATE REPLICATED
B0007    EQU   *
*                                       . DETERMINE INDEX CI SIZE,
*                                       .   NUMBER OF LEVELS AND RDF
*                                       .   DISPLACEMENT
         SHOWCB ACB=VSAM,                                              C
               AREA=CISZ,                                              C
               FIELDS=(CINV,NIXL),                                     C
               LENGTH=8,                                               C
               OBJECT=INDEX
         L     R2,CISZ                  . 2 - CI SIZE
         SH    R2,=H'+7'                . SUBTRACT SEVEN FROM CI SIZE
         STH   R2,RDFDISP               . SAVE RDF DISPLACEMENT
         L     R2,CISZ                  . 2 - CI SIZE
         CVD   R2,WORKD                 . PREPARE TO OUTPUT
         MVC   TCISZ,MASK5
         ED    TCISZ,WORKD+5
         L     R2,INDXL                 . 2 - NUMBER OF INDEX LEVELS
         CVD   R2,WORKD                 . PREPARE TO OUTPUT
         MVC   TNIXL,MASK3
         ED    TNIXL,WORKD+6
*                                       . OBTAIN RBAS FROM AMDSB
         LA    R2,VSAM                  . 2 -> ACB
         USING IFGACB,R2                . MAP THE ACB
         L     R2,ACBAMBL               . 2 -> AMBL
         DROP  R2
         USING IDAAMBL,R2               . MAP THE AMBL
         L     R2,AMBLIX                . 2 -> AMB FOR INDEX COMPONENT
         DROP  R2
         USING IDAAMB,R2                . MAP THE AMB
         L     R2,AMBDSB                . 2 -> AMDSB
         DROP  R2
         USING IDAAMDSB,R2              . MAP THE AMDSB
         MVC   RBARPL,AMDSSRBA          . SEQUENCE SET RECORD RBA
         MVC   RBASQSET,AMDSSRBA
         MVC   RBAHLVL,AMDHLRBA         . HIGH-LEVEL RBA
         LH    R2,AMDNEST               . 2 - ENTRIES PER SECTION
         DROP  R2
         CVD   R2,WORKD                 . CONVERT TO DECIMAL
         MVC   TNEST,MASK3              . OUTPUT ENTRIES / SECTION
         ED    TNEST,WORKD+6
*                                       . INITIALIZE OTHER DATA AREAS
         XC    KEYBYTES,KEYBYTES        . BYTES IN KEYS
         XC    KEYNUMBR,KEYNUMBR        . NUMBER OF KEYS
         MVI   LKEYDA,X'00'             . LONGEST KEY
         MVI   SKEYDA,X'FF'             . SHORTEST KEY
         ZAP   #CIREAD,=P'+0'           . CIS READ
         ZAP   #LINE,=P'+60'            . LINES ON PAGE
         ZAP   #PAGE,=P'+1'             . PAGE NUMBER
         ZAP   SEC#,=P'+0'              . SECTION NUMBER
         ZAP   SSAVGKEY,=P'+0'          . GREATEST AVERAGE KEY IN A CI
         BR    R10                      . EXIT
         TITLE 'ERROR ROUTINES - PROGRAM INITIALIZATION'
B0008    EQU   *
*                                       . OPEN FAILURE SYSPRINT
         WTO   'OPEN FAILURE FOR FILE SYSPRINT',                       C
               ROUTCDE=11
         LR    R2,R13                   . 2 -> SAVE AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN R,                    . FREEMAIN FOR SAVE AREA       C
               A=(R2),                                                 C
               LV=72
         L     R14,12(,R13)             . 14 -> RETURN
         LA    R15,10                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 - 12
         BR    R14                      . EXIT
         SPACE 2
B0009    EQU   *
*                                       . OPEN FAILURE VSAM
         ST    R15,REG15                . SAVE REGISTER 15
         WTO   'OPEN FAILURE FOR FILE VSAM',                           C
               ROUTCDE=11
         SHOWCB ACB=VSAM,               . GET ACB ERROR CODE           *
               AREA=OPENERR,                                           C
               FIELDS=ERROR,                                           C
               LENGTH=4
         LM    R2,R3,VSAMERR            . 2 - 3 VSAM ERROR CODES
         ABEND 100                      . ABEND
         SPACE 2
B0010    EQU   *
*                                       . NON KSDS INPUT
         WTO   'ONLY KSDS PROCESSED BY THIS PROGRAM',                  C
               ROUTCDE=11
         LR    R2,R13                   . 2 -> SAVE AREA
         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA
         FREEMAIN R,                    . FREE SAVE AREA               C
               A=(R2),                                                 C
               LV=72
         L     R14,12(,R13)             . 14 -> RETURN
         LA    R15,20                   . 15 - RETURN CODE
         LM    R0,R12,20(R13)           . RESTORE 0 - 12
         BR    R14                      . RETURN
         TITLE 'MAIN PROCESSING LOGIC OF PROGRAM'
PROCESS  EQU   *
*        1.    DIRECT GET FOR THE NEXT INDEX RECORD
*        2.    PROCESS INDEX HEADER
*        3.    PROCESS SEQUENCE SET RECORD
*        4.    OUTPUT SEQUENCE SET TOTALS
*        5.    PROCESS INDEX SET RECORD
*        REGISTER USAGE
*        0     USED BY MACROS
*        1     USED BY MACROS
*        2     WORK
*        3     WORK
*        4     ADDRESS OF CI READ
*        10    RETURN ADDRESS FOR BRANCH AND SAVE INSTRUCTIONS
*        15    RETURN CODE
         SPACE 2
C0001    EQU   *
         ST    R10,CSAVE                . SAVE CONTENT OF 10
C0002    EQU   *
         GETIX RPL=GETRPL               . GET THE INDEX CI
         LTR   R15,R15                  . Q. GET OKAY?
         BNZ   C0006                    . A. NO - GET FAILED
*                                       . OUTPUT RBA OF INDEX RECORD
         L     R2,RBARPL                . 2 - RBA OF CI
         CVD   R2,WORKD
         MVC   RBANUM,MASK9
         ED    RBANUM,WORKD+3
*                                       . PROCESS INDEX HEADER
         L     R4,@CI                   . 4 -> CI
         MVC   IXHFORM,0(R4)            . PULL INDEX HEADER
         TR    IXHPTLS,PLTBL            . PROCESS VERTICAL POINTER
         SLR   R2,R2                    .   SIZE
         IC    R2,IXHPTLS               . 2 - SIZE OF VERTICAL POINTER
         ST    R2,PTLS                  . SAVE POINTER LENGTH
*                                       . DETERMINE PROCESSING
         CLI   IXHLV,IXHSEQ             . Q. SEQUENCE SET RECORD?
         BNE   C0004                    . A. NO
         BAS   R10,SEQSET               . PROCESS SEQUENCE SET RECORD
         OC    RBARPL,RBARPL            . Q. END OF SEQUENCE SET?
         BNZ   C0002                    . A. NO
*                                       . END OF SEQUENCE SET PROCESS
         MVI   LINE1CI,C' '             . OUTPUT SEQUENCE SET TOTALS
         MVC   LINE1CI+1(93),LINE1CI
         MVC   LINE1CI(24),=C'0TOTALS FOR SEQUENCE SET'
         L     R2,KEYNUMBR              . OUTPUT TOTAL KEYS IN SEQUENCE
         CVD   R2,WORKD                 .   SET
         MVC   PTRUSE,MASK5
         ED    PTRUSE,WORKD+5
         MVC   LINE1,LINE1CI
         SLR   R2,R2                    . 2 - ZERO
         IC    R2,LKEYDA                . OUTPUT LONGEST KEY IN
         CVD   R2,WORKD                 .   SEQUENCE SET
         MVC   MAXKEY,MASK3
         ED    MAXKEY,WORKD+6
         IC    R2,SKEYDA                . OUTPUT SHORTEST KEY IN
         CVD   R2,WORKD                 .   SEQUENCE SET
         MVC   MINKEY,MASK3
         ED    MINKEY,WORKD+6
         SLR   R2,R2                    . COMPUTE AVERAGE STORED KEY
         L     R3,KEYBYTES              .   LENGTH
         D     R2,KEYNUMBR
         LTR   R2,R2                    . Q. REMAINDER ZERO?
         BZ    C0003                    . A. YES
         LA    R3,1(,R3)                . A. NO - INCREMENT AVG
C0003    EQU   *
         CVD   R3,WORKD
         MVC   AVGKEY,MASK3
         ED    AVGKEY,WORKD+6
         BAS   R10,PRINTLN              . OUTPUT SEQUENCE SET TOTALS
         MVI   LINE1CI,C' '             . RE-INITIALIZE OUTPUT LINE
         MVC   LINE1CI+1(93),LINE1CI
         MVI   LINE1CI,C'0'
         BAS   R10,COMPICIS             . COMPUTE SUGGESTED INDEX
*                                       .   COMPONENT CI SIZE
         CLC   RBAHLVL,RBASQSET         . Q. HIGH-LEVEL RBA = SEQUENCE
*                                       .   SET RBA?
         BE    C0005                    . A. YES - NO INDEX SET
*                                       . SET UP TO PROCESS INDEX SET
         ZAP   #LINE,=P'+60'            . FORCE PAGE CHANGE
         MVC   RBARPL,RBAHLVL           . HIGH-LEVEL RBA FOR GETIX
         MVI   LEV#,X'00'               . INITIALIZE LEVEL NUMBER
         XC    KEYNUMBR,KEYNUMBR        . INITIALIZE OTHER DATA
         XC    KEYBYTES,KEYBYTES
         MVI   LKEYDA,X'00'
         MVI   SKEYDA,X'FF'
         B     C0002                    . GO GET HIGH-LEVEL CI
*                                       . INDEX SET PROCESSING
C0004    EQU   *
         BAS   R10,INDXSET              . PROCESS INDEX SET RECORD
         CLI   LEV#,X'02'               . Q. LOWEST LEVEL INDEX SET?
         BNE   C0002                    . A. NO - KEEP ON PROCESSING
         OC    RBARPL,RBARPL            . Q. ANY MORE RECORDS?
         BNZ   C0002                    . A. YES
C0005    EQU   *
         L     R10,CSAVE                . RESTORE 10
         BR    R10                      . EXIT
         TITLE 'ERROR ROUTINES - MAIN PROCESSING'
C0006    EQU   *
*                                       . GET FAILURE VSAM
         ST    R15,REG15                . SAVE REGISTER 15
         WTO   'GET FAILURE FOR FILE VSAM',                            C
               ROUTCDE=11
         SHOWCB RPL=GETRPL,             . GET RPL FEED BACK CODE       C
               AREA=RPLFDBK,                                           C
               FIELDS=FDBK,                                            C
               LENGTH=4
         LA    R3,VSAM                  . 3 -> ACB
         LM    R2,R4,VSAMERR            . 2 - 4 VSAM ERROR CODES
         ABEND 100                      . ABEND
         TITLE 'END OF PROCESSING ROUTINE'
TERMIN   EQU   *
*        1.    CLOSE FILES
*        2.    RELEASE BUFFER POOL
*
*        REGISTER USAGE
*        0     USED BY MACROS
*        1     USED BY MACROS
*        10    RETURN ADDRESS FOR BRANCH AND SAVE INSTRUCTIONS
*        15    RETURN CODE
         SPACE 2
D0001    EQU   *
         CLOSE (VSAM,,SYSPRINT)         . CLOSE FILES
         FREEPOOL SYSPRINT              . RELEASE BUFFER POOL
         BR    R10                      . EXIT
         TITLE 'SEQUENCE SET PROCESSING'
SEQSET   EQU   *
*        1.    INCREMENT TOTALS
*        2.    COMPUTE UNUSED VERTICAL POINTERS
*        3.    PROCESS THE INDEX DATA
*        4.    RETURN
*
*        REGISTER USAGE
*        2     WORK
*        3     WORK
*        10    RETURN ADDRESS FOR BRANCH AND SAVE INSTRUCTIONS
         SPACE 2
E0001    EQU   *
         ST    R10,ESAVE                . SAVE 10
         AP    #CIREAD,=P'+1'           . INCREMENT CIS READ
         MVC   CINUM,MASK9              . OUTPUT CI NUMBER TO REPORT
         ED    CINUM,#CIREAD
*                                       . VERTICAL POINTER PROCESSING
         MVC   HPTLS,IXHPTLS            . SAVE POINTER LENGTH
         SLR   R2,R2                    . 2 - ZERO
         LH    R3,IXHFSO                . 3 - FREE SPACE OFFSET
         SH    R3,=H'+24'               . SUBTRACT LENGTH OF INDEX HDR
*                                       . 3 - NUMBER OF BYTES IN PTRS
         D     R2,PTLS                  . DIVIDE BY POINTER LENGTH
         CVD   R3,WORKD                 . 3 - NUMBER OF UNUSED PTRS
         MVC   PTRUNUSE,MASK5
         ED    PTRUNUSE,WORKD+5
         BAS   R10,CIPROC               . PROCESS THE INDEX DATA
         CP    WORKD,SSAVGKEY           . Q. LONGEST AVG KEY SO FAR?
         BNH   E0002                    . A. NO
         MVC   SSAVGKEY,WORKD+4         . SAVE AVERAGE KEY LENGTH
E0002    EQU   *
         L     R10,ESAVE                . RESTORE 10
         BR    R10                      . EXIT
         TITLE 'INDEX SET RECORD PROCESSING'
INDXSET  EQU   *
*        1.    CHECK FOR CHANGE IN LEVEL
*              IF CHANGE, DETERMINE RBA OF FIRST LOGICAL CI AT
*              LOWER LEVEL
*        2.    INCREMENT CI TOTAL
*        3.    CHECK FOR END OF CIS AT CURRENT LEVEL
*              IF AT END, CHECK LOWER LEVEL FOR SEQUENCE SET
*              IF NOT SEQUENCE SET, GET SET TO CONTINUE
*
*        REGISTER USAGE
*        2     WORK
*        3     WORK
*        4     ADDRESS OF INDEX CI
*        10    RETURN ADDRESS FOR BRANCH AND SAVE INSTRUCTIONS
         SPACE 2
F0001    EQU   *
         ST    R10,FSAVE                . SAVE 10
         CLC   LEV#,IXHLV               . Q. CHANGE IN INDEX LEVEL?
         BE    F0002                    . A. NO
         MVC   LEV#,IXHLV               . SAVE NEW INDEX LEVEL
*                                       . DETERMINE RBA OF LOWER LEVEL
         LH    R2,RDFDISP               . 2 - RDF DISPLACEMENT
         LA    R2,0(R2,R4)              . 2 -> RDF
         SH    R2,=H'+3'                . 2 -> VERTICAL POINTER
*                                       . (3 BYTE VERTICAL POINTER)
         SLR   R3,R3                    . 3 - ZERO
         ICM   R3,7,0(R2)               . 3 - LOWER LEVEL CI NUMBER
         M     R2,CISZ                  . 3 - RBA OF LOWER LEVEL CI
         ST    R3,RBANXLVL              . SAVE RBA OF LOWER LEVEL CI
         ZAP   #CIREAD,=P'+0'           . RESET CI ACCUMULATOR
F0002    EQU   *
*                                       . PROCESS
         AP    #CIREAD,=P'+1'           . INCREMENT CIS AT THIS LEVEL
         MVC   CINUM,MASK9              . OUTPUT CI NUMBER
         ED    CINUM,#CIREAD
         BAS   R10,CIPROC               . PROCESS THE INDEX DATA
*                                       . END OF THIS LEVEL PROCESS
         OC    RBARPL,RBARPL            . Q. NEXT CI RBA ZERO?
         BNZ   F0003                    . A. NO
         CLI   LEV#,X'02'               . Q. LOWEST LEVEL INDEX SET?
         BE    F0003                    . A. YES - TERMINATE
         MVC   RBARPL,RBANXLVL          . LOAD RPL FOR LOWER LEVEL
F0003    EQU   *
         L     R10,FSAVE                . RESTORE 10
         BR    R10                      . EXIT
         TITLE 'INDEX CONTROL INTERVAL INDEX ENTRY PROCESSING'
CIPROC   EQU   *
*        1.    PROCESS INDEX HEADER
*        2.    PROCESS INDEX ENTRIES
*        3.    PRINT RESULTS
*
*        REGISTER USAGE
*        0     BCTR INSTRUCTIONS
*        2     WORK
*        3     WORK
*        4     ADDRESS OF INDEX CI
*        5     ADDRESS OF CONTROL INFORMATION - CURRENT SECTION
*        6     ADDRESS OF CONTROL INFORMATION - HIGH-KEY SECTION
*        7     ADDRESS OF CURRENT POSITION IN CI
*        10    RETURN ADDRESS FOR BRANCH AND SAVE INSTRUCTIONS
         SPACE 2
G0001    EQU   *
         ST    R10,GSAVE                . SAVE 10
*                                       . OUTPUT INDEX LEVEL
         SLR   R2,R2                    . 2 - ZERO
         IC    R2,IXHLV                 . 2 - INDEX LEVEL
         CVD   R2,WORKD
         MVC   RIXL,MASK3
         ED    RIXL,WORKD+6
*                                       . COMPUTE UNUSED SPACE
         LH    R3,IXHFSO                . 3 - FREE SPACE OFFSET
         LA    R2,0(R3,R4)              . 2 -> FREE SPACE
         ST    R2,@FREE                 . SAVE ADDRESS OF FREE SPACE
         LH    R3,IXHLEO                . 3 - DISPLACEMENT OF CONTROL
*                                       .   INFORMATION IN LEFT-MOST
*                                       .   INDEX ENTRY
         LA    R2,1(R3,R4)              . 2 -> CONTROL INFORMATION
*                                       .   LENGTH OF LEFT MOST KEY
         SLR   R3,R3                    . 3 - ZERO
         IC    R3,0(,R2)                . 3 - LENGTH OF LEFT MOST KEY
         LA    R3,1(,R3)                . INCREMENT LENGTH BY ONE
         SLR   R2,R3                    . 2 -> LEFT-MOST KEY
         S     R2,@FREE                 . 2 - LENGTH OF UNUSED SPACE
         CVD   R2,WORKD
         MVC   UNUSEDSP,MASK5
         ED    UNUSEDSP,WORKD+5
*                                       . PROCESS INDEX ENTRIES
         XC    CIKEYNUM,CIKEYNUM        . INITIALIZE CI ACCUMULATORS
         XC    CIKEYBYT,CIKEYBYT
         MVI   LKEYCI,X'00'
         MVI   SKEYCI,X'FF'
         XC    SCKEYNUM,SCKEYNUM        . INITIALIZE SECTION ACCUMS
         XC    SCKEYBYT,SCKEYBYT
         MVI   LKEYSC,X'00'
         MVI   SKEYSC,X'FF'
         ZAP   SEC#,=P'+1'
         LH    R7,RDFDISP               . 7 - DISPLACEMENT OF RDF
         LA    R7,0(R7,R4)              . 7 -> RDF
         LH    R5,IXHSEO                . 5 - DISPLACEMENT OF HIGHEST
*                                       .   INDEX ENTRY IN FIRST
*                                       .   (RIGHT-MOST) SECTION
         LA    R5,0(R5,R4)              . 5 -> END OF FIRST SECTION
         LH    R6,IXHLEO                . 6 - DISPLACEMENT OF LAST
*                                       .   INDEX ENTRY
         LA    R6,0(R6,R4)              . 6 -> LAST INDEX ENTRY
*        INDEX CI - SCENARIO
*        --------------------------------------------------------
*        *            *         *            *         *      *R*
*        *            * LAST    *            *         *FIRST *D*
*        *            * SECTION *            *         *SECT. *F*
*        --------------------------------------------------------
*        |             |                                |      |
*        R4            R6                               R5     R7
*
G0002    EQU   *
*                                       . PROCESS LOOP POINT
         S     R7,PTLS                  . 7 -> VERTICAL PTR (IBPLP3)
         BCTR  R7,R0                    . 7 -> LENGTH OF KEY (IBPFLPL)
         SLR   R2,R2                    . 2 - ZERO
         IC    R2,0(,R7)                . 2 - LENGTH OF KEY
         ST    R2,CURKEYL               . SAVE KEY LENGTH
         L     R2,SCKEYNUM              . INCREMENT KEYS IN SECTION
         LA    R2,1(,R2)
         ST    R2,SCKEYNUM
         CLC   CURKEYL+3(1),SKEYSC      . Q. SHORTEST KEY IN SECTION?
         BNL   *+10                     . A. NO
         MVC   SKEYSC,CURKEYL+3         . UPDATE
         CLC   CURKEYL+3(1),LKEYSC      . Q. LONGEST KEY IN SECTION?
         BNH   *+10                     . A. NO
         MVC   LKEYSC,CURKEYL+3         . UPDATE
         L     R2,CURKEYL               . 2 - KEY LENGTH
         A     R2,SCKEYBYT              . INCREMENT BYTES IN KEYS
         ST    R2,SCKEYBYT              .   WITHIN THIS SECTION
         BCTR  R7,R0                    . 7 -> FRONT KEY COMPRESSION
*                                       .   COUNT (IBFLPF)
         L     R2,CURKEYL               . 2 - KEY LENGTH
         SR    R7,R2                    . 7 -> KEY
         CR    R7,R5                    . Q. END OF SECTION?
         BH    G0002                    . A. NO - LOOP ON
*                                       . END OF SECTION - TOTALS
         MVC   RSEC#,MASK5
         ED    RSEC#,SEC#               . SECTION NUMBER
         L     R2,SCKEYNUM              . 2 - NUMBER OF KEYS IN SECTION
         CVD   R2,WORKD
         MVC   RSECENT,MASK3
         ED    RSECENT,WORKD+6
         SLR   R2,R2                    . 2 - ZERO
         IC    R2,LKEYSC                . 2 - LONGEST KEY IN SECTION
         CVD   R2,WORKD
         MVC   MAXKEY,MASK3
         ED    MAXKEY,WORKD+6
         IC    R2,SKEYSC                . 2 - SHORTEST KEY IN SECTION
         CVD   R2,WORKD
         MVC   MINKEY,MASK3
         ED    MINKEY,WORKD+6
*                                       . COMPUTE AVERAGE KEY LENGTH
         SLR   R2,R2                    . 2 - ZERO
         L     R3,SCKEYBYT              . 3 - TOTAL BYTES IN KEYS
         D     R2,SCKEYNUM              . COMPUTE AVERAGE KEY LENGTH
         LTR   R2,R2                    . Q. REMAINDER ZERO?
         BZ    G0003                    . A. YES
         LA    R3,1(,R3)                . A. NO - INCREMENT AVG
G0003    EQU   *
         CVD   R3,WORKD
         MVC   AVGKEY,MASK3
         ED    AVGKEY,WORKD+6
         BAS   R10,PRINTLN              . OUTPUT SECTION DATA
*                                       . UPDATE TOTALS FOR CI
         L     R3,SCKEYNUM              . NUMBER OF KEYS
         A     R3,CIKEYNUM
         ST    R3,CIKEYNUM
         L     R3,SCKEYBYT              . BYTES IN KEYS
         A     R3,CIKEYBYT
         ST    R3,CIKEYBYT
         CLC   LKEYSC,LKEYCI            . Q. LONGEST KEY
         BNH   *+10                     . A. NO
         MVC   LKEYCI,LKEYSC
         CLC   SKEYSC,SKEYCI            . Q. SHORTEST KEY
         BNL   *+10                     . A. NO
         MVC   SKEYCI,SKEYSC
*                                       . RE-INITIALIZE SECTION ACCUMS
         XC    SCKEYNUM,SCKEYNUM
         XC    SCKEYBYT,SCKEYBYT
         MVI   LKEYSC,X'00'
         MVI   SKEYSC,X'FF'
         AP    SEC#,=P'+1'              . INCREMENT SECTION NUMBER
*                                       . PROCESS SECTION POINTER
         CR    R7,R6                    . Q. END OF KEYS?
         BNH   G0004                    . A. YES
         SH    R7,=H'+2'                . 7 -> SECTION POINTER
         ICM   R2,3,0(R7)               . 2 - OFFSET OF HIGH KEY IN
*                                       .   NEXT SECTION
         SLR   R5,R2                    . 5 -> HIGH KEY IN NEXT SECTION
         B     G0002                    . PROCESS NEXT SECTION
G0004    EQU   *
*                                       . OUTPUT CI TOTALS
         L     R2,CIKEYNUM              . 2 - NUMBER OF KEYS
         CVD   R2,WORKD
         MVC   PTRUSE,MASK5
         ED    PTRUSE,WORKD+5
         SLR   R2,R2                    . 2 - ZERO
         IC    R2,LKEYCI                . 2 - LONGEST KEY
         CVD   R2,WORKD
         MVC   MAXKEY,MASK3
         ED    MAXKEY,WORKD+6
         IC    R2,SKEYCI                . 2 - SHORTEST KEY
         CVD   R2,WORKD
         MVC   MINKEY,MASK3
         ED    MINKEY,WORKD+6
         SLR   R2,R2                    . COMPUTE AVERAGE KEY LENGTH
         L     R3,CIKEYBYT              . 3 - TOTAL BYTES IN KEYS
         D     R2,CIKEYNUM              . 3 - AVERAGE KEY LENGTH
         LTR   R2,R2                    . Q. REMAINDER ZERO?
         BZ    G0005                    . A. YES
         LA    R3,1(,R3)                . A. NO - INCREMENT AVG
G0005    EQU   *
         CVD   R3,WORKD
         MVC   AVGKEY,MASK3
         ED    AVGKEY,WORKD+6
         MVC   LINE1,LINE1CI            . OUTPUT CI TOTALS
         BAS   R10,PRINTLN
         MVI   LINE1,C'0'               . RESET ASA CONTROL CHARACTER
*                                       . INCREMENT TOTALS FOR LEVEL
         L     R2,CIKEYNUM              . NUMBER OF KEYS
         A     R2,KEYNUMBR
         ST    R2,KEYNUMBR
         L     R2,CIKEYBYT              . BYTES USED IN KEYS
         A     R2,KEYBYTES
         ST    R2,KEYBYTES
         CLC   SKEYCI,SKEYDA            . Q. SHORTEST KEY SO FAR?
         BNL   *+10                     . A. NO
         MVC   SKEYDA,SKEYCI
         CLC   LKEYCI,LKEYDA            . Q. LONGEST KEY SO FAR?
         BNH   *+10                     . A. NO
         MVC   LKEYDA,LKEYCI            . UPDATE
*                                       . UPDATE RBA SPECIFIED IN RPL
         MVC   RBARPL,IXHHP             . HORIZONTAL POINTER
         L     R10,GSAVE                . RESTORE 10
         BR    R10                      . EXIT
         TITLE 'COMPUTE AND OUTPUT SUGGESTED INDEX COMPONENT CI SIZE'
COMPICIS EQU   *
*        1.    COMPUTE SUGGESTED INDEX COMPONENT CI SIZE
*        2.    COMPARE COMPUTED VALUE WITH ACTUAL
*        3.    IF ACTUAL LESS, OUTPUT MESSAGE
*        4.    IF ACTUAL GREATER, OUTPUT MESSAGE
*
*        FORMULAE USED:
*        A.    INDEX CI SIZE >= 31
*                             + (2 * NUMBER OF SECTIONS)
*                             + (INDEX ENTRY LENGTH * DATA CI/CA)
*              WHERE THE NUMBER OF SECTIONS IS THE NUMBER OF DATA
*              COMPONENT CIS PER CA DIVIDED BY THE SQUARE ROOT OF
*              THE NUMBER OF DATA COMPONENT CIS PER CA
*
*        B.    NEWTON-RAPHESON METHOD FOR SQUARE ROOT APPROXIMATION
*                  1.   FIRST APPROXIMATION - HALF THE INTEGER
*                  2.   BETTER APPROXIMATIONS
*                       Y{I + 1} = Y{I} + ((( X / Y{I}) - Y{I}) / 2)
*
*                       WHERE X        IS THE NUMBER TO BE ROOTED
*                             Y{I}     IS THE CURRENT APPROXIMATION
*                             Y{I + 1} IS A BETTER APPROXIMATION
*                       THE PROCESS TERMINATES WHEN THE CORRECTION
*                       FACTOR IS LESS THAN ONE.  ALL VALUES USED
*                       ARE INTEGERS
*
*        REGISTER USAGE
*        2     WORK
*        7     WORK
*        8     WORK
*        9     WORK
*        10    RETURN ADDRESS FOR BRANCH AND SAVE INSTRUCTIONS
         SPACE 2
H0001    EQU   *
         STM   R7,R10,HSAVE             . SAVE REGISTERS
         LA    R2,VSAM                  . 2 -> ACB
         USING IFGACB,R2                . DSECT ADDRESSABILITY
         L     R2,ACBAMBL               . 2 -> AMBL
         DROP  R2
         USING IDAAMBL,R2               . DSECT ADDRESSABILITY
         L     R2,AMBLDTA               . 2 -> DATA COMPONENT AMB
         DROP  R2
         USING IDAAMB,R2                . DSECT ADDRESSABILITY
         L     R2,AMBDSB                . 2 -> AMDSB
         DROP  R2
         USING IDAAMDSB,R2              . MAP THE AMDSB
         LH    R2,AMDCIPCA              . 2 - CIS PER CA
         DROP  R2
         CVD   R2,WORKD                 . CONVERT TO DECIMAL
         MVC   DCIPCA,WORKD+6           . SAVE
*                                       . COMPUTE NUMBER OF SECTIONS
*                                       .   DETERMINE SQUARE ROOT OF
*                                       .   CI/CA - NEWTON-RAPHESON
*                                       .   METHOD (INTEGERS ONLY)
         LTR   R7,R2                    . 7 - CIS PER CA
         BZ    H0004                    . EXIT IF ZERO!
         CH    R7,=H'+1'                . Q. 1 CI PER CA? (IMPOSSIBLE)
         BE    H0004                    . A. YES
H0002    EQU   *                        . INITIAL APPROXIMATION
         SRA   R7,1                     . DIVIDE BY TWO
         LR    R9,R7                    . 9 - INITIAL APPROXIMATION
         MR    R8,R7                    . SQUARE APPROXIMATION
         LTR   R8,R8                    . Q. INITIAL APPROX. VALID?
         BNZ   H0002                    . A. NO - HALF AGAIN
H0003    EQU   *                        . COMPUTE CORRECTION FACTOR
         SLR   R8,R8                    . 8 - ZERO
         LR    R9,R2                    . 9 - CIS/CA
         DR    R8,R7                    . DIVIDE BY PREVIOUS APPROX.
         SR    R9,R7                    .   SUBTRACT PREVIOUS APPROX.
         SRA   R9,1                     .   AND HALVE IT
         AR    R7,R9                    . 7 - NEW APPROXIMATION
         LPR   R8,R9                    . 8 - ABSOLUTE CORRECTION
*                                       .   FACTOR
         SRA   R8,1                     . Q. CORRECTION VALUE < TWO?
         BNZ   H0003                    . A. NO
H0004    EQU   *
         CVD   R7,WORKD                 . CONVERT TO DECIMAL
         ZAP   #SECTION,DCIPCA          . NUMBER OF CIS PER CA
         DP    #SECTION,WORKD+6(2)      . DIVIDE BY ENTRIES PER SECTION
         ZAP   WORKD,#SECTION(2)        . PICK UP QUOTIENT
         MVC   #SECTION,WORKD+4         . SAVE NUMBER OF SECTIONS
*                                       . COMPUTE INDEX CI REQUIREMENTS
         ZAP   SUGCISZ,=P'+31'          . THIRTY ONE BYTES
*                                       .   24 BYTE INDEX HEADER
*                                       .   3 BYTE RDF
*                                       .   4 BYTE CIDF
         MP    #SECTION,=P'+2'          . SECTION OVERHEAD
         AP    SUGCISZ,#SECTION         . ADD TO SUGGESTION
*                                       . COMPUTE INDEX ENTRY SIZE
         AP    SSAVGKEY,=P'+3'          . INCREMENT AVERAGE KEY BY
*                                       .   1 BYTE FRONT DROP COUNT
*                                       .   1 BYTE LEFT COUNT
*                                       .   1 BYTE VERTICAL POINTER
         CLI   HPTLS,IXHPTL1            . Q. ONE BYTE VERTICAL POINTER?
         BE    H0005                    . A. YES
         AP    SSAVGKEY,=P'+1'          . INCREMENT FOR 2 BYTE VERTICAL
*                                       .   POINTER
H0005    EQU   *
         MP    SSAVGKEY,DCIPCA          . INDEX ENTRY REQUIREMENTS
         AP    SUGCISZ,SSAVGKEY         . ADD TO SUGGESTION
*                                       . COMPUTE INDEX CI SIZE
         SP    SUGCISZ,=P'+1'           . DECREMENT SUGGESTION BY ONE
         ZAP   WORKD,SUGCISZ            . PUT INTO WORK AREA
         CVB   R2,WORKD                 . CONVERT TO BINARY
         SRA   R2,9                     . DIVIDE BY 512
         LA    R2,1(,R2)                . INCREMENT BY ONE
         SLA   R2,9                     . MULTIPLY BY 512
         CVD   R2,WORKD                 . CONVERT TO DECIMAL
         MVC   SUGCISZ,WORKD+4          . SAVE SUGGESTED CI SIZE
         L     R2,CISZ                  . 2 - ACTUAL CI SIZE
         CVD   R2,WORKD                 . CONVERT TO DECIMAL
         CP    WORKD,SUGCISZ            . Q. ACTUAL CI SIZE = COMPUTED?
         BE    H0007                    . A. YES
         MVC   ACISZ,MASK5              . OUTPUT EDIT MASKS
         MVC   CCISZ,MASK5
         ED    ACISZ,WORKD+5            . OUTPUT ACTUAL CI SIZE
         ED    CCISZ,SUGCISZ+1          . OUTPUT COMPUTED CI SIZE
         CP    SUGCISZ,=P'+8192'        . Q. SUGGESTED > 8192?
         BNH   H0006                    . A. NO
         MVC   OMAX,IMAXCI              . OUTPUT DISASTER
H0006    EQU   *
         MVC   LINE1,SUGLINE            . MOVE DETAIL LINE
         B     H0008                    . COMMON OUTPUT
H0007    EQU   *
         MVC   UCISZ,MASK5              . OUTPUT EDIT MASK
         ED    UCISZ,WORKD+5            . OUTPUT CI SIZE
         MVC   LINE1,SATLINE            . MOVE DETAIL LINE
H0008    EQU   *
         BAS   R10,PRINTLN              . WRITE DETAIL
         LM    R7,R10,HSAVE             . RESTORE REGISTERS
         BR    R10                      . EXIT
         TITLE 'PRINT ROUTINE FOR SYSPRINT'
PRINTLN  EQU   *
*        1.    CHECK LINE COUNT
*              OUTPUT HEADINGS IF REQUIRED
*        2.    OUTPUT PRINT LINE
*        3.    RE-INITIALIZE PRINT LINE
*
*        REGISTER USAGE
*        0     USED BY MACROS
*        1     USED BY MACROS
*        10    RETURN ADDRESS FOR BRANCH AND SAVE INSTRUCTIONS
*        14    RETURN ADDRESS FOR BRANCH AND LINK INSTRUCTIONS
*        15    PUT ROUTINE ENTRY ADDRESS
         SPACE 2
I0001    EQU   *
         CP    #LINE,=P'+58'            . Q. HEADINGS REQUIRED?
         BL    I0002                    . A. NO
         MVC   PAGEOUT,MASK5            . OUTPUT PAGE NUMBER
         ED    PAGEOUT,#PAGE
         PUT   SYSPRINT,                . OUTPUT PAGE HEADINGS         C
               TITLE
         PUT   SYSPRINT,                                               C
               STITLE1
         PUT   SYSPRINT,                                               C
               STITLE2
         PUT   SYSPRINT,                                               C
               STITLE3
         AP    #PAGE,=P'+1'             . INCREMENT PAGE NUMBER
         ZAP   #LINE,=P'+5'             . RESET LINE COUNTER
I0002    EQU   *
         PUT   SYSPRINT,                . OUTPUT PRINT LINE            C
               LINE1
         AP    #LINE,=P'+1'             . INCREMENT LINE COUNTER
         CLI   LINE1,C'0'               . Q. DOUBLE LINE SPACING REQ.?
         BNE   I0003                    . A. NO
         AP    #LINE,=P'+1'
I0003    EQU   *
         MVI   LINE1,C' '               . RE-INITIALIZE OUTPUT LINE
         MVC   LINE1+1(132),LINE1
         BR    R10                      . EXIT
         TITLE 'DATA AREAS'
WORKD    DS    D                        . USED BY CVD INSTRUCTIONS
@CI      DS    F                        . CI ADDRESS MODIFIED BY GETIX
@FREE    DS    F                        . ADDRESS OF FREE SPACE IN CI
CSAVE    DS    F                        . REGISTER SAVE AREA
ESAVE    DS    F                        . REGISTER SAVE AREA
FSAVE    DS    F                        . REGISTER SAVE AREA
GSAVE    DS    F                        . REGISTER SAVE AREA
HSAVE    DS    4F                       . REGISTER SAVE AREA
CIKEYBYT DS    F                        . NUMBER OF BYTES IN KEYS IN CI
CIKEYNUM DS    F                        . NUMBER OF KEYS IN CI
KEYBYTES DS    F                        . TOTAL NUMBER OF BYTES IN KEYS
KEYNUMBR DS    F                        . TOTAL NUMBER OF KEYS
SCKEYBYT DS    F                        . NUMBER OF BYTES IN KEYS IN
*                                       .   SECTION
SCKEYNUM DS    F                        . NUMBER OF KEYS IN SECTION
*               . CISZ AND INDXL ARE USED IN THE SAME SHOWCB - MUST
*               .   STAY ADJACENT
CISZ     DS    F                        . INDEX COMPONENT CI SIZE
INDXL    DS    F                        . NUMBER OF INDEX LEVELS
CURKEYL  DS    F                        . LENGTH OF CURRENT KEY
PTLS     DS    F                        . VERTICAL POINTER LENGTH
RBAHLVL  DS    F                        . HIGH-LEVEL RBA
RBANXLVL DS    F                        . RBA OF FIRST LOGICAL CI AT
*                                       .   NEXT LOWER LEVEL
RBARPL   DS    F                        . RBA SPECIFIED IN RPL MACRO
RBASQSET DS    F                        . SEQUENCE SET RBA
*               . THE VSAM ERROR FIELDS MUST STAY ADJACENT
VSAMERR  DS    0F
REG15    DS    F                        . REGISTER 15
OPENERR  DS    F                        . ACB ERROR CODE
RPLFDBK  DS    F                        . RPL FEED BACK CODE
RDFDISP  DS    H                        . RDF DISPLACEMENT IN CI
#CIREAD  DS    PL5                      . NUMBER OF CIS PROCESSED
#LINE    DS    PL2                      . LINE COUNTER
#PAGE    DS    PL3                      . PAGE ACCUMULATOR
#SECTION DS    PL4                      . NUMBER OF SECTIONS
DCIPCA   DS    PL2                      . DATA COMPONENT CI/CA
SEC#     DS    PL3                      . SECTION NUMBER
SSAVGKEY DS    PL4                      . LARGEST SEQUENCE SET AVERAGE
*                                       .   KEY LENGTH
SUGCISZ  DS    PL4                      . SUGGESTED CI SIZE
HPTLS    DS    X                        . INDEX POINTER LENGTH
LEV#     DS    X                        . INDEX LEVEL BEING PROCESSED
LKEYCI   DS    X                        . LONGEST KEY - CI
LKEYDA   DS    X                        . LONGEST KEY LENGTH
LKEYSC   DS    X                        . LONGEST KEY - SECTION
SKEYCI   DS    X                        . SHORTEST KEY - CI
SKEYDA   DS    X                        . SHORTEST KEY LENGTH
SKEYSC   DS    X                        . SHORTEST KEY - SECTION
MASK3    DC    X'40202120'              . EDIT MASKS
MASK5    DC    X'402020202120'
MASK9    DC    X'40202020202020202120'
PLTBL    DC    X'0001000200000003'      . POINTER LENGTH TRANSLATE
*                                       .   TABLE
         SPACE 2
*                                       . INDEX RECORD HEADER
         DS    0F                       . FULL-WORD ALIGN
IXHFORM  DS    0CL24
IXHLL    DS    H                        . LENGTH OF INDEX RECORD
IXHFLPLN DS    X                        . LENGTH OF INDEX ENTRY CONTROL
*                                       .   INFORMATION
IXHPTLS  DS    X                        . LENGTH OF VERTICAL POINTER
IXHPTL1  EQU   X'01'                    . ONE BYTE POINTER
IXHPTL2  EQU   X'03'                    . TWO BYTE POINTER
IXHPTL3  EQU   X'07'                    . THREE BYTE POINTER
IXHBRBA  DS    F                        . RBA OF ASSOCIATED LOWER LEVEL
IXHHP    DS    F                        . HORIZONTAL POINTER
IXHXX    DS    F                        . RESERVED
IXHLV    DS    X                        . LEVEL NUMBER OF RECORD
IXHSEQ   EQU   X'01'                    . SEQUENCE SET RECORD
IXHFLGS  DS    X                        . RESERVED
IXHFSO   DS    H                        . DISPLACEMENT OF UNUSED SPACE
IXHLEO   DS    H                        . DISPLACEMENT OF HIGH-KEY
*                                       .   INDEX ENTRY CONTROL INFO.
IXHSEO   DS    H                        . DISPLACEMENT OF HIGH-KEY
*                                       .   INDEX ENTRY IN FIRST SEC.
         SPACE 2
*                                       . PRINT LINES
TITLE    DC    CL15'1'
         DC    CL50'ANALYSIS OF INDEX COMPONENT CONTROL INTERVALS FOR '
DSNTITLE DC    CL44' '
         DC    CL14' '
         DC    CL4'PAGE'
PAGEOUT  DS    CL6
STITLE1  DC    CL25'0 CONTROL INTERVAL SIZE: '
TCISZ    DS    CL6
         DC    CL26'  NUMBER OF INDEX LEVELS: '
TNIXL    DS    CL4
         DC    CL31'  NUMBER OF ENTRIES / SECTION: '
TNEST    DS    CL4
         DC    CL17'  INDEX OPTIONS: '
IMBED    DS    CL7
         DC    CL2' '
REPL     DS    CL11
STITLE2  DC    CL133'0                       LOGICAL                   C
                                          POINTERS             SECTION C
                           KEY LENGTH    '
STITLE3  DC    CL133'   INDEX LEVEL         CI NUMBER          CI''S RBC
               A       UNUSED SPACE      USED     UNUSED    NUMBER   ENC
               TRIES      MAX    MIN    AVG'
LINE1    DC    CL94' '
RSEC#    DS    CL6
         DC    CL6' '
RSECENT  DS    CL4
         DC    CL5' '
MAXKEY   DS    CL4
         DC    CL3' '
MINKEY   DS    CL4
         DC    CL3' '
AVGKEY   DS    CL4
LINE1CI  DC    CL6'0'
RIXL     DS    CL4
         DC    CL12' '
CINUM    DS    CL10
         DC    CL8' '
RBANUM   DS    CL10
         DC    CL9' '
UNUSEDSP DS    CL6
         DC    CL8' '
PTRUSE   DS    CL6
         DC    CL5' '
PTRUNUSE DS    CL6
         DC    CL4' '
SUGLINE  DC    CL6'0'
         DC    CL15'ACTUAL CI SIZE:'
ACISZ    DS    CL6
         DC    CL24'    COMPUTED SUGGESTION:'
CCISZ    DS    CL6
         DC    CL1' '
OMAX     DC    CL75' '
SATLINE  DC    CL6'0'
         DC    CL15'ACTUAL CI SIZE:'
UCISZ    DS    CL6
         DC    CL106' IS CONFIRMED BY COMPUTATION'
         TITLE 'CONTROL BLOCKS AND DSECTS'
VSAM     ACB   AM=VSAM,                                                C
               DDNAME=VSAM,                                            C
               MACRF=CNV
GETRPL   RPL   ACB=VSAM,                                               C
               AM=VSAM,                                                C
               AREA=@CI,                                               C
               AREALEN=4,                                              C
               ARG=RBARPL,                                             C
               OPTCD=(CNV,DIR,LOC)
SYSPRINT DCB   BLKSIZE=15428,                                          C
               DDNAME=SYSPRINT,                                        C
               DSORG=PS,                                               C
               LRECL=133,                                              C
               MACRF=PM,                                               C
               RECFM=ABFS
DUMMY    DCB   DDNAME=VSAM,                                            C
               DSORG=PS,                                               C
               EXLST=DCBEXIT,                                          C
               MACRF=GM
         DS    0F                       . FULL WORD ALIGN DCB EXIT
DCBEXIT  EQU   *
         DC    X'87'                    . INDICATE RDJFCB
         DC    AL3(INFMJFCB)            . ADDRESS OF JFCB MAPPING
         IEFJFCBN
         DCBD  DEVD=DA,                 . DCB DSECT                    C
               DSORG=PS
         IFGACB                         . ACB DSECT
IDAAMBL  DSECT                          . AMBL DSECT
         DS    XL52
AMBLDTA  DS    F                        . -> DATA COMPONENT AMB
AMBLIX   DS    F                        . -> INDEX COMPONENT AMB
IDAAMB   DSECT                          . AMB DSECT
         DS    XL20
AMBDSB   DS    F                        . -> AMDSB
IDAAMDSB DSECT                          . AMDSB DSECT
         DS    XL4
AMDNEST  DS    H                        . ENTRIES PER SECTION
         DS    CL6
AMDCIPCA DS    H                        . CIS PER CA
         DS    XL14
AMDHLRBA DS    F                        . HI-LEVEL RBA
AMDSSRBA DS    F                        . SEQUENCE SET RBA
         TITLE 'LITERALS AND TERMINATION'
VSAMIST  CSECT                          . RE-ESTABLISH CSECT
IMAXCI   DC    CL75'THE COMPUTED CI SIZE IS GREATER THAN THAT PERMITTEDC
                - INCREASE DATA CI SIZE'
         LTORG
         END


Dave Loveluck
Instructor/Consultant (USA)                              c Dave Loveluck 1992

