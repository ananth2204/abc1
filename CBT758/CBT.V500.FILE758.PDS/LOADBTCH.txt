*Identification Division.
*Program-ID.    LOADBTCH.
*Author.        Craig Schneiderwent.
*Installation.  WI DEPT OF TRANSPORTATION.
*Date-Written.  12-Feb-2001.
*
*PURPOSE:
* LOAD A GIVEN MODULE INTO MEMORY FROM STEPLIB/JOBLIB/LINKPACK OR
* FROM AN OPTIONALLY SPECIFIED DD.  DELETE A GIVEN MODULE FROM
* MEMORY.  LOADBTCH WRAPS THE MVS LOAD AND DELETE MACROS SO AS TO
* MAKE THEM AVAILABLE TO COBOL (AND POSSIBLY OTHER HLL) PROGRAMS.
*
* IF THE OPTIONAL DD (LOADBTCH-DDNM IN THE COBOL EXAMPLE BELOW)
* IS BLANK, THE LOAD IS FROM STEPLIB/JOBLIB/LINKPACK.  OTHERWISE
* THE LOAD IS FROM THE SPECIFIED DD.
*
*RETURNED VALUES:
* ADDRESS OF MODULE ENTRY POINT
* MODULE LENGTH
* ADDRESS OF LOADED MODULE
*
*ABEND CODES:
* 111 OPEN OF OPTIONAL DD FAILED
* 222 BLDL FAILED, RETURN AND REASON CODES ARE IN WORKING-STORAGE
*
*MACROS:
* REGISTER
* JSAVED
* JRETURND
* LOAD
* DELETE
* FIND
* BLDL
* OPEN
* CLOSE
* ABEND
*
* SAMPLE COBOL USE:
*
*Data Division.
*Working-Storage Section.
*01  CONSTANTS.
*    05  MYNAME                  PIC X(008)   Value 'DUMPDICT'.
*    05  LOADBTCH-PGM            PIC X(008)   Value 'LOADBTCH'.
*    05  ABND-DUMP               PIC 9(009)   Binary Value 1.
*    05  BAD-RC-ABND-CD          PIC 9(009)   Binary Value 3.
*
*01  WORK-AREAS.
*    05  ABND-CD                 PIC 9(009)   Binary Value 0.
*    05  LOADBTCH-ACTN           PIC X(001).
*    05  LOADBTCH-MOD-NM         PIC X(008).
*    05  LOADBTCH-DDNM           PIC X(008)   Value 'DICTLIB1'.
*    05  LOADBTCH-MOD-PTR        POINTER.
*    05  LOADBTCH-MOD-LN         PIC 9(008)   Binary.
*    05  LOADBTCH-LDPT-PTR       POINTER.
*
*Linkage Section.
*01  FH-DICT.
*    05  HIGH-IDEN                  PIC 9(008) Binary.
*    05  IDEN-PTR-TBL
*        OCCURS 1 TO 999
*        DEPENDING HIGH-IDEN.
*        10  REP-CNT-X              PIC X(001).
*        10  IDEN-PTR-X             PIC X(003).
*    05  DICT-DT                    PIC X(009).
*    05  DICT-TM                    PIC X(005).
*
*01  PARM.
*    05  PARM-LN                    PIC 9(004) Binary.
*    05  PARM-DICT                  PIC X(008).
*
*Procedure Division Using PARM.
*    MOVE 'L' TO LOADBTCH-ACTN
*    MOVE PARM-DICT TO LOADBTCH-MOD-NM
*    CALL LOADBTCH-PGM USING
*        LOADBTCH-ACTN
*        LOADBTCH-MOD-NM
*        LOADBTCH-DDNM
*        LOADBTCH-MOD-PTR
*        LOADBTCH-MOD-LN
*        LOADBTCH-LDPT-PTR
*    END-CALL
*
*    IF RETURN-CODE NOT = 0
*        DISPLAY
*            MYNAME
*            ' Return code '
*            RETURN-CODE
*            ' from '
*            LOADBTCH-PGM
*            MOVE BAD-RC-ABND-CD TO ABND-CD
*            PERFORM 9999-ABEND
*    END-IF
*
*    SET ADDRESS OF FH-DICT TO LOADBTCH-MOD-PTR
*
*    DISPLAY
*        MYNAME
*        ' '
*        PARM-DICT
*        ' Last compiled on '
*        DICT-DT
*        ' at '
*        DICT-TM
*
*    MOVE 'D' TO LOADBTCH-ACTN
*    MOVE PARM-DICT TO LOADBTCH-MOD-NM
*    CALL LOADBTCH-PGM USING
*        LOADBTCH-ACTN
*        LOADBTCH-MOD-NM
*        LOADBTCH-DDNM
*        LOADBTCH-MOD-PTR
*        LOADBTCH-MOD-LN
*        LOADBTCH-LDPT-PTR
*    END-CALL
*
LOADBTCH AMODE 31
LOADBTCH RMODE 24
LOADBTCH CSECT
         REGISTER
         JSAVED
         BALR  R11,0                   INITIALIZE BASE REGISTER
         USING *,R11                   PROVIDE PROGRAM ADDRESSIBILITY
*
         MVC   RETNCD,=F'0'            INITIALIZE RETURN CODE
         ST    R1,PARMLIST             KEEP ADDRESS OF PARM LIST
         L     R2,PARMLIST             WORKING OFF R2
         MVC   PARM1,0(R2)             GOTO ADDR IN R2 & GET ADDR
         MVC   PARM2,4(R2)             SAVE NEXT ADDRESS
         MVC   PARM3,8(R2)             SAVE NEXT ADDRESS
         MVC   PARM4,12(R2)            SAVE NEXT ADDRESS
         MVC   PARM5,16(R2)            SAVE NEXT ADDRESS
         MVC   PARM6,20(R2)            SAVE NEXT ADDRESS
         NI    PARM6,X'7F'             TURN OFF HIGH ORDER BIT
         L     R3,PARM1                R3 = ADDR OF ACTION PARM
         MVC   ACTN,0(R3)              SAVE ACTION PARM VALUE
         L     R3,PARM2                R3 = ADDR OF MODULE NAME
         MVC   EPNM,0(R3)              SAVE MODULE NAME VALUE
         L     R3,PARM3                R3 = ADDR OF DDNAME IN CALLER
         MVC   DDNAME,0(R3)            SAVE DDNAME VALUE
*
         CLI   ACTN,C'L'               LOAD REQUESTED?
         BNE   DELETE                  NO - BRANCH
         CLC   DDNAME,BLANKS           WAS DDNAME SUPPLIED?
         BE    NOOPEN                  NO  - BRANCH
         MVC   MODNM,EPNM              PUT EPNM IN BLDL LIST
         MVC   LOADFROM+40(8),DDNAME   PUT DDNAME INTO DCB
         OPEN  (LOADFROM,INPUT)        OPEN THE DCB
         TM    LOADFROM+48,X'10'       OPEN OK?
         BNZ   FIND01                  YES - BRANCH
         ABEND 111,DUMP,STEP,USER      OPEN FAILED                      00132**5
FIND01   EQU   *
         FIND  LOADFROM,EPNM,D         IS THE MEMBER IN THIS PDS?
         ST    R15,RETNCD              RC FROM FIND WILL BE PASSED BACK
         LTR   R15,R15                 IF ZERO IT IS FOUND
         BNZ   CLOSE                   NOT FOUND - BRANCH
         BLDL  LOADFROM,BLDLLIST       DO THE BLDL FOR THE MODULE
         STCM  R15,B'0001',BLDLRETN    KEEP RETURN CODE
         STCM  R0,B'0001',BLDLRSN      KEEP REASON CODE
         CLI   BLDLRETN,X'00'          BLDL OK?
         BE    LOAD01                  YES - BRANCH
         ABEND 222,DUMP,STEP,USER      BLDL ENDED BADLY                 00132**5
LOAD01   EQU   *                       LOAD FROM SPECIFIED DD
         LA    R4,ADDR                 R4 = ADDRESS OF ADDR
         LA    R5,MODNM                R5 = ADDRESS OF MODULE NAME
         LA    R6,LOADFROM             R6 = ADDRESS OF DCB
         LOAD  LOADPT=(R4),                                            X
               DE=(R5),                                                X
               ERRET=BADLOAD1,                                         X
               DCB=(R6)
         B     AFTRLOAD
NOOPEN   EQU   *                       LOAD FROM STEPLIB, ETC.
         L     R3,PARM2                R3 = ADDR OF MODULE NAME
         LA    R4,ADDR                 R4 = ADDRESS OF ADDR
         LOAD  EPLOC=(R3),                                             X
               ERRET=BADLOAD1,                                         X
               LOADPT=(R4)
         B     AFTRLOAD
BADLOAD1 EQU   *                       LOAD WENT AWRY
         ST    R1,LOAD_RC              SAVE RETURN CODE
         ST    R1,RETNCD               PASS BACK RETURN CODE
         ST    R15,LOAD_RSN            SAVE REASON CODE
         L     R4,PARM4                R4 = ADDRESS OF ADDR IN CALLER
         ST    R15,0(R4)               PASS BACK REASON CODE
         B     CK_DD                   SEE IF DD NEEDS CLOSING
AFTRLOAD EQU   *
         L     R4,PARM4                R4 = ADDRESS OF ADDR IN CALLER
         ST    R0,0(R4)                STORE EP ADDRESS IN CALLER
         ST    R1,LN                   STORE LENGTH IN LN
         NI    LN,X'00'                ONLY LOWER 3 BYTES USED BY LOAD
         L     R4,PARM5                R4 = ADDRESS OF LN IN CALLER
         MVC   0(4,R4),LN              STORE LN IN CALLING PARM
         L     R4,PARM6                R4 = ADDRESS OF LOADPT IN CALLER
         MVC   0(4,R4),ADDR            STORE LOADPT IN CALLING PARM
CK_DD    EQU   *
         CLC   DDNAME,BLANKS           WAS DDNAME SUPPLIED?
         BE    GOBACK                  NO  - BRANCH
CLOSE    EQU   *
         CLOSE (LOADFROM)
         B     GOBACK
*
DELETE   EQU   *
         L     R3,PARM2                R3 = ADDR OF MODULE NAME
         DELETE EPLOC=(R3)
*
GOBACK   EQU   *
         L     R15,RETNCD
         JRETURND
*
         DC    C'WORKING-STORAGE LOADBTCH START'
PARMLIST DC    F'0'   ADDRESS OF LIST OF PARMS
PARM1    DC    F'0'   ADDRESS OF ACTION IN CALLER
PARM2    DC    F'0'   ADDRESS OF MODULE NAME IN CALLER
PARM3    DC    F'0'   ADDRESS OF DD NAME TO LOAD FROM IN CALLER
PARM4    DC    F'0'   ADDRESS OF MODULE ENTRY POINT IN CALLER
PARM5    DC    F'0'   ADDRESS OF MODULE LENGTH IN CALLER
PARM6    DC    F'0'   ADDRESS OF MODULE LOAD ADDRESS IN CALLER
ADDR     DC    F'0'   MODULE LOAD ADDRESS
LN       DC    F'0'   LENGTH OF LOADED MODULE
RETNCD   DC    F'0'   RETURN CODE
LOAD_RC  DC    F'0'   BAD LOAD RETURN CODE
LOAD_RSN DC    F'0'   BAD LOAD REASON CODE
ACTN     DC    CL1' ' LOAD OR DELETE INDICATOR
EPNM     DC    CL8' ' NAME OF MODULE TO BE LOADED/DELETED
DDNAME   DC    CL8' ' DD NAME TO LOAD FROM
BLANKS   DC    CL8' '
         DC    C'BLDL RETURN CODE='
BLDLRETN DC    XL1'00'
         DC    C'BLDL REASON CODE='
BLDLRSN  DC    XL1'00'
         DC    0H
BLDLLIST DC    0CL80
LISTLN   DC    H'01'
ENTRLN   DC    H'76'
MODNM    DC    CL8' '
TTR      DC    CL3' '
K        DC    CL1' '
Z        DC    CL1' '
C        DC    CL1' '
USERDATA DC    CL62' '
         DC    C'WORKING-STORAGE LOADBTCH END'
*
LOADFROM DCB   DDNAME=LOADFROM,                                        X00156**3
               DSORG=PO,                                               X00157**3
               MACRF=(R)                                                00158**3
*
         END   LOADBTCH
