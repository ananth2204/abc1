* LOAD MODULES SPECIFIED IN SYSUT1 INTO MEMORY AND SEARCH EACH FOR
* STRINGS SPECIFIED IN SYSUT2.  80 BYTE OUTPUT RECORDS ARE WRITTEN
* TO SYSUT3.
*
* SYSUT1 FORMAT IS
* MMMMMMMM
* WHERE
* MMMMMMMM IS MODULE NAME
*
* SYSUT2 FORMAT IS
* LLLL SSSSSSSS
* WHERE
* LLLL     IS THE STRING LENGTH LEFT PADDED WITH ZEROES
* SSSSSSSS IS THE STRING TO BE SEARCHED FOR (UP TO 75 BYTES LONG)
*
* SYSUT3 FORMAT IS
* MMMMMMMMOOOOOOOOSSSSSSSS
* WHERE
* MMMMMMMM IS MODULE NAME
* OOOOOOOO IS OFFSET IN MODULE WHERE STRING WAS FOUND
* SSSSSSSS IS THE STRING THAT WAS FOUND
*
* //LOADWRD1 EXEC PGM=LOADWRD1
* //STEPLIB  DD  DISP=SHR,DSN=YOUR.LOADLIB.HERE
* //LOADLIB  DD  DISP=SHR,DSN=LOADLIB.TO.SEARCH.HERE
* //SYSUT1   DD  *
* MEMBERNM
* //SYSUT2   DD  *
* 0030 SOME STRING TO SEARCH FOR HERE
* //SYSUT3   DD  SYSOUT=*,LRECL=80,BLKSIZE=8000
* //SYSPRINT DD  SYSOUT=*
* //*
*
LOADWRD1 AMODE 31
LOADWRD1 RMODE 24
SRCHTERM DSECT
SRCHNEXT DS    A
SRCHPREV DS    A
MOD_HEAD DS    A
MOD_TAIL DS    A
SRCHLEN  DS    F
SRCHCHAR DS    CL75
#SRCHTRM EQU   *-SRCHNEXT
MOD      DSECT
MOD_NEXT DS    A
MOD_PREV DS    A
MOD_NM   DS    CL8
MOD_OSET DS    CL8
#MOD     EQU   *-MOD_NEXT
LOADWRD1 CSECT
         YREGS
         JSAVED
         BASR  R12,0
         USING *,R12
         OPEN  (SYSPRINT,OUTPUT)
         OPEN  (SYSUT1,INPUT)
         OPEN  (SYSUT2,INPUT)
         CPOOL BUILD,                                                  -
               HDR='LOADWRD1SRCHTRMLINKDLIST',                         -
               CPID=CSRCHTRM,                                          -
               LOC=(31,64),                                            -
               PCELLCT=10,                                             -
               SCELLCT=1000,                                           -
               CSIZE=#SRCHTRM        MAX SIZE
         CPOOL BUILD,                                                  -
               HDR='LOADWRD1MODLINKEDLIST   ',                         -
               CPID=CMOD,                                              -
               LOC=(31,64),                                            -
               PCELLCT=100,                                            -
               SCELLCT=1000,                                           -
               CSIZE=#MOD            MAX SIZE
GETSRCH  EQU   *
NEW      USING SRCHTERM,R9
         GET   SYSUT2,IN_SRCHREC
         CPOOL GET,U,CPID=CSRCHTRM,REGS=SAVE
         LR    R9,R1
         MVC   NEW.SRCHNEXT,=F'0'         INITIALIZE GETMAINED AREA
         MVC   NEW.SRCHPREV,=F'0'         INITIALIZE GETMAINED AREA
         MVC   NEW.MOD_HEAD,=F'0'         INITIALIZE GETMAINED AREA
         MVC   NEW.MOD_TAIL,=F'0'         INITIALIZE GETMAINED AREA
         MVC   NEW.SRCHLEN,=F'0'          INITIALIZE GETMAINED AREA
         MVI   NEW.SRCHCHAR,C' '          INITIALIZE GETMAINED AREA
         MVC   NEW.SRCHCHAR+1(L'NEW.SRCHCHAR-1),NEW.SRCHCHAR
         PACK  PACKLEN,IN_SRCHLENC
         CVB   R4,DWORDP
         ST    R4,NEW.SRCHLEN
         BCTR  R4,0
         EX    R4,MVCSRCHCHAR
         CLC   SRCHHEAD,=F'0'
         BE    FSTSRCH
         L     R2,SRCHTAIL
TAIL     USING SRCHTERM,R2
         ST    R9,TAIL.SRCHNEXT
         ST    R2,NEW.SRCHPREV
         ST    R9,SRCHTAIL
         B     GETSRCH
FSTSRCH  EQU   *
         ST    R9,SRCHHEAD
         ST    R9,SRCHTAIL
         B     GETSRCH
MVCSRCHCHAR    MVC NEW.SRCHCHAR(0),IN_SRCHCHAR
         DROP  TAIL
         DROP  NEW
LOOP1    EQU   *
CURRSRCH USING SRCHTERM,R3
         L     R3,SRCHHEAD
         GET   SYSUT1,INPUTREC
         CLC   MEM_NM,MY_NAME
         BE    LOOP1
         CLC   MEM_NM,LOAD_PGM
         BE    LOOP1
         MVC   PRTMODNM,MEM_NM
         PUT   SYSPRINT,PRTREC
         MVC   MODNM,MEM_NM
         MVI   ACTN,ACTN_LD
         LINK  EPLOC=LOAD_PGM,PARAM=(ACTN,MODNM,DDNM,MOD_PTR,          X
               MOD_LN,LDPT_PTR),VL=1
         LTR   R15,R15         LOAD OK ?
         BZ    NEW_SRCH        YES - BRANCH
         C     R15,RC_706      MODULE NOT EXECUTABLE ?
         BE    LOOP1           YES - BRANCH
         ABEND 112,DUMP,STEP,USER                                       00132**5
NEW_SRCH EQU   *
         L     R10,LDPT_PTR    SRST BEGIN SEARCH POINT
         L     R11,MOD_LN      MODULE LENGTH IN DOUBLE WORDS
         SLL   R11,3           MULTIPLY BY 8 TO GET REAL LENGTH
         ST    R11,MOD_LNR     REAL MODULE LENGTH
         C     R11,CURRSRCH.SRCHLEN MODULE SHORTER THAN SEARCH ARG?
         BL    LOOP1           YES - BRANCH
         L     R11,LDPT_PTR    MODULE LOAD POINT
         A     R11,MOD_LNR     ADD LENGTH TO GET END POINT
         L     R4,CURRSRCH.SRCHLEN CURRENT SEARCH ARG LENGTH
         SR    R11,R4          SUBTRACT FROM END POINT TO GET SRCH END
         BCTR  R4,0            SUBTRACT 1 FOR CLC
         XR    R0,R0           CLEAR R0
         IC    R0,CURRSRCH.SRCHCHAR   FOR SRST
         LR    R8,R11          SRST ENDPOINT FOR SEARCH
         B     LOOP2
LOOP2    EQU   *
         CR    R10,R8          ARE WE PAST THE END POINT?
         BH    NEXTSRCH        YES - BRANCH - ACT LIKE CC2
         SRST  R8,R10          SEARCH STARTING AT R10 UNTIL R8
         BC    4,DO_CLC    CC1 FOUND BYTE IN R0
         BC    2,NEXTSRCH  CC2 GOT TO R8 - NO MATCH FOUND
         BC    1,LOOP2     CC3 NOT FOUND - NOT DONE EITHER - TRY AGAIN
         B     NEXTSRCH    BOOK OF DOOM SAYS THIS WILL NEVER HAPPEN
DO_CLC   EQU   *
         EX    R4,CLCSRCHTERM  DO WE HAVE A MATCH ?
         BE    LOOP2DUN        YES - BRANCH
         LA    R10,1(R8)       NO  - POINT TO NEXT BYTE
         LR    R8,R11          RELOAD END POINT
         B     LOOP2           TRY AGAIN
CLCSRCHTERM    CLC  0(0,R8),CURRSRCH.SRCHCHAR
LOOP2DUN EQU   *               MATCH FOUND
         CPOOL GET,U,CPID=CMOD,REGS=SAVE
         LR    R9,R1
         MVI   0(R9),X'00'
         MVC   1(#MOD-1,R9),0(R9)
NEWMOD   USING MOD,R9
         MVC   NEWMOD.MOD_NM,MODNM
         CLC   CURRSRCH.MOD_HEAD,=F'0'
         BE    FSTMOD
         L     R2,CURRSRCH.MOD_TAIL
TAILMOD  USING MOD,R2
         ST    R9,TAILMOD.MOD_NEXT
         ST    R2,NEWMOD.MOD_PREV
         ST    R9,CURRSRCH.MOD_TAIL
         DROP  TAILMOD
         B     DO_OSET
FSTMOD   EQU   *
         ST    R9,CURRSRCH.MOD_HEAD
         ST    R9,CURRSRCH.MOD_TAIL
DO_OSET  EQU   *
         L     R5,LDPT_PTR         ADDR WHERE MODULE IS LOADED
         LR    R7,R8               COPY CURRENT LOCATION
         SR    R7,R5               COMPUTE OFFSET
         LR    R0,R7               1234ABCD 00000000
         SRDL  R0,4                01234ABC D0000000
         SLL   R0,4                1234ABC0 D0000000
         SRDL  R0,8                001234AB C0D00000
         SLL   R0,4                01234AB0 D0D00000
         SRDL  R0,8                0001234A B0C0D000
         SLL   R0,4                001234A0 B0C0D000
         SRDL  R0,8                00001234 A0B0C0D0
         SLL   R0,4                00012340 A0B0C0D0
         SRDL  R0,4                00001234 0A0B0C0D
         LR    R2,R1
         SR    R1,R1               00001234 00000000
         SRDL  R0,4                00000123 40000000
         SLL   R0,4                00001230 40000000
         SRDL  R0,8                00000012 30400000
         SLL   R0,4                00000120 30400000
         SRDL  R0,8                00000001 20304000
         SLL   R0,4                00000010 20304000
         SRDL  R0,12               00000000 01020304
         STM   R1,R2,NEWMOD.MOD_OSET
         TR    NEWMOD.MOD_OSET,TR_TABLE
         LR    R10,R8                   CURRENT MATCH LOCATION
         A     R10,CURRSRCH.SRCHLEN     POINT PAST CURRENT MATCH
         LR    R8,R11                   RELOAD END POINT
         XR    R0,R0                    AVOID S0C6
         IC    R0,CURRSRCH.SRCHCHAR     FOR SRST
         B     LOOP2
         DROP  NEWMOD
NEXTSRCH EQU   *
         L     R3,CURRSRCH.SRCHNEXT
         LTR   R3,R3
         BNZ   NEW_SRCH
LOOP2END EQU   *
         MVI   ACTN,ACTN_DLT
         LINK  EP=LOADBTCH,PARAM=(ACTN,MODNM,DDNM,MOD_PTR,             X
               MOD_LN,LDPT_PTR),VL=1
         LTR   R15,R15
         BZ    DLT_OK
         ABEND 113,DUMP,STEP,USER                                       00132**5
DLT_OK   EQU   *
         B     LOOP1
CLSSYS2  EQU   *
         CLOSE (SYSUT2)
         CLC   SRCHHEAD,=F'0' ANYTHING SPECIFIED?
         BNE   LOOP1          YES - BRANCH
         CLOSE (SYSUT1)
         MVC   PRTREC(15),=C'SYSUT2 IS EMPTY'
         PUT   SYSPRINT,PRTREC
         MVC   RC,=F'4'
         B     GOBACK
CLSSYS1  EQU   *
CURRMOD  USING MOD,R9
         CLOSE (SYSUT1)
         OPEN  (SYSUT3,OUTPUT)
         L     R3,SRCHHEAD
         L     R9,CURRSRCH.MOD_HEAD
         LTR   R9,R9
         BZ    NEXTSOUT
NEXT_OUT EQU   *
         LA    R10,OUTREC
         MVI   0(R10),C' '
         MVC   1(L'OUTREC-1,R10),0(R10)
         MVC   OUTMODNM,CURRMOD.MOD_NM
         MVC   OUTOSET,CURRMOD.MOD_OSET
         MVC   OUTCHAR,CURRSRCH.SRCHCHAR
         PUT   SYSUT3,OUTREC
         L     R9,CURRMOD.MOD_NEXT
         LTR   R9,R9
         BNZ   NEXT_OUT
NEXTSOUT EQU   *
         L     R3,CURRSRCH.SRCHNEXT
         LTR   R3,R3
         BZ    CLSSYS3
         L     R9,CURRSRCH.MOD_HEAD
         LTR   R9,R9
         BZ    NEXTSOUT
         B     NEXT_OUT
CLSSYS3  EQU   *
         CLOSE (SYSUT3)
GOBACK   EQU   *
         CLOSE (SYSPRINT)
         CPOOL DELETE,CPID=CSRCHTRM
         CPOOL DELETE,CPID=CMOD
         L     R15,RC
         JRETURND
*
MY_NAME  DC    CL8'LOADWRD1'
LOAD_PGM DC    CL8'LOADBTCH'
TR_TABLE DC    CL16'0123456789ABCDEF'
CSRCHTRM DC    F'0'   CPOOL ID
CMOD     DC    F'0'   CPOOL ID
*
INPUTREC DC    0CL80
MEM_NM   DC    CL8' '
         DC    CL72' '
*
IN_SRCHREC  DC    0CL80
IN_SRCHLENC DC    CL4' '
            DC    CL1' '
IN_SRCHCHAR DC    CL75' '
*
DWORDP   DC    0D
         DC    XL5'00'
PACKLEN  DC    PL3'0'
@MOD     DC    A(0)
@SRCHTRM DC    A(0)
SRCHHEAD DC    A(0)
SRCHTAIL DC    A(0)
RC       DC    F'0'
RC_706   DC    X'00000706'
ACTN     DC    CL1' '
ACTN_LD  EQU   C'L'
ACTN_DLT EQU   C'D'
MODNM    DC    CL8' '
DDNM     DC    CL8'LOADLIB'
MOD_PTR  DC    A(0)
MOD_LN   DC    F'0'
LDPT_PTR DC    A(0)
MOD_LNR  DC    F'0'
         CNOP  0,4
OUTREC   DC    0CL80
OUTMODNM DC    CL8' '
OUTOSET  DC    CL8' '
OUTCHAR  DC    CL64' '
PRTREC   DC    0CL80
PRTMODNM DC    CL8' '
         DC    CL72' '
#PRINT   EQU   80
SYSUT1   DCB   DSORG=PS,                                               X
               DDNAME=SYSUT1,                                          X
               EODAD=CLSSYS1,                                          X
               MACRF=GM
SYSUT2   DCB   DSORG=PS,                                               X
               DDNAME=SYSUT2,                                          X
               EODAD=CLSSYS2,                                          X
               MACRF=GM
SYSUT3   DCB   DSORG=PS,                                               X
               DDNAME=SYSUT3,                                          X
               MACRF=PM
SYSPRINT DCB   DDNAME=SYSPRINT,                                        X
               DSORG=PS,                                               X
               RECFM=F,                                                X
               LRECL=#PRINT,                                           X
               MACRF=PM
         LTORG
         END
