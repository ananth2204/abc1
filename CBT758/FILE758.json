{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012734000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE758.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE758.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x0b'", "DS1TRBAL": "b'4T'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05,\\x00\\x08\\x05,\\x00\\x0b\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04L\\x00\\x00\\x01\\x08\\x05\\x1f\\x01\\x08\\x05\\x1f\\x11\\x05\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf6@@@'", "ispf": {"version": "04.76", "flags": 0, "createdate": "2008-02-20T00:00:00", "modifydate": "2008-02-20T11:05:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-476"}, "text": "REGULAR CBT TAPE - VERSION 476    FILE:  758\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT476.FILE758\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 965 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/20/08    11:05:52    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x07\\x12\\x7f\\x01\\x07\\x12\\x7f\\x106\\x00\\x03\\x00\\x03\\x00\\x00\\xc4\\xd6\\xe3\\xc3\\xe6\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-07T00:00:00", "modifydate": "2007-05-07T10:36:50", "lines": 3, "newlines": 3, "modlines": 0, "user": "DOTCWS"}, "text": "$DOC     This member\nLOADBTCH Encapsulates LOAD macro for caller\nLOADWRD1 Search specified loadable modules for specified strings\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLOAD": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x02\\x01\\x026_\\x01\\x07\\x14\\x7f\\x10\\x03\\x00%\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2007-05-27T10:03:02", "lines": 37, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* --------------------------------------------------- *//\n//*      PDSLOAD JOB TO CREATE INSTALL LIBRARIES        *//\n//*                                                     *//\n//*     (THIS JOB WAS TESTED TO WORK ON MY SYSTEM)      *//\n//* --------------------------------------------------- *//\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT474.FILE758(PDSLOAD)')\n   DSN ('SBGOLOB.TEMP.PDSLOAD') VOL(WORK04)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT474.FILE758',      <=== CHANGE\n//             OPRE=SBGOLOB,\n//             QUAL=FILE758,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=WORK04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.TEMP.PDSLOAD\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=MACROS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$README": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x16\\x01\\x07\\x12\\x7f\\x01\\x07\\x14\\x9f\\x08\\x17\\x007\\x00\\x08\\x00\\x00\\xc4\\xd6\\xe3\\xc3\\xe6\\xe2@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2007-05-07T00:00:00", "modifydate": "2007-05-29T08:17:16", "lines": 55, "newlines": 8, "modlines": 0, "user": "DOTCWS"}, "text": "Documentation for each module is contained within its source code.\n\nYou will need to assemble each module and bind it into a load\nlibrary.  The necessary macros are provided.\n\nSample execution JCL for LOADWRD1 is contained within its source\ncode.  LOADBTCH is called by LOADWRD1, it is not executable on its own.\n\nThe author can be contacted at cschneid_loadword@yahoo.com, please\ninclude the text LOADWORD in the subject line.\n\nWhen executed, LOADWRD1 will LOAD (via LOADBTCH) the members listed on\nthe SYSUT1 DD from the load library specified on the LOADLIB DD and\nsearch it for the strings specified on the SYSUT2 DD.\n\nSYSUT3 will have 80 byte output records written to it, one for each\nmodule and string found within it.\n\nSYSPRINT will have 80 byte records written to it, one for each module\nas it is processed.  It's like a progress indicator.\n\n SYSUT1 format is\n MMMMMMMM\n where\n MMMMMMMM is the module name\n\n SYSUT2 format is\n LLLL SSSSSSSS\n where\n LLLL     is the string length left padded with zeroes\n SSSSSSSS is the string to be searched for (up to 75 bytes long)\n\n SYSUT3 format is\n MMMMMMMMOOOOOOOOSSSSSSSS\n where\n MMMMMMMM is module name\n OOOOOOOO is offset in module where string was found\n SSSSSSSS is the string that was found\n\n //LOADWRD1 EXEC PGM=LOADWRD1\n //STEPLIB  DD  DISP=SHR,DSN=YOUR.LOADLIB.HERE\n //LOADLIB  DD  DISP=SHR,DSN=LOADLIB.TO.SEARCH.HERE\n //SYSUT1   DD  *\n MEMNAME1\n MEMNAME2\n MEMNAME3\n MEMNAME4\n MEMNAME5\n //SYSUT2   DD  *\n 0030 SOME STRING TO SEARCH FOR HERE\n 0036 SOME OTHER STRING TO SEARCH FOR HERE\n //SYSUT3   DD  SYSOUT=*,LRECL=80,BLKSIZE=8000\n //SYSPRINT DD  SYSOUT=*\n //*\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE758": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04L\\x00\\x00\\x01\\x08\\x05\\x1f\\x01\\x08\\x05\\x1f\\x11\\x05\\x00\\t\\x00\\t\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf6@@@'", "ispf": {"version": "04.76", "flags": 0, "createdate": "2008-02-20T00:00:00", "modifydate": "2008-02-20T11:05:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "CBT-476"}, "text": "//***FILE 758 is from Craig Schneiderwent and contains a package    *   FILE 758\n//*           to search loadable modules for a specified string.    *   FILE 758\n//*           The package is called LOADWORD.                       *   FILE 758\n//*                                                                 *   FILE 758\n//*       email:  cschneid_loadword@yahoo.com                       *   FILE 758\n//*                                                                 *   FILE 758\n//*       To create the macro library, please run the self-         *   FILE 758\n//*       contained job in member $PDSLOAD on this pds.             *   FILE 758\n//*                                                                 *   FILE 758\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOADBTCH": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01\\x07\\x11\\x7f\\x01\\x07\\x11\\x7f\\x15\\x18\\x00\\xf7\\x00\\xf7\\x00\\x00\\xc4\\xd6\\xe3\\xc3\\xe6\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2007-04-27T15:18:14", "lines": 247, "newlines": 247, "modlines": 0, "user": "DOTCWS"}, "text": "*Identification Division.\n*Program-ID.    LOADBTCH.\n*Author.        Craig Schneiderwent.\n*Installation.  WI DEPT OF TRANSPORTATION.\n*Date-Written.  12-Feb-2001.\n*\n*PURPOSE:\n* LOAD A GIVEN MODULE INTO MEMORY FROM STEPLIB/JOBLIB/LINKPACK OR\n* FROM AN OPTIONALLY SPECIFIED DD.  DELETE A GIVEN MODULE FROM\n* MEMORY.  LOADBTCH WRAPS THE MVS LOAD AND DELETE MACROS SO AS TO\n* MAKE THEM AVAILABLE TO COBOL (AND POSSIBLY OTHER HLL) PROGRAMS.\n*\n* IF THE OPTIONAL DD (LOADBTCH-DDNM IN THE COBOL EXAMPLE BELOW)\n* IS BLANK, THE LOAD IS FROM STEPLIB/JOBLIB/LINKPACK.  OTHERWISE\n* THE LOAD IS FROM THE SPECIFIED DD.\n*\n*RETURNED VALUES:\n* ADDRESS OF MODULE ENTRY POINT\n* MODULE LENGTH\n* ADDRESS OF LOADED MODULE\n*\n*ABEND CODES:\n* 111 OPEN OF OPTIONAL DD FAILED\n* 222 BLDL FAILED, RETURN AND REASON CODES ARE IN WORKING-STORAGE\n*\n*MACROS:\n* REGISTER\n* JSAVED\n* JRETURND\n* LOAD\n* DELETE\n* FIND\n* BLDL\n* OPEN\n* CLOSE\n* ABEND\n*\n* SAMPLE COBOL USE:\n*\n*Data Division.\n*Working-Storage Section.\n*01  CONSTANTS.\n*    05  MYNAME                  PIC X(008)   Value 'DUMPDICT'.\n*    05  LOADBTCH-PGM            PIC X(008)   Value 'LOADBTCH'.\n*    05  ABND-DUMP               PIC 9(009)   Binary Value 1.\n*    05  BAD-RC-ABND-CD          PIC 9(009)   Binary Value 3.\n*\n*01  WORK-AREAS.\n*    05  ABND-CD                 PIC 9(009)   Binary Value 0.\n*    05  LOADBTCH-ACTN           PIC X(001).\n*    05  LOADBTCH-MOD-NM         PIC X(008).\n*    05  LOADBTCH-DDNM           PIC X(008)   Value 'DICTLIB1'.\n*    05  LOADBTCH-MOD-PTR        POINTER.\n*    05  LOADBTCH-MOD-LN         PIC 9(008)   Binary.\n*    05  LOADBTCH-LDPT-PTR       POINTER.\n*\n*Linkage Section.\n*01  FH-DICT.\n*    05  HIGH-IDEN                  PIC 9(008) Binary.\n*    05  IDEN-PTR-TBL\n*        OCCURS 1 TO 999\n*        DEPENDING HIGH-IDEN.\n*        10  REP-CNT-X              PIC X(001).\n*        10  IDEN-PTR-X             PIC X(003).\n*    05  DICT-DT                    PIC X(009).\n*    05  DICT-TM                    PIC X(005).\n*\n*01  PARM.\n*    05  PARM-LN                    PIC 9(004) Binary.\n*    05  PARM-DICT                  PIC X(008).\n*\n*Procedure Division Using PARM.\n*    MOVE 'L' TO LOADBTCH-ACTN\n*    MOVE PARM-DICT TO LOADBTCH-MOD-NM\n*    CALL LOADBTCH-PGM USING\n*        LOADBTCH-ACTN\n*        LOADBTCH-MOD-NM\n*        LOADBTCH-DDNM\n*        LOADBTCH-MOD-PTR\n*        LOADBTCH-MOD-LN\n*        LOADBTCH-LDPT-PTR\n*    END-CALL\n*\n*    IF RETURN-CODE NOT = 0\n*        DISPLAY\n*            MYNAME\n*            ' Return code '\n*            RETURN-CODE\n*            ' from '\n*            LOADBTCH-PGM\n*            MOVE BAD-RC-ABND-CD TO ABND-CD\n*            PERFORM 9999-ABEND\n*    END-IF\n*\n*    SET ADDRESS OF FH-DICT TO LOADBTCH-MOD-PTR\n*\n*    DISPLAY\n*        MYNAME\n*        ' '\n*        PARM-DICT\n*        ' Last compiled on '\n*        DICT-DT\n*        ' at '\n*        DICT-TM\n*\n*    MOVE 'D' TO LOADBTCH-ACTN\n*    MOVE PARM-DICT TO LOADBTCH-MOD-NM\n*    CALL LOADBTCH-PGM USING\n*        LOADBTCH-ACTN\n*        LOADBTCH-MOD-NM\n*        LOADBTCH-DDNM\n*        LOADBTCH-MOD-PTR\n*        LOADBTCH-MOD-LN\n*        LOADBTCH-LDPT-PTR\n*    END-CALL\n*\nLOADBTCH AMODE 31\nLOADBTCH RMODE 24\nLOADBTCH CSECT\n         REGISTER\n         JSAVED\n         BALR  R11,0                   INITIALIZE BASE REGISTER\n         USING *,R11                   PROVIDE PROGRAM ADDRESSIBILITY\n*\n         MVC   RETNCD,=F'0'            INITIALIZE RETURN CODE\n         ST    R1,PARMLIST             KEEP ADDRESS OF PARM LIST\n         L     R2,PARMLIST             WORKING OFF R2\n         MVC   PARM1,0(R2)             GOTO ADDR IN R2 & GET ADDR\n         MVC   PARM2,4(R2)             SAVE NEXT ADDRESS\n         MVC   PARM3,8(R2)             SAVE NEXT ADDRESS\n         MVC   PARM4,12(R2)            SAVE NEXT ADDRESS\n         MVC   PARM5,16(R2)            SAVE NEXT ADDRESS\n         MVC   PARM6,20(R2)            SAVE NEXT ADDRESS\n         NI    PARM6,X'7F'             TURN OFF HIGH ORDER BIT\n         L     R3,PARM1                R3 = ADDR OF ACTION PARM\n         MVC   ACTN,0(R3)              SAVE ACTION PARM VALUE\n         L     R3,PARM2                R3 = ADDR OF MODULE NAME\n         MVC   EPNM,0(R3)              SAVE MODULE NAME VALUE\n         L     R3,PARM3                R3 = ADDR OF DDNAME IN CALLER\n         MVC   DDNAME,0(R3)            SAVE DDNAME VALUE\n*\n         CLI   ACTN,C'L'               LOAD REQUESTED?\n         BNE   DELETE                  NO - BRANCH\n         CLC   DDNAME,BLANKS           WAS DDNAME SUPPLIED?\n         BE    NOOPEN                  NO  - BRANCH\n         MVC   MODNM,EPNM              PUT EPNM IN BLDL LIST\n         MVC   LOADFROM+40(8),DDNAME   PUT DDNAME INTO DCB\n         OPEN  (LOADFROM,INPUT)        OPEN THE DCB\n         TM    LOADFROM+48,X'10'       OPEN OK?\n         BNZ   FIND01                  YES - BRANCH\n         ABEND 111,DUMP,STEP,USER      OPEN FAILED                      00132**5\nFIND01   EQU   *\n         FIND  LOADFROM,EPNM,D         IS THE MEMBER IN THIS PDS?\n         ST    R15,RETNCD              RC FROM FIND WILL BE PASSED BACK\n         LTR   R15,R15                 IF ZERO IT IS FOUND\n         BNZ   CLOSE                   NOT FOUND - BRANCH\n         BLDL  LOADFROM,BLDLLIST       DO THE BLDL FOR THE MODULE\n         STCM  R15,B'0001',BLDLRETN    KEEP RETURN CODE\n         STCM  R0,B'0001',BLDLRSN      KEEP REASON CODE\n         CLI   BLDLRETN,X'00'          BLDL OK?\n         BE    LOAD01                  YES - BRANCH\n         ABEND 222,DUMP,STEP,USER      BLDL ENDED BADLY                 00132**5\nLOAD01   EQU   *                       LOAD FROM SPECIFIED DD\n         LA    R4,ADDR                 R4 = ADDRESS OF ADDR\n         LA    R5,MODNM                R5 = ADDRESS OF MODULE NAME\n         LA    R6,LOADFROM             R6 = ADDRESS OF DCB\n         LOAD  LOADPT=(R4),                                            X\n               DE=(R5),                                                X\n               ERRET=BADLOAD1,                                         X\n               DCB=(R6)\n         B     AFTRLOAD\nNOOPEN   EQU   *                       LOAD FROM STEPLIB, ETC.\n         L     R3,PARM2                R3 = ADDR OF MODULE NAME\n         LA    R4,ADDR                 R4 = ADDRESS OF ADDR\n         LOAD  EPLOC=(R3),                                             X\n               ERRET=BADLOAD1,                                         X\n               LOADPT=(R4)\n         B     AFTRLOAD\nBADLOAD1 EQU   *                       LOAD WENT AWRY\n         ST    R1,LOAD_RC              SAVE RETURN CODE\n         ST    R1,RETNCD               PASS BACK RETURN CODE\n         ST    R15,LOAD_RSN            SAVE REASON CODE\n         L     R4,PARM4                R4 = ADDRESS OF ADDR IN CALLER\n         ST    R15,0(R4)               PASS BACK REASON CODE\n         B     CK_DD                   SEE IF DD NEEDS CLOSING\nAFTRLOAD EQU   *\n         L     R4,PARM4                R4 = ADDRESS OF ADDR IN CALLER\n         ST    R0,0(R4)                STORE EP ADDRESS IN CALLER\n         ST    R1,LN                   STORE LENGTH IN LN\n         NI    LN,X'00'                ONLY LOWER 3 BYTES USED BY LOAD\n         L     R4,PARM5                R4 = ADDRESS OF LN IN CALLER\n         MVC   0(4,R4),LN              STORE LN IN CALLING PARM\n         L     R4,PARM6                R4 = ADDRESS OF LOADPT IN CALLER\n         MVC   0(4,R4),ADDR            STORE LOADPT IN CALLING PARM\nCK_DD    EQU   *\n         CLC   DDNAME,BLANKS           WAS DDNAME SUPPLIED?\n         BE    GOBACK                  NO  - BRANCH\nCLOSE    EQU   *\n         CLOSE (LOADFROM)\n         B     GOBACK\n*\nDELETE   EQU   *\n         L     R3,PARM2                R3 = ADDR OF MODULE NAME\n         DELETE EPLOC=(R3)\n*\nGOBACK   EQU   *\n         L     R15,RETNCD\n         JRETURND\n*\n         DC    C'WORKING-STORAGE LOADBTCH START'\nPARMLIST DC    F'0'   ADDRESS OF LIST OF PARMS\nPARM1    DC    F'0'   ADDRESS OF ACTION IN CALLER\nPARM2    DC    F'0'   ADDRESS OF MODULE NAME IN CALLER\nPARM3    DC    F'0'   ADDRESS OF DD NAME TO LOAD FROM IN CALLER\nPARM4    DC    F'0'   ADDRESS OF MODULE ENTRY POINT IN CALLER\nPARM5    DC    F'0'   ADDRESS OF MODULE LENGTH IN CALLER\nPARM6    DC    F'0'   ADDRESS OF MODULE LOAD ADDRESS IN CALLER\nADDR     DC    F'0'   MODULE LOAD ADDRESS\nLN       DC    F'0'   LENGTH OF LOADED MODULE\nRETNCD   DC    F'0'   RETURN CODE\nLOAD_RC  DC    F'0'   BAD LOAD RETURN CODE\nLOAD_RSN DC    F'0'   BAD LOAD REASON CODE\nACTN     DC    CL1' ' LOAD OR DELETE INDICATOR\nEPNM     DC    CL8' ' NAME OF MODULE TO BE LOADED/DELETED\nDDNAME   DC    CL8' ' DD NAME TO LOAD FROM\nBLANKS   DC    CL8' '\n         DC    C'BLDL RETURN CODE='\nBLDLRETN DC    XL1'00'\n         DC    C'BLDL REASON CODE='\nBLDLRSN  DC    XL1'00'\n         DC    0H\nBLDLLIST DC    0CL80\nLISTLN   DC    H'01'\nENTRLN   DC    H'76'\nMODNM    DC    CL8' '\nTTR      DC    CL3' '\nK        DC    CL1' '\nZ        DC    CL1' '\nC        DC    CL1' '\nUSERDATA DC    CL62' '\n         DC    C'WORKING-STORAGE LOADBTCH END'\n*\nLOADFROM DCB   DDNAME=LOADFROM,                                        X00156**3\n               DSORG=PO,                                               X00157**3\n               MACRF=(R)                                                00158**3\n*\n         END   LOADBTCH\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOADWRD1": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\"\\x01\\x07\\x11\\x7f\\x01\\x08\\x04O\\x089\\x01B\\x014\\x00\\x00\\xc4\\xd6\\xe3\\xc3\\xe6\\xe2@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2008-02-13T08:39:22", "lines": 322, "newlines": 308, "modlines": 0, "user": "DOTCWS"}, "text": "* LOAD MODULES SPECIFIED IN SYSUT1 INTO MEMORY AND SEARCH EACH FOR\n* STRINGS SPECIFIED IN SYSUT2.  80 BYTE OUTPUT RECORDS ARE WRITTEN\n* TO SYSUT3.\n*\n* SYSUT1 FORMAT IS\n* MMMMMMMM\n* WHERE\n* MMMMMMMM IS MODULE NAME\n*\n* SYSUT2 FORMAT IS\n* LLLL SSSSSSSS\n* WHERE\n* LLLL     IS THE STRING LENGTH LEFT PADDED WITH ZEROES\n* SSSSSSSS IS THE STRING TO BE SEARCHED FOR (UP TO 75 BYTES LONG)\n*\n* SYSUT3 FORMAT IS\n* MMMMMMMMOOOOOOOOSSSSSSSS\n* WHERE\n* MMMMMMMM IS MODULE NAME\n* OOOOOOOO IS OFFSET IN MODULE WHERE STRING WAS FOUND\n* SSSSSSSS IS THE STRING THAT WAS FOUND\n*\n* //LOADWRD1 EXEC PGM=LOADWRD1\n* //STEPLIB  DD  DISP=SHR,DSN=YOUR.LOADLIB.HERE\n* //LOADLIB  DD  DISP=SHR,DSN=LOADLIB.TO.SEARCH.HERE\n* //SYSUT1   DD  *\n* MEMBERNM\n* //SYSUT2   DD  *\n* 0030 SOME STRING TO SEARCH FOR HERE\n* //SYSUT3   DD  SYSOUT=*,LRECL=80,BLKSIZE=8000\n* //SYSPRINT DD  SYSOUT=*\n* //*\n*\nLOADWRD1 AMODE 31\nLOADWRD1 RMODE 24\nSRCHTERM DSECT\nSRCHNEXT DS    A\nSRCHPREV DS    A\nMOD_HEAD DS    A\nMOD_TAIL DS    A\nSRCHLEN  DS    F\nSRCHCHAR DS    CL75\n#SRCHTRM EQU   *-SRCHNEXT\nMOD      DSECT\nMOD_NEXT DS    A\nMOD_PREV DS    A\nMOD_NM   DS    CL8\nMOD_OSET DS    CL8\n#MOD     EQU   *-MOD_NEXT\nLOADWRD1 CSECT\n         YREGS\n         JSAVED\n         BASR  R12,0\n         USING *,R12\n         OPEN  (SYSPRINT,OUTPUT)\n         OPEN  (SYSUT1,INPUT)\n         OPEN  (SYSUT2,INPUT)\n         CPOOL BUILD,                                                  -\n               HDR='LOADWRD1SRCHTRMLINKDLIST',                         -\n               CPID=CSRCHTRM,                                          -\n               LOC=(31,64),                                            -\n               PCELLCT=10,                                             -\n               SCELLCT=1000,                                           -\n               CSIZE=#SRCHTRM        MAX SIZE\n         CPOOL BUILD,                                                  -\n               HDR='LOADWRD1MODLINKEDLIST   ',                         -\n               CPID=CMOD,                                              -\n               LOC=(31,64),                                            -\n               PCELLCT=100,                                            -\n               SCELLCT=1000,                                           -\n               CSIZE=#MOD            MAX SIZE\nGETSRCH  EQU   *\nNEW      USING SRCHTERM,R9\n         GET   SYSUT2,IN_SRCHREC\n         CPOOL GET,U,CPID=CSRCHTRM,REGS=SAVE\n         LR    R9,R1\n         MVC   NEW.SRCHNEXT,=F'0'         INITIALIZE GETMAINED AREA\n         MVC   NEW.SRCHPREV,=F'0'         INITIALIZE GETMAINED AREA\n         MVC   NEW.MOD_HEAD,=F'0'         INITIALIZE GETMAINED AREA\n         MVC   NEW.MOD_TAIL,=F'0'         INITIALIZE GETMAINED AREA\n         MVC   NEW.SRCHLEN,=F'0'          INITIALIZE GETMAINED AREA\n         MVI   NEW.SRCHCHAR,C' '          INITIALIZE GETMAINED AREA\n         MVC   NEW.SRCHCHAR+1(L'NEW.SRCHCHAR-1),NEW.SRCHCHAR\n         PACK  PACKLEN,IN_SRCHLENC\n         CVB   R4,DWORDP\n         ST    R4,NEW.SRCHLEN\n         BCTR  R4,0\n         EX    R4,MVCSRCHCHAR\n         CLC   SRCHHEAD,=F'0'\n         BE    FSTSRCH\n         L     R2,SRCHTAIL\nTAIL     USING SRCHTERM,R2\n         ST    R9,TAIL.SRCHNEXT\n         ST    R2,NEW.SRCHPREV\n         ST    R9,SRCHTAIL\n         B     GETSRCH\nFSTSRCH  EQU   *\n         ST    R9,SRCHHEAD\n         ST    R9,SRCHTAIL\n         B     GETSRCH\nMVCSRCHCHAR    MVC NEW.SRCHCHAR(0),IN_SRCHCHAR\n         DROP  TAIL\n         DROP  NEW\nLOOP1    EQU   *\nCURRSRCH USING SRCHTERM,R3\n         L     R3,SRCHHEAD\n         GET   SYSUT1,INPUTREC\n         CLC   MEM_NM,MY_NAME\n         BE    LOOP1\n         CLC   MEM_NM,LOAD_PGM\n         BE    LOOP1\n         MVC   PRTMODNM,MEM_NM\n         PUT   SYSPRINT,PRTREC\n         MVC   MODNM,MEM_NM\n         MVI   ACTN,ACTN_LD\n         LINK  EPLOC=LOAD_PGM,PARAM=(ACTN,MODNM,DDNM,MOD_PTR,          X\n               MOD_LN,LDPT_PTR),VL=1\n         LTR   R15,R15         LOAD OK ?\n         BZ    NEW_SRCH        YES - BRANCH\n         C     R15,RC_706      MODULE NOT EXECUTABLE ?\n         BE    LOOP1           YES - BRANCH\n         ABEND 112,DUMP,STEP,USER                                       00132**5\nNEW_SRCH EQU   *\n         L     R10,LDPT_PTR    SRST BEGIN SEARCH POINT\n         L     R11,MOD_LN      MODULE LENGTH IN DOUBLE WORDS\n         SLL   R11,3           MULTIPLY BY 8 TO GET REAL LENGTH\n         ST    R11,MOD_LNR     REAL MODULE LENGTH\n         C     R11,CURRSRCH.SRCHLEN MODULE SHORTER THAN SEARCH ARG?\n         BL    LOOP1           YES - BRANCH\n         L     R11,LDPT_PTR    MODULE LOAD POINT\n         A     R11,MOD_LNR     ADD LENGTH TO GET END POINT\n         L     R4,CURRSRCH.SRCHLEN CURRENT SEARCH ARG LENGTH\n         SR    R11,R4          SUBTRACT FROM END POINT TO GET SRCH END\n         BCTR  R4,0            SUBTRACT 1 FOR CLC\n         XR    R0,R0           CLEAR R0\n         IC    R0,CURRSRCH.SRCHCHAR   FOR SRST\n         LR    R8,R11          SRST ENDPOINT FOR SEARCH\n         B     LOOP2\nLOOP2    EQU   *\n         CR    R10,R8          ARE WE PAST THE END POINT?\n         BH    NEXTSRCH        YES - BRANCH - ACT LIKE CC2\n         SRST  R8,R10          SEARCH STARTING AT R10 UNTIL R8\n         BC    4,DO_CLC    CC1 FOUND BYTE IN R0\n         BC    2,NEXTSRCH  CC2 GOT TO R8 - NO MATCH FOUND\n         BC    1,LOOP2     CC3 NOT FOUND - NOT DONE EITHER - TRY AGAIN\n         B     NEXTSRCH    BOOK OF DOOM SAYS THIS WILL NEVER HAPPEN\nDO_CLC   EQU   *\n         EX    R4,CLCSRCHTERM  DO WE HAVE A MATCH ?\n         BE    LOOP2DUN        YES - BRANCH\n         LA    R10,1(R8)       NO  - POINT TO NEXT BYTE\n         LR    R8,R11          RELOAD END POINT\n         B     LOOP2           TRY AGAIN\nCLCSRCHTERM    CLC  0(0,R8),CURRSRCH.SRCHCHAR\nLOOP2DUN EQU   *               MATCH FOUND\n         CPOOL GET,U,CPID=CMOD,REGS=SAVE\n         LR    R9,R1\n         MVI   0(R9),X'00'\n         MVC   1(#MOD-1,R9),0(R9)\nNEWMOD   USING MOD,R9\n         MVC   NEWMOD.MOD_NM,MODNM\n         CLC   CURRSRCH.MOD_HEAD,=F'0'\n         BE    FSTMOD\n         L     R2,CURRSRCH.MOD_TAIL\nTAILMOD  USING MOD,R2\n         ST    R9,TAILMOD.MOD_NEXT\n         ST    R2,NEWMOD.MOD_PREV\n         ST    R9,CURRSRCH.MOD_TAIL\n         DROP  TAILMOD\n         B     DO_OSET\nFSTMOD   EQU   *\n         ST    R9,CURRSRCH.MOD_HEAD\n         ST    R9,CURRSRCH.MOD_TAIL\nDO_OSET  EQU   *\n         L     R5,LDPT_PTR         ADDR WHERE MODULE IS LOADED\n         LR    R7,R8               COPY CURRENT LOCATION\n         SR    R7,R5               COMPUTE OFFSET\n         LR    R0,R7               1234ABCD 00000000\n         SRDL  R0,4                01234ABC D0000000\n         SLL   R0,4                1234ABC0 D0000000\n         SRDL  R0,8                001234AB C0D00000\n         SLL   R0,4                01234AB0 D0D00000\n         SRDL  R0,8                0001234A B0C0D000\n         SLL   R0,4                001234A0 B0C0D000\n         SRDL  R0,8                00001234 A0B0C0D0\n         SLL   R0,4                00012340 A0B0C0D0\n         SRDL  R0,4                00001234 0A0B0C0D\n         LR    R2,R1\n         SR    R1,R1               00001234 00000000\n         SRDL  R0,4                00000123 40000000\n         SLL   R0,4                00001230 40000000\n         SRDL  R0,8                00000012 30400000\n         SLL   R0,4                00000120 30400000\n         SRDL  R0,8                00000001 20304000\n         SLL   R0,4                00000010 20304000\n         SRDL  R0,12               00000000 01020304\n         STM   R1,R2,NEWMOD.MOD_OSET\n         TR    NEWMOD.MOD_OSET,TR_TABLE\n         LR    R10,R8                   CURRENT MATCH LOCATION\n         A     R10,CURRSRCH.SRCHLEN     POINT PAST CURRENT MATCH\n         LR    R8,R11                   RELOAD END POINT\n         XR    R0,R0                    AVOID S0C6\n         IC    R0,CURRSRCH.SRCHCHAR     FOR SRST\n         B     LOOP2\n         DROP  NEWMOD\nNEXTSRCH EQU   *\n         L     R3,CURRSRCH.SRCHNEXT\n         LTR   R3,R3\n         BNZ   NEW_SRCH\nLOOP2END EQU   *\n         MVI   ACTN,ACTN_DLT\n         LINK  EP=LOADBTCH,PARAM=(ACTN,MODNM,DDNM,MOD_PTR,             X\n               MOD_LN,LDPT_PTR),VL=1\n         LTR   R15,R15\n         BZ    DLT_OK\n         ABEND 113,DUMP,STEP,USER                                       00132**5\nDLT_OK   EQU   *\n         B     LOOP1\nCLSSYS2  EQU   *\n         CLOSE (SYSUT2)\n         CLC   SRCHHEAD,=F'0' ANYTHING SPECIFIED?\n         BNE   LOOP1          YES - BRANCH\n         CLOSE (SYSUT1)\n         MVC   PRTREC(15),=C'SYSUT2 IS EMPTY'\n         PUT   SYSPRINT,PRTREC\n         MVC   RC,=F'4'\n         B     GOBACK\nCLSSYS1  EQU   *\nCURRMOD  USING MOD,R9\n         CLOSE (SYSUT1)\n         OPEN  (SYSUT3,OUTPUT)\n         L     R3,SRCHHEAD\n         L     R9,CURRSRCH.MOD_HEAD\n         LTR   R9,R9\n         BZ    NEXTSOUT\nNEXT_OUT EQU   *\n         LA    R10,OUTREC\n         MVI   0(R10),C' '\n         MVC   1(L'OUTREC-1,R10),0(R10)\n         MVC   OUTMODNM,CURRMOD.MOD_NM\n         MVC   OUTOSET,CURRMOD.MOD_OSET\n         MVC   OUTCHAR,CURRSRCH.SRCHCHAR\n         PUT   SYSUT3,OUTREC\n         L     R9,CURRMOD.MOD_NEXT\n         LTR   R9,R9\n         BNZ   NEXT_OUT\nNEXTSOUT EQU   *\n         L     R3,CURRSRCH.SRCHNEXT\n         LTR   R3,R3\n         BZ    CLSSYS3\n         L     R9,CURRSRCH.MOD_HEAD\n         LTR   R9,R9\n         BZ    NEXTSOUT\n         B     NEXT_OUT\nCLSSYS3  EQU   *\n         CLOSE (SYSUT3)\nGOBACK   EQU   *\n         CLOSE (SYSPRINT)\n         CPOOL DELETE,CPID=CSRCHTRM\n         CPOOL DELETE,CPID=CMOD\n         L     R15,RC\n         JRETURND\n*\nMY_NAME  DC    CL8'LOADWRD1'\nLOAD_PGM DC    CL8'LOADBTCH'\nTR_TABLE DC    CL16'0123456789ABCDEF'\nCSRCHTRM DC    F'0'   CPOOL ID\nCMOD     DC    F'0'   CPOOL ID\n*\nINPUTREC DC    0CL80\nMEM_NM   DC    CL8' '\n         DC    CL72' '\n*\nIN_SRCHREC  DC    0CL80\nIN_SRCHLENC DC    CL4' '\n            DC    CL1' '\nIN_SRCHCHAR DC    CL75' '\n*\nDWORDP   DC    0D\n         DC    XL5'00'\nPACKLEN  DC    PL3'0'\n@MOD     DC    A(0)\n@SRCHTRM DC    A(0)\nSRCHHEAD DC    A(0)\nSRCHTAIL DC    A(0)\nRC       DC    F'0'\nRC_706   DC    X'00000706'\nACTN     DC    CL1' '\nACTN_LD  EQU   C'L'\nACTN_DLT EQU   C'D'\nMODNM    DC    CL8' '\nDDNM     DC    CL8'LOADLIB'\nMOD_PTR  DC    A(0)\nMOD_LN   DC    F'0'\nLDPT_PTR DC    A(0)\nMOD_LNR  DC    F'0'\n         CNOP  0,4\nOUTREC   DC    0CL80\nOUTMODNM DC    CL8' '\nOUTOSET  DC    CL8' '\nOUTCHAR  DC    CL64' '\nPRTREC   DC    0CL80\nPRTMODNM DC    CL8' '\n         DC    CL72' '\n#PRINT   EQU   80\nSYSUT1   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT1,                                          X\n               EODAD=CLSSYS1,                                          X\n               MACRF=GM\nSYSUT2   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT2,                                          X\n               EODAD=CLSSYS2,                                          X\n               MACRF=GM\nSYSUT3   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT3,                                          X\n               MACRF=PM\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               RECFM=F,                                                X\n               LRECL=#PRINT,                                           X\n               MACRF=PM\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACROS": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x008\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10\\x05\\x00\\xb3\\x00\\xb0\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:05:38", "lines": 179, "newlines": 176, "modlines": 0, "user": "SBGOLOB"}, "text": "./ ADD NAME=$$CREATE 0101-07147-07147-1005-00002-00002-00000-DOTCWS\n   To create this macro library, please run the $PDSLOAD job in\n   File 758.  (S.Golob)\n./ ADD NAME=$DOC     0101-07127-07127-1035-00004-00003-00000-DOTCWS\n$DOC     This member\nJRETURND Standard exit logic\nJSAVED   Standard entry logic\nREGISTER Register equates\n./ ADD NAME=JRETURND 0100-07117-07117-1518-00067-00067-00000-DOTCWS\n         MACRO\n&LABEL   JRETURND  &A,&B,&RC=,&R=\n         GBLC  &JSYSTEM\n*\n*        MACRO JRETURND VERSION 03\n*        HILL FARMS REGIONAL COMPUTING CENTER\n*        STANDARD LINKAGE CONVENTION/RESTORE MACRO\n*\n         AIF   ('&A' EQ 'DOS').DOS\n         AIF   ('&A' EQ 'STATIC').DOS\n         AIF   ('&A' EQ 'EXPRESS').DOS\n         AIF   ('&A' EQ 'OS').OS\n         AIF   ('&A' EQ 'DYNAMIC').OS\n         AIF   ('&A' EQ 'REENTER').OS\n         AIF   ('&A' NE '').ERROR\n.* PASS THRU IF PARAMETER 1 IS OMITTED\n         AIF   ('&JSYSTEM' EQ 'OS').OS\n         AIF   ('&JSYSTEM' EQ 'DOS').DOS\n.*\n.* OPTION 1\n.DOS     ANOP\n         AIF   ('&R' EQ '').DOS1\n         AIF   ('&R' NE 'FP').ERROR\n         LD    0,80(13)                 RESTORE FLT PT REG 0\n         LD    2,88(13)                 RESTORE FLT PT REG 2\n         LD    4,96(13)                 RESTORE FLT PT REG 4\n         LD    6,104(13)                RESTORE FLT PT REG 6\n.DOS1    ANOP\n&LABEL   L     13,4(0,13)               GET A(CALLERS SAVE AREA)\n         AGO   .COMMON\n.* OPTION 2\n.OS      ANOP\n&LABEL   L     13,4(0,13)               GET A(CALLERS SAVE AREA)\n         STM   15,1,16(13)              PRESERVE REGISTERS 15,0,1\n*                                       WHERE THEY WERE SAVED AT ENTRY\n         L     1,8(0,13)                SET UP TO FREE SAVE AREA\n         AIF   ('&R' EQ '').OS1\n         AIF   ('&R' NE 'FP').ERROR\n         LD    0,72(1)                  RESTORE FLT PT REG 0\n         LD    2,80(1)                  RESTORE FLT PT REG 2\n         LD    4,88(1)                  RESTORE FLT PT REG 4\n         LD    6,96(1)                  RESTORE FLT PT REG 6\n         FREEMAIN  R,LV=104,A=(1)       FREE SAVE AREA FOR THIS MODULE\n         LM    15,1,16(13)              RESTORE 15,0,1\n         AGO   .COMMON\n.OS1     ANOP\n         FREEMAIN R,LV=72,A=(1)       FREE SAVE AREA FOR THIS MODULE\n         LM    15,1,16(13)              RESTORE 15,0,1\n.COMMON  ANOP\n         L     14,12(0,13)              RESTORE RETURN ADDRESS\n         AIF   ('&RC' EQ '').NORC\n         AIF   ('&B' EQ '').NOB1\n         RETURN &B,RC=&RC\n         AGO   .RETNT\n.NOB1    ANOP\n         RETURN (2,12),RC=&RC\n         AGO   .RETNT\n.NORC    AIF   ('&B' EQ '').NOB2\n         RETURN &B\n         AGO   .RETNT\n.NOB2    ANOP\n         RETURN (2,12)\n.RETNT   ANOP\n         MEXIT\n.ERROR   MNOTE 8,'PARAMETER ERROR, GENERATION TERMINATED'\n         MEXIT\n         MEND\n./ ADD NAME=JSAVED   0100-07117-07117-1518-00089-00089-00000-DOTCWS\n         MACRO\n&LABEL   JSAVED &A,&R=\n         GBLC  &JSYSTEM\n         GBLC  &PANSTAT\n*\n*        MACRO JSAVED  VERSION 04A\n*        HILL FARMS REGIONAL COMPUTING CENTER\n.*       INFO TECH (STATE OF WISCONSIN) - TSSR 01578\n*        STANDARD LINKAGE CONVENTION/SAVE MACRO\n*\n&LABEL   SAVE  (14,12),,*\n         AIF   ('&A' EQ 'DOS').DOS\n         AIF   ('&A' EQ 'STATIC').DOS\n         AIF   ('&A' EQ 'EXPRESS').DOS\n         AIF   ('&A' EQ 'OS').OS\n         AIF   ('&A' EQ 'DYNAMIC').OS\n         AIF   ('&A' EQ 'REENTER').OS\n         AIF   ('&A' NE '').ERROR\n.* PASS THRU IF PARAMETER 1 IS OMITTED\n         AIF   ('&JSYSTEM' EQ 'OS').OS\n         AIF   ('&JSYSTEM' EQ 'DOS').DOS\n.DOS     ANOP\n*\n*        STATIC SAVE AREA PROVIDED IN THIS PROGRAM\n*\n         AIF   ('&R' EQ '').DOS1\n         AIF   ('&R' NE 'FP').ERROR\n         CNOP  2,8                      PROVIDE ALIGNMENT\n         BASR  1,0                      PROVIDE ADDRESSING FOR S.A.\n         BAS   1,166(0,1)               BRANCH AROUND SAVE AREA\n         DC    27F'0'                   SAVE AREA\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL3' ',CL5'&SYSTIME'     TIME OF ASSEMBLY\n         DC    CL38'&PANSTAT '\n         STD   0,80(1)                  SAVE FLT PT REG 0\n         STD   2,88(1)                  SAVE FLT PT REG 2\n         STD   4,96(1)                  SAVE FLT PT REG 4\n         STD   6,104(1)                 SAVE FLT PT REG 6\n         AGO   .COM\n.DOS1    ANOP\n         CNOP  2,4                      PROVIDE ALIGNMENT\n         BASR  1,0                      PROVIDE ADDRESSING FOR S.A.\n         BAS   1,130(0,1)               BRANCH AROUND SAVE AREA\n         DC    18F'0'                   SAVE AREA\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL3' ',CL5'&SYSTIME'     TIME OF ASSEMBLY\n         DC    CL38'&PANSTAT '\n         AGO   .COM\n.OS      ANOP\n*\n*        DYNAMIC SAVE AREA FOR RE-ENTRANT CODE\n*\n         AIF   ('&R' EQ '').OS1\n         AIF   ('&R' NE 'FP').ERROR\n         BASR  14,0                     PROVIDE ADDRESSING FOR CODE\n         USING *,14\n         B     *+L'*+8+8+38             FOR TSSR 01578 (11-26-96) (JTS)\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL3' ',CL5'&SYSTIME'     TIME OF ASSEMBLY\n         DC    CL38'&PANSTAT '          PANVALET MODULE/VERSION INFO\n         GETMAIN R,LV=104               ACQUIRE STORAGE FOR SAVE AREA\n         STD   0,72(1)                  SAVE FLT PT REG 0\n         STD   2,80(1)                  SAVE FLT PT REG 2\n         STD   4,88(1)                  SAVE FLT PT REG 4\n         STD   6,96(1)                  SAVE FLT PT REG 6\n         DROP  14\n         AGO   .COM\n.OS1     ANOP\n         BASR  14,0                     PROVIDE ADDRESSING FOR CODE\n         USING *,14\n         B     *+L'*+8+8+38             FOR TSSR 01578 (11-26-96) (JTS)\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL3' ',CL5'&SYSTIME'     TIME OF ASSEMBLY\n         DC    CL38'&PANSTAT '          PANVALET MODULE/VERSION INFO\n         GETMAIN R,LV=72                ACQUIRE STORAGE FOR SAVE AREA\n         DROP  14\n.COM     ANOP\n         SR    14,14                    CLEAR R14 TO NULL FORWARD CHAIN\n         STM   13,14,4(1)               STORE BACK CHAIN, 0 FWD CHAIN\n         ST    1,8(0,13)                SET PREVIOUS S.A. FORWARD CHAIN\n         LM    13,1,8(13)               RESTORE ENTRY REGISTERS\n*\n*        REGISTER 13 POINTS TO THE SAVE AREA FOR THIS PROGRAM\n*        IT MUST REMAIN THIS WAY FOR ANY CALLS AND FOR RETURN\n*\n         MEXIT\n.ERROR   MNOTE 8,'PARAMETER ERROR, GENERATION TERMINATED'\n         MEXIT\n         MEND\n./ ADD NAME=REGISTER 0100-07117-07117-1518-00012-00012-00000-DOTCWS\n         MACRO\n         REGISTER &LABEL=R,&REG1=0,&REG2=15,&NUM1=0\n         LCLA  &A,&B\n&A       SETA  &REG1\n&B       SETA  &NUM1\n.COUNTOK ANOP\n&LABEL.&A EQU  &B\n         AIF   (&A EQ &REG2).END\n&A       SETA  &A+1\n&B       SETA  &B+1\n         AGO   .COUNTOK\n.END     MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDSLOAD": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x7f\\x01\\x01\\x15\\x7f\\x156\\x00e\\x00e\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-06T00:00:00", "modifydate": "2001-06-06T15:36:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT758/FILE758.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT758", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}