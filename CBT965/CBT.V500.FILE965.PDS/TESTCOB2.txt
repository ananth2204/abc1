000100 PROCESS DYNAM,NAME,PGMNAME(COMPAT)
000200 PROCESS ADV,AWO,NOC(W),FSRT,FLAG(I,I)
000300 PROCESS INTDATE(ANSI),LANG(EN),LIB,LIST,MAP
000400 PROCESS NONUM,NUMPROC(PFD),OBJ,APOST
000500 PROCESS RENT,NOSEQ,SOURCE,NOSSRANGE,
000600 PROCESS NOTERM,NOTEST,VBREF,
000700 PROCESS XREF(FULL),ZWB,FASTSRT,AR(E)
000800 ID DIVISION.
000900 PROGRAM-ID. 'TESTCOB2'.
001000 AUTHOR. JOHN MCKOWN.
001100 INSTALLATION. CBT Tape.
001200 DATE-WRITTEN.
001300 DATE-COMPILED.
001400 SECURITY. NONE.
001500*
001600* This program is designed to open a existing SQLITE file
001700* which contains one or more tables. It will then display
001800* the name of each table and the contents of every row
001900* within each table.
002000 ENVIRONMENT DIVISION.
002100 CONFIGURATION SECTION.
002200 SOURCE-COMPUTER. IBM-370.
002300 OBJECT-COMPUTER. IBM-370.
002400 SPECIAL-NAMES.
002500 INPUT-OUTPUT SECTION.
002600 FILE-CONTROL.
002700 I-O-CONTROL.
002800*    APPLY WRITE-ONLY ON REPORT1-FD.
002900*
003000 DATA DIVISION.
003100 FILE SECTION.
003200
003300*
003400 WORKING-STORAGE SECTION.
003500 COPY COBSQLTE .
003600 01  CEE3DMP-PARAMETERS.
003700     05 CEE3DMP-TITLE              PIC X(80)
003800        VALUE 'TEST DUMP'.
003900     05 CEE3DMP-OPTIONS            PIC X(255)
004000        VALUE 'NOTRACE NOENTRY'.
004100 01  LE-FC.
004200     02  CONDITION-TOKEN-VALUE.
004300     COPY  CEEIGZCT.
004400         03  CASE-1-CONDITION-ID.
004500             04  SEVERITY    PIC S9(4) BINARY.
004600             04  MSG-NO      PIC S9(4) BINARY.
004700         03  CASE-2-CONDITION-ID
004800                   REDEFINES CASE-1-CONDITION-ID.
004900             04  CLASS-CODE  PIC S9(4) BINARY.
005000             04  CAUSE-CODE  PIC S9(4) BINARY.
005100         03  CASE-SEV-CTL    PIC X.
005200         03  FACILITY-ID     PIC XXX.
005300     02  I-S-INFO            PIC S9(9) BINARY.
005400*
005500 LOCAL-STORAGE SECTION.
005600 01  LS-FULLWORD-RETURN.
005700     05  LS-SOURCEID-POINTER     POINTER.
005800     05  LS-SOURCEID-BINVALUE    REDEFINES LS-SOURCEID-POINTER
005900                                 PIC S9(9) COMP-5.
006000 77  LS-COLUMN-NUMBER        PIC S9(9) COMP-5.
006100 77  LS-DATABASE-NAME        PIC X(255).
006200 77  LS-DB                   USAGE IS POINTER.
006300 77  LS-INSERT-STMT          USAGE IS POINTER.
006400 77  LS-SELECT-STMT          USAGE IS POINTER.
006500 77  LS-ZERO                 PIC S9(9) COMP-5
006600                             VALUE IS ZERO.
006700 77  LS-RC                   PIC S9(9) COMP-5.
006800 77  LS-SQL-RC               PIC S9(9) COMP-5.
006900 77  SQL-ZCHAR               PIC X(255).
007000 77  LS-I                    PIC S9(9) COMP-5.
007100 77  LS-RECORD-COUNT         PIC S9(9) COMP-5.
007200 77  LS-MINUS-ONE            PIC S9(9) COMP-5
007300        VALUE IS -1.
007400 77  LS-ONE                  PIC S9(9) COMP-5
007500        VALUE IS 1.
007600 77  LS-SOURCEID-LENGTH      PIC S9(9) COMP-5.
007700 77  LS-DOUBLE-BFP           USAGE COMP-2.
007800 77  LS-DOUBLE-HFP           USAGE COMP-2.
007900 77  LS-OPEN-FLAGS           PIC S9(9) COMP-5.
008000 77  LS-NULL                 POINTER VALUE IS NULL.
008100 LINKAGE SECTION.
008200 01  MVS-PARM.
008300     05 MVS-PARM-LENGTH      PIC S9(4) COMP-5.
008400     05 MVS-PARM-VALUE       PIC X(32760).
008500 77  LINKAGE-SOURCEID        PIC X(101).
008600* MVS-PARM-VALUE LENGTH IS REALLY ONLY THE NUMBER OF CHARACTERS
008700* CONTAINED IN MVS-PARM-LENGTH. YOU NEED TO USE REFERENCE
008800* MODIFICATION TO MAKE SURE YOU DON'T EXCEED THE ACTUAL LENGTH
008900* PASSED TO THIS PROGRAM.
009000*
009100 PROCEDURE DIVISION USING MVS-PARM.
009200 START-UP.
009300**
009400** How to access the data when SQLITE returns a
009500** pointer. The following shows how to get the pointer
009600** and then determine the length of the C "string"
009700** which ends with a LOW-VALUES (0x00).
009800     CALL SQLITE3A USING SQLITE3-LIBVERSION
009900          RETURNING LS-SOURCEID-POINTER
010000     END-CALL
010100     IF LS-SOURCEID-POINTER NOT EQUAL TO NULL THEN
010200        SET ADDRESS OF LINKAGE-SOURCEID TO LS-SOURCEID-POINTER
010300*
010400* Get the length of the returned string by finding the first
010500* LOW-VALUE (0x00). Probably not as efficient as calling the
010600* C "strlen" routine, but is "pure" COBOL.
010700        INSPECT LINKAGE-SOURCEID
010800                TALLYING LS-SOURCEID-LENGTH
010900                FOR CHARACTERS BEFORE INITIAL LOW-VALUE
011000*
011100* If you're interested, this is how to call "strlen". It requires
011200* that CEE.SCEELKED be available for dynamic calling or linking
011300* depending on the compile option DYNAM or NODYNAM, respectively.
011400*       CALL    'STRLEN' USING BY VALUE LS-SOURCEID-POINTER
011500*               RETURNING LS-SOURCEID-LENGTH
011600*       END-CALL
011700        DISPLAY "Sqlite version is "
011800                LINKAGE-SOURCEID(1:LS-SOURCEID-LENGTH)
011900                UPON SYSOUT
012000     END-IF
012100     CALL SQLITE3A USING SQLITE3-INITIALIZE
012200     RETURNING LS-SQL-RC
012300     END-CALL
012400D    DISPLAY 'INITIALIZE LS-SQL-RC=' LS-SQL-RC
012500D            UPON SYSOUT
012600     IF LS-SQL-RC NOT = SQLITE-OK THEN
012700        DISPLAY 'SQLITE-INITIALIZE FAILED. RC='
012800            RETURN-CODE
012900            UPON SYSOUT
013000        GOBACK
013100     END-IF
013200     .
013300 INITIALIZE-SQLITE.
013400*
013500* Note: in my testing, this creates a z/OS UNIX file in
013600* the /tmp subdirectory, with the name testcob2.sqlite3 .
013700* That is, the data base name is actually the UNIX file name.
013800* This can be absolute, as in my example, or relative to the
013900* user's UNIX $HOME directory if the value does not start with
014000* a slash character. This is the norm for UNIX file names.
014100*
014200* Note that a prefix of a tilde, ~/, does not expand to the user's
014300* $HOME as it would in a UNIX shell.
014400* Again, in my testing, the OPEN fails with SQLITE-CANTOPEN (14).
014500*
014600     IF MVS-PARM-LENGTH IS GREATER THAN 254 THEN
014700        DISPLAY 'INPUT DATA BASE NAME IS TOO LONG.'
014800                ' LENGTH=' MVS-PARM-LENGTH
014900                UPON SYSOUT
015000        MOVE +16 TO RETURN-CODE
015100     END-IF
015200     IF MVS-PARM-LENGTH IS EQUAL TO ZERO THEN
015300        MOVE Z'/tmp/testcob2.sqlite3' TO SQL-ZCHAR
015400     ELSE
015500        MOVE MVS-PARM-VALUE(1:MVS-PARM-LENGTH) TO
015600             SQL-ZCHAR
015700        MOVE LOW-VALUES TO
015800             SQL-ZCHAR(MVS-PARM-LENGTH + 1:1)
015900     END-IF
016000     MOVE SQLITE-OPEN-READONLY TO LS-OPEN-FLAGS
016100     CALL SQLITE3A USING BY REFERENCE SQLITE3-OPEN-V2
016200          BY REFERENCE SQL-ZCHAR
016300          BY REFERENCE LS-DB
016400          BY VALUE LS-OPEN-FLAGS
016500          BY VALUE LS-NULL
016600          RETURNING LS-SQL-RC
016700     END-CALL
016800     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
016900        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
017000        DISPLAY 'SQLITE3-OPEN FAILED. RC='
017100           LS-SQL-RC UPON SYSOUT
017200        MOVE +16 TO RETURN-CODE
017300        GOBACK
017400     END-IF
017500     .
017600 PREPARE-SELECT.
017700     MOVE Z'SELECT int,fd FROM xz;' TO SQL-ZCHAR
017800     CALL SQLITE3A USING BY REFERENCE SQLITE3-PREPARE-V2
017900          BY VALUE LS-DB
018000          BY REFERENCE SQL-ZCHAR
018100          BY VALUE LS-MINUS-ONE
018200          BY REFERENCE LS-SELECT-STMT
018300          BY VALUE LS-ZERO
018400          RETURNING LS-SQL-RC
018500     END-CALL
018600*    MOVE RETURN-CODE TO LS-SQL-RC
018700D    DISPLAY 'SELECT PREPARE RC=' LS-SQL-RC UPON SYSOUT
018800     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
018900        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
019000        DISPLAY 'PREPARE OF SELECT FAILED. RC='
019100           LS-SQL-RC UPON SYSOUT
019200        GOBACK
019300     END-IF
019400     .
019500 SELECT-LOOP.
019600     MOVE +0 TO LS-SQL-RC
019700     PERFORM UNTIL LS-SQL-RC IS NOT EQUAL TO ZERO
019800       DISPLAY 'SQLITE3-STEP' UPON SYSOUT
019900       CALL SQLITE3A USING
020000            BY REFERENCE SQLITE3-STEP
020100            BY VALUE LS-SELECT-STMT
020200            RETURNING LS-SQL-RC
020300       END-CALL
020400       DISPLAY 'LS-SQL-RC=' LS-SQL-RC UPON SYSOUT
020500       EVALUATE LS-SQL-RC
020600       WHEN SQLITE-ROW
020700            MOVE +0 TO LS-COLUMN-NUMBER
020800            DISPLAY 'SQLITE-ROW' UPON SYSOUT
020900            CALL SQLITE3A USING
021000                 BY REFERENCE SQLITE3-COLUMN-INT
021100                 BY VALUE LS-SELECT-STMT
021200                 BY VALUE LS-COLUMN-NUMBER
021300                 RETURNING LS-I
021400            END-CALL
021500            MOVE +1 TO LS-COLUMN-NUMBER
021600            CALL SQLITE3A USING
021700                 BY REFERENCE SQLITE3-COLUMN-DOUBLE
021800                 BY REFERENCE LS-DOUBLE-BFP
021900                 BY VALUE LS-SELECT-STMT
022000                 BY VALUE LS-COLUMN-NUMBER
022100            END-CALL
022200            CALL SQLITE3A USING
022300                 BY REFERENCE CONVERT-BFP-TO-HFP
022400                 BY VALUE LS-DOUBLE-BFP
022500                 BY REFERENCE LS-DOUBLE-HFP
022600            END-CALL
022700*           MOVE -1.999 TO LS-DOUBLE-HFP
022800            DISPLAY 'FETCHED DATA int=' LS-I
022900                    ' fd=' LS-DOUBLE-HFP
023000                    UPON SYSOUT
023100            MOVE +0 TO LS-SQL-RC
023200       WHEN SQLITE-OK
023300            DISPLAY 'SQLITE-OK' UPON SYSOUT
023400            MOVE +0 TO LS-SQL-RC
023500       WHEN SQLITE-DONE
023600            DISPLAY 'SQLITE-DONE' UPON SYSOUT
023700            MOVE +4 TO LS-SQL-RC
023800       WHEN OTHER
023900            DISPLAY 'SQLITE-OTHER ' LS-SQL-RC UPON SYSOUT
024000            MOVE -2 TO LS-SQL-RC
024100     END-EVALUATE
024200     END-PERFORM
024300     CALL SQLITE3A USING
024400          BY REFERENCE SQLITE3-FINALIZE
024500          BY VALUE LS-SELECT-STMT
024600          RETURNING LS-SQL-RC
024700     END-CALL
024800D    DISPLAY 'SELECT FINALIZE RC=' LS-SQL-RC UPON SYSOUT
024900     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
025000        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
025100        DISPLAY 'FINALIZE FAILED. RC='
025200           LS-SQL-RC UPON SYSOUT
025300        GOBACK
025400     END-IF
025500     .
025600 SHUTDOWN.
025700     CALL SQLITE3A USING SQLITE3-SHUTDOWN
025800          RETURNING LS-SQL-RC
025900     END-CALL
026000     GOBACK
026100     .
026200 END PROGRAM 'TESTCOB2'.
