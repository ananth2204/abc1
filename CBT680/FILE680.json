{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012603000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2527798, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE680.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2527798, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2527798, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE680.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00(\\x04'", "DS1TRBAL": "b'\\xa7\\x14'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xc3\\x00\\x05\\x04\\xc6\\x00\\x00\\x00)'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04B\\x00\\x00\\x01\\x04\\x16\\x9f\\x01\\x04\\x16\\x9f\\x109\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf6@@@'", "ispf": {"version": "04.66", "flags": 0, "createdate": "2004-06-17T00:00:00", "modifydate": "2004-06-17T10:39:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-466"}, "text": "REGULAR CBT TAPE - VERSION 466    FILE:  680\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT466.FILE680\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   18 MEMBERS COUNTED; CUMULATIVE SIZE IS 23,594 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/17/04    10:39:57    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@EDITMAC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08R\\x07\\x87\\x07\\x87\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:52:00", "lines": 1927, "newlines": 1927, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@FILE680": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04B\\x00\\x00\\x01\\x04\\x16\\x9f\\x01\\x04\\x16\\x9f\\x109\\x00)\\x00)\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf6@@@'", "ispf": {"version": "04.66", "flags": 0, "createdate": "2004-06-17T00:00:00", "modifydate": "2004-06-17T10:39:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "CBT-466"}, "text": "//***FILE 680 is a collection of course outlines from Bruce Koss.   *   FILE 680\n//*           The original Microsoft Word versions are included     *   FILE 680\n//*           here (you have to download them in BINARY to a PC     *   FILE 680\n//*           in order to read them).  And also included in this    *   FILE 680\n//*           file, are EBCDIC text versions.  Some of the screen   *   FILE 680\n//*           illustrations that were in the Microsoft Word         *   FILE 680\n//*           originals, could not be captured in the text          *   FILE 680\n//*           versions.                                             *   FILE 680\n//*                                                                 *   FILE 680\n//*           Included are courses on REXX, ISPF, TSO, how to use   *   FILE 680\n//*           Edit Macros, and PDSMAN/EZYEDIT.                      *   FILE 680\n//*                                                                 *   FILE 680\n//*           Much valuable information can be gleaned from         *   FILE 680\n//*           these course outlines.  There is so much detail in    *   FILE 680\n//*           the Edit Macro, ISPF, REXX, and PDSMAN courses,       *   FILE 680\n//*           that you can probably learn a great deal, even if     *   FILE 680\n//*           you are quite expert in those subjects already.       *   FILE 680\n//*           Bruce is very systematic in what he presents.         *   FILE 680\n//*           (S.Golob)                                             *   FILE 680\n//*                                                                 *   FILE 680\n//*        Member Names:                                            *   FILE 680\n//*                                                                 *   FILE 680\n//*        @EDITMAC - Edit Macro course - Microsoft Word            *   FILE 680\n//*        @ISPF    - ISPF course - Microsoft Word                  *   FILE 680\n//*        @PARSE   - PARSE examples for REXX - Microsoft Word      *   FILE 680\n//*        @PDSMAN  - PDSMAN and EZYEDIT course - Microsoft Word    *   FILE 680\n//*        @REXX    - REXX course - Microsoft Word                  *   FILE 680\n//*        @REXXEX  - REXX examples - Microsoft Word                *   FILE 680\n//*        @REXXVAR - REXX variable illustrations - Microsoft Word  *   FILE 680\n//*        @TSO     - TSO course - Microsoft Word                   *   FILE 680\n//*        EDITMAC  - Edit Macro course - text                      *   FILE 680\n//*        ISPF     - ISPF course - text                            *   FILE 680\n//*        PARSE    - PARSE examples for REXX - text                *   FILE 680\n//*        PDSMAN   - PDSMAN and EZYEDIT course - text              *   FILE 680\n//*        REXX     - REXX course - text                            *   FILE 680\n//*        REXXEX   - REXX examples - text                          *   FILE 680\n//*        REXXVAR  - REXX variable illustrations - text            *   FILE 680\n//*        TSO      - TSO course - text                             *   FILE 680\n//*                                                                 *   FILE 680\n//*           email:  bruce.koss@wachovia.com                       *   FILE 680\n//*                                                                 *   FILE 680\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@ISPF": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08U\\x0f\\xf4\\x0f\\xf4\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:55:00", "lines": 4084, "newlines": 4084, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@PARSE": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08U\\x01Z\\x01Z\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:55:00", "lines": 346, "newlines": 346, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@PDSMAN": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08U\\x11\\x80\\x11\\x80\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:55:00", "lines": 4480, "newlines": 4480, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@REXX": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08U\\x12\\xc0\\x12\\xc0\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:55:00", "lines": 4800, "newlines": 4800, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@REXXEX": {"ttr": 6916, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08U\\x01T\\x01T\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:55:00", "lines": 340, "newlines": 340, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@REXXVAR": {"ttr": 6922, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08U\\x01\\x07\\x01\\x07\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:55:00", "lines": 263, "newlines": 263, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@TSO": {"ttr": 7172, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08U\\x03\\x9a\\x03\\x9a\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:55:00", "lines": 922, "newlines": 922, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "EDITMAC": {"ttr": 7433, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x01\\x04\\x16\\x7f\\x01\\x04\\x16\\x7f\\x173\\x00\\xe7\\x00\\xe7\\x00\\x00\\xe3\\xc5\\xe7\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-15T00:00:00", "modifydate": "2004-06-15T17:33:24", "lines": 231, "newlines": 231, "modlines": 0, "user": "TEXT"}, "text": "\n                              ISPF\n\n                          Edit  Macros\n\n\n                        (April 10, 2002)\n\n\n     Agenda\n\n\n\n1. On-line help ----------------------------- 3\n\n2. Introduction ----------------------------- 4\n\n3. Commands/Assignments --------------------- 6\n\n\n4. EDITPDS ---------------------------------- 9\n\n\nOnline Help\n\n\n\n1. MVS/QuickRef\n\n    A. QW <edit macro cmd>\n\n    B. QW\n      \" Select \"C - Request Reference Information by Category\"\n        \" Select \"PROGLANG - Programming Languages\"\n          \" Select any of the following:\n            \" ISPF EDIT MACROS V5R2M2\n            \" OS/390 ISPF ED MACRO V2R10\n\n\n2. Book Manager\n\n    A. =V.BKM\n      \" Select \"ISPBKM10 - OS/390 V2R10.0 ISPF\"\n        \" Select the below manual:\n          \" ISPFEDT04 - OS/390 V2R10.0 ISPF Edit and Edit Macros\n\n\nIntroduction\n\n\n\n\n\n1. Description\n\n  \" Edit macros are ISPF dialogs that run in the ISPF editor environment.\n\n\n2. Uses\n\n  A. Extend and customize the editor\n  B. Perform repeated tasks\n  C. Simplify complex tasks\n  D. Pass parameters\n  E. Retrieve and return information.\n\n\n3. Languages\n\n  A. REXX\n  B. CLIST\n  C. Other Languages (COBOL, etc.)\n\n\n3. Interfaces\n\n  A. ISPF Dialog Services\n  B. TSO Commands\n\n\n4. Commands\n\n  A. Edit macro commands\n  B. REXX commands\n  C. ISPF and PDF dialog service requests\n  D. TSO commands\n\n\n\n\n\n\n\n\n\n1. 1st Statement\n\nISREDIT  (parm1, parm2, parm3)  NOPROCESS\n\n\n2. Examples\n\nEDITMAC1 - Delete numbers in cols 73-80\nEDITMAC2  - Move \"DISP=SHR/MOD/OLD\" to front of DSN\nEDITMAC3 - Insert job card in member\nEDITMAC4 - Display member attributes as \"==MSG=>\"\n\n\n                    Edit Commands/Assignments\n\n\n Item         Type   Description\n------------ ------ -----------------------------------------------------\nAUTOLIST       C/A  Set or obtain current autolist mode\nAUTONUM        C/A  Set or obtain current autonum mode\nAUTOSAVE       C/A  Set or obtain current autosave mode\nBLKSIZE        A    Obtain blocksize of current data set\nBOUNDS         C/A  Set or obtain left and right boundary columns\nBUILTIN        C    Execute a built-in edit command\nCANCEL         C    End an edit session without saving latest changes\nCAPS           C/A  Set or obtain current caps mode\nCHANGE         C    Search for a string and change it to another string\nCHANGE_COUNTS  A    Obtain number of changed strings\nCOPY           C    Copy a PDS member or data set into current data\nCREATE         C    Create a new PDS member from the current data\nCTL_LIBRARY    A    Obtain LMF library lock status\nCURSOR         C/A  Set or obtain current cursor position\nDATA_CHANGED   A    Obtain current status of changed data\nDATA_WIDTH     A    Obtain logical data width\nDATAID         A    Obtain data ID for current data set\nDATASET        A    Obtain current data set name\nDEFINE         C    Define session-only macro command, program, alias\nDELETE         C    Delete selected lines from current data set\nDISPLAY_COLS   A    Obtain column numbers of displayed data\nDISPLAY_LINES  A    Obtain top and bottom line numbers of displayed data\nDOWN           C    Scroll down a variable line amount\nEDIT           C    Invoke another edit session\nEND            C    End the current edit session, saving the data\nEXCLUDE        C    Exclude selected lines from the display\nEXCLUDE_COUNTS A    Obtain line counts from last EXCLUDE command\nFIND           C    Find a search string in any or selected display lines\nFIND_COUNTS    A    Obtain line counts from last FIND command\nFLOW_COUNTS    A    Obtain line counts from last TFLOW command\nHEX            C/A  Set or obtain hexadecimal display mode\nIMACRO         C/A  Set or obtain the initial edit macro\nINSERT         C    Create one or more blank lines for new data\nLABEL          C/A  Set or obtain a line label\nLEFT           C    Scroll display data to the left\nLEVEL          C/A  Set or obtain library member modification level\nLINE           A    Set or obtain line data values\n\n Item         Type   Description\n------------ ------ -----------------------------------------------------\nLINE_AFTER     A    Add a specific-data line after indicated line\nLINE_BEFORE    A    Add a specific-data line before indicated line\nLINENUM        A    Obtain current line number of a given label\nLOCATE         C    Locate a specific data line\nLRECL          A    Obtain the logical record length\nMACRO          C    Identify a command as a macro\nMACRO_LEVEL    A    Obtain current macro nesting level\nMASKLINE       A    Set or obtain mask line value\nMEMBER         A    Obtain the current member name\nMEND           C    End a batch macro in MVS/370 environment\nMODEL          C    Copy a development model into the current data\nMOVE           C    Move a library member into the current data\nNONUMBER       C    Turn off number mode of the currentt data\nNOTES          C/A  Set or obtain the current note mode\nNULLS          C/A  Set or obtain the current nulls mode\nNUMBER         C/A  Set or obtain the current number mode\nPACK           C/A  Set or obtain the current pack mode\nPROCESS        C    Process input line commands and changes\nPROFILE        C/A  Define, switch, lock, unlock and display edit profile\nRANGE_CMD      A    Identify an entered key command\nRCHANGE        C    Repeatedly process the most recent CHANGE request\nRECFM          A    Obtain the current data record format\nRECOVERY       C/A  Set or obtain the edit recovery mode\nRENUM          C    Turn on number mode and renumber all data lines\nREPLACE        C    Replace a data set member\nRESET          C    Reset the line command area\nRFIND          C    Repeat a find of a search string\nRIGHT          C    Scroll the data to the right\nRMACRO         C/A  Set or obtain current recovery macro name\nSAVE           C    Save the current data into a data set\nSCAN           C/A  Set or obtain the current scan mode setting\nSEEK           C    Seek a data string and place cursor on that line\nSEEK_COUNTS    A    Obtain counts from last SEEK command\nSHIFT(         C    Shift all columns to the left\nSHIFT)         C    Shift all columns to the right\nSHIFT<         C    Shift program statements to the left\nSHIFT>         C    Shift program statements to the right\nSORT           C    Sort data into a indicated order\nSTATS          C/A  Set or obtain PDS member statistics\nSUBMIT         C    Submit data to run as a batch job\nTABS           C/A  Set or obtain the tabs mode and define tab character\nTABSLINE       A    Set or obtain the tabs line\n\n Item         Type   Description\n------------ ------ -----------------------------------------------------\nTENTER         C    Set text entry mode for multi-line \"power typing\"\nTFLOW          C    Text flow a para. restructure fragmented pieces\nTSPLIT         C    Text split a line, moving some data to the next line\nUNNUMBER       C    Remove sequence numbers and set number mode off\nUP             C    Scroll up through the data a specified amount\nUSER_STATE     A    Save and restore the user status of the edit display\nVERSION        C/A  Set or obtain the ISPF library member version number\nXSTATUS        A    Set or obtain a lines exclude status\n\n\nEDITPDS\n\n\n\n1. Description\n\n\" A home-brew utility that allows us to execute an Edit Macro\n  against all members in a PDS.\n\n\n2. Syntax\n\n\" TSO  EDITPDS  'pds-name' <edit-macro>\n\" ISPSTART CMD(EDITPDS 'pds-name' <edit-macro>)\n\n\n3. Items of Interest\n\n\" In-order for you to use this utility the last command in your\n  edit macro must be \"ISREDIT END\" or \"ISREDIT CANCEL\".  This is\n  essentially the same as you pressing the PF3 (END) or PF12\n  (CANCEL) key when in edit mode.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPF": {"ttr": 7684, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00Q\\x01\\x04\\x16\\x9f\\x01\\x04\\x16\\x9f\\x10'\\x07\\xb3\\x07\\xb3\\x00\\x00\\xe3\\xc5\\xe7\\xe3@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-17T00:00:00", "modifydate": "2004-06-17T10:27:51", "lines": 1971, "newlines": 1971, "modlines": 0, "user": "TEXT"}, "text": "\n                            Interactive\n                              System\n                            Productivity\n                             Facility\n\n                          (July 19, 2002)\n\n\n\nAgenda\n\n\n\n1- History ---------------------------------- 3\n2- Books ------------------------------------ 4\n3- Information ------------------------------ 6\n4- Online Help ------------------------------ 7\n5- Datasets --------------------------------- 8\n6- LIBDEF ----------------------------------- 9\n7- ISPF Services --------------------------- 11\n8- Variables ------------------------------- 14\n   A- System Variables --------------------- 15\n   B- Control Variables -------------------- 19\n9- Messages--------------------------------- 20\n   A- Message Elements --------------------- 22\n10- Panels --------------------------------- 24\n   A- Display Services --------------------- 27\n   B- Display Commands --------------------- 28\n   C- Panel Sections ----------------------- 29\n   D- ATTR TYPE() -------------------------- 33\n   E- Panel Statements --------------------- 35\n   F- Panel Variables ---------------------- 37\n   G- Panel Functions ---------------------- 38\n   H- Panel Control Variables -------------- 40\n   I- Date Validation ---------------------- 41\n   J- ISPPREP ------------------------------ 42\n11- Skeletons ------------------------------ 43\n   A- Control Statements ------------------- 45\n12- Table Services ------------------------- 48\n   A- Table Commands ----------------------- 49\n   B- TBDISPL Variables -------------------- 52\n13- Batch ---------------------------------- 54\n\n\n\n\nHistory\n\n\n\" 1960-1970 Punch card/batch processing\n\n\" 1970-1975 Time Sharing Option (TSO) on line-oriented terminal\n  devices\n\n\" 1975-1980 Structured Programming Facility (SPF) on visual\n  display devices supporting screen oriented devices- The\n  \"structured\" being derived from the powerful editor, which\n  supported several commands for structuring source text- In\n  addition, SPF offered full-screen support for the program\n  development environment- Although SPF was only available as a\n  complete package, dialog applications were developed using the\n  dialogue support functions-\n\n\" 1981-These dialogue support functions were officially released\n  as the Dialog Manager- The original SPF becoming the Program\n  Development Facility (PDF)\n\n\" 1982 - Dialog Manager and Program Development Facility became\n  two separate packages, with Dialog Manager being part of ISPF and\n  PDF running as an application of ISPF- The Dialog Manager and\n  ISPF have become synonymous- Most literature uses ISPF to refer\n  to the Dialog Manager components-\n\n\" Version 3 brought limited workstation-like functionality in the\n  form of pop-up windows and pull-down menus- The DTL (Dialog Tag\n  Language) was introduced as alternative means of creating\n  dialogue panels-\n\n\" Version 4 provided GUI (Graphical User Interface) that\n  permitted a simple porting of the user-interface for mainframe\n  applications to a workstation- ISPF and ISPF/PDF were combined to\n  form a single product, ISPF- However, ISPF/PDF is still\n  considered to be the program development interface (editor,\n  Compilation, dialogue, etc-)\n\n\nBooks\n\n\nISPF, The Strategic Dialog Manager, J- Ranade Series\nAuthor: Joseph A- Azevedo\nPublisher: McGraw-Hill Book Company\nISBN:  0-07-002673-4\nCost:  $75-00\nRating:  ***********\n\nPractical Usage of ISPF Dialog Manager\nAuthor: Anthony S- Rudd\nPublisher: Springer\nISBN:  3-540-19950-0\nCost:  $50-00\nRating:  *********\n\nMVS TSO PART 1: Concepts and ISPF\nAuthor: Doug Lowe\nPublisher: Mike Muarch and Associates\nISBN:  ?-????????-???-??\nCost:  $36-50\nRating:  *******\n\nMVS TSO PART 2: Commands and Procedures\nAuthor: Doug Lowe\nPublisher: Mike Muarch and Associates\nISBN:  0-911625-57-7\nCost:  $36-50\nRating:  *******\n\nISPF and ISPF/PDF V2R3 Experiences, IBM Red Book\nAuthor:      IBM\nPublisher:   IBM\nISBN:        GG24-3286-00\nCost:        $30-00\nRating:      ********\n\nISPF/REXX Development for Experienced Programmers\nAuthor: Lou Marco\nPublisher: CBM Books\nISBN:  1878956507\nCost:  $35-00\nRating:  ?\n\n\nMVS/TSO Quick Reference Guide\nAuthor: Olivia R- Carmandi\nPublisher: MVS Training, Inc-\nISBN:  - None -\nCost:  $20-00\nRating:  ***\n\nBook Look\nWeb:   www-booklook-com\nPhone:  (845) 986-1981\n\nUsed and Out of Print Books\nWeb:    www-addall-com\n\nUsed Book Search\nWeb:  www-usedbooksearch-com\n\nCompare 30 Online Book Stores\nWeb:  www-AllBookStore-com\n\n\n\nInformation\n\n\n1- Supported Under\n\n\" VM    - Virtual Machine\n\" MVS   - Multiple Virtual Storage\n\" VSE   - Disk Operating System/Virtual Storage Extension\n\" PCs   - Personal Computer/Disk Operating System/OS2/Windows\n\n\n2- Programming Languages\n\n\" Assembler - The most common basic programming language\n\" FORTRAN   - FORmula TRANslation\n\" C/370     - C language\n\" COBOL     - Common Business-Oriented Language\n\" PL/I      - Programming Language 1\n\" PASCAL    - (Named after Blaise Pascal)\n\n\n3- Interpretive Command Languages\n\n\" CLIST  - TSO Command LIST\n\" EXEC2  - CMS EXEC2 Language\n\" REXX   - CMS REXX Language\n\" APL2   - A Programming Language 2\n\n\n4- IBM\n\n    Phone:   800-237-5511\n    Email:   IBMLINK WWW2-IBMLINK-IBM-COM\n    OS/390 Books WWW-1-IBM-COM/SERVERS/S390/OS390/BKSERV/\n    Red Books WWW-REDBOOKS-IBM-COM/\n\n\n\n\nOnline Help\n\n1- MVS/QuickRef\n\nA- QW <ISPF cmd>\n\nB- QW\n\" Select \"C - Request Reference Information by Category\"\n\u00f3 Select \"PROGLANG - Programming Languages\"\n\" Select any of the following:\n\" ISPF SERVICES  V5R2M2 & PRIOR\n\" ISPF VARIBLES  V5R2M2 & PRIOR\n\" OS/390 ISPF DTL SNTX  V2R5\n\" OS/390 ISPF SERVICES  V2R10\n\n\n2- Book Manager\n\nA- =V-BKM\n\" Select \"ISPBKM10 - OS/390 V2R10-0 ISPF\"\n\u00f3 Select any of the following:\n\" ISPREF04 - OS/390 V2R10-0 ISPF Reference Summary\n\" ISPSER04 - OS/390 V2R10-0 ISPF Services Guide\n\n\n3- MODEL Command\n\nA- Must be in EDIT mode\nB- Type in \"MODEL\" on the command line and place the character\n   \"A\" or \"B\" on the edit lines-\nC- From \"Model Classes\" menu select any of below options:\n  \" MSGS     - Message format\n  \" PANELS   - Panel formats and statements\n  \" SKELS    - File tailoring control statements\n  \" REXX     - ISPF services in TSO/REXX\"\n\n\n\nDatasets\n\n1- Displaying datasets concatenated to TSO/ISPF\n\n      LISTA <ddname>\n\n      TSO ISRDDN\n\n      TSO ISRFIND\n\n      TSO LISTALC STATUS\n\n      ISPLIBD\n\n\n2- DD Cards\n\nSYSEXEC  - REXX\nSYSPROC  - CLIST and REXX\n\nISPLLIB  - Load modules\nISPPLIB  - Panels, full-screen or pop-up\nISPMLIB  - Messages, text inserted over a panel\nISPSLIB  - Skeletons, preformatted output\n\nISPTLIB  - Table Input\nISPTABL  - Table Output\n\nISPFILE  - File Tailoring Output\n\n\n3- Search Order\n\n\" LIBDEF/ALTLIB\n\" Sign-on Proc\n\n\n\nLIBDEF\n\n1- Syntax\n\nLIBDEF <libtype> DATASET('dsname')\n\nWhere libtype is\n ISPLLIB - Load module library\n ISPPLIB - Panel library\n ISPMLIB - Message library\n ISPTLIB - Table input library\n ISPTABL - Table output dataset\n ISPSLIB - Skeleton library\n ISPFILE - File tailoring output file\n\nIt will then allocate the below DD names\n ISPLUSR - Load module library\n ISPPUSR - Panel library\n ISPMUSR - Message library\n ISPTUSR - Table output library\n ISPTABU - Table output library\n ISPSUSR - Skeleton library\n ISPFILU - Tailoring output file\n\nLIBDEF <libtype>\n\" Remove dynamic LIBDEF allocation\n\n\n2- Display all active/stacked LIBDEF definitions\n\n\" ISPLIBD\n\n\n3- Items of Interest\n\n\" Allocating an ISPF profile library is not permitted using\n  LIBDEF, because ISPPROF contains user-related data-\n\" Specifying DATASET() is the preferred method because it\n  equivalent to an ALLOCATE command-\n\" LIBDEF are good for the duration of the TSO session or when it\n  is removed with the null LIBDEF command-\n\" When a LIBDEF has been defined and another LIBDEF request is\n  issued the second definition takes precedence over the first-\n\" Each concatenated data set must have the same record format\n  (RECFM) and logical record length (LRECL)-\n\" The LIBDEF ISPLLIB library definitions are not searched by MVS\n  member searches caused by the execution of ATTACH, LINK, LOAD, or\n  XCTL macros within the selected program (SELECT PGM)- The LIBDEF\n  library definitions are searched for selected commands (SELECT\n  CMD)-\n\" Panel datasets can be have a logical record length of 80 or 132\n\" A maximum of 15 datasets names can be listed in the DATASET()\n  field-\n\n\n4- Examples\n\nREXXCLSA  - Allocates REXX Class datasets\nREXXCLSD  - De-allocated REXX Class datasets\n\n\nISPF Services\n\n1- Services\n\n\" Displaying screen images and messages\n\" Building and maintaining tables\n\" Generating output files\n\" Defining and controlling symbolic variables\n\" Interfacing with programs such as EDIT and BROWSE\n\" Controlling operational modes\n\n\n2- Display Services\n\nADDPOP    - Display pop-up panel\nDISPLAY   - Display data panel\nREMPOP    - Revoke pop-up panel\nSELECT    - Display selection panel\nTBDISPL   - Display table panel\n\nNote:  This \"SELECT\" is different from REXX's\n\n\n3- Message Services\n\nGETMSG  - Retrieve message information\nLOG     - Write a message to the ISPF log dataset-\nSETMSG  - Set a message\n\n\n4- Variable Services\n\nVERASE  - Erase a variable from the shared or profile pool\nVGET    - Retrieve a variable from the shared or profile pool\nVPUT    - Store a variable in the shared or profile pool\n\n\n5- General Purpose Services\n\nBROWSE  - Invoke the BROWSE program from a dialog\nCONTROL - Screen-handling and error handling options\nEDIT    - Invoke the EDIT program from a dialog\nLIBDEF  - Define ISPF libraries for a dialog\nPQUERY  - Obtain information on a particular panel\nSELECT  - Display panel or execute program/REXX\nQLIBDEF - Query LIBDEF information\n\n\n6- Table Services\n\nA- Table Services\n\nTBCREATE - Create a table\nTBOPEN   - Open a table for processing\nTBSORT   - Sort a table\nTBQUERY  - Query information about a table\nTBSTATS  - Obtain statistical data on the table\nTBSAVE   - File a copy of the table and continue\nTBCLOSE  - Close a table and disconnect it from use\nTBEND    - End processing of a table without saving\nTBERASE  - Remove a table from the system (DELETE)\n\nB- Single Row Operations\n\nTBADD    - Add a row to a table\nTBDELETE - Delete a row from a table\nTBEXIST  - Check existence of a particular key\nTBGET    - Retrieve a row in a table\nTBMOD    - Modify a row in a table\nTBPUT    - Store a row in a table\nTBSARG   - Set search argument for a table scan\nTBSCAN   - Search for row that matches search argument\nTBVCLEAR - Clear table variables to null\n\nC- Row Pointer Operations\n\nTBTOP    - Point to top of table (row 0)\nTBSKIP   - Skip to the row following the current\nTBBOTTOM - Point to bottom of table (last row)\n\n\n7- File Tailoring Services\n\nFTOPEN   - Create an output file for tailoring\nFTINCL   - Include a skeleton to control output\nFTCLOSE  - Close out the file tailoring process\nFTERASE  - Erase the created output file\n\n\n8- PDS / Sequential Files\n\nLMCLOSE  - Close\nLMCOMP   - Compress\nLMCOPY   - Copy\nLMERASE  - Delete\nLMFREE   - Free\nLMGET    - Read a record\nLMINIT   - Define a data id\nLMOPEN   - Open\nLMPRINT  - Print\nLMPUT    - Write a record\nLMQUERY  - File statistics\nLMRENAME - Rename\n\n\n9- PDS Files\n\nLMMADD   - Add a member\nLMMDEL   - Delete a member\nLMMDISP  - Member statistics\nLMMFIND  - Find a member\nLMMLIST  - Retrieve a member name\nLMMMOVE  - Move members\nLMMREN   - Rename a member\nLMMREP   - Replace a member\nLMMSTATS - Update member statistics\n\n\nVariables\n\n1- Three types of variables\n\nA- User\n    \" &name\n    \" Must be 1 to 8 characters in length\nB- System\n    \" &Zname\nC- Control\n    \" -name\n\n\n2- Pools\n\n  A- Function\n    \" Only known to the particular program or panel-\n  B- Shared\n    \" Default\n    \" Used to store or pass variables between programs or panels-\n    \" Not permanent, discarded when application ends-\n  C- Profile\n    \" Data that is held across any number of sessions-\n    \" Permanent, used when variables need to be remembered from\n      on session to another-\n    \" Assigned an application identifier- If no application\n      identifier is specified, the current one is used-\n    \" Member stored in ISPPROF (applPROF), provided they\n      terminate normal-\n    \" SELECT CMD(abc) APPL(xyz)\n\n\n3- Commands\n\nVERASE  - Erase a variable from the shared or profile pool\nVGET    - Retrieve a variable from the shared or profile pool\nVPUT    - Store a variable in the shared or profile pool\n\n\n4- Items of Interest\n\n\" Order of search is Function Pool, Shared Pool, and finally the\n  profile pool- If not found, a null value is returned-\n\n\n\nSystem Variables\n\nThe bracketed entry that follows each description has the form:\n[length, type, pool], although some entries are omitted- If the\ntype is omitted, it is read-only\n\n1- General Variables\n\nZ   Null variable [0]\n  ZACCTNUM  The current TSO account number [max- 40]\n  ZAPLCNT   APL invocation counts in the logical screen [4]\n  ZAPPLID   Application identifier [4]\n  ZAPPTTL   In GUI mode, the window frame title [in]\n  ZCS       NLS currency symbol\n  ZDECS     NLS decimal separator character [1]\n  ZENTKTXT  In GUI mode, the ENTER button inscription [12,in]\n  ZENVIR    Environment description [32]\n      Aaaaaaaabbbbbbbbccccccccdddddddd\n      Aaaaaaaa = product name and version [8]\n      Bbbbbbbb = operating system name (MVS) [8]\n      Cccccccc = operating env- (TSO, BATCH) [8]\n      Dddddddd = reserved\n  ZGUI      Workstation address or name (blank = not GUI mode) [68]\n  ZISPFRC   Return code set by invoked dialog [8, in]\n  ZKEYHELP  Keys help panel identifier [8, in]\n  ZLANG     Session language [8]\n  ZLOGO     Logo display indicator (NO|YES)\n  ZLOGON    TSO logon procedure stepname [8]\n  ZPLACE    Command line placement (ASIS|BOTTOM) [7, i/o, profile]\n  ZPREFIX   TSO user prefix [8]\n  ZPROFAPP  Name of application profile pool extension table\n            [8, in, profile]\n  ZSYSID    The IEASYSxx SYSNAME [8]\n  ZTEMPF    Name of temporary data set for file tailoring output\n            [44]\n  ZTEMPN    DD-name of temporary data set for file tailoring output\n            [8]\n  ZTHS      NLS time separator character [1]\n  ZTS       NLS time separator character [1]\n  ZTSICMD   ISPF invocation command [max- 32767]\n  ZTSSCMD   SELECT portion of the invocation command [max- 32767]\n  ZUSER     Userid [8]\n  ZVERB     Command verb [8]\n  ZWINTTL   Pop-up window title [in]\n\n\n2- Time and Date Variables\n\n  ZDATE     Current date [8]\n  ZDATEF    Current date in the language date format [8]\n  ZDATEFD   Current date in the language date format [8]\n  ZDAY      Day of the month (2 digits)\n  ZJDATE    Date in day-of-year format (yy-ddd)\n  ZMONTH    Month of year (2 digits)\n  ZSTDYEAR  4-digit year\n  ZTIME     Time of day (hh:mm)\n  ZYEAR     2-digit year\n\n\n3- Terminal Function and PF Key Variables\n\n  ZCOLORS   Number if colors supported by the terminal [4]\n  ZDBCS     DBCS Terminal Capability (YES|NO)\n  ZFKA      Current function key area setting\n            (LONG, SHORT, OFF) [8]\n  ZHILITE   Extended highlighting availability (YES|NO)\n  ZKEYS     Number of function keys [4, out, profile]\n  ZPFCTL    PFSHOW command authorization [5, i/o, profile]\n  ZPFFMT    Number of function key definitions per line\n            [4, i/o, profile]\n  ZPFSET    Function key definitions per line [4, i/o, profile]\n  ZPFSHOW   PFSHOW command status [4, i/o, profile]\n  ZPFnn     Function key setting; nn = 1--24 [8, i/o, profile]\n  ZPFLnn    Function key label setting; nn = 1-24 [8, i/o, profile]\n  ZPRIKEYS  Primary function key settings [4, i/o, profile]\n      LOW:  PF1 to PF12\n      UPP:  PF13 to PF24\n  ZCREEN    Logical screen number (1, 2, 3, or 4)\n  ZSCREEND  Screen depth available for dialog use [4]\n  ZSCREENW  Maximum available screen depth [4]\n  ZSCRMAXD  Maximum available screen depth [4]\n  ZSCRMAXW  Maximum available screen width [4]\n  ZSPLIT    Split screen mode in effect [4]\n  ZTERM     Terminal type [8, out, profile]\n\n\n\n4- Scrolling Variables\n\n  ZSCBR     BROWSE service scroll amount [4, i/o, profile]\n  ZSCED     EDIT service scroll amount [4, i/o, profile]\n  ZSCML     Member list scroll amount [4, i/o, profile]\n  ZSCROLLA  Scroll amount (PAGE, MAX, CSR, number) [4, out]\n  ZSCROLLD  Default scroll amount [4, in]\n  ZSCROLLN  Scroll amount computed as number [4, out]\n\n\n5- TBDISPL Service Variables\n\n  ZTDADD    More rows needed to satisfy scroll request\n            (YES|NO) [3, out, func]\n  ZTDAMT    Number of rows needed to satisfy scroll [3, out, func]\n  STDLROWS  Number of rows in the logical table [6, in, func]\n  ZTDLTOP   Map current top row in physical table to its position\n            in logical table [6, in, func]\n  ZTDMARK   User-defined bottom-of-data text [in]\n  ZTDMSG    User-defined message-id for top of table [8, in]\n  ZTDRET    [8, in, func]\n  ZTDROWS   Number of displayed table rows [6, out, func]\n  ZTDSCRP   CRP of top row to be displayed after scroll\n            [6, i/o, func]\n  ZTDSELS   Number of selected table rows [4, out, func]\n  ZTDSIZE   Size of scrollable section [4, out, func]\n  ZTDSRID   Row-id of the row pointed to by ZTDSCRP [6, out, func]\n  ZTDTOP    Row number (CRP) of top row displayed [6, out, func]\n\n\n6- Dialog Error Variables\n\n  ZERRALRM  Message alarm indicator (YES|NO) [3, out, func]\n  ZERRHM    Name of associated help panel [8, out, func]\n  ZERRLM    Long error message text [512, out, func]\n  ZERRMSG   Error message-id [8,out, func]\n  ZERRSM    Short error message text [24, out, func]\n  ZERRTYPE  Error message type [8, out, func]\n  ZERRWIND  Error message window type [6, out, func]\n\n\n7- Control Variables Used in Selection Panels\n\n  ZCMD      Command input field\n  ZPARENT   Parent selection panel name\n            (when in explicit chain mode)\n  ZPRIM     Primary option selection panel (YES|NO)\n  ZSEL      Command input field truncated at first period\n\n\n8- Control Variables Used in Help Panels\n\n  ZCONT     Name of next continuation panel\n  ZHINDEX   Name of first index panel\n  ZHTOP     Name of top panel\n  ZIND      Index page indicator (YES|NO)\n  ZUP       Name of parent panel\n\n\n9- List Service Variables\n\n  ZLSTLPP   Line count for the list data set [4]\n  ZLSTNUML  Number o lines on the current list data set page [4]\n  ZLSTTRUN  List data set record length truncation value [4]\n\n\n10- List and Log Dataset Variables\n\n  ZLOGNAME  Log data set name [44]\n  ZLSTNAME  List data set name [44]\n\n\nControl Variables\n\n1- Control Variables\n\n-ALARM    - Controls sounding of terminal alarm-\n-ATTR     - Changes attributes of a panel field-\n-ATTRCHAR - Changes attributes associated with a particular character-\n-AUTOSEL  - On table displays, controls whether a row will be\n            selected automatically or not, even if the user does not\n            specifically select it-\n-CURSOR   - Controls placement of the cursor during panel display-\n-CSRPOS   - Controls placement of the cursor within a field in the\n            panel-\n-CSRROW   - Controls placement of the cursor in a row of a table-\n-HELP     - Identifies the name of tutorial panel when HELP is\n            displayed-\n-MSG      - Identifies a particular message to be displayed on the\n            screen-\n-PFKEY    - Provides PF key number depending on which key the user\n            pressed-\n-RESP     - Identifies the type of response from the user (END or\n            RETURN)-\n-TRAIL    - Provides the remaining string from a TRUNCate operation-\n-ZVARS    - Enables correlation of z variables to actual names-\n\n\nMessages\n\n1- Message Services\n\nGETMSG - Get a message\nLOG    - Write a message to the ISPF log dataset-\nSETMSG - Set a message\n\n\n2- Setting Messages\n\nGETMSG  MSG(messageid)\nSETMSG  MSG(messageid)\nLOG     MSG(messageid)\nDISPLAY MSG(messageid)\nTBDISPL MSG(messageid)\nTRANS   MSG=messageid\nVER     MSG=messageid\nPanel  -MSG=messageid\n\n\n3- Items of Interest\n\n\" Be sure to have \"NUMBER OFF\"- If you have sequence numbers in\n  cols 73 through 80 you will not be able to display your message-\n\" Continuation character is the \"+\"-\n\" Comments can be inserted with /* starting in column 1\n\" The message identifier and the long message text must start in\n  column 1\n\" When using quotes, they must be single quotes-\n\" Variables can be placed inside quotes, e-g- 'ISSUE NO &TICKET'-\n  Normal substitution will occur-\n\" Each logical message defined in a member may be separated from\n  one another by using one or more blank lines or a comment (/*)\n  starting in column 1-\n\" If no short message is defined, the long message is displayed-\n\" Variables must start with & character and be 1-8 characters in\n  length-\n\" Cannot use REXX arrays-\n\n\n4- Items of Interest (cont-)\n\n\" A period separates a variable from a concatenated literal- For\n  example, &VAR-NOWAY; NOWAY is appended to the current value of\n  VAR-\n\" If an explicit message is specified for the panel display, that\n  message takes precedence over any messages set by SETMSG service-\n\" If the message contains symbolic variables, substitutions are\n  made using the values for the variables at the time of\n  invocation, not at the point of display-\n\" DISPLAY MSGID ON will display the MSGID number-\n\" A special case of message definition is a message which does\n  not have any text:\n    \u00f3 TEST001\n    \u00f3 ' '\n  This dummy message can be used where message processing is\n  required but no message text is to be displayed, e-g- it can be\n  used to force a panel redisplay-\n\" To avoid having to define a large number of messages a\n  generalized message \"torso\" containing symbolic variables may be\n  defined:\n    \u00f3 APPL001 '&SMSG' -ALARM=&ALARM\n    \u00f3 '&LMSG'\n  The three symbolic variables &SMSG, &LMSG and &ALRM are replaced\n  by the appropriate text for \"short message\", \"long message\" and\n  alarm condition (ON or OFF), respectively, when the message is\n  displayed- You must weigh the advantages and disadvantages\n  compared with a larger repository of fixed messages-\n\n\n5- Examples\n\nISPFMSG1 - Display short and long message using ISPF variables\nISPFMSG2 - Display just a long message using ISPF variables\nISPFMSG3 - Display a very long message using ISPF variables\nISPFMSG4 - Display a pre-defined message-\n\n\nMessage Elements\n\n1- Seven Elements\n\n  A- Message ID\n    \" Required\n    \" The message identification\n    \" Must begin in column 1\n    \" Range form 4 to 8 characters\n      \u00f3 1 to 5 alphabetic characters (A-Z, $, @, #)\n      \u00f3 A 3 digit number\n      \u00f3 An optional 1 character suffix\n\n  B- Short Message\n    \" Optional\n    \" Up to 24 characters of text-  Any excess will be truncated-\n    \" If not present, the DISPLAY service will automatically use\n      the long message-\n    \" Can use dialog variables\n    \" Must be in single quotes\n    \" Variables can be placed in quotes-\n      Normal substitution will occur-\n\n  C- Alarm Indicator\n    \" Optional\n    \" Audible Alarm (if available)\n    \" -ALARM = YES | NO\n\n  D- Help Panel\n    \" Optional\n    \" Special tutorial section\n    \" -HELP=<panel> | *\n\n  E- Window\n    \" Optional\n    \" Displayed in pop-up window-\n    \" WINDOW = RESP | NORESP | LRESP | NOLRESP\n    \" RESP and NORESP operands specify that both short ad long\n      messages is to be displayed-\n    \" LRESP and NOLRESP specifies a response to the displayed\n      message must be made before processing continues-\n\n  F- Type\n    \" Optional\n    \" Specifies the severity of the displayed message-\n    \" TYPE=NOTIFY | WARNING | ACTION | CRITICAL\n    \" The severity determines the color of the displayed message\n      and the symbol displayed in GUI-mode-\n\n  G- Long Message\n    \" Required\n    \" Up to 255 characters\n    \" Must begin in column 1\n    \" Must be in single quotes\n    \" Variables can be placed in quotes-\n      Normal substitution will occur-\n\n\nPanels\n\n1- Panels\n\n  \" Selection Panels (Menus)\n  \" Data Entry Panels\n  \" Table Display Panels\n  \" Tutorial/Help Panels\n\n2- ABCINIT / INIT / REINIT / ABCPROC / PROC\n\nAssignment (=) - Assign values to variables\nEXIT           - Terminates processing in the section\nGOTO           - Passes control to a subsequent label\nIF (ELSE)      - Conditional execution of logic\nREFRESH        - Refresh variables in panel (REINIT)\nTOG            - Alternates the value of a variable between\n                 two values\nVEDIT          - The variables are used for mask validation\nVER            - Verify contents of variables\nVGET           - Get variables from pools\nVPUT           - Put Variables into other pools\n\n3- System Variables\n\n&ZCMD    - Command input field\n&ZSEL    - Select Service parameter\n&ZPRIM   - Primary option menu indicator\n&PARENT  - Parent selection panel name\n\n4- Panel Functions\n\nTRUNC    - Truncates a string\nTRANS    - Translates a string\nPFK      - Retrieve a PF Key\nLVLINE   - Find last visible line\n\n5- Items of interest\n\n\" Continuation character is the \"+\"- Cannot continue lines in the\n  )BODY section-\n\" A literal defined within apostrophes can be continued on the\n  following line by setting \"+\" at the end of the line to be\n  continued, the literal continues at the first non-blank character\n  on the following line (blanks up to the \"+\" on the continued line\n  are retained)- The below literal is equivalent to 'ALPHA BETA':\n    'ALPHA    +\n                        BETA'\n\" Blank characters at the end of a literal are ignored- If,\n  however, the literal contains only a single blank character, this\n  one is retained- Also, imbedded blank characters are retained-\n  For example:\n    \u00f3 'ALPHA       '        equal to 'ALPHA'\n    \u00f3 'ALPHA     BETA'                      the blanks are retained\n    \u00f3 'ALPHA '     retains the 1 blank character\n\" Comments are inserted with /* comment */- Comments can not be\n  in the )BODY, )MODEL or )AREA sections-\n\" When using quotes, they must be single quotes-\n\" When using large tables you may need to increase your TSO\n  REGION size\n\" Variables must start with & character and be 1-8 characters in\n  length-\n\" Cannot use REXX arrays-\n\" Always use &ZCMD as the COMMAND==> variable- This will allow\n  for execution of ISPF and external commands-\n\" Control variables, ones that start with a period, can only be\n  used in the logic sections of a panel - )ABCINIT, )INIT, )REINIT,\n  )ABCPROC, and )PROC-\n\" DISPLAY PANELID ON will display the panel name in the upper\n  left hand corner of the screen-\n\" Ensure \"NUMBER OFF\", panels use all characters in the line- If\n  sequence numbers are in the panel a severe error will occur upon\n  displaying of the panel-\n\" After modifying a panel you must refresh it by logging out of\n  ISPF or invoking it through ISPF 7-2 (Dialog Test)-\n\" ISPF panels do not include any arithmetic operations\n  (e-g- &N = &N + 1)-\n  This must be accomplished within the REXX program-\n\" ISPF panels do not support DO loop or SELECT statements-\n\" If you displayed the panel, via REXX, and later you modify the\n  panel, you'll need to logoff TSO or use ISPF 7-2 (Dialog Test) to\n  refresh the panel in memory- ISPF interprets/compiles the panel\n  and saves it in your TSO session in hopes of speeding up future\n  displays of the same panel-\n\" When using \"WINDOW(width,depth)\" keyword on the )BODY statement\n  the minimum width is 8 and depth is 1- The maximum width is 3\n  bytes less then the screen width (ex- 80-byte screen, max width\n  would be 77)- One byte is used by the attribute character, the\n  other two bytes by the \"|\"-\n\n6- Examples\n\nISPFPAN1 - Display a data input panel\nISPFPAN2 - Display a pop-up data entry panel\nISPFPAN3 - Display an input panel using a scroll area\nISPFPAN4 - Display an input panel using two scroll areas\nISPFPAN5 - Display an input panel with an Action Bar\nISPFPAN6 - Display a selection panel\nISPFPAN8 - Display selection panel using area section, action\n           bar, and point-and-shoot fields-\nISPFPAN9 - Display a table\n\n\nDisplay Services\n\n\n1- Data Input Panel\n\nADDRESS ISPEXEC\n\"DISPLAY PANEL(panel)\"\n\n\n2- Pop-Up Panel\n\nADDRESS ISPEXEC\nZWINTTL = 'panel title'\n\"ADDPOP\"\n\"DISPLAY PANEL(panel)\"\n\"REMPOP\"\n\n\n3- Selection Panel\n\n  ADDRESS ISPEXEC\n\"SELECT PANEL(panel)\"\n\n\n4- Table Display Panel\n\nADDRESS ISPEXEC\n \"TBDISPL PANEL(panel)\"\n\n\n\nDisplay Commands\n\n\n1- DISPLAY\n\n\" Specifically used for displaying data entry panel, not\n  selection menus-\n\" Any ISPF return code of 12 or higher normally causes ISPF to\n  exit the dialog- If an application needs to retain control, then\n  the statement \"CONTROL ERRORS RETURN\" would allow you to do so-\n\" After DISPLAYing a panel the REXX should check for a RC=8- This\n  would indicate the customer responded with END or RETURN-\n\" When DISPLAYing a PANEL you can specify the CUROR and CSRPOS,\n  just beware the panel definition takes precedent- If it is not\n  specified on the DISPLAY command or in the panel the cursor will\n  default to the first input field and cursor position will default\n  to 1-\n\n\n2- ADDPOP / REMPOP\n\n\" If you use ADDPOP, ensure to invoke REMPOP after displaying the\n  panel- If you do not all panels there after will be displayed in\n  Window format-\n\n\n3- SELECT\n\n\" Specifically used for displaying of selection menus or calling\n  a function (REXX program or executable program)- Not used for\n  displaying data entry panels-\n\n\n4- TBDISPL\n\n\" See section on Table Services\n\nPanel Sections\n\n\n\n1- )PANEL\n\n\" Optional\n\" Indicates that the panel is to be displayed in CUA mode and\n  specified the associated key list-\n\n\n2- )ATTR\n\n\" Optional\n\" Defines those special characters (attribute bytes) which are to\n  be used to identify field types in the )BODY section-\n\" SKIP(OFF) is the default- To automatically advance to the next\n  input field use specify SKIP(ON)- This prevents customers from\n  having to use the tab key-\n\" INTENS(NONE) is used to hide passwords-\n\" PAD(_) is used to display the entire length of the input field\n  to the customer-\n\" JUST(LEFT) is the default- Sometimes its more desirable to have\n  numbers right justified by specifying JUST(RIGHT)-\n\" AREA(DYNAMIC) has very little flexibility when it comes to\n  processing the panel that no one uses it-\n\n\n3- )ABC\n\n\" Optional\n\" Action Bar Choice section\n\n\n4- )ABCINIT\n\n\" Required if )ABC section has been specified\n\" Action Bar Choice Initialization Section\n\" You must include the \"-ZVARS\" panel source definition statement\n  for each action bar choice section you define-\n\n\n5- )ABCPROC\n\n\" Optional-\n\" Action Bar Choice Processing section\n\n\n6- )BODY\n\n\" Required\n\" Define the format and contents of the panel as it will be\n  displayed\n\" Use EXPAND(//) to eliminate typing-  This will duplicate the\n  designated character within the '/''s- For example -/-/-, will\n  repeat the character for the entire length of the screen-\n\" Use Z variables for fields with small sizes-  By defining\n  -ZVARS = '(var1)' in the )INIT section-\n\" Can not use comments in this section-\n\n\n7- )MODEL\n\n\" Mandatory for Table Display Panels (TBDISPL), must not be\n  present for other panels\n\" Specifies the display format of one logical row from the\n  corresponding ISPF table-\n\" Minimum of one line and a maximum of 8 lines-\n\" To limit the number of rows being displayed based on some\n  search argument use )MODEL ROW(SCAN)- This would cause the\n  TBDISPL service to examine each row to see if it matches the\n  arguments set by the TBSARG in the REXX driving the display- Only\n  successful matches will be displayed- But you must remember to\n  use a TBSARG, for failure to do so will result in a sever error\n  when the TBDISP is invoked\n\" Can contain the following field types:  Input, Output, and Text-\n\" Can not use comments in this section-\n\n\n8- )AREA\n\n\" Optional\n\" Scrollable Area section\n\" Cannot use comments in this section-\n\n\n9- )INIT\n\n\" Optional\n\" Defines the processing that is to be performed before the panel\n  is initially displayed-\n\n\n10- )REINIT\n\n\" Optional\n\" Define the processing which is to be performed before the panel\n  is redisplayed\n\" A redisplay occurs after an \"error\" condition has been signaled\n  or when the data for a selected row in a table display panel is\n  redisplayed-\n\" A redisplay is invoked under the following circumstances:\n    \u00f3 The -MSG control variable is non-blank, i-e- a statement in\n      the )PROC section has implicitly (using aver or TRANS\n      statement) or explicitly (by assignment) set a message-\n    \u00f3 The DISPLAY or TBDISPL service is used without a panel name\n      being specified\n\n\n11- )PROC\n\n\" Optional\n\" Defines the processing that is to be performed after the panel\n  has been displayed-\n\" Typically is used to validate the input-\n\n\n12- )PNTS\n\n\" Optional\n\" The Point-and-Shoot defines the processing which is to be\n  performed on point-and-shoot fields-\n\n\n13- )HELP\n\n\" Optional\n\" Specifies the help panels associated with fields\n\n\n14- )END\n\n\" Required\n\" Terminates the panel definition-\n\n\n\nATTR TYPE( )\n\n\nAB       Action Bar unselected choices-\n         Mandatory- [COLOR(WHITE), INTENSE(HIGH)]\n\nABSL     Action Bar separator line-\n         Mandatory- [COLOR(BLUDE) INTENSE(LOW)]\n\nCEF      Choice entry field-\n         [COLOR(TURQ), INTENS(LOW), HILITE(USCORE), CAPS(OFF),\n         JUST(LEFT)]\n\nCH       Column heading-  [COLOR(BLUE), INTENSE(HIGH)]\n\nCHAR*    Character attributes in a dynamic area-\n\nCT       Caution text-  [COLOR(YELLOW),INTENS(HIGH)]\n\nDATAIN*  Input field in a dynamic area-  [CAPS(OFF), JUST(LEFT)]\n\nDATAOUT* Output field in a dynamic area-  [CAPS(OFF), JUST(LEFT)]\n\nDT       Descriptive text-  [COLOR(GREEN), INTENS(LOW)]\n\nEE       Error emphasis-  [COLOR(YELLOW), INTENS(HIGH)]\n\nET       Emphasized text-  [COLOR(TURQ), INTENS(HIGH)]\n\nFP       Field prompt-  [COLOR(GREEN), INTENS(LOW)]\n\nINPUT*   Input field-  [CAPS(ON), JUST(LEFT)]\n\nLEF      List entry field (e-g- table input field)-\n         [COLOR(TURQ), INTENS(LOW), HILITE(USCORE), CAPS(OFF),\n         JUST(ASIS)]\n\nLI       List items (e-g- table output field)-\n         [COLOR(WHITE), INTENS(LOW), CAPS(OFF), JUST(ASIS)]\n\nLID      List item description-\n         [COLOR(GREEN), INTENS(LOW), CAPS(OFF), JUST(ASIS)]\n\nNEF      Normal entry field-\n         [COLOR(TURQ), INTENS(LOW), HILITE(USCORE), CAPS(OFF),\n         JUST(ASIS)]\n\nNT       Normal text-  [COLOR(GREEN), INTENS(LOW)]\n\nOUTPUT*  Output field-  [CAPS(ON), JUST(LEFT)]\n\nPIN      Panel instruction-  [COLOR(TURQ), INTENS(LOW)]\n\nPS       Point-and-shoot-\n         This type must be used for point-and-shoot text fields-\n         [COLOR(TURQ), INTENS(HIGH), JUST(LEFT)]\n\nPT       Panel title-  [COLOR(BLUE), INTENS(LOW)]\n\nRP       Reference phrase-  Mandatory-  [COLOR(TURQ), INTENS(HIGH)]\n\nSAC      Select available choices-  [COLOR(WHITE), INTENS(LOW)]\n\nSI       Scroll information-  [COLOR(WHITE), INTENS(HIGH)]\n\nSUC      Select unavailable choices-  [COLOR(BLUE), INTENS(LOW)]\n\nTEXT*    Text field-\n\nVOI      Variable output information-\n         [COLOR(TURQ), INTENS(LOW), CAPS(OFF), JUST(LEFT)]\n\nWASL     Work area separator line-  [COLOR(BLUE), INTENS(LOW)]\n\nWT       Warning text-   [COLOR(WHITE), INTENS(HIGH)]\n\n\nThose attributes marked with mandatory must be used for the\nindicated attribute- Many types (for example, the various text\nattributes) can be used at the developer's discretion- Those\nmarked with an asterisk (*) are not CUA attributes, but are\nincluded for completeness-\n\nProtected means that the contents of that field are protected\nagainst being changed, i-e- the field cannot be used for input-\nText means that the contents of that field are interpreted as\nbeing text data, variable data must be specified as a symbolic\nvariable (&VAR)- Input and output mean that the following field\nis interpreted as being the name of a variable, the contents of\nwhich are placed at this location in the panel display- Output\nhas only the significance that the displayed field contents\ncannot be altered, i-e- the field is only used for output- The\nuse of DATIN and DATOUT are used in the dynamic field section-\n\n\n\nPanel Statements\n\n\nThese statements can be used in the initialization ()ABCINIT,\n)INIT, )REINIT) and processing, ()ABCPROC, )PROC) sections-\n\n\n1- Assignment\n\n\" The literals '' and ' ' both represent a single blank- The\n  system variable &Z must be used to set the null variable (X'0')-\n  No arithmetic statements are allowed-\n\n\n2- EXIT\n\n\" IF (-RESP = END) EXIT\n\n\n3- GOTO\n\n\" The label statement is 1-8 characters, the first character must\n  be alphabetic- Lower case letters are translated to uppercase-\n\n\n4- IF (ELSE)\n\n\" Relational Operators\n\u00f3 EQ, NE, GT, GE, LT, LE, NG, NL\n\u00f3 =, ~=, >, >=, <, <=, ~>, ~<\n\" The IF statement has the following limitations:\n\u00f3 No \"THEN\" keyword-\n\u00f3 No \"DO-END\" groups are allowed- Instead, multiple statements\n  dependent on a given IF condition are recognized by the fact that\n  they are indented from the IF statement-\n\u00f3 The comparison must be enclosed in parenthesis, ie- IF (&X = 1)\n\" IF (&ABC = 1, 2, 3) EXIT\n\n\n5- PANEXEIT (Panel Exit)\n\n\" The use of the panel exit in its current form cannot be recommend-\n\n\n6- REFRESH\n\n\" Normally the panel fields are not updated when the panel is\n  redisplayed, meaning the fields have the same value as when you\n  last saw them- Refresh forces the specified variables in the\n  panel to be updated before redisplay-\n\" REFRESH is only necessary if the panel is to be redisplayed\n  after variables have been modified as a result of processing-\n\" REFRESH (*), refreshes all panel fields having the attribute of\n  input or output-\n\n\n7- TOG (Toggle)\n\n\n8- VEDIT (variable edit)\n\n\n9- VER (verify)\n\n\" Although NONBLANK test can be combined with other verification,\n  it may be preferable to make a separate test and so produce a\n  more explicit message-\n\" Note, no important verification is performed on a blank field,\n  although the NONBLANK parameter may be used to force input to be\n  made to the field in question-\n\" The standard message test associated with the LIST keyword is\n  not very useful; the long message merely states \"ENTER ON OF THE\n  LISTED VALUES\" without explaining what the listed values are- In\n  this instance it is better for the developer to issue his own\n  message that contains a list of the valid operands-\n\n\n10- VGET\n\n\n11- VPUT\n\n\n\nPanel Variables\n\n\n1- ZSEL\n\nA-     The following contents are interpreted in a special manner\n\n\"  \"   (blank) the message \"ENTER OPTION\" is displayed\n\n\"?\"    (question mark) the message \"INVALID OPTION\" is displayed\n\n\nB- Example\n\n&ZSEL = TRANS(TRUNC(&ZCMD,'-')\n    1, 'CMD(%REXXPGM)'\n    2, 'PGM(COBOLPGM)'\n    3, 'PANEL(PANEL1)'\n    X, EXIT\n    ' ', ' '\n    '*', '?')\n\nIn the above example if the customer does not type any characters\nin and presses ENTER the message \"ENTER OPTION\" will appear-\n\nIf the customer types in any other character than 1, 2, 3, or X\nthe \"INVALID OPTION\" message will be displayed-\n\n\nPanel Functions\n\n\n1- TRUNC\n\nA- Description\n\" Enables you TRUNCate a string either at a fixed position or at\n  the occurrence of a given character-\n\nB- Syntax\n\" &VAR1 = TRUNC(<variable>, ## | 'char')\n\nC- Examples\n\" &X = 'ABC-DEF'\n\" &A = TRUNC(&X, 3)  Contains ABC\n\" &B = -TRAIL   Contains -DEF\n\" &C = TRUNC(&X, '-')  Contains ABC\n\" &D = -TRAIL   Contains DEF\n\nD- Items of Interest\n\" -TRAIL contains the remainder of the string-\n\n\n2- TRANS\n\n3- Description\n\" Enables you translate one string into another at the same time\n  making provisions for an error message if a match cannot be\n  found-\n\n4- Syntax\n\" &VAR1 = TRANS(<variable>, value,value - MSG=id)\n\n5- Examples\n\" &A = TRANS(&OPT  A,ADD,  C, CHANGE,  D,DELETE)\n\" &B = TRANS(&ANS  Y,YES  N,NO  MSG=DDSM000)\n\" &C = TRANS(&COD  1,ABC  2,XYZ  *,*)\n\" &D = TRANS(&ANS  Y,YES  N,NO  *,'?')\n\n6- Items of Interest\n  \" One very common usage is selection panels:\n    \u00f3 &ZSEL = TRANS(TRUNC(&ZCMD, '-')  1,'PGM(ABC)' )\n\n\n3- PFK\n\nA- Description\n\n\" Allows us to extract information about the settings of any of\n  the Program Function (PF) keys-\n\nB- Syntax\n\" &VAR1 = PFK(nn, | string)\n\nC- Examples\n\" &PFVAL = PFK(02)     \"SPLIT\" is returned\n\" &PFVAL = PFK('SPLIT')  \"PF2\" is returned\n\nD- Items of Interest\n\" If the string is assigned to more than one PF Key, the first\n  primary key with the string will be given-\n\n\n4- LVLINE\n\nA- Description\n\" Returns the number of the last visible line in this panel for\n  an area defined as DYNAMIC or GRAPHIC\n\nB- Syntax\n\" &VAR1 = LVLINE(<areaname>)\n\n\nC- Examples\n\" &A = LVLINE(AREA1)\n\nD- Items of Interest\n\" This function is not used much-\n\n\n\nPanel - Control Variables\n\n\n1- -ALARM\n\" Can be annoying to the customer\n\n2- -ATTR\n\" Can be used to accentuate a field for error processing\n\n4- -CURSOR\n\" Used to position the cursor on the field in error-\n\" Once it has been set, it cannot be changed during the current\n  panel processing-\n\n5- -HELP\n\" If -HELP has not been set, the invocation of the help command\n  will cause the last set help panel to be displayed- This panel is\n  probably unrelated to the current application anc could confuse\n  the customer- It is recommended that every panel sets -help to be\n  the name of some appropriate help panel for the application-\n\n6- -MSG\n\" Cannot be changed once it has been set during the current panel\n  display-\n\n7- -RESP\n\" ISPF applications usually adopt the convention that the END key\n  terminates the panel display without any input being processed-\n  Hence, processing in the )PROC panel display without any input\n  being processed- Hence, processing in the )PROC section should be\n  performed if the operator has used the ENTER key (or equivalent)\n  to terminate the panel display, i-e- all processing in the )PROC\n  section should be inside the IF (-RESP=ENTER) group-\n\n8- -ZVARS\n\" The excessive use of placeholder's results in panels that is\n  difficult to maintain- Placeholders should only be used where\n  they are necessary, namely where the variable name associated\n  with a field is longer than the data it contains-\n\n\n\nDate Validation\n\n\n)BODY\n+ Enter Date ==>  _ED+(Day)  _EM+(Month)  _EY+(Year)\n+\n)PROC\n   IF (-RESP = ENTER)\n      &EDATE = '&EY&EM&ED'\n      IF (&EDATE  ~= &Z)           /* Process if date field non-blank */\n         VER (&EY,NB,PICT,'99')    /* Year 00,--,99                   */\n         IF (-MSG = &Z)            /* Process if no error  */\n            VER (&EM,NB,PICT,'99')\n            VER (&EM,NB,RANGE,01,12)    /* Month 01--12  */\n             IF (-MSG = &Z)             /* Process if no error   */\n                  &FEB = '28'           /* Default, no leap year */\n                 IF (&EY = '00','04','08','12','16','20','24','28','32','36',\n                           '40','44','48','52','56','60','64','68','72','76',\n                           '80','84','88','92','96')\n                     &FEB = '29'        /* Leap Year  */\n                &MONTHDAY = TRANS(&EM 01,'31' 02,&FEB 03,'31' 04,'30'\n                                   05,'31' 06,'30' 07,'32' 08,'31'\n                                   09,'30' 10,'31' 11,'30' 12,'31')\n                VER(&ED,NB,RANGE,01,&MONTHDAY)\n)END\n\n\nThe three parts of the input date (ED, EM, and EY are transferred\nto the compound field EDATE- If this field is non-blank, at least\none of the input fields has been defined- EY is verified as being\nnumeric (with leading zero)- EM is verified as being numeric\n(with leading zero) and in the range 01 through 12- The\nintermediate variable FEB is set initially to 28, should EY be a\nleap year, FEB is set to 29- The number o days on the month is\nset into MONTHDYA, ED is checked that it lies within the range 01\nthrough MONTHDAY-\n\n\n\nISPPREP\n\n\n1- Description\n\n\" Utility to pre-process (compile) ISPF panels-\n\n\n2- Pros\n\n\" Faster accessing panel, no interpreting or pre-processing is\n  needed\n\" Smaller in size\n\" Increased protection from someone modifying the panel\n\n\n3- Cons\n\n\" Need to have a separate PDS to save the source-\n\" One more step added in placing into production-\n\n\n4- Invoking Utility\n\n\" Entering ISPPREP on the ISPF Command line\n\" SELECT PGM(ISPPREP) PARM(parms--)\n\n\n5- Items of Interest\n\n\" A panel library may contain both pre-processed and\n  non-processed panels-\n\" No way to un-compile a pre-process ISPF panel- Must have source\n  code-\n\n\n\nSkeletons\n\n\n1- Skeleton Services\n\nFTOPEN  - Create an output file for file tailoring\nFTINCL  - Include a skeleton to control output\nFTCLOSE - Close out the file tailoring process\nFTERASE - Erase the created output file\n\n2- Two Types of statements\n\nA- Control Statements\n\" Those with a control character,\")\", in column 1 and immediately\n  followed by a control word- Generally, these are the statements\n  that inform the file tailoring process how to interpret the\n  contents of the skeleton-\n\nB- Data Statements\n\" All others, including those that begin with \")\" but are\n  followed by a blank- These are statements that contain the actual\n  data that is to appear in the output file, depending on the\n  conditions established by the control statements-\n\n3- Items of Interest\n\n\" The member of the file-tailoring library can have a maximum\n  record length of 255 bytes; the last 8 characters of the input\n  records are ignored-\n\" Continuation of a line is accomplished by inserting a special\n  character (\"?\" by default) in the column preceding the last eight\n  characters, sequence field-\n\" In the event that an output record generated from the skeleton\n  exceeds the specified length of the output file, the file\n  tailoring process terminates immediately-\n\" When using quotes, they must be single quotes-\n\" Can not be editing the skeleton and executing a REXX that\n  \"FTINCL\" the same skeleton- An ENQ error will occur-\n\n4- Items of Interest (Cont-)\n\n\" Variables must start with & character and be 1-8 characters in length-\n\" Cannot use REXX arrays-\n\" Large file tailoring may require you to increase your TSO REGION size-\n\" The FTOPEN without the TEMP parameter requires that the ISPFILE\n  be allocated; even when the TBCLOSE uses a different file- That\n  is a dummy allocation always must have been made for ISPFILE-\n\" File tailoring which has been opened with the TEMP parameter\n  cannot be stored as a permanent member-\n\" FTINCL invokes the FTOPEN service (with TEMP parameter) if file\n  tailoring services have not been opened-\n\" The tabbing to a non-existent tab stop causes a run-time error-\n\" A period delimits a variable name; this delimiter is only\n  required when a variable name is immediately followed by a\n  literal (either alphanumeric or numeric), e-g- &ALPHA-KOSS or\n  &ALPHA-2\n\" The less than (\"<\"), break(\"|\"), and greater than (\">\") define\n  a conditional substitution string- For example <&ALPHA|HELP> will\n  check the contents of variable ALPHA, if it is null, the\n  alphanumeric literal HELP is to be substituted in it's place-\n\n\n5- Examples\n\nISPFSKE1 - File tailoring to a temporary file\nISPFSKE2 - File tailoring to a permanent file\nISPFSKE3 - File tailoring using tables and saving to permanent file\n\n\n\nControl Statements\n\n\n1- )DEFAULT\n\n\" Establish control characters-\n    )  - The control statement identifier\n    &  - The variable symbol identifier\n    ?  - The continuation character\n    !  - The tab character\n    <  - The left character for conditional strings\n    |  - The center character for conditional strings\n    >  - The right character for conditional strings\n\" )DEFAULT ABCDEF\n\n\n2- )TB\n\n\" Establish tab positions\n\" )TB 2 8 19 25 30\n\n\n3- )CM\n\n\" Comment line\n\" )CM any comments you desire\n\n\n4- )BLANK <nn>\n\n\" Generate blank lines\n\" Real Blank lines in the input skeleton definition are not\n  passed to the output record and such the )BLANK statement is\n  required to generate blank lines-\n\" )BLANK 10\n\n\n5- )SET\n\n\" Set values in variables\n\" )SET LINES = &LINES + 5\n\" The value may be an arithmetic expression-\n\" The only operations allowed are \"+\" or \"-\"-\n\n6- )IM  <skelton>  [NT]  [OPT]\n\n\" Imbed another skeleton-\n\" Similar to a copybook in a COBOL program-\n\" )IM SKEL2\n\" The NT parameter indicates not to under go any file tailoring,\n  just copy contents into output file as is-\n\" The OPT parameter indicates the skeleton is optional- If the\n  skeleton is not found do not cause an error condition-\n\" A maximum of 3 levels of embedding is allowed-\n\n\n7- )SEL\n\n\" Conditional selection of data (IF/THEN)\n\" )SEL &LINES > 50\n-- Lines --\n)ENDSEL\n\" Operators\nNL, LT, LE, EQ, NE, GE, GT, NG\n=>, <, <=, =, \\=, >=, >, \\>\n\" May contain up to 8 comparisons joined by logical operators-\n\" Parenthesis is not allowed-\n\" Nested )SEL statements are allowed-\n  They are equivalent to \"AND\" logic-\n\" A maximum of 8 levels of nesting is allowed-\n\" Complex statements should, where possible, be avoided-\n  They are difficult to understand and errors can arise\n  inadvertently-\n\n\n8- )ENDSEL\n\n\" End conditional selection\n\" )SEL &LINES > 50\n-- Lines --\n)ENDSEL\n\n\n9- )DOT\n\n\" DO-LOOP for a table\n\" )DOT &TABLE1\n!&var1 !&var2 !&var3\n)ENDOT\n\" A DOT-group can include further DOT-groups-\n  However, the same table may not be used-\n  A maximum of 4 levels of nesting is allowed-\n\n\n10- )ENDDOT\n\n\" End a DO-LOOP for a table\n\" )DOT &TABLE1\n!&var1 !&var2 !&var3\n)ENDOT\n\n\n\nTable Services\n\n\n1- Tables\n\n\" Temporary\n\" Permanent\n\n\n2- Two types of Tables\n\n\" Keyed, accessed by key value\n\" Non-Keyed, accessed by Row Number\n\n\n3- DD Names\n\n\" ISPTLIB  - Input\n\" ISPTABL - Output\n\n\n4- Use of Tables\n\n\" Directly processed using table services\n\" Display using the TBDISPL service (MODEL)\n\" Data input for file tailoring services (DOT-ENDDOT)\n\n\n5- Two forms of table operations\n\n\" Operations involving the table as a whole\n\" Row operations\n\n\n\nTable Commands\n\n\n1- Table Services\n\nTBCREATE - Create a table\nTBOPEN   - Open a table for processing\nTBSORT   - Sort a table\nTBQUERY  - Query information about a table\nTBSTATS  - Obtain statistical data on the table\nTBSAVE   - File a copy of the table and continue\nTBCLOSE  - Close a table and disconnect it from use\nTBEND    - End processing of a table without saving\nTBERASE  - Remove a table from the system (DELETE)\n\n\n2- Single Row Operations\n\nTBADD    - Add a row to a table\nTBDELETE - Delete a row from a table\nTBEXIST  - Check existence of a particular key\nTBGET    - Retrieve a row in a table\nTBMOD    - Modify a row in a table\nTBPUT    - Store a row in a table\nTBSARG   - Set search arguments for a table scan or display\nTBSCAN   - Search for row that matches search argument\nTBVCLEAR - Clear table variables to null\n\n\n3- Row Pointer Operations\n\nTBTOP    - Point to top of table (row 0)\nTBSKIP   - Skip to the row following the current\nTBBOTTOM - Point to bottom of table (last row)\n\n1- TBADD\n\" For keyed tables, the table is searched to ensure that the key\n  is unique-\n\n2- TBCLOSE\n\" Deleted the main storage copy of the table-\n\" If the function (REXX program) using temporary output tables\n  terminates without closing the table, a re-invocation of this\n  function uses table in main storage- This can lead to duplicate\n  rows, etc-\n\n3- TBDISPL\n\" Used to display and modify rows of table- A more dynamic data\n  entry panel-\n\" Upon return from the TBDISPL call, the 4 character function\n  pool variable ZTDSELS will indicate the number of rows selected-\n  You will be placed automatically at the first row, while all the\n  others will remain pending- As you finish processing the first\n  selected row and wish to proceed to the next pending row, you\n  simply invoke a TBDISPL with no other parameters except the table\n  name- You should repeat this process until &ZTDSELS is\n  decremented down to 1, indicating that you are processing the\n  last row selected-\n\" If by chance you need to perform another TBDISPL or just a\n  DISPLAY, any pending rows will be ignored and &ZTDSELS will be\n  reset- To prevent this you should invoke \"CONTROL DISPLAY SAVE\"\n  (before) and a CONTROL DISPLAY RESTORE (after), so that your\n  environment will be preserved for correct processing-\n\" A table display panel is subject to certain constraints:\n\u00f3 A table display panel must have a )MODEL section which defines\n  the display from a single row, the table name is specified as a\n  parameter to the TBDSIPL service- The MODEL section may contain\n  up to 8 lines-\n\u00f3 A table display panel should have a command field in the panel-\n\u00f3 A table display panel should have an input field containing the\n  scroll amount as the second input field containing the scroll\n  amount as the second input field in the panel- This field must be\n  at least 4 characters in length-\n\" The information that is displayed is not restricted to what can\n  fit on a single screen, but may be scrolled vertically-\n\" Variables in the )MODEL line can come from either or both the\n  table and the variable pools; the table variable has priority\n  over the pool variables-\n\" If no panel name is specified, the current (TBDISPL) panel is\n  redisplayed\n\" Redisplay takes one of two forms, depending on whether\n  selections are pending- If selections are pending, the data for\n  the selected row are returned in the corresponding function pool\n  variables and no physical display takes place- If no selections\n  are pending, no data is retuned but any outstanding scroll\n  request is processed and a physical display takes place-\n\n4- TBOPEN\n\" The simplest means of determining whether a table is present is\n  to use the TBOPEN services and test its return code (0=table\n  present, 8=table not present-\n\n5- TBSARG/TBSCAN\n\" When TBSARG is used in a loop, care must be taken to ensure\n  that the search argument values contain the true comparand and\n  not those read from the last table row-\n\" Also, those variables not being used should be set to null\n  using the TBVCLEAR service prior to invoking the TBSARG/TBNSCAN\n  service-\n\n6- TBSAVE\n\" Should be regularly used during long running applications to\n  maintain an up to date permanent copy of the table as this\n  facilitates recovery should the computer system fail-\n\n7- TBSORT\n\" A sorted table (even an empty table) is maintained in this\n  specified sequence, provided all subsequent requests effecting\n  the position of rows (TBADD, etc-) specify the ORDER parameter-\n\n8- TBSTATS\n\" The table need not be open to obtain statistical information-\n\n\n\nTBDISPL Variables\n\n\nThe bracketed entry that follows each description has the form:\n[length, type, pool], although some entries are omitted- If the\ntype is omitted, it is read-only\n\n\nZTDADD    More rows needed to satisfy scroll request\n          (YES|NO) [3, out, func]\n\nZTDAMT    Number of rows needed to satisfy scroll [3, out, func]\n\nSTDLROWS  Number of rows in the logical table [6, in, func]\n\nZTDLTOP   Map current top row in physical table to its position\n          in logical table [6, in, func]\n\nZTDMARK   User-defined bottom-of-data text [in]\n\nZTDMSG    User-defined message-id for top of table [8, in]\n\nZTDRET    [8, in, func]\n\nZTDROWS   Number of displayed table rows [6, out, func]\n\nZTDSCRP   CRP of top row to be displayed after scroll [6, i/o, func]\n\nZTDSELS   Number of selected table rows [4, out, func]\n\nZTDSIZE   Size of scrollable section [4, out, func]\n\nZTDSRID   Row-id of the row pointed to by ZTDSCRP [6, out, func]\n\nZTDTOP    Row number (CRP) of top row displayed [6, out, func]\n\n\n1- Items of Interest\n\n\" The table structure (Temp or Perm) is determined when the table\n  is created and can only be changed by recreating the table-\n\" The input library definition (ISPTLIB) may specify a\n  concatenation of libraries, where as the output library\n  definition (ISPTABL) may only specify a single library-\n\" ISPTABLE is not required for temporary files-\n\" Although two separate library definitions are required (ISPTLIB\n  and ISPTABL), it is important that these refer to the same\n  physical library- Should this not be the case, then the table\n  being updated is not the input table (this is a common cause of\n  error)-\n\" For reasons of data consistency a table which is used for\n  output can only be used (opened) by one user- The mechanism of\n  ENQ (lock) and DEQ (unlock) is used to control table access-\n  There is no restriction of the number of users for tables that\n  are opened for input (read)-\n\" Services which use the output table library can also specify a\n  file name other than ISPTABL\n\" All table operations, except TBCREATE, TBERASE, TBOPEN and\n  TBSTATS, require that the table be open-\n\" Row operations, except TBADD, either positions the current row\n  pointer (CRP) at a specific row or process the row where the CRP\n  is positioned-\n\" Note each row may be assigned additional variables, called\n  extension variables-\n\" Keyed tables are accessed by key value, non-keyed tables are\n  accessed by row number-\n\" The table may be shared between logical screens when the user\n  is in split screen mode- The table may only be created from one\n  logical screen-\n\" It is important to explicitly check the line operator\n  (U-update, D-delete, etc--)-\n  There is no means of explicitly un-selecting a line in the\n  TBDISPL display-\n  A line remains selected once it has been selected-\n  If the selection code is invalid it remains selected once it\n  has been selected-\n  If the selection code is invalid it can only be \"de-selected\"\n  by overwriting the selection code with a blank- The selection,\n  however, is passed to the processing routine-\n  It is the responsibility of the processing routine-\n  It is the responsibility of the processing routine to ignore\n  such \"non-selections\"-\n\n\n2- Examples\n\nTABEL01  - Create/display a table using data from the\n           External Data Queue-\nTABLE02  - Create/display a table using data from an array\nTABLE03  - Display/modify  a keyed table\nTABLE04  - Use a table and skeleton for SYSIN cards for an IEBCOPY-\nTABLE05  - Read two files into an array then place in table and use\n           skeletons to create a report-\n\n\nBATCH\n\n1- Items of Interest\n\n\" When an ISPF application runs in batch, any panel displays must\n  either be suppressed with \"CONTROL NONDISPLAY END) or by setting\n  the -RESP control variable or the panel command field to END\n  within the panel-\n\n\" Any input that normally would have been entered on the\n  displayed panel must be made by setting the appropriate dialog\n  variables\n\n\" To set the Return Code:\n    ADDRESS ISPEXEC\n    ZISPFRC = 8\n    \"VPUT (ZISPFRC)\"\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PARSE": {"ttr": 8454, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08%\\x00\\x95\\x00\\x95\\x00\\x00\\xe3\\xc5\\xe7\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:25:26", "lines": 149, "newlines": 149, "modlines": 0, "user": "TEXT"}, "text": "                          REXX - PARSE\n\n\n\n1. Word Parsing\n\nPARSE  VALUE  'This is a sentence.'   WITH  W1  W2  W3\n\nW1 =  ________________________________\n\nW2 =  ________________________________\n\nW3 =  ________________________________\n\n\n2. Word Parsing\n\nPARSE  VALUE  'This is a sentence.'   WITH  W1  W2  W3  W4  W5  W6\n\nW1 = ________________________________\n\nW2 =  ________________________________\n\nW3 =  ________________________________\n\nW4 =  ________________________________\n\nW5 =  ________________________________\n\nW6 =  ________________________________\n\n\n3. Word Parsing with a Period\n\nPARSE  VALUE  'This is a sentence.'   WITH  W1  .  W2\n\nW1 =  ________________________________\n\nW2 =  ________________________________\n\n\n\n\n\n\n4. Word Parsing with a Period\n\nPARSE  VALUE  'This is a sentence.'   WITH  W1  W2  .\n\nW1 = ________________________________\n\nW2 =  ________________________________\n\n\n5. Literal String in Template\n\nPARSE  VALUE  \"To be, or not to be?\"  WITH  W1 ',' W2\n\n W1 =  ________________________________\n\n W2 =  ________________________________\n\n\n6. Literal String in Template\n\nPARSE  VALUE  'To be, or not to be?\"  WITH  W1  ','  W2  W3  W4\n\n W1 =  ________________________________\n\n W2 =  ________________________________\n\n W3 =  ________________________________\n\n W4 =  ________________________________\n\n\n7. Variable Name in Parenthesis\n\nC = \",\"\nPARSE  VALUE  'To be, or not to be?'  WITH  W1  (C1)  W2  W3 W4\n\n W1 =  ________________________________\n\n W2 =  ________________________________\n\n W3 =  ________________________________\n\n W4 =  ________________________________\n\n\n8. Numeric Positional Patterning\n\nPARSE  VALUE  'Flying pigs have wings'  WITH  W1  5  W2\n\n W1 =  ________________________________\n\n W2 =  ________________________________\n\n\n9. Numerical Positional Patterning\n\nPARSE  VALUE  'Flying pigs have wings'  WITH  W1  5  W2  10  W3\n\n W1 =  ________________________________\n\n W2 =  ________________________________\n\n W3 =  ________________________________\n\n\n10. Relative Numeric Positional Patterning\n\nPARSE  VALUE  \"Fling pigs have wings'  WITH  W1  5 W2  +5  W3\n\n W1 =  ________________________________\n\n W2 =  ________________________________\n\n W3 =  ________________________________\n\n\n11. Relative Numeric Positional Patterning using Variables\n\nSTART = 5\nLENGTH = 5\nDATA = \"Flying pigs have wings\"\nPARSE  VAR  DATA  W1  =(START)  W2  +(LENGTH)  W3\n\n W1 =  ________________________________\n\n W2 =  ________________________________\n\n W3 =  ________________________________\n\n\n12. String and Positional Patterning\n\nINPUT = \"L/LOOK FOR/1 10\"\nPARSE  VAR  INPUT  VERB  2  DELIM  +1  STRING  (DELIM)  REST\n\nVERB =  ________________________________\n\nDELIM = ________________________________\n\nSTRING = ________________________________\n\nREST =  ________________________________\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSMAN": {"ttr": 8458, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x15T\\x04\\xb3\\x04\\xb3\\x00\\x00\\xe3\\xc5\\xe7\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T15:54:03", "lines": 1203, "newlines": 1203, "modlines": 0, "user": "TEXT"}, "text": "\n                              PDSMAN\n                                 &\n                              EZYEDIT\n\n\n\n                        (September 3, 2002)\n\n\n\n\n\n\nTable of Contents\n\n\n\nHistory ---------------------------------------------- 3\nIntroduction ----------------------------------------- 4\nStarted Task ----------------------------------------- 5\nMVS Commands ----------------------------------------- 6\nEzyedit ---------------------------------------------- 7\n   Invoke Facility------------------------------------ 8\n   Selection Panel ----------------------------------- 9\n   Options Menu ------------------------------------- 12\n   Dataset List Display ----------------------------- 17\n   Dataset Display Tailoring ------------------------ 20\n   Member List Display ------------------------------ 21\n   Member Display Tailoring ------------------------- 24\n   Command Shell ------------------------------------ 26\n   Title Maintenance -------------------------------- 29\n   User Command or CLIST Shared Variable Pool ------- 31\nFASTCOPY -------------------------------------------- 33\nLibrary Space Reuse Facility------------------------- 34\nLLA Extensions -------------------------------------- 36\n   JCL Example -------------------------------------- 37\nBatch Jobs ------------------------------------------ 38\n\n\n\n(Note.  I have not been able to capture the ISPF screens in\n        the TEXT version of this document.  You have to see\n        the WORD version in order to see the ISPF screens.)\n\n\n\nHistory\n\n\n\n\" 1979 - Created by Ian Cairns working for Software Design\n         Associates, Australia-\n\n\" Written in Assembler\n\n\" 1981 - Goal Systems bought the marketing rights-\n\n\" 1992 - Legent acquired Goal Systems-\n\n\" 1995 - Computer Associates purchased Legent-\n\n\" Computer Associates still owns the marketing rights, but\n  Software Design Associates owns the software-\n\n\" Both Software Design Associates and Computer Associates develop\n  and maintain PDSMAN-\n\n\n\n\n\n\nIntroduction\n\n\n\n1- EZYEDIT\n    \" Enhanced ISPF 3-4\n\n2- FASTCOPY\n    \" High-speed replacement for IEBCOPY with a lot of\n      enhancements\n\n3- Library Space Reuse\n    \" Provides a way to avoid nearly all PDS out-of-space\n      conditions by dynamically reusing the \"dead\" areas with in\n      the library-\n\n4- LLA/Extensions and Performance Options\n    \" Reduces DASD I/O and can improve overall system performance\n      by eliminating many of the directory searches performed for\n      PDS members- This is achieved either by assisting you in\n      using the IBM LLA facility to its fullest benefit or by using\n      the performance options included with PDSMAN\n\n5- Library Member Archiving\n    \" Free DASD resources by allowing you to identify, archive,\n      and purge inactive library members, based upon the date on\n      which they were last referenced-\n\n6- Library Member Recovery\n    \" Allows us to easily recover both the current and previous\n      versions of your library members when such recovery is\n      required-\n\n7- PDSMAN Auditing Facility\n    \" Allows us to better control and manage library resources-\n      This saves you time when developing new applications,\n      undergoing an audit, performing maintenance, or doing the\n      day-to day management of your libraries and also improves\n      both the security and integrity of your library data-\n\n8- PDSMAN Comparison\n    \" Allows us to better control changes in your library\n      environment by providing utilities to easily identify\n      libraries and members that have changed and what those\n      changes are-\n\n\n\n\n\nStarted Task\n\n\n\n    1- Started task\n\n        \" PDSMAN\n        \" LIB-SYS-STC-PROCLIB\n\n    2- Init Deck\n\n        \" PDSMINIT\n        \" LIB-SYS-STC-PARMLIB\n            \" Used to customize PDSMAN\n        \" All PDSMANs in the SYSPLEX use the same parm deck-\n\n    3- Communications File\n\n        \" PDSMMCPU   DD   DISP=SHR,DSN=LIB-SPP-PDSMAN-MCPU<site>\n          Where <site> is CHL, JAX, URP, DEV, etc-\n\n        \" Used to communicate LLA changes to other PDSMANs in the\n          sysplex-\n\n        \" This facility can be disabled by removing the DD card-\n\n\n    4- Items of Interest\n\n        \" If you have a STEPLIB in PDSMAN proc it will be in\n        \"TEST MODE\"- This means that anyone wanting to use it\n        must also use a \"STEPLIB\"-\n\n\n\n\nMVS Commands\n\n\n\nS PDSMAN                 Start PDSMAN\nP PDSMAN                 Stop PDSMAN\nF PDSMAN,STOP            Stop PDSMAN (Pulls his hooks out and resets SVC\n                         table)\n\nF PDSMAN,HELP            Display all modify commands\nF PDSMAN,STATUS          Display status of PDSMAN\n\nF PDSMAN,NEWRULE         Dynamically update configuration parm deck\nF PDSMAN,RELOAD\n\nF PDSMAN,XSYSLIB         List LLA libraries for which updates are\n                         communicated cross systems\nF PDSMAN,MCPUNET         Display the status of the cross-system\n                         communication\nF PDSMAN,HANDSHAKE       Verify cross-system communication\nF PDSMAN,STARTMCPU       Enable cross-system communication subtask\nF PDSMAN,STOPMCPU        Disable cross-system communication subtask\nF PDSMAN,NEWMCPU         Bounce the cross-system communication\n                         subtask\n\nF PDSMAN,SUSPEND         Lets SVC request go to IBM, not PDSMAN\nF PDSMAN,RESUME          Lets SVC request go back to PDSMAN\n\nF PDSMAN,DYNOFF=dsname   Suspend Dynamic BLDL processing\nF PDSMAN,DYNON=dsname    Resume Dynamic BLDL processing\nF PDSMAN,DYNRESET        Reset Dynamic BLDL processing\nF PDSMAN,RESET\n\nF LLA,QUERY              Displays all information on LLA datasets-\nF LLA,ADD=dsname         Add a library to LLA management-\nF LLA,REMOVE=dsname      Remove a library from LLA management-\nF LLA,FREEZE=dsname      Change LLA management mode for a PDS-\nF LLA,NOFREEZE=dsname    Change LLA management mode for a PDS-\nF LLA,UPDATE=dsname,     Selectively refresh a member in a PDS\n      MEMBER=mbrname\n\n\n\n\n\n\nEzyedit\n\n\n\n    \" Reduces screen switching\n\n    \" Maintains list of commonly used dataset names\n\n    \" Powerful pattern matching and command stacking facilities\n\n    \" More efficient use of TSO resources, better response time\n\n    \" Simple routing of output\n\n    \" Additional productivity tools\n\n\n\n\n\n\nInvoke Facility\n\n\n\n    From ISPF you can execute the below commands to invoke\n    Ezyedit/PDSMAN\n\n        ' =E\n\n        ' EZY\n\n        ' =S-PXP\n\n        ' PDSMAN\n\n        ' LISTA\n\n\n\n\n\n\nSelection Panel\n\n    (You have to see the DOC version of this file.)\n\n\n\n\n\n\n1- Selection Panel - Function Field\n\n\n(blank)  --------  Default is dataset or member list display\n B --------------- Browse\n D---------------- Delete\n E --------------- Edit\n F --------------- Find string\n J --------------- Submit job\n I --------------- Display VTOC info\n L --------------- Invoke member list\n O ----------------Ezyedit Option Panel\n P --------------- Print\n R --------------- Rename\n S --------------- Invoke member list\n T --------------- Issue TSO command\n U --------------- Update variable\n V --------------- View\n Z --------------- Compress PDS\n\n\n ALTERDIR -------- Update Directory Blocks\n CAT-------------- Catalog dataset\n CREATE ---------- Allocate a new DSN model from existing DSN\n DCF ------------- Invoke DCF/Script processing\n DSCB ------------ Display Dataset control block (DSCB1)\n EMPTY ----------- Empty PDS and release unused extents\n EMPTYO ---------- Empty PDS\n ERASE ----------- Delete DSN\n EXEC ------------ Execute CLIST/REXX\n LISTA ----------- Display TSO allocation\n LOAD ------------ Load dataset variables\n PDSMAN ---------- Invoke PDSMAN\n RECOVER --------- Un-delete members\n RELEASE --------- Free un-used space\n SAVE ------------ Save dataset variables\n SI -------------- Display system information\n SPACE ----------- Display available space on DASD volumes\n UCAT ------------ Uncatalog dataset\n VALIDATE -------- Verify PDS\n\n\nNote:  If you place the cursor on the FUNCTION Field and press PF1\n       (HELP), a panel will appear displaying all the \"Function\n       Commands\"- From there, detailed help can be obtained on\n       any of the commands by placing the cursor in front of the\n       command and pressing PF1 (HELP)-\n\n\n\n\n2- Selection Panel - DSN/Variable # Field\n\n\n    JCL-CNTL  -------------------- Personal DSN\n\n    'SYS1-PARMLIB' --------------  Fully qualified DSN\n\n    'SYS1-PARMLIB(PROG00)'-------- PDS(mbr)\n\n    'SYS1-PARMLIB'/SY0001 -------- Fully qual- DSN with Volser\n\n    'SYS1-PARMLIB(I??F*) --------- Member pattern\n\n    * ---------------------------- All datasets are to be displayed\n\n    LINKLIST, LPALIST, APFLIST, LLALIST ---  Keywords\n\n    PDSMINIT --------------------- Edit PDSMAN parm deck\n\n    F(SYSPROC) or F(ISP*) -------- DDname or pattern\n\n    LISTC or TSO LISTC ----------- TSO Command\n\n    @OUTAGE ---------------------- Saved dataset or member list\n\n\n\n\nOptions Menu\n\n\n    (You have to see the DOC version of this file.)\n\n\n\n\nFrom the Ezyedit Selection Panel type in \"O\" in the Function\nField- Also, you can type in \"O\" on the Command line of the\nDataset or Member list screen-\n\n\n\n\nOPTIONS - General\n\n\n\n\nOPTIONS - Dataset List\n\n\n\n\nOPTIONS - Member List\n\n\n\n\nOPTIONS - Print Table\n\n\n\n\n\nAfter inserting all printers, you'll need to place a question\nmark (?) in the PRINTER field of the \"Ezyedit Selection Panel\"-\nThis screen will then appear every time you request to print\nsomething- Allowing you to select a different printer-\n\n\n\nDataset List Display\n\n\n\n\n\n\n\n\n1- Dataset List - Primary Commands\n\n\n CATCHECK --------- Validate Catalog entries\n CONFIRM ---------- Confirmation Panel\n CONFIRMP --------- Print Confirmation Panel\n DIRUSAGE --------- Summarize directory usage by PDS\n FIND ------------- Find a dataset name or string\n FINDMEM ---------- Find a member in the datasets listed\n     (Example:  FMEM <member> ALL)\n HARDCOPY --------- Print current display\n IF --------------- Conditional dataset filter\n INCLUDE ---------- Include additional datasets\n LLASTATS---------- Display LLA usage statistics\n LLATRACE --------- Display LLA Trace table info\n LOCATE ----------- Locate the specified dataset/mbr\n NOVERIFY --------- Disable display of confirmation panel\n O ---------------- Esyedit Option Menu panel\n REFRESH ---------- Rebuild dataset/mbr list\n REPLACE ---------- Perform string scan/replace\n RESET ------------ Reset display and all options\n SAVE ------------- Save current dataset list as a PDS member\n SCAN ------------- Perform string scan\n SORT ------------- Sort the dataset/mbr list\n USAGE ------------ Summarize track usage\n VERIFY------------ Enable confirmation panel\n X ---------------- Exclude dataset/mbrs\n\n\nNote: If you place the cursor on the COMMAND Line and press PF1\n      (HELP), a panel will appear displaying all the \"Primary\n      Commands\"- From there, detailed help can be obtained on any of\n      the commands by placing the cursor in front of the command and\n      pressing PF1 (HELP)-\n\n\n\n2- Dataset List - Line Commands\n\n\n(blank) --------- Select dataset or member\n B -------------- Browse\n D--------------- Delete\n E -------------- Edit\n F -------------- Find string\n I -------------- Display VTOC info\n M -------------- Member list\n P -------------- Print\n R -------------- Rename\n S -------------- Select\n U -------------- Update variable\n V -------------- View\n Z -------------- Compress PDS\n / -------------- Position display to this dsn\n = -------------- Repeat previous line\n\n ALTERDIR ------- Update Directory Blocks\n CAT--------------Catalog dataset\n CREATE --------- Allocate a new DSN model from existing DSN\n DCF ------------ Invoke DCF/Script processing\n DSCB ----------- Display Dataset control block (DSCB1)\n EMPTY ---------- Empty PDS and release unused extents\n EMPTYO --------- Empty PDS\n ERASE ---------- Delete DSN\n LLAADD---------- Add dsn to LLA Management\n LLAREM --------- Remove dsn to LLA Management\n LLAFREZ -------- Chg LLA management to FREEZE mode\n LLANOFR -------- Chg LLA management to NOFREEZE mode\n LLAREF --------- Refresh LLA entries\n LLACHECK ------- Verify LLA is synced  with PDS directory\n PDSMAN --------- Invoke PDSMAN\n PM ------------- Print Member List\n RECOVER -------- Un-delete members\n UCAT ----------- Uncatalog dataset\n VALIDATE ------- Verify PDS\n\n\nNote: If you place the cursor in the area where you would type\n      the line command and press PF1 (HELP), a panel will appear\n      displaying all the \"Line Commands\"- From there, detailed\n      help can be obtained on any of the commands by placing the\n      cursor in front of the command and pressing PF1 (HELP)-\n\n\n\nDataset Display Tailoring\n\n\n1- IF <fieldname> operator <value>\n    \" The IF command filters the display based on the contents of\n      any field name or column header-\n    \" Operators are EQ, NE, LT, GT, LE, GE- If an operator is\n      omitted, then EQ is assumed-\n    \" The value can contain an asterisk \"*\", for wildcard-\n    \" Example:  IF DSORG EQ PO\n\n2- INCLUDE <dataset name, keyword or pattern> [volume]\n    \" Used to include additional datasets-\n    \" The dataset can contain the wildcard character, \"*\"-\n    \" Un-cataloged datasets can be included in the display by\n      including a volume-\n    \" Examples:  INCLUDE SYS1-*\n     INCLUDE LINKLIST\n     INCLUDE SYS1-* SYSRS1\n\n3- X <dataset or pattern | ABOVE | BELOW>\n    \" Allows for easy removal of entries-\n    \" X ABOVE excludes all datasets above the dataset currently\n      being displayed-\n    \" X BELOW excludes all datasets below the dataset currently\n      being displayed-\n    \" Example:  X SYS1-*\n\n4- SORT [field] [sequence]\n    \" Allow you to re-order the dataset list by field name or\n      column header-\n    \" Sort sequence can be specified as A - Ascending or D -\n      Descending\n    \" Example:  SORT VOL D\n\n5- REFRESH [dataset , keyword, or pattern]\n    \" Rebuilds the dataset list without having to exit to the\n      Selection Panel\n    \" Example:  REF SYS1-*\n\n6- SAVE [member name]\n    \" Saves the contents of the current dataset list as a library\n      member-\n    \" The output dataset must be a PDS and have LRECL=80-\n    \" A panel will appear displaying the member name,\n      description, and dataset on were to save the dataset list-\n    \" Dataset lists can be reloaded by specifying the member name\n      prefixed by an @ sign in the DSN/variable # field on the\n      Selection Panel or as an object on the REFRESH or INCLUDE\n      dataset list primary command-\n\n\nMember List Display\n\n\n\n\n\n\n1- Member List - Primary Commands\n\n\n CONFIRM ----- Confirmation Panel\n CONFIRMP ---- Print Confirmation Panel\n FIND -------- Find a dataset name or string\n FOLD -------- Cause lower case letters to be translated on printing\n HARDCOPY ---- Print current display\n IF ---------- Conditional dataset filter\n INCLUDE ----- Include additional datasets\n LOCATE ------ Locate the specified dataset/mbr\n NOFOLD ------ Reset the FOLD option\n NOVERIFY ---- Disable display of confirmation panel\n O ----------- Esyedit Option Menu panel\n OUTPUT ------ Save current member list as a PDS member\nPACKINFO------ Identify member that are ISPF PACKED format\n REFRESH ----- Rebuild member list\n REPLACE ----- Perform string scan/replace\n RESET ------- Reset display and all options\n SCAN -------- Perform string scan\n SORT -------- Sort the dataset/mbr list\n TAG --------- Process logical groups of members\n USAGE ------- Display dataset space utilization\n VERIFY------- Enable confirmation panel\n X ----------- Exclude dataset/mbrs\n\n\nNote: If you place the cursor on the COMMAND Line and press PF1\n      (HELP), a panel will appear displaying all the \"Primary\n      Commands\"- From there, detailed help can be obtained on any\n      of the commands by placing the cursor in front of the\n      command and pressing PF1 (HELP)-\n\n\n\n\n2- Member List - Line Commands\n\n\n (blank)  --------- Select dataset or member\n B ---------------- Browse\n C ---------------- Copy\n D ---------------- Delete\n E ---------------- Edit\n J ---------------- Job Submit\n M ---------------- Member list\n P ---------------- Print\n R ---------------- Rename\n S ---------------- Select\n T ---------------- Tag or Untag\n U ---------------- Undelete a non-load module member\n X ---------------- Exclude\n V ---------------- View\n / ---------------- Position display to this dsn\n = ---------------- Repeat previous line\n\n COMPARE ---------- Perform compare function\n DCF -------------- Invoke DCF/Script processing\n DIFF ------------- Perform difference function\n DIR -------------- Display formatted directory entry\n EXEC ------------- Execute a user CLIST/REXX\n IDR -------------- List load module IDR data\n LLAREF ----------- Refresh LLA entries\n MAP -------------- Map a load module\n PACK ------------- PACK a member\n PDSMAN ----------- Invoke PDSMAN\n SUM -------------- List load module summary data\n TITLE ------------ Display/update Title information\n UNPACK ----------- UNPACK a member\n\n\nNote: If you place the cursor in the area where you would type\n      the line command and press PF1 (HELP), a panel will appear\n      displaying all the \"Line Commands\"- From there, detailed\n      help can be obtained on any of the commands by placing the\n      cursor in front of the command and pressing PF1 (HELP)-\n\n\n Member Display Tailoring\n\n\n1- IF <fieldname> operator <value>\n      \" The IF command filters the display based on the contents\n        of any field name or column header-\n      \" Operators are EQ, NE, LT, GT, LE, GE- If an operator is\n        omitted, then EQ is assumed-\n      \" The value can contain an asterisk \"*\", for wildcard-\n      \" Following keywords can be specified for the IF command:\n   AUTH   Display authorized load library members (AC=1)\n   ALIAS  Display alias members\n   TODAY  Display members that have been updated in the last 24 hours\n   WEEK   Display members that have been updated in the last 7 days\n   MONTH  Display members that have been updated in the last 30 days\n   YEAR   Display members that have been updated in the last year\n   MINUS  Display previous member versions (for example MBR (-1))\n      \" Examples:  IF IDENT EQ S915460\n                   IF TODAY\n\n2- INCLUDE <member name or pattern>\n      \" Used to include additional members-\n      \" The member name can contain the wildcard character-\n      \" Examples:  INCLUDE $CHK1\n                   INCLUDE $VER*\n\n3- X <member name  or pattern | ABOVE | BELOW>\n      \" Allows for easy removal of entries-\n      \" X ABOVE excludes all members above the dataset currently\n        be displayed-\n      \" X BELOW excludes all members below the dataset currently\n        be displayed-\n      \" Example:  X IEB*\n\n4- SORT [field] [sequence]\n      \" Allow you to re-order the member list by field name or\n        column header-\n      \" Sort sequence can be specified as A - Ascending or D -\n        Descending\n      \" Example:  SORT CHANGED D\n\n5- REFRESH [member or pattern]\n      \" Rebuilds the member list without having to exit the\n        member list panel-\n      \" Example:  REF ABC*\n\n6- RESET\n      \" Re-displays all members in the PDS-\n      \" The command re-reads the directory for the latest members\n        and statistics\n\n7- SAVE [member name]\n      \" Saves the contents of the current member list as a\n        library member-\n      \" The output dataset must be a PDS and have LRECL=80-\n      \" A panel will appear displaying the member name,\n        description, and dataset on were to save the member list-\n      \" Member lists can be reloaded by specifying the member\n        name prefixed by an @ sign in the DSN/variable # field on\n        the Selection Panel or as an object on the REFRESH or\n        INCLUDE member list primary command-\n\n8- TAG <command>\n      \" Allow unrelated members to be processed as a logical group-\n      \" The following are valid TAG select commands\n          ALL  Tag all members in the current member list-\n          RES  Reset (untag) all currently tagged members-\n          ONLY Exclude all members that are not tagged from the\n               member list\n          MINUS Tag all previous member versions- For example\n               MBR(-1) TOTAL Display the total records or kilobytes,\n               depending on the\n          DSORG of all currently tagged members-\n      \" TAG processing can also be performed conditionally, where\n        members are tagged based on the contents of another field-\n        Format for conditional tag processing is\n          TAG <fieldname> <operator> <value>\n      \" Examples:\n          Tag all members beginning with ABC*\n           TAG ABC*\n          Tag all members and copy them to another dataset\n           TAG ALL; TAG C\n          Tag all members starting with the character A, delete\n          the members and do not display the delete confirmation\n          panel-\n            TAG A*; TAG D NOVERIFY\n          Tag all members that have been updated in the past 24\n          hours and copy them to another dataset-\n            TAG TODAY; TAG C\n          Tag all members that have been updated by userid S915460\n          and then delete them-\n            TAG ID EQ S915460; TAG D\n          Tag all members that have not been modified since\n          91/01/01 and copy them to another dataset\n            TAG CHANGED LT 91/01/01; TAG C\n\n\n\n\nEZYEDIT Command Shell\n\n\nAlternative to ISPF command shell (ISPF 6) to invoke TSO\ncommands, CLISTS, REXXs and ISPEXEC functions- To invoke the\nEzyedit Command Shell type in TSO ?  on the ISPF primary command\nline, you do not have to be in Ezyedit or PDSMAN to use this\nfeature-\n\nThe Ezyedit Command Shell Display is a powerful, easy-to-use\nplatform for executing TSO commands, CLISTs, or REXX execs- The\ndisplay remembers the most recent commands you have executed and\nallows you to define and save your own commands- You can enter\ncommands to be executed directly on the display- You can also,\nexecute any of the saved commands by entry number, label, or by\nsimply positioning the cursor over the desired entry-\n\n\n1- Primary Command Area\n\n\" Extends for three lines to allow for long commands or multiple\n  commands separated by the command delimiter character-\n\n\n2- Temporary Command Area\n\n\" Ezyedit Command Shell saves the eight most recently executed\n  unique commands in a push-down list called the Temporary Command\n  area-\n\" As new commands are executed, they are added to the top of the\n  list and the oldest entry is dropped-\n\n\n3- Permanent Command Area\n\n\" Provides an area where you can save your own commands,\n  including those you execute frequently or commands with long or\n  complex syntax-\n\" Can assign your own command labels to the entries to make it\n  easier to remember- Labels can be up to 16 characters in length\n  and must begin with an alphabetic character- They must start in\n  column 1 and should be immediately followed by the label\n  delimiter character, a colon \":\"- You should not choose names\n  that are actual ISPF Primary Commands-\n\n\n4- Other Items of Interest\n\n\" When multiple commands are present, they are executed in order\n  from left to right\n\" Maximum length of saved command is 252 characters\n\" Saved commands are automatically converted to upper case\n\n\n\n\n5- Special Characters\n\n?   <label | nn>   Change a command before executing\n&   <label | nn>   Repeat command-  Execute command and retain in on\n                   primary command line-\n*-  <label | nn>   Trap and browse the output from TSO commands\n:                  Label character\n\\                  Command delimiter character\n/                  Cursor data character\n\n\n6- SET Statement\n\n SET PERMCOUNT nnnn Increase no of Permanent slots- Cannot reduce\n                    slots-\n SET CMDLBL x       Change label character, default is \":\"\n SET RECALL x       Change recall character, default is ?\n SET REPEAT x       Change repeat character, default is &\n SET CMDDEL x       Change command delimiter character, default is \\\n SET CMDDEL ISPF    Set command delimiter equal to that used by ISPF\n SET CMDTRAP x      Change trap and browse character, default is -\n SET CSRDATA x      Change cursor data character, default is /\n QUERY CHARACTERS   Display current settings\n SET TRAPDD ddname  Trap into a permanent file\n SET TRAP ON | OFF  Trap command output and place in permanent file\n SET TRAP           Determine status of output trapping and ddname used\n QUERY TRAPPDD      Determine status of output trapping and ddname used\n\n\n\n\nTITLE Maintenance\n\n\n\n1- Invoke PDSMAN\n2- Select option 11 - Member Title Maintenance\n3- Input the PDS name and select option \"1\" to Allocate the title\n   member-\n4- Specify the number of title descriptions to contain in the\n   $$$TITLE member\n\n\n\nAfter creating the $$$TITLE member you may want to set your\nmember list default panel to TITLE- You can accomplish this by\ngoing to the Options Menu and selecting \"Member List Options\"-\nThen change the DEFAULT DISPLAY to TITLE-\n\nUser Command or\nCLIST Shared Variable Pool\n\n\n\n\n1- Shared Variable Pool - Output\n\nDSN      Dataset name specified on the Selection Panel (44)\nVOL      Volume serial specified on the Selection Panel (6)\nDSN2     Fully qualified dataset name, quotes removed and TSO\n         User prefix inserted if required (44)\nVOL2     Volume serial on which dataset resides (6)\nDEVICE   Device type (7)\nDSORG    Dataset organization (4)\nLIBTYPE  Library type - LIBRARY if PDSE, or PDS (7)\nRECFM    Dataset record format (6)\nLRECL    Dataset logical record length (5)\nBLKSZ    Dataset blocksize (5)\nSPCTYPE  Space allocation type (5)\n         (CYLINDER, TRACK, BLOCK, MEGABYTE, KILOBYTE, or BYTES)\nSPCPRIM  Primary space allocation (5)\nSPCSEC   Secondary space allocation (5)\nSPCALOC  Space allocated (in allocation units) (5)\nSPCUSED  Space used        (in allocation units) (5)\nSPCPCNT  Space percentage utilized (5)\nSPCBTRK  Number of blocks per track (5)\nTRKALOC  Space allocated in tracks (5)\nTRKUSED  Spaces used in tracks (5)\nEXTALOC  Extents allocated (5)\nEXT USED Extents used (5)\nDIRALOC  Directory blocks allocated, for DSORG=PO (5)\nDIRUSED  Directory blocks used, for DSORG=PO (5)\nDIRMEM   Number of members, for DSORG=PO (5)\nCDATE    Creation date (10)\nEDATE    Expiration date (10)\nRDATE    Date last referenced (10)\nCONFIRM  Display confirmation panel - Y/N (1)\n\n\n\n2- Shared Variable Pool - Output (cont-)\n\nCATFLAG Catalog status (1)\n    0 - dataset is cataloged on a volume other than VOL2\n    2 - dataset is cataloged on a volume other than VOL2\n    6 - dataset is not cataloged\n    8 - dataset is not available on volume VOL2\n        dataset is either a) deleted b) migrated c) non-dasd dataset\nEZYPUPD Update Project-Group-Type option - Y/N or blank if option\n        has not been specified (1)\nPRJ1    Project field (8)\nLIB1    Group field (8)\nTYPE1   Type field (8)\n\n\n3- Member List - Shared Variable Pool - Output\n\nThe following additional variables are available in the SHARED\nvariable pool, if the user command has been invoked from Member\nList processing-\n\nMEMBER  Current member name (8)\nTAG     Tag flag either \"T\" or blank (1)\nVMSG    Contents of the Rename field\n\n\n4- Shared Variable Pool - Update\n\nA user command or CLIST can set the following SHARED pool\nvariables in order to communicate with Dataset List processing:\n\nNEWDSN  Update dataset name to appear in list (44)\nMSG  Status message to appear in list (16)\nREFRESH Refresh dataset information - Y/N (1)\n\n\n\n\n\n\nFASTCOPY\n\n\n1- DDNAMES\n//FCOPYOFF DD DUMMY----Disable Fastcopy-\n//FCOPYON  DD DUMMY---- Enable  Fastcopy (default)-\n\n\n2- SYSIN Cards\n\n  COPY OUTDD=,INDD=,LIST=[YES|NO],RESET,COPYALIAS\n  MOVE OUTDD=,OUTDD=,LIST=[YES|NO],RESET,COPYALIAS\n  RESET\n    Will empty PDS, release secondary extents, and clone DCB info\n  COPYALIAS\n    Copy/move all alias\n\nCOPYMOD OUTDD=,INDD=,MAXBLK=,MINBLK=,COPYALIAS,LIST=   MAXBLK\n  Block size with which records are written out-\n  Specify a multiple of 1024K-\n  Default value is the output BLKSIZE-\n  If MAXBLK exceeds the output BLKSIZE, the output BLKSIZE is\n  increased-\n\nMINBLK\n  Specify a multiple of 1024K-\n  Minimum BLKSIZE with which records are written out-\n\nCOMPRESS OUTDD=\nVALIDATE OUTDD=\nALTERDIR OUTDD=,BLOCKS=[+|-]nnnn\n\nEMPTY    OUTDD=\nWill delete all members and release secondary extents\nEMPTYO OUTDD=\nDelete all member and does NOT release secondary space-\nRELEASE OUTDD=\n Will free any unused secondary extents-\n\nEDITDIR OUTDD=\nDELETE MEMBER=\nRETAIN MEMBER=\nRENAME MEMBER=\n\n  RECOVER OUTDD=\nUndelete members in a PDS-  Member names will be ZZZ0001, etc-\n\n\n\n\nLibrary Space Reuse Facility\n\n\n\n\" Assists in preventing X-37 abends- Prevents frequent\n  compressing of PDS datasets\n\n\" A space map member, $$$SPACE, is created by PDSMAN after a\n  library has been compressed by IEBCOPY or if IEBCOPY is used to\n  copy members into an empty library for which Library Space Reuse\n  has been specified-\n\n\" The creation of the space map member, $$$SPACE, requires that\n  there be 2 free tracks available-\n\n\" By design, the space map member appears to be an empty member\n  and is invalidated if it is moved, such as occurs when it is\n  copied to another library or when the library is migrated by HSM-\n  PDSMAN recognizes this situation the next time the library is\n  updated and dynamically re-creates the space map in these\n  circumstances- This process, which should be regarded as normal,\n  is accompanied by messages PDSM021-11 and PDSM021-12 indicating\n  the attempted and successful space map recreation\n\n\" If the size of the member is not altered when the member is\n  updated, Library Space Reuse normally replaces the member in its\n  original location- If the member is altered, the space vacated by\n  the replaced member is recorded but is useable only if no members\n  follow in the same track (otherwise they would be erased by the\n  formatting write operation)-\n\n\" Each time the library is compressed, the space map member is\n  deleted by PDSMAN before the library is (re) created after the\n  compression-\n\n\" When IEBCOPY is used to copy a group of members into an\n  non-empty library for which space reuse is effective, space\n  reuse is performed after all members have been processed, not\n  after each individual member is copied-\n\n\" Some systems such as IMS, CICS, and LLA may maintain BLDL\n  entries in storage for extended periods of time- In these\n  situations, space belonging to a replaced member should not be\n  reused while there is any possibility that the old version of the\n  replaced member may still be accessed, either on the system\n  performing the update or on a system with the library is shared-\n\n\" In libraries for which space reuse is effective, all alias\n  names must be deleted from the library or replaced when the\n  owning member is deleted or replaced- Failure to do so results in\n  the alias entry pointing to a free space area that may be reused\n  by a different member at a later time-\n\n\" When PDSMAN is not active on all systems in a multiple system\n  environment, Library Space Reuse is effective only for updates\n  performed by the system(s) on which PDSMAN is active- Members\n  updated by the system(s) without PDSMAN are processed normally,\n  with the areas vacated by replaced or deleted members marked as\n  UNRECORDED- These unrecorded areas are not available for space\n  reuse- The net effect is that Library Space Reuse, while still\n  operational, is somewhat less effective- Compressing the library\n  removes the unrecorded areas-\n\n\n\nLLA Extensions\n\n\n\n1- LLA Auto Update\n\n\" Eliminates the need for manual LLA intervention and the problem\n  of accessing out-of- date members by updating LLA at the time the\n  members update takes place\n\n\n2- Extended LLA Commands\n\n\n\" Libraries can be added or removed from LLA, updated, or have\n  their management mode changed directly from the console using new\n  LLA commands such as F LLA,ADD DSN=<dsn>-\n\" No longer a need to edit parmlib members or learn LLA control\n  statement syntax-\n\" These commands are available online and batch interfaces-\n\n\n3- LLA Monitoring\n\n\n\" Continually examines the status of LLA, detecting and tracking\n  all ADDs, REMOVEs, UPDATEs, and management mode changes that take\n  place-\n\" This facility also provides positive acknowledgement that\n  auto-updates or ELOCs have completed successfully-\n\" Optional messages provide an audit trail or when LLA\n  modifications occurred-\n\n\n4- Cross-System Notification\n\n\" All changes or updates to LLA managed libraries are reflected\n  to all lpars in the sysplex-\n\" You no longer need to remember to refresh or update LLA on\n  every system when a member is updated or LLA is modified-\n\n\n5- LLA Reporting\n\" The LLACHECK report allows you to quickly diagnose situations\n  where LLA returns an incorrect version of a module-\n\" The LLATRACE report provides a convenient method for reporting\n  the contents of another useful diagnostic tool, the LLA Trace\n  Table-\n\" Internal LLA statistics, including an indication of modules\n  that have been staged to the Virtual Look-Aside Facility (VLF),\n  are reported by LLASTATS-\n\nJCL Example\n\n\n\n//@LNKCPY  JOB SDBIL,'COPY',CLASS=T,MSGCLASS=X,NOTIFY=&SYSUID\n//*--------------------------------------------------------*\n//*  PURPOSE:  HOW TO COPYING MEMBERS TO A LINK LIST DSN\n//*--------------------------------------------------------*\n//LLAREM   EXEC PGM=COMMAND\n//IEFRDER   DD *\nF LLA,REMOVE=LNK-SPP-TEST-LINKLIB,XSYS\n//WAIT30   EXEC PGM=COMMAND,PARM='DELAY=30'\n//IEBCOPY  EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=SPP-TEST-LINKLIB-NEW\n//SYSUT2   DD  DISP=SHR,DSN=LNK-SPP-TEST-LINKLIB\n//SYSIN    DD  *\nCOPY INDD=((SYSUT1,R)),OUTDD=SYSUT2,COPYALIAS\n//WAIT31   EXEC PGM=COMMAND,PARM='DELAY=31'\n//LLAADD   EXEC PGM=COMMAND\n//IEFRDER   DD *\nF LLA,ADD=LNK-SPP-TEST-LINKLIB,XSYS\n\n\n\nPDSMELOC-03  LLA REMOVE Detected for LinkList Library\n             LNK-SPP-TEST-LINKLIB\nPDSMLMON-04  PDSMAN has detected that LLA LookAside is\n             Not active for all LinkList libraries\n\nPDSMELOC-03  LLA ADD Detected for LinkList Library\n             LNK-SPP-TEST-LINKLIB\nPDSMLMON-02  LLA Update Issued for LinkList(Normal)library\n             LNK-SPP-TEST-LINKLIB\n\nPDSMLLA -01  LLA Update Issued for LinkList (Normal)\n             library LNK-SPP-TEST-LINKLIB\nPDSMLLA -DX  Diagnostic End: -End of PDSMLLA Diagnostics -\nPDSMLMON-02  LLA UPDATE Detected for LinkList Library\n             LNK-SPP-TEST-LINKLIB\n\n\n\nBatch Jobs\n\n\n\n1- PDSM10 - Empty and space release\n\n//PDSM13   EXEC PGM=PDSM13,PARM='RELEASE | EMPTY | EMPTYO'\n//PDSMPDS  DD  DISP=SHR,DSN=*****-*****-******\n\n\n2- PDSM13 - Map and Analysis\n\n//PDSM13   EXEC PGM=PDSM13,PARM='STATS | SPACE | SMAP | VALIDATE |\n      MAP | LMAP'\n//PDSMRPT  DD  SYSOUT=*\n//PDSMPDS  DD  DISP=SHR,DSN=*****-*****-******\n\n\n3- PDSM18 - Scan/Replace\n\n//PDSM18   EXEC PGM=PDSM18,PARM='+++CKUP*'\n//PDSMRPT  DD  SYSOUT=*\n//PDSMPDS  DD  DISP=SHR,DSN=******-********-*****\n//SYSIN    DD  *\nOPTION TRANSLATE=Y MISSMSG=N LISTMEM=N\nSCAN TARGET='text string',SCOL=##,ECOL=##\n-- or --\nREPLACE TARGET='old text',NEW='new text',SCOL=##,ECOL=##\n\n\n4- PDSM23 - Create $$$TITLE member\n\n//PDSM25   EXEC PGM=PDSM23,PARM='ALLOC=nnn | REALLOC=nnnn | REORG |\nREPORT '\n//PDSMPDS  DD  DISP=SHR,DSN=***-****-*****\n//PDSMRPT  DD  SYSOUT=*\n\n\n5- PDSM25 - Display member sizes\n\n//PDSM25   EXEC PGM=PDSM25\n//PDSMPDS  DD  DISP=SHR,DSN=***-****-*****\n//PDSMRPT  DD  SYSOUT=*\n//PDSMSEL  DD  *\n +BC*\n\n\n6- PDSM27 - Report duplicate members\n\n//PDSM25   EXEC PGM=PDSM25\n//PDSMPDS  DD  DISP=SHR,DSN=***-****-*****\n//LPALIST    DD  DUMMY\n//LINKLIST  DD DUMMY\n//PDSMRPT  DD  SYSOUT=*\n//PDSMSEL  DD  *\n +BC*/SCAN\n\n\n7- PDSM32 - Delete member and generations\n\n//PDSM32   EXEC PGM=PDSM32\n//PDSMPDS  DD  DISP=SHR,DSN=LIB-SYS-STC-PROCLIB\n//PDSMRPT  DD  SYSOUT=*\n//SYSIN    DD  *\n    DELETE KOSS PURGE               DELETE ABC AND ALL ITS VERSIONS\n    DEL ABC PURGE\n    DEL IEFAPF00 PREVONLY    ONLY DELETE MEMBER IEFAPF00'S VERSIONS\n    DEL IEFBR14               ONLY DELETE MEMBER IEFBR14 ITSELF\n    DEL DEF PURGE CLEANUP    DELETE MEMBER DEF AND ALL POSSIBLE\n                            PREVIOUS VERSIONS\n\n8- PDSM33 - Compare datasets\n\n//PDSM33   EXEC PGM=PDSM33,PARM='COMPARE'\n//PDSMOLD     DD  DISP=SHR,DSN=**-********-*******\n//PDSMNEW    DD  DISP=SHR,DSN=**-********-*******\n//PDSMRPT      DD  SYSOUT=*\n//PDSMSUPDT DD  DISP=SHR,DSN=******-*****-****    /* GENERATE Only */\n\nPARM=\n\nCOMPARE       COMPARE OLD AND NEW MODULES, REPORTING\n              DIFFERENCES AND ALSO UNMODIFIED LINES\n\nDIFF          COMPARE OLD AND NEW MODULES, REPORT\n              ONLY DIFFERENCES\n\nGENERATE      COMPARE OLD AND NEW MODULES AND GENERATE\n              A CHANGE FILE CONTAINING THE DIFFERENCES\n\nAPPLY         APPLY ONE OR MORE CHANGE FILES TO DATASET\n              TO GENERATE A NEW COMPOSITE MODULE\n\nSUMMARY       APPLY ONE OR MORE CHANGE FILES TO DATASET\n              AND REPORT THE COMPOSITE MODULE, HIGHLIGHT-\n              ING ALL INSERTED AND REPLACED LINES-\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REXX": {"ttr": 8968, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00%\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f#B\\t\\x16\\t\\x16\\x00\\x00\\xe3\\xc5\\xe7\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T23:42:25", "lines": 2326, "newlines": 2326, "modlines": 0, "user": "TEXT"}, "text": "\n                            REstructured\n\n                              eXtended\n\n                              eXecutor\n\n\n\n                          (June 14, 2002)\n\n\n\n\nAgenda\n\n\n1- Introduction -------------------------- 3\n2- ROEs ---------------------------------- 4\n3- History ------------------------------- 5\n4- Summary ------------------------------- 6\n5- Pros and Cons ------------------------- 7\n6- Books --------------------------------- 9\n7- Platforms ---------------------------- 12\n8- Online Help -------------------------- 13\n9- Datasets ----------------------------- 14\n    A- Class Datasets ------------------- 15\n10- Execution --------------------------- 16\n11- Syntax ------------------------------ 17\n    A- Instructions --------------------- 20\n    B- Variables ------------------------ 21\n12- PARSE ---- -------------------------- 23\n13- Control Structures ------------------ 26\n    A- IF THEN [ELSE] ------------------- 27\n    B- SELECT --------------------------- 30\n    C- DO Loop -------------------------- 31\n    D- SIGNAL --------------------------- 34\n14- Passing Variables ------------------- 35\n15- External Data Queue ----------------- 36\n16- EXECIO ------------------------------ 39\n17- Procedures -------------------------- 42\n    A- Built-in Functions --------------- 46\n    B- DATE() --------------------------- 49\n18- Null Variables ---------------------- 51\n19- ADDRESS ----------------------------- 52\n20- Debugging --------------------------- 54\n    A- TRACE ---------------------------- 56\n    B- TRACE Output --------------------- 57\n    C- TRACE Tips ----------------------- 58\n21- Batch  ------------------------------ 59\n    A- IKJEFT01 ------------------------- 60\n    B- IRXJCL --------------------------- 62\n22- RACF -------------------------------- 63\n\n\n\n\nIntroduction\n\n\n1) Name?\n\n2) Have you programmed in any other language before?\n\n3) Have you used REXX?  CLIST?  ISPF?\n\n4) What is your expectation of the class?\n\n5)  Is there a specific item you want to learn about REXX?\n\n\n\n\n\nROE's\n\n\n1) Start/End time?\n\n2) Breaks\n\n    \" Every hour and half?\n\n    \" Lunchtime?\n\n    \" Designate someone as time keeper\n\n3) Questions\n\n4) Assignments and Exams\n\n5) Please turn beepers and cell phones on vibrate\n\n6) If you have to step out or miss a class please get with me\n   before/after class and I'll bring you up to speed on the\n   subject material you missed-\n\n\n\nHistory\n\n\n\" Created 29 March 1979 by Mike Cowlishaw, working for IBM's\n  System Assurance Laboratory near Winchester (England)-\n\n\" Started off as a personal project and initially called REX\n  because the name sounded cool-\n\n\" Initially, REX was used internally within IBM, and only later\n  launched as a product-\n\n\" The new IBM internal electronic Network, VNET, had a major part\n  in the development of REX-\n\n\" In 1982, the name gained an X to avoid any confusion with other\n  products- REXX stands for REstructured eXtended eXecutor-\n\n\" In 1983, REXX was included in the 3rd release of IBM's Virtual\n  Machine /System Product- Before VM/CMS used EXEC and EXEC-2-\n\n\" In 1985, REXX was available for PC-DOS, created by Mainsfield\n  Software Group-\n\n\" In 1987, IBM announced that REXX was to be the Procedure\n  Language for its Systems Application Architecture (SAA)-\n\n\" In 1988, REXX was available with TSO/E V2-1 (MVS/XA)-\n\n\" In 1989, research began on a REXX compiler at IBM's Haifa\n  Scientific Center in Israel- Later, IBM's Vienna Software\n  Laboratory in Austria developed the 1st commercial REXX compiler-\n\n\" In 1990, REXX was available in OS/2 V2-1 and OS/400 R3\n\n\" In 1991, started work on ANSI X3J18 standards for REXX-\n\n\n\n\nSummary\n\n\n\" REXX is a modern, structured, high-level programming language\n\n\" Procedure Language\n\n\" Interpretive Language\n\n\" 24 Keywords\n\n\" REXX looks like PL1, without data typing-\n\n\" Numbers, including both integer and real are just special cases\n  of strings- Only when values are actually used are any\n  conversions made-\n\n\" Storage is only used when variables are used-\n\n\" REXX does no I/O- REXX relies on other systems (ISPF/TSO) to\n  accomplish displaying of panels and read/writing to files-\n\n\n\n\nPROs\n\n\n\" Has only 1 data type, the character string, so no declarations\n  are needed-\n\n\" REXX arithmetic is defined as decimal arithmetic, with\n  precision selected by the programmer rather than by the hardware-\n\n\" REXX places no inherent limits on size of strings-\n\n\" REXX is a small language, making it easy to learn-\n\n\" REXX has no reserved words-\n\n\" REXX is very system-independent- This gives it the advantage of\n  portability and wide application-\n\n\n\n\n CONs\n\n\n\" Performance- For example REXX's decimal arithmetic will be\n  slower than binary arithmetic-\n\n\" Its dynamic nature means that, even with advanced compilers,\n  programs in REXX are usually slower-\n\n\" REXX's Data type, the string, is not well supported by other\n  languages, so there may be a cost in data conversion-\n\n\n\n\nBooks\n\n\nREXX/Advanced Techniques for Programmers, J- Ranade IBM Series\nAuthor:      Peter C- Kiesel\nPublisher:   Mcgraw Hill\nISBN:        0-07-034600-3\nCost:        $75-00\nRating:        ***********\n\nProgramming in REXX, J- Ranade IBM Series\nAuthor:      Charles Daney\nPublisher:   Mcgraw Hill\nISBN:        0-07-015305-1\nCost:        $75-00\nRating:        ***********\n\nREXX in the TSO Environment\nAuthor: Gabriel F- Gargiulo\nPublisher: QED information Sciences, Inc-\nISBN:  0-89435-354-3\nCost:  $75-00\nRating:  ***********\n\nPractical Usage of TSO REXX\nAuthor: Anthony S- Rudd\nEmail:       ARUDD@COMPUSERVE-COM\nPublisher:   Springer\nISBN:        1852332611\nCost:       $79-95\nRating:      ********\n\nPractical Usage of MVS REXX\nAuthor:     Anthony S- Rudd\nEmail:       ARUDD@COMPUSERVE-COM\nPublisher:   Springer\nISBN:        3-540-19952-7\nCost:       $79-95\nRating:      ********\n\nThe REXX Handbook, J- Ranade IBM Series\nAuthors:     Gabriel Goldberg/Philip H- Smith III\nPublisher:   Mcgraw Hill\nISBN:       0-07-023682-8\nCost:        $75-00\nRating:      *****\n\nThe REXX Language, A Practical Approach to Programming\nAuthor:      M-F- Cowlishaw\nPublisher:   Prentice Hall PTR\nISBN:        0-13-780651-5\nCost:        $30-00\nRating:      *****\n\nOS/2 REXX From Bark to Byte, IBM Red Book\nAuthor:      IBM\nPublisher:   IBM\nISBN:        GG24-4199-00\nCost:        $30-00\nRating:      *****\n\nTeach Yourself REXX in 21 days\nAuthors:     Schindler & Schindler\nPublisher:   Sams Publishing\nISBN:        0-672-30529-1\nCost:        $29-99\nRating:      **\n\nWriting OS/2 REXX programs\nAuthor:      Ronny Richardson\nPublisher:   McGraw Hill\nISBN:        0-07-052372-X\nCost:        $30-00\nRating:      **\n\nDown to Earth REXX\nAuthor: William F- Schindler\nPublisher: Perfect Niche Software\nISBN:  0967759005\nCost:  $29-95\nRating:  ?\n\nMVS and ISPF Update\nXephon\n1301 West Highway 407, Suite 201-405\nLewisville, TX 75067\n(940) 455-7050\n\n\n\nBook Look\nWeb:   www-booklook-com\nPhone:  (845) 986-1981\n\nUsed and Out of Print Books\nWeb:    www-addall-com\n\nUsed Book Search\nWeb:  www-usedbooksearch-com\n\nCompare 30 Online Book Stores\nWeb:  www-AllBookStore-com\n\nSearch Dozens of Book Stores\nWeb:  www-bestbookbuys-com\n\n\n\nIBM REXX\nwww-4-ibm-com/software/ad/rexx/\n\nREXX Links\n www-rexx-com/complang-html\nwww2-hursley-ibm-com/rexx/\n\nREXX - Handling Dates\nwww2-hursley-ibm-com/rexx/datec-htm\nwww-1-ibm-com/servers/eserver/zseries/solutions/s390da/articles/rexxdate-html\n\nREXX Edit Macros\nwww-geocities-com/davemcritchie/rexx/home-htm\n\nREXX - MVS Freeware\nwww-planetmvs-com/freeware/fwrexx-html\n\n\n\nPlatforms\n\n\n1- Supported Under\n\n    \" VM     - Virtual Machine\n    \" MVS    - Multiple Virtual Storage\n    \" VSE    - Disk Operating System/Virtual Storage Extension\n    \" PCs    - Personal Computer/Disk Operating System/OS2/Windows\n    \" OS/400 - AS/400 Operating System\n    \" VAX    - DEC's Operating System\n    \" UNIX\n    \" TANDEM\n\n\n2- IBM\n    Phone:  800-237-5511\n    Email: IBMLINK  WWW2-IBMLINK-IBM-COM\n     OS/390 Books WWW-1-IBM-COM/SERVERS/S390/OS390/BKSERV/\n     Red Books  WWW-REDBOOKS-IBM-COM/\n\n\n3- Open Software Technologies, Inc-\n    1230 Douglas Avenue, Suite 300\n    Longwood, Florida  32779\n    Phone:    (407) 788-7173\n    FAX:    (407) 788-8494\n    Email:    support@mail-open-softech-com\n    Web:    http://www-open-softech-com\n\n\n4- Relational Architecture International\n    33 Newark Street\n    Hoboken, NJ  07030\n    Phone: (800) 201-0771\n    Email: Sales@relarc-com\n    Web: www-relarc-com\n\n\nBoth Open Software Technologies and Relational Architecture\nInternational provide significant enhancements to REXX, including\naccess to DB2 and VSAM-\n\n\n\n\nOnline Help\n\n\n1- MVS/QuickRef\n\nA- QW <REXX cmd>\n\nB- QW\n\" Select \"C - Request Reference Information by Category\"\n\" Select \"PROGLANG - Programming Languages\"\n\" Select \"IBM - OS/390 REXX SYNTAX - V2R9\"\n\n\n2- Book Manager\n\nA- =V-BKM\n\" Select \"IKJOSE30 - OS/390 V2R10-0 TSO/E\"\n    or \"IKJ2BI02 - TSO/E V2R5\"\n\" Select \"IKJ3A330 - OS/390 V2R10-0 TSO/E REXX Reference\" or\n    \"IKJ3C310 - OS/390 V2R9-0 TSO/E REXX User's Guide\"\n\n\n\nDatasets\n\n\n1- Displaying datasets concatenated to TSO/ISPF\n\n\" LISTA <ddname>\n\" TSO  ISRDDN\n\" TSO  ISRFIND\n\" TSO LISTALC STATUS\n\n\n2- DD Cards\n\n\" SYSEXEC  - REXX only\n\" SYSPROC  - CLIST and REXX\n\n\n3- Search Order:\n\n\" SYSUEXEC  - ALTLIB\n\" SYSEXEC\n\" SYSUPROC - ALTLIB\n\" SYSPROC\n\" ISPLLIB\n\" STEPLIB\n\n\n4- Items of Interest\n\n\" SYSEXEC can only contain REXXs\n\" SYSPROC can contain CLIST and REXXs\n\" Each concatenated data set must have the same record format\n  (RECFM) and logical record length (LRECL)-\n\" Largest record length is 255 for both SYSEXEC and SYSPROC DSNs-\n  The last 8 characters of the input records are ignored-\n\" Make sure to remove sequence numbers in columns 73-80 when\n  copying or moving REXX's from a dataset with LRECL=80 over to a\n  dataset with LRECL=255-\n\" If after allocating a SYSEXEC, you still receive \"COMMAND NOT\n  FOUND\" type in\n   \"TSO EXECUTIL SEARCHDD (YES)\"\n\" REXX's can be located in sequential or PDS datasets- PDS's are\n  normally used-\n\n\n\n\nClass Datasets\n\n\n1- TSO Logon Proc\n\n   \u00f3 SCP  or  IKJACCNT\n\n2- Rename your old REXX Class Datasets\n\n   \u00f3 TSO REXXRNAM\n\n3- Create your new REXX Class datasets\n\n   \u00f3 TSO  REXXALOC\n\n4- Copy members to your new REXX Class datasets\n\n   \u00f3 TSO  REXXCOPY\n\n5- TSO Logon Proc\n\n   \u00f3 REXXCLS\n\n6- Or use SCP/IKJACCNT and LIBDEF datasets\n\n   A- Dynamically Allocate Datasets\n\n      \u00f3 TSO  REXXCLSA\n\nB- De-Allocate Datasets\n\n   \u00f3 TSO  REXXCLSD\n\n\n\n\nExecution\n\n\n1- Several ways to execute a REXX program\n\nA- Foreground\n\n\" TSO  <rexx pgm> <parms>\n\" TSO %<rexx pgm> <parms>\n\" TSO EX 'dsname(member)'\n\" TSO EXEC 'dsname(member)'\n\" ISPF =6\n\u00f3 <rexx pgm>  <parms>\n\u00f3 %<rexx pgm> <parms>\n\u00f3 EX 'dsname' <parms>\n\u00f3 EXEC 'dsname(member)'\n\nB- Background\n\n\" PGM=IKJEFT01\n\" PGM=IRXJCL\n\n\nSyntax\n\n\n1- Readable and easy to use\n\n\" Mixed Case\n\" Free Formatting\n\" Punctuation only to avoid ambiguity\n\" No data type or variable definitions or declarations\n\" Interpretive makes debugging easier- If a program error is\n  encountered the line of code will be displayed-\n\n\n2- Basic Components of REXX\n\nClauses/Statements   Each program line usually contains at least\n                     one statement- REXX deals with one clause at a\n                     time-\nTokens               Each clause can be divided into tokens separated by\n                     blanks- (ex- /*, ADDRESS, etc-)\nExpressions          Tokens may form expressions in a clause- (ex- IF\n                     ABC = 10 THEN)\n\nInstructions         One or more clauses containing REXX keywords which\n                     perform a task- (ex- IF, DO, END, etc--)\nAssignments          Clauses defining variables to given clauses (ex-\n                     ABC=24)\nSeparators           Semicolon, \";\" \",\", can separate clauses on a line-\n                     Comma continues a line-\n\n\n3- Five varieties of clauses\n\nNull Clauses         Blank Lines ignored by interpreter-\nLabels               Defined by a token and followed by a colon \":\"\n                     They indicate the start of a subprogram or a\n                     branch point (reachable by REXX CALL or\n                     SIGNAL)\nAssignments          variable=value\nInstructions         Keyword action (ex- IF xyz THEN)\nCommands             Clauses possibly containing an\n                     expression that is passed to an external\n                     environment such as TSO or ISPF-\n\n\n\n4- Five most common tokens\n\nTokens are defined as every item delimited by blanks inside a\nclause-\n\nComments      Any text between an opening /* and a closing */\nStrings       Any text delimited by single or double quotes\nSymbols       Any combination of characters (A-Z, 0-9, etc-)\nNumbers       Any valid number-\nOperators     The characters +, -, /, *, etc---\n\n\n5- Arithmetic Operators\n\n+   Add\n-   Subtract\n*   Multiply\n/   Divide\n%   Integer divide\n       Divide and return the integer part of the result-\n//   Remainder\n        Divide and return the remainder-\n**   Power\n        Raise a number to a whole number power-\n\n\n6- Items of Interest\n\n\" By default, REXX allows for 9 significant digits- To change the\n  default use \"NUMERIC DIGITS ##\"\n\" When a computation exceeds a user-defined maximum precision it\n  does not generate an error message, as other languages, when an\n  overflow occurs- Instead it discards the least significant digits\n  of a result in order to stay within the specified degree of\n  precision-\n\" The only limitation on mathematic precision is the amount of\n  memory that is available to your system-\n\" A variable that was never given a value is taken as a literal,\n  but converted to upper case-\n\" Place all literals in single or double quotes; else REXX will\n  treat it as an un-initialized variable-\n\" \"Not\" putting quotes around literals can be quite costly, in\n  terms of performance, because the REXX interpreter has to execute\n  the un-initialized variable code-\n\" One or more blanks between variables or literal strings becomes\n  one blank-\n\" Maximum length of a literal or variable is 250 characters- This\n  is because the ISPF editor can only handle up to 250 characters-\n\n\n7- Items of Interest (cont-)\n\n\" If the comma (,) is the last character of a line the REXX\n  interpreter will treat it as the continuation character-\n\" The semi-colon (;) is the End-Of-Clause and will not be treated\n  as a NULL leg (NOP)-\n\" Do not use the semi-colon (;) after each REXX statement, it's\n  not needed-\n\" Placing all variables and keywords in upper case will save some\n  cycles, because the REXX interpreter translates everything to\n  upper case except what is in quotes and comments-\n\" Below statements will display 0- REXX does a logical evaluation\n  of the comparison, not an assignment-\n  \u00f3 SAY A=B\n  \u00f3 A=B=C=10;  SAY A\n\n\n8- Examples\n\nSAY1  SAY, display text on screen\nSAY2  SAY/PULL, display text and retrieve information\n\nARG1  Retrieve Arguments (Upper)\nARG2  Retrieve Arguments (Upper/Lower)\n\n\n\nInstructions\n\n\nADDRESS      Set current command environment\nARG          Get argument\nCALL         Invoke routine (exception handler)\nDO           Start of DO-block\nDROP         Free variable\nEXIT         Exit\nIF - THEN - [ELSE]    Conditional processing\nINTERPRET    Process run-time statement\nITERATE      Iterate DO-loop\nLEAVE        Leave DO-loop\nNOP          No-instruction\nNUMERIC      Set numeric options\nOPTIONS      Set language processor options\nPARSE        Parse data\nPROCEDURE    Define start of procedure\nPULL         Retrieve element from stack\nPUSH         Place element at end of the stack\nQUEUE        Place element at start of the stack\nRETURN       Return from routine\nSAY          Display\nSELECT       Define start of SELECT-block\nSIGNAL       Exception handler processing\nTRACE        Set debugging option\nUPPER        Transform to uppercase\n\n\nVariables\n\n\n1- Items of interest\n\n  \" No need to declare variables ahead of time-\n  \" Allocates storage only when used-\n  \" Use quotes, double or single, when assigning text-\n  \" Variable name can be upper and lower case\n  \" Variable name can be up to 250 characters long-\n  \" Un-initialized variable is equal to its name in upper case-\n  \" Very few Reserved Words-\n\n\n2- Two types of variables\n\n  A- Simple\n    \" Sequence of characters, no periods\n\n  B- Compound\n    \" Two or more simple names connected by periods\n    \" <stem>-<subscripts>\n    Where  <stem>\n    \u00f3 Any sequence of characters\n    <subscripts or tail>\n    \u00f3 Number or characters-\n    \u00f3 Provides for \"Associative Indexing\", ex- AGE-FRED\n\n\n3- Items of Interest\n\n  \" A variable name can \"not\" start with a number- If that were\n  allowed, it would be possible to redefine a number\n      \u00f3 3 = 4\n  \" The variable name cannot contain any arithmetic characters-\n  \" All data items in REXX are referred to with a symbolic name-\n    REXX has no other way, such as pointers, to access data- This\n    makes REXX very safe to use, since it is impossible to\n    reference memory that has not been allocated-\n  \" A REXX program will never crash simply because it refers to\n    an un-initialized variable (as in other languages)- The REXX\n    program may malfunction and give incorrect results-\n  \" Reasons other languages require data declaration is to\n    specify the type, amount of data, and the name- Since REXX\n    stores everything as characters, there is no need for this-\n\n\n4- Items of Interest (cont-)\n\n  \" Storage is only allocated for the array elements actually\n    being used-\n  \" Array subscripts need not be numeric- This permits\n    associative indexing-\n  \" Each separate REXX program maintains its variables\n    independently of every other REXX program-\n\n\n5- Examples\n\n       VARIABL1  - Assign/display \"Simple\" character variables\n       VARIABL2  - Assign/display \"Simple\" numeric variables\n       VARIABL3  - Display un-initialized \"Simple\" variables\n       VARIABL4  - Assign/display values to REXX Commands\n       ARRAY1    - Initialize a \"Compound\" Variable\n       ARRAY2    - \"Compound\" Variable using whole numbers\n       ARRAY3    - \"Compound\" Variable using multi-dimensional\n       ARRAY4    - \"Compound\" Variable using associative array\n       ARRAY5    - Display un-initialized \"Compound\" variable\n       DROP1     - Delete a \"Simple\" variable\n       DROP2     - Delete a \"Compound\" variable\n\nPARSE\n\n\n\n1- Syntax\n\nPARSE  <UPPER>  <source>  <template>\n\n    <UPPER> is optional- If used will translate all text to upper\n                         case-\n\n    <source> is required can be any of the following:\n                  ARG\n                  PULL\n                  VALUE <expression> WITH\n                  VAR <variable>\n    <template> is optional\n\n\n2- Items of interest\n\n  \" Used to take strings apart-  It is word oriented-\n  \" Extremely powerful, but least used-\n  \" Faster in execution speed since the whole operation can be\n    done internally, without the need to constantly issue function\n    calls-\n  \" Prevents text from being converted to all UPPER case, if\n    UPPER is not specified- When using ARG and PULL without PARSE\n    the text will always be translated to UPPER case-\n  \" \"PULL\" is equal to \"PARSE UPPER PULL\"\n  \" \"ARG\" is equal to \"PARSE UPPER ARG\"\n  \" The words are placed in the variables in the same order that\n    they are entered-\n  \" Space is a delimiter, not the comma-\n  \" REXX places the extra words in the last variable-\n  \" Use the period to ignore a word or extra words-\n  \" All templates are changed when executing PARSE-\n  \" If there are fewer words than there are variables in the\n    template, all remaining variables are set to the null string, a\n    string length of 0-\n  \" If there are more words then there are variables, the last\n    variable will get whatever is left or the original data, which\n    could include both leading and trailing blanks- The last\n    variable on a template is treated differently from the other\n    variables-\n  \" Most common mistake is extra blanks in the variable that is\n    the last one in the template- This can be remedied by using a\n    period as a DUMMY variable-\n\n\n3- Items Interest (cont-)\n\n  \" What if a literal pattern is not found in scanning a string?\n    \u00f3 The answer is that this is not considered an error condition,\n      and you cannot test directly for it- PARSE simply assigns the\n      null string to all variables named after the literal string\n      that was not found-\n  \" \"PARSE VALUE 0 WITH 1 VAR1 1 VAR2 1 VAR3\" is used frequently\n    to initialize variables to the same value-\n  \" \"PARSE EXTERNAL\" is the same as \"PARSE UPPER PULL\", but it\n    doesn't look at the external stack-\n  \" Information from \"PARSE ARG\", \"PARSE SOURCE\" and \"PARSE\n    VERSION\" are static within a given routine, that is, the same\n    information will be retrieved each time these options are used-\n  \" \"PARSE VALUE\" using a literal or function must use the\n    sub-keyword \"WITH\"-\n  \u00f3 PARSE VALUE TIME() WITH HH \":\" MM \":\" SS\n  \u00f3 PASRE VALUE \"HELLO DOLLY\" WITH VAR1 VAR2\n  \" Column delaminating- The number on the left is the start\n    column, the number of the right minus 1, is the end column-\n      \u00f3  XYZ = \"ABCDEFGHIGHKL\"\n  \u00f3 PARSE VAR XYZ 1 VAR1 5 VAR2 9 VAR3 13\n  \" VAR1 = \"ABCD\"\n  \" VAR2 = \"EFGH\"\n  \" VER3 = \"IJKL\"\n  \u00f3 PARSE VAR XYZ 1 VAR1 5 7 VAR2 9 11 VAR3 13\n  \" VAR1 = \"ABCD\"\n  \" VAR2 = \"GH\"\n  \" VAR3 = \"KL\"\n  \" Literal Characters placed in the template:\n    \u00f3 If it finds the character, it will put all the data that is\n      before the character into the variables that are before the\n      literal character- Then it will place all the data that is\n      after the literal character into the variables after literal-\n    \u00f3 What is unique about this is that the \"before\", or left side\n      has nothing to do with the \"after\", or right side- One side\n      does not influence the other- It is as if there were two\n      separate PARSE commands-\n    \u00f3 If the data does not contain the literal character the\n      variables to the right are set to \"NULL\"-\n\n\n4- Examples\n\n    PARSE1   - PARSE VAR TEXT using positional patterns\n    PARSE2   - PARSE VAR TEXT ignoring string patterns\n    PARSE3   - PARSE VALUE initializing variables\n    PARSE4   - PARSE VALUE using positional patterns\n    PARSE5   - PARSE VALUE using separator cards\n    PARSE6   - PARSE VALUE used to initialize variables\n    PARSE7   - PARSE VALUE used to initialize variables\n\nControl Structures\n\n    \" IF THEN ELSE\n\n    \" SELECT WHEN END\n\n    \" DO END\n\n    \" SIGNAL\n\n    \" NOP\n\nIF THEN\n\n\n1- Syntax\n\n        IF  <expression>  THEN\n         <statement>\n        ELSE\n         <statement>\n\n       IF  <expression>  THEN DO\n        <statements>\n           END\n        ELSE DO\n        <statements>\n        END\n\n\n2- Commands\n\n        NOP   - No Operation\n\n\n3- Items of interest\n\n  \" Unlimited number of nested IF THENs\n  \" THEN and ELSE are reserved word in an IF clause-\n  \" There is no specific keywords, such as ENDIF, required to end\n    an IF statement-\n  \" Indentation is used for clarity-  REXX could care less-\n  \" Cannot use English words (AND, NOT, NE- etc-)\n  \" <>, \\, ~ means not equal-\n  \" Upper and lower case are significant in REXX comparisons-\n  \" One of the convenient characteristics of the equality operator,\n    \"=\", when comparing strings is that leading and trailing blanks\n    are ignored- Blanks in the middle of string are NOT ignored-\n  \" If leading blanks are important use \"= =\", exact equality-\n  \" Examples of strictly equal:\n    \u00f3 'Apples' == '  Apples   ' -- Not Equal\n    \u00f3 -01 == 000-0100 ------ Not Equal\n  \" A Null clause is not an instruction, so putting an extra\n    semicolon (or label) after the THEN or ELSE is not equivalent to\n    putting a dummy instruction- The NOP instruction is provided for\n    this purpose-\n\n4- Items of Interest (cont-)\n\n  \" True is a 1 and False is 0- There may be times you want to\n    make use of the 1 and 0 in your program\n    \u00f3 ANSWER = 45 = 46\n    \u00f3 SAY ANSWER --- ZERO will be displayed\n  \" \"ABC\" = \"ABC\"- REXX interprets this as a comparison- Result\n    is 1- 1 is not a keyword of REXX, so it passes it to the\n    external command environment (TSO)- TSO will reject it as an\n    \"INVALID COMMAND\"-\n  \" NUMERIC FUZZ 1\n    \u00f3 Says \"out of the nine significant digits, ignore one low\n      order digit\"-\n    \u00f3 There must be nine digits to take effect-\n    \u00f3 NUMERIC DIGITS 5\n  NUMERIC FUZZ 1\n  IF 12361 = 12362 ------ Is Equal\n\n\n5- Examples\n\n    IFTHEN1  - IF THEN with DO END\n    IFTHEN2  - Nested IF THEN\n    IFTHEN3 - True Comparisons\n\n\n\n\nComparitives\n\n\n1- Normal Comparative\n\n=              Equal (numerically or when padded)\n~=, \\=         Not equal (inverse of =)\n>              Greater than\n<              Less than\n><, <>         Greater than or less than (Same as Not Equal)\n>=, ~<, \\>     Greater than or equal to, not less than\n>=, ~<- \\>     Less than or equal to, not greater than\n\n\n2- Strict Comparative Operators\n\n==             Strictly equal (identical)\n~==, \\==       Strictly not equal (inverse of ==)\n>>             Strictly greater than\n<<             Strictly less than\n>>=, ~<<, \\<<  Strictly greater than or equal to, strictly not\n               less than\n<<=, ~>>, \\>>  Strictly less than or equal to, strictly not greater than\n\n\n3- Logical (Boolean)\n\n&             And\n|             OR\n&&            Exclusive or returns 1 if either (but Not both)\n              is true\nPrefix ~, \\   Logical Not m Negates, 1 becomes 0 and vise versa\n\n\n4- Hex Representation\n\n~   5F\n|   4F\n\n\n\nSELECT\n\n\n1- Syntax\n\nSELECT\n    WHEN  <expression>  THEN\n             statement\n    WHEN  <expression>  THEN\n              statement\n    OTHERWISE\nEND\n\n\n2- Items of Interest\n\n  \" No limit on number of WHEN cases-\n  \" Just like IF statement, but with no ELSE\n  \" SELECT is REXX's implementation of the structured programming\n    construct \"CASE\"-\n  \" REXX and ISPF have identical commands \"SELECT\" but do different\n    things- The ISPF SELECT invokes a panel or program-\n  \" SELECT statements can be nested-\n  \" Only one WHEN can be executed\n  \" OTHERWISE is optional-\n    \u00f3 But note, if none of the WHEN cases are selected, and no\n      OTHERWISE statement has been coded, an error will be generated-\n    \u00f3 OTHERWISE can be empty - A NOP instruction is not required-\n    \u00f3 If OTHEWISE has several statements to execute you do not need\n      to enclose it with a DO--END pair-\n\n\n3- Examples\n\nSELECT1  - Select statement with NO OTHERWISE statement\nSELECT2  - Select statement with an OTHERWISE statement\n\n\n\nDO Loops\n\n\n    1- Seven Types of DO Loops\n\n    A- Simple Repetitive Loop\n              DO ##\n                     <statements>\n              END\n\n    B- Compound Repetitive Loop\n              DO  J  =  1  to  10  by  1\n                     <statements>\n              END\n\n    C- \"DO FOREVER\" using the \"LEAVE\" Command\n              DO  FOREVER\n                     IF  <expression>  THEN\n                          LEAVE\n                     <statements>\n              END\n\n    D- \"DO UNTIL\" (EVAULATED AT THE BOTTOM)\n              DO  UNTIL  <expression>\n                     <statements>\n              END\n\n    E- \"DO WHILE\" (EVAULATED AT THE TOP)\n              DO  WHILE  <expression>\n                     <statements>\n              END\n\n    F- Repetitive loop with WHILE condition\n    DO I  = 1 TO 10 WHILE X = 1\n           <statements>\n    END\n\n    G- Repetitive loop with UNTIL condition\n    DO I  = 1 TO 10 UNTIL X = 1\n           <statements>\n    END\n\n\n\n2- Commands\n\n LEAVE - Exit the active loop, except when control variable name\n         is specified (ex- LEAVE J)\n ITERATE - Skip the rest of the body of the active loop, except\n         when a controlled variable name is specified (ex- ITERATE K)-\n\n\n3- Items of Interest\n\n  \" The interpretation of the \"TO\" variable is accomplished at the\n    1st execution of the statement- You can modify this variable\n    inside the loop without affecting the iterations of the loop-\n  \" LEAVE and ITERATE must be in an active repetitive loop- An\n    error will occur if used outside a repetitive loop-\n  \" LEAVE and ITERATE statement will only work with repetitive\n    DO-Loops, NOT a simple DO-END structure-\n  \" LEAVE and ITERATE only affect the inner most loop, except when\n    a control variable is used-\n  \" When executing a \"DO UNTIL\" loop the instructions within the\n    loop are always executed once- It's as if the comparison is\n    actually accomplished at the END statement-\n  \" The WHILE and UNTIL instruction is compared every iteration-\n    These loops may be somewhat slower due to this-\n  \" Below is an incorrect use of using a control variable name on\n    ITERATE and LEAVE statement-\n        DO WHILE A>5\n        IF A = 3 THEN\n        ITERATE A\n        SAY A\n           END\n    You can correct this by removing the \"A\" from ITERATE or code it\n    as follows:\n        DO I=1 WHILE A>5\n        IF A=3 THEN\n        ITERATE\n        SAY A\n        END\n  \" Most common mistakes using loops are:\n  \u00f3 Using SIGNAL to branch back into a loop after SIGNALing out of it-\n  \u00f3 Changing the values  of the variables on the DO statement-\n  \u00f3 Using ITERATE instead of LEAVE\n  \u00f3 Using DO WHILE, instead of DO UNTIL\n  \u00f3 Not providing an EXIT form a DO FOREVER\n\n\n\n4- Examples\n\nDOEND1   - Simple Repetitive DO Loop\nDOEND2   - Simple Repetitive DO Loop\nDOEND3   - Controlled Repetitive DO Loop\nDOEND4   - Controlled Repetitive DO Loop using ITERATE with a\n           control variable to exit the inner most loop-\nDOEND5   - Modifying the \"TO\" variable inside the loop\nDOEND6   - Using the same Iteration variable within 2 loops\nDOFOR    - \"DO FOREVER\" using the \"LEAVE\" command\nDOUNTIL1 - \"DO UNTIL\"\nDOUNTIL2 - Controlled Repetitive DO loop with UNTIL condition\nDOWHILE1 - \"DO WHILE\"\nDOWHILE2 - Controlled Repetitive DO loop with WHILE condition\n\n\nSIGNAL\n\n1- Syntax\n\nSIGNAL  <label>\nSIGNAL  VALUE  <expression>\nSIGNAL  ON|OFF  <event>  NAME  <label>\n\n2- Three uses\n\n  \" Transfer control immediately to the label specified (GOTO)\n  \" Transfer control after interpreting the expression containing\n    the label- This allows for more flexibility-\n  \" Enable/disable handling of exception conditions-\n\n3- Items of Interest\n\n  \" Terminates active IF, SELECT, DO instructions-\n  \" You cannot transfer control from one place to another within\n    a DO or SELECT instruction- Error will occur-\n  \" If the label occurs twice in the program, only the 1st\n    occurrence is used-\n\n\n4- Examples\n\nSIGNAL1 - GOTO\nSIGNAL2 - GOTO with 2 identical labels in the program\nSIGNAL3 - SIGNAL using VALUE\nSIGNAL4 - Error Handling - Un-initialized variable\nSIGNAL5  - Error Handling - Invalid or command not found\nSIGNAL6 - Error Handling - Un-initialized variable\n\n\n\nPassing Variables\n\n\n1- Four ways to pass Variables/Information to another REXX program\n\n  A- Arguments\n\n    \" TSO  <rexx pgm>  <parms>\n    \" CALL <rexx pgm> <parm1, parm2>\n    \" <rexx pgm>(parm1,parm2)\n\n  B- External Data Queue\n\n    \" PUSH/QUEUE/PULL\n\n  C- Files\n\n    \" EXECIO\n\n  D- ISPF Variable Pool\n\n    \" VGET/VPUT\n\n\n\nExternal Data Stack\n\n1- Commands\n\nQUEUE  <rec>  - Inserts   records (First In, First Out)\nPUSH  <rec>   - Inserts   records (Last  In, First Out)\nPULL  <rec>   - Retrieves records\nQUEUED()      - No- of  records in the stack\n\nMAKEBUF       - Create a new buffer on the data stack\nDROPBUF <##>  - Delete a buffer on the data stack\nQBUF          - Query how many buffers are active on the data stack\nQELEM         - Query how many elements are on the data stack\n\nNEWSTACK      - Create a new data stack\nDELSTACK      - Delete most recently created data stack\nQSTACK        - Query the number of data stacks that are in use-\n\n\n2- Items of interest\n\n  \" External Data Stack is a feature of REXX, not TSO- Other\n    programming languages can access it by calling IRXSTK, the data\n    stack processing routine-\n  \" Commonly used to:\n      \u00f3 Pass variables/records to another REXX\n      \u00f3 Temporarily place records\n      \u00f3 Read/write records from a file\n  \" Can only access one stack at a time, the current one-\n  \" Each element/record can be 1 to 16 megabytes in size\n  \" If the data stack is empty, PULL reads from the Terminal\n    (foreground) or SYSTSIN (background)- For batch if SYSTSIN is\n    empty it will return a null string-\n  \" The TSO stack is a two-part stack; it consists of the terminal\n    input buffer, not the output buffer, and the program stack- The\n    program stack is sometimes called the program data buffer-\n  \" \"PARSE EXTERNAL\" will take information directly from the\n    terminal buffer and not from the program stack-\n  \" A line may be NULL or it may have one word or several- Each\n    PUSH and QUEUE stacks a line, each PULL retrieves a line-\n  \" Two FIFO commands are QUEUE and EXECIO-\n\n3- Items of Interest (cont)\n\n  \" Two instructions that take data out of the stack are PULL and\n    EXECIO- Also, TSO commands can take items out of the stack-\n  \" If you DO NOT PULL all of the records off the stack before\n    EXITing, REXX will automatically PULL them off upon EXITing and\n    execute them as REXX or TSO commands, sometimes causing\n    \"COMMAND NOT FOUND\"-\n  \" NEWSTACK creates a new data stack and basically hides or\n    isolates the current data stack- Elements on the previous data\n    stack cannot be accessed until a DELSTACK command is issued to\n    delete the new data stack and any elements remaining in it-\n  \" After an exec issues the NEWSTACK command, any element that\n    is placed on the data stack with a PUSH or QUEUE instruction is\n    placed on the new data stack- If an exec calls a routine\n    (function or subroutine) after the NEWSTACK command is issued,\n    that routine also uses the new data stack and cannot access\n    elements on the previous data stack, unless it issues a\n    DELSTACK command- If you issue a NEWSTACK command, you must\n    issue a corresponding DELSTACK command to delete the data stack\n    that NEWSTACK created-\n  \" MAKEBUF, DROPBUF, QBUF, and QELEM start with stack no 0-\n    Where NEWSTACK, DELSTACK, QSTACK all start with stack no 1-\n  \" Only MAKEBUF, DROPBUF, QBUF, and QSTACK place the stack\n    number in RC-\n  \" Another way to display the number of external data stacks in\n    existence is:\n      When using NEWSTACK/DELSTACK\n      QSTACK\n      SAY  \"There are\" RC \"Stacks\n      When using MAKEBUF or DROPBUF\n      QBUF\n      SAY  \"There are \" RC \"Stacks\"\n  \" Order of the PULL\n      \u00f3 Program Stack\n      \u00f3 Terminal Input Buffer\n      \u00f3 Terminal\n\n\n4- MAKEBUF\n\n  \" Return code displays buffer number created-\n\n5- DROPBUF <##>\n\nNull  - Drops current Data Stack buffer-\n##    - Removes specified buffer and all buffers above it-\n0     - Clears all records in buffer 0\n\nReturn Code\n         0    - Successful\n         1    - Invalid number was specified\n         2    - Buffer does not exist\n\n6- NEWSTACK\n\n  \" Return code displays 0, not the stack no-\n\n7- DELSTACK\n\n\" Only deletes most recently created stack- If a new stack was\n  not created, DELSTACK removes all records from the original\n  stack-\n\" Return code always displays 0, not the stack no-\n\n\n8- Examples\n\nSTACK1   - Demonstrate using PUSH and PULL (LIFO)\nSTACK2   - Demonstrate using QUEUE and PULL (FIFO)\nSTACK3   - Demonstrate using Data Stack with a procedure\nSTACK4   - Demonstrate using MAKEBUF/DROPBUF\nSTACK5   - Demonstrate using NEWSTACK/DELSTACK\nSTACK6   - Demonstrate using external data queue with TSO command\n           OPER\n\n\n\nEXECIO\n\n1- Description\n\n  \" Read or Write Sequential files or a PDS(mbr), placing the\n    records on the data stack or in an array-\n\n2- Syntax\n\n      EXECIO  <no>  <open file>  <DDname>  (<parms>\n\n      <no>\n        ##  - Number of records to read/write\n        *   - Read/write \"ALL\" records\n        0   - process no records-  Used to open/close a file-\n\n      <open file>\n        DISKR   - Open file for INPUT\n        DISKW  - Open file for Output\n        DISKRU - Open file for Update\n\n  \" Usually READ a record and then use DISKW to update the record-\n  \" Can use DISKR or DISKRU to fetch next records\n\n        <DDname>\n  \" DD card used to read the file\n\n      <parms>\n        FINIS       - Closes the file\n        OPEN        - Open file\n        STEM <var>-  - Insert records into an array\n\n3- Return Codes\n\n      2   - End of File\n      4   - Empty file\n      20  - Severe Error\n\n4- Items of Interest\n\n  \" EXECIO is actually a TSO command, not REXX-\n  \" The EXECIO only supports fixed and variable length records-\n  \" In general a file should be closed and unallocated when it is\n    no longer needed- This has two advantages:\n      \u00f3 Frees main-storage\n      \u00f3 Allows others to use the file\n  \" When possible read in the entire file- Also, take advantage of\n    the STEM option-\n  \" Right hand parenthesis is optional-\n  \" If you do NOT read in the entire file, say you read in 1 record\n    in at a time, you'll need to examine RC after each read-\n  \" EXECIO must be in quotes, especially when using \"*\"- If not in\n    quotes REXX will treat the \"*\" as an arithmetic operation-\n  \" If the file is read into a stem variable, the stem-0 variable\n    will contain the number of records read-\n  \" Because the amount of storage used for compound variables can\n    be extensive a DROP should be made for such variables when they\n    are no longer required- For example, if the EXECIO command has\n    been used to read the complete contents of a dataset into a stem\n    variable-\n  \" Use NEWSTACK and DELSTACK when writing to the External Data\n    Queue- Queued() tells us how many records are stacked-\n  \" A DISKW operation that writes zero records and closes (FINIS\n    option) the file will delete all the data records from the file:\n      \u00f3 \"EXECIO 0 DISKW <ddname> (FINIS\"\n  \" Records can be placed at either the head (LIFO operand) or the\n    tail (FIFO operand) of the stack- The default is LIFO-\n      \u00f3 \"EXECIO * DISKR <ddname> (FIFO\"\n  \" When using DISKW with \"*\" from the external data queue the last\n    line must be null- If it doesn't find one, the keyboard will\n    unlock and whatever you type in at the keyboard will be written,\n    until you enter a null line (just ENTER)- To prevent this from\n    happening code the following:\n      \u00f3 \"EXECIO \"QUEUED()\" DISKW DD1 (FINIS\"\n  \" When writing records to a file the information that extends\n    beyond the largest record length is truncated- When information\n    is shorter than the record length the line is padded with blanks\n    to attain the original record length-\n  \" When * is specified as the number of lines to write, the EXECIO\n    command stops writing information to the data set when it finds a\n    null line or an un-initialized compound variable- It DOES NOT use\n    the value in subscript 0 (ex- REC-0)-\n\n5- Items of Interest\n\n  \" You may skip records when reading a file, but only if you go\n    forward within the file-\n  \" File positioning can be accomplished in two ways:\n      \u00f3 Specify the SKIP operand, which will skip the specified\n        number of records- Below example skips the first two records:\n  \" \"EXECIO 2 DISKR <ddname> (SKIP\"\n  \" \"EXECIO * DISKR <ddname>\"\n      \u00f3 The starting record no can be specified- Below examples\n        skips the first two records:\n  \" \"EXECIO * DISKR <ddname> 3\"\n\n\n6- Examples\n\n      TSOFILE1  - Read 1 record at a time using the Data Stack\n      TSOFILE2  - Read \"All\" records placing them on Data Stack\n      TSOFILE3  - Writing \"ALL\" records from the Data Stack\n      TSOFILE4  - Read/Write to a file using an Array\n\n\n\nProcedures\n\n\n1- Two types of Procedures\n\n  A- Subroutines\n  \" Pass variables and receive a return code\n  \" CALL XYZ <var1>, <var2>\n\n  B- Functions\n  \" Pass variables and return a result-\n  \" X = SUBSTR()\n\n\n2- Location of Procedures\n\n  A- Internal\n  \" LABEL\n  \" PROCEDURE\n  \" RETURN/RESULT\n\n  B- Built-in\n  \" 66+ standard REXX functions, ex- WORD()\n\n  C- External\n  \" Located outside of REXX program-\n  \" Could be written in a different language-\n  \" Program name, no LABEL, limited to 8 characters-\n  \" EXIT/RC\n  \" RETURN/RESULT\n\n\n3- Search Order\n\n  A- Internal\n  B- Built-in\n  C- External\n\n\n4- Arguments\n\n  A- By Reference\n    \" Variable name, subroutine can modify variable\n\n  B- By Value\n    \" Only values of variables are passed- Subroutine is NOT able\n      to modify the actual variable-\n\n5- Scope of Variables\n\n  A- Global\n\n  B- Local\n\n6- Procedure Statement\n\n  \" PROCEDURE <EXPOSE> <variables>\n  \" Optional\n  \" Must be the first instruction executed after the CALL or\n    function invocation - that is, it must be the first instruction\n    following the label-\n  \" Protects variables from being used/accessed-\n  \" EXPOSE allows only specific variables to be accessed-\n\n\n7- Items of Interest\n\n  \" Used mainly to break down a large program into more\n    manageable sections and prevent duplication of code-\n  \" A function must return a value, while a subroutine usually\n    does not-\n  \" A subroutine may RETURN a numeric or alpha value- That value\n    is placed in a special variable, RESULT, after the CALL- EXIT\n    should only be used to return a number, which is stored in the\n    RC variable-\n  \" If the procedure was invoked by CALL ABC() and no expression\n    was provided on RETURN, then RESULT is dropped and becomes\n    undefined-\n  \" Placing quotes around the CALLs to external or REXX built-in\n    routines will cause the interpreter to NOT look in the file for\n    a label that matches the referenced routine-\n  \" You can override built-in REXX functions by coding an\n    internal procedure with the same name in your REXX program-\n\n8- Items of Interest (Cont-)\n\n  \" A label can be up to 249 characters followed by a colon-\n  \" A label can start with a numeric character, or just be a\n    number, unlike a variable- Numeric labels are allowed ' 4: or\n    8:\n  \" If there are duplicate labels within a program, only the\n    first is ever used- The second occurrence of a label is not an\n    error, but will never be executed-\n  \" As REXX encounters labels it stores the label and address in\n    the \"Look-Aside\" Buffer- On sub-sequent searches for labels, it\n    will use the \"Look-Aside\" buffer-\n  \" A maximum of 20 parameters can be passed to a function or\n    subroutine-\n  \" In REXX arguments are always passed by value- This means that\n    arguments are evaluated when the procedure is called and only\n    the resulting value is available to the procedure-\n  \" The ARG statement functions like the ARG in the main program,\n    but you may want to use commas in the function/subroutine to\n    separate the different items of data- It is recommended to\n    follow this standard- If you use commas in the call, then use\n    them in the ARG-\n  \" In subroutine the PARSE ARG should have as many commas as the\n    corresponding CALL instruction or function reference-\n  \" The ARG or PARSE ARG statement need not occur at the\n    beginning of the subroutine- It can be anywhere within the\n    subroutine- And it can be used several times to parse the\n    arguments in different ways-\n  \" There is no way to detect omitted arguments with PARSE ARG-\n    Variables corresponding to omitted arguments are simply\n    assigned NULL strings-\n  \" When coding functions always pass information to a procedure\n    through an ARG statement and give back an answer with RETURN-\n  \" Use ARG() to determine the number of arguments passed to a\n    procedure- Also, to obtain the 1st argument you can use ARG(1)-\n    Just remember the ARG function depends on using the comma as a\n    delimiter between arguments-\n  \" Procedures can overlap, that is, one procedure could \"flow\n    into\" another without the label of the second procedure being\n    invoked by a CALL or function reference- This provides for\n    alternate entry points into a procedure-\n  \" Avoid sharing variables with the main part of the program- By\n    doing this you can use the function internally or externally\n    with little or no changes needed-\n  \" Variable lists can be used in the PROCEDURE command (ex-\n    PROCEDURE EXPOSE (VARLIST), where VARLIST = \"V1 V2 V3\")\n  \" The names listed in an EXPOSE list are exposed in order from\n    left to right- When you expose a single element in an array,\n    you must explicitly specify it (ARRAY-2) or pass the tail\n    variable ahead of the array element (PROCEDURE J ARRAY-J)-\n  \" When the \"PROCEDURE\" instruction is encountered, REXX will\n    start a new variable (symbol) table by saving the pointer to\n    the contents to the caller's table and restoring the caller's\n    table upon return-\n  \" External Procedures have no PROCEDURE statement and label-\n\n9- Items of Interest (Cont-)\n\n  \" An internal function/subroutine inherits the settings from\n    the main program ' ADDRESS, NUMERIC DIGITS/FUZZ, TRACE, etc-\n    However, only changes made in the internal procedure to these\n    settings affects only the internal procedure- REXX restores\n    them at the RETURN, so the main program will see the settings\n    just as it left them-\n  \" The variable \"RESULT\" will be set to an un-initialized state\n    (DROPed) if the called routine does not return any values-\n  \" If you want to know the line number of the statement that\n    called the function/subroutine, examine the special variable\n    SIGL-\n  \" Quotes around a function means that it is a built-in or\n    external function, not an internal user-written function-\n  \" Note that there may NOT be a space between the name of the\n    function and the left parenthesis following it-\n  \" When two or more elements of the data are passed to the\n    function, they are separated by commas, NOT spaces-\n  \" Some functions have defaults and need nothing in parenthesis\n    ' TIME()\n  \" All REXX built-in functions may be \"CALLed\" like subroutines\n    too- When this is done, the answer is placed in the special\n    variable \"RESULT\"-\n  \" INTERPET and VALUE() are used to execute REXX and host\n    commands that are built dynamically-\n\n\n10- Examples\n\nPROCFUN1   - Internal Function, passing variables\nPROCFUN2   - Internal Function, displaying RESULT\n\nPROCSUB1   - Subroutine using global variables\nPROCSUB2   - Subroutine using global variables and passing argument-\nPROCSUB3   - Subroutine using local variables\nPROCSUB4   - Subroutine using local variables and passing argument\nPROCSUB5   - Subroutine using local variables, but exposing some\n             variables\nPROCSUB6   - Subroutine using local variables, passing arguments\n             with commas\nPROCSUB7   - Subroutine using local variables, selecting only\n             certain arguments-\nPROCSUB8   - Subroutine using local variables, selecting only\n             certain arguments-\nPROCSUB9   - Subroutine using local variables, exposing an array-\nPROCSUBA/B - External subroutine, passing variables using ISPF\nPROCSUBC   - Subroutine using variable list\nPROCSUBD/E - Subroutine with quotes around the name\n\n\n\nBuilt-in Functions\n\n\n1- Function Definitions\n\nABBREV     Test whether string is an abbreviation\nABS        Return absolute value\nADDRESS    Return name of current environment\nARG        Return argument\nBITAND     Logical AND\nBITOR      Logical OR\nBITXOR     Logical Exclusive-OR\nB2X        Convert binary data to hexadecimal\nCENTRE     Centralize Data (CENTER)\nCOMPARE    Compare\nCONDITION  Return Condition\nCOPIES     Replicate data\nC2D        Convert character data to decimal\nC2X        Convert character data to hexadecimal\nDATATYPE   Determine data type\nDATE       Return current date\nDELSTR     Delete substring\nDELWORD    Delete one or more words\nDIGITS     Return the NUMERIC DIGITS setting\nD2C        Convert decimal data to character\nD2X        Convert decimal data to hexadecimal\nERRORTEXT  Return message text\nFIND       Search for word (non-SAA)\nFORM       Determine NUMERIC FUZZ\nINDEX      Search for substring (non-SAA)\nINSERT     Insert substring\nJUSTIFY    Justify string of words (non-SAA)\nLASTPOS    Determine last position of phrase\nLEFT       Left-align string\nLENGTH     Determine length of string\nLINESIZE   Return the maximum width of a terminal line (non-SAA)\nMAX        Determine the maximum of a series of numeric values\nMIN        Determine the minimum of a series of numeric values\nOVERLAY    Overlay part of a string with a phrase\nPOS        Search for substring\nQUEUED     Determine the number of entries in the queue\n\n\nRANDOM     Generate a pseudo-random number\nREVERSE    Reverse the sequence of data\nRIGHT      Right-align string\nSIGN       Determine numeric sign\nSOURCELINE Return \"program line\"\nSPACE      Insert fill-character between words\nSTRIP      Remove padding-characters at the start or end of a string\nSUBSTR     Extract substring\nSUBWORD    Extract series of words from word-string\nSYMBOL     Determine the status of a symbol\nTIME       Return the current time-of-day\nTRACE      Return and set the current trace mode\nTRANSLATE  Translate\nTRUNC      Truncate numeric value\nUSERID     Return Userid (non-SAA)\nVALUE      Return and set the contents of a symbol\nVERIFY     Test whether only characters in phrase are present in string\nWORD       Fetch word\nWORDINDEX  Determine the position of a word in a string of words\nWORDLENGTH Determine word length\nWORDPOS    Determine word-number of a word in word-string\nWORDS      Determine number of words in word-string\nRANGE      Define a range of hexadecimal to binary\nX2B        Convert hexadecimal to binary\nX2C        Convert hexadecimal to character\nX2D        Convert hexadecimal to decimal\n\n\n\n2- Examples\n\nCENTER    - COPY and CENTER to display text\n\nDATATYPE  - DATATYPE and WORD to display text\n\nFORMAT1   - FORMAT, CENTER and COPY\nFORMAT2   - FORMAT with NUMERIC DIGITS\nFORMAT3   - FORMAT using numeric\n\nPOS1      - POS, forward search of text\nPOS2      - POS, backward search of text\n\nSUBSTR    - SUBSTR, selected text by position\n\nTRANSLT1  - TRANSLATE lower case to upper case\nTRANSLT2  - TRANSLATE upper case to lower case\nTRANSLT3  - TRANSLATE phone number to characters\n\nWORD1     - WORDS, display no of words in a variable\nWORD2     - WORDINEX, display the nth word in a variable\nWORD3     - WORDPOS, find a word in a variable\nWORD4     - WORDLENGTH, how large is a particular word\n\nPDSATTR   - LISTDSI, display PDS/Seq file attributes\n\nDATE()\n\n\n\n1- Syntax\n\nDATE(output-format, input-date, input-date-format)\n\n\n2- Date Formats\n\nBase The number of complete days (that is, not including the\ncurrent day) since and including the base date, 1 January 0001,\nin the format: dddddd (no leading zeros or blanks)-\n\nThe expression DATE('B')//7 returns a number in the range 0-6\nthat corresponds to the current day of the week, where 0 is\nMonday and 6 is Sunday-\n\nThe base date of 1 January 0001 is determined by extending the\ncurrent Gregorian calendar backward (365 days each year, with an\nextra day every year that is divisible by 4 except century years\nthat are not divisible by 400)- It does not take into account any\nerrors in the calendar system that created the Gregorian calendar\noriginally-\n\nCentury The number of days, including the current day, since and\nincluding January 1 of the last year that is a multiple of 100 in\nthe form: ddddd (no leading zeros)- Example: A call to DATE(C) on\nMarch 13 1992 returns 33675, the number of days from 1 January\n1900 to 13 March 1992- Similarly, a call to DATE(C) on 2 January\n2000 returns 2, the number of days from 1 January 2000 to 2\nJanuary 2000-\n\nWill not accept an input date-  Only valid for today's date-\n\nDays The number of days, including the current day, so far in\nthis year in the format: ddd (no leading zeros or blanks)-\n\nEuropean Date in the format: dd/mm/yy\n\nJulian Date in the format: yyddd-\n\nWill not except an input date-  Only valid for today's date-\n\n\nMonth Full English name of the current month, for example, August-\n\nWill not except an input date-  Only valid for today's date-\n\nNormal Date in the format: dd mon yyyy- This is the default- If\nthe active language has an abbreviated form of the month name,\nthen it is used (for example, Jan, Feb, and so on)- If Normal is\nspecified (or allowed to default) for date_format2, the\ninput_date must have the month (mon) specified in the English\nabbreviated form of the month name-\n\nOrdered Date in the format: yy/mm/dd (suitable for sorting, and\nso forth)-\n\nStandard Date in the format: yyyymmdd (suitable for sorting, and\nso forth)-\n\nUSA  Date in the format: mm/dd/yy-\n\nWeekday The English name for the day of the week, in mixed case,\nfor example, Tuesday-\n\nWill not except an input date-  Only valid for today's date-\n\n\n\n3- Items of Interest\n\n  \" The first call to DATE or TIME in one clause causes a time\n    stamp to be made that is then used for all calls to these\n    functions in that clause- Therefore, multiple calls to any of the\n    DATE or TIME functions or both in a single expression or clause\n    are guaranteed to be consistent with each other-\n\n  \" Input dates given in 2-digit year formats (i-e- European,\n    Julian, Ordered, USA) are interpreted as being within a 100 year\n    window as calculated by:\n\n  (current_year - 50) = low end of window\n  (current_year + 49) = high end of window\n\n\n4- Examples\n\nDATE01\nDATE02\nDATE03\n\n\n\nNull Variables\n\n1- ARG() Syntax\n\nARG()\nARG(##, E | O )\n\nWhere ## is the argument number\n            E  - does argument Exist\n            O  - is argument Omitted\n\n  This will return a value of zero for false or one for true-\n\n  The ARG() function is dependent on a comma, as the delimiter,\n  between arguments-\n\n\n2- LENGTH() Syntax\n\nLENGTH(<variable/text>)\n\n\n3- Different Ways to Check\n\nIF (VAR1 = \"\") THEN\n     SAY \"NULL VARAIBLE\"\n\nIF (LENGTH(VAR1) > 0) THEN\n     SAY \"NULL VARIABLE\"\n\nIF (ARG(1,E) = 0) THEN\n     SAY \"NULL VARIABLE\"\n\nIF (ARG(1,O)) THEN\n     SAY \"NULL VARIABLE\"\n\nADDRESS \"ISPEXEC VGET(Z)\"\nIF (VAR1 = Z) THEN\n     SAY \"NULL VARIABLE\"\n\n\nADDRESS\n\n\n\n1- Syntax\n\nADDRESS <environment>\nADDRESS VALUE <variable>\nADDRESS <environment> <command>\n<environment> <command>\n\nADDRESS()\n\n\n2- Environments\n\nTSO\nISPEXEC\nISREDIT\nMVS\nCONSOLE\n\n\n3- Statements\n\n      \"ISPEXEC VGET(var1 var2)\"\n      \"ISPEXEC \"SELECT PGM(abc)\"\n      \"TSO ALLOCATE FI(ddname) DA('dsname') SHR\"\n\n      ADDRESS TSO \"ALLOCATE FI(ddname) DA('dsname') SHR\"\n      ADDRESS ISPEXEC \"SELECT PGM(abc) PARM(parms)\"\n      ADDRESS TSO \"FREE FI(ddname)\"\n\n      ADDRESS ISPEXEC\n       \"VGET (var1 var2)\"\n       \"SELECT PGM(abc)\"\n      ADDRESS TSO\n       \"ALLOCATE FI(ddname) DA('dsname') SHR\"\n       \"FREE FI(ddname)\"\n\n      ENVIRON = \"TSO\"\n      ADDRESS VALUE ENVIRON\n       \"ALLOCATE FI(ddname) DA('dsname') SHR\"\n\n\n4- Items of interest\n\n  \" The default environment is TSO-\n  \" If the named environment doesn't exist, the action of the\n    instruction is undefined-\n  \" It is a good idea to enclose all non-variable parts of the\n    command in quotation marks, because a word in the text:\n    \u00f3 May have been previously used as a variable in the program\n    \u00f3 May be a REXX keyword (ex- SELECT, PUSH, DROP, etc-)\n    \u00f3 Or one day the REXX language may introduce a new keyword-\n  \" You DO NOT need to place quotes around the environment name-\n    REXX treats the word immediately after the ADDRESS command as a\n    reserved word- REXX will not translate it as a variable-\n  \" Using the ADDRESS instruction without specifying an environment\n    or supplying an expression informs REXX to switch back to the\n    last subcommand environment used- In other words, using ADDRESS\n    as a complete statement will switch between the currently active\n    environment and the previously active environment-\n  \" If REXX sees quotes or apostrophes around the 1st word in the\n    sentence, and the instruction is NOT an assignment, REXX will\n    pass the command to the external environment- An unknown REXX\n    command that is not in quotes will still be passed to the\n    external environment, but this action will be less efficient than\n    using quotes around the command-\n  \" Return codes are passed back in a variable called RC-\n  \" Return Codes\n    \u00f3 RC = 0 --- Worked\n    \u00f3 RC = -3 ---- Command Not Found\n    \u00f3 RC = -## -- System Abend Code (negative numbers)\n    \u00f3 RC = + ## --- User Abend Code (positive numbers)\n  To convert system abend codes to there original form use\n  C2X(ABS(RC))\n  \" You can ask TSO if an environment is available with the below\n    TSO command:\n    \u00f3 SUBCOM environment\n  A RC=0 means the environment is available-\n\n\n5- Examples\n\nBROWSE - Browse a member\nEDIT   - Edit a member\n\n\nDebugging\n\n1- Three modes of Tracing\n\nA- Passive Tracing\n\n  \" TRACE <char>\n\n\nB- Interactive Tracing\n\n  \" TRACE  ?<char>\n\n  \" Items of Interest\n\n    \u00f3 REXX will pause after executing most statements, except:\n      o Clauses consisting of END, THEN, ELSE, OTHERWISE, RETURN,\n        EXIT, SIGNAL, and CALL-\n      o Clauses that raise a condition for which there is an\n        enabled condition handler or that cause a SYNTAX error-\n    \u00f3 User is then prompted for input-  The input can be\n        Null Line       Execute next instruction\n        Equal Sign (=)  Re-execute previous line\n        REXX statement  Ex- A=2, B=0, C=A+B, SIGNAL <label>, EXIT,\n                        TRACE O, SAY ABC, etc--\n        TRACE ?         Turn off interactive tracing-\n        TRACE ##        Specify a positive number- Tracing\n                        will display and proceed for that\n                        number of clauses without pausing-\n        TRACE -##       Specify a negative number- Tracing\n                        will NOT display and proceed for that that\n                        number of clauses without pausing-\n    \u00f3 If you need to examine a large number of variables you\n      might even provide special subroutines in your program to\n      display the data- These routines can be invoked from a trace\n      prompt with a CALL instruction-\n    \u00f3 To display source lines execute:\n        DO J = <from line no> TO <to line no>; SOURCELINE(J);END\n\nC- Command Inhibition\n\n  \" TRACE !<char Syntax >  or TRACE !?<char>\n\n  \" Items of interest\n\n  \u00f3 Inhibits host command execution- For example the TRACE !R\n    causes commands to be traced but not processed-\n  \u00f3 As each command is bypassed, the REXX special variable RC is\n    set to zero-\n  \u00f3 You can use this action for debugging potentially destructive\n    programs-\n  \u00f3 When in interactive debugging mode any commands entered\n    manually will be processed-\n  \u00f3 While in interactive debugging mode (TRACE !?R) you can\n    switch off command inhibition, by issuing a TRACE !- Repeated\n    use of the !  prefix, therefore, switches you alternately in or\n    out of command inhibition mode-\n\n\n  2- Items of Interest\n\n  \" Prefix options (? or R) can be specified in any order-\n  \" When tracing in REXX, the numbers being displayed are the\n    edit line numbers-\n  \" Can have several TRACE statements in a REXX program- There is\n    no limit-\n  \" Trace actions are automatically saved across subroutine and\n    function calls-\n  \" If available at the time of execution, comments associated\n    with a traced clause are included in the trace, as are comments\n    in a null clause, if you specify TRACE A, R, I, or S-\n  \" When a loop is being traced, the DO clause itself is traced\n    on every iteration of the loop-\n  \" You can retrieve the trace actions currently in effect by\n    using the TRACE built-in function, TRACE()-\n  \" When entering a REXX command in interactive mode, the\n    statement must be complete (ie- DO--END, IF -- THEN-- ELSE)\n  \" To display lines of code while in interactive mode:\n      \u00f3 DO I=1 TO 5; SAY SOURCELINE(I); END\n  \" When executing a host command in interactive mode- The host\n    command will \"NOT\" place its return code in the special\n    variable RC- Only host commands in the REXX program will place\n    a return code in RC-\n  \" \"TRCE !R\" ' There is a drawback to this, there may be times\n    that a non-zero value is expected-\n\n\nTRACE\n\n1- TRACE  <parm>\n\nAll           Traces (that is, displays) all clauses before execution-\n\nCommands      Traces all commands before execution- If\n              the command results in an error or failure, then\n              tracing also displays the return code from the\n              command-\n\nError         Traces any command resulting in an error\n              or failure after execution, there with the\n              return code from the command-\n\nFailure       Traces any command resulting in a\n              failure after execution, together with the\n              return code from the command- This is the same\n              as the Normal option-\n\nIntermediates Traces all clauses before execution-\n              Also traces intermediate results during evaluation\n              of expressions and substituted names-\n\nLabels        Traces only labels passed during execution-\n              This is especially useful with debug mode,\n              when the language processor pauses after each\n              label- It also helps the user to note all\n              internal subroutine calls and transfers of\n              control because of the SIGNAL instruction-\n\nNormal        Traces any command resulting in a\n              negative return code after execution, together\n              with the return code from the command- This is\n              the default setting-\n\nOff           Traces nothing and resets the special prefix\n              options (described later) to OFF- Please consider\n              the Note given with the description of the MSG\n              function on topic 4-4-3-\n\nResults       Traces all clauses before execution-\n              Displays final results (contrast with\n              Intermediates, preceding) of evaluating an\n              expression- Also displays values assigned during\n              PULL, ARG, and PARSE instructions- This setting is\n              recommended for general debugging-\n\nScan          Traces all remaining clauses in the data\n              without them being processed- Basic checking\n              (for missing ENDs and so forth) is carried\n              out, and the trace is formatted as usual- This\n              is valid only if the\n\n              TRACE S clause itself is not nested in any\n              other instruction (including INTERPRET or\n              interactive debug) or in an internal routine-\n\n\n\nTRACE  OUTPUT\n\n1- How to read the TRACE OUTPUT\n\n  A- A line number precedes the first clause traced on any line- If\n     the line number is greater than 99999, the language processor\n     truncates it on the left, and the ?  prefix indicates the\n     truncation- For example, the line number 100354 appears as\n     ?00354- All lines displayed during tracing have a three-character\n     prefix to identify the type of data being traced- These can be:\n\n*-*  Identifies the source of a single clause, that is, the data\n     actually in the program-\n\n+++  Identifies a trace message- This may be the nonzero return\n     code from a command, the prompt message when interactive debug is\n     entered, an indication of a syntax error when in interactive\n     debug, or the trace back clauses after a syntax error in the\n     program-\n\n>>>  Identifies the result of an expression (for TRACE R) or the\n     value assigned to a variable during parsing, or the value\n     returned from a subroutine call-\n\n>->  Identifies the value \"assigned\" to a placeholder during parsing\n\n  B- The following prefixes are used only if TRACE Intermediates\n     is in effect:\n\n>C>  The data traced is the name of a compound variable, traced\n     after substitution and before use, provided that the name had\n     the value of a variable substituted into it-\n\n>F>  The data traced is the result of a function call-\n\n>L>  The data traced is a literal (string, un-initialized\n     variable, or constant symbol)-\n\n>O>  The data traced is the result of an operation on two terms-\n\n>P>  The data traced is the result of a prefix operation-\n\n>V>  The data traced is the contents of a variable-\n\n\n\nTRACE TIPS\n\n1- Receive an argument to turn trace on\n\nARG VAR1 VAR2 -\nIF (VAR1 = \"TRACE\") THEN\n INTERPRET VAR1 VAR2\n\n\n2- Subroutines to assist when using Interactive Trace Mode\n\n    A- Place the below subroutines at the bottom of your REXX- When\n       you are in interactive trace mode just type in \"CALL\n       DISPVARS\" or \"CALL DISPSRC 5 10\"\n\nDISPVARS:\n  SAY \"COUNTER = \"COUNTER\n  SAY \"FIRSTIME = \"FIRSTIME\n  SAY \"COLNO     =\" COLNO\nRETURN\n\nDISPSRC:\n  ARG BEGLINE ENDLINE -\n  IF (BEGLINE = \"\") THEN DO\n   BEGLINE = 1\n   ENDLINE = 20\n  END\n  DO I = BEGLINE to ENDLINE\n   SAY SUBSTR(SOURCELINE(I),1,79)\n  END\nRETURN\n\n\n\nBatch\n\n1- PGM=IKJEFT01\n\nA- Invoking a REXX Program\n\" PARM=<rexx pgm>\n\" PARM='ISPSTART CMD(rexx pgm)'\n\" SYSTSIN DD card\n              ISPSTART CMD(********) BDBCS\n\nB- Can use TSO and ISPF Commands\n\n\n2- PGM=IRXJCL\n\n1- Return Code\n\n2- Cannot use ISPF or TSO Commands\n\n\n3- Items of Interest\n\n  \" Background processing does not interfere with a person's use of\n    the terminal-\n  \" You can run time-consuming and low priority execs in the\n    background, or execs that do not require terminal interaction-\n  \" When an exec runs in the TSO/E background or MVS batch, it has\n    the same use of the data stack as an exec that runs in the TSO/E\n    foreground- The PULL instruction, however, works differently when\n    the data stack is empty- In the TSO/E foreground, PULL goes to\n    the terminal for input- In the TSO/E background and MVS batch,\n    PULL goes to the input stream as defined by ddname SYSTSIN- When\n    SYSTSIN has no data, the PULL instruction returns a null- If the\n    input stream has no data and the PULL instruction is in a loop,\n    the exec can result in an infinite loop-\n  \" When submitting a TSO/E background task it assumes your RACF\n    attributes-\n  \" To set the Return Code:\n  ADDRESS ISPEXEC\n  ZISPFRC = 8\n  \"VPUT (ZISPFRC)\"\n\n\nIKJEFT01\n\n\n1- Generic IKJEFT01\n\n//BATCHTSO EXEC PGM=IKJEFT01,PARM='REXXPGM REXXPARM',\n//             REGION=4M,DYNAMNBR=50\n//SYSEXEC  DD  DISP=SHR,DSN=<DSNAME WHERE  REXX RESIDES>\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  DUMMY\n\n\n2- IKJEFT01 using TSO Logon Procs\n\n//TSOPROC JCLLIB ORDER=('sign-on-proclib')\n//$ISDUSR     EXEC SCP,PARM-$ISDUSR=''\n//$ISDUSR-SYSTSPRT DD SYSOUT=*\n//$ISDUSR-ISPLOG DD DSN=&&ISPLOG,\n//             DISP=(NEW,DELETE,DELETE),\n//             UNIT=VIO,SPACE=(CYL,(2,5,1),RLSE)\n//$ISDUSR-ISPLIST DD DSN=&&ISPLIST,\n//             DISP=(NEW,DELETE,DELETE),\n//             UNIT=VIO,SPACE=(CYL,(2,5,1),RLSE)\n//$ISDUSR-ISPPROF DD DSN=&&ISPPROF,\n//             DISP=(NEW,DELETE,DELETE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),\n//             UNIT=VIO,SPACE=(CYL,(5,5,25),RLSE)\n//$ISDUSR-SYSTSIN DD *\n     ISPSTART CMD(********) BDBCS\n\n\n3- Items of Interest\n\n  \" In both examples if you want to receive an MVS Return Code,\n    execute the REXX Program as a parameter to IKJEFT01, instead of\n    using SYSTSIN-\n  \" Example no- 2 is the preferred method of executing a REXX\n    because it will have access to all ISPF datasets and it is\n    easier to maintain- The System Programmers will maintain the\n    TSO sign-on procs-\n  \" In Example no 2 we allocate a temporary ISPLOG, ISPLIST and\n    ISPPROF to prevent error messages from being displayed in our\n    SYSTSPRT-\n  \" The REXX program can be located in either the SYSPROC or\n    SYSEXEC DD card-\n\nIRXJCL\n\n\nReason you would want to use IRXJCL is it will always give you an\nMVS return code and does not need to allocate a lot of datasets-\nThe negative part of using IRXJCL, is that your REXX must not\ncall any ISPF routines (bummer!)\n\n\nThis information is in book manager-  Below is how I found it:\n\n1- Invoked Book Manager\n2- Select \"IKJ2BI02    TSO/E V2R5\"\n3- Search for \"IRXJCL\"\n4- Select \"IKJ2C307 TSO/E V2R5 REXX/MVS User's Guide\"\n\n\nBelow is what it said:\n\n2-6-3-2 Using IRXJCL to run an EXEC in MVS Batch\n\nTo run a REXX EXEC in MVS batch, you must specify program IRXJCL\nin the JCL EXEC statement- SYSEXEC is the default load DD-\nRunning an EXEC in MVS batch is similar in many ways to running\nan EXEC in the TSO/E background, however, there are significant\ndifferences- One major difference is that the EXEC running in MVS\nbatch cannot use TSO/E services, such as TSO/E commands and most\nof the TSO/E external functions- Additional similarities and\ndifferences appear in \"summary of TSO/E background and MVS batch\"\nin topic 2-6-4-\n\nThe following series of examples show how an MVS batch job named\nuserida invokes a REXX EXEC in a PDS member named\n\"userid-myREXX-EXEC(JCLTEST)\"-\n\nThe member name, JCLTEST, is specified as the first word after\nthe PARM parameter of the EXEC statement- Two arguments, test and\nIRXJCL, follow the member name- Output from the EXEC goes to an\noutput data set named \"userid-IRXJCL-output\", which is specified\nin the SYSTSPRT DD statement-\n\nThe SYSTSIN DD statement supplies the EXEC with three lines of\ndata in the input stream- This EXEC also uses EXECIO to write a\n1-line timestamp to the end of the sequential data set\n\"userid-trace-output\", which is allocated in the OUTDD statement-\n\n//userida   JOB  'account,dept,bldg','programmer  name',\n//               CLASS=J,MSGCLASS=X,MSGLEVEL=(1,1)\n//*\n//MVSBATCH   EXEC  PGM=IRXJCL,\n//                       PARM='jcltest test IRXJCL'\n//*                                   |         ||                   |\n//*   name of  EXEC       <----> |                  |\n//*   argument                            <----------->\n//OUTDD       DD   DISP=SHR,DSN=userid-trace-output\n//SYSTSPRT  DD   DISP=SHR,DSN=userid-IRXJCL-output\n//SYSEXEC    DD   DISP=SHR,DSN=userid-myREXX-EXEC\n//SYSTSIN     DD     *\n  first  line  of  data\n  second  line  of  data\n  third  line  of  data\n/*\n//\n\n\n1- Items of interest\n\n\" The default environment is MVS-\n\n\nRACF\n\n\n\n1- RACF the following\n\n\" The datasets where the REXX, ISPF Panels, Skeletons, Tables,\n  and Messages reside-\n\" The TSO sign-on proc-\n\" Data files-\n\" Password File-\n\n\n2- RACF Commands\n\n    A- List all sign-on procs\n\n        TSO  SR  CLASS(TSOPROC)\n\n    B- List RACF attributes for a single TSO Sign-on\n\n        TSO  RL  TSOPROC <proc-name> ALL\n\n    C- List RACF attributes for a dataset\n\n        TSO  LD  DATASET('dsname')  ALL\n\n    D- List RACF attributes for a userid\n\n        TSO  LU  <userid>\n\n    Note:  The Userid that executes these commands must have the\n           Auditor Bit turned ON-\n\n\n3- Encrypt the Password\n\n\" Buy or create software that will encrypt the password-\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REXXEX": {"ttr": 9990, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08B\\x00\\x95\\x00\\x95\\x00\\x00\\xe3\\xc5\\xe7\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:42:00", "lines": 149, "newlines": 149, "modlines": 0, "user": "TEXT"}, "text": "                          REXX - Statements\n\n\n\n                                      Syntactically      Execution\nStatement(s)                          Correct? (Yes/No)  Error? (Yes/No)\n\n1 /*-----------------------------------*/\n2 /*   REXX pgm with displays  */\n3 /*-----------------------------------*/   ________     ________\n\n\n/* Comment1 /* Comment2 */ */               ________     ________\n\n\nVAR1 = Twas the night before Christmas      ________     ________\n\n\nA = B = C = D = \"HELLO\"                     ________     ________\n\n\nSAY \"HELLO!\";;;;\"SAY \"GOOD-BYE\"             ________     ________\n\n\nPULL = \"HELLO DOLLY\"                        ________     ________\n\n\nX = 23000000\nY = X*23                                    ________     ________\n\n\nIF (X = 1)\n     THEN\n      DO\n          SAY \"X = 1\"\n      END                                   ________     ________\n\n\nX = 1\nIF (X = 1, 2, 3) THEN\n      SAY \"HELLO\"                          ________     ________\n\n\n                                      Syntactically      Execution\nStatement(s)                          Correct? (Yes/No)  Error? (Yes/No)\n\nX = \"1 2 3\"\nIF (X = 1 2 3) THEN\n     SAY \"HELLO\"                           ________     ________\n\n\nIF (X=1); THEN; DO; SAY \"HELLO\"; END       ________     ________\n\n\nIF (X=1) THEN\n     SAY \"TRUE\"\nELSE\n      ;                                    ________     ________\n\n\nDO I = 1 WHILE (J < 10)\n      <statements>\nEND                                        ________     ________\n\n\nX = 10\nSELECT\n      WHEN (X = 1) THEN\n SAY \"X = 1\"\nEND                                        ________     ________\n\n\nX = 3\nSELECT\n     WHEN (X = 1) THEN\n        SAY \"X = 1\"\n     WHEN (X = 2) THEN\n        SAY \"X = 2\"\n     OTHERWISE\n         SAY \"HELLO\"\n         SAY \"YES\"\nEND                                        ________     ________\n\n\n\n\n                                      Syntactically      Execution\nStatement(s)                          Correct? (Yes/No)  Error? (Yes/No)\n\nVAR1 = \"?R\"\nTRACE VAR1                                 ________     ________\n\n\nLABEL1:  SAY \"HELLO!\"                      ________     ________\n\n\nLABEL1:  PROCEDURE EXPOSE X                ________     ________\n\n\nLABEL1:  PROCEDURE EXPOSE ARRAY.J\nSAY ARRAY.J                                ________     ________\n\n\nA = 10\nB = 20\nVARLIST = \"A B C\"\nCALL LABEL1\n<statements>\nEXIT\nLABEL1:\n  PROCEDURE EXPOSE (VARLIST)\n  SAY A B C\nRETURN                                     ________     ________\n\n\nEXIT \"HELLO\"                               ________     ________\n\n\nRETURN \"Santa Clause\"                      ________     ________\n\n\nCALL \"ABC\"                                 ________     ________\n\n                                      Syntactically      Execution\nStatement(s)                          Correct? (Yes/No)  Error? (Yes/No)\n\nCALL ABC 124 ABC\n  <statements>\nEXIT\nABC:  PROCEDURE\n   ARG VAR1 VAR2\n   <statements>\n   ARG WORK1 WORK2\n   <statements>\nRETURN                                     ________     ________\n\n\nCALL 5\n  <statements>\nEXIT\n5:  PROCEDURE\n   <statements>\nRETURN                                     ________     ________\n\n\nVAR1 = \"ISPEXEC\"\nADDRESS VAR1\n\"DISPLAY PANEL(ABC)\"                       ________     ________\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REXXVAR": {"ttr": 9994, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00)\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\x08G\\x000\\x000\\x00\\x00\\xe3\\xc5\\xe7\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T08:47:29", "lines": 48, "newlines": 48, "modlines": 0, "user": "TEXT"}, "text": "                         REXX - Variables\n\n\n\n1. Define Variables\n\n    1   Var1 = help        me\n    2\n    3   Var2 = \"WHY ME \",\n    4               \"YES YOU\"\n    5\n    6   Var3 = \"The ski is blue\"||x\n    7\n    8   Var4 = 'Santa Clause'||,\n    9               \"is here\"\n    10\n    11  Var5 = \"Today is Monday\n    12              all day\"\n    13\n    14  Var6 = \"This is string 6,\n    15  And continuation of 6\"\n    16\n    17  Var7 = \"This is string 7,\n    18\n    19\n    20  And continuation of 7\"\n\n\n2. Results\n\n    Var1 = ____________________________\n\n    Var2 = ____________________________\n\n    Var3 = ____________________________\n\n    Var4 = ____________________________\n\n    Var5 = ____________________________\n\n    Var6 = ____________________________\n\n    Var7 = ____________________________\n\n    Var8 = ____________________________\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSO": {"ttr": 9996, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x01\\x04\\x16\\x8f\\x01\\x04\\x16\\x8f\\t\\x03\\x01.\\x01.\\x00\\x00\\xe3\\xc5\\xe7\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-16T00:00:00", "modifydate": "2004-06-16T09:03:04", "lines": 302, "newlines": 302, "modlines": 0, "user": "TEXT"}, "text": "\n                            Time\n\n                           Sharing\n\n                           Option\n\n\n                       (April 10, 2002)\n\n\n\n\n\nAgenda\n\n\n\n1- Online Help ------------------------------ 3\n\n\n2- Commands --------------------------------- 4\n\n\n3- Environment ------------------------------ 5\n\n\n4- ALTLIB ----------------------------------- 6\n\n\n5- REXX Functions --------------------------- 7\n\n\n6- EXECUTIL --------------------------------- 8\n\n\n\n\n                           ONLINE HELP\n                           ------ ----\n\n\n1- Help\n\n    A- TSO HELP <TSO cmd>\n    B- SYSHELP\n\n\n\n2- MVS/QuickRef\n\n    A- QW <TSO cmd>\n\nB- QW\n    \" Select \"C - Request Reference Information by Category\"\n        \" Select \"TSO - TSO/E Command & CLIST Syntax Descriptions\"\n            \" TSO/E CLIST SYNTAX V2R5 & PRIOR\n            \" TSO/SYSHELP  V2R6M0\n\n\n\n3- Book Manager\n\n    A- =V-BKM\n        \" Select \"IKJOSE30 - OS/390 V2R10-0 TSO/E\"\n          or \"IKJ2BI02 - TSO/E V2R5\"\n            \" Select \"IKJ3A330 - OS/390 V2R10-0 TSO/E REXX Reference\"\n            \" or \"IKJ3C310 - OS/390 V2R9-0 TSO/E REXX User's Guide\"\n\n\n\n\n                        COMMANDS\n                        --------\n\n1- IDCAMS\n\nALTER 'dsname' NEWNAME('new-dsname')\n                            Rename a dastaset\nDEFINE --                   Define VSAM and NONVSAM files\nDELETE 'dsname'             Delete a VSAM and NONVSAM dataset\nLISTCAT ENT('dsname')       List catalog entries\n\n\n\n2- PDS/Sequential Files\n\nCOMPARE 'dsname1' 'dsname2' Compare a PDS or sequential file\nLISTDS 'dsname'             Displays basic attributes\nLIST 'dsname'               Displays a PDS(MBR) or sequential file\nLISTSPC DATASET('dsname')   Reports allocated and unused space\n                              for PDS/Seq- files\n\n\n3- SMS\n\nHDELETE ('dsname')          Delete a migrated SMS file\nHMIGRATE ('dsname')         Migrate an SMS file\nHRECALL ('dsname')          Recall an SMS file\n\n\n\n4- TSO Session\n\nALLOCATE FILE('ddname') DATASET('dsname') SHR\n                           Dynamically allocate a file\nALTLIB ACTIVATE USER(EXEC) DATASET('dsname')\n                           Dynamically allocate a REXX/CLIST Dataset\nCALL 'dsname(pgm)' 'parms' Execute a program\nLISTALC                    Display allocated datasets\nSUBMIT 'dsname'            Submit a batch job\nFREE FILE(ddname)          Un-allocate a dataset\n\n\n\n                          ENVIRONMENT\n                          -----------\n\n\n1- Environments\n\n    A- Native\n        \" <cmd>\n    B- ISPF\n        \" TSO <cmd>\n        \" =6, \"COMMAND\"\n\n\n\n2- Sign-On Procs\n\n    \" Procedure\n    \" Acct Number\n    \" Size\n    \" Command\n\n\n\n3- Items of Interest\n\n    \" Use single quotes around DSN name-\n    \" When using TSO commands in REXX, the return code is placed\n      in a variable called RC- When using CLIST, the return code is\n      saved in variable &LASTCC-\n    \" If at all possible stay away from using the CALL command to\n      execute programs- Instead use ISPF SELECT command- This\n      prevents hard coding the DSN name-\n    \" Native TSO you cannot use any ISPF Services-\n\n\n\n4- Examples:\n\n    IDCAMS1  - Invoke IDCAMS and LISTCAT userid\n\n\n\n                             ALTLIB\n                             ------\n\n\n1- Syntax\n\n    ALTLIB ACTIVATE USER(EXEC|CLIST) DDNAME(ddname)\n\n    ALTLIB DEACTIVATE ALL\n    ALTLIB RESET\n\n\n2- Search Order\n\n    SYSUEXEC\n    SYSEXEC\n    SYSUPROC\n    SYSPROC\n\n\n3- Items of Interest\n\n\" The ddname must be SYSUEXEC or SYSUPROC\n\" When defining ALTLIB for EXECs, the datasets can only contain\n  REXXs-\n\" When defining ALTLIB for CLIST, the dataset can contain REXXs\n  and CLISTs\n\" Each concatenated data set must have the same record format\n  (RECFM) and logical record length (LRECL)-\n\" The SYSUEXEC and SYSUPROC datasets do not have to be the same\n  record format (RECFM) and logical record length (LRECL) as the\n  datasets allocated to SYSEXEC and SYSPROC-\n\" Must allocate the file before using ALTLIB- It does not\n  allocate the file like ISPF's LIBDEF command-\n\" Up to eight EXEC and CLIST requests can be stacked-\n\n\n\n                           REXX Functions\n                           ---- ---------\n\n\n1- OUTTRAP()\n\nA- Syntax\n    OUTTRAP(stem-, no-of-lines, CONCAT | NOCONCAT)\n    OUTTRAP('OFF')\n\nB- Description\n    \" Traps all TSO output messages and stores them to an array-\n    \" Stem-0 contains the number of elements\n    \" Do not use MSG('OFF') when using OUTTRAP()\n\n\n\n2- MSG()\n\n    A- Syntax\n        MSG('ON')\n        MSG('OFF')\n\n    B- Description\n        \" Allows or prevents TSO messages from being displayed-\n        \" MSG('ON') is the default\n\n\n\n3- Examples\n\n    OUTTRAP1 - Use LISTDS to obtain PDS attributes\n    IDCAMS2  - Invoke IDCAMS and display GDG number\n\n\n\n\n                             EXECUTIL\n                             --------\n\n\n1- Description\n\n\" Lets you change various characteristics that control how an\n  exec processes in the TSO/E address space-\n\n\n2- Syntax\n\nTSO  EXECUTIL <option>\n\nWhere <option> is\n HI - Halt Interruption\n HT - Halt Typing\n RT - Resume Typing\n TS - Trace Start\n TE - Trace End\n\n\n3- Items of Interest\n\n\" This is an excellent tool to debug REXX programs that did not\n  code for passing a TRACE argument to it-\n\" If you issue EXECUTIL TS from READY mode or ISPF, tracing is\n  started for the next exec you invoke- Tracing is then in effect\n  for that exec and any other execs it calls- Tracing ends when the\n  original exec completes or \"EXECUTIL TS\" is entered-\n\" If you already are executing an exec, say stacking commands\n  (ie- C34, C2), and you execute EXECUTIL TS it will trace all\n  execs until you execute out of the base exec- For example, if you\n  execute C34 and then REXXUTIL TS, all execs will be traced until\n  you exit the stacking command C34-\n\" EXECUTIL TS is identical to issuing a TRACE ?R within your REXX\n  program-\n\" Use HT (Halt Typing) to suppress terminal output generated by\n  an exec- The exec continues running- HT suppresses any output\n  generated by REXX instructions or functions (for example, the SAY\n  instruction) and REXX informational messages- REXX error messages\n  are still displayed-\n\" EXECUTIL affects only the current environment in which EXECUTIL\n  is issued- For example, if you are in split screen in ISPF and\n  issue EXECUTIL TS from the second ISPF screen to start tracing,\n  only execs that are invoked from that ISPF screen are traced- If\n  you invoke an exec from the first ISPF screen, the exec is not\n  traced-\n\n\n\n4- Examples\n\n    A- From ISPF\n\n      TSO EXECUTIL TS\n      TSO  <rexx pgm>\n\n    B- Invoking EXECUTIL while already in a REXX pgm\n\n      <rexx pgm  a>\n      TSO  EXECUTIL  TS\n      TSO  <rexx pgm B>\n      PF3 (END) out of C34\n    or\n      <rexx pgm a>\n      TSO  EXECUTIL  TS\n      TSO  <rexx pgm b>\n      TSO  EXECUTIL  TE\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT680/FILE680.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT680", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}