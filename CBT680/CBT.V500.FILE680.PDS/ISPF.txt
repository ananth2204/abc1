
                            Interactive
                              System
                            Productivity
                             Facility

                          (July 19, 2002)



Agenda



1- History ---------------------------------- 3
2- Books ------------------------------------ 4
3- Information ------------------------------ 6
4- Online Help ------------------------------ 7
5- Datasets --------------------------------- 8
6- LIBDEF ----------------------------------- 9
7- ISPF Services --------------------------- 11
8- Variables ------------------------------- 14
   A- System Variables --------------------- 15
   B- Control Variables -------------------- 19
9- Messages--------------------------------- 20
   A- Message Elements --------------------- 22
10- Panels --------------------------------- 24
   A- Display Services --------------------- 27
   B- Display Commands --------------------- 28
   C- Panel Sections ----------------------- 29
   D- ATTR TYPE() -------------------------- 33
   E- Panel Statements --------------------- 35
   F- Panel Variables ---------------------- 37
   G- Panel Functions ---------------------- 38
   H- Panel Control Variables -------------- 40
   I- Date Validation ---------------------- 41
   J- ISPPREP ------------------------------ 42
11- Skeletons ------------------------------ 43
   A- Control Statements ------------------- 45
12- Table Services ------------------------- 48
   A- Table Commands ----------------------- 49
   B- TBDISPL Variables -------------------- 52
13- Batch ---------------------------------- 54




History


" 1960-1970 Punch card/batch processing

" 1970-1975 Time Sharing Option (TSO) on line-oriented terminal
  devices

" 1975-1980 Structured Programming Facility (SPF) on visual
  display devices supporting screen oriented devices- The
  "structured" being derived from the powerful editor, which
  supported several commands for structuring source text- In
  addition, SPF offered full-screen support for the program
  development environment- Although SPF was only available as a
  complete package, dialog applications were developed using the
  dialogue support functions-

" 1981-These dialogue support functions were officially released
  as the Dialog Manager- The original SPF becoming the Program
  Development Facility (PDF)

" 1982 - Dialog Manager and Program Development Facility became
  two separate packages, with Dialog Manager being part of ISPF and
  PDF running as an application of ISPF- The Dialog Manager and
  ISPF have become synonymous- Most literature uses ISPF to refer
  to the Dialog Manager components-

" Version 3 brought limited workstation-like functionality in the
  form of pop-up windows and pull-down menus- The DTL (Dialog Tag
  Language) was introduced as alternative means of creating
  dialogue panels-

" Version 4 provided GUI (Graphical User Interface) that
  permitted a simple porting of the user-interface for mainframe
  applications to a workstation- ISPF and ISPF/PDF were combined to
  form a single product, ISPF- However, ISPF/PDF is still
  considered to be the program development interface (editor,
  Compilation, dialogue, etc-)


Books


ISPF, The Strategic Dialog Manager, J- Ranade Series
Author: Joseph A- Azevedo
Publisher: McGraw-Hill Book Company
ISBN:  0-07-002673-4
Cost:  $75-00
Rating:  ***********

Practical Usage of ISPF Dialog Manager
Author: Anthony S- Rudd
Publisher: Springer
ISBN:  3-540-19950-0
Cost:  $50-00
Rating:  *********

MVS TSO PART 1: Concepts and ISPF
Author: Doug Lowe
Publisher: Mike Muarch and Associates
ISBN:  ?-????????-???-??
Cost:  $36-50
Rating:  *******

MVS TSO PART 2: Commands and Procedures
Author: Doug Lowe
Publisher: Mike Muarch and Associates
ISBN:  0-911625-57-7
Cost:  $36-50
Rating:  *******

ISPF and ISPF/PDF V2R3 Experiences, IBM Red Book
Author:      IBM
Publisher:   IBM
ISBN:        GG24-3286-00
Cost:        $30-00
Rating:      ********

ISPF/REXX Development for Experienced Programmers
Author: Lou Marco
Publisher: CBM Books
ISBN:  1878956507
Cost:  $35-00
Rating:  ?


MVS/TSO Quick Reference Guide
Author: Olivia R- Carmandi
Publisher: MVS Training, Inc-
ISBN:  - None -
Cost:  $20-00
Rating:  ***

Book Look
Web:   www-booklook-com
Phone:  (845) 986-1981

Used and Out of Print Books
Web:    www-addall-com

Used Book Search
Web:  www-usedbooksearch-com

Compare 30 Online Book Stores
Web:  www-AllBookStore-com



Information


1- Supported Under

" VM    - Virtual Machine
" MVS   - Multiple Virtual Storage
" VSE   - Disk Operating System/Virtual Storage Extension
" PCs   - Personal Computer/Disk Operating System/OS2/Windows


2- Programming Languages

" Assembler - The most common basic programming language
" FORTRAN   - FORmula TRANslation
" C/370     - C language
" COBOL     - Common Business-Oriented Language
" PL/I      - Programming Language 1
" PASCAL    - (Named after Blaise Pascal)


3- Interpretive Command Languages

" CLIST  - TSO Command LIST
" EXEC2  - CMS EXEC2 Language
" REXX   - CMS REXX Language
" APL2   - A Programming Language 2


4- IBM

    Phone:   800-237-5511
    Email:   IBMLINK WWW2-IBMLINK-IBM-COM
    OS/390 Books WWW-1-IBM-COM/SERVERS/S390/OS390/BKSERV/
    Red Books WWW-REDBOOKS-IBM-COM/




Online Help

1- MVS/QuickRef

A- QW <ISPF cmd>

B- QW
" Select "C - Request Reference Information by Category"
รณ Select "PROGLANG - Programming Languages"
" Select any of the following:
" ISPF SERVICES  V5R2M2 & PRIOR
" ISPF VARIBLES  V5R2M2 & PRIOR
" OS/390 ISPF DTL SNTX  V2R5
" OS/390 ISPF SERVICES  V2R10


2- Book Manager

A- =V-BKM
" Select "ISPBKM10 - OS/390 V2R10-0 ISPF"
รณ Select any of the following:
" ISPREF04 - OS/390 V2R10-0 ISPF Reference Summary
" ISPSER04 - OS/390 V2R10-0 ISPF Services Guide


3- MODEL Command

A- Must be in EDIT mode
B- Type in "MODEL" on the command line and place the character
   "A" or "B" on the edit lines-
C- From "Model Classes" menu select any of below options:
  " MSGS     - Message format
  " PANELS   - Panel formats and statements
  " SKELS    - File tailoring control statements
  " REXX     - ISPF services in TSO/REXX"



Datasets

1- Displaying datasets concatenated to TSO/ISPF

      LISTA <ddname>

      TSO ISRDDN

      TSO ISRFIND

      TSO LISTALC STATUS

      ISPLIBD


2- DD Cards

SYSEXEC  - REXX
SYSPROC  - CLIST and REXX

ISPLLIB  - Load modules
ISPPLIB  - Panels, full-screen or pop-up
ISPMLIB  - Messages, text inserted over a panel
ISPSLIB  - Skeletons, preformatted output

ISPTLIB  - Table Input
ISPTABL  - Table Output

ISPFILE  - File Tailoring Output


3- Search Order

" LIBDEF/ALTLIB
" Sign-on Proc



LIBDEF

1- Syntax

LIBDEF <libtype> DATASET('dsname')

Where libtype is
 ISPLLIB - Load module library
 ISPPLIB - Panel library
 ISPMLIB - Message library
 ISPTLIB - Table input library
 ISPTABL - Table output dataset
 ISPSLIB - Skeleton library
 ISPFILE - File tailoring output file

It will then allocate the below DD names
 ISPLUSR - Load module library
 ISPPUSR - Panel library
 ISPMUSR - Message library
 ISPTUSR - Table output library
 ISPTABU - Table output library
 ISPSUSR - Skeleton library
 ISPFILU - Tailoring output file

LIBDEF <libtype>
" Remove dynamic LIBDEF allocation


2- Display all active/stacked LIBDEF definitions

" ISPLIBD


3- Items of Interest

" Allocating an ISPF profile library is not permitted using
  LIBDEF, because ISPPROF contains user-related data-
" Specifying DATASET() is the preferred method because it
  equivalent to an ALLOCATE command-
" LIBDEF are good for the duration of the TSO session or when it
  is removed with the null LIBDEF command-
" When a LIBDEF has been defined and another LIBDEF request is
  issued the second definition takes precedence over the first-
" Each concatenated data set must have the same record format
  (RECFM) and logical record length (LRECL)-
" The LIBDEF ISPLLIB library definitions are not searched by MVS
  member searches caused by the execution of ATTACH, LINK, LOAD, or
  XCTL macros within the selected program (SELECT PGM)- The LIBDEF
  library definitions are searched for selected commands (SELECT
  CMD)-
" Panel datasets can be have a logical record length of 80 or 132
" A maximum of 15 datasets names can be listed in the DATASET()
  field-


4- Examples

REXXCLSA  - Allocates REXX Class datasets
REXXCLSD  - De-allocated REXX Class datasets


ISPF Services

1- Services

" Displaying screen images and messages
" Building and maintaining tables
" Generating output files
" Defining and controlling symbolic variables
" Interfacing with programs such as EDIT and BROWSE
" Controlling operational modes


2- Display Services

ADDPOP    - Display pop-up panel
DISPLAY   - Display data panel
REMPOP    - Revoke pop-up panel
SELECT    - Display selection panel
TBDISPL   - Display table panel

Note:  This "SELECT" is different from REXX's


3- Message Services

GETMSG  - Retrieve message information
LOG     - Write a message to the ISPF log dataset-
SETMSG  - Set a message


4- Variable Services

VERASE  - Erase a variable from the shared or profile pool
VGET    - Retrieve a variable from the shared or profile pool
VPUT    - Store a variable in the shared or profile pool


5- General Purpose Services

BROWSE  - Invoke the BROWSE program from a dialog
CONTROL - Screen-handling and error handling options
EDIT    - Invoke the EDIT program from a dialog
LIBDEF  - Define ISPF libraries for a dialog
PQUERY  - Obtain information on a particular panel
SELECT  - Display panel or execute program/REXX
QLIBDEF - Query LIBDEF information


6- Table Services

A- Table Services

TBCREATE - Create a table
TBOPEN   - Open a table for processing
TBSORT   - Sort a table
TBQUERY  - Query information about a table
TBSTATS  - Obtain statistical data on the table
TBSAVE   - File a copy of the table and continue
TBCLOSE  - Close a table and disconnect it from use
TBEND    - End processing of a table without saving
TBERASE  - Remove a table from the system (DELETE)

B- Single Row Operations

TBADD    - Add a row to a table
TBDELETE - Delete a row from a table
TBEXIST  - Check existence of a particular key
TBGET    - Retrieve a row in a table
TBMOD    - Modify a row in a table
TBPUT    - Store a row in a table
TBSARG   - Set search argument for a table scan
TBSCAN   - Search for row that matches search argument
TBVCLEAR - Clear table variables to null

C- Row Pointer Operations

TBTOP    - Point to top of table (row 0)
TBSKIP   - Skip to the row following the current
TBBOTTOM - Point to bottom of table (last row)


7- File Tailoring Services

FTOPEN   - Create an output file for tailoring
FTINCL   - Include a skeleton to control output
FTCLOSE  - Close out the file tailoring process
FTERASE  - Erase the created output file


8- PDS / Sequential Files

LMCLOSE  - Close
LMCOMP   - Compress
LMCOPY   - Copy
LMERASE  - Delete
LMFREE   - Free
LMGET    - Read a record
LMINIT   - Define a data id
LMOPEN   - Open
LMPRINT  - Print
LMPUT    - Write a record
LMQUERY  - File statistics
LMRENAME - Rename


9- PDS Files

LMMADD   - Add a member
LMMDEL   - Delete a member
LMMDISP  - Member statistics
LMMFIND  - Find a member
LMMLIST  - Retrieve a member name
LMMMOVE  - Move members
LMMREN   - Rename a member
LMMREP   - Replace a member
LMMSTATS - Update member statistics


Variables

1- Three types of variables

A- User
    " &name
    " Must be 1 to 8 characters in length
B- System
    " &Zname
C- Control
    " -name


2- Pools

  A- Function
    " Only known to the particular program or panel-
  B- Shared
    " Default
    " Used to store or pass variables between programs or panels-
    " Not permanent, discarded when application ends-
  C- Profile
    " Data that is held across any number of sessions-
    " Permanent, used when variables need to be remembered from
      on session to another-
    " Assigned an application identifier- If no application
      identifier is specified, the current one is used-
    " Member stored in ISPPROF (applPROF), provided they
      terminate normal-
    " SELECT CMD(abc) APPL(xyz)


3- Commands

VERASE  - Erase a variable from the shared or profile pool
VGET    - Retrieve a variable from the shared or profile pool
VPUT    - Store a variable in the shared or profile pool


4- Items of Interest

" Order of search is Function Pool, Shared Pool, and finally the
  profile pool- If not found, a null value is returned-



System Variables

The bracketed entry that follows each description has the form:
[length, type, pool], although some entries are omitted- If the
type is omitted, it is read-only

1- General Variables

Z   Null variable [0]
  ZACCTNUM  The current TSO account number [max- 40]
  ZAPLCNT   APL invocation counts in the logical screen [4]
  ZAPPLID   Application identifier [4]
  ZAPPTTL   In GUI mode, the window frame title [in]
  ZCS       NLS currency symbol
  ZDECS     NLS decimal separator character [1]
  ZENTKTXT  In GUI mode, the ENTER button inscription [12,in]
  ZENVIR    Environment description [32]
      Aaaaaaaabbbbbbbbccccccccdddddddd
      Aaaaaaaa = product name and version [8]
      Bbbbbbbb = operating system name (MVS) [8]
      Cccccccc = operating env- (TSO, BATCH) [8]
      Dddddddd = reserved
  ZGUI      Workstation address or name (blank = not GUI mode) [68]
  ZISPFRC   Return code set by invoked dialog [8, in]
  ZKEYHELP  Keys help panel identifier [8, in]
  ZLANG     Session language [8]
  ZLOGO     Logo display indicator (NO|YES)
  ZLOGON    TSO logon procedure stepname [8]
  ZPLACE    Command line placement (ASIS|BOTTOM) [7, i/o, profile]
  ZPREFIX   TSO user prefix [8]
  ZPROFAPP  Name of application profile pool extension table
            [8, in, profile]
  ZSYSID    The IEASYSxx SYSNAME [8]
  ZTEMPF    Name of temporary data set for file tailoring output
            [44]
  ZTEMPN    DD-name of temporary data set for file tailoring output
            [8]
  ZTHS      NLS time separator character [1]
  ZTS       NLS time separator character [1]
  ZTSICMD   ISPF invocation command [max- 32767]
  ZTSSCMD   SELECT portion of the invocation command [max- 32767]
  ZUSER     Userid [8]
  ZVERB     Command verb [8]
  ZWINTTL   Pop-up window title [in]


2- Time and Date Variables

  ZDATE     Current date [8]
  ZDATEF    Current date in the language date format [8]
  ZDATEFD   Current date in the language date format [8]
  ZDAY      Day of the month (2 digits)
  ZJDATE    Date in day-of-year format (yy-ddd)
  ZMONTH    Month of year (2 digits)
  ZSTDYEAR  4-digit year
  ZTIME     Time of day (hh:mm)
  ZYEAR     2-digit year


3- Terminal Function and PF Key Variables

  ZCOLORS   Number if colors supported by the terminal [4]
  ZDBCS     DBCS Terminal Capability (YES|NO)
  ZFKA      Current function key area setting
            (LONG, SHORT, OFF) [8]
  ZHILITE   Extended highlighting availability (YES|NO)
  ZKEYS     Number of function keys [4, out, profile]
  ZPFCTL    PFSHOW command authorization [5, i/o, profile]
  ZPFFMT    Number of function key definitions per line
            [4, i/o, profile]
  ZPFSET    Function key definitions per line [4, i/o, profile]
  ZPFSHOW   PFSHOW command status [4, i/o, profile]
  ZPFnn     Function key setting; nn = 1--24 [8, i/o, profile]
  ZPFLnn    Function key label setting; nn = 1-24 [8, i/o, profile]
  ZPRIKEYS  Primary function key settings [4, i/o, profile]
      LOW:  PF1 to PF12
      UPP:  PF13 to PF24
  ZCREEN    Logical screen number (1, 2, 3, or 4)
  ZSCREEND  Screen depth available for dialog use [4]
  ZSCREENW  Maximum available screen depth [4]
  ZSCRMAXD  Maximum available screen depth [4]
  ZSCRMAXW  Maximum available screen width [4]
  ZSPLIT    Split screen mode in effect [4]
  ZTERM     Terminal type [8, out, profile]



4- Scrolling Variables

  ZSCBR     BROWSE service scroll amount [4, i/o, profile]
  ZSCED     EDIT service scroll amount [4, i/o, profile]
  ZSCML     Member list scroll amount [4, i/o, profile]
  ZSCROLLA  Scroll amount (PAGE, MAX, CSR, number) [4, out]
  ZSCROLLD  Default scroll amount [4, in]
  ZSCROLLN  Scroll amount computed as number [4, out]


5- TBDISPL Service Variables

  ZTDADD    More rows needed to satisfy scroll request
            (YES|NO) [3, out, func]
  ZTDAMT    Number of rows needed to satisfy scroll [3, out, func]
  STDLROWS  Number of rows in the logical table [6, in, func]
  ZTDLTOP   Map current top row in physical table to its position
            in logical table [6, in, func]
  ZTDMARK   User-defined bottom-of-data text [in]
  ZTDMSG    User-defined message-id for top of table [8, in]
  ZTDRET    [8, in, func]
  ZTDROWS   Number of displayed table rows [6, out, func]
  ZTDSCRP   CRP of top row to be displayed after scroll
            [6, i/o, func]
  ZTDSELS   Number of selected table rows [4, out, func]
  ZTDSIZE   Size of scrollable section [4, out, func]
  ZTDSRID   Row-id of the row pointed to by ZTDSCRP [6, out, func]
  ZTDTOP    Row number (CRP) of top row displayed [6, out, func]


6- Dialog Error Variables

  ZERRALRM  Message alarm indicator (YES|NO) [3, out, func]
  ZERRHM    Name of associated help panel [8, out, func]
  ZERRLM    Long error message text [512, out, func]
  ZERRMSG   Error message-id [8,out, func]
  ZERRSM    Short error message text [24, out, func]
  ZERRTYPE  Error message type [8, out, func]
  ZERRWIND  Error message window type [6, out, func]


7- Control Variables Used in Selection Panels

  ZCMD      Command input field
  ZPARENT   Parent selection panel name
            (when in explicit chain mode)
  ZPRIM     Primary option selection panel (YES|NO)
  ZSEL      Command input field truncated at first period


8- Control Variables Used in Help Panels

  ZCONT     Name of next continuation panel
  ZHINDEX   Name of first index panel
  ZHTOP     Name of top panel
  ZIND      Index page indicator (YES|NO)
  ZUP       Name of parent panel


9- List Service Variables

  ZLSTLPP   Line count for the list data set [4]
  ZLSTNUML  Number o lines on the current list data set page [4]
  ZLSTTRUN  List data set record length truncation value [4]


10- List and Log Dataset Variables

  ZLOGNAME  Log data set name [44]
  ZLSTNAME  List data set name [44]


Control Variables

1- Control Variables

-ALARM    - Controls sounding of terminal alarm-
-ATTR     - Changes attributes of a panel field-
-ATTRCHAR - Changes attributes associated with a particular character-
-AUTOSEL  - On table displays, controls whether a row will be
            selected automatically or not, even if the user does not
            specifically select it-
-CURSOR   - Controls placement of the cursor during panel display-
-CSRPOS   - Controls placement of the cursor within a field in the
            panel-
-CSRROW   - Controls placement of the cursor in a row of a table-
-HELP     - Identifies the name of tutorial panel when HELP is
            displayed-
-MSG      - Identifies a particular message to be displayed on the
            screen-
-PFKEY    - Provides PF key number depending on which key the user
            pressed-
-RESP     - Identifies the type of response from the user (END or
            RETURN)-
-TRAIL    - Provides the remaining string from a TRUNCate operation-
-ZVARS    - Enables correlation of z variables to actual names-


Messages

1- Message Services

GETMSG - Get a message
LOG    - Write a message to the ISPF log dataset-
SETMSG - Set a message


2- Setting Messages

GETMSG  MSG(messageid)
SETMSG  MSG(messageid)
LOG     MSG(messageid)
DISPLAY MSG(messageid)
TBDISPL MSG(messageid)
TRANS   MSG=messageid
VER     MSG=messageid
Panel  -MSG=messageid


3- Items of Interest

" Be sure to have "NUMBER OFF"- If you have sequence numbers in
  cols 73 through 80 you will not be able to display your message-
" Continuation character is the "+"-
" Comments can be inserted with /* starting in column 1
" The message identifier and the long message text must start in
  column 1
" When using quotes, they must be single quotes-
" Variables can be placed inside quotes, e-g- 'ISSUE NO &TICKET'-
  Normal substitution will occur-
" Each logical message defined in a member may be separated from
  one another by using one or more blank lines or a comment (/*)
  starting in column 1-
" If no short message is defined, the long message is displayed-
" Variables must start with & character and be 1-8 characters in
  length-
" Cannot use REXX arrays-


4- Items of Interest (cont-)

" A period separates a variable from a concatenated literal- For
  example, &VAR-NOWAY; NOWAY is appended to the current value of
  VAR-
" If an explicit message is specified for the panel display, that
  message takes precedence over any messages set by SETMSG service-
" If the message contains symbolic variables, substitutions are
  made using the values for the variables at the time of
  invocation, not at the point of display-
" DISPLAY MSGID ON will display the MSGID number-
" A special case of message definition is a message which does
  not have any text:
    รณ TEST001
    รณ ' '
  This dummy message can be used where message processing is
  required but no message text is to be displayed, e-g- it can be
  used to force a panel redisplay-
" To avoid having to define a large number of messages a
  generalized message "torso" containing symbolic variables may be
  defined:
    รณ APPL001 '&SMSG' -ALARM=&ALARM
    รณ '&LMSG'
  The three symbolic variables &SMSG, &LMSG and &ALRM are replaced
  by the appropriate text for "short message", "long message" and
  alarm condition (ON or OFF), respectively, when the message is
  displayed- You must weigh the advantages and disadvantages
  compared with a larger repository of fixed messages-


5- Examples

ISPFMSG1 - Display short and long message using ISPF variables
ISPFMSG2 - Display just a long message using ISPF variables
ISPFMSG3 - Display a very long message using ISPF variables
ISPFMSG4 - Display a pre-defined message-


Message Elements

1- Seven Elements

  A- Message ID
    " Required
    " The message identification
    " Must begin in column 1
    " Range form 4 to 8 characters
      รณ 1 to 5 alphabetic characters (A-Z, $, @, #)
      รณ A 3 digit number
      รณ An optional 1 character suffix

  B- Short Message
    " Optional
    " Up to 24 characters of text-  Any excess will be truncated-
    " If not present, the DISPLAY service will automatically use
      the long message-
    " Can use dialog variables
    " Must be in single quotes
    " Variables can be placed in quotes-
      Normal substitution will occur-

  C- Alarm Indicator
    " Optional
    " Audible Alarm (if available)
    " -ALARM = YES | NO

  D- Help Panel
    " Optional
    " Special tutorial section
    " -HELP=<panel> | *

  E- Window
    " Optional
    " Displayed in pop-up window-
    " WINDOW = RESP | NORESP | LRESP | NOLRESP
    " RESP and NORESP operands specify that both short ad long
      messages is to be displayed-
    " LRESP and NOLRESP specifies a response to the displayed
      message must be made before processing continues-

  F- Type
    " Optional
    " Specifies the severity of the displayed message-
    " TYPE=NOTIFY | WARNING | ACTION | CRITICAL
    " The severity determines the color of the displayed message
      and the symbol displayed in GUI-mode-

  G- Long Message
    " Required
    " Up to 255 characters
    " Must begin in column 1
    " Must be in single quotes
    " Variables can be placed in quotes-
      Normal substitution will occur-


Panels

1- Panels

  " Selection Panels (Menus)
  " Data Entry Panels
  " Table Display Panels
  " Tutorial/Help Panels

2- ABCINIT / INIT / REINIT / ABCPROC / PROC

Assignment (=) - Assign values to variables
EXIT           - Terminates processing in the section
GOTO           - Passes control to a subsequent label
IF (ELSE)      - Conditional execution of logic
REFRESH        - Refresh variables in panel (REINIT)
TOG            - Alternates the value of a variable between
                 two values
VEDIT          - The variables are used for mask validation
VER            - Verify contents of variables
VGET           - Get variables from pools
VPUT           - Put Variables into other pools

3- System Variables

&ZCMD    - Command input field
&ZSEL    - Select Service parameter
&ZPRIM   - Primary option menu indicator
&PARENT  - Parent selection panel name

4- Panel Functions

TRUNC    - Truncates a string
TRANS    - Translates a string
PFK      - Retrieve a PF Key
LVLINE   - Find last visible line

5- Items of interest

" Continuation character is the "+"- Cannot continue lines in the
  )BODY section-
" A literal defined within apostrophes can be continued on the
  following line by setting "+" at the end of the line to be
  continued, the literal continues at the first non-blank character
  on the following line (blanks up to the "+" on the continued line
  are retained)- The below literal is equivalent to 'ALPHA BETA':
    'ALPHA    +
                        BETA'
" Blank characters at the end of a literal are ignored- If,
  however, the literal contains only a single blank character, this
  one is retained- Also, imbedded blank characters are retained-
  For example:
    รณ 'ALPHA       '        equal to 'ALPHA'
    รณ 'ALPHA     BETA'                      the blanks are retained
    รณ 'ALPHA '     retains the 1 blank character
" Comments are inserted with /* comment */- Comments can not be
  in the )BODY, )MODEL or )AREA sections-
" When using quotes, they must be single quotes-
" When using large tables you may need to increase your TSO
  REGION size
" Variables must start with & character and be 1-8 characters in
  length-
" Cannot use REXX arrays-
" Always use &ZCMD as the COMMAND==> variable- This will allow
  for execution of ISPF and external commands-
" Control variables, ones that start with a period, can only be
  used in the logic sections of a panel - )ABCINIT, )INIT, )REINIT,
  )ABCPROC, and )PROC-
" DISPLAY PANELID ON will display the panel name in the upper
  left hand corner of the screen-
" Ensure "NUMBER OFF", panels use all characters in the line- If
  sequence numbers are in the panel a severe error will occur upon
  displaying of the panel-
" After modifying a panel you must refresh it by logging out of
  ISPF or invoking it through ISPF 7-2 (Dialog Test)-
" ISPF panels do not include any arithmetic operations
  (e-g- &N = &N + 1)-
  This must be accomplished within the REXX program-
" ISPF panels do not support DO loop or SELECT statements-
" If you displayed the panel, via REXX, and later you modify the
  panel, you'll need to logoff TSO or use ISPF 7-2 (Dialog Test) to
  refresh the panel in memory- ISPF interprets/compiles the panel
  and saves it in your TSO session in hopes of speeding up future
  displays of the same panel-
" When using "WINDOW(width,depth)" keyword on the )BODY statement
  the minimum width is 8 and depth is 1- The maximum width is 3
  bytes less then the screen width (ex- 80-byte screen, max width
  would be 77)- One byte is used by the attribute character, the
  other two bytes by the "|"-

6- Examples

ISPFPAN1 - Display a data input panel
ISPFPAN2 - Display a pop-up data entry panel
ISPFPAN3 - Display an input panel using a scroll area
ISPFPAN4 - Display an input panel using two scroll areas
ISPFPAN5 - Display an input panel with an Action Bar
ISPFPAN6 - Display a selection panel
ISPFPAN8 - Display selection panel using area section, action
           bar, and point-and-shoot fields-
ISPFPAN9 - Display a table


Display Services


1- Data Input Panel

ADDRESS ISPEXEC
"DISPLAY PANEL(panel)"


2- Pop-Up Panel

ADDRESS ISPEXEC
ZWINTTL = 'panel title'
"ADDPOP"
"DISPLAY PANEL(panel)"
"REMPOP"


3- Selection Panel

  ADDRESS ISPEXEC
"SELECT PANEL(panel)"


4- Table Display Panel

ADDRESS ISPEXEC
 "TBDISPL PANEL(panel)"



Display Commands


1- DISPLAY

" Specifically used for displaying data entry panel, not
  selection menus-
" Any ISPF return code of 12 or higher normally causes ISPF to
  exit the dialog- If an application needs to retain control, then
  the statement "CONTROL ERRORS RETURN" would allow you to do so-
" After DISPLAYing a panel the REXX should check for a RC=8- This
  would indicate the customer responded with END or RETURN-
" When DISPLAYing a PANEL you can specify the CUROR and CSRPOS,
  just beware the panel definition takes precedent- If it is not
  specified on the DISPLAY command or in the panel the cursor will
  default to the first input field and cursor position will default
  to 1-


2- ADDPOP / REMPOP

" If you use ADDPOP, ensure to invoke REMPOP after displaying the
  panel- If you do not all panels there after will be displayed in
  Window format-


3- SELECT

" Specifically used for displaying of selection menus or calling
  a function (REXX program or executable program)- Not used for
  displaying data entry panels-


4- TBDISPL

" See section on Table Services

Panel Sections



1- )PANEL

" Optional
" Indicates that the panel is to be displayed in CUA mode and
  specified the associated key list-


2- )ATTR

" Optional
" Defines those special characters (attribute bytes) which are to
  be used to identify field types in the )BODY section-
" SKIP(OFF) is the default- To automatically advance to the next
  input field use specify SKIP(ON)- This prevents customers from
  having to use the tab key-
" INTENS(NONE) is used to hide passwords-
" PAD(_) is used to display the entire length of the input field
  to the customer-
" JUST(LEFT) is the default- Sometimes its more desirable to have
  numbers right justified by specifying JUST(RIGHT)-
" AREA(DYNAMIC) has very little flexibility when it comes to
  processing the panel that no one uses it-


3- )ABC

" Optional
" Action Bar Choice section


4- )ABCINIT

" Required if )ABC section has been specified
" Action Bar Choice Initialization Section
" You must include the "-ZVARS" panel source definition statement
  for each action bar choice section you define-


5- )ABCPROC

" Optional-
" Action Bar Choice Processing section


6- )BODY

" Required
" Define the format and contents of the panel as it will be
  displayed
" Use EXPAND(//) to eliminate typing-  This will duplicate the
  designated character within the '/''s- For example -/-/-, will
  repeat the character for the entire length of the screen-
" Use Z variables for fields with small sizes-  By defining
  -ZVARS = '(var1)' in the )INIT section-
" Can not use comments in this section-


7- )MODEL

" Mandatory for Table Display Panels (TBDISPL), must not be
  present for other panels
" Specifies the display format of one logical row from the
  corresponding ISPF table-
" Minimum of one line and a maximum of 8 lines-
" To limit the number of rows being displayed based on some
  search argument use )MODEL ROW(SCAN)- This would cause the
  TBDISPL service to examine each row to see if it matches the
  arguments set by the TBSARG in the REXX driving the display- Only
  successful matches will be displayed- But you must remember to
  use a TBSARG, for failure to do so will result in a sever error
  when the TBDISP is invoked
" Can contain the following field types:  Input, Output, and Text-
" Can not use comments in this section-


8- )AREA

" Optional
" Scrollable Area section
" Cannot use comments in this section-


9- )INIT

" Optional
" Defines the processing that is to be performed before the panel
  is initially displayed-


10- )REINIT

" Optional
" Define the processing which is to be performed before the panel
  is redisplayed
" A redisplay occurs after an "error" condition has been signaled
  or when the data for a selected row in a table display panel is
  redisplayed-
" A redisplay is invoked under the following circumstances:
    รณ The -MSG control variable is non-blank, i-e- a statement in
      the )PROC section has implicitly (using aver or TRANS
      statement) or explicitly (by assignment) set a message-
    รณ The DISPLAY or TBDISPL service is used without a panel name
      being specified


11- )PROC

" Optional
" Defines the processing that is to be performed after the panel
  has been displayed-
" Typically is used to validate the input-


12- )PNTS

" Optional
" The Point-and-Shoot defines the processing which is to be
  performed on point-and-shoot fields-


13- )HELP

" Optional
" Specifies the help panels associated with fields


14- )END

" Required
" Terminates the panel definition-



ATTR TYPE( )


AB       Action Bar unselected choices-
         Mandatory- [COLOR(WHITE), INTENSE(HIGH)]

ABSL     Action Bar separator line-
         Mandatory- [COLOR(BLUDE) INTENSE(LOW)]

CEF      Choice entry field-
         [COLOR(TURQ), INTENS(LOW), HILITE(USCORE), CAPS(OFF),
         JUST(LEFT)]

CH       Column heading-  [COLOR(BLUE), INTENSE(HIGH)]

CHAR*    Character attributes in a dynamic area-

CT       Caution text-  [COLOR(YELLOW),INTENS(HIGH)]

DATAIN*  Input field in a dynamic area-  [CAPS(OFF), JUST(LEFT)]

DATAOUT* Output field in a dynamic area-  [CAPS(OFF), JUST(LEFT)]

DT       Descriptive text-  [COLOR(GREEN), INTENS(LOW)]

EE       Error emphasis-  [COLOR(YELLOW), INTENS(HIGH)]

ET       Emphasized text-  [COLOR(TURQ), INTENS(HIGH)]

FP       Field prompt-  [COLOR(GREEN), INTENS(LOW)]

INPUT*   Input field-  [CAPS(ON), JUST(LEFT)]

LEF      List entry field (e-g- table input field)-
         [COLOR(TURQ), INTENS(LOW), HILITE(USCORE), CAPS(OFF),
         JUST(ASIS)]

LI       List items (e-g- table output field)-
         [COLOR(WHITE), INTENS(LOW), CAPS(OFF), JUST(ASIS)]

LID      List item description-
         [COLOR(GREEN), INTENS(LOW), CAPS(OFF), JUST(ASIS)]

NEF      Normal entry field-
         [COLOR(TURQ), INTENS(LOW), HILITE(USCORE), CAPS(OFF),
         JUST(ASIS)]

NT       Normal text-  [COLOR(GREEN), INTENS(LOW)]

OUTPUT*  Output field-  [CAPS(ON), JUST(LEFT)]

PIN      Panel instruction-  [COLOR(TURQ), INTENS(LOW)]

PS       Point-and-shoot-
         This type must be used for point-and-shoot text fields-
         [COLOR(TURQ), INTENS(HIGH), JUST(LEFT)]

PT       Panel title-  [COLOR(BLUE), INTENS(LOW)]

RP       Reference phrase-  Mandatory-  [COLOR(TURQ), INTENS(HIGH)]

SAC      Select available choices-  [COLOR(WHITE), INTENS(LOW)]

SI       Scroll information-  [COLOR(WHITE), INTENS(HIGH)]

SUC      Select unavailable choices-  [COLOR(BLUE), INTENS(LOW)]

TEXT*    Text field-

VOI      Variable output information-
         [COLOR(TURQ), INTENS(LOW), CAPS(OFF), JUST(LEFT)]

WASL     Work area separator line-  [COLOR(BLUE), INTENS(LOW)]

WT       Warning text-   [COLOR(WHITE), INTENS(HIGH)]


Those attributes marked with mandatory must be used for the
indicated attribute- Many types (for example, the various text
attributes) can be used at the developer's discretion- Those
marked with an asterisk (*) are not CUA attributes, but are
included for completeness-

Protected means that the contents of that field are protected
against being changed, i-e- the field cannot be used for input-
Text means that the contents of that field are interpreted as
being text data, variable data must be specified as a symbolic
variable (&VAR)- Input and output mean that the following field
is interpreted as being the name of a variable, the contents of
which are placed at this location in the panel display- Output
has only the significance that the displayed field contents
cannot be altered, i-e- the field is only used for output- The
use of DATIN and DATOUT are used in the dynamic field section-



Panel Statements


These statements can be used in the initialization ()ABCINIT,
)INIT, )REINIT) and processing, ()ABCPROC, )PROC) sections-


1- Assignment

" The literals '' and ' ' both represent a single blank- The
  system variable &Z must be used to set the null variable (X'0')-
  No arithmetic statements are allowed-


2- EXIT

" IF (-RESP = END) EXIT


3- GOTO

" The label statement is 1-8 characters, the first character must
  be alphabetic- Lower case letters are translated to uppercase-


4- IF (ELSE)

" Relational Operators
รณ EQ, NE, GT, GE, LT, LE, NG, NL
รณ =, ~=, >, >=, <, <=, ~>, ~<
" The IF statement has the following limitations:
รณ No "THEN" keyword-
รณ No "DO-END" groups are allowed- Instead, multiple statements
  dependent on a given IF condition are recognized by the fact that
  they are indented from the IF statement-
รณ The comparison must be enclosed in parenthesis, ie- IF (&X = 1)
" IF (&ABC = 1, 2, 3) EXIT


5- PANEXEIT (Panel Exit)

" The use of the panel exit in its current form cannot be recommend-


6- REFRESH

" Normally the panel fields are not updated when the panel is
  redisplayed, meaning the fields have the same value as when you
  last saw them- Refresh forces the specified variables in the
  panel to be updated before redisplay-
" REFRESH is only necessary if the panel is to be redisplayed
  after variables have been modified as a result of processing-
" REFRESH (*), refreshes all panel fields having the attribute of
  input or output-


7- TOG (Toggle)


8- VEDIT (variable edit)


9- VER (verify)

" Although NONBLANK test can be combined with other verification,
  it may be preferable to make a separate test and so produce a
  more explicit message-
" Note, no important verification is performed on a blank field,
  although the NONBLANK parameter may be used to force input to be
  made to the field in question-
" The standard message test associated with the LIST keyword is
  not very useful; the long message merely states "ENTER ON OF THE
  LISTED VALUES" without explaining what the listed values are- In
  this instance it is better for the developer to issue his own
  message that contains a list of the valid operands-


10- VGET


11- VPUT



Panel Variables


1- ZSEL

A-     The following contents are interpreted in a special manner

"  "   (blank) the message "ENTER OPTION" is displayed

"?"    (question mark) the message "INVALID OPTION" is displayed


B- Example

&ZSEL = TRANS(TRUNC(&ZCMD,'-')
    1, 'CMD(%REXXPGM)'
    2, 'PGM(COBOLPGM)'
    3, 'PANEL(PANEL1)'
    X, EXIT
    ' ', ' '
    '*', '?')

In the above example if the customer does not type any characters
in and presses ENTER the message "ENTER OPTION" will appear-

If the customer types in any other character than 1, 2, 3, or X
the "INVALID OPTION" message will be displayed-


Panel Functions


1- TRUNC

A- Description
" Enables you TRUNCate a string either at a fixed position or at
  the occurrence of a given character-

B- Syntax
" &VAR1 = TRUNC(<variable>, ## | 'char')

C- Examples
" &X = 'ABC-DEF'
" &A = TRUNC(&X, 3)  Contains ABC
" &B = -TRAIL   Contains -DEF
" &C = TRUNC(&X, '-')  Contains ABC
" &D = -TRAIL   Contains DEF

D- Items of Interest
" -TRAIL contains the remainder of the string-


2- TRANS

3- Description
" Enables you translate one string into another at the same time
  making provisions for an error message if a match cannot be
  found-

4- Syntax
" &VAR1 = TRANS(<variable>, value,value - MSG=id)

5- Examples
" &A = TRANS(&OPT  A,ADD,  C, CHANGE,  D,DELETE)
" &B = TRANS(&ANS  Y,YES  N,NO  MSG=DDSM000)
" &C = TRANS(&COD  1,ABC  2,XYZ  *,*)
" &D = TRANS(&ANS  Y,YES  N,NO  *,'?')

6- Items of Interest
  " One very common usage is selection panels:
    รณ &ZSEL = TRANS(TRUNC(&ZCMD, '-')  1,'PGM(ABC)' )


3- PFK

A- Description

" Allows us to extract information about the settings of any of
  the Program Function (PF) keys-

B- Syntax
" &VAR1 = PFK(nn, | string)

C- Examples
" &PFVAL = PFK(02)     "SPLIT" is returned
" &PFVAL = PFK('SPLIT')  "PF2" is returned

D- Items of Interest
" If the string is assigned to more than one PF Key, the first
  primary key with the string will be given-


4- LVLINE

A- Description
" Returns the number of the last visible line in this panel for
  an area defined as DYNAMIC or GRAPHIC

B- Syntax
" &VAR1 = LVLINE(<areaname>)


C- Examples
" &A = LVLINE(AREA1)

D- Items of Interest
" This function is not used much-



Panel - Control Variables


1- -ALARM
" Can be annoying to the customer

2- -ATTR
" Can be used to accentuate a field for error processing

4- -CURSOR
" Used to position the cursor on the field in error-
" Once it has been set, it cannot be changed during the current
  panel processing-

5- -HELP
" If -HELP has not been set, the invocation of the help command
  will cause the last set help panel to be displayed- This panel is
  probably unrelated to the current application anc could confuse
  the customer- It is recommended that every panel sets -help to be
  the name of some appropriate help panel for the application-

6- -MSG
" Cannot be changed once it has been set during the current panel
  display-

7- -RESP
" ISPF applications usually adopt the convention that the END key
  terminates the panel display without any input being processed-
  Hence, processing in the )PROC panel display without any input
  being processed- Hence, processing in the )PROC section should be
  performed if the operator has used the ENTER key (or equivalent)
  to terminate the panel display, i-e- all processing in the )PROC
  section should be inside the IF (-RESP=ENTER) group-

8- -ZVARS
" The excessive use of placeholder's results in panels that is
  difficult to maintain- Placeholders should only be used where
  they are necessary, namely where the variable name associated
  with a field is longer than the data it contains-



Date Validation


)BODY
+ Enter Date ==>  _ED+(Day)  _EM+(Month)  _EY+(Year)
+
)PROC
   IF (-RESP = ENTER)
      &EDATE = '&EY&EM&ED'
      IF (&EDATE  ~= &Z)           /* Process if date field non-blank */
         VER (&EY,NB,PICT,'99')    /* Year 00,--,99                   */
         IF (-MSG = &Z)            /* Process if no error  */
            VER (&EM,NB,PICT,'99')
            VER (&EM,NB,RANGE,01,12)    /* Month 01--12  */
             IF (-MSG = &Z)             /* Process if no error   */
                  &FEB = '28'           /* Default, no leap year */
                 IF (&EY = '00','04','08','12','16','20','24','28','32','36',
                           '40','44','48','52','56','60','64','68','72','76',
                           '80','84','88','92','96')
                     &FEB = '29'        /* Leap Year  */
                &MONTHDAY = TRANS(&EM 01,'31' 02,&FEB 03,'31' 04,'30'
                                   05,'31' 06,'30' 07,'32' 08,'31'
                                   09,'30' 10,'31' 11,'30' 12,'31')
                VER(&ED,NB,RANGE,01,&MONTHDAY)
)END


The three parts of the input date (ED, EM, and EY are transferred
to the compound field EDATE- If this field is non-blank, at least
one of the input fields has been defined- EY is verified as being
numeric (with leading zero)- EM is verified as being numeric
(with leading zero) and in the range 01 through 12- The
intermediate variable FEB is set initially to 28, should EY be a
leap year, FEB is set to 29- The number o days on the month is
set into MONTHDYA, ED is checked that it lies within the range 01
through MONTHDAY-



ISPPREP


1- Description

" Utility to pre-process (compile) ISPF panels-


2- Pros

" Faster accessing panel, no interpreting or pre-processing is
  needed
" Smaller in size
" Increased protection from someone modifying the panel


3- Cons

" Need to have a separate PDS to save the source-
" One more step added in placing into production-


4- Invoking Utility

" Entering ISPPREP on the ISPF Command line
" SELECT PGM(ISPPREP) PARM(parms--)


5- Items of Interest

" A panel library may contain both pre-processed and
  non-processed panels-
" No way to un-compile a pre-process ISPF panel- Must have source
  code-



Skeletons


1- Skeleton Services

FTOPEN  - Create an output file for file tailoring
FTINCL  - Include a skeleton to control output
FTCLOSE - Close out the file tailoring process
FTERASE - Erase the created output file

2- Two Types of statements

A- Control Statements
" Those with a control character,")", in column 1 and immediately
  followed by a control word- Generally, these are the statements
  that inform the file tailoring process how to interpret the
  contents of the skeleton-

B- Data Statements
" All others, including those that begin with ")" but are
  followed by a blank- These are statements that contain the actual
  data that is to appear in the output file, depending on the
  conditions established by the control statements-

3- Items of Interest

" The member of the file-tailoring library can have a maximum
  record length of 255 bytes; the last 8 characters of the input
  records are ignored-
" Continuation of a line is accomplished by inserting a special
  character ("?" by default) in the column preceding the last eight
  characters, sequence field-
" In the event that an output record generated from the skeleton
  exceeds the specified length of the output file, the file
  tailoring process terminates immediately-
" When using quotes, they must be single quotes-
" Can not be editing the skeleton and executing a REXX that
  "FTINCL" the same skeleton- An ENQ error will occur-

4- Items of Interest (Cont-)

" Variables must start with & character and be 1-8 characters in length-
" Cannot use REXX arrays-
" Large file tailoring may require you to increase your TSO REGION size-
" The FTOPEN without the TEMP parameter requires that the ISPFILE
  be allocated; even when the TBCLOSE uses a different file- That
  is a dummy allocation always must have been made for ISPFILE-
" File tailoring which has been opened with the TEMP parameter
  cannot be stored as a permanent member-
" FTINCL invokes the FTOPEN service (with TEMP parameter) if file
  tailoring services have not been opened-
" The tabbing to a non-existent tab stop causes a run-time error-
" A period delimits a variable name; this delimiter is only
  required when a variable name is immediately followed by a
  literal (either alphanumeric or numeric), e-g- &ALPHA-KOSS or
  &ALPHA-2
" The less than ("<"), break("|"), and greater than (">") define
  a conditional substitution string- For example <&ALPHA|HELP> will
  check the contents of variable ALPHA, if it is null, the
  alphanumeric literal HELP is to be substituted in it's place-


5- Examples

ISPFSKE1 - File tailoring to a temporary file
ISPFSKE2 - File tailoring to a permanent file
ISPFSKE3 - File tailoring using tables and saving to permanent file



Control Statements


1- )DEFAULT

" Establish control characters-
    )  - The control statement identifier
    &  - The variable symbol identifier
    ?  - The continuation character
    !  - The tab character
    <  - The left character for conditional strings
    |  - The center character for conditional strings
    >  - The right character for conditional strings
" )DEFAULT ABCDEF


2- )TB

" Establish tab positions
" )TB 2 8 19 25 30


3- )CM

" Comment line
" )CM any comments you desire


4- )BLANK <nn>

" Generate blank lines
" Real Blank lines in the input skeleton definition are not
  passed to the output record and such the )BLANK statement is
  required to generate blank lines-
" )BLANK 10


5- )SET

" Set values in variables
" )SET LINES = &LINES + 5
" The value may be an arithmetic expression-
" The only operations allowed are "+" or "-"-

6- )IM  <skelton>  [NT]  [OPT]

" Imbed another skeleton-
" Similar to a copybook in a COBOL program-
" )IM SKEL2
" The NT parameter indicates not to under go any file tailoring,
  just copy contents into output file as is-
" The OPT parameter indicates the skeleton is optional- If the
  skeleton is not found do not cause an error condition-
" A maximum of 3 levels of embedding is allowed-


7- )SEL

" Conditional selection of data (IF/THEN)
" )SEL &LINES > 50
-- Lines --
)ENDSEL
" Operators
NL, LT, LE, EQ, NE, GE, GT, NG
=>, <, <=, =, \=, >=, >, \>
" May contain up to 8 comparisons joined by logical operators-
" Parenthesis is not allowed-
" Nested )SEL statements are allowed-
  They are equivalent to "AND" logic-
" A maximum of 8 levels of nesting is allowed-
" Complex statements should, where possible, be avoided-
  They are difficult to understand and errors can arise
  inadvertently-


8- )ENDSEL

" End conditional selection
" )SEL &LINES > 50
-- Lines --
)ENDSEL


9- )DOT

" DO-LOOP for a table
" )DOT &TABLE1
!&var1 !&var2 !&var3
)ENDOT
" A DOT-group can include further DOT-groups-
  However, the same table may not be used-
  A maximum of 4 levels of nesting is allowed-


10- )ENDDOT

" End a DO-LOOP for a table
" )DOT &TABLE1
!&var1 !&var2 !&var3
)ENDOT



Table Services


1- Tables

" Temporary
" Permanent


2- Two types of Tables

" Keyed, accessed by key value
" Non-Keyed, accessed by Row Number


3- DD Names

" ISPTLIB  - Input
" ISPTABL - Output


4- Use of Tables

" Directly processed using table services
" Display using the TBDISPL service (MODEL)
" Data input for file tailoring services (DOT-ENDDOT)


5- Two forms of table operations

" Operations involving the table as a whole
" Row operations



Table Commands


1- Table Services

TBCREATE - Create a table
TBOPEN   - Open a table for processing
TBSORT   - Sort a table
TBQUERY  - Query information about a table
TBSTATS  - Obtain statistical data on the table
TBSAVE   - File a copy of the table and continue
TBCLOSE  - Close a table and disconnect it from use
TBEND    - End processing of a table without saving
TBERASE  - Remove a table from the system (DELETE)


2- Single Row Operations

TBADD    - Add a row to a table
TBDELETE - Delete a row from a table
TBEXIST  - Check existence of a particular key
TBGET    - Retrieve a row in a table
TBMOD    - Modify a row in a table
TBPUT    - Store a row in a table
TBSARG   - Set search arguments for a table scan or display
TBSCAN   - Search for row that matches search argument
TBVCLEAR - Clear table variables to null


3- Row Pointer Operations

TBTOP    - Point to top of table (row 0)
TBSKIP   - Skip to the row following the current
TBBOTTOM - Point to bottom of table (last row)

1- TBADD
" For keyed tables, the table is searched to ensure that the key
  is unique-

2- TBCLOSE
" Deleted the main storage copy of the table-
" If the function (REXX program) using temporary output tables
  terminates without closing the table, a re-invocation of this
  function uses table in main storage- This can lead to duplicate
  rows, etc-

3- TBDISPL
" Used to display and modify rows of table- A more dynamic data
  entry panel-
" Upon return from the TBDISPL call, the 4 character function
  pool variable ZTDSELS will indicate the number of rows selected-
  You will be placed automatically at the first row, while all the
  others will remain pending- As you finish processing the first
  selected row and wish to proceed to the next pending row, you
  simply invoke a TBDISPL with no other parameters except the table
  name- You should repeat this process until &ZTDSELS is
  decremented down to 1, indicating that you are processing the
  last row selected-
" If by chance you need to perform another TBDISPL or just a
  DISPLAY, any pending rows will be ignored and &ZTDSELS will be
  reset- To prevent this you should invoke "CONTROL DISPLAY SAVE"
  (before) and a CONTROL DISPLAY RESTORE (after), so that your
  environment will be preserved for correct processing-
" A table display panel is subject to certain constraints:
รณ A table display panel must have a )MODEL section which defines
  the display from a single row, the table name is specified as a
  parameter to the TBDSIPL service- The MODEL section may contain
  up to 8 lines-
รณ A table display panel should have a command field in the panel-
รณ A table display panel should have an input field containing the
  scroll amount as the second input field containing the scroll
  amount as the second input field in the panel- This field must be
  at least 4 characters in length-
" The information that is displayed is not restricted to what can
  fit on a single screen, but may be scrolled vertically-
" Variables in the )MODEL line can come from either or both the
  table and the variable pools; the table variable has priority
  over the pool variables-
" If no panel name is specified, the current (TBDISPL) panel is
  redisplayed
" Redisplay takes one of two forms, depending on whether
  selections are pending- If selections are pending, the data for
  the selected row are returned in the corresponding function pool
  variables and no physical display takes place- If no selections
  are pending, no data is retuned but any outstanding scroll
  request is processed and a physical display takes place-

4- TBOPEN
" The simplest means of determining whether a table is present is
  to use the TBOPEN services and test its return code (0=table
  present, 8=table not present-

5- TBSARG/TBSCAN
" When TBSARG is used in a loop, care must be taken to ensure
  that the search argument values contain the true comparand and
  not those read from the last table row-
" Also, those variables not being used should be set to null
  using the TBVCLEAR service prior to invoking the TBSARG/TBNSCAN
  service-

6- TBSAVE
" Should be regularly used during long running applications to
  maintain an up to date permanent copy of the table as this
  facilitates recovery should the computer system fail-

7- TBSORT
" A sorted table (even an empty table) is maintained in this
  specified sequence, provided all subsequent requests effecting
  the position of rows (TBADD, etc-) specify the ORDER parameter-

8- TBSTATS
" The table need not be open to obtain statistical information-



TBDISPL Variables


The bracketed entry that follows each description has the form:
[length, type, pool], although some entries are omitted- If the
type is omitted, it is read-only


ZTDADD    More rows needed to satisfy scroll request
          (YES|NO) [3, out, func]

ZTDAMT    Number of rows needed to satisfy scroll [3, out, func]

STDLROWS  Number of rows in the logical table [6, in, func]

ZTDLTOP   Map current top row in physical table to its position
          in logical table [6, in, func]

ZTDMARK   User-defined bottom-of-data text [in]

ZTDMSG    User-defined message-id for top of table [8, in]

ZTDRET    [8, in, func]

ZTDROWS   Number of displayed table rows [6, out, func]

ZTDSCRP   CRP of top row to be displayed after scroll [6, i/o, func]

ZTDSELS   Number of selected table rows [4, out, func]

ZTDSIZE   Size of scrollable section [4, out, func]

ZTDSRID   Row-id of the row pointed to by ZTDSCRP [6, out, func]

ZTDTOP    Row number (CRP) of top row displayed [6, out, func]


1- Items of Interest

" The table structure (Temp or Perm) is determined when the table
  is created and can only be changed by recreating the table-
" The input library definition (ISPTLIB) may specify a
  concatenation of libraries, where as the output library
  definition (ISPTABL) may only specify a single library-
" ISPTABLE is not required for temporary files-
" Although two separate library definitions are required (ISPTLIB
  and ISPTABL), it is important that these refer to the same
  physical library- Should this not be the case, then the table
  being updated is not the input table (this is a common cause of
  error)-
" For reasons of data consistency a table which is used for
  output can only be used (opened) by one user- The mechanism of
  ENQ (lock) and DEQ (unlock) is used to control table access-
  There is no restriction of the number of users for tables that
  are opened for input (read)-
" Services which use the output table library can also specify a
  file name other than ISPTABL
" All table operations, except TBCREATE, TBERASE, TBOPEN and
  TBSTATS, require that the table be open-
" Row operations, except TBADD, either positions the current row
  pointer (CRP) at a specific row or process the row where the CRP
  is positioned-
" Note each row may be assigned additional variables, called
  extension variables-
" Keyed tables are accessed by key value, non-keyed tables are
  accessed by row number-
" The table may be shared between logical screens when the user
  is in split screen mode- The table may only be created from one
  logical screen-
" It is important to explicitly check the line operator
  (U-update, D-delete, etc--)-
  There is no means of explicitly un-selecting a line in the
  TBDISPL display-
  A line remains selected once it has been selected-
  If the selection code is invalid it remains selected once it
  has been selected-
  If the selection code is invalid it can only be "de-selected"
  by overwriting the selection code with a blank- The selection,
  however, is passed to the processing routine-
  It is the responsibility of the processing routine-
  It is the responsibility of the processing routine to ignore
  such "non-selections"-


2- Examples

TABEL01  - Create/display a table using data from the
           External Data Queue-
TABLE02  - Create/display a table using data from an array
TABLE03  - Display/modify  a keyed table
TABLE04  - Use a table and skeleton for SYSIN cards for an IEBCOPY-
TABLE05  - Read two files into an array then place in table and use
           skeletons to create a report-


BATCH

1- Items of Interest

" When an ISPF application runs in batch, any panel displays must
  either be suppressed with "CONTROL NONDISPLAY END) or by setting
  the -RESP control variable or the panel command field to END
  within the panel-

" Any input that normally would have been entered on the
  displayed panel must be made by setting the appropriate dialog
  variables

" To set the Return Code:
    ADDRESS ISPEXEC
    ZISPFRC = 8
    "VPUT (ZISPFRC)"



