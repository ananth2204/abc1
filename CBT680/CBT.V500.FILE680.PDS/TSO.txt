
                            Time

                           Sharing

                           Option


                       (April 10, 2002)





Agenda



1- Online Help ------------------------------ 3


2- Commands --------------------------------- 4


3- Environment ------------------------------ 5


4- ALTLIB ----------------------------------- 6


5- REXX Functions --------------------------- 7


6- EXECUTIL --------------------------------- 8




                           ONLINE HELP
                           ------ ----


1- Help

    A- TSO HELP <TSO cmd>
    B- SYSHELP



2- MVS/QuickRef

    A- QW <TSO cmd>

B- QW
    " Select "C - Request Reference Information by Category"
        " Select "TSO - TSO/E Command & CLIST Syntax Descriptions"
            " TSO/E CLIST SYNTAX V2R5 & PRIOR
            " TSO/SYSHELP  V2R6M0



3- Book Manager

    A- =V-BKM
        " Select "IKJOSE30 - OS/390 V2R10-0 TSO/E"
          or "IKJ2BI02 - TSO/E V2R5"
            " Select "IKJ3A330 - OS/390 V2R10-0 TSO/E REXX Reference"
            " or "IKJ3C310 - OS/390 V2R9-0 TSO/E REXX User's Guide"




                        COMMANDS
                        --------

1- IDCAMS

ALTER 'dsname' NEWNAME('new-dsname')
                            Rename a dastaset
DEFINE --                   Define VSAM and NONVSAM files
DELETE 'dsname'             Delete a VSAM and NONVSAM dataset
LISTCAT ENT('dsname')       List catalog entries



2- PDS/Sequential Files

COMPARE 'dsname1' 'dsname2' Compare a PDS or sequential file
LISTDS 'dsname'             Displays basic attributes
LIST 'dsname'               Displays a PDS(MBR) or sequential file
LISTSPC DATASET('dsname')   Reports allocated and unused space
                              for PDS/Seq- files


3- SMS

HDELETE ('dsname')          Delete a migrated SMS file
HMIGRATE ('dsname')         Migrate an SMS file
HRECALL ('dsname')          Recall an SMS file



4- TSO Session

ALLOCATE FILE('ddname') DATASET('dsname') SHR
                           Dynamically allocate a file
ALTLIB ACTIVATE USER(EXEC) DATASET('dsname')
                           Dynamically allocate a REXX/CLIST Dataset
CALL 'dsname(pgm)' 'parms' Execute a program
LISTALC                    Display allocated datasets
SUBMIT 'dsname'            Submit a batch job
FREE FILE(ddname)          Un-allocate a dataset



                          ENVIRONMENT
                          -----------


1- Environments

    A- Native
        " <cmd>
    B- ISPF
        " TSO <cmd>
        " =6, "COMMAND"



2- Sign-On Procs

    " Procedure
    " Acct Number
    " Size
    " Command



3- Items of Interest

    " Use single quotes around DSN name-
    " When using TSO commands in REXX, the return code is placed
      in a variable called RC- When using CLIST, the return code is
      saved in variable &LASTCC-
    " If at all possible stay away from using the CALL command to
      execute programs- Instead use ISPF SELECT command- This
      prevents hard coding the DSN name-
    " Native TSO you cannot use any ISPF Services-



4- Examples:

    IDCAMS1  - Invoke IDCAMS and LISTCAT userid



                             ALTLIB
                             ------


1- Syntax

    ALTLIB ACTIVATE USER(EXEC|CLIST) DDNAME(ddname)

    ALTLIB DEACTIVATE ALL
    ALTLIB RESET


2- Search Order

    SYSUEXEC
    SYSEXEC
    SYSUPROC
    SYSPROC


3- Items of Interest

" The ddname must be SYSUEXEC or SYSUPROC
" When defining ALTLIB for EXECs, the datasets can only contain
  REXXs-
" When defining ALTLIB for CLIST, the dataset can contain REXXs
  and CLISTs
" Each concatenated data set must have the same record format
  (RECFM) and logical record length (LRECL)-
" The SYSUEXEC and SYSUPROC datasets do not have to be the same
  record format (RECFM) and logical record length (LRECL) as the
  datasets allocated to SYSEXEC and SYSPROC-
" Must allocate the file before using ALTLIB- It does not
  allocate the file like ISPF's LIBDEF command-
" Up to eight EXEC and CLIST requests can be stacked-



                           REXX Functions
                           ---- ---------


1- OUTTRAP()

A- Syntax
    OUTTRAP(stem-, no-of-lines, CONCAT | NOCONCAT)
    OUTTRAP('OFF')

B- Description
    " Traps all TSO output messages and stores them to an array-
    " Stem-0 contains the number of elements
    " Do not use MSG('OFF') when using OUTTRAP()



2- MSG()

    A- Syntax
        MSG('ON')
        MSG('OFF')

    B- Description
        " Allows or prevents TSO messages from being displayed-
        " MSG('ON') is the default



3- Examples

    OUTTRAP1 - Use LISTDS to obtain PDS attributes
    IDCAMS2  - Invoke IDCAMS and display GDG number




                             EXECUTIL
                             --------


1- Description

" Lets you change various characteristics that control how an
  exec processes in the TSO/E address space-


2- Syntax

TSO  EXECUTIL <option>

Where <option> is
 HI - Halt Interruption
 HT - Halt Typing
 RT - Resume Typing
 TS - Trace Start
 TE - Trace End


3- Items of Interest

" This is an excellent tool to debug REXX programs that did not
  code for passing a TRACE argument to it-
" If you issue EXECUTIL TS from READY mode or ISPF, tracing is
  started for the next exec you invoke- Tracing is then in effect
  for that exec and any other execs it calls- Tracing ends when the
  original exec completes or "EXECUTIL TS" is entered-
" If you already are executing an exec, say stacking commands
  (ie- C34, C2), and you execute EXECUTIL TS it will trace all
  execs until you execute out of the base exec- For example, if you
  execute C34 and then REXXUTIL TS, all execs will be traced until
  you exit the stacking command C34-
" EXECUTIL TS is identical to issuing a TRACE ?R within your REXX
  program-
" Use HT (Halt Typing) to suppress terminal output generated by
  an exec- The exec continues running- HT suppresses any output
  generated by REXX instructions or functions (for example, the SAY
  instruction) and REXX informational messages- REXX error messages
  are still displayed-
" EXECUTIL affects only the current environment in which EXECUTIL
  is issued- For example, if you are in split screen in ISPF and
  issue EXECUTIL TS from the second ISPF screen to start tracing,
  only execs that are invoked from that ISPF screen are traced- If
  you invoke an exec from the first ISPF screen, the exec is not
  traced-



4- Examples

    A- From ISPF

      TSO EXECUTIL TS
      TSO  <rexx pgm>

    B- Invoking EXECUTIL while already in a REXX pgm

      <rexx pgm  a>
      TSO  EXECUTIL  TS
      TSO  <rexx pgm B>
      PF3 (END) out of C34
    or
      <rexx pgm a>
      TSO  EXECUTIL  TS
      TSO  <rexx pgm b>
      TSO  EXECUTIL  TE

