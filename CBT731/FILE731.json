{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012659000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 4702880, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 24, "INMDSNAM": "CBT.V500.FILE731.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 4702880, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 4702880, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE731.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00K\\x0b'", "DS1TRBAL": "b'&\\xa6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xfd\\x00\\x01\\x05\\x02\\x00\\x01\\x00L'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00B\\x01 1\\x0f\\x01 1\\x0f\\x185\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-11-05T00:00:00", "modifydate": "2020-11-05T18:35:42", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  731\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE731\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 110 MEMBERS COUNTED; CUMULATIVE SIZE IS 44,242 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/05/20    18:35:41    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$CHGUCB": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00#\\x01\\x122O\\x01\\x122O\"7\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-11-19T00:00:00", "modifydate": "2012-11-19T22:37:23", "lines": 24, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes on UCB**** program changes and additions.\n\n2012/11/19 - SBG - UCBTAPE - v1.1 :\n     Sometimes tape volser fields in the general UCB areas are used\n     for other purposes at different stages of a job, or at different\n     stages of tape mount status.  If you catch the run of UCBTAPE\n     at such times, you might get binary data in the 3 potential\n     \"volser\" fields that we are checking.  Just to make sure we\n     don't display this binary data, we scrub it by changing\n     unprintables and invalid volser characters to blanks, before\n     displaying.  If you feel this was done in error, where, for\n     example, you might have weird volser names, and the translate\n     table doesn't let those characters go through, please modify\n     the table TRTBL0, and report the necessary changes to me.\n     (email: <Sam Golob> sbgolob@cbttape.org)\n\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE01": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x000\\x01\\x19\\x00/\\x01\\x19\\x00/#\\x16\\x00i\\x00i\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-01-02T00:00:00", "modifydate": "2019-01-02T23:16:30", "lines": 105, "newlines": 105, "modlines": 0, "user": "SBGOLOB"}, "text": "\n        PROGRAMS RELATING TO THE TPVT\n        (TSO PARMLIB VECTOR TABLE)  :\n\n           SHOWTPVT -  Format all the fields of the TPVT\n                       (TSO PARMLIB Vector Table) which is\n                       not documented publicly by IBM.  This\n                       program will display and explain all\n                       the fields in this control blok on\n                       your system.\n\n           ADIS     -  Display all the TSO Authorization tables\n                       that were generated by the IKJTSOxx\n                       PARMLIB settings.\n\n           ALPL     -  Display or (if APF-authorized) change\n                       the default TSO allocations to OLD or\n                       SHR, without using or changing the\n                       PARMLIB setting.\n\n           INMXD    -  Display and format all of the fields\n                       in the INMXPARM (SEND) control block\n                       pointed to by the TPVT.\n\n           CINMX    -  Change the XMIT output limit (OUTLIM)\n                       or the warning interval, or the start\n                       point for the warnings, without using\n                       or changing the PARMLIB setting.\n\n           DTEST    -  Display the in-storage PARMLIB TEST\n                       parameter values (hooked off the TPVT).\n\n           EESCB    -  Display the in-storage SEND parameter\n                       values and Broadcast Dataset parameters\n                       in great detail.\n\n           DVAT     -  Display the VATLST settings which have\n                       remained in storage after the IPL.\n                       (Some of them are only in storage at\n                       IPL time and they disappear afterwards.)\n\n           LOGOPTS  -  Display or (if APF-authorized) change\n                       the IKJTSOxx LOGON option settings,\n                       in storage, without affectng PARMLIB.\n\n        PROGRAMS RELATING TO THE TSO RELOGON BUFFER:\n\n           SHOWRLGB -  Displays the entire contents of the TSO\n                       Relogon buffer, and all its settings.\n\n           BYE      -  Allows you to enter any command in the\n                       TSO Relogon buffer, or to reset it\n                       (i.e. re-initialize it).\n\n           YESLOGOF -  Set the ECTLOGF flag ON in the ECT, so\n                       that the command in the Relogon buffer\n                       is executed at LOGOFF time.  TSO cmd.\n\n           NOLOGOF  -  Set the ECTLOGF flag OFF in the ECT...\n                       (Opposite action to YESLOGOF command)\n\n           RELOGON  -  Program from Jeff Broido, to execute\n                       a re-logon from native TSO.  From ISPF\n                       it works differently, but may be useful\n                       sometimes.\n\n        PROGRAMS RELATING TO 8-CHARACTER USERID TESTING:\n\n           TSVT8    -  APF-authorized command for z/OS 2.3 and\n                       higher, to switch 8-character TSO userid\n                       capability ON or OFF.\n\n           CPFX     -  TSO command to change your TSO prefix\n                       according to 8-character userid rules.\n                       (downward compatible too)\n\n           ALLIDS   -  TSO command to display your own userid\n                       which is present in many different\n                       control blocks.  8-character userid\n                       compatible.\n\n        MISCELLANEOUS USEFUL TSO COMMANDS:\n\n           DACEE    -  Display and formats your own address\n                       space's ACEE, including a hex display\n                       of the entire control block.\n\n           MEMBER   -  Displays statistics about a pds member.\n\n        TSO COMMANDS DIRECTLY USING THE ULUT (UCB LOOKUP)\n        INTERFACE, WITHOUT NEEDING AUTHORIZTION.\n        (Also see ULUDASD and ULUTAPE in CBT File 873.)\n\n           UCBDASD  -  Displays all online DASD with quite a\n                       bit of information.\n\n           UCBTAPE  -  Displays status of all online tape drives.\n\n        REXX EXECS FROM MARK ZELDEN TO DISPLAY COMMAND OUTPUT:\n\n           TSOB     -  ISPF BROWSE trapped TSO command output\n           TSOE     -  ISPF EDIT   trapped TSO command output\n           TSOR     -  TSO  REVIEW trapped TSO command output\n           TSOV     -  ISPF VIEW   trapped TSO command output\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLOAD": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00H\\x01\\x026_\\x01\\x12!\\x8f\\x12(\\x00#\\x00\\x08\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2012-08-05T12:28:48", "lines": 35, "newlines": 8, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*      THIS JOB RECONSTITUTES THE EESCB.MODGEN MACRO LIBRARY\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT485.FILE731(PDSLOAD)')\n   DSN (yourid.EESCB.LOADLIB) VOL(volser)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT485.FILE731',   /* THIS PDS */\n//             OPRE=SBGOLOB,\n//             QUAL=EESCB,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=DATA04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=15,S=30,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=yourid.EESCB.LOADLIB   /* EESCB.LOADLIB */\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=MODGEN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$ULUNOTE": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x007\\x01\\x124o\\x01\\x15\\x01\\x9f\\x19\\x12\\x01\\x95\\x00\\xca\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2012-12-11T00:00:00", "modifydate": "2015-01-19T19:12:37", "lines": 405, "newlines": 202, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes on the ULUT accessing method to scan UCB's.\n\n      Programs:  UCBDASD, UCBTAPE, UCBTYPE.\n\nIntroduction.\n\nGilbert Saint-flour discovered this IBM internal technique for doing\nnon-authorized scans of REAL UCB's.  IBM keeps a real UCB Lookup Table\n(called the ULUT), in above-the-line storage.  The format of this\ntable is not guaranteed.  IBM can change the format at will, but they\nhave established \"types\" (or formats) of ULUT table.  Currently, as\nof this writing, there are three ULUT types, type X'01' and type X'02',\nand type X'03'.  The type 3 ULUT information, starting with z/OS 2.2,\nnow resides in 64-bit storage, and 64-bit techniques are needed for\nits access.\n\nThe advantage of using this \"direct lookup\" technique to access the\nreal UCB's and not a copy, is that a non-authorized program can do it.\nIf you need to SERIALIZE the real UCB or its extensions, in order to\nupdate it, then you need authorization.  But JUST TO READ the contents\nof the UCB's, and you want \"real time\" information without having to be\nauthorized, then this is the method of access to use.\n\nUp through the z/OS 2.1 level, if you want to check the format of the\nULUT, you first look for which \"type\" it is, and then you know what to\ndo.  You do not have to check the system level.  Knowing the ULUT TYPE\nis enough.  From z/OS 2.2 and beyond, since the ULUT is now in 64-bit\nstorage, and 64-bit techniques are needed to access the ULUT, you need\nto check the system level to see if it is at least z/OS 2.2, and for\nthat level and above, you need to code 64-bit access mode instructions.\n\nThe ULUT type 1 has existed at least as far back as ESA 5.2.2 which\nis pre-Y2K.  The ULUT type 2 has extended as far forward as z/OS 2.1.\nThe switch from type 1 to type 2 occurred at z/OS 1.7.\n\nAt the z/OS 2.2 level, ULUT is type 3, and the ULUT control block has\nbeen moved into 64-bit storage.  So from z/OS 2.2 onward, you need to\nuse 64-bit mode instructions (SAM64) to access the ULUT data.  But the\nUCB data, once accessed, is in 31-bit format, so the old methods of\naccess can be used against that data.  You first have to move the\nUCB address from its location in 64-bit storage (in the ULUT control\nblock) into 31-bit storage, and then all the old methods will suffice.\n\nThe ULUT consists of two parts.  First is a bunch of fields containing\ngeneral quantities, such as the total number of entries in the table,\nand the number of entries in each device category, such as DASD, TAPE,\nand so forth.  After that, there is the device table itself, describing\nall the devices.  We will refer to the device table itself as the table\nof entries, or the ULUT table entries (described by ULUE).\n\nFor all ULUT types thus far, the format of the 12-byte ULUT table\nentries (ULUE) appears to be the same.\n\n   ULUT table entries are 12 bytes in length. No change in format.\n\n     The first halfword is the unit number in hex.\n     The second halfword consists of flags.\n     The third halfword is a sequence counter number in the table.\n     The fourth halfword is probably unused for now.\n     The next fullword contains the real UCB address of the unit.\n\n     Example:\n\n          0A80 4000 010D 0000 00F511D0\n\n          unit flag coun-     real UCB\n          addr      ter       address\n\nIn order to read the ULUT table entries, you look at the first\nhalfword of the table entry which is the hex device address, and the\nlast fullword of the ULUT table entry, which points to the real UCB.\n\nThe UCB itself, contains, or points to, related areas that tell you\njust about anything you need to know about that particular device.\nSo the main guts of each ULUT table entry is the hex device number,\nand the address of the real UCB which defines that device.\n\nFor ULUT type 1 and type 2, the general ULUT control block itself is\naccessed by the following instructions, which have to execute in\n31-bit mode (AMODE 31).  We have condensed this sequence of\ninstructions into a relatively easy-to-use macro, called ULUINIT.  We\nwill explain more about our ULUINIT macro later.  For now, here are\nthe instructions that are used to get the address of the entire ULUT\ntable, and to afterwards point to the address of the first 12-byte\nULUT table entry.\n\n\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R2,16                  CVT\n         USING CVTMAP,R2\n         MVC   OSLVLSW6(1),CVTOSLV6   Copy relevant OS level switch\n         DROP  R2\n         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM\n         L     R3,X'D0'(,R3)          IOVT\n         L     R6,8(,R3)              Check address at IOVT+X'8'\n         LTR   R6,R6                  If zero, then 64-bit\n         BNZ   GETULUN2               Not zero, then 31-bit\n         B     GETULUY2               Zero, then use 64-bit address\n* ------------------------------------------  Type 3  below  ------- *\nGETULUY2 DS    0H                     64-bit mode code. Type >2.\n         OI    OSLVLSW6,X'40'         Indicate z/OS 2.2 or UA90741,0,2\n         LLGTR R3,R3                  Clear 64-bit hi-area\n         LLGTR R4,R4                    which are the top 33 bits\n         LLGTR R9,R9                      in the 64-bit register.\n         LLGTR R10,R10                       ...\n         LLGTR R12,R12                       ...\n         LG    R4,X'1B8'(,R3)         Doubleword ULUT V3 address\n         LGR   R3,R4                  Reload R3 with ULUT address\n         SAM64                        Access ULUT in 64-bit mode only.\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out.\n         B     GETULUN3               Skip over 31-bit mode stuff\n* ------------------------------------------  Type 3  above  ------- *\nGETULUN2 DS    0H                     31-bit mode code. Type <=2.\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Point both regs to ULUT\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out.\n* ------------------------------------------------------------------ *\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n* ------------------------------------------  Type 3  below  ------- *\nGETULUN3 DS    0H\n         TM    OSLVLSW6,X'40'         Is there 64-bit ULUT?\n         BNO   GETULEX2               ULUT Type 2 or less, 31-bit mode.\n         SAM64                        Need 64-bit mode for compare.\n         CLI   4(R3),X'03'            ULUT Type 3?\n         BE    ULUTTYP3               Go to beginning of table entries.\n         SAM31                        Back to 31-bit mode.\nGETULEX2 DS    0H\n* ------------------------------------------  Type 3  above  ------- *\n         B     EXIT                   Neither?  Get out.\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed a few times.  So IBM           *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n* ------------------------------------------------------------------ *\nULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\n* ------------------------------------------------------------------- *\n*               ULUT Type 3 is accessed in 64-bit mode,               *\n*               because it resides in 64-bit storage,                 *\n*               so you turn on SAM64, and after you have              *\n*               finished, you turn on SAM31.                          *\n*               The doubleword address pointer to the                 *\n*               ULUT type 3, is at X'1B8' off the IOVT                *\n*               instead of the old fullword pointer at                *\n*               X'8' off the IOVT.  IOVT is still 31-bit.             *\n* ------------------------------------------------------------------- *\nULUTTYP3 LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.\n         L     R4,X'1C'(,R4)   Total number of ULUT entries (still fwd)\n         ST    R4,TOTCOUNT     Store this fullword number away\n         B     LOOPSET\nLOOPSET  DS    0H              Set up to loop thru all UCB's.\n\n\nTo access the ULUT type 3, if IOVT+8 is zeroes, there is a new\ndoubleword pointer at X'1B8' off the IOVT, instead of the old fullword\npointer at X'8' off the IOVT.\n\n  ****   See member $ULU3COD for code details for 64-bit ULUT   ****\n\n   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nThe rest of this discussion concerns the ULUINIT and ULUSCAN macros,\nwhich I invented so that using this coding method should become nearly\nas easy as coding a UCBSCAN macro from IBM.   (See CBT File 873)\n\nAs of this writing, I have not yet updated these macros to accommodate\nULUT type 3 (64-bit ULUT).\n\n   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nI invented the ULUDSECT control block for the purpose of simplifying\nthe process of reading through all the devices defined in the UCB\nLookup Table.  Instead of looking at the UCB itself and extracting\nany fields we want to look at, our ULUSCAN macro pre-extracts commonly\nused fields from the UCB and related control blocks, in one process,\nputting all this information into the ULUDSECT control block.  Then,\nmost subsequent inquiries from the UCB actually go to ULUDSECT fields,\nwhich were obtained from the UCB by the ULUSCAN macro's action.  To\nput it another way, we might say that the ULUSCAN macro \"pre-digests\"\nthe UCB information, before we make our inquiries.\n\nThe ULUINIT macro requires a 64-byte workarea, which contains the\ncontrol block described by the ULUDSECT macro.  The fields of the\nULUDSECT control block are actually filled by two macros:  ULUINIT\ninitially, and then ULUSCAN later.  The ULUINIT macro is executed\nonce, to establish the ULUDSECT control block and to fill in its fields\nrelating to the whole ULUT control block itself.  The ULUSCAN macro\nthen reads each individual 12-byte ULUT table entry corresponding to\neach individual device, \"pre-digesting\" its UCB fields and placing\nthem into the ULUDSECT control block.\n\nThe ULUSCAN macro is therefore executed repeatedly, one time for each\ndevice defined in that system.\n\nThe contents of the ULUDSECT control block follows below.\n\nTo be clearer, the ULUINIT macro establishes the ULUDSECT control block\nand fills in those fields NOT having to do with each UCB, but with the\nULUT control block in general.  The ULUSCAN macro then fills in all\nULUDSECT fields which have to do with each ULUT table entry (that is,\neach particular UCB).\n\nYou can see that everything necessary to describe a device (i.e. a\nUCB) can be obtained from the contents of ONE ULUDSECT entry.  To\nscan all the UCB's on a system, you run the ULUSCAN macro to step\nthrough the ULUT table entries, one at a time, pre-digesting each\none's UCB information and putting it into the ULUDSECT control block.\n\nAPF-authorization is not necessary to do this, but the scan must be\ndone in 31-bit mode.  Here is what the ULUDSECT control block looks\nlike.\n\nULUDSECT DSECT\n         DS    0D            Align to doubleword for GETMAIN\nULUDULUT DS    F             Address of ULUT in this system\nULUDCURR DS    F             Current ULUT table entry address\nULUDNEXT DS    F             Next ULUT table entry address\nULUDTOTC DS    F             Total count of ULUT entries\nULUDRUNC DS    F             Running descending count of ULUT entries\n*                             (initialized to ULUDTOTC at beginning)\nULUDDEVA DS    H             Device address of current table entry\nULUDCNTR DS    H             Counter in ULUT of current table entry\n*                             This is one higher than the table entry\n*                             count, and is incremented by one with\n*                             each successive table entry.  The count\n*                             field for the very last table entry,\n*                             is X'0000', marking the end of the table.\nULUDUCBA DS    F             UCB address of current table entry\nULUDCEXT DS    F             Address of this UCB's common extension\nULUDDEVT DS    F             UCB device type (4 bytes)\nULUDONLF DS    X             UCB + 3 (device online has X'80' set)\nULUDTYPE DS    X             ULUT TYPE for this table\nULUDRSV1 DS    2X            RESERVED\nULUDSVR0 DS    F             Save area for R0 in macro invocation\nULUDSVR1 DS    F             Save area for R1 in macro invocation\nULUDSVUR DS    F             Save USING register for workarea\nULUDSVW1 DS    F             Save first work register\nULUDSVW2 DS    F             Save second work register\nULUDSVBR DS    F             Save BCT register\n         DS    0D\nULUDLENG EQU   *-ULUDSECT\n\n\nNow I have to show you how to use our ULUT access macros, ULUINIT\nand ULUSCAN.  A complete coding example is included in this pds.\nThis is the TSO command called ULUDIAG.  The TSO command ULUDIAG\nwill display all relevant ULUDSECT fields for each defined UCB (ULUT\ntable entry).  Here is an example of ULUDIAG output:  The output was\nproduced by the coding example below it, with the print lines being\ndone by means of the PUTENTRY subroutine.\n\n             ULUDIAG - V1.0 - PRINT ULUDSECT FIELDS\n             -------   ----   ----- -------- ------\n             ***       DEV ADDRESS: 000C        ***\nULUDULUT 02281F90  ULUDCURR 02282114  ULUDNEXT 02282120  ULUDDEVA 000C\nULUDUCBA 00F46140  ULUDCEXT 00F46118  ULUDDEVT 10000801  ULUDCNTR 0002\nULUDTOTC 00000183  ULUDRUNC 00000183  ULUDONLF 80        ULUDTYPE 02\n             ***       DEV ADDRESS: 000E        ***\nULUDULUT 02281F90  ULUDCURR 02282120  ULUDNEXT 0228212C  ULUDDEVA 000E\nULUDUCBA 00F46180  ULUDCEXT 00F46158  ULUDDEVT 10000808  ULUDCNTR 0003\nULUDTOTC 00000183  ULUDRUNC 00000182  ULUDONLF 80        ULUDTYPE 02\n             ***       DEV ADDRESS: 000F        ***\nULUDULUT 02281F90  ULUDCURR 0228212C  ULUDNEXT 02282138  ULUDDEVA 000F\nULUDUCBA 00F461C0  ULUDCEXT 00F46198  ULUDDEVT 10000808  ULUDCNTR 0000\nULUDTOTC 00000183  ULUDRUNC 00000181  ULUDONLF 00        ULUDTYPE 02\n             ***       DEV ADDRESS: 0120        ***\nULUDULUT 02281F90  ULUDCURR 02282138  ULUDNEXT 02282144  ULUDDEVA 0120\nULUDUCBA 00F46248  ULUDCEXT 00F46220  ULUDDEVT 3030200E  ULUDCNTR 0005\nULUDTOTC 00000183  ULUDRUNC 00000180  ULUDONLF 04        ULUDTYPE 02\n             ***       DEV ADDRESS: 0121        ***\nULUDULUT 02281F90  ULUDCURR 02282144  ULUDNEXT 02282150  ULUDDEVA 0121\nULUDUCBA 00F462E0  ULUDCEXT 00F462B8  ULUDDEVT 3030200E  ULUDCNTR 0006\nULUDTOTC 00000183  ULUDRUNC 0000017F  ULUDONLF 04        ULUDTYPE 02\n                  *** *** *** *** *** *** ***\n                  *** *** *** *** *** *** ***\n             ***       DEV ADDRESS: 0A80        ***\nULUDULUT 02281F90  ULUDCURR 02282D98  ULUDNEXT 02282DA4  ULUDDEVA 0A80\nULUDUCBA 00F501D0  ULUDCEXT 00F501A8  ULUDDEVT 3030200F  ULUDCNTR 010D\nULUDTOTC 00000183  ULUDRUNC 00000078  ULUDONLF 8E        ULUDTYPE 02\n             ***       DEV ADDRESS: 0A81        ***\nULUDULUT 02281F90  ULUDCURR 02282DA4  ULUDNEXT 02282DB0  ULUDDEVA 0A81\nULUDUCBA 00F50268  ULUDCEXT 00F50240  ULUDDEVT 3030200F  ULUDCNTR 010E\nULUDTOTC 00000183  ULUDRUNC 00000077  ULUDONLF 8C        ULUDTYPE 02\n             ***       DEV ADDRESS: 0A82        ***\nULUDULUT 02281F90  ULUDCURR 02282DB0  ULUDNEXT 02282DBC  ULUDDEVA 0A82\nULUDUCBA 00F50300  ULUDCEXT 00F502D8  ULUDDEVT 3030200F  ULUDCNTR 010F\nULUDTOTC 00000183  ULUDRUNC 00000076  ULUDONLF 8C        ULUDTYPE 02\n             ***       DEV ADDRESS: 0A83        ***\nULUDULUT 02281F90  ULUDCURR 02282DBC  ULUDNEXT 02282DC8  ULUDDEVA 0A83\nULUDUCBA 00F50398  ULUDCEXT 00F50370  ULUDDEVT 3030200F  ULUDCNTR 0110\nULUDTOTC 00000183  ULUDRUNC 00000075  ULUDONLF 84        ULUDTYPE 02\n             ***       DEV ADDRESS: 0A84        ***\nULUDULUT 02281F90  ULUDCURR 02282DC8  ULUDNEXT 02282DD4  ULUDDEVA 0A84\nULUDUCBA 00F50430  ULUDCEXT 00F50408  ULUDDEVT 3030200F  ULUDCNTR 0111\nULUDTOTC 00000183  ULUDRUNC 00000074  ULUDONLF 8C        ULUDTYPE 02\n                  *** *** *** *** *** *** ***\n\n\nNext is the piece of code which produced the above report.  This\nshows how useful the ULUINIT and ULUSCAN macros are, and how they\nsimplify the coding in this program.\n\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n*\nLOOPUCB  DS    0H\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n         BAL   R7,PUTENTRY            Print contents of control block\n         MVC   ULUDCURR,ULUDNEXT      Make next entry current\n         BCT   R6,LOOPUCB             Get stuff for next table entry.\n         B     EXIT0                  End of table. Fall thru.\n\nMECHANISM OF OPERATION:\n\nThe ULUDSECT control block contains (or has access to) all the\ninformation that you'll need about one particular device.  The\nfields of the ULUDSECT control block are filled by:\n\n1.  The ULUINIT macro, which creates the ULUDSECT control block\n    and fills those of its fields common to the entire ULUT\n    control block.\n\n2.  The ULUSCAN macro, which fills in all fields in the ULUDSECT\n    having to do with ONE UCB, pointed to by ONE ULUT table entry.\n\nAfter you invoke the ULUINIT macro once, you then invoke the ULUSCAN\nmacro repeatedly.  Each invocation of the ULUSCAN macro gives you\ninformation about ONE device, represented by ONE UCB, pointed to\nby ONE 12-byte ULUT table entry.\n\nThe above code works by doing a complete search of ALL defined\ndevices.  It \"marches\" completely through the entire ULUT table,\nfrom beginning to end.  Each invocation of the ULUSCAN macro gives\ninformation from ONE ULUT table entry, which points to ONE UCB,\nthat represents ONE device.\n\nEach time the ULUSCAN macro is invoked, it fills the fields of the\nULUDSECT control block with a lot of information extracted from, or\nderived from, that UCB.  You can picture this situation by saying that\nthe ULUSCAN macro \"pre-digests\" information from each UCB, putting\nthe \"digested\" information into the ULUDSECT control block.\n\nTo step through the ULUT (UCB Lookup Table), from one entry to the\nnext, just move the ULUDNEXT field (pointing to the NEXT ULUT table\nentry) into the ULUDCURR field (meaning the current ULUT table entry)\nand reinvoke the ULUSCAN macro, to refill all the ULUDSECT fields for\nthe next UCB.  Then your program will go process the new UCB's\ninformation.  Do this until you've reached the end of the ULUT table.\n\nWhere is the end of the table?  It is found by COUNTING.\n\nThe total number of entries in the ULUT table, extracted from a field\nin the ULUT control block, is loaded into the BREG register by the\nULUINIT macro.  This register can be used later as a BCT register to\ncount through all the table entries, that exact number of times.  The\nULUSCAN macro does not automatically do a partial search, as yet,\nlike IBM's UCBSCAN macro can do.  (UCBSCAN does all the selections\nunder the covers, but in reality, it also does a complete search of\nall UCB's, much of the time).\n\nSelection of devices, for example, only those which are online, is\ndone while that device's ULUT table entry is being processed by the\nULUSCAN macro.  The ULUSCAN macro loads that device's UCB information\ninto the fields of the ULUDSECT control block, and the selection is\nusually done by looking somewhere in the ULUDSECT control block, and\nby making a selection decision from one of its fields.\n\nFor example, to see if a device is online, the ULUDONLF field, which\nthe ULUSCAN macro extracts from that device's UCB+3, is examined for\nthe X'80' bit.  If that bit is on, then the device is online.  If\nnot, then the device is offline.  All other selection criteria are\ndone, using fields created from that unit's UCB, and which have\nalready been loaded into the ULUDSECT control block by the ULUSCAN\nmacro.  Then, when you've finished with that particular UCB, you loop\nback to the next ULUT table entry and invoke the ULUSCAN macro again,\nto get information from the next UCB.  ULUSCAN refills the ULUDSECT\ncontrol block with new information from the next device's UCB (the\nnext ULUT table entry).  Then you look at that one.  And so on, until\nyou've searched through the entire ULUT table, and you've seen all\nthe defined devices.\n\nThe advantage of doing all of this, is that you can do a complete\nscan of all the real UCB's, without having to be APF-authorized.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$ULU3COD": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x17\\x01\\x146/\\x01\\x15\\x01\\x9f\\x18W\\x00\\xde\\x00\\x99\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2014-12-28T00:00:00", "modifydate": "2015-01-19T18:57:17", "lines": 222, "newlines": 153, "modlines": 0, "user": "SBGOLOB"}, "text": "UCB LOOKUP ACCESS USING THE \"UCB LOOKUP TABLE\" - NOTES FOR ULUT TYPE 3.\n\nCode Samples - what you need to do.\n---- -------\n\nAccess:  You access the ULUT from the CVT as follows:\n------\n\nCVT\nCVTIXAVL:  CVT  +  X'7C'\nIOVT Adr:  IXAVL + X'D0'\nULUT Adr:  Type 1 and Type 2  -  IOVT + X'8' points to 31-bit ULUT addr\n           Type 3  -  IOVT + X'1B8' points to 64-bit ULUT address\n                      and IOVT + X'8' is zeroes\n\nULUT structure:\n---- ---------\n\nThe ULUT has a header section and a table section.\n\nReference for each type of ULUT is in the following macros:\n\n         IOSDULUT  -  Describes ULUT Type 1  -  31-bit mode\n         IOSDULU2  -  Describes ULUT Type 2  -  31-bit mode\n         IOSDULU3  -  Describes ULUT Type 3  -  64-bit mode\n\nCODING:  Idea of coding needed to access ULUT type 3.\n------\n\nNote:\n\n   SAM64 and SAM31 are new machine instructions: Set addressing mode...\n\n\nMacros needed, from this file.\n\n         IOSDIOVT\n         IOSDULUT\n         IOSDULU2\n         IOSDULU3\n\n\nIn main code:\n-- ---- ----\n\n         XC    OSLVLSW6,OSLVLSW6      Clear holding area for CVTOSLV6.\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R2,16                  CVT\n         USING CVTMAP,R2\n         MVC   OSLVLSW6,CVTOSLV6      Copy relevant OS level switch\n         DROP  R2\n         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM\n         L     R3,X'D0'(,R3)          IOS Vector Table\n         ST    R6,SAVER6A             Preserve previous contents of R6\n         L     R6,8(,R3)              Check address at IOVT+X'8'\n         LTR   R6,R6                  If zero, then 64-bit\n         BNZ   GETULUN2               Not zero, then 31-bit\n         B     GETULUY2               Zero, then use 64-bit address\nGETULUY2 DS    0H                     64-bit mode code. Type >2.\n         OI    OSLVLSW6,X'40'         Indicate 64-bit ULUT to program\n         BNO   GETULUN2               ULUT Type 2 or less, 31-bit mode.\n         LLGTR R3,R3                  Clear 64-bit hi-area (hi 33 bits)\n         LLGTR R4,R4                    ...\n         LLGTR R9,R9                    ...\n         LLGTR R10,R10                  ...\n         LLGTR R12,R12                  ...\n         LG    R4,X'1B8'(,R3)         Dwd ULUT V3 address at X'1B8'\n         SAM64                        Set 64-bit addressing mode\n         LGR   R3,R4                  Reload R3 with dwd ULUT address\n         B     GETULUN3               Skip type 1 and type 2 stuff\nGETULUN2 DS    0H                     31-bit mode code. Type <=2.\n         L     R4,8(,R3)              31-bit UCB Lookup Table address\n         LR    R3,R4                  Point both regs to ULUT\nGETULUN3 DS    0H\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         SAM31                        If NE, EXIT in 31-bit mode.\n         BNE   EXIT                   Nope. Not ULUT. Out. Code 12.\n* ------------------------------------------------------------------ *\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n         TM    OSLVLSW6,X'40'         Is the ULUT in 64-bit mode?\n         BNO   GETULEX2               No. Type 2 or less. 31-bit mode.\n         SAM64                        Need 64-bit mode for compare.\n         CLI   4(R3),X'03'            After z/OS 2.2 ?  (ULUT Type 3?)\n         BE    ULUTTYP3               Go to beginning of table entries\n*                                      and stay in 64-bit mode\n         SAM31                        Back to 31-bit mode and exit.\nGETULEX2 DS    0H\n* ----------------------------------- Insert test for future types here\n         B     EXIT                   Get out. Code 12.\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     This practice appears to be relatively harmless if we only     *\n*     DISPLAY the UCB and don't try to modify it.  Also, during a    *\n*     configuration change, you might get a S0C4 from these          *\n*     programs, but they will run fine a minute later.  They are     *\n*     primarily for display only.                                    *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 2.2.  So it is really quite stable, so far,      *\n*      as long as we code for all the current ULUT types.            *\n*                                                                    *\n*     Summary:                                                       *\n*                                                                    *\n*     The ULUT table has been changed twice by IBM, thus far:        *\n*      Type 1:  ESA 4.x  thru z/OS 1.7                               *\n*      Type 2:  z/OS 1.7 thru z/OS 2.1                               *\n*      Type 3:  z/OS 2.2 ....    (table is now in 64-bit storage)    *\n*               z/OS 2.1  with UA90741 applied                       *\n*               z/OS 1.13 HBB7780 with UA90740 applied               *\n*               z/OS 1.13 JBB778H with UA90742 and UA90740 applied   *\n*                                                                    *\n*     At the ULUT V.3 level the ULUT (UCB Lookup Table) has been     *\n*      moved into 64-bit storage, so even to get to the beginning    *\n*      of the table, in order to find out the table type, is now     *\n*      different, but not too difficult.  In the (OCO) macro         *\n*      IOSDIOVT, there are two pointer locations to the ULUT.        *\n*      IOVT+8 is a fullword pointer.  IOVT+X'1B8' is a doubleword    *\n*      pointer.  If IOVT+8 for a fullword, is zeroes, then this      *\n*      shows that IOVT+X'1B8' is the valid pointer, it points to     *\n*      a doubleword address, and you have to address the ULUT        *\n*      in 64-bit mode.                                               *\n*                                                                    *\n*     One test is run.  If IOVT+8 for a fullword is zeroes, then     *\n*      IOVT+X'1B8' is assumed to be valid, and flag OSLVLSW6, which  *\n*      had previously been copied from CVTOSLV6 in the CVT, is       *\n*      OR'ed to X'40', which would normally indicate the presence    *\n*      of z/OS 2.2.  This indicates to the program that the ULUT     *\n*      is in 64-bit mode, even at lower levels, with the application *\n*      of PTFs UA90741, or UA90740 possibly with UA90742.            *\n*                                                                    *\n* ------------------------------------------------------------------ *\nULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP3 LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.\n         L     R4,X'1C'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\n* ------------------------------------------------------------------- *\nLOOPSET  DS    0H              Set up loop thru all UCB's.\n         TM    OSLVLSW6,X'40'  Is system ACTUALLY z/OS 2.2 or above?\n         BNO   LOOPUCB                No.\n         LLGTR R5,R5           Clear 64-bit hi-area\n* --------------------------- Insert displacement for future types.  *\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------- *\n*    Main part of code. Go through all the UCB's and extract info.    *\n* ------------------------------------------------------------------- *\nLOOPUCB  DS    0H            Loop thru table entries, covering\n*                             all of the defined UCBs.\n*                            Do this for the number of table entries.\n         LLGTR R4,R4         Make sure hi-order not corrupted.\n         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM64                 No.\n         SAM64\nNSAM64   DS    0H\n         L     R5,8(,R3)              Get address of this unit's UCB.\n         TM    OSLVLSW6,X'40'         Is ULUT in 64-bit mode?\n         BNO   NSAM31B                No.\n         SAM31                        For ULUT in 64-bit mode, SAM31.\nNSAM31B  DS    0H\n         ST    R5,UCBADDRS            Save the address for reporting.\n         USING UCBOB,R5               Addressability to UCB.\n\n\nAt the end of processing each UCB, we have to switch to 64-bit mode\nagain, and bump to the next ULUT table entry, because we must remember\nthat the ULUT is in 64-bit storage, and we need SAM64 to access it.\n\nCode example:\n\nLOOPJUMP DS    0H                     For ULUT in 64-bit mode, SAM64.\n         TM    OSLVLSW6,X'40'             Test 64-bit mode\n         BNO   NSAM31A\n         SAM64\nNSAM31A  DS    0H\n         LA    R3,X'C'(,R3)           Go to next ULUT entry\n         BCT   R4,LOOPUCB             And loop until we've scanned all.\n*\n* ---- At end of ULUT, fall thru to here.\n*\n         TM    OSLVLSW6,X'40'         Is ULUT in 64-bit mode?\n         BNO   NSAM31                 No.\n         SAM31                        For ULUT in 64-bit mode, SAM31.\nNSAM31   DS    0H\n         B     EXIT0\n         DROP  R5\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE731": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x006\\x01 1\\x0f\\x01 1\\x0f\\x185\\x02#\\x02#\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-11-05T00:00:00", "modifydate": "2020-11-05T18:35:36", "lines": 547, "newlines": 547, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 731 is from Sam Golob, and contains TSO commands related  *   FILE 731\n//*           to most TSO/E PARMLIB UPDATE functions, particularly  *   FILE 731\n//*           Broadcast Dataset switching, and commands related to  *   FILE 731\n//*           the XMIT command (change OUTLIM and WARNING values    *   FILE 731\n//*           on the fly, or to display all INMXPARM values).       *   FILE 731\n//*                                                                 *   FILE 731\n//*           Among other areas, many commands relating to the TPVT *   FILE 731\n//*           and TCAS control blocks can be found here.            *   FILE 731\n//*                                                                 *   FILE 731\n//*           Programs relating to many other areas of TSO are      *   FILE 731\n//*           also included in this file.                           *   FILE 731\n//*                                                                 *   FILE 731\n//*           email:  sbgolob@cbttape.org                           *   FILE 731\n//*                                                                 *   FILE 731\n//*           Recently added, was a command to display the          *   FILE 731\n//*           non-default TEST settings from IKJTSOxx (called       *   FILE 731\n//*           DTEST).  Added as well, was a program to replace      *   FILE 731\n//*           new TEST settings using control cards.  This batch    *   FILE 731\n//*           program is called LOADTEST.                           *   FILE 731\n//*                                                                 *   FILE 731\n//*           This file also contains TSO commands to show and      *   FILE 731\n//*           change quantities having to do with the TSOKEYxx      *   FILE 731\n//*           PARMLIB member.  (See also CBT File 797)              *   FILE 731\n//*                                                                 *   FILE 731\n//*           Mamy programs may be found here, which relate         *   FILE 731\n//*           to control blocks that are chained off the TPVT       *   FILE 731\n//*           (TSO Parmlib Vector Table), a control block that      *   FILE 731\n//*           is not publicly documented by IBM.  See also,         *   FILE 731\n//*           commands SHOWTPVT and SHOWTCAS.                       *   FILE 731\n//*                                                                 *   FILE 731\n//*           (Look carefully through this file, because it         *   FILE 731\n//*           contains programs that do a lot of stuff in TSO.)     *   FILE 731\n//*                                                                 *   FILE 731\n//*       - - - - - - - - - - - - - - - - - - - - - - - - - - - -   *   FILE 731\n//*                                                                 *   FILE 731\n//*  **NEW**  We have added several commands designed to change     *   FILE 731\n//*  *     *  TCAS parameters on the fly.  They have been named     *   FILE 731\n//*  *     *  to match the parameters in the TSOKEYxx PARMLIB       *   FILE 731\n//*  *     *  member.  They must be APF-authorized, because the     *   FILE 731\n//*  **NEW**  TCAS control block is in fetch-protected storage.     *   FILE 731\n//*                                                                 *   FILE 731\n//*  **NEW**  These are called (same as TSOKEYxx keywords):         *   FILE 731\n//*  *     *  BUFRSIZE, CHNLEN, LOBFREXT, HIBFREXT, RECONLIM,       *   FILE 731\n//*  *     *  SCRSIZE, USERMAX, and ENGTRANS.                       *   FILE 731\n//*  *     *    ---   These commands are a set.  ---                *   FILE 731\n//*  *     *  The command SHOWTCAS summarizes the values in all     *   FILE 731\n//*  *     *  of these fields. \"SHOWTCAS ALL\" formats the entire    *   FILE 731\n//*  **NEW**  TCAS control block (macro IKTTCAST).                  *   FILE 731\n//*                                                                 *   FILE 731\n//*  **NEW**  Since the TCAS parameters are reflected by macro      *   FILE 731\n//*  *     *  IKTTCAST in SYS1.MACLIB, which describes the TCAS     *   FILE 731\n//*  *     *  control block, which is in Subpool 231 and is         *   FILE 731\n//*  *     *  fetch-protected, these programs all must be run       *   FILE 731\n//*  *     *  APF-authorized as TSO commands.  You can't even       *   FILE 731\n//*  *     *  look at the data without being APF-authorized.        *   FILE 731\n//*  *     *  To use these commands, they must be named in the      *   FILE 731\n//*  *     *  TSO table IKJEFTE2, or they must be authorized by     *   FILE 731\n//*  *     *  some other means.  Without any other operands,        *   FILE 731\n//*  *     *  each of these commands tells you the current state    *   FILE 731\n//*  *     *  of the setting.  If you enter a number afterward,     *   FILE 731\n//*  *     *  then the command changes the setting to that number,  *   FILE 731\n//*  *     *  provided that it is in the correct range.             *   FILE 731\n//*  **NEW**              ***  SHOWTCAS  ***.                       *   FILE 731\n//*                                                                 *   FILE 731\n//*           See member $$NOTE01 for some information about        *   FILE 731\n//*           the programs, classified by type of use and           *   FILE 731\n//*           type of information shown.                            *   FILE 731\n//*                                                                 *   FILE 731\n//*  **NEW**  More programs in this file mainly pertain to control  *   FILE 731\n//*  *     *  blocks chained off the TPVT (\"TSO PARMLIB Vector      *   FILE 731\n//*  *     *  Table\") so we have added a program to display the     *   FILE 731\n//*  *     *  general contents and layout of the TPVT, which is     *   FILE 731\n//*  *     *  not documented for external use by IBM.  Our program  *   FILE 731\n//*  *     *  to display the entire layout of the TPVT is called    *   FILE 731\n//*  **NEW**              ***  SHOWTPVT  ***.                       *   FILE 731\n//*                                                                 *   FILE 731\n//*           *****  FURTHER DESCRIPTION OF MORE PROGRAMS  *****    *   FILE 731\n//*                                                                 *   FILE 731\n//*           With the recent introduction of the IKJTSOxx LOGON    *   FILE 731\n//*           parameters, the authorized LOGOPTS command was        *   FILE 731\n//*           written to display and control those options,         *   FILE 731\n//*           without having to change IKJTSOxx in PARMLIB and      *   FILE 731\n//*           doing a PARMLIB UPDATE(xx) or a SET IKJTSOxx          *   FILE 731\n//*           command.                                              *   FILE 731\n//*                                                                 *   FILE 731\n//*           This class of programs derives from control blocks    *   FILE 731\n//*           that are chained off the TPVT control block, which    *   FILE 731\n//*           stands for \"TSO Parmlib Vector Table\".  Its           *   FILE 731\n//*           descriptive macro, IKJTPVT, is not in an IBM macro    *   FILE 731\n//*           library, but we have provided our own version of      *   FILE 731\n//*           IKJTPVT.  IBM's internal version of macro IKJTPVT is  *   FILE 731\n//*           only PL/X.  Our version is Assembler.                 *   FILE 731\n//*                                                                 *   FILE 731\n//*           See member MODGEN in this file, which contains our    *   FILE 731\n//*           versions of macros that were not publicly provided    *   FILE 731\n//*           by IBM.  Actually, the TPVT is pointed to by a        *   FILE 731\n//*           public IBM macro, IKJTSVT, which describes the \"TSO   *   FILE 731\n//*           Vector Table\", and which is in SYS1.MACLIB.  But      *   FILE 731\n//*           the details of the TPVT have not been publicly        *   FILE 731\n//*           provided by IBM, and that is the kind of work that    *   FILE 731\n//*           we are doing here.  (See also, CBT Files 185 and      *   FILE 731\n//*           797 for related information.)                         *   FILE 731\n//*                                                                 *   FILE 731\n//*           Our new program SHOWTPVT displays all your current    *   FILE 731\n//*           fields and addresses in the TPVT, showing the         *   FILE 731\n//*           layout of the entire TPVT, together with each         *   FILE 731\n//*           field's values, on your system.                       *   FILE 731\n//*                                                                 *   FILE 731\n//*           Added more programs, have to do with another two      *   FILE 731\n//*           categories:                                           *   FILE 731\n//*                                                                 *   FILE 731\n//*           1-  Programs controlling or showing the contents      *   FILE 731\n//*               of the TSO Relogon Buffer.  This is an important  *   FILE 731\n//*               control block, but its study is often neglected.  *   FILE 731\n//*                                                                 *   FILE 731\n//*           2-  Programs having to do with 8-character TSO userid *   FILE 731\n//*               support, which was introduced with z/OS 2.3.      *   FILE 731\n//*                                                                 *   FILE 731\n//*        Additional programs:  (even more stuff)                  *   FILE 731\n//*                                                                 *   FILE 731\n//*        These programs make use of the actual UCB Lookup Table,  *   FILE 731\n//*        whose format is hidden by IBM, because if you do a       *   FILE 731\n//*        dynamic I/O reconfiguration, this table gets completely  *   FILE 731\n//*        reconstructed.  We do not figure that this occurrence    *   FILE 731\n//*        will happen often, or in everyday processing.  We        *   FILE 731\n//*        figure that most shops will do this during off hours.    *   FILE 731\n//*        So during other times, these programs will run fine.     *   FILE 731\n//*                                                                 *   FILE 731\n//*        1. UCBDASD is a TSO command to display online DASD.      *   FILE 731\n//*           This program uses an unusual and undocumented         *   FILE 731\n//*           technique to obtain the REAL online DASD UCBs.        *   FILE 731\n//*           The main idea of this technique is that you can       *   FILE 731\n//*           do a UCB scan of all real UCB's, NOT copies,          *   FILE 731\n//*           without being APF-authorized.                         *   FILE 731\n//*                                                                 *   FILE 731\n//*           (Tested and valid:  ESA 5.2.2 thru z/OS 1.13.)        *   FILE 731\n//*           (New version of all 3 programs, tested thru           *   FILE 731\n//*           z/OS 2.3.)                                            *   FILE 731\n//*                                                                 *   FILE 731\n//*           The UCBDASD program can be used as a model to         *   FILE 731\n//*           create your own similar programs, and to find         *   FILE 731\n//*           real-time UCB's and DCE's without the need of         *   FILE 731\n//*           APF-authorization.                                    *   FILE 731\n//*                                                                 *   FILE 731\n//*           Caveat - If you are not doing a one-time display      *   FILE 731\n//*           of the ULUT (UCB Lookup Table), but are changing      *   FILE 731\n//*           something or need it for a long time, then you        *   FILE 731\n//*           need to serialize the ULUT, and that takes APF        *   FILE 731\n//*           authorization.  But for just looking, you should      *   FILE 731\n//*           be OK. (SBG)                                          *   FILE 731\n//*                                                                 *   FILE 731\n//*        2. UCBTAPE is a TSO command to display online tape       *   FILE 731\n//*           drives and pending tape mounts.  UCBTAPE# is a        *   FILE 731\n//*           help member for UCBTAPE and shows you how to use      *   FILE 731\n//*           it.                                                   *   FILE 731\n//*                                                                 *   FILE 731\n//*           (Tested and valid:  ESA 5.2.2 thru z/OS 1.13.)        *   FILE 731\n//*           (New version of all 3 programs, tested thru           *   FILE 731\n//*           z/OS 2.3.)                                            *   FILE 731\n//*                                                                 *   FILE 731\n//*        3. UCBTYPE is a TSO command to display device class      *   FILE 731\n//*           totals, based on the ULUT header fields, and on       *   FILE 731\n//*           an actual scan of all the UCB's on the system.        *   FILE 731\n//*                                                                 *   FILE 731\n//*           (Tested and valid:  ESA 5.2.2 thru z/OS 1.13.)        *   FILE 731\n//*           (New version of all 3 programs, tested thru           *   FILE 731\n//*           z/OS 2.3.)                                            *   FILE 731\n//*                                                                 *   FILE 731\n//*        Commands are: (see the pds member list for all of them)  *   FILE 731\n//*                                                                 *   FILE 731\n//*           SHOWTPVT - Non-authorized program to display and      *   FILE 731\n//*                      format the ENTIRE TPVT, which is an        *   FILE 731\n//*                      undocumented control block (outside of     *   FILE 731\n//*                      IBM).  So you won't get this information   *   FILE 731\n//*                      pretty much anywhere else.  It's very      *   FILE 731\n//*                      useful stuff too, and pretty essential     *   FILE 731\n//*                      to know about, if you're dealing with      *   FILE 731\n//*                      TSO.                                       *   FILE 731\n//*                                                                 *   FILE 731\n//*           SHOWTCAS - APF-authorized TSO command to display all  *   FILE 731\n//*                      the fields of the TCAS control block,      *   FILE 731\n//*                      mapped by macro IKTTCAST, with parameter   *   FILE 731\n//*                      ALL.                                       *   FILE 731\n//*                                                                 *   FILE 731\n//*           ALPL     - Authorized TSO/E command to change the     *   FILE 731\n//*                      default disposition (system wide) of the   *   FILE 731\n//*                      TSO/E ALLOCate command, from OLD to SHR,   *   FILE 731\n//*                      or SHR to OLD, without a PARMLIB switch.   *   FILE 731\n//*                                                                 *   FILE 731\n//*           ADIS     - Non-authorized TSO/E command to display    *   FILE 731\n//*                      the incore values of all the TSO/E \"auth\"  *   FILE 731\n//*                      tables generated from the IKJTSOxx PARMLIB *   FILE 731\n//*                      member, if these tables exist.  These      *   FILE 731\n//*                      tables are lists of program names in       *   FILE 731\n//*                      IKJEFTE2 (AUTHCMD), IKJEFTE8 (AUTHPGM),    *   FILE 731\n//*                      IKJEFTNS (NOTBKGND), IKJEFTAP (AUTHTSF),   *   FILE 731\n//*                      and even PCVE (PLATCMD) and PPVE (PLATPGM) *   FILE 731\n//*                      if they exist.                             *   FILE 731\n//*                                                                 *   FILE 731\n//*           ALLIDS   - Shows your TSO userid in many different    *   FILE 731\n//*                      places.  There are situations where your   *   FILE 731\n//*                      userid can be one thing in one place, and  *   FILE 731\n//*                      something else in another place.  This     *   FILE 731\n//*                      command detects a lot of that.  Also it is *   FILE 731\n//*                      fully compatible with 8-character userids. *   FILE 731\n//*                  >>  THIS IS A VERY IMPORTANT PROGRAM FOR       *   FILE 731\n//*                  >>  DOING 8-CHARACTER USERID CONVERSIONS.      *   FILE 731\n//*                      Running ALLIDS non-authorized will give    *   FILE 731\n//*                      a message saying the TSBX userid cannot    *   FILE 731\n//*                      be displayed. (The id is in SP 231, and    *   FILE 731\n//*                      needs authorization.)                      *   FILE 731\n//*                                                                 *   FILE 731\n//*           BYE      - Allows you to put arbitrary data into      *   FILE 731\n//*                      the TSO Relogon Buffer, and setup a        *   FILE 731\n//*                      logoff as soon as the session reaches      *   FILE 731\n//*                      READY mode.  The data in the Relogon       *   FILE 731\n//*                      Buffer will then be executed by the        *   FILE 731\n//*                      TSO LOGON processor.                       *   FILE 731\n//*                                                                 *   FILE 731\n//*                      BYE with no operations, initializes the    *   FILE 731\n//*                      Relogon Buffer, and reverses the effects   *   FILE 731\n//*                      of BYE with operands.  BYE works together  *   FILE 731\n//*                      with the SHOWRLGB command.                 *   FILE 731\n//*                                                                 *   FILE 731\n//*           CPFX     - 8-character userid support to change the   *   FILE 731\n//*                      prefix of your TSO session.  Like          *   FILE 731\n//*                      PROFILE PREFIX(prefix) IBM command, but    *   FILE 731\n//*                      fully supports 8-character prefixes.       *   FILE 731\n//*                      Compatible with z/OS 2.3 8-character id    *   FILE 731\n//*                      support.                                   *   FILE 731\n//*                                                                 *   FILE 731\n//*           DACEE    - Non-authorized TSO command to display      *   FILE 731\n//*                      the entire contents of this userid's       *   FILE 731\n//*                      ACEE, interpreting the flag fields and     *   FILE 731\n//*                      dumping the entire control block in HEX    *   FILE 731\n//*                      and EBCDIC.  Optionally format the UTOKEN  *   FILE 731\n//*                      and dump it.  Dump the ACEX as well.       *   FILE 731\n//*                                                                 *   FILE 731\n//*           DTEST    - Non-authorized TSO command to display      *   FILE 731\n//*                      the IKJTSOxx values in the TEST listing.   *   FILE 731\n//*                      Defaults to blank entries if TEST is       *   FILE 731\n//*                      not coded.                                 *   FILE 731\n//*                                                                 *   FILE 731\n//*           LOADTEST - This is a batch program to reload the      *   FILE 731\n//*                      IKJTSOxx values in the TEST listing,       *   FILE 731\n//*                      using control cards.  APF-authorized       *   FILE 731\n//*                      if reloading the TEST parameters from      *   FILE 731\n//*                      control cards.  Not APF if reporting       *   FILE 731\n//*                      only.                                      *   FILE 731\n//*                      If you want to run LOADTEST under TSO,     *   FILE 731\n//*                      then allocate DD SYSPRINT to the terminal  *   FILE 731\n//*                      and then execute the program LOADTEST.     *   FILE 731\n//*                                                                 *   FILE 731\n//*           LOADT*** - Members providing support for the          *   FILE 731\n//*                      LOADTEST program.                          *   FILE 731\n//*                                                                 *   FILE 731\n//*           DVAT     - Display original VATLSTxx settings after   *   FILE 731\n//*                      IPL time.  Caveats mentioned in the        *   FILE 731\n//*                      program.  A useful display.                *   FILE 731\n//*                                                                 *   FILE 731\n//*           EESCB    - Display all fields relating to the         *   FILE 731\n//*                      status of TSO/E Broadcast Dataset          *   FILE 731\n//*                      switching.                                 *   FILE 731\n//*                                                                 *   FILE 731\n//*           INMXD    - Display all fields relating to the         *   FILE 731\n//*                      INMXPARM control block containing all      *   FILE 731\n//*                      the parameters affecting the TSO XMIT      *   FILE 731\n//*                      command.  (Use INMXD to test the           *   FILE 731\n//*                      results of the CINMX command.)             *   FILE 731\n//*                                                                 *   FILE 731\n//*           CINMX    - Change the XMIT OUTLIM, Wait Threshold,    *   FILE 731\n//*                      and Wait Interval quantities in storage.   *   FILE 731\n//*                      Changes are effective immediately, and     *   FILE 731\n//*                      do not depend on any PARMLIB settings.     *   FILE 731\n//*                      (This command has to be APF authorized.)   *   FILE 731\n//*                                                                 *   FILE 731\n//*           HIBFREXT - A special-purpose command to change the    *   FILE 731\n//*                      numeric value of the HIBFREXT field in     *   FILE 731\n//*                      the IKJTCAST (VTAM/TSO) control block.     *   FILE 731\n//*                      This program can be adapted to change      *   FILE 731\n//*                      any fullword numeric value in a different  *   FILE 731\n//*                      numeric field.  Must be APF-authorized.    *   FILE 731\n//*                      (Change it in two places. 1- where the     *   FILE 731\n//*                      old value is recorded, and 2- where the    *   FILE 731\n//*                      new value gets substituted in.  All the    *   FILE 731\n//*                      numeric checks are already in place.)      *   FILE 731\n//*                                                                 *   FILE 731\n//*           LOBFREXT - Works the same as HIBFREXT except that     *   FILE 731\n//*                      it changes the LOBFREXT value instead      *   FILE 731\n//*                      of the HIBFREXT value.  Now you can        *   FILE 731\n//*                      adjust both of them.                       *   FILE 731\n//*                                                                 *   FILE 731\n//*           LOGOPTS  - Allows complete control of settings        *   FILE 731\n//*                      in the IKJTSOxx LOGON parameters, on       *   FILE 731\n//*                      the fly.  Without operands, LOGOPTS        *   FILE 731\n//*                      tells you the current state of the         *   FILE 731\n//*                      flags.  With operands (APF-authorized)     *   FILE 731\n//*                      LOGOPTS can switch off or on, any of       *   FILE 731\n//*                      the IKJTSOxx LOGON settings.               *   FILE 731\n//*                                                                 *   FILE 731\n//*                      Bits are set as follows for the            *   FILE 731\n//*                      following options:                         *   FILE 731\n//*                                                                 *   FILE 731\n//*                      X'08' -  Password Phrase Support           *   FILE 731\n//*                      X'04' -  Applid Verification               *   FILE 731\n//*                      X'02' -  LOGONHERE Support                 *   FILE 731\n//*                      X'01' -  Password Preprompt Support        *   FILE 731\n//*                                                                 *   FILE 731\n//*                      LOGOPTS PARMS (to set the bit on/off)      *   FILE 731\n//*                      ------- -----                              *   FILE 731\n//*                       S -  Password Phrase Support    SF - off  *   FILE 731\n//*                       A -  Applid Verification        AF - off  *   FILE 731\n//*                       H -  LOGONHERE Support          HF - off  *   FILE 731\n//*                       P -  Password Preprompt Support PF - off  *   FILE 731\n//*                                                                 *   FILE 731\n//*           MEMBER   - Program from Bill Godfrey to list          *   FILE 731\n//*                      attributes of a pds member.                *   FILE 731\n//*                                                                 *   FILE 731\n//*           RELOGON  - Generates a LOGON command for your         *   FILE 731\n//*                      current session, puts it into the TSO      *   FILE 731\n//*                      Relogon Buffer, and sets the switch to     *   FILE 731\n//*                      LOGOFF when you reach READY mode.  If      *   FILE 731\n//*                      the session has a TSB password, then it    *   FILE 731\n//*                      is included, as: LOGON userid/password.    *   FILE 731\n//*                                                                 *   FILE 731\n//*           SHOWRLGB - A complete display of information about    *   FILE 731\n//*                      the TSO Relogon Buffer, including whether  *   FILE 731\n//*                      the ECTLOGF switch is set, to force        *   FILE 731\n//*                      LOGOFF at READY mode.                      *   FILE 731\n//*                                                                 *   FILE 731\n//*           TSVT8    - Turns 8-character userid support on/off    *   FILE 731\n//*                      for testing purposes.  Works with z/OS     *   FILE 731\n//*                      2.3 or higher.                             *   FILE 731\n//*                                                                 *   FILE 731\n//*           UCBDASD  - Display all online DASD volumes, in        *   FILE 731\n//*                      real-time, without being APF-authorized.   *   FILE 731\n//*                                                                 *   FILE 731\n//*           UCBTAPE  - Display all online tape drives and         *   FILE 731\n//*                      pending tape mounts.  See help member      *   FILE 731\n//*                      UCBTAPE#.                                  *   FILE 731\n//*                                                                 *   FILE 731\n//*           USERMAX  - Another way of doing F TSO,USERMAX=nnnn    *   FILE 731\n//*                      Good if you can't get to a console.        *   FILE 731\n//*                      This TSO command must be APF-authorized.   *   FILE 731\n//*                                                                 *   FILE 731\n//*           A load library containing all of these load modules   *   FILE 731\n//*           is contained in this pds, in XMIT format, as member   *   FILE 731\n//*           LOADLIB.  If you want to assemble all these           *   FILE 731\n//*           commands, you will need the EESCB.MODGEN macro        *   FILE 731\n//*           library, which can be generated from the MODGEN       *   FILE 731\n//*           member of this pds, using the $PDSLOAD member.        *   FILE 731\n//*           The PDSLOAD program is also included in the load      *   FILE 731\n//*           library containing the programs from this file,       *   FILE 731\n//*           so if you TSO RECEIVE the member called LOADLIB,      *   FILE 731\n//*           you'll have the PDSLOAD program too.                  *   FILE 731\n//*                                                                 *   FILE 731\n//*     These commands have been tested and found to work on MVS    *   FILE 731\n//*     systems back to MVS/ESA 5.2.2 and all the OS/390 releases.  *   FILE 731\n//*     Also tested on z/OS thru 2.3. These commands contain dual   *   FILE 731\n//*     coding paths to accommodate the older TSO/E releases.       *   FILE 731\n//*                                                                 *   FILE 731\n//*           email:  sbgolob@cbttape.org                           *   FILE 731\n//*                                                                 *   FILE 731\n//*     Control Block Notes:                                        *   FILE 731\n//*     ------- ----- -----                                         *   FILE 731\n//*                                                                 *   FILE 731\n//*     1.  The IKJTPVT control block is chained off the TSO Vector *   FILE 731\n//*         Table (mapped by IKJTSVT in SYS1.MACLIB), and is OCO    *   FILE 731\n//*         officially.  But if you look in the IKJTSVT macro,      *   FILE 731\n//*         the pointer to the TPVT control block is officially     *   FILE 731\n//*         documented.  And if you look at the TPVT in storage,    *   FILE 731\n//*         it is pretty obvious that X'20' off the beginning,      *   FILE 731\n//*         points to the IKJEESCB control block, which contains    *   FILE 731\n//*         the BROADCAST and USERLOG dataset status, and (in       *   FILE 731\n//*         TSO/E Release 3 and higher, where BROADCAST dataset     *   FILE 731\n//*         switching is supported,) the BROADCAST switching        *   FILE 731\n//*         status too.  Macro IKJEESCB is in SYS1.MODGEN.          *   FILE 731\n//*                                                                 *   FILE 731\n//*     2.  The TPVT control block was mapped, by guesswork, in     *   FILE 731\n//*         the SHOWzOS work (on CBT Tape File 492).  I have        *   FILE 731\n//*         therefore included the necessary macros from the        *   FILE 731\n//*         SHOWzOS maclib, called IKJTPVT and IKJCTLT, for         *   FILE 731\n//*         assembling the EESCB command.                           *   FILE 731\n//*                                                                 *   FILE 731\n//*     3.  Older versions of the IKJEESCB control block are        *   FILE 731\n//*         supported here, too.  These are TSO/E Release 2 and     *   FILE 731\n//*         lower, going up to z/OS 1.2.  At those levels,          *   FILE 731\n//*         BROADCAST dataset switching was not yet supported,      *   FILE 731\n//*         so the extension to the IKJEESCB control block that     *   FILE 731\n//*         supports an alternate BROADCAST dataset is not yet      *   FILE 731\n//*         there.  But in IKJEESCB level 2, all of the PARMLIB     *   FILE 731\n//*         UPDATE stuff IS there, except for the dataset switch-   *   FILE 731\n//*         ing stuff.  In IKJEESCB level 1, less detail about      *   FILE 731\n//*         the TSO Userlogs is retained in the control block.      *   FILE 731\n//*                                                                 *   FILE 731\n//*     4.  It seems that the purpose of the IKJTPVT control        *   FILE 731\n//*         block is to point to all the information that is        *   FILE 731\n//*         involved in either a PARMLIB UPDATE(xx) TSO command     *   FILE 731\n//*         execution, or (in TSO/E Release 3) a SET IKJTSO=xx      *   FILE 731\n//*         operator command, which does the same thing.  So any    *   FILE 731\n//*         new control blocks that are involved with the           *   FILE 731\n//*         IKJTSOxx parameters, are pointed to by the TPVT.  It    *   FILE 731\n//*         seems to me, that IBM wants to keep some flexibility    *   FILE 731\n//*         with regard to new development of TSO-based system      *   FILE 731\n//*         controls, so that is why they are keeping the IKJTPVT   *   FILE 731\n//*         control block OCO.  (Also, the pointers to the \"auth\"   *   FILE 731\n//*         tables are there.)  Nevertheless, we are using it,      *   FILE 731\n//*         because we have to.                                     *   FILE 731\n//*                                                                 *   FILE 731\n//*     5.  Details from both the IKJEESCB control block and the    *   FILE 731\n//*         TPVT control block which are relevant to the BROADCAST  *   FILE 731\n//*         dataset, are shown by the EESCB TSO command.  For       *   FILE 731\n//*         TSO/E Release 3, I have pulled the stops out, and I     *   FILE 731\n//*         have tried to show just about everything related to     *   FILE 731\n//*         the BROADCAST dataset that there is.  (With the         *   FILE 731\n//*         exception of the second set of timings.)                *   FILE 731\n//*                                                                 *   FILE 731\n//*     6.  A TSO command to show the contents of all the fields    *   FILE 731\n//*         in your TPVT control block, together with their         *   FILE 731\n//*         explanations, is called SHOWTPVT.  Most of the          *   FILE 731\n//*         addresses shown by SHOWTPVT point to the different      *   FILE 731\n//*         control blocks that govern each IKJTSOxx parameter.     *   FILE 731\n//*         The complete control block, with every field specified, *   FILE 731\n//*         is shown and explained.                                 *   FILE 731\n//*                                                                 *   FILE 731\n//*     TPUT and PUTLINE Notes:                                     *   FILE 731\n//*     ---- --- ------- -----                                      *   FILE 731\n//*                                                                 *   FILE 731\n//*     The output of the EESCB command, especially for TSO/E       *   FILE 731\n//*     Release 3, is quite long, so rather than having it          *   FILE 731\n//*     overflow several screens, I have tried to use the PUTLINE   *   FILE 731\n//*     interface to the TSO screen, which is \"capturable\" by the   *   FILE 731\n//*     SYSOUTTRAP service, rather than using the TPUT interface    *   FILE 731\n//*     to the screen, which is not capturable.                     *   FILE 731\n//*                                                                 *   FILE 731\n//*     However, in coding the EESCB command, I used the TPUT       *   FILE 731\n//*     interface first, which is much simpler to code and set      *   FILE 731\n//*     up.  This made for easier development.                      *   FILE 731\n//*                                                                 *   FILE 731\n//*     After having coded EESCB using TPUT, I then converted it    *   FILE 731\n//*     to PUTLINE using Howard Dean and Jim Elsworth's interface   *   FILE 731\n//*     to set up PUTLINE, which is included here, too, for your    *   FILE 731\n//*     edification and easy access (originally from CBT File 136). *   FILE 731\n//*                                                                 *   FILE 731\n//*     This PUTLINE interface works as follows:                    *   FILE 731\n//*                                                                 *   FILE 731\n//*     A program called EPUTL, which can be separately assembled   *   FILE 731\n//*     and linkedited, sets up the PUTLINE interface externally    *   FILE 731\n//*     from the TSO command which calls it.  The call to EPUTL     *   FILE 731\n//*     is then set up by a macro called APUT, which has the same   *   FILE 731\n//*     coding rules as a single line TPUT.  Therefore, if you      *   FILE 731\n//*     linkedit the EPUTL routine into your TSO command load       *   FILE 731\n//*     module, and you convert all coded TPUTs in the source code  *   FILE 731\n//*     to APUTs, then the TSO screen interface is automagically    *   FILE 731\n//*     transformed from TPUT to PUTLINE.                           *   FILE 731\n//*                                                                 *   FILE 731\n//*     The EPUTL program assumes that the calling TSO command      *   FILE 731\n//*     had been set up properly, using standard IBM linkage        *   FILE 731\n//*     conventions.  Once that has been assumed, and if it is      *   FILE 731\n//*     indeed true, EPUTL can nose around in the caller's saved    *   FILE 731\n//*     registers and pull out the caller's CPPL, so that it can    *   FILE 731\n//*     set up the PUTLINE environment and issue the PUTLINE        *   FILE 731\n//*     macro, independently linkedited from the calling program.   *   FILE 731\n//*     It is a nice idea.  Most TSO commands are properly coded,   *   FILE 731\n//*     and therefore it is possible to set up PUTLINE service in   *   FILE 731\n//*     this easy manner.                                           *   FILE 731\n//*                                                                 *   FILE 731\n//*     This system makes TSO command coding (that has terminal     *   FILE 731\n//*     outputs) much easier too, because you can code the outputs  *   FILE 731\n//*     using TPUT and convert them to PUTLINE later.               *   FILE 731\n//*                                                                 *   FILE 731\n//*     The EESCB source code already includes the APUT and the     *   FILE 731\n//*     EPUTL source, together with it inline.  But I have          *   FILE 731\n//*     nevertheless put separate copies of them into this pds,     *   FILE 731\n//*     so you don't have to go to the trouble of extracting        *   FILE 731\n//*     them, if you want to use them for other applications.       *   FILE 731\n//*                                                                 *   FILE 731\n//*     SYSOUTTRAP Notes:                                           *   FILE 731\n//*     ---------- -----                                            *   FILE 731\n//*                                                                 *   FILE 731\n//*     To make it easier to view the entire EESCB output on the    *   FILE 731\n//*     screen, I have made it possible (using Mark Zelden's TSOE,  *   FILE 731\n//*     TSOB, TSOV, and TSOR execs) to make the output scrollable.  *   FILE 731\n//*                                                                 *   FILE 731\n//*     These are Mark's EXECs:                                     *   FILE 731\n//*                                                                 *   FILE 731\n//*     TSOE SYSOUTTRAPs the TSO command output, and allocates a    *   FILE 731\n//*     temporary file, which it EDITs.                             *   FILE 731\n//*                                                                 *   FILE 731\n//*     TSOB SYSOUTTRAPs the TSO command output, and allocates a    *   FILE 731\n//*     temporary file, which it BROWSEs.                           *   FILE 731\n//*                                                                 *   FILE 731\n//*     TSOV SYSOUTTRAPs the TSO command output, and allocates a    *   FILE 731\n//*     temporary file, which it VIEWs.                   ..        *   FILE 731\n//*                                                                 *   FILE 731\n//*     TSOR SYSOUTTRAPs the TSO command output, and allocates a    *   FILE 731\n//*     temporary file, which it displays using the REVIEW command  *   FILE 731\n//*     from CBT File 134 (load modules on File 135).  REVIEW       *   FILE 731\n//*     works either from within ISPF, or from TSO READY mode.      *   FILE 731\n//*     So TSOR EESCB works from TSO READY mode as well as from     *   FILE 731\n//*     an ISPF command line, as TSO TSOR EESCB.                    *   FILE 731\n//*                                                                 *   FILE 731\n//*     To use the TSOE, TSOB, TSOV, and TSOR execs, just copy      *   FILE 731\n//*     them to a SYSPROC or SYSEXEC library, and issue:            *   FILE 731\n//*                                                                 *   FILE 731\n//*        TSO TSOE EESCB         or                                *   FILE 731\n//*        TSO TSOB EESCB         or                                *   FILE 731\n//*        TSO TSOV EESCB         or                                *   FILE 731\n//*        TSO TSOR EESCB         from an ISPF command line,        *   FILE 731\n//*     or     TSOR EESCB from TSO READY mode, all of which         *   FILE 731\n//*     will produce scrollable output.                             *   FILE 731\n//*                                                                 *   FILE 731\n//* --------------------------------------------------------------- *   FILE 731\n//*                                                                 *   FILE 731\n//*   I added another command called CINMX, which will reset        *   FILE 731\n//*   the TRANSREC OUTLIM number as a TSO command.  (It will be     *   FILE 731\n//*   helpful to remember the old number before running this        *   FILE 731\n//*   command.)  You just run the TSO command:                      *   FILE 731\n//*                                                                 *   FILE 731\n//*   CINMX nnnnnn     where nnnnnn has to be numeric, up to 10     *   FILE 731\n//*                    digits, and the OUTLIM is reset in core,     *   FILE 731\n//*                    to this value.                               *   FILE 731\n//*                                                                 *   FILE 731\n//*   CINMX W nnnnnn   adjusts the TRANSREC Warn Threshold          *   FILE 731\n//*                                                                 *   FILE 731\n//*   CINMX I nnnnnn   adjusts the TRANSREC Warn Interval           *   FILE 731\n//*                                                                 *   FILE 731\n//*   Of necessity this command has to be APF authorized.           *   FILE 731\n//*                                                                 *   FILE 731\n//*   Reason for this command:                                      *   FILE 731\n//*                                                                 *   FILE 731\n//*   If you want to transmit a large file, and your installation   *   FILE 731\n//*   won't allow it because the TRANSREC OUTLIM value in PARMLIB   *   FILE 731\n//*   was too low, you can just adjust it up, transmit your file,   *   FILE 731\n//*   and adjust it back.  Now, with the W and I parameters, you    *   FILE 731\n//*   can use CINMX to adjust the Warn Threshold and Warn Interval  *   FILE 731\n//*   values, too.  You can test the results of the CINMX command   *   FILE 731\n//*   by running the INMXD command, which displays the INMXPARM     *   FILE 731\n//*   control block values currently in storage.                    *   FILE 731\n//*                                                                 *   FILE 731\n//*   Note: -                                                       *   FILE 731\n//*   The CINMX program will also work at the OS/390 1.3 level and  *   FILE 731\n//*   before, even though the displacements into the INMXPARM       *   FILE 731\n//*   control block were 4 bytes earlier.  (CINMX Ver 1.2)          *   FILE 731\n//*   All of these commands were tested on MVS systems back to      *   FILE 731\n//*   ESA 5.2.2 and up through z/OS 2.3.                            *   FILE 731\n//*                                                                 *   FILE 731\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADIS": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x02\\x01\\x06\\x01\\x8f\\x01\\x08\\x13o\\x00X\\x05r\\x04)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2006-01-18T00:00:00", "modifydate": "2008-05-15T00:58:02", "lines": 1394, "newlines": 1065, "modlines": 0, "user": "SBGOLOB"}, "text": "ADIS     TITLE 'ADIS - DISPLAY TSO/E AUTH TABLES CREATED BY PARMLIB. '\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command.  Not APF Authorized.  It displays the    *\n*                   incore TSO/E Auth Tables created by the IKJTSOxx  *\n*                   member of PARMLIB.  Read-only.                    *\n*                                                                     *\n*    Environment:   TSO command, NOT APF-Authorized.                  *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                   This program is non-reentrant.                    *\n*                                                                     *\n*    Description    Display an Auth Table entry from the TSO/E        *\n*     and           program list tables in storage.  The entire       *\n*      Function :   table is shown, unless you enter a number,        *\n*                   and then, only that slot is shown.  Only          *\n*                   tables manufactured from PARMLIB entries are      *\n*                   displayed, not the ones created from the          *\n*                   IKJTABLS load module in LPALIB.                   *\n*                                                                     *\n*                                                                     *\n*         Syntax:   ADIS ttD \u00ddnnn\u00a8                                    *\n*                                                                     *\n*                   Where tt is a table code, and D is the action     *\n*                   code that tells the program to \"display\".         *\n*                                                                     *\n*                   The table code is a nickname for any of the       *\n*                   TSO/E auth tables which are incore.  They are:    *\n*                                                                     *\n*                   E2 - IKJEFTE2 = AUTHCMD                           *\n*                   E8 - IKJEFTE8 = AUTHPGM                           *\n*                   AP - IKJEFTAP = AUTHTSF                           *\n*                   NS - IKJEFTNS = NOTBKGND                          *\n*                   PC - FCVE     = PLATCMD                           *\n*                   PP - PPVE     = PLATPGM                           *\n*                                                                     *\n*                                                                     *\n*                   If the PLATCMD or PLATPGM keywords (and at least  *\n*                   one name) were not coded in the active IKJTSOxx   *\n*                   PARMLIB entry, then there is no control block of  *\n*                   names to be pointed to, and therefore no display  *\n*                   of names can be made.  The condition is reported  *\n*                   in a message.                                     *\n*                                                                     *\n*             Note:  If an E2, E8, AP, or NS table which is being     *\n*                    used by the system, did not come from the        *\n*                    IKJTSOxx PARMLIB entry, but it came from the     *\n*                    default IKJTABLS entry in LPALIB, then an        *\n*                    appropriate error message is displayed, and      *\n*                    no display is performed for that table.          *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2008/05/15 - 1.0 - Initial version - Got it to work.             *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\nADIS     CSECT\nADIS     AMODE 31\nADIS     RMODE 24\n         USING *,R15                                                  *  01493\n         B     BEGINN                   Eyecatcher\n         DC    CL15'ADIS VER 1.0 -'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         DROP  R15\n         USING ADIS,R12,R11,R10\n         STM   R14,R12,12(R13)\n         LR    R12,R15                  Set up base registers.\n         ST    R1,SAVEPARM              Save CPPL pointer\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LA    R1,SAVEAREA          Point to new save area               01508\n         ST    R1,8(,R13)           Forward save area chain pointer      01509\n         ST    R13,4(,R1)           Backward save area chain pointer     01510\n         LR    R13,R1               New save area address                01511\n         B     INITCON              Branch past save area\n         SPACE 1\n* -----------------------\nSAVEAREA DC    18F'0'                                                    01504\n* -----------------------\nINITCON  DS    0H                   Initialize constants\n         MVI   OFFFLAG,X'00'\n         MVI   PLATFLG,X'00'\n         MVI   NSCHFLG,X'00'\n         MVI   LINEB,X'40'\n         MVC   CODEPLAC(2),BLANKS\n         XC    FSTCOUNT,FSTCOUNT\n         XC    FSTNOUNT,FSTNOUNT\n         MVC   FSTFIELD(8),BLANKS\n         MVI   BLANKS-1,X'40'\n         MVC   BLANKS,BLANKS-1\n         XC    SLOTBIN,SLOTBIN\n         MVC   SLOTSAVE,BLANKS\n         MVC   FSTNAME,BLANKS\n         MVI   CMDBCOPY-1,X'00'\n         MVC   CMDBCOPY,CMDBCOPY-1\n* -----------------------\n         L     R2,16               POINT TO CVT.\n         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS\n         L     R2,4(,R2)           POINT TO TCB.\n         L     R2,X'B4'(,R2)       POINT TO JSCB.\n         L     R2,X'108'(,R2)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ4                GET OUT.  NOT TSO.\n         L     R1,SAVEPARM         Get the address of the CPPL back\n         USING CPPL,R1\n         L     R0,CPPLUPT          Copy CPPL fields for possible\n         ST    R0,SAVEUPT            later use, if needed.\n         L     R0,CPPLPSCB\n         ST    R0,SAVEPSCB\n         L     R0,CPPLECT\n         ST    R0,SAVEECT\n         LA    R6,0\n         DROP  R1\n         BAL   R9,PGMTITLE         First display the program title.\n         USING PSCB,R2\nCHEKAUTH DS    0H\n*        B     CONT0               Bypass authorization check\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes.  Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No.  Get out.\n         DROP  R2\nCONT0    DS    0H                  Get starting addresses for tables\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT\n         ST    R2,SAVETPVT         Save TPVT address for later use\n         L     R2,X'14'(,R2)       Point to CTLT control block\n         ST    R2,SAVECTLT         Save CTLT address for later use\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'34'(,R2)       Point to PLATCMD pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOFCVE              No. Say so.\n         ST    R2,SAVEFCVE         Yes. Store the FCVE pointer away.\n         OI    PLATFLG,X'01'       Indicate that FCVE exists.\nTRYPPVE  DS    0H\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'40'(,R2)       Point to PLATPGM pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOPPVE              No. Say so.\n         ST    R2,SAVEPPVE         Yes. Store the PPVE pointer away.\n         OI    PLATFLG,X'02'       Indicate that PPVE exists.\nTRYPPVEE DS    0H\n* ------\n*    There doesn't seem to be a way to tell from an old INMXPARM\n*    control block itself, that it is the old version.  So we use\n*    the position of the active PARMLIB member name in the TPVT.\n* ------\n         L     R2,SAVETPVT         Load TPVT address back.\n         CLC   =C'IKJ',7(R2)       Parmlib member name in old position?\n         BNE   NEWSYSTM            No. It's a new TSO/E version\n         OI    OLDFLAG,X'01'       Yes. Flag that the system is old.\nNEWSYSTM DS    0H\n* ------\n*    We start scanning for PARMs here.\n* ------\n         L     R1,SAVEPARM         Original R1 from entry to program.\n         LTR   R1,R1               Any CPPL?\n         BZ    EOJ8                No. Get out.\n         L     R1,0(,R1)           Point to Command Buffer\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No.  Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear high order 3 bytes.\n         ST    R1,CMBUFAD          Save Command Buffer Address\n         LH    R3,2(,R1)           Load offset.\n         ST    R3,OFFSETSV\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of CMDBUFR header\n*                                  in the command buffer.\n         BC    8,EOJC              Zero, Message\n         BC    5,EOJC              Less, or overflow, out.\n         ST    R5,CMBUFEND         Store away the number of bytes left\n         L     R1,CMBUFAD          Load Command Buffer Address\n*\n* ----  Copy command buffer into pgm's buffer so we can control it.\n*\n         STM   R14,R1,SAVE1401     Now save registers 14 thru 1.\n         XR    R14,R14             Clear R14.\n         LH    R14,0(,R1)          Load full command buffer length.\n         S     R14,=F'5'           Subtract 4 for header, 1 for execute\n         EX    R14,COPYCMDB        Copy command into pgm's area.\n         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.\n         B     GOGOGO              Jump over executed instruction.\nCOPYCMDB MVC   CMDBCOPY(0),4(R1)   <<< Executed >>>\nGOGOGO   DS    0H\n* ----\n         LA    R6,3                Load register for BCT loop.\n* >>>\n         LA    R1,CMDBCOPY         Point to command in our buffer\n         A     R1,OFFSETSV         Add offset, point to subcommands\n         ST    R1,CHARSTRT         Store starting point away\n* >>>\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of function name.\n         LA    R8,0                Initialize character count\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    AFTFIRST            Yes, end of the first parm.\n         CLI   0(R7),X'00'         Is this character hex zero?\n         BE    AFTFIRST            Yes, end of command in buffer copy.\n         LA    R7,1(,R7)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   AFTFIRST            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nAFTFIRST DS    0H\n         MVC   TABCODE(8),BLANKS   Clear field\n         BCTR  R8,0                Subtract 1 for execute.\n         L     R1,CHARSTRT         Reload R1 to be sure it's correct.\n         EX    R8,MOVOUTL          Move entered parameter to program.\n         LA    R8,1(,R8)           Restore number of characters\n         AR    R1,R8               Point past last search\n         ST    R1,CHARCONT         Continue from here\n         ST    R8,SAVER8           Save\n         ST    R6,SAVER6             the\n         ST    R1,SAVER1A              registers\n* ---- >\nSEEIFPRM DS    0H                  Check if a command is here\n         OC    TABCODE(3),BLANKS   Uppercase. Won't affect numbers\n         CLI   TABCODE+2,C'D'      Display contents of last slot\n         BE    SEEIF0A3\n         B     SEEIF000\nSEEIF0A3 DS    0H\n         OI    OFFFLAG,X'04'       Display an entry or entries\n         B     SEEIF001\nSEEIF000 DS    0H                  Wrong function code was entered...\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n*        HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         MVC   LINE+13(35),=C'Table code | Action code   entered.'\n         APUT  LINE,48\n* --- >\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Get out with code = 4.\nSEEIF001 DS    0H                  Which table to display\n         MVC   CODEPLAC(2),TABCODE\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n*        HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         MVC   LINE+13(35),=C'Table code | Action code   entered.'\n         APUT  LINE,48\n         MVC   LINE,LINE-1         Write a blank line.\n         APUT  LINE,30\n* --- >                            Handle each table separately.\n         CLC   TABCODE(2),=C'E2'   Display IKJEFTE2?\n         BE    E2CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'E8'   Display IKJEFTE8?\n         BE    E8CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'AP'   Display IKJEFTAP?\n         BE    APCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PC'   Display PLATCMD?\n         BE    PCCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PP'   Display PLATPGM?\n         BE    PPCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'NS'   Display IKJEFTNS?\n         BE    NSCHANGE            Yes. Branch.\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Invalid code entered.\nEOJ      DS    0H                  END OF JOB                            04216\n         L     R13,4(,R13)                                               04214\n         LR    R15,R5              Put in real return code\n         ST    R15,16(,R13)        Shove it where it belongs\n         L     R14,12(,R13)        R14 and\n         LM    R0,R12,20(R13)        rest of registers\n         BR    R14                 Go back to caller\nEOJ0     DS    0H                  Return code 0\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR0       Show Return Code 0\n         APUT  MESSAGR0,L'MESSAGR0\n         LA    R5,0                Set CC = 0\n         B     EOJ                 Now end the program\nEOJ4     DS    0H                  Return code 4\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR4       Show Return Code 4\n         APUT  LINE,L'MESSAGR4\n         L     R5,FULLFOUR         Set CC = 4                            04215\n         B     EOJ                 Now end the program\nEOJ8     DS    0H                  Return code 8\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR8       Show Return Code 8\n         APUT  LINE,L'MESSAGR8\n         L     R5,FULLEIGT         Set CC = 8                            04215\n         B     EOJ                 Now end the program\nEOJC     DS    0H                  Return code 12\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSA11Q       Show Return Code 12\n         APUT  LINE,L'MESSA11Q\n         BAL   R9,ERRORCOD\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGRC       Show Return Code 12\n         APUT  LINE,L'MESSAGRC\n         L     R5,FULLTWLV         Set CC = 12\n         B     EOJ                 Now end the program\n** ---------------------------------------------------------------- **\nE2CHANGE DS    0H                 Handle the E2 table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         LR    R4,R2\n         LA    R4,X'8'(,R4)       POINT TO E2 TABLE\n         L     R4,0(,R4)\n* - -\n         ST    R4,TABLSTRT        Store start address of table\n         L     R1,TABLSTRT\n**-->>\n         CLC   =C' PARMLIB',8(R1) Indicator this table is from PARMLIB.\n         BE    E2CHENTY           It is, then we're cool.\n         BAL   R9,MISSPGM3        It isn't, then send message saying so\n         B     EOJ4               And exit with code = 4.\nE2CHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n**-->>\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         L     R3,X'C'(,R2)       LOAD SIZE OF E2 TABLE\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NOE2               No. Say so and get out.\n         AR    R4,R3              POINT JUST PAST E2 TABLE\n* - -\n         XR    R5,R5\n         LH    R5,X'10'(,R2)      Load number of entries in table\n         ST    R5,TABLENUM        Store number of entries\n* - -\n         XR    R5,R5\n         LH    R5,X'12'(,R2)      LOAD SIZE OF E2 ENTRY\n* - -\n         ST    R5,TABLESIZ        Store size of each entry\n* - -\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E2CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         B     EOJ0\nE2CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         B     EOJ0\nE8CHANGE DS    0H                 Handle the E8 table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         LR    R4,R2\n         LA    R4,X'14'(,R4)      POINT TO E8 TABLE\n         L     R4,0(,R4)\n* - -\n         ST    R4,TABLSTRT        Store start address of table\n         L     R1,TABLSTRT\n**-->>\n         CLC   =C' PARMLIB',8(R1) Indicator this table is from PARMLIB.\n         BE    E8CHENTY           It is, then we're cool.\n         BAL   R9,MISSPGM3        It isn't, then send message saying so\n         B     EOJ4               And exit with code = 4.\nE8CHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n**-->>\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         L     R3,X'18'(,R2)      Size of E8 table\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NOE8               No. Say so and get out.\n         AR    R4,R3              POINT JUST PAST E8 TABLE\n* - -\n         XR    R5,R5\n         LH    R5,X'1C'(,R2)      Load number of entries in table\n         ST    R5,TABLENUM        Store number of entries\n* - -\n         XR    R5,R5\n         LH    R5,X'1E'(,R2)      LOAD SIZE OF E8 ENTRY\n* - -\n         ST    R5,TABLESIZ        Store size of each entry\n* - -\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E8CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         B     EOJ0\nE8CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         B     EOJ0\nAPCHANGE DS    0H                 Handle the AP table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         LR    R4,R2\n         LA    R4,X'2C'(,R4)      POINT TO AP TABLE\n         L     R4,0(,R4)\n* - -\n         ST    R4,TABLSTRT        Store start address of table\n         L     R1,TABLSTRT\n**-->>\n         CLC   =C' PARMLIB',8(R1) Indicator this table is from PARMLIB.\n         BE    APCHENTY           It is, then we're cool.\n         BAL   R9,MISSPGM3        It isn't, then send message saying so\n         B     EOJ4               And exit with code = 4.\nAPCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n**-->>\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         L     R3,X'30'(,R2)      Size of AP table\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NOAP               No. Say so and get out.\n         AR    R4,R3              POINT JUST PAST AP TABLE\n* - -\n         XR    R5,R5\n         LH    R5,X'34'(,R2)      Load number of entries in table\n         ST    R5,TABLENUM        Store number of entries\n* - -\n         XR    R5,R5\n         LH    R5,X'36'(,R2)      LOAD SIZE OF AP ENTRY\n* - -\n         ST    R5,TABLESIZ        Store size of each entry\n* - -\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    APCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         B     EOJ0\nAPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         B     EOJ0\nPCCHANGE DS    0H                 Handle the PC table\n         TM    PLATFLG,X'01'\n         BZ    PCCHAERR\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVEFCVE        Get the PC table address\n         LR    R4,R2              Save it off\n* -- >                            Do Display\n         MVC   LINE,LINE-1\n         ST    R4,DISPREG\n         HEX   LINE+13,4,DISPREG\n         MVC   LINE(8),=C'SAVEFCVE'\n         APUT  LINE,30\n* -- >\n         L     R3,X'8'(,R4)\n         AR    R4,R3              POINT JUST PAST PC TABLE\n* - -\n         L     R3,X'C'(,R2)\n         ST    R3,TABLENUM\n         LA    R3,8\n         ST    R3,TABLESIZ\n         L     R3,SAVEFCVE\n         LA    R3,X'10'(,R3)\n         ST    R3,TABLSTRT\n* - -\n         LA    R5,8\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PCCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         B     EOJ0\nPCCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         B     EOJ0\nPCCHAERR DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PC command not valid if no PC table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPCCHAEND DS    0H\n         B     EOJ0\nPPCHANGE DS    0H                 Handle the PP table\n         TM    PLATFLG,X'02'\n         BZ    PPCHAERR\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVEPPVE        Get the PP table address\n         LR    R4,R2              Save it off\n* -- >                            Do Display\n         MVC   LINE,LINE-1\n         ST    R4,DISPREG\n         HEX   LINE+13,4,DISPREG\n         MVC   LINE(8),=C'SAVEPPVE'\n         APUT  LINE,30\n* -- >\n         L     R3,X'8'(,R4)\n         AR    R4,R3              POINT JUST PAST PP TABLE\n* - -\n         L     R3,X'C'(,R2)\n         ST    R3,TABLENUM\n         LA    R3,8\n         ST    R3,TABLESIZ\n         L     R3,SAVEPPVE\n         LA    R3,X'10'(,R3)\n         ST    R3,TABLSTRT\n* - -\n         LA    R5,8\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PPCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         B     EOJ0\nPPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         B     EOJ0\nPPCHAERR DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PP command not valid if no PP table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPPCHAEND DS    0H\n         B     EOJ0\nNSCHANGE DS    0H                 Handle the NS table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         OI    NSCHFLG,X'01'      Show DISPTABL we're doing NS\n         LR    R4,R2              Save location of CTLT\n         LA    R4,X'20'(,R4)      Point to NS table address\n         L     R4,0(,R4)          Point to NS table\n* - -\n         ST    R4,TABLSTRT        Store start address of table\n         L     R1,TABLSTRT\n**-->>\n         CLC   =C' PARMLIB',8(R1) Indicator this table is from PARMLIB.\n         BE    NSCHENTY           It is, then we're cool.\n         BAL   R9,MISSPGM3        It isn't, then send message saying so\n         B     EOJ4               And exit with code = 4.\nNSCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n**-->>\n         LA    R1,X'10'(,R1)\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         L     R3,X'24'(,R2)      Load size of NS table\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NONS               No. Say so and get out.\n         AR    R4,R3              Point just past NS table\n* - -\n         XR    R5,R5\n         LH    R5,X'28'(,R2)      Load number of entries in table\n         ST    R5,TABLENUM        Store number of entries\n* - -\n         XR    R5,R5              Clear register\n         LH    R5,X'2A'(,R2)      Load size of NS entry\n* - -\n         ST    R5,TABLESIZ        Store size of each entry\n* - -\n         SR    R4,R5              Point to Last Slot\n         ST    R4,SAVLSLOT        Save location of last slot\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    NSCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         B     EOJ0\nNSCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         B     EOJ0\nNOE2     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E2'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNOE8     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E8'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNOAP     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'AP'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNONS     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'NS'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNOFCVE   DS    0H\n         APUT  =C'No FCVE found.  PC is an invalid table code now.',48\n         B     TRYPPVE\nNOPPVE   DS    0H\n         APUT  =C'No PPVE found.  PP is an invalid table code now.',48\n         B     TRYPPVEE\n         B     EOJ0\nNOTNUMER DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEN),MESSAGEN\n         MVC   LINE+21(1),0(R7)\n         APUT  LINE,L'MESSAGEN\n         B     EOJ4\n** ---------------------------------------------------------------- **\nSAVEPARM DC    F'0'\nSAVETPVT DC    F'0'\nSAVECTLT DC    F'0'\nSAVEFCVE DC    F'0'\nSAVEPPVE DC    F'0'\nSAVEUPT  DC    F'0'\nSAVEECT  DC    F'0'\nSAVEPSCB DC    F'0'\n** ---------------------------------------------------------------- **\nFULLZERO DC    F'0'\nFULLFOUR DC    F'4'\nFULLEIGT DC    F'8'\nFULLTWLV DC    F'12'\nSAVE1401 DC    5F'0'                  More for safety\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVOUTL  MVC   TABCODE(*-*),0(R1)     EXECUTED\nMOVFSTN  MVC   FSTNAME(*-*),0(R3)     EXECUTED\nMOVSNDN  MVC   SNDNAME(*-*),0(R1)     EXECUTED\nMOVFNUM  MVC   FSTNUME(*-*),0(R3)     EXECUTED\nPACK     PACK  WORKA,0(0,3)          <<< EXECUTED >>>                    06758\n** ---------------------------------------------------------------- **\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n*            S U B R O U T I N E S                *\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         ST    R9,SAVER9A\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9A\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNAMES DS    0H\n         ST    R9,SAVER9B\nGETNAMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNAMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         BCTR  R5,0                Subtract one from end count\n         B     GETNAMST            And loop to find first non-blank.\nGETNAMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R6,8                BCT initial quantity - 8 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of program name.\nGETNAMLU DS    0H                  Loop to get entire name\n         CLI   0(R7),X'40'         First blank?\n         BE    GETNAMGT            Yes, got whole name.\n         CLI   0(R7),X'00'         First hex zeros?\n         BE    GETNAMGT            Yes, got whole name.\n         CR    R8,R5               End of command buffer?\n         BNL   GETNAMGT            Yes. Got all we can get.\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R7,1(,R7)           Bump where we are.\n         BCT   R6,GETNAMLU         Loop back.\nGETNAMGT DS    0H\n         ST    R8,SAVER8\n         ST    R8,FSTCOUNT\n         CLC   SAVER8,=F'0'\n         BNE   GETREALY\n         B     EOJ4\nGETREALY DS    0H\n         MVC   FSTCHALF(2),FSTCOUNT+2\n         MVC   LINE,LINE-1\n         HEX   LINE,4,SAVER8\n         MVC   LINE+13(17),=C'Length of command'\n         APUT  LINE,30\n         L     R3,CHARCONT\n         BCTR  R8,0                One less for EXECUTE\n         MVC   FSTNAME(8),BLANKS\n         EX    R8,MOVFSTN\n         OC    FSTNAME(8),BLANKS\n         MVC   LINE,LINE-1\n         MVC   LINE(8),FSTNAME\n         MVC   LINE+13(17),=C'New program name '\n         APUT  LINE,30\n* - >\nGETNAMEN DS    0H\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNAMEPARM DS    0H\n         ST    R9,SAVER9D\n         TM    OFFFLAG,X'02'          Are we blanking?\n         BO    NAMEPEND               Yes. Don't need a name parameter\n         L     R8,SAVER8              Get number of characters used\n         CR    R8,R5                  More than what's left?\n         BNL   NAMEBAD1               Yes. Error.\n         C     R5,=F'3'               Is end bigger than 3?\n         BNH   NAMEBAD1               No. Error.\nNAMEGOOD DS    0H\n         S     R5,=F'3'               Subtract 3 from number till end.\n         BAL   R9,GETNUMES            Get the number of the pgm entry.\n         TM    OFFFLAG,X'04'          Displaying?\n         BO    NAMEPEND               Yes. No names wanted.\n         BAL   R9,GETNAMES            Get the name of pgm to shove in.\n         B     NAMEPEND\nNAMEBAD1 DS    0H\n         TM    OFFFLAG,X'04'          Are we displaying?\n         BO    NAMEPEND\n         B     EOJ4\nNAMEPEND DS    0H\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nADJNEXTP DS    0H\n         ST    R9,SAVER9E\n         MVC   CHARSTRT,CHARCONT\n         L     R1,CHARSTRT\nSEEIFENX DS    0H\n         CLI   0(R1),X'40'\n         BE    SEEIFENZ\n         LA    R1,1(,R1)\n         ST    R1,CHARSTRT\n         B     SEEIFENX\nSEEIFENZ DS    0H\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\n************************************************************\nPGMTITLE DS    0H                     Display program name\n         ST    R9,SAVER9F\n         MVC   LINE,LINE-1            Blank line\n         MVC   LINE,MESSAGET          Move title line in\n         APUT  LINE,L'MESSAGET        And put out to tube\n         MVC   LINE,LINE-1            Blank line again\n         MVC   LINE,MESSAGEU          Move underlines in\n         APUT  LINE,L'MESSAGEU        And put them out also\n         L     R9,SAVER9F\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nERRORCOD DS    0H\n         ST    R9,SAVER9H\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11L,L'MESSA11L\n         APUT  MESSA11M,L'MESSA11M\n         APUT  MESSA11P,L'MESSA11P\n         APUT  MESSA11A,L'MESSA11A\n         APUT  MESSA11C,L'MESSA11C\n         APUT  MESSA11D,L'MESSA11D\n         APUT  MESSA11I,L'MESSA11I\n         APUT  MESSA11K,L'MESSA11K\n         APUT  MESSA11F,L'MESSA11F\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         L     R9,SAVER9H\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM3 DS    0H\n         ST    R9,SAVER9K\n         MVC   LINE,LINE-1\n         APUT  MESSA11H,L'MESSA11H\n         L     R9,SAVER9K\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDISPTABL DS    0H                Scan thru the particular table....\n         ST    R9,SAVER9L          Save BAL register\n         ST    R3,SAVER3A          Save\n         ST    R4,SAVER4A             the\n         ST    R5,SAVER5A                work\n         ST    R6,SAVER6A                   registers.\n         TM    OFFFLAG,X'02'       Are we blanking the last entry?\n         BO    DISPTEND            Yes. Don't have to scan entire table\n         XR    R3,R3               Zero\n         XR    R5,R5                  work\n         XR    R6,R6                     registers.\nDISPTSTR DS    0H\n         L     R3,TABLSTRT         Load start address of table\n         L     R6,TABLENUM         Load number of entries in table\n         L     R5,TABLESIZ         Load size of each entry\n         LA    R4,1                Start slot number count at 1\n         ST    R4,SLOTNOW          Stort slot number count away\n         CLC   SLOTBIN,=F'0'       If there's no slot num in param\n         BE    DISPTLUP            Then bypass error checking\n         C     R6,SLOTBIN          Compare table size to parm number\n         BNL   DISPTLUP            If parm number is LE, then display\nDISPTERR DS    0H                  Else error message and out.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Slot number specified '\n         L     R1,SLOTBIN          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   LINE+34(26),=C'is bigger than table size '\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+60(10),MASK10  Move in the mask\n         ED    LINE+60(10),CVDAREA+3 Make it pretty\n         APUT  LINE,72\n         B     EOJ4\nDISPTLUP DS    0H                  Loop thru the table entries.\n         MVC   LINE,LINE-1\n         MVC   LINE(2),CODEPLAC\n         MVC   LINE+3(19),=C'Table Entry Number:'\n         CVD   R4,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         TM    NSCHFLG,X'01'       Is this the 10-byte NS table entry?\n         BO    DISPTBNS            Yes. Handle separately.\n         MVC   LINE+34(8),0(R3)\n         CLC   LINE+34(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+34(8),=C'*empty* '   Yes. Don't just show blanks.\n         B     DISPTBLK\nDISPTBNS DS    0H\n         HEX   LINE+34,2,0(R3)\n         MVC   LINE+40(8),2(R3)\n         CLC   LINE+40(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+40(8),=C'*empty* '   Yes. Don't just show blanks.\nDISPTBLK DS    0H                  Search each slot number.\n         CLC   SLOTBIN,=F'0'       Has a slot number been specified?\n         BE    DISPTYES            No. Just display all the slots.\n         CLC   SLOTBIN,SLOTNOW     Yes. Then are we at the one we want?\n         BNE   DISPTNOT            No. Just go further and search.\n* ---  Save contents of the current slot which was found - below\n         LR    R1,R5               Load table entry size\n         BCTR  R1,0                One less for execute\n         EX    R1,MOVESLOT         Save contents of slot for kicks\n         ST    R3,OURSLOT          Store its address - important....\n         MVC   TABENNUM(10),MASK10    Save edited version\n         ED    TABENNUM(10),CVDAREA+3    of this slot number\n         B     DISPTPEX               Branch past executed instruction\nMOVESLOT MVC   SLOTSAVE(*-*),0(R3)    EXECUTED\nDISPTPEX DS    0H\n* ---  Save contents of the current slot which was found - above\nDISPTYES DS    0H                  Print this slot entry\n         APUT  LINE,52\nDISPTNOT DS    0H                  Bump to next slot and loop back.\n         LA    R3,0(R5,R3)         Bump to next slot\n         LA    R4,1(,R4)           Bump count of slot number\n         ST    R4,SLOTNOW          Store new slot number away\n         BCT   R6,DISPTLUP         And loop to examine the new slot.\nDISPTEND DS    0H\n         L     R3,SAVER3A          Restore all the work registers.\n         L     R4,SAVER4A\n         L     R5,SAVER5A\n         L     R6,SAVER6A\n         L     R9,SAVER9L          Restore the BAL register.\n         BR    R9                  Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNUMES DS    0H\n         ST    R9,SAVER9M\nGETNUMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNUMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         S     R5,=F'1'            Subtract one from end count\n         B     GETNUMST            And loop to find first non-blank.\nGETNUMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R6,5                BCT initial quantity - 5 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of program number\nGETNUMLU DS    0H                  Loop to get entire number\n         CLI   0(R7),X'40'         First blank?\n         BE    GETNUMGT            Yes, got whole number\n         CLI   0(R7),X'00'         First hex zeros?\n         BE    GETNUMGT            Yes, got whole number\n         CR    R8,R5               End of command buffer?\n         BNL   GETNUMGT            Yes. Got all we can get.\n* --\n         CLI   0(R7),X'F0'         Check this parm if numeric.\n         BL    NOTNUMER\n         CLI   0(R7),X'F9'\n         BH    NOTNUMER\n* --\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R7,1(,R7)           Bump where we are.\n         BCT   R6,GETNUMLU         Loop back.\nGETNUMGT DS    0H                  Got the whole number - examine it.\n         ST    R8,SAVER8\n         ST    R8,FSTNOUNT         Get halfword value of slot number\n         MVC   FSTNHALF(2),FSTNOUNT+2\n         L     R3,CHARCONT\n         BCTR  R8,0                One less for EXECUTE\n         MVC   FSTFIELD(8),BLANKS  5-char number plus 3 blanks\n         EX    R8,MOVFNUM          Get the number from the parm\n         EX    R8,PACK             Convert it to packed\n         CVB   R0,WORKA            Convert it to Binary                  06446\n         ST    R0,SLOTBIN          Store the value for later use         06447\n         MVC   LINE,LINE-1\n         MVC   LINE(8),FSTFIELD    8-char number with blanks\n         MVC   LINE+13(19),=C'Entry slot number  '\n         APUT  LINE,32\n         LA    R8,1(,R8)           Restore number of chars after EX\n         ST    R8,CHARSIZE         Save this value off.\n         AR    R3,R8               Add it to R3 so we start past it.\n         ST    R3,CHARCONT         Store start value for next parm.\nGETNUMEN DS    0H\n         L     R9,SAVER9M\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMASK10   DC    XL10'40202020202020202120'\n         DC    C' '\nBLANKS   DC    C'                                            '\nMESSAGET DC    C'ADIS Command - Display Auth Table Entries           '\nMESSAGEU DC    C'---- -------   ------- ---- ----- -------           '\nMESSA11A DC    C'Supply a table code TT, followed by an action code A.'\nMESSA11C DC    C'Valid table codes are:  E2, E8, AP, NS, PC, PP. '\nMESSA11D DC    C'Valid action code is :  D - display. '\nMESSA11F DC    C'Full command is in the form TTA, TT=table code, A=acti-\n               on code.'\nMESSA11H DC    C'This table did not come from a PARMLIB specification.'\nMESSA11I DC    C'If D (display) is followed by a slot number, only that-\n                slot is shown.'\nMESSA11K DC    C'If D is not followed by a number, then the entire tabl-\n               e is displayed.'\nMESSA11L DC    C'  Instructions to use this program:                  '\nMESSA11M DC    C'  ------------ -- --- ---- -------                   '\nMESSA11P DC    C'Syntax:   ADIS TTA |nnn| (nnn is an optional slot numb-\n               er).'\nMESSA11Q DC    C'***  Please try entering a parameter.  *** '\nMESSAGR0 DC    C'Return Code = 0 '\nMESSAGR4 DC    C'Return Code = 4 '\nMESSAGR8 DC    C'Return Code = 8 '\nMESSAGRC DC    C'Return Code = 12'\nMESSDIAG DC    C'                                            '\nMESSAGEP DC    C'No Parmlib-supplied XX table was found in storage. '\nMESSAGEN DC    C'Supplied character        was not numeric. '\n         SPACE 3\n         LTORG\n         SPACE 3\nCVDAREA  DS    D                   For CVD instruction\nSAVEAPUT DS    2D\nSAVER1   DS    F                   Save R1 here\nSAVER1A  DS    F                   Save R1 here\nSAVER3A  DS    F                   Save R3 here\nSAVER4A  DS    F                   Save R4 here\nSAVER5A  DS    F                   Save R5 here\nSAVER6   DS    F                   Save R6 here\nSAVER6A  DS    F                   Save R6 here\nSAVER8   DS    F                   Save R8 here\nSAVER8A  DS    F                   Save R8 here\nSAVER8B  DS    F                   Save R8 here\nSAVER9A  DS    F                   BAL Register Save Area\nSAVER9B  DS    F                   BAL Register Save Area\nSAVER9C  DS    F                   BAL Register Save Area\nSAVER9D  DS    F                   BAL Register Save Area\nSAVER9E  DS    F                   BAL Register Save Area\nSAVER9F  DS    F                   BAL Register Save Area\nSAVER9G  DS    F                   BAL Register Save Area\nSAVER9H  DS    F                   BAL Register Save Area\nSAVER9I  DS    F                   BAL Register Save Area\nSAVER9J  DS    F                   BAL Register Save Area\nSAVER9K  DS    F                   BAL Register Save Area\nSAVER9L  DS    F                   BAL Register Save Area\nSAVER9M  DS    F                   BAL Register Save Area\nSAVER9N  DS    F                   BAL Register Save Area\nSAVER9O  DS    F                   BAL Register Save Area\nSAVER9P  DS    F                   BAL Register Save Area\nSAVER9Q  DS    F                   BAL Register Save Area\nSAVER9R  DS    F                   BAL Register Save Area\nSAVER9S  DS    F                   BAL Register Save Area\nSAVER9T  DS    F                   BAL Register Save Area\nSAVER9U  DS    F                   BAL Register Save Area\nSAVER9V  DS    F                   BAL Register Save Area\nSAVER9W  DS    F                   BAL Register Save Area\nSAVER9X  DS    F                   BAL Register Save Area\nSAVER9Y  DS    F                   BAL Register Save Area\nCMBUFEND DS    F                   Number of bytes to end of cmd buff\nSAVLSLOT DS    F                   Save place where Key 0 will change\nSLOTBIN  DS    F\nSLOTNOW  DS    F\nDISPREG  DS    F                   DISPLAY\nCMBUFAD  DS    F                   Command Buffer address\nCHARSTRT DS    F                   Address of first parm character\nCHARCONT DS    F                   Address of next parm character\nCHARSIZE DS    F\nOURSLOT  DS    F\n* --- >\nTABLSTRT DS    F                   Start address of table\nTABLENUM DS    F                   Number of entries in table\nTABLESIZ DS    F                   Size of a table entry\n* --- >\nOFFSETSV DS    F\nWORKA    DC    D'0'                                                      06772\nNUMVSTRT DC    X'00'               Character count of first parm\nNUMCOUTL DC    X'00'               Entered first parm length\nCODEPLAC DS    CL2\nPAD01    DS    CL4                 Filler\nOFFFLAG  DS    X                   Are we blanking the last entry?\nOLDFLAG  DS    X                   Old system detected if X'01'\nPLATFLG  DS    X\nNSCHFLG  DS    X\nPAD02    DS    CL4                 Filler\nFSTNAME  DC    CL8' '\nFSTCOUNT DS    F                   Number of characters in FSTNAME\nFSTCHALF DC    H'0'\nPAD03    DS    CL4                 Filler\nFSTFIELD DS    0CL8\nFSTNUME  DC    CL5' '\nFSTNUPAD DC    CL3' '\nFSTNOUNT DS    F                   Number of characters in FSTNAME\nFSTNHALF DC    H'0'\nPAD04    DS    CL4                 Filler\nSLOTSAVE DS    CL10\nPAD05    DS    CL4                 Filler\nSNDNAME  DC    CL8' '\nSNDCOUNT DS    F                   Number of characters in SNDNAME\nSNDCHALF DC    H'0'\nTABCODE  DC    CL8' '              Original OUTLIM character\nTABENNUM DC    CL10' '\n         DS    CL7                 PADDING\n         DS    CL1\nCMDBCOPY DS    CL252\n         DS    CL128               PADDING\n         DS    0F                  ALIGN ON FULLWORD\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137               Output line area\nLINET    EQU   LINE+7              Indented line\n         SPACE\n         IKJXPRM\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADIS$": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x000\\x01\\x055O\\x01\\x08\\x13_\\x18B\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2008-05-14T18:42:30", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//STEPLIB  DD DISP=SHR,DSN=IBMUSER.S18.HLASM\n//SYSLIB   DD DISP=SHR,DSN=IBMUSER.S18.MACLIB\n//         DD DISP=SHR,DSN=IBMUSER.S18.MODGEN\n//         DD DISP=SHR,DSN=IBMUSER.B.ASM\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(ADIS)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,9),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n ENTRY   ADIS\n NAME    ADIS(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADIS@": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x08\\x13o\\x01\\x08\\x13o\\x01S\\x00\\x1a\\x00.\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2008-05-15T00:00:00", "modifydate": "2008-05-15T01:53:00", "lines": 26, "newlines": 46, "modlines": 0, "user": "SBGOLOB"}, "text": "\n)F FUNCTION -\n\n The ADIS TSO command.\n\n Display the PARMLIB-generated TSO/E \"auth tables\":  IKJEFTE2 (AUTHCMD),\n  IKJEFTE8 (AUTHPGM), IKJEFTNS (NOTBKGND) and IKJEFTAP (AUTHTSF),\n  FCVE (PLATCMD) and PPVE (PLATPGM), if they exist.\n\n)X SYNTAX -\n\n   ADIS E2D \u00ddnnn\u00a8   or\n   ADIS E8D \u00ddnnn\u00a8   or\n   ADIS APD \u00ddnnn\u00a8   or\n   ADIS NSD \u00ddnnn\u00a8   or\n   ADIS PCD \u00ddnnn\u00a8   or\n   ADIS PPD \u00ddnnn\u00a8   .\n\n     where nnn is an optional number.\n\n   If nnn is not entered, the entire table is displayed.\n   If nnn is entered, only table entry nnn is displayed.\n   If nnn is a larger number than the number of entries in\n      that particular table, then an error message is displayed,\n      which tells you the permissible values of the number nnn.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALLIDS": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01c\\x00\\x16\\x01\\x080\\x8f\\x01 0\\x0f\\x111\\x02\\xd3\\x00'\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.99", "flags": 0, "createdate": "2008-11-03T00:00:00", "modifydate": "2020-10-26T11:31:16", "lines": 723, "newlines": 39, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE 'Display your TSO userid in various storage locations'\n* ------------------------------------------------------------------- *\n*      TSO COMMAND PROCESSOR TO DISPLAY THE USERID OF THE INVOKER,    *\n*        IN VARIOUS PLACES WHERE IT OCCURS WITHIN THE SYSTEM.         *\n*                                                                     *\n*      This program is useful for detecting if any \"funny business\"   *\n*        is going on, with the userid names, during your TSO session. *\n*        This program is also very valuable to show 8-character       *\n*        copies of userids when there are two versions of a userid    *\n*        in a control block.  For 8-character userid support, the     *\n*        PSCB, UPT, and LWA each contain two fields containing        *\n*        userids (the 7-character and the 8-character versions).      *\n*        This program shows both of them, plus both of their          *\n*        addresses in virtual storage.                                *\n*                                                                     *\n*      We have tried to make sure that this program will run well     *\n*        on older systems which do not have 8-character userid        *\n*        support (z/OS 2.2 and previous).                             *\n*                                                                     *\n*      *****    THIS PROGRAM IS IN THE PUBLIC DOMAIN.   *****         *\n*                                                                     *\n*      Only needs APF authorization to show the TSBX.  If you don't   *\n*        authorize, then the TSBX display shows an informational      *\n*        message, that you can't display the control block.           *\n*                                                                     *\n*      If there is no APF authorization, we test for it before the    *\n*        TSBX display (which needs APF) and produce an error message  *\n*        instead.                                                     *\n*                                                                     *\n*   CHANGE LOG:                                                       *\n*      Version 1.4 - Jun 16, 2020                                     *\n*        Add userid in UTOKEN control block.                          *\n*      Version 1.5 - Oct 26, 2020                                     *\n*        Add display of addresses for all the userid locations.       *\n*        Add second base register for possible expansion.             *\n*        Make sure display is all printable if run on old systems,    *\n*          where some of the new fields may have been hex zeros.      *\n*          (We try and OR these fields with blanks, to convert        *\n*           them to blanks, so that they won't be unprintable.)       *\n*        When running ALLIDS on a system without 8-character id       *\n*          support, don't report the second uid address if it         *\n*          is not there (the field is hex zeroes).                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n*  -----------------------------------------------------------------  *\n*                  MACRO TO DISPLAY HEX VALUES                        *\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEXR  &TO,&REG\n&NAME    STM   R15,R1,HEXSAVE\n         LR    R1,&REG\n         ST    R1,STORREG\n         LA    R0,4\n         LA    R15,&TO\n         BAL   R4,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n         YREGS\nALLIDS   CSECT\nALLIDS   RMODE 24\nALLIDS   AMODE 24\n         USING ALLIDS,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'ALLIDS  VER 1.5 '\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL37'This program is in the Public Domain '\nBEGINN   DS    0H\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER\n         USING ALLIDS,R12,R6       TWO BASES FOR POSSIBLE EXPANSION\n         LA    R6,4095(,R12)       LOAD SECOND BASE\n         LA    R6,1(,R6)\n         LR    R15,R13             SAVE CALLER'S SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          STORE HIS SAVEAREA INTO MINE + 4\n         ST    R13,8(,R15)         STORE MINE INTO HIS SAVEAREA + 8\nINITPGM  DS    0H                  PRINT TITLE\n*\n         MVI   OUTLINE-1,X'40'\n         MVC   OUTLINE,OUTLINE-1\n      MVC OUTLINE+8(43),=C'ALLIDS - SHOW TSO USERID OCCURRENCES - V1.5'\n         APUT  OUTLINE,51\n         MVC   OUTLINE,OUTLINE-1\n      MVC OUTLINE+8(43),=C'------   ---- --- ------ -----------   ----'\n         APUT  OUTLINE,51\n         MVC   OUTLINE,OUTLINE-1\n         MVC  OUTLINE(60),=C'   cntl            old    len   new   len x\n                address1 address2'\n         APUT  OUTLINE,60\n         MVC   OUTLINE,OUTLINE-1\n         MVC  OUTLINE(60),=C'  block           field   gth  field  gth x\n                of uid   of uid  '\n         APUT  OUTLINE,60\n         MVC   OUTLINE,OUTLINE-1\n         MVC  OUTLINE(60),=C'   ----           -----    --  -----   -- x\n                -------- --------'\n         APUT  OUTLINE,60\nRUNCHAIN L     R1,16               POINT TO CVT.\n         L     R5,X'9C'(,R1)       GET TSVT ADDRESS.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         L     R8,X'34'(,R2)       GET UPT ADDRESS\n         ST    R8,UPTSAVE          SAVE UPT ADDRESS\n* ------------------------------------------------------------------- *\n         USING PSCB,R2\n         MVC   PSCBMSG+18(7),PSCBUSER  MOVE OLD USERID IN FROM PSCB\n         MVC   PSCBMSG+30(8),PSCB+X'54' MOVE NEW USERID FROM PSCB\n         OC    PSCBMSG+30(8),BLANKS     IS FIELD ZEROS? BLANK IT OUT.\n         HEX   PSCBMSG+27,1,PSCB+X'7'   DISPLAY OLD LENGTH\n         CLI   PSCB+X'20',X'00'         OLD SYSTEM?\n         BE    NOLENG1                  YES. DON'T REPORT ZERO LENGTH\n         HEX   PSCBMSG+39,1,PSCB+X'20'  DISPLAY NEW LENGTH\nNOLENG1  DS    0H\n         OI    PSCBMSG+27,X'40'         MAKE PRINTABLE\n         OI    PSCBMSG+39,X'40'         MAKE PRINTABLE\n         ST    R2,ADDRSAVE              ADDRESS OF PSCBUSER (PSCB+0)\n         HEX   PSCBMSG+43,4,ADDRSAVE    PRINT IT\n         LA    R2,X'54'(,R2)            POINT TO NEW USERID FIELD\n         ST    R2,ADDRSAVE              SAVE ITS ADDRESS FOR PRINTING\n         CLC   0(8,R2),ZEROES           OLD SYSTEM?\n         BE    NOFIELD1                 DON'T PRINT ADDRESS\n         HEX   PSCBMSG+52,4,ADDRSAVE    PRINT ADDRESS OF NEW USERID\nNOFIELD1 DS    0H\n         APUT  PSCBMSG,L'PSCBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         DROP  R2\n         USING UPT,R8\n         MVC   UPTMSG+18(7),UPT+X'10' OLD PREFIX\n         MVC   UPTMSG+30(8),UPT+X'21' NEW PREFIX\n         OC    UPTMSG+30(8),BLANKS      IF ZEROS, BLANK IT OUT\n         HEX   UPTMSG+27,1,UPT+X'17'    MOVE IN OLD LENGTH\n         CLI   UPT+X'29',X'00'          OLD SYSTEM?\n         BE    NOLENG2                  YES. DON'T REPORT ZERO LENGTH\n         HEX   UPTMSG+39,1,UPT+X'29'    MOVE IN NEW LENGTH\nNOLENG2  DS    0H\n         OI    UPTMSG+39,X'40'          DON'T PRINT HEX ZEROS\n         LA    R8,X'10'(,R8)            GET ADDRESS OF OLD USERID\n         ST    R8,ADDRSAVE              SAVE ADDRESS OF OLD USERID\n         L     R8,UPTSAVE               RELOAD UPT ADDRESS\n         HEX   UPTMSG+43,4,ADDRSAVE     PRINT ADDRESS OF USERID\n         LA    R8,X'21'(,R8)            GET ADDRESS OF NEW USERID\n         ST    R8,ADDRSAVE              SAVE ADDRESS OF NEW USERID\n         CLC   0(8,R8),ZEROES           OLD SYSTEM?\n         BE    NOFIELD2                 DON'T PRINT ADDRESS\n         HEX   UPTMSG+52,4,ADDRSAVE     PRINT IT\nNOFIELD2 DS    0H\n         L     R8,UPTSAVE               RELOAD UPT ADDRESS\n         APUT  UPTMSG,L'UPTMSG         DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R1,X'104'(,R1)      POINT TO JCT PREFIX.\n         MVC   JCTMSG+18(8),X'18'(R1)  PRINT JCT ID MESSAGE.\n         LA    R1,X'18'(,R1)            POINT TO JCT USERID\n         ST    R1,ADDRSAVE              STORE IT FOR MESSAGE\n         HEX   JCTMSG+43,4,ADDRSAVE     PRINT ADDRESS IN MESSAGE\n         APUT  JCTMSG,L'JCTMSG         DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R1,X'104'(,R1)      POINT TO JCT PREFIX.\n         XR    R7,R7               CLEAR REGISTER\n         ICM   R7,7,X'96'(R1)      POINT REGISTER TO JMR POINTER\n         MVC   JMRMSG+18(8),X'10'(R7)  MOVE USERID TO MESSAGE\n         LA    R7,X'10'(,R7)            POINT TO JMR USERID\n         ST    R7,ADDRSAVE              SAVE ADDRESS FOR PRINTING\n         HEX   JMRMSG+43,4,ADDRSAVE     PRINT ADDRESS IN MESSAGE\n         APUT  JMRMSG,L'JMRMSG         DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,12(,R9)          POINT TO TIOT\n         ST    R1,ADDRSAVE              SAVE ADDRESS FOR PRINTING\n         MVC   TIOTMSG+18(8),0(R1)  MOVE USERID IN FROM TIOT\n         HEX   TIOTMSG+43,4,ADDRSAVE    PRINT ADDRESS IN MESSAGE\n         APUT  TIOTMSG,L'TIOTMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n         ST    R1,ADDRSAVE              SAVE ADDRESS FOR PRINTING\n         MVC   ASCBMSG+18(8),0(R1)  MOVE USERID IN FROM ADDRESS\n         HEX   ASCBMSG+43,4,ADDRSAVE    PRINT ADDRESS IN MESSAGE\n         APUT  ASCBMSG,L'ASCBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         LA    R3,X'C0'(,R1)         POINT TO ASXB USERID\n         ST    R3,ADDRSAVE              SAVE ADDRESS FOR PRINTING\n         MVC   ASXBMSG+18(8),0(R3)    MOVE ASXB USERID\n         HEX   ASXBMSG+43,4,ADDRSAVE    PRINT ADDRESS IN MESSAGE\n         APUT  ASXBMSG,L'ASXBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         ST    R1,SAVEACEE           SAVE THE ACEE ADDRESS\n         LA    R3,X'15'(,R1)         POINT TO ACEE USERID\n         ST    R3,ADDRSAVE              SAVE ADDRESS FOR PRINTING\n         MVC   ACEEMSG+18(8),0(R3)      MOVE ACEE USERID\n         HEX   ACEEMSG+43,4,ADDRSAVE    PRINT ADDRESS IN MESSAGE\n         HEX   ACEEMSG+27,1,X'14'(R1)   MOVE ACEE USERID LENGTH\n         APUT  ACEEMSG,L'ACEEMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,SAVEACEE           RELOAD THE ACEE ADDRESS\n         L     R1,X'A4'(,R1)           POINT TO THE UTOKEN\n         LA    R1,X'40'(,R1)           POINT TO UTOKEN USERID\n         ST    R1,ADDRSAVE              SAVE ADDRESS FOR PRINTING\n         MVC   UTOKMSG+18(8),0(R1)      MOVE UTOK USERID\n         HEX   UTOKMSG+43,4,ADDRSAVE    PRINT ADDRESS IN MESSAGE\n         APUT  UTOKMSG,L'UTOKMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'14'(,R1)       POINT TO LWA\n         ST    R1,SAVELWA          SAVE THE ADDRESS OF THE LWA\n         LA    R3,X'49'(,R1)         POINT TO LWA USERID\n         MVC   LWAMSG+18(7),0(R3)       MOVE LWA USERID\n         ST    R3,ADDRSAVE              SAVE ADDRESS FOR PRINTING\n         HEX   LWAMSG+43,4,ADDRSAVE     PRINT ADDRESS IN MESSAGE\n         L     R1,SAVELWA            RELOAD LWA ADDRESS\n         LA    R3,X'1DC'(,R1)          POINT TO NEW USERID FIELD\n         ST    R3,ADDRSAVE             SAVE ITS ADDRESS\n         CLC   0(8,R3),ZEROES           OLD SYSTEM?\n         BE    NOFIELD3                 DON'T PRINT ADDRESS\n         HEX   LWAMSG+52,4,ADDRSAVE    DISPLAY NEW ADDRESS IN MESSAGE\nNOFIELD3 DS    0H\n         HEX   LWAMSG+27,1,X'48'(R1)   DISPLAY LENGTH VALUE\n         MVC   LWAMSG+30(8),0(R3)      MOVE USERID INTO PLACE\n         OC    LWAMSG+30(8),BLANKS     IF ZEROS, BLANK IT OUT\n         APUT  LWAMSG,L'LWAMSG         DISPLAY THE MESSAGE ON THE TUBE\n         STM   R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* --- >>     The TSB and TSBX display needs APF-authorization. BELOW\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, go display other ids.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n         MODESET KEY=ZERO\n         L     R1,X'3C'(,R10)          POINT TO TSB\n         MVC   TSBXMSG+18(8),X'90'(R1) MOVE IN USERID\n         LA    R1,X'90'(,R1)           POINT TO USERID\n         ST    R1,ADDRSAVE             SAVE ADDRESS FOR REPORT\n         HEX   TSBXMSG+43,4,ADDRSAVE   PRINT ADDRESS IN REPORT\n         APUT  TSBXMSG,L'TSBXMSG       SHOW THE NAME THERE\n         MODESET KEY=NZERO\n         B     NOTAUTHO            Don't print not-auth message.\n* --- >>     The TSB and TSBX display needs APF-authorization. ABOVE\nNOTAUTH  DS    0H\n         APUT  TSBNMSG,L'TSBNMSG       PRINT NOT-AUTHORIZED MESSAGE.\nNOTAUTHO DS    0H\n* --- >>     Subsequent control blocks may be above the 24-bit line.\n         L     R15,CHGTO31B            LOAD ADDR OF 'TO31BIT' WITH..\n         BSM   0,R15                   CHANGE TO 31-BIT MODE IN ORDER..\n*                                      TO ADDRESS GETCORE STORAGE\nCHGTO31B DC    0F'0',A(X'80000000'+TO31BIT)  SWITCH TO 31-BIT\nTO31BIT  DS    0H                  Now we are in 31-bit mode.\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         LR    R8,R1               SAVE CSCB ADDRESS\n         MVC   CSCBMSG+18(8),8(R1)     MOVE CSCB USERID\n         LA    R1,8(,R1)               POINT TO CSCB USERID\n         ST    R1,ADDRSAVE             SAVE ITS ADDRESS FOR REPORT\n         HEX   CSCBMSG+43,4,ADDRSAVE   PRINT ADDRESS IN THE REPORT\n         APUT  CSCBMSG,L'CSCBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         LR    R1,R8               RELOAD CSCB ADDRESS\n         L     R1,X'DC'(,R1)       POINT TO CSCX ADDRESS\n         ST    R3,SAVER3A              SAVE WORK REGISTER\n         LA    R3,X'18'(,R1)           POINT TO CSCX USERID\n         ST    R3,ADDRSAVE             STORE ITS ADDRESS\n         HEX   CSCXMSG+43,4,ADDRSAVE    PRINT ADDRESS IN THE REPORT\n         MVC   CSCXMSG+18(8),X'18'(R1)  MOVE USERID INTO MESSAGE\n         L     R3,SAVER3A              RESTORE WORK REGISTER\n         APUT  CSCXMSG,L'CSCXMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'90'(,R10)      POINT TO ASCBOUCB\n         LA    R1,X'D0'(,R1)       POINT TO OUCBUSRD\n         ST    R1,ADDRSAVE             SAVE OUCB USERID ADDRESS\n         MVC   OUCBMSG+18(8),0(R1)     MOVE OUCB USERID\n         HEX   OUCBMSG+43,4,ADDRSAVE   DISPLAY ITS ADDRESS IN REPORT\n         APUT  OUCBMSG,L'OUCBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'150'(,R10)     POINT TO ASSB\n         L     R1,X'A8'(,R1)         POINT TO JSAB\n         ST    R3,SAVER3A              SAVE WORK REGISTER\n         MVC   JSABMSG+18(8),X'2C'(R1)  MOVE JSAB USERID TO REPORT\n         LA    R3,X'2C'(,R1)            GET ITS ADDRESS\n         ST    R3,ADDRSAVE              SAVE ADDRESS FOR REPORT\n         HEX   JSABMSG+43,4,ADDRSAVE    PRINT ADDRESS IN REPORT\n         MVC   JSABMSG+34(8),X'1C'(R1)  GET JSAB JOBNAME\n         LA    R3,X'1C'(,R1)            GET ITS ADDRESS\n         ST    R3,ADDRSAVE              SAVE ADDRESS FOR REPORT\n         HEX   JSABMSG+52,4,ADDRSAVE    PRINT ADDRESS IN REPORT\n         APUT  JSABMSG,L'JSABMSG       DISPLAY MESSAGE ON THE TUBE\n         L     R3,SAVER3A              RESTORE WORK REGISTER\n         L     R1,X'150'(,R10)     POINT TO ASSB\n         L     R1,X'F0'(,R1)         POINT TO VAB\n         L     R1,4(,R1)               POINT TO CAUB\n         LA    R3,X'14'(,R1)             POINT TO USERID\n         ST    R3,ADDRSAVE              SAVE ADDRESS FOR REPORT\n         HEX   CAUBMSG+43,4,ADDRSAVE    PRINT ADDRESS IN REPORT\n         MVC   CAUBMSG+18(8),0(R3)      MOVE CAUB USERID TO REPORT\n         APUT  CAUBMSG,L'CAUBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         B     TRY00\nENDMSG   DS    0H\n* ------------------------------------------------------------------- *\nTRY00    DS    0H                  CHECK IF 8-CHARACTER IDS ARE ACTIVE\n         STM   R14,R1,SAVE14T1     SAVE ENOUGH REGISTERS\n         CLI   6(R5),X'00'         OLD SYSTEM?\n         BNE   TRY07               NO. MAYBE NEW SYSTEM W/O 8-CHAR\n         APUT  MSG01,L'MSG01       SHOW 8-CHARACTER NOT APPLICABLE\n         B     TRYEND              GET OUT OF THIS ROUTINE\nTRY07    DS    0H                  CHECK IF Z/OS 2.3 W/O 8-CHAR SUPPORT\n         CLI   6(R5),X'07'         IS IT THAT?\n         BNE   TRY08               NO. TRY IF 2.3 WITH 8-CHARACTER\n         APUT  MSG02,L'MSG02       SHOW 2.3 W/O 8-CHARACTER\n         B     TRYEND              GET OUT OF THIS ROUTINE\nTRY08    DS    0H                  CHECK IF 8-CHAR SUPPORT IS AVAILABLE\n         CLI   6(R5),X'08'         IS IT AVAILABLE?\n         BNE   TRYEND              NO. JUST GET OUT WITHOUT A MESSAGE.\n         APUT  MSG03,L'MSG03       SHOW 8-CHARACTER IS AVAILABLE\n         B     TRYEND              GET OUT OF THIS ROUTINE\nTRYEND   DS    0H                  END OF ROUTINE\n         LM    R14,R1,SAVE14T1     RELOAD SAVED REGISTERS\n* ------------------------------------------------------------------- *\nRETURN   DS    0H\n         L     R13,SAVE+4          RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)     RELOAD REGISTERS\n         BR    R14                 RETURN TO CALLER\nSAVE     DC    18F'0'              MY SAVE AREA\nSAVER3A  DC    F'0'                SAVE AREA FOR R3\nSAVEACEE DC    F'0'                SAVE AREA FOR ACEE\nSAVELWA  DC    F'0'                SAVE AREA FOR LWA\nSAVETSB  DC    F'0'                SAVE AREA FOR TSB\nADDRSAVE DC    F'0'                SAVE ADDRESSES PRIOR TO PRINTING\nUPTSAVE  DC    F'0'                SAVE THE UPT ADDRESS\nZEROES   DC    XL8'0000000000000000'\nPSCBMSG  DC    CL61'My PSCB Userid is                              '\nUPTMSG   DC    CL61'My UPT  Prefix is                              '\nJCTMSG   DC    CL61'My JCT  Userid is                              '\nJMRMSG   DC    CL61'My JMR  Userid is                              '\nTIOTMSG  DC    CL61'My TIOT Userid is                              '\nASCBMSG  DC    CL61'My ASCB Userid is                              '\nASXBMSG  DC    CL61'My ASXB Userid is                              '\nCAUBMSG  DC    CL61'My CAUB Userid is                              '\nJSABMSG  DC    CL61'My JSAB Userid is          Jobnam              '\nACEEMSG  DC    CL61'My ACEE Userid is                              '\nUTOKMSG  DC    CL61'My UTOK Userid is                              '\nLWAMSG   DC    CL61'My LWA  Userid is                              '\nCSCBMSG  DC    CL61'My CSCB Userid is                              '\nCSCXMSG  DC    CL61'My CSCX Userid is                              '\nOUCBMSG  DC    CL61'My OUCB Userid is                              '\nTSBXMSG  DC    CL61'My TSBX Userid is                              '\nTSBNMSG  DC    C'My TSBX Userid cannot be displayed - needs APF-authorix\n               zation'\nBLANKS   DC    CL80' '\nOUTPUT   DC    CL80' '\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\nSTORREG  DC    F'0'\nMSG01    DC    C'8-CHARACTER USERID SUPPORT IS: N/A'\nMSG02    DC    C'8-CHARACTER USERID SUPPORT IS: OFF'\nMSG03    DC    C'8-CHARACTER USERID SUPPORT IS: ON '\n         DC    X'40'\nOUTLINE  DS    CL80\n         LTORG\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\n** ---------------------------------------------------------------- **\nHEXR     DS    0H\n         MVC   1(1,R15),STORREG    MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         CVT   DSECT=YES\n         IKJPSCB\n         IKJUPT\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALLIDS$": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x02\\x01\\x05\\x13_\\x01 0\\x0f\\x14\\x01\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2005-05-15T00:00:00", "modifydate": "2020-10-26T14:01:02", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE731(ALLIDS)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   ALLIDS\n SETSSI  CB500731\n SETCODE AC(1)\n NAME    ALLIDS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALPL": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00H\\x01\\x06\\x01\\x8f\\x01\\x074?\\x16\\x05\\x03)\\x04)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2006-01-18T00:00:00", "modifydate": "2007-12-09T16:05:48", "lines": 809, "newlines": 1065, "modlines": 0, "user": "SBGOLOB"}, "text": "ALPL     TITLE 'ALPL - CHANGE DEFAULT TSO/E ALLOCATION TO OLD OR SHR'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized.                          *\n*                                                                     *\n*    Environment:   TSO command, APF Authorized                       *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                                                                     *\n*    Description:   Change the system-wide default allocation value   *\n*                   of the TSO/E ALLOC command to allocate either     *\n*                   OLD or SHR.                                       *\n*                                                                     *\n*       Function:   To change the system wide allocation default.     *\n*                                                                     *\n*         Syntax:   ALPL OLD | SHR    (changes value if different)    *\n*                   ALPL              (displays current setting)      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2007/12/09 - 1.0 - Initial version - Tested with TSO/E Version   *\n*                       3.                                            *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJALPL\nALPLDSEC DSECT                         ALLOC command defaults\nALPL_ID  DS    C'ALPL'                 Block id\nALPL_LENGTH DS H                       length of control block\nALPL_LEVEL  DS H                       level of control block\n         DS    F                       zero\nALPL_FLAG DS   X                       Allocate flag\nALPL_OLD EQU  X'80'                    OLD\nALPL_SHR EQU  X'40'                    SHR\n         DS   4F\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nALPL     CSECT\nALPL     AMODE 31\nALPL     RMODE 24\n         USING *,R15                                                  *  01493\n         B     BEGINN                   Eyecatcher\n         DC    CL15'ALPL VER 1.0 -'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         DROP  R15\n         USING ALPL,R12,R11,R10\n         STM   R14,R12,12(R13)\n         LR    R12,R15                  Set up base registers.\n         ST    R1,SAVEPARM              Save CPPL pointer\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LA    R1,SAVEAREA          Point to new save area               01508\n         ST    R1,8(,R13)           Forward save area chain pointer      01509\n         ST    R13,4(,R1)           Backward save area chain pointer     01510\n         LR    R13,R1               New save area address                01511\n         B     INITCON              Branch past save area\n         SPACE 1\n* -----------------------\nSAVEAREA DC    18F'0'                                                    01504\n* -----------------------\nINITCON  DS    0H                   Initialize constants\n         MVI   ALCFLAG,X'00'\n         MVI   NCHFLAG,X'00'\n         MVI   DSPLFLAG,X'00'\n         MVI   DSPLSAVE,X'00'\n         MVI   LINEB,X'40'\n         MVC   DISPSETT(3),=C'   '\n* -----------------------\nTESTPSCB DS    0H\n         L     R2,16               POINT TO CVT.\n         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS\n         L     R2,4(,R2)           POINT TO TCB.\n         L     R2,X'B4'(,R2)       POINT TO JSCB.\n         L     R2,X'108'(,R2)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJC                GET OUT.  NOT TSO.\n         L     R1,SAVEPARM\n         USING CPPL,R1\n         L     R0,CPPLUPT          Copy CPPL fields for possible\n         ST    R0,SAVEUPT            later use, if needed.\n         L     R0,CPPLPSCB\n         ST    R0,SAVEPSCB\n         L     R0,CPPLECT\n         ST    R0,SAVEECT\n         LA    R6,0\n         DROP  R1\n         BAL   R9,PGMTITLE         First display the program title.\n         USING PSCB,R2\nCHEKAUTH DS    0H\n*        B     CONT0               Bypass authorization check\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes.  Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJC                No.  Get out.\n         DROP  R2\nCONT0    DS    0H                  Get starting addresses for tables\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT\n         ST    R2,SAVETPVT         Save TPVT address for later use\n         L     R2,X'24'(,R2)       Point to ALPL control block\n         ST    R2,SAVEALPL         Save ALPL address for later use\nLOOKALPL DS    0H\n* ------\n         L     R2,SAVEALPL         Load ALPL address back - safety\n         CLC   =C'ALPL',0(R2)      Is this a valid header?\n         BE    VALDALPL            Yes, do the processing.\n         B     EOJC                No. Exit with code 12.\nVALDALPL DS    0H\n* ------\n*    We start scanning for PARMs here.\n* ------\n         L     R1,SAVEPARM         Original R1 from entry to program.\n         LTR   R1,R1               Any CPPL?\n         BZ    EOJC                No. Get out.\n         L     R1,0(,R1)           Point to Command Buffer\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJC                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJC                No.  Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear high order 3 bytes.\n         ST    R1,CMBUFAD          Save Command Buffer Address\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of CMDBUFR header\n*                                  in the command buffer.\n         BC    5,EOJC              Less, or overflow, out, code 12.\n         BC    8,DISPLIT           No parm, just display current\n*                                     status, and exit, code 4.\n         ST    R5,CMBUFEND         Store away the number of bytes left\n         L     R1,CMBUFAD          Load Command Buffer Address\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,3                Load register for BCT loop.\n         ST    R1,CHARSTRT         Store address away for safekeeping\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of parameter.\n         LA    R8,0                Initialize character count\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    AFTFIRST            Yes, end of the first parm.\n         LA    R7,1(,R7)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   AFTFIRST            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nAFTFIRST DS    0H\n         MVC   TABCODE(8),BLANKS   Clear field\n         BCTR  R8,0                Subtract 1 for execute.\n         L     R1,CHARSTRT         Reload R1 to be sure it's correct.\n         EX    R8,MOVOUTL          Move entered parameter to program.\n         LA    R8,1(,R8)           Restore number of characters\n         AR    R1,R8               Point past last search\n         ST    R1,CHARCONT         Continue from here\n         ST    R8,SAVER8           Save\n         ST    R6,SAVER6             the\n         ST    R1,SAVER1A              registers\n* ---- >\nSEEIFPRM DS    0H                  Check if a command is here\n         OC    TABCODE(3),BLANKS   Uppercase. Won't affect numbers\n         CLC   TABCODE(3),=C'OLD'  Change alloc default to OLD?\n         BE    SEEIF0A1\n         CLC   TABCODE(3),=C'SHR'  Change alloc default to SHR?\n         BE    SEEIF0A2\n         B     SEEIFERR\nSEEIF0A1 DS    0H\n         OI    ALCFLAG,X'01'       Change alloc default to OLD.\n         B     SEEIF001\nSEEIF0A2 DS    0H\n         OI    ALCFLAG,X'02'       Change alloc default to SHR.\n         B     SEEIF001\nSEEIFERR DS    0H\n         BAL   R9,DSPLSTAT         Display current status\n* --- >\n         MVC   LINE,LINEB\n         MVC   LINE(3),TABCODE\n         HEX   LINE+6,1,ALCFLAG\n         MVC   LINE+13(33),=C'Parm is not OLD or SHR.          '\n         APUT  LINE,46\n         APUT  MESSAG2D,L'MESSAG2D\n* --- >\n         B     EOJ8                Not either one? Exit.\nSEEIFER1 DS    0H                  Which table to change\n         B     EOJ8                Not either one? Exit.\nSEEIF001 DS    0H                  Which table to change\n         BAL   R9,DSPLSTAT         Display current status\n* --- >                            Then display target status\n         MVC   LINE,LINEB\n         MVC   LINE(3),TABCODE\n         HEX   LINE+6,1,ALCFLAG\n         MVC   LINE+13(33),=C'ALLOC setting will be changed to '\n         CLI   ALCFLAG,X'01'\n         BE    SEEIFOLD\n         B     SEEIFSHR\nSEEIFOLD DS    0H\n         MVC   LINE+46(3),=C'OLD'\n         MVC   DISPSETT(3),=C'OLD'\n         B     SEEIFPUT\nSEEIFSHR DS    0H\n         CLI   ALCFLAG,X'02'\n         BNE   SEEIFER1\n         MVC   LINE+46(3),=C'SHR'\n         MVC   DISPSETT(3),=C'SHR'\nSEEIFPUT DS    0H\n         TM    NCHFLAG,X'01'\n         BO    SEEIFCHG\n         APUT  LINE,49\n* --- >\nSEEIFCHG DS    0H\n         TM    NCHFLAG,X'01'\n         BO    SAYNOCHG\n         BAL   R9,SETTMODE\n         B     EOJ0\nSAYNOCHG DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(40),=C'No change of ALLOC status was necessary. '\n         APUT  LINE,40\n         B     EOJ0\nDISPLIT  DS    0H\n         BAL   R9,DSPLSTAT         Zero, Message\n         B     EOJ4\nEOJ      DS    0H                                                        04216\n         L     R13,4(,R13)                                               04214\n         LR    R15,R5              Put in real return code\n         ST    R15,16(,R13)        Shove it where it belongs\n         L     R14,12(,R13)        R14 and\n         LM    R0,R12,20(R13)        rest of registers\n         BR    R14                 Go back to caller\nEOJ0     DS    0H                  Return code 0\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR0       Show Return Code 0\n         APUT  MESSAGR0,L'MESSAGR0\n         LA    R5,0                Set CC = 0\n         B     EOJ                 Now end the program\nEOJ4     DS    0H                  Return code 4\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR4       Show Return Code 4\n         APUT  LINE,L'MESSAGR4\n         L     R5,FULLFOUR         Set CC = 4                            04215\n         B     EOJ                 Now end the program\nEOJ8     DS    0H                  Return code 8\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR8       Show Return Code 8\n         APUT  LINE,L'MESSAGR8\n         L     R5,FULLEIGT         Set CC = 8                            04215\n         B     EOJ                 Now end the program\nEOJC     DS    0H                  Return code 12\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGRC       Show Return Code 12\n         APUT  LINE,L'MESSAGRC\n         L     R5,FULLTWLV         Set CC = 12\n         B     EOJ                 Now end the program\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         B     EOJ8\n** ---------------------------------------------------------------- **\nSAVEPARM DC    F'0'\nSAVETPVT DC    F'0'\nSAVEALPL DC    F'0'\nSAVEUPT  DC    F'0'\nSAVEECT  DC    F'0'\nSAVEPSCB DC    F'0'\n** ---------------------------------------------------------------- **\nFULLZERO DC    F'0'\nFULLFOUR DC    F'4'\nFULLEIGT DC    F'8'\nFULLTWLV DC    F'12'\nSAVE1401 DC    5F'0'                  More for safety\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVOUTL  MVC   TABCODE(*-*),0(R1)     EXECUTED\n** ---------------------------------------------------------------- **\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n*            S U B R O U T I N E S                *\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         ST    R9,SAVER9A\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9A\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\n************************************************************\nPGMTITLE DS    0H                     Display program name\n         ST    R9,SAVER9B\n         MVC   LINE,LINE-1            Blank line\n         MVC   LINE,MESSAGET          Move title line in\n         APUT  LINE,L'MESSAGET        And put out to tube\n         MVC   LINE,LINE-1            Blank line again\n         MVC   LINE,MESSAGEU          Move underlines in\n         APUT  LINE,L'MESSAGEU        And put them out also\n         L     R9,SAVER9B\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSETTMODE DS    0H\n         ST    R9,SAVER9C\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* -- >\n* -- >      Key Zero ---- Here's where we change the stuff.\nKZ       MODESET KEY=ZERO\n* -\n         L     R2,SAVEALPL         Load ALPL address back.\n         USING ALPLDSEC,R2\n         TM    ALCFLAG,X'01'\n         BO    MAKEOLD\n         TM    ALCFLAG,X'02'\n         BO    MAKESHR\nMAKEOLD  DS    0H\n         MVI   ALPL_FLAG,ALPL_OLD\n         B     ENDKZ\nMAKESHR  DS    0H\n         MVI   ALPL_FLAG,ALPL_SHR\n         B     ENDKZ\nENDKZ    DS    0H\n         DROP  R2\n* -\nNZ       MODESET KEY=NZERO\n* -- >      Back to ordinary life ----\n         BAL   R9,DISPLNEW\n         L     R9,SAVER9C\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDSPLSTAT DS    0H                     Display ALLOC status\n         ST    R9,SAVER9D\n         L     R2,SAVEALPL\n         MVC   DSPLSAVE,X'C'(R2)\n* -- >\n*        MVC   LINE,LINE-1            Blank line\n*        MVC   LINE(14),=C'Hex Old Value '\n*        HEX   LINE+18,1,DSPLSAVE\n*        APUT  LINE,22\n* -- >\n         CLI   X'C'(R2),X'80'\n         BE    DISPLOLD\n         CLI   X'C'(R2),X'40'\n         BE    DISPLSHR\n         B     DISPLERR\nDISPLOLD DS    0H\n         MVI   DSPLFLAG,X'01'\n         MVC   MESSAGE4+35(3),=C'OLD'\n         B     DISPLPUT\nDISPLSHR DS    0H\n         MVI   DSPLFLAG,X'02'\n         MVC   MESSAGE4+35(3),=C'SHR'\n         B     DISPLPUT\nDISPLERR DS    0H\n         MVC   MESSAGE4+35(3),=C'ERR'\n         B     DISPLPUT\nDISPLPUT DS    0H\n         MVC   LINE,LINE-1            Blank line\n         MVC   LINE,MESSAGE4          Move title line in\n         APUT  LINE,L'MESSAGE4        And put out to tube\nDISPLNCH DS    0H\n         TM    ALCFLAG,X'03'\n         BZ    DISPLEND\n         CLC   ALCFLAG,DSPLFLAG\n         BNZ   DISPLEND\n         OI    NCHFLAG,X'01'\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE5\n         MVC   LINE+23(3),MESSAGE4+35\n         APUT  LINE,L'MESSAGE5        And put out to tube\nDISPLEND DS    0H\n         L     R9,SAVER9D\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDISPLNEW DS    0H\n         ST    R9,SAVER9E\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE6\n         MVC   LINE+35(3),DISPSETT\n         APUT  LINE,L'MESSAGE6        And put out to tube\nDISPLNND DS    0H\n         L     R9,SAVER9E\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                                            '\nMESSAGET DC    C'ALPL Command - Change Default Allocation OLD or SHR '\nMESSAGEU DC    C'---- -------   ------ ------- ---------- --- -- --- '\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG3A DC    C'Default ALLOC value was changed to OLD.            '\nMESSAG3B DC    C'Default ALLOC value was changed to SHR.            '\nMESSAGE4 DC    C'Current setting of ALLOC value is     .            '\nMESSAGE5 DC    C'ALLOC value setting of     will not be changed.    '\nMESSAGE6 DC    C'Changed setting of ALLOC value is     .            '\nMESSAGR0 DC    C'Return Code = 0 '\nMESSAGR4 DC    C'Return Code = 4 '\nMESSAGR8 DC    C'Return Code = 8 '\nMESSAGRC DC    C'Return Code = 12'\n         SPACE 3\n         LTORG\n         SPACE 3\nSAVER1A  DS    F                   Save R1 here\nSAVER6   DS    F                   Save R6 here\nSAVER8   DS    F                   Save R8 here\nSAVER9A  DS    F                   BAL Register Save Area\nSAVER9B  DS    F                   BAL Register Save Area\nSAVER9C  DS    F                   BAL Register Save Area\nSAVER9D  DS    F                   BAL Register Save Area\nSAVER9E  DS    F                   BAL Register Save Area\nCMBUFEND DS    F                   Number of bytes to end of cmd buff\nCMBUFAD  DS    F                   Command Buffer address\nCHARSTRT DS    F                   Address of first parm character\nCHARCONT DS    F                   Address of next parm character\nPAD01    DS    CL4                 Filler\nDISPSETT DS    CL3                 Place to store literal OLD or SHR\nDSPLSAVE DS    X                   Save bit setting in control block\nDSPLFLAG DS    X                   Convert bit setting to our flag\nNCHFLAG  DS    X                   \"No change necessary\" flage\nALCFLAG  DS    X                   Are we blanking the last entry?\nPAD02    DS    CL4                 Filler\nTABCODE  DC    CL8' '              Original OUTLIM character\n         DS    CL72                PADDING\n         DS    0F                  ALIGN ON FULLWORD\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137               Output line area\nLINET    EQU   LINE+7              Indented line\n         SPACE\n         IKJALPL\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALPL$": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x007\\x01\\x055O\\x01\\x074?\\x11\\x07\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2007-12-09T11:07:37", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.S18.HLASM\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.S18.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.S18.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.B.ASM\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(ALPL)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,9),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n ENTRY   ALPL\n NAME    ALPL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALPL@": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x16\\x01\\x054o\\x01\\x12!\\x8f\\x11\\x12\\x00@\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2005-12-12T00:00:00", "modifydate": "2012-08-05T11:12:16", "lines": 64, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n\n Globally change the in-storage values for the TSO ALLOCATE (ALLOC)\n  command, to default to OLD or to SHR.\n\n Also, to DISPLAY the current default setting for the TSO ALLOCATE\n  command, whether it is OLD or SHR.  The DISPLAY function of ALPL\n  does not have to run APF authorized.\n\n  The ALPL TSO command is an APF authorized TSO command to change\n    the default disposition of a dataset allocated by the TSO/E\n    ALLOC command if the disposition (OLD or SHR) is not explicitly\n    mentioned in the ALLOCATE command.  Usually the default is\n    OLD, but you can change it to SHR with a PARMLIB UPDATE(xx)\n    or SET IKJTSO=xx PARMLIB switch.  The ALPL command is useful\n    when you want to do the change \"on the fly\" and \"on the sly\"\n    if you don't have the option of doing the PARMLIB switch, for\n    some reason.  (For example, if management won't allow a\n    PARMLIB change.)\n\n    If no parameter is entered after ALPL, then the current\n    status of the ALLOC command default is displayed.  The display\n    function of ALPL does not need APF authorization.\n\n    Valid other operands are SHR or OLD.  If these operands\n    do not cause a change in status, then a message is issued\n    and no change is done.  APF Authorization of the TSO command\n    is only needed if a change will be done.\n\n    Changes are done directly (in Key 0) to the IKJALPL control\n    block in common storage, and are valid until the next PARMLIB\n    UPDATE(xx), SET IKJTSO=xx, or IPL.  The values entered apply\n    to the entire LPAR, and all the users of that MVS instance\n    (SO BE CAREFUL).\n\n    The TSO PUTLINE interface is used, so you can print or SYSOUTTRAP\n    the output of the ALPL TSO command.\n\n    NON-REENTRANT, NON-REUSABLE.\n\n)X SYNTAX  -\n    ALPL                 (displays current setting OLD or SHR)\n      or\n    ALPL OLD             (changes ALLOC setting to OLD if different)\n      or\n    ALPL SHR             (changes ALLOC setting to SHR if different)\n\n\n  DEFAULT  - NONE\n  ALIAS    -\n  NOTE     - The ALPL command is supported for previous releases\n             of TSO/E, and has been tested on MVS releases back to\n             MVS/ESA 5.2.2 and forward to z/OS 1.13.\n\n)O OPERANDS -\n)) *none*    -  A display of the current default setting for the\n                ALLOC command is shown.\n\n))OLD        -  If the current setting is SHR, it will be switched\n                to OLD.  Otherwise, it will be kept the same.\n\n))SHR        -  If the current setting is OLD, it will be switched\n                to SHR.  Otherwise, it will be kept the same.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APUT": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x8a\\x00\\x8a\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 138, "newlines": 138, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUFRSIZ$": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x15\\x01\\x055O\\x01\\x19\\x19\\x7f\\x159\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-16T15:39:15", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(BUFRSIZE)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(1)\n ENTRY   BUFRSIZE\n NAME    BUFRSIZE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUFRSIZE": {"ttr": 2318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00Y\\x01\\x055O\\x01\\x19\\x19\\x7f\\x151\\x03\\x07\\x01\\x87\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-16T15:31:59", "lines": 775, "newlines": 391, "modlines": 0, "user": "SBGOLOB"}, "text": "BUFRSIZE TITLE 'BUFRSIZE - SET TCAS CELL SIZE, BUFRSIZE=NNNN'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.  APF AUTHORIZED.  YOU NEED TO PUT        *\n*                   THIS COMMAND NAME IN THE ACTIVE IKJEFTE2 TABLE,   *\n*                   OR AUTHORIZE IT SOME OTHER WAY (CBT FILE 185      *\n*                   AND/OR CBT FILE 797).                             *\n*                                                                     *\n*         SYNTAX:   BUFRSIZE nnnn (nnnn is the new value of           *\n*                           TSO BUFRSIZE in decimal)                  *\n*                        Values accepted:  4 through 3016             *\n*                                                                     *\n*                   BUFRSIZE (no parameters) will show the current    *\n*                           cell size for the VTIOC buffer in TCAS.   *\n*                                                                     *\n*                   These will only work if BUFRSIZE is an APF-       *\n*                   authorized TSO command (in the IKJEFTE2 table).   *\n*                                                                     *\n*                                                                     *\n*         OUTPUT:   Via PUTLINE interface, using APUT and EPUTL.      *\n*                                                                     *\n*       SAMPLE OUTPUT:    (BUFRSIZE 5)                                *\n*                                                                     *\n*            BUFRSIZE - VER. 1.2 - 07/10/19 - 15.56                   *\n*            --------------------------------------                   *\n*             Change the BUFRSIZE number in the IKTTCAST              *\n*             control block.                                          *\n*            Current number of TSO Users:  3                          *\n*            Previous value of BUFRSIZE :  132                        *\n*            Value of BUFRSIZE reset to :  256                        *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   TO CHANGE THE BUFRSIZE NUMBER REPRESENTED BY      *\n*                   THE BUFRSIZE PARAMETER IN THE TSOKEYxx PARMLIB    *\n*                   MEMBER.                                           *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  JUL 16, 2019                                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*         CHANGES:  1.1 - DEC 12, 09 -  (for program BDMNNOTC)        *\n*                     Fixed messages, better numeric verification.    *\n*                                                                     *\n*                   1.2 - DEC 14, 09 -                                *\n*                     Better comments, title subroutine, cut out      *\n*                     unnecessary code. Put non-numeric test in       *\n*                     the proper place, to not cause a S0C7 abend.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                  M A I N L I N E   C O D E\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBUFRSIZE CSECT\nBUFRSIZE AMODE 31\nBUFRSIZE RMODE 24\n         USING BUFRSIZE,R12,R11,R10\n         B     BEGINN-*(,R15)\n         DC    CL18'BUFRSIZE VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             Set up base\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)         Second base\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)         Third base\n         LR    R6,R1               PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                  Initialize constants.\n         MVC   NEWNMBIN,=F'0'\n         MVI   NUMFLAG,X'00'\n         MVI   LINEB,X'40'\n* ------------------------------------------------------------------- *\n*  Get old value for BUFRSIZE. Do it early on in the program.         *\n* ------------------------------------------------------------------- *\n*  Test if we are APF-authorized - IKTTCAST is in Subpool 231 -       *\n*    which is fetch-protected.  You need APF to even see it.          *\n* ------------------------------------------------------------------- *\n         STM   R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         L     R2,16               CVT\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCAST\n         ST    R5,SAVER5A          Save R5\n         XR    R5,R5               Prepare work register\n         USING TCAST,R3\n         MODESET KEY=ZERO\n         LH    R4,TCASCLSZ         Save old buffer size.\n         LH    R5,TCASUSEC         Get current number of users.\n         MODESET KEY=NZERO\n         ST    R5,BINUSERS\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         MVC   LJUSSTOR,LJUSTWRK   Store number of users for display.\n         MVC   RJUSTWRK,BLANKS     Clear areas for reuse.\n         MVC   LJUSTWRK,BLANKS\n         CVD   R4,CVDWORK          Convert to Decimal\n         MVC   DECOLDNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECOLDNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         L     R5,SAVER5A          Restore R5\n         DROP  R2,R3\n* ------------------------------------------------------------------- *\n* --     Is it TSO?  And run another authorization check.          -- *\n* ------------------------------------------------------------------- *\n* --       You need OPER and ACCT authority to run this, if you    -- *\n* --     comment out the bypass that is after the CHEKAUTH label.  -- *\n* ------------------------------------------------------------------- *\n         L     R1,16               Point to CVT.\n         L     R1,0(,R1)           Point to TCB/ASCB words.\n         L     R9,4(,R1)           Point to TCB.\n         L     R1,X'B4'(,R9)       Point to JSCB.\n         L     R2,X'108'(,R1)      Point to PSCB.\n         LA    R2,0(,R2)           Clear high byte.\n         LTR   R2,R2               Any PSCB?\n         BZ    EOJ4                Get out. Not TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                  TSO Authorization (Oper,Acct)\n         B     CONT0               Bypass authorization check.\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes. Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No. Get out.\n         DROP  R2\n* ------------------------------------------------------------------- *\n* --         Get Parameter - Make sure it is numeric.              -- *\n* ------------------------------------------------------------------- *\nCONT0    DS    0H\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No. Not TSO.\n         L     R1,0(,R6)           Point to Command Buffer.\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out of none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of Command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,EOJ4              Zero. Message.\n         BC    5,EOJ4              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,5                Load Reg for BCT loop. 5 times.\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)                to first nonnull character\n         LA    R8,0                Initialize character count.\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the number\n*--------------------------------  Numeric Test this character - below\n         CLI   0(R7),C'0'\n         BL    FLAGON              Less than 0 ? No good.\n         CLI   0(R7),C'9'          Greater than 9 ?\n         BH    FLAGON              No good.\n         B     FLAGGO              It's numeric.\nFLAGON   OI    NUMFLAG,X'01'       It's not numeric. Flag the situation\nFLAGGO   DS    0H\n*--------------------------------  Numeric Test this character - above\n         LA    R7,1(,R7)           Go to next character\n         LA    R8,1(,R8)           Count it.\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nNOMORCUT DS    0H\n         MVC   NEWNUMB(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for Execute\n         EX    R8,MOVOUTL          Move number into display field\n         LA    R8,1(,R8)           Bump R8 back to where it was\n*\n         TM    NUMFLAG,X'01'       Did it fail the numeric test?\n         BO    NOTNUMER            It failed. No changes to be made.\n*\n         STC   R8,NUMCOUTL         Save PARM number's length (not used)\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         BCTR  R8,0                One less for Execute.\n         EX    R8,PACK             Convert to Packed.\n         CVB   R0,WORK             Convert to Binary.\n         ST    R0,NEWNMBIN         And store number in NEWNMBIN.\n         B     PASTCONV            Jump past constants.\n*\nMOVOUTL  MVC   NEWNUMB(*-*),0(R1)  Executed\nPACK     PACK  WORK,0(0,R1)        For conversion to binary.\nWORK     DC    D'0'                CVB work area.\nFULLZERO DC    F'0'                Fullword of zeros.\n*\nPASTCONV DS    0H                  Continue execution.\n* ------------------------------------------------------------------- *\n* -- >  Test again if this command is being run APF Authorized   < -- *\n* ------------------------------------------------------------------- *\nAUTHTEST DS    0H                  Don't let the system get a S047.\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* ------------------------------------------------------------------- *\n*     Replace the number here,   Get TCASUMAX field again, this time  *\n*       in Key 0.                 to replace it with the new number.  *\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT.\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCASP\n         USING TCAST,R3\n         MVC   NEWNTEST,NEWNMBIN        Copy binary number for testing\n         CLC   NEWNTEST,=X'00000BC8'    Bigger than 3016?\n         BH    TOOBIG                   Yes. Entered number is too big\n         CLC   NEWNTEST,=X'00000004'    Smaller than 4?\n         BL    TOOSMALL                 Yes. Too small.\n* ------------------------------------------------------------------- *\nKZ       MODESET KEY=ZERO\n         MVC   TCASCLSZ,NEWNMBIN+2    Replace BUFRSIZE in Key 0.\nNZ       MODESET KEY=NZERO\n* ------------------------------------------------------------------- *\n* --  Normal Completion  -                                         -- *\n* ------------------------------------------------------------------- *\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Previous value of BUFRSIZE :  '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE(30),=C'Value of BUFRSIZE reset to :  '\n         MVC   LINE+30(10),NEWNUMB\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         DROP  R3\n* ------------------------------------------------------------------- *\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of BUFRSIZE  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG10),MESSAG10\n         APUT  LINE,L'MESSAG10\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,4\n         B     EOJ                 CONT.\n* ------------------------------------------------------------------- *\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of BUFRSIZE  :  '\n         MVC   LINE+30(10),LJUSTWRK    Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG11),MESSAG11\n         APUT  LINE,L'MESSAG11\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ                 CONT\n** ---------------------------------------------------------------- **\nTOOBIG   DS    0H                     Number entered was too big.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of BUFRSIZE  :  '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2F,L'MESSAG2F\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ\n** ---------------------------------------------------------------- **\nTOOSMALL DS    0H                     Number entered was too big.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of BUFRSIZE  :  '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2G,L'MESSAG2G\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of BUFRSIZE  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n*        APUT  LINE,47\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTNUMER DS    0H                     Parameter not numeric.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of BUFRSIZE  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   MESSPARM,NEWNUMB       Stuff entered parm into message.\n         APUT  MESSAG2B,MESSAG2L\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      S U B R O U T I N E S                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTITLSTMT DS    0H\n         APUT  MESSAGET,L'MESSAGET    Full title and messages.\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSAGEV,L'MESSAGEV\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLJUST    DS    0H                    Left-justify the display number.\n         STM   R4,R6,SAVER4T6        Save work registers.\n         LA    R4,RJUSTWRK           Point to right-justified number.\n         LA    R5,LJUSTWRK           Point to left-justification area.\n         LA    R6,10                 10 characters only.\nLJUSTLUP DS    0H                    loop.....\n         CLI   0(R4),X'F0'           Is this character smaller than 0?\n         BL    LJUSTBMP              No good. Bump past it.\n         CLI   0(R4),X'F9'           Is this character larger than 9?\n         BH    LJUSTBMP              No good. Bump past it.\n         MVC   0(1,R5),0(R4)         Significant. Move it to left-just.\n         LA    R5,1(,R5)             Bump left-just character.\nLJUSTBMP DS    0H\n         LA    R4,1(,R4)             Bump right-just char in any case.\nLJUSTCYC BCT   R6,LJUSTLUP           Loop up to BCT times. (10).\nLJUSTEND DS    0H                    end of loop.....\n         LM    R4,R6,SAVER4T6        Restore work registers.\n         BR    R9                    Return to caller.\nRJUSTWRK DC    CL10' '               Right-justified display number.\nLJUSTWRK DC    CL10' '               Left-justified display number.\nLJUSSTOR DC    CL10' '               Store current number of users.\nSAVER4T6 DS    3F                    Save area for work registers.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                '   BLANKS\nMESSAGED DC    C'--------------------------------------'\nMESSAGET DC    C'BUFRSIZE - VER. 1.2 - &SYSDATE - &SYSTIME   '\nMESSAGEU DC    C' Change the BUFRSIZE number in the IKTTCAST '\nMESSAGEV DC    C' control block.                             '\nMESSAG10 DC    C'To change BUFRSIZE, enter a numeric parameter. '\nMESSAG11 DC    C'This program was not invoked as a TSO command.'\nMESSAG2B DC    C'Parameter '\nMESSPARM DC    C'          '\nMESSAG2E DC    C'had non-numeric characters.  '\nMESSAG2L EQU   *-MESSAG2B\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG2F DC    C'Number entered was greater than 3016.'\nMESSAG2G DC    C'Number entered was smaller than 4.'\nMASK10   DC    XL10'40202020202020202120'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D                  Save Area\nCVDWORK  DS    D                   Work area for CVD instruction\nSAVE1401 DC    5F'0'               TESTAUTH save area for registers\nSAVER5A  DS    F\nBINUSERS DS    F                   Number of current users in Binary\nNEWNMBIN DS    F                   New number to put in CVTBCLMT\nNEWNTEST DS    F                   Test binary number not too large\nDECOLDNM DS    PL8                 Packed version\nDECUSRNM DS    PL8                 Packed version\nNUMFLAG  DC    X'00'               Flag, X'01' if not numeric\nNUMCOUTL DC    X'00'               Store Length of parameter here\nNEWNUMB  DC    C'          '       Store Parm number here\n         DS    0F                  Align on fullword\nLINEB    DS    C                   LINE-1 (primed with blank)\nLINE     DS    CL137               Print line for most purposes\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of Data Area\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKTTCAST\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BYE": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1f\\x00\\x19\\x01\\x17\\x19o\\x01\\x17 \\x1f\\x14W\\x00\\x8b\\x00 \\x00\\x00\\xe4\\xd7\\xc4\\xc1\\xe3\\xc5\\xd9@@@'", "ispf": {"version": "01.31", "flags": 0, "createdate": "2017-07-15T00:00:00", "modifydate": "2017-07-20T14:57:19", "lines": 139, "newlines": 32, "modlines": 0, "user": "UPDATER"}, "text": "         TITLE 'TOOL TO MANIPULATE THE TSO RELOGON BUFFER'\n* ------------------------------------------------------------------- *\n* 'BYE' TSO COMMAND                                                   *\n*                             WRITTEN JULY 15 2017 (BY CBT UPDATER)   *\n*                             MODIFIED  JULY 16 2017 (BY SBG)         *\n* ------------------------------------------------------------------- *\n* PURPOSE:  TO LOAD THE TSO RELOGON BUFFER WITH ANY DATA (SHOULD BE   *\n*           A LOGON/LOGOFF COMMAND) AND SET THE ECT RELOGON SWITCH    *\n*           ON, SO LOGOFF IS DONE WHEN IN \"READY\" MODE, FOLLOWED      *\n*           BY THE LOGON/LOGOFF COMMAND IN THE RELOGON BUFFER.        *\n* ------------------------------------------------------------------- *\n* SYNTAX :      BYE   COMMAND TO PUT IN BUFFER                        *\n*                                                                     *\n*       RESULT:   PUTS THE COMMAND CHARACTERS INTO THE RELOGON        *\n*                 BUFFER, SETS THE BUFFER HEADER, AND SETS            *\n*                 THE ECT RELOGON SWITCH \"ON\".                        *\n*                                                                     *\n* SYNTAX:       BYE                    (WITH NO OPERANDS)             *\n*                                                                     *\n*       RESULT:   CLEARS THE RELOGON BUFFER TO BLANKS,                *\n*                 INITIALIZES THE RELOGON BUFFER HEADER,              *\n*                 AND SETS THE ECT RELOGON SWITCH \"OFF\".              *\n*                 (UN-DO THE RESULT OF \"BYE\" WITH OPERANDS.)          *\n* ------------------------------------------------------------------- *\n* DESCRIPTION OF THE PROGRAM:                                         *\n*                                                                     *\n* THIS MUST BE RUN AS A TSO COMMAND. R1 SHOULD POINT TO THE CPPL.     *\n* THIS TSO COMMAND SETS THE ECTLOGF BIT ON IN THE ECT, AND            *\n* PUTS THE COMMAND NAME IN THE RELOGON BUFFER, OR, IF ANY OPERANDS    *\n* ARE SPECIFIED, PUTS JUST THOSE OPERANDS IN THE RELOGON BUFFER.      *\n* ------------------------------------------------------------------- *\n* AS A RESULT OF TURNING ON THE ECTLOGF BIT, THE NEXT TIME            *\n* A 'READY' PROMPT IS EXPECTED FROM THE TERMINAL MONITOR PROGRAM,     *\n* THE TERMINAL MONITOR PROGRAM WILL END INSTEAD, LOGGING THE SESSION  *\n* OFF.  WHEN THIS COMMAND IS ISSUED FROM ISPF, THE LOGOFF WILL NOT    *\n* OCCUR UNTIL THE USER EXITS FROM ISPF.                               *\n* ------------------------------------------------------------------- *\n* IF THE OPERAND IS 'LOGOFF' THE SESSION WILL NOT TRY TO LOGON AFTER  *\n* IT ENDS. IF THE OPERAND IS 'LOGON', THE SESSION WILL TRY TO LOGON   *\n* AFTER IT ENDS, JUST LIKE WHAT HAPPENS IF YOU ENTER 'LOGON' FROM     *\n* THE 'READY' PROMPT.  YOU CAN ENTER LOGON USERID/PASSWORD            *\n* AS AN OPERAND OF BYE.                                               *\n* ------------------------------------------------------------------- *\n* IF THE OPERAND IS ABSENT, EVERYTHING IS RE-INITIALIZED,  (SBG)      *\n* AND THE ECTLOGF BIT IS SWITCHED OFF, CANCELLING THE RELOGON.        *\n* ------------------------------------------------------------------- *\n* IF THE OPERAND IS ANYTHING OTHER THAN 'LOGOFF' OR 'LOGON',          *\n* THEN AFTER THE LOGOFF THESE MESSAGES WILL APPEAR:                   *\n*  IKJ56410I XXX COMMAND NOT ACCEPTED DURING LOGON                    *\n*  IJ56400A ENTER LOGON OR LOGOFF-                                    *\n* WHERE XXX WILL WILL BE THE COMMAND OR OPERAND THAT WAS SPECIFIED.   *\n* ------------------------------------------------------------------- *\n* OR IF THE OPERAND DOES NOT EVEN QUALIFY AS A VALID TSO COMMAND      *\n* NAME, I.E. MORE THAN 8 CHARACTERS, STARTS WITH A NUMBER, ETC.       *\n* THEN AFTER THE LOGOFF THESE MESSAGES WILL APPEAR:                   *\n*  IKJ56401I INVALID COMMAND SYNTAX                                   *\n*  IJ56400A ENTER LOGON OR LOGOFF-                                    *\n* ------------------------------------------------------------------- *\n* MODIFICATION:  (\"BYE\" WITHOUT OPERANDS, RE-INITIALIZES EVERYTHING.) *\n*                                                                     *\n* FIXED \"BYE\" WITHOUT OPERANDS, TO INITIALIZE THE RELOGON BUFFER,     *\n*  AND TURN THE LOGOFF BIT OFF IN THE ECT.    (SBG)                   *\n* ------------------------------------------------------------------- *\n*\nBYE      CSECT\n         USING *,R6\nENTRY0   EQU   *\n         SAVE  (14,12),,*\n         LR    R6,R15              BASE REGISTER\n         LA    R15,SAVE            NEW SAVE AREA\n         ST    R13,4(,R15)         OLD ADDRESS IN NEW SAVE AREA\n         ST    R15,8(,R13)         NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R15             NEW SAVE AREA\n         SPACE\n* ------------------------------------------------------------------- *\n*      ARE WE A LEGITIMATE TSO COMMAND RUNNING IN THE FOREGROUND?     *\n* ------------------------------------------------------------------- *\n         TM    0(R1),X'80'         IF PARM INSTEAD OF CPPL\n         BO    EXIT                   DON'T DO ANYTHING\n         LM    R2,R5,0(R1)         R2 -> CBUF, R4 -> PSCB, R5 -> ECT\n         TM    ECTSWS-ECT(R5),ECTBKGRD  IF BACKGROUND\n         BO    EXIT                   DON'T DO ANYTHING ELSE\n* ------------------------------------------------------------------- *\n*      YES WE ARE, SO TURN SWITCH ON AND LOAD THE RELOGON BUFFER      *\n* ------------------------------------------------------------------- *\n         OI    ECTSWS-ECT(R5),ECTLOGF   TURN ON RELOGON SWITCH\n*               COPY THE COMMAND IN CBUF, OR JUST ITS OPERANDS IF ANY\n*               TO THE RELOGON BUFFER\n         L     R8,PSCBRLGB-PSCB(,R4)    POINT R8 TO RELOGON BUFFER\n         MVI   4(R8),C' '               FILL BUFFER + 4 LENGTH 252\n         MVC   5(251,R8),4(R8)          WITH BLANKS\n         LA    R7,4(,R2)           POINT R7 TO CBUF+4\n         LH    R14,0(,R2)          GET LENGTH OF CBUF\n         SH    R14,=H'4'           MINUS 2 LEADING HALFWORDS\n         BNP   EXIT                SHOULDN'T BE ZERO OR LESS\n* ------------------------------------------------------------------- *\n* --------------------------------   TEST IF ANY OPERANDS   --------- *\n         TM    ECTSWS-ECT(R5),ECTNOPD   IF NO OPERANDS,\n         BO    NOOFFS                   RE-INITIALIZE EVERYTHING\n* ------------------------------------------------------------------- *\n* --------------------------------   LOAD THE RELOGON BUFFER  ------- *\n         AH    R7,2(,R2)           POINT TO OPERAND BY ADDING OFFSET\n         SH    R14,2(,R2)          REDUCE LENGTH BY SUBTRACTING OFFSET\n         BCTR  R14,0               LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   4(0,R8),0(R7)\n         EX    R14,*-6             COPY CBUF TO RELOGON BUFFER\n         AH    R14,=H'5'           ADD 4 TO LENGTH, PLUS 1 FOR BCTR\n         STH   R14,0(,R8)          SET LENGTH IN RELOGON BUFFER\n         SR    R14,R14\n         STH   R14,2(,R8)          ZERO THE OFFSET HALFWORD\n* ------------------------------------------------------------------- *\nEXIT     SR    R15,R15             RETURN CODE ZERO\n         L     R13,4(,R13)         RESTORE R13\n         L     R14,12(,R13)\n         RETURN (0,12)\n* ------------------------------------------------------------------- *\n*   WHEN \"BYE\" HAS NO OPERANDS, THEN INITIALIZE THE RELOGON BUFFER.   *\n* ------------------------------------------------------------------- *\nNOOFFS   DS    0H\n         MVI   0(R8),X'01'         INITIALIZE LENGTH TO X'100'\n         MVI   1(R8),X'00'\n         SR    R14,R14\n         STH   R14,2(,R8)          ZERO THE OFFSET HALFWORD\n         NI    ECTSWS-ECT(R5),X'FF'-ECTLOGF   TURN LOGOFF BIT OFF\n*                                  BUFFER WAS ALREADY BLANKED, ABOVE.\n         B     EXIT\n* ------------------------------------------------------------------- *\n*                          CONSTANTS                                  *\n* ------------------------------------------------------------------- *\n         DC    0D'0'               DOUBLEWORD ALIGNMENT\nSAVE     DC    18F'0'              SAVE AREA\n         SPACE\n         PRINT GEN\n         IKJCPPL\n         IKJPSCB\n         IKJECT\n         YREGS\n         END   ENTRY0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BYE$": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00W\\x01\\x17\\x19o\\x01\\x17 \\x1f#S\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2017-07-15T00:00:00", "modifydate": "2017-07-20T23:53:57", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE731(BYE)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   BYE\n SETCODE AC(1)\n SETSSI  CB495731\n NAME    BYE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHNLEN": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00R\\x01\\x055O\\x01\\x19\\x19\\x7f\\x15\\x10\\x03\\x08\\x01\\x87\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-16T15:10:52", "lines": 776, "newlines": 391, "modlines": 0, "user": "SBGOLOB"}, "text": "CHNLEN   TITLE 'CHNLEN - SET TCAS MAXIMUM CHAIN LENGTH'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.  APF AUTHORIZED.  YOU NEED TO PUT        *\n*                   THIS COMMAND NAME IN THE ACTIVE IKJEFTE2 TABLE,   *\n*                   OR AUTHORIZE IT SOME OTHER WAY (CBT FILE 185      *\n*                   AND/OR CBT FILE 797).                             *\n*                                                                     *\n*         SYNTAX:   CHNLEN n (n is the new value of                   *\n*                           TSO CHNLEN in decimal)                    *\n*                        Values accepted:  1 through 10               *\n*                                                                     *\n*                   CHNLEN (no parameters) will show the current      *\n*                           maximum chain length in TSOKEYxx.         *\n*                                                                     *\n*                   These will only work if CHNLEN is an APF-         *\n*                   authorized TSO command (in the IKJEFTE2 table).   *\n*                                                                     *\n*                                                                     *\n*         OUTPUT:   Via PUTLINE interface, using APUT and EPUTL.      *\n*                                                                     *\n*       SAMPLE OUTPUT:    (CHNLEN  5)                                 *\n*                                                                     *\n*            CHNLEN - VER. 1.2 - 07/10/19 - 15.56                     *\n*            --------------------------------------                   *\n*             Change the CHNLEN number in the IKTTCAST                *\n*             control block.                                          *\n*            Current number of TSO Users:  3                          *\n*            Previous value of CHNLEN :    4                          *\n*            Value of CHNLEN reset to :    5                          *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   TO CHANGE THE CHNLEN NUMBER REPRESENTED BY        *\n*                   THE CHNLEN PARAMETER IN THE TSOKEYxx PARMLIB      *\n*                   MEMBER.                                           *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  JUL 16, 2019                                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*         CHANGES:  1.1 - DEC 12, 09 -  (for program BDMNNOTC)        *\n*                     Fixed messages, better numeric verification.    *\n*                                                                     *\n*                   1.2 - DEC 14, 09 -                                *\n*                     Better comments, title subroutine, cut out      *\n*                     unnecessary code. Put non-numeric test in       *\n*                     the proper place, to not cause a S0C7 abend.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                  M A I N L I N E   C O D E\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nCHNLEN   CSECT\nCHNLEN   AMODE 31\nCHNLEN   RMODE 24\n         USING CHNLEN,R12,R11,R10\n         B     BEGINN-*(,R15)\n         DC    CL17'CHNLEN VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             Set up base\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)         Second base\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)         Third base\n         LR    R6,R1               PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                  Initialize constants.\n         MVC   NEWNMBIN,=F'0'\n         MVI   NUMFLAG,X'00'\n         MVI   LINEB,X'40'\n* ------------------------------------------------------------------- *\n*  Get old value for CHNLEN. Do it early on in the program.           *\n* ------------------------------------------------------------------- *\n*  Test if we are APF-authorized - IKTTCAST is in Subpool 231 -       *\n*    which is fetch-protected.  You need APF to even see it.          *\n* ------------------------------------------------------------------- *\n         STM   R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         L     R2,16               CVT\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCAST\n         ST    R5,SAVER5A          Save R5\n         XR    R5,R5               Prepare work register\n         USING TCAST,R3\n         MODESET KEY=ZERO\n         XR    R4,R4\n         IC    R4,TCASCHNL         Save old maximum chain size.\n         LH    R5,TCASUSEC         Get current number of users.\n         MODESET KEY=NZERO\n         ST    R5,BINUSERS\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         MVC   LJUSSTOR,LJUSTWRK   Store number of users for display.\n         MVC   RJUSTWRK,BLANKS     Clear areas for reuse.\n         MVC   LJUSTWRK,BLANKS\n         CVD   R4,CVDWORK          Convert to Decimal\n         MVC   DECOLDNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECOLDNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         L     R5,SAVER5A          Restore R5\n         DROP  R2,R3\n* ------------------------------------------------------------------- *\n* --     Is it TSO?  And run another authorization check.          -- *\n* ------------------------------------------------------------------- *\n* --       You need OPER and ACCT authority to run this, if you    -- *\n* --     comment out the bypass that is after the CHEKAUTH label.  -- *\n* ------------------------------------------------------------------- *\n         L     R1,16               Point to CVT.\n         L     R1,0(,R1)           Point to TCB/ASCB words.\n         L     R9,4(,R1)           Point to TCB.\n         L     R1,X'B4'(,R9)       Point to JSCB.\n         L     R2,X'108'(,R1)      Point to PSCB.\n         LA    R2,0(,R2)           Clear high byte.\n         LTR   R2,R2               Any PSCB?\n         BZ    EOJ4                Get out. Not TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                  TSO Authorization (Oper,Acct)\n         B     CONT0               Bypass authorization check.\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes. Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No. Get out.\n         DROP  R2\n* ------------------------------------------------------------------- *\n* --         Get Parameter - Make sure it is numeric.              -- *\n* ------------------------------------------------------------------- *\nCONT0    DS    0H\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No. Not TSO.\n         L     R1,0(,R6)           Point to Command Buffer.\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out of none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of Command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,EOJ4              Zero. Message.\n         BC    5,EOJ4              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,5                Load Reg for BCT loop. 5 times.\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)                to first nonnull character\n         LA    R8,0                Initialize character count.\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the number\n*--------------------------------  Numeric Test this character - below\n         CLI   0(R7),C'0'\n         BL    FLAGON              Less than 0 ? No good.\n         CLI   0(R7),C'9'          Greater than 9 ?\n         BH    FLAGON              No good.\n         B     FLAGGO              It's numeric.\nFLAGON   OI    NUMFLAG,X'01'       It's not numeric. Flag the situation\nFLAGGO   DS    0H\n*--------------------------------  Numeric Test this character - above\n         LA    R7,1(,R7)           Go to next character\n         LA    R8,1(,R8)           Count it.\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nNOMORCUT DS    0H\n         MVC   NEWNUMB(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for Execute\n         EX    R8,MOVOUTL          Move number into display field\n         LA    R8,1(,R8)           Bump R8 back to where it was\n*\n         TM    NUMFLAG,X'01'       Did it fail the numeric test?\n         BO    NOTNUMER            It failed. No changes to be made.\n*\n         STC   R8,NUMCOUTL         Save PARM number's length (not used)\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         BCTR  R8,0                One less for Execute.\n         EX    R8,PACK             Convert to Packed.\n         CVB   R0,WORK             Convert to Binary.\n         ST    R0,NEWNMBIN         And store number in NEWNMBIN.\n         B     PASTCONV            Jump past constants.\n*\nMOVOUTL  MVC   NEWNUMB(*-*),0(R1)  Executed\nPACK     PACK  WORK,0(0,R1)        For conversion to binary.\nWORK     DC    D'0'                CVB work area.\nFULLZERO DC    F'0'                Fullword of zeros.\n*\nPASTCONV DS    0H                  Continue execution.\n* ------------------------------------------------------------------- *\n* -- >  Test again if this command is being run APF Authorized   < -- *\n* ------------------------------------------------------------------- *\nAUTHTEST DS    0H                  Don't let the system get a S047.\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* ------------------------------------------------------------------- *\n*     Replace the number here,   Get TCASUMAX field again, this time  *\n*       in Key 0.                 to replace it with the new number.  *\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT.\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCASP\n         USING TCAST,R3\n         MVC   NEWNTEST,NEWNMBIN        Copy binary number for testing\n         CLC   NEWNTEST,=X'0000000A'    Bigger than 10?\n         BH    TOOBIG                   Yes. Entered number is too big\n         CLC   NEWNTEST,=X'00000001'    Smaller than 1?\n         BL    TOOSMALL                 Yes. Too small.\n* ------------------------------------------------------------------- *\nKZ       MODESET KEY=ZERO\n         MVC   TCASCHNL(1),NEWNMBIN+3  Replace CHNLEN in Key 0.\nNZ       MODESET KEY=NZERO\n* ------------------------------------------------------------------- *\n* --  Normal Completion  -                                         -- *\n* ------------------------------------------------------------------- *\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Previous value of CHNLEN   :  '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE(30),=C'Value of CHNLEN reset to   :  '\n         MVC   LINE+30(10),NEWNUMB\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         DROP  R3\n* ------------------------------------------------------------------- *\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of CHNLEN    : '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG10),MESSAG10\n         APUT  LINE,L'MESSAG10\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,4\n         B     EOJ                 CONT.\n* ------------------------------------------------------------------- *\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of CHNLEN    :  '\n         MVC   LINE+30(10),LJUSTWRK    Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG11),MESSAG11\n         APUT  LINE,L'MESSAG11\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ                 CONT\n** ---------------------------------------------------------------- **\nTOOBIG   DS    0H                     Number entered was too big.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of CHNLEN    :  '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2F,L'MESSAG2F\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ\n** ---------------------------------------------------------------- **\nTOOSMALL DS    0H                     Number entered was too big.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of CHNLEN    :  '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2G,L'MESSAG2G\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of CHNLEN    :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n*        APUT  LINE,47\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTNUMER DS    0H                     Parameter not numeric.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of CHNLEN    :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   MESSPARM,NEWNUMB       Stuff entered parm into message.\n         APUT  MESSAG2B,MESSAG2L\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      S U B R O U T I N E S                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTITLSTMT DS    0H\n         APUT  MESSAGET,L'MESSAGET    Full title and messages.\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSAGEV,L'MESSAGEV\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLJUST    DS    0H                    Left-justify the display number.\n         STM   R4,R6,SAVER4T6        Save work registers.\n         LA    R4,RJUSTWRK           Point to right-justified number.\n         LA    R5,LJUSTWRK           Point to left-justification area.\n         LA    R6,10                 10 characters only.\nLJUSTLUP DS    0H                    loop.....\n         CLI   0(R4),X'F0'           Is this character smaller than 0?\n         BL    LJUSTBMP              No good. Bump past it.\n         CLI   0(R4),X'F9'           Is this character larger than 9?\n         BH    LJUSTBMP              No good. Bump past it.\n         MVC   0(1,R5),0(R4)         Significant. Move it to left-just.\n         LA    R5,1(,R5)             Bump left-just character.\nLJUSTBMP DS    0H\n         LA    R4,1(,R4)             Bump right-just char in any case.\nLJUSTCYC BCT   R6,LJUSTLUP           Loop up to BCT times. (10).\nLJUSTEND DS    0H                    end of loop.....\n         LM    R4,R6,SAVER4T6        Restore work registers.\n         BR    R9                    Return to caller.\nRJUSTWRK DC    CL10' '               Right-justified display number.\nLJUSTWRK DC    CL10' '               Left-justified display number.\nLJUSSTOR DC    CL10' '               Store current number of users.\nSAVER4T6 DS    3F                    Save area for work registers.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                '   BLANKS\nMESSAGED DC    C'--------------------------------------'\nMESSAGET DC    C'CHNLEN - VER. 1.2 - &SYSDATE - &SYSTIME   '\nMESSAGEU DC    C' Change the CHNLEN number in the IKTTCAST '\nMESSAGEV DC    C' control block.                             '\nMESSAG10 DC    C'To change CHNLEN, enter a numeric parameter. '\nMESSAG11 DC    C'This program was not invoked as a TSO command.'\nMESSAG2B DC    C'Parameter '\nMESSPARM DC    C'          '\nMESSAG2E DC    C'had non-numeric characters.  '\nMESSAG2L EQU   *-MESSAG2B\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG2F DC    C'Number entered was greater than 10.'\nMESSAG2G DC    C'Number entered was smaller than 1.'\nMASK10   DC    XL10'40202020202020202120'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D                  Save Area\nCVDWORK  DS    D                   Work area for CVD instruction\nSAVE1401 DC    5F'0'               TESTAUTH save area for registers\nSAVER5A  DS    F\nBINUSERS DS    F                   Number of current users in Binary\nNEWNMBIN DS    F                   New number to put in CVTBCLMT\nNEWNTEST DS    F                   Test binary number not too large\nDECOLDNM DS    PL8                 Packed version\nDECUSRNM DS    PL8                 Packed version\nNUMFLAG  DC    X'00'               Flag, X'01' if not numeric\nNUMCOUTL DC    X'00'               Store Length of parameter here\nNEWNUMB  DC    C'          '       Store Parm number here\n         DS    0F                  Align on fullword\nLINEB    DS    C                   LINE-1 (primed with blank)\nLINE     DS    CL137               Print line for most purposes\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of Data Area\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKTTCAST\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNLEN$": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\"\\x01\\x055O\\x01\\x19\\x19\\x7f\\x159\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-16T15:39:22", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(CHNLEN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(1)\n ENTRY   CHNLEN\n NAME    CHNLEN(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CINMX": {"ttr": 3082, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00Q\\x01\\x055O\\x01\\x06\\x01/\\x08D\\x04$\\x01\\x87\\x00\\x00\\xd7\\xf3\\xf9\\xf0@@@@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2006-01-12T08:44:51", "lines": 1060, "newlines": 391, "modlines": 0, "user": "P390"}, "text": "CINMX    TITLE 'CINMX - CHANGE INMXPARM VALUES IN STORAGE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized.                          *\n*                                                                     *\n*         Syntax:   CINMX nnnnnnnnnn     (Changes the OUTLIM value)   *\n*                   or                                                *\n*                   CINMX W nnnnnnnnnn   (Changes WARN threshold)     *\n*                   or                                                *\n*                   CINMX I nnnnnnnnnn   (Changes WARN interval)      *\n*                                                                     *\n*                   Numeric value nnnnnnnnnnn limited to 10 digits.   *\n*                                                                     *\n*       Function:   To change the value of the TRANSREC OUTLIM        *\n*                   values in the INMXPARM control block.  This       *\n*                   is the value which limits the number of           *\n*                   records allowed to be created by one execution    *\n*                   of the TRANSMIT (XMIT) TSO command.  And also     *\n*                   the two TRANSREC WARNing values can be changed.   *\n*                                                                     *\n*          Author:  Sam Golob               Version:   1.2            *\n*                                                                     *\n*            Date:  Dec 20, 05                                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2005/12/20 - 1.0 - Initial version - Tested with TSO/E Version   *\n*                       3.                                            *\n*                                                                     *\n*    2005/12/25 - 1.1 - Compensate for INMXPARM layout in previous    *\n*                       level of TSO/E.  OS/390 1.3 and earlier.      *\n*                       Numbers:  Warn1, Warn2, Outlim were 4 bytes   *\n*                       earlier.  System level was determined (of     *\n*                       necessity) from the location of the IKJTSOxx  *\n*                       name in the TPVT.  The INMXPARM didn't seem   *\n*                       to have a surefire telltale indicator of the  *\n*                       earlier version.  See OLDFLAG in the code.    *\n*                                                                     *\n*    2006/01/01 - 1.2 - Allow change for TRANSREC warning values.     *\n*                       W will change the warning threshold.          *\n*                       I will change the warning interval.           *\n*                       e.g.   CINMX W 200000                         *\n*                              CINMX I 100000                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         L     R4,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nCINMX    CSECT\nCINMX    AMODE 31\nCINMX    RMODE 24\n         USING CINMX,R12,R10\n         B     BEGINN-*(,R15)           Eyecatcher\n         DC    CL15'CINMX VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15                  Set up base registers.\n         LA    R10,4095(,R12)\n         LA    R10,1(,R10)\n         LR    R11,R1                   Preserve CPPL pointer.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* -----------------------\n         MVC   OUTLMBIN,=F'0'      Initialize constants in the\n         MVC   INMXADDR,=F'0'        data area\n         MVC   OUTLIMN,BLANKS      Initialize area to blanks\n         MVC   PAD01,BLANKS        Initialize pad area to blanks\n         MVI   LINE-1,C' '         Initialize blank line minus one.\n         MVI   OLDFLAG,X'00'       Assume new system unless indicated\n         MVI   FUNCFLAG,X'00'      Assume we're changing OUTLIM\n         MVC   MESSDIAG,BLANKS\n* -----------------------\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ4                GET OUT.  NOT TSO.\n         USING CPPL,R11\n         L     R0,CPPLUPT          Copy CPPL fields for possible\n         ST    R0,SAVEUPT            later use, if needed.\n         L     R0,CPPLPSCB\n         ST    R0,SAVEPSCB\n         L     R0,CPPLECT\n         ST    R0,SAVEECT\n         LA    R6,0\n         DROP  R11\n         USING PSCB,R2\nCHEKAUTH DS    0H\n         B     CONT0               Bypass authorization check\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes.  Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No.  Get out.\nCONT0    DS    0H\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* -- >\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R6,X'4C'(,R2)       Point to TPVT\n         L     R2,X'2C'(,R6)       Point to INMXPARM control block\n* ------\n*    There doesn't seem to be a way to tell from an old INMXPARM\n*    control block itself, that it is the old version.  So we use\n*    the position of the active PARMLIB member name in the TPVT.\n* ------\n         CLC   =C'IKJ',7(R6)       Parmlib member name in old position?\n         BNE   NEWSYSTM            No. It's a new TSO/E version\n         OI    OLDFLAG,X'01'       Yes. Flag that the system is old.\nNEWSYSTM DS    0H\n         LTR   R11,R11             Any CPPL?\n         BZ    EOJ8                No. Get out.\n         L     R1,0(,R11)          Point to Command Buffer\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No.  Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear high order 3 bytes.\n         ST    R1,CMBUFAD          Save Command Buffer Address\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of CMDBUFR header\n         ST    R5,CMBUFEND         Store away the number of bytes left\n*                                  in the command buffer.\n         BC    8,EOJC              Zero, Message\n         BC    5,EOJC              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,10               Load register for BCT loop.\n         ST    R1,CHARSTRT         Store address away for safekeeping\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of new number.\n         LA    R8,0                Initialize character count\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    AFTFIRST            Yes, we are at the end of the number\n         LA    R7,1(,R7)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   AFTFIRST            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nAFTFIRST DS    0H\n         MVC   OUTLIMN(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for execute.\n         L     R1,CHARSTRT         Reload R1 to be sure it's correct.\n         EX    R8,MOVOUTL          Move entered parameter to program.\n         ST    R8,SAVER8           Save\n         ST    R6,SAVER6             the\n         ST    R1,SAVER1A              registers\n* ---- >\nSEEIFPRM DS    0H                  Check if a command is here\n         OI    OUTLIMN,X'40'       Won't affect numbers\n         CLI   OUTLIMN,C'W'        Is it an order to change Warning?\n         BE    WARNCHG             Yes. Branch.\n         CLI   OUTLIMN,C'I'        Is it an order to change Interval?\n         BE    INTVCHG             Yes. Branch.\nSEEIFEND DS    0H                  R1 and R8 have been necessarily\n* ---- >                             altered.\n         L     R6,SAVER6           Restore only R6.\n         MVC   OUTLIMO,OUTLIMN     Make a copy to preserve before trans\n         EX    R8,TRNOUTL          Translate all non-numbers to blanks\n         LA    R8,1(,R8)           Bump register back to where it was\n         STC   R8,NUMCOUTL         Save new OUTLIM number's length\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         LR    R7,R8               Save count in another register\n         ST    R7,NUMVSTRT         And put it away permanently too\n         ST    R9,SAVER9           Sock away register value for safety\n         BAL   R9,VERIFNUM         Verify if the parm is numeric\n         L     R9,SAVER9           Restore the register after the BAL\n         BCTR  R8,0                One less for EXECUTE.\n         EX    R8,PACK             Convert to packed.\n         CVB   R0,WORK             Convert to binary.\n         ST    R0,OUTLMBIN         And store the number in OUTLMBIN.\n         B     PASTCONV            Jump past constants\n         DROP  R2\n*\nPACK     PACK  WORK,0(0,R1)        << EXECUTED >>\nWORK     DC    D'0'                      Doubleword for CVB instruction\nOLDPATT  DC    X'40202020202020202120'   Pattern for old OUTLIM value\n*\nPASTCONV DS    0H\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R6,X'4C'(,R2)       Point to TPVT\n         L     R2,X'2C'(,R6)       Point to INMXPARM control block\n* ---\n         BAL   R9,PGMTITLE         Display program name on the tube\n         MVI   LINE-1,X'40'        Ensure blank\n         MVC   LINE,LINE-1         Blank entire output line\n         MVC   LINE(42),=C'Output Limit for XMIT command is reset to '\n         MVC   LINE+42(10),OUTLIMN Move in new OUTLIM value to display\n         APUT  LINE,60             And display it on the tube.\n* ---\n         ST    R2,INMXADDR            Save INMXPARM address\n         CLC   0(8,R2),=C'INMXPARM'   Is the INMXPARM header there?\n         BNE   EOJ                    No. We've made a mistake.\n         ST    R9,SAVER9A\n         BAL   R9,GETSAVLM              Get previous values.\n         L     R9,SAVER9A\n         ST    R9,SAVER9A\n         BAL   R9,GETDSPNO              Display previous numeric value\n         L     R9,SAVER9A\n* -- >      Key Zero ---- Here's where we change the stuff.\nKZ       MODESET KEY=ZERO\n         L     R3,INMXADDR\n         USING XPRM,R3\n         TM    FUNCFLAG,X'03'         Are we changing OUTLIM?\n         BZ    ZAPOSTRT               All flags off. Go do OUTLIM.\n         TM    FUNCFLAG,X'01'         Are we changing warn threshold?\n         BO    ZAPWSTRT               Yes. Go do that.\n         TM    FUNCFLAG,X'02'         Are we changing warn interval?\n         BO    ZAPISTRT               Yes. Go do that.\n* -     Block of code to change the OUTLIM. Total output limit.\nZAPOSTRT DS    0H                     We change the OUTLIM in this code\n         TM    OLDFLAG,X'01'          Old system, change 4 bytes before\n         BO    ZAPOLOC\n         MVC   XPRM_LIM,OUTLMBIN      In Key 0, substitute new value.\n         B     ZAPEND                 We did it, get out.\nZAPOLOC  DS    0H                     Do the change in the old place.\n         MVC   XPRM_LIM-4(4),OUTLMBIN   Old system, 4 bytes before\n         B     ZAPEND                 We did it, get out.\nZAPOEND  DS    0H\n* -         Block of code to change the warn threshold\nZAPWSTRT DS    0H                     Change the Warn Threshold here.\n         TM    OLDFLAG,X'01'          Old system, change 4 bytes before\n         BO    ZAPWLOC\n         MVC   XPRM_WARN1,OUTLMBIN    In Key 0, substitute new value.\n         B     ZAPEND                 We did it, get out.\nZAPWLOC  DS    0H                     Do the change in the old place.\n         MVC   XPRM_WARN1-4(4),OUTLMBIN In Key 0, substitute new value.\n         B     ZAPEND                 We did it, get out.\nZAPWEND  DS    0H\n* -         Block of code to change the warn interval\nZAPISTRT DS    0H                     Change the Warn Interval here.\n         TM    OLDFLAG,X'01'          Old system, change 4 bytes before\n         BO    ZAPILOC\n         MVC   XPRM_WARN2,OUTLMBIN    In Key 0, substitute new value.\n         B     ZAPEND                 We did it, get out.\nZAPILOC  DS    0H                     Do the change in the old place.\n         MVC   XPRM_WARN2-4(4),OUTLMBIN In Key 0, substitute new value.\n         B     ZAPEND                 We did it, get out.\nZAPIEND  DS    0H\nZAPEND   DS    0H                     Return to normalcy.\n* -\n         DROP  R3\nNZ       MODESET KEY=NZERO\n* -- >      Back to ordinary life ----\n         ST    R9,SAVER9A             Save BAL register\n         BAL   R9,CHANGED             Tell em we changed the values.\n         L     R9,SAVER9A             Restor BAL register\nEOJ0     XR    R15,R15                Return code = 0\nEOJ      DS    0H                     End of job.\n         LR    R1,R13                 Get ready to free our savearea\n         L     R13,4(,R13)            Get caller's savearea back\n         ST    R15,16(,R13)           Put RC into passed save area\n         L     R14,12(,R13)           Get return address\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)         Get caller's other registers\n         BR    R14                    And go back to caller\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,PGMTITLE         Display program title in all cases\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAG13       Show Return Code 4\n         APUT  LINE,L'MESSAG13\n         L     R15,FULLFOUR        Move in Return Code\n         B     EOJ                 Now end the program\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,PGMTITLE         Display program title in all cases\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAG14       Show Return Code 8\n         APUT  LINE,L'MESSAG14\n         L     R15,FULLEIGT        Move in Return Code\n         B     EOJ                 Now end the program\n** ---------------------------------------------------------------- **\nEOJC     DS    0H                  What if there was no parameter....\n         BAL   R9,PGMTITLE         First display the program title.\n         ST    R9,SAVER9A\n         BAL   R9,PLEASED          Tell em to enter a numeric value\n         L     R9,SAVER9A\n         ST    R9,SAVER9A\n         BAL   R9,FOREXMD          Say we didn't change anything.\n         L     R9,SAVER9A\n*                                  Then get the old value so they\n*                                  know the kind of number that\n*                                  should be there.\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT\n         L     R2,X'2C'(,R2)       Point to INMXPARM control block\n* ---\n         ST    R2,INMXADDR            Save INMXPARM address\n         CLC   0(8,R2),=C'INMXPARM'   Is the INMXPARM header there?\n         BNE   EOJ                    No. We've made a mistake.\n         ST    R9,SAVER9A\n         BAL   R9,GETSAVLM            Get previous values.\n         L     R9,SAVER9A\n         ST    R9,SAVER9A\n         BAL   R9,GETDSPNO            Display previous numeric value.\n         L     R9,SAVER9A\n         ST    R9,SAVER9A\n         BAL   R9,NOCHGED             Say we didn't change anything.\n         L     R9,SAVER9A\n         L     R15,FULLFOUR           Load Return Code.\n         B     EOJ                    End the program.\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         B     EOJ\n** ---------------------------------------------------------------- **\nFULLZERO DC    F'0'\nFULLFOUR DC    F'4'\nFULLEIGT DC    F'8'\nSAVE1401 DC    5F'0'                  More for safety\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVOUTL  MVC   OUTLIMN(*-*),0(R1)     EXECUTED\nTRNOUTL  TR    OUTLIMN(*-*),TRTBL0    EXECUTED\n** ---------------------------------------------------------------- **\nWARNCHG  DS    0H                     Process the W and I parameters\n         OI    FUNCFLAG,X'01'         Tell the program W was issued.\n         B     WARNLUP0               Start looking for the number.\nINTVCHG  DS    0H\n         OI    FUNCFLAG,X'02'         Tell the program I was issued.\n         B     WARNLUP0               Start looking for the number.\nWARNLUP0 DS    0H\n         L     R1,CHARSTRT            Load initial position in cmdbuff\nWARNLOOP DS    0H\n         LA    R1,1(,R1)              Boost position of current char.\n         BCTR  R5,0                   Lessen what's left in cmd buff.\nWARNSETP DS    0H\n         CLI   0(R1),X'40'            Is the current char a blank?\n         BNE   WARNLUP1               Nope. We can check if numeric.\n         CR    R8,R5                  End of command buffer ?\n         BNL   EOJC                   Yes. Tell em nothing was entered\n         B     WARNLOOP               Check the next char in cmd buff.\nWARNLUP1 DS    0H\n* - - - - - - - -  Diagnostic Print  - - - - - - - - - - - - - - - - *\n*        STM   R15,R2,SAVEAPUT        Diagnostic. Display whatever R1\n*        HEX   MESSDIAG,20,0(R1)       is pointing to.\n*        APUT  MESSDIAG,L'MESSDIAG\n*        LM    R15,R2,SAVEAPUT\n* - - - - - - - -  Diagnostic Print  - - - - - - - - - - - - - - - - *\n         LR    R7,R1                  Use R7 to keep track of position.\n         LA    R7,0(,R7)              Point to current char in cmdbuff.\n         LA    R8,0                   Start counting nonblank chars.\n         LA    R6,10                  Check for 10 character parameter.\nCUTIDLEX CLI   0(R7),X'40'            Is this char a blank?\n         BE    AFTNEXST               If so, it's the end of the parm\n         LA    R7,1(,R7)              Boost up and try the next char.\n         LA    R8,1(,R8)              And count how many chars there.\n         CR    R8,R5                  End of command buffer yet?\n         BE    AFTNEXST               Yes. Stop before blanks or 10.\n         BH    EOJC                   Nothing entered? Say so.\n         BCT   R6,CUTIDLEX            Loop until 10 or end of cmd buff.\nAFTNEXST DS    0H\n         MVC   OUTLIMN(10),BLANKS     Blank entire field\n         BCTR  R8,0                   One less for EXECUTE.\n         EX    R8,MOVOUTL             Only move in significant chars.\nWARNLUPE DS    0H\n         B     SEEIFEND               Continue processing the number.\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n*            S U B R O U T I N E S                *\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV4HEX  DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nVERIFNUM DS    0H                  Verify that parameter was numeric\n         L     R7,NUMVSTRT         Count of number of characters\n         MVC   OUTLIMS,OUTLIMN     Copy translated parm to work area\n         LA    R4,OUTLIMS          And point to it.\nVERFLOOP DS    0H                  Check one character at a time\n         CLI   0(R4),X'40'         Is it blank - i.e. not numeric?\n         BE    VERFFAIL            Yes. It's before the end, so bad.\n         LA    R4,1(,R4)           Bump to next character for test\n         BCT   R7,VERFLOOP         BCT for length of parm\n         B     VERFGOOD            All characters have passed. Verified\nVERFFAIL DS    0H\n         APUT  MESSAGET,L'MESSAGET    Title message\n         APUT  MESSAGEU,L'MESSAGEU    Underlines\n* -      *** TEST CODE FOR TPUTTING DIAGNOSTICS ***\n         ST    R1,SAVER1              Save R1 before APUT\n         MVI   LINE-1,X'40'           Ensure blank before LINE\n         MVC   LINE,LINE-1            Blank entire line\n         MVC   LINE(35),=C'Value entered for the number was:  ' Ms body\n         MVC   LINE+35(10),OUTLIMO    Original parm before verification\n         APUT  LINE,45                Put out the error message\n         L     R1,SAVER1              Restore R1 after APUT\n* -\n         APUT  MESSAGE1,L'MESSAGE1\n* ------------------------ >       Display old OUTLIM value.....\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT\n         L     R2,X'2C'(,R2)       Point to INMXPARM control block\n* ---\n         ST    R2,INMXADDR            Save INMXPARM address\n         CLC   0(8,R2),=C'INMXPARM'   Is the INMXPARM header there?\n         BNE   EOJ                    No. We've made a mistake.\n*\n         ST    R9,SAVER9A\n         BAL   R9,GETSAVLM            Get previous values.\n         L     R9,SAVER9A\n*\n         ST    R9,SAVER9A\n         BAL   R9,GETDSPNO            Get previous numeric value.\n         L     R9,SAVER9A\n*\n         ST    R9,SAVER9A\n         BAL   R9,NOCHGED             Say we didn't change anything.\n         L     R9,SAVER9A\n* ------------------------ >\n         B     EOJ\nVERFGOOD DS    0H                     Verify worked, go straight here.\nVERFEND  DS    0H                     End, go back to caller.\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNOCHGED  DS    0H                     \"Value not changed\" message.\n         TM    FUNCFLAG,X'03'\n         BZ    NOCHGEDO\n         TM    FUNCFLAG,X'01'\n         BO    NOCHGEDW\n         TM    FUNCFLAG,X'02'\n         BO    NOCHGEDI\nNOCHGEDW DS    0H\n         APUT  MESSAG2A,L'MESSAG2A    Tell em we didn't change it.\n         B     NOCHGEND\nNOCHGEDI DS    0H\n         APUT  MESSAG2B,L'MESSAG2B    Tell em we didn't change it.\n         B     NOCHGEND\nNOCHGEDO DS    0H\n         APUT  MESSAGE2,L'MESSAGE2    Tell em we didn't change it.\nNOCHGEND DS    0H\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPLEASED  DS    0H                    Please supply a numeric parameter.\n         TM    FUNCFLAG,X'03'\n         BZ    PLEASEDO\n         TM    FUNCFLAG,X'01'\n         BO    PLEASEDW\n         TM    FUNCFLAG,X'02'\n         BO    PLEASEDI\nPLEASEDW DS    0H\n         APUT  MESSG11A,L'MESSG11A    Ask for a numeric operand.\n         B     PLEASEND\nPLEASEDI DS    0H\n         APUT  MESSG11B,L'MESSG11B    Ask for a numeric operand.\n         B     PLEASEND\nPLEASEDO DS    0H\n         APUT  MESSAG11,L'MESSAG11    Ask for a numeric operand.\nPLEASEND DS    0H\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHANGED  DS    0H                     The \"value was changed\" message.\n         TM    FUNCFLAG,X'03'\n         BZ    CHANGEDO\n         TM    FUNCFLAG,X'01'\n         BO    CHANGEDW\n         TM    FUNCFLAG,X'02'\n         BO    CHANGEDI\nCHANGEDW DS    0H\n         APUT  MESSAG3A,L'MESSAG3A    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDI DS    0H\n         APUT  MESSAG3B,L'MESSAG3B    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDO DS    0H\n         APUT  MESSAGE3,L'MESSAGE3    Tell em we changed the value.\nCHANGEND DS    0H\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFOREXMD  DS    0H                     Give an example to do it right.\n         TM    FUNCFLAG,X'03'\n         BZ    FOREXMDO\n         TM    FUNCFLAG,X'01'\n         BO    FOREXMDW\n         TM    FUNCFLAG,X'02'\n         BO    FOREXMDI\nFOREXMDW DS    0H\n         APUT  MESSG12A,L'MESSG12A    Warn threshold example......\n         B     FOREXMND\nFOREXMDI DS    0H\n         APUT  MESSG12B,L'MESSG12B    Warn interval example.......\n         B     FOREXMND\nFOREXMDO DS    0H\n         APUT  MESSAG12,L'MESSAG12    Output limit example........\nFOREXMND DS    0H\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\n************************************************************\nPGMTITLE DS    0H                     Display program name\n         MVC   LINE,LINE-1            Blank line\n         MVC   LINE,MESSAGET          Move title line in\n         APUT  LINE,L'MESSAGET        And put out to tube\n         MVC   LINE,LINE-1            Blank line again\n         MVC   LINE,MESSAGEU          Move underlines in\n         APUT  LINE,L'MESSAGEU        And put them out also\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETSAVLM DS    0H             Get previous values of what needs change.\n         L     R3,INMXADDR            Yes. Load R3 and go further.\n         USING XPRM,R3\n         TM    FUNCFLAG,X'03'         No function turned on, OUTLIM\n         BZ    GETSAVOL\n         TM    FUNCFLAG,X'01'         X'01' - must be Warn 1\n         BO    GETSAVST\n         TM    FUNCFLAG,X'02'         X'02' - must be Warn 2\n         BO    GETSAVWI\n* -- >\nGETSAVST DS    0H\n         TM    OLDFLAG,X'01'\n         BO    GETSAVSY\n         MVC   SAVLMBIN,XPRM_WARN1    Get previous value of Warn 1\n         B     GETSAVEN\nGETSAVSY DS    0H\n         MVC   SAVLMBIN,XPRM_WARN1-4  Get previous value of Warn 1\n         B     GETSAVEN\n* -- >\nGETSAVWI DS    0H\n         TM    OLDFLAG,X'01'\n         BO    GETSAVWY\n         MVC   SAVLMBIN,XPRM_WARN2    Get previous value of Warn 2\n         B     GETSAVEN\nGETSAVWY DS    0H\n         MVC   SAVLMBIN,XPRM_WARN2-4  Get previous value of Warn 2\n         B     GETSAVEN\n* -- >\nGETSAVOL DS    0H\n         TM    OLDFLAG,X'01'\n         BO    GETSAVOY\n         MVC   SAVLMBIN,XPRM_LIM      Get previous value of OUTLIM\n         B     GETSAVEN\nGETSAVOY DS    0H\n         MVC   SAVLMBIN,XPRM_LIM-4    Get previous value of OUTLIM\n* -- >\nGETSAVEN DS    0H\n         BR    R9                     Return to caller\n         DROP  R3\nGETSAVNO DC    F'0'\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETDSPNO DS    0H                     Display \"previous\" numeric value.\n         L     R5,SAVLMBIN            Load a register with saved number\n         CVD   R5,CVDAREA             Convert it to packed.\n         OI    CVDAREA+7,X'0F'        Fix the sign of the packed number\n         MVC   OUTLIMPR(10),OLDPATT   Move in the pattern for EDIT.\n         ED    OUTLIMPR(10),CVDAREA+3   EDIT to cut out leading zeros.\n         MVC   LINE,LINE-1              Clear output line.\n         TM    FUNCFLAG,X'03'         Test for OUTLIM change\n         BZ    GETDSPNE               Display appropriate message.\n         TM    FUNCFLAG,X'01'         Test for warn threshold change\n         BO    GETDSPNW               Display appropriate message.\n         TM    FUNCFLAG,X'02'         Test for warn interval change\n         BO    GETDSPNI               Display appropriate message.\nGETDSPNW DS    0H\n         MVC   LINE,=CL23'Old Warn Threshold  :  '  Move in msg body.\n         B     GETDSPNX\nGETDSPNI DS    0H\n         MVC   LINE,=CL23'Old Warn Interval   :  '  Move in msg body.\n         B     GETDSPNX\nGETDSPNE DS    0H\n         MVC   LINE,=CL23'Old OUTLIM value is :  '  Move in msg body.\nGETDSPNX DS    0H\n         MVC   OUTLIMFL(3),BLANKS       Blank out the padding bytes\n         MVC   LINE+23(10),OUTLIMPR   Now move in the old OUTLIM value.\n         MVC   LINE+33(2),BLANKS      Ensure no garbage after message.\n         APUT  LINE,33                And display the old OUTLIM.\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                                            '\nMESSAGET DC    C'CINMX Command - Reset XMIT OUTPUT LIMIT in INMXPARM  '\nMESSAGEU DC    C'----- -------   ----- ---- ------ ----- -- --------  '\nMESSAGE1 DC    C'Parameter entered was not numeric.'\nMESSAGE2 DC    C'Transrec OUTLIM value was not changed. '\nMESSAG2A DC    C'Transrec WARN threshold was not changed.'\nMESSAG2B DC    C'Transrec WARN interval was not changed.'\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAGE3 DC    C'Transrec OUTLIM value has been changed to the new valu+\n               e.'\nMESSAG3A DC    C'Transrec WARN threshold has been changed to the new va+\n               lue.'\nMESSAG3B DC    C'Transrec WARN interval has been changed to the new val+\n               ue.'\nMESSAG11 DC    C'Please supply a numeric parameter for XMIT OUTLIMIT.'\nMESSG11A DC    C'Please supply a numeric parameter for XMIT Warn Thresh-\n               old.'\nMESSG11B DC    C'Please supply a numeric parameter for XMIT Warn Interv-\n               al.'\nMESSAG12 DC    C'For example:  CINMX 5000000'\nMESSG12A DC    C'For example:  CINMX W 100000'\nMESSG12B DC    C'For example:  CINMX I 50000'\nMESSAG13 DC    C'Return Code = 4 '\nMESSAG14 DC    C'Return Code = 8 '\nMESSAG15 DC    C'Return Code = 0 '\nMESSDIAG DC    C'                                            '\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCVDAREA  DS    D                   For CVD instruction\nSAVEAPUT DS    2D\nSAVER1   DS    F                   Save R1 here\nSAVER1A  DS    F                   Save R1 here\nSAVER6   DS    F                   Save R6 here\nSAVER8   DS    F                   Save R8 here\nSAVER9   DS    F                   Save R9 here\nSAVER9A  DS    F                   Save R9 here\nCMBUFEND DS    F                   Number of bytes to end of cmd buff\nOUTLMBIN DS    F                   Binary new OUTLIM value\nSAVLMBIN DS    F                   Binary of previous OUTLIM value\nINMXADDR DS    F                   Address of INMXPARM control block\nCMBUFAD  DS    F                   Command Buffer address\nCHARSTRT DS    F                   Address of first parm character\nNUMVSTRT DC    X'00'               Character count of first parm\nNUMCOUTL DC    X'00'               Entered first parm length\nPAD01    DS    CL4                 Filler\nFUNCFLAG DS    X                   Which number to change?\n*              X'00'               Change the OUTLIM value\n*              X'01'               Change the warning threshold\n*              X'02'               Change the interval value\nOLDFLAG  DS    X                   Old system detected if X'01'\nPAD02    DS    CL4                 Filler\nOUTLIMFX DS    CL3                 Filler\nOUTLIMPR DC    CL10' '             Previous value, in display format\nOUTLIMFL DS    CL3                 Filler\nOUTLIMO  DC    CL10' '             Before Translation\nOUTLIMN  DC    CL10' '             Original OUTLIM character\nOUTLIMS  DC    CL10' '             SAVE PARM OUTLIM HERE\n         DS    CL72                PADDING\n         DS    0F                  ALIGN ON FULLWORD\nSAVEUPT  DS    F                   SAVE for possible command use\nSAVEPSCB DS    F                   SAVE for possible command use\nSAVEECT  DS    F                   SAVE for possible command use\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137               Output line area\nLINET    EQU   LINE+7              Indented line\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of GETMAINed Data Area\nCINMX    CSECT\nTRTBL0   DS    0D                                                        05491\n         DC    XL16'40404040404040404040404040404040'                    05492\n         DC    XL16'40404040404040404040404040404040'                    05493\n         DC    XL16'40404040404040404040404040404040'                    05494\n         DC    XL16'40404040404040404040404040404040'                    05495\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                    05507\n         IKJXPRM\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n* -\n* -      *** TEST CODE FOR TPUTTING DIAGNOSTICS ***\n*        ST    R1,SAVER1\n*        MVI   LINE-1,X'40'\n*        MVC   LINE,LINE-1\n*        HEX   LINE,10,OUTLIMN\n*        APUT  LINE,21\n*        L     R1,SAVER1\n* -\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CINMX$": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00T\\x01\\x055O\\x01\\x06\\x00\\x1f#\\x06\\x00\\x1e\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2006-01-01T23:06:54", "lines": 30, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.R16.HLASM\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R16.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R16.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.B.ASM\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(CINMX)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB471731\n SETCODE AC(1)\n ENTRY   CINMX\n NAME    CINMX(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CINMX@": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00R\\x01\\x054o\\x01\\x12!\\x8f\\x11\\x02\\x00=\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2005-12-12T00:00:00", "modifydate": "2012-08-05T11:02:52", "lines": 61, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n\n Change the in-storage values for the TSO TRANSMIT (XMIT) command.\n\n  The CINMX TSO command is an APF authorized TSO command to\n    change the value of the XMIT OUTLIM number or the XMIT\n    warning threshold number, or the XMIT warning interval\n    number.\n\n    If only a number is entered after CINMX, then changes\n    will be done to the OUTLIM value of the XMIT command.\n\n    Changes are done directly (in Key 0) to the INMXPARM control\n    block in common storage, and are valid until the next PARMLIB\n    UPDATE(xx), SET IKJTSO=xx, or IPL.  The values entered apply\n    to the entire LPAR, and all the users of that MVS instance\n    (so be careful).\n\n    The number entered is tested to see if it is numeric.  If\n    not, an error message is issued.  However......\n\n    An exception to this will happen if the first character of\n    the operand is a W or an I.  In that case, the number\n    afterward will be treated as the number to change the XMIT\n    Warning Threshold or Warning Interval (respectively).  A\n    space does not have to follow this W or I (but it can).  If\n    a number immediately follows the W or I, its entire value\n    will be recognized, and it will be validated as numeric in\n    its entirety.\n\n)X SYNTAX  -\n    CINMX   nnnnnnnn     (changes OUTLIM value to this number)\n      or\n    CINMX W nnnnnnnn     (changes Warn Threshold to this number)\n      or\n    CINMX I nnnnnnnn     (changes Warn Interval to this number)\n\n  REQUIRED - nnnnnnnn    (a numeric value, up to 10 digits)\n  DEFAULT  - NONE\n  ALIAS    -\n  NOTE     - The CINMX command is supported for previous releases\n             of TSO/E, and has been tested on MVS releases back to\n             MVS/ESA 5.2.2 and forward to z/OS 1.13.\n\n)O OPERANDS -\n))nnnnnnn    -  A numeric value alone, will cause the update of\n                the OUTLIM value of the XMIT (TRANSMIT) command,\n                to the value specified.  The old value will be\n                displayed for your reference (especially if you\n                want to set it back later).\n\n))W nnnnnnn  -  A letter W followed by a numeric value, will\n                cause the update of the Warn Threshold value\n                for the XMIT command.  The old value will be\n                displayed for your reference.\n\n))I nnnnnnn  -  A letter I followed by a numeric value, will\n                cause the update of the Warn Interval value\n                for the XMIT command.  The old value will be\n                displayed for your reference.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CINMXBAT": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00@\\x01\\x055_\\x01\\x055_ 1\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2005-12-21T00:00:00", "modifydate": "2005-12-21T20:31:40", "lines": 10, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBT  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD *\nCINMX 8000000\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLDACEE": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01J\\x00\\t\\x01\\x01\\x05O\\x01\\x11(/\\x10\\x11\\x03B\\x00\\x97\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.74", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2011-10-09T10:11:09", "lines": 834, "newlines": 151, "modlines": 0, "user": "SBGOLOB"}, "text": "CLDACEE  TITLE 'CLDACEE - DUMP CONTENTS OF THE ACEE - CALLABLE SERVICE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A CALLABLE     *\n*                   SERVICE.                                          *\n*                                                                     *\n*         SYNTAX:   R1 points to ACEE                                 *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF ACEE FIELDS AND HEX DUMP         *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nCLDACEE  CSECT\nCLDACEE  AMODE 31\nCLDACEE  RMODE 24\n         USING CLDACEE,R12,R11\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'CLDACEE   VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LR    R3,R1\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         ST    R3,ACEEPTR          PRESERVE ACEE POINTER.\n         SPACE 1\nINITCON  DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\nPREP     DS    0H\n         L     R3,ACEEPTR          POINT TO ACEE\n         USING ACEE,R3\nDUMPACE  DS    0H\n         BAL   R9,HEADERS          PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME         SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG          FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP          HEX DUMP ACEE IN TWO FORMATS\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE ADDRESS:   '\n         HEX   LINE+20,4,ACEEPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+10(10),1(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+10(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,21(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R3,ACEEPTR\n*\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(7),X'15'(R3)\n         HEX   LINE+40,1,X'14'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R3)\n         HEX   LINE+40,1,X'1D'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),X'2C'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R3)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R3)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R3,ACEEPTR\n         ST    R3,SAVER3A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R3,SAVER3A\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nFLG1TBL  DS    0F\n         DC    X'80',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'GROUP-UID ',C'ONLYUID   '\n         DC    X'40',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'AUTHCLIENT',C'          '\n         DC    X'08',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER3A  DS    F\nSAVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nACEEPTR  DS    F\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         IHAACEE\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CLDACEE$": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00Q\\x01\\x00\\x04\\x8f\\x01\\x11(\\x1f!0\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2011-10-08T21:30:51", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(CLDACEE)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   CLDACEE\n SETCODE AC(1)\n NAME    CLDACEE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPFX": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\x14\\x01\\x01\\x05O\\x01\\x17 \\x1f\\x08U\\x00\\xc7\\x00\\x9c\\x00T\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2017-07-20T08:55:14", "lines": 199, "newlines": 156, "modlines": 84, "user": "SBGOLOB"}, "text": "CPFX     TITLE 'CPFX - CHANGE UPT PREFIX WITH 8-CHAR SUPPORT '\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   CPFX PREFIX                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE PREFIX FIELD IN UPT WITH 8-CHAR SUPPORT    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nCPFX     CSECT\nCPFX     RMODE 24\nCPFX     AMODE 31\n         USING CPFX,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'CPFX   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST FOR 8-CHARACTER USERID SUPPORT                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         XC    FLAG1,FLAG1         ZERO FLAG BYTE\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         STORE TSVT ADDRESS\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      GET CONTROL BLOCKS                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR         Save address of PSCB.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* BREAK IN HERE IF 8-CHAR ID SUPPORT IS IN EFFECT.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         L     R4,X'34'(,R2)       LOAD UPT ADDRESS\n         USING UPT,R4\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         TM    FLAG1,X'03'         IS NEW SUPPORT IN EFFECT?\n         BZ    BATCHCNT            NO. DO OLD PROCESSING.\n         C     R8,=F'8'            IS LENGTH 8?\n         BL    BATCHNL7            NO. UPDATE BOTH FIELDS.\n         TM    FLAG1,X'01'         IS SUPPORT OFF?\n         BO    BATCHERR            THEN POST ERROR MESSAGE.\n         MVC   UPTPREFX(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   UPTPREFL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   UPT+X'21'(8),NEWID       PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'             PUT LENGTH IN NEW FIELD\n         B     BATCHCU8                 BYPASS OTHER PROCESSING\nBATCHERR DS    0H                  8-CHARACTER ID BUT NOT SUPPORTED\n         TPUT  MSG0,L'MSG0\n         B     EOJ4\nBATCHNL7 DS    0H\n         MVC   UPT+X'21'(8),NEWID  PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'        PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         B     BATCHCU8            FILL IN OLD FIELDS TOO.\nBATCHCNT DS    0H                  CHECK INVALID LENGTH.\n         C     R8,=F'8'            IS LENGTH 8?\n         BE    BATCHERR            YES. SEND ERROR MESSAGE.\nBATCHOLD DS    0H                  LENGTH NOT 8. FILL OLD FIELDS.\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         MVC   UPT+X'21'(8),ZEROES\n         MVI   UPT+X'29',X'00'\nBATCHCU8 DS    0H\nLINKBC   DS    0H\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CPFX$": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00E\\x01\\x01\\x05O\\x01\\x17 \\x1f#S\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2017-07-20T23:53:45", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=SBGOLOB,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE731(CPFX)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.UID8.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.UID8.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n SETSSI  CB495731\n NAME    CPFX(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DACEE": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01*\\x00Y\\x01\\x01\\x05O\\x01 1\\x0f\\t\\x16\\x04\\xf9\\x00\\x97\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.42", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2020-11-05T09:16:59", "lines": 1273, "newlines": 151, "modlines": 0, "user": "SBGOLOB"}, "text": "DACEE    TITLE 'DACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   DACEE  | (NO PARM)  -  DUMP ONLY ACEE             *\n*                          | T  OR  U   -  DUMP ACEE AND UTOKEN       *\n*                          | X          -  DUMP ACEE AND ACEX         *\n*                          | A          -  DUMP ALL THREE             *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF ACEE FIELDS AND HEX DUMP         *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   SOME UTOKEN DISPLAY SUPPORT ADDED.                *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                                       DISPLAY HEX VALUES\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nDACEE    CSECT\nDACEE    AMODE 31\nDACEE    RMODE 24\n         USING DACEE,R12,R11,R8\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'DACEE   VER 1.4'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R8,4095(,R11)\n         LA    R8,1(,R8)\n         ST    R1,CPPLPTR          PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R3)         POINT TO ASCB.\n         L     R9,4(,R3)           POINT TO TCB.\n         L     R3,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R3)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\nINITCON  DS    0H\n         MVI   LINE-1,X'40'        INITIALIZE OUTPUT LINE\n         MVC   LINE,LINE-1\nGETPARM  DS    0H\n         STM   R1,R3,SAVE1T3       SAVE WORK REGISTERS\n         L     R1,CPPLPTR          RESTORE PARM POINTER\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    GETPARME            B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    GETPARME            B IF NOT.\n         LH    R3,0(,R2)           LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    GETPARME            B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    GETPARME            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         OI    1(R2),C' '          UPPERCASE.\n         ST    R2,SAVER2A          SAVE PARM LOCATION\n         MVC   STORPARM(1),0(R2)   SAVE PARM\n         LM    R1,R3,SAVE1T3       RESTORE WORK REGISTERS\nGETPARME DS    0H                  END OF ROUTINE\n* --- PARMS GOTTEN AT THIS POINT, IF ANY. ----- *\nPREP     DS    0H\n         L     R3,X'6C'(,R10)      POINT TO ASXB\n         L     R3,X'C8'(,R3)       POINT TO ACEE\n         USING ACEE,R7\n         ST    R3,ACEEPTR\n         LA    R3,X'A4'(,R3)       POINT TO UTOKEN ADDRESS\n         L     R3,0(,R3)           POINT TO UTOKEN\n         ST    R3,UTOKPTR          STORE UTOKEN ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'98'(,R3)       POINT TO ACEX ADDRESS\n         L     R3,0(,R3)           POINT TO ACEX\n         ST    R3,ACEXPTR          STORE UTOKEN ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'34'(,R3)       POINT TO TRMP ADDRESS\n         L     R3,0(,R3)           POINT TO TRMP\n         ST    R3,ACETRMP          STORE ACEETRMP ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'64'(,R3)       POINT TO USER NAME STRING ADDRESS\n         L     R3,0(,R3)           POINT TO UNAM\n         ST    R3,ACEUNAM          STORE USER NAME STRING ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'6C'(,R3)       POINT TO CONNECT GRP TABLE ADDRESS\n         L     R3,0(,R3)           POINT TO CONNECT GROUP TABLE\n         ST    R3,ACECGRP          STORE CONNECT GROUP TABLE ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'70'(,R3)       POINT TO GENERIC ANCHOR TABLE\n         L     R3,0(,R3)           POINT TO GENERIC ANCHOR TABLE\n         ST    R3,ACEGATA          STORE GENERIC ANCHOR TABLE ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'74'(,R3)       POINT TO FRACHECK GROUP TABLE\n         L     R3,0(,R3)           POINT TO FRACHECK GROUP TABLE\n         ST    R3,ACEFCGP          STORE FRACHECK GROUP TABLE ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\nDUMPACE  DS    0H\n         BAL   R9,HEADERS          PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME         SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG          FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP          HEX DUMP ACEE IN TWO FORMATS\n* ------------------------------------------------------------------- *\n*                                  PARMS TO DISPLAY EXTRA STUFF       *\n* ------------------------------------------------------------------- *\n         CLI   STORPARM,C'A'       DISPLAY ACEE+TOKEN+ACEX\n         BE    UTDO\n         CLI   STORPARM,C'T'       DISPLAY ACEE AND TOKEN\n         BE    UTDO\n         CLI   STORPARM,C'U'       DISPLAY ACEE AND TOKEN\n         BE    UTDO\n         B     UTDONT              DON'T DISPLAY UTOKEN\nUTDO     DS    0H\n         BAL   R9,UTOKNAME         UTOKEN USERID, GROUP, POE\n         BAL   R9,UTOKTYP          UTOKEN SESSION TYPE DISPLAY\n         BAL   R9,UTOKFLG          UTOKEN FLAGS\n         BAL   R9,UTOKDMP          HEX DUMP UTOKEN IN TWO FORMATS\nUTDONT   DS    0H\n         CLI   STORPARM,C'A'       DISPLAY ACEE+TOKEN+ACEX\n         BE    UXDO\n         CLI   STORPARM,C'X'       DISPLAY ACEE AND ACEX\n         BE    UXDO\n         B     UXDONT              DON'T DISPLAY ACEX\nUXDO     BAL   R9,ACEXDMP          HEX DUMP ACEX IN TWO FORMATS\nUXDONT   DS    0H\n* ------------------------------------------------------------------- *\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'ACEE  ADDRESS   :'\n         HEX   LINE+23,4,ACEEPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'TOKEN ADDRESS   :'\n         HEX   LINE+23,4,UTOKPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'ACEX  ADDRESS   :'\n         HEX   LINE+23,4,ACEXPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'TERMINAL POINTER:'\n         HEX   LINE+23,4,ACETRMP\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'USER NAME STRING:'\n         HEX   LINE+23,4,ACEUNAM\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'GROUP CONNECT TB:'\n         HEX   LINE+23,4,ACECGRP\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'GATA ADDRESS    :'\n         HEX   LINE+23,4,ACEGATA\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'FAST GROUP CHECK:'\n         HEX   LINE+23,4,ACEFCGP\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(27),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),21(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,31(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R3,ACEEPTR\n*\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(8),X'15'(R3)\n         HEX   LINE+40,1,X'14'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R3)\n         HEX   LINE+40,1,X'1D'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),X'2C'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R3)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R3)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'USRSTRN),USRSTRN       User Name\n         L     R3,ACEUNAM\n         CLC   1(10,R3),=X'FFFFFFFFFFFFFFFFFFFF'\n         BE    BLNKUNAM\n         MVC   LINE+20(20),1(R3)\n         B     BLNKEND\nBLNKUNAM DS    0H\n         MVI   LINE+19,X'40'\n         MVC   LINE+20(20),LINE+19\n         MVC   LINE+20(18),=C'(Default Hivalues)'\nBLNKEND  DS    0H\n         APUT  LINE,55\n*\n         L     R3,ACEEPTR\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R3,ACEEPTR\n         ST    R3,SAVER3A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R3,SAVER3A\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUTOKNAME DS    0H                    UTOKEN HEADER\n         ST    R9,SAVER9A\n         MVC   LINE,LINE-1\n         MVC   LINE+2(27),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(27),=C'   UTOKEN ID VALUES        '\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(27),DASHES\n         APUT  LINE,62\n         L     R3,UTOKPTR\n*\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'UTOKUSR),UTOKUSR\n         MVC   LINE+20(8),X'40'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'UTOKGRP),UTOKGRP\n         MVC   LINE+20(8),X'48'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Port of Entry\n         MVC   LINE+2(L'UTOKPOE),UTOKPOE\n         MVC   LINE+20(8),X'30'(R3)\n         APUT  LINE,55\n*\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUTOKTYP  DS    0H                    Display session type in UTOKEN\n         ST    R9,SAVER9A\n         STM   R4,R7,SAVER4T7\n         L     R4,UTOKPTR            Load UTOKEN pointer\n         LA    R5,UTYPTBL            Load address of table\n         LA    R6,UTYPTBLL           Load entry length\n         LA    R7,27                 Limit the loop\nUTYPLOOP DS    0H\n         CLI   0(R5),X'FF'           End of table?\n         BE    UTYPEXIT              Out\n         CLC   0(1,R5),3(R4)         Compare existing session type\n         BE    UTYPFND               Match?\n         LA    R5,0(R6,R5)           No. Try next entry.\n         BCT   R7,UTYPLOOP           Limit number of iterations\nUTYPFND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'UTOKSESS),UTOKSESS\n         MVC   LINE+20(26),1(R5)\n         APUT  LINE,55\nUTYPEXIT DS    0H\n         LM    R4,R7,SAVER4T7\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUTOKFLG  DS    0H                    Display contents of UTOK flags\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(27),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(27),=C'   UTOKEN FLAG LOCATIONS   '\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(27),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),UTOKL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(27),DASHES\n         APUT  LINE,62\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(14),=C'(UTOKEN FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,UTOKPTR\n         MVC   FLFLG(1),X'02'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,UTK1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,UTOKPTR\n         MVC   FLFLG(1),X'04'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,UTK2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,UTOKPTR\n         MVC   FLFLG(1),X'06'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,UTK3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUTOKDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9G\n         L     R3,UTOKPTR\n         ST    R3,SAVER3E\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(17),=C'(UTOKEN CONTENTS)'\n         MVC   LINE+30(10),=C'Address:  '\n         HEX   LINE+40,4,UTOKPTR\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         LA    R6,5\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUPT DS    0H\n         L     R3,SAVER3E\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'TOKEN'\n         HEX   LINE+9,2,STORCNT\n         MVI   LINE+8,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3E\n         BCT   R6,LINELUPT\n         L     R9,SAVER9G\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEXDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9H\n         L     R3,ACEXPTR\n         ST    R3,SAVER3F\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEX CONTENTS)'\n         MVC   LINE+30(10),=C'Address:  '\n         HEX   LINE+40,4,ACEXPTR\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         LA    R6,9\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUPX DS    0H\n         L     R3,SAVER3F\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEX '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3F\n         BCT   R6,LINELUPX\n         L     R9,SAVER9H\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nUSRSTRN  DC    C'ACEE USER NAME :                         '\nUTOKPOE  DC    C'PORT OF ENTRY  :                         '\nUTOKUSR  DC    C'OWNER USERID   :                         '\nUTOKGRP  DC    C'OWNER GROUPID  :                         '\nUTOKSESS DC    C'SESSION TYPE   :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nUTOKL1   DC    C'FLAG 1 - +02     FLAG2 - +04   FLAG3 - +06'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'  ACEESPEC',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'  ACEEADSP',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'  ACEEOPER',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'  ACEEAUDT',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'  ACEELOGU',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'  ACEEROA ',C'RONLY AUDT',C'NORONLAUDT'\n         DC    X'02',C'  ACEEPRIV',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'  ACEERACF',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'  ACEEALTR',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'  ACEECNTL',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'  ACEEUPDT',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'  ACEEREAD',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  ACEENONE',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'  ACEEGRPA',C'GROUP+UID ',C'ONLYUID   '\n         DC    X'40',C'  ACEERASP',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'  ACEECLNT',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'  ACEEACLT',C'AUTHCLIENT',C'          '\n         DC    X'08',C'  ACEETSKP',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'  ACEEIUSP',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'  ACEEDUID',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'  ACEENPWR',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'  RESERVED',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'  RESERVED',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'  ACEEUATH',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  ACEEDASD',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'  ACEETAPE',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'  ACEETERM',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'  ACEEMODE',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'  ACEEVMSK',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'  ACEED4OK',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'  ACEEXNVR',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'  ACEESTOK',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'  ACEENSTE',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'  ACEEDALY',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'  ACEERAUI',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'  ACEERUAA',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'  ACEERUAV',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nUTK1TBL  DS    0F\n         DC    X'80',C'  TOKENCR ',C'ENCRYPTED ',C'NOT ENCRYP'\n         DC    X'40',C'  RESERVED',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'  TOKLT19 ',C'PRE-RACF19',C'RACF 1.9  '\n         DC    X'10',C'  TOKVXPRP',C'VERIFYX   ',C'NOVERIFYX '\n         DC    X'08',C'  TOKUNUSR',C'NJE UNKNWN',C'NOT-NJEUNK'\n         DC    X'04',C'  TOKLOGU ',C'LOG USER  ',C'NOLOG USER'\n         DC    X'02',C'  TOKRSPEC',C'RACFSPECAL',C'NOT SPECAL'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nUTK2TBL  DS    0F\n         DC    X'80',C'  TOKDFLT ',C'DEFLT TOKN',C'NODFLTOKN '\n         DC    X'40',C'  TOKUDUS ',C'UNDEFINED ',C'NOUNDEFIND'\n         DC    X'20',C'  RESERVED',C'HEX20     ',C'NOHEX20   '\n         DC    X'10',C'  TOKERR  ',C'TOKN ERROR',C'NOTOKENERR'\n         DC    X'08',C'  TOKTRST ',C'TRUSTED   ',C'NOTRUSTED '\n         DC    X'04',C'  TOKSUS  ',C'SURROGATE ',C'NOSURROGAT'\n         DC    X'02',C'  TOKREMOT',C'REMOTEJOB ',C'NOREMOTEJB'\n         DC    X'01',C'  TOKPRIV ',C'PRIVILEGED',C'NOPRIVILEG'\n         SPACE 3\nUTK3TBL  DS    0F\n         DC    X'80',C'  TOKDGRP ',C'DFLT GROUP',C'NODFLGROUP'\n         DC    X'40',C'  TOKDSEC ',C'DFLT SECLB',C'NODFLSECLB'\n         DC    X'20',C'  TOKNETF ',C'NETWF NAME',C'NONTWKNAME'\n         DC    X'10',C'  TOKIPV  ',C'IP VALUE  ',C'NO IPVALUE'\n         DC    X'08',C'  TOKWDWNP',C'WRDOWNMLS ',C'NOWRTDNMLS'\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  RESERVED',C'NEX01     ',C'NOHEX01   '\n         SPACE 3\nUTYPTBL  DS    0F             UTOKEN SESSION TYPE TABLE\n         DC    X'01',CL26'SYSTEM ADDRESS SPACE      '\nUTYPTBLL EQU   *-UTYPTBL\n         DC    X'02',CL26'COMMAND                   '\n         DC    X'03',CL26'CONSOLE OPERATOR          '\n         DC    X'04',CL26'STARTED PROCEDURE         '\n         DC    X'05',CL26'MOUNT                     '\n         DC    X'06',CL26'TSO LOGON                 '\n         DC    X'07',CL26'INTERNAL READER BATCH JOB '\n         DC    X'08',CL26'EXECUTION BATCH MONITOR   '\n         DC    X'09',CL26'RJE OPERATOR              '\n         DC    X'0A',CL26'NJE OPERATOR              '\n         DC    X'0B',CL26'VERIFYX UNKNOWN USER TOKEN'\n         DC    X'0C',CL26'EXTERNAL READER BATCH JOB '\n         DC    X'0D',CL26'RJE BATCH JOB             '\n         DC    X'0E',CL26'NJE BATCH JOB             '\n         DC    X'0F',CL26'NJE SYSOUT                '\n         DC    X'10',CL26'EXTERNAL XBM              '\n         DC    X'11',CL26'RJE XBM                   '\n         DC    X'12',CL26'NJE XBM                   '\n         DC    X'13',CL26'APPCTP                    '\n         DC    X'14',CL26'OMVSSRV                   '\n         DC    X'15',CL26'IPLOOKup value            '\n         DC    X'16',CL26'RESERVED FOR EXPANSION    '\n         DC    X'17',CL26'RESERVED FOR EXPANSION    '\n         DC    X'18',CL26'RESERVED FOR EXPANSION    '\n         DC    X'19',CL26'RESERVED FOR EXPANSION    '\n         DC    X'1A',CL26'RESERVED FOR EXPANSION    '\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF'\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER2A  DS    F\nSAVER3A  DS    F\nSAVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER3E  DS    F\nSAVER3F  DS    F\nSAVER4A  DS    F\nSAVER5A  DS    F\nSAVER6A  DS    F\nSAVER4T7 DS    4F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nSAVER9G  DS    F\nSAVER9H  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nACEEPTR  DS    F\nACEXPTR  DS    F\nUTOKPTR  DS    F\nACETRMP  DS    F\nACEUNAM  DS    F\nACECGRP  DS    F\nACEGATA  DS    F\nACEFCGP  DS    F\nSAVE1T3  DS    3F\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nSTORPARM DS    C\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n\n\n\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         IHAACEE\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DACEE$": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00 \\x01\\x00\\x04\\x8f\\x01 \\x16\\x7f\\x10H\\x00\\x1d\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2020-06-15T10:48:20", "lines": 29, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE731(DACEE)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   DACEE\n SETSS1  CB500731\n SETCODE AC(0)\n NAME    DACEE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DACEEO": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00H\\x01\\x01\\x05O\\x01\\x11$O\\x10R\\x03M\\x00\\x97\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2011-09-01T10:52:48", "lines": 845, "newlines": 151, "modlines": 0, "user": "SBGOLOB"}, "text": "DACEE    TITLE 'DACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   DACEE                                             *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF ACEE FIELDS AND HEX DUMP         *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nDACEE    CSECT\nDACEE    AMODE 31\nDACEE    RMODE 24\n         USING DACEE,R12,R11\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'DACEE   VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         ST    R1,CPPLPTR          PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R3)         POINT TO ASCB.\n         L     R9,4(,R3)           POINT TO TCB.\n         L     R3,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R3)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\nINITCON  DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\nPREP     DS    0H\n         L     R3,X'6C'(,R10)      POINT TO ASXB\n         L     R3,X'C8'(,R3)       POINT TO ACEE\n         USING ACEE,R7\n         ST    R3,ACEEPTR\nDUMPACE  DS    0H\n         BAL   R9,HEADERS          PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME         SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG          FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP          HEX DUMP ACEE IN TWO FORMATS\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE ADDRESS:   '\n         HEX   LINE+20,4,ACEEPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+10(10),1(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+10(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,21(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R3,ACEEPTR\n*\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(7),X'15'(R3)\n         HEX   LINE+40,1,X'14'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R3)\n         HEX   LINE+40,1,X'1D'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),X'2C'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R3)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R3)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R3,ACEEPTR\n         ST    R3,SAVER3A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R3,SAVER3A\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'GROUP-UID ',C'ONLYUID   '\n         DC    X'40',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'AUTHCLIENT',C'          '\n         DC    X'08',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER3A  DS    F\nSAVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nACEEPTR  DS    F\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         IHAACEE\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DACEE1": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x18\\x01\\x01\\x05O\\x01\\x131O\\x13G\\x03O\\x00\\x97\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2013-11-10T13:47:18", "lines": 847, "newlines": 151, "modlines": 0, "user": "SBGOLOB"}, "text": "DACEE    TITLE 'DACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   DACEE                                             *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF ACEE FIELDS AND HEX DUMP         *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nDACEE    CSECT\nDACEE    AMODE 31\nDACEE    RMODE 24\n         USING DACEE,R12,R11\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'DACEE   VER 1.3'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         ST    R1,CPPLPTR          PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R3)         POINT TO ASCB.\n         L     R9,4(,R3)           POINT TO TCB.\n         L     R3,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R3)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\nINITCON  DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\nPREP     DS    0H\n         L     R3,X'6C'(,R10)      POINT TO ASXB\n         L     R3,X'C8'(,R3)       POINT TO ACEE\n         USING ACEE,R7\n         ST    R3,ACEEPTR\nDUMPACE  DS    0H\n         BAL   R9,HEADERS          PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME         SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG          FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP          HEX DUMP ACEE IN TWO FORMATS\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE ADDRESS:   '\n         HEX   LINE+20,4,ACEEPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),21(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,31(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R3,ACEEPTR\n*\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(8),X'15'(R3)\n         HEX   LINE+40,1,X'14'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R3)\n         HEX   LINE+40,1,X'1D'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),X'2C'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R3)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R3)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R3,ACEEPTR\n         ST    R3,SAVER3A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R3,SAVER3A\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'  ACEESPEC',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'  ACEEADSP',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'  ACEEOPER',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'  ACEEAUDT',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'  ACEELOGU',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  ACEEPRIV',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'  ACEERACF',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'  ACEEALTR',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'  ACEECNTL',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'  ACEEUPDT',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'  ACEEREAD',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  ACEENONE',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'  ACEEGRPA',C'GROUP+UID ',C'ONLYUID   '\n         DC    X'40',C'  ACEERASP',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'  ACEECLNT',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'  ACEEACLT',C'AUTHCLIENT',C'          '\n         DC    X'08',C'  ACEETSKP',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'  ACEEIUSP',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'  ACEEDUID',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'  ACEENPWR',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'  RESERVED',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'  RESERVED',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'  ACEEUATH',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  ACEEDASD',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'  ACEETAPE',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'  ACEETERM',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'  ACEEMODE',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'  ACEEVMSK',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'  ACEED4OK',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'  ACEEXNVR',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'  ACEESTOK',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'  ACEENSTE',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'  ACEEDALY',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'  ACEERAUI',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'  ACEERUAA',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'  ACEERUAV',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER3A  DS    F\nSAVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nACEEPTR  DS    F\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         IHAACEE\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DACEE2": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x07\\x01\\x01\\x05O\\x01 \\x08o\\x19R\\x03\\xfb\\x00\\x97\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2020-03-26T19:52:07", "lines": 1019, "newlines": 151, "modlines": 0, "user": "ASMJCL"}, "text": "DACEE    TITLE 'DACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   DACEE  | (NO PARM)  -  DUMP ONLY ACEE             *\n*                          | T  OR  U   -  DUMP ACEE AND UTOKEN       *\n*                          | X          -  DUMP ACEE AND ACEX         *\n*                          | A          -  DUMP ALL THREE             *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF ACEE FIELDS AND HEX DUMP         *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                                       DISPLAY HEX VALUES\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nDACEE    CSECT\nDACEE    AMODE 31\nDACEE    RMODE 24\n         USING DACEE,R12,R11\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'DACEE   VER 1.4'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         ST    R1,CPPLPTR          PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R3)         POINT TO ASCB.\n         L     R9,4(,R3)           POINT TO TCB.\n         L     R3,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R3)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\nINITCON  DS    0H\n         MVI   LINE-1,X'40'        INITIALIZE OUTPUT LINE\n         MVC   LINE,LINE-1\nGETPARM  DS    0H\n         STM   R1,R3,SAVE1T3       SAVE WORK REGISTERS\n         L     R1,CPPLPTR          RESTORE PARM POINTER\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    GETPARME            B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    GETPARME            B IF NOT.\n         LH    R3,0(,R2)           LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    GETPARME            B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    GETPARME            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         OI    1(R2),C' '          UPPERCASE.\n         ST    R2,SAVER2A          SAVE PARM LOCATION\n         MVC   STORPARM(1),0(R2)   SAVE PARM\n         LM    R1,R3,SAVE1T3       RESTORE WORK REGISTERS\nGETPARME DS    0H                  END OF ROUTINE\n* --- PARMS GOTTEN AT THIS POINT, IF ANY. ----- *\nPREP     DS    0H\n         L     R3,X'6C'(,R10)      POINT TO ASXB\n         L     R3,X'C8'(,R3)       POINT TO ACEE\n         USING ACEE,R7\n         ST    R3,ACEEPTR\n         LA    R3,X'A4'(,R3)       POINT TO UTOKEN ADDRESS\n         L     R3,0(,R3)           POINT TO UTOKEN\n         ST    R3,UTOKPTR          STORE UTOKEN ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'98'(,R3)       POINT TO ACEX ADDRESS\n         L     R3,0(,R3)           POINT TO ACEX\n         ST    R3,ACEXPTR          STORE UTOKEN ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\nDUMPACE  DS    0H\n         BAL   R9,HEADERS          PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME         SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG          FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP          HEX DUMP ACEE IN TWO FORMATS\n* ------------------------------------------------------------------- *\n*                                  PARMS TO DISPLAY EXTRA STUFF       *\n* ------------------------------------------------------------------- *\n         CLI   STORPARM,C'A'       DISPLAY ACEE+TOKEN+ACEX\n         BE    UTDO\n         CLI   STORPARM,C'T'       DISPLAY ACEE AND TOKEN\n         BE    UTDO\n         CLI   STORPARM,C'U'       DISPLAY ACEE AND TOKEN\n         BE    UTDO\n         B     UTDONT              DON'T DISPLAY UTOKEN\nUTDO     BAL   R9,UTOKDMP          HEX DUMP UTOKEN IN TWO FORMATS\nUTDONT   DS    0H\n         CLI   STORPARM,C'A'       DISPLAY ACEE+TOKEN+ACEX\n         BE    UXDO\n         CLI   STORPARM,C'X'       DISPLAY ACEE AND ACEX\n         BE    UXDO\n         B     UXDONT              DON'T DISPLAY ACEX\nUXDO     BAL   R9,ACEXDMP          HEX DUMP ACEX IN TWO FORMATS\nUXDONT   DS    0H\n* ------------------------------------------------------------------- *\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE  ADDRESS:  '\n         HEX   LINE+20,4,ACEEPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'TOKEN ADDRESS:  '\n         HEX   LINE+20,4,UTOKPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEX  ADDRESS:  '\n         HEX   LINE+20,4,ACEXPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),21(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,31(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R3,ACEEPTR\n*\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(8),X'15'(R3)\n         HEX   LINE+40,1,X'14'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R3)\n         HEX   LINE+40,1,X'1D'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),X'2C'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R3)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R3)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R3,ACEEPTR\n         ST    R3,SAVER3A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R3,SAVER3A\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUTOKDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9G\n         L     R3,UTOKPTR\n         ST    R3,SAVER3E\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(17),=C'(UTOKEN CONTENTS)'\n         MVC   LINE+30(10),=C'Address:  '\n         HEX   LINE+40,4,UTOKPTR\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         LA    R6,5\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUPT DS    0H\n         L     R3,SAVER3E\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'TOKEN'\n         HEX   LINE+9,2,STORCNT\n         MVI   LINE+8,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3E\n         BCT   R6,LINELUPT\n         L     R9,SAVER9G\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEXDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9H\n         L     R3,ACEXPTR\n         ST    R3,SAVER3F\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEX CONTENTS)'\n         MVC   LINE+30(10),=C'Address:  '\n         HEX   LINE+40,4,ACEXPTR\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         LA    R6,9\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUPX DS    0H\n         L     R3,SAVER3F\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEX '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3F\n         BCT   R6,LINELUPX\n         L     R9,SAVER9H\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'  ACEESPEC',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'  ACEEADSP',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'  ACEEOPER',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'  ACEEAUDT',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'  ACEELOGU',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  ACEEPRIV',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'  ACEERACF',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'  ACEEALTR',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'  ACEECNTL',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'  ACEEUPDT',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'  ACEEREAD',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  ACEENONE',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'  ACEEGRPA',C'GROUP+UID ',C'ONLYUID   '\n         DC    X'40',C'  ACEERASP',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'  ACEECLNT',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'  ACEEACLT',C'AUTHCLIENT',C'          '\n         DC    X'08',C'  ACEETSKP',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'  ACEEIUSP',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'  ACEEDUID',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'  ACEENPWR',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'  RESERVED',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'  RESERVED',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'  ACEEUATH',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  ACEEDASD',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'  ACEETAPE',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'  ACEETERM',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'  ACEEMODE',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'  ACEEVMSK',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'  ACEED4OK',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'  ACEEXNVR',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'  ACEESTOK',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'  ACEENSTE',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'  ACEEDALY',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'  ACEERAUI',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'  ACEERUAA',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'  ACEERUAV',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER2A  DS    F\nSAVER3A  DS    F\nSAVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER3E  DS    F\nSAVER3F  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nSAVER9G  DS    F\nSAVER9H  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nACEEPTR  DS    F\nACEXPTR  DS    F\nUTOKPTR  DS    F\nSAVE1T3  DS    3F\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nSTORPARM DS    C\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         IHAACEE\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DACEE3": {"ttr": 5891, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x06\\x01\\x01\\x05O\\x01 \\x16o\\x19\\x03\\x048\\x00\\x97\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2020-06-14T19:03:06", "lines": 1080, "newlines": 151, "modlines": 0, "user": "SBGOLOB"}, "text": "DACEE    TITLE 'DACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   DACEE  | (NO PARM)  -  DUMP ONLY ACEE             *\n*                          | T  OR  U   -  DUMP ACEE AND UTOKEN       *\n*                          | X          -  DUMP ACEE AND ACEX         *\n*                          | A          -  DUMP ALL THREE             *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF ACEE FIELDS AND HEX DUMP         *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                                       DISPLAY HEX VALUES\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nDACEE    CSECT\nDACEE    AMODE 31\nDACEE    RMODE 24\n         USING DACEE,R12,R11\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'DACEE   VER 1.4'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         ST    R1,CPPLPTR          PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R3)         POINT TO ASCB.\n         L     R9,4(,R3)           POINT TO TCB.\n         L     R3,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R3)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\nINITCON  DS    0H\n         MVI   LINE-1,X'40'        INITIALIZE OUTPUT LINE\n         MVC   LINE,LINE-1\nGETPARM  DS    0H\n         STM   R1,R3,SAVE1T3       SAVE WORK REGISTERS\n         L     R1,CPPLPTR          RESTORE PARM POINTER\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    GETPARME            B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    GETPARME            B IF NOT.\n         LH    R3,0(,R2)           LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    GETPARME            B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    GETPARME            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         OI    1(R2),C' '          UPPERCASE.\n         ST    R2,SAVER2A          SAVE PARM LOCATION\n         MVC   STORPARM(1),0(R2)   SAVE PARM\n         LM    R1,R3,SAVE1T3       RESTORE WORK REGISTERS\nGETPARME DS    0H                  END OF ROUTINE\n* --- PARMS GOTTEN AT THIS POINT, IF ANY. ----- *\nPREP     DS    0H\n         L     R3,X'6C'(,R10)      POINT TO ASXB\n         L     R3,X'C8'(,R3)       POINT TO ACEE\n         USING ACEE,R7\n         ST    R3,ACEEPTR\n         LA    R3,X'A4'(,R3)       POINT TO UTOKEN ADDRESS\n         L     R3,0(,R3)           POINT TO UTOKEN\n         ST    R3,UTOKPTR          STORE UTOKEN ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'98'(,R3)       POINT TO ACEX ADDRESS\n         L     R3,0(,R3)           POINT TO ACEX\n         ST    R3,ACEXPTR          STORE UTOKEN ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'34'(,R3)       POINT TO TRMP ADDRESS\n         L     R3,0(,R3)           POINT TO TRMP\n         ST    R3,ACETRMP          STORE ACEETRMP ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'64'(,R3)       POINT TO USER NAME STRING ADDRESS\n         L     R3,0(,R3)           POINT TO UNAM\n         ST    R3,ACEUNAM          STORE USER NAME STRING ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'6C'(,R3)       POINT TO CONNECT GRP TABLE ADDRESS\n         L     R3,0(,R3)           POINT TO CONNECT GROUP TABLE\n         ST    R3,ACECGRP          STORE CONNECT GROUP TABLE ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'70'(,R3)       POINT TO GENERIC ANCHOR TABLE\n         L     R3,0(,R3)           POINT TO GENERIC ANCHOR TABLE\n         ST    R3,ACEGATA          STORE GENERIC ANCHOR TABLE ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'74'(,R3)       POINT TO FRACHECK GROUP TABLE\n         L     R3,0(,R3)           POINT TO FRACHECK GROUP TABLE\n         ST    R3,ACEFCGP          STORE FRACHECK GROUP TABLE ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\nDUMPACE  DS    0H\n         BAL   R9,HEADERS          PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME         SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG          FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP          HEX DUMP ACEE IN TWO FORMATS\n* ------------------------------------------------------------------- *\n*                                  PARMS TO DISPLAY EXTRA STUFF       *\n* ------------------------------------------------------------------- *\n         CLI   STORPARM,C'A'       DISPLAY ACEE+TOKEN+ACEX\n         BE    UTDO\n         CLI   STORPARM,C'T'       DISPLAY ACEE AND TOKEN\n         BE    UTDO\n         CLI   STORPARM,C'U'       DISPLAY ACEE AND TOKEN\n         BE    UTDO\n         B     UTDONT              DON'T DISPLAY UTOKEN\nUTDO     BAL   R9,UTOKDMP          HEX DUMP UTOKEN IN TWO FORMATS\nUTDONT   DS    0H\n         CLI   STORPARM,C'A'       DISPLAY ACEE+TOKEN+ACEX\n         BE    UXDO\n         CLI   STORPARM,C'X'       DISPLAY ACEE AND ACEX\n         BE    UXDO\n         B     UXDONT              DON'T DISPLAY ACEX\nUXDO     BAL   R9,ACEXDMP          HEX DUMP ACEX IN TWO FORMATS\nUXDONT   DS    0H\n* ------------------------------------------------------------------- *\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'ACEE  ADDRESS   :'\n         HEX   LINE+23,4,ACEEPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'TOKEN ADDRESS   :'\n         HEX   LINE+23,4,UTOKPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'ACEX  ADDRESS   :'\n         HEX   LINE+23,4,ACEXPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'TERMINAL POINTER:'\n         HEX   LINE+23,4,ACETRMP\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'USER NAME STRING:'\n         HEX   LINE+23,4,ACEUNAM\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'GROUP CONNECT TB:'\n         HEX   LINE+23,4,ACECGRP\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'GATA ADDRESS    :'\n         HEX   LINE+23,4,ACEGATA\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(17),=C'FAST GROUP CHECK:'\n         HEX   LINE+23,4,ACEFCGP\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(27),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),21(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,31(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R3,ACEEPTR\n*\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(8),X'15'(R3)\n         HEX   LINE+40,1,X'14'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R3)\n         HEX   LINE+40,1,X'1D'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),X'2C'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R3)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R3)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'USRSTRN),USRSTRN       User Name\n         L     R3,ACEUNAM\n         CLI   1(R3),X'FF'\n         BE    BLNKUNAM\n         MVC   LINE+20(20),1(R3)\n         B     BLNKEND\nBLNKUNAM DS    0H\n         MVI   LINE+19,X'40'\n         MVC   LINE+20(20),LINE+19\nBLNKEND  DS    0H\n         APUT  LINE,55\n*\n         L     R3,ACEEPTR\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R3,ACEEPTR\n         ST    R3,SAVER3A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R3,SAVER3A\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUTOKDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9G\n         L     R3,UTOKPTR\n         ST    R3,SAVER3E\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(17),=C'(UTOKEN CONTENTS)'\n         MVC   LINE+30(10),=C'Address:  '\n         HEX   LINE+40,4,UTOKPTR\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         LA    R6,5\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUPT DS    0H\n         L     R3,SAVER3E\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'TOKEN'\n         HEX   LINE+9,2,STORCNT\n         MVI   LINE+8,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3E\n         BCT   R6,LINELUPT\n         L     R9,SAVER9G\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEXDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9H\n         L     R3,ACEXPTR\n         ST    R3,SAVER3F\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEX CONTENTS)'\n         MVC   LINE+30(10),=C'Address:  '\n         HEX   LINE+40,4,ACEXPTR\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         LA    R6,9\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUPX DS    0H\n         L     R3,SAVER3F\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEX '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3F\n         BCT   R6,LINELUPX\n         L     R9,SAVER9H\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nUSRSTRN  DC    C'ACEE USER NAME :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'  ACEESPEC',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'  ACEEADSP',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'  ACEEOPER',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'  ACEEAUDT',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'  ACEELOGU',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  ACEEPRIV',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'  ACEERACF',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'  ACEEALTR',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'  ACEECNTL',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'  ACEEUPDT',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'  ACEEREAD',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  ACEENONE',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'  ACEEGRPA',C'GROUP+UID ',C'ONLYUID   '\n         DC    X'40',C'  ACEERASP',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'  ACEECLNT',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'  ACEEACLT',C'AUTHCLIENT',C'          '\n         DC    X'08',C'  ACEETSKP',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'  ACEEIUSP',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'  ACEEDUID',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'  ACEENPWR',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'  RESERVED',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'  RESERVED',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'  ACEEUATH',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  ACEEDASD',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'  ACEETAPE',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'  ACEETERM',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'  ACEEMODE',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'  ACEEVMSK',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'  ACEED4OK',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'  ACEEXNVR',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'  ACEESTOK',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'  ACEENSTE',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'  ACEEDALY',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'  ACEERAUI',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'  ACEERUAA',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'  ACEERUAV',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER2A  DS    F\nSAVER3A  DS    F\nSAVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER3E  DS    F\nSAVER3F  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nSAVER9G  DS    F\nSAVER9H  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nACEEPTR  DS    F\nACEXPTR  DS    F\nUTOKPTR  DS    F\nACETRMP  DS    F\nACEUNAM  DS    F\nACECGRP  DS    F\nACEGATA  DS    F\nACEFCGP  DS    F\nSAVE1T3  DS    3F\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nSTORPARM DS    C\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         IHAACEE\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DTEST": {"ttr": 6154, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\x056?\\x01\\x19\\x17_\\x195\\x02\\xdf\\x005\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-12-29T00:00:00", "modifydate": "2019-06-24T19:35:06", "lines": 735, "newlines": 53, "modlines": 0, "user": "SBGOLOB"}, "text": "DTEST    TITLE 'DTEST - DISPLAY TSO TEST FIELDS'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, not APF authorized, because it is        *\n*                   only for the purpose of displaying the            *\n*                   IKJTSOxx PARMLIB member values for the TEST       *\n*                   keyword (if it exists).                           *\n*                                                                     *\n*         Syntax:   DTEST                                             *\n*                                                                     *\n*       Function:   To display values of the TEST IKJTSOxx            *\n*                   PARMLIB settings as they are represented          *\n*                   internally in the TPT, TCT, SCT control           *\n*                   blocks.                                           *\n*                                                                     *\n*          Author:  Sam Golob               Version:   1.1            *\n*                                                                     *\n*            Date:  Aug 07, 2016                                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2016/08/07 - 1.0 - Initial version - Tested with TSO/E Version   *\n*                       4.                                            *\n*                                                                     *\n*    2019/06/24 - 1.1 - Modified to reflect our changed TPT which     *\n*                       is created by the LOADTEST program that       *\n*                       re-loads the TEST parameters from control     *\n*                       cards.  We insert the address of the old      *\n*                       TPT into X'24' (dec 36) off the new TPT       *\n*                       that we construct.  This version of DTEST     *\n*                       will recognize that address, if it is not     *\n*                       zeroes (IBM's TPT).  The presence of this     *\n*                       address allows LOADTEST to regress the TEST   *\n*                       parameters to the previous ones, using        *\n*                       execution JCL, with PARM=R.                   *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Programming Notes:                                                 *\n*                                                                     *\n*    The TEST command information from the IKJTSOxx member of         *\n*    parmlib, is reflected in 3 control blocks:  TPT, TCT, SCT.       *\n*                                                                     *\n*    The TPT is pointed to by the TEST address at x'28' off           *\n*    the beginning of the TPVT.  The TPT points to all the rest       *\n*    of the information, as per the macro description below.          *\n*                                                                     *\n*                                                                     *\n*             MACRO                                                   *\n*             IKJTPT                                                  *\n*    TPT      DSECT                         TPT Control block         *\n*    TPT_ID   DS    C'TPT '                 Block id                  *\n*    TPT_LENGTH DS H                        Total length of c.b.      *\n*    TPT_VERS DS    C                       TPT Version               *\n*             DS    C                       Reserved X'00'            *\n*             DS    F                       zeros                     *\n*    TPT_TCT_ENTRY DS A                     Address of TSOCMD c.b.    *\n*    TPT_TCT_LENGTH DS F                    Length of TSOCMD c.b.     *\n*    *                                      Length - 4 / 8 = #        *\n*    TPT_SCT_ENTRY DS A                     Address of SUBCMD c.b.    *\n*    TPT_SCT_LENGTH DS F                    Length of SUBCMD c.b.     *\n*    *                                      Length - 4 / 16 = #       *\n*             DS    3F                                                *\n*    TCT_TEST DSECT                                                   *\n*    TCT_ID   DS    C'TCT '                 Block id                  *\n*    TCT_TSOCMD DS  CL8                     A TSOCMD                  *\n*    TCT_ENTRY_END DS 0C                                              *\n*    *                                      The last entry is x'40'   *\n*    SCT_TEST DSECT                                                   *\n*    SCT_ID   DS    C'SCT '                 Block id                  *\n*    SCT_SUBCMD DS  CL8                     A SUBCMD                  *\n*    SCT_PGM  DS    CL8                     A SUBCMD module name      *\n*    *                                      The last entry is x'40'   *\n*    SCT_ENTRY_END DS 0C                                              *\n*             MEND                                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         L     R4,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nDTEST    CSECT\nDTEST    AMODE 31\nDTEST    RMODE 24\n         B     BEGINN-*(,R15)           Eyecatcher\n         DC    CL15'DTEST VER 1.1 -'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         STM   R14,R12,12(R13)\n         LR    R5,R1                    SAVE CPPL POINTER\n         USING DTEST,R12,R11,R10\n         LR    R12,R15                  Set up base registers.\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LA    R1,SAVEAREA              NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)               FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)               BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1                   NEW SAVE AREA ADDRESS\n         SPACE 1\n* -----------------------\n         LR    R1,R5                    RESTORE CPPL POINTER\n         ST    R1,CPPLSAVE         Store the CPPL pointer into this\n*                                  program, so it doesn't get lost.\n* -----------------------\n         MVI   BLANKS-1,X'40'           Initialize blanks.\n         MVC   BLANKS,BLANKS-1\n* -----------------------\nDTITLE   DS    0H\n         APUT  DISPLAYT,L'DISPLAYT      Display report title\n         APUT  DISPLAYU,L'DISPLAYU      Underlines\n*\n* -----------------------     Follow address to Parmlib TEST values\n*\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R6,X'4C'(,R2)       Point to TPVT (Parmlib Vect Tbl)\n         L     R2,X'28'(,R6)       Point to TPT control block of TEST\n* ------\n* ------    GET 'TEST' PARMLIB ADDRESSES AND VALUES FOR REPORTING\n* ------\n         ST    R2,TPTADDR          Store away TPT address\n         CLC   =C'TPT',0(R2)       Is TPT eyecatcher in proper place?\n         BNE   NOTTPT              No. We aren't looking at TPT.\n*                                  Get all TPT fields........\n         LH    R3,4(,R2)           Get TPT size\n         STH   R3,TPTSIZE\n         MVC   TPTVERS(1),6(R2)    TPT version number\n         L     R3,12(,R2)\n         ST    R3,TCTADDR          TCT address\n         L     R3,16(,R2)\n         ST    R3,TCTSIZE          TCT size\n         LR    R4,R3               Copy size value\n         S     R4,=F'4'            Subtract 4\n         SRL   R4,3                Divide by 8 (size of TCT entry)\n         BCTR  R4,0                Subtract 1 because of blank entry\n         ST    R4,TCTENTR          Save # of TCT entries - actual\n         L     R3,20(,R2)\n         ST    R3,SCTADDR          SCT address\n         L     R3,24(,R2)\n         ST    R3,SCTSIZE          SCT size\n         LR    R4,R3               Copy size value\n         S     R4,=F'4'            Subtract 4\n         SRL   R4,4                Divide by 16 (size of SCT entry)\n         BCTR  R4,0                Subtract 1 because of blank entry\n         ST    R4,SCTENTR          Save # of SCT entries - actual\n         L     R3,36(,R2)\n         ST    R3,OLDTPT\n         B     CONTTPT             Continue with Control Block Display\nNOTTPT   DS    0H\n         MVC   DISPLAY1,BLANKS                Error msg if not TPT.\n         MVC   DISPLAY1(L'TPTBAD),TPTBAD\n         APUT  DISPLAY1,L'DISPLAY1\n         B     RETURN\nCONTTPT  DS    0H                         Now display all TPT fields.\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TPT ADDRESS'    Display entry title\n         HEX   DISPLAY1+16,4,TPTADDR           Display address\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TPT SIZE   '    Display entry title\n         HEX   DISPLAY1+16,2,TPTSIZE           Only a halfword field\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TPT VERSION'    Display entry title\n         HEX   DISPLAY1+16,1,TPTVERS           Single byte field\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TCT ADDRESS'    Display entry title\n         HEX   DISPLAY1+16,4,TCTADDR           Display address\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TCT SIZE   '    Display entry title\n         HEX   DISPLAY1+16,2,TCTSIZE+2         Cut off 1st 2 bytes\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TCT ENTRIES'    Display entry title\n         HEX   DISPLAY1+16,2,TCTENTR+2         Cut off 1st 2 bytes\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SCT ADDRESS'    Display entry title\n         HEX   DISPLAY1+16,4,SCTADDR           Display address\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SCT SIZE   '    Display entry title\n         HEX   DISPLAY1+16,2,SCTSIZE+2         Cut off 1st 2 bytes\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SCT ENTRIES'    Display entry title\n         HEX   DISPLAY1+16,2,SCTENTR+2         Cut off 1st 2 bytes\n         APUT  DISPLAY1,L'DISPLAY1\n         CLC   OLDTPT,=F'0'\n         BE    NOOLDTPT\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'OLD TPT ADR'    Display entry title\n         HEX   DISPLAY1+16,4,OLDTPT            Display address\n         APUT  DISPLAY1,L'DISPLAY1\nNOOLDTPT DS    0H\nDSPLYTSO DS    0H\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'TSOCMDT),TSOCMDT      Display title\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'PROGRMT),PROGRMT      Display title\n         APUT  DISPLAY1,L'DISPLAY1\nTSOINIT  DS    0H\n         L     R3,TCTADDR                 Set up for TSOCMD display\n         L     R4,TCTSIZE\n         CLC   =C'TCT',0(R3)              Starts with TCT ?\n         BE    TSOSTART                     Yes. Continue.\n         MVC   DISPLAY1,BLANKS              No.  Error.\n         MVC   DISPLAY1(L'TCTBAD),TCTBAD    Send appropriate message\n         APUT  DISPLAY1,L'DISPLAY1\n         B     RETURN                       Go straight out.\nTSOSTART DS    0H\n         LA    R3,4(,R3)                        Point to pgm table\nTSOLOOP  DS    0H\n         CLC   =C'        ',0(R3)               End of table?\n         BE    DSPLYSUB\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1+8(8),0(R3)              Show TSOCMD\n         APUT  DISPLAY1,L'DISPLAY1              Display line\n         LA    R3,8(,R3)                        Next entry\n         B     TSOLOOP\n*                                         PUT IN LENGTH CHECK LATER\nDSPLYSUB DS    0H\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'SUBCMDT),SUBCMDT\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'COMMANT),COMMANT      Display title\n         APUT  DISPLAY1,L'DISPLAY1\nSUBINIT  DS    0H\n         L     R3,SCTADDR                 Set up for SUBCMD display\n         L     R4,SCTSIZE\n         CLC   =C'SCT',0(R3)              Starts with SCT ?\n         BE    SUBSTART                     Yes. Continue.\n         MVC   DISPLAY1,BLANKS              No.  Error.\n         MVC   DISPLAY1(L'SCTBAD),SCTBAD    Send appropriate message\n         APUT  DISPLAY1,L'DISPLAY1\n         B     RETURN                       Go straight out.\nSUBSTART DS    0H\n         LA    R3,4(,R3)                        Point to subcmd table\nSUBLOOP  DS    0H\n         CLC   =C'        ',0(R3)               End of table?\n         BE    RETURN\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1+2(8),0(R3)              Show SUBCMD\n         MVC   DISPLAY1+15(8),8(R3)             Show module name\n         APUT  DISPLAY1,L'DISPLAY1              Display line\n         LA    R3,16(,R3)                       Next entry\n         B     SUBLOOP\n*                                         PUT IN LENGTH CHECK LATER\nRETURN   DS    0H                   Program exit.\n         L     R13,SAVEAREA+4       RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)      RELOAD REGISTERS\n         XR    R15,R15              ZERO RETURN CODE ALWAYS\n         BR    R14                  RETURN TO CALLER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*           D  A  T  A     A  R  E  A  S                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nSAVEAREA DS    9D\nCVDAREA  DC    D'0'\n         DC    CL3'   '\nOLDPATT  DC    X'40202020202020202120'   Pattern for old OUTLIM value\n         DC    CL3'   '\nOLDFLAG  DC    X'00'\n         DC    CL3'   '\nBLANKS   DC    CL145' '\nDISPLAY1 DC    CL64'                                              '\nDISPLAYT DC    C'In-Storage PARMLIB IKJTSOxx TEST Parameter Values'\nDISPLAYU DC    C'---------- ------- -------- ---- --------- ------'\nTSOCMDT  DC    C'---- TSOCMD PROGRAMS ----'\nPROGRMT  DC    C'      Program Name       '\nSUBCMDT  DC    C'----   SUBCOMMANDS   ----'\nCOMMANT  DC    C' Subcommand     Module   '\nTPTBAD   DC    C'   TPT not pointed to    '\nTCTBAD   DC    C'   TCT not pointed to    '\nSCTBAD   DC    C'   SCT not pointed to    '\nCPPLSAVE DC    F'0'\nOLDTPT   DC    F'0'\nTPTADDR  DC    F'0'\nTPTSIZE  DC    H'0'\nTPTVERS  DC    X'0'\nTCTADDR  DC    F'0'\nTCTSIZE  DC    F'0'\nTCTENTR  DC    F'0'\nSCTADDR  DC    F'0'\nSCTSIZE  DC    F'0'\nSCTENTR  DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV4HEX  DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Translate Tables -  Relics from a previous program........     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     Remove Unprintables               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRTBLUP  DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     Only accept Numeric               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRTBLN   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                 Only accept Alpha, and Uppercase      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRTBLA   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DTEST$": {"ttr": 6659, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x01\\x055O\\x01\\x19\\x17\\x8f\\x105\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-06-27T10:35:01", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(DTEST)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(0)\n ENTRY   DTEST\n NAME    DTEST(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DVAT": {"ttr": 6661, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x011\\x00(\\x01\\x01\\x05O\\x01\\x18\\x17/\\x168\\x02\\xa6\\x00\\x97\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.49", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2018-06-21T16:38:28", "lines": 678, "newlines": 151, "modlines": 0, "user": "SBGOLOB"}, "text": "DVAT     TITLE 'DVAT - DISPLAY VATLST - VOLUME ATTRIBUTE LIST'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   DVAT                                              *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF VATLST THAT IS IN CORE,          *\n*                     AFTER IPL TIME.  IPL SETTINGS HAVE BEEN         *\n*                     DESTROYED AND OVERLAID BY THIS TIME.            *\n*                                                                     *\n*                   DOES NOT REFLECT CHANGES DUE TO SUBSEQUENT        *\n*                     MOUNT COMMANDS.                                 *\n*                                                                     *\n*                   DOES NOT CHECK AGAINST UCB'S THAT ARE             *\n*                     ACTUALLY MOUNTED.                               *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nDVAT     CSECT\nDVAT     AMODE 31\nDVAT     RMODE 24\n         USING DVAT,R12,R11\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'DVAT   VER 1.0'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         ST    R1,CPPLPTR          PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R3)         POINT TO ASCB.\n         L     R9,4(,R3)           POINT TO TCB.\n         L     R3,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R3)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\nINITCON  DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVI   VATPAREA-1,X'40'\n         MVC   VATPAREA,VATPAREA-1\nPREP     DS    0H                  GET VATDUSE CONTROL BLOCK\n         L     R3,16               CVT\n         L     R3,X'128'(,R3)      POINT TO JESCT\n         L     R3,X'78'(,R3)       POINT TO DACA\n         L     R3,X'0C'(,R3)       POINT TO VATDUSE\n         ST    R3,VATDPTR          STORE ITS ADDR FOR FUTURE USE\nPREP1    DS    0H                  GET VATLST SETTING FROM IPA\n         L     R3,16               CVT\n         L     R3,X'8C'(,R3)       POINT TO ECVT\n         L     R3,X'188'(,R3)      POINT TO IPA\n         LA    R3,X'A88'(,R3)      BUMP TO IPAVAL PDE\n         ST    R3,VATIPAPT         STORE PDE ADDR FOR FUTURE USE\nDUMPACE  DS    0H\n         BAL   R9,HEADERS          PRINT PROGRAM HEADER\n         BAL   R9,VATDVOL          FORMAT ENTRIES IN VATLIST\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVC   LINE,LINE-1\n         MVC   LINE+14(34),=C'DISPLAY INCORE VATLST SETTINGS    '\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+14(30),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'VATDUSE ADDRESS:'\n         HEX   LINE+20,4,VATDPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'DEFAULT SYSUSE :'\n         L     R3,VATDPTR\nTRYPUBL  DS    0H\n         CLI   8(R3),C'0'\n         BNE   TRYSTOR\n         MVC   LINE+20(7),=C'STORAGE'\n         B     PRTIPLU\nTRYSTOR  DS    0H\n         CLI   8(R3),C'1'\n         BNE   TRYPRIV\n         MVC   LINE+20(6),=C'PUBLIC'\n         B     PRTIPLU\nTRYPRIV  DS    0H\n         CLI   8(R3),C'2'\n         BNE   TRYERR\n         MVC   LINE+20(7),=C'PRIVATE'\n         B     PRTIPLU\nTRYERR   DS    0H\n         MVC   LINE+20(7),=C'*ERROR*'\nPRTIPLU  DS    0H\n         APUT  LINE,62\nVATLSIPA DS    0H                  VATLST VALUES CODED IN IEASYS.\n         L     R3,VATIPAPT         LOAD ADDR OF IPAVAL PDE\n         XR    R8,R8               CLEAR WORK REGISTER\n         LH    R8,4(,R3)           LOAD LENGTH OF ENTRY\n         BCTR  R8,0                DECREASE FOR EXECUTE\n         L     R3,0(,R3)           POINT TO ACTUAL VATLST MEM SUFFIXES\n         EX    R8,MOVVPRM          MOVE PARMS TO DISPLAY AREA\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'VATLST FROM IPA:'\n         EX    R8,MOVVLINE         MOVE DISPLAY AREA TO DISPLAY LINE\n         APUT  LINE,72\n         B     HEADEND\nMOVVPRM  MVC   VATPAREA(*-*),0(R3)   * EXECUTED *\nMOVVLINE MVC   LINE+20(*-*),VATPAREA * EXECUTED *\n* ---> TEST CODE\nHEADEND  DS    0H                    Display program header\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nVATDVOL  DS    0H                    Continue header\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(28),DASHES\n         MVC   LINE+31(35),=C'(*PARMLIB  VATLST VOLUME SETTINGS*)'\n         APUT  LINE,68\n         MVC   LINE,LINE-1\n         MVC   LINE+34(28),DASHES\n         APUT  LINE,68\n         MVC   LINE,LINE-1\n*        MVC   LINE+2(28),DASHES\n         MVC   LINE+31(35),=C'( MAY BE OVERRIDDEN BY MOUNT CMDS )'\n         APUT  LINE,68\n         MVC   LINE,LINE-1\n*        MVC   LINE+2(28),DASHES\n         MVC   LINE+31(35),=C'( NOT CHECKED AGAINST ONLINE UCBS )'\n         APUT  LINE,68\n         MVC   LINE,LINE-1\n         MVC   LINE+4(7),=C'VOLMASK'\n         MVC   LINE+14(6),=C'ATTRIB'\n         MVC   LINE+24(6),=C'DEVTYP'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(28),DASHES\n         APUT  LINE,55\n*\n* --\n         L     R3,VATDPTR\n         L     R6,X'20'(,R3)              LOAD BCT REGISTER\n         N     R6,=X'0000FFFF'            NOT TOO LARGE\n         LA    R4,X'2C'(,R3)\n         BAL   R9,VOLLOOP\nVATDEND  DS    0H\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nVOLLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\nPRTVOL   DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+4(6),0(R4)       MOVE IN MASKED VOLSER\nTRYPPRV  DS    0H\n         CLI   7(R4),C'2'            MOUNTED PRIVATE?\n         BNE   TRYPSTO               NO.\n         MVC   LINE+14(7),=C'PRIVATE'\n         B     PRTVOLI\nTRYPSTO  DS    0H\n         CLI   7(R4),C'1'            MOUNTED PUBLIC?\n         BNE   TRYPPUB               NO.\n         MVC   LINE+14(7),=C'PUBLIC '\n         B     PRTVOLI\nTRYPPUB  DS    0H\n         CLI   7(R4),C'0'            MOUNTED STORAGE?\n         BNE   TRYPERR\n         MVC   LINE+14(7),=C'STORAGE'\n         B     PRTVOLI\nTRYPERR  DS    0H\n         MVC   LINE+14(7),=C'*ERROR*'\nPRTVOLI  DS    0H\n         BAL   R9,DISKTYPE\n         APUT  LINE,55\nVOLLBCK  DS    0H\n         LA    R4,16(,R4)\n         BCT   R6,PRTVOL\nFLGLEND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(28),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDISKTYPE DS    0H\n         ST    R9,SAVER9B\n         LA    R7,DEVTABLE\nDISKLOOP DS    0H\n         CLI   0(R7),X'FF'\n         BE    DISKTEXT\n         CLC   0(1,R7),6(R4)\n         BE    DISKSUBT\n         LA    R7,7(,R7)\n         B     DISKLOOP\nDISKSUBT DS    0H\n         MVC   LINE+24(6),1(R7)\nDISKTEXT DS    0H\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDEVTABLE DC    X'00',C'ALL   '\n         DC    X'01',C'*ERR01'\n         DC    X'02',C'*ERR02'\n         DC    X'03',C'*ERR03'\n         DC    X'04',C'9345  '\n         DC    X'05',C'*ERR05'\n         DC    X'06',C'2305-1'\n         DC    X'07',C'2305-2'\n         DC    X'08',C'2314  '\n         DC    X'09',C'3330  '\n         DC    X'0A',C'3340  '\n         DC    X'0B',C'3350  '\n         DC    X'0C',C'3375  '\n         DC    X'0D',C'3330-1'\n         DC    X'0E',C'3380  '\n         DC    X'0F',C'3390  '                                    *\n         DC    X'FF',C'EOTABL'                                    *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\n         LTORG\nCPPLPTR  DC    F'0'\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nSAVER3A  DS    F\nSAVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nVATDPTR  DS    F\nVATIPAPT DS    F\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL6\n         DC    C' '\nVATPAREA DC    CL64' '\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DVAT$": {"ttr": 6917, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00Y\\x01\\x00\\x04\\x8f\\x01\\x135\\x8f\\x153\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2013-12-24T15:33:59", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(DVAT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   DVAT\n SETCODE AC(0)\n NAME    DVAT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EESCB": {"ttr": 6919, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x95\\x17\\x0f\\x01\\x150\\x8f\\x11 \\x03\\xe1\\x00(\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1995-06-19T00:00:00", "modifydate": "2015-11-04T11:20:00", "lines": 993, "newlines": 40, "modlines": 0, "user": "SBGOLOB"}, "text": "*   TSO COMMAND PROCESSOR TO DISPLAY THE IKJEESCB CONTROL BLOCK.\n* ------------------------------------------------------------------ *\n*  This command supports 3 versions of the IKJEESCB control block.   *\n*                                                                    *\n*    Pointers to IKJEESCB control block. TPVT documented privately.  *\n*    This points to TSO individual userlogs and BRODCAST dataset     *\n*      name.                                                         *\n*    Three versions to date (until z/OS 1.6 at least).               *\n*                                                                    *\n*    v1 - ESA 5.2.2  to OS/390 1.3       IKJE1SCB                    *\n*    v2 - OS/390 2.4 to z/OS 1.2         IKJE2SCB                    *\n*    v3 - z/OS 1.3   and above.          IKJEESCB                    *\n*                                                                    *\n*    Control Block Addressability                                    *\n*                                                                    *\n*        L    Rn,X'10'        CVT        CVT      macro              *\n*        L    Rn,X'9C'(,Rn)   TSVT       IKJTSVT  macro              *\n*        L    Rn,X'4C'(,Rn)   TPVT       IKJTPVT  private macro      *\n*        L    Rn,X'20'(,Rn)   EESCB      IKJEESCB macro              *\n*                                                                    *\n*  Needs the EESCB.MODGEN macro library to assemble.                 *\n*                                                                    *\n*  Note:  To remove dependence on the EPUTL routine, replace all     *\n*         invocations of the APUT macro with the TPUT macro.         *\n*                                                                    *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*  Change Log:                                                       *\n*                                                                    *\n*    2015/11/04 - Noticed that CPUID field is 4 bytes. So display    *\n*     SBG         4 bytes instead of 2.                              *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n* ------------------------------------------------------------------ *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX           Save Register 4\n         STM   R15,R1,HEXSAVE       Save Registers 15 thru 1\n         LA    R1,&FROM             Load the \"from\" register\n         LA    R0,&LEN              Load the length\n         LA    R15,&TO              Load the \"to\" register\n         BAL   R4,HEX               Do the display of the hex number\n         L     R4,SAV4HEX           Reload Register 4\n         LM    R15,R1,HEXSAVE       Reload Registers 15 thru 1\n         MEND\n*  ---------------------------------------------------------------  *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n*  ---------------------------------------------------------------  *\n         YREGS\nEESCB    CSECT\nEESCB    AMODE 31\nEESCB    RMODE 24\n         STM   R14,R12,12(R13)      SAVE CALLER'S REGISTERS\n         USING EESCB,R12,R11,R10    SET UP BASE REGISTERS\n         LR    R12,R15              Three bases for room.\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R15,R13              Save caller's save address\n         LA    R13,SAVE             Get our savearea address\n         ST    R15,SAVE+4           Store his savearea into mine + 4\n         ST    R13,8(,R15)          Store mine into his savearea + 8\nRUNCHAIN L     R5,X'10'             CVT\n         L     R5,X'9C'(,R5)        Point to TSVT\n         L     R6,X'4C'(,R5)        Point to TPVT - R6\n         ST    R6,SAVETPVT\n         USING TPVT,R6\n         L     R5,X'20'(,R6)        Point to EESCB - R5\n         ST    R5,SAVEESCB          Store away the IKJEESCB address\n         USING IKJEESCB,R5\nDISPTITL DS    0H                   Display Report Title\n         APUT  TITLIT,L'TITLIT\n         APUT  TITUND,L'TITUND\n         APUT  MESSG001,L'MESSG001  Display Explanation of the Program\n         APUT  MESSG002,L'MESSG002\n         APUT  MESSG003,L'MESSG003\n         APUT  MESSG004,L'MESSG004\n         APUT  MESSG005,L'MESSG005\n         APUT  MESSG05A,L'MESSG05A\n         APUT  MESSG05B,L'MESSG05B\n         APUT  MESSG000,L'MESSG000\n         APUT  MESSG05C,L'MESSG05C\n         APUT  MESSG05D,L'MESSG05D\n         APUT  MESSG05E,L'MESSG05E\n         APUT  MESSG05F,L'MESSG05F\n         APUT  MESSG000,L'MESSG000\n         APUT  MESSG006,L'MESSG006\n         APUT  MESSG000,L'MESSG000\n         APUT  MESSG007,L'MESSG007\n         APUT  MESSG07A,L'MESSG07A\n         APUT  MESSG008,L'MESSG008\n         APUT  MESSG009,L'MESSG009\n         APUT  MESSG010,L'MESSG010\n         APUT  MESSG011,L'MESSG011\n         APUT  MESSG000,L'MESSG000\nDISPLAY3 DS    0H                   Display for EESCB version 3\n         CLI   EESCB_VERSION,X'03'           Is this EESCB version 3\n         BL    D3END                         No. Try version 2.\n         MVC   LITLIT(8),EESCB_IDENTIFIER    Display IKJEESCB header\n         HEX   LITHEX,4,SAVEESCB             Display IKJEESCB address\n         APUT  LITMSG,L'LITMSG\n         HEX   VERVER,1,EESCB_VERSION        Display IKJEESCB version\n         APUT  VERMSG,L'VERMSG      DISPLAY THE MESSAGE ON THE TUBE\n         HEX   FLGFLG,4,EESCB_FLAGS_1        Display EESCB flag bytes\n         APUT  FLGMSG,L'FLGMSG      DISPLAY THE MESSAGE ON THE TUBE\n         BAL   R9,EESFLAGS                   Interpret IKJEESCB flags\n         MVC   PDSPDS(44),TPVTDSNAM          PARMLIB dataset name\n         APUT  PDSMSG,L'PDSMSG\n         MVC   PVLPVL(6),TPVTVOLSER          PARMLIB volser\n         APUT  PVLMSG,L'PVLMSG\n         CLI   TPVT_MEM1,X'C9'          PARMLIB member-old location?\n         BNE   D3MOVM                   No. Move from new location.\n         MVC   PRMPRM(8),TPVT_MEM1      Yes. Use old location,\n         B     D3MOVMB                   and go on to display it.\nD3MOVM   DS    0H\n         MVC   PRMPRM(8),TPVT_MEM       Move mem from new location\nD3MOVMB  DS    0H\n         APUT  PRMMSG,L'PRMMSG          Display PARMLIB member message\n         MVC   PAGPAG(8),TPVTUSERID     Userid if PARMLIB update\n*                                       **IPL** if IKJTSO set by IPL\n*                                       **SET** if SET IKJTSO=xx\n         APUT  PAGMSG,L'PAGMSG\n         MVC   PDTPDT(10),TPVTYYMMDD    Move in update date.\n         APUT  PDTMSG,L'PDTMSG\n         MVC   PTMPTM(8),TPVTHHMMSS     Move in update time.\n         APUT  PTMMSG,L'PTMMSG\n         MVC   PSYPSY(4),TPVTSNAME      Move in system name.\n         APUT  PSYMSG,L'PSYMSG\n* -- >\n         XR    R7,R7                    Clear register\n         HEX   CPICPI,4,TPVT+X'A8'      Display CPUID\n         APUT  CPIMSG,L'CPIMSG\n         HEX   CPMCPM,2,TPVT+X'AC'      Display CPU model\n         APUT  CPMMSG,L'CPMMSG\n* -- >\n         CLC   NOLOGLIT,EESCB_DATASET   TSO Userlog not used?\n         BNE   D3LOGNM                  Used. Bypass \"not used\" message\n         APUT  NOLOGMSG,L'NOLOGMSG\n         B     D3GOON1                  Bypass USERLOG properties too.\nD3LOGNM  DS    0H\n         MVC   LDSLDS(44),EESCB_DATASET Display USERLOG dataset name\n         APUT  LDSMSG,L'LDSMSG\n         CLC   =C'       ',EESCB_MEMBER Is there any member name?\n         BE    D3GOON0                  No. Bypass member name display\n         MVC   LMBLMB(8),EESCB_MEMBER   Yes. Display member name\n         APUT  LMBMSG,L'LMBMSG          Write the message.\nD3GOON0  DS    0H\n* ---- >\n         XR    R7,R7                    Clear register\n         LH    R7,EESCB_PRI_NUM         Prepare primary tracks number\n         XC    DWORD,DWORD              Clear Double word for CVD\n         CVD   R7,DWORD                 Convert to packed\n         OI    DWORD+7,X'0F'            Make it readable\n         MVC   UPRUPR-1(4),BTMPTRN      Move pattern in\n         ED    UPRUPR-1(4),DWORD+6      Edit the number in\n         MVI   UPRUPR-1,X'40'           Blank the beginning\n         APUT  UPRMSG,L'UPRMSG          Display the message\n         XR    R7,R7                    Clear register\n         LH    R7,EESCB_SEC_NUM         Prepare secondary tracks number\n         XC    DWORD,DWORD              Clear Double word for CVD\n         CVD   R7,DWORD                 Convert to packed\n         OI    DWORD+7,X'0F'            Make it readable\n         MVC   USEUSE-1(4),BTMPTRN      Move pattern in\n         ED    USEUSE-1(4),DWORD+6      Edit the number in\n         MVI   USEUSE-1,X'40'           Blank the beginning\n         APUT  USEMSG,L'USEMSG          Display the message\n         CLC   =C'       ',EESCB_MEMBER Is there a member name?\n         BE    D3GOON1                  No. Bypass display of dirblks.\n         XR    R7,R7                    Clear register\n         LH    R7,EESCB_DIR_NUM         Prepare dir blocks number\n         XC    DWORD,DWORD              Clear Double word for CVD\n         CVD   R7,DWORD                 Convert to packed\n         OI    DWORD+7,X'0F'            Make it readable\n         MVC   UDRUDR-1(4),BTMPTRN      Move pattern in\n         ED    UDRUDR-1(4),DWORD+6      Edit the number in\n         MVI   UDRUDR-1,X'40'           Blank the beginning\n         APUT  UDRMSG,L'UDRMSG          Display the message\n* ---- >\nD3GOON1  DS    0H\n         MVC   DSNDSN(44),EESCB_BROADCAST_DSNAME BRODCAST dataset name\n         APUT  DSNMSG,L'DSNMSG                   Display it.\n         MVC   VOLVOL(6),EESCB_BROADCAST_VOLSER  BRODCAST dataset volsr\n         APUT  VOLMSG,L'VOLMSG                   Display it.\n         MVC   UNTUNT(8),EESCB_BROADCAST_UNIT    BRODCAST dataset unit\n         APUT  UNTMSG,L'UNTMSG                   Display it.\n         HEX   BFLBFL,1,EESCB_BROADCAST_FLAGS    EESCB Brodcast flags\n         APUT  BFLMSG,L'BFLMSG                   Display flags in hex.\n         XR    R7,R7                        Clear register\n         LH    R7,EESCB_BROADCAST_TIMEOUT   Prepare timeout number\n         XC    DWORD,DWORD                  Clear Double word for CVD\n         CVD   R7,DWORD                     Convert to packed\n         OI    DWORD+7,X'0F'                Make it readable\n         MVC   BTMBTM-1(4),BTMPTRN          Move pattern in\n         ED    BTMBTM-1(4),DWORD+6          Edit the number in\n         MVI   BTMBTM-1,X'40'               Blank the beginning\n         APUT  BTMMSG,L'BTMMSG              Display the message\n         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_SWITCH_PROMPT\n         BZ    D3NPRMT                  Prompt for BCAST switch off, no\n         MVC   BOPBOP(8),BOPYPRMP       So display that Prompt is on.\n         B     D3PREND                  And go on.\nD3NPRMT  DS    0H\n         MVC   BOPBOP(8),BOPNPRMP       Display that Prompt is off.\nD3PREND  DS    0H\n         APUT  BOPMSG,L'BOPMSG          Display prompt status.\n         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_SPECIFIED\n         BO    D3BSSP                   BRODCAST dsname is the default?\n         APUT  BCNAMEDF,L'BCNAMEDF      Yes. Display that it is default\n         B     D3BVOLD                  And skip particulars.\nD3BSSP   DS    0H\n         MVC   BCNAMEPM(8),PRMPRM       Not default. Display so.\n         APUT  BCNAMESP,L'BCNAMESP\nD3BVOLD  DS    0H\n         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_VOL_SPECIFIED\n         BO    D3VLSP                   Volser specified in PARMLIB mem\n         MVC   BCVOLDFP(8),PRMPRM       Volser not specified there\n         APUT  BCVOLDF,L'BCVOLDF          in PARMLIB\n         B     D3BCIPL\nD3VLSP   DS    0H\n         MVC   BCVOLPM(8),PRMPRM        Volser specified in PARMLIB\n         APUT  BCVOLSP,L'BCVOLSP          specifically. Show that.\nD3BCIPL  DS    0H\n         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_IPL\n         BZ    D3BCSET\n         MVC   BCSETWH,DBIPL\n         APUT  BCSETBY,L'BCSETBY\n         B     D3SWREQ\nD3BCSET  DS    0H\n         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_SET\n         BZ    D3BCPRM\n         MVC   BCSETWH,DBSET\n         APUT  BCSETBY,L'BCSETBY\n         B     D3SWREQ\nD3BCPRM  DS    0H\n         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_PARMLIB\n         BZ    D3SWREQ\n         MVC   BCSETWH,DBPARM\n         APUT  BCSETBY,L'BCSETBY\n         B     D3SWREQ\nD3SWREQ  DS    0H\n         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_SWITCH_REQUIRED\n         BZ    D3SWNRQ\n         MVC   BCSWRVR,SWYES\n         APUT  BCSWREQ,L'BCSWREQ\n         B     D3BDALI\nD3SWNRQ  DS    0H\n         MVC   BCSWRVR,SWNO\n         APUT  BCSWREQ,L'BCSWREQ\n         B     D3BDALI\nD3BDALI  DS    0H\n         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_PRIMARY_REP\n         BZ    D3BDNALI\n         MVC   BCDSYNO,SWYES\n         APUT  BCDSALI,L'BCDSALI\n         B     D3BSEND\nD3BDNALI DS    0H\n         MVC   BCDSYNO,SWNO\n         APUT  BCDSALI,L'BCDSALI\n         B     D3BSEND\nD3BSEND  DS    0H                       End of display for EESCB ver 03\n         DROP  R5\nD3END    DS    0H                   Display for EESCB version 2\n         USING IKJE2SCB,R5\n         CLI   E2SCB_VERSION,X'02'\n         BNE   D2END\n         MVC   LITLIT(8),E2SCB_IDENTIFIER\n         HEX   LITHEX,4,SAVEESCB\n         APUT  LITMSG,L'LITMSG\n         HEX   VERVER,1,E2SCB_VERSION\n         APUT  VERMSG,L'VERMSG      DISPLAY THE MESSAGE ON THE TUBE\n         HEX   FLGFLG,4,E2SCB_FLAGS_1\n         APUT  FLGMSG,L'FLGMSG      DISPLAY THE MESSAGE ON THE TUBE\n         BAL   R9,EESFLAGS                   Interpret IKJEESCB flags\n         MVC   PDSPDS(44),TPVTDSNAM          PARMLIB dataset name\n         APUT  PDSMSG,L'PDSMSG\n         MVC   PVLPVL(6),TPVTVOLSER          PARMLIB volser\n         APUT  PVLMSG,L'PVLMSG\n         CLI   TPVT_MEM1,X'C9'\n         BNE   D2MOVM\n         MVC   PRMPRM(8),TPVT_MEM1\n         B     D2MOVMB\nD2MOVM   DS    0H\n         MVC   PRMPRM(8),TPVT_MEM\nD2MOVMB  DS    0H\n         APUT  PRMMSG,L'PRMMSG      DISPLAY THE MESSAGE ON THE TUBE\n         MVC   PAGPAG(8),TPVTUSERID     Userid if PARMLIB update\n*                                       **IPL** if IKJTSO set by IPL\n*                                       **SET** if SET IKJTSO=xx\n         APUT  PAGMSG,L'PAGMSG\n         MVC   PDTPDT(10),TPVTYYMMDD    Move in update date.\n         APUT  PDTMSG,L'PDTMSG\n         MVC   PTMPTM(8),TPVTHHMMSS     Move in update time.\n         APUT  PTMMSG,L'PTMMSG\n         MVC   PSYPSY(4),TPVTSNAME      Move in system name.\n         APUT  PSYMSG,L'PSYMSG\n* -- >\n         XR    R7,R7                    Clear register\n         HEX   CPICPI,2,TPVT+X'AA'      Display CPUID\n         APUT  CPIMSG,L'CPIMSG\n         HEX   CPMCPM,2,TPVT+X'AC'      Display CPU model\n         APUT  CPMMSG,L'CPMMSG\n* -- >\n         CLC   NOLOGL01,E2SCB_DATASET\n         BNE   D2LOGNM\n         APUT  NOLOGMSG,L'NOLOGMSG\n         B     D2GOON1\nD2LOGNM  DS    0H\n         MVC   LDSLDS(44),E2SCB_DATASET\n         APUT  LDSMSG,L'LDSMSG      DISPLAY THE MESSAGE ON THE TUBE\n         MVC   LMBLMB(8),E2SCB_MEMBER\n         APUT  LMBMSG,L'LMBMSG      DISPLAY THE MESSAGE ON THE TUBE\nD2GOON1  DS    0H\n         DROP  R5\nD2END    DS    0H                   Display for EESCB version 1\n         USING IKJE1SCB,R5\n         CLI   E1SCB_VERSION,X'01'\n         BNE   RETURN\n         MVC   LITLIT(8),E1SCB_IDENTIFIER\n         HEX   LITHEX,4,SAVEESCB\n         APUT  LITMSG,L'LITMSG\n         HEX   VERVER,1,E1SCB_VERSION\n         APUT  VERMSG,L'VERMSG      DISPLAY THE MESSAGE ON THE TUBE\n         HEX   FLGFLG,4,E1SCB_FLAGS_1\n         APUT  FLGMSG,L'FLGMSG      DISPLAY THE MESSAGE ON THE TUBE\n         BAL   R9,EESFLAGS                   Interpret IKJEESCB flags\n         CLI   TPVT_MEM1,X'C9'\n         BNE   D1MOVM\n         MVC   PRMPRM(8),TPVT_MEM1\n         B     D1MOVMB\nD1MOVM   DS    0H\n         MVC   PRMPRM(8),TPVT_MEM\nD1MOVMB  DS    0H\n         APUT  PRMMSG,L'PRMMSG      DISPLAY THE MESSAGE ON THE TUBE\n         CLC   NOLOGL01,E1SCB_DATASET\n         BNE   D1LOGNM\n         APUT  NOLOGMSG,L'NOLOGMSG\n         B     D1GOON1\nD1LOGNM  DS    0H\n         MVC   LDSLDS(44),E1SCB_DATASET\n         APUT  LDSMSG,L'LDSMSG      DISPLAY THE MESSAGE ON THE TUBE\n         MVC   LMBLMB(8),E1SCB_MEMBER\n         APUT  LMBMSG,L'LMBMSG      DISPLAY THE MESSAGE ON THE TUBE\nD1GOON1  DS    0H\n         DROP  R5\nRETURN   DS    0H\n         L     R13,SAVE+4           RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)      RELOAD REGISTERS\n         XR    R15,R15              ZERO RETURN CODE ALWAYS\n         BR    R14                  RETURN TO CALLER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV4HEX  DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*               S  U  B  R  O  U  T  I  N  E  S                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEESFLAGS DS    0H\n         L     R5,SAVEESCB\n         USING IKJEESCB,R5\n*-->\n         TM    EESCB_FLAGS_1,X'80'       OPERSEND\n         BZ    OPERSOFF\n         MVC   OPSOPS,MON\n         B     OPERSEND\nOPERSOFF DS    0H\n         MVC   OPSOPS,MOFF\nOPERSEND DS    0H\n         APUT  OPSMSG,L'OPSMSG\n*-->\n         TM    EESCB_FLAGS_1,X'40'       USERSEND\n         BZ    USERSOFF\n         MVC   USSUSS,MON\n         B     USERSEND\nUSERSOFF DS    0H\n         MVC   USSUSS,MOFF\nUSERSEND DS    0H\n         APUT  USSMSG,L'USSMSG\n*-->\n         TM    EESCB_FLAGS_1,X'20'       SAVE\n         BZ    SAVEOFF\n         MVC   SAVSAV,MON\n         B     SAVEEND\nSAVEOFF  DS    0H\n         MVC   SAVSAV,MOFF\nSAVEEND  DS    0H\n         APUT  SAVMSG,L'SAVMSG\n*-->\n         TM    EESCB_FLAGS_1,X'10'       CHKBROD\n         BZ    CHKBOFF\n         MVC   CBRCBR,MON\n         B     CHKBEND\nCHKBOFF  DS    0H\n         MVC   CBRCBR,MOFF\nCHKBEND  DS    0H\n         APUT  CBRMSG,L'CBRMSG\n*-->\n         TM    EESCB_FLAGS_1,X'08'       USEBROD\n         BZ    USBROFF\n         MVC   UBRUBR,MON\n         B     USBREND\nUSBROFF  DS    0H\n         MVC   UBRUBR,MOFF\nUSBREND  DS    0H\n         APUT  UBRMSG,L'UBRMSG\n*-->\n         TM    EESCB_FLAGS_1,X'04'       MSGPROTECT\n         BZ    MSPROFF\n         MVC   MPRMPR,MON\n         B     MSPREND\nMSPROFF  DS    0H\n         MVC   MPRMPR,MOFF\nMSPREND  DS    0H\n         APUT  MPRMSG,L'MPRMSG\n*-->\n         TM    EESCB_FLAGS_1,X'02'       SYSPLEXSHR\n         BZ    SPXSOFF\n         MVC   SSHSSH,MON\n         B     SPXSEND\nSPXSOFF  DS    0H\n         MVC   SSHSSH,MOFF\nSPXSEND  DS    0H\n         APUT  SSHMSG,L'SSHMSG\n*-->\n         TM    EESCB_FLAGS_1,X'01'       SYSPLEXSHR_XCF\n         BZ    SPXCOFF\n         MVC   SXCSXC,MON\n         B     SPXCEND\nSPXCOFF  DS    0H\n         MVC   SXCSXC,MOFF\nSPXCEND  DS    0H\n         APUT  SXCMSG,L'SXCMSG\n*-->\n         TM    EESCB_FLAGS_1+1,X'80'     OPERSENDWAIT\n         BZ    OSWTOFF\n         MVC   OSWOSW,MON\n         B     OSWTEND\nOSWTOFF  DS    0H\n         MVC   OSWOSW,MOFF\nOSWTEND  DS    0H\n         APUT  OSWMSG,L'OSWMSG\n*-->\n         TM    EESCB_FLAGS_1+1,X'40'     SYSPLEXSHR_INI\n         BZ    SXSIOFF\n         MVC   SXISXI,MON\n         B     SXSIEND\nSXSIOFF  DS    0H\n         MVC   SXISXI,MOFF\nSXSIEND  DS    0H\n         APUT  SXIMSG,L'SXIMSG\n*-->\n         TM    EESCB_FLAGS_1+1,X'20'     LOGNAME SPECIFIED\n         BZ    LSPCOFF\n         MVC   LSPLSP,MON\n         B     LSPCEND\nLSPCOFF  DS    0H\n         MVC   LSPLSP,MOFF\nLSPCEND  DS    0H\n         APUT  LSPMSG,L'LSPMSG\n*-->\n         BR    R9\n         LTORG\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHELPFLG  DC    X'00'\nMON      DC    CL3'On '\nMOFF     DC    CL3'Off'\n         DS    0F\nBOPYPRMP DC    CL8'Prompt  '\nBOPNPRMP DC    CL8'Noprompt'\nBTMPTRN  DC    X'F0202020'          4 bytes of pattern                   03283\nDWORD    DC    D'0'\nFWORD    DC    F'0'\nWKDISP   DC    CL12' '\nSAVEESCB DC    F'0'\nSAVETPVT DC    F'0'\nTITLIT   DC    CL47'Current PARMLIB BRODCAST information - IKJEESCB'\nTITUND   DC    CL47'------- ------- -------- -----------   --------'\nNOLOGL01 DC    CL44'SYS1.BRODCAST'\nNOLOGLIT DC    CL44'*     '\nSAVE     DC    18F'0'              MY SAVE AREA\nLITMSG   DS    0CL28\nLITLIT   DC    CL8' '\n         DC    CL11' Address : '\nLITHEX   DC    CL9' '\nLDSMSG   DS    0CL63\nLDSLIT   DC    CL19'USERLOG  Dataset : '\nLDSLDS   DC    CL44' '\nLMBMSG   DS    0CL27\nLMBLIT   DC    CL19'USERLOG  Member  : '\nLMBLMB   DC    CL8' '\nUPRMSG   DS    0CL33\nUPRLIT   DC    CL19'USERLOG  Primary : '\nUPRUPR   DC    CL4' '\nUPRLIT2  DC    CL10'  Tracks  '\nUSEMSG   DS    0CL33\nUSELIT   DC    CL19'USERLOG  Secndary: '\nUSEUSE   DC    CL4' '\nUSELIT2  DC    CL10'  Tracks  '\nUDRMSG   DS    0CL33\nUDRLIT   DC    CL19'USERLOG  Directry: '\nUDRUDR   DC    CL4' '\nUDRLIT2  DC    CL10'  Blocks  '\nDSNMSG   DS    0CL63\nDSNLIT   DC    CL19'BRODCAST Dataset : '      LINE FOR MESSAGE\nDSNDSN   DC    CL44' '\nVOLMSG   DS    0CL25\nVOLLIT   DC    CL19'BRODCAST Volser  : '\nVOLVOL   DC    CL6' '\nVERMSG   DS    0CL22\nVERLIT   DC    CL19'IKJEESCB Version : '\nVERVER   DC    CL3' '\nFLGMSG   DS    0CL28\nFLGLIT   DC    CL19'IKJEESCB Flags   : '\nFLGFLG   DC    CL9' '\nOPSMSG   DS    0CL22\nOPSLIT   DC    CL19'IKJEESCB Opersend: '\nOPSOPS   DC    CL3' '\nUSSMSG   DS    0CL22\nUSSLIT   DC    CL19'IKJEESCB Usersend: '\nUSSUSS   DC    CL3' '\nSAVMSG   DS    0CL22\nSAVLIT   DC    CL19'IKJEESCB Save    : '\nSAVSAV   DC    CL3' '\nUBRMSG   DS    0CL22\nUBRLIT   DC    CL19'IKJEESCB Usebrod : '\nUBRUBR   DC    CL3' '\nCBRMSG   DS    0CL22\nCBRLIT   DC    CL19'IKJEESCB Chkbrod : '\nCBRCBR   DC    CL3' '\nMPRMSG   DS    0CL22\nMPRLIT   DC    CL19'IKJEESCB Msgprot : '\nMPRMPR   DC    CL3' '\nSSHMSG   DS    0CL22\nSSHLIT   DC    CL19'IKJEESCB Sysplxshr '\nSSHSSH   DC    CL3' '\nSXCMSG   DS    0CL22\nSXCLIT   DC    CL19'IKJEESCB Spxshrxcf '\nSXCSXC   DC    CL3' '\nSXIMSG   DS    0CL22\nSXILIT   DC    CL19'IKJEESCB Spxshrini '\nSXISXI   DC    CL3' '\nLSPMSG   DS    0CL22\nLSPLIT   DC    CL19'IKJEESCB Lognmspec '\nLSPLSP   DC    CL3' '\nOSWMSG   DS    0CL22\nOSWLIT   DC    CL19'IKJEESCB Oprsewait '\nOSWOSW   DC    CL3' '\nBFLMSG   DS    0CL28\nBFLLIT   DC    CL19'BRODCAST Flags   : '\nBFLBFL   DC    CL9' '\nUNTMSG   DS    0CL27\nUNTLIT   DC    CL19'BRODCAST Unit Name '\nUNTUNT   DC    CL8' '\nBTMMSG   DS    0CL33\nBTMLIT   DC    CL19'BRODCAST Timeout : '\nBTMBTM   DC    CL4' '\nBTMLIT2  DC    CL10'  Seconds '\nBOPMSG   DS    0CL27\nBOPLIT   DC    CL19'BRODCAST Operator: '\nBOPBOP   DC    CL8' '\nPAGMSG   DS    0CL27\nPAGLIT   DC    CL19'PARMLIB  Activator '\nPAGPAG   DC    CL8' '\nPRMMSG   DS    0CL27\nPRMLIT   DC    CL19'PARMLIB  Member  : '\nPRMPRM   DC    CL8' '\nPDSMSG   DS    0CL63\nPDSLIT   DC    CL19'PARMLIB  Dataset : '\nPDSPDS   DC    CL44' '\nPVLMSG   DS    0CL25\nPVLLIT   DC    CL19'PARMLIB  Volser  : '\nPVLPVL   DC    CL6' '\nPDTMSG   DS    0CL29\nPDTLIT   DC    CL19'PARMLIB  Swt Date: '\nPDTPDT   DC    CL10' '\nPTMMSG   DS    0CL27\nPTMLIT   DC    CL19'PARMLIB  Swt Time: '\nPTMPTM   DC    CL8' '\nPSYMSG   DS    0CL23\nPSYLIT   DC    CL19'PARMLIB  System  : '\nPSYPSY   DC    CL4' '\nCPMMSG   DS    0CL23\nCPMLIT   DC    CL19'PARMLIB  CPU Model '\nCPMCPM   DC    CL4' '\n         DC    C' '\nCPIMSG   DS    0CL27\nCPILIT   DC    CL19'PARMLIB  CPUID   : '\nCPICPI   DC    CL8' '\n         DC    CL4' '                    PADDING\nNOLOGMSG DC    CL43'This system does not write to TSO Userlogs.'\nBCNAMEDF DC    CL43'The BRODCAST dataset name is the default.  '\nBCVOLDF  DS    0CL49\nBCVOLDFL DC    CL41'BRODCAST Dataset volser not specified in '\nBCVOLDFP DC    CL8' '\nBCNAMESP DS    0CL47\nBCNAMELT DC    CL39'BRODCAST Dataset name was specified in '\nBCNAMEPM DC    CL8'        '\nBCVOLSP  DS    0CL47\nBCVOLLT  DC    CL39'BRODCAST volume  name was specified in '\nBCVOLPM  DC    CL8' '\nBCSETBY  DS    0CL53\nBCSETLT  DC    CL33'BRODCAST Dataset name was set by '\nBCSETWH  DC    CL20' '\nBCSWREQ  DS    0CL39\nBCSWRLT  DC    CL36'BRODCAST Dataset switch required?  '\nBCSWRVR  DC    CL3' '\nBCDSALI  DS    0CL39\nBCDSLIT  DC    CL36'BRODCAST Dataset Name is an ALIAS? '\nBCDSYNO  DC    CL3' '\nSWYES    DC    CL3'Yes'\nSWNO     DC    CL3'No '\nDBIPL    DC    CL20'System IPL'\nDBSET    DC    CL20'Operator SET command'\nDBPARM   DC    CL20'PARMLIB TSO command'\nMESSG000 DC    CL47'  ---------------------------------------------'\nMESSG001 DC    CL47'  The EESCB TSO command displays information   '\nMESSG002 DC    CL47'  concerning the TSO SEND and LISTBC command   '\nMESSG003 DC    CL47'  options.  Information is obtained from the   '\nMESSG004 DC    CL47'  IKJEESCB and TPVT TSO control blocks, which  '\nMESSG005 DC    CL47'  are chained off the TSO Vector Table IKJTSVT.'\nMESSG05A DC    CL47'  BROADCAST dataset switching is only available'\nMESSG05B DC    CL47'  from IKJEESCB version 03 or later.           '\nMESSG05C DC    CL47'  Parmlib member IKJTSOxx can be invoked:      '\nMESSG05D DC    CL47'    A - At IPL Time                            '\nMESSG05E DC    CL47'    B - Under TSO using PARMLIB UPDATE(xx)     '\nMESSG05F DC    CL47'    C - Using Operator command SET IKJTSO=xx   '\nMESSG006 DC    CL47'  Source of EESCB messages:                    '\nMESSG007 DC    CL47'    IKJEESCB - General SEND and LISTBC defaults'\nMESSG07A DC    CL47'               from the IKJEESCB control block.'\nMESSG008 DC    CL47'    PARMLIB  - TPVT control block              '\nMESSG009 DC    CL47'    BRODCAST - BRODCAST section of IKJEESCB    '\nMESSG010 DC    CL47'               which is only present from      '\nMESSG011 DC    CL47'               IKJEESCB version 03 or later.   '\n         IKJEESCB\n         IKJE2SCB\n         IKJE1SCB\n         IKJTPVT\n         IKJCTLT\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EESCB$": {"ttr": 7427, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00Q\\x00\\x965\\x7f\\x01\\x150\\x8f\\x11#\\x00\\x1d\\x00?\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1996-12-22T00:00:00", "modifydate": "2015-11-04T11:23:51", "lines": 29, "newlines": 63, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.EESCB.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT470.FILE731(EESCB)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB491731\n SETCODE AC(0)\n ENTRY   EESCB\n NAME    EESCB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EESCB@": {"ttr": 7429, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00A\\x01\\x054o\\x01\\x12!\\x8f\\x11\\x08\\x00!\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2005-12-12T00:00:00", "modifydate": "2012-08-05T11:08:41", "lines": 33, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n  The EESCB TSO command is a means of displaying the status\n    of the BROADCAST dataset on an MVS system, and displaying\n    whether a BROADCAST switch was done, when, and by whom.\n\n    EESCB is an effective replacement for the D IKJTSO,SEND\n    Operator command, and it is useful when you don't have\n    access to an image of a system console.\n\n    The EESCB command uses the PUTLINE interface for displaying\n    its output, so its output may be captured with SYSOUTTRAP.\n\n    The EESCB command will work with older releases of TSO/E\n    (before Release 3, or with z/OS 1.2 and back to ESA 5.2.2)\n    but will show whatever control block information was relevant\n    at those levels.  Broadcast Dataset switching was introduced\n    with z/OS 1.3, or TSO/E Release 3.\n\n)X SYNTAX  -\n    EESCB\n\n  REQUIRED - NONE\n  DEFAULT  - NONE\n  ALIAS    -\n  NOTE     - The EESCB command has limited support for releases\n             previous to TSO/E Release 3.x.  Primary support is\n             for releases of TSO/E which support the BROADCAST\n             dataset switching, from TSO/E Release 3 and upward.\n\n)O OPERANDS -\n))None\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EESCBBAT": {"ttr": 7431, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x13\\x01\\x054\\x7f\\x01\\x054\\x7f\\x10D\\x00\\x0c\\x00\\x0b\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2005-12-13T00:00:00", "modifydate": "2005-12-13T10:44:13", "lines": 12, "newlines": 11, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBT  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//STEPLIB DD DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//SYSPROC DD DISP=SHR,DSN=SBGOLOB.CLIST\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\nEESCB\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENGTRAN$": {"ttr": 7433, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00X\\x01\\x07\"\\x7f\\x01\\x19 O\\x13D\\x00\\x1b\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2007-08-15T00:00:00", "modifydate": "2019-07-23T13:44:58", "lines": 27, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(ENGTRANS)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   ENGTRANS\n SETCODE AC(1)\n NAME    ENGTRANS(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENGTRANS": {"ttr": 7435, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x018\\x004\\x01\\x08\\x15?\\x01\\x19#\\x1f\\t\\x12\\x02`\\x00a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.56", "flags": 0, "createdate": "2008-06-01T00:00:00", "modifydate": "2019-08-19T09:12:34", "lines": 608, "newlines": 97, "modlines": 0, "user": "SBGOLOB"}, "text": "ENGTRANS TITLE 'Change the ENGTRANS byte in the TCAS control block'\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*    Function:   To display or change the setting of the TCASENGT     *\n*                byte in the TCAS control block, mapped by IKTTCAST.  *\n*                                                                     *\n*                If you want to switch this setting temporarily,      *\n*                then issue this APF-authorized TSO command:          *\n*                                                                     *\n*                                                                     *\n*          ENGTRANS B  -  ENGLISH translation is set to BASE          *\n*                                                                     *\n*          ENGTRANS N  -  ENGLISH translation is set to NONE          *\n*                                                                     *\n*          ENGTRANS E  -  ENGLISH translation is set to EXTENDED      *\n*                                                                     *\n*          ENGTRANS (anything else) - help message                    *\n*                                                                     *\n*                                                                     *\n*    Date:       July 23, 2019                                        *\n*                                                                     *\n*    Technical Detail:  PUTLINE interface for TSO Output.             *\n*                       Must be APF-authorized because the TCAS       *\n*                       control block is in fetch-protected           *\n*                       storage:  SP 231.                             *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    REGS\n         LCLA  &I\n&I       SETA  0\n.LUP     ANOP\nR&I      EQU   &I\n&I       SETA  &I+1\n         AIF   (&I LE 15).LUP\n         MEND\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n* --       End of Internal Macros......                            -- *\n* ------------------------------------------------------------------- *\n         SPACE 3\nENGTRANS CSECT\nENGTRANS AMODE 31\nENGTRANS RMODE ANY\n         REGS\n         USING ENGTRANS,R15        (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nEYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.\nEYEC     DC    C' ENGTRANS - &SYSDATE - &SYSTIME -'\n         DC    C'     --------------------------------    '\n         DC    C'             '\n         DC    C'                   '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         USING ENGTRANS,R12        (TELL ASSEMBLER).\n         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\n         SPACE 1\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(R2)            LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    RELERR              B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n*\n* --- Parms gotten at this point.                            -------- *\n* --- Are we allowing Key 8 allocation of CSA, YES or NO ?   -------- *\n*\nSETFLAGS DS    0H\n         MVI   FLAG1,X'00'\nFBASE    CLI   0(R2),C'N'          N. We don't want to allow?\n         BNE   FNONE               No. Try if Y.\n         OI    FLAG1,FLAGCSN       Set up for not allowing.\n         B     FINDDATA            Go get DGNBOPTIONS1 bit.\nFNONE    CLI   0(R2),C'B'          Y. We want to allow?\n         BNE   FEXTEN              No. Must be No Change.\n         OI    FLAG1,FLAGCSB       Set up for allowing.\n         B     FINDDATA            Go get DGNBOPTIONS1 bit.\nFEXTEN   CLI   0(R2),C'X'          Y. We want to allow?\n         BNE   FENDD               No. Must be No Change.\n         OI    FLAG1,FLAGCSX       Set up for allowing.\n         B     FINDDATA            Go get DGNBOPTIONS1 bit.\nFENDD    DS    0H                  No change.\n         B     RELERR              Nullify change flags.\n*\n* - Parm chosen. Get the DGNB control block and the switching bits. - *\n*\nFINDDATA DS    0H\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >                             We're authorized. Go Key 0.\n         MODESET KEY=ZERO\n         L     R5,X'10'            POINT TO THE CVT.\n         L     R5,X'3F4'(,R5)      TCASP (MACRO IKTTCAST)\n         ST    R5,SAVETCAS\n         USING TCAST,R5             (TELL ASSEMBLER).\n         CLC   =C'TCAS',0(R5)      Are we really there?\n         BNE   NOTTCAS             No. Report a problem.\n         LA    R6,X'1F'(,R5)       ENGTRANS - 1 BYTE\nDISPFLAG DS    0H\n         MVC   STORFLAG(1),0(R6)         Save entire byte for reporting\n         CLI   FLAG1,X'00'               Did we have a valid parm?\n         BE    MESSAGES                  No. Just report no change.\nTAUTH    DS    0H                  This section is for the Key 0 stuff.\n         TM    FLAG1,FLAGCSB       Flag setting\n         BNO   XEXTEND             No. Try and see if we want to allow.\n         MVI   0(R6),X'00'                  Set bit to BASE\n         B     ENDMOD                       Save bit settings.\nXEXTEND  TM    FLAG1,FLAGCSX       Flag setting\n         BNO   XNONE               No. No changes will be made.\n         MVI   0(R6),X'01'                  Set bit to EXTEND\n         B     ENDMOD                       Save bit settings.\nXNONE    TM    FLAG1,FLAGCSN       Flag setting\n         BNO   ENDMOD              No. No changes will be made.\n         MVI   0(R6),X'02'                  Set bit to NONE\nENDMOD   DS    0H                           Leave Key 0\n         MVC   STORFLAG(1),0(R6)   Save bit settings for report.\n         MODESET KEY=NZERO\n         DROP  R5\n         B     CHANGMSG\n** ---------------------------------------------------------------- **\nRETURN   L     R13,SAVE+4             E\n         LM    R14,R12,12(R13)          X\n         SR    R15,R15                    I\n         BR    R14                          T\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                  Command not APF authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAGNC,L'MESSAGNC\n         B     RETURN\n** ---------------------------------------------------------------- **\nRELERR   DS    0H                                                    .\n         L     R5,X'10'            POINT TO THE CVT.\n         L     R5,X'3F4'(,R5)      TCASP (MACRO IKTTCAST)\n         ST    R5,SAVETCAS\n         HEX   MESSAGTC+30,4,SAVETCAS\n         APUT  MESSAGTC,L'MESSAGTC\n         HEX   MESSAGVA+30,1,STORFLAG\n         APUT  MESSAGVA,L'MESSAGVA\n         APUT  MESSAG1C,L'MESSAG1C\n         APUT  MESSAGNC,L'MESSAGNC\n         B     RETURN\n** ---------------------------------------------------------------- **\nNOTTCAS  DS    0H                                                    .\n         HEX   MESSAGTC+30,4,SAVETCAS\n         APUT  MESSAGTC,L'MESSAGTC\n         APUT  MESSAG3C,L'MESSAG3C\n         APUT  MESSAGNC,L'MESSAGNC\n         B     RETURN\n** ---------------------------------------------------------------- **\nCHANGMSG DS    0H\nMESSAGES DS    0H                         Program Title\n         APUT  'Change ENGTRANS settings: B=00, X=01, N=02',42\n         APUT  '------ -------- --------  ----  ----  ----',42\n         APUT  '                                          ',42\n         HEX   MESSAGTC+30,4,SAVETCAS\n         APUT  MESSAGTC,L'MESSAGTC\n         TM    FLAG1,FLAGCSB\n         BO    MESSBASE\n         TM    FLAG1,FLAGCSX\n         BO    MESSEXTE\n         TM    FLAG1,FLAGCSN\n         BO    MESSNONE\n         B     MESSNOTC\nMESSBASE DS    0H\n         APUT  MESSAGBA,L'MESSAGBA\n         B     CHANGEND\nMESSEXTE DS    0H\n         APUT  MESSAGEX,L'MESSAGEX\n         B     CHANGEND\nMESSNONE DS    0H\n         APUT  MESSAGNO,L'MESSAGNO\n         B     CHANGEND\nMESSNOTC DS    0H\n         APUT  MESSAGNC,L'MESSAGNC\n         B     CHANGEND\nCHANGEND DS    0H\n         HEX   MESSAGVA+30,1,STORFLAG\n         APUT  MESSAGVA,L'MESSAGVA\n         B     RETURN\n** ---------------------------------------------------------------- **\n** --         C  O  N  S  T  A  N  T  S                          -- **\n** ---------------------------------------------------------------- **\nMESSAG1C DC    C'ENGTRANS can only be changed by B, N, or X.        '\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG3C DC    C'Control block not properly formatted.  '\nMESSAGBA DC    C'ENGTRANS was changed to BASE.    '\nMESSAGNO DC    C'ENGTRANS was changed to NONE.    '\nMESSAGEX DC    C'ENGTRANS was changed to EXTENDED.'\nMESSAGNC DC    C'ENGTRANS was not changed.        '\nMESSAGVA DC    C'ENGTRANS value in binary is:  xx '\nMESSAGTC DC    C'TCAS control block address:   nnnnnnnn '\nFLAG1    DC    X'00'\nFLAGCSB  EQU   B'10000000'            BASE\nFLAGCSX  EQU   B'01000000'            EXTENDED\nFLAGCSN  EQU   B'00100000'            NONE\nSTORFLAG DC    X'00'\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\n         DS    0D\nMSGB     DC    C'ENGTRANS has been set to BASE    '\nMSGBLEN  EQU   *-MSGB\n         DS    0D\nMSGX     DC    C'ENGTRANS has been set to EXTENDED'\nMSGXLEN  EQU   *-MSGX\n         DS    0D\nMSGN     DC    C'ENGTRANS has been set to NONE    '\nMSGNLEN  EQU   *-MSGN\n         DS    0D\nMSGNC    DC    C'ENGTRANS has not been changed    '\nMSGNCLEN EQU   *-MSGNC\nSAVE     DS    9D                  Program Save Area\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\nSAVE1401 DS    5F                  Save \"system-used\" registers.\nSAVETCAS DS    F\n         DC    C' '                Blank before OUTPUT line.\nOUTPUT   DC    CL80'  '            Variable output line.\n         LTORG\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           Map the CVT.\n         IKTTCAST\n** ---------------------------------------------------------------- **\n         END   ENGTRANS\n** ---------------------------------------------------------------- **\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EPUTL": {"ttr": 7685, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00Q\\x01\\x185/\\x01\\x19!O\\x129\\x00\\xcb\\x00\\xcb\\x00\\x01\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2018-12-18T00:00:00", "modifydate": "2019-08-02T12:39:51", "lines": 203, "newlines": 203, "modlines": 1, "user": "SBGOLOB"}, "text": "EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*  CLEANED A BIT  . . . 08/17\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATER  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUMENTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFORE R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nR3       EQU   3                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\n         DS    0D\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   R14,R12,12(R13)    SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES,SP=0       RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    R1,8(,R13)         OUR SAVE AREA POINTER\n         ST    R13,4(,R1)         POINTER TO CALLER'S SAVE AREA\n         LR    R13,R1             @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(,R13)        POINT TO CALLER'S RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 RC IF BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 RC IF BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(,RML)              MESSAGE LENGTH\n         STH   R15,PUTLEN               PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(,R2)       @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(,R2)               REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    R2,R13                   @OUR SAVE AREA\n         LR    R3,R15                   SAVE RETURN CODE\n         L     R13,4(,R13)              @CALLER'S SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,R3                   RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLER'S REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTL$": {"ttr": 7689, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x08\\x01\\x054\\x7f\\x01\\x054\\x7f\\x08H\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-13T00:00:00", "modifydate": "2005-12-13T08:48:08", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R16.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R16.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(EPUTL)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB469136\n SETCODE AC(0)\n ENTRY   EPUTL\n NAME    EPUTL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HIBFREX$": {"ttr": 7691, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00!\\x01\\x055O\\x01\\x19\\x19\\x0f\\x11\\x18\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-09T11:18:21", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(HIBFREXT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(1)\n ENTRY   HIBFREXT\n NAME    HIBFREXT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HIBFREXT": {"ttr": 7693, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x007\\x01\\x055O\\x01\\x19!/\\x08C\\x02\\xb4\\x01\\x87\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-31T08:43:37", "lines": 692, "newlines": 391, "modlines": 0, "user": "SBGOLOB"}, "text": "HIBFREXT TITLE 'HIBFREXT - SET HIGH SIZE OF VTIOC BUFFERS'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.  APF AUTHORIZED.  YOU NEED TO PUT        *\n*                   THIS COMMAND NAME IN THE ACTIVE IKJEFTE2 TABLE,   *\n*                   OR AUTHORIZE IT SOME OTHER WAY (CBT FILE 185).    *\n*                                                                     *\n*         SYNTAX:   HIBFREXT nnnn (nnnn is the new value of           *\n*                                  HIBFREXT in decimal)               *\n*                                                                     *\n*         OUTPUT:   Via PUTLINE interface, using APUT and EPUTL.      *\n*                                                                     *\n*       FUNCTION:   TO CHANGE DEFAULT NUMBER HIBFREXT IN THE          *\n*                   TCAS CONTROL BLOCK IKTTCAST.                      *\n*                                                                     *\n*                                                                     *\n*         WARNING:  I have not artificially imposed a limit on the    *\n*                   size of the number in this command.  So use this  *\n*                   command carefully.                                *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  JUL 09, 2019                                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*         CHANGES:  1.1 - DEC 12, 09 -  (for program BDMNNOTC)        *\n*                     Fixed messages, better numeric verification.    *\n*                                                                     *\n*                   1.2 - DEC 14, 09 -                                *\n*                     Better comments, title subroutine, cut out      *\n*                     unnecessary code. Put non-numeric test in       *\n*                     the proper place, to not cause a S0C7 abend.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                  M A I N L I N E   C O D E\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nHIBFREXT CSECT\nHIBFREXT AMODE 31\nHIBFREXT RMODE 24\n         USING HIBFREXT,R12,R11,R10\n         B     BEGINN-*(,R15)\n         DC    CL18'HIBFREXT VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             Set up base\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)         Second base\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)         Third base\n         LR    R6,R1               PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                  Initialize constants.\n         MVC   NEWNMBIN,=F'0'\n         MVI   NUMFLAG,X'00'\n         MVI   LINEB,X'40'\n* ------------------------------------------------------------------- *\n*  Get old default value for HIBFREXT. Do it early on in the program. *\n* ------------------------------------------------------------------- *\n*  Test if we are APF-authorized - IKTTCAST is in Subpool 231 -       *\n*    which is fetch-protected.  You need APF to even see it.          *\n* ------------------------------------------------------------------- *\n         STM   R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         L     R2,16               CVT\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCAST\n         USING TCAST,R3\n         MODESET KEY=ZERO\n         L     R4,TCASHBUF         Save old number HIBFREXT.\n         MODESET KEY=NZERO\n         CVD   R4,CVDWORK          Convert to Decimal\n         MVC   DECOLDNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECOLDNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         DROP  R2,R3\n* ------------------------------------------------------------------- *\n* --     Is it TSO?  And run another authorization check.          -- *\n* ------------------------------------------------------------------- *\n* --       You need OPER and ACCT authority to run this, if you    -- *\n* --     comment out the bypass that is after the CHEKAUTH label.  -- *\n* ------------------------------------------------------------------- *\n         L     R1,16               Point to CVT.\n         L     R1,0(,R1)           Point to TCB/ASCB words.\n         L     R9,4(,R1)           Point to TCB.\n         L     R1,X'B4'(,R9)       Point to JSCB.\n         L     R2,X'108'(,R1)      Point to PSCB.\n         LA    R2,0(,R2)           Clear high byte.\n         LTR   R2,R2               Any PSCB?\n         BZ    EOJ4                Get out. Not TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                  TSO Authorization (Oper,Acct)\n         B     CONT0               Bypass authorization check.\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes. Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No. Get out.\n         DROP  R2\n* ------------------------------------------------------------------- *\n* --         Get Parameter - Make sure it is numeric.              -- *\n* ------------------------------------------------------------------- *\nCONT0    DS    0H\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No. Not TSO.\n         L     R1,0(,R6)           Point to Command Buffer.\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out of none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of Command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,EOJ4              Zero. Message.\n         BC    5,EOJ4              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,10               Load Reg for BCT loop. 10 times.\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)                to first nonnull character\n         LA    R8,0                Initialize character count.\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the number\n*--------------------------------  Numeric Test this character - below\n         CLI   0(R7),C'0'\n         BL    FLAGON              Less than 0 ? No good.\n         CLI   0(R7),C'9'          Greater than 9 ?\n         BH    FLAGON              No good.\n         B     FLAGGO              It's numeric.\nFLAGON   OI    NUMFLAG,X'01'       It's not numeric. Flag the situation\nFLAGGO   DS    0H\n*--------------------------------  Numeric Test this character - above\n         LA    R7,1(,R7)           Go to next character\n         LA    R8,1(,R8)           Count it.\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nNOMORCUT DS    0H\n         MVC   NEWNUMB(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for Execute\n         EX    R8,MOVOUTL          Move number into display field\n         LA    R8,1(,R8)           Bump R8 back to where it was\n*\n         TM    NUMFLAG,X'01'       Did it fail the numeric test?\n         BO    NOTNUMER            It failed. No changes to be made.\n*\n         STC   R8,NUMCOUTL         Save PARM number's length (not used)\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         BCTR  R8,0                One less for Execute.\n         EX    R8,PACK             Convert to Packed.\n         CVB   R0,WORK             Convert to Binary.\n         ST    R0,NEWNMBIN         And store number in NEWNMBIN.\n         B     PASTCONV            Jump past constants.\n*\nMOVOUTL  MVC   NEWNUMB(*-*),0(R1)  Executed\nPACK     PACK  WORK,0(0,R1)        For conversion to binary.\nWORK     DC    D'0'                CVB work area.\nFULLZERO DC    F'0'                Fullword of zeros.\n*\nPASTCONV DS    0H                  Continue execution.\n* ------------------------------------------------------------------- *\n* -- >  Test again if this command is being run APF Authorized   < -- *\n* ------------------------------------------------------------------- *\nAUTHTEST DS    0H                  Don't let the system get a S047.\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* ------------------------------------------------------------------- *\n*     Replace the number here,   Get TCASHBUF field again, this time  *\n*       in Key 0.                 to replace it with the new number.  *\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT.\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCASP\n         USING TCAST,R3\n* ------------------------------------------------------------------- *\nKZ       MODESET KEY=ZERO\n         MVC   TCASHBUF,NEWNMBIN   Replace HIBFREXT in Key 0.\nNZ       MODESET KEY=NZERO\n* ------------------------------------------------------------------- *\n* --  Normal Completion  -                                         -- *\n* ------------------------------------------------------------------- *\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Previous default value of HIBFREXT: '\n         MVC   LINE+36(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE(36),=C'Default value of HIBFREXT reset to: '\n         MVC   LINE+36(10),NEWNUMB\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         DROP  R3\n* ------------------------------------------------------------------- *\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default value of HIBFREXT:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG10),MESSAG10\n         APUT  LINE,L'MESSAG10\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,4\n         B     EOJ                 CONT.\n* ------------------------------------------------------------------- *\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default value of HIBFREXT:  '\n         MVC   LINE+36(10),LJUSTWRK    Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG11),MESSAG11\n         APUT  LINE,L'MESSAG11\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ                 CONT\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default value of HIBFREXT:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n*        APUT  LINE,47\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTNUMER DS    0H                     Parameter not numeric.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default value of HIBFREXT:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   MESSPARM,NEWNUMB       Stuff entered parm into message.\n         APUT  MESSAG2B,MESSAG2L\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      S U B R O U T I N E S                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTITLSTMT DS    0H\n         APUT  MESSAGET,L'MESSAGET    Full title and messages.\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSAGEV,L'MESSAGEV\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLJUST    DS    0H                    Left-justify the display number.\n         STM   R4,R6,SAVER4T6        Save work registers.\n         LA    R4,RJUSTWRK           Point to right-justified number.\n         LA    R5,LJUSTWRK           Point to left-justification area.\n         LA    R6,10                 10 characters only.\nLJUSTLUP DS    0H                    loop.....\n         CLI   0(R4),X'F0'           Is this character smaller than 0?\n         BL    LJUSTBMP              No good. Bump past it.\n         CLI   0(R4),X'F9'           Is this character larger than 9?\n         BH    LJUSTBMP              No good. Bump past it.\n         MVC   0(1,R5),0(R4)         Significant. Move it to left-just.\n         LA    R5,1(,R5)             Bump left-just character.\nLJUSTBMP DS    0H\n         LA    R4,1(,R4)             Bump right-just char in any case.\nLJUSTCYC BCT   R6,LJUSTLUP           Loop up to BCT times. (10).\nLJUSTEND DS    0H                    end of loop.....\n         LM    R4,R6,SAVER4T6        Restore work registers.\n         BR    R9                    Return to caller.\nRJUSTWRK DC    CL10' '               Right-justified display number.\nLJUSTWRK DC    CL10' '               Left-justified display number.\nSAVER4T6 DS    3F                    Save area for work registers.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                '   BLANKS\nMESSAGED DC    C'--------------------------------------'\nMESSAGET DC    C'HIBFREXT - VER. 1.2 - &SYSDATE - &SYSTIME   '\nMESSAGEU DC    C' Change the HIBFREXT number in the IKTTCAST '\nMESSAGEV DC    C' control block.                             '\nMESSAG10 DC    C'To change HIBFREXT, enter a numeric parameter. '\nMESSAG11 DC    C'This program was not invoked as a TSO command.'\nMESSAG2B DC    C'Parameter '\nMESSPARM DC    C'          '\nMESSAG2E DC    C'had non-numeric characters.  '\nMESSAG2L EQU   *-MESSAG2B\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMASK10   DC    XL10'40202020202020202120'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D                  Save Area\nCVDWORK  DS    D                   Work area for CVD instruction\nSAVE1401 DC    5F'0'               TESTAUTH save area for registers\nNEWNMBIN DS    F                   New number to put in CVTBCLMT\nDECOLDNM DS    PL8                 Packed version\nNUMFLAG  DC    X'00'               Flag, X'01' if not numeric\nNUMCOUTL DC    X'00'               Store Length of parameter here\nNEWNUMB  DC    C'          '       Store Parm number here\n         DS    0F                  Align on fullword\nLINEB    DS    C                   LINE-1 (primed with blank)\nLINE     DS    CL137               Print line for most purposes\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of Data Area\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKTTCAST\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INMXD": {"ttr": 7946, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01D\\x00S\\x01\\x056?\\x01\\x19\\x18_#\\t\\x03\\x14\\x005\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.68", "flags": 0, "createdate": "2005-12-29T00:00:00", "modifydate": "2019-07-04T23:09:53", "lines": 788, "newlines": 53, "modlines": 0, "user": "SBGOLOB"}, "text": "INMXD    TITLE 'INMXD - DISPLAY INMXPARM FIELDS'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized, except for the DISPLAY   *\n*                   keyword.                                          *\n*                                                                     *\n*         Syntax:   INMXD                                             *\n*                                                                     *\n*       Function:   To display values of the TRANSREC IKJTSOxx        *\n*                   PARMLIB settings as they are represented          *\n*                   internally in the INMXPARM control block.         *\n*                                                                     *\n*          Author:  Sam Golob               Version:   1.2            *\n*                                                                     *\n*            Date:  Dec 31, 05                                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*                                                                     *\n*    2005/12/31 - 1.0 - Initial version - Tested with TSO/E Version   *\n*                       3.                                            *\n*                                                                     *\n*    2006/01/01 - 1.1 - Fitted to older version of TSO/E on OS/390    *\n*                       1.3.  See:    TM   OLDFLAG,X'01'              *\n*                       In the older INMXPARM control block, there    *\n*                       is no version number, and the later fields    *\n*                       are displaced backward by 4 bytes.            *\n*                                                                     *\n*    2019/07/04 - 1.2 - Didn't have enough digits to display an       *\n*                       outlimit of 2000000000 (2 billion USA),       *\n*                       which is allowed, because the number is       *\n*                       a binary fullword.                            *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         L     R4,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nINMXD    CSECT\nINMXD    AMODE 31\nINMXD    RMODE 24\n         B     BEGINN-*(,R15)           Eyecatcher\n         DC    CL15'INMXD VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         STM   R14,R12,12(R13)\n         LR    R5,R1                    SAVE CPPL POINTER                01507\n         USING INMXD,R12,R11,R10\n         LR    R12,R15                  Set up base registers.\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)                                            01518\n         LA    R10,1(,R10)                                               01519\n         LA    R1,SAVEAREA              NEW SAVE-AREA ADDR               01508\n         ST    R1,8(,R13)               FORWARD SAVE-AREA CHAIN PTR      01509\n         ST    R13,4(,R1)               BACKWARD SAVE-AREA CHAIN PTR     01510\n         LR    R13,R1                   NEW SAVE AREA ADDRESS            01511\n         SPACE 1\n* -----------------------\n         LR    R1,R5                    RESTORE CPPL POINTER             01526\n         ST    R1,CPPLSAVE         Store the CPPL pointer into this      01529\n*                                  program, so it doesn't get lost.      01530\n* -----------------------\n         MVI   BLANKS-1,X'40'\n         MVC   BLANKS,BLANKS-1\n* -----------------------\nCONT0    DS    0H\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R6,X'4C'(,R2)       Point to TPVT\n         L     R2,X'2C'(,R6)       Point to INMXPARM control block\n         ST    R2,INMXADDR         Store away INMXPARM address\n* ------\n*     The INMXPARM control block doesn't have a good version number\n*     indicator in the older version, so we have to judge by looking\n*     in the TPVT to see if the PARMLIB member is one byte earlier.\n* ------\n         CLC   =C'IKJ',7(R6)       Is PARM member in the old place?\n         BNE   NEWSYSTM            No. Figure it's in the new place.\n         OI    OLDFLAG,X'01'       Yes. Flag an old INMXPARM block.\nNEWSYSTM DS    0H\n         USING XPRM,R2\nPASTCONV DS    0H                       Display of INMXPARM fields\n         L     R5,XPRM_NJE_START        Load reg with NODE/SMF start\n         ST    R5,NJESTART              And store it away\n         APUT  DISPLAYT,L'DISPLAYT      Display report title\n         APUT  DISPLAYU,L'DISPLAYU      Underlines\n         MVC   DISPLAY1,BLANKS          Now display all fields.\n         MVC   DISPLAY1(8),XPRM_ID\n         MVC   DISPLAY1+9(4),=C'ADDR'\n         HEX   DISPLAY1+16,4,INMXADDR\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS\n         MVC   DISPLAY1(7),=C'LENGTH '\n         HEX   DISPLAY1+16,2,XPRM_LEN\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS\n         MVC   DISPLAY1(10),=C'NJE COUNT '\n         HEX   DISPLAY1+16,2,XPRM_NJE#\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS\n         MVC   DISPLAY1(10),=C'NJE START '\n         HEX   DISPLAY1+16,4,XPRM_NJE_START\n         APUT  DISPLAY1,L'DISPLAY1\n         TM    OLDFLAG,X'01'                    Old Version?\n         BO    OLDFL01A                         No. Skip entire display\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(12),=C'INMX VERSION'    Display entry title\n         HEX   DISPLAY1+16,1,XPRM_VERS\n         APUT  DISPLAY1,L'DISPLAY1\nOLDFL01A DS    0H\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(9),=C'INIT WARN'        Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL002                         No.\n         L     R5,XPRM_WARN1-4\n         B     OLDFL02A\nOLDFL002 DS    0H\n         L     R5,XPRM_WARN1          And load a register with it.\nOLDFL02A DS    0H\n         CVD   R5,CVDAREA             Convert it to printable.\n         OI    CVDAREA+7,X'0F'        Fix the sign of the packed number\n         MVC   OUTLIMW1(10),OLDPATT   Move in the pattern for EDIT.\n         ED    OUTLIMW1(10),CVDAREA+3   EDIT to cut out leading zeros.\n         MVC   DISPLAY1+16(10),OUTLIMW1\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'WARN INTRVL'     Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL003                         No.\n         L     R5,XPRM_WARN2-4\n         B     OLDFL03A\nOLDFL003 DS    0H\n         L     R5,XPRM_WARN2          And load a register with it.\nOLDFL03A DS    0H\n         CVD   R5,CVDAREA             Convert it to printable.\n         OI    CVDAREA+7,X'0F'        Fix the sign of the packed number\n         MVC   OUTLIMW2(10),OLDPATT   Move in the pattern for EDIT.\n         ED    OUTLIMW2(10),CVDAREA+3   EDIT to cut out leading zeros.\n         MVC   DISPLAY1+16(10),OUTLIMW2\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(9),=C'OUTLIMIT '        Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL004                         No.\n         L     R5,XPRM_LIM-4\n         B     OLDFL04A\nOLDFL004 DS    0H\n         L     R5,XPRM_LIM            And load a register with it.\nOLDFL04A DS    0H\n         CVD   R5,CVDAREA             Convert it to printable.\n         OI    CVDAREA+7,X'0F'        Fix the sign of the packed number\n         MVC   OUTLIMVL(12),NEWPATT   Move in the pattern for EDIT.\n         ED    OUTLIMVL(12),CVDAREA+2   EDIT to cut out leading zeros.\n         MVC   DISPLAY1+14(12),OUTLIMVL\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(12),=C'VIO UNIT LNG'    Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL005                         No.\n         HEX   DISPLAY1+16,1,XPRM_VIO_U_SIZE+1-4\n         B     OLDFL05A\nOLDFL005 DS    0H\n         HEX   DISPLAY1+16,1,XPRM_VIO_U_SIZE+1\nOLDFL05A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(8),=C'VIO UNIT'         Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL006                         No.\n         MVC   DISPLAY1+16(8),XPRM_VIO_U-4\n         TR    DISPLAY1+16(8),TRTBLUP\n         B     OLDFL06A\nOLDFL006 DS    0H\n         MVC   DISPLAY1+16(8),XPRM_VIO_U\n         TR    DISPLAY1+16(8),TRTBLUP\nOLDFL06A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'CIPHER FLAG'     Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL007                         No.\n         HEX   DISPLAY1+16,1,XPRM_SW-4\n         B     OLDFL07A\nOLDFL007 DS    0H\n         HEX   DISPLAY1+16,1,XPRM_SW\nOLDFL07A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(12),=C'SYSOUT CLASS'    Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL008                         No.\n         MVC   DISPLAY1+16(1),XPRM_SOUT-4\n         B     OLDFL08A\nOLDFL008 DS    0H\n         MVC   DISPLAY1+16(1),XPRM_SOUT\nOLDFL08A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(8),=C'LOG NAME'         Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL009                         No.\n         MVC   DISPLAY1+16(8),XPRM_LOGNAME-4\n         B     OLDFL09A\nOLDFL009 DS    0H\n         MVC   DISPLAY1+16(8),XPRM_LOGNAME\nOLDFL09A DS    0H\n         TR    DISPLAY1+16(8),TRTBLUP\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(8),=C'LOGSEL 1'         Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL010                         No.\n         MVC   DISPLAY1+16(1),XPRM_LOGSEL_1-4\n         B     OLDFL10A\nOLDFL010 DS    0H\n         MVC   DISPLAY1+16(1),XPRM_LOGSEL_1\nOLDFL10A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(6),=C'LOGSEL'           Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL011                         No.\n         MVC   DISPLAY1+16(8),XPRM_LOGSEL-4\n         TR    DISPLAY1+16(8),TRTBLUP\n         B     OLDFL11A\nOLDFL011 DS    0H\n         MVC   DISPLAY1+16(8),XPRM_LOGSEL\n         TR    DISPLAY1+16(8),TRTBLUP\nOLDFL11A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'LOGSEL SIZE'     Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL012                         No.\n         HEX   DISPLAY1+16,2,XPRM_LOGSEL_SIZE-4\n         B     OLDFL12A\nOLDFL012 DS    0H\n         HEX   DISPLAY1+16,2,XPRM_LOGSEL_SIZE\nOLDFL12A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SYSCTL NAME'     Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL013                         No.\n         MVC   DISPLAY1+16(44),XPRM_SYSCTL-4\n         TR    DISPLAY1+16(44),TRTBLUP\nOLDFL013 DS    0H\n         MVC   DISPLAY1+16(44),XPRM_SYSCTL\n         TR    DISPLAY1+16(44),TRTBLUP\nOLDFL13A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SYSCTL SIZE'     Display entry title\n         TM    OLDFLAG,X'01'                    Old Version?\n         BZ    OLDFL014                         No.\n         HEX   DISPLAY1+16,2,XPRM_SYSCTL_SIZE-4\n         B     OLDFL14A\nOLDFL014 DS    0H\n         HEX   DISPLAY1+16,2,XPRM_SYSCTL_SIZE\nOLDFL14A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                   Blank display line\n         MVC   DISPLAY1(11),=C'USRCTL NAME'      Display entry title\n         TM    OLDFLAG,X'01'                     Old Version?\n         BZ    OLDFL015                          No.\n         MVC   DISPLAY1+16(44),XPRM_USRCTL-4\n         TR    DISPLAY1+16(44),TRTBLUP\n         B     OLDFL15A\nOLDFL015 DS    0H\n         MVC   DISPLAY1+16(44),XPRM_USRCTL\n         TR    DISPLAY1+16(44),TRTBLUP\nOLDFL15A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                   Blank display line\n         MVC   DISPLAY1(11),=C'USRCTL SIZE'      Display entry title\n         TM    OLDFLAG,X'01'                     Old Version?\n         BZ    OLDFL016                          No.\n         HEX   DISPLAY1+16,2,XPRM_USRCTL_SIZE-4\n         B     OLDFL16A\nOLDFL016 DS    0H\n         HEX   DISPLAY1+16,2,XPRM_USRCTL_SIZE\nOLDFL16A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\n         MVC   DISPLAY1,BLANKS                   Blank display line\n         MVC   DISPLAY1(11),=C'SPOOL CLASS'      Display entry title\n         TM    OLDFLAG,X'01'                     Old Version?\n         BZ    OLDFL017                          No.\n         MVC   DISPLAY1+16(1),XPRM_SPOOLCL-4\n         B     OLDFL17A\nOLDFL017 DS    0H\n         MVC   DISPLAY1+16(1),XPRM_SPOOLCL\nOLDFL17A DS    0H\n         APUT  DISPLAY1,L'DISPLAY1\nNODEDSET DS    0H                           Setup NODE/SMF loop\n         XR    R6,R6                        BCT register\n         XR    R7,R7                        Counting register\n         LH    R6,XPRM_NJE#                 Load number of entries\n         L     R5,NJESTART                  Point to start of table\nNODEDISP DS    0H                           Display NODE/SMF table\n         USING XPRM_NODE,R5\n         LA    R7,1(,R7)                    Count this entry\n         ST    R7,NJECOUNT\n         MVC   DISPLAY1,BLANKS              Blank display line\n         MVC   DISPLAY1(9),=C'NODE/SMF '    Display entry title\n         HEX   DISPLAY1+9,2,NJECOUNT+2      Display entry number\n         MVC   DISPLAY1+16(8),XPRM_NODE     Display node id\n         MVC   DISPLAY1+26(4),XPRM_SMF      Display SMF id\n         APUT  DISPLAY1,L'DISPLAY1          Put it out.\n         LA    R5,XPRM_NS_L(,R5)            Go to the next entry\n         BCT   R6,NODEDISP                  At end, just drop through\n         DROP  R2,R5\nRETURN   DS    0H\n         L     R13,SAVEAREA+4       RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)      RELOAD REGISTERS\n         XR    R15,R15              ZERO RETURN CODE ALWAYS\n         BR    R14                  RETURN TO CALLER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*           D  A  T  A     A  R  E  A  S                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nSAVEAREA DS    9D\nCVDAREA  DC    D'0'\nSAVER9   DC    F'0'\nNJESTART DC    F'0'\nNJECOUNT DC    F'0'\nCPPLSAVE DC    F'0'\nSAVEUPT  DC    F'0'\nSAVEECT  DC    F'0'\nSAVEPSCB DC    F'0'\nCMBUFAD  DC    F'0'\nCMBUFEND DC    F'0'\nCHARSTRT DC    F'0'\nKEYWRDLN DC    F'0'\nKEYWRDST DC    F'0'\nKEYSTOR  DC    CL8' '\nOUTLIMW1 DC    CL10' '\nOUTLIMW2 DC    CL10' '\nOUTLIMVL DC    CL12' '\n         DC    CL3'   '\nOLDPATT  DC    X'40202020202020202120'   Pattern for old OUTLIM value\nNEWPATT  DC    X'402020202020202020202120' Pattern for OUTLIM value\n         DC    CL3'   '\nOLDFLAG  DC    X'00'\n         DC    CL3'   '\nBLANKS   DC    CL145' '\nDISPLAY1 DC    CL64'                                              '\nDISPLAYT DC    CL45'INMXPARM - Display of Field Values'\nDISPLAYU DC    CL45'--------   ------- -- ----- ------'\nINMXADDR DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV4HEX  DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     Remove Unprintables               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRTBLUP  DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     Only accept Numeric               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRTBLN   DS    0D                                                        05491\n         DC    XL16'40404040404040404040404040404040'                    05492\n         DC    XL16'40404040404040404040404040404040'                    05493\n         DC    XL16'40404040404040404040404040404040'                    05494\n         DC    XL16'40404040404040404040404040404040'                    05495\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                    05507\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                 Only accept Alpha, and Uppercase      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRTBLA   DS    0D                                                        05491\n         DC    XL16'40404040404040404040404040404040'                    05492\n         DC    XL16'40404040404040404040404040404040'                    05493\n         DC    XL16'40404040404040404040404040404040'                    05494\n         DC    XL16'40404040404040404040404040404040'                    05495\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'                    05496\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'                    05496\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05496\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'                    05496\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'                    05496\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'                    05496\n         DC    XL16'40404040404040404040404040404040'                    05507\n         IKJXPRM\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INMXD$": {"ttr": 8452, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00D\\x01\\x055O\\x01\\x19\\x18o\\x00\"\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-05T00:22:44", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.EESCB.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(INMXD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(0)\n ENTRY   INMXD\n NAME    INMXD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INMXD@": {"ttr": 8454, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x17\\x01\\x054o\\x01\\x19\\x18o\\x00!\\x000\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2005-12-12T00:00:00", "modifydate": "2019-07-05T00:21:17", "lines": 48, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n  The INMXD TSO command is a means of displaying the fields of\n    the INMXPARM control block on an MVS system.\n\n    You can use the INMXD command to display the results obtained\n    by executing the CINMX command.  Use the INMXD command before\n    and after executing the CINMX command.  Or you can use it just\n    to check the current TRANSREC values in storage for this LPAR.\n\n)X SYNTAX  -\n    INMXD\n\n  REQUIRED - NONE\n  DEFAULT  - NONE\n  ALIAS    -\n  NOTE     - The INMXD command has been tested for MVS releases\n             back to MVS/ESA 5.2.2 and forward to z/OS 2.3.\n\n)O OPERANDS -\n))None\n\n Sample Command Output\n\n INMXPARM - Display of Field Values\n --------   ------- -- ----- ------\n INMXPARM ADDR   113B0E40\n LENGTH          0100\n NJE COUNT       0001\n NJE START       113B0F30\n INMX VERS       02\n INIT WARN            50000\n WARN INTRVL          15000\n OUTLIMIT           5000000\n VIO UNIT LNG    08\n VIO UNIT        SYSALLDA\n CIPHER FLAG     40\n SYSOUT CLASS    *\n LOG NAME        MISC\n LOGSEL 1        .\n LOGSEL          LOG.\n LOGSEL SIZE     0005\n SYSCTL NAME\n SYSCTL SIZE     0000\n USRCTL NAME     .NAMES.TEXT\n USRCTL SIZE     000B\n SPOOL CLASS     B\n NODE/SMF 0001   NODENAME  SMF\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IOSDIOVT": {"ttr": 8456, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00'\\x01\\x146/\\x01\\x15\\x01\\x9f\\x187\\x00>\\x00>\\x00>\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2014-12-28T00:00:00", "modifydate": "2015-01-19T18:37:27", "lines": 62, "newlines": 62, "modlines": 62, "user": "SBGOLOB"}, "text": "         MACRO\n         IOSDIOVT\nIOVT     DSECT                         IOS Vector Table          ESA41\n         DS    C'IOVT'\n         DS    H'476'                  Length of IOVT            RS1106\n         DS    XL2\nIOVTUL31 DS    V(ULUT)                 UCB LOOK-UP TABLE (fullword)\n         DS    3F\nIOVTCDA  DS    V(CDA)                  Config Data Area\n         DS    1F                      ???\n         DS    A                       IASC ??\n         DS    A                       IOS PIN QUEUE HEADERS\n         DS    A                       IOS PIN QUEUE ELEMENTS\n         DS    1F                      ???\n         DS    A                       TQE\n         DS    6F                      ???\n         DS    A                       CSC\n         DS    1F                      ???\n         DS    A                       IOS 31 BIT DST ENTRIES\n         DS    A                       IOS 24 BIT DST ENTRIES\n         DS    1F                      ???\n         DS    A                       IOS UCB SERVICES PC RTN\n         DS    A                       IODE\n         DS    3F                      ???\n         DS    A                       IOS HASH\n         DS    A                       IOS UCB HASH COLISIONS\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    4F                      ???\n         DS    A                       CAPT\n         DS    2F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       IOS CAPTURE UCB SERVICE\n         DS    A                       TRCB\n         DS    2F                      ???\n         DS    1F                      ???\n         DS    A                       MGFQ\n         DS    A                       CMVT\n         DS    A                       CPCT\n         DS    1F                      ???\n         DS    1F                      ???\n         DS    A                       IXSD\n         DS    CL8'SYSIOS01'\n         DS    6F                      ???\n         DS    A                       QDIO\n         DS    1F                      ???\n         DS    A                       SAUT\n         DS    4F                      ???\n         DS    A                       IOS PURGE WORK AREAS\nIOVTFLG1 DS    X                       IOVT-Flag\nIOVTMIDAW EQU   X'08'                  MIDAW ON?\n         DS    XL3                     ???\n         DS    A                       CCAP\n         ORG   IOVT+440                0x1B8                     JH1214\nIOVTULUT DS    D                       UCB V3 look-up table      JH1214\n         ORG   ,                                                 JH1214\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IOSDULUT": {"ttr": 8458, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x19\\x0f\\x01\\x12\\x19\\x0f\\x133\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xf7\\xf2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-07-08T00:00:00", "modifydate": "2012-07-08T13:33:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "SHOW721"}, "text": "         MACRO\n         IOSDULUT\nULUT     DSECT                         UCB Look-up Table         ESA41\n         DS    C'ULUT'\nULUTVERS DS    X                       version 1 or 2            RS0405\n         DS    AL1(245)                Subpool\n         DS    XL2,F                   UNUSED,DASB\nULUT1ST  DS    A(ULUENTRY)             FIRST LOOK-UP ENTRY\nULUTUCBC DS    F'561'                  Total number of LOOK-UP Entries\nULUTTAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULUTCOMM DS    F'032'                  number of COMM LOOK-UP Entries\nULUTDASD DS    F'256'                  number of DASD LOOK-UP Entries\nULUTDISP DS    F'128'                  number of DISP LOOK-UP Entries\nULUTUREC DS    F'032'                  number of UREC LOOK-UP Entries\nULUTCHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULUTCTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULUT+132\nULUENTRY DSECT                         UCB LOOK-UP ENTRY\nULUEDEVN DS    X'000D'                 DEVICE NUMBER\nULUEFLGS DS    X'4000'                 Flags\nULUEDYN   EQU  X'40'                   Dynamic UCB\nULUESEQN DS    XL2                     ?\n         DS    XL2                     ?\nULUEUCBP DS    V(UCBOB)                UCB ADDRESS\nULUELEN  EQU   *-ULUENTRY\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IOSDULU2": {"ttr": 8460, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x19\\x0f\\x01\\x12\\x19\\x0f\\x133\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xf7\\xf2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-07-08T00:00:00", "modifydate": "2012-07-08T13:33:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SHOW721"}, "text": "         MACRO\n         IOSDULU2\nULU2     DSECT                         UCB Look-up Table\n         DS    C'ULUT'\nULU2VERS DS    X                       version 1 or 2\n         DS    AL1(245)                Subpool\n         DS    XL2,F                   UNUSED,DASB\n         DS    F,F\nULU21ST  DS    A(UL2ENTRY)             FIRST LOOK-UP ENTRY\nULU2UCBC DS    F'561'                  Total number of LOOK-UP Entries\nULU2TAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULU2COMM DS    F'032'                  number of COMM LOOK-UP Entries\nULU2DASD DS    F'256'                  number of DASD LOOK-UP Entries\nULU2DISP DS    F'128'                  number of DISP LOOK-UP Entries\nULU2UREC DS    F'032'                  number of UREC LOOK-UP Entries\nULU2CHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULU2CTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULU2+264\nUL2ENTRY DSECT                         UCB LOOK-UP ENTRY\nUL2EDEVN DS    X'000D'                 DEVICE NUMBER\nUL2EFLGS DS    X'4000'                 Flags\nUL2EDYN   EQU  X'40'                   Dynamic UCB\nUL2ESEQN DS    XL2                     ?\n         DS    XL2                     ?\nUL2EUCBP DS    V(UCBOB)                UCB ADDRESS\nUL2ELEN  EQU   *-UL2ENTRY\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IOSDULU3": {"ttr": 8462, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x146/\\x01\\x146/\\x08T\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xf7\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-12-28T00:00:00", "modifydate": "2014-12-28T08:54:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "SHOW722"}, "text": "         MACRO\n         IOSDULU3\nULU3     DSECT                         UCB Look-up Table\n         DS    C'ULUT'\nULU3VERS DS    X                       version 3                 JH1214\n         DS    AL1                     Subpool\n         DS    XL2                     <filler>\n         DS    F                       <filler>\n         DS    F                       <filler>\nULU31ST  DS    D                       FIRST LOOK-UP ENTRY (V3)\n         DS    XL2                     <filler>\n         DS    XL2                     <filler>\nULU3UCBC DS    F                       Total number of LOOK-UP Entries\nULU3TAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULU3COMM DS    F'032'                  number of COMM LOOK-UP Entries\nULU3DASD DS    F'256'                  number of DASD LOOK-UP Entries\nULU3DISP DS    F'128'                  number of DISP LOOK-UP Entries\nULU3UREC DS    F'032'                  number of UREC LOOK-UP Entries\nULU3CHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULU3CTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULU3+264\nUL3ENTRY DSECT                         UCB LOOK-UP ENTRY\nUL3EDEVN DS    X'000D'                 DEVICE NUMBER\nUL3EFLGS DS    X'4000'                 Flags\nUL3EDYN   EQU  X'40'                   Dynamic UCB\nUL3ESEQN DS    XL2                     ?\n         DS    XL2                     ?\nUL3EUCBP DS    V(UCBOB)                UCB ADDRESS\nUL3ELEN  EQU   *-UL3ENTRY\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOADLIB": {"ttr": 8464, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01/\\x00H\\x01 1\\x0f\\x01 1\\x0f\\x183\\x16\\xae\\x16\\xae\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.47", "flags": 0, "createdate": "2020-11-05T00:00:00", "modifydate": "2020-11-05T18:33:48", "lines": 5806, "newlines": 5806, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LOADTCTP": {"ttr": 10762, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x19\\x15O\\x01\\x19\\x17o\\x00$\\x00\\x0e\\x00\\x0b\\x00\\x00\\xe3\\xc5\\xe2\\xe3\\xc9\\xd5@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-06-03T00:00:00", "modifydate": "2019-06-25T00:24:00", "lines": 14, "newlines": 11, "modlines": 0, "user": "TESTIN"}, "text": "* LOADTEST PARMS\n*---+----1----+-\n--TCT--\nTSOEXEC\nSDSF\nPDS\nPDS86\n--SCT--\nF       IKJT9FIZ\nFI      IKJT9FIZ\nFIN     IKJT9FIZ\nFIND    IKJT9FIZ\nLB      IKJT9LBZ\nLG      IKJT9LGZ\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADTDIS": {"ttr": 10764, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x004\\x01\\x19\\x15O\\x01\\x19\\x17\\x0f!F\\x00\\n\\x00\\x06\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-06-03T00:00:00", "modifydate": "2019-06-19T21:46:34", "lines": 10, "newlines": 6, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBT JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//* -------------------------------------------------------- */\n//*     RUN LOADTEST - DISPLAY ONLY, NO REPLACEMENT          */\n//* -------------------------------------------------------- */\n//LOADTEST EXEC PGM=LOADTEST\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT DD  SYSOUT=*\n//TESTOUT  DD  SYSOUT=*\n//*TESTIN  DD  DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(LOADTCTP)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADTES$": {"ttr": 11009, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x001\\x01\\x055O\\x01\\x19\\x17\\x0f!P\\x00!\\x00\\x1d\\x00\\x00\\xc1\\xe2\\xd4\\xd3\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-06-19T21:50:31", "lines": 33, "newlines": 29, "modlines": 0, "user": "ASMLJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//* ------------------------------------------------------------- */\n//*   ASSEMBLE AND LINKEDIT THE LOADTEST PROGRAM                  */\n//* ------------------------------------------------------------- */\n//*   THE ALIAS OF LOADTN WILL JUST RUN THE POST-PROCESSING       */\n//*   TEST PARM REPORT PROGRAM LOADTN, USING OPTIONAL DD NAMES    */\n//*   SYSPRNT2 AND TESTOUT2.                                      */\n//* ------------------------------------------------------------- */\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(LOADTEST)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(1)\n ALIAS   LOADTN\n ENTRY   LOADTEST\n NAME    LOADTEST(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADTEST": {"ttr": 11011, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x16\\x01\\x056?\\x01\\x19\\x17\\x8f\\x10F\\x06\\x9b\\x005\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2005-12-29T00:00:00", "modifydate": "2019-06-27T10:46:16", "lines": 1691, "newlines": 53, "modlines": 0, "user": "SBGOLOB"}, "text": "LOADTEST TITLE 'LOADTEST - RELOAD AND/OR DISPLAY TSO TEST FIELDS'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a batch        *\n*                   program, APF authorized when it is used           *\n*                   to reload the TEST parameters from TESTIN         *\n*                   card input, or when regressing to a previous      *\n*                   TPT control block using PARM=R.                   *\n*                                                                     *\n*        ****  THE LOADTEST PROGRAM IS NOT RE-ENTRANT ****            *\n*                                                                     *\n*  JCL:                                                               *\n*                                                                     *\n*  //SHOWTEST JOB ,'MY JOBCARD',CLASS=A,                              *\n*  //    MSGCLASS=X,NOTIFY=&SYSUID                                    *\n*  //*                                                                *\n*  //LOADTEST EXEC PGM=LOADTEST PARM=R                                *\n*  //STEPLIB  DD  DISP=SHR,DSN=MY.LOAD.LIBRARY                        *\n*  //SYSPRINT DD  SYSOUT=*                                            *\n*  //SYSPRNT2 DD  SYSOUT=*                                            *\n*  //TESTOUT  DD  SYSOUT=*      (LRECL=80 DATASET OR SYSOUT)          *\n*  //TESTOUT2 DD  SYSOUT=*      (LRECL=80 DATASET OR SYSOUT)          *\n*  //TESTIN   DD  DISP=SHR,DSN=IBMUSER.B.ASM(LOADTCT1)                *\n*                                                                     *\n*  Note:  PARM=R on the EXEC card will REGRESS the TPT (and its       *\n*         associated TCT and SCT tables) to the previous value,       *\n*         if it exists.                                               *\n*         When PARM=R, the TESTIN DD name is required, but its        *\n*         contents is ignored.  Best to code: //TESTIN DD DUMMY       *\n*         when PARM=R.                                                *\n*                                                                     *\n*  SUBROUTINE:                                                        *\n*                                                                     *\n*  LOADTN   -  PRODUCES REPORTS AT THE END OF PROCESSING.             *\n*              LOADTN is a separate called program.                   *\n*                                                                     *\n*  DD NAME DESCRIPTIONS:                                              *\n*                                                                     *\n*  SYSPRINT DD IS THE ONLY REQUIRED DDNAME, AND IT ALWAYS HAS         *\n*  TO BE PRESENT.  IT PRODUCES A REPORT REFLECTING THE INITIAL        *\n*  STATE OF THE TEST CONTROL BLOCKS.                                  *\n*                                                                     *\n*  SYSPRINT also contains any relevant messages if the TEST control   *\n*           blocks have been changed (messages at the bottom).        *\n*                                                                     *\n*  TESTOUT  DD :  PRODUCES A CARD DECK IN TESTIN FORM, WHICH WILL     *\n*                 REPRODUCE THE LOAD OF THE CURRENT TEST PARAMETERS   *\n*                 (BEFORE ANY CHANGES OCCUR).                         *\n*                                                                     *\n*  TESTOUT2 DD :  PRODUCES THE TESTOUT-TYPE CARD DECK, BUT AT THE     *\n*                 END OF PROCESSING.  IF CHANGES HAVE BEEN MADE,      *\n*                 THEY WILL BE REFLECTED HERE.                        *\n*                                                                     *\n*  SYSPRNT2 DD :  SIMILAR REPORT TO SYSPRINT DD, BUT DONE AT THE      *\n*                 END OF PROCESSING, SO CHANGES (IF ANY) ARE          *\n*                 REPORTED.  THE SYSPRNT2 DD NAME DOES NOT CONTAIN    *\n*                 ANY EXTRA MESSAGES, THE WAY SYSPRINT DOES.          *\n*                                                                     *\n*  TESTIN   DD :  REQUIRED IF YOU WANT TO MAKE A NEW COPY OF THE      *\n*                 TEST CONTROL BLOCKS:  TPT, TCT, SCT.  USES          *\n*                 CONTROL CARD INPUT (SEE BELOW).                     *\n*                                                                     *\n*  THE TESTIN DD NAME IS NECESSARY IF YOU WANT TO CHANGE THE TEST     *\n*  CONTROL BLOCKS.                                                    *\n*                                                                     *\n*  THE TESTIN DD NAME CONTAINS CARDS TO CHANGE THE TEST FIELD         *\n*  ENTRIES.  WHEN LOADTEST IS RUN WITH THE TESTOUT DD NAME, THEN A    *\n*  PROPERLY FORMATTED TESTIN DECK IS CREATED FROM THE EXISTING TEST   *\n*  PARMS THAT ARE CURRENTLY IN EFFECT.  THIS FILE MAY BE EDITED, AND  *\n*  USED AS FURTHER TESTIN INPUT TO ANOTHER LOADTEST RUN.              *\n*                                                                     *\n*  TESTIN AND TESTOUT DD NAMES ARE NOW OPTIONAL.  IF TESTIN IS LEFT   *\n*  OUT, THEN NO CHANGES TO THE TEST PARAMETERS ARE PERFORMED.         *\n*  SYSPRNT2 AND TESTOUT2, WHICH SHOW THE STATE OF THE TEST FIELDS     *\n*  AFTER ANY CHANGES WERE MADE, ARE OPTIONAL AS WELL.                 *\n*                                                                     *\n*  IF TESTOUT IS LEFT OUT, THEN TESTIN-FORMATTED OUTPUT FOR THE       *\n*  CURRENT TEST PARMS, IS NOT PRODUCED.                               *\n*                                                                     *\n*  TESTIN DD REQUIREMENTS:  (BE VERY CAREFUL WITH THE COLUMNS)        *\n*                                                                     *\n*       The string --TCT-- from column 1                              *\n*       indicates that the following entries                          *\n*       will be put in the TCT table.                                 *\n*       These names go from columns 1 thru 8.                         *\n*                                                                     *\n*       The string --SCT-- from column 1                              *\n*       indicates that the following entries                          *\n*       will be put in the SCT table.                                 *\n*       The command name goes from columns 1 thru 8.                  *\n*       The program module name which is executed                     *\n*       by that command goes from columns 9 thru 16.                  *\n*                                                                     *\n*       You have to be very exact with the columns.                   *\n*                                                                     *\n*       An asterisk (*) in column 1 causes that card                  *\n*       to be ignored.  So does a space in column 1.                  *\n*                                                                     *\n*  THE TESTOUT DD NAME PRODUCES A PROPERLY FORMATTED TESTIN           *\n*  FILE, TO RELOAD THE PREVIOUS TEST CONFIGURATION.                   *\n*                                                                     *\n*  SAMPLE TESTIN DD:  (be careful with columns 1-8 and 9-16)          *\n*                                                                     *\n*  * OLD LOADTEST PARMS  (a sample)   (begin in column 1)             *\n*  *---+----1----+-                                                   *\n*  --TCT--                                                            *\n*  TSOEXEC                                                            *\n*  SDSF                                                               *\n*  PDS                                                                *\n*  PDS86                                                              *\n*  --SCT--                                                            *\n*  F       IKJT9FIZ                                                   *\n*  FI      IKJT9FIZ                                                   *\n*  FIN     IKJT9FIZ                                                   *\n*  FIND    IKJT9FIZ                                                   *\n*  LB      IKJT9LBZ                                                   *\n*  LG      IKJT9LGZ                                                   *\n*                                                                     *\n*                                                                     *\n*       Function:   To display/change values of the TEST IKJTSOxx     *\n*                   PARMLIB settings as they are represented          *\n*                   internally in the TPT, TCT, SCT control           *\n*                   blocks.                                           *\n*                                                                     *\n*          Author:  Sam Golob               Version:   1.8            *\n*                                                                     *\n*            Date:  Jun 20, 2019                                      *\n*                                                                     *\n*   DDNAME SUMMARY:                                                   *\n*                                                                     *\n*   SYSPRINT - Produces a report of the CURRENT (before loading)      *\n*              TEST information.  Contains diagnosis messages.        *\n*                                                                     *\n*   SYSPRNT2 - Produces a similar report to SYSPRINT, but at the      *\n*              end of processing.  This report reflects changes,      *\n*              if any, to the TEST parameters.                        *\n*                                                                     *\n*   TESTOUT  - Converts the CURRENT TEST information into input       *\n*              cards, to feed into another TESTLOAD invocation,       *\n*              so the current information can be reloaded by          *\n*              TESTLOAD (in case you want to back the TESTIN          *\n*              changes out).                                          *\n*                                                                     *\n*   TESTOUT2 - Same as TESTOUT, but at end of procesing, and          *\n*              reflecting any changes to the tables (if any)          *\n*              that have been made.                                   *\n*                                                                     *\n*   TESTIN   - Cards to reload new TEST information into storage.     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*   RETURN CODES:   0 - SUCCESSFUL DISPLAY and/or SUCCESSFUL          *\n*                       CHANGE.                                       *\n*                                                                     *\n*                   4 - Original tables were damaged, and TESTIN      *\n*                       cards were available, so that new tables      *\n*                       were constructed from the TESTIN cards.       *\n*                                                                     *\n*                       This condition code also occurs when          *\n*                       trying to regress to a previous level of      *\n*                       the tables, and the address of the previous   *\n*                       table either does not exist, or if it         *\n*                       points to an invalid TCT.                     *\n*                                                                     *\n*                   8 - TPT or TCT or SCT corrupted.  See error       *\n*                       messages in the SYSPRINT DD name.  This       *\n*                       can happen if there is no TESTIN card deck.   *\n*                                                                     *\n*                       (Hint:  You can create new TEST tables        *\n*                               if there is a valid TESTIN deck.)     *\n*                                                                     *\n*                  16 - Program was not APF-authorized to make        *\n*                       control block replacements.                   *\n*                                                                     *\n*                       Appropriate accompanying messages are         *\n*                       written to the SYSPRINT DD name.              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*  Change Log:                                                        *\n*    2016/08/07 - 1.0 - Initial version - Tested with TSO/E Version   *\n*                       4.                                            *\n*                                                                     *\n*    2019/06/03 - 1.1 - Turned this into a batch program, to produce  *\n*                       output compatible with the LOADTEST program.  *\n*                       (DDNAME=TESTOUT)                              *\n*                                                                     *\n*    2019/06/14 - 1.2 - Added TESTIN DD name, to allow reloading of   *\n*                       the TEST tables.                              *\n*                                                                     *\n*    2019/06/14 - 1.3 - TESTIN and TESTOUT DD names have been made    *\n*                       optional.  If they are left out then their    *\n*                       output is not produced.  If TESTIN is left    *\n*                       out, then no changes to the TEST parameters   *\n*                       are made, and the program does not have to    *\n*                       be executed APF-authorized.  The SYSPRINT     *\n*                       DD name always has to be there.               *\n*                       Return code 16 if program not APF-authorized  *\n*                       -and- the TESTIN DD is coded in the JCL.      *\n*                       (I.e. you are trying to load a new table)     *\n*                                                                     *\n*    2019/06/18 - 1.4 - Take some steps to validate the TESTIN        *\n*                       file entries.                                 *\n*                       Allow the program to show the state of the    *\n*                       file entries after any changes have been      *\n*                       made.  DD names:  SYSPRNT2 and TESTOUT2       *\n*                       correspond to SYSPRINT and TESTOUT, but       *\n*                       they are created after the program has done   *\n*                       any actions, when TESTIN has been coded.      *\n*                       If no actions were performed, then SYSPRNT2   *\n*                       and TESTOUT2 would not show changes.          *\n*                                                                     *\n*    2019/06/19 - 1.5 - Increased size of tables.  Removed size       *\n*                       restriction of X'FF'.  They are somewhat      *\n*                       bigger now.  See label WORKAREA for actual    *\n*                       table size limits.  (Pretty big.)             *\n*                                                                     *\n*                       If the old table is corrupted, and we have    *\n*                       a good TESTIN card deck, then we can build    *\n*                       a new table anyway.  (Return code = 4)        *\n*                                                                     *\n*    2019/06/20 - 1.6 - Fixed FREEMAIN of table workarea.             *\n*                       Improved comments.                            *\n*                                                                     *\n*    2019/06/24 - 1.7 - Alter X'24' off the new TPT to contain the    *\n*                       address of the previous TPT, when we create   *\n*                       a new TPT.  So the new TPT now contains the   *\n*                       address of the previous TPT, and that last    *\n*                       TPT can therefore be restored, using the      *\n*                       EXEC card PARM=R.  In order for this to       *\n*                       work, the TESTIN DD name needs to be          *\n*                       present, although its contents is ignored.    *\n*                       If you code //TESTIN DD DUMMY in the JCL,     *\n*                       it is sufficient, and this is probably the    *\n*                       best practice when coding PARM=R.             *\n*                                                                     *\n*                       For PARM=R (regressing the tables to a        *\n*                       previous version), release the storage        *\n*                       held by the previous tables.                  *\n*                                                                     *\n*    2019/06/26 - 1.8 - When REGRESS-ing tables with PARM=R, before   *\n*                       we free the old tables' storage, we clear     *\n*                       them to zeroes.  This stops us from           *\n*                       \"apparently\" cluttering CSA.                  *\n*                       When obtaining storage for new tables,        *\n*                       specify OWNER=SYSTEM in the STORAGE macro,    *\n*                       so ownership of the storage is not dependent  *\n*                       on the invoking job.                          *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Programming Notes:                                                 *\n*                                                                     *\n*    The TEST command information from the IKJTSOxx member of         *\n*    parmlib, is reflected in 3 control blocks:  TPT, TCT, SCT.       *\n*                                                                     *\n*    The TPT is pointed to by the TEST address at x'28' off           *\n*    the beginning of the TPVT.  The TPT points to all the rest       *\n*    of the information, as per the macro description below.          *\n*                                                                     *\n*                                                                     *\n*             MACRO                                                   *\n*             IKJTPT                                                  *\n*    TPT      DSECT                         TPT Control block         *\n*    TPT_ID   DS    C'TPT '                 Block id                  *\n*    TPT_LENGTH DS H                        Total length of c.b.      *\n*    TPT_VERS DS    C                       TPT Version               *\n*             DS    C                       Reserved X'00'            *\n*             DS    F                       zeros                     *\n*    TPT_TCT_ENTRY DS A                     Address of TSOCMD c.b.    *\n*    TPT_TCT_LENGTH DS F                    Length of TSOCMD c.b.     *\n*    *                                      Length - 4 / 8 = #        *\n*    TPT_SCT_ENTRY DS A                     Address of SUBCMD c.b.    *\n*    TPT_SCT_LENGTH DS F                    Length of SUBCMD c.b.     *\n*    *                                      Length - 4 / 16 = #       *\n*             DS    3F                                                *\n*    TCT_TEST DSECT                                                   *\n*    TCT_ID   DS    C'TCT '                 Block id                  *\n*    TCT_TSOCMD DS  CL8                     A TSOCMD                  *\n*    TCT_ENTRY_END DS 0C                                              *\n*    *                                      The last entry is x'40'   *\n*    SCT_TEST DSECT                                                   *\n*    SCT_ID   DS    C'SCT '                 Block id                  *\n*    SCT_SUBCMD DS  CL8                     A SUBCMD                  *\n*    SCT_PGM  DS    CL8                     A SUBCMD module name      *\n*    *                                      The last entry is x'40'   *\n*    SCT_ENTRY_END DS 0C                                              *\n*             MEND                                                    *\n*                                                                     *\n*    The TEST information in storage consists of 3 control blocks:    *\n*                                                                     *\n*    TPT  -  General information:  Points to the TCT (names of        *\n*            programs) and the SCT (names of subcommands and the      *\n*            subprogram names that they invoke).  Size = x'28' (40)   *\n*                                                                     *\n*    TCT  -  List of programs which are callable from TEST or         *\n*            TESTAUTH.   Size = variable                              *\n*                                                                     *\n*    SCT  -  List of subcommands (first 8 characters) and the names   *\n*            of the subprograms which they call (second 8 characters) *\n*                        Size = variable                              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.  *\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         L     R4,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSP000    EQU   0\n*\nLOADTEST CSECT\nLOADTEST AMODE 31\nLOADTEST RMODE 31\n         B     BEGINN-*(,R15)           Eyecatcher\n         DC    CL19'LOADTEST VER 1.8  -'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         STM   R14,R12,12(R13)\n         LR    R5,R1                    Save parm pointer.\n         USING LOADTEST,R12,R11,R10\n         LR    R12,R15                  Set up base registers.\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LA    R1,SAVEAREA              NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)               FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)               BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1                   NEW SAVE AREA ADDRESS\n         SPACE 1\n* -----------------------\n         LR    R1,R5                    Restore parm pointer.\n         ST    R1,PARMSAVE            Store the PARM pointer into this\n*                                     program, so it doesn't get lost.\n* -----------------------\n         MVI   BLANKS-1,X'40'           Initialize blanks.\n         MVC   BLANKS,BLANKS-1          Fill field with blanks.\n         MVI   FLAGSYST,X'00'           Initialize flags.\n         MVI   PARMFLAG,X'00'           Initialize flags.\n* -----------------------\nTESTPARM DS    0H                       Get parm, if any.\n         L     R1,PARMSAVE              Repoint to parms\n         L     R2,0(,R1)                Point to buffer\nPARM     OI    2(R2),C' '               Uppercase one character.\n* -----------------------\n         MVC   PARMLETR(1),2(R2)        Save the parm character.\n         CLI   2(R2),C'R'               Is it \"R\" for Restore?\n         BNE   NOREGRES                 No.\n         OI    PARMFLAG,X'01'           Yes. Set flag so we know.\nNOREGRES DS    0H\n* -----------------------\n* ----------------------------------------------------------------- *\nTIOTSCAN DS    0H             Determine the presence of Optional    *\n*                             DDNAMES:  TESTOUT AND TESTIN.         *\n* ----->                      OPEN them when there is JCL for them. *\n* ----------------------------------------------------------------- *\n         L     R2,16          R2=CVT\n         L     R2,0(,R2)      R2=TCB WORDS\n         L     R2,4(,R2)      R2=MY TCB\n         L     R2,12(,R2)     R2=TIOT\n         LA    R2,24(,R2)     R2=FIRST DD ENTRY\nTIOTLOOP CLC   0(4,R2),=XL4'00' END OF TIOT?\n         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES\n         CLC   4(8,R2),TESTIN+40    TESTIN DDNAME THERE?\n         BNE   TIOTSYSN       NO\n         OI    FLAGSYST,X'01'       SHOW PRESENCE OF TESTIN   DD\n         B     TIOTNEXT       CONTINUE\nTIOTSYSN CLC   4(8,R2),TESTOUT+40\n         BNE   TIOTNEXT\n         OI    FLAGSYST,X'02'       SHOW PRESENCE OF TESTOUT  DD\n         B     TIOTNEXT\nTIOTNEXT SR    R3,R3\n         IC    R3,0(,R2)      R3=LENGTH OF DD ENTRY\n         AR    R2,R3          R2=NEXT DD ENTRY\n         B     TIOTLOOP       GO CHECK IT\nTIOTSEND DS    0H\n* ----------------------------------------------------------------- *\nDTITLE   DS    0H                              Print the report title.\n         OPEN  (SYSPRINT,(OUTPUT))\n         MVC   LINE,LINE-1\n         MVC   LINE(13),=C'Parm Value:  '      Display coded parm.\n         MVC   LINE+16(1),PARMLETR             In EBCDIC\n         HEX   LINE+20,1,PARMLETR              And in Hex\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1                     Display SYSPRINT title\n         MVC   LINE(L'DISPLAYT),DISPLAYT\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAYU),DISPLAYU\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1\n         TM    FLAGSYST,X'02'                  Is TESTOUT there?\n         BZ    NOTESTOT                        No. Skip its stuff.\n         OPEN  (TESTOUT,(OUTPUT))\n         MVC   OUTREC,OUTREC-1                 Clear line\n         MVC   OUTREC(20),=C'* OLD LOADTEST PARMS' TESTOUT header\n         PUT   TESTOUT,OUTREC\n         MVC   OUTREC,OUTREC-1                 Clear line\n         MVC   OUTREC(16),=C'*---+----1----+-' Proper columns.\n         PUT   TESTOUT,OUTREC\n         MVC   OUTREC,OUTREC-1                 Clear line\nNOTESTOT DS    0H\n* ------------------------------------------------------------------ *\n*              Follow addresses to Parmlib TEST values               *\n* ------------------------------------------------------------------ *\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R6,X'4C'(,R2)       Point to TPVT (Parmlib Vect Tbl)\n         L     R2,X'28'(,R6)       Point to TPT control block of TEST\n         XR    R3,R3               Clear work register\n* ------\n* ------    GET 'TEST' PARMLIB ADDRESSES AND VALUES FOR REPORTING\n* ------\n         ST    R2,TPTADDR          Store away TPT address\n         CLC   =C'TPT',0(R2)       Is TPT eyecatcher in proper place?\n         BNE   NOTTPT              No. We aren't looking at TPT.\n*                                  Or else the TPT has been ruined.\n*                                  Get all TPT fields........\n         LH    R3,4(,R2)           Get TPT size\n         STH   R3,TPTSIZE\n         MVC   TPTVERS(1),6(R2)    TPT version number\n         L     R3,12(,R2)\n         ST    R3,TCTADDR          TCT address\n         L     R3,16(,R2)\n         ST    R3,TCTSIZE          TCT size\n         LR    R4,R3               Copy size value\n         S     R4,=F'4'            Subtract 4\n         SRL   R4,3                Divide by 8 (size of TCT entry)\n         BCTR  R4,0                Subtract 1 because of blank entry\n         ST    R4,TCTENTR          Save # of TCT entries - actual\n         L     R3,20(,R2)\n         ST    R3,SCTADDR          SCT address\n         L     R3,24(,R2)\n         ST    R3,SCTSIZE          SCT size\n         LR    R4,R3               Copy size value\n         S     R4,=F'4'            Subtract 4\n         SRL   R4,4                Divide by 16 (size of SCT entry)\n         BCTR  R4,0                Subtract 1 because of blank entry\n         ST    R4,SCTENTR          Save # of SCT entries - actual\n         L     R3,36(,R2)          Look at our new \"old TPT field\"\n         ST    R3,OLDTPT           Store its address away\n         MVC   OLDTPTO,OLDTPT      Preserve it because OLDTPT altered\n         LTR   R3,R3               Zero, meaning we didn't make it?\n         BNZ   GOTOLTPT            No. This TPT is restorable.\n         OI    PARMFLAG,X'02'      Yes. Show not restorable.\nGOTOLTPT DS    0H\n         B     CONTTPT             Continue with Control Block Display\nNOTTPT   DS    0H                  TPT control block appears invalid.\n         MVC   LINE,LINE-1         Issue message and RC = 8.\n         MVC   DISPLAY1,BLANKS                Error msg if not TPT.\n         MVC   DISPLAY1(L'TPTBAD),TPTBAD      Show TPT was bad\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         TM    FLAGSYST,X'01'       Is TESTIN available?\n         BZ    BADTPT1              No. Tell em TPT is bad\n         OI    FLAGSYST,X'C0'       Return code = 4   8+4\n         B     TSOINIT              Build a new table anyway.\nBADTPT1  DS    0H\n         OI    FLAGSYST,X'80'       Indicate return code change.\n         LA    R2,8                 RC = 8\n         B     RETURN\nCONTTPT  DS    0H                         Now display all TPT fields.\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TPT ADDRESS'    Display entry title\n         HEX   DISPLAY1+16,4,TPTADDR           Display address\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TPT SIZE   '    Display entry title\n         HEX   DISPLAY1+16,2,TPTSIZE           Only a halfword field\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TPT VERSION'    Display entry title\n         HEX   DISPLAY1+16,1,TPTVERS           Single byte field\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TCT ADDRESS'    Display entry title\n         HEX   DISPLAY1+16,4,TCTADDR           Display address\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TCT SIZE   '    Display entry title\n         HEX   DISPLAY1+16,2,TCTSIZE+2         Cut off 1st 2 bytes\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TCT ENTRIES'    Display entry title\n         HEX   DISPLAY1+16,2,TCTENTR+2         Cut off 1st 2 bytes\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SCT ADDRESS'    Display entry title\n         HEX   DISPLAY1+16,4,SCTADDR           Display address\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SCT SIZE   '    Display entry title\n         HEX   DISPLAY1+16,2,SCTSIZE+2         Cut off 1st 2 bytes\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SCT ENTRIES'    Display entry title\n         HEX   DISPLAY1+16,2,SCTENTR+2         Cut off 1st 2 bytes\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         CLC   OLDTPT,=F'0'                    IBM copy of TPT?\n         BE    NOOLDTPT                        Yes. Don't show line.\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'OLD TPT ADR'    Display entry title\n         HEX   DISPLAY1+16,4,OLDTPT            Display address\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\nNOOLDTPT DS    0H\nDSPLYTSO DS    0H                               Title for TSO cmds\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'TSOCMDT),TSOCMDT      Display title\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'PROGRMT),PROGRMT      Display title\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\nTSOINIT  DS    0H\n         L     R3,TCTADDR                   Set up for TSOCMD display\n         L     R4,TCTSIZE\n         CLC   =C'TCT',0(R3)                Starts with TCT ?\n         BE    TSOSTART                     Yes. Continue.\n         MVC   DISPLAY1,BLANKS              No.  Error. RC = 8.\n         MVC   DISPLAY1(L'TCTBAD),TCTBAD    Send appropriate message\n         MVC   LINE,LINE-1                  Show TCT was bad.\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         TM    FLAGSYST,X'01'            Is TESTIN available?\n         BZ    BADTCT1                   No. Tell em TCT is bad\n         OI    FLAGSYST,X'C0'            Return code = 4  8+4\n         B     SUBINIT                   Build a new table anyway.\nBADTCT1  DS    0H\n         OI    FLAGSYST,X'80'            Indicate return code change.\n         LA    R2,8                      RC = 8\n         B     RETURN                       Go straight out.\nTSOSTART DS    0H\n         TM    FLAGSYST,X'02'               Putting out TESTOUT?\n         BZ    NOOUT01                      No.\n         MVC   OUTREC,OUTREC-1              Yes.\n         MVC   OUTREC(7),=C'--TCT--'        Put out TCT header.\n         PUT   TESTOUT,OUTREC\nNOOUT01  DS    0H\n         LA    R3,4(,R3)                    Point to pgm table\nTSOLOOP  DS    0H\n         CLC   =C'        ',0(R3)           End of table?\n         BE    DSPLYSUB\n         MVC   DISPLAY1,BLANKS              Blank display line\n         MVC   DISPLAY1+8(8),0(R3)          Show TSOCMD\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         TM    FLAGSYST,X'02'               Putting out TESTOUT?\n         BZ    NOOUT02                      No.\n         MVC   OUTREC,OUTREC-1              Yes.\n         MVC   OUTREC(8),0(R3)              Write out TCT entry.\n         PUT   TESTOUT,OUTREC\nNOOUT02  DS    0H\n         LA    R3,8(,R3)                    Next entry\n         B     TSOLOOP\n*                                           PUT IN LENGTH CHECK LATER\nDSPLYSUB DS    0H\n         MVC   DISPLAY1,BLANKS              Blank display line\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS              Blank display line\n         MVC   DISPLAY1(L'SUBCMDT),SUBCMDT\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         MVC   DISPLAY1,BLANKS              Blank display line\n         MVC   DISPLAY1(L'COMMANT),COMMANT  Display title\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\nSUBINIT  DS    0H\n         L     R3,SCTADDR                   Set up for SUBCMD display\n         L     R4,SCTSIZE\n         CLC   =C'SCT',0(R3)                Starts with SCT ?\n         BE    SUBSTART                     Yes. Continue.\n         MVC   DISPLAY1,BLANKS              No.  Error. RC = 8.\n         MVC   DISPLAY1(L'SCTBAD),SCTBAD    Send appropriate message\n         MVC   LINE,LINE-1                  Show SCT was bad.\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         TM    FLAGSYST,X'01'               Is TESTIN available?\n         BZ    BADSCT1                      No. Tell em SCT is bad\n         OI    FLAGSYST,X'C0'               Return code = 4  8+4\n         B     GETWORK                      Build a new table anyway.\nBADSCT1  DS    0H\n         OI    FLAGSYST,X'80'               Indicate return code change\n         LA    R2,8                         RC = 8\n         B     RETURN                       Go straight out.\nSUBSTART DS    0H\n         LA    R3,4(,R3)                    Point to subcmd table\n         TM    FLAGSYST,X'02'               Putting out TESTOUT?\n         BZ    NOOUT03                      No.\n         MVC   OUTREC,OUTREC-1              Yes.\n         MVC   OUTREC(7),=C'--SCT--'        Put out SCT header.\n         PUT   TESTOUT,OUTREC\nNOOUT03  DS    0H\nSUBLOOP  DS    0H\n         CLC   =C'        ',0(R3)           End of table?\n         BE    GETWORK\n         MVC   DISPLAY1,BLANKS              Blank display line\n         MVC   DISPLAY1+2(8),0(R3)          Show SUBCMD\n         MVC   DISPLAY1+15(8),8(R3)         Show module name\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRINT,LINE\n         TM    FLAGSYST,X'02'               Putting out TESTOUT?\n         BZ    NOOUT04                      No.\n         MVC   OUTREC,OUTREC-1              Yes.\n         MVC   OUTREC(8),0(R3)              Show SUBCMD\n         MVC   OUTREC+8(8),8(R3)            Show module name\n         PUT   TESTOUT,OUTREC               Write TCT entry.\n         MVC   OUTREC,OUTREC-1\nNOOUT04  DS    0H\n         LA    R3,16(,R3)                   Next entry\n         B     SUBLOOP                      Go on until EOT.\n* ------------------------------------------------------------------ *\n*   Is the TESTIN DD name present?  This indicates that we should    *\n*   create a new TPT, TCT, and SCT.  Then re-point to the new TPT    *\n*   address in the TPVT.  This step needs APF-authorization.         *\n* ------------------------------------------------------------------ *\nGETWORK  DS    0H      Get a workarea to format new TCT and SCT.     *\n* ------------------------------------------------------------------ *\n         TM    FLAGSYST,X'01'          Was a TESTIN DDNAME in JCL?\n         BZ    NOTESTIN                No. Not creating a new TPT.\n         ST    R2,SAVER2A              Save R2\n         LA    R2,WORKSIZE             TCT and SCT.\n         GETMAIN R,LV=(R2)\n         ST    R1,SAVEGET              Save address of GETMAINed\n         L     R2,SAVER2A              Restore R2\n         LR    R5,R1                   Point to gotten WORKTCT.\n         USING WORKAREA,R5\n         ST    R5,WRKTCT               Address of first section.\n         LA    R1,WORKSCT-WORKAREA     Second section, WORKSCT.\n         LA    R6,0(R1,R5)             Point to WORKSCT.\n         ST    R6,WRKSCT               Address of second section.\n* ------------------------------------------------------------------ *\nDOTESTIN DS    0H                      Measure sizes, create tables. *\n* ------------------------------------------------------------------ *\n         OPEN  (TESTIN,(INPUT))\n         LA    R7,TSTINREC             Point to input record\n         LA    R8,4                    Size of TCT header\n         LA    R9,4                    Size of SCT header\n         MVC   0(4,R5),=C'TCT '        MOVE TO\n         MVC   0(4,R6),=C'SCT '           STORAGE AREAS\n         LA    R5,4(,R5)               Bump past TCT header\n         LA    R6,4(,R6)               Bump past SCT header\nTESTNLUP DS    0H                      Begin in column 1.\n         GET   TESTIN,TSTINREC\n         CLI   0(R7),C'*'              Look for comment record\n         BE    TESTNLUP                If so get another\n         CLI   0(R7),C' '              Is first char blank?\n         BE    TESTNLUP                Yes, then ignore record.\n         CLC   0(8,R7),=CL8' '         Blank entry?\n         BE    TESTNLUP                Skip card\nTESTNTYP DS    0H\n         CLC   0(7,R7),=C'--TCT--'     Start of TCT entry?\n         BE    DOTCT                   Do it.\n         CLC   0(7,R7),=C'--SCT--'     Start of SCT entry?\n         BE    DOSCT                   Do it.\nDOTCT    DS    0H\n         GET   TESTIN,TSTINREC         Get new record assuming TCT.\n         CLI   0(R7),C'*'              Is it a comment also?\n         BE    TESTNTYP                Then try again\n         CLI   0(R7),C' '              Is first char blank?\n         BE    TESTNTYP                Yes, then ignore record.\n         CLC   0(8,R7),=CL8' '         Blank entry?\n         BE    TESTNTYP                Skip card\n         CLC   0(7,R7),=C'--SCT--'     Is it an SCT header?\n         BE    DOSCT                   Then assume SCT now.\n         MVC   0(8,R5),0(R7)           Move entry to work area.\n         TR    0(8,R5),TRTBLUP         Make sure letters are printable\n         LA    R8,8(,R8)               It is TCT entry, add 8.\n         LA    R5,8(,R5)               Bump past data in table\n         B     DOTCT                   Loop\nDOSCT    DS    0H\n         GET   TESTIN,TSTINREC         Get new record assuming SCT.\n         CLI   0(R7),C'*'              Is it a comment also?\n         BE    TESTNTYP                Then try again\n         CLI   0(R7),C' '              Is first character blank?\n         BE    TESTNTYP                Yes, then ignore record.\n         CLC   0(8,R7),=CL8' '         Blank entry?\n         BE    TESTNTYP                Skip card\n         CLC   0(7,R7),=C'--TCT--'     Is it an TCT header?\n         BE    DOTCT                   Then assume TCT now.\n         MVC   0(16,R6),0(R7)          Move entry to work area.\n         TR    0(16,R6),TRTBLUP        Make sure letters are printable\n         LA    R9,16(,R9)              It is SCT entry, add 16.\n         LA    R6,16(,R6)              Bump past data in table\n         B     DOSCT                   Loop\nTESTNEND DS    0H\n         CLOSE (TESTIN)\n         LA    R8,8(,R8)               Extra storage for delimiter\n         MVC   0(8,R5),=CL8' '\n         ST    R8,SIZTCT               Size of the new TCT\n         LA    R9,16(,R9)              Extra storage for delimiter\n         MVC   0(16,R6),=CL16' '\n         ST    R9,SIZSCT               Size of the new SCT\n         TM    PARMFLAG,X'01'          When regressing, we ignore the\n         BO    REGRES00                  TESTIN generated values.\n         MVC   LINE,LINE-1             Make report of TCT SCT sizes\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1             Make report of TCT SCT sizes\n         MVC   LINE(16),=C'Size of new TCT:'     in hex.\n         HEX   LINE+19,2,SIZTCT+2\n         MVC   LINE+26(16),=C'Size of new SCT:'\n         HEX   LINE+45,2,SIZSCT+2      Make report of TCT SCT sizes\n         PUT   SYSPRINT,LINE\nREGRES00 DS    0H\n         MVC   LINE,LINE-1             Blank line for separator.\n         PUT   SYSPRINT,LINE\n* ------------------------------------------------------------------ *\n*      CREATE A NEW TPT, TCT, AND SCT - NEEDS APF-AUTHORIZATION      *\n* ------------------------------------------------------------------ *\nNEWTEST  DS    0H\n         TESTAUTH FCTN=1               ARE WE AUTHORIZED\n         LTR   R15,R15\n         BNZ   NOTAUTH                 IF NOT SEND MESSAGE\n         MODESET KEY=ZERO,MODE=SUP\n* ------------------------------------------------------------------ *\n*            Get storage for all 3 control block copies.             *\n* ------------------------------------------------------------------ *\n         L     R1,40                   SIZE OF TPT\n         ST    R1,SIZTPT\n         STORAGE OBTAIN,SP=241,KEY=0,LOC=31,LENGTH=SIZTPT,             X\n               OWNER=SYSTEM\n         ST    R1,STORTPT\n         STORAGE OBTAIN,SP=241,KEY=0,LOC=31,LENGTH=SIZTCT,             X\n               OWNER=SYSTEM\n         ST    R1,STORTCT\n         STORAGE OBTAIN,SP=241,KEY=0,LOC=31,LENGTH=SIZSCT,             X\n               OWNER=SYSTEM\n         ST    R1,STORSCT\n* ------------------------------------------------------------------ *\n*               Make a new TPT first.                                *\n* ------------------------------------------------------------------ *\nMAKETPT  DS    0H                      First make the new TPT\n         STM   R4,R9,SAVER4T9          Save all these regs\n         ST    R8,SIZTCT               R8 still has the size of TCT\n         ST    R9,SIZSCT               R9 still has the size of SCT\n         L     R1,STORTPT              Point to the storage\n         MVC   0(40,R1),ZEROES         Zero it out, start the fields\n         MVC   0(4,R1),=CL4'TPT'       Eyecatcher first\n         MVC   4(2,R1),=X'0028'        TPT length\n         MVC   6(2,R1),=X'0100'        TPT version OR'ed with X'C0'\n         L     R8,STORTCT              Insert address of TCT\n         L     R6,WRKTCT               Address of built new TCT\n         L     R9,SIZTCT               Size of built new TCT\n         LR    R7,R9                   Propagate size to other reg\n         MVCL  R8,R6                   Move the TCT data\n         S     R8,SIZTCT               Re-point to location of data\n         ST    R8,12(,R1)              Put its address in the TPT\n         L     R7,SIZTCT               Insert length of TCT\n         ST    R7,16(,R1)                into the new TPT.\n         L     R8,STORSCT              Insert address of SCT\n         L     R6,WRKSCT               Address of built new SCT\n         L     R9,SIZSCT               Size of built new SCT\n         LR    R7,R9                   Propagate size to other reg\n         MVCL  R8,R6                   Move the SCT data\n         S     R8,SIZSCT               Re-point to location of data\n         ST    R8,20(,R1)              Put its address in the TPT\n         L     R7,SIZSCT               Insert length of SCT\n         ST    R7,24(,R1)                into the new TPT.\n         L     R7,TPTADDR              Address of previous TPT.\n         ST    R7,36(,R1)              Put it at end of new TPT.\n         ST    R7,OLDTPT\n* ------------------------------------------------------------------ *\n*         The new TPT is now constructed.  Pointed to by R1.         *\n* ------------------------------------------------------------------ *\nMAKENEW  DS    0H           Now replace the TPVT pointer to the TPT.\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT (Parmlib Vect Tbl)\n         LA    R3,X'28'(,R2)       Point R3 to TPT address in TPVT\n         TM    PARMFLAG,X'01'      Are we regressing to previous TPT?\n         BO    REGRESIT            Yes. Ignore new TPT and regress.\n         L     R2,STORTPT          No. Load addr of new GETMAINed TPT\n         ST    R2,0(,R3)           Replace TPT address in TPVT\n         B     BACKPROB            Back to problem state.\n* ------------------------------------------------------------------ *\n*   If PARM=R in the EXEC card of the JCL, then we regress the TPT   *\n*   to a previous value, if one exists.  That is, if our program     *\n*   created a new TPT, it preserves the value of the old TPT in      *\n*   location X'24' off the new TPT.  When IBM creates a TPT, there   *\n*   are zeroes in that location, and that is the first TPT created,  *\n*   so of course, we can't restore to a \"previous TPT\".              *\n* ------------------------------------------------------------------ *\nREGRESIT DS    0H                  Proceed with regression to previous\n         L     R4,OLDTPTO          Plug in previous TPT address.\n         LTR   R4,R4               Make sure it isn't zero (via IBM)\n         BZ    NORGRS01            If it is zero, don't go there.\n         CLC   =C'TPT ',0(R4)      Not zero, check if valid TPT.\n         BNE   NORGRS02            Not, then don't regress.\n         ST    R4,0(,R3)           Replace TPT address in TPVT\n* ------------------------------------------------------------------ *\n*   Regression done. Now free the storage taken by the previous TPT. *\n* ------------------------------------------------------------------ *\n         L     R4,OLDTPT           Address of storage to be freed.\n         ST    R4,TPTFADDR         Store it into variable for routine.\n         BAL   R9,FREESTOR         Free the SCT, TCT, then the TPT.\n         B     BACKPROB            Back to problem state.\n* ------------------------------------------------------------------ *\nNORGRS01 DS    0H                  Prev addr (made by IBM) is zero.\n         OI    PARMFLAG,X'02'      Show not restorable.\n         OI    FLAGSYST,X'C0'      Make RC = 4.\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'Cannot regress because no previous address.'\n         PUT   SYSPRINT,LINE\n         B     NORGRS03\nNORGRS02 DS    0H                  Prev addr does not point to a TPT.\n         OI    PARMFLAG,X'02'      Show not restorable.\n         OI    FLAGSYST,X'C0'      Make RC = 4.\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Previous address is not a valid TPT.'\n         PUT   SYSPRINT,LINE\n         B     NORGRS03\nNORGRS03 DS    0H\n* ------------------------------------------------------------------ *\nBACKPROB DS    0H                      Back to problem state.\n         LM    R4,R9,SAVER4T9          Restore all the saved regs.\n         MODESET KEY=NZERO,MODE=PROB\n         CLOSE (TESTIN)\n         TM    PARMFLAG,X'01'      Are we regressing?\n         BO    REGRES01            Yes. Skip table change messages.\n         TM    FLAGSYST,X'40'      RC = 4? We're making a new table.\n         BO    TABLNEWM            Say 'created' and not 'changed'.\n         MVC   LINE,LINE-1         Report successful table replacement\n         MVC   LINE(43),=C'TEST tables have been changed successfully.'\n         B     TABLNGO\nTABLNEWM DS    0H\n         MVC   LINE,LINE-1         Report successful table creation\n         MVC   LINE(43),=C'TEST tables have been created successfully.'\nTABLNGO  DS    0H\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1\n         MVC  LINE(44),=C'Use the SYSPRNT2 DD name to see the changes.'\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1\n         MVC  LINE(52),=C'Use the TESTOUT2 DD name to get the new TESTIx\n               N deck.'\n         PUT   SYSPRINT,LINE\n         B     NOTESTIN\nREGRES01 DS    0H\n         TM    PARMFLAG,X'02'\n         BZ    REGRESA1\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'TEST tables have NOT been regressed.'\n         PUT   SYSPRINT,LINE\n         B     REGRES02\nREGRESA1 DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(32),=C'TEST tables have been regressed.'\n         PUT   SYSPRINT,LINE\nREGRES02 DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(32),=C'TESTIN values have been ignored.'\n         PUT   SYSPRINT,LINE\nNOTESTIN DS    0H                      Post processing reports.\n         L     R15,=V(LOADTN)          Address of formatting program.\n         BALR  R14,R15                 Go there and post process.\n* ------------------------------------------------------------------ *\n*                     GENERAL RETURN ROUTINE                         *\n* ------------------------------------------------------------------ *\nRETURN   DS    0H                   Program exit.\n         TM    FLAGSYST,X'40'       RC = 4?\n         BZ    RNOT4                No.\n         LA    R2,4                 Yes, set it in R2.\nRNOT4    DS    0H\n         TM    FLAGSYST,X'02'       Is TESTOUT DD present?\n         BZ    NOOUT05              No. So don't close it.\n         CLOSE (TESTOUT)\nNOOUT05  DS    0H                   FREEMAIN the work setup area.\n         TM    FLAGSYST,X'01'       Is TESTIN DD present?\n         BZ    NOTESTI0             No. No WORKAREA, no FREEMAIN.\n         L     R1,SAVEGET           Address of gotten storage.\n         LA    R0,WORKSIZE          Size of storage for FREEMAIN\n         FREEMAIN R,A=(1),LV=(0)\nNOTESTI0 DS    0H                      Post processing reports.\n         L     R13,SAVEAREA+4       Reload caller's savearea pointer.\nRETURNCD DS    0H                   No more printing required\n         CLOSE (SYSPRINT)\n         LA    R15,0                Preload RC = 0\n         TM    FLAGSYST,X'80'       Are we changing the return code?\n         BZ    NOSETRC              No. Ignore R2.\n         LR    R15,R2               Restore RC into R15\nNOSETRC  DS    0H\n         ST    R15,16(,R13)         Put RC into passed save area.\n         L     R14,12(,R13)         Restore the rest of the regs.\n         LM    R0,R12,20(R13)\nRETOUT   DS    0H\n         BR    R14                  RETURN TO CALLER\n* ------------------------------------------------------------------ *\n* TABLE CHANGE REQUESTED (TESTIN DD PRESENT) BUT NOT APF-AUTHORIZED. *\n* ------------------------------------------------------------------ *\nNOTAUTH  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(37),=C'This program needs APF-authorization.'\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1\n         MVC   LINE(40),=C'No changes to the TEST tables were made.'\n         PUT   SYSPRINT,LINE\n         OI    FLAGSYST,X'80'       Indicate return code change.\n         LA    R2,16                RC = 16\n         B     RETURN\n* ------------------------------------------------------------------ *\n*    SUBROUTINE TO FREE STORAGE OCCUPIED BY THE TCT, SCT, AND TPT,   *\n*    GIVEN THE ADDRESS OF THE TPT TO BEGIN WITH.  THE TPT CONTAINS   *\n*    ALL THE INFORMATION NECESSARY TO FREE ITS OWN STORAGE, IF IT    *\n*    IS PROPERLY FORMATTED.  UPON ENTRY, TPTFADDR POINTS TO THE TPT  *\n*    ADDRESS THAT IS TO BE FREED.                                    *\n*            (THIS SUBROUTINE NEEDS APF-AUTHORIZATION.)              *\n* ------------------------------------------------------------------ *\nFREESTOR DS    0H                      Procedure to free TPT, TCT, SCT.\n*                                      But first clear them to zeroes.\n         L     R4,TPTFADDR             TPT address to free components.\n         MODESET KEY=ZERO,MODE=SUP\n         STM   R4,R9,SAVER4T9          Save all these registers.\n         CLC   =C'TPT ',0(R4)          Is storage formatted as TPT?\n         BNE   FREES001                No. Send messages.\n         LA    R5,40                   Length of TPT is 40 (X'28')\n         ST    R5,TPTFSIZE             Store TPT length\n         L     R5,12(,R4)              Get address of the TCT\n         ST    R5,TCTFADDR             Store in a variable.\n         CLC   =C'TCT ',0(R5)          Is storage formatted as TCT?\n         BNE   FREES002                No. Send messages.\n         L     R5,16(,R4)              Get the size of the TCT\n         ST    R5,TCTFSIZE             Store it in a variable\n         L     R5,20(,R4)              Get address of the SCT\n         ST    R5,SCTFADDR             Store it in a variable\n         CLC   =C'SCT ',0(R5)          Is storage formatted as SCT?\n         BNE   FREES003                No. Send messages.\n         L     R5,24(,R4)              Get the size of the SCT\n         ST    R5,SCTFSIZE             Store it as a variable\nFREESCT  DS    0H                      Now clear & free the SCT first.\n         L     R8,SCTFADDR             Address of the SCT to clear\n         L     R9,SCTFSIZE             Size of SCT to clear\n         SLR   R7,R7                   Zero pad, and \"from\" length\n         MVCL  R8,R6                   Clear the SCT data\n         L     R6,SCTFADDR             Address of the SCT\n         L     R7,SCTFSIZE             Size of the SCT\n         STORAGE RELEASE,ADDR=(R6),LENGTH=(R7),SP=241\nFREETCT  DS    0H                      Now clear & free the TCT second.\n         L     R8,TCTFADDR             Address of the TCT to clear\n         L     R9,TCTFSIZE             Size of TCT to clear\n         SLR   R7,R7                   Zero pad, and \"from\" length\n         MVCL  R8,R6                   Clear the TCT data\n         L     R6,TCTFADDR             Address of the TCT\n         L     R7,TCTFSIZE             Size of the TCT\n         STORAGE RELEASE,ADDR=(R6),LENGTH=(R7),SP=241\nFREETPT  DS    0H                      Finally clear & free the TPT.\n         L     R8,TPTFADDR             Address of the TPT to clear\n         L     R9,TPTFSIZE             Size of TPT to clear\n         SLR   R7,R7                   Zero pad, and \"from\" length\n         MVCL  R8,R6                   Clear the TPT data\n         L     R6,TPTFADDR             Address of the TPT\n         L     R7,TPTFSIZE             Size of the TPT\n         STORAGE RELEASE,ADDR=(R6),LENGTH=(R7),SP=241\n         B     FREESEND                All is well, exit the procedure\nFREES001 DS    0H                      TPT free error messages\n         MVC   LINE,LINE-1\n         MVC   LINE(35),=C'Storage was not formatted as a TPT.'\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1\n         MVC   LINE(26),=C'TPT storage was not freed.'\n         PUT   SYSPRINT,LINE\n         B     FREESEND\nFREES002 DS    0H                      TCT free error messages\n         MVC   LINE,LINE-1\n         MVC   LINE(35),=C'Storage was not formatted as a TCT.'\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1\n         MVC   LINE(26),=C'TCT storage was not freed.'\n         PUT   SYSPRINT,LINE\n         B     FREESEND\nFREES003 DS    0H                      SCT free error messages\n         MVC   LINE,LINE-1\n         MVC   LINE(35),=C'Storage was not formatted as a SCT.'\n         PUT   SYSPRINT,LINE\n         MVC   LINE,LINE-1\n         MVC   LINE(26),=C'SCT storage was not freed.'\n         PUT   SYSPRINT,LINE\n         B     FREESEND\nFREESEND DS    0H\n         LM    R4,R9,SAVER4T9          Restore all these registers.\n         MODESET KEY=NZERO,MODE=PROB\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*           D  A  T  A     A  R  E  A  S                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nSAVEAREA DS    9D\nZEROES   DC    40X'00'\nSAVER2A  DS    F\nSAVER9A  DS    F\nSAVER4T9 DS    6F                   Save a bunch of registers\nSAVEGET  DS    F                    Address of gotten workarea\nSIZTPT   DS    F                    Size of TPT (X'28')\nSIZTCT   DS    F                    Measured size if TESTIN\nSIZSCT   DS    F                    Measured size if TESTIN\nSTORTPT  DS    F                    New TPT address\nSTORTCT  DS    F                    New TCT address\nSTORSCT  DS    F                    New SCT address\nNTPTADDR DS    F                    Address for new TPT\nNTCTADDR DS    F                    Address for new TCT\nNSCTADDR DS    F                    Address for new SCT\nTPTFADDR DS    F                    Address of a TPT to free storage\nTCTFADDR DS    F                    Address of TCT to free storage\nSCTFADDR DS    F                    Address of SCT to free storage\nTPTFSIZE DS    F                    Size of TPT to free\nTCTFSIZE DS    F                    Size of TCT to free\nSCTFSIZE DS    F                    Size of SCT to free\nCVDAREA  DC    D'0'\n         DC    CL3'   '\nOLDPATT  DC    X'40202020202020202120'   Pattern for old OUTLIM value\n         DC    CL3'   '\nOLDFLAG  DC    X'00'\n         DC    CL3'   '\nBLANKS   DC    CL145' '\n         DC    CL1' '\nLINE     DC    CL133' '\n         DC    CL1' '\nOUTREC   DC    CL80' '\nTSTINREC DC    CL80' '\nDISPLAY1 DC    CL64'                                              '\nDISPLAYT DC    C'Old TEST PARMLIB IKJTSOxx Parameter Values'\nDISPLAYU DC    C'--- ---- ------- -------- --------- ------'\nTSOCMDT  DC    C'---- TSOCMD PROGRAMS ----'\nPROGRMT  DC    C'      Program Name       '\nSUBCMDT  DC    C'----   SUBCOMMANDS   ----'\nCOMMANT  DC    C' Subcommand     Module   '\nTPTBAD   DC    C'   TPT not pointed to    '\nTCTBAD   DC    C'   TCT not pointed to    '\nSCTBAD   DC    C'   SCT not pointed to    '\nFLAGSYST DC    X'00'                Our grand old flag. GENERAL.\n*              X'80'                Return code is to be changed.\n*              X'40'                Return code is 4.\n*              X'01'                TESTIN  DD is present in JCL.\n*              X'02'                TESTOUT DD is present in JCL.\nPARMFLAG DC    X'00'                REGRESSION FLAGS.\n*              X'01'                Regress\n*              X'02'                Can't regress because TPT was\n*                                     made by the operating system,\n*                                     not by us. Or is corrupted.\nPARMLETR DC    C' '                 Store PARM letter for display.\nPARMSAVE DC    F'0'                 Save original contents of Reg 1.\nOLDTPT   DC    F'0'                 Old TPT address.\nOLDTPTO  DC    F'0'                 Preserved old TPT address.\nTPTADDR  DC    F'0'                 Old TPT address from TPVT\nTPTSIZE  DC    H'0'                 TPT size from TPT\nTPTVERS  DC    X'0'                 TPT version number\nTCTADDR  DC    F'0'                 TCT address in TPT\nTCTSIZE  DC    F'0'                 TCT size in TPT\nTCTENTR  DC    F'0'                 Number of TCT entries for report\nSCTADDR  DC    F'0'                 SCT address in TPT\nSCTSIZE  DC    F'0'                 SCT size in TPT\nSCTENTR  DC    F'0'                 Number of SCT entries for report\nWRKTCT   DC    F'0'                 Formatted new TCT if TESTIN there\nWRKSCT   DC    F'0'                 Formatted new SCT if TESTIN there\nTESTIN   DCB   MACRF=GM,DDNAME=TESTIN,DSORG=PS,RECFM=FB,LRECL=80,      X\n               EODAD=TESTNEND\nTESTOUT  DCB   MACRF=PM,DDNAME=TESTOUT,DSORG=PS,RECFM=FB,LRECL=80\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FB\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV4HEX  DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*            Table to Remove Unprintables               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRTBLUP  DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    Other Translate Tables -  Relics from a previous program.    *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     Only accept Numeric               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRTBLN   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                 Only accept Alpha, and Uppercase      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRTBLA   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWORKAREA DSECT\n         DS    0D          Work area for formatting new TCT and SCT\nWORKTCT  DS    1216C       New TCT work area\nWORKSCT  DS    2424C       New SCT work area\n         DS    0D\nWORKSIZE EQU   *-WORKAREA\nLOADTEST CSECT\n         END\nLOADTN   TITLE 'LOADTN - DISPLAY TSO TEST FIELDS'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a batch        *\n*                   program, not APF authorized, because it is        *\n*                   only for the purpose of displaying the incore     *\n*                   IKJTSOxx PARMLIB member values for the TEST       *\n*                   keyword.                                          *\n*                                                                     *\n*                   As presented here, LOADTN is a subprogram of      *\n*                   the LOADTEST program, although it is fully        *\n*                   functional as a reporting program when it is      *\n*                   assembled separately.                             *\n*                                                                     *\n*                   LOADTN is called by LOADTEST to report on the     *\n*                   status of the TEST control blocks, after the      *\n*                   LOADTEST processing is completely finished.       *\n*                                                                     *\n*                   Both SYSPRNT2 and TESTOUT2 DD names are           *\n*                   optional.                                         *\n*                                                                     *\n*  JCL:    (when this program is assembled separately)                *\n*                                                                     *\n*  //SHOWTEST JOB ,'MY JOBCARD',CLASS=A,                              *\n*  //    MSGCLASS=X,NOTIFY=&SYSUID                                    *\n*  //*                                                                *\n*  //LOADTN  EXEC PGM=LOADTN                                          *\n*  //STEPLIB  DD  DISP=SHR,DSN=MY.LOAD.LIBRARY                        *\n*  //SYSPRNT2 DD  SYSOUT=*                                            *\n*  //TESTOUT2 DD  SYSOUT=*      (LRECL=80 DATASET OR SYSOUT)          *\n*                                                                     *\n*                                                                     *\n*       Function:   To display values of the TEST IKJTSOxx            *\n*                   PARMLIB settings as they are represented          *\n*                   internally in the TPT, TCT, SCT control           *\n*                   blocks.                                           *\n*                                                                     *\n*          Author:  Sam Golob               Version:   1.1            *\n*                                                                     *\n*            Date:  Jun 03, 2019                                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2016/08/07 - 1.0 - Initial version - Tested with TSO/E Version   *\n*                       4.                                            *\n*                                                                     *\n*    2019/06/03 - 1.1 - Turned this into a batch program, to produce  *\n*                       output compatible with the LOADTEST program.  *\n*                       (DDNAME=TESTOUT2).  Converted to subprogram.  *\n*                       Changed DD names to SYSPRNT2 and TESTOUT2.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Programming Notes:                                                 *\n*                                                                     *\n*    The TEST command information from the IKJTSOxx member of         *\n*    parmlib, is reflected in 3 control blocks:  TPT, TCT, SCT.       *\n*                                                                     *\n*    The TPT is pointed to by the TEST address at x'28' off           *\n*    the beginning of the TPVT.  The TPT points to all the rest       *\n*    of the information, as per the macro description below.          *\n*                                                                     *\n*                                                                     *\n*             MACRO                                                   *\n*             IKJTPT                                                  *\n*    TPT      DSECT                         TPT Control block         *\n*    TPT_ID   DS    C'TPT '                 Block id                  *\n*    TPT_LENGTH DS H                        Total length of c.b.      *\n*    TPT_VERS DS    C                       TPT Version               *\n*             DS    C                       Reserved X'00'            *\n*             DS    F                       zeros                     *\n*    TPT_TCT_ENTRY DS A                     Address of TSOCMD c.b.    *\n*    TPT_TCT_LENGTH DS F                    Length of TSOCMD c.b.     *\n*    *                                      Length - 4 / 8 = #        *\n*    TPT_SCT_ENTRY DS A                     Address of SUBCMD c.b.    *\n*    TPT_SCT_LENGTH DS F                    Length of SUBCMD c.b.     *\n*    *                                      Length - 4 / 16 = #       *\n*             DS    3F                                                *\n*    TCT_TEST DSECT                                                   *\n*    TCT_ID   DS    C'TCT '                 Block id                  *\n*    TCT_TSOCMD DS  CL8                     A TSOCMD                  *\n*    TCT_ENTRY_END DS 0C                                              *\n*    *                                      The last entry is x'40'   *\n*    SCT_TEST DSECT                                                   *\n*    SCT_ID   DS    C'SCT '                 Block id                  *\n*    SCT_SUBCMD DS  CL8                     A SUBCMD                  *\n*    SCT_PGM  DS    CL8                     A SUBCMD module name      *\n*    *                                      The last entry is x'40'   *\n*    SCT_ENTRY_END DS 0C                                              *\n*             MEND                                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         L     R4,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nLOADTN   CSECT\nLOADTN   AMODE 31\nLOADTN   RMODE 24\n         B     BEGINN-*(,R15)           Eyecatcher\n         DC    CL15'LOADTN VER 1.1 -'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         STM   R14,R12,12(R13)\n         LR    R5,R1                    SAVE CPPL POINTER\n         USING LOADTN,R12,R11,R10\n         LR    R12,R15                  Set up base registers.\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LA    R1,SAVEAREA              NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)               FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)               BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1                   NEW SAVE AREA ADDRESS\n         SPACE 1\n* -----------------------\n         LR    R1,R5                    RESTORE CPPL POINTER\n         ST    R1,PARMSAVE         Store the CPPL pointer into this\n*                                  program, so it doesn't get lost.\n* -----------------------\n         MVI   BLANKS-1,X'40'           Initialize blanks.\n         MVC   BLANKS,BLANKS-1\n         MVI   FLAGSYST,X'00'\n* ----------------------------------------------------------------- *\nTIOTSCAN DS    0H             Determine the presence of Optional\n*                             DDNAMES:  TESTOUT2 AND SYSPRNT2.\n* ----->                      OPEN them when there is JCL for them.\n* ----------------------------------------------------------------- *\n         L     R2,16          R2=CVT\n         L     R2,0(,R2)      R2=TCB WORDS\n         L     R2,4(,R2)      R2=MY TCB\n         L     R2,12(,R2)     R2=TIOT\n         LA    R2,24(,R2)     R2=FIRST DD ENTRY\nTIOTLOOP CLC   0(4,R2),=XL4'00' END OF TIOT?\n         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES\n         CLC   4(8,R2),SYSPRNT2+40  SYSPRNT2 DDNAME THERE?\n         BNE   TIOTSYSN       NO\n         OI    FLAGSYST,X'01'       SHOW PRESENCE OF SYSPRNT2 DD\n         B     TIOTNEXT       CONTINUE\nTIOTSYSN CLC   4(8,R2),TESTOUT2+40\n         BNE   TIOTNEXT\n         OI    FLAGSYST,X'02'       SHOW PRESENCE OF TESTOUT2 DD\n         B     TIOTNEXT\nTIOTNEXT SR    R3,R3\n         IC    R3,0(,R2)      R3=LENGTH OF DD ENTRY\n         AR    R2,R3          R2=NEXT DD ENTRY\n         B     TIOTLOOP       GO CHECK IT\nTIOTSEND DS    0H\n* ----------------------------------------------------------------- *\n* -----------------------\nDTITLE   DS    0H                       Print report title\n         TM    FLAGSYST,X'01'\n         BZ    NOPRNT2A\n         OPEN  (SYSPRNT2,(OUTPUT))\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAYT),DISPLAYT\n         PUT   SYSPRNT2,LINE\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAYU),DISPLAYU\n         PUT   SYSPRNT2,LINE\n         MVC   LINE,LINE-1\nNOPRNT2A DS    0H                       Put out TESTOUT2 title\n         TM    FLAGSYST,X'02'\n         BZ    NOTOUT2A\n         OPEN  (TESTOUT2,(OUTPUT))\n         MVC   OUTREC,OUTREC-1\n         MVC   OUTREC(20),=C'* NEW LOADTEST PARMS'\n         PUT   TESTOUT2,OUTREC\n         MVC   OUTREC,OUTREC-1\n         MVC   OUTREC(16),=C'*---+----1----+-'\n         PUT   TESTOUT2,OUTREC\n         MVC   OUTREC,OUTREC-1\nNOTOUT2A DS    0H\n*\n* -----------------------     Follow address to Parmlib TEST values\n*\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R6,X'4C'(,R2)       Point to TPVT (Parmlib Vect Tbl)\n         L     R2,X'28'(,R6)       Point to TPT control block of TEST\n* ------\n* ------    GET 'TEST' PARMLIB ADDRESSES AND VALUES FOR REPORTING\n* ------\n         ST    R2,TPTADDR          Store away TPT address\n         CLC   =C'TPT',0(R2)       Is TPT eyecatcher in proper place?\n         BNE   NOTTPT              No. We aren't looking at TPT.\n*                                  Get all TPT fields........\n         LH    R3,4(,R2)           Get TPT size\n         STH   R3,TPTSIZE\n         MVC   TPTVERS(1),6(R2)    TPT version number\n         L     R3,12(,R2)\n         ST    R3,TCTADDR          TCT address\n         L     R3,16(,R2)\n         ST    R3,TCTSIZE          TCT size\n         LR    R4,R3               Copy size value\n         S     R4,=F'4'            Subtract 4\n         SRL   R4,3                Divide by 8 (size of TCT entry)\n         BCTR  R4,0                Subtract 1 because of blank entry\n         ST    R4,TCTENTR          Save # of TCT entries - actual\n         L     R3,20(,R2)\n         ST    R3,SCTADDR          SCT address\n         L     R3,24(,R2)\n         ST    R3,SCTSIZE          SCT size\n         LR    R4,R3               Copy size value\n         S     R4,=F'4'            Subtract 4\n         SRL   R4,4                Divide by 16 (size of SCT entry)\n         BCTR  R4,0                Subtract 1 because of blank entry\n         ST    R4,SCTENTR          Save # of SCT entries - actual\n         L     R3,36(,R2)\n         ST    R3,OLDTPT\n         B     CONTTPT             Continue with Control Block Display\nNOTTPT   DS    0H                  Message if TPT not formatted right.\n         TM    FLAGSYST,X'01'             Is there SYSPRNT2 DD?\n         BZ    NOPRNT2B                   No. No SYSPRNT2 output\n         MVC   LINE,LINE-1\n         MVC   DISPLAY1,BLANKS                Error msg if not TPT.\n         MVC   DISPLAY1(L'TPTBAD),TPTBAD\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\nNOPRNT2B DS    0H\n         B     RETURN\nCONTTPT  DS    0H                         Now display all TPT fields.\n         TM    FLAGSYST,X'01'\n         BZ    NOPRNT2C\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TPT ADDRESS'    Display entry title\n         HEX   DISPLAY1+16,4,TPTADDR           Display address\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TPT SIZE   '    Display entry title\n         HEX   DISPLAY1+16,2,TPTSIZE           Only a halfword field\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TPT VERSION'    Display entry title\n         HEX   DISPLAY1+16,1,TPTVERS           Single byte field\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TCT ADDRESS'    Display entry title\n         HEX   DISPLAY1+16,4,TCTADDR           Display address\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TCT SIZE   '    Display entry title\n         HEX   DISPLAY1+16,2,TCTSIZE+2         Cut off 1st 2 bytes\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'TCT ENTRIES'    Display entry title\n         HEX   DISPLAY1+16,2,TCTENTR+2         Cut off 1st 2 bytes\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SCT ADDRESS'    Display entry title\n         HEX   DISPLAY1+16,4,SCTADDR           Display address\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SCT SIZE   '    Display entry title\n         HEX   DISPLAY1+16,2,SCTSIZE+2         Cut off 1st 2 bytes\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'SCT ENTRIES'    Display entry title\n         HEX   DISPLAY1+16,2,SCTENTR+2         Cut off 1st 2 bytes\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         CLC   OLDTPT,=F'0'\n         BE    NOOLDTPT\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(11),=C'OLD TPT ADR'    Display entry title\n         HEX   DISPLAY1+16,4,OLDTPT            Display address\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\nNOOLDTPT DS    0H\nDSPLYTSO DS    0H\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'TSOCMDT),TSOCMDT      Display title\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'PROGRMT),PROGRMT      Display title\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\nNOPRNT2C DS    0H\nTSOINIT  DS    0H\n         L     R3,TCTADDR                 Set up for TSOCMD display\n         L     R4,TCTSIZE\n         CLC   =C'TCT',0(R3)              Starts with TCT ?\n         BE    TSOSTART                     Yes. Continue.\n         TM    FLAGSYST,X'01'\n         BZ    NOPRNT2D\n         MVC   DISPLAY1,BLANKS              No.  Error.\n         MVC   DISPLAY1(L'TCTBAD),TCTBAD    Send appropriate message\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\nNOPRNT2D DS    0H\n         B     RETURN                       Go straight out.\nTSOSTART DS    0H\n         TM    FLAGSYST,X'02'\n         BZ    NOTOUT2B\n         MVC   OUTREC,OUTREC-1\n         MVC   OUTREC(7),=C'--TCT--'\n         PUT   TESTOUT2,OUTREC\nNOTOUT2B DS    0H\n         LA    R3,4(,R3)                        Point to pgm table\nTSOLOOP  DS    0H\n         CLC   =C'        ',0(R3)               End of table?\n         BE    DSPLYSUB\n         TM    FLAGSYST,X'01'\n         BZ    NOPRNT2E\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1+8(8),0(R3)              Show TSOCMD\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\nNOPRNT2E DS    0H\n         TM    FLAGSYST,X'02'\n         BZ    NOTOUT2C\n         MVC   OUTREC,OUTREC-1\n         MVC   OUTREC(8),0(R3)\n         PUT   TESTOUT2,OUTREC\nNOTOUT2C DS    0H\n         LA    R3,8(,R3)                        Next entry\n         B     TSOLOOP\n*                                         PUT IN LENGTH CHECK LATER\nDSPLYSUB DS    0H\n         TM    FLAGSYST,X'01'\n         BZ    NOPRNT2F\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'SUBCMDT),SUBCMDT\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1(L'COMMANT),COMMANT      Display title\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\nNOPRNT2F DS    0H\nSUBINIT  DS    0H\n         L     R3,SCTADDR                 Set up for SUBCMD display\n         L     R4,SCTSIZE\n         CLC   =C'SCT',0(R3)              Starts with SCT ?\n         BE    SUBSTART                     Yes. Continue.\n         TM    FLAGSYST,X'01'\n         BZ    NOPRNT2G\n         MVC   DISPLAY1,BLANKS              No.  Error.\n         MVC   DISPLAY1(L'SCTBAD),SCTBAD    Send appropriate message\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\nNOPRNT2G DS    0H\n         B     RETURN                       Go straight out.\nSUBSTART DS    0H\n         LA    R3,4(,R3)                        Point to subcmd table\n         TM    FLAGSYST,X'02'\n         BZ    NOTOUT2D\n         MVC   OUTREC,OUTREC-1\n         MVC   OUTREC(7),=C'--SCT--'\n         PUT   TESTOUT2,OUTREC\nNOTOUT2D DS    0H\nSUBLOOP  DS    0H\n         CLC   =C'        ',0(R3)               End of table?\n         BE    RETURN\n         TM    FLAGSYST,X'01'\n         BZ    NOPRNT2H\n         MVC   DISPLAY1,BLANKS                  Blank display line\n         MVC   DISPLAY1+2(8),0(R3)              Show SUBCMD\n         MVC   DISPLAY1+15(8),8(R3)             Show module name\n         MVC   LINE,LINE-1\n         MVC   LINE(L'DISPLAY1),DISPLAY1\n         PUT   SYSPRNT2,LINE\nNOPRNT2H DS    0H\n         TM    FLAGSYST,X'02'\n         BZ    NOTOUT2E\n         MVC   OUTREC,OUTREC-1\n         MVC   OUTREC(8),0(R3)                  Show SUBCMD\n         MVC   OUTREC+8(8),8(R3)                Show module name\n         PUT   TESTOUT2,OUTREC\n         MVC   OUTREC,OUTREC-1\nNOTOUT2E DS    0H\n         LA    R3,16(,R3)                       Next entry\n         B     SUBLOOP\n*                                         PUT IN LENGTH CHECK LATER\nTESTNEND DS    0H\nRETURN   DS    0H                   Program exit.\n         TM    FLAGSYST,X'01'\n         BZ    NOPRNT2I\n         CLOSE (SYSPRNT2)\nNOPRNT2I DS    0H\n         TM    FLAGSYST,X'02'\n         BZ    NOTOUT2F\n         CLOSE (TESTOUT2)\nNOTOUT2F DS    0H\n         L     R13,SAVEAREA+4       RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)      RELOAD REGISTERS\n         XR    R15,R15              ZERO RETURN CODE ALWAYS\n         BR    R14                  RETURN TO CALLER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*           D  A  T  A     A  R  E  A  S                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nSAVEAREA DS    9D\nCVDAREA  DC    D'0'\n         DC    CL3'   '\nOLDPATT  DC    X'40202020202020202120'   Pattern for old OUTLIM value\n         DC    CL3'   '\nOLDFLAG  DC    X'00'\n         DC    CL3'   '\nBLANKS   DC    CL145' '\n         DC    CL1' '\nLINE     DC    CL133' '\n         DC    CL1' '\nOUTREC   DC    CL80' '\nDISPLAY1 DC    CL64'                                              '\nDISPLAYT DC    C'New TEST PARMLIB IKJTSOxx Parameter Values'\nDISPLAYU DC    C'--- ---- ------- -------- --------- ------'\nTSOCMDT  DC    C'---- TSOCMD PROGRAMS ----'\nPROGRMT  DC    C'      Program Name       '\nSUBCMDT  DC    C'----   SUBCOMMANDS   ----'\nCOMMANT  DC    C' Subcommand     Module   '\nTPTBAD   DC    C'   TPT not pointed to    '\nTCTBAD   DC    C'   TCT not pointed to    '\nSCTBAD   DC    C'   SCT not pointed to    '\nFLAGSYST DS    X\n*              X'01'                SYSPRNT2 DD is present in JCL.\n*              X'02'                TESTOUT2 DD is present in JCL.\nPARMSAVE DC    F'0'\nOLDTPT   DC    F'0'\nTPTADDR  DC    F'0'\nTPTSIZE  DC    H'0'\nTPTVERS  DC    X'0'\nTCTADDR  DC    F'0'\nTCTSIZE  DC    F'0'\nTCTENTR  DC    F'0'\nSCTADDR  DC    F'0'\nSCTSIZE  DC    F'0'\nSCTENTR  DC    F'0'\nTESTOUT2 DCB   MACRF=PM,DDNAME=TESTOUT2,DSORG=PS,RECFM=FB,LRECL=80\nSYSPRNT2 DCB   DDNAME=SYSPRNT2,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FB\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV4HEX  DC    F'0'\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOADTHEL": {"ttr": 11530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00P\\x01\\x19\\x17o\\x01\\x19\\x17o\\x147\\x01\\x1c\\x01 \\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-06-25T00:00:00", "modifydate": "2019-06-25T14:37:50", "lines": 284, "newlines": 288, "modlines": 0, "user": "HELP"}, "text": "LOADTEST TITLE 'LOADTEST - RELOAD AND/OR DISPLAY TSO TEST FIELDS'\n         SPACE 1\n\n   Documentation:   This program is meant to be run as a batch\n                    program, APF authorized when it is used\n                    to reload the TEST parameters from TESTIN\n                    card input, or when regressing to a previous\n                    TPT control block using PARM=R.\n\n\n        Function:   To display/change values of the TEST IKJTSOxx\n                    PARMLIB settings as they are represented\n                    internally in the TPT, TCT, SCT control\n                    blocks.\n\n         ****  THE LOADTEST PROGRAM IS NOT RE-ENTRANT ****\n\n   JCL:\n\n   //SHOWTEST JOB ,'MY JOBCARD',CLASS=A,\n   //    MSGCLASS=X,NOTIFY=&SYSUID\n   //*\n   //LOADTEST EXEC PGM=LOADTEST PARM=R    (See Note)\n   //STEPLIB  DD  DISP=SHR,DSN=MY.LOAD.LIBRARY\n   //SYSPRINT DD  SYSOUT=*\n   //SYSPRNT2 DD  SYSOUT=*\n   //TESTOUT  DD  SYSOUT=*      (LRECL=80 DATASET OR SYSOUT)\n   //TESTOUT2 DD  SYSOUT=*      (LRECL=80 DATASET OR SYSOUT)\n   //TESTIN   DD  DISP=SHR,DSN=IBMUSER.B.ASM(LOADTCT1)\n\n   Note:  PARM=R on the EXEC card will REGRESS the TPT (and its\n          associated TCT and SCT tables) to the previous value,\n          if it exists.\n          When PARM=R, the TESTIN DD name is required, but its\n          contents is ignored.  Best to code: //TESTIN DD DUMMY\n          when PARM=R.\n\n   SUBROUTINE:\n\n   LOADTN   -  PRODUCES REPORTS AT THE END OF PROCESSING.\n               LOADTN is a separate called program.\n\n   DD NAME DESCRIPTIONS:\n\n   SYSPRINT DD IS THE ONLY REQUIRED DDNAME, AND IT ALWAYS HAS\n   TO BE PRESENT.  IT PRODUCES A REPORT REFLECTING THE INITIAL\n   STATE OF THE TEST CONTROL BLOCKS.\n\n   SYSPRINT also contains any relevant messages if the TEST control\n            blocks have been changed (messages at the bottom).\n\n   TESTOUT  DD :  PRODUCES A CARD DECK IN TESTIN FORM, WHICH WILL\n                  REPRODUCE THE LOAD OF THE CURRENT TEST PARAMETERS\n                  (BEFORE ANY CHANGES OCCUR).\n\n   TESTOUT2 DD :  PRODUCES THE TESTOUT-TYPE CARD DECK, BUT AT THE\n                  END OF PROCESSING.  IF CHANGES HAVE BEEN MADE,\n                  THEY WILL BE REFLECTED HERE.\n\n   SYSPRNT2 DD :  SIMILAR REPORT TO SYSPRINT DD, BUT DONE AT THE\n                  END OF PROCESSING, SO CHANGES (IF ANY) ARE\n                  REPORTED.  THE SYSPRNT2 DD NAME DOES NOT CONTAIN\n                  ANY EXTRA MESSAGES, THE WAY SYSPRINT DOES.\n\n   TESTIN   DD :  REQUIRED IF YOU WANT TO MAKE A NEW COPY OF THE\n                  TEST CONTROL BLOCKS:  TPT, TCT, SCT.  USES\n                  CONTROL CARD INPUT (SEE BELOW).\n\n   THE TESTIN DD NAME IS NECESSARY IF YOU WANT TO CHANGE THE TEST\n   CONTROL BLOCKS.\n\n   THE TESTIN DD NAME CONTAINS CARDS TO CHANGE THE TEST FIELD\n   ENTRIES.  WHEN LOADTEST IS RUN WITH THE TESTOUT DD NAME, THEN A\n   PROPERLY FORMATTED TESTIN DECK IS CREATED FROM THE EXISTING TEST\n   PARMS THAT ARE CURRENTLY IN EFFECT.  THIS FILE MAY BE EDITED, AND\n   USED AS FURTHER TESTIN INPUT TO ANOTHER LOADTEST RUN.\n\n   TESTIN AND TESTOUT DD NAMES ARE NOW OPTIONAL.  IF TESTIN IS LEFT\n   OUT, THEN NO CHANGES TO THE TEST PARAMETERS ARE PERFORMED.\n   SYSPRNT2 AND TESTOUT2, WHICH SHOW THE STATE OF THE TEST FIELDS\n   AFTER ANY CHANGES WERE MADE, ARE OPTIONAL AS WELL.\n\n   IF TESTOUT IS LEFT OUT, THEN TESTIN-FORMATTED OUTPUT FOR THE\n   CURRENT TEST PARMS, IS NOT PRODUCED.\n\n   TESTIN DD REQUIREMENTS:  (BE VERY CAREFUL WITH THE COLUMNS)\n\n        The string --TCT-- from column 1\n        indicates that the following entries\n        will be put in the TCT table.\n        These names go from columns 1 thru 8.\n\n        The string --SCT-- from column 1\n        indicates that the following entries\n        will be put in the SCT table.\n        The command name goes from columns 1 thru 8.\n        The program module name which is executed\n        by that command goes from columns 9 thru 16.\n\n        You have to be very exact with the columns.\n\n        An asterisk (*) in column 1 causes that card\n        to be ignored.  So does a space in column 1.\n\n   THE TESTOUT DD NAME PRODUCES A PROPERLY FORMATTED TESTIN\n   FILE, TO RELOAD THE PREVIOUS TEST CONFIGURATION.\n\n   SAMPLE TESTIN DD:  (be careful with columns 1-8 and 9-16)\n\n   * OLD LOADTEST PARMS  (a sample)   (begin in column 1)\n   *---+----1----+-\n   --TCT--\n   TSOEXEC\n   SDSF\n   PDS\n   PDS86\n   --SCT--\n   F       IKJT9FIZ\n   FI      IKJT9FIZ\n   FIN     IKJT9FIZ\n   FIND    IKJT9FIZ\n   LB      IKJT9LBZ\n   LG      IKJT9LGZ\n\n\n    DDNAME SUMMARY:\n\n    SYSPRINT - Produces a report of the CURRENT (before loading)\n               TEST information.  Contains diagnosis messages.\n\n    SYSPRNT2 - Produces a similar report to SYSPRINT, but at the\n               end of processing.  This report reflects changes,\n               if any, to the TEST parameters.\n\n    TESTOUT  - Converts the CURRENT TEST information into input\n               cards, to feed into another TESTLOAD invocation,\n               so the current information can be reloaded by\n               TESTLOAD (in case you want to back the TESTIN\n               changes out).\n\n    TESTOUT2 - Same as TESTOUT, but at end of procesing, and\n               reflecting any changes to the tables (if any)\n               that have been made.\n\n    TESTIN   - Cards to reload new TEST information into storage.\n\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    RETURN CODES:   0 - SUCCESSFUL DISPLAY and/or SUCCESSFUL\n                        CHANGE.\n\n                    4 - Original tables were damaged, and TESTIN\n                        cards were available, so that new tables\n                        were constructed from the TESTIN cards.\n\n                        This condition code also occurs when\n                        trying to regress to a previous level of\n                        the tables, and the address of the previous\n                        table either does not exist, or if it\n                        points to an invalid TCT.\n\n                    8 - TPT or TCT or SCT corrupted.  See error\n                        messages in the SYSPRINT DD name.  This\n                        can happen if there is no TESTIN card deck.\n\n                        (Hint:  You can create new TEST tables\n                                if there is a valid TESTIN deck.)\n\n                   16 - Program was not APF-authorized to make\n                        control block replacements.\n\n                        Appropriate accompanying messages are\n                        written to the SYSPRINT DD name.\n\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n   Change Log:\n     2016/08/07 - 1.0 - Initial version - Tested with TSO/E Version\n                        4.\n\n     2019/06/03 - 1.1 - Turned this into a batch program, to produce\n                        output compatible with the LOADTEST program.\n                        (DDNAME=TESTOUT)\n\n     2019/06/14 - 1.2 - Added TESTIN DD name, to allow reloading of\n                        the TEST tables.\n\n     2019/06/14 - 1.3 - TESTIN and TESTOUT DD names have been made\n                        optional.  If they are left out then their\n                        output is not produced.  If TESTIN is left\n                        out, then no changes to the TEST parameters\n                        are made, and the program does not have to\n                        be executed APF-authorized.  The SYSPRINT\n                        DD name always has to be there.\n                        Return code 16 if program not APF-authorized\n                        -and- the TESTIN DD is coded in the JCL.\n                        (I.e. you are trying to load a new table)\n\n     2019/06/18 - 1.4 - Take some steps to validate the TESTIN\n                        file entries.\n                        Allow the program to show the state of the\n                        file entries after any changes have been\n                        made.  DD names:  SYSPRNT2 and TESTOUT2\n                        correspond to SYSPRINT and TESTOUT, but\n                        they are created after the program has done\n                        any actions, when TESTIN has been coded.\n                        If no actions were performed, then SYSPRNT2\n                        and TESTOUT2 would not show changes.\n\n     2019/06/19 - 1.5 - Increased size of tables.  Removed size\n                        restriction of X'FF'.  They are somewhat\n                        bigger now.  See label WORKAREA for actual\n                        table size limits.  (Pretty big.)\n\n                        If the old table is corrupted, and we have\n                        a good TESTIN card deck, then we can build\n                        a new table anyway.  (Return code = 4)\n\n     2019/06/20 - 1.6 - Fixed FREEMAIN of table workarea.\n                        Improved comments.\n\n     2019/06/24 - 1.7 - Alter X'24' off the new TPT to contain the\n                        address of the previous TPT, when we create\n                        a new TPT.  So the new TPT now contains the\n                        address of the previous TPT, and that last\n                        TPT can therefore be restored, using the\n                        EXEC card PARM=R.  In order for this to\n                        work, the TESTIN DD name needs to be\n                        present, although its contents is ignored.\n                        If you code //TESTIN DD DUMMY in the JCL,\n                        it is sufficient, and this is probably the\n                        best practice when coding PARM=R.\n\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n   Programming Notes:\n\n     The TEST command information from the IKJTSOxx member of\n     parmlib, is reflected in 3 control blocks:  TPT, TCT, SCT.\n\n     The TPT is pointed to by the TEST address at x'28' off\n     the beginning of the TPVT.  The TPT points to all the rest\n     of the information, as per the macro description below.\n\n\n              MACRO\n              IKJTPT\n     TPT      DSECT                         TPT Control block\n     TPT_ID   DS    C'TPT '                 Block id\n     TPT_LENGTH DS H                        Total length of c.b.\n     TPT_VERS DS    C                       TPT Version\n              DS    C                       Reserved X'00'\n              DS    F                       zeros\n     TPT_TCT_ENTRY DS A                     Address of TSOCMD c.b.\n     TPT_TCT_LENGTH DS F                    Length of TSOCMD c.b.\n     *                                      Length - 4 / 8 = #\n     TPT_SCT_ENTRY DS A                     Address of SUBCMD c.b.\n     TPT_SCT_LENGTH DS F                    Length of SUBCMD c.b.\n     *                                      Length - 4 / 16 = #\n              DS    3F\n     TCT_TEST DSECT\n     TCT_ID   DS    C'TCT '                 Block id\n     TCT_TSOCMD DS  CL8                     A TSOCMD\n     TCT_ENTRY_END DS 0C\n     *                                      The last entry is x'40'\n     SCT_TEST DSECT\n     SCT_ID   DS    C'SCT '                 Block id\n     SCT_SUBCMD DS  CL8                     A SUBCMD\n     SCT_PGM  DS    CL8                     A SUBCMD module name\n     *                                      The last entry is x'40'\n     SCT_ENTRY_END DS 0C\n              MEND\n\n     The TEST information in storage consists of 3 control blocks:\n\n     TPT  -  General information:  Points to the TCT (names of\n             programs) and the SCT (names of subcommands and the\n             subprogram names that they invoke).  Size = x'28'\n\n     TCT  -  List of programs which are callable from TEST or\n             TESTAUTH.   Size = variable\n\n     SCT  -  List of subcommands (first 8 characters) and the names\n             of the subprograms which they call (second 8 characters)\n                         Size = variable\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOADTREP": {"ttr": 11782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00#\\x01\\x19\\x15O\\x01\\x19\\x17\\x0f!C\\x00\\x0c\\x00\\x06\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-06-03T00:00:00", "modifydate": "2019-06-19T21:43:23", "lines": 12, "newlines": 6, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBT JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//* -------------------------------------------------------- */\n//*    RUN LOADTEST - REPLACE TEST TABLES FROM TESTIN DD     */\n//* -------------------------------------------------------- */\n//LOADTEST EXEC PGM=LOADTEST\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT DD  SYSOUT=*\n//SYSPRNT2 DD  SYSOUT=*\n//TESTOUT  DD  SYSOUT=*\n//TESTOUT2 DD  SYSOUT=*\n//TESTIN   DD  DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(LOADTCTP)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADTRES": {"ttr": 11784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x08\\x01\\x19\\x15O\\x01\\x19\\x17o\\x00V\\x00\\x12\\x00\\x06\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2019-06-03T00:00:00", "modifydate": "2019-06-25T00:56:08", "lines": 18, "newlines": 6, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBT JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*-------------------------------------------------------------*/\n//*   PARM=R PROCESSING.  RESTORE PREVEIOUS VERSION OF TABLES.  */\n//*-------------------------------------------------------------*/\n//*   RESTORE PREVIOUS TEST TABLES.  WILL ONLY WORK IF THERE    */\n//*   WAS THE PREVIOUS TPT ADDRESS PLACED AT X'24' FROM THE     */\n//*   BEGINNING OF THE NEW TPT CONTROL BLOCK.  OTHERWISE CODE 4 */\n//*-------------------------------------------------------------*/\n//*   THE TESTIN DDNAME MUST BE PRESENT FOR PARM=R.             */\n//*-------------------------------------------------------------*/\n//LOADTEST EXEC PGM=LOADTEST,PARM=R\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT DD  SYSOUT=*\n//SYSPRNT2 DD  SYSOUT=*\n//TESTOUT  DD  SYSOUT=*\n//TESTOUT2 DD  SYSOUT=*\n//TESTIN   DD  DUMMY         (NECESSARY FOR PARM=R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADTSIN": {"ttr": 11786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00$\\x01\\x19\\x15O\\x01\\x19\\x17\\x0f!3\\x00\\x0e\\x00\\x0b\\x00\\x00\\xe3\\xc5\\xe2\\xe3\\xc9\\xd5@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-06-03T00:00:00", "modifydate": "2019-06-19T21:33:24", "lines": 14, "newlines": 11, "modlines": 0, "user": "TESTIN"}, "text": "* LOADTEST PARMS\n*---+----1----+-\n--TCT--\nTSOEXEC\nSDSF\nPDS\nPDS86\n--SCT--\nF       IKJT9FIZ\nFI      IKJT9FIZ\nFIN     IKJT9FIZ\nFIND    IKJT9FIZ\nLB      IKJT9LBZ\nLG      IKJT9LGZ\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOBFREX$": {"ttr": 11788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x002\\x01\\x055O\\x01\\x19\\x19o\\x15#\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-15T15:23:32", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(LOBFREXT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(1)\n ENTRY   LOBFREXT\n NAME    LOBFREXT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOBFREXT": {"ttr": 11790, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x13\\x01\\x055O\\x01\\x19!/\\x08E\\x02\\xb4\\x01\\x87\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-31T08:45:13", "lines": 692, "newlines": 391, "modlines": 0, "user": "SBGOLOB"}, "text": "LOBFREXT TITLE 'LOBFREXT - SET LOW SIZE OF VTIOC BUFFERS'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.  APF AUTHORIZED.  YOU NEED TO PUT        *\n*                   THIS COMMAND NAME IN THE ACTIVE IKJEFTE2 TABLE,   *\n*                   OR AUTHORIZE IT SOME OTHER WAY (CBT FILE 185).    *\n*                                                                     *\n*         SYNTAX:   LOBFREXT nnnn (nnnn is the new value of           *\n*                                  LOBFREXT in decimal)               *\n*                                                                     *\n*         OUTPUT:   Via PUTLINE interface, using APUT and EPUTL.      *\n*                                                                     *\n*       FUNCTION:   TO CHANGE DEFAULT NUMBER LOBFREXT IN THE          *\n*                   TCAS CONTROL BLOCK IKTTCAST.                      *\n*                                                                     *\n*                                                                     *\n*         WARNING:  I have not artificially imposed a limit on the    *\n*                   size of the number in this command.  So use this  *\n*                   command carefully.                                *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  JUL 09, 2019                                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*         CHANGES:  1.1 - DEC 12, 09 -  (for program BDMNNOTC)        *\n*                     Fixed messages, better numeric verification.    *\n*                                                                     *\n*                   1.2 - DEC 14, 09 -                                *\n*                     Better comments, title subroutine, cut out      *\n*                     unnecessary code. Put non-numeric test in       *\n*                     the proper place, to not cause a S0C7 abend.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                  M A I N L I N E   C O D E\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nLOBFREXT CSECT\nLOBFREXT AMODE 31\nLOBFREXT RMODE 24\n         USING LOBFREXT,R12,R11,R10\n         B     BEGINN-*(,R15)\n         DC    CL18'LOBFREXT VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             Set up base\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)         Second base\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)         Third base\n         LR    R6,R1               PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                  Initialize constants.\n         MVC   NEWNMBIN,=F'0'\n         MVI   NUMFLAG,X'00'\n         MVI   LINEB,X'40'\n* ------------------------------------------------------------------- *\n*  Get old default value for LOBFREXT. Do it early on in the program. *\n* ------------------------------------------------------------------- *\n*  Test if we are APF-authorized - IKTTCAST is in Subpool 231 -       *\n*    which is fetch-protected.  You need APF to even see it.          *\n* ------------------------------------------------------------------- *\n         STM   R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         L     R2,16               CVT\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCAST\n         USING TCAST,R3\n         MODESET KEY=ZERO\n         L     R4,TCASLBUF         Save old number LOBFREXT.\n         MODESET KEY=NZERO\n         CVD   R4,CVDWORK          Convert to Decimal\n         MVC   DECOLDNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECOLDNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         DROP  R2,R3\n* ------------------------------------------------------------------- *\n* --     Is it TSO?  And run another authorization check.          -- *\n* ------------------------------------------------------------------- *\n* --       You need OPER and ACCT authority to run this, if you    -- *\n* --     comment out the bypass that is after the CHEKAUTH label.  -- *\n* ------------------------------------------------------------------- *\n         L     R1,16               Point to CVT.\n         L     R1,0(,R1)           Point to TCB/ASCB words.\n         L     R9,4(,R1)           Point to TCB.\n         L     R1,X'B4'(,R9)       Point to JSCB.\n         L     R2,X'108'(,R1)      Point to PSCB.\n         LA    R2,0(,R2)           Clear high byte.\n         LTR   R2,R2               Any PSCB?\n         BZ    EOJ4                Get out. Not TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                  TSO Authorization (Oper,Acct)\n         B     CONT0               Bypass authorization check.\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes. Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No. Get out.\n         DROP  R2\n* ------------------------------------------------------------------- *\n* --         Get Parameter - Make sure it is numeric.              -- *\n* ------------------------------------------------------------------- *\nCONT0    DS    0H\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No. Not TSO.\n         L     R1,0(,R6)           Point to Command Buffer.\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out of none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of Command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,EOJ4              Zero. Message.\n         BC    5,EOJ4              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,10               Load Reg for BCT loop. 10 times.\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)                to first nonnull character\n         LA    R8,0                Initialize character count.\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the number\n*--------------------------------  Numeric Test this character - below\n         CLI   0(R7),C'0'\n         BL    FLAGON              Less than 0 ? No good.\n         CLI   0(R7),C'9'          Greater than 9 ?\n         BH    FLAGON              No good.\n         B     FLAGGO              It's numeric.\nFLAGON   OI    NUMFLAG,X'01'       It's not numeric. Flag the situation\nFLAGGO   DS    0H\n*--------------------------------  Numeric Test this character - above\n         LA    R7,1(,R7)           Go to next character\n         LA    R8,1(,R8)           Count it.\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nNOMORCUT DS    0H\n         MVC   NEWNUMB(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for Execute\n         EX    R8,MOVOUTL          Move number into display field\n         LA    R8,1(,R8)           Bump R8 back to where it was\n*\n         TM    NUMFLAG,X'01'       Did it fail the numeric test?\n         BO    NOTNUMER            It failed. No changes to be made.\n*\n         STC   R8,NUMCOUTL         Save PARM number's length (not used)\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         BCTR  R8,0                One less for Execute.\n         EX    R8,PACK             Convert to Packed.\n         CVB   R0,WORK             Convert to Binary.\n         ST    R0,NEWNMBIN         And store number in NEWNMBIN.\n         B     PASTCONV            Jump past constants.\n*\nMOVOUTL  MVC   NEWNUMB(*-*),0(R1)  Executed\nPACK     PACK  WORK,0(0,R1)        For conversion to binary.\nWORK     DC    D'0'                CVB work area.\nFULLZERO DC    F'0'                Fullword of zeros.\n*\nPASTCONV DS    0H                  Continue execution.\n* ------------------------------------------------------------------- *\n* -- >  Test again if this command is being run APF Authorized   < -- *\n* ------------------------------------------------------------------- *\nAUTHTEST DS    0H                  Don't let the system get a S047.\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* ------------------------------------------------------------------- *\n*     Replace the number here,   Get TCASLBUF field again, this time  *\n*       in Key 0.                 to replace it with the new number.  *\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT.\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCASP\n         USING TCAST,R3\n* ------------------------------------------------------------------- *\nKZ       MODESET KEY=ZERO\n         MVC   TCASLBUF,NEWNMBIN   Replace LOBFREXT in Key 0.\nNZ       MODESET KEY=NZERO\n* ------------------------------------------------------------------- *\n* --  Normal Completion  -                                         -- *\n* ------------------------------------------------------------------- *\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Previous default value of LOBFREXT: '\n         MVC   LINE+36(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE(36),=C'Default value of LOBFREXT reset to: '\n         MVC   LINE+36(10),NEWNUMB\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         DROP  R3\n* ------------------------------------------------------------------- *\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default value of LOBFREXT:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG10),MESSAG10\n         APUT  LINE,L'MESSAG10\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,4\n         B     EOJ                 CONT.\n* ------------------------------------------------------------------- *\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default value of LOBFREXT:  '\n         MVC   LINE+36(10),LJUSTWRK    Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG11),MESSAG11\n         APUT  LINE,L'MESSAG11\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ                 CONT\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default value of LOBFREXT:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n*        APUT  LINE,47\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTNUMER DS    0H                     Parameter not numeric.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default value of LOBFREXT:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   MESSPARM,NEWNUMB       Stuff entered parm into message.\n         APUT  MESSAG2B,MESSAG2L\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      S U B R O U T I N E S                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTITLSTMT DS    0H\n         APUT  MESSAGET,L'MESSAGET    Full title and messages.\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSAGEV,L'MESSAGEV\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLJUST    DS    0H                    Left-justify the display number.\n         STM   R4,R6,SAVER4T6        Save work registers.\n         LA    R4,RJUSTWRK           Point to right-justified number.\n         LA    R5,LJUSTWRK           Point to left-justification area.\n         LA    R6,10                 10 characters only.\nLJUSTLUP DS    0H                    loop.....\n         CLI   0(R4),X'F0'           Is this character smaller than 0?\n         BL    LJUSTBMP              No good. Bump past it.\n         CLI   0(R4),X'F9'           Is this character larger than 9?\n         BH    LJUSTBMP              No good. Bump past it.\n         MVC   0(1,R5),0(R4)         Significant. Move it to left-just.\n         LA    R5,1(,R5)             Bump left-just character.\nLJUSTBMP DS    0H\n         LA    R4,1(,R4)             Bump right-just char in any case.\nLJUSTCYC BCT   R6,LJUSTLUP           Loop up to BCT times. (10).\nLJUSTEND DS    0H                    end of loop.....\n         LM    R4,R6,SAVER4T6        Restore work registers.\n         BR    R9                    Return to caller.\nRJUSTWRK DC    CL10' '               Right-justified display number.\nLJUSTWRK DC    CL10' '               Left-justified display number.\nSAVER4T6 DS    3F                    Save area for work registers.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                '   BLANKS\nMESSAGED DC    C'--------------------------------------'\nMESSAGET DC    C'LOBFREXT - VER. 1.2 - &SYSDATE - &SYSTIME   '\nMESSAGEU DC    C' Change the LOBFREXT number in the IKTTCAST '\nMESSAGEV DC    C' control block.                             '\nMESSAG10 DC    C'To change LOBFREXT, enter a numeric parameter. '\nMESSAG11 DC    C'This program was not invoked as a TSO command.'\nMESSAG2B DC    C'Parameter '\nMESSPARM DC    C'          '\nMESSAG2E DC    C'had non-numeric characters.  '\nMESSAG2L EQU   *-MESSAG2B\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMASK10   DC    XL10'40202020202020202120'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D                  Save Area\nCVDWORK  DS    D                   Work area for CVD instruction\nSAVE1401 DC    5F'0'               TESTAUTH save area for registers\nNEWNMBIN DS    F                   New number to put in CVTBCLMT\nDECOLDNM DS    PL8                 Packed version\nNUMFLAG  DC    X'00'               Flag, X'01' if not numeric\nNUMCOUTL DC    X'00'               Store Length of parameter here\nNEWNUMB  DC    C'          '       Store Parm number here\n         DS    0F                  Align on fullword\nLINEB    DS    C                   LINE-1 (primed with blank)\nLINE     DS    CL137               Print line for most purposes\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of Data Area\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKTTCAST\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOGOPTS": {"ttr": 12040, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00P\\x01\\x08\\x15?\\x01\\x16\\x01/\\x00V\\x02\\xe8\\x00a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "2008-06-01T00:00:00", "modifydate": "2016-01-12T00:56:50", "lines": 744, "newlines": 97, "modlines": 0, "user": "SBGOLOB"}, "text": "LOGOPTS  TITLE 'Set/Display TSO Global LOGON options'\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*    Function:   To turn LOGON global settings on or off.             *\n*                                                                     *\n*                These are the settings which are controlled          *\n*                by the LOGON keyword in the IKJTSOxx PARMLIB         *\n*                member.  Which bits control which options,           *\n*                are mentioned below.  Release dependency is          *\n*                z/OS 1.10 or higher.                                 *\n*                                                                     *\n*                Two control blocks are affected:  the TSVT           *\n*                (TSO Vector Table) pointed to by CVTTVT, and         *\n*                the TPVT (TSO Parameters Vector Table), which        *\n*                contains most of the controls specified in           *\n*                the IKJTSOxx PARMLIB member.  In the TSVT,           *\n*                which is mapped by macro IKJTSVT, there is a         *\n*                pointer to the address of the TPVT, which is         *\n*                documented internally by IBM with a PL/X macro       *\n*                IKJTPVT, and which we converted to an assembler      *\n*                macro that is also called IKJTPVT.                   *\n*                                                                     *\n*                The controls we are dealing with, comprise the       *\n*                lower nibble of the two control blocks, which        *\n*                must match.  In the TSVT, the upper nibble           *\n*                of the appropriate byte contains other               *\n*                information, but the corresponding upper nibble      *\n*                in the TPVT currently contains zeros.                *\n*                                                                     *\n*                The lower nibble in these two fields must match:     *\n*                                                                     *\n*                TSVT + x'5'   TSVTFLG1                               *\n*                TPVT + x'4C'  TPVTLOGON  (our terminology,           *\n*                                          not IBM's, although        *\n*                                          it seems logical to        *\n*                                          call it by this name.)     *\n*                                                                     *\n*                If you want to switch these settings temporarily,    *\n*                then issue this APF-authorized TSO command:          *\n*                Display only, of the current settings, is done       *\n*                either by not entering a parameter, or by entering   *\n*                a parameter that is not S, A, H, or P.               *\n*                                                                     *\n*                To turn off a bit, suffix an F to the parameter:     *\n*                For example:  LOGOPTS SF, AF, HF, or PF.             *\n*                                                                     *\n*                Bit settings are found in the TSVTFLG1 field in      *\n*                the TSVT (TSO Vector Table) in the lower nibble,     *\n*                and this nibble must match the corresponding         *\n*                nibble in control block TPVT + X'4C'.                *\n*                                                                     *\n*          Bits are set as follows for the following options:         *\n*                                                                     *\n*          X'08' -  Password Phrase Support                           *\n*          X'04' -  Applid Verification                               *\n*          X'02' -  LOGONHERE Support                                 *\n*          X'01' -  Password Preprompt Support                        *\n*                                                                     *\n*          Set/Show IKJTSOxx TSO LOGON Options                        *\n*          -------- -------- --- ----- -------                        *\n*           S -  Password Phrase Support                              *\n*           A -  Applid Verification                                  *\n*           H -  LOGONHERE Support                                    *\n*           P -  Password Preprompt Support                           *\n*                                                                     *\n*          USE OF THIS PROGRAM:  To turn a bit on, use the            *\n*                 following parms:  To turn a bit off, use            *\n*                 the same letter parm, followed by the               *\n*                 letter F, as described here:                        *\n*                                                                     *\n*                 PA   Service Activated            BIT   TO TURN     *\n*                 RM                                SET   OFF         *\n*                 --   -----------------            ---   -------     *\n*          LOGOPTS S - Password Phrase Support     x'08'  SF - Off    *\n*          LOGOPTS A - Applid Verification         x'04'  AF - Off    *\n*          LOGOPTS H - LOGONHERE Support           x'02'  HF - Off    *\n*          LOGOPTS P - Password Preprompt Support  x'01'  PF - Off    *\n*                                                                     *\n*          LOGOPTS (anything else) - to display the current setting   *\n*                                    of the TSVTFLG1 and TPVTLOGON    *\n*                                    bytes. (Display does not require *\n*                                    APF-authorization.)              *\n*                                                                     *\n*    Date:       November 8, 2015                                     *\n*                                                                     *\n*    Technical Detail:  PUTLINE interface for TSO Output.             *\n*                                                                     *\n*    Requirement:   APF authorized for bit changes.                   *\n*                   APF authorization not required for displays.      *\n*                                                                     *\n*    Release Dependencies:  Needs z/OS 1.10 or above.                 *\n*                                                                     *\n*    Changes:                                                         *\n*                                                                     *\n*      2015/12/18 - Messages included on how to make changes, to      *\n*                   turn off a bit.  Implied is how to turn it on.    *\n*                                                                     *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    REGS\n         LCLA  &I\n&I       SETA  0\n.LUP     ANOP\nR&I      EQU   &I\n&I       SETA  &I+1\n         AIF   (&I LE 15).LUP\n         MEND\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n* --       End of Internal Macros......                            -- *\n* ------------------------------------------------------------------- *\n         SPACE 3\nLOGOPTS  CSECT\nLOGOPTS  AMODE 31\nLOGOPTS  RMODE ANY\n         REGS\n         USING LOGOPTS,R15         (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nEYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.\nEYEC     DC    C' LOGOPTS - &SYSDATE - &SYSTIME '\n         DC    C' --  Set/Show IKJTSOxx LOGON Options  -- '\n         DC    C'   '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         USING LOGOPTS,R12,R10,R9  (TELL ASSEMBLER).\n         LA    R10,4095(,R12)\n         LA    R10,1(,R10)\n         LA    R9,4095(,R10)\n         LA    R9,1(,R9)\n         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\n         SPACE 1\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(,R2)           LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    NOPARMS             B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         OI    1(R2),C' '\n         ST    R2,STORPARM         Store PARM address for later.\n*\n* --------   Parms gotten at this point.       -------- *\n* --------   Are we turning bits on, or off?   -------- *\n*\nSETFLAGS DS    0H                  Initialize flags.\n         MVI   FLAG1,X'00'         On or off flag.\n         MVI   FLAG2,X'00'         Bits on flag.\n         MVI   FLAG2N,X'FF'        Bits off flag.\n         L     R2,STORPARM         Store address of PARM pointer.\n* --->\n*        MVC   OUTPUT,OUTPUT-1     Test --- Show on/off parm field.\n*        HEX   OUTPUT+5,1,1(R2)    Diagnostics\n*        APUT  OUTPUT,36\n* --->\n         OI    FLAG1,X'80'         Initialize flag to \"bit on\"\nTURNOFF  CLI   1(R2),C'F'          F. TURN OFF?\n         BNE   TURNON              No. Turn bit on.\n         MVI   FLAG1,X'00'         Yes. We are turning the bit off.\n*                                  MVI is not overkill.\n         B     FINDDATA            Go get TSVT and TPVT.\nTURNON   OI    FLAG1,X'80'         Set up for turning the bit on.\n         B     FINDDATA            Go get the guts.\nNOPARMS  DS    0H                  No PARM, no foul.\n*\n* - Parms chosen. Now get the control blocks TSVT and TPVT. - *\n*\nFINDDATA L     R5,X'10'            POINT TO THE CVT.\n         L     R5,X'9C'(,R5)       POINT TO THE TSVT.\n         ST    R5,SAVETSVT         Save its address.\n         L     R5,X'4C'(,R5)       POINT TO THE TPVT.\n         ST    R5,SAVETPVT         Save its address.\n         CLC   =C'TPVT',0(R5)      Are we really there? Eyecatcher.\n         BNE   ERRTPVT             No. Report a problem.\n         L     R5,SAVETSVT         Reload TSVT address.\n         CLC   =C'TSVT',0(R5)      Are we really there? Eyecatcher.\n         BNE   ERRTSVT             No. Report a problem.\n* -- >     Further tests for release dependency - below\n         L     R6,16               Get CVT\n         USING CVT,R6\n         TM    CVTDCB,CVTOSEXT     Does CVTOSLVL exist?\n         BZ    RELERR              No. Wrong release.\n         TM    CVTOSLV5,CVTH7750   Are we at least at z/OS 1.10?\n         BZ    RELERR              No. Wrong release.\n         DROP  R6\n* -- >     Further tests for release dependency - above\nTITLEOUT DS    0H                  Display Program Title\n         APUT  'Set/Show IKJTSOxx TSO LOGON Options  ',37\n         APUT  '-------- -------- --- ----- -------  ',37\n         APUT  ' S - Password Phrase Support     08  ',37\n         APUT  ' A - Applid Verification         04  ',37\n         APUT  ' H - LOGONHERE Support           02  ',37\n         APUT  ' P - Password Preprompt Support  01  ',37\n         APUT  TURNOFFM,L'TURNOFFM\n         APUT  PARMEXMP,L'PARMEXMP\n         L     R7,SAVETSVT                   Reload TSVT address\n         L     R8,SAVETPVT                   Reload TPVT address\n         APUT  BEFORE,L'BEFORE\n         MVC   OUTPUT,OUTPUT-1               Print out the bit values\n         MVC   OUTPUT+1(10),=C'TSVTFLG1 :'    before any change takes\n         HEX   OUTPUT+15,1,X'5'(R7)           place.\n         APUT  OUTPUT,36\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT+1(10),=C'TPVTLOGON:'\n         HEX   OUTPUT+15,1,X'4C'(R8)\n         APUT  OUTPUT,36\n         MVC   OUTPUT,OUTPUT-1\n** ---------------------------------------------------------------- **\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >                             We're authorized. Go Key 0.\n** ---------------------------------------------------------------- **\n*                                  Now look for valid parms.\n         MVI   FLAG2,X'00'\nISITS    CLI   0(R2),C'S'          Passphrase support?\n         BNE   ISITA\n         OI    FLAG2,FLAGPHRS\nISITA    CLI   0(R2),C'A'          Applid verification?\n         BNE   ISITH\n         OI    FLAG2,FLAGAPPL\nISITH    CLI   0(R2),C'H'          LOGONHERE support?\n         BNE   ISITP\n         OI    FLAG2,FLAGLGNH\nISITP    CLI   0(R2),C'P'          Password pre-prompt?\n         BNE   ITISNT\n         OI    FLAG2,FLAGLGPC\nITISNT   TM    FLAG2,X'0F'         Any of these present?\n         BZ    GETRIDOF            No. Wipe 2nd char of PARM & leave\n** ---------------------------------------------------------------- **\n* ---->                      TEST BELOW    Flag display\n         MVC   OUTPUT,OUTPUT-1\n* -->>\n         MVC   OUTPUT+19(3),=C'bit'\n         CLI   FLAG1,X'00'\n         BE    FLAG1OFF\n         MVC   OUTPUT+9(3),=C'on '\n         B     FLAG1END\nFLAG1OFF DS    0H\n         MVC   OUTPUT+9(3),=C'off'\nFLAG1END DS    0H\n* -->>\n         HEX   OUTPUT+5,1,FLAG1    Display FLAG1\n         HEX   OUTPUT+15,1,FLAG2   Display FLAG2\n         MVC   OUTPUT+26(8),=C'*action*'\n         APUT  OUTPUT,45\n         MVC   OUTPUT,OUTPUT-1\n* ---->                      TEST ABOVE    Flag display\n** ---------------------------------------------------------------- **\nITIS     DS    0H                  Create opposite to turn off.\n         MVI   FLAG2N,X'FF'        FLAG2N is complement of FLAG2.\n         XC    FLAG2N(1),FLAG2\n* ---->                      TEST BELOW  (Diagnostic)\n*        MVC   OUTPUT,OUTPUT-1\n*        HEX   OUTPUT+5,1,FLAG2N   Display FLAG2N\n*        APUT  OUTPUT,36\n*        MVC   OUTPUT,OUTPUT-1\n* ---->                      TEST ABOVE  (Diagnostic)\n** ---------------------------------------------------------------- **\n*                  This section is for the Key 0 stuff.\n*                  ---- ------- -- --- --- --- - -----\n*\n         USING TSVT,R7             Address the control blocks.\n         USING TPVT,R8\n         MODESET KEY=ZERO,MODE=SUP\n         TM    FLAG1,FLAGCSYS\n         BO    ON\n         B     OFF\nON       DS    0H                  Turn bit on.\n         OC    TSVT+X'5'(1),FLAG2       In\n         OC    TPVT+X'4C'(1),FLAG2        both\n         B     MODEOUT                      places.\nOFF      DS    0H                  Turn the same bit off.\n         NC    TSVT+X'5'(1),FLAG2N      In\n         NC    TPVT+X'4C'(1),FLAG2N       both\nMODEOUT  DS    0H                           places.\n         DROP  R7,R8\n         MODESET KEY=NZERO,MODE=PROB\n*                                  Out of Key 0.\n** ---------------------------------------------------------------- **\n         APUT  AFTER,L'AFTER\n         MVC   OUTPUT,OUTPUT-1                 Show the result.....\n         MVC   OUTPUT+1(10),=C'TSVTFLG1 :'\n         HEX   OUTPUT+15,1,X'5'(R7)\n         APUT  OUTPUT,36\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT+1(10),=C'TPVTLOGON:'\n         HEX   OUTPUT+15,1,X'4C'(R8)\n         APUT  OUTPUT,36\n         MVC   OUTPUT,OUTPUT-1\n         LA    R2,0                Important to reinitialize 2nd parm\n         L     R2,STORPARM         This should clear F if valid parm\n         MVI   1(R2),X'40'         by stuffing a blank there.\n         B     RETURN\n** ---------------------------------------------------------------- **\nGETRIDOF DS    0H                  If F following an invalid parm\n         MVI   1(R2),X'40'         Blank 2nd char of parm.\n         B     NOACTION\n** ---------------------------------------------------------------- **\nNOACTION DS    0H                  Message that no action was done.\n         APUT  MESSAG5C,L'MESSAG5C\n         B     RETURN\n** ---------------------------------------------------------------- **\nRETURN   L     R13,SAVE+4             E\n         LM    R14,R12,12(R13)          X\n         SR    R15,R15                    I\n         BR    R14                          T\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                  Command not APF authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         B     RETURN\n** ---------------------------------------------------------------- **\nRELERR   DS    0H                  z/OS Release is not high enough.\n         APUT  MESSAG1C,L'MESSAG1C\n         B     RETURN\n** ---------------------------------------------------------------- **\nERRTSVT  DS    0H                  Error accessing TSVT control block\n         APUT  MESSAG3C,L'MESSAG3C\n         B     RETURN\n** ---------------------------------------------------------------- **\nERRTPVT  DS    0H                  Error accessing TPVT control block\n         APUT  MESSAG4C,L'MESSAG4C\n         B     RETURN\n** ---------------------------------------------------------------- **\n** --         C  O  N  S  T  A  N  T  S                          -- **\n** ---------------------------------------------------------------- **\nMESSAG1C DC    C'LOGOPTS is only supported for z/OS 1.10 and higher.'\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG3C DC    C'Error accessing TSVT.'\nMESSAG4C DC    C'Error accessing TPVT.'\nMESSAG5C DC    C'No action performed. '\nBEFORE   DC    C'Before: (low order nibbles must match)'\nAFTER    DC    C'After : (low order nibbles must match)'\nTURNOFFM DC    C'Parm of F after a letter turns the bit off.'\nPARMEXMP DC    C'Example: LOGOPTS PF turns X''01'' off.'\nSAVETSVT DC    F'0'\nSAVETPVT DC    F'0'\nFLAG1    DC    X'00'\nFLAGCSYS EQU   B'10000000'\nFLAG2    DC    X'00'\nFLAGPHRS EQU   B'00001000'\nFLAGAPPL EQU   B'00000100'\nFLAGLGNH EQU   B'00000010'\nFLAGLGPC EQU   B'00000001'\nFLAG2N   DC    X'FF'\nSTORFLAG DC    X'00'\nSTORPARM DS    F\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\n         DS    0D\nSAVE     DS    9D                  Program Save Area\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\n         DC    C' '                Blank before OUTPUT line.\nOUTPUT   DC    CL80'  '            Variable output line.\n         LTORG\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           Map the CVT.\n         IKJTSVT                   Map the TSVT control block.\n         IKJTPVT                   Map the TPVT control block.\n         END   LOGOPTS\n** ---------------------------------------------------------------- **\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOGOPTS$": {"ttr": 12298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x12\\x01\\x07\"\\x7f\\x01\\x16\\x01/\\x00Y\\x00\\x1d\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2007-08-15T00:00:00", "modifydate": "2016-01-12T00:59:12", "lines": 29, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.SHOW723.MACLIB\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(LOGOPTS)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   LOGOPTS\n SETSSI  CB491731\n SETCODE AC(1)\n NAME    LOGOPTS(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOGOPTS@": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x14\\x00\\x811?\\x01\\x155/\\x13\\x16\\x00v\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1981-11-09T00:00:00", "modifydate": "2015-12-18T13:16:14", "lines": 118, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n\n  The LOGOPTS TSO command is an APF-authorized TSO command\n  which is designed to change (on or off) all values that are\n  controlled by the PARMLIB member IKJTSOxx with its LOGON\n  keyword.\n\n  Bits are set as follows for the following options:\n\n  X'08' -  Password Phrase Support\n  X'04' -  Applid Verification\n  X'02' -  LOGONHERE Support\n  X'01' -  Password Preprompt Support\n\n  Where are they set?  In two control blocks:\n   the TSVT and the TPVT.\n\n  The controls we are dealing with, comprise the\n  lower nibble of two control block fields, which\n  must match.  In the TSVT, the upper nibble\n  of the appropriate byte contains other\n  information, but the corresponding upper nibble\n  in the TPVT currently contains zeros.\n\n  The lower nibble in these two fields must match:\n\n  TSVT + x'5'   TSVTFLG1\n  TPVT + x'4C'  TPVTLOGON  (our terminology,\n                            not IBM's, although\n                            it seems logical to\n                            call it by this name.)\n\n  If you want to switch these settings temporarily,\n  then issue this APF-authorized TSO command: LOGOPTS,\n  using one of the valid parms.\n\n  DISPLAY ONLY, of the current settings, is done\n  either by not entering a parameter, or by entering\n  a parameter that is not S, A, H, or P.\n\n  To turn off a bit, suffix an F to the parameter:\n  For example:  LOGOPTS SF, AF, HF, or PF.\n\n  Bit settings are found in the TSVTFLG1 field in\n  the TSVT (TSO Vector Table) in the lower nibble,\n  and this nibble must match the corresponding\n  nibble in control block TPVT + X'4C'.\n\n  The effect of the change seems to last either:\n\n  1.  Until a PARMLIB UPDATE(xx) TSO command is executed, or\n      until a SET IKJTSOxx  console command is executed, or\n      until the next IPL.\n\n  2.  It seems that the TSVT and TPVT will persist even\n      after a P TCAS command and a subsequent S TCAS\n      command, or even if you take VTAM down and bring it\n      back up.\n\n      The effect seems to depend on either the initial\n      invocation of IKJEFXSR (the initial program that\n      starts up TSO) upon IPL, or on a change, such as\n      PARMLIB UPDATE(xx) or SET IKJTSOxx, which affects\n      the TSVT and TPVT control blocks directly.\n\n  Bits are set as follows for the following options:\n\n  X'08' -  Password Phrase Support\n  X'04' -  Applid Verification\n  X'02' -  LOGONHERE Support\n  X'01' -  Password Preprompt Support\n\n  These are the LOGOPTS parameters:\n  ----- --- --- ------- ----------\n   S -  Password Phrase Support\n   A -  Applid Verification\n   H -  LOGONHERE Support\n   P -  Password Preprompt Support\n\n  USE OF THIS PROGRAM:  To turn a bit on, use the\n         following parms:  To turn a bit off, use\n         the same letter parm, followed by the\n         letter F, as described here:\n\n         PA   Service Activated            BIT   TO TURN\n         RM                                SET   OFF\n         --   -----------------            ---   -------\n  LOGOPTS S - Password Phrase Support     x'08'  FF - Off\n  LOGOPTS A - Applid Verification         x'04'  AF - Off\n  LOGOPTS H - LOGONHERE Support           x'02'  HF - Off\n  LOGOPTS P - Password Preprompt Support  x'01'  PF - Off\n\n  LOGOPTS (anything else) - to display the current setting\n                            of the TSVTFLG1 and TPVTLOGON\n                            bytes. (Display does not require\n                            APF-authorization.)\n\n\n)X SYNTAX  -\n       LOGOPTS  S       | SF       (Password Phrase Support)\n                A       | AF       (Applid Verification)\n                H       | HF       (LOGONHERE Support)\n                P       | PF       (Password Pre-prompt support)\n\n  REQUIRED - For changing bits, any of the permitted operands\n             For displaying the current settings, no parameter,\n               or else an invalid parameter.\n\n)O OPERANDS -\n))S         -  Turns Password Phrase Support ON.\n))A         -  Turns Applid Verification ON.\n))H         -  Turns LOGONHERE Support ON.\n))P         -  Turns Password Pre-Prompt Support ON.\n))SF        -  Turns Password Phrase Support OFF.\n))AF        -  Turns Applid Verification OFF.\n))HF        -  Turns LOGONHERE Support OFF.\n))PF        -  Turns Password Pre-Prompt Support OFF.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MEMBER": {"ttr": 12548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x004\\x00\\x91\\x14\\x1f\\x01\\x174_!\"\\ni\\nG\\x00\\x00\\xe4\\xd7\\xc4\\xc1\\xe3\\xc5\\xc4@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "1991-05-21T00:00:00", "modifydate": "2017-12-11T21:22:34", "lines": 2665, "newlines": 2631, "modlines": 0, "user": "UPDATED"}, "text": "         TITLE '   M E M B E R    '\n***********************************************************************\n*                                                                     *\n*        'MEMBER' TSO COMMAND                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN: JANUARY 20 1977.\n* DATE UPDATED: DEC 11 2017.\n* ATTRIBUTES: RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*           THIS TSO COMMAND DISPLAYS THE INFORMATION RETURNED BY\n*           THE 'BLDL' MACRO. FOR LOAD MODULES, IT FORMATS THE\n*           INFORMATION CONTAINED IN THE USER DATA FIELD OF THE\n*           DIRECTORY ENTRY RETURNED BY THE 'BLDL' MACRO. FOR\n*           MEMBERS CREATED BY THE 'SPF' IBM PRODUCT, IT FORMATS\n*           THE SPF STATISTICS FROM THE USER DATA FIELD. FOR LOAD\n*           MODULES, IT CAN LIST ESD AND IDR INFORMATION.\n*\n*           THE SYNTAX IS\n*                MEMBER  'DSNAME(MEMBER)'  UNIT(NAME)  VOLUME(NAME)\n*                                          ESOTERIC  DATA\n*                                          LIST  MAP  IDR  LOAD\n*                                          PLUS(MEMBER2 MEMBER3...)\n*            OR\n*                MEMBER 'MEMBER' SYS  ESOTERIC  WHERE\n*            OR\n*                MEMBER 'MEMBER' SLPA      LIST\n*\n*            THE LATTER 2 FORMS (SYS AND SLPA) ARE MORE FOR\n*            SYSTEMS SUPPORT USE THAN FOR NORMAL APPLICATIONS.\n*\n***********************************************************************\n*\n*            KEYWORDS FOR THE FIRST FORM (DSNAME FORM)\n*\n*            THE 'DATA' KEYWORD PRODUCES AN UNFORMATTED HEX DISPLAY\n*            OF THE DIRECTORY DATA.\n*\n*            THE 'ESOTERIC' KEYWORD CAUSES DISPLAY OF EXTRA INFORMATION\n*            THAT MOST USERS NEVER CARE OR NEED TO KNOW.\n*\n*            THE 'LIST' KEYWORD CAUSES THE FIRST 48 BYTES OF THE\n*            LOAD MODULE TEXT TO BE DISPLAYED.  THIS IS USEFUL FOR\n*            MODULES ASSEMBLED WITH IDENTIFICATION INFORMATION\n*            NEAR THE TOP OF THE MODULE.\n*\n*            THE 'MAP' KEYWORD CAUSES 'CESD' (EXTERNAL SYMBOL\n*            DICTIONARY) INFORMATION IN THE MODULE TO BE DISPLAYED.\n*\n*            THE 'IDR' KEYWORD CAUSES 'IDR' (IDENTIFICATION RECORD)\n*            INFORMATION IN THE MODULE TO BE DISPLAYED.\n*\n*            THERE ARE 4 TYPES OF IDR'S -\n*               LINKEDIT, TRANSLATOR, ZAP, AND IDENTIFY.\n*            IF ONLY 'IDR' IS SPECIFIED, ONLY LINKEDIT IS DISPLAYED.\n*            TO DISPLAY A TRANSLATOR, SPECIFY IDR(TRAN).\n*            TO DISPLAY A SECOND TRANSLATOR, SPECIFY IDR(PLS).\n*            TO DISPLAY ZAP RECORDS, SPECIFY IDR(ZAP).\n*            TO DISPLAY ZAP RECORD SPACE, SPECIFY IDR(SPACE).\n*            TO DISPLAY IDENTIFY RECORDS, SPECIFY IDR(ID).\n*            TO DISPLAY ALL OF THE ABOVE, EXCEPT SPACE,\n*               SPECIFY IDR(ALL) OR IDR(T Z I P).\n*\n*            THE CSECT('NAME') KEYWORD ALLOWS YOU TO RESTRICT THE\n*            MAP AND IDR DISPLAYS TO A SPECIFIC CSECT.\n*\n***********************************************************************\n*\n*            KEYWORDS FOR THE 'SYSTEM' AND 'SLPA' FORM\n*\n*            IF THE 'SYS' KEYWORD IS SPECIFIED, THE FIRST OPERAND\n*            IS ONLY A MEMBER NAME, AND THE SYSTEM LINK LIBRARIES\n*            ARE SEARCHED (AND STEPLIB IF THE SESSION HAS ONE).\n*\n*            IF THE 'SLPA' KEYWORD IS SPECIFIED, THE FIRST OPERAND\n*            IS ONLY A MEMBER NAME, AND THE LINK PACK AREA IS SEARCHED.\n*\n*            'LIST' IS THE ONLY VALID KEYWORD WITH 'SLPA'.\n*\n*            'LIST' 'MAP' 'IDR' AND 'CSECT' ARE NOT VALID WITH 'SYS'\n*            BECAUSE READING ESD AND IDR RECORDS REQUIRES A DCB\n*            AND THIS PROGRAM IS DOES NOT HAVE ACCESS TO THE\n*            SYSTEM LINKLIST DCB OR STEPLIB DCB.\n*\n*            THE 'WHERE' KEYWORD, VALID ONLY WITH 'SYS', CAUSES\n*            THE NUMBER OF THE SYSTEM LINK LIBRARY TO BE DISPLAYED.\n*\n***********************************************************************\n*\n*           LOG OF CHANGES.\n*            14SEP79 - GBLB ADDED FOR SVS/MVT VERSION.\n*                      SUBFIELD ADDED TO 'MAP' KEYWORD.\n*                      ESTAE REMOVED.\n*            18SEP79 - 'WHERE' KEYWORD ADDED.\n*            24OCT79 - MSG08 IMPROVED. MAPENTX LENGTHENED BY 1.\n*            10APR80 - TEST CVT+116 FOR MVS.\n*            09OCT80 - SPF STATISTICS DISPLAY ADDED.\n*            10OCT80 - FIRST OPERAND MAY NOW BE A LIST IN PARENS.\n*            19DEC80 - SPF SIZE FIELD 16 BITS, NOT 15.\n*            06JAN81 - SPF V.M IS BINARY, NOT DECIMAL.\n*            06JAN81 - SHOW SPF DATES AS MM/DD/YY INSTEAD OF JULIAN.\n*            27FEB81 - IDR DISPLAY ADDED. CSECT SELECTION ADDED.\n*            10APR81 - TEST OPT3I AT IDRIDENT. BUG FIXED (MAP(ALL)\n*                      BUG FIXED - WAS TESTING OPTION1 FOR OPT2A.\n*            27MAY81 - PLUS(MEMBER MEMBER MEMBER...) KEYWORD ADDED.\n*            09NOV82 - SHOW APF AUTHORIZATION ON FIRST LINE.\n*                      SHOW SCTR ATTRIBUTE. UNIT AND VOL KEYWORDS.\n*                      SLPA KEYWORD FOR SEARCH LPA DIRECTORY.\n*            10NOV82 - SLPA ALSO SEARCHES JPAQ/LPAQ USING THE\n*                      IDENTIFY SVC LIKE IKJEFT02 DOES.\n*            18JUL83 - LOAD KEYWORD, TO TEST FOR VALID LOAD MODULE.\n*            01MAY85 - FIX LOOP IN SLPA BY RESTORING R3 FROM MYANS\n*                      AFTER CALLING IEAVVMSR.\n*            22JUL86 - FIX BUG WHEN BOTH I(A) AND LOAD ARE SPECIFIED\n*                      R7 MUST BE RESET TO PROPERLY ADDRESS PDSINDIC.\n*            15FEB91 - CHECK FOR MSGCRTXT00'S FUNNY DATE IN IDR-TRAN,\n*                      FOUND IN TCPIP-FOR-MVS MODULES, CSECT MSG$LIST,\n*                      DOES NOT CONFORM TO TRANSLATOR RECORD FORMAT AS\n*                      DESCRIBED IN LINKAGE EDITOR LOGIC MANUAL.\n*                      SHOW SOME TRANSLATORS BY NAME. THIRD BASE REG.\n*                      SHOW PRIVATE (PC) REFERENCED IN IDR TRANS.\n*                      FIX DAIR ERROR 4 PROBLEM (XA) BY ADDING VOLSER\n*                      WITH TWO BLANKS FOR DA08SER. SHOW ESDID IN MAP.\n*                      ADD ANYCESD FLAG, TO READ PAST SYM'S FOR CESD.\n*            19FEB91 - IF VOL, SKIP IKJEHDEF AND ADD PREFIX (MVS).\n*            25APR91 - NO CODE CHANGES, JUST COMMENTS.\n*            06MAY91 - ADD RMODE/AMODE TO ESOTERIC INFO.\n*            14MAY91 - RMODE/AMODE IN PARENS IF NO BITS ON.\n*            15MAY91 - INSTEAD OF 1 BYTE UNDER VS, 3 UNDER VSMRLD.\n*            20MAY91 - CHECK FOR ALIAS THAT HAS NO ALIAS INFO.\n*            21MAY91 - ADD OUTFILE KEYWORD. MOVE DELETE OF IKJPUTL\n*                      OUTSIDE OF DSNLOOP.\n*            17NOV15 - INCREASE GETMAIN FOR ESDPTR FROM 32768 TO 98304\n*                      FOR CEE.SCEELPA(CEEEV003)\n*                      INCREASE GETMAIN FOR IDRPTR FROM 10240 TO 30720\n*                      CHECK FOR HLASM 569623400 AND XLC 5694A01 (Z/OS)\n*            11JUN16 - SHOW 4-BYTE LPDE EP AND ADDR INSTEAD OF 3-BYTE\n*                      EXAMPLE: MEMBER IGC0002G SLPA\n*                      CHECK FOR LINKER 566528408 OR BINDER 5695PMB01\n*            11DEC17 - CHECK UPT FOR 8-BYTE PREFIX - Z/OS V2R3.\n*\n***********************************************************************\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  ('&SYSPARM' NE 'OS')     1 = MVS   0 = OS/MVT\n         SPACE\nMEMBER   START\n         USING *,R10,R11,R12\nORIGIN   B     @START-*(,15)\n         DC    AL1(8),CL11'MEMBER'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND LENGTH\n@START   STM   14,12,12(13)\n         LR    R10,15\n         LA    R14,4095\n         LA    R11,1(R14,R10)      SECOND BASE REGISTER\n         LA    R12,1(R14,R11)      SECOND BASE REGISTER\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    R13,4(,R1)          PUT OLD ADDRESS IN NEW SAVE AREA\n         ST    R1,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R1              SWITCH R13 TO NEW SAVE AREA\n         LR    R9,R13\n         USING @DATA,R9\n         SPACE 1\n         MVI   CLEANUP,0\n         MVI   OPTION1,0\n         MVI   OPTION2,0\n         SLR   R15,R15\n         STH   R15,RC\n         ST    R15,LINKAREA+4\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   PUTLOAD             BRANCH IF NOT MVS\n         TM    444(R15),X'80'      IS PUTLINE LOADED (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - GET ADDRESS\n         B     PUTLODED            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n*        L     R0,=A(MEMPCL)\n         LA    R0,PCLADDR\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   PARSELNK            BRANCH IF NOT MVS\n         TM    520(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,520(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    PARSEOK\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     EXIT\nPARSEOK  EQU   *\n         SPACE\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         CLI   DATAKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1D       DATA\n         CLI   TESTKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1T       TEST\n         CLI   SYSTKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1S       SYSTEM OR SLPA\n         CLI   SYSTKW+1,3\n         BNE   *+8\n         OI    OPTION1,OPT1L       SLPA\n         CLI   ESOKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1E       ESOTERIC\n         CLI   MAPKW+1,0           MAP\n         BE    *+8\n         OI    OPTION2,OPT2M\n         CLI   MAPSKW+1,1          MAP(ALL)\n         BNE   *+8\n         OI    OPTION2,OPT2A       MAP(ALL)\n         CLI   LISTKW+1,0\n         BE    *+8\n         OI    OPTION2,OPT2L       LIST\n         CLI   LOADKW+1,0\n         BE    *+8\n         OI    OPTION2,OPT2O       LOAD\n         CLI   WHEREKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1W       WHERE\n         CLI   IDRKW+1,0\n         BE    NOIDRK\n         OI    OPTION2,OPT2I       IDR\n         CLI   IDRTRNKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3T       IDR(TRAN)\n         CLI   IDRPLSKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3T+OPT3P IDR(PLS)\n         CLI   IDRZAPKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3Z       IDR(ZAP)\n         CLI   IDRSPCKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3S       IDR(SPACE)\n         CLI   IDRIDEKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3I       IDR(IDENTIFY)\n         CLI   IDRALLKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3Z+OPT3T+OPT3P+OPT3I       (ALL)\nNOIDRK   EQU   *\n         SPACE\n         MVC   CNAME,=CL8' '\n         TM    CSECT+6,X'80'\n         BZ    NOCSECT\n         LA    R15,CSECT\n         L     R14,0(,R15)\n         LH    R1,4(,R15)\n         BCTR  R1,0\n         B     *+10\n         MVC   CNAME(0),0(R14)\n         EX    R1,*-6\nNOCSECT  EQU   *\n         SPACE\n         MVC   ONAME,=CL8' '\n         TM    OUTFI+6,X'80'\n         BZ    NOOUTFI\n         LA    R15,OUTFI\n         L     R14,0(,R15)\n         LH    R1,4(,R15)\n         BCTR  R1,0\n         B     *+10\n         MVC   ONAME(0),0(R14)\n         EX    R1,*-6\n         MVC   OUTDCBW(OUTDCBL),OUTDCB\n         LA    R4,OUTDCBW\n         USING IHADCB,R4\n         MVC   DCBDDNAM(8),ONAME\n         LA    R1,OUTEXL\n         STCM  R1,7,DCBEXLST\n         LA    R0,OUTOPEN          POINT R0 TO OPEN EXIT\n         ST    R0,0(,R1)           STORE ADDRESS IN OUTEXL\n         MVI   0(R1),X'85'         OPEN EXIT\n         MVC   OPEND(4),OPEN\n         SPACE\n         OPEN  ((R4),OUTPUT),MF=(E,OPEND)\n         SPACE\n         TM    DCBOFLGS,X'10'\n         BO    OUTOK\n         B     NOOUTFI\nOUTOPEN  CLI   DCBRECFM,0          IF NO RECFM\n         BNE   *+8                    THEN\n         MVI   DCBRECFM,X'90'         RECFM=FB\n         CLC   DCBLRECL,=H'0'      IF NO LRECL\n         BNE   *+10                   THEN\n         MVC   DCBLRECL,=H'80'        LRECL=80\n         CLC   DCBBLKSI,=H'0'      IF NO BLKSI\n         BNE   *+10                   THEN\n         MVC   DCBBLKSI,=H'3120'      BLKSI=3120\n         BR    R14\n         DROP  R4                  IHADCB\nOUTOK    OI    OPTION1,OPT1O       OUTFILE\nNOOUTFI  EQU   *\n         SPACE\n         MVC   UNITN,=CL8' '\n         MVC   VOLSER(8),=CL8' '\n         TM    VOL+6,X'80'         VOL SPECIFIED\n         BZ    NOVOL               NO, LEAVE UNIT AND VOL BLANK\n         LA    R15,VOL\n         L     R14,0(,R15)\n         LH    R1,4(,R15)\n         BCTR  R1,0\n         B     *+10\n         MVC   VOLSER(0),0(R14)\n         EX    R1,*-6\n         SPACE\n         TM    UNIT+6,X'80'\n         BZ    NOVOL\n         LA    R15,UNIT\n         L     R14,0(,R15)\n         LH    R1,4(,R15)\n         BCTR  R1,0\n         B     *+10\n         MVC   UNITN(0),0(R14)\n         EX    R1,*-6\nNOVOL    EQU   *\n         SLR   R15,R15\n         ST    R15,KOUNT\n         SPACE\n************************************************************\n*                                                          *\n*        GET THE MEMBER NAME                               *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R8,DSN\n         B     DSNGO\nDSNLOOP  L     R8,24(,R8)\nDSNGO    ST    R8,DSNPTR\n         MVC   MEMBER8(8),=CL8' '\n         TM    14(R8),X'80'        MEMBER SPECIFIED?\n         BZ    NOMEMBER            NO - BRANCH\n         LH    R1,12(,R8)          GET LENGTH OF MEMBER\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,8(,R8)          GET ADDRESS OF MEMBER NAME\n         B     *+10\n         MVC   MEMBER8(0),0(R14)    MOVE MEMBER NAME\nSYSDSN   EX    R1,*-6\n         STH   R1,MEMBERL\n         B     OKMEMBER\nNOMEMBER EQU   *\n         TM    OPTION1,OPT1S       'SYSTEM' SPECIFIED?\n         BZ    NOMEMMSG            NO, BRANCH          14SEP79\n         LH    R1,4(,R8)           YES - LET DSN BE MEM IF NOT GT 8\n         CH    R1,=H'8'            IS IT TOO LONG?\n         BH    NOMEMMSG            YES - BRANCH\n         L     R14,0(,R8)          NO - POINT TO DSN\n         BCTR  R1,0\n         B     SYSDSN\nNOMEMMSG LA    R1,MSG07\n         LA    R0,L'MSG07\n         BAL   R14,PUTMSG          MEMBER NOT SPECIFIED\n         LA    R15,12\n         B     NEXTDSN\nOKMEMBER EQU   *\n         TM    OPTION1,OPT1S       'SYSTEM' SPECIFIED?\n         BZ    NOTSYS              NO - ALLOCATE THE DATASET\n         SLR   R4,R4               NULLIFY DCB POINTER FOR BLDL\n         B     SYSTEM1\nNOTSYS   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        QUALIFY THE DSNAME IF NECESSARY                   *\n*                                                          *\n************************************************************\n         SPACE\n         TM    6(R8),X'80'         IS DATASET NAME SPECIFIED?\n         BO    OKDSN               YES - BRANCH\n         LA    R1,MSG05            NO - JUST MEMBER NAME\n         LA    R0,L'MSG05\n         BAL   R14,PUTMSG          DATA SET NAME NOT SPECIFIED\n         LA    R15,12\n         B     NEXTDSN\nOKDSN    EQU   *\n         MVI   DSNAME,C' '\n         MVC   DSNAME+1(45),DSNAME\n         LH    R1,4(,R8)           GET LENGTH\n         STH   R1,DSNAME\n         L     R14,0(,R8)          GET ADDRESS OF NAME\n         BCTR  R1,0\n         B     *+10\n         MVC   DSNAME+2(0),0(R14)\n         EX    R1,*-6\n         TM    6(R8),X'40'         IS IT QUOTED?\n         BO    DEFX                YES - SKIP DEFAULT SERVICE\n         CLI   VOLSER,C' '         IS VOL SPECIFIED?\n         BNE   DEFP                YES - SKIP DEFAULT SERVICE\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         LA    R14,MYDFPB\n         ST    R14,IOPLIOPB\n         USING DFPB,R14\n         XC    0(20,R14),0(R14)\n         LA    R0,DSNAME\n         ST    R0,DFPBDSN\n         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI\n         MVC   DFPBPSCB,CPPLPSCB\n         MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME\n         DROP  R14\n         SPACE\n         LA    R1,MYIOPL\n         SPACE\n         LR    R1,R15              POINT TO IOPL\n         AIF   (NOT &MVS).SKIP3\n         L     R15,16              CVTPTR\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   EHDEFLNK            BRANCH IF NOT MVS\n         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   EHDEFLNK               THEN DO LINK, NOT CALL\n         L     R15,736(,R15)       CVTEHDEF\n         BALR  R14,R15             CALL IKJEHDEF\n         B     EHDEFEXT            SKIP AROUND LINK\nEHDEFLNK EQU   *\n.SKIP3   ANOP\n         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)\nEHDEFEXT EQU   *\n         SPACE\n         B     DEFCODE(R15)\nDEFCODE  B     DEF00               SUCCESS\n         B     NEXTDSN              MSG ALREADY ISSUED\n         B     DEF08               INVALID NAME GT 44\n         B     NEXTDSN              MSG ALREADY ISUED\n         B     DEF16               NOT IN CATALOG\n         B     DEF20               NOT IN CATALOG\n         B     DEF24               IMPOSSIBLE\n         B     DEF28               COMMAND SYSTEM ERROR\n         B     DEF32               IMPOSSIBLE\n         B     DEF36               ?\nDEF08    EQU   *\nDEF16    EQU   *\n         B     DEF24\nDEF20    EQU   *\nLOCERR   EQU   *\n         MVC   MSGWK(L'MSG02),MSG02\n         LA    R15,MSGWK+L'MSG02\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG02(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(L'MSG02A,R15),MSG02A\n         LA    R0,L'MSG02+L'MSG02A+1(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTMSG          NOT IN CATALOG\n         B     NEXTDSN\nDEF24    EQU   *\nDEF28    EQU   *\nDEF32    EQU   *\nDEF36    EQU   *\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         BAL   R14,PUTMSG          ERROR IN DEFAULT SERVICE ROUTINE\n         B     NEXTDSN\n         SPACE\nDEFP     MVI   DSNAME,C' '\n         MVC   DSNAME+1(45),DSNAME\n         L     R15,CPPLUPT\n         USING UPT,R15\n         SR    R0,R0               INITIAL LENGTH OF PREFIX AND PERIOD\n         SR    R1,R1\n         CLI   UPTPREFX,C'>'      IF PREFIX IS '>7BYTES' (8 BYTES)\n         BNE   PREF07                THEN\n         IC    R1,UPTPREFL+18      LENGTH OF PREFIX IN UPTPRF8L\n         LTR   R1,R1               IF PROFILE NOPREFIX\n         BZ    DEFP1                  SKIP PREFIX\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   DSNAME+2(0),UPTPREFX+17  (UPTPREF8)\n         EX    R1,*-6              MOVE PREFIX TO DSNAME+2\n         B     PREFDONE\nPREF07   EQU   *\n         IC    R1,UPTPREFL         LENGTH OF PREFIX\n         LTR   R1,R1               IF PROFILE NOPREFIX\n         BZ    DEFP1                  SKIP PREFIX\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   DSNAME+2(0),UPTPREFX  (EXECUTED)\n         EX    R1,*-6              MOVE PREFIX TO DSNAME+2\nPREFDONE EQU   *\n         LA    R1,1(,R1)           RESTORE LENGTH\n         LA    R15,DSNAME+2(R1)    POINT PAST PREFIX\n         DROP  R15                 UPT\n         MVI   0(R15),C'.'         APPEND PERIOD\n         LA    R0,1(,R1)           SET LENGTH OF PREFIX PLUS PERIOD\nDEFP1    LA    R15,DSNAME+2        RESET R15 IN CASE HERE VIA BRANCH\n         AR    R15,R0              POINT PAST PREFIX\n         LH    R1,4(,R8)           GET LENGTH\n         AR    R1,R0               PLUS LENGTH OF PREFIX\n         STH   R1,DSNAME\n         SR    R1,R0               MINUS LENGTH OF PREFIX\n         L     R14,0(,R8)          GET ADDRESS OF NAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   0(0,R15),0(R14)\n         EX    R1,*-6\nDEF00    EQU   *\nDEFX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE DATASET                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB\n         LA    R15,MYDAPB\n         ST    R15,DAPLDAPB\n         DROP  R1\n         USING DAPB08,R15\n         XC    0(84,R15),0(R15)\n         MVI   DA08CD+1,X'08'\n         LA    R0,DSNAME\n         ST    R0,DA08PDSN\n         MVC   DA08DDN(8),=CL8' '\n         MVC   DA08UNIT,UNITN\n         MVC   DA08SER,VOLSER\n         MVC   DA08MNM,=CL8' '\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08SHR\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         TM    22(R8),X'80'        PASSWORD SPECIFIED?\n         BZ    PASSX               NO - BRANCH\n         LH    R1,20(,R8)          GET LENGTH OF PSWD\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,16(,R8)         GET ADDRESS OF PSWD\n         B     *+10\n         MVC   DA08PSWD(0),0(R14)  MOVE PSWD\n         EX    R1,*-6\nPASSX    EQU   *\n         LA    R1,MYDAPL\n         SPACE\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BZ    OKDAIR\n         BAL   R14,DAIRFAIL\n         LA    R15,12\n         B     NEXTDSN\nOKDAIR   EQU   *\n         OI    CLEANUP,X'40'       TELL CLEANUP TO FREE IT\n         LA    R15,MYDAPB\n         MVC   DDSAVE,DA08DDN\n         TM    DA08DSO,X'02'       IS DSORG PARTITIONED?\n         BO    OKDSORGP            YES - BRANCH\n*\n*              DSORG IS NOT PO\n*              PS=X'40' ISAM=X'80' DA=X'20' VSAM=X'00' NONE=X'00'\n*\n         LA    R1,MSG06\n         LA    R0,L'MSG06\n         BAL   R14,PUTMSG          DATA SET NOT PARTITIONED\n         LA    R15,12\n         B     NEXTDSN\nOKDSORGP EQU   *\n         DROP  R15\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP THE DCB                                    *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   DCB(DCBLEN),DCBMODEL\n         LA    R4,DCB\n         USING IHADCB,R4\n         MVC   DCBDDNAM(8),DDSAVE\n         LA    R15,DYNEOD\n         IC    R0,DCBEODAD-1\n         ST    R15,DCBEODAD-1\n         STC   R0,DCBEODAD-1\n         LA    R15,DYNSYNAD\n         IC    R0,DCBSYNAD-1\n         ST    R15,DCBSYNAD-1\n         STC   R0,DCBSYNAD-1\n         MVC   OPEND(4),OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,OPEND)\n         SPACE\n         TM    DCBOFLGS,X'10'\n         BO    OKOPEN\n         LA    R1,MSG04\n         LA    R0,L'MSG04\n         BAL   R14,PUTMSG          UNABLE TO OPEN\n         LA    R15,12\n         B     NEXTDSN\nOKOPEN   EQU   *\n         OI    CLEANUP,X'80'       TELL CLEANUP TO CLOSE IT\n         SPACE\nSYSTEM1  EQU   *\n         MVI   SPFHDRS,0           SET SPF HEADER SWITCH\n         SPACE\n         CLI   PLUSKW+1,1          WAS PLUS(MEMBER,MEMBER...) SPECIFIED\n         BNE   PLUSNO              NO, BRANCH\n         LA    R0,PLUS             YES, PUT THE PDE\n         ST    R0,PLUSPTR           ADDRESS IN THE POINTER FIELD\nPLUSNO   EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF SLPA SPECIFIED, SEE IF MEMBER IS IN LPA                  *\n*                                                                     *\n***********************************************************************\n         SPACE\nMEMLOOP  EQU   *\n         TM    OPTION1,OPT1L       SLPA?\n         BZ    LPAX1               NO, BRANCH\n*\n*\n*\n         LA    R0,MEMBER8\n         SR    R1,R1\n         IDENTIFY EPLOC=(0),ENTRY=(1)\n         LR    R6,R15\n         CH    R15,=H'8'           IN JPAQ/LPAQ\n         BE    IDENTIF1\n         CH    R15,=H'20'          IN JPAQ/LPAQ\n         BNE   IDENTIFX\nIDENTIF1 LA    R1,MSGWK\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   0(7,R1),MSG08\n         LA    R15,7(,R1)\n         MVC   0(8,R15),MEMBER8\n         AH    R15,MEMBERL\n         MVC   1(L'MSG14,R15),MSG14\n         LA    R15,L'MSG14+1-3(,R15)\n         CH    R6,=H'20'\n         BNE   *+10\n         MVC   0(3,R15),=C'20)'    SHOW RC 20 FROM IDENTIFY\n         LA    R15,3(,R15)\n         LR    R0,R15\n         LA    R1,MSGWK\n         SR    R0,R1\n         BAL   R14,PUTMSG          MEMBER FOUND IN LPA\nIDENTIFX EQU   *\n*\n*              CALL IEAVVMSR TO SEARCH LPA DIRECTORY\n*\n*                  REGS 0 AND 1 - CONTAIN NAME\n*                  REG 3        - CVT\n*                  REGS 6 7 8 9 - WORK REGS\n*                  REG 14       - RETURN - BAD RETURN 4(14)\n*                  REG 0        - POINTS TO LPDE AFTER GOOD RETURN\n*\n         LM    R0,R1,MEMBER8\n         STM   R7,R8,LPAREGS\n         LR    R5,R9              SAVE R9\n         L     R3,16              CVTPTR\n         L     R15,352(,R3)       CVTLPDSR\n         BALR  R14,R15            CALL IEAVVMSR\n         B     LPAFOUND\n         B     LPANOTFO\nLPAFOUND LR    R9,R5\n         LM    R7,R8,LPAREGS\n         LR    R6,R0\n         B     LPAMSG\nLPANOTFO LR    R9,R5\n         LM    R7,R8,LPAREGS\n         SR    R6,R6\nLPAMSG   L     R3,MYANS            RESTORE R3\n         LA    R1,MSGWK\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   0(7,R1),MSG08\n         LA    R15,7(,R1)\n         MVC   0(8,R15),MEMBER8\n         AH    R15,MEMBERL\n         LTR   R6,R6               LPDE FOUND\n         BZ    LPAMSG2             NO, BRANCH\n         MVC   1(L'MSG12A,R15),MSG12A\n         LA    R15,L'MSG12A+1(,R15)\n         LA    R15,MSGWK+40\n*        MVC   0(35,R15),=C'LPDE XXXXXX, EP XXXXXX, ADDR XXXXXX'\n*        MVC   0(35,R15),=C'LPDE XXXXXX, EP XXXXXX, IN XXXXXXXX'\n         MVC   0(37,R15),=C'LPDE XXXXXX, EP XXXXXXXX, ADDR XXXXXXXX'\n*        MVC   0(35,R15),=C'LPDE XXXXXX, EP XXXXXXXX, IN XXXXXXXX'\n         LA    R15,05(,R15)\n         ST    R6,DOUBLE\n         LA    R1,DOUBLE+1\n         LA    R0,3\n         BAL   R14,UNPACK\n         MVI   0(R15),C','\n         SPACE\n         LA    R15,05(,R15)\n         LA    R1,16(,R6)\n         LA    R0,4\n         BAL   R14,UNPACK\n         MVI   0(R15),C','\n         SPACE\n         TM    28(R6),X'04'        IS THIS AN ALIAS\n         BO    LPALIAS             YES\n         SPACE\n         LA    R15,07(,R15)\n         LA    R1,36(,R6)\n         LA    R0,4\n         BAL   R14,UNPACK\n         MVI   0(R15),C' '\n         B     LPAMSG1\n         SPACE\nLPALIAS  LA    R15,2(,R15)\n         MVC   0(03,R15),=C'IN '\n         MVC   3(8,R15),32(R6)\n         LA    R15,12(,R15)\n         SPACE\nLPAMSG1  LR    R0,R15\n         LA    R1,MSGWK\n         SR    R0,R1\n         BAL   R14,PUTMSG          MEMBER FOUND IN LPA\n         SR    R15,R15\n         TM    OPTION2,OPT2L       LIST KEYWORD\n         BZ    NEXTMEM\n         MVC   MSGWK(6),=C'  +0  '\n         L     R1,16(,R6)\n         MVC   MSGWK+6(48),0(R1)\n         TR    MSGWK+6(48),PERIODS\n         LA    R1,MSGWK\n         LA    R0,6+48\n         BAL   R14,PUTLINE\n         SR    R15,R15\n         B     NEXTMEM\nLPAMSG2  MVC   1(L'MSG12B,R15),MSG12B\n         LA    R15,L'MSG12B+1(,R15)\n         LR    R0,R15\n         LA    R1,MSGWK\n         SR    R0,R1\n         BAL   R14,PUTMSG          MEMBER NOT FOUND IN LPA\n         LA    R15,12\n         B     NEXTMEM\nLPAX1    EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE BLDL FOR MEMBER                                       *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVI   SYNADSW,0           SET SYNAD SWITCH OFF\n         SPACE\n         LA    R15,BLDLW\n         XC    0(62,R15),0(R15)    CLEAR BLDL LIST\n         MVI   1(R15),1            NUMBER OF ENTRIES\n         MVI   3(R15),58           MAXIMUM LENGTH EXPECTED\n         MVC   4(8,R15),MEMBER8\n         LR    R0,R15              POINT R0 TO LIST\n         SPACE\n         BLDL  (R4),(0)\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BE    OKIO                NO - BRANCH\nERRSYNAD LA    R1,SYNADMSG\n         LA    R0,78\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     NEXTDSN\nOKIO     EQU   *\n         LTR   R15,R15\n         BZ    OKBLDL\nNOTINSYS LA    R1,MSGWK\n         MVC   0(7,R1),MSG08\n         LA    R15,7(,R1)\n         MVC   0(8,R15),MEMBER8\n         AH    R15,MEMBERL\n         MVC   1(L'MSG08A,R15),MSG08A\n         LA    R15,L'MSG08A+1(,R15)\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG          MEMBER NOT FOUND\n         LA    R15,12\n         B     NEXTMEM\n         SPACE\n***********************************************************************\n*                                                                     *\n*         BLDL WAS SUCCESSFUL                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKBLDL   EQU   *\n         LA    R6,MSGWH\n         MVI   0(R6),C' '\n         MVC   1(L'MSGWH-1,R6),0(R6)\n         MVC   0(L'MSG09,R6),MSG09\n         LA    R6,L'MSG09(,R6)\n         LA    R5,L'MSG09\n         SPACE\n         LA    R1,BLDLW+4\n         LA    R15,BLDLX\n         LA    R0,60\n         BAL   R14,UNPACK          CONVERT TO HEX\n         SPACE\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         LA    R7,BLDLW+4\n         USING PDS,R7\n         LA    R8,BLDLX\n         MVC   MSGWK+2(8),PDSMEMBR\n         SPACE\n         MVC   MSGWK+11(6),(2*(PDSTTR-PDS))(R8)\n         SPACE\n         MVC   MSGWK+18(2),=C'NO'  SET ALIAS 'NO'\n         TM    PDSINDIC,X'80'      ALIAS?\n         BZ    *+10                NO - BRANCH\n         MVC   MSGWK+18(3),=C'YES' YES - MOVE YES\n         SPACE\n         MVI   MSGWK+24,C'0'       NO. OF TTR'S\n         TM    PDSINDIC,B'01100000'\n         BZ    FMT1\n         MVI   MSGWK+24,C'3'       NOT ZERO - TRY 3\n         BO    FMT1                BRANCH IF 3\n         MVI   MSGWK+24,C'1'       NOT 3 - TRY 1\n         TM    PDSINDIC,B'00100000'\n         BO    FMT1                BRANCH IF 1\n         MVI   MSGWK+24,C'2'       MUST BE 2\nFMT1     EQU   *\n         SPACE\n         SLR   R1,R1\n         IC    R1,PDSINDIC\n         STC   R1,BYTE\n         NI    BYTE,B'00011111'    ISOLATE LAST 5 BITS\n         IC    R1,BYTE\n         STH   R1,USERLEN\n         LA    R1,USERLEN+1\n         LA    R15,MSGWK+29\n         LA    R0,1\n         BAL   R14,UNPACK\n         SPACE\n         LH    R0,USERLEN\n         LTR   R0,R0               LENGTH ZERO?\n         BZ    NOTLINK             YES - BRANCH\n         CH    R0,=H'11'           LESS THAN 11 HALFWORDS?\n         BL    NOTLINK             YES - NOT CREATED BY LINK EDITOR\n*                                  COULD BE SPF-CREATED MEMBER\n*                                  (15 HALFWORDS), SO CHECK TTR BITS\n         TM    PDSINDIC,B'01100000' ANY TTR'S IN USER DATA AREA?\n         BZ    NOTLINK             NO, NOT CREATED BY LINKAGE EDITOR\n         SPACE\n         XC    LINKOFF(16),LINKOFF\n         LA    R15,33+2            SET OFFSET PAST REQUIRED DATA\n*              NOTE: EXTRA 2 BYTES AT OFFSET 11 INSERTED BY BLDL.\n         MVI   MODES,0\n         TM    PDSATTV,X'80'       VS?\n         BZ    MODEX               NO, NO MODES\n         MVC   MODES,PDSATTV+1     SAVE RMODE AND AMODES\nMODEX    EQU   *\n         TM    PDSATTR1,X'04'      SCATTER DATA PRESENT?\n         BZ    NOOFF1              NO - BRANCH\n*              SCATTER DATA IS PRESENT,\n*              SO 8 BYTES OF SCATTER INFO ARE AT OFFSET IN R15\n         ST    R15,LINKOFF1        YES - SAVE OFFSET\n         OI    LINKOFF1,X'80'      SET SWITCH\n         LA    R15,8(,R15)         INCREMENT OFFSET PAST SCATTER DATA\nNOOFF1   TM    PDSINDIC,X'80'      ALIAS?\n         BZ    NOOFF2              NO - BRANCH\n*              IT'S AN ALIAS. SWAP THE AMODE BITS\n*              SO THE LAST 2 (WHICH ARE THE ONLY ONES WE SHOW, AND\n*              ARE NORMALLY FOR THE MAIN EP) ARE FOR THE ALIAS.\n         IC    R0,MODES\n         N     R0,=A(X'03')        ISOLATE MAIN AMODE\n         IC    R1,MODES\n         N     R1,=A(X'0C')        ISOLATE ALIAS AMODE\n         IC    R14,MODES\n         N     R14,=A(X'F0')       ERASE ALL 4 AMODE BITS FROM R14\n         SLL   R0,2                SHIFT MAIN TO ALIAS\n         SRL   R1,2                SHIFT ALIAS TO MAIN\n         OR    R1,R0               COMBINE SWAPPED AMODES INTO R1\n         OR    R14,R1              COMBINE AMODES WITH RMODE\n         STC   R14,MODES\n*              CHECK FOR PRESENCE OF 11 BYTES OF ALIAS DATA\n         TM    PDSATTV,X'80'       VS?\n         BO    YSOFF2              YES - ALIAS DATA IS PRESENT\n         TM    PDSATTR1,X'C0'      OS - IS IT RENT OR REUS?\n         BZ    NOOFF2              NO - BRANCH\n*              IT'S AN ALIAS AND VS, OR\n*              IT'S AN ALIAS NOT VS BUT RENT-OR-REUS,\n*              SO 11 BYTES OF ALIAS INFO ARE AT OFFSET IN R15\nYSOFF2   EQU   *\n         LH    R14,USERLEN         NUMBER OF HALFWORDS OF USERDATA\n         SLL   R14,1               NUMBER OF BYYTES OF USERDATA\n         LA    R14,14(,R14)        PLUS 8,3,1,1,1 (NAME, TTR, C, L, I)\n         SR    R14,R15             MINUS OFFSET OF ALIAS DATA\n         CH    R14,=H'11'          ARE THERE AT LEAST 11 BYTES LEFT\n         BL    NOOFF2              NO, ALIAS IS MISSING ITS INFO\n         ST    R15,LINKOFF2        SAVE OFFSET OF ALIAS DATA\n         OI    LINKOFF2,X'80'      SET SWITCH\n         LA    R15,11(,R15)        SET OFFSET PAST ALIAS DATA\nNOOFF2   TM    PDSATTV,X'80'       VS BIT ON?\n         BNO   OFF3OS              NO - OS - BRANCH\n         TM    PDSATTV,X'10'       IS VS SSI BIT ON?\n         BO    YSOFF3              YES - BRANCH\n         B     NOOFF3              NO - BRANCH AROUND OS LOGIC\nOFF3OS   LR    R14,R15             COPY OFFSET INTO WORK REG\n         STC   R14,BYTE            SAVE OFFSET FOR EVEN/ODD CHECK\n         TM    BYTE,X'01'          IS IT ODD?\n         BZ    *+8                 NO - LEAVE IT\n         LA    R14,1(,R14)         YES - ADD 1\n         SH    R14,=H'14'          SUBTRACT LENGTH OF NON USER-DATA\n         SRL   R14,1               DIVIDE BY 2 FOR NO. OF HALFWORDS\n         CH    R14,USERLEN         IS COMPUTED LENGTH TOO SHORT?\n         BNL   NOOFF3              NO - THERE MUST NOT BE ANY SSI\n*              IT'S VS AND THE SSI BIT IS ON, OR\n*              IT'S NOT VS AND THE LENGTH OF THE USER DATA IS LONGER\n*               THAN THE OFFSET IN R15,\n*              SO 4 BYTES OF SSI INFO ARE AT OFFSET IN R15\n*               (UNLESS THE OFFSET IS ODD, IN WHICH CASE A PAD BYTE\n*                PLUS 4 BYTES OF SSI INFO ARE AT OFFSET IN R15)\nYSOFF3   STC   R15,BYTE            START EVEN/ODD CHECK\n         TM    BYTE,X'01'          IS IT ODD?\n         BZ    *+8                 NO - BRANCH\n         LA    R15,1(,R15)         YES - MAKE IT EVEN, (HALFWORD)\n         ST    R15,LINKOFF3        SAVE OFFSET OF SSI\n         OI    LINKOFF3,X'80'      SET SWITCH\n         LA    R15,4(,R15)         INCREMENT OFFSET PAST SSI\n*                R15 NOW HAS THE OFFSET TO THE AUTHORIZATION INFO.\nNOOFF3   TM    PDSATTV,X'80'       IS VS BIT ON?\n         BZ    NOOFF4              NO - BRANCH\n         TM    PDSATTV,X'08'       IS VS APF BIT ON?\n         BZ    NOOFF4              NO - BRANCH\n         ST    R15,LINKOFF4        SAVE OFFSET OF APF CODE\n         OI    LINKOFF4,X'80'      SET SWITCH\nNOOFF4   EQU   *\n         MVC   0(L'MSG09A,R6),MSG09A\n         LA    R5,L'MSG09A(,R5)\n         MVC   MSGWK+33(4),(2*(PDSATTR-PDS))(R8)\n         MVC   MSGWK+38(6),(2*(PDSSIZE-PDS))(R8)\n         MVC   FULL+1(3),PDSSIZE\n         MVI   FULL,0\n         L     R1,FULL\n         NC    FULL,=X'FFFFFC00'  SET OFF BITS UNDER 1 K\n         CL    R1,FULL            WERE ANY BITS SET OFF?\n         SRL   R1,10              SHIFT OUT BITS UNDER 1 K\n         BE    SIZER              BRANCH ON CONDITION SET BY 'CL'\n         LA    R15,10\n         CLR   R1,R15             IF OVER 10K, ROUND TO NEAREST K\n         BH    SIZERUP            BRANCH IF OVER\n         MVC   FULL+1(3),PDSSIZE\n         NC    FULL,=X'000003FF'  SET OFF ALL EXCEPT UNDER 1 K\n         L     R15,FULL\n         SLR   R14,R14            SET UP REG PAIR FOR DIVIDE\n         D     R14,=F'100'        DIVIDE BY 100\n         LA    R15,1(,R15)        ROUND THE QUOTIENT UP\n         CH    R15,=H'9'          GREATER THAN 9?\n         BNH   *+8                NO - LEAVE IT\n         LA    R15,9              YES - MAKE IT 9\n         MH    R1,=H'10'          MULTIPLY K BY 10\n         ALR   R1,R15             ADD TENTH-OF-K UNITS TO K\n         CVD   R1,DOUBLE\n         LA    R15,MSGWK+45\n         MVC   0(8,R15),=X'40202020214B2040'\n         ED    0(7,R15),DOUBLE+5\n         MVI   0(R15),C'('\n         B     SIZLOOP\n         SPACE\nSIZERUP  AH    R1,=H'1'           SOME BITS WERE SET OFF - ADD 1 K\nSIZER    CVD   R1,DOUBLE          CONVERT K TO DECIMAL\n         LA    R15,MSGWK+45\n         MVC   0(8,R15),=X'4020202020202120'\n         ED    0(8,R15),DOUBLE+4\n         MVI   0(R15),C'('\nSIZLOOP  CLI   1(R15),C' '\n         BNE   SIZLX\n         MVC   1(6,R15),2(R15)\n         MVI   7(R15),C' '\n         B     SIZLOOP\nSIZLX    CLI   1(R15),C' '\n         BE    SIZLX2\n         LA    R15,1(,R15)\n         B     SIZLX\nSIZLX2   MVI   1(R15),C'K'\n         MVI   2(R15),C')'\n         SPACE\n         MVC   MSGWK+54(6),=C'ABSENT'\n         TM    LINKOFF3,X'80'      IS SSI PRESENT?\n         BZ    NOSSI               NO - BRANCH\n         LH    R15,LINKOFF3+2      GET OFFSET TO SSI\n         SLL   R15,1               DOUBLE IT (FOR HEX)\n         LA    R15,0(R15,R8)       POINT TO HEX COPY\n         MVC   MSGWK+54(8),0(R15)  MOVE HEX COPY\nNOSSI    EQU   *\n         SPACE\n         LA    R15,MSGWK+64\n         TM    PDSATTR1,X'80'\n         BZ    *+14\n         MVC   0(3,R15),=C'RE,'\n         LA    R15,3(,R15)\n         TM    PDSATTR1,X'40'\n         BZ    *+14\n         MVC   0(3,R15),=C'RU,'\n         LA    R15,3(,R15)\n         TM    PDSATTR2,X'01'\n         BZ    *+14\n         MVC   0(3,R15),=C'RF,'\n         LA    R15,3(,R15)\n         TM    PDSATTR1,X'20'\n         BZ    *+14\n         MVC   0(5,R15),=C'OVLY,'\n         LA    R15,5(,R15)\n         TM    PDSATTR1,X'10'\n         BZ    *+14\n         MVC   0(5,R15),=C'TEST,'\n         LA    R15,5(,R15)\n         TM    PDSATTR1,X'08'\n         BZ    *+14\n         MVC   0(3,R15),=C'OL,'\n         LA    R15,3(,R15)\n         TM    PDSATTR1,X'04'\n         BZ    *+14\n         MVC   0(5,R15),=C'SCTR,'\n         LA    R15,5(,R15)\n         TM    PDSATTR1,X'02'\n         BO    *+14\n         MVC   0(4,R15),=C'NEX,'\n         LA    R15,4(,R15)\n         TM    PDSATTR2,X'08'\n         BZ    *+14\n         MVC   0(3,R15),=C'NE,'\n         LA    R15,3(,R15)\n         TM    PDSATTR2,X'80'\n         BO    *+14\n         MVC   0(3,R15),=C'DC,'\n         LA    R15,3(,R15)\n         TM    PDSATTR2,X'04'\n         BZ    *+14\n         MVC   0(4,R15),=C'SYM,'\n         LA    R15,4(,R15)\n         TM    PDSATTV,X'A0'\n         BNO   *+14\n         MVC   0(5,R15),=C'PAGE,'\n         LA    R15,5(,R15)\n         SPACE\n         TM    LINKOFF4,X'80'      IS APF PRESENT?\n         BZ    APF1X               NO - BRANCH\n         LH    R14,LINKOFF4+2      GET OFFSET TO APF\n         LA    R14,0(R14,R7)       POINT TO APF\n         CLC   0(2,R14),=X'0101'   IS IT AC(1)?\n         BNE   APF1X               NO - BRANCH\n         MVC   0(5,R15),=C'AC=1,'\n         LA    R15,5(,R15)\nAPF1X    EQU   *\n         BCTR  R15,0               POINT TO LAST COMMA\n         MVI   0(R15),C' '         BLANK OUT LAST COMMA\n         SPACE\n         LA    R1,MSGWH\n         LR    R0,R5\n         BAL   R14,PUTLINE         WRITE FIRST HEADER\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTLINE         WRITE LOAD MODULE BASIC INFO\n         SPACE\n************************************************************\n*                                                          *\n*         ESOTERIC                                         *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION1,OPT1E       'ESOTERIC' SPECIFIED?\n         BZ    NOESO               NO - BRANCH\n         LA    R1,MSG11\n         LA    R0,L'MSG11\n         TM    LINKOFF2,X'80'      ALIAS DATA PRESENT?\n         BO    *+8                 YES - BRANCH\n         LA    R0,56               NO - TRUNCATE HEADER         +13.RA.\n         BAL   R14,PUTLINE\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   MSGWK+2(6),(2*(PDSTTRT-PDS))(R8)\n         MVC   MSGWK+10(6),(2*(PDSTTRN-PDS))(R8)\n         MVC   MSGWK+18(2),(2*(PDSTTRNO-PDS))(R8)\n         MVC   MSGWK+22(4),(2*(PDSFTXTL-PDS))(R8)\n         MVC   MSGWK+28(6),(2*(PDSENTRY-PDS))(R8)\n*        MVC   MSGWK+36(2),(2*(PDSATTV-PDS))(R8)\n         MVC   MSGWK+36(6),(2*(PDSATTV-PDS))(R8)\n         SPACE\n         MVC   MSGWK+44(7),=C'(24/24)'\n         TM    MODES,X'13'         IF ALL BITS OFF\n         BZ    MODEY                  24/24 AND KEEP PARENS\n         MVI   MSGWK+44,C' '\n         MVI   MSGWK+44+6,C' '\n         TM    MODES,X'10'\n         BNO   *+10\n         MVC   MSGWK+44(3),=C'ANY' RMODE ANY\n         TM    MODES,X'03'\n         BZ    MODEY               AMODE 24 IMPLICIT\n         MVC   MSGWK+44+4(3),=C'ANY' AMODE ANY\n         BO    MODEY\n         MVC   MSGWK+44+4(3),=C'31 ' AMODE 31\n         TM    MODES,X'02'\n         BO    MODEY\n         MVC   MSGWK+44+4(3),=C'24 ' AMODE 24 EXPLICIT\nMODEY    LA    R15,MSGWK+53                                     +13.RA.\n         MVI   0(R15),C'*'\n         TM    LINKOFF4,X'80'      IS APF PRESENT?\n         BZ    APFX                NO - BRANCH\n         LH    R14,LINKOFF4+2      GET OFFSET TO APF\n         LA    R14,0(R14,R7)       POINT TO APF\n         MVI   0(R15),C'0'\n         CLC   0(2,R14),=X'0100'   IS IT AC(0)?\n         BE    APFX                YES - BRANCH\n         MVI   0(R15),C'1'\n         CLC   0(2,R14),=X'0101'   IS IT AC(1)?\n         BE    APFX                YES - BRANCH\n         MVI   0(R15),C'?'         SOMETHING UNEXPECTED\nAPFX     EQU   *\n         SPACE\n         TM    LINKOFF2,X'80'      ALIAS DATA PRESENT?\n         BZ    NOESOA              NO - BRANCH\n         LH    R14,LINKOFF2+2\n         LA    R1,0(R14,R7)\n         MVC   MSGWK+57(8),3(R1)                                +13.RA.\n         SLL   R14,1                DOUBLE FOR HEX\n         LA    R1,0(R14,R8)\n         MVC   MSGWK+67(6),0(R1)                                +13.RA.\nNOESOA   EQU   *\n         LA    R1,MSGWK\n         LA    R0,73                                            +13.RA.\n         BAL   R14,PUTLINE\nNOESO    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         DATA (UNFORMATTED)                               *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION1,OPT1D       'DATA' SPECIFIED?\n         BZ    NODATA              NO - BRANCH\n         LA    R1,MSG10\n         LA    R0,L'MSG10\n         BAL   R14,PUTLINE         WRITE HEADER FOR DATA\n         LH    R1,USERLEN\n         SLL   R1,2                DOUBLE FOR BYTES, DOUBLE FOR HEX\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+2(0),28(R8)\n         EX    R1,*-6\n         LA    R0,3(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTLINE\nNODATA   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         WHERE                                            *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION1,OPT1S+OPT1W 'SYS' AND 'WHERE' SPECIFIED\n         BNO   NOWHERE             BRANCH IF NOT BOTH\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(59),MSGWK\n         CLI   PDSBLDL2,1          LINKLIST LIBRARY\n         BNE   WHRSTEP             NO, BRANCH\n         MVC   MSGWK(11),=C'SYSTEM LINK'\n         LA    R15,MSGWK+12\n         B     WHRCON\nWHRSTEP  MVC   MSGWK(13),=C'JOB/TASK/STEP'\n         LA    R15,MSGWK+14\nWHRCON   SLR   R1,R1\n         IC    R1,PDSBLDL1         GET CONCAT NUMBER\n         LA    R1,1(,R1)           BASE 0 TO BASE 1\n         CVD   R1,DOUBLE\n         MVC   0(14,R15),=C'LIBRARY NUMBER'\n         LA    R15,15(,R15)\n         UNPK  0(3,R15),DOUBLE+6(2)\n         OI    2(R15),X'F0'\n         LA    R0,2\nWHRSUP   CLI   0(R15),C'0'         LEADING ZERO\n         BNE   WHRSUPX\n         MVC   0(2,R15),1(R15)\n         MVI   2(R15),C' '\n         BCT   R0,WHRSUP\nWHRSUPX  EQU   *\n         LA    R1,MSGWK\n         LA    R0,60\n         BAL   R14,PUTLINE\nNOWHERE  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         LIST / MAP / IDR                                 *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION2,OPT2M+OPT2L+OPT2I  MAP,LIST,IDR\n         BZ    NOMAP               NO - BRANCH\n         TM    OPTION1,OPT1S       'SYSTEM'?\n         BO    NOMAP               YES - MAP NOT SUPPORTED\n         L     R0,=A(32768)        (COULD BE REDUCED TO BLKSIZE)\n         GETMAIN R,LV=(0)\n         LR    R5,R1\n         SPACE\n         TM    OPTION2,OPT2I       'IDR' SPECIFIED?\n         BZ    NOIDR1              NO - BRANCH\n         L     R0,=A(98304)\n         GETMAIN R,LV=(0)\n         ST    R1,ESDPTR\nNOIDR1   EQU   *\n         SPACE\n         TM    OPTION2,OPT2L       'LIST' SPECIFIED?\n         BZ    NOLIST              NO - BRANCH\n         MVC   FULL,PDSTTRT        TTR OF FIRST TEXT BLOCK\n         MVI   FULL+3,0\n         LA    R0,FULL\n         SPACE\n         POINT (R4),(0)\n         SPACE\nLISTREAD MVC   MYDECB(20),LFDECB   MOVE IN MODEL DECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         MVC   MSGWK(6),=C'  +0  '\n         MVC   MSGWK+6(48),0(R5)\n         TR    MSGWK+6(48),PERIODS\n         LA    R1,MSGWK\n         LA    R0,6+48\n         BAL   R14,PUTLINE\nNOLIST   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         MAP / IDR                                        *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION2,OPT2M+OPT2I 'MAP' OR 'IDR' SPECIFIED\n         BZ    MAPX                NO - BRANCH\n         SPACE\n         LA    R7,BLDLW+4          RESET PDS ADDRESSABILITY\n         MVC   FULL,PDSTTR\n         MVI   FULL+3,0\n         LA    R0,FULL\n         SPACE\n         POINT (R4),(0)\n         SPACE\n         MVC   MYDECB(20),LFDECB   MOVE IN MODEL DECB\n         MVI   ANYCESD,0\nMAPREAD  XC    MYDECB(4),MYDECB    RESET THE ECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         SPACE\n         CLI   0(R5),X'20'         CESD RECORD?\n         BE    HAVCESD             YES - BRANCH\n         TM    ANYCESD,1           IF NO CESD YET\n         BZ    MAPREAD                KEEP LOOKING (PAST SYM'S)\n         B     MAPX                CESD'S DONE\nHAVCESD  OI    ANYCESD,1           SHOW WE GOT SOME CESD\n         LH    R6,6(,R5)           GET NUMBER OF BYTES\n         TM    OPTION2,OPT2I       IDR\n         BZ    NOIDR2\n         LH    R15,4(,R5)          GET ESDID OF FIRST ITEM\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         BCTR  R6,0                LENGTH CODE FOR EX\n         B     *+10\n         MVC   0(0,R15),8(R5)      ADD RECORD TO OUR DICTIONARY\n         EX    R6,*-6\n         LA    R6,1(,R6)           RESTORE LENGTH\nNOIDR2   EQU   *\n         SRL   R6,4                DIV BY 16 = NO OF ENTRIES\n         LTR   R6,R6               ZERO?\n         BZ    MAPX                YES - BRANCH\n         MVC   ESDID,4(R5)         SAVE ESDID OF FIRST ITEM\n         LA    R7,8(,R5)           POINT TO 1ST ENTRY\nMAPENTRY EQU   *\n         CLI   CNAME,C' '          LOOKING FOR A SPECIFIC CSECT\n         BE    MAPALLC             NO, BRANCH\n         TM    8(R7),X'0F'         IS THIS AN SD\n         BNZ   MAPNEXT             NO, BRANCH\n         CLC   CNAME,0(R7)         IS THIS THE ONE\n         BNE   MAPNEXT             NO, BRANCH\n         MVC   CNAMEID,ESDID       YES, SAVE ITS ESDID\nMAPALLC  EQU   *\n         TM    OPTION2,OPT2M       MAP\n         BZ    MAPREAD             NO, BRANCH\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(50),MSGWK\n         CLI   0(R7),0             IS THERE A NAME\n         BE    *+10                NO, SKIP NEXT INSTRUCTION\n         MVC   MSGWK(8),0(R7)      MOVE EXTERNAL NAME\n         LA    R15,MAPENTX         POINT TO AREA FOR HEX\n         LA    R1,8(,R7)           POINT TO LAST 8 BYTES OF ENTRY\n         LA    R1,8(,R7)           POINT TO LAST 8 BYTES OF ENTRY\n         LA    R0,8\n         BAL   R14,UNPACK\n         SPACE\n         MVC   BYTE,8(R7)          MOVE TYPE\n         NI    BYTE,X'0F'          ZERO 1ST 4 BITS\n         LA    R15,=C'SD'\n         CLI   BYTE,X'00'\n         BE    MAPTYPEX\n         LA    R15,=C'PC'\n         CLI   BYTE,X'04'\n         BE    MAPTYPPC\n         LA    R15,=C'CM'\n         CLI   BYTE,X'05'\n         BE    MAPTYPEX\n         TM    OPTION2,OPT2A     MAP(ALL)            .BUGFIX.08APR81.\n         BZ    MAPNEXT           NO, BYPASS IT\n         LA    R15,=C'LR'\n         CLI   BYTE,X'03'\n         BE    MAPTYPEX\n         LA    R15,=C'PR'\n         CLI   BYTE,X'06'\n         BE    MAPTYPEX\n         LA    R15,=C'NU'\n         CLI   BYTE,X'07'\n         BE    MAPTYPEX\n         LA    R15,=C'ER'\n         CLI   BYTE,X'02'\n         BE    MAPTYPEX\n         LA    R15,=C'WX'\n         CLI   BYTE,X'0A'\n         BE    MAPTYPEX\n         LA    R15,=C'??'\n         B     MAPTYPEX\nMAPTYPPC TM    8(R7),X'10'         DELETED PC MEANS SEGTAB/ENTAB\n         BZ    MAPTYPEX\n         MVC   MSGWK(8),=C'-SEGTAB-'\nMAPTYPEX MVC   MSGWK+9(2),0(R15)\n         MVC   MSGWK+12(2),MAPENTX\n         MVC   MSGWK+15(6),MAPENTX+2\n         MVC   MSGWK+22(2),MAPENTX+8\n         MVC   MSGWK+25(6),MAPENTX+10\n         UNPK  MSGWK+33(5),ESDID(3)\n         TR    MSGWK+33(4),UNPACKT-240\n         MVI   MSGWK+37,C' '\n         SPACE\n         LA    R1,MSGWK\n         LA    R0,37\n         BAL   R14,PUTLINE\nMAPNEXT  LA    R7,16(,R7)\n         LA    R1,1\n         AH    R1,ESDID\n         STH   R1,ESDID\n         BCT   R6,MAPENTRY\n         B     MAPREAD\nDYNEOD   EQU   *\n         B     IDRX\nMAPX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         IDR                                              *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION2,OPT2I       IDR\n         BZ    NOIDR3\n         CLI   0(R5),X'80'         IDR RECORD\n         BE    IDRIN               YES\n         TM    0(R5),X'01'         CCW RECORD\n         BO    IDRX                YES, THERE ARE NO IDR'S\n         B     IDRFIND             NO, READ UNTIL IDR FOUND\n         LA    R0,FULL             NO, START BACK AT BEGINNING\n         SPACE\n         POINT (R4),(0)\n         SPACE\nIDRFIND  MVC   MYDECB(20),LFDECB   MOVE IN MODEL DECB\nIDRFINDR XC    MYDECB(4),MYDECB    RESET THE ECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         SPACE\n         TM    0(R5),X'01'         CCW RECORD\n         BO    IDRX                YES, THERE ARE NO IDR'S\n         CLI   0(R5),X'80'         IDR RECORD?\n         BNE   IDRFINDR            NO, ASSUME NO MORE\nIDRIN    EQU   *\nIDRENTRY MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(5),=C'IDR -'\n         TM    2(R5),X'01'         ZAP DATA\n         BO    IDRZAP\n         TM    2(R5),X'02'         LINKAGE EDITOR DATA\n         BO    IDRLINK\n         TM    2(R5),X'04'         TRANSLATOR DATA\n         BO    IDRTRAN\n         TM    2(R5),X'08'         USER IDENTIFY\n         BO    IDRIDENT\nIDRNEXT  EQU   *\n         XC    MYDECB(4),MYDECB    RESET THE ECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         SPACE\nIDRNEXTT CLI   0(R5),X'80'         IDR RECORD?\n         BE    IDRIN               YES, BRANCH\nIDRX     TM    OPTION2,OPT2I       IDR (MAY BE HERE FROM EOF)\n         BZ    NOIDR4              NO, BRANCH\n         L     R1,ESDPTR\n         L     R0,=A(32768)\n         FREEMAIN R,LV=(0),A=(1)\nNOIDR3   EQU   *\n         LR    R1,R5\n         L     R0,=A(32768)\n         FREEMAIN R,LV=(0),A=(1)\nNOIDR4   EQU   *\n         SPACE\nNOMAP    EQU   *\n         TM    OPTION2,OPT2O       LOAD\n         BZ    NOLOAD\n         LH    R0,USERLEN\n         LTR   R0,R0               LENGTH ZERO?\n         BZ    LOADCANT            YES - BRANCH\n         CH    R0,=H'11'           LESS THAN 11 HALFWORDS?\n         BL    LOADCANT            YES - NOT CREATED BY LINK EDITOR\n         LA    R7,BLDLW+4                                  (22JUL86)\n         TM    PDSINDIC,B'01100000' ANY TTR'S IN USER DATA AREA?\n         BZ    LOADCANT            NO, NOT CREATED BY LINKAGE EDITOR\n         LOAD  EPLOC=MEMBER8,DCB=(R4),ERRET=LOADFAIL\n         DELETE EPLOC=MEMBER8\n         LA    R1,=C'LOAD WAS SUCCESSFUL'\n         LA    R0,19\n         BAL   R14,PUTLINE\n         B     NOLOAD\nLOADFAIL LA    R1,=C'LOAD FAILED'\n         LA    R0,11\n         BAL   R14,PUTLINE\n         B     NOLOAD\nLOADCANT LA    R1,=C'LOAD IGNORED'\n         LA    R0,12\n         BAL   R14,PUTLINE\nNOLOAD   EQU   *\n         B     DONEMEM\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR ZAP                                      *\n*                                                          *\n************************************************************\n         SPACE\nIDRZAP   EQU   *\n         TM    OPTION3,OPT3Z\n         BZ    IDRZAP4\n         SLR   R6,R6\n         IC    R6,3(,R5)           GET NUMBER OF ACTIVE ENTRIES\n         N     R6,=A(X'0000003F')  ISOLATE LAST 6 BITS\n         BZ    IDRZAP4             BRANCH IF NONE ACTIVE\n         LA    R7,4(,R5)           POINT TO FIRST ENTRY\nIDRZAP1  MVC   DOUBLE(2),0(R7)\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         CLI   CNAME,C' '          ARE WE SELECTING A CSECT\n         BE    IDRZAP2             NO, PRINT ALL CSECT ZAPS\n         CLC   CNAME,0(R15)        IS THIS THE CSECT\n         BNE   IDRZAP3             NO, BRANCH\nIDRZAP2  MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(8),0(R15)    MOVE NAME FROM DICTIONARY\n         MVC   MSGWK+9(10),=C'ZAPPED    '\n         UNPK  MSGWK+21(5),02(3,R7)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+27(8),5(R7)\n         LA    R1,MSGWK\n         LA    R0,72\n         BAL   R14,PUTLINE\nIDRZAP3  LA    R7,13(,R7)\n         BCT   R6,IDRZAP1\nIDRZAP4  TM    OPTION3,OPT3S      SPACE\n         BZ    IDRNEXT\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(40),=C'THERE ARE NO EMPTY SLOTS FOR ZAP IDRDATA'\n         SR    R0,R0\n         IC    R0,1(,R5)          GET LENGTH OF DATA (ALWAYS 250)\n         SH    R0,=H'3'           MINUS BYTES AT +1, +2, +3 = 247\n         SRDA  R0,32              SHIFT INTO DOUBLE REGISTER FOR DIVIDE\n         D     R0,=F'13'          GET NUMBER OF SLOTS (ALWAYS 19)\n         IC    R0,3(,R5)          NUMBER OF SLOTS USED\n         N     R0,=A(X'0000003F') ISOLATE LAST 6 BITS\n         SR    R1,R0              NUMBER OF SLOTS AVAILABLE\n         BNP   IDRZAP5\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+10(2),DOUBLE+6(2)\n         CH    R1,=H'1'           ONE SLOT\n         BNE   IDRZAP5            NO, MESSAGE IS READY\n         MVC   MSGWK+6(3),=C'IS ' CHANGE ARE TO IS\n         MVI   MSGWK+23,C' '      CHANGE SLOTS TO SLOT\nIDRZAP5  LA    R1,MSGWK\n         LA    R0,40\n         BAL   R14,PUTLINE\n         B     IDRNEXT\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR LINKAGE EDITOR                           *\n*                                                          *\n************************************************************\n         SPACE\nIDRLINK  EQU   *\n         MVC   MSGWK(8),MEMBER8\n         LA    R7,3(,R5)\n         MVC   MSGWK+9(23),=C'LINKEDITED YY.DDD USING'\n         UNPK  MSGWK+21(5),12(3,R7)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),0(R7)\n         MVC   MSGWK+44(7),=C'VERSION'\n         SLR   R0,R0\n         IC    R0,10(,R7)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+52(2),DOUBLE+6(2)\n         IC    R0,11(,R7)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+55(2),DOUBLE+6(2)\n         CLC   0(9,R7),=C'5695PMB01'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(BINDER)'\n         CLC   0(9,R7),=C'566528408'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(LINKER)'\n         LA    R1,MSGWK\n         LA    R0,72\n         BAL   R14,PUTLINE\n         B     IDRNEXT\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR TRANSLATORS                              *\n*                                                          *\n************************************************************\n         SPACE\nIDRTRAN  EQU   *\n         TM    OPTION3,OPT3T\n         BZ    IDRNEXT\n         XC    IDRLEN,IDRLEN\n         L     R0,=A(10240)        GET AN AREA TO MERGE RECORDS IN\n         ST    R0,IDRFREE\n         GETMAIN R,LV=(0)\n         ST    R1,IDRPTR\nIDRTRANA L     R15,IDRPTR\n         A     R15,IDRLEN\n         SR    R6,R6\n         IC    R6,1(,R5)           BYTES COUNT (THIS PLUS REST)\n         SH    R6,=H'3'\n         B     *+10\n         MVC   0(0,R15),3(R5)\n         EX    R6,*-6              MOVE RECORD TO IDR AREA\n         LA    R6,1(,R6)\n         A     R6,IDRLEN\n         ST    R6,IDRLEN\n         XC    MYDECB(4),MYDECB    RESET THE ECB\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         CHECK MYDECB\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         CLI   0(R5),X'80'         IDR RECORD?\n         BNE   IDRTRANB\n         TM    2(R5),X'04'         FOR TRANSLATOR\n         BO    IDRTRANA            YES, ADD TO PREVIOUS RECORD\nIDRTRANB L     R1,IDRLEN\n         A     R1,IDRPTR\n         ST    R1,IDRPTRE          STORE END-OF-DATA ADDRESS\n         L     R7,IDRPTR\nIDRTRANC EQU   *\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRTRANF            NO, BRANCH\n         TM    0(R7),X'80'         ONLY ONE ESDID\n         BO    IDRTRANF            YES, SWAP NOT NECESSARY\n         LR    R6,R7               NO, SWAP SELECTED ESDID WITH FIRST\nIDRTRAND MVC   DOUBLE(2),0(R6)     COPY ESDID TO WORK AREA\n         NI    DOUBLE,X'7F'        TURN OFF FLAG BIT\n         CLC   CNAMEID,DOUBLE      IS THIS THE ONE WE WANT\n         BE    IDRTRANE            YES, BRANCH\n         TM    0(R6),X'80'         NO, IS THIS THE LAST ONE\n         BO    IDRTRANF            YES, NOT FOUND IN THIS SET\n         LA    R6,2(,R6)           POINT TO NEXT ESDID\n         B     IDRTRAND\nIDRTRANE CR    R6,R7               YES, IS IT THE FIRST\n         BE    IDRTRANF            YES, NO NEED TO SWAP\n         MVC   DOUBLE+2(2),0(R7)   SAVE FIRST ENTRY\n         MVC   0(2,R7),DOUBLE      PUT THIS ONE FIRST\n         TM    0(R6),X'80'         WAS THIS ONE LAST\n         MVC   0(2,R6),DOUBLE+2    MOVE SAVED FIRST ONE HERE\n         BZ    *+8                 BRANCH IF NOT LAST\n         OI    0(R6),X'80'         RESTORE END BIT\nIDRTRANF EQU   *\n         SPACE\n         MVC   DOUBLE(2),0(R7)\n         NI    DOUBLE,X'7F'\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(8),0(R15)     MOVE NAME FROM DICTIONARY\n         MVC   MSGWK+9(23),=C'TRANSLATED YY.DDD USING'\n         LA    R1,MSGWK\n         BAL   R14,IDRTPC          CHECK FOR PC\n         SPACE\n         LR    R6,R7               START LOOKING FOR END OF ESDID LIST\nIDRTRAN1 TM    0(R6),X'80'         IS THIS THE LAST ONE\n         BO    IDRTRAN2            YES, BRANCH\n         LA    R6,2(,R6)           NO, BUMP ADDRESS BY 2\n         B     IDRTRAN1            KEEP LOOKING\nIDRTRAN2 LA    R6,2(,R6)           POINT PAST LAST ONE TO DATA\n         TM    15(R6),X'0F'        IF LAST 4 BITS OF DATE NOT F\n         BO    IDRTRANQ               IT'S NORMAL\n         CLC   11(2,R6),=X'0101'   IF VERSION IS 01 01\n         BE    IDRTRANU               IT'S FORTRAN-H 5734-FO3\n         MVC   DOUBLE(3),12(R6)    ELSE IT'S THAT CRAZY MSGCRTXT00\n         OI    DOUBLE+2,X'0F'      FORCE SIGN BITS\n         UNPK  MSGWK+21(5),DOUBLE(3)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),1(R6)\n         B     IDRTRANW            SKIP VERSION\nIDRTRANU MVC   DOUBLE(3),13(R6)    FORTRAN-H 0101 HAS A PROBLEM\n         OI    DOUBLE+2,X'0F'      FORCE SIGN BITS\n         UNPK  MSGWK+21(5),DOUBLE(3)\n         B     IDRTRANV\nIDRTRANQ UNPK  MSGWK+21(5),13(3,R6)\nIDRTRANV MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),1(R6)\n         MVC   MSGWK+44(7),=C'VERSION'\n         SLR   R0,R0\n         IC    R0,11(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+52(2),DOUBLE+6(2)\n         IC    R0,12(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+55(2),DOUBLE+6(2)\nIDRTRANW CLC   1(9,R6),=C'566896201'\n         BNE   *+10\n         MVC   MSGWK+58(7),=C'(ASM-H)'\n         CLC   1(7,R6),=C'5734AS1'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(ASM-H1)'\n         CLC   1(9,R6),=C'5741SC103'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(ASM-XF)'\n         CLC   1(9,R6),=C'569623400'\n         BNE   *+10\n         MVC   MSGWK+58(7),=C'(HLASM)'\n         CLC   1(7,R6),=C'5694A01'\n         BNE   *+10\n         MVC   MSGWK+58(9),=C'(XLC/C++)'\n         CLC   1(9,R6),=C'5688040  '\n         BNE   *+10\n         MVC   MSGWK+58(3),=C'(C)'\n         CLC   1(9,R6),=C'566876701'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(PASCAL)'\n         CLC   1(8,R6),=C'5734-FO3'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(FORT-H)'\n         CLC   1(9,R6),=C' 5796-PKR'\n         BNE   *+10\n         MVC   MSGWK+58(9),=C'(FORT-HX)'\n         CLC   1(8,R6),=C'5748-FO3'\n         BNE   *+10\n         MVC   MSGWK+58(9),=C'(VSFORT1)'\n         CLC   1(8,R6),=C'5668-806'\n         BNE   *+10\n         MVC   MSGWK+58(9),=C'(VSFORT2)'\n         CLC   1(8,R6),=C'5734-PL1'\n         BNE   *+10\n         MVC   MSGWK+58(6),=C'(PL/1)'\n         CLC   1(4,R6),=C'ASMG'\n         BNE   *+10\n         MVC   MSGWK+58(7),=C'(ASM-G)'\n         CLI   MSGWK+58,C' '\n         BNE   *+8\n         MVI   MSGWK+58,C'?'\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRTSEL1            NO, BRANCH\n         CLC   CNAME,MSGWK         IS THIS THE ONE WE WANT\n         BNE   IDRTSUP1            NO, BYPASS DISPLAY\nIDRTSEL1 LA    R1,MSGWK\n         LA    R0,67\n         BAL   R14,PUTLINE\nIDRTSUP1 EQU   *\n         SPACE\n         LA    R15,16(,R6)         POINT TO NEXT ESDID LIST\n         CLI   0(R6),X'01'         PLS PRE-COMPILER ID PRESENT\n         BNE   IDRTRAN3            NO, BRANCH\n         LA    R6,15(,R6)          YES, POINT R6 TO SECOND ENTRY\n         TM    OPTION3,OPT3P       IDR(PLS) SPECIFIED\n         BZ    IDRTRANP            NO, BRANCH\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRTSEL2            NO, BRANCH\n         CLC   CNAME,MSGWK         IS THIS THE ONE WE WANT\n         BNE   IDRTRANP            NO, BYPASS DISPLAY\nIDRTSEL2 MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK+27(5),=C'USING'\n         UNPK  MSGWK+21(5),13(3,R6)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),1(R6)\n         MVC   MSGWK+44(7),=C'VERSION'\n         SLR   R0,R0\n         IC    R0,11(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+52(2),DOUBLE+6(2)\n         IC    R0,12(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+55(2),DOUBLE+6(2)\n         LA    R1,MSGWK\n         LA    R0,57\n         BAL   R14,PUTLINE\nIDRTRANP LA    R15,16(,R6)         POINT TO NEXT ESDID LIST\n         SPACE\nIDRTRAN3 ST    R15,IDRPTRC         UPDATE CURRENT POINTER\n         TM    0(R7),X'80'         WAS THERE ONLY ONE ESDID\n         BO    IDRTRANY            YES, ALREADY DISPLAYED IT\n         CLI   CNAME,C' '          ARE WE SELECTING A CSECT\n         BNE   IDRTRANY            YES, DONT SHOW OTHER NAMES\n         LA    R6,2(,R7)           POINT TO SECOND ESDID\nIDRTRAN4 MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK+2(6),=C'ALSO -'\n         LA    R1,MSGWK+9\n         LA    R0,7                FIT 7 NAMES ON A LINE\nIDRTRAN5 MVC   DOUBLE(2),0(R6)\n         NI    DOUBLE,X'7F'\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         MVC   0(8,R1),0(R15)      MOVE NAME FROM DICTIONARY\n         BAL   R14,IDRTPC          CHECK FOR PC\n         LA    R1,9(,R1)           POINT TO NEXT SLOT ON LINE\n         TM    0(R6),X'80'         WAS THAT LAST ID IN THIS RECORD\n         BO    IDRTRANX            YES, GO LIST THEM\n         LA    R6,2(,R6)           NO, POINT TO NEXT ESD ID\n         BCT   R0,IDRTRAN5         BRANCH IF LINE NOT FILLED\n         LA    R1,MSGWK\n         LA    R0,71\n         BAL   R14,PUTLINE\n         B     IDRTRAN4\nIDRTPC   CLC   0(8,R1),=CL8' '     IF NAME IS NOT BLANK\n         BNER  R14                    IT'S NOT A PC\n         MVC   DOUBLE+7(1),8(R15)  GET TYPE FROM DICTIONARY\n         NI    DOUBLE+7,X'0F'      ISOLATE IDENTIFYING BITS\n         CLI   DOUBLE+7,X'04'      PC\n         BNER  R14\n         MVC   0(3,R1),=C'PC('\n         UNPK  3(5,R1),DOUBLE(3)\n         TR    3(4,R1),UNPACKT-240\n         MVI   7(R1),C')'\n         BR    R14\nIDRTRANX EQU   *\n         LA    R1,MSGWK\n         LA    R0,71\n         BAL   R14,PUTLINE\nIDRTRANY L     R7,IDRPTRC          POINT TO NEXT ESDID LIST\n         C     R7,IDRPTRE          IS THAT ALL THERE IS\n         BL    IDRTRANC            NO, BRANCH\n         LM    R0,R1,IDRFREE\n         FREEMAIN R,LV=(0),A=(1)\n         B     IDRNEXTT            NEXT IDR IS ALREADY READ\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR IDENTIFY                                 *\n*                                                          *\n************************************************************\n         SPACE\nIDRIDENT EQU   *\n         TM    OPTION3,OPT3I\n         BZ    IDRNEXT\n         XC    IDRLEN,IDRLEN\n         L     R0,=A(30720)\n         ST    R0,IDRFREE\n         GETMAIN R,LV=(0)\n         ST    R1,IDRPTR\nIDRIDENA L     R15,IDRPTR\n         A     R15,IDRLEN\n         SR    R6,R6\n         IC    R6,1(,R5)           BYTES COUNT (THIS PLUS REST)\n         SH    R6,=H'3'\n         B     *+10\n         MVC   0(0,R15),3(R5)\n         EX    R6,*-6              MOVE RECORD TO IDR AREA\n         LA    R6,1(,R6)\n         A     R6,IDRLEN\n         ST    R6,IDRLEN\n         XC    MYDECB(4),MYDECB    RESET THE ECB\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         CHECK MYDECB\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         CLI   0(R5),X'80'         IDR RECORD?\n         BNE   IDRIDENB\n         TM    2(R5),X'08'         FOR IDENTIFY\n         BO    IDRIDENA            YES, ADD TO PREVIOUS RECORD\nIDRIDENB L     R1,IDRLEN\n         A     R1,IDRPTR\n         ST    R1,IDRPTRE          STORE END-OF-DATA ADDRESS\n         L     R7,IDRPTR\nIDRIDENC MVC   DOUBLE(2),0(R7)\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(8),0(R15)    MOVE NAME FROM DICTIONARY\n         MVC   MSGWK+9(10),=C'IDENTIFIED'\n         UNPK  MSGWK+21(5),02(3,R7)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         SLR   R1,R1\n         IC    R1,5(,R7)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+27(0),6(R7)\n         EX    R1,*-6\n         LA    R15,7(R1,R7)        POINT TO NEXT ENTRY\n         ST    R15,IDRPTRC\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRISEL1            NO, BRANCH\n         CLC   CNAME,MSGWK         IS THIS THE ONE WE WANT\n         BNE   IDRISUP1            NO, BYPASS DISPLAY\nIDRISEL1 LA    R1,MSGWK\n         LA    R0,68\n         BAL   R14,PUTLINE\nIDRISUP1 L     R7,IDRPTRC          POINT TO NEXT ESDID\n         C     R7,IDRPTRE          IS THAT ALL THERE IS\n         BL    IDRIDENC            NO, BRANCH\n         LM    R0,R1,IDRFREE\n         FREEMAIN R,LV=(0),A=(1)\n         B     IDRNEXTT            NEXT IDR IS ALREADY READ\n         SPACE\n************************************************************\n*                                                          *\n*         NON LOAD-MODULE MEMBERS                          *\n*                                                          *\n************************************************************\n         SPACE\nNOTLINK  TM    OPTION1,OPT1D       'DATA' SPECIFIED\n         BO    DATAPUT\n         CH    R0,=H'15'           SPF LENGTH\n         BNE   DATAPUT\n         LA    R0,10\n         SR    R6,R0\n         MVC   0(SPFHDRL,R6),SPFHDR\n         LA    R0,SPFHDRL(,R6)\n         LA    R1,MSGWH\n         SR    R0,R1\n         CLI   SPFHDRS,0           HAS HEADER BEEN WRITTEN ONCE\n         BNE   *+8                 YES, SKIP IT\n         BAL   R14,PUTLINE         WRITE SPF HEADER\n         MVI   SPFHDRS,1           INDICATE IT'S BEEN WRITTEN\n         SLR   R0,R0\n         IC    R0,SPFV             VERSION OF V.M\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+24(2),DOUBLE+6(2)\n         MVI   MSGWK+26,C'.'\n         IC    R0,SPFM             MODIFICATION OF V.M\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+27(2),DOUBLE+6(2)\n         MVI   MSGWK+29,C' '\n         MVC   MSGWK+30(3),MSGWK+29\n*        MVC   MSGWK+33(2),(2*(SPFCREDT+1-PDS))(R8)\n*        MVI   MSGWK+35,C'.'\n*        MVC   MSGWK+36(3),(2*(SPFCREDT+2-PDS))(R8)\n         LA    R1,SPFCREDT\n         BAL   R14,JULIAN\n         MVC   MSGWK+31(8),JULIANO\n*        MVC   MSGWK+43(2),(2*(SPFMODDT+1-PDS))(R8)\n*        MVI   MSGWK+45,C'.'\n*        MVC   MSGWK+46(3),(2*(SPFMODDT+2-PDS))(R8)\n         LA    R1,SPFMODDT\n         BAL   R14,JULIAN\n         MVC   MSGWK+41(8),JULIANO\n         MVC   MSGWK+50(2),(2*(SPFMODTM+0-PDS))(R8)\n         MVI   MSGWK+52,C'.'\n         MVC   MSGWK+53(2),(2*(SPFMODTM+1-PDS))(R8)\n         LH    R0,SPFSIZE\n         N     R0,=A(X'0000FFFF') USE ALL 16 BITS, NO SIGN\n         CVD   R0,DOUBLE\n         MVC   MSGWK+55(6),=X'402020202120'\n         ED    MSGWK+55(6),DOUBLE+5\n         MVC   MSGWK+63(10),SPFID\n         LA    R1,MSGWK\n         LA    R0,73\n         BAL   R14,PUTLINE\n         B     DONEMEM\n         SPACE\nJULIAN   CLC   0(4,R1),JULIANI\n         BER   R14\n         MVC   JULIANI(4),0(R1)\n         MVC   DOUBLE(4),0(R1)\n         LH    R0,DOUBLE           GET 00YY\n         SLL   R0,4                SHIFT TO 00000YY0\n         STH   R0,DOUBLE+6\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         XC    DOUBLE(6),DOUBLE\n         CVB   R0,DOUBLE\n         UNPK  JULIANO+6(2),DOUBLE+6(2)\n         ST    R0,DOUBLE\n         MVC   JULIANW(26),JULIAND SET DAYS PER MONTH\n         TM    DOUBLE+3,X'03'      IS YEAR DIVISIBLE BY 4\n         BNZ   JULIAN1             NO\n         MVI   JULIANW+3,29        YES, CHANGE FEB TO 29\nJULIAN1  MVC   DOUBLE+4(4),0(R1)   GET 00YYDDDF\n         XC    DOUBLE(6),DOUBLE    GET DDDF\n         CVB   R1,DOUBLE           GET DDD IN BINARY\n         LA    R15,2               INDEX FOR TABLE\n         LR    R0,R15              INDEX INCREMENT\nJULIAN2  CH    R1,JULIANW-2(R15)   DAY .LT. OR .EQ. ENTRY\n         BNH   JULIAN3             YES, BRANCH\n         SH    R1,JULIANW-2(R15)   NO, SUBTRACT ENTRY FROM DDD\n         ALR   R15,R0              ADD 2 TO INDEX\n         B     JULIAN2             LOOP\nJULIAN3  SRL   R15,1               HALVE INDEX TO GET MM\n         CVD   R1,DOUBLE           CONVERT DD TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN OF DD\n         UNPK  JULIANO+3(2),DOUBLE+6(2) UNPACK DD\n         CVD   R15,DOUBLE          CONVERT MM TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN OF MM\n         UNPK  JULIANO+0(2),DOUBLE+6(2) UNPACK MM\n         MVI   JULIANO+2,C'/'\n         MVI   JULIANO+5,C'/'\n         BR    R14\n         SPACE\nDATAPUT  MVC   0(5,R6),=C'DATA-'\n         LA    R1,MSGWH\n         LA    R0,5(,R5)\n         BAL   R14,PUTLINE         WRITE BASIC HEADER\n         LH    R1,USERLEN\n         LTR   R1,R1\n         BZ    NOTLZRO\n         SLL   R1,2\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG09(0),28(R8)\n         EX    R1,*-6\nNOTLZRO  LA    R0,5(R5,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTLINE         WRITE BASIC INFO AND DATA\n         SPACE\nDONEMEM  TM    OPTION1,OPT1T       'TEST' SPECIFIED?\n         BZ    NOTESTD\n         LA    R1,BLDLX\n         LH    R0,USERLEN\n         AH    R0,=H'7'            14 OTHER BYTES (NAME, TTR, K, Z, C)\n         SLL   R0,2                DOUBLE TO BYTES, DOUBLE FOR HEX\n         BAL   R14,PUTLINE         DISPLAY ALL IN HEX FOR TESTING\nNOTESTD  EQU   *\n         SR    R15,R15\n         SPACE\nNEXTMEM  CH    R15,RC              IS R15 HIGHEST YET\n         BNH   *+8                 NO\n         STH   R15,RC              YES, SAVE HIGHEST VALUE\n         SPACE\n         CLI   PLUSKW+1,1          WAS PLUS(MEMBER,MEMBER..) SPECIFIED\n         BNE   PLUSX               NO, BRANCH\n         CLI   PLUSPTR,X'FF'       YES, ANY MORE MEMBERS SPECIFIED\n         BE    PLUSX               NO, BRANCH\n         L     R15,PLUSPTR         YES, POINT TO CURRENT PDE\n         MVC   PLUSPTR,8(R15)      SET UP FOR NEXT MEMBER\n         MVC   MEMBER8(8),=CL8' '\n         LH    R1,4(,R15)          GET LENGTH OF MEMBER\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,0(,R15)         GET ADDRESS OF MEMBER NAME\n         B     *+10\n         MVC   MEMBER8(0),0(R14)    MOVE MEMBER NAME\n         EX    R1,*-6\n         STH   R1,MEMBERL\n         B     MEMLOOP\nPLUSX    EQU   *\n         SPACE\nNEXTDSN  CH    R15,RC              IS R15 HIGHEST YET\n         BNH   *+8                 NO\n         STH   R15,RC              YES, SAVE HIGHEST VALUE\n         SPACE\n         TM    CLEANUP,X'80'\n         BZ    NOCLOSE\n         MVC   CLOSED,CLOSE\n         CLOSE ((R4)),MF=(E,CLOSED)\n         NI    CLEANUP,B'01111111'\nNOCLOSE  TM    CLEANUP,X'40'\n         BZ    NOFREE\n         LA    R1,MYDAPL\n         LA    R15,MYDAPB\n         USING DAPB18,R15\n         XC    0(40,R15),0(R15)\n         MVI   DA18CD+1,X'18'\n         MVC   DA18DDN,DDSAVE\n         MVC   DA18MNM(8),=CL8' '\n         MVC   DA18SCLS(2),=CL8' '\n         BAL   R14,CALLDAIR        UNALLOCATE\n         NI    CLEANUP,B'10111111'\nNOFREE   EQU   *\n         SPACE\n         L     R8,DSNPTR\n         CLI   24(R8),X'FF'\n         BNE   DSNLOOP\n         SPACE\n         TM    MYPUTLEP,X'80'     WAS PUTLINE LOADED BY ME?\n         BO    NODELETE           NO - USED CVTPUTL - BRANCH\n         LA    R0,=CL8'IKJPUTL '\n         DELETE EPLOC=(0)\nNODELETE EQU   *\n         SPACE\n         TM    OPTION1,OPT1O       IF OUTFILE IS OPEN\n         BZ    NOCLOUT\n         MVC   CLOSED,CLOSE\n         LA    R8,OUTDCBW\n         CLOSE ((R8)),MF=(E,CLOSED)\nNOCLOUT  EQU   *\n         LH    R15,RC\n         B     EXIT\n         SPACE\n************************************************************\n*                                                          *\n*         CALL IKJDAIR SERVICE ROUTINE                     *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR ST    R14,DAIRREGS\n         AIF   (NOT &MVS).SKIP4\n         L     R15,16\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   DAIRLINK            BRANCH IF NOT MVS\n         TM    X'2DC'(R15),X'80'  CVTDAIR\n         BNO   DAIRLINK\n         L     R15,X'2DC'(,R15)\n         BALR  R14,R15\n         B     DAIRFINI\nDAIRLINK EQU   *\n.SKIP4   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIRFINI L     R14,DAIRREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         AIF   (NOT &MVS).SKIP5\n         LA    R1,MYDFPARM\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,DFRCP\n         LA    R15,MYDAPL\n         ST    R15,DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02\n         LA    R15,DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,DFIDP\n         SLR   R15,R15\n         ST    R15,DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         DROP  R1\n.SKIP5   ANOP\n         AIF   (&MVS).SKIP6\n         LA    R1,MSGDAIR\n         LA    R0,L'MSGDAIR\n         BAL   R14,PUTMSG\n.SKIP6   ANOP\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*  UNPACK - CONVERT A FIELD TO HEXADECIMAL.                *\n*  REG 1 --> INPUT   REG 15 --> OUTPUT                     *\n*  REG 0  =  INPUT LENGTH  (OUTPUT IS TWICE PLUS 1 BLANK)  *\n*  REG 14 --> RETURN ADDRESS                               *\n*                                                          *\n************************************************************\n         SPACE\nUNPACK   MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),UNPACKT-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,UNPACK           DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nUNPACKT  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         LA    R1,MYIOPL\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTLINS\n         TM    OPTION1,OPT1O\n         BO    PUTFILE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         LA    R1,MYIOPL\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\nPUTFILE  LR    R14,R0              LENGTH IN R0\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         LTR   R14,R14\n         BZ    PUTF2\n         LA    R0,80\n         CR    R14,R0              IF LONGER THAN 80\n         BNH   *+6                    THEN\n         LR    R14,R0                 TRUNCATE TO 80\n         BCTR  R14,0\n         EX    R14,PUTFMOVE\nPUTF2    LA    R1,OUTDCBW\n         LA    R0,LINE\n         PUT   (1),(0)\n         LM    R14,R1,PUTLINS\n         BR    R14\nPUTFMOVE MVC   LINE(0),0(R1)      (EXECUTED VIA EX)\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     0,@SIZE\n         L     13,4(,13)\n         ST    15,16(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        SYNAD EXIT                                        *\n*                                                          *\n************************************************************\n         SPACE\n*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO\n*        IF AN I/O ERROR OCCURS.\n         SPACE\nDYNSYNAD EQU   *\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG(78),50(R1)\n         MVI   SYNADSW,X'FF'\n         SYNADRLS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n         PRINT NOGEN\n         SPACE\nDCBMODEL DCB   DDNAME=DYNAM,DSORG=PO,MACRF=(R),                        +\n               EODAD=0,SYNAD=0\nDCBLEN   EQU   *-DCBMODEL\n         SPACE\nOUTDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(PM)\nOUTDCBL  EQU   *-OUTDCB\n         SPACE\n         PRINT GEN\n         SPACE\nOPEN     OPEN  0,MF=L\n         SPACE\nCLOSE    CLOSE 0,MF=L\n         SPACE\nLFDECB   READ  LFDECB1,SF,2,3,4,MF=L\nLFDECBL  EQU   *-LFDECB\n         SPACE\nJULIAND  DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\n         SPACE\nMSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'\nMSG02    DC    C'IKJ58503I DATA SET '\nMSG02A   DC    C' NOT IN CATALOG'\nMSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'\nMSG04    DC    C'UNABLE TO OPEN DATASET'\nMSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+\n               IED'\nMSG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED'\nMSG07    DC    C'MEMBER NOT SPECIFIED'\nMSG08    DC    C'MEMBER '\nMSG08A   DC    C' NOT FOUND'\nMSG09    DC    C'--MEMBER---TTR----ALIAS-TTRN-CNT-'\nMSG09A   DC    C'ATTR-STORAGE---------SSI------'\nMSG10    DC    C'--DATA--'\n*SG11    DC    C'--TTR1----TTR2----OV--LFTX--EP------VS--AC--ALIAS OF--\n*              MAINEP-'\n*SG11    DC    C'--TTR1----TTR2----OV--LFTX--EP------VS--R/AMODE--AC--A\n*              LIAS OF--MAINEP-'\nMSG11    DC    C'--TTR1----TTR2----OV--LFTX--EP------VSMRLD--R/AMODE--A+\n               C--ALIAS OF--MAINEP-'\nMSG12A   DC    C' FOUND IN LPA'\nMSG12B   DC    C' NOT FOUND IN LPA DIRECTORY'\nMSG14    DC    C' FOUND IN ACTIVE JPAQ/LPAQ (8) '\nSPFHDR   DC    C'  V.M    CREATED   LAST MODIFIED  SIZE    ID'\nSPFHDRL  EQU   *-SPFHDR\n         AIF   (&MVS).SKIP7\nMSGDAIR  DC    C'UNABLE TO ALLOCATE DATA SET'\n.SKIP7   ANOP\nPERIODS  DC    077C'.'                00-76    0-76\n         DC    C'(+'                  4D-4E   77-78\n         DC    C'.'                      4F      79\n         DC    X'50'                     50      80\n         DC    10C'.'                 51-5A   81-90\n         DC    C'$*)'                 5B-5D   91-93\n         DC    02C'.'                 5E-5F   94-95\n         DC    C'-/'                  60-61   96-97\n         DC    09C'.'                 62-6A   98-106\n         DC    C','                   6B      107\n         DC    15C'.'                 6C-7A  108-122\n         DC    C'#@',X'7D',C'='       7B-7E  123-126\n         DC    2C'.'                  7F-80  127-128\n         DC    C'ABCDEFGHI'           81-89  129-137\n         DC    7C'.'                  8A-90  138-144\n         DC    C'JKLMNOPQR'           91-99\n         DC    8C'.'                  9A-A1\n         DC    C'STUVWXYZ'            A2-A9\n         DC    23C'.'                 AA-C0\n         DC    C'ABCDEFGHI'           C1-C9\n         DC    7C'.'                  CA-D0\n         DC    C'JKLMNOPQR'           D1-D9\n         DC    8C'.'                  DA-E1\n         DC    C'STUVWXYZ'            E2-E9\n         DC    06C'.'                 EA-EF\n         DC    C'0123456789'          F0-F9\n         DC    6C'.'\n         LTORG\nPCLADDR  DC    0D'0'               END MAIN CSECT, BEGIN PCL CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PARAMETERS                                  *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nMEMPCL   IKJPARM\nDSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME',LIST\nUNITKW   IKJKEYWD\n         IKJNAME 'UNIT',SUBFLD=UNITSF\nVOLKW    IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=VOLSF\nPLUSKW   IKJKEYWD\n         IKJNAME 'PLUS',SUBFLD=PLUSSF\nDATAKW   IKJKEYWD\n         IKJNAME 'DATA'\nTESTKW   IKJKEYWD\n         IKJNAME 'TEST'\nSYSTKW   IKJKEYWD\n         IKJNAME 'S'\n         IKJNAME 'SYSTEM'\n         IKJNAME 'SLPA'\nWHEREKW  IKJKEYWD\n         IKJNAME 'WHERE'\nESOKW    IKJKEYWD\n         IKJNAME 'ESOTERIC'\nMAPKW    IKJKEYWD\n         IKJNAME 'MAP',SUBFLD=MAPSF\nLISTKW   IKJKEYWD\n         IKJNAME 'LIST'\n         IKJNAME 'L'\nLOADKW   IKJKEYWD\n         IKJNAME 'LOAD'\nIDRKW    IKJKEYWD\n         IKJNAME 'IDR',SUBFLD=IDRSF\nCSECTKW  IKJKEYWD\n         IKJNAME 'CSECT',SUBFLD=CSECTSF\nOUTFIKW  IKJKEYWD\n         IKJNAME 'OUTFILE',SUBFLD=OUTFISF\nUNITSF   IKJSUBF\nUNIT     IKJIDENT 'UNIT NAME',                                         +\n               FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,                     +\n               PROMPT='UNIT NAME'\nVOLSF    IKJSUBF\nVOL      IKJIDENT 'VOLUME SERIAL',                                     +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +\n               PROMPT='VOLUME SERIAL'\nPLUSSF   IKJSUBF\nPLUS     IKJIDENT 'MEMBER NAME',LIST,                                  +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +\n               PROMPT='MEMBER NAME'\nMAPSF    IKJSUBF\nMAPSKW   IKJKEYWD\n         IKJNAME 'ALL'\n         IKJNAME 'SHORT'\nIDRSF    IKJSUBF\nIDRTRNKW IKJKEYWD\n         IKJNAME 'TRANSLATOR'\nIDRPLSKW IKJKEYWD\n         IKJNAME 'PLS'\nIDRZAPKW IKJKEYWD\n         IKJNAME 'ZAP'\nIDRSPCKW IKJKEYWD\n         IKJNAME 'SPACE'\nIDRIDEKW IKJKEYWD\n         IKJNAME 'IDENTIFY'\nIDRALLKW IKJKEYWD\n         IKJNAME 'ALL'\nCSECTSF  IKJSUBF\nCSECT    IKJIDENT 'CSECT NAME',                                        +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +\n               PROMPT='CSECT NAME'\nOUTFISF  IKJSUBF\nOUTFI    IKJIDENT 'DDNAME',                                            +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +\n               PROMPT='DDNAME FOR OUTFILE'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nLINKAREA DS    2F\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nDSNPTR   DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL128           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nMYDFPB   DS    5F\nPLUSPTR  DS    F\nDSNAME   DS    H,CL44,CL9\nCLEANUP  DS    X\nOPTION1  DS    X\nOPT1D    EQU   X'80'               DATA\nOPT1T    EQU   X'40'               TEST\nOPT1S    EQU   X'20'               SYS\nOPT1E    EQU   X'10'               ESOTERIC\nOPT1W    EQU   X'08'               WHERE\nOPT1L    EQU   X'04'               SLPA\nOPT1O    EQU   X'02'               OUTFILE\nOPTION2  DS    X\nOPT2L    EQU   X'80'               LIST\nOPT2I    EQU   X'40'               IDR\nOPT2M    EQU   X'20'               MAP\nOPT2A    EQU   X'10'               MAP(ALL)\nOPT2O    EQU   X'08'               LOAD\nOPTION3  DS    X\nOPT3T    EQU   X'80'               TRAN\nOPT3P    EQU   X'40'               PLS\nOPT3Z    EQU   X'20'               ZAP\nOPT3I    EQU   X'10'               IDENT\nOPT3S    EQU   X'08'               SPACE\nCNAME    DS    CL8\nCNAMEID  DS    H\nESDID    DS    H\nRC       DS    H\nSPFHDRS  DS    C\nESDPTR   DS    F\nIDRLEN   DS    F\nIDRFREE  DS    F\nIDRPTR   DS    F\nIDRPTRC  DS    F\nIDRPTRE  DS    F\nIDRR5    DS    F\nMSGWK    DS    CL128\nMSGWH    DS    CL80\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFREGS DS    F   USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\nDOUBLE   DS    D\nFULL     EQU   DOUBLE,4\nBYTE     EQU   DOUBLE,1\nDDSAVE   DS    CL8\nDAIRREGS DS    F\nOPEND    DS    0F\nCLOSED   DS    F\nKOUNT    DS    F\nDCB      DS    0D,XL(DCBLEN)\nONAME    DS    CL8\nOUTDCBW  DS    0D,XL(OUTDCBL)\nOUTEXL   DS    F\nLINE     DS    CL80\nMYDECB   DS    5F\nSYNADSW  DS    F\nSYNADMSG DS    CL78\nANYCESD  DS    C\nMODES    DS    C\nJULIANI  DS    F\nJULIANO  DS    CL8\nJULIANW  DS    13H\nLPAREGS  DS    2F\nUNITN    DS    CL8\nVOLSER   DS    CL6,CL2\nMEMBER8  DS    D\nMEMBERL  DS    H\nUSERLEN  DS    H\nLINKOFF  DS    0F\nLINKOFF1 DS    F\nLINKOFF2 DS    F\nLINKOFF3 DS    F\nLINKOFF4 DS    F\nBLDLW    DS    CL64                4 + 11 + 2 + 47\nBLDLX    DS    CL129               2 * L'BLDLW + 1\nMAPENTX  DS    4F,C\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nPDSDSECT DSECT\nPDS      EQU   *\nPDSMEMBR DS    CL8                 MEMBER NAME\nPDSTTR   DS    XL3                 TTR OF 1ST BLOCK\nPDSBLDL1 DS    XL1                 CONCATENATION NUMBER\nPDSBLDL2 DS    XL1                 1 - LINKLIST  2 - STEPLIB\nPDSINDIC DS    XL1                 INDICATORS\n*              USER DATA FIELD\nPDSUSER  DS    0C\nPDSTTRT  DS    XL3                 TTR OF FIRST TEXT BLOCK\n         DS    XL1                 ZERO, FOR ALIGNMENT\nPDSTTRN  DS    XL3                 TTR OF NOTE LIST OR SCATTER\nPDSTTRNO DS    XL1                 NUMBER OF NOTE LIST ENTRIES\nPDSATTR  DS    0XL2                ATTRIBUTES\nPDSATTR1 DS    XL1                 ATTRIBUTES, BYTE 1\nPDSATTR2 DS    XL1                 ATTRIBUTES, BYTE 2\nPDSSIZE  DS    XL3                 CONTIGUOUS MAIN STORAGE REQUIRED\nPDSFTXTL DS    XL2                 LENGTH OF FIRST TEXT BLOCK\nPDSENTRY DS    XL3                 ENTRY POINT ADDRESS\nPDSFTXTO DS    0XL3                ORIGIN OF FIRST TEXT BLOCK (OS)\nPDSATTV  DS    XL3                 VS ATTRIBUTES, R/AMODE, RLD COUNT\nPDSOPTIO EQU   *                   BEGIN OPTIONAL FIELDS\n         ORG   PDSUSER\nSPFV     DS    XL1                 VERSION\nSPFM     DS    XL1                 MODIFICATION LEVEL\n         DS    XL2\nSPFCREDT DS    PL4                 00YYDDDF\nSPFMODDT DS    PL4                 00YYDDDF\nSPFMODTM DS    XL2                 HHMM\nSPFSIZE  DS    XL2                 CURRENT SIZE\nSPFINIT  DS    XL2                 INITIAL SIZE\nSPFMOD   DS    XL2                 MODIFICATIONS\nSPFID    DS    CL10                USERID\n         SPACE\nIHADCB   DSECT\n         DS    32XL1\n         DS    XL1\nDCBEODAD DS    AL3\nDCBRECFM DS    X\nDCBEXLST DS    AL3\nDCBDDNAM DS    CL8\nDCBOFLGS DS    X\n         DS    7XL1\n         DS    X\nDCBSYNAD DS    AL3\n         DS    H\nDCBBLKSI DS    H\n         DS    XL18\nDCBLRECL DS    H\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJPPL\n         SPACE\n         IKJDFPB\n         SPACE 2\n         IKJUPT\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJDAPL\n         SPACE 2\n         IKJDAP08\n         SPACE 2\n         IKJDAP18\n         SPACE 2\n         AIF   (NOT &MVS).SKIP8\n         IKJEFFDF DFDSECT=YES\n.SKIP8   ANOP\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMBER$": {"ttr": 13575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x14\\x01\\x16$_\\x01\\x18\\x01\\x0f\\x13\\x17\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2016-09-01T00:00:00", "modifydate": "2018-01-10T13:17:14", "lines": 27, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE731(MEMBER)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   MEMBER\n SETSSI  CB495300\n ENTRY   MEMBER\n NAME    MEMBER(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MODGEN": {"ttr": 13577, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00E\\x01\\x19\\x00/\\x01\\x19\\x18\\x7f\"5\\x01\\xf1\\x01\\xf1\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-01-02T00:00:00", "modifydate": "2019-07-06T22:35:45", "lines": 497, "newlines": 497, "modlines": 0, "user": "SBGOLOB"}, "text": "./ ADD NAME=IKJALPL  0100-12190-12190-1333-00012-00012-00000-SHOW723 00\n         MACRO\n         IKJALPL\nALPL     DSECT                         ALLOC command defaults\nALPL_ID  DS    C'ALPL'                 Block id\nALPL_LENGTH DS H                       length of control block\nALPL_LEVEL  DS H                       level of control block\n         DS    F                       zero\nALPL_FLAG DS   X                       Allocate flag\nALPL_OLD EQU  X'80'                    OLD\nALPL_SHR EQU  X'40'                    SHR\n         DS   4F\n         MEND\n./ ADD NAME=IKJCNPRM 0100-12190-12190-1333-00012-00012-00000-SHOW723 00\n         MACRO\n         IKJCNPRM\nCNPRM    DSECT                         IKJCNPRM Control Table\nCNPRM_ID DC    C'IKJCNPRM'             Block id\n         DS    H                       Version Number\nCNPRM_LENGTH DS H                      Total length of c.b.\nCNPRM_MAXSNUM DS F\nCNPRM_MAXUNUM DS F\nCNPRM_INITSNUM DS F\nCNPRM_INITUNUM DS F\n         DS    3F\n         MEND\n./ ADD NAME=IKJCTLT  0100-05180-05180-1403-00017-00017-00000-SHOW723 10\n         MACRO\n         IKJCTLT\nCTLT     DSECT                         TSO/E Control Table\nCTLT_ID  DS    C'CTLT'                 BLOCK ID\nCTLT_LEN DS    H'60'                   LENGTH OF CTLT\nCTLT_VERS DS   FL1'2'                  version number\n         DS    X                       UNUSED\nCTLTTE2  DS    A,F,H,H                 IKJEFTE2  PTR,LEN,#ENT,ENT_LEN\nCTLTTE8  DS    A,F,H,H                 IKJEFTE8  PTR,LEN,#ENT,ENT_LEN\nCTLTTNS  DS    A,F,H,H                 IKJEFTNS  PTR,LEN,#ENT,ENT_LEN\nCTLTTAP  DS    A,F,H,H                 IKJEFTAP  PTR,LEN,#ENT,ENT_LEN\nCTLT_TABLE_BUILT_FLAGS DS X            tables built from IKJTSOxx\nCTLTTE2_BUILT EQU X'80'\nCTLTTE8_BUILT EQU X'40'\nCTLTTNS_BUILT EQU X'20'\nCTLTTAP_BUILT EQU X'10'\n         MEND\n./ ADD NAME=IKJEEPTR 0106-05332-12218-1404-00068-00013-00000-HELP    38\n*         Documentation for the IKJTPVT control block\n*         ------------- --- --- ------- ------- -----\n*\n*    Particular reference is given to the EESCB control block here.\n*    For further reference, see CBT File 731, member MODGEN.\n*\n*    The TPVT control block is mostly created by settings in the\n*     PARMLIB member, IKJTSOxx.\n*    The TPVT control block is not publicly documented by IBM.\n*    We have documented the TPVT and some other TPVT-related\n*     control blocks.  The console command D IKJTSO will display\n*     much of the contents of the TPVT.\n*    The EESCB control block is chained off the TPVT, and it points\n*     to names for TSO individual userlogs and to the currently used\n*     \"Broadcast Dataset\" name (default name is SYS1.BRODCAST).\n*    TPVT stands for TSO Parmlib Vector Table.\n*    EESCB stands for TSO SEND PARMLIB Control Block.\n*\n*    To display most of the contents of the EESCB control block,\n*     use console command D IKJTSO,SEND or our TSO command from\n*     CBT File 731 called EESCB.\n*\n*    Three versions of EESCB exist to date (until z/OS 1.13 at least).\n*\n*    v1 - ESA 5.2.2  to OS/390 1.3       IKJE1SCB\n*    v2 - OS/390 2.4 to z/OS 1.2         IKJE2SCB\n*    v3 - z/OS 1.3   and above.          IKJEESCB  (in SYS1.MODGEN)\n*\n*    The following instructions tell you how to get to the TPVT,\n*     and to other control blocks that are connected to the TPVT.\n*\n*    Notation:  j is like a LOAD instruction in assembler\n*               j10 means virtual storage, value hex 10\n*               j+9c means LOAD what is in hex 9c off the previous\n*                    address\n*               etc.\n*\n*    This notation is used by the LOOK TSO command to browse storage.\n*    LOOK can be found on CBT File 264, load module on CBT File 035.\n*\n*    You may need the authorized TSO command called UKEYCSA (File 264)\n*     to be able to use LOOK without its abending.  If you need UKEYCSA\n*     to allow allocation of Key 8 CSA in your system, please reset it\n*     to its previous value, after you've finished using LOOK.\n*     (This is relevant for z/OS 1.9 and higher.)\n*\naddress    control     control block                    assembler\n*          block       full name                        instructions\n*          acronym\n*------    -------     -------------                    ------------\nj10        CVT         Communication Vector Table       L rx,16\nj+9c       TSVT        TSO Vector Table                 L rx,X'9C'(,rx)\nj+4c       TPVT        TSO Parmlib Vector Table         L rx,X'4C'(,rx)\nj+20       EESCB       TSO SEND PARMLIB Control Block   L rx,X'20'(,rx)\n*\n*    Some other pointers off the TPVT (see IKJTPVT in MODGEN, in\n*                                          CBT File 731).\n*\nj+14       CTLT        Common Storage copies of TSO Auth tables\nj+24       ALPL        Default ALLOC disposition (OLD or SHR)\nj+28       TPT         TSO TEST settings\nj+2c       INMXPARM    TSO Transmit (XMIT) parameters and settings\nj+30       IKJCNPRM    TSO CONSOLE command settings\nj+3c       IKJEFHCB    TSO Help dataset settings\n*\n*    Current settings for all of these, can be displayed using\n*     the console command:  D IKJTSO\n*\n./ ADD NAME=IKJEFCVE 0100-12190-12190-1333-00010-00010-00000-SHOW723 00\n         MACRO\n         IKJEFCVE\nFCVE     DSECT                         Platform Commands\nFCVE_ID  DS    C'FCVE'                 Block id\nFCVE_VER DS    X'01'                   Version\n         DS    XL3                     ?\nFCVE_LEN DS    F                       Length of table\nFCVE_COUNT DS  F                       Number of entries\nFCVE_ENTRY DS  0CL8                    Start of table\n         MEND\n./ ADD NAME=IKJEFHCB 0100-12190-12190-1333-00018-00018-00000-SHOW723 00\n         MACRO\n         IKJEFHCB\nHELP     DSECT                         IKJEFHCB Control Table\nHELP_ID  DC    C'IKJEFHCB'             Block id\n         DS    H                       ?\nHELP_LENGTH DS H                       Total length of c.b.\nHELP_LANG_CNT DS F                     Number of languages\nHELP_FIRST_LANG_ENTRY DS A             A(first lang entry)\nHELP_LANG_ENTRY DS 0C                  A lng entry and dsn list\nHELP_NEXT_LANG_ENTRY DS A              Next lang entry or 0\nHELP_LANG_TYPE DS CL3                  Language\nHELP_DSN_COUNT DS X                    dsn count for this\n*                                      language\nHELP_DSN_ENTRY DS 0C                   A dsn entry\nHELP_DSN_LENGTH DS F                   length of a dsn\nHELP_DSN DS    CL44                    a dsn\nHELP_END_ENTRY DS 0C\n         MEND\n./ ADD NAME=IKJEPPVE 0100-12190-12190-1333-00010-00010-00000-SHOW723 00\n         MACRO\n         IKJEPPVE\nPPVE     DSECT                         Platform Programs\nPPVE_ID  DS    C'PPVE'                 Block id\nPPVE_VER DS    X'01'                   Version\n         DS    XL3                     ?\nPPVE_LEN DS    F                       Length of table\nPPVE_COUNT DS  F                       Number of entries\nPPVE_ENTRY DS  0CL8                    Start of table\n         MEND\n./ ADD NAME=IKJEXTAB 0100-12190-12190-1333-00016-00016-00000-SHOW723 00\n         MACRO                         TSO EXIT/TABLE VECTOR\n         IKJEXTAB\nEXTAB_VECT     DSECT\nEXTV_HEADER    DS 0CL16                HEADER\nEXTV_ID        DS C'EXTV'\nEXTV_VERS      DS FL1\nEXTV_LEN       DS F\nEXTV_ENTRY#    DS F\nEXTV_ENT       DS 0XL16                ENTRY\nEXTV_ENT_NAME  DS C'IKJEFTAP'\nEXTV_FLAG1     DS X\nEXTV_FLAG1_LPA     EQU X'80'\nEXTV_FLAG1_LNKLST  EQU X'40'\nEXTV_FLAG1_STEPLIB EQU X'20'\nEXTV_LOAD_ADDR DS V(IKJEFTAP)\n         MEND\n./ ADD NAME=IKJE1SCB 0104-05332-05340-1348-00087-00263-00011-MACRO   10\n         MACRO\n         IKJE1SCB &DSECT=YES\n         AIF ('&DSECT' EQ 'YES').CBDSECT\nIKJE1SCB DS    0D\n         AGO   .CONT\n.CBDSECT ANOP\nIKJE1SCB DSECT\n.CONT    ANOP\nE1SCB_IDENTIFIER DS CL8           *\nE1SCB_VERSION    DS CL1           * Identifier Version\nE1SCB_RESERVED1  DS CL3           * Reserved\n*\nE1SCB_PARMS      DS 0CL20\nE1SCB_FLAGS_1    DS CL4           * SEND flags\n*\nE1SCB_OPERSEND   EQU X'80000000'  * Bit position to indicate the\n*                                   status of OPERATOR SEND.\n*                                   0 - OPERATOR SEND is inactive\n*                                   1 - OPERATOR SEND is active\n*                                    (OPERATOR SEND only, USER SEND is\n*                                     unaffected)\nE1SCB_USERSEND   EQU X'40000000'  * Bit position to indicate the\n*                                   status of USER SEND.\n*                                   0 - USER SEND is inactive\n*                                   1 - USER SEND is active\n*                                    (User SEND only, OPERATOR SEND is\n*                                     unaffected)\nE1SCB_SAVE       EQU X'20000000'  * Bit position to indicate if\n*                                   messages can be saved.\n*                                   0 - Messages can not be saved\n*                                   1 - Messages can be saved\nE1SCB_CHKBROD    EQU X'10000000'  * Bit position to indicate if the\n*                                   SYS1.BRODCAST data set should be\n*                                   searched.\n*                                   0 - Search the user log data set\n*                                       only\n*                                   1 - Search the user log data set\n*                                       and the SYS1.BRODCAST data set\nE1SCB_USEBROD   EQU X'08000000'  * Bit position to indicate whether to\n*                                  use SYS1.BRODCAST.\n*                                   0 - Do not use SYS1.BRODCAST\n*                                   1 - Use SYS1.BRODCAST\n*\nE1SCB_MSGPROTECT EQU X'04000000' * Bit position to indicate whether to\n*                                  enforce security level check\n*                                  0 - Do not enforce security use mail\n*                                      log USERID.LOGNAME to store\n*                                      message.\n*                                  1 - Enforce security, use mail log\n*                                      LOGNAME.USERID to store message\n*\nE1SCB_SYSPLEXSHR EQU X'02000000' * Bit position to indicate\n*                                  whether the broadcast data set is\n*                                  shared only by those systems in the\n*                                  sysplex.\n*                                  0 - It is not shared exclusively by\n*                                      the systems in the sysplex.\n*                                  1 - The broadcast data set is shared\n*                                      only by systems in the sysplex.\n*                                      LISTBC can bypass I/O on the\n*                                      broadcast data set.\nE1SCB_SYSPLEXSHR_XCF EQU X'01000000' * Bit position to indicate that\n*                                  the EESCB_SYSPLEXSHR flag was set as\n*                                  a result of an parmlib update on\n*                                  another system in the XCF group\n*                                  0 - It was updated by a parmlib\n*                                      update on this system\n*                                  1 - It was updated because a PARMLIB\n*                                      update was issued on another\n*                                      system in the XCF group.\n*\nE1SCB_OPERSEWAIT EQU X'00800000'  * Bit position to indicate whether\n*                                   OPERATOR SEND should wait for\n*                                   message buffers.\n*                                   0 - Don't wait for buffers.\n*                                   1 - Wait for buffers.\n*\nE1SCB_LOGNAME    DS 0CL52         * User log\nE1SCB_DATASET    DS CL44          * User log data set name\nE1SCB_MEMBER     DS CL8           * Data set member name\nE1SCB_DATE_AND_TIME DS 0CL8       * Date and time of last update       +\n\nE1SCB_DATE       DS CL4           * Date of last update\nE1SCB_TIME       DS CL4           * Time of last update (GMT)\nE1SCB_RESERVED2  DS CL28          * Reserved\n                 DS 0D            * End on a double word\n         MEND\n./ ADD NAME=IKJE2SCB 0104-05332-05340-1349-00103-00310-00000-MACRO   10\n         MACRO\n         IKJE2SCB &DSECT=YES\n         AIF ('&DSECT' EQ 'YES').CBDSECT\nIKJE2SCB DS    0D\n         AGO   .CONT\n.CBDSECT ANOP\nIKJE2SCB DSECT\n.CONT    ANOP\nE2SCB_IDENTIFIER DS CL8           *\nE2SCB_VERSION    DS CL1           * Identifier Version\nE2SCB_RESERVED1  DS CL1           * Reserved\nE2SCB_LENGTH     DS H             * Length of control block\n*\nE2SCB_PARMS      DS 0CL20\nE2SCB_FLAGS_1    DS CL4           * SEND flags\n*\nE2SCB_OPERSEND   EQU X'80000000'  * Bit position to indicate the\n*                                   status of OPERATOR SEND.\n*                                   0 - OPERATOR SEND is inactive\n*                                   1 - OPERATOR SEND is active\n*                                    (OPERATOR SEND only, USER SEND is\n*                                     unaffected)\nE2SCB_USERSEND   EQU X'40000000'  * Bit position to indicate the\n*                                   status of USER SEND.\n*                                   0 - USER SEND is inactive\n*                                   1 - USER SEND is active\n*                                    (User SEND only, OPERATOR SEND is\n*                                     unaffected)\nE2SCB_SAVE       EQU X'20000000'  * Bit position to indicate if\n*                                   messages can be saved.\n*                                   0 - Messages can not be saved\n*                                   1 - Messages can be saved\nE2SCB_CHKBROD    EQU X'10000000'  * Bit position to indicate if the\n*                                   SYS1.BRODCAST data set should be\n*                                   searched.\n*                                   0 - Search the user log data set\n*                                       only\n*                                   1 - Search the user log data set\n*                                       and the SYS1.BRODCAST data set\nE2SCB_USEBROD   EQU X'08000000'  * Bit position to indicate whether to\n*                                  use SYS1.BRODCAST.\n*                                   0 - Do not use SYS1.BRODCAST\n*                                   1 - Use SYS1.BRODCAST\n*\nE2SCB_MSGPROTECT EQU X'04000000' * Bit position to indicate whether to\n*                                  enforce security level check\n*                                  0 - Do not enforce security use mail\n*                                      log USERID.LOGNAME to store\n*                                      message.\n*                                  1 - Enforce security, use mail log\n*                                      LOGNAME.USERID to store message\n*\nE2SCB_SYSPLEXSHR EQU X'02000000' * Bit position to indicate\n*                                  whether the broadcast data set is\n*                                  shared only by those systems in the\n*                                  sysplex.\n*                                  0 - It is not shared exclusively by\n*                                      the systems in the sysplex.\n*                                  1 - The broadcast data set is shared\n*                                      only by systems in the sysplex.\n*                                      LISTBC can bypass I/O on the\n*                                      broadcast data set.\nE2SCB_SYSPLEXSHR_XCF EQU X'01000000' * Bit position to indicate that\n*                                  the EESCB_SYSPLEXSHR flag was set as\n*                                  a result of an parmlib update on\n*                                  another system in the XCF group\n*                                  0 - It was updated by a parmlib\n*                                      update on this system\n*                                  1 - It was updated because a PARMLIB\n*                                      update was issued on another\n*                                      system in the XCF group.\n*\nE2SCB_OPERSEWAIT EQU X'00800000'  * Bit position to indicate whether\n*                                   OPERATOR SEND should wait for\n*                                   message buffers.\n*                                   0 - Don't wait for buffers.\n*                                   1 - Wait for buffers.\n*\nE2SCB_SYSPLEXSHR_INI EQU X'00400000'  *  Bit position to indicate\n*                                  whether the broadcast data set is\n*                                  shared only by those systems in the\n*                                  sysplex.  Set from the SYSPLEXSHR\n*                                  parameter of the SEND statement.\n*                                  See EESCB_SYSPLEXSHR for the\n*                                  flag settings\nE2SCB_LOGNAME    DS 0CL52         * User log\nE2SCB_DATASET    DS CL44          * User log data set name\nE2SCB_MEMBER     DS CL8           * Data set member name\nE2SCB_DATE_AND_TIME DS 0CL8       * Date and time of last update       +\n\nE2SCB_DATE       DS CL4           * Date of last update\nE2SCB_TIME       DS CL4           * Time of last update (GMT)\nE2SCB_USERLOG_SIZE  DS 0CL6       * User Log size\nE2SCB_PRI_NUM    DS H             * Primary space amount\nE2SCB_SEC_NUM    DS H             * Secondary space amount\nE2SCB_DIR_NUM    DS H             * Number of directory blocks\n                 DS H             * Reserved\nE2SCB_SYSNAME    DS CL8           * Name of the system that updated the\n*                                   EESCB_SYSPLEXSHR flag via XCF path\n*\nE2SCB_RESERVED2  DS CL12          * Reserved\n                 DS 0D            * End on a double word\n         MEND\n./ ADD NAME=IKJTPT   0101-12190-16220-2315-00027-00026-00000-SHOW723 57\n         MACRO\n         IKJTPT\nTPT      DSECT                         TPT Control block\nTPT_ID   DS    C'TPT '                 Block id\nTPT_LENGTH DS H                        Total length of c.b.\nTPT_VERS DS    C                       TPT Version\n         DS    C                       Reserved X'00'\n         DS    F                       zeros\nTPT_TCT_ENTRY DS A                     Address of TSOCMD c.b.\nTPT_TCT_LENGTH DS F                    Length of TSOCMD c.b.\n*                                      Length - 4 / 8 = #\nTPT_SCT_ENTRY DS A                     Address of SUBCMD c.b.\nTPT_SCT_LENGTH DS F                    Length of SUBCMD c.b.\n*                                      Length - 4 / 16 = #\n         DS    3F\nTCT_TEST DSECT\nTCT_ID   DS    C'TCT '                 Block id\nTCT_TSOCMD DS  CL8                     A TSOCMD\nTCT_ENTRY_END DS 0C\n*                                      The last entry is x'40'\nSCT_TEST DSECT\nSCT_ID   DS    C'SCT '                 Block id\nSCT_SUBCMD DS  CL8                     A SUBCMD\nSCT_PGM  DS    CL8                     A SUBCMD entry name\n*                                      The last entry is x'40'\nSCT_ENTRY_END DS 0C\n         MEND\n./ ADD NAME=IKJTPVT  0106-19002-19002-1956-00065-00065-00000-SBGOLOB 00\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    This macro is our interpretation of IBM's \"internal use only\"    *\n*    control block macro:  IKJTPVT  (TSO PARMLIB Vector Table)        *\n*    The field names are not necessarily IBM's field names.           *\n*  The names in this macro have been adjusted for format with CBMACS. *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJTPVT\nTPVT     DSECT                         TSO PARMLIB VECTOR TABLE\nTPVT_ID  DS    CL4'TPVT'            00 BLOCK ID\nTPVT_LEN DS    H'72'                04 LENGTH OF TPVT\n****     DS    H'220'                  LENGTH OF TPVT          HTE26E2\nTPVT_VERS DS   FL1'2'               06 VERSION\nTPVT_MEM1 DS  0C'IKJTSO00'          07 CURRENT PARMLIB MEMBER  HTE25E2\nTPVTFIL1 DS    X                                               HTE26E2\nTPVT_MEM DS    CL8'IKJTSO00'        08 CURRENT PARMLIB MEMBER  HTE26E2\nTPVT_GEN DS    F                    10 PARMLIB generation count\nTPVTCTLT DS    V(CTLT)              14 IKJCTLT\nTPVTCTLTLEN  DS F'60'               18 length of CTLT\n         DS    4X                   1C\nTPVTSEND DS    V(SCB)               20 IKJEESCB   (SYS1.BRODCAST)\nTPVTALPL DS    V(ALPL)              24 ALPL       (ALLOCATE defaults)\nTPVTTEST DS    V(TPT)               28 TPT (TEST)\nTPVTXPRMD DS   V(XPRM)              2C INMXPARM   (XMIT)\nTPVTCONSOLE DS V(CNPRM)             30 IKJCNPRM   (CONSOLE)\nTPVTFCVEC DS   A,F                  34 FCVE       (Platform commands)\nTPVTHELP DS    V(HCB)               3C IKJEFHCB   (HELP)\nTPVTPPVEC DS   A,F                  40 PPVE       (Platform programs)\n           ORG  TPVT+X'4C'\nTPVTLOGON DS   X                    4C IKJTSOxx LOGON KEYWORD\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* The following bit settings must correspond to the same bit settings *\n* in the TSVTFLG1 field of the TSVT (TSVT + X'5') - lower nibble only *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTPVTPHRS  EQU  X'08'                Password phrase support active\nTPVTAPPL  EQU  X'04'                LOGON applid verification active\nTPVTLGNH  EQU  X'02'                LOGONHERE support is active\nTPVTLGPC  EQU  X'01'                LOGONPREPROMPT is active\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTPVTUMXL  DS   X                4D  MAXIMUM NUMBER OF CHARS IN USERID\n*   This is a reflection of the value in TSVTUMXL, but the \"real      *\n*   switch\" where the system \"decides\" if 8-character userids are     *\n*   allowed, appears to be TSVT+X'6', not in this value.              *\n*   Permissible values:  X'00' for pre z/OS 2.3 systems               *\n*                        X'07' for z/OS 2.3 with 8-char uids off.     *\n*                        X'08' for z/OS 2.3 with 8-char uids on.      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n           ORG  TPVT+X'50'\nTPVTDSNAM  DS  CL44'SYS1.PARMLIB'   50 dsname                  HTE26E2\nTPVTVOLSER DS  CL6'SYSCAT'          7C VOLSER                  HTE26E2\n           DS  2X                                              HTE26E2\nTPVTSYSNAM DS  CL8'P390'            84 from system             HTE26E2\nTPVTUSERID DS  CL8'IBMUSERM'        8C by userid               HTE26E2\nTPVTHHMMSS DS  CL8'16:59:56'        94 at hh:mm:ss             HTE26E2\nTPVTYYMMDD DS  CL10'1998-10-29'     9C on yyyy-mm-dd           HTE26E2\nTPVTCPUIDP DS  XL2                  A6 CPUID prefix\nTPVTCPUID  DS  F                    A8 CPUID\nTPVTMODEL  DS  H                    AC CPU Model\nTPVTUPDTIM DS  XL4                  AA Update Time\nTPVTUPDDAT DS  XL4                  B2 Update Date\nTPVTFEATURE DS  X                   B6 Feature\n*              X'80'            Dynamic Broadcast Feature is available\nTPVTFEATVER DS X                    B7 Feature Version\n         ORG   TPVT+X'DC'              end of TPVT             HTE26E2\n         MEND\n./ ADD NAME=IKJXPRM  0104-05350-06001-0843-00039-00037-00007-SHOW723 10\n         MACRO\n         IKJXPRM\nXPRM     DSECT                         INMXPARM Control Table\nXPRM_ID  DC    C'INMXPARM'             Block id\nXPRM_LEN DS    H                       Length of XPRM\nXPRM_NJE# DS   H                       Count of NJE/SMF id's\nXPRM_NJE_START DS A(XPRM_NODE)         A(start NJE/SMF id's)\nXPRM_VERS  DS  X'02',3X                version number          HTE26D2\nXPRM_WARN1 DS  F                       OUTWARN 1\nXPRM_WARN2 DS  F                       OUTWARN 2\nXPRM_LIM DS    F                       Outlim\n         DS    F,F,H                   ?\nXPRM_VIO_U_SIZE DS H                   Length of VIO unit name\nXPRM_VIO_U DS  CL8                     VIO unit name\n         DS    F,F                     ?\nXPRM_SW  DS    X                       Cipher flag\nXPRM_CIPHER_NO EQU X'10'               Cipher - NO\nXPRM_CIPHER_ALWAYS EQU X'20'           Cipher - ALWAYS\nXPRM_CIPHER_YES EQU X'40'              Cipher - YES\nXPRM_USERID EQU X'08'                  Daprefix - userid\n         DS    X                       ?\nXPRM_SOUT DS   C                       SYSOUT class\n         DS    C                       ?\nXPRM_LOGNAME DS CL8                    LOGNAME\n         DS    H                       ?\nXPRM_LOGSEL_1 DS C                     '*'\nXPRM_LOGSEL DS  CL8                    LOGSEL name\nXPRM_LOGSEL_SIZE DS H                  LOGSEL size (halfword)\nXPRM_SYSCTL DS CL44                    SYSCTL name\nXPRM_SYSCTL_SIZE DS H                  SYSCTL size (halfword)\nXPRM_USRCTL DS CL44                    USRCTL name\nXPRM_USRCTL_SIZE DS H                  USRCTL size (halfword)\nXPRM_SPOOLCL DS C                      SPOOL CLASS\n         ORG   XPRM+X'0F0'             filler                  HTE26D2\nXPRM_NODE DS   CL8                     NJE node name\nXPRM_SMF DS    CL4                     SMF ID\n         DS    XL4\nXPRM_NS_L EQU  *-XPRM_NODE             Length of a pair\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NOLOGOF": {"ttr": 13830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x02\\x01\\x17\\x18O\\x01\\x17 \\x1f#V\\x00B\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2017-07-03T00:00:00", "modifydate": "2017-07-20T23:56:02", "lines": 66, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//SYSIN    DD *\n    TITLE 'NOLOGOF - RESET THE ECTLOGF BIT NOT TO LOGOFF'\n* ------------------------------------------------------------------- *\n*      NOLOGOF  -  RESET THE ECTLOGF BIT SO YOU DON'T LOGOFF          *\n*                  (UNDO A RELOGON BEFORE IT MAKES YOU LOGOFF)        *\n*                                                                     *\n*   Author:   Sam Golob                                               *\n*                                                                     *\n*   Not re-entrant.                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNOLOGOF  CSECT\nNOLOGOF  RMODE 24\nNOLOGOF  AMODE 24\n         USING *,R15\n         B     STARTPG                   Eyecatcher\n         DC    CL10'NOLOGOF - '\n         DC    C'&SYSDATE'\n         DC    C', '\n         DC    C'&SYSTIME'\nSTARTPG  DS    0H\n         DROP  R15\n         USING NOLOGOF,R12\n         STM   R14,R12,12(R13)                Save regs\n         LR    R12,R15                   Load base\n         LR    R14,R13                   Caller save area\n         LA    R13,SAVEAREA              Save area address\n         ST    R14,SAVEAREA+4            Store old save\n         ST    R13,8(,R13)               Store new save\n         L     R7,12(,R1)                ECT from CPPL\n         NI    28(R7),X'EF'              Turn off LOGOFF bit X'10'\n         SR    R15,R15                   RC = 0\nRELEXIT  DS    0H\n         L     R13,SAVEAREA+4            Old save area\n         LM    R0,R12,20(R13)            Restore regs\n         L     R14,12(,R13)\n         BR    R14                       Exit\nSAVEAREA DS    9D                        Save Area\n         YREGS\n         END\n/*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   NOLOGOF\n SETCODE AC(1)\n SETSSI  CB495731\n NAME    NOLOGOF(R)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NUMERIC": {"ttr": 13832, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x02\\x01\\x055_\\x01\\x055_\\x12G\\x00*\\x00%\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-12-21T00:00:00", "modifydate": "2005-12-21T12:47:02", "lines": 42, "newlines": 37, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes on how to check for a numeric parm in a TSO command or\nelsewhere.\n\nIf you aren't going to use IKJPARS to parse a TSO command that\nyou've written, here is a good way to verify whether an entered\nparm is numeric.  The technique is very general, and I foresee\nthat it can have many clever applications, so that's why I'm\nwriting about it here.\n\nThe problem is as follows:\n\nYou have a string of characters, which you are testing whether\nthey are \"Display Numeric\".  That is, are they X'F0' thru X'F9'?\nIf not, then reject the string as invalid.\n\nTechnique:\n\nMake a translate table that has all valid characters as themselves,\nand all other characters as blanks, X'40', or any one single\ncharacter which is not valid.\n\nBy turning all the invalid characters into ONE single character,\nyou've made the \"validity test\" into only a test for the one\ncharacter!  THIS IS VERY POWERFUL!!!!\n\nMake a copy of the string to be tested in your program.\n\nTranslate the copy against your table.  Now, all the invalid\ncharacters are blanks.\n\nBop through the translated string with a BCT loop, testing for\nblanks, and the BCT register contains the original length of the\nstring.  If any blanks show up before the end, the string is\ninvalid.  Simple.\n\nThe technique can be generalized.  Another non-used character can\nbe substituted for the blanks, as the \"invalid character\".  Any\ncombination of characters can be thus tested for \"validity\"--just\nput all of them into the translate table as themselves, and the\nrest of the characters as the \"invalid character\".\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD": {"ttr": 13834, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x7f\\x01\\x01\\x15\\x7f\\x156\\x00e\\x00e\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-06T00:00:00", "modifydate": "2001-06-06T15:36:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RECONLI$": {"ttr": 13837, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\r\\x00'\\x01\\x055O\\x01\\x19\\x19\\x7f\\x159\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.13", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-16T15:39:27", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(RECONLIM)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(1)\n ENTRY   RECONLIM\n NAME    RECONLIM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RECONLIM": {"ttr": 13839, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00I\\x01\\x055O\\x01\\x19\\x19\\x7f\\x15$\\x02\\xf7\\x01\\x87\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-16T15:24:49", "lines": 759, "newlines": 391, "modlines": 0, "user": "SBGOLOB"}, "text": "RECONLIM TITLE 'RECONLIM - SET TCAS RECONNECT LIMIT ON THE FLY'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.  APF AUTHORIZED.  YOU NEED TO PUT        *\n*                   THIS COMMAND NAME IN THE ACTIVE IKJEFTE2 TABLE,   *\n*                   OR AUTHORIZE IT SOME OTHER WAY (CBT FILE 185      *\n*                   AND/OR CBT FILE 797).                             *\n*                                                                     *\n*         SYNTAX:   RECONLIM nnnn (nnnn is the new value of           *\n*                           TSO RECONLIM in decimal)                  *\n*                        Values accepted:  0 through 32767            *\n*                                                                     *\n*                   RECONLIM (no parameters) will show the current    *\n*                           number of minutes that a disconnected     *\n*                           terminal session will remain logged on.   *\n*                                                                     *\n*                   These will only work if RECONLIM is an APF-       *\n*                   authorized TSO command (in the IKJEFTE2 table).   *\n*                                                                     *\n*                                                                     *\n*         OUTPUT:   Via PUTLINE interface, using APUT and EPUTL.      *\n*                                                                     *\n*       SAMPLE OUTPUT:    (RECONLIM 5)                                *\n*                                                                     *\n*            RECONLIM - VER. 1.2 - 07/10/19 - 15.56                   *\n*            --------------------------------------                   *\n*             Change the RECONLIM number in the IKTTCAST              *\n*             control block.                                          *\n*            Current number of TSO Users:  3                          *\n*            Previous value of RECONLIM :  3                          *\n*            Value of RECONLIM reset to :  5                          *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   To change the number of minutes that a            *\n*                   disconnected TSO session will remain logged on.   *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  JUL 16, 2019                                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*         CHANGES:  1.1 - DEC 12, 09 -  (for program BDMNNOTC)        *\n*                     Fixed messages, better numeric verification.    *\n*                                                                     *\n*                   1.2 - DEC 14, 09 -                                *\n*                     Better comments, title subroutine, cut out      *\n*                     unnecessary code. Put non-numeric test in       *\n*                     the proper place, to not cause a S0C7 abend.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                  M A I N L I N E   C O D E\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nRECONLIM CSECT\nRECONLIM AMODE 31\nRECONLIM RMODE 24\n         USING RECONLIM,R12,R11,R10\n         B     BEGINN-*(,R15)\n         DC    CL18'RECONLIM VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             Set up base\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)         Second base\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)         Third base\n         LR    R6,R1               PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                  Initialize constants.\n         MVC   NEWNMBIN,=F'0'\n         MVI   NUMFLAG,X'00'\n         MVI   LINEB,X'40'\n* ------------------------------------------------------------------- *\n*  Get old value for RECONLIM. Do it early on in the program.         *\n* ------------------------------------------------------------------- *\n*  Test if we are APF-authorized - IKTTCAST is in Subpool 231 -       *\n*    which is fetch-protected.  You need APF to even see it.          *\n* ------------------------------------------------------------------- *\n         STM   R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         L     R2,16               CVT\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCAST\n         ST    R5,SAVER5A          Save R5\n         XR    R5,R5               Prepare work register\n         USING TCAST,R3\n         MODESET KEY=ZERO\n         LH    R4,TCASRCON         Save old reconnect limit.\n         LH    R5,TCASUSEC         Get current number of users.\n         MODESET KEY=NZERO\n         ST    R5,BINUSERS\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         MVC   LJUSSTOR,LJUSTWRK   Store number of users for display.\n         MVC   RJUSTWRK,BLANKS     Clear areas for reuse.\n         MVC   LJUSTWRK,BLANKS\n         CVD   R4,CVDWORK          Convert to Decimal\n         MVC   DECOLDNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECOLDNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         L     R5,SAVER5A          Restore R5\n         DROP  R2,R3\n* ------------------------------------------------------------------- *\n* --     Is it TSO?  And run another authorization check.          -- *\n* ------------------------------------------------------------------- *\n* --       You need OPER and ACCT authority to run this, if you    -- *\n* --     comment out the bypass that is after the CHEKAUTH label.  -- *\n* ------------------------------------------------------------------- *\n         L     R1,16               Point to CVT.\n         L     R1,0(,R1)           Point to TCB/ASCB words.\n         L     R9,4(,R1)           Point to TCB.\n         L     R1,X'B4'(,R9)       Point to JSCB.\n         L     R2,X'108'(,R1)      Point to PSCB.\n         LA    R2,0(,R2)           Clear high byte.\n         LTR   R2,R2               Any PSCB?\n         BZ    EOJ4                Get out. Not TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                  TSO Authorization (Oper,Acct)\n         B     CONT0               Bypass authorization check.\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes. Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No. Get out.\n         DROP  R2\n* ------------------------------------------------------------------- *\n* --         Get Parameter - Make sure it is numeric.              -- *\n* ------------------------------------------------------------------- *\nCONT0    DS    0H\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No. Not TSO.\n         L     R1,0(,R6)           Point to Command Buffer.\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out of none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of Command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,EOJ4              Zero. Message.\n         BC    5,EOJ4              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,5                Load Reg for BCT loop. 5 times.\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)                to first nonnull character\n         LA    R8,0                Initialize character count.\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the number\n*--------------------------------  Numeric Test this character - below\n         CLI   0(R7),C'0'\n         BL    FLAGON              Less than 0 ? No good.\n         CLI   0(R7),C'9'          Greater than 9 ?\n         BH    FLAGON              No good.\n         B     FLAGGO              It's numeric.\nFLAGON   OI    NUMFLAG,X'01'       It's not numeric. Flag the situation\nFLAGGO   DS    0H\n*--------------------------------  Numeric Test this character - above\n         LA    R7,1(,R7)           Go to next character\n         LA    R8,1(,R8)           Count it.\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nNOMORCUT DS    0H\n         MVC   NEWNUMB(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for Execute\n         EX    R8,MOVOUTL          Move number into display field\n         LA    R8,1(,R8)           Bump R8 back to where it was\n*\n         TM    NUMFLAG,X'01'       Did it fail the numeric test?\n         BO    NOTNUMER            It failed. No changes to be made.\n*\n         STC   R8,NUMCOUTL         Save PARM number's length (not used)\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         BCTR  R8,0                One less for Execute.\n         EX    R8,PACK             Convert to Packed.\n         CVB   R0,WORK             Convert to Binary.\n         ST    R0,NEWNMBIN         And store number in NEWNMBIN.\n         B     PASTCONV            Jump past constants.\n*\nMOVOUTL  MVC   NEWNUMB(*-*),0(R1)  Executed\nPACK     PACK  WORK,0(0,R1)        For conversion to binary.\nWORK     DC    D'0'                CVB work area.\nFULLZERO DC    F'0'                Fullword of zeros.\n*\nPASTCONV DS    0H                  Continue execution.\n* ------------------------------------------------------------------- *\n* -- >  Test again if this command is being run APF Authorized   < -- *\n* ------------------------------------------------------------------- *\nAUTHTEST DS    0H                  Don't let the system get a S047.\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* ------------------------------------------------------------------- *\n*     Replace the number here,   Get TCASUMAX field again, this time  *\n*       in Key 0.                 to replace it with the new number.  *\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT.\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCASP\n         USING TCAST,R3\n         MVC   NEWNTEST,NEWNMBIN        Copy binary number for testing\n         NC    NEWNTEST,=X'FFFF8000'    Are any high order bits on?\n         BNZ   TOOBIG                   Yes. Entered number is too big\n* ------------------------------------------------------------------- *\nKZ       MODESET KEY=ZERO\n         MVC   TCASRCON,NEWNMBIN+2    Replace RECONLIM in Key 0.\nNZ       MODESET KEY=NZERO\n* ------------------------------------------------------------------- *\n* --  Normal Completion  -                                         -- *\n* ------------------------------------------------------------------- *\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Previous value of RECONLIM :  '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE(30),=C'Value of RECONLIM reset to :  '\n         MVC   LINE+30(10),NEWNUMB\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         DROP  R3\n* ------------------------------------------------------------------- *\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of RECONLIM  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG10),MESSAG10\n         APUT  LINE,L'MESSAG10\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,4\n         B     EOJ                 CONT.\n* ------------------------------------------------------------------- *\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of RECONLIM  :  '\n         MVC   LINE+30(10),LJUSTWRK    Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG11),MESSAG11\n         APUT  LINE,L'MESSAG11\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ                 CONT\n** ---------------------------------------------------------------- **\nTOOBIG   DS    0H                     Number entered was too big.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of RECONLIM  :  '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2F,L'MESSAG2F\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of RECONLIM  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n*        APUT  LINE,47\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTNUMER DS    0H                     Parameter not numeric.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of RECONLIM  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   MESSPARM,NEWNUMB       Stuff entered parm into message.\n         APUT  MESSAG2B,MESSAG2L\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      S U B R O U T I N E S                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTITLSTMT DS    0H\n         APUT  MESSAGET,L'MESSAGET    Full title and messages.\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSAGEV,L'MESSAGEV\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLJUST    DS    0H                    Left-justify the display number.\n         STM   R4,R6,SAVER4T6        Save work registers.\n         LA    R4,RJUSTWRK           Point to right-justified number.\n         LA    R5,LJUSTWRK           Point to left-justification area.\n         LA    R6,10                 10 characters only.\nLJUSTLUP DS    0H                    loop.....\n         CLI   0(R4),X'F0'           Is this character smaller than 0?\n         BL    LJUSTBMP              No good. Bump past it.\n         CLI   0(R4),X'F9'           Is this character larger than 9?\n         BH    LJUSTBMP              No good. Bump past it.\n         MVC   0(1,R5),0(R4)         Significant. Move it to left-just.\n         LA    R5,1(,R5)             Bump left-just character.\nLJUSTBMP DS    0H\n         LA    R4,1(,R4)             Bump right-just char in any case.\nLJUSTCYC BCT   R6,LJUSTLUP           Loop up to BCT times. (10).\nLJUSTEND DS    0H                    end of loop.....\n         LM    R4,R6,SAVER4T6        Restore work registers.\n         BR    R9                    Return to caller.\nRJUSTWRK DC    CL10' '               Right-justified display number.\nLJUSTWRK DC    CL10' '               Left-justified display number.\nLJUSSTOR DC    CL10' '               Store current number of users.\nSAVER4T6 DS    3F                    Save area for work registers.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                '   BLANKS\nMESSAGED DC    C'--------------------------------------'\nMESSAGET DC    C'RECONLIM - VER. 1.2 - &SYSDATE - &SYSTIME   '\nMESSAGEU DC    C' Change the RECONLIM number in the IKTTCAST '\nMESSAGEV DC    C' control block.                             '\nMESSAG10 DC    C'To change RECONLIM, enter a numeric parameter. '\nMESSAG11 DC    C'This program was not invoked as a TSO command.'\nMESSAG2B DC    C'Parameter '\nMESSPARM DC    C'          '\nMESSAG2E DC    C'had non-numeric characters.  '\nMESSAG2L EQU   *-MESSAG2B\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG2F DC    C'Number entered was greater than 32767.'\nMASK10   DC    XL10'40202020202020202120'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D                  Save Area\nCVDWORK  DS    D                   Work area for CVD instruction\nSAVE1401 DC    5F'0'               TESTAUTH save area for registers\nSAVER5A  DS    F\nBINUSERS DS    F                   Number of current users in Binary\nNEWNMBIN DS    F                   New number to put in CVTBCLMT\nNEWNTEST DS    F                   Test binary number not too large\nDECOLDNM DS    PL8                 Packed version\nDECUSRNM DS    PL8                 Packed version\nNUMFLAG  DC    X'00'               Flag, X'01' if not numeric\nNUMCOUTL DC    X'00'               Store Length of parameter here\nNEWNUMB  DC    C'          '       Store Parm number here\n         DS    0F                  Align on fullword\nLINEB    DS    C                   LINE-1 (primed with blank)\nLINE     DS    CL137               Print line for most purposes\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of Data Area\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKTTCAST\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RELOGON": {"ttr": 14339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00(\\x01\\x17\\x18O\\x01\\x17 /\\x16A\\x00\\xa0\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2017-07-03T00:00:00", "modifydate": "2017-07-21T16:41:28", "lines": 160, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//SYSIN    DD *\n    TITLE 'RELOGON - RE-LOGON TO YOUR RUNNING TSO ID '\n* ------------------------------------------------------------------- *\n*      RELOGON  -  LOGOFF AND LOGON AGAIN TO YOUR TSO USERID          *\n*                                                                     *\n*   Author:   Jeffrey R. Broido                                       *\n*                                                                     *\n*   Reconstituted from a disassembly and fixed by:  Sam Golob         *\n*                                                                     *\n*   Not re-entrant.                                                   *\n*                                                                     *\n*   This program has been fixed for 8-character userids.              *\n* ------------------------------------------------------------------- *\n*   The BYE command is more general than this command.                *\n* ------------------------------------------------------------------- *\n*   See note about the TSB password below.... instructive.            *\n* ------------------------------------------------------------------- *\n*   The original intent of this program was to put the statement:     *\n*                                                                     *\n*   LOGON userid/password                                             *\n*                                                                     *\n*   into the RELOGON buffer, pointed to by the PSCBRLGB field of      *\n*   the PSCB.  Also, the RELOGON switch X'10' in the ECTSWS field     *\n*   of the ECT is set.                                                *\n*                                                                     *\n*   This has the effect that when you get out of ISPF, you            *\n*   immediately LOGOFF, and execute the instructions in the RELOGON   *\n*   buffer, which is LOGON userid/password .                          *\n*                                                                     *\n*   This is an old program, and the following is true:                *\n*   The \"password\" part of this, only works if the userid was         *\n*   defined by UADS.  When the userid was defined by RACF, this       *\n*   password field is blank.  In that case, the LOGON command, set    *\n*   up by RELOGON, is:                                                *\n*                                                                     *\n*   LOGON userid                                                      *\n*                                                                     *\n*   So you have to enter the password again, when you re-LOGON.       *\n*   Sorry about that!  (The BYE command is more general, and it       *\n*   has more power than this command.)                                *\n*                                                                     *\n*   If you executed this program when in ISPF, and you haven't        *\n*   been logged off yet, you can undo the forced LOGOFF by using      *\n*   the non-APF-authorized TSO command called NOLOGOF, which          *\n*   (I hope) is included in this pds.      (S.Golob - July 2017)      *\n* ------------------------------------------------------------------- *\nRELOGON  CSECT\nRELOGON  RMODE 24\nRELOGON  AMODE 24\n         USING *,R15\n         B     STARTPG                   Eyecatcher\n         DC    CL10'RELOGON - '\n         DC    C'&SYSDATE'\n         DC    C', '\n         DC    C'&SYSTIME'\nSTARTPG  DS    0H\n         DROP  R15\n         USING RELOGON,R12\n         STM   R14,R12,12(R13)           Save regs\n         LR    R12,R15                   Load base\n         LR    R14,R13                   Caller save area\n         LA    R13,SAVEAREA              Save area address\n         ST    R14,SAVEAREA+4            Store old save\n         ST    R13,8(,R13)               Store new save\n         L     R7,12(,R1)                ECT from CPPL\n         L     R3,16                     CVT address\n         L     R3,0(,R3)                 TCB words\n         L     R2,12(,R3)                ASCB <- R2\n         L     R3,0(,R3)                 TCB\n         L     R3,180(,R3)               JSCB <- R3\n         TM    236(R3),X'01'             JSCBAUTH on?\n         BO    RELCONT                   Yes. Continue.\n         TPUT  MESSAGAP,L'MESSAGAP       No. Msg and get out.\nRELEXIT8 LA    R15,8                     Condition code\nRELEXIT  DS    0H\n         L     R13,SAVEAREA+4            Old save area\n         LM    R0,R12,20(R13)            Restore regs\n         L     R14,12(,R13)\n         BR    R14                       Exit\n*\nRELCONT  DS    0H                        Authorized. Continue.\n         L     R4,264(,R3)               PSCB from JSCB\n         L     R6,60(,R2)                TSB from ASCB\n         LTR   R6,R6                     Is there a TSB?\n         BZ    RELEXIT8                  No. Get out.\n         MODESET KEY=ZERO\n*                                        Form the LOGON command\n         L     R5,48(,R4)                RELOGON buffer from PSCB\n         MVI   0(R5),X'00'               Maximum length for\n         MVI   1(R5),X'1B'                LOGON userid/password\n         MVI   4(R5),X'40'               Clear data part of the\n         MVC   5(251,R5),4(R5)             Relogon Buffer\n         MVC   4(6,R5),LOGONX            MOVE \"LOGON \" CMD IN\n         CLC   =C'>7BYTES',0(R4)         Is userid 8 bytes?\n         BE    USER8BY                   Yes, get it from +X'54'\n         MVC   10(7,R5),0(R4)            Move in our Userid\n         B     REGUSID\n*\nUSER8BY  DS    0H                        DO IT WITH 8-CHAR USERID\n         MVC   10(8,R5),X'54'(R4)        8-char id to buffer\n         CLC   X'58'(8,R6),BLANKS        Is there a TSB password?\n         BE    NOSLASH                   No. Don't put slash either.\n         MVI   17(R5),X'61'              Move in SLASH\n         MVC   18(8,R5),X'58'(R6)        Move TSB PASSWORD (see below)\n         B     NOSLASH\nREGUSID  DS    0H\n         CLC   X'58'(8,R6),BLANKS        Is there a TSB password?\n         BE    NOSLASH                   No. Don't put slash either.\n         MVI   17(R5),X'61'              MOVE IN SLASH\n         MVC   18(8,R5),X'58'(R6)        TSB PASSWORD (see below)\nNOSLASH  DS    0H\n* ------------------------------------------------------------------- *\n*     About the TSB password:  It is:  Blanks if the userid           *\n*     is RACF-defined, and you'll have to re-enter it to LOGON.       *\n*     But if the id is UADS-defined, then the password is inserted    *\n*      automatically and is meaningful, which was the original        *\n*      purpose of this command--that you shouldn't have to enter      *\n*      the password again, in order to LOGON.                         *\n* ------------------------------------------------------------------- *\n         MODESET KEY=NZERO\n         OI    28(R7),X'10'              ECTSWS/INDICATE LOGOFF\n         SR    R15,R15                   RC = 0\n         B     RELEXIT                   Normal program end.\n         SPACE\n* ------------------------------------------------------------------- *\n*                     C  O  N  S  T  A  N  T  S                       *\n* ------------------------------------------------------------------- *\nSAVEAREA DS    9D                        Save Area\nLOGONX   DC    CL6'LOGON '\nMESSAGAP DC    C'THIS COMMAND NEEDS APF AUTHORIZATION ...'\nBLANKS   DC    CL16' '\n         LTORG\n         YREGS\n         END\n/*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   RELOGON\n SETCODE AC(1)\n SETSSI  CB495731\n NAME    RELOGON(R)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RELOGON#": {"ttr": 14343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\x17\\x19?\\x01\\x17\\x19?\\x188\\x00>\\x00-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2017-07-12T00:00:00", "modifydate": "2017-07-12T18:38:06", "lines": 62, "newlines": 45, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n  The RELOGON command is used to allow a quick\n  LOGOFF and a quick LOGON afterward, of your userid.\n\n  RELOGON triggers an automatic LOGOFF and a LOGON\n  attempt, when your session gets to READY mode.\n\n  If you entered the RELOGON command, and have\n  not gotten to READY mode yet, you can nullify\n  the automatic LOGOFF by entering the NOLOGOF\n  command.\n\n  Action of RELOGON depends on whether the USERID was\n  defined by RACF or by SYS1.UADS.  See the note below.\n\n  The original intent of the RELOGON command\n  was to make re-entering the password unnecessary.\n\n  This works when the userid was defind by SYS1.UADS\n  but it does not work when the userid was defined\n  by RACF.  If the userid was defined by RACF, you\n  still have to enter the password.  But the process\n  is much easier than a manual LOGOFF and a LOGON.\n\n)X SYNTAX -\n\n  RELOGON\n\n)O OPERANDS -\n\n  (none)\n\n  Note.  If you are in ISPF, the RELOGON command will\n         set up a LOGON command to be automatically\n         executed when you get to READY mode.\n\n         When the userid was defined by SYS1.UADS,\n         and the password was defined by the ACCOUNT\n         command, then the command set up by RELOGON is:\n\n         LOGON userid/password\n\n         and you do not have to re-enter the password.\n\n         When the userid was defined by SYS1.UADS, and no\n         password was defined by the ACCOUNT command,\n         then you don't have to enter the password,\n         because it does not exist.  The command set up\n         by RELOGON is:\n\n         LOGON userid\n\n         When the userid was defined by RACF, or by another\n         security product, then the command set up by\n         RELOGON is:\n\n         LOGON userid\n\n         and you will have to re-enter the password,\n         because RELOGON could not obtain it from the\n         security product.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SCRSIZE": {"ttr": 14345, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x01\\x01\\x055O\\x01\\x19 O\\x10\\x19\\x03\\n\\x01\\x87\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-23T10:19:01", "lines": 778, "newlines": 391, "modlines": 0, "user": "SBGOLOB"}, "text": "SCRSIZE  TITLE 'SCRSIZE - SET TCAS SCREEN SIZE, SCRSIZE=NNNN'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.  APF AUTHORIZED.  YOU NEED TO PUT        *\n*                   THIS COMMAND NAME IN THE ACTIVE IKJEFTE2 TABLE,   *\n*                   OR AUTHORIZE IT SOME OTHER WAY (CBT FILE 185      *\n*                   AND/OR CBT FILE 797).                             *\n*                                                                     *\n*         SYNTAX:   SCRSIZE nnnn (nnnn is the new value of            *\n*                           TSO SCRSIZE in decimal)                   *\n*                        Values accepted:  480 through 9920           *\n*                                                                     *\n*                   SCRSIZE (no parameters) will show the current     *\n*                           default screen size defined to TCAS.      *\n*                                                                     *\n*                   These will only work if SCRSIZE is an APF-        *\n*                   authorized TSO command (in the IKJEFTE2 table).   *\n*                                                                     *\n*                                                                     *\n*         OUTPUT:   Via PUTLINE interface, using APUT and EPUTL.      *\n*                                                                     *\n*       SAMPLE OUTPUT:    (SCRSIZE 1920)                              *\n*                                                                     *\n*            SCRSIZE - VER. 1.2 - 07/10/19 - 15.56                    *\n*            --------------------------------------                   *\n*             Change the SCRSIZE number in the IKTTCAST               *\n*             control block.                                          *\n*            Current number of TSO Users:  3                          *\n*            Previous value of SCRSIZE :   480                        *\n*            Value of SCRSIZE reset to :   1920                       *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   TO CHANGE THE SCRSIZE NUMBER REPRESENTED BY       *\n*                   THE SCRSIZE PARAMETER IN THE TSOKEYxx PARMLIB     *\n*                   MEMBER.                                           *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  JUL 16, 2019                                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*         CHANGES:  1.1 - DEC 12, 09 -  (for program BDMNNOTC)        *\n*                     Fixed messages, better numeric verification.    *\n*                                                                     *\n*                   1.2 - DEC 14, 09 -                                *\n*                     Better comments, title subroutine, cut out      *\n*                     unnecessary code. Put non-numeric test in       *\n*                     the proper place, to not cause a S0C7 abend.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                  M A I N L I N E   C O D E\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nSCRSIZE  CSECT\nSCRSIZE  AMODE 31\nSCRSIZE  RMODE 24\n         USING SCRSIZE,R12,R11,R10\n         B     BEGINN-*(,R15)\n         DC    CL17'SCRSIZE VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             Set up base\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)         Second base\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)         Third base\n         LR    R6,R1               PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                  Initialize constants.\n         MVC   NEWNMBIN,=F'0'\n         MVI   NUMFLAG,X'00'\n         MVI   LINEB,X'40'\n         MVI   BLANKS-1,X'40'\n         MVC   BLANKS,BLANKS-1\n* ------------------------------------------------------------------- *\n*  Get old value for SCRSIZE. Do it early on in the program.          *\n* ------------------------------------------------------------------- *\n*  Test if we are APF-authorized - IKTTCAST is in Subpool 231 -       *\n*    which is fetch-protected.  You need APF to even see it.          *\n* ------------------------------------------------------------------- *\n         STM   R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         L     R2,16               CVT\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCAST\n         ST    R5,SAVER5A          Save R5\n         XR    R5,R5               Prepare work register\n         USING TCAST,R3\n         MODESET KEY=ZERO\n         LH    R4,TCASCRSZ         Save old screen size.\n         LH    R5,TCASUSEC         Get current number of users.\n         MODESET KEY=NZERO\n         ST    R5,BINUSERS\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         MVC   LJUSSTOR,LJUSTWRK   Store number of users for display.\n         MVC   RJUSTWRK,BLANKS     Clear areas for reuse.\n         MVC   LJUSTWRK,BLANKS\n         CVD   R4,CVDWORK          Convert to Decimal\n         MVC   DECOLDNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECOLDNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         L     R5,SAVER5A          Restore R5\n         DROP  R2,R3\n* ------------------------------------------------------------------- *\n* --     Is it TSO?  And run another authorization check.          -- *\n* ------------------------------------------------------------------- *\n* --       You need OPER and ACCT authority to run this, if you    -- *\n* --     comment out the bypass that is after the CHEKAUTH label.  -- *\n* ------------------------------------------------------------------- *\n         L     R1,16               Point to CVT.\n         L     R1,0(,R1)           Point to TCB/ASCB words.\n         L     R9,4(,R1)           Point to TCB.\n         L     R1,X'B4'(,R9)       Point to JSCB.\n         L     R2,X'108'(,R1)      Point to PSCB.\n         LA    R2,0(,R2)           Clear high byte.\n         LTR   R2,R2               Any PSCB?\n         BZ    EOJ4                Get out. Not TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                  TSO Authorization (Oper,Acct)\n         B     CONT0               Bypass authorization check.\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes. Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No. Get out.\n         DROP  R2\n* ------------------------------------------------------------------- *\n* --         Get Parameter - Make sure it is numeric.              -- *\n* ------------------------------------------------------------------- *\nCONT0    DS    0H\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No. Not TSO.\n         L     R1,0(,R6)           Point to Command Buffer.\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out of none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of Command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,EOJ4              Zero. Message.\n         BC    5,EOJ4              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,5                Load Reg for BCT loop. 5 times.\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)                to first nonnull character\n         LA    R8,0                Initialize character count.\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the number\n*--------------------------------  Numeric Test this character - below\n         CLI   0(R7),C'0'\n         BL    FLAGON              Less than 0 ? No good.\n         CLI   0(R7),C'9'          Greater than 9 ?\n         BH    FLAGON              No good.\n         B     FLAGGO              It's numeric.\nFLAGON   OI    NUMFLAG,X'01'       It's not numeric. Flag the situation\nFLAGGO   DS    0H\n*--------------------------------  Numeric Test this character - above\n         LA    R7,1(,R7)           Go to next character\n         LA    R8,1(,R8)           Count it.\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nNOMORCUT DS    0H\n         MVC   NEWNUMB(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for Execute\n         EX    R8,MOVOUTL          Move number into display field\n         LA    R8,1(,R8)           Bump R8 back to where it was\n*\n         TM    NUMFLAG,X'01'       Did it fail the numeric test?\n         BO    NOTNUMER            It failed. No changes to be made.\n*\n         STC   R8,NUMCOUTL         Save PARM number's length (not used)\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         BCTR  R8,0                One less for Execute.\n         EX    R8,PACK             Convert to Packed.\n         CVB   R0,WORK             Convert to Binary.\n         ST    R0,NEWNMBIN         And store number in NEWNMBIN.\n         B     PASTCONV            Jump past constants.\n*\nMOVOUTL  MVC   NEWNUMB(*-*),0(R1)  Executed\nPACK     PACK  WORK,0(0,R1)        For conversion to binary.\nWORK     DC    D'0'                CVB work area.\nFULLZERO DC    F'0'                Fullword of zeros.\n*\nPASTCONV DS    0H                  Continue execution.\n* ------------------------------------------------------------------- *\n* -- >  Test again if this command is being run APF Authorized   < -- *\n* ------------------------------------------------------------------- *\nAUTHTEST DS    0H                  Don't let the system get a S047.\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* ------------------------------------------------------------------- *\n*     Replace the number here,   Get TCASUMAX field again, this time  *\n*       in Key 0.                 to replace it with the new number.  *\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT.\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCASP\n         USING TCAST,R3\n         MVC   NEWNTEST,NEWNMBIN        Copy binary number for testing\n         CLC   NEWNTEST,=X'000026C0'    Bigger than 9920?\n         BH    TOOBIG                   Yes. Entered number is too big\n         CLC   NEWNTEST,=X'000001E0'    Smaller than 480?\n         BL    TOOSMALL                 Yes. Too small.\n* ------------------------------------------------------------------- *\nKZ       MODESET KEY=ZERO\n         MVC   TCASCRSZ,NEWNMBIN+2    Replace SCRSIZE in Key 0.\nNZ       MODESET KEY=NZERO\n* ------------------------------------------------------------------- *\n* --  Normal Completion  -                                         -- *\n* ------------------------------------------------------------------- *\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Previous value of SCRSIZE :   '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE(30),=C'Value of SCRSIZE reset to :   '\n         MVC   LINE+30(10),NEWNUMB\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         DROP  R3\n* ------------------------------------------------------------------- *\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of SCRSIZE  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG10),MESSAG10\n         APUT  LINE,L'MESSAG10\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,4\n         B     EOJ                 CONT.\n* ------------------------------------------------------------------- *\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of SCRSIZE  :  '\n         MVC   LINE+30(10),LJUSTWRK    Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG11),MESSAG11\n         APUT  LINE,L'MESSAG11\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ                 CONT\n** ---------------------------------------------------------------- **\nTOOBIG   DS    0H                     Number entered was too big.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of SCRSIZE  :   '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2F,L'MESSAG2F\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ\n** ---------------------------------------------------------------- **\nTOOSMALL DS    0H                     Number entered was too big.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of SCRSIZE  :   '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2G,L'MESSAG2G\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of SCRSIZE  :   '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n*        APUT  LINE,47\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTNUMER DS    0H                     Parameter not numeric.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of SCRSIZE  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   MESSPARM,NEWNUMB       Stuff entered parm into message.\n         APUT  MESSAG2B,MESSAG2L\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      S U B R O U T I N E S                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTITLSTMT DS    0H\n         APUT  MESSAGET,L'MESSAGET    Full title and messages.\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSAGEV,L'MESSAGEV\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLJUST    DS    0H                    Left-justify the display number.\n         STM   R4,R6,SAVER4T6        Save work registers.\n         LA    R4,RJUSTWRK           Point to right-justified number.\n         LA    R5,LJUSTWRK           Point to left-justification area.\n         LA    R6,10                 10 characters only.\nLJUSTLUP DS    0H                    loop.....\n         CLI   0(R4),X'F0'           Is this character smaller than 0?\n         BL    LJUSTBMP              No good. Bump past it.\n         CLI   0(R4),X'F9'           Is this character larger than 9?\n         BH    LJUSTBMP              No good. Bump past it.\n         MVC   0(1,R5),0(R4)         Significant. Move it to left-just.\n         LA    R5,1(,R5)             Bump left-just character.\nLJUSTBMP DS    0H\n         LA    R4,1(,R4)             Bump right-just char in any case.\nLJUSTCYC BCT   R6,LJUSTLUP           Loop up to BCT times. (10).\nLJUSTEND DS    0H                    end of loop.....\n         LM    R4,R6,SAVER4T6        Restore work registers.\n         BR    R9                    Return to caller.\nSAVER4T6 DS    3F                    Save area for work registers.\nRJUSTWRK DC    CL10' '               Right-justified display number.\nLJUSTWRK DC    CL10' '               Left-justified display number.\nLJUSSTOR DC    CL10' '               Store current number of users.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    CL1' '\nBLANKS   DC    CL45' '               BLANKS\nMESSAGED DC    C'--------------------------------------'\nMESSAGET DC    C'SCRSIZE - VER. 1.2 - &SYSDATE - &SYSTIME   '\nMESSAGEU DC    C' Change the SCRSIZE number in the IKTTCAST '\nMESSAGEV DC    C' control block.                             '\nMESSAG10 DC    C'To change SCRSIZE, enter a numeric parameter. '\nMESSAG11 DC    C'This program was not invoked as a TSO command.'\nMESSAG2B DC    C'Parameter '\nMESSPARM DC    C'          '\nMESSAG2E DC    C'had non-numeric characters.  '\nMESSAG2L EQU   *-MESSAG2B\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG2F DC    C'Number entered was greater than 9920.'\nMESSAG2G DC    C'Number entered was smaller than 480.'\nMASK10   DC    XL10'40202020202020202120'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D                  Save Area\nCVDWORK  DS    D                   Work area for CVD instruction\nSAVE1401 DC    5F'0'               TESTAUTH save area for registers\nSAVER5A  DS    F\nBINUSERS DS    F                   Number of current users in Binary\nNEWNMBIN DS    F                   New number to put in CVTBCLMT\nNEWNTEST DS    F                   Test binary number not too large\nDECOLDNM DS    PL8                 Packed version\nDECUSRNM DS    PL8                 Packed version\nNUMFLAG  DC    X'00'               Flag, X'01' if not numeric\nNUMCOUTL DC    X'00'               Store Length of parameter here\nNEWNUMB  DC    C'          '       Store Parm number here\n         DS    0F                  Align on fullword\nLINEB    DS    C                   LINE-1 (primed with blank)\nLINE     DS    CL137               Print line for most purposes\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of Data Area\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKTTCAST\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SCRSIZE$": {"ttr": 14602, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x004\\x01\\x055O\\x01\\x19\\x19\\x7f\\x159\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-16T15:39:34", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(SCRSIZE)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(1)\n ENTRY   SCRSIZE\n NAME    SCRSIZE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWRLG#": {"ttr": 14604, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00G\\x01\\x17\\x19\\x9f\\x01\\x17 \\x1f\\x16G\\x00\\x17\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2017-07-18T00:00:00", "modifydate": "2017-07-20T16:47:47", "lines": 23, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "             Sample Output of the SHOWRLGB TSO command\n             ------ ------ -- --- -------- --- -------\n\n                        TSO RELOGON BUFFER\n                        --- ------- ------\nRelogon Buffer Address:  00007EF8\n001A  0000    Header                                                   Dec\nLOGON IBMUSER/PASSWORD                                                 +0\nD3D6C7D6D540E2C2C7D6D3D6C261D7C1E2E2E6D6D9C440404040404040404040404040\n                                                                       +35\n4040404040404040404040404040404040404040404040404040404040404040404040\n                                                                       +70\n4040404040404040404040404040404040404040404040404040404040404040404040\n                                                                       +105\n4040404040404040404040404040404040404040404040404040404040404040404040\n                                                                       +140\n4040404040404040404040404040404040404040404040404040404040404040404040\n                                                                       +175\n4040404040404040404040404040404040404040404040404040404040404040404040\n                                                                       +210\n4040404040404040404040404040404040404040404040404040404040404040404040\n                                                                       +245\n40404040404040         ECT Addr:   0000BB88       ECTLOGF is ON\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SHOWRLGB": {"ttr": 14849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01-\\x00U\\x01\\x17\\x18O\\x01\\x17\\x19\\x9f#I\\x027\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.45", "flags": 0, "createdate": "2017-07-03T00:00:00", "modifydate": "2017-07-18T23:49:55", "lines": 567, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.B.ASM\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//SYSIN    DD *\n    TITLE 'SHOWRLGB - DISPLAY INFORMATION ABOUT THE TSO RELOGON BUFFER'\n* ------------------------------------------------------------------- *\n*      SHOWRLGB -  Display the entire RELOGON BUFFER                  *\n*                                                                     *\n*   Author:   Sam Golob                                               *\n*                                                                     *\n*   Not re-entrant.     Output uses PUTLINE interface.                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         L     R9,SAV9HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSHOWRLGB CSECT\nSHOWRLGB RMODE 24\nSHOWRLGB AMODE 24\n         USING *,R15\n         B     STARTPG                   Eyecatcher\n         DC    CL11'SHOWRLGB - '\n         DC    C'&SYSDATE'\n         DC    C', '\n         DC    C'&SYSTIME'\nSTARTPG  DS    0H\n         DROP  R15\n         USING SHOWRLGB,R12\n         STM   R14,R12,12(R13)           Save regs\n         LR    R12,R15                   Load base\n         LR    R14,R13                   Caller save area\n         LA    R13,SAVEAREA              Save area address\n         ST    R14,SAVEAREA+4            Store old save\n         ST    R13,8(,R13)               Store new save\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R7,8(,R1)                 PSCB from CPPL\n         L     R7,X'30'(,R7)             RLGB from PSCB\n         ST    R7,RLGBADDR               Store address for display\n         L     R8,X'100'(,R7)            ECT address from RLGB\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   We have the RELOGON BUFFER, now print it out....              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVI   OUTAREA-1,X'40'           Display title of program\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA+24(18),=C'TSO RELOGON BUFFER'\n         APUT  OUTAREA,60\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA+24(18),=C'--- ------- ------'\n         APUT  OUTAREA,60\n         MVC   OUTAREA(80),OUTAREA-1     Display buffer address\n         MVC   OUTAREA(25),=C'Relogon Buffer Address:  '\n         HEX   OUTAREA+25,4,RLGBADDR\n         APUT  OUTAREA,60\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*           Copy the RELOGON BUFFER into our program              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   RLGBAREA(4),0(R7)         Copy the buffer header.\n         MVI   RLGBAREA+4,X'40'          Clear our data area.     .\n         MVC   RLGBAREA+5(251),RLGBAREA+4\n         MVC   RLGBAREA+4(252),4(R7)     Copy the buffer contents.\n         MVC   RLGBAREA+256(4),256(R7)   Copy the ECT address.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Show the RELOGON BUFFER header first.                       *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVI   OUTAREA-1,X'40'           Buffer header information\n         MVC   OUTAREA(80),OUTAREA-1\n         HEX   OUTAREA,2,RLGBAREA        Length of command\n         HEX   OUTAREA+6,2,RLGBAREA+2    Offset (always zeros)\n         MVC   OUTAREA+14(6),=C'Header'\n         MVC   OUTAREA+71(3),=C'Dec'\n         APUT  OUTAREA,80\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   Display the RELOGON BUFFER contents 35 characters at a time   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA(35),RLGBAREA+4    Character representation\n         MVC   OUTAREA+71(2),=C'+0'\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         HEX   OUTAREA,35,RLGBAREA+4     HEX representation\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA(35),RLGBAREA+39   Character representation\n         MVC   OUTAREA+71(3),=C'+35'\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         HEX   OUTAREA,35,RLGBAREA+39    HEX representation\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA(35),RLGBAREA+74   Character representation\n         MVC   OUTAREA+71(3),=C'+70'\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         HEX   OUTAREA,35,RLGBAREA+74    HEX representation\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA(35),RLGBAREA+109  Character representation\n         MVC   OUTAREA+71(4),=C'+105'\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         HEX   OUTAREA,35,RLGBAREA+109   HEX representation\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA(35),RLGBAREA+144  Character representation\n         MVC   OUTAREA+71(4),=C'+140'\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         HEX   OUTAREA,35,RLGBAREA+144   HEX representation\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA(35),RLGBAREA+179  Character representation\n         MVC   OUTAREA+71(4),=C'+175'\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         HEX   OUTAREA,35,RLGBAREA+179   HEX representation\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA(35),RLGBAREA+214  Character representation\n         MVC   OUTAREA+71(4),=C'+210'\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         HEX   OUTAREA,35,RLGBAREA+214   HEX representation\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         MVC   OUTAREA(7),RLGBAREA+249   Character representation\n         MVC   OUTAREA+71(4),=C'+245'    Last Line - 7 chars\n         APUT  OUTAREA,80\n         MVI   OUTAREA-1,X'40'\n         MVC   OUTAREA(80),OUTAREA-1\n         HEX   OUTAREA,7,RLGBAREA+249    HEX representation\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Show the ECT address at the end of the RELOGON BUFFER,      *\n*      And display whether the RELOGON switch is ON or OFF.       *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   OUTAREA+23(9),=C'ECT Addr:'\n         HEX   OUTAREA+35,4,RLGBAREA+256\n         MVC   OUTAREA+50(11),=C'ECTLOGF is '\n         TM    X'1C'(R8),X'10'           Is ECTLOGF set?\n         BO    ISON                      Yes. Show ON.\n         MVC   OUTAREA+61(3),OFF         No.  Show OFF.\n         B     PRINTIT\nISON     MVC   OUTAREA+61(3),ON          Show ON.\nPRINTIT  DS    0H                        Last Line - 7 chars\n*                                        plus ECT address\n*                                        plus ECTLOGF switch status\n         APUT  OUTAREA,80\n         SR    R15,R15                   RC = 0\nRELEXIT  DS    0H                        Leave the program.\n         L     R13,SAVEAREA+4            Old save area\n         LM    R0,R12,20(R13)            Restore regs\n         L     R14,12(,R13)\n         BR    R14                       Exit\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Display HEX values\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R9                    Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                          CONSTANTS                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSAVEAREA DS    9D                    Save Area\nHEXSAVE  DS    3F                    Save for HEX routine\nSAV9HEX  DS    F                     Protection for BAL register\nRLGBAREA DC    260C' '               Copy of entire RELOGON BUFFER\nON       DC    CL3'ON '\nOFF      DC    CL3'OFF'\nRLGBADDR DS    F                     Relogon Buffer address\n         DS    X\nOUTAREA  DS    80C                   Printout area\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         YREGS\n         LTORG\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n/*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   SHOWRLGB\n SETCODE AC(1)\n SETSSI  CB495958\n NAME    SHOWRLGB(R)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SHOWTCA$": {"ttr": 14859, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x009\\x00\\x91\\x12?\\x01\\x19 ?\\x19@\\x00\\x1d\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1991-05-03T00:00:00", "modifydate": "2019-07-22T19:40:39", "lines": 29, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,BATCH,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(SHOWTCAS)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   SHOWTCAS\n SETCODE AC(1)\n SETSSI  CB498731\n NAME    SHOWTCAS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWTCAS": {"ttr": 15105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x000\\x00\\x804_\\x01\\x19 _\"9\\x038\\x01\\xcf\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1980-12-10T00:00:00", "modifydate": "2019-07-24T22:39:30", "lines": 824, "newlines": 463, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE ' SHOW AND EXPLAIN BEGINNING TCAS FIELDS '\n************************************************************\n*        'SHOWTCAS' OR 'LIST TCAS FIELDS AND EXPLAIN THEM' *\n************************************************************\n         SPACE\n*\n*        This program is in the Public Domain.\n*\n*        THIS PROGRAM WAS CONSTRUCTED FROM THE LPSCB PROGRAM,\n*        WHICH WAS:\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. OCTOBER 19 1979.\n*        DATE UPDATED. MAY 10, 1995   SAM GOLOB\n*                      NOV 28, 2016   SAM GOLOB\n*                      MAR 10, 2017   SAM GOLOB\n*        DATE CHANGED. JUL 24, 2019   SAM GOLOB\n*\n*        ATTRIBUTES. RE-ENTRANT.\n*\n*        SYNTAX:    SHOWTCAS  |  ALL\n*\n*           Without the keyword ALL, the output is limited to\n*           just the fields that can be changed by TSOKEYxx\n*           in the PARMLIB member.  With the keyword ALL, the\n*           entire TCAS control block is displayed.\n*\n*        COMMENTS.\n*            THIS TSO COMMAND SHOWS THE FIELDS OF THE\n*            TCAS CONTROL BLOCK, MAPPED BY THE MACRO\n*            IKTTCAST.  ONLY THE BEGINNING FIELDS ARE\n*            SHOWN, WHICH CAN BE SET BY THE TSOKEYxx\n*            PARMLIB MEMBER.  IF YOU USE THE PARAMETER\n*            \"ALL\", THEN THE ENTIRE CONTROL BLOCK IS\n*            SHOWN.\n*\n*        CHANGE LOG:\n*           JDM - JIM MARSHALL\n*           SBG - SAM GOLOB\n*\n*     These remarks pertain to the LPSCB program:\n*     JDM    02APR91 - ADDED DSECTS TO REPLACE HARDCODED OFFSETS JDM1\n*     SBG    28NOV16 - LIST 8 HEX DIGIT ADDRESSES INSTEAD OF 6.\n*                      CHANGED AMODE TO 31. DIDN'T SEEM TO HURT.\n*     SBG    10MAR17 - FIXES FOR 8-CHARACTER USERIDS.\n*                      DEPENDS ON TSVT+6 BYTE. PROGRAM DEPENDS ON\n*                      TSVT NOW, WHICH IT DIDN'T DEPEND ON BEFORE.\n*\n*     The remarks from here on, pertain to the SHOWTCAS program:\n*\n*     SBG    22JUL19 - Adapted the program to show the beginning\n*                      fields of the TCAS control block.\n*\n*     SBG    24JUL19 - Added all the fields of the TCAS control\n*                      block, if you use the keyword, ALL.\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   14,HEX\n         MEND\n         SPACE\n         MACRO\n&NAME    MSGZ  &AREA,&LEN\n         LA    1,&AREA\n         LA    0,&LEN\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         IKTTCAST\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         PRINT ON,GEN\nSHOWTCAS AMODE 31                                                JDM1\nSHOWTCAS RMODE 24                                                JDM1\nSHOWTCAS CSECT\n         USING *,R12,R10\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'SHOWTCAS '\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LA    R10,2048(,R12)      Load second base\n         LA    R10,2048(,R10)\n         LR    R2,R1               PARM POINTER\n         USING CPPL,R2\n         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN SAVEAREA\n         ST    R9,8(,R13)          CHAIN SAVEAREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         SPACE\n         MVI   LINE-1,C' '\n         XC    LINKAREA(8),LINKAREA\n         XC    FLAG2,FLAG2\n         SPACE\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n         SPACE 1\n************************************************************\n*        SET UP PPL FOR PARSE                              *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(MYPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R13,PPLUWA\n         DROP  R15\n         SPACE 1\n************************************************************\n*        CALL THE PARSE SERVICE ROUTINE                    *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPARS,X'80'       IF HI ORDER BIT NOT ON        JDM1\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,CVTPARS         CVTPARS                       JDM1\n         DROP  R15                                               JDM1\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK DS    0H\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT DS    0H\n         SPACE 1\n         LTR   R15,R15\n         BNZ   EXIT12\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         L     R4,CPPLPSCB\n         CLI   ALLKW+1,1           'ALL SPECIFIED'\n         BE    DOALL\n         OI    FLAG2,X'80'         Shorten output\nDOALL    DS    0h\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        TEST FOR PRESENCE OF 8-CHARACTER USERID SUPPORT            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTESTTSVT DS    0H                  TEACH PGM ABOUT 8-CHAR ID SUPPORT\n         ST    R6,SAVER6A          SAVE WORK REGISTER\n         XC    FLAG1,FLAG1         CLEAR FLAG\n         L     R6,16               CVT\n         L     R6,X'3F4'(,R6)      TCASP (MACRO IKTTCAST)\n         ST    R6,TCASADDR         SAVE ADDRESS OF TSVT\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         RELOAD TSVT ADDRESS FOR TEST\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n         L     R6,SAVER6A          RESTORE WORK REGISTER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                  PRINT TITLE OF THIS REPORT                       *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   LINE,LINE-1\n         MVC   LINET(L'TITLELIT),TITLELIT     Program title\n         BAL   R8,MSG\n         MVC   LINE,LINE-1\n         MVC   LINET(L'TITLEUND),TITLEUND     Underlines\n         BAL   R8,MSG\n         MVC   LINE,LINE-1\n         MVC   LINET(44),TITLEEX0     Explanation of program purpose\n         BAL   R8,MSG\n         MVC   LINET(44),TITLEEX1\n         BAL   R8,MSG\n         MVC   LINET(44),TITLEEX2\n         BAL   R8,MSG\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   IF 8-CHARACTER USERID SUPPORT IS PRESENT, THEN SEND MESSAGE     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              It is important to know if there exists              *\n*              8-character userid support.                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEIGHTCID DS    0H\n         CLI   FLAG1,X'00'         NO 8-CHARACTER SUPPORT\n         BE    EIGHTOUT            THEN GET OUT\n         TM    FLAG1,X'01'         SUPPORT IS PRESENT BUT NOT ON\n         BO    EIGHTOFF            THEN REPORT IT\n         TM    FLAG1,X'02'         SUPPORT IS PRESENT AND IS ON\n         BO    EIGHTON             THEN REPORT IT\n*                                  MSG IF 8-CHAR UID'S IN EFFECT\nEIGHTOFF DS    0H                       OFF\n         MVI   LINE-1,X'40'             BLANK MSG LINE\n         MVC   LINE,LINE-1\n         MVC   LINEU(L'MSG04),MSG04      YES, BUT\n         BAL   R8,MSG                   SUPPORT IS TURNED OFF\n         B     EIGHTOUT\nEIGHTON  DS    0H                       ON\n         MVI   LINE-1,X'40'             BLANK MSG LINE\n         MVC   LINE,LINE-1\n         MVC   LINEU(L'MSG05),MSG05      YES, AND\n         BAL   R8,MSG                   SUPPORT IS TURNED ON\n         B     EIGHTOUT\nEIGHTOUT DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*            PRINT THE ADDRESS OF THE TCAS CONTROL BLOCK            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R4,TCASADDR\n         USING TCAST,R4\n         HEX   LINE+33,4,TCASADDR\n         MVC   LINE+17(L'MSG01),MSG01\n         MSGZ  LINE,L'MSG01+28\n         MVC   LINE,LINE-1\n         BAL   R8,MSG\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                  PRINT REPORT TITLE HEADERS                       *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   LINE,LINE-1\n         MVC   LINE(49),TITLEHDR\n         BAL   R8,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE(49),TITLEHUN\n         BAL   R8,MSG\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                FORMAT FIELDS OF THE TCAS LAYOUT                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGOTTCAS  DS    0H\n         MODESET KEY=ZERO\n         USING TCAST,R4\n         MVC   LINE,LINE-1\n         L     R4,TCASADDR\n         MVC   LINETXT,TCAS_ID\n*        HEX   LINEX,4,TCASID\n         MVC   LINEX(4),TCASID\n         MVC   LINEC(24),=C'Control block identifier'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TCAS_USC\n         HEX   LINEX,2,TCASUSEC\n         MVC   LINEC(28),=C'Number of active users - HEX'\n         BAL   R8,MSG\n         LH    R5,TCASUSEC         Get current number of TSO users.\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         MVC   LINE,LINE-1\n         MVC   LINEX(5),RJUSTWRK+5\n         MVC   LINEC(28),=C'Number of active users - DEC'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TCAS_UMX\n         HEX   LINEX,2,TCASUMAX\n         MVC   LINEC(25),=C'TSO Maxusers number - HEX'\n         BAL   R8,MSG\n         LH    R5,TCASUMAX         Get maxusers\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         MVC   LINE,LINE-1\n         MVC   LINEX(5),RJUSTWRK+5\n         MVC   LINEC(25),=C'TSO Maxusers number - DEC'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_ACP\n         MVC   LINEX(8),TCASACBP\n         OC    LINEX(8),BLANKS\n         MVC   LINEC(12),=C'ACB Password'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_RCN\n         HEX   LINEX,2,TCASRCON\n         MVC   LINEC(31),=C'Reconnect time in minutes - HEX'\n         BAL   R8,MSG\n         LH    R5,TCASRCON         Get reconnect time\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         MVC   LINE,LINE-1\n         MVC   LINEX(5),RJUSTWRK+5\n         MVC   LINEC(31),=C'Reconnect time in minutes - DEC'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_CLZ\n         HEX   LINEX,2,TCASCLSZ\n         MVC   LINEC(17),=C'Buffer Size - HEX'\n         BAL   R8,MSG\n         LH    R5,TCASCLSZ         Get buffer size\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         MVC   LINE,LINE-1\n         MVC   LINEX(5),RJUSTWRK+5\n         MVC   LINEC(17),=C'Buffer Size - DEC'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_HBF\n         HEX   LINEX,4,TCASHBUF\n         MVC   LINEC(27),=C'High Buffer Threshold - HEX'\n         BAL   R8,MSG\n         L     R5,TCASHBUF\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         MVC   LINE,LINE-1\n         MVC   LINEX(9),RJUSTWRK+1\n         MVC   LINEC(27),=C'High Buffer Threshold - DEC'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_LBF\n         HEX   LINEX,4,TCASLBUF\n         MVC   LINEC(26),=C'Low Buffer Threshold - HEX'\n         BAL   R8,MSG\n         L     R5,TCASLBUF\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         MVC   LINE,LINE-1\n         MVC   LINEX(9),RJUSTWRK+1\n         MVC   LINEC(26),=C'Low Buffer Threshold - DEC'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_CRZ\n         HEX   LINEX,2,TCASCRSZ\n         MVC   LINEC(17),=C'Screen Size - HEX'\n         BAL   R8,MSG\n         LH    R5,TCASCRSZ         Get screen size\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         MVC   LINE,LINE-1\n         MVC   LINEX(5),RJUSTWRK+5\n         MVC   LINEC(17),=C'Screen Size - DEC'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_CHL\n         HEX   LINEX,1,TCASCHNL\n         MVC   LINEC(26),=C'Maximum Chain Length - HEX'\n         BAL   R8,MSG\n         XR    R5,R5\n         IC    R5,TCASCHNL         Get chain length\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         MVC   LINE,LINE-1\n         MVC   LINEX(5),RJUSTWRK+5\n         MVC   LINEC(26),=C'Maximum Chain Length - DEC'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_ENT\n         HEX   LINEX,1,TCASENGT\n         MVC   LINEC(34),=C'ENGTRANS Value 0-Base,1-Ext,2-None'\n         BAL   R8,MSG\n*        B     TCASEND\n         TM    FLAG2,X'80'\n         BO    TCASEND\n         MVC   LINETXT,TCAS_TID\n         MVC   LINEX(8),TCASTID\n         OC    LINEX(8),BLANKS\n         MVC   LINEC(28),=C'Symbolic Terminal Identifier'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_XEB\n         HEX   LINEX,4,TCASXECB\n         MVC   LINEC(21),=C'Cross Memory Sync ECB'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_DAI\n         HEX   LINEX,4,TCASDATI\n         MVC   LINEC(27),=C'Input Data Processor Module'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_DAO\n         HEX   LINEX,4,TCASDATO\n         MVC   LINEC(28),=C'Output Data Processor Module'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_MSS\n         HEX   LINEX,4,TCASMSGS\n         MVC   LINEC(27),=C'TCAS LPALIB Messages Module'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_FRR\n         HEX   LINEX,4,TCASFRR\n         MVC   LINEC(20),=C'TCAS I/O FRR Routine'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_WA\n         HEX   LINEX,4,TCASWA\n         MVC   LINEC(14),=C'TCAS Work Area'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TTL\n         HEX   LINEX,4,TCASTTL\n         MVC   LINEC(25),=C'TCAS TIM/TOM List Address'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TSB\n         HEX   LINEX,4,TCASTSB\n         MVC   LINEC(21),=C'A(FIRST TSO/VTAM TSB)'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_IQM\n         HEX   LINEX,4,TCASIQM\n         MVC   LINEC(32),=C'TCAS Input Queue Manager Address'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_OQM\n         HEX   LINEX,4,TCASOQM\n         MVC   LINEC(33),=C'TCAS Output Queue Manager Address'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_EXT\n         HEX   LINEX,4,TCASEXIT\n         MVC   LINEC(33),=C'TCAS TIM/TOM Exit Routine Address'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_LTE\n         HEX   LINEX,4,TCASLTE\n         MVC   LINEC(33),=C'TCAS LOSTERM Exit Routine Address'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_FL1\n         HEX   LINEX,1,TCASFLG1\n         MVC   LINEC(11),=C'TCAS FLAG 1'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_FL2\n         HEX   LINEX,1,TCASFLG2\n         MVC   LINEC(11),=C'TCAS FLAG 2'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_FL3\n         HEX   LINEX,1,TCASFLG3\n         MVC   LINEC(11),=C'TCAS FLAG 3'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_FL4\n         HEX   LINEX,1,TCASFLG4\n         MVC   LINEC(11),=C'TCAS FLAG 4'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_ASB\n         HEX   LINEX,4,TCASASCB\n         MVC   LINEC(17),=C'TCAS ASCB Address'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TGF\n         HEX   LINEX,4,TCASTGTF\n         MVC   LINEC(22),=C'TCAS GTF Trace Routine'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_RS1\n         HEX   LINEX,4,100(R4)\n         MVC   LINEC(10),=C'Reserved 1'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TTH\n         HEX   LINEX,4,TCASTTQH\n         MVC   LINEC(35),=C'First Terminal Control Work Element'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_ASI\n         HEX   LINEX,4,TCASASCI\n         MVC   LINEC(27),=C'TCAS ASCII Translate Tables'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_ATN\n         HEX   LINEX,4,TCASATTN\n         MVC   LINEC(22),=C'TCAS Attention Routine'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_B14\n         HEX   LINEX,2,TCASBR14\n         MVC   LINEC(9),=C'TCAS BR14'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_RS2\n         HEX   LINEX,2,118(R4)\n         MVC   LINEC(10),=C'Reserved 2'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_OMR\n         HEX   LINEX,4,TCASOMJR\n         MVC   LINEC(11),=C'A(IKTTOMJR)'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TPD\n         HEX   LINEX,4,TCASTPND\n         MVC   LINEC(26),=C'TCAS TPEND Exit - IKTTPEND'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_SCD\n         HEX   LINEX,4,TCASSCHD\n         MVC   LINEC(27),=C'TCAS LOSTERM Exit Scheduler'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_DUP\n         HEX   LINEX,4,TCASDUMP\n         MVC   LINEC(25),=C'A(IKTDMPCD) Control Block'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_76I\n         HEX   LINEX,4,TCAS767I\n         MVC   LINEC(29),=C'Input Data Processor IKT3767I'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_76O\n         HEX   LINEX,4,TCAS767O\n         MVC   LINEC(30),=C'Output Data Processor IKT3767O'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TTO\n         HEX   LINEX,4,TCASTTYO\n         MVC   LINEC(30),=C'Output Data Processor IKTWTTYO'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_NST\n         HEX   LINEX,4,TCASNSXT\n         MVC   LINEC(27),=C'Pointer to NSEXIT processor'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TIR\n         HEX   LINEX,4,TCASTIFR\n         MVC   LINEC(29),=C'Common I/F to Message Service'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_GNM\n         MVC   LINEX(8),TCASGNAM\n         OC    LINEX(8),BLANKS\n         MVC   LINEC(17),=C'TCAS Generic Name'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_ANM\n         MVC   LINEX(8),TCASANAM\n         OC    LINEX(8),BLANKS\n         MVC   LINEC(29),=C'TCAS Application Network Name'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_BNM\n         MVC   LINEX(8),TCASBNAM\n         OC    LINEX(8),BLANKS\n         MVC   LINEC(27),=C'Base Name for TSO APPL Name'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_BLN\n         HEX   LINEX,4,TCASBLEN\n         MVC   LINEC(19),=C'Length of Base Name'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TMR\n         HEX   LINEX,4,TCASTIMR\n         MVC   LINEC(25),=C'STIMER Value for IKTLTERM'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TXT\n         HEX   LINEX,4,TCASTXIT\n         MVC   LINEC(28),=C'Pointer to STIMER Timer Exit'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_LOH\n         HEX   LINEX,4,TCASLOGH\n         MVC   LINEC(24),=C'LOGONHERE Exit Scheduler'\n         BAL   R8,MSG\n         MVC   LINETXT,TCAS_TED\n         MVC   LINEC(25),=C'End of TCAS Control Block'\n         BAL   R8,MSG\n         SPACE\nTCASEND  DS    0H\n         MODESET KEY=NZERO\n         B     EXIT0\n         DROP  R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     ROUTINE TO SHOW HEXADECIMAL VALUES AS DISPLAY CHARACTERS      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             DISPLAY A MESSAGE W/PUTLINE\n         LA    R0,72\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R8\n         SPACE\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE 1\nEXIT0    SR    R15,R15             RETURN CODE ZERO\n         B     EXIT\nEXIT12   LA    R15,12              RETURN CODE 12\nEXIT     LR    R2,R15              SAVE RETURN CODE\nEXITX    LR    R15,R2              RESTORE RETURN CODE\n         LR    R1,R13              POINT R1 TO AREA TO BE FREED\n         L     R0,@SIZE            SUBPOOL AND LENGTH\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         ST    R15,16(,R13)        STORE RETURN CODE FOR LM\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(R13)       LOAD RETURN ADDRESS AND RC\n         BR    14                  RETURN\n         SPACE\n* ------------------------------------------------------------------- *\n*                     S U B R O U T I N E S                           *\n* ------------------------------------------------------------------- *\n************************************************************\n*        CONSTANTS                                         *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n         DS    0F\nBLANKS   DC    C'                '\nMSG01    DC    C'TCAS ADDRESS:'\nMSG04    DC    C'  8-CHARACTER USERID SUPPORT IS: OFF'\nMSG05    DC    C'  8-CHARACTER USERID SUPPORT IS: ON '\nTITLELIT DC    C'SHOWTCAS - TERMINAL CONTROL ADDRESS SPACE - FIELDS'\nTITLEUND DC    C'--------   -------- ------- ------- -----   ------'\nTITLEEX0 DC    C'    Display of Settings and Addresses having'\nTITLEEX1 DC    C'     to do with the TSOKEYxx PARMLIB member '\nTITLEEX2 DC    C'     at the beginning of the IKTTCAST macro '\nTITLEHDR DC    C'  addr  field        value            explanation'\nTITLEHUN DC    C'  ----  -----        -----            -----------'\nTCAS_ID  DC    C'    +0  TCASID      '        4 BYTES\nTCAS_USC DC    C'    +4  TCASUSEC    '        2 BYTES\nTCAS_UMX DC    C'    +6  TCASUMAX    '        2 BYTES\nTCAS_ACP DC    C'    +8  TCASACBP    '        8 BYTES\nTCAS_RCN DC    C'   +10  TCASRCON    '        2 BYTES\nTCAS_CLZ DC    C'   +12  TCASCLSZ    '        2 BYTES\nTCAS_HBF DC    C'   +14  TCASHBUF    '        4 BYTES\nTCAS_LBF DC    C'   +18  TCASLBUF    '        4 BYTES\nTCAS_CRZ DC    C'   +1C  TCASCRSZ    '        2 BYTES\nTCAS_CHL DC    C'   +1E  TCASCHNL    '        1 BYTES\nTCAS_ENT DC    C'   +1F  TCASENGT    '        1 BYTES\nTCAS_TID DC    C'   +20  TCASTID     '        8 BYTES\nTCAS_XEB DC    C'   +28  TCASXECB    '        4 BYTES\nTCAS_DAI DC    C'   +2C  TCASDATI    '        4 BYTES\nTCAS_DAO DC    C'   +30  TCASDATO    '        4 BYTES\nTCAS_MSS DC    C'   +34  TCASMSGS    '        4 BYTES\nTCAS_FRR DC    C'   +38  TCASFRR     '        4 BYTES\nTCAS_WA  DC    C'   +3C  TCASWA      '        4 BYTES\nTCAS_TTL DC    C'   +40  TCASTTL     '        4 BYTES\nTCAS_TSB DC    C'   +44  TCASTSB     '        4 BYTES\nTCAS_IQM DC    C'   +48  TCASIQM     '        4 BYTES\nTCAS_OQM DC    C'   +4C  TCASOQM     '        4 BYTES\nTCAS_EXT DC    C'   +50  TCASEXIT    '        4 BYTES\nTCAS_LTE DC    C'   +54  TCASLTE     '        4 BYTES\nTCAS_FL1 DC    C'   +58  TCASFLG1    '        1 BYTE\nTCAS_FL2 DC    C'   +59  TCASFLG2    '        1 BYTE\nTCAS_FL3 DC    C'   +5A  TCASFLG3    '        1 BYTE\nTCAS_FL4 DC    C'   +5B  TCASFLG4    '        1 BYTE\nTCAS_ASB DC    C'   +5C  TCASASCB    '        4 BYTES\nTCAS_TGF DC    C'   +60  TCASTGTF    '        4 BYTES\nTCAS_RS1 DC    C'   +64  RESERVED 1  '        4 BYTES\nTCAS_TTH DC    C'   +68  TCASTTQH    '        4 BYTES\nTCAS_ASI DC    C'   +6C  TCASASCI    '        4 BYTES\nTCAS_ATN DC    C'   +70  TCASATTN    '        4 BYTES\nTCAS_B14 DC    C'   +74  TCASBR14    '        2 BYTES\nTCAS_RS2 DC    C'   +76  RESERVED 2  '        2 BYTES\nTCAS_OMR DC    C'   +78  TCASOMJR    '        4 BYTES\nTCAS_TPD DC    C'   +7C  TCASTPND    '        4 BYTES\nTCAS_SCD DC    C'   +80  TCASSCHD    '        4 BYTES\nTCAS_DUP DC    C'   +84  TCASDUMP    '        4 BYTES\nTCAS_76I DC    C'   +88  TCAS767I    '        4 BYTES\nTCAS_76O DC    C'   +8C  TCAS767O    '        4 BYTES\nTCAS_TTO DC    C'   +90  TCASTTYO    '        4 BYTES\nTCAS_NST DC    C'   +94  TCASNSXT    '        4 BYTES\nTCAS_TIR DC    C'   +98  TCASTIFR    '        4 BYTES\nTCAS_GNM DC    C'   +9C  TCASGNAM    '        8 BYTES\nTCAS_ANM DC    C'   +A4  TCASANAM    '        8 BYTES\nTCAS_BNM DC    C'   +AC  TCASBNAM    '        8 BYTES\nTCAS_BLN DC    C'   +B4  TCASBLEN    '        4 BYTES\nTCAS_TMR DC    C'   +B8  TCASTIMR    '        4 BYTES\nTCAS_TXT DC    C'   +BC  TCASTXIT    '        4 BYTES\nTCAS_LOH DC    C'   +C0  TCASLOGH    '        4 BYTES\nTCAS_TED DC    C'   +C4  TCASTEND    '\nMASK10   DC    XL10'40202020202020202120'\n         SPACE\n************************************************************\n*        PARSE PCL                                         *\n************************************************************\n         SPACE\n         PRINT GEN\nMYPCL    IKJPARM\nALLKW    IKJKEYWD\n         IKJNAME 'ALL'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*        DSECTS                                            *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nCVDWORK  DS    D                   DOUBLEWORD WORK AREA\nLINKAREA DS    2F\nTSVTADDR DS    F                   TSVTADDR\nTCASADDR DS    F                   TCASADDR\nSAVER6A  DS    F\nSAVER9A  DS    F\nSAVEPSCB DS    F                   WE DON'T USE IT, BUT WE HAVE IT\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nFLAG1    DS    X\n*                                  X'00' IF NO 8-CHAR UID SUPPORT\n*                                  X'01' IF 8-CHAR SUPPORT BUT NOT ON\n*                                  X'02' IF 8-CHAR SUPPORT IS ON\nFLAG2    DS    X\n*                                  X'80' if ALL keyword is present\nRJUSTWRK DC    CL10' '             Right-justified display number.\nDECUSRNM DS    PL8                 Packed version\nSAVER4T6 DS    3F                  Save area for work registers.\nBINUSERS DS    F                   Number of current users in Binary\nLINEB    DS    C                   LINE-1\nLINE     DS    CL120\nLINETXT  EQU   LINE,20\nLINEX    EQU   LINE+21\nLINEC    EQU   LINE+38\nLINET    EQU   LINE+8\nLINEU    EQU   LINE+13\nANSWER   DS    CL64             5  ANSWER PLACE FOR TODCNVRT PROGRAM\n         DS    C\nTIMEFMT  DS    CL64                FORMAT FOR DATE AND TIME DISPLAY\nOPTION   DS    C\nWORKA    DS    10D\nPARMSAVE DS    F\n@DATAL   EQU   *-@DATA\n         SPACE 1                                                 JDM1\n         CVT   DSECT=YES,LIST=NO                                 JDM1\n         SPACE 1                                                 JDM1\n         PRINT ON,GEN\n         IKJTCB DSECT=YES,LIST=NO                                JDM1\n         SPACE 1                                                 JDM1\n         IKJPSCB\n         SPACE\n         IEZJSCB                                                 JDM1\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJUPT\n         SPACE\n         IKJECT\n         SPACE\n         PRINT OFF\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWTPV$": {"ttr": 15365, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x008\\x00\\x91\\x12?\\x01\\x19\\x17\\x8f\\x15\\x06\\x00\\x1f\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1991-05-03T00:00:00", "modifydate": "2019-06-27T15:06:38", "lines": 31, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,BATCH,FLAG(5))\n//*YSLIB   DD DISP=SHR,DSN=SYS1.Z23.MACLIB\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//*        DD DISP=SHR,DSN=SBGOLOB.TPVT.MACLIB\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(SHOWTPVT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   SHOWTPVT\n SETCODE AC(0)\n SETSSI  CB498731\n NAME    SHOWTPVT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWTPVT": {"ttr": 15367, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00R\\x00\\x804_\\x01\\x192\\x1f\\x10\\x02\\x030\\x01\\xcf\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1980-12-10T00:00:00", "modifydate": "2019-11-17T10:02:52", "lines": 816, "newlines": 463, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE ' SHOW AND EXPLAIN ALL TPVT FIELDS  '\n************************************************************\n*        'SHOWTPVT' OR 'LIST TPVT FIELDS AND EXPLAIN THEM' *\n************************************************************\n         SPACE\n*\n*        This program is in the Public Domain.\n*\n*        THIS PROGRAM WAS CONSTRUCTED FROM THE LPSCB PROGRAM,\n*        WHICH WAS:\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. OCTOBER 19 1979.\n*        DATE UPDATED. MAY 10, 1995   SAM GOLOB\n*                      NOV 28, 2016   SAM GOLOB\n*                      MAR 10, 2017   SAM GOLOB\n*        DATE CHANGED. JAN 02, 2019   SAM GOLOB\n*\n*        ATTRIBUTES. RE-ENTRANT.\n*\n*        COMMENTS.\n*            THIS TSO COMMAND SHOWS ALL THE FIELDS OF THE\n*            UNDOCUMENTED IBM CONTROL BLOCK, TPVT, SHORT FOR\n*            \"TSO PARMLIB VECTOR TABLE\", DESCRIBED BY THE IBM\n*            INTERNAL MACRO, IKJTPVT, WRITTEN IN PL/X ONLY.\n*\n*            OF COURSE WE DON'T HAVE THE ORIGINAL IBM MACRO.\n*            WE HAVE RECONSTRUCTED THE IKJTPVT MACRO IN\n*            ASSEMBLER LANGUAGE, AND OUR DESCRIPTION OF IT,\n*            AND ITS FIELDS, IS INCLUDED IN THIS SOURCE CODE.\n*            THE FIELD NAMES IN OUR ASSEMBLER COPY OF THE\n*            MACRO HAVE TO BE CONSIDERED AS ENTIRELY OUR OWN\n*            DESCRIPTIONS, EVEN THOUGH SOME OF THEM MAY\n*            CLOSELY RESEMBLE THEIR POSSIBLE IBM DESCRIPTIONS\n*            (WHICH WE DON'T REALLY KNOW).\n*\n*        CHANGE LOG:\n*           JDM - JIM MARSHALL\n*           SBG - SAM GOLOB\n*\n*     These remarks pertain to the LPSCB program:\n*     JDM    02APR91 - ADDED DSECTS TO REPLACE HARDCODED OFFSETS JDM1\n*     SBG    28NOV16 - LIST 8 HEX DIGIT ADDRESSES INSTEAD OF 6.\n*                      CHANGED AMODE TO 31. DIDN'T SEEM TO HURT.\n*     SBG    10MAR17 - FIXES FOR 8-CHARACTER USERIDS.\n*                      DEPENDS ON TSVT+6 BYTE. PROGRAM DEPENDS ON\n*                      TSVT NOW, WHICH IT DIDN'T DEPEND ON BEFORE.\n*\n*     The remarks from here on, pertain to the SHOWTPVT program:\n*     SBG    02JAN19 - Changed the program to display fields in the\n*                      undocumented TPVT only.  It is now a new\n*                      program, but many pieces of the old program\n*                      remain.\n*\n*                      Please note that the TPVTUMXL field described\n*                      in the TPVT, indicating whether 8-character\n*                      userids are supported or not, seems to be just\n*                      an \"indicator of status\" and not a switch to\n*                      turn the 8-character userid capability on or\n*                      off.\n*\n*                      The \"real switch\", that turns 8-character userid\n*                      support on or off, is located at the TSVT+6\n*                      location for one byte.\n*\n*                      This program actually reports the status of\n*                      both bytes.  The \"real switch\" byte status is\n*                      reported in the header of this program, where\n*                      it says:  8-CHARACTER USERID SUPPORT IS: ON|OFF\n*                      while the TPVTUMXL byte is reported in the\n*                      detail part of the program below.\n*\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   14,HEX\n         MEND\n         SPACE\n         MACRO\n&NAME    MSGZ  &AREA,&LEN\n         LA    1,&AREA\n         LA    0,&LEN\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    This macro must be included in this assembly, and is our         *\n*    interpretation of IBM's \"internal use only\" control block        *\n*    macro, IKJTPVT (which we haven't ever actually seen).            *\n*  The names in this macro have been adjusted for format with CBMACS. *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJTPVT\nTPVT     DSECT                         TSO PARMLIB VECTOR TABLE\nTPVT_ID  DS    CL4'TPVT'            00 BLOCK ID\nTPVT_LEN DS    H'72'                04 LENGTH OF TPVT\n****     DS    H'220'                  LENGTH OF TPVT\nTPVT_VERS DS   FL1'2'               06 VERSION\nTPVT_MEM1 DS  0C'IKJTSO00'          07 CURRENT PARMLIB MEMBER  HTE25E2\nTPVTFIL1 DS    X                 (above field was moved one byte down)\nTPVT_MEM DS    CL8'IKJTSO00'        08 CURRENT PARMLIB MEMBER  HTE26E2\nTPVT_GEN DS    F                    10 PARMLIB generation count\nTPVTCTLT DS    V(CTLT)              14 IKJCTLT\nTPVTCTLTLEN  DS F'60'               18 length of CTLT\n         DS    4X                   1C\nTPVTSEND DS    V(SCB)               20 IKJEESCB   (SYS1.BRODCAST)\nTPVTALPL DS    V(ALPL)              24 ALPL       (ALLOCATE defaults)\nTPVTTEST DS    V(TPT)               28 TPT (TEST)\nTPVTXPRMD DS   V(XPRM)              2C INMXPARM   (XMIT)\nTPVTCONSOLE DS V(CNPRM)             30 IKJCNPRM   (CONSOLE)\nTPVTFCVEC DS   A,F                  34 FCVE       (Platform commands)\nTPVTHELP DS    V(HCB)               3C IKJEFHCB   (HELP)\nTPVTPPVEC DS   A,F                  40 PPVE       (Platform programs)\n           ORG  TPVT+X'4C'\nTPVTLOGON DS   X                    4C IKJTSOxx LOGON KEYWORD\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* The following bit settings must correspond to the same bit settings *\n* in the TSVTFLG1 field of the TSVT (TSVT + X'5') - lower nibble only *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTPVTPHRS  EQU  X'08'                Password phrase support active\nTPVTAPPL  EQU  X'04'                LOGON applid verification active\nTPVTLGNH  EQU  X'02'                LOGONHERE support is active\nTPVTLGPC  EQU  X'01'                LOGONPREPROMPT is active\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTPVTUMXL  DS   X                4D  MAXIMUM NUMBER OF CHARS IN USERID\n*   This is a reflection of the value in TSVTUMXL, but the \"real      *\n*   switch\" where the system \"decides\" if 8-character userids are     *\n*   allowed, appears to be TSVT+X'6', not in this value.              *\n*   Permissible values:  X'00' for pre z/OS 2.3 systems               *\n*                        X'07' for z/OS 2.3 with 8-char uids off.     *\n*                        X'08' for z/OS 2.3 with 8-char uids on.      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n           ORG  TPVT+X'50'\nTPVTDSNAM  DS  CL44'SYS1.PARMLIB'   50 dsname\nTPVTVOLSER DS  CL6'SYSCAT'          7C VOLSER\n           DS  2X\nTPVTSYSNAM DS  CL8'P390'            84 from system\nTPVTUSERID DS  CL8'IBMUSERM'        8C by userid\nTPVTHHMMSS DS  CL8'16:59:56'        94 at hh:mm:ss\nTPVTYYMMDD DS  CL10'1998-10-29'     9C on yyyy-mm-dd\nTPVTCPUIDP DS  XL2                  A6 CPUID prefix\nTPVTCPUID  DS  F                    A8 CPUID\nTPVTMODEL  DS  H                    AC CPU Model\nTPVTUPDTIM DS  XL4                  AA Update Time\nTPVTUPDDAT DS  XL4                  B2 Update Date\nTPVTFEATURE DS  X                   B6 Feature\n*              X'80'            Dynamic Broadcast Feature is available\nTPVTFEATVER DS X                    B7 Feature Version\n         ORG   TPVT+X'DC'              end of TPVT\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         GBLC  &SYSLVL\n&SYSLVL  SETC  'ESA'                 370 OR ESA ?\n*                                    SET ESA FOR TSO/E VERSION 2\n*                                    SET 370 FOR MVS/370.\n*   LOOK AT YOUR LEVEL OF IKJUPT TO SEE HOW MUCH CAN DISPLAY.\n*   SEE BELOW LABEL :    DOUPT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         PRINT ON,GEN\nSHOWTPVT AMODE 31                                                JDM1\nSHOWTPVT RMODE 24                                                JDM1\nSHOWTPVT CSECT\n         USING *,R12,R10\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'SHOWTPVT '\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LA    R10,2048(,R12)      Load second base\n         LA    R10,2048(,R10)\n         LR    R2,R1               PARM POINTER\n         USING CPPL,R2\n         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN SAVEAREA\n         ST    R9,8(,R13)          CHAIN SAVEAREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         SPACE\n         MVI   LINE-1,C' '\n         XC    LINKAREA(8),LINKAREA\n         SPACE\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n         SPACE 1\n************************************************************\n*        SET UP PPL FOR PARSE                              *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(MYPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R13,PPLUWA\n         DROP  R15\n         SPACE 1\n************************************************************\n*        CALL THE PARSE SERVICE ROUTINE                    *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPARS,X'80'       IF HI ORDER BIT NOT ON        JDM1\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,CVTPARS         CVTPARS                       JDM1\n         DROP  R15                                               JDM1\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK DS    0H\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT DS    0H\n         SPACE 1\n         LTR   R15,R15\n         BNZ   EXIT12\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         L     R4,CPPLPSCB\n         CLI   ALLKW+1,1           'ALL SPECIFIED'\n         BE    TESTTSVT\n         CLI   REALKW+1,2          'REAL' SPECIFIED\n         BNE   TESTTSVT            NO, BRANCH\n         L     R1,CVTPTR           YES, FIND PSCB VIA JSCB       JDM1\n         USING CVTMAP,R1           GET ADDRESSABILITY            JDM1\n         L     R1,CVTTCBP          POINT TO NEW TCB WORD         JDM1\n         L     R1,4(,R1)           POINT TO OLD TCB WORD         JDM1\n         DROP  R1                                                JDM1\n         USING TCB,R1              ADDRESSABILITY TO TCB         JDM1\n         L     R1,TCBJSCB          GET JSCB ADDRESS              JDM1\n         DROP  R1                                                JDM1\n         USING IEZJSCB,R1          GET ADDRESSABILITY            JDM1\n         L     R1,JSCBPSCB         GET PSCB ADDRESS              JDM1\n         ST    R1,SAVEPSCB         SAVE IT EVEN IF WE DON'T USE IT\n         DROP  R1                                                JDM1\n         LTR   R4,R1               IS THERE A PSCB\n         BZ    EXIT12              NO, BRANCH\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        TEST FOR PRESENCE OF 8-CHARACTER USERID SUPPORT            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTESTTSVT DS    0H                  TEACH PGM ABOUT 8-CHAR ID SUPPORT\n         ST    R6,SAVER6A          SAVE WORK REGISTER\n         XC    FLAG1,FLAG1         CLEAR FLAG\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         SAVE ADDRESS OF TSVT\n         L     R6,X'4C'(,R6)       TPVT ADDRESS\n         ST    R6,TPVTADDR         SAVE ADDRESS OF TPVT\n         L     R6,TSVTADDR         RELOAD TSVT ADDRESS FOR TEST\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n         L     R6,SAVER6A          RESTORE WORK REGISTER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                  PRINT TITLE OF THIS REPORT                       *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   LINE,LINE-1\n         MVC   LINET(45),TITLELIT     Program title\n         BAL   R8,MSG\n         MVC   LINE,LINE-1\n         MVC   LINET(45),TITLEUND     Underlines\n         BAL   R8,MSG\n         MVC   LINE,LINE-1\n         MVC   LINET(44),TITLEEX0     Explanation of program purpose\n         BAL   R8,MSG\n         MVC   LINET(44),TITLEEX1     Underlines\n         BAL   R8,MSG\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   IF 8-CHARACTER USERID SUPPORT IS PRESENT, THEN SEND MESSAGE     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              It is important to know if there exists              *\n*              8-character userid support.                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEIGHTCID DS    0H\n         CLI   FLAG1,X'00'         NO 8-CHARACTER SUPPORT\n         BE    EIGHTOUT            THEN GET OUT\n         TM    FLAG1,X'01'         SUPPORT IS PRESENT BUT NOT ON\n         BO    EIGHTOFF            THEN REPORT IT\n         TM    FLAG1,X'02'         SUPPORT IS PRESENT AND IS ON\n         BO    EIGHTON             THEN REPORT IT\n*                                  MSG IF 8-CHAR UID'S IN EFFECT\nEIGHTOFF DS    0H                       OFF\n         MVI   LINE-1,X'40'             BLANK MSG LINE\n         MVC   LINE,LINE-1\n         MVC   LINEU(L'MSG04),MSG04      YES, BUT\n         BAL   R8,MSG                   SUPPORT IS TURNED OFF\n         B     EIGHTOUT\nEIGHTON  DS    0H                       ON\n         MVI   LINE-1,X'40'             BLANK MSG LINE\n         MVC   LINE,LINE-1\n         MVC   LINEU(L'MSG05),MSG05      YES, AND\n         BAL   R8,MSG                   SUPPORT IS TURNED ON\n         B     EIGHTOUT\nEIGHTOUT DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                 PRINT THE ADDRESS OF THE TPVT                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R4,TPVTADDR\n         HEX   LINE+33,4,TPVTADDR\n         MVC   LINE+17(L'MSG01),MSG01\n         MSGZ  LINE,L'MSG01+28\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                  PRINT REPORT TITLE HEADERS                       *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   LINE,LINE-1\n         MVC   LINE(49),TITLEHDR\n         BAL   R8,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE(49),TITLEHUN\n         BAL   R8,MSG\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                FORMAT FIELDS OF THE TPVT LAYOUT                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGOTTPVT  DS    0H\n         USING TPVT,R4\n         MVC   LINE,LINE-1\n         L     R4,TPVTADDR\n         MVC   LINETXT,TEXT_ID\n*        HEX   LINEX,4,TPVT_ID\n         MVC   LINEX(4),TPVT_ID\n         MVC   LINEC(24),=C'Control block identifier'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXT_LEN\n         HEX   LINEX,2,TPVT_LEN\n         MVC   LINEC(18),=C'TPVT length in hex'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXT_VER\n         HEX   LINEX,1,TPVT_VERS\n         MVC   LINEC(18),=C'TPVT version level'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXT_FL1\n         HEX   LINEX,1,TPVTFIL1\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXT_MEM\n*        HEX   LINEX,8,TPVT_MEM\n         MVC   LINEX(8),TPVT_MEM\n         MVC   LINEC(32),=C'PARMLIB member filling this TPVT'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXT_GEN\n         HEX   LINEX,4,TPVT_GEN\n         MVC   LINEC(32),=C'TPVT generation number, fullword'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXT_CTL\n         HEX   LINEX,4,TPVTCTLT\n         MVC   LINEC(32),=C'CTLT addr, points to auth tables'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTCTLN\n         HEX   LINEX,4,TPVTCTLTLEN\n         MVC   LINEC(25),=C'CTLT control block length'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRSV1\n         HEX   LINEX,4,TPVT+X'1C'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTSEND\n         HEX   LINEX,4,TPVTSEND\n         MVC   LINEC(33),=C'IKJEESCB-SEND PARMLIB contr block'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTALPL\n         HEX   LINEX,4,TPVTALPL\n         MVC   LINEC(29),=C'ALPL addr, default allocation'\n         L     R8,TPVTALPL\n         TM    12(R8),X'80'\n         BO    ALPLOLD\n         TM    12(R8),X'40'\n         BO    ALPLSHR\n         B     ALPLEND\nALPLOLD  DS    0H\n         MVC   LINEC+30(3),=C'OLD'\n         B     ALPLEND\nALPLSHR  DS    0H\n         MVC   LINEC+30(3),=C'SHR'\nALPLEND  DS    0H\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTTEST\n         HEX   LINEX,4,TPVTTEST\n         MVC   LINEC(32),=C'TPT addr, TEST cmd control block'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTXPRM\n         HEX   LINEX,4,TPVTXPRMD\n         MVC   LINEC(32),=C'INMXPARM address-SEND parameters'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTCNSL\n         HEX   LINEX,4,TPVTCONSOLE\n         MVC   LINEC(30),=C'TSO CONSOLE command parameters'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTFCVE\n         HEX   LINEX,4,TPVTFCVEC\n         MVC   LINEC(31),=C'Address-PLATFORM commands table'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTHELP\n         HEX   LINEX,4,TPVTHELP\n         MVC   LINEC(26),=C'Address-HELP datasets list'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTPPVE\n         HEX   LINEX,4,TPVTPPVEC\n         MVC   LINEC(31),=C'Address-PLATFORM programs table'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRSV2\n         HEX   LINEX,8,TPVT+X'44'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTLOGO\n         HEX   LINEX,1,TPVTLOGON\n         MVC   LINEC(27),=C'LOGON option fields - bits:'\n         BAL   R8,MSG\n         MVC   LINEC(30),TEXTLG1A\n         BAL   R8,MSG\n         MVC   LINEC(30),TEXTLG1B\n         BAL   R8,MSG\n         MVC   LINEC(30),TEXTLG1C\n         BAL   R8,MSG\n         MVC   LINEC(30),TEXTLG1D\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTUMXL\n         HEX   LINEX,1,TPVTUMXL\n         MVC   LINEC(30),=C'8-char userid status indicator'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRSV3\n         HEX   LINEX,2,TPVT+X'4E'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTDSNM\n         MVC   LINEX(44),TPVTDSNAM\n         MVC   LINE+58(14),=C'PARMLIB dsname'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTVOLS\n         MVC   LINEX(6),TPVTVOLSER\n         MVC   LINE+58(14),=C'and its volser'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRSV4\n         HEX   LINEX,2,TPVT+X'82'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTSNAM\n         MVC   LINEX(8),TPVTSYSNAM\n         MVC   LINEC(25),=C'ID of this system or LPAR'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTUSID\n         MVC   LINEX(8),TPVTUSERID\n         MVC   LINEC(32),=C'Who did the last PARMLIB update?'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTTIME\n         MVC   LINEX(8),TPVTHHMMSS\n         MVC   LINEC(30),=C'Time HH:MM:SS when it was done'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTDATE\n         MVC   LINEX(10),TPVTYYMMDD\n         MVC   LINEC(32),=C'Date YYYY-MM-DD when it was done'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTCPIP\n         HEX   LINEX,2,TPVTCPUIDP\n         MVC   LINEC(12),=C'CPUID prefix'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTCPUI\n         HEX   LINEX,4,TPVTCPUID\n         MVC   LINEC(21),=C'CPUID of this machine'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTMODN\n         HEX   LINEX,2,TPVTMODEL\n         MVC   LINEC(16),=C'CPU model number'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTUPDT\n         HEX   LINEX,4,TPVTUPDTIM\n         MVC   LINEC(30),=C'Hexadecimal TIME when updated.'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTUPDD\n         HEX   LINEX,4,TPVTUPDDAT\n         MVC   LINEC(30),=C'Hexadecimal DATE when updated.'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTFEAT\n         HEX   LINEX,1,TPVTFEATURE\n         MVC   LINEC(13),=C'Feature codes'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTFEAV\n         HEX   LINEX,1,TPVTFEATVER\n         MVC   LINEC(15),=C'Feature version'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRSV5         SPLIT THE RESERVE AREA\n         HEX   LINEX,18,TPVT+X'B8'\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRS5A         INTO TWO LINES.\n         HEX   LINEX,18,TPVT+X'CA'\n         BAL   R8,MSG\n         SPACE\nTSVTEND  B     EXIT0\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     ROUTINE TO SHOW HEXADECIMAL VALUES AS DISPLAY CHARACTERS      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             DISPLAY A MESSAGE W/PUTLINE\n         LA    R0,72\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R8\n         SPACE\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE 1\nEXIT0    SR    R15,R15             RETURN CODE ZERO\n         B     EXIT\nEXIT12   LA    R15,12              RETURN CODE 12\nEXIT     LR    R2,R15              SAVE RETURN CODE\nEXITX    LR    R15,R2              RESTORE RETURN CODE\n         LR    R1,R13              POINT R1 TO AREA TO BE FREED\n         L     R0,@SIZE            SUBPOOL AND LENGTH\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         ST    R15,16(,R13)        STORE RETURN CODE FOR LM\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(R13)       LOAD RETURN ADDRESS AND RC\n         BR    14                  RETURN\n         SPACE\n************************************************************\n*        CONSTANTS                                         *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n         DS    0F\nBLANKS   DC    C'                '\nMSG01    DC    C'TPVT ADDRESS:'\nMSG02    DC    C'UPT FROM PSCB   '\nMSG02A   DC    C'UPT FROM CPPL   '\nMSG03    DC    C'ECT ADDRESS '\nMSG04    DC    C'8-CHARACTER USERID SUPPORT IS: OFF'\nMSG05    DC    C'8-CHARACTER USERID SUPPORT IS: ON '\nTITLELIT DC    C'SHOW TPVT - TSO PARMLIB VECTOR TABLE - FIELDS'\nTITLEUND DC    C'---- ----   --- ------- ------ -----   ------'\nTITLEEX0 DC    C'  Display of Common Storage Deriving from   '\nTITLEEX1 DC    C'        the IKJTSOxx PARMLIB member         '\nTITLEHDR DC    C'  addr  field        value            explanation'\nTITLEHUN DC    C'  ----  -----        -----            -----------'\nTEXT_ID  DC    C'    +0  TPVT_ID     '        4 BYTES\nTEXT_LEN DC    C'    +4  TPVT_LEN    '        2 BYTES\nTEXT_VER DC    C'    +6  TPVT_VERS   '        1 BYTE\nTEXT_FL1 DC    C'    +7  TPVT_FILLER1'        1 BYTE\nTEXT_MEM DC    C'    +8  TPVT_MEM    '        8 BYTES\nTEXT_GEN DC    C'   +10  TPVT_GEN    '        4 BYTES\nTEXT_CTL DC    C'   +14  TPVTCTLT    '        4 BYTES\nTEXTCTLN DC    C'   +18  TPVTCTLTLEN '        4 BYTES\nTEXTRSV1 DC    C'   +1C  RESERVED 1  '        4 BYTES\nTEXTSEND DC    C'   +20  TPVTSEND    '        4 BYTES\nTEXTALPL DC    C'   +24  TPVTALPL    '        4 BYTES\nTEXTTEST DC    C'   +28  TPVTTEST    '        4 BYTES\nTEXTXPRM DC    C'   +2C  TPVTXPRMD   '        4 BYTES\nTEXTCNSL DC    C'   +30  TPVTCONSOLE '        4 BYTES\nTEXTFCVE DC    C'   +34  TPVTFCVEC   '        8 BYTES\nTEXTHELP DC    C'   +3C  TPVTHELP    '        4 BYTES\nTEXTPPVE DC    C'   +40  TPVTPPVEC   '        8 BYTES\nTEXTRSV2 DC    C'   +44  RESERVED 2  '        8 BYTES\nTEXTLOGO DC    C'   +4C  TPVTLOGON   '        1 BYTE\nTEXTUMXL DC    C'   +4D  TPVTUMXL    '        1 BYTE\nTEXTRSV3 DC    C'   +4E  RESERVED 3  '        2 BYTES\nTEXTDSNM DC    C'   +50  TPVTDSNAM   '       44 BYTES\nTEXTVOLS DC    C'   +7C  TPVTVOLSER  '        6 BYTES\nTEXTRSV4 DC    C'   +82  RESERVED 4  '        2 BYTES\nTEXTSNAM DC    C'   +84  TPVTSYSNAM  '        8 BYTES\nTEXTUSID DC    C'   +8C  TPVTUSERID  '        8 BYTES\nTEXTTIME DC    C'   +94  TPVTHHMMSS  '        8 BYTES\nTEXTDATE DC    C'   +9C  TPVTYYMMDD  '       10 BYTES\nTEXTCPIP DC    C'   +A6  TPVTCPUIDP  '        2 BYTES\nTEXTCPUI DC    C'   +A8  TPVTCPUID   '        4 BYTES\nTEXTMODN DC    C'   +AC  TPVTMODEL   '        2 BYTES\nTEXTUPDT DC    C'   +AE  TPVTUPDTIM  '        4 BYTES\nTEXTUPDD DC    C'   +B2  TPVTUPDDAT  '        4 BYTES\nTEXTFEAT DC    C'   +B6  TPVTFEATURE '        1 BYTE\nTEXTFEAV DC    C'   +B7  TPVTFEATVER '        1 BYTE\nTEXTRSV5 DC    C'   +B8  RESERVED 5  '       18 BYTES\nTEXTRS5A DC    C'   +CA  RESERVED 5A '       18 BYTES\nTEXTLG1A DC    C'Password Phrase Support     08'\nTEXTLG1B DC    C'Applid Verification         04'\nTEXTLG1C DC    C'LOGONHERE Support           02'\nTEXTLG1D DC    C'Password Preprompt Support  01'\n         SPACE\n************************************************************\n*        PARSE PCL                                         *\n************************************************************\n         SPACE\n         PRINT GEN\nMYPCL    IKJPARM\nREALKW   IKJKEYWD\n         IKJNAME 'CPPL'\n         IKJNAME 'REAL'\nUPTKW    IKJKEYWD\n         IKJNAME 'UPT'\nECTKW    IKJKEYWD\n         IKJNAME 'ECT'\nALLKW    IKJKEYWD\n         IKJNAME 'ALL'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*        DSECTS                                            *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D                   DOUBLEWORD WORK AREA\nLINKAREA DS    2F\nADDRESS  DS    F\nTSVTADDR DS    F                   TSVTADDR\nTPVTADDR DS    F                   TPVTADDR\nUPTADDR  DS    F                   UPT FROM PSCB\nUPTADDRC DS    F                   UPT FROM CPPL\nECTADDR  DS    F\nSAVER6A  DS    F\nSAVER9A  DS    F\nSAVEPSCB DS    F                   WE DON'T USE IT, BUT WE HAVE IT\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nFLAG1    DS    X\n*                                  X'00' IF NO 8-CHAR UID SUPPORT\n*                                  X'01' IF 8-CHAR SUPPORT BUT NOT ON\n*                                  X'02' IF 8-CHAR SUPPORT IS ON\nLINEB    DS    C                   LINE-1\nLINE     DS    CL120\nLINETXT  EQU   LINE,20\nLINEX    EQU   LINE+21\nLINEC    EQU   LINE+38\nLINET    EQU   LINE+8\nLINEU    EQU   LINE+13\nENTRY    DS    F                1  LOADED ENTRY POINT OF TODCNVRT\nPARAM    DS    5F               2  PARAMETER LIST FOR TODCNVRT PROGRAM\nCLOCK    DS    D                3  TARGET AREA OF STCK INSTRUCTION\nTIMEZONE DS    F                4  FILLED IN FROM CVTTZ\nANSWER   DS    CL64             5  ANSWER PLACE FOR TODCNVRT PROGRAM\n         DS    C\nTIMEFMT  DS    CL64                FORMAT FOR DATE AND TIME DISPLAY\nOPTION   DS    C\nWORKA    DS    10D\nPARMSAVE DS    F\n@DATAL   EQU   *-@DATA\n         SPACE 1                                                 JDM1\n         CVT   DSECT=YES,LIST=NO                                 JDM1\n         SPACE 1                                                 JDM1\n         PRINT ON,GEN\n         IKJTCB DSECT=YES,LIST=NO                                JDM1\n         SPACE 1                                                 JDM1\n         IKJPSCB\n         SPACE\n         IKJTPVT\n         SPACE\n         IEZJSCB                                                 JDM1\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJUPT\n         SPACE\n         IKJECT\n         SPACE\n         PRINT OFF\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOB": {"ttr": 15625, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x00\\x992/\\x16'\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "1999-11-18T16:27:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\narg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(9,9) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"BROWSE DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOE": {"ttr": 15627, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x00\\x992/\\x16'\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "1999-11-18T16:27:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\narg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(9,9) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"EDIT   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOR": {"ttr": 15629, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x11\\x7f\\x01\\x07\\x11\\x7f\\x11\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2007-04-27T11:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/**************************************************/\n/* NOTE:  Use of this EXEC requires the REVIEW    */\n/*        command from CBT file 134 or 135.       */\n/**************************************************/\n/* REVIEW command output.  This has an advantage  */\n/* over TSOE/TSOB/TSOV in that it works under     */\n/* native TSO (TSO READY) without ISPF.           */\n/**************************************************/\n/* TRACE ?I */\narg TSOCMD\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(SYSALLDA) NEW TRACKS SPACE(9,9) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress TSO     \"REVIEW       \"||ddnm||\"    FILE\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOV": {"ttr": 15631, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x11\\x7f\\x01\\x07\\x11\\x7f\\x11\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2007-04-27T11:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/****************************************************/\n/* There is really no advantage to using TSOV over  */\n/* TSOE since a temporary data set is used, but     */\n/* to complete the TSO* set of EXECs - here it is.  */\n/****************************************************/\n/* TRACE ?I */\narg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(9,9) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"VIEW   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSVT8": {"ttr": 15873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01>\\x002\\x01\\x11\"\\x9f\\x01 \\x14\\x7f\\x11\\x00\\x01)\\x01\\x19\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.62", "flags": 0, "createdate": "2011-08-17T00:00:00", "modifydate": "2020-05-26T11:00:32", "lines": 297, "newlines": 281, "modlines": 0, "user": "SBGOLOB"}, "text": "TSVT8    TITLE 'SWITCH ON/OFF 8-CHARACTER USERID SUPPORT z/OS 2.3'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   GENERAL 8-CHARACTER USERID SUPPORT IS CONTROLLED BY THE         *\n*    SWITCH IN THE TSVT (TSO VECTOR TABLE) PLUS BYTE +6.            *\n*                                                                   *\n*   THIS PROGRAM IS IN THE PUBLIC DOMAIN.                           *\n*                                                                   *\n*   This support was first deployed in z/OS 2.3.                    *\n*                                                                   *\n*   IN PREVIOUS SYSTEMS, THIS BYTE WAS X'00'  (Reserved)            *\n*   IN CURRENT SYSTEMS, IF THE BYTE IS X'07' THEN 8-CHAR USERID     *\n*     SUPPORT IS OFF.                                               *\n*   IN CURRENT SYSTEMS, IF THE BYTE IS X'08' THEN 8-CHAR USERID     *\n*     SUPPORT IS ON.                                                *\n*                                                                   *\n*   EVIDENTLY, TPVT+X'4D' WAS ALTERED FROM A RESERVED BYTE TO       *\n*     HAVE TO BE IN SYNC WITH TSVT+6.  CHANGES HAVE BEEN MADE       *\n*     TO THIS PROGRAM TO ALTER BOTH OF THEM AT THE SAME TIME.       *\n*     IT SEEMS THAT TSVT+6 IS THE MAIN SWITCH.  IF TPVT+4D          *\n*     IS DIFFERENT, IT DOESN'T SEEM TO TURN OFF OR ON SUPPORT.      *\n*     (8-CHARACTER USERID SUPPORT IN Z/OS 2.3 AND HIGHER.)          *\n*                                                                   *\n*   The TSO developer told me the following:                        *\n*                                                                   *\n*   \"The two values should be in sync.  The TPVT denotes the        *\n*   current parmlib setting in place, and the TSVT is the           *\n*   current system setting.  The TSVT is also used in synching      *\n*   multiple systems in a Plex.\"                                    *\n*                                                                   *\n*   He also told me the following information, regarding z/OS 2.4.  *\n*                                                                   *\n*   \"The processing has not changed between releases.  There is     *\n*   no switch that activates this support.  The byte you are        *\n*   referring to denotes the maximum length of a userid allowed     *\n*   to be specified at LOGON (or when using the TSO parse macros    *\n*   that support 8 character IDs).  This allows a user who is       *\n*   currently logged on as an 8 character user to still process     *\n*   correctly if the maximum is downgraded during their session.\"   *\n*                                                                   *\n*   THIS PROGRAM FLIPS THE SWITCH TO ANY OF THESE VALUES.           *\n*                                                                   *\n*   SYNTAX:     TSVT8 0      SETS THE SWITCH TO X'00'               *\n*               TSVT8 7      SETS THE SWITCH TO X'07'               *\n*               TSVT8 8      SETS THE SWITCH TO X'08'               *\n*                                                                   *\n*   PURPOSE:    TO TURN 8-CHARACTER USERID SUPPORT ON OR OFF        *\n*               FOR TESTING PURPOSES.                               *\n*                                                                   *\n*   ATTRIBUTES:    NON-REENTRANT                                    *\n*                  APF-AUTHORIZED                                   *\n*                                                                   *\n*   CHANGES:                                                        *\n*      V1.1  - 07/20/2017 - Display the address of the switch byte  *\n*                 which is the TSVT + X'6'.                         *\n*      V2.0  - 12/13/2018 - Keep the TPVT+X'4D' byte in sync  TPVT-1*\n*                 with the TSVT + X'6' byte.                  TPVT-1*\n*                 Report status of both bytes.                TPVT-1*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  -----------------------------------------------------------------  *\n*                  MACRO TO DISPLAY HEX VALUES                        *\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n         YREGS\nTSVT8    CSECT\nTSVT8    AMODE 31\nTSVT8    RMODE 24\n         USING TSVT8,R15           (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nEYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.\nEYEC     DC    C' TSVT8 - &SYSDATE - &SYSTIME -'\n         DC    C'  VERSION  2.0  '                               TPVT-1\n         DC    CL16' Public Domain '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         USING TSVT8,R12           (TELL ASSEMBLER).\n         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.\n         MVC   SAVE,SAVEACON       PRE-CLEAR SAVE AREA\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\n*\nINITCON  DS    0H                  CLEAR FLAGS INITIALLY\n         MVI   FLAG1,X'00'         CLEAR FLAG\n         XC    TSVTNEW,TSVTNEW     CLEAR\n         XC    TPVTNEW,TPVTNEW     CLEAR                         TPVT-1\n         XC    TSVTPL6,TSVTPL6     CLEAR\n         XC    TPVTPL4D,TPVTPL4D   CLEAR                         TPVT-1\n         MVI   OUTPUT-1,X'40'      CLEAR\n         MVC   OUTPUT,OUTPUT-1      OUTPUT LINE\n*\nTESTPARM DS    0H\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(R2)            LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    FINDDATA            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     DS    0H\n* --- PARMS GOTTEN AT THIS POINT.  NOW WE ARE FLIPPING THE SWITCH --- *\n*\nPRTTITL  DS    0H                  PRINT PROGRAM TITLE\n         STM   R14,R1,SAVE14T1\n         TPUT  TITLINE,L'TITLINE\n         TPUT  TITDASH,L'TITDASH\n         LM    R14,R1,SAVE14T1\n*\nSETFLAGS DS    0H\n         XC    FLAG1,FLAG1         INITIALIZE FLAG INDICATOR\nOLDPRM0  CLI   0(R2),C'0'          IS THE PARM C'0' ?\n         BNE   NEWBUT7             NO. GO ON\n         OI    FLAG1,FLAG0OLD      INDICATE WE WANT X'00'\n         B     FINDDATA\nNEWBUT7  CLI   0(R2),C'7'          IS THE PARM C'7' ?\n         BNE   NEWAND8             NO. GO ON\n         OI    FLAG1,FLAG7NEW      INDICATE WE WANT X'07'\n         B     FINDDATA\nNEWAND8  CLI   0(R2),C'8'          IS THE PARM C'8' ?\n         BNE   FINDDATA            NO. GO ON\n         OI    FLAG1,FLAG8NEW      INDICATE WE WANT X'08'\n         B     FINDDATA\n* --- FLAG CHOSEN, GET THE TSVT. ------------------------------------ *\n         USING CVTMAP,R5\nFINDDATA L     R5,CVTPTR           POINT TO THE CVT.\n         L     R5,CVTTVT           POINT TO TSVT.\n         ST    R5,SAVETSVT         SAVE ADDRESS OF TSVT\n         L     R6,X'4C'(,R5)       GET TPVT                      TPVT-1\n         ST    R6,SAVETPVT         SAVE ADDRESS OF TPVT          TPVT-1\n         A     R6,=F'77'           NEW LOCATION AT X'4D' OF TPVT TPVT-1\n         MVC   TPVTPL4D(1),0(R6)   STORE CURRENT SETTING         TPVT-1\n         ST    R6,DISPTP4D         STORE FOR DISPLAY AND REUSE   TPVT-1\n         XR    R6,R6               CLEAR REG TO REUSE IT         TPVT-1\n         LR    R6,R5               Get TSVT + 6 for display\n         A     R6,=F'6'            Add the 6 bytes\n         ST    R6,DISPADDR         Store for display\n         MVC   OUTPUT,OUTPUT-1     Clear output line.\n         MVC   OUTPUT(20),=C'Address of TSVT+6:  '   Move text.\n         HEX   OUTPUT+20,4,DISPADDR                  Address.\n         TPUT  OUTPUT,60\n         MVC   OUTPUT,OUTPUT-1     Clear output line.            TPVT-1\n         MVC   OUTPUT(20),=C'Address of TPVT+4D: '   Move text.  TPVT-1\n         HEX   OUTPUT+20,4,DISPTP4D                  Address.    TPVT-1\n         TPUT  OUTPUT,60                                         TPVT-1\n         MVC   TSVTPL6(1),6(R5)    STORE CURRENT SWITCH SETTING\n         DROP  R5\n* ------------------------------------------------------------------- *\n*                                  Show previous status of byte.\n         STM   R14,R1,SAVE14T1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.\n         MVC   OUTPUT(30),=C'Previous TSVT+6 setting was:  '\n         HEX   OUTPUT+32,1,6(R5)   Print original byte setting.\n*        HEX   OUTPUT+40,1,TSVTPL6   Print original byte setting.\n         TPUT  OUTPUT,45\n         L     R6,DISPTP4D                                       TPVT-1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.            TPVT-1\n         MVC   OUTPUT(30),=C'Previous TPVT+4D setting was: '     TPVT-1\n         HEX   OUTPUT+32,1,0(R6)   Print original byte setting.  TPVT-1\n*        HEX   OUTPUT+40,1,TPVTPL4D  Print original byte setting.TPVT-1\n         TPUT  OUTPUT,45                                         TPVT-1\n         LM    R14,R1,SAVE14T1\n* --- HOW ARE WE SETTING THE SWITCH? -------------------------------- *\nON       DS    0H                  Invalid parm entered.\n         CLI   FLAG1,X'00'         Didn't change the flag?\n         BE    NOCHANGE            Then show no change and get out.\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >                             We're authorized. Go Key 0.\n         MODESET KEY=ZERO\nSETOLDWY DS    0H\n         MVI   6(R5),X'00'         Initially clear the switch byte.\n         MVI   0(R6),X'00'                                       TPVT-1\n         TM    FLAG1,FLAG0OLD      Are we resetting it to X'00'?\n         BNO   SETNEW7             No. Try next parm.\n         MVI   6(R5),X'00'         Move X'00' to the switch byte.\n         MVI   TSVTNEW,X'00'       Save the new setting.\n         MVI   0(R6),X'00'                                       TPVT-1\n         MVI   TPVTNEW,X'00'       Save the new setting.         TPVT-1\n         B     ENDMOD              Go problem state.\nSETNEW7  TM    FLAG1,FLAG7NEW      Do we want to set X'07'?\n         BNO   SETNEW8             No. Try next parm.\n         OI    6(R5),X'07'         Yes. Move X'07' to switch byte.\n         MVI   TSVTNEW,X'07'       Save the new setting.\n         OI    0(R6),X'07'         Yes. Move X'07' to switch.    TPVT-1\n         MVI   TPVTNEW,X'07'       Save the new setting.         TPVT-1\n         B     ENDMOD              Go problem state.\nSETNEW8  TM    FLAG1,FLAG8NEW      Do we want to set X'08'?\n         BNO   ENDMOD              No. Not resetting at all.\n         OI    6(R5),X'08'         Set switch byte to X'08'.\n         MVI   TSVTNEW,X'08'       Save the new setting.\n         OI    0(R6),X'08'         Set switch byte to X'08'.     TPVT-1\n         MVI   TPVTNEW,X'08'       Save the new setting.         TPVT-1\n         B     ENDMOD              Problem state.\nENDMOD   DS    0H\n         MODESET KEY=NZERO\n         MVI   0(R2),X'00'         Make sure this parm address is\n         MVI   1(R2),X'00'           clean for next use.\nNEWTSVT  DS    0H                  Print new status of switch byte.\n         STM   R14,R1,SAVE14T1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.\n         MVC   OUTPUT(30),=C'Changed  TSVT+6 setting is :  '\n         HEX   OUTPUT+32,1,6(R5)   Print changed byte setting.\n*        HEX   OUTPUT+40,1,TSVTNEW Print changed byte setting.\n         TPUT  OUTPUT,45\n*                                                                TPVT-1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.            TPVT-1\n         MVC   OUTPUT(30),=C'Changed  TPVT+4D setting is:  '     TPVT-1\n         HEX   OUTPUT+32,1,0(R6)   Print changed byte setting.   TPVT-1\n*        HEX   OUTPUT+40,1,TPVTNEW Print changed byte setting.   TPVT-1\n         TPUT  OUTPUT,45                                         TPVT-1\n         LM    R14,R1,SAVE14T1\nRETURN0  SR    R15,R15             RC = 0\nRETURN   L     R13,SAVE+4          General return to caller.\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         LTORG\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                  Message that we are not authorized\n         TPUT  MSG00,L'MSG00\n         LA    R15,8               RC = 8\n         B     RETURN\n** ---------------------------------------------------------------- **\nNOCHANGE DS    0H                  Message that nothing changed.\n         TPUT  MSG01,L'MSG01\n         TPUT  MSG02,L'MSG02                                     TPVT-1\n         LA    R15,4               RC = 4\n         B     RETURN\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                           CONSTANTS                               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSAVEACON DC    16F'0'\nTITLINE  DC   C'TSVT8  TEST/ALTER 8-CHARACTER ID SUPPORT - V2.0' TPVT-1\nTITDASH  DC    C'-----  ---------- ----------- -- -------   ----'\nMSG00    DC    C'Program must be run APF-Authorized.'\nMSG01    DC    C'No changes have been made to TSVT+6 '           TPVT-1\nMSG02    DC    C'No changes have been made to TPVT+4D'           TPVT-1\nFLAG1    DC    X'00'\nFLAG0OLD EQU   B'10000000'             X'00'\nFLAG7NEW EQU   B'01000000'             X'07'\nFLAG8NEW EQU   B'00100000'             X'08'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                           VARIABLES                               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSAVE     DS    9D\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVETSVT DS    F\nSAVETPVT DS    F                                                 TPVT-1\nDISPADDR DS    F\nDISPTP4D DS    F                                                 TPVT-1\nTSVTPL6  DS    X                   PREVIOUS SETTING              TPVT-1\nTPVTPL4D DS    X                   PREVIOUS SETTING              TPVT-1\nTSVTNEW  DS    X\nTPVTNEW  DS    X                                                 TPVT-1\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\n         DC    C' '                Blank before OUTPUT line.\nOUTPUT   DC    CL80'  '            Variable output line.\nSAVELEN  EQU   *-SAVE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           MAP THE CVT.\n         END   TSVT8\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSVT8$": {"ttr": 15879, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00R\\x01\\x00\\x04\\x8f\\x01 \\x14\\x7f\\x10R\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2020-05-26T10:52:52", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE731(TSVT8)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,NORENT,NOREUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n SETSSI  CB500731\n NAME    TSVT8(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSVT8O": {"ttr": 15881, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x019\\x00\\x12\\x01\\x11\"\\x9f\\x01\\x17 \\x1f\\x14G\\x00\\xea\\x01\\x19\\x00\\x00\\xf8\\xc3\\xc8`\\xe2\\xe4\\xd7@@@'", "ispf": {"version": "01.57", "flags": 0, "createdate": "2011-08-17T00:00:00", "modifydate": "2017-07-20T14:47:12", "lines": 234, "newlines": 281, "modlines": 0, "user": "8CH-SUP"}, "text": "TSVT8    TITLE 'SWITCH ON/OFF 8-CHARACTER USERID SUPPORT z/OS 2.3'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   GENERAL 8-CHARACTER USERID SUPPORT IS CONTROLLED BY THE         *\n*    SWITCH IN THE TSVT (TSO VECTOR TABLE) PLUS BYTE +6.            *\n*                                                                   *\n*   THIS PROGRAM IS IN THE PUBLIC DOMAIN.                           *\n*                                                                   *\n*   This support was first deployed in z/OS 2.3.                    *\n*                                                                   *\n*   IN PREVIOUS SYSTEMS, THIS BYTE WAS X'00'  (Reserved)            *\n*   IN CURRENT SYSTEMS, IF THE BYTE IS X'07' THEN 8-CHAR USERID     *\n*     SUPPORT IS OFF.                                               *\n*   IN CURRENT SYSTEMS, IF THE BYTE IS X'08' THEN 8-CHAR USERID     *\n*     SUPPORT IS ON.                                                *\n*                                                                   *\n*   THIS PROGRAM FLIPS THE SWITCH TO ANY OF THESE VALUES.           *\n*                                                                   *\n*   SYNTAX:     TSVT8 0      SETS THE SWITCH TO X'00'               *\n*               TSVT8 7      SETS THE SWITCH TO X'07'               *\n*               TSVT8 8      SETS THE SWITCH TO X'08'               *\n*                                                                   *\n*   PURPOSE:    TO TURN 8-CHARACTER USERID SUPPORT ON OR OFF        *\n*               FOR TESTING PURPOSES.                               *\n*                                                                   *\n*   ATTRIBUTES:    NON-REENTRANT                                    *\n*                  APF-AUTHORIZED                                   *\n*                                                                   *\n*   CHANGES:                                                        *\n*      V1.1  - 07/20/2017 - Display the address of the switch byte  *\n*                 which is the TSVT + X'6'.                         *\n*                                                                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  -----------------------------------------------------------------  *\n*                  MACRO TO DISPLAY HEX VALUES                        *\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n         YREGS\nTSVT8    CSECT\nTSVT8    AMODE 31\nTSVT8    RMODE 24\n         USING TSVT8,R15           (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nEYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.\nEYEC     DC    C' TSVT8 - &SYSDATE - &SYSTIME -'\n         DC    C'  VERSION  1.1  '\n         DC    CL16' Public Domain '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         USING TSVT8,R12           (TELL ASSEMBLER).\n         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.\n         MVC   SAVE,SAVEACON       PRE-CLEAR SAVE AREA\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\n*\nINITCON  DS    0H                  CLEAR FLAGS INITIALLY\n         MVI   FLAG1,X'00'         CLEAR FLAG\n         XC    TSVTNEW,TSVTNEW     CLEAR\n         XC    TSVTPL6,TSVTPL6     CLEAR\n         MVI   OUTPUT-1,X'40'      CLEAR\n         MVC   OUTPUT,OUTPUT-1      OUTPUT LINE\n*\nTESTPARM DS    0H\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(R2)            LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    FINDDATA            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     DS    0H\n* --- PARMS GOTTEN AT THIS POINT.  NOW WE ARE FLIPPING THE SWITCH --- *\n*\nPRTTITL  DS    0H                  PRINT PROGRAM TITLE\n         STM   R14,R1,SAVE14T1\n         TPUT  TITLINE,L'TITLINE\n         TPUT  TITDASH,L'TITDASH\n         LM    R14,R1,SAVE14T1\n*\nSETFLAGS DS    0H\n         XC    FLAG1,FLAG1         INITIALIZE FLAG INDICATOR\nOLDPRM0  CLI   0(R2),C'0'          IS THE PARM C'0' ?\n         BNE   NEWBUT7             NO. GO ON\n         OI    FLAG1,FLAG0OLD      INDICATE WE WANT X'00'\n         B     FINDDATA\nNEWBUT7  CLI   0(R2),C'7'          IS THE PARM C'7' ?\n         BNE   NEWAND8             NO. GO ON\n         OI    FLAG1,FLAG7NEW      INDICATE WE WANT X'07'\n         B     FINDDATA\nNEWAND8  CLI   0(R2),C'8'          IS THE PARM C'8' ?\n         BNE   FINDDATA            NO. GO ON\n         OI    FLAG1,FLAG8NEW      INDICATE WE WANT X'08'\n         B     FINDDATA\n* --- FLAG CHOSEN, GET THE TSVT. ------------------------------------ *\n         USING CVTMAP,R5\nFINDDATA L     R5,CVTPTR           POINT TO THE CVT.\n         L     R5,CVTTVT           POINT TO TSVT.\n         ST    R5,SAVETSVT         SAVE ADDRESS OF TSVT\n         LR    R6,R5               Get TSVT + 6 for display\n         A     R6,=F'6'            Add the 6 bytes\n         ST    R6,DISPADDR         Store for display\n         MVC   OUTPUT,OUTPUT-1     Clear output line.\n         MVC   OUTPUT(20),=C'Address of TSVT+6:  '   Move text.\n         HEX   OUTPUT+20,4,DISPADDR                  Address.\n         TPUT  OUTPUT,60\n         MVC   TSVTPL6(1),6(R5)    STORE CURRENT SWITCH SETTING\n         DROP  R5\n* ------------------------------------------------------------------- *\n*                                  Show previous status of byte.\n         STM   R14,R1,SAVE14T1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.\n         MVC   OUTPUT(30),=C'Previous TSVT+6 setting was:  '\n         HEX   OUTPUT+32,1,6(R5)   Print original byte setting.\n*        HEX   OUTPUT+40,1,TSVTPL6   Print original byte setting.\n         TPUT  OUTPUT,45\n         LM    R14,R1,SAVE14T1\n* --- HOW ARE WE SETTING THE SWITCH? -------------------------------- *\nON       DS    0H                  Invalid parm entered.\n         CLI   FLAG1,X'00'         Didn't change the flag?\n         BE    NOCHANGE            Then show no change and get out.\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >                             We're authorized. Go Key 0.\n         MODESET KEY=ZERO\nSETOLDWY DS    0H\n         MVI   6(R5),X'00'         Initially clear the switch byte.\n         TM    FLAG1,FLAG0OLD      Are we resetting it to X'00'?\n         BNO   SETNEW7             No. Try next parm.\n         MVI   6(R5),X'00'         Move X'00' to the switch byte.\n         MVI   TSVTNEW,X'00'       Save the new setting.\n         B     ENDMOD              Go problem state.\nSETNEW7  TM    FLAG1,FLAG7NEW      Do we want to set X'07'?\n         BNO   SETNEW8             No. Try next parm.\n         OI    6(R5),X'07'         Yes. Move X'07' to switch byte.\n         MVI   TSVTNEW,X'07'       Save the new setting.\n         B     ENDMOD              Go problem state.\nSETNEW8  TM    FLAG1,FLAG8NEW      Do we want to set X'08'?\n         BNO   ENDMOD              No. Not resetting at all.\n         OI    6(R5),X'08'         Set switch byte to X'08'.\n         MVI   TSVTNEW,X'08'       Save the new setting.\n         B     ENDMOD              Problem state.\nENDMOD   DS    0H\n         MODESET KEY=NZERO\n         MVI   0(R2),X'00'         Make sure this parm address is\n         MVI   1(R2),X'00'           clean for next use.\nNEWTSVT  DS    0H                  Print new status of switch byte.\n         STM   R14,R1,SAVE14T1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.\n         MVC   OUTPUT(30),=C'Changed  TSVT+6 setting is :  '\n         HEX   OUTPUT+32,1,6(R5)   Print changed byte setting.\n*        HEX   OUTPUT+40,1,TSVTNEW Print changed byte setting.\n         TPUT  OUTPUT,45\n         LM    R14,R1,SAVE14T1\nRETURN0  SR    R15,R15             RC = 0\nRETURN   L     R13,SAVE+4          General return to caller.\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         LTORG\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                  Message that we are not authorized\n         TPUT  MSG00,L'MSG00\n         LA    R15,8               RC = 8\n         B     RETURN\n** ---------------------------------------------------------------- **\nNOCHANGE DS    0H                  Message that nothing changed.\n         TPUT  MSG01,L'MSG01\n         LA    R15,4               RC = 4\n         B     RETURN\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                           CONSTANTS                               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSAVEACON DC    16F'0'\nTITLINE  DC    C'TSVT8  TEST/ALTER 8-CHARACTER ID SUPPORT - V1.1'\nTITDASH  DC    C'-----  ---------- ----------- -- -------   ----'\nMSG00    DC    C'Program must be run APF-Authorized.'\nMSG01    DC    C'No changes have been made to TSVT+6'\nFLAG1    DC    X'00'\nFLAG0OLD EQU   B'10000000'             X'00'\nFLAG7NEW EQU   B'01000000'             X'07'\nFLAG8NEW EQU   B'00100000'             X'08'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                           VARIABLES                               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSAVE     DS    9D\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVETSVT DS    F\nDISPADDR DS    F\nTSVTPL6  DS    X\nTSVTNEW  DS    X\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\n         DC    C' '                Blank before OUTPUT line.\nOUTPUT   DC    CL80'  '            Variable output line.\nSAVELEN  EQU   *-SAVE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           MAP THE CVT.\n         END   TSVT8\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCBDASD": {"ttr": 16129, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x08\\x01\\x17\\x02\\x7f\\x01\\x185O\\x12U\\x03\\xcc\\x03\\xc4\\x00\\x00\\xc8\\xc1\\xe2`\\xe2\\xd4\\xe2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2017-01-27T00:00:00", "modifydate": "2018-12-20T12:55:08", "lines": 972, "newlines": 964, "modlines": 0, "user": "HAS-SMS"}, "text": "UCBDASD  TITLE 'UCBDASD - DISPLAY ONLINE DASD VOLUMES USING ULUT'\n********************************************************************\n*        'UCBDASD - DISPLAY ONLINE DASD USING UCB LOOKUP TABLE     *\n********************************************************************\n* Update Activity:\n* ----------------\n* 01-29-17 geop - Added code to detect if a pack is SMS managed.\n*\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   November 7, 2012.\n*\n*        DATE UPDATED.   December 18, 2014  by John Hamlet and\n*                                              Sam Golob\n*\n*                        January 19, 2015   remove z/OS level\n*                                           dependency\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        DESCRIPTION.\n*\n*            This TSO command is a quick and dirty display of\n*            online DASD.  The unique thing about it, is that\n*            it does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed twice, using this method to look up UCB's\n*            is not recommended by IBM.  But if you keep up\n*            with the changes, you can keep this program\n*            working.  The ULUT tells you which version it is.\n*            Currently, they are called Type 1, or Type 2, or\n*            Type 3.  Type 2 started with z/OS 1.7.  Type 3\n*            started with z/OS 2.2, and was moved into 64-bit\n*            storage.  Therefore the Type 3 ULUT has to be\n*            accessed in 64-bit mode.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            UCBDASD        (no parameters currently supported)\n*\n*            This program will display all online DASD.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write a program\n*            that uses it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    ESA 5.2.2 thru z/OS 2.2 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/09 - V1.1 - Display DCE-related information:\n*                      number of cylinders, device type, etc.\n*                      Use IOSDCXR macro to obtain the real DCE.\n*\n*        2012/11/11 - V1.2 - Cosmetic changes.\n*\n*        2012/11/13 - V1.3 - Didn't correctly find the end of the\n*                            ULUT table before.  Now BCT through\n*                            the count of total entries.\n*\n*        2012/11/14 - V1.4 - Andreas Freybier's modifications for\n*                            EAV (Extended Access Volumes) with\n*                            more than 65535 cylinders.\n*\n*        2014/12/18 - V1.5 - z/OS 2.2 modifications for ULUT\n*                            version 3 which is in 64-bit storage.\n*\n*        2015/01/19 - V1.5 - PTF UY90741,0,2 retrofits the ULUT\n*                            version 3 to z/OS 2.1 and 1.13.  Code\n*                            modified not to check for z/OS level.\n*                            Criterion is IOVT+8 having fullword 0,\n*                            then IOVT+1B8 contains 64-bit ULUT\n*                            address, and ULUT is dealt with in\n*                            64-bit mode.  Otherwise ULUT is 31-bit.\n*\n*        2018/12/18 - V1.6 - (from George Pavlik) Add check if the\n*                            DASD volume is SMS-managed.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDIOVT\nIOVT     DSECT                         IOS Vector Table          ESA41\n         DS    C'IOVT'\n         DS    H'476'                  Length of IOVT            RS1106\n         DS    XL2\nIOVTUL31 DS    V(ULUT)                 UCB LOOK-UP TABLE\n         DS    3F\nIOVTCDA  DS    V(CDA)                  Config Data Area\n         DS    1F                      ???\n         DS    A                       IASC ??\n         DS    A                       IOS PIN QUEUE HEADERS\n         DS    A                       IOS PIN QUEUE ELEMENTS\n         DS    1F                      ???\n         DS    A                       TQE\n         DS    6F                      ???\n         DS    A                       CSC\n         DS    1F                      ???\n         DS    A                       IOS 31 BIT DST ENTRIES\n         DS    A                       IOS 24 BIT DST ENTRIES\n         DS    1F                      ???\n         DS    A                       IOS UCB SERVICES PC RTN\n         DS    A                       IODE\n         DS    3F                      ???\n         DS    A                       IOS HASH\n         DS    A                       IOS UCB HASH COLISIONS\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    4F                      ???\n         DS    A                       CAPT\n         DS    2F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       IOS CAPTURE UCB SERVICE\n         DS    A                       TRCB\n         DS    2F                      ???\n         DS    1F                      ???\n         DS    A                       MGFQ\n         DS    A                       CMVT\n         DS    A                       CPCT\n         DS    1F                      ???\n         DS    1F                      ???\n         DS    A                       IXSD\n         DS    CL8'SYSIOS01'\n         DS    6F                      ???\n         DS    A                       QDIO\n         DS    1F                      ???\n         DS    A                       SAUT\n         DS    4F                      ???\n         DS    A                       IOS PURGE WORK AREAS\nIOVTFLG1 DS    X                       IOVT-Flag\nIOVTMIDAW EQU   X'08'                  MIDAW ON?\n         DS    XL3                     ???\n         DS    A                       CCAP\n         ORG   IOVT+440                0x1B8                     JH1214\nIOVTULUT DS    D                       UCB V3 look-up table      JH1214\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDULU3\nULU3     DSECT                         UCB Look-up Table\n         DS    C'ULUT'\nULU3VERS DS    X                       version 3                 JH1214\n         DS    AL1                     Subpool\n         DS    XL2                     <filler>\n         DS    F                       <filler>\n         DS    F                       <filler>\nULU31ST  DS    D                       FIRST LOOK-UP ENTRY (V3)\n         DS    XL2                     <filler>\n         DS    XL2                     <filler>\nULU3UCBC DS    F                       Total number of LOOK-UP Entries\nULU3TAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULU3COMM DS    F'032'                  number of COMM LOOK-UP Entries\nULU3DASD DS    F'256'                  number of DASD LOOK-UP Entries\nULU3DISP DS    F'128'                  number of DISP LOOK-UP Entries\nULU3UREC DS    F'032'                  number of UREC LOOK-UP Entries\nULU3CHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULU3CTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULU3+264\nUL3ENTRY DSECT                         UCB LOOK-UP ENTRY\nUL3EDEVN DS    X'000D'                 DEVICE NUMBER\nUL3EFLGS DS    X'4000'                 Flags\nUL3EDYN   EQU  X'40'                   Dynamic UCB\nUL3ESEQN DS    XL2                     ?\n         DS    XL2                     ?\nUL3EUCBP DS    V(UCBOB)                UCB ADDRESS\nUL3ELEN  EQU   *-UL3ENTRY\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n* ------------------------------------------------------------------- *\nUCBDASD  CSECT\nUCBDASD  RMODE ANY\nUCBDASD  AMODE 31\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'UCBDASD'\n         DC    CL6' V1.6 '\n         DC    CL16'ULUT DASD LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base register.\n         LR    R11,R1                 Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area\n         XC    0(WORKLEN-200,R1),0(R1)   Clear work area (bigger one)\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         XC    OSLVLSW6,OSLVLSW6      Clear image of CVTOSLV6 from CVT.\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R2,16                  CVT\n         USING CVTMAP,R2\n         MVC   OSLVLSW6,CVTOSLV6      Copy relevant OS level switch\n         DROP  R2\n         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM\n         L     R3,X'D0'(,R3)          IOS Vector Table\n         ST    R6,SAVER6A\n         L     R6,8(,R3)              Check address at IOVT+X'8'\n         LTR   R6,R6                  If zero, then 64-bit\n         BNZ   GETULUN2               Not zero, then 31-bit\n         B     GETULUY2               Zero, then use 64-bit address\nGETULUY2 DS    0H                     64-bit mode code. Type >2.\n         OI    OSLVLSW6,X'40'         Show z/OS 2.2 or UA90741,0,2\n         LLGTR R3,R3                  Clear 64-bit hi-area\n         LLGTR R4,R4\n         LLGTR R9,R9                  <<<< ADDED >>>>\n         LLGTR R10,R10                <<<< ADDED >>>>\n         LLGTR R12,R12                <<<< ADDED >>>>\n         LG    R4,X'1B8'(,R3)         Pick up ULUT V3 address\n         SAM64\n         LGR   R3,R4                  Reload R3 with ULUT address\n         B     GETULUN3\nGETULUN2 DS    0H                     31-bit mode code. Type <=2.\n*        L     R3,X'D0'(,R3)          IOVT\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Point both regs to ULUT\nGETULUN3 DS    0H\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out. Code 12.\n* ------------------------------------------------------------------ *\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n         TM    OSLVLSW6,X'40'         Are we using 64-bit ULUT address?\n         BNO   GETULEX2               ULUT Type 2 or less, 31-bit mode.\n         SAM64                        Need 64-bit mode for compare.\n         CLI   4(R3),X'03'            After z/OS 2.2 ?  (ULUT Type 3?)\n         BE    ULUTTYP3               Go to beginning of table entries.\n         SAM31                        Back to 31-bit mode.\nGETULEX2 DS    0H\n* ----------------------------------- Insert test for future types here\n         B     EXIT                   Neither?  Get out. Code 12.\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     This practice appears to be relatively harmless if we only     *\n*     DISPLAY the UCB and don't try to modify it.  Also, during a    *\n*     configuration change, you might get a S0C4 from these          *\n*     programs, but they will run fine a minute later.  They are     *\n*     primarily for display only.                                    *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 2.2.  So it is really quite stable, so far,      *\n*      as long as we code for all the current ULUT types.            *\n*                                                                    *\n*     Summary:                                                       *\n*                                                                    *\n*     The ULUT table has been changed by IBM, thus far:              *\n*      Type 1:  ESA 4.x  thru z/OS 1.7                               *\n*      Type 2:  z/OS 1.7 thru z/OS 2.1                               *\n*      Type 3:  z/OS 2.2 ....    (table is now in 64-bit storage)    *\n*               z/OS 2.1  with UA90741 applied                       *\n*               z/OS 1.13 HBB7780 with UA90740 applied               *\n*               z/OS 1.13 JBB778H with UA90742 and UA90740 applied   *\n*                                                                    *\n*     At the ULUT V.3 level the ULUT (UCB Lookup Table) has been     *\n*      moved into 64-bit storage, so even to get to the beginning    *\n*      of the table, in order to find out the table type, is now     *\n*      different, but not too difficult.  In the (OCO) macro         *\n*      IOSDIOVT, there are two pointer locations to the ULUT.        *\n*      IOVT+8 is a fullword pointer.  IOVT+X'1B8' is a doubleword    *\n*      pointer.  If IOVT+8 for a fullword, is zeroes, then this      *\n*      shows that IOVT+X'1B8' is the valid pointer, it points to     *\n*      a doubleword address, and you have to address the ULUT        *\n*      in 64-bit mode.                                               *\n*                                                                    *\n*     One test is run.  If IOVT+8 for a fullword is zeroes, then     *\n*      IOVT+X'1B8' is assumed to be valid, and flag OSLVLSW6, which  *\n*      had previously been copied from CVTOSLV6 in the CVT, is       *\n*      OR'ed to X'40', which would normally indicate the presence    *\n*      of z/OS 2.2.  This indicates to the program that the ULUT     *\n*      is in 64-bit mode, even at lower levels, with the application *\n*      of PTFs UA90741, or UA90740 possibly with UA90742.            *\n*                                                                    *\n* ------------------------------------------------------------------ *\nULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP3 LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.\n         L     R4,X'1C'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\n* ------------------------------------------------------------------- *\nLOOPSET  DS    0H              Set up loop thru all UCB's.\n         TM    OSLVLSW6,X'40'  Are we using 64-bit ULUT address?\n         BNO   LOOPUCB                No.\n         LLGTR R5,R5           Clear 64-bit hi-area\n* --------------------------- Insert displacement for future types.  *\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------- *\n*    Main part of code. Go through all the UCB's and extract info.    *\n* ------------------------------------------------------------------- *\nLOOPUCB  DS    0H            Loop thru table entries, covering\n*                             all of the defined UCBs.\n*                            Do this for the number of table entries.\n         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         TM    OSLVLSW6,X'40'         Are we using 64-bit ULUT address?\n         BNO   NSAM64                 No.\n         SAM64\nNSAM64   DS    0H\n         L     R5,8(,R3)              Get address of this unit's UCB.\n         TM    OSLVLSW6,X'40'         64-bit ULUT address?\n         BNO   NSAM31B                No.\n         SAM31                        For z/OS 2.2 and above, SAM31.\nNSAM31B  DS    0H\n         ST    R5,UCBADDRS            Save the address for reporting.\n         USING UCBOB,R5               Addressability to UCB.\n         TM    UCBTBYT3,UCB3DACC      Is this UCB for DASD?\n         BNO   LOOPJUMP               No. Look for the next one.\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n*   - - - - - - - - - - - - - - - -   Get output line ready for display\n         MVI   LINE-1,X'40'           Clear the output line.\n         MVC   LINE,LINE-1            Start moving stuff in.\n*   - - - - - - - - - - - - - - - -\n*   - - - - - - - - - - - - - - - -   Begin --------------------------\n*   - - - - - - - - - - - - - - - -   01-24-17 HCHC GEOP added for SMS\n         TM     UCBFL5,UCBSMS         Is the VOL SMS managed?\n         BNO    NONSMS                No, Skip keyword\n         MVC    LINE+73(3),=CL3'YES'  Yes, Say it is SMS managed\n         B      SKIPNSMS              Branch around ..\nNONSMS   MVC    LINE+73(3),=CL3' '    No, put blanks\n*   - - - - - - - - - - - - - - - -   End   --------------------------\n*   - - - - - - - - - - - - - - - -\nSKIPNSMS HEX   LINE+1,2,4(R5)         Move unit address to display.\n         MVC   LINE+7(6),X'1C'(R5)    Move VOLSER to display.\n         MVC   SAVEDEVT(4),X'10'(R5)  Move device type values in.\n         TM    SAVEDEVT+3,X'0E'       Is this disk a 3380?\n         BO    TRY3390                At least that. Test further.\n         HEX   LINE+15,4,SAVEDEVT     No. Just dump the raw value in.\n*                                     Example:  3030200F  for 3390\n*                                               3030200E  for 3380\nTRY3390  DS    0H\n         TM    SAVEDEVT+3,X'01'       Is it a 3390?\n         BZ    IS3380                 No. It's a 3380.\nIS3390   DS    0H\n         MVC   LINE+15(8),=C'3390    '  Say it's a 3390.\n         B     AFTRTYPE                 And go on.\nIS3380   DS    0H\n         MVC   LINE+15(8),=C'3380    '  Say it's a 3380.\nAFTRTYPE DS    0H                       And go on.\n*   - - - - - - - - - - - - - > > >   Private?  Public?  Storage?\n         TM    X'22'(R5),X'10'        Is the disk mounted PRIVATE?\n         BZ    NOTPRIV                No.\n         MVC   LINE+32(4),=C'PRIV'    Yes. Say so.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the disk mounted PUBLIC?\n         BZ    NOTPUBL                No.\n         MVC   LINE+32(4),=C'PUBL'    Yes. Say so.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the disk mounted STORAGE?\n         BZ    ENDDEVTP               No.\n         MVC   LINE+32(4),=C'STOR'    Yes. Say so.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+39,4,UCBADDRS     Put the UCB address in display.\n*   - - - - - - - - - - - - - > > >   This unit's attributes ! ! !\n         TM    X'3'(R5),X'08'         Is the unit allocated?\n         BZ    NOTALLOC               No.\n         MVC   LINE+49(4),=C'ALLC'    Yes. Say so.\nNOTALLOC DS    0H\n         TM    X'3'(R5),X'04'         Unit permanently resident?\n         BZ    NOTPERM                No.\n         MVC   LINE+54(4),=C'PERM'    Yes. Say so.\nNOTPERM  DS    0H\n         TM    X'3'(R5),X'02'         Is this unit the SYSRES volume?\n         BZ    NOTSYSRS               No.\n         MVC   LINE+59(3),=C'RES'     Yes. Say so.\nNOTSYSRS DS    0H                     Put out display line for unit.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*          Get the DCE address. This will be the real one,          *\n*           because the UCB it came from, is a real UCB.            *\n*           See the documentation in the IOSDCXR macro.             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         STM   R14,R1,IOSDCSAV        Save necessary registers.\n         LR    R1,R5                  IOSDCXR needs UCB addr in R1.\n         IOSDCXR\n         ST    R1,DCEADDR             IOSDCXR returns DCE addr in R1.\n         LM    R14,R1,IOSDCSAV        Restore saved registers.\nLOOPSTRD DS    0H\n         ST    R7,SAVER7B             Save R7.\n         L     R7,DCEADDR             Get DCE address.\n         LA    R7,X'17'(,R7)          Bump to DCEOBRDT.\n         LA    R8,DEVTABLE            Load Device Table.\nLOOPLUPD DS    0H\n         CLI   0(R8),X'00'            End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R8),0(R7)          Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R8,3(,R8)              No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(2),1(R8)       Move in listed device size.\nLOOPENDD DS    0H\n         L     R7,SAVER7B             Restore R7\n         HEX   LINE+63,4,DCEADDR      Print DCE address in hex.\n*  NUMBER OF CYLINDERS   -   below\n         ST    R7,SAVER7C             Save R7 again.\n         ST    R8,SAVER8A             Save R8 too.\n         L     R7,DCEADDR             Load the stored DCE address.\n         XR    R8,R8                  Clear R8.\n         ICM   R8,B'0011',X'12'(R7)   Put in the complete low halfword.\n*                                     DCEUDCYL                      V14\n*debug*  HEX   LINE+80,2,X'12'(R7)    Move unit address to display. V14\n         CLM   R8,B'0011',=X'FFFE'    ? more than 65,520 cylinders  V14\n         BNE   SHOW_CYL               no, display this value        V14\n*                                                                   V14\n****     ICM   R8,B'1111',X'38'(R7)   get DCEHICY or                V14\n         ICM   R8,B'1111',X'34'(R7)   get DCEUDCY                   V14\n*                                                                   V14\nSHOW_CYL DS    0H                                                   V14\n         CVD   R8,CVDAREA             Convert to packed decimal.\n         MVC   CYLCNT,CVDAREA+4       Store for safekeeping.\n         MVC   LINE+21(9),MASK9       Move in mask.\n         ED    LINE+21(9),CVDAREA+4   Print the display number.\n         L     R8,SAVER8A             Restore saved R8.\n         L     R7,SAVER7C             Restore saved R7.\n*  NUMBER OF CYLINDERS   -   above\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                     Now put out the output info.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         APUT  LINE,90\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H                     For z/OS 2.2 and above, SAM64.\n         TM    OSLVLSW6,X'40'             64-bit ULUT?\n         BNO   NSAM31A                No.\n         SAM64\nNSAM31A  DS    0H\n         LA    R3,X'C'(,R3)           Go to next ULUT entry\n         BCT   R4,LOOPUCB             And loop until we've scanned\n*\n* ---- At end of ULUT, fall thru to here.\n*\n         TM    OSLVLSW6,X'40'         Do we have a 64-bit ULUT address?\n         BNO   NSAM31                 No.\n         SAM31                        For 64-bit, SAM31.\nNSAM31   DS    0H\n         B     EXIT0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  end of loop - go through all the UCBs until you're done.         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DROP  R5\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE             Load register with return code.\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         DROP  R9\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              UCBDASD - V1.6 - DISPLAY ONLINE DASD'\nMESSAGEU DC    C'              -------   ----   ------- ------ ----'\nMESSGSUB DC    C' Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attrx\n               ibs  Res DCE Addr  SMS'\nMESSGSUU DC    C' ----  ------  ------ --------  -----  --------   ----X\n               ---  --- --------  ---'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'0E',C'A '             DCEOBRDT      3380/3390\n         DC    X'1E',C'D '             DCEOBRDT      3380/3390\n         DC    X'21',C'J '             DCEOBRDT      3380/3390\n         DC    X'23',C'K '             DCEOBRDT      3380/3390\n         DC    X'2E',C'E '             DCEOBRDT      3380/3390\n         DC    X'26',C'-1'             DCEOBRDT      3380/3390\n         DC    X'27',C'-2'             DCEOBRDT      3380/3390\n         DC    X'24',C'-3'             DCEOBRDT      3380/3390\n         DC    X'32',C'-9'             DCEOBRDT      3380/3390\n         DC    X'3E',C'-A'             DCEOBRDT      3380/3390\n         DC    AL1(00),H'0'            End of table\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nUCBADDRS DS    F                      Copy UCB address here for display\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER6A  DS    F                      Save R6\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER8A  DS    F                      Save R8\nSAVEDEVT DS    F                      Copy raw UCB device type value\nTOTCOUNT DS    F                      Total number of ULUT entries\nTESTCNT  DS    F                      Test this number as they decrease\nCYLCNT   DS    PL4                    Saved cyliner count (not used)\nOSLVLSW6 DS    X                      z/OS 2.2 or above?\nHBB77A0  EQU   OSLVLSW6,64            X'40'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         IECDIOCM\n         IOSDIOVT\n         IOSDULU3\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCBDASD$": {"ttr": 16391, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00A\\x01\\x120/\\x01\\x185O\\x13#\\x00\\x1c\\x00\\x1b\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-10-28T00:00:00", "modifydate": "2018-12-20T13:23:41", "lines": 28, "newlines": 27, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(UCBDASD)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   UCBDASD\n SETSSI  CB497731\n SETCODE AC(0)\n NAME    UCBDASD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBDASD1": {"ttr": 16393, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x11\\x01\\x12)\\x8f\\x01\\x121\\x9f\\x12E\\x02\\xdb\\x00U\\x00\\x00\\xe3\\xe8\\xd7\\xc5\\xf1`\\xf2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2012-11-14T12:45:11", "lines": 731, "newlines": 85, "modlines": 0, "user": "TYPE1-2"}, "text": "UCBDASD  TITLE 'UCBDASD - DISPLAY ONLINE DASD VOLUMES USING ULUT'\n********************************************************************\n*        'UCBDASD - DISPLAY ONLINE DASD USING UCB LOOKUP TABLE     *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   November 7, 2012.\n*\n*        DATE UPDATED.\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        DESCRIPTION.\n*\n*            This TSO command is a quick and dirty display of\n*            online DASD.  The unique thing about it, is that\n*            it does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed once, using this method to look up UCB's\n*            is not recommended by IBM.  But if you keep up\n*            with the changes, you can keep this program\n*            working.  The ULUT tells you which version it is.\n*            Currently, they are called Type 1, or Type 2.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            UCBDASD        (no parameters currently supported)\n*\n*            This program will display all online DASD.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write a program\n*            that uses it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    ESA 5.2.2 thru z/OS 1.13 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/09 - V1.1 - Display DCE-related information:\n*                      number of cylinders, device type, etc.\n*                      Use IOSDCXR macro to obtain the real DCE.\n*\n*        2012/11/11 - V1.2 - Cosmetic changes.\n*\n*        2012/11/13 - V1.3 - Didn't correctly find the end of the\n*                            ULUT table before.  Now BCT through\n*                            the count of total entries.\n*\n*        2012/11/14 - V1.4 - Andreas Freybier's modifications for\n*                            EAV (Extended Access Volumes) with\n*                            more than 65535 cylinders.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\nUCBDASD  CSECT\nUCBDASD  RMODE ANY\nUCBDASD  AMODE 31\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'UCBDASD'\n         DC    CL6' V1.4 '\n         DC    CL16'ULUT DASD LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base register.\n         LR    R2,R1                  Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n         XC    0(WORKINIT,R1),0(R1)   Clear work area\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R3,16                  CVT\n         L     R3,X'7C'(,R3)          CVTIXAVL - IOCOM\n         L     R3,X'D0'(,R3)          IOVT\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Point both regs to ULUT\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out. Code 12.\n* ------------------------------------------------------------------ *\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n* ----------------------------------- Insert test for future types here\n         B     EXIT                   Neither?  Get out. Code 12.\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 1.13.  So it is really quite stable, so far.     *\n* ------------------------------------------------------------------ *\nULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n*        B     LOOPSET\nLOOPSET  DS    0H              Set up loop thru all UCB's.\n* --------------------------- Insert displacement for future types.  *\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\nLOOPUCB  DS    0H            Loop thru table entries, covering\n*                             all of the defined UCBs.\n*                            Do this for the number of table entries.\n         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         L     R5,8(,R3)              Get address of this unit's UCB.\n         ST    R5,UCBADDRS            Save the address for reporting.\n         USING UCBOB,R5               Addressability to UCB.\n         TM    UCBTBYT3,UCB3DACC      Is this UCB for DASD?\n         BNO   LOOPJUMP               No. Look for the next one.\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n*   - - - - - - - - - - - - - - - -   Get output line ready for display\n         MVI   LINE-1,X'40'           Clear the output line.\n         MVC   LINE,LINE-1\n*   - - - - - - - - - - - - - - - -   Start moving stuff in.\n         HEX   LINE+1,2,4(R5)         Move unit address to display.\n         MVC   LINE+7(6),X'1C'(R5)    Move VOLSER to display.\n         MVC   SAVEDEVT(4),X'10'(R5)  Move device type values in.\n         TM    SAVEDEVT+3,X'0E'       Is this disk a 3380?\n         BO    TRY3390                At least that. Test further.\n         HEX   LINE+15,4,SAVEDEVT     No. Just dump the raw value in.\n*                                     Example:  3030200F  for 3390\n*                                               3030200E  for 3380\nTRY3390  DS    0H\n         TM    SAVEDEVT+3,X'01'       Is it a 3390?\n         BZ    IS3380                 No. It's a 3380.\nIS3390   DS    0H\n         MVC   LINE+15(8),=C'3390    '  Say it's a 3390.\n         B     AFTRTYPE                 And go on.\nIS3380   DS    0H\n         MVC   LINE+15(8),=C'3380    '  Say it's a 3380.\nAFTRTYPE DS    0H                       And go on.\n*   - - - - - - - - - - - - - > > >   Private?  Public?  Storage?\n         TM    X'22'(R5),X'10'        Is the disk mounted PRIVATE?\n         BZ    NOTPRIV                No.\n         MVC   LINE+32(4),=C'PRIV'    Yes. Say so.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the disk mounted PUBLIC?\n         BZ    NOTPUBL                No.\n         MVC   LINE+32(4),=C'PUBL'    Yes. Say so.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the disk mounted STORAGE?\n         BZ    ENDDEVTP               No.\n         MVC   LINE+32(4),=C'STOR'    Yes. Say so.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+39,4,UCBADDRS     Put the UCB address in display.\n*   - - - - - - - - - - - - - > > >   This unit's attributes ! ! !\n         TM    X'3'(R5),X'08'         Is the unit allocated?\n         BZ    NOTALLOC               No.\n         MVC   LINE+49(4),=C'ALLC'    Yes. Say so.\nNOTALLOC DS    0H\n         TM    X'3'(R5),X'04'         Unit permanently resident?\n         BZ    NOTPERM                No.\n         MVC   LINE+54(4),=C'PERM'    Yes. Say so.\nNOTPERM  DS    0H\n         TM    X'3'(R5),X'02'         Is this unit the SYSRES volume?\n         BZ    NOTSYSRS               No.\n         MVC   LINE+59(3),=C'RES'     Yes. Say so.\nNOTSYSRS DS    0H                     Put out display line for unit.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*          Get the DCE address. This will be the real one,          *\n*           because the UCB it came from, is a real UCB.            *\n*           See the documentation in the IOSDCXR macro.             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         STM   R14,R1,IOSDCSAV        Save necessary registers.\n         LR    R1,R5                  IOSDCXR needs UCB addr in R1.\n         IOSDCXR\n         ST    R1,DCEADDR             IOSDCXR returns DCE addr in R1.\n         LM    R14,R1,IOSDCSAV        Restore saved registers.\nLOOPSTRD DS    0H\n         ST    R7,SAVER7B             Save R7.\n         L     R7,DCEADDR             Get DCE address.\n         LA    R7,X'17'(,R7)          Bump to DCEOBRDT.\n         LA    R8,DEVTABLE            Load Device Table.\nLOOPLUPD DS    0H\n         CLI   0(R8),X'00'            End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R8),0(R7)          Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R8,3(,R8)              No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(2),1(R8)       Move in listed device size.\nLOOPENDD DS    0H\n         L     R7,SAVER7B             Restore R7\n         HEX   LINE+63,4,DCEADDR      Print DCE address in hex.\n*  NUMBER OF CYLINDERS   -   below\n         ST    R7,SAVER7C             Save R7 again.\n         ST    R8,SAVER8A             Save R8 too.\n         L     R7,DCEADDR             Load the stored DCE address.\n         XR    R8,R8                  Clear R8.\n         ICM   R8,B'0011',X'12'(R7)   Put in the complete low halfword.\n*                                     DCEUDCYL                      V14\n*debug*  HEX   LINE+80,2,X'12'(R7)    Move unit address to display. V14\n         CLM   R8,B'0011',=X'FFFE'    ? more than 65,520 cylinders  V14\n         BNE   SHOW_CYL               no, display this value        V14\n*                                                                   V14\n****     ICM   R8,B'1111',X'38'(R7)   get DCEHICY or                V14\n         ICM   R8,B'1111',X'34'(R7)   get DCEUDCY                   V14\n*                                                                   V14\nSHOW_CYL DS    0H                                                   V14\n         CVD   R8,CVDAREA             Convert to packed decimal.\n         MVC   CYLCNT,CVDAREA+4       Store for safekeeping.\n         MVC   LINE+21(9),MASK9       Move in mask.\n         ED    LINE+21(9),CVDAREA+4   Print the display number.\n         L     R8,SAVER8A             Restore saved R8.\n         L     R7,SAVER7C             Restore saved R7.\n*  NUMBER OF CYLINDERS   -   above\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                     Now put out the output info.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         APUT  LINE,90\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H\n         LA    R3,X'C'(,R3)           Go to next ULUT entry\n         BCT   R4,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  end of loop - go through all the UCBs until you're done.         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DROP  R5\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         DROP  R9\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              UCBDASD - V1.4 - DISPLAY ONLINE DASD'\nMESSAGEU DC    C'              -------   ----   ------- ------ ----'\nMESSGSUB DC    C' Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attrx\n               ibs  Res DCE Addr'\nMESSGSUU DC    C' ----  ------  ------ --------  -----  --------   ----X\n               ---  --- --------'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'1E',C'D '             DCEOBRDT      3380/3390\n         DC    X'21',C'J '             DCEOBRDT      3380/3390\n         DC    X'23',C'K '             DCEOBRDT      3380/3390\n         DC    X'2E',C'E '             DCEOBRDT      3380/3390\n         DC    X'26',C'-1'             DCEOBRDT      3380/3390\n         DC    X'27',C'-2'             DCEOBRDT      3380/3390\n         DC    X'24',C'-3'             DCEOBRDT      3380/3390\n         DC    X'32',C'-9'             DCEOBRDT      3380/3390\n         DC    X'3E',C'-A'             DCEOBRDT      3380/3390\n         DC    AL1(00),H'0'            End of table\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nUCBADDRS DS    F                      Copy UCB address here for display\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER8A  DS    F                      Save R8\nSAVEDEVT DS    F                      Copy raw UCB device type value\nTOTCOUNT DS    F                      Total number of ULUT entries\nTESTCNT  DS    F                      Test this number as they decrease\nCYLCNT   DS    PL4                    Saved cyliner count (not used)\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCBDASD2": {"ttr": 16650, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x02\\x01\\x145/\\x01\\x16\\x02\\x7f B\\x03\\xbb\\x03\\x8f\\x00\\x00\\xd5\\xd6`\\xe2\\xd4\\xe2@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2014-12-18T00:00:00", "modifydate": "2016-01-27T20:42:02", "lines": 955, "newlines": 911, "modlines": 0, "user": "NO-SMS"}, "text": "UCBDASD  TITLE 'UCBDASD - DISPLAY ONLINE DASD VOLUMES USING ULUT'\n********************************************************************\n*        'UCBDASD - DISPLAY ONLINE DASD USING UCB LOOKUP TABLE     *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   November 7, 2012.\n*\n*        DATE UPDATED.   December 18, 2014  by John Hamlet and\n*                                              Sam Golob\n*\n*                        January 19, 2015   remove z/OS level\n*                                           dependency\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        DESCRIPTION.\n*\n*            This TSO command is a quick and dirty display of\n*            online DASD.  The unique thing about it, is that\n*            it does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed twice, using this method to look up UCB's\n*            is not recommended by IBM.  But if you keep up\n*            with the changes, you can keep this program\n*            working.  The ULUT tells you which version it is.\n*            Currently, they are called Type 1, or Type 2, or\n*            Type 3.  Type 2 started with z/OS 1.7.  Type 3\n*            started with z/OS 2.2, and was moved into 64-bit\n*            storage.  Therefore the Type 3 ULUT has to be\n*            accessed in 64-bit mode.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            UCBDASD        (no parameters currently supported)\n*\n*            This program will display all online DASD.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write a program\n*            that uses it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    ESA 5.2.2 thru z/OS 2.2 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/09 - V1.1 - Display DCE-related information:\n*                      number of cylinders, device type, etc.\n*                      Use IOSDCXR macro to obtain the real DCE.\n*\n*        2012/11/11 - V1.2 - Cosmetic changes.\n*\n*        2012/11/13 - V1.3 - Didn't correctly find the end of the\n*                            ULUT table before.  Now BCT through\n*                            the count of total entries.\n*\n*        2012/11/14 - V1.4 - Andreas Freybier's modifications for\n*                            EAV (Extended Access Volumes) with\n*                            more than 65535 cylinders.\n*\n*        2014/12/18 - V1.5 - z/OS 2.2 modifications for ULUT\n*                            version 3 which is in 64-bit storage.\n*\n*        2015/01/19 - V1.5 - PTF UY90741,0,2 retrofits the ULUT\n*                            version 3 to z/OS 2.1 and 1.13.  Code\n*                            modified not to check for z/OS level.\n*                            Criterion is IOVT+8 having fullword 0,\n*                            then IOVT+1B8 contains 64-bit ULUT\n*                            address, and ULUT is dealt with in\n*                            64-bit mode.  Otherwise ULUT is 31-bit.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDIOVT\nIOVT     DSECT                         IOS Vector Table          ESA41\n         DS    C'IOVT'\n         DS    H'476'                  Length of IOVT            RS1106\n         DS    XL2\nIOVTUL31 DS    V(ULUT)                 UCB LOOK-UP TABLE\n         DS    3F\nIOVTCDA  DS    V(CDA)                  Config Data Area\n         DS    1F                      ???\n         DS    A                       IASC ??\n         DS    A                       IOS PIN QUEUE HEADERS\n         DS    A                       IOS PIN QUEUE ELEMENTS\n         DS    1F                      ???\n         DS    A                       TQE\n         DS    6F                      ???\n         DS    A                       CSC\n         DS    1F                      ???\n         DS    A                       IOS 31 BIT DST ENTRIES\n         DS    A                       IOS 24 BIT DST ENTRIES\n         DS    1F                      ???\n         DS    A                       IOS UCB SERVICES PC RTN\n         DS    A                       IODE\n         DS    3F                      ???\n         DS    A                       IOS HASH\n         DS    A                       IOS UCB HASH COLISIONS\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    4F                      ???\n         DS    A                       CAPT\n         DS    2F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       IOS CAPTURE UCB SERVICE\n         DS    A                       TRCB\n         DS    2F                      ???\n         DS    1F                      ???\n         DS    A                       MGFQ\n         DS    A                       CMVT\n         DS    A                       CPCT\n         DS    1F                      ???\n         DS    1F                      ???\n         DS    A                       IXSD\n         DS    CL8'SYSIOS01'\n         DS    6F                      ???\n         DS    A                       QDIO\n         DS    1F                      ???\n         DS    A                       SAUT\n         DS    4F                      ???\n         DS    A                       IOS PURGE WORK AREAS\nIOVTFLG1 DS    X                       IOVT-Flag\nIOVTMIDAW EQU   X'08'                  MIDAW ON?\n         DS    XL3                     ???\n         DS    A                       CCAP\n         ORG   IOVT+440                0x1B8                     JH1214\nIOVTULUT DS    D                       UCB V3 look-up table      JH1214\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDULU3\nULU3     DSECT                         UCB Look-up Table\n         DS    C'ULUT'\nULU3VERS DS    X                       version 3                 JH1214\n         DS    AL1                     Subpool\n         DS    XL2                     <filler>\n         DS    F                       <filler>\n         DS    F                       <filler>\nULU31ST  DS    D                       FIRST LOOK-UP ENTRY (V3)\n         DS    XL2                     <filler>\n         DS    XL2                     <filler>\nULU3UCBC DS    F                       Total number of LOOK-UP Entries\nULU3TAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULU3COMM DS    F'032'                  number of COMM LOOK-UP Entries\nULU3DASD DS    F'256'                  number of DASD LOOK-UP Entries\nULU3DISP DS    F'128'                  number of DISP LOOK-UP Entries\nULU3UREC DS    F'032'                  number of UREC LOOK-UP Entries\nULU3CHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULU3CTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULU3+264\nUL3ENTRY DSECT                         UCB LOOK-UP ENTRY\nUL3EDEVN DS    X'000D'                 DEVICE NUMBER\nUL3EFLGS DS    X'4000'                 Flags\nUL3EDYN   EQU  X'40'                   Dynamic UCB\nUL3ESEQN DS    XL2                     ?\n         DS    XL2                     ?\nUL3EUCBP DS    V(UCBOB)                UCB ADDRESS\nUL3ELEN  EQU   *-UL3ENTRY\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n* ------------------------------------------------------------------- *\nUCBDASD  CSECT\nUCBDASD  RMODE ANY\nUCBDASD  AMODE 31\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'UCBDASD'\n         DC    CL6' V1.5 '\n         DC    CL16'ULUT DASD LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base register.\n         LR    R11,R1                 Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area\n         XC    0(WORKLEN-200,R1),0(R1)   Clear work area (bigger one)\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         XC    OSLVLSW6,OSLVLSW6      Clear image of CVTOSLV6 from CVT.\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R2,16                  CVT\n         USING CVTMAP,R2\n         MVC   OSLVLSW6,CVTOSLV6      Copy relevant OS level switch\n         DROP  R2\n         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM\n         L     R3,X'D0'(,R3)          IOS Vector Table\n         ST    R6,SAVER6A\n         L     R6,8(,R3)              Check address at IOVT+X'8'\n         LTR   R6,R6                  If zero, then 64-bit\n         BNZ   GETULUN2               Not zero, then 31-bit\n         B     GETULUY2               Zero, then use 64-bit address\nGETULUY2 DS    0H                     64-bit mode code. Type >2.\n         OI    OSLVLSW6,X'40'         Show z/OS 2.2 or UA90741,0,2\n         LLGTR R3,R3                  Clear 64-bit hi-area\n         LLGTR R4,R4\n         LLGTR R9,R9                  <<<< ADDED >>>>\n         LLGTR R10,R10                <<<< ADDED >>>>\n         LLGTR R12,R12                <<<< ADDED >>>>\n         LG    R4,X'1B8'(,R3)         Pick up ULUT V3 address\n         SAM64\n         LGR   R3,R4                  Reload R3 with ULUT address\n         B     GETULUN3\nGETULUN2 DS    0H                     31-bit mode code. Type <=2.\n*        L     R3,X'D0'(,R3)          IOVT\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Point both regs to ULUT\nGETULUN3 DS    0H\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out. Code 12.\n* ------------------------------------------------------------------ *\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n         TM    OSLVLSW6,X'40'         Are we using 64-bit ULUT address?\n         BNO   GETULEX2               ULUT Type 2 or less, 31-bit mode.\n         SAM64                        Need 64-bit mode for compare.\n         CLI   4(R3),X'03'            After z/OS 2.2 ?  (ULUT Type 3?)\n         BE    ULUTTYP3               Go to beginning of table entries.\n         SAM31                        Back to 31-bit mode.\nGETULEX2 DS    0H\n* ----------------------------------- Insert test for future types here\n         B     EXIT                   Neither?  Get out. Code 12.\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     This practice appears to be relatively harmless if we only     *\n*     DISPLAY the UCB and don't try to modify it.  Also, during a    *\n*     configuration change, you might get a S0C4 from these          *\n*     programs, but they will run fine a minute later.  They are     *\n*     primarily for display only.                                    *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 2.2.  So it is really quite stable, so far,      *\n*      as long as we code for all the current ULUT types.            *\n*                                                                    *\n*     Summary:                                                       *\n*                                                                    *\n*     The ULUT table has been changed by IBM, thus far:              *\n*      Type 1:  ESA 4.x  thru z/OS 1.7                               *\n*      Type 2:  z/OS 1.7 thru z/OS 2.1                               *\n*      Type 3:  z/OS 2.2 ....    (table is now in 64-bit storage)    *\n*               z/OS 2.1  with UA90741 applied                       *\n*               z/OS 1.13 HBB7780 with UA90740 applied               *\n*               z/OS 1.13 JBB778H with UA90742 and UA90740 applied   *\n*                                                                    *\n*     At the ULUT V.3 level the ULUT (UCB Lookup Table) has been     *\n*      moved into 64-bit storage, so even to get to the beginning    *\n*      of the table, in order to find out the table type, is now     *\n*      different, but not too difficult.  In the (OCO) macro         *\n*      IOSDIOVT, there are two pointer locations to the ULUT.        *\n*      IOVT+8 is a fullword pointer.  IOVT+X'1B8' is a doubleword    *\n*      pointer.  If IOVT+8 for a fullword, is zeroes, then this      *\n*      shows that IOVT+X'1B8' is the valid pointer, it points to     *\n*      a doubleword address, and you have to address the ULUT        *\n*      in 64-bit mode.                                               *\n*                                                                    *\n*     One test is run.  If IOVT+8 for a fullword is zeroes, then     *\n*      IOVT+X'1B8' is assumed to be valid, and flag OSLVLSW6, which  *\n*      had previously been copied from CVTOSLV6 in the CVT, is       *\n*      OR'ed to X'40', which would normally indicate the presence    *\n*      of z/OS 2.2.  This indicates to the program that the ULUT     *\n*      is in 64-bit mode, even at lower levels, with the application *\n*      of PTFs UA90741, or UA90740 possibly with UA90742.            *\n*                                                                    *\n* ------------------------------------------------------------------ *\nULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP3 LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.\n         L     R4,X'1C'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\n* ------------------------------------------------------------------- *\nLOOPSET  DS    0H              Set up loop thru all UCB's.\n         TM    OSLVLSW6,X'40'  Are we using 64-bit ULUT address?\n         BNO   LOOPUCB                No.\n         LLGTR R5,R5           Clear 64-bit hi-area\n* --------------------------- Insert displacement for future types.  *\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------- *\n*    Main part of code. Go through all the UCB's and extract info.    *\n* ------------------------------------------------------------------- *\nLOOPUCB  DS    0H            Loop thru table entries, covering\n*                             all of the defined UCBs.\n*                            Do this for the number of table entries.\n         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         TM    OSLVLSW6,X'40'         Are we using 64-bit ULUT address?\n         BNO   NSAM64                 No.\n         SAM64\nNSAM64   DS    0H\n         L     R5,8(,R3)              Get address of this unit's UCB.\n         TM    OSLVLSW6,X'40'         64-bit ULUT address?\n         BNO   NSAM31B                No.\n         SAM31                        For z/OS 2.2 and above, SAM31.\nNSAM31B  DS    0H\n         ST    R5,UCBADDRS            Save the address for reporting.\n         USING UCBOB,R5               Addressability to UCB.\n         TM    UCBTBYT3,UCB3DACC      Is this UCB for DASD?\n         BNO   LOOPJUMP               No. Look for the next one.\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n*   - - - - - - - - - - - - - - - -   Get output line ready for display\n         MVI   LINE-1,X'40'           Clear the output line.\n         MVC   LINE,LINE-1            Start moving stuff in.\n*   - - - - - - - - - - - - - - - -\n         HEX   LINE+1,2,4(R5)         Move unit address to display.\n         MVC   LINE+7(6),X'1C'(R5)    Move VOLSER to display.\n         MVC   SAVEDEVT(4),X'10'(R5)  Move device type values in.\n         TM    SAVEDEVT+3,X'0E'       Is this disk a 3380?\n         BO    TRY3390                At least that. Test further.\n         HEX   LINE+15,4,SAVEDEVT     No. Just dump the raw value in.\n*                                     Example:  3030200F  for 3390\n*                                               3030200E  for 3380\nTRY3390  DS    0H\n         TM    SAVEDEVT+3,X'01'       Is it a 3390?\n         BZ    IS3380                 No. It's a 3380.\nIS3390   DS    0H\n         MVC   LINE+15(8),=C'3390    '  Say it's a 3390.\n         B     AFTRTYPE                 And go on.\nIS3380   DS    0H\n         MVC   LINE+15(8),=C'3380    '  Say it's a 3380.\nAFTRTYPE DS    0H                       And go on.\n*   - - - - - - - - - - - - - > > >   Private?  Public?  Storage?\n         TM    X'22'(R5),X'10'        Is the disk mounted PRIVATE?\n         BZ    NOTPRIV                No.\n         MVC   LINE+32(4),=C'PRIV'    Yes. Say so.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the disk mounted PUBLIC?\n         BZ    NOTPUBL                No.\n         MVC   LINE+32(4),=C'PUBL'    Yes. Say so.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the disk mounted STORAGE?\n         BZ    ENDDEVTP               No.\n         MVC   LINE+32(4),=C'STOR'    Yes. Say so.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+39,4,UCBADDRS     Put the UCB address in display.\n*   - - - - - - - - - - - - - > > >   This unit's attributes ! ! !\n         TM    X'3'(R5),X'08'         Is the unit allocated?\n         BZ    NOTALLOC               No.\n         MVC   LINE+49(4),=C'ALLC'    Yes. Say so.\nNOTALLOC DS    0H\n         TM    X'3'(R5),X'04'         Unit permanently resident?\n         BZ    NOTPERM                No.\n         MVC   LINE+54(4),=C'PERM'    Yes. Say so.\nNOTPERM  DS    0H\n         TM    X'3'(R5),X'02'         Is this unit the SYSRES volume?\n         BZ    NOTSYSRS               No.\n         MVC   LINE+59(3),=C'RES'     Yes. Say so.\nNOTSYSRS DS    0H                     Put out display line for unit.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*          Get the DCE address. This will be the real one,          *\n*           because the UCB it came from, is a real UCB.            *\n*           See the documentation in the IOSDCXR macro.             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         STM   R14,R1,IOSDCSAV        Save necessary registers.\n         LR    R1,R5                  IOSDCXR needs UCB addr in R1.\n         IOSDCXR\n         ST    R1,DCEADDR             IOSDCXR returns DCE addr in R1.\n         LM    R14,R1,IOSDCSAV        Restore saved registers.\nLOOPSTRD DS    0H\n         ST    R7,SAVER7B             Save R7.\n         L     R7,DCEADDR             Get DCE address.\n         LA    R7,X'17'(,R7)          Bump to DCEOBRDT.\n         LA    R8,DEVTABLE            Load Device Table.\nLOOPLUPD DS    0H\n         CLI   0(R8),X'00'            End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R8),0(R7)          Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R8,3(,R8)              No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(2),1(R8)       Move in listed device size.\nLOOPENDD DS    0H\n         L     R7,SAVER7B             Restore R7\n         HEX   LINE+63,4,DCEADDR      Print DCE address in hex.\n*  NUMBER OF CYLINDERS   -   below\n         ST    R7,SAVER7C             Save R7 again.\n         ST    R8,SAVER8A             Save R8 too.\n         L     R7,DCEADDR             Load the stored DCE address.\n         XR    R8,R8                  Clear R8.\n         ICM   R8,B'0011',X'12'(R7)   Put in the complete low halfword.\n*                                     DCEUDCYL                      V14\n*debug*  HEX   LINE+80,2,X'12'(R7)    Move unit address to display. V14\n         CLM   R8,B'0011',=X'FFFE'    ? more than 65,520 cylinders  V14\n         BNE   SHOW_CYL               no, display this value        V14\n*                                                                   V14\n****     ICM   R8,B'1111',X'38'(R7)   get DCEHICY or                V14\n         ICM   R8,B'1111',X'34'(R7)   get DCEUDCY                   V14\n*                                                                   V14\nSHOW_CYL DS    0H                                                   V14\n         CVD   R8,CVDAREA             Convert to packed decimal.\n         MVC   CYLCNT,CVDAREA+4       Store for safekeeping.\n         MVC   LINE+21(9),MASK9       Move in mask.\n         ED    LINE+21(9),CVDAREA+4   Print the display number.\n         L     R8,SAVER8A             Restore saved R8.\n         L     R7,SAVER7C             Restore saved R7.\n*  NUMBER OF CYLINDERS   -   above\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                     Now put out the output info.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         APUT  LINE,90\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H                     For z/OS 2.2 and above, SAM64.\n         TM    OSLVLSW6,X'40'             64-bit ULUT?\n         BNO   NSAM31A                No.\n         SAM64\nNSAM31A  DS    0H\n         LA    R3,X'C'(,R3)           Go to next ULUT entry\n         BCT   R4,LOOPUCB             And loop until we've scanned\n*\n* ---- At end of ULUT, fall thru to here.\n*\n         TM    OSLVLSW6,X'40'         Do we have a 64-bit ULUT address?\n         BNO   NSAM31                 No.\n         SAM31                        For 64-bit, SAM31.\nNSAM31   DS    0H\n         B     EXIT0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  end of loop - go through all the UCBs until you're done.         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DROP  R5\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE             Load register with return code.\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         DROP  R9\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              UCBDASD - V1.5 - DISPLAY ONLINE DASD'\nMESSAGEU DC    C'              -------   ----   ------- ------ ----'\nMESSGSUB DC    C' Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attrx\n               ibs  Res DCE Addr'\nMESSGSUU DC    C' ----  ------  ------ --------  -----  --------   ----X\n               ---  --- --------'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'0E',C'A '             DCEOBRDT      3380/3390\n         DC    X'1E',C'D '             DCEOBRDT      3380/3390\n         DC    X'21',C'J '             DCEOBRDT      3380/3390\n         DC    X'23',C'K '             DCEOBRDT      3380/3390\n         DC    X'2E',C'E '             DCEOBRDT      3380/3390\n         DC    X'26',C'-1'             DCEOBRDT      3380/3390\n         DC    X'27',C'-2'             DCEOBRDT      3380/3390\n         DC    X'24',C'-3'             DCEOBRDT      3380/3390\n         DC    X'32',C'-9'             DCEOBRDT      3380/3390\n         DC    X'3E',C'-A'             DCEOBRDT      3380/3390\n         DC    AL1(00),H'0'            End of table\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nUCBADDRS DS    F                      Copy UCB address here for display\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER6A  DS    F                      Save R6\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER8A  DS    F                      Save R8\nSAVEDEVT DS    F                      Copy raw UCB device type value\nTOTCOUNT DS    F                      Total number of ULUT entries\nTESTCNT  DS    F                      Test this number as they decrease\nCYLCNT   DS    PL4                    Saved cyliner count (not used)\nOSLVLSW6 DS    X                      z/OS 2.2 or above?\nHBB77A0  EQU   OSLVLSW6,64            X'40'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         IECDIOCM\n         IOSDIOVT\n         IOSDULU3\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCBTAPE": {"ttr": 17158, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00H\\x01\\x12)\\x8f\\x01\\x15\\x01\\x9f\\x18\\x02\\x03\\xfb\\x00U\\x00\\x00\\xe4\\xc1\\xf9\\xf0\\xf7\\xf4\\xe7@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2015-01-19T18:02:48", "lines": 1019, "newlines": 85, "modlines": 0, "user": "UA9074X"}, "text": "UCBTAPE  TITLE 'UCBTAPE - DISPLAY TAPE MOUNTS'\n********************************************************************\n*        'UCBTAPE' - DISPLAY ONLINE TAPE DRIVES AND TAPE MOUNTS    *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   November 18, 2012.\n*\n*        DATE UPDATED.   December 21, 2014  by John Hamlet and\n*                                              Sam Golob\n*\n*                        January 19, 2015   remove z/OS level\n*                                           dependency\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        DESCRIPTION.\n*\n*            This TSO command is a quick display of all online\n*            tape drives and pending tape mounts.\n*\n*            It does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed twice, using this method to look up UCB's is\n*            not recommended by IBM.  But if you keep up with\n*            the changes, you can keep this program working.\n*            The ULUT tells you which version it is.\n*            Currently, they are called Type 1, or Type 2, or\n*            Type 3.  Type 2 started with z/OS 1.7.  Type 3\n*            started with z/OS 2.2, and was moved into 64-bit\n*            storage.  Therefore the Type 3 ULUT has to be\n*            accessed in 64-bit mode.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            UCBTAPE   \u00dd M \u00a8\n*\n*            A parameter of M will cause UCBTAPE to only display\n*            tape units requiring a tape mount.\n*\n*            With no parameters, UCBTAPE will display all online\n*            tape units, showing those requiring tape mounts.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write programs\n*            that use it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    ESA 5.2.2 thru z/OS 2.2 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/19 - V1.1 - Scrubbed \"volser\" fields with a\n*                     translate table because sometimes binary\n*                     data might appear there.\n*\n*                     If some real \"volser\"s appear to have\n*                     blanks in them, then permit the necessary\n*                     characters to print in translate table,\n*                     at label TRTBL0.\n*\n*        2012/11/20 - V1.2 - Allow parm of M, to only display\n*                     units that need a tape mount.\n*\n*        2014/12/21 - V1.3 - z/OS 2.2 modifications for ULUT\n*                            version 3 which is in 64-bit storage.\n*\n*        2015/01/19 - V1.3 - PTF UY90741,0,2 retrofits the ULUT\n*                            version 3 to z/OS 2.1 and 1.13.  Code\n*                            modified not to check for z/OS level.\n*                            Criterion is IOVT+8 having fullword 0,\n*                            then IOVT+1B8 contains 64-bit ULUT\n*                            address, and ULUT is dealt with in\n*                            64-bit mode.  Otherwise ULUT is 31-bit,\n*                            and IOVTULUT is IOVT+8.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n*                    M   A   C   R   O   S                            *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A                Save area for BAL register\n         STM   R15,R1,HEXSAVE            Save work registers\n         LA    R1,&FROM                  Load from address\n         LA    R0,&LEN                   Load number of chars to move\n         LA    R15,&TO                   Load to address\n         BAL   R7,HEX                    Go to routine - do the work\n         LM    R15,R1,HEXSAVE            Restore work registers\n         L     R7,SAVER7A                Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDIOVT\nIOVT     DSECT                         IOS Vector Table          ESA41\n         DS    C'IOVT'\n         DS    H'476'                  Length of IOVT            RS1106\n         DS    XL2\nIOVTUL31 DS    V(ULUT)                 UCB LOOK-UP TABLE\n         DS    3F\nIOVTCDA  DS    V(CDA)                  Config Data Area\n         DS    1F                      ???\n         DS    A                       IASC ??\n         DS    A                       IOS PIN QUEUE HEADERS\n         DS    A                       IOS PIN QUEUE ELEMENTS\n         DS    1F                      ???\n         DS    A                       TQE\n         DS    6F                      ???\n         DS    A                       CSC\n         DS    1F                      ???\n         DS    A                       IOS 31 BIT DST ENTRIES\n         DS    A                       IOS 24 BIT DST ENTRIES\n         DS    1F                      ???\n         DS    A                       IOS UCB SERVICES PC RTN\n         DS    A                       IODE\n         DS    3F                      ???\n         DS    A                       IOS HASH\n         DS    A                       IOS UCB HASH COLISIONS\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    4F                      ???\n         DS    A                       CAPT\n         DS    2F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       IOS CAPTURE UCB SERVICE\n         DS    A                       TRCB\n         DS    2F                      ???\n         DS    1F                      ???\n         DS    A                       MGFQ\n         DS    A                       CMVT\n         DS    A                       CPCT\n         DS    1F                      ???\n         DS    1F                      ???\n         DS    A                       IXSD\n         DS    CL8'SYSIOS01'\n         DS    6F                      ???\n         DS    A                       QDIO\n         DS    1F                      ???\n         DS    A                       SAUT\n         DS    4F                      ???\n         DS    A                       IOS PURGE WORK AREAS\nIOVTFLG1 DS    X                       IOVT-Flag\nIOVTMIDAW EQU   X'08'                  MIDAW ON?\n         DS    XL3                     ???\n         DS    A                       CCAP\n         ORG   IOVT+440                0x1B8                     JH1214\nIOVTULUT DS    D                       UCB V3 look-up table      JH1214\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDULU3\nULU3     DSECT                         UCB Look-up Table\n         DS    C'ULUT'\nULU3VERS DS    X                       version 3                 JH1214\n         DS    AL1                     Subpool\n         DS    XL2                     <filler>\n         DS    F                       <filler>\n         DS    F                       <filler>\nULU31ST  DS    D                       FIRST LOOK-UP ENTRY (V3)\n         DS    XL2                     <filler>\n         DS    XL2                     <filler>\nULU3UCBC DS    F                       Total number of LOOK-UP Entries\nULU3TAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULU3COMM DS    F'032'                  number of COMM LOOK-UP Entries\nULU3DASD DS    F'256'                  number of DASD LOOK-UP Entries\nULU3DISP DS    F'128'                  number of DISP LOOK-UP Entries\nULU3UREC DS    F'032'                  number of UREC LOOK-UP Entries\nULU3CHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULU3CTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULU3+264\nUL3ENTRY DSECT                         UCB LOOK-UP ENTRY\nUL3EDEVN DS    X'000D'                 DEVICE NUMBER\nUL3EFLGS DS    X'4000'                 Flags\nUL3EDYN   EQU  X'40'                   Dynamic UCB\nUL3ESEQN DS    XL2                     ?\n         DS    XL2                     ?\nUL3EUCBP DS    V(UCBOB)                UCB ADDRESS\nUL3ELEN  EQU   *-UL3ENTRY\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n* ------------------------------------------------------------------- *\n*          B E G I N N I N G    O F    M A I N    C O D E             *\n* ------------------------------------------------------------------- *\nUCBTAPE  CSECT\nUCBTAPE  RMODE ANY\nUCBTAPE  AMODE 31\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)             Eyecatcher\n         DC    AL1(7),CL7'UCBTAPE'\n         DC    C' V1.3'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nBEGIN    STM   R14,R12,12(R13)        Set up program.\n         LR    R10,R15                Load base register.\n         LR    R3,R1                  Save parms across GETMAIN, etc.\n         L     R0,WORKSIZ             Size for GETMAIN.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Save addr of getmained area.\n         USING WORK,R9\nINITWORK DS    0H\n         XC    FLAG1,FLAG1            Make sure Flag byte is zeroed.\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area (if small)\n         XC    0(WORKLEN-200,R1),0(R1)   Clear work area (bigger one)\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         XC    OSLVLSW6,OSLVLSW6      Clear image of CVTOSLV6 from CVT.\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Establish new save area.\n         MVI   LINE-1,X'40'           Initial clear of output line.\n         MVC   LINE,LINE-1\n         LA    R15,12                 Set return code to 12 initially.\n         ST    R15,RETCODE            And save that value.\n         ST    R3,PARMPTR             Store parm for reloading later.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Print titles.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------- *\nUCBPARM  DS    0H                     PROCESS THE PARM\n         L     R1,PARMPTR             Point to parm or CPPL\n         LTR   R1,R1                  Any CPPL or PARM pointer?\n         BZ    UCBBEGN                B if not.\n         L     R2,0(,R1)              Point to buffer.\n         LTR   R2,R2                  Any?\n         BZ    UCBBEGN                B if not.\n         LH    R3,0(R2)               Load length.\n         LTR   R3,R3                  Any?\n         BZ    UCBBEGN                B if not.\n         CLI   2(R2),X'00'            Command processor invocation?\n         BE    UCBCP                  Yes. Handle that.\n         LA    R2,2(,R2)              Point to PARM.\n         B     PARM\nUCBCP    CH    R3,=H'4'               Any PARM?\n         BE    UCBBEGN                B if not.\n         AH    R2,2(,R2)              Point to ...\n         LA    R2,4(,R2)              ... PARM.\nPARM     OI    0(R2),C' '             Uppercase.\n         MVC   PARMCHAR(1),0(R2)\n         CLI   0(R2),C'M'             PARM of M? (Display only mounts)\n         BNE   UCBBEGN                B if not.\n         OI    FLAG1,X'01'            Throw flag.\nUCBBEGN  DS    0H                     Point to the CVT.\n* ------------------------------------------------------------------- *\n*                 Get to the ULUT (UCB Lookup Table)                  *\n* ------------------------------------------------------------------- *\nGETULUT  DS    0H\n         L     R2,16                  CVT\n         USING CVTMAP,R2\n         MVC   OSLVLSW6,CVTOSLV6      Copy relevant OS level switch\n         DROP  R2\n         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM\n         L     R3,X'D0'(,R3)          IOS Vector Table\n         L     R6,8(,R3)              Check IOVTUL31\n         LTR   R6,R6                  Zero?\n         BNZ   GETULUN2               No. 31-bit ULUT\n         B     GETULUY2               Yes. 64-bit ULUT\nGETULUY2 DS    0H\n         OI    OSLVLSW6,X'40'         Set 64-bit ULUT indicator\n         LLGTR R3,R3                  Clear 64-bit hi-area\n         LLGTR R4,R4\n         LLGTR R9,R9                  <<<< ADDED >>>>\n         LLGTR R10,R10                <<<< ADDED >>>>\n         LLGTR R12,R12                <<<< ADDED >>>>\n         LG    R4,X'1B8'(,R3)         Pick up 64-bit ULUT address\n         SAM64\n         LGR   R3,R4                  Reload R3 with ULUT address\n         B     GETULUN3\nGETULUN2 DS    0H                     31-bit mode code. Type <=2.\n         L     R4,8(,R3)              Pick up 31-bit ULUT address\n         LR    R3,R4                  Point both regs to ULUT\nGETULUN3 DS    0H\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out. Code 12.\n* ------------------------------------------------------------------ *\n         CLI   4(R3),X'01'            Yes. Which type ULUT do we have?\n         BE    ULUTTYP1               Type 1? OK.\n         CLI   4(R3),X'02'\n         BE    ULUTTYP2               Type 2? OK.\n         TM    OSLVLSW6,X'40'         64-bit ULUT?\n         BNO   GETULEX2               No. 31-bit mode.\n         SAM64                        Need 64-bit mode for compare.\n         CLI   4(R3),X'03'            ULUT Type 3?\n         BE    ULUTTYP3               Go to beginning of table entries.\n         SAM31                        Back to 31-bit mode.\nGETULEX2 DS    0H\n* ----------------------------------- Insert test for future types here\n         B     EXIT                   Neither, exit with RC=12.\n* ------------------------------------------------------------------- *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     This practice appears to be relatively harmless if we only     *\n*     DISPLAY the UCB and don't try to modify it.  Also, during a    *\n*     configuration change, you might get a S0C4 from these          *\n*     programs, but they will run fine a minute later.  They are     *\n*     primarily for display only.                                    *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 2.2.  So it is really quite stable, so far,      *\n*      as long as we code for all the current ULUT types.            *\n*                                                                    *\n*     Summary:                                                       *\n*                                                                    *\n*     The ULUT table has been changed by IBM, thus far:              *\n*      Type 1:  ESA 4.x  thru z/OS 1.7                               *\n*      Type 2:  z/OS 1.7 thru z/OS 2.1                               *\n*      Type 3:  z/OS 2.2 ....    (table is now in 64-bit storage)    *\n*               z/OS 2.1  with UA90741 applied                       *\n*               z/OS 1.13 HBB7780 with UA90740 applied               *\n*               z/OS 1.13 JBB778H with UA90742 and UA90740 applied   *\n*                                                                    *\n*     At the ULUT V.3 level the ULUT (UCB Lookup Table) has been     *\n*      moved into 64-bit storage, so even to get to the beginning    *\n*      of the table, in order to find out the table type, is now     *\n*      different, but not too difficult.  In the (OCO) macro         *\n*      IOSDIOVT, there are two pointer locations to the ULUT.        *\n*      IOVT+8 is a fullword pointer.  IOVT+1B8 is a doubleword       *\n*      pointer.  If IOVT+8 for a fullword, is zeroes, then this      *\n*      shows that IOVT+X'1B8' is the valid pointer, it points to     *\n*      a doubleword address, and you have to address the ULUT        *\n*      in 64-bit mode.                                               *\n*                                                                    *\n*     One test is run.  If IOVT+8 for a fullword is zeroes, then     *\n*      IOVT+X'1B8' is assumed to be valid, and flag OSLVLSW6, which  *\n*      had previously been copied from CVTOSLV6 in the CVT, is       *\n*      OR'ed to X'40', which would normally indicate the presence    *\n*      of z/OS 2.2.  This indicates to the program that the ULUT     *\n*      is in 64-bit mode, even at lower levels, with the application *\n*      of PTFs UA90741, or UA90740 possibly with UA90742.            *\n*                                                                    *\n* ------------------------------------------------------------------ *\nULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP3 LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.\n         L     R4,X'1C'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\n* ------------------------------------------------------------------- *\nLOOPSET  DS    0H\n         TM    OSLVLSW6,X'40'  Is ULUT address 64-bit?\n         BNO   LOOPUCB                No.\n         LLGTR R5,R5           Clear 64-bit hi-area\n* --------------------------- Insert displacement for future types.  *\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\n         ST    R4,TESTCNT             Establish decrement if we need\n         L     R4,TESTCNT               to test later.....\n* ------------------------------------------------------------------- *\n*    Main part of code. Go through all the UCB's and extract info.    *\n* ------------------------------------------------------------------- *\nLOOPUCB  DS    0H                     Look at all the UCB's in system.\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM64                 No.\n         SAM64\nNSAM64   DS    0H\n         L     R5,8(,R3)              Get address of this UCB.\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM31B                No.\n         SAM31                        For z/OS 2.2 and above, SAM31.\nNSAM31B  DS    0H\n         ST    R5,UCBADDRS            Save address for reporting.\n         USING UCBOB,R5               Addressability to UCB.\n         TM    UCBTBYT3,UCB3TAPE      Is this UCB for a tape unit?\n         BNO   LOOPJUMP               No. We're only dealing with tape.\n*        TM    UCBSTAT,UCBONLI        Is this unit online?\n         BNO   LOOPJUMP               No. We're only doing online units\n* ------------------------------------------------------------------- *\n         MVI   LINE-1,X'40'           Clear output line.\n         MVC   LINE,LINE-1            And start moving stuff into it.\n* ------------------------------------------------------------------- *\n         HEX   LINE+1,2,4(R5)         Move unit address into line.\n         MVC   VOLSRWRK(6),BLANKS     Blank this field initially.\n         MVC   VOLSRWRK(6),X'1C'(R5)  Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+12(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\n         CLC   =X'000000000000',LINE+12    If it is all zeroes,\n         BNE   HASVOLSR                    Not. Leave unchanged.\n         MVC   LINE+12(6),BLANKS           Otherwise, put blanks, not\n*                                            unprintables.\nHASVOLSR DS    0H\n         MVC   SAVEDEVT(4),X'10'(R5)  Move hex device type to workarea.\nTYPETAPE DS    0H                     For tapes, identify exact type.\n* ------------------------------------------------------------------- *\n*   3420's,  3480's,  3490's,  3590's  --- what kind of tape drive?   *\n* ------------------------------------------------------------------- *\n         LA    R8,DEVTABLE            Address of tape device table.\nLOOPLUPD DS    0H                     Loop thru table.\n         CLI   0(R8),X'00'            End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R8),SAVEDEVT+3     Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R8,5(,R8)              No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(4),1(R8)       Move in listed device type.\nLOOPENDD DS    0H                       3480, 3490, 3590.\n         CLC   LINE+19(4),BLANKS      No proper type found?\n         BNE   NOSUBTYP\n         HEX   LINE+19,4,SAVEDEVT     The move in hex device type.\nNOSUBTYP DS    0H\n* ------------------------------------------------------------------- *\n         TM    X'22'(R5),X'10'        Is the tape mounted PRIVATE?\n         BZ    NOTPRIV                NO.\n         MVC   LINE+24(4),=C'PRIV'    YES. SAY SO.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the tape mounted PUBLIC?\n         BZ    NOTPUBL                NO.\n         MVC   LINE+24(4),=C'PUBL'    YES. SAY SO.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the tape mounted STORAGE?\n         BZ    ENDDEVTP               NO.\n         MVC   LINE+24(4),=C'STOR'    YES. SAY SO.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+29,4,UCBADDRS     Report the real UCB address.\n* ------------------------------------------------------------------- *\n*      Invoke IBM's macro service to get the UCB Common Extension.    *\n* ------------------------------------------------------------------- *\n         L     R1,UCBADDRS            Now get the UCB common extension.\n         ST    R0,SAVER0A             Macro needs R0\n         IOSCMXR\n         ST    R1,UCBCEADR            Save UCB common extension addr.\n         L     R0,SAVER0A             Device Class Extension address.\n* ------------------------------------------------------------------- *\n*      Invoke IBM's macro service to get the DCE Address.             *\n* ------------------------------------------------------------------- *\n         L     R1,UCBADDRS            Now get the DCE address\n         ST    R0,SAVER0A             Macro needs R0\n         IOSDCXR\n         ST    R1,DCEADDR             Save the DCE address.\n         L     R0,SAVER0A             Restore R0.\n* ------------------------------------------------------------------- *\n         HEX   LINE+61,4,UCBCEADR     Report UCB Common Extension addr.\n         HEX   LINE+38,4,DCEADDR      Report DCE address.\n* ------------------------------------------------------------------- *\n         ST    R8,SAVER8A             Save work register.\n*                                     Check for possible volsers ....\n         TM    X'24'(R5),X'F0'        See if there's a volser in field.\n         BNZ   PUTVOL1                Something in 1st nibble? Yes?\n*                                     Then assume a volser is there.\n         B     PUTVOL2                Otherwise, check in other field.\nPUTVOL1  DS    0H                     If volser is there,\n*        MVC   LINE+47(6),X'24'(R5)      then report it.\n         MVC   VOLSRWRK,X'24'(R5)     Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+47(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\nPUTVOL2  DS    0H                     Is volser in the other places?\n         TM    X'34'(R5),X'F0'        Is a volser here, or a counter?\n         BNZ   PUTVOL3                Nonzero. Must be a volser.\n         B     PUTVOL4                Zeros at beginning, it's counter.\nPUTVOL3  DS    0H                     Since it's a volser, then\n*        MVC   LINE+54(6),X'3A'(R5)      we must report what it is.\n         MVC   VOLSRWRK,X'3A'(R5)     Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+54(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\nPUTVOL4  DS    0H\n* ------------------------------------------------------------------- *\nMESTEST  DS    0H                     Test for pending tape mounts.\n         TM    X'22'(R5),X'01'        Is there a mount pending?\n         BZ    NOMES00                No. Don't report one.\n         MVC   LINE+6(5),=C'*MNT*'    Yes. Show unit needs a mount.\n* ------  Mounts out of order?  -  below\n         TM    X'06'(R5),X'40'        Mounts out of order?\n         BO    MOUNTD                 No. They were done in order.\nNOTMTD   DS    0H                     Yes. Mount was already done.\n         MVC   LINE+6(5),BLANKS       So don't report we still need one\nMOUNTD   DS    0H\n* ------  Mounts out of order?  -  above\nNOMES00  DS    0H                     Now put out output line.\n         TM    FLAG1,X'01'            Are we only displaying mounts?\n         BZ    NOMES01                No. Just print this line anyway.\n         CLC   LINE+6(5),=C'*MNT*'    Yes. See if this is a mount.\n         BNE   LOOPJUMP               Not a mount. Don't display line.\nNOMES01  DS    0H                     Look now if active I/O on unit.\n         ST    R3,SAVER3A\n         L     R3,UCBCEADR            Load UCB Common Extension addr.\n         L     R3,X'24'(,R3)          Point to IOQ.\n         HEX   LINE+70,1,X'10'(R3)\n*        TM    X'10'(R3),X'80'        Tape involved in active I/O?\n*        BZ    NOMES02                No.\n*        MVC   LINE+70,C'A'           Move indicator into line.\n         L     R3,SAVER3A\nNOMES02  DS    0H                     Now put out output line.\n         APUT  LINE,95\nLOOPJUMP DS    0H                     Bump to next UCB.\n         L     R8,SAVER8A             Restore work register.\n         TM    OSLVLSW6,X'40'             Run time test.\n         BNO   NSAM31A\n         SAM64\nNSAM31A  DS    0H\n         ST    R4,TESTCNT             Decremented ULUT entry count.\n         MVC   LINE,LINE-1            Clear line for next UCB report.\n         LA    R3,X'C'(,R3)           Go to next ULUT entry\n         BCT   R4,LOOPUCB             And loop until we've scanned\n*\n* ---- At end of ULUT, fall thru to here.\n*\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM31                 No.\n         SAM31                        For z/OS 2.2 and above, SAM31.\nNSAM31   DS    0H\n         B     EXIT0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  end of loop - go through all the UCBs until you're done.         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DROP  R5\nEXIT0    MVI   RETCODE+3,0            Reset return code to 0 here.\nEXIT     L     R2,RETCODE             Load whatever return code we had.\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         DROP  R9\n         LR    R15,R2                 Reload proper return code.\n         LM    R0,R12,20(R13)         Reload registers,\n         L     R14,12(,R13)\n         BR    R14                    And get out.\n         SPACE\n* ------------------------------------------------------------------- *\n*                 S  U  B  R  O  U  T  I  N  E  S                     *\n* ------------------------------------------------------------------- *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R7                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n*            U N C H A N G E D    C O N S T A N T S                   *\n* ------------------------------------------------------------------- *\n         LTORG\nMESSAGET DC    C'     UCBTAPE - V1.3 - DISPLAY TAPE MOUNTS AND ONLINE T-\n               APE DRIVES'\nMESSAGEU DC    C'     -------   ----   ------- ---- ------ --- ------ -X\n               --- ------'\nMESSGSUB DC    C' Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol x\n               LastVl Ext Addr'\nMESSGSUU DC    C' ---- ----- ------ ---- ---- -------- -------- ------ X\n               ------ --------'\nMASK7    DC    XL7'40202020202120'\nMASK9    DC    XL9'402020202020202120'\nBLANKS   DC    CL16' '\n         DC    0D'0'\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'03',C'3400'\n         DC    X'82',C'3423'\n         DC    X'80',C'3480'\n         DC    X'81',C'3490'\n         DC    X'83',C'3590'\n         DC    X'0000000000'\n* ---   Convert most unprintables for VOLSER names into blanks.   --- *\nTRTBL0   DS    0D                                                       06685\n         DC    XL16'40404040404040404040404040404040'                   06686\n         DC    XL16'40404040404040404040404040404040'                   06687\n         DC    XL16'40404040404040404040404040404040'                   06688\n         DC    XL16'40404040404040404040404040404040'                   06689\n         DC    XL16'40404040404040404040404040404040'                   06690\n         DC    XL16'40404040404040404040404040404040'                   06691\n         DC    XL16'404040404040404040404040406D4040'                   06692\n         DC    XL16'40404040404040404040407B7C404040'                   06693\n         DC    XL16'40818283848586878889404040404040'                   06694\n         DC    XL16'40919293949596979899404040404040'                   06695\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'                   06696\n         DC    XL16'40404040404040404040404040404040'                   06697\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'                   06698\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'                   06699\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'                   06700\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                   06701\n* ------------------------------------------------------------------- *\n*            G E T M A I N E D    W O R K    A R E A                  *\n* ------------------------------------------------------------------- *\nWORK     DSECT\n         DS    18F                Save area.\nCVDAREA  DS    D                  Work area for CVD instruction.\nPARMPTR  DS    F                  Save parm pointer.\nRETCODE  DS    F                  Return code - default is 12.\nUCBADDRS DS    F                  Address of UCB returned from ULUT.\nHEXSAVE  DS    3F                 Save area for HEX macro.\nSAVER0A  DS    F                  Save work register R0 for IBM macros.\nSAVER3A  DS    F                  Save work register R3.\nSAVER7A  DS    F                  Save R7 during subroutine execution.\nSAVER7B  DS    F                  Save R7 during subroutine execution.\nSAVER8A  DS    F                  Save work register R8.\nUCBCEADR DS    F                  Address of UCB COMMON EXTENSION\nUCBPRADR DS    F                  Address of UCB PREFIX\nDCEADDR  DS    F                  Address of DEVICE CLASS EXTENSION\nSAVEDEVT DS    F                  Save 4 character device type.\nTOTCOUNT DS    F                  Save total number of ULUT entries.\nTESTCNT  DS    F                  Save decremented number of entries.\nFLAG1    DS    X                  Result of scanning parm.\n*              X'01'              Only show UCB's needing tape mounts.\nVOLSRWRK DS    CL6                Work area to scrub a volser field.\nPARMCHAR DS    C                  Work area to store parm character.\nOSLVLSW6 DS    X                  z/OS 2.2 or above?\nHBB77A0  EQU   OSLVLSW6,64        X'40'\n         DS    X                  Fill character for LINE.\nLINE     DS    CL100              Make sure output line is big enough.\nWORKINIT EQU   *-WORK\n         DS    0D\nWORKLEN  EQU   *-WORK             Aligned length for GETMAIN/FREEMAIN.\n* ------------------------------------------------------------------- *\nUCB      DSECT\n         IEFUCBOB\n         IECDIOCM\n         IOSDIOVT\n         IOSDULU3\n         SPACE\n         YREGS\n         END   ENTRY0\n* ------------------------------------------------------------------- *\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCBTAPE$": {"ttr": 17667, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00T\\x01\\x120/\\x01\\x146/\\x08R\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2012-10-28T00:00:00", "modifydate": "2014-12-28T08:52:54", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT490.FILE731(UCBTAPE)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   UCBTAPE\n SETSSI  CB490731\n SETCODE AC(0)\n NAME    UCBTAPE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBTAPE#": {"ttr": 17669, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00(\\x01\\x120o\\x01\\x122_\\x12V\\x00L\\x00;\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-11-01T00:00:00", "modifydate": "2012-11-20T12:56:28", "lines": 76, "newlines": 59, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n\n  The TSO command UCBTAPE is a TSO command to show all\n  online tape drives and all pending tape mounts.  You\n  can use the UCBTAPE command to look at the externals\n  of all tape jobs on the system, regarding mount status.\n\n)X SYNTAX  -\n\n       UCBTAPE   \u00dd M \u00a8\n\n           A parameter of M will cause UCBTAPE to only display\n           tape units requiring a tape mount.\n\n           DEFAULTS - NONE\n           ALIAS    - NONE\n\n\n Example Displays:\n\n    Example 1:   Tape mount required before job is run.\n    ------- -\n\n      (Please note that if *MNT* is displayed, this means\n       that the tape is not yet correctly mounted.)\n\n     UCBTAPE - V1.0 - DISPLAY TAPE MOUNTS AND ONLINE TAPE DRIVES\n     -------   ----   ------- ---- ------ --- ------ ---- ------\n Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol LastVl Ext Addr\n ---- ----- ------ ---- ---- -------- -------- ------ ------ --------\n 0560              3480      00F4AE90 00F4ADB0        C484MA 00F4AE68\n 0561              3480      00F4AFB0 00F4AED0        C484MB 00F4AF88\n 0562 *MNT* V484MT 3480 PRIV 00F4B0D0 00F4AFF0        C484MC 00F4B0A8\n 0563              3480      00F4B1F0 00F4B110        C484MD 00F4B1C8\n 0564              3480      00F4B310 00F4B230        C484ME 00F4B2E8\n 0565              3480      00F4B430 00F4B350        C484MF 00F4B408\n 0566              3480      00F4B550 00F4B470        C484MG 00F4B528\n 0567              3480      00F4B670 00F4B590        C484MH 00F4B648\n\n\n    Example 2:   Job is running.\n    ------- -\n\n     UCBTAPE - V1.0 - DISPLAY TAPE MOUNTS AND ONLINE TAPE DRIVES\n     -------   ----   ------- ---- ------ --- ------ ---- ------\n Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol LastVl Ext Addr\n ---- ----- ------ ---- ---- -------- -------- ------ ------ --------\n 0560              3480      00F4AE90 00F4ADB0        C484MA 00F4AE68\n 0561              3480      00F4AFB0 00F4AED0        C484MB 00F4AF88\n 0562       V484MT 3480 PRIV 00F4B0D0 00F4AFF0 V484MT        00F4B0A8\n 0563              3480      00F4B1F0 00F4B110        C484MD 00F4B1C8\n 0564              3480      00F4B310 00F4B230        C484ME 00F4B2E8\n 0565              3480      00F4B430 00F4B350        C484MF 00F4B408\n 0566              3480      00F4B550 00F4B470        C484MG 00F4B528\n 0567              3480      00F4B670 00F4B590        C484MH 00F4B648\n\n    Example 3:   Job has finished running.\n    ------- -\n\n     UCBTAPE - V1.0 - DISPLAY TAPE MOUNTS AND ONLINE TAPE DRIVES\n     -------   ----   ------- ---- ------ --- ------ ---- ------\n Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol LastVl Ext Addr\n ---- ----- ------ ---- ---- -------- -------- ------ ------ --------\n 0560              3480      00F4AE90 00F4ADB0        C484MA 00F4AE68\n 0561              3480      00F4AFB0 00F4AED0        C484MB 00F4AF88\n 0562              3480      00F4B0D0 00F4AFF0 V484MT V484MT 00F4B0A8\n 0563              3480      00F4B1F0 00F4B110        C484MD 00F4B1C8\n 0564              3480      00F4B310 00F4B230        C484ME 00F4B2E8\n 0565              3480      00F4B430 00F4B350        C484MF 00F4B408\n 0566              3480      00F4B550 00F4B470        C484MG 00F4B528\n 0567              3480      00F4B670 00F4B590        C484MH 00F4B648\n\n\n)O OPERANDS -\n))  none\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UCBTAPE1": {"ttr": 17672, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x10\\x01\\x12)\\x8f\\x01\\x122_!$\\x02\\xf4\\x00U\\x00\\x00\\xe3\\xe8\\xd7\\xc5\\xf1`\\xf2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2012-11-20T21:24:10", "lines": 756, "newlines": 85, "modlines": 0, "user": "TYPE1-2"}, "text": "UCBTAPE  TITLE 'UCBTAPE - DISPLAY TAPE MOUNTS'\n********************************************************************\n*        'UCBTAPE' - DISPLAY ONLINE TAPE DRIVES AND TAPE MOUNTS    *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   November 18, 2012.\n*\n*        DATE UPDATED.\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        DESCRIPTION.\n*\n*            This TSO command is a quick display of all online\n*            tape drives and pending tape mounts.\n*\n*            It does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed once, using this method to look up UCB's is\n*            not recommended by IBM.  But if you keep up with\n*            the changes, you can keep this program working.\n*            The ULUT tells you which version it is.  Currently,\n*            they are called Type 1, or Type 2.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            UCBTAPE   \u00dd M \u00a8\n*\n*            A parameter of M will cause UCBTAPE to only display\n*            tape units requiring a tape mount.\n*\n*            With no parameters, UCBTAPE will display all online\n*            tape units, showing those requiring tape mounts.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write programs\n*            that use it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.   OS/390 1.3 thru z/OS 1.13 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/19 - V1.1 - Scrubbed \"volser\" fields with a\n*                     translate table because sometimes binary\n*                     data might appear there.\n*\n*                     If some real \"volser\"s appear to have\n*                     blanks in them, then permit the necessary\n*                     characters to print in translate table,\n*                     at label TRTBL0.\n*\n*        2012/11/20 - V1.2 - Allow parm of M, to only display\n*                     units that need a tape mount.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n*                    M   A   C   R   O   S                            *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A                Save area for BAL register\n         STM   R15,R1,HEXSAVE            Save work registers\n         LA    R1,&FROM                  Load from address\n         LA    R0,&LEN                   Load number of chars to move\n         LA    R15,&TO                   Load to address\n         BAL   R7,HEX                    Go to routine - do the work\n         LM    R15,R1,HEXSAVE            Restore work registers\n         L     R7,SAVER7A                Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\n*          B E G I N N I N G    O F    M A I N    C O D E             *\n* ------------------------------------------------------------------- *\nUCBTAPE  CSECT\nUCBTAPE  RMODE ANY\nUCBTAPE  AMODE 31\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)             Eyecatcher\n         DC    AL1(7),CL7'UCBTAPE'\n         DC    C' V1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nBEGIN    STM   R14,R12,12(R13)        Set up program.\n         LR    R10,R15                Load base register.\n         LR    R3,R1                  Save parms across GETMAIN, etc.\n         L     R0,WORKSIZ             Size for GETMAIN.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Save addr of getmained area.\n         USING WORK,R9\nINITWORK DS    0H\n         XC    FLAG1,FLAG1            Make sure Flag byte is zeroed.\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area (if small)\n         XC    0(WORKLEN-200,R1),0(R1)   Clear work area (bigger one)\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Establish new save area.\n         MVI   LINE-1,X'40'           Initial clear of output line.\n         MVC   LINE,LINE-1\n         LA    R15,12                 Set return code to 12 initially.\n         ST    R15,RETCODE            And save that value.\n         ST    R3,PARMPTR             Store parm for reloading later.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Print titles.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------- *\nUCBPARM  DS    0H                     PROCESS THE PARM\n         L     R1,PARMPTR             Point to parm or CPPL\n         LTR   R1,R1                  Any CPPL or PARM pointer?\n         BZ    UCBBEGN                B if not.\n         L     R2,0(,R1)              Point to buffer.\n         LTR   R2,R2                  Any?\n         BZ    UCBBEGN                B if not.\n         LH    R3,0(R2)               Load length.\n         LTR   R3,R3                  Any?\n         BZ    UCBBEGN                B if not.\n         CLI   2(R2),X'00'            Command processor invocation?\n         BE    UCBCP                  Yes. Handle that.\n         LA    R2,2(,R2)              Point to PARM.\n         B     PARM\nUCBCP    CH    R3,=H'4'               Any PARM?\n         BE    UCBBEGN                B if not.\n         AH    R2,2(,R2)              Point to ...\n         LA    R2,4(,R2)              ... PARM.\nPARM     OI    0(R2),C' '             Uppercase.\n         MVC   PARMCHAR(1),0(R2)\n         CLI   0(R2),C'M'             PARM of M? (Display only mounts)\n         BNE   UCBBEGN                B if not.\n         OI    FLAG1,X'01'            Throw flag.\nUCBBEGN  DS    0H                     Point to the CVT.\n* ------------------------------------------------------------------- *\n*                 Get to the ULUT (UCB Lookup Table)                  *\n* ------------------------------------------------------------------- *\n         L     R3,16                  CVT\n         L     R3,X'7C'(,R3)          CVTIXAVL\n         L     R3,X'D0'(,R3)          IOVT\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Both registers point to ULUT.\n         CLC   =C'ULUT',0(R3)         Is it what we think?\n         BNE   EXIT                   No. Get out.\n         CLI   4(R3),X'01'            Yes. Which type ULUT do we have?\n         BE    ULUTTYP1               Type 1? OK.\n         CLI   4(R3),X'02'\n         BE    ULUTTYP2               Type 2? OK.\n         B     EXIT                   Neither, exit with RC=12.\n* ------------------------------------------------------------------- *\nULUTTYP1 L     R3,X'0C'(,R3)          Type 1, addr of first entry\n         L     R4,X'10'(,R4)          Total number of entries (for BCT)\n         ST    R4,TOTCOUNT            Store the total # entries for BCT\n         B     LOOPSET\nULUTTYP2 L     R3,X'14'(,R3)          Type 2, ADDR OF FIRST ENTRY\n         L     R4,X'18'(,R4)          Total number of entries (for BCT)\n         ST    R4,TOTCOUNT            Store the total # entries for BCT\n*        B     LOOPSET\n* ------------------------------------------------------------------- *\nLOOPSET  DS    0H\n         ST    R4,TESTCNT             Establish decrement if we need\n         L     R4,TESTCNT               to test later.....\n* ------------------------------------------------------------------- *\n*    Main part of code. Go through all the UCB's and extract info.    *\n* ------------------------------------------------------------------- *\nLOOPUCB  DS    0H                     Look at all the UCB's in system.\n         L     R5,8(,R3)              Get address of this UCB.\n         ST    R5,UCBADDRS            Save address for reporting.\n         USING UCBOB,R5\n         TM    UCBTBYT3,UCB3TAPE      Is this UCB for a tape unit?\n         BNO   LOOPJUMP               No. We're only dealing with tape.\n         TM    UCBSTAT,UCBONLI        Is this unit online?\n         BNO   LOOPJUMP               No. We're only doing online units\n* ------------------------------------------------------------------- *\n         MVI   LINE-1,X'40'           Clear output line.\n         MVC   LINE,LINE-1\n*                                     And start moving stuff into it.\n         HEX   LINE+1,2,4(R5)         Move unit address into line.\n         MVC   VOLSRWRK(6),BLANKS     Blank this field initially.\n         MVC   VOLSRWRK(6),X'1C'(R5)  Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+12(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\n         CLC   =X'000000000000',LINE+12    If it is all zeroes,\n         BNE   HASVOLSR                    Not. Leave unchanged.\n         MVC   LINE+12(6),BLANKS           Otherwise, put blanks, not\n*                                            unprintables.\nHASVOLSR DS    0H\n         MVC   SAVEDEVT(4),X'10'(R5)  Move hex device type to workarea.\nTYPETAPE DS    0H                     For tapes, identify exact type.\n* ------------------------------------------------------------------- *\n*   3420's,  3480's,  3490's,  3590's  --- what kind of tape drive?   *\n* ------------------------------------------------------------------- *\n         LA    R8,DEVTABLE            Address of tape device table.\nLOOPLUPD DS    0H                     Loop thru table.\n         CLI   0(R8),X'00'            End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R8),SAVEDEVT+3     Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R8,5(,R8)              No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(4),1(R8)       Move in listed device type.\nLOOPENDD DS    0H                       3480, 3490, 3590.\n         CLC   LINE+19(4),BLANKS      No proper type found?\n         BNE   NOSUBTYP\n         HEX   LINE+19,4,SAVEDEVT     The move in hex device type.\nNOSUBTYP DS    0H\n* ------------------------------------------------------------------- *\n         TM    X'22'(R5),X'10'        Is the tape mounted PRIVATE?\n         BZ    NOTPRIV                NO.\n         MVC   LINE+24(4),=C'PRIV'    YES. SAY SO.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the tape mounted PUBLIC?\n         BZ    NOTPUBL                NO.\n         MVC   LINE+24(4),=C'PUBL'    YES. SAY SO.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the tape mounted STORAGE?\n         BZ    ENDDEVTP               NO.\n         MVC   LINE+24(4),=C'STOR'    YES. SAY SO.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+29,4,UCBADDRS     Report the real UCB address.\n* ------------------------------------------------------------------- *\n*      Invoke IBM's macro service to get the UCB Common Extension.    *\n* ------------------------------------------------------------------- *\n         L     R1,UCBADDRS            Now get the UCB common extension.\n         ST    R0,SAVER0A             Macro needs R0\n         IOSCMXR\n         ST    R1,UCBCEADR            Save UCB common extension addr.\n         L     R0,SAVER0A             Device Class Extension address.\n* ------------------------------------------------------------------- *\n*      Invoke IBM's macro service to get the DCE Address.             *\n* ------------------------------------------------------------------- *\n         L     R1,UCBADDRS            Now get the DCE address\n         ST    R0,SAVER0A             Macro needs R0\n         IOSDCXR\n         ST    R1,DCEADDR             Save the DCE address.\n         L     R0,SAVER0A             Restore R0.\n* ------------------------------------------------------------------- *\n         HEX   LINE+61,4,UCBCEADR     Report UCB Common Extension addr.\n         HEX   LINE+38,4,DCEADDR      Report DCE address.\n* ------------------------------------------------------------------- *\n         ST    R8,SAVER8A             Save work register.\n*                                     Check for possible volsers ....\n         TM    X'24'(R5),X'F0'        See if there's a volser in field.\n         BNZ   PUTVOL1                Something in 1st nibble? Yes?\n*                                     Then assume a volser is there.\n         B     PUTVOL2                Otherwise, check in other field.\nPUTVOL1  DS    0H                     If volser is there,\n*        MVC   LINE+47(6),X'24'(R5)      then report it.\n         MVC   VOLSRWRK,X'24'(R5)     Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+47(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\nPUTVOL2  DS    0H                     Is volser in the other places?\n         TM    X'34'(R5),X'F0'        Is a volser here, or a counter?\n         BNZ   PUTVOL3                Nonzero. Must be a volser.\n         B     PUTVOL4                Zeros at beginning, it's counter.\nPUTVOL3  DS    0H                     Since it's a volser, then\n*        MVC   LINE+54(6),X'3A'(R5)      we must report what it is.\n         MVC   VOLSRWRK,X'3A'(R5)     Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+54(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\nPUTVOL4  DS    0H\n* ------------------------------------------------------------------- *\nMESTEST  DS    0H                     Test for pending tape mounts.\n         TM    X'22'(R5),X'01'        Is there a mount pending?\n         BZ    NOMES00                No. Don't report one.\n         MVC   LINE+6(5),=C'*MNT*'    Yes. Show unit needs a mount.\n* ------  Mounts out of order?  -  below\n         TM    X'06'(R5),X'40'        Mounts out of order?\n         BO    MOUNTD                 No. They were done in order.\nNOTMTD   DS    0H                     Yes. Mount was already done.\n         MVC   LINE+6(5),BLANKS       So don't report we still need one\nMOUNTD   DS    0H\n* ------  Mounts out of order?  -  above\nNOMES00  DS    0H                     Now put out output line.\n         TM    FLAG1,X'01'            Are we only displaying mounts?\n         BZ    NOMES01                No. Just print this line anyway.\n         CLC   LINE+6(5),=C'*MNT*'    Yes. See if this is a mount.\n         BNE   LOOPJUMP               Not a mount. Don't display line.\nNOMES01  DS    0H                     Now put out output line.\n         APUT  LINE,95\nLOOPJUMP DS    0H\n         L     R8,SAVER8A             Restore work register.\n         ST    R4,TESTCNT             Decremented ULUT entry count.\n         MVC   LINE,LINE-1            Clear line for next UCB report.\n         LA    R3,X'C'(,R3)           Go to next ULUT entry.\n         BCT   R4,LOOPUCB             Loop proper number of times,\n         B     EXIT0                  And fall through when done.\n* ------------------------------------------------------------------- *\nEXIT0    MVI   RETCODE+3,0            Reset return code to 0 here.\nEXIT     L     R2,RETCODE             Load whatever return code we had.\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         DROP  R9\n         LR    R15,R2                 Reload proper return code.\n         LM    R0,R12,20(R13)         Reload registers,\n         L     R14,12(,R13)\n         BR    R14                    And get out.\n         SPACE\n* ------------------------------------------------------------------- *\n*                 S  U  B  R  O  U  T  I  N  E  S                     *\n* ------------------------------------------------------------------- *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R7                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n*            U N C H A N G E D    C O N S T A N T S                   *\n* ------------------------------------------------------------------- *\n         LTORG\nMESSAGET DC    C'     UCBTAPE - V1.2 - DISPLAY TAPE MOUNTS AND ONLINE T-\n               APE DRIVES'\nMESSAGEU DC    C'     -------   ----   ------- ---- ------ --- ------ -X\n               --- ------'\nMESSGSUB DC    C' Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol x\n               LastVl Ext Addr'\nMESSGSUU DC    C' ---- ----- ------ ---- ---- -------- -------- ------ X\n               ------ --------'\nMASK7    DC    XL7'40202020202120'\nMASK9    DC    XL9'402020202020202120'\nBLANKS   DC    CL16' '\n         DC    0D'0'\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'03',C'3400'\n         DC    X'82',C'3423'\n         DC    X'80',C'3480'\n         DC    X'81',C'3490'\n         DC    X'83',C'3590'\n         DC    X'0000000000'\n* ---   Convert most unprintables for VOLSER names into blanks.   --- *\nTRTBL0   DS    0D                                                       06685\n         DC    XL16'40404040404040404040404040404040'                   06686\n         DC    XL16'40404040404040404040404040404040'                   06687\n         DC    XL16'40404040404040404040404040404040'                   06688\n         DC    XL16'40404040404040404040404040404040'                   06689\n         DC    XL16'40404040404040404040404040404040'                   06690\n         DC    XL16'40404040404040404040404040404040'                   06691\n         DC    XL16'404040404040404040404040406D4040'                   06692\n         DC    XL16'40404040404040404040407B7C404040'                   06693\n         DC    XL16'40818283848586878889404040404040'                   06694\n         DC    XL16'40919293949596979899404040404040'                   06695\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'                   06696\n         DC    XL16'40404040404040404040404040404040'                   06697\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'                   06698\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'                   06699\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'                   06700\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                   06701\n* ------------------------------------------------------------------- *\n*            G E T M A I N E D    W O R K    A R E A                  *\n* ------------------------------------------------------------------- *\nWORK     DSECT\n         DS    18F                Save area.\nCVDAREA  DS    D                  Work area for CVD instruction.\nPARMPTR  DS    F                  Save parm pointer.\nRETCODE  DS    F                  Return code - default is 12.\nUCBADDRS DS    F                  Address of UCB returned from ULUT.\nHEXSAVE  DS    3F                 Save area for HEX macro.\nSAVER0A  DS    F                  Save work register R0 for IBM macros.\nSAVER7A  DS    F                  Save R7 during subroutine execution.\nSAVER8A  DS    F                  Save work register R8.\nUCBCEADR DS    F                  Address of UCB COMMON EXTENSION\nUCBPRADR DS    F                  Address of UCB PREFIX\nDCEADDR  DS    F                  Address of DEVICE CLASS EXTENSION\nSAVEDEVT DS    F                  Save 4 character device type.\nTOTCOUNT DS    F                  Save total number of ULUT entries.\nTESTCNT  DS    F                  Save decremented number of entries.\nFLAG1    DS    X                  Result of scanning parm.\n*              X'01'              Only show UCB's needing tape mounts.\nVOLSRWRK DS    CL6                Work area to scrub a volser field.\nPARMCHAR DS    C                  Work area to store parm character.\n         DS    X                  Fill character for LINE.\nLINE     DS    CL100              Make sure output line is big enough.\nWORKINIT EQU   *-WORK\n         DS    0D\nWORKLEN  EQU   *-WORK             Aligned length for GETMAIN/FREEMAIN.\n* ------------------------------------------------------------------- *\nUCB      DSECT\n         IEFUCBOB\n         SPACE\n         YREGS\n         END   ENTRY0\n* ------------------------------------------------------------------- *\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCBTYPE": {"ttr": 17927, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x01\\x01\\x12)\\x8f\\x01\\x15\\x01\\x9f\\x181\\x05\\x17\\x00U\\x00\\x00\\xe4\\xc1\\xf9\\xf0\\xf7\\xf4\\xe7@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2015-01-19T18:31:01", "lines": 1303, "newlines": 85, "modlines": 0, "user": "UA9074X"}, "text": "UCBTYPE  TITLE 'UCBTYPE - DISPLAY DEFINED I/O DEVICES USING ULUT'\n********************************************************************\n*     'UCBTYPE - DISPLAY DEFINED DEVICES USING UCB LOOKUP TABLE    *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   March 12, 2014.\n*\n*        DATE UPDATED.   December 23, 2014  by John Hamlet and\n*                                              Sam Golob\n*\n*                        January 19, 2015   remove z/OS level\n*                                           dependency\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        PURPOSE.\n*\n*            This TSO command is a display of\n*            the number of defined devices, by type,\n*            also showing the number of devices online,\n*            by type.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            UCBTYPE        (no parameters currently supported)\n*\n*\n*        DESCRIPTION.\n*\n*            This program reports on the \"heading fields\" of the\n*            ULUT, and then it scans through the ULUT table entries\n*            to re-count the individual UCB's and also figure out\n*            which ones are online.  The result is similar to a\n*            DCQ (Device Class Queue) display, but it is very\n*            accurate, having come from \"the horse's mouth\", or\n*            in other words, from the real source of the data.\n*\n*            The unique thing about this TSO command, is that\n*            it does not acquire a copy of the UCB's but it\n*            acquires \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed twice, using this method to look up UCB's\n*            is not recommended by IBM.  But if you keep up\n*            with the changes, you can keep this program\n*            working.  The ULUT tells you which version it is.\n*            Currently, they are called Type 1, or Type 2, or\n*            Type 3.  Type 2 started with z/OS 1.7.  Type 3\n*            started with z/OS 2.2, and was moved into 64-bit\n*            storage.  Therefore the Type 3 ULUT has to be\n*            accessed in 64-bit mode.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write programs\n*            that use it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*            Inspiration:  Lee Conyers  CBT File 221.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    ESA 5.2.2 thru z/OS 2.2 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2014/03/13 - V1.1 - Display UCB device type counts\n*                      in hex and decimal.\n*\n*        2014/03/13 - V1.2 - Display addresses of control blocks\n*                      needed to address the ULUT and also give\n*                      an indication of how to get there, in\n*                      \"LOOK format\" from CBT File 264, LOOK\n*                      program.\n*\n*                      J10 is virtual address of CVT pointed to\n*                           by address at HEX 10.\n*                      J+7C is the CVTIXAVL pointed to at address\n*                           X'7C' off the CVT.\n*                      J+D0 is the IOVT address pointed to at X'D0'\n*                           off the CVTIXAVL.\n*                      J+8  is the ULUT address pointed to at X'08'\n*                           off the IOVT.\n*\n*        2014/12/23 - V1.3 - z/OS 2.2 modifications for ULUT\n*                            Type 3 which is in 64-bit storage.\n*                            Display the 64-bit ULUT address.\n*\n*        2015/01/19 - V1.3 - PTF UY90741,0,2 retrofits the ULUT\n*                            version 3 to z/OS 2.1 and 1.13.  Code\n*                            modified not to check for z/OS level.\n*                            Criterion is IOVT+8 having fullword 0,\n*                            then IOVT+X'1B8' contains 64-bit ULUT\n*                            address, and ULUT is dealt with in\n*                            64-bit mode.  Otherwise ULUT is 31-bit.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT     31-bit mode only\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDIOVT\nIOVT     DSECT                         IOS Vector Table          ESA41\n         DS    C'IOVT'\n         DS    H'476'                  Length of IOVT            RS1106\n         DS    XL2\nIOVTULUT DS    V(ULUT)                 UCB LOOK-UP TABLE\n         DS    3F\nIOVTCDA  DS    V(CDA)                  Config Data Area\n         DS    1F                      ???\n         DS    A                       IASC ??\n         DS    A                       IOS PIN QUEUE HEADERS\n         DS    A                       IOS PIN QUEUE ELEMENTS\n         DS    1F                      ???\n         DS    A                       TQE\n         DS    6F                      ???\n         DS    A                       CSC\n         DS    1F                      ???\n         DS    A                       IOS 31 BIT DST ENTRIES\n         DS    A                       IOS 24 BIT DST ENTRIES\n         DS    1F                      ???\n         DS    A                       IOS UCB SERVICES PC RTN\n         DS    A                       IODE\n         DS    3F                      ???\n         DS    A                       IOS HASH\n         DS    A                       IOS UCB HASH COLISIONS\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    4F                      ???\n         DS    A                       CAPT\n         DS    2F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       IOS CAPTURE UCB SERVICE\n         DS    A                       TRCB\n         DS    2F                      ???\n         DS    1F                      ???\n         DS    A                       MGFQ\n         DS    A                       CMVT\n         DS    A                       CPCT\n         DS    1F                      ???\n         DS    1F                      ???\n         DS    A                       IXSD\n         DS    CL8'SYSIOS01'\n         DS    6F                      ???\n         DS    A                       QDIO\n         DS    1F                      ???\n         DS    A                       SAUT\n         DS    4F                      ???\n         DS    A                       IOS PURGE WORK AREAS\nIOVTFLG1 DS    X                       IOVT-Flag\nIOVTMIDAW EQU   X'08'                  MIDAW ON?\n         DS    XL3                     ???\n         DS    A                       CCAP\n         ORG   IOVT+440                0x1B8                     JH1214\nIOVT3LUT DS    D                       UCB V3 look-up table      JH1214\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDULU3\nULU3     DSECT                         UCB Look-up Table\n         DS    C'ULUT'\nULU3VERS DS    X                       version 3                 JH1214\n         DS    AL1                     Subpool\n         DS    XL2                     <filler>\n         DS    F                       <filler>\n         DS    F                       <filler>\nULU31ST  DS    D                       FIRST LOOK-UP ENTRY (V3)\n         DS    XL2                     <filler>\n         DS    XL2                     <filler>\nULU3UCBC DS    F                       Total number of LOOK-UP Entries\nULU3TAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULU3COMM DS    F'032'                  number of COMM LOOK-UP Entries\nULU3DASD DS    F'256'                  number of DASD LOOK-UP Entries\nULU3DISP DS    F'128'                  number of DISP LOOK-UP Entries\nULU3UREC DS    F'032'                  number of UREC LOOK-UP Entries\nULU3CHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULU3CTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULU3+264\nUL3ENTRY DSECT                         UCB LOOK-UP ENTRY\nUL3EDEVN DS    X'000D'                 DEVICE NUMBER\nUL3EFLGS DS    X'4000'                 Flags\nUL3EDYN   EQU  X'40'                   Dynamic UCB\nUL3ESEQN DS    XL2                     ?\n         DS    XL2                     ?\nUL3EUCBP DS    V(UCBOB)                UCB ADDRESS\nUL3ELEN  EQU   *-UL3ENTRY\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         IOSDULUT\n         IOSDULU2\n         IOSDULU3\n         CVT      DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\nUCBTYPE  CSECT\nUCBTYPE  RMODE ANY\nUCBTYPE  AMODE 31\n         USING *,R10,R11,R12\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'UCBTYPE'\n         DC    CL6' V1.3 '\n         DC    CL16'ULUT DCQ LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base registers.\n         LA    R11,4095(,R10)\n         LA    R11,1(,R11)\n         LA    R12,4095(,R11)\n         LA    R12,1(,R12)\n         LR    R2,R1                  Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area\n         XC    0(WORKLEN-200,R1),0(R1)        Clear work area\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n*\nINITCON  DS    0H                     Zero counters\n         XC    CNTTAPE,CNTTAPE\n         XC    CNTCOMM,CNTCOMM\n         XC    CNTDASD,CNTDASD\n         XC    CNTDISP,CNTDISP\n         XC    CNTUREC,CNTUREC\n         XC    CNTCHAR,CNTCHAR\n         XC    CNTCTCA,CNTCTCA\n         XC    ONLTAPE,ONLTAPE\n         XC    ONLCOMM,ONLCOMM\n         XC    ONLDASD,ONLDASD\n         XC    ONLDISP,ONLDISP\n         XC    ONLUREC,ONLUREC\n         XC    ONLCHAR,ONLCHAR\n         XC    ONLCTCA,ONLCTCA\n         XC    OSLVLSW6,OSLVLSW6      Clear image of CVTOSLV6 from CVT.\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R2,16                  CVT\n         ST    R2,STORCVT             Store value for display later.\n         USING CVTMAP,R2\n         MVC   OSLVLSW6,CVTOSLV6      Copy relevant OS level switch\n         DROP  R2\n         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM\n         ST    R3,STORIXAV            Store for display later.\n         L     R3,X'D0'(,R3)          IOS Vector Table\n         ST    R3,STORIOVT            Store for display later.\n         L     R6,8(,R3)              Check 31-bit ULUT address\n         LTR   R6,R6                  Is it zero?\n         BNZ   GETULUN2               No. This is Type 2 or less\n         B     GETULUY2               Yes. We have 64-bit ULUT.\nGETULUY2 DS    0H\n         OI    OSLVLSW6,X'40'         Indicate ULUT address is 64-bit\n         LLGTR R3,R3                  Clear 64-bit hi-area\n         LLGTR R4,R4\n         LLGTR R7,R7                  <<<< ADDED >>>>\n         LLGTR R9,R9                  <<<< ADDED >>>>\n         LLGTR R10,R10                <<<< ADDED >>>>\n         LLGTR R12,R12                <<<< ADDED >>>>\n         LG    R4,X'1B8'(,R3)         Pick up ULUT V3 address\n         SAM64\n         LGR   R3,R4                  Reload R3 with ULUT address\n         STG   R4,STORULUT            Doubleword address\n         B     GETULUN3               Skip 31-bit stuff\nGETULUN2 DS    0H                     31-bit mode code. Type <=2.\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Point both regs to ULUT\n         ST    R4,STORULUT\nGETULUN3 DS    0H                     Get here in either address mode.\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out. Code 12.\n* ------------------------------------------------------------------ *\n         MVC   ULUTTYPE(1),4(R3)      Store the ULUT type.\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n         TM    OSLVLSW6,X'40'         64-bit ULUT here?\n         BNO   GETULEX2               No. Exit.\n         SAM64                        Need 64-bit mode for compare.\n         MVC   ULUTTYPE(1),4(R3)      Save off the ULUT type field.\n         CLI   4(R3),X'03'            Is it ULUT Type 3?\n         BE    ULUTTYP3               Yes. Start table entry scan.\n         SAM31                        Back to 31-bit mode.\nGETULEX2 DS    0H\n* ----------------------------------- Insert test for future types here\n         B     EXIT\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     This practice appears to be relatively harmless if we only     *\n*     DISPLAY the UCB and don't try to modify it.  Also, during a    *\n*     configuration change, you might get a S0C4 from these          *\n*     programs, but they will run fine a minute later.  They are     *\n*     primarily for display only.                                    *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 2.2.  So it is really quite stable, so far,      *\n*      as long as we code for all the current ULUT types.            *\n*                                                                    *\n*     Summary:                                                       *\n*                                                                    *\n*     The ULUT table has been changed twice by IBM, thus far:        *\n*      Type 1:  ESA 4.x  thru z/OS 1.7                               *\n*      Type 2:  z/OS 1.7 thru z/OS 2.1                               *\n*      Type 3:  z/OS 2.2 ....    (table is now in 64-bit storage)    *\n*               z/OS 2.1  with UA90741 applied                       *\n*               z/OS 1.13 HBB7780 with UA90740 applied               *\n*               z/OS 1.13 JBB778H with UA90742 and UA90740 applied   *\n*                                                                    *\n*     At the ULUT V.3 level the ULUT (UCB Lookup Table) has been     *\n*      moved into 64-bit storage, so even to get to the beginning    *\n*      of the table, in order to find out the table type, is now     *\n*      different, but not too difficult.  In the (OCO) macro         *\n*      IOSDIOVT, there are two pointer locations to the ULUT.        *\n*      IOVT+8 is a fullword pointer.  IOVT+X'1B8' is a doubleword    *\n*      pointer.  If IOVT+8 for a fullword, is zeroes, then this      *\n*      shows that IOVT+X'1B8' is the valid pointer, it points to     *\n*      a doubleword address, and you have to address the ULUT        *\n*      in 64-bit mode.                                               *\n*                                                                    *\n*     One test is run.  If IOVT+8 for a fullword is zeroes, then     *\n*      IOVT+X'1B8' is assumed to be valid, and flag OSLVLSW6, which  *\n*      had previously been copied from CVTOSLV6 in the CVT, is       *\n*      OR'ed to X'40', which would normally indicate the presence    *\n*      of z/OS 2.2.  This indicates to the program that the ULUT     *\n*      is in 64-bit mode, even at lower levels, with the application *\n*      of PTFs UA90741, or UA90740 possibly with UA90742.            *\n*                                                                    *\n* ------------------------------------------------------------------ *\nULUTTYP1 DS    0H\n         L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         ST    R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM1\nULUTTYP2 DS    0H\n         L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         ST    R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM2\nULUTTYP3 DS    0H\n         LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.\n         L     R4,X'1C'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         STG   R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM3\n* --------------------------- Insert displacement for future types.  *\nDISPNUM1 DS    0H              Format header fields from ULUT Type 1\n         L     R3,STORULUT\n         BAL   R7,PRTHEAD      Display all the header material.\n         USING ULUT,R3\n         MVC   LINE,LINE-1     Display ULUT header fields.\n         HEX   LINE,4,ULUTUCBC\n         HEX   LINE+9,4,ULUTTAPE\n         HEX   LINE+18,4,ULUTCOMM\n         HEX   LINE+27,4,ULUTDASD\n         HEX   LINE+36,4,ULUTDISP\n         HEX   LINE+45,4,ULUTUREC\n         HEX   LINE+54,4,ULUTCHAR\n         HEX   LINE+63,4,ULUTCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULUTUCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULUTTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULUTCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULUTDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULUTDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULUTUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULUTCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULUTCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\n         DROP  R3\nDISPNUM2 DS    0H              Format header fields from ULUT Type 2\n         L     R3,STORULUT\n         BAL   R7,PRTHEAD      Display all the header material\n         USING ULU2,R3\n         MVC   LINE,LINE-1     Display ULUT header fields.\n         HEX   LINE,4,ULU2UCBC\n         HEX   LINE+9,4,ULU2TAPE\n         HEX   LINE+18,4,ULU2COMM\n         HEX   LINE+27,4,ULU2DASD\n         HEX   LINE+36,4,ULU2DISP\n         HEX   LINE+45,4,ULU2UREC\n         HEX   LINE+54,4,ULU2CHAR\n         HEX   LINE+63,4,ULU2CTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULU2UCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULU2TAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULU2COMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULU2DASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULU2DISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULU2UREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULU2CHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULU2CTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\n         DROP  R3\nDISPNUM3 DS    0H              Format header fields from ULUT Type 2\n         TM    OSLVLSW6,X'40'         Is the o.s. z/OS 2.2 or above?\n         BNO   NULUVER3               ULUT Type 2 or less, 31-bit mode.\n         SAM64                        Need 64-bit mode\n         LLGTR R3,R3\n         LG    R3,STORULUT\n         SAM31                        Need 31-bit mode for print.\n         BAL   R7,PRTHEAD             Display all the header material.\n         SAM64                        Need 64-bit mode.\n         USING ULU3,R3\n         MVC   ULV3UCBC,ULU3UCBC      In 64-bit mode, move\n         MVC   ULV3TAPE,ULU3TAPE        quantities to areas\n         MVC   ULV3COMM,ULU3COMM          that are in 31-bit\n         MVC   ULV3DASD,ULU3DASD            mode.\n         MVC   ULV3DISP,ULU3DISP\n         MVC   ULV3UREC,ULU3UREC\n         MVC   ULV3CHAR,ULU3CHAR\n         MVC   ULV3CTCA,ULU3CTCA\n         SAM31                        Go to 31-bit mode.\n         MVC   LINE,LINE-1            Display ULUT header fields.\n         HEX   LINE,4,ULV3UCBC\n         HEX   LINE+9,4,ULV3TAPE\n         HEX   LINE+18,4,ULV3COMM\n         HEX   LINE+27,4,ULV3DASD\n         HEX   LINE+36,4,ULV3DISP\n         HEX   LINE+45,4,ULV3UREC\n         HEX   LINE+54,4,ULV3CHAR\n         HEX   LINE+63,4,ULV3CTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULV3UCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULV3TAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULV3COMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULV3DASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULV3DISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULV3UREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULV3CHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULV3CTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\nNULUVER3 DS    0H\n         DROP  R3\nLOOPSET  DS    0H              Set up loop thru all UCB's.\n         TM    OSLVLSW6,X'40'  Is system ACTUALLY z/OS 2.2 or above?\n         BNO   NLUPULU3               No.\n         SAM64\n         LLGTR R5,R5           Clear 64-bit hi-area\n         LLGTR R3,R3           Clear 64-bit hi-area\n         LG    R3,SAVER3A      Address of 1st table entry - 64bit\n         B     LOOPUCB\nNLUPULU3 DS    0H\n         L     R3,SAVER3A      Address of 1st table entry - 31bit\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\nLOOPUCB  DS    0H            Loop thru table entries, covering\n*                             all of the defined UCBs.\n*                            Do this for the number of table entries.\n         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM64                 No.\n         SAM64\nNSAM64   DS    0H\n         L     R5,8(,R3)              Get address of this unit's UCB.\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM31                 No.\n         SAM31                        For z/OS 2.2 and above, SAM31.\nNSAM31   DS    0H\n         ST    R5,UCBADDRS            Save the address for reporting.\n         USING UCBOB,R5               Addressability to UCB.\n         CLI   UCBTBYT3,X'80'         Is this UCB for TAPE?\n         BE    LOOPTAPE               No. Look for the next one.\n         CLI   UCBTBYT3,X'41'         Is this UCB for CTCA?\n         BE    LOOPCTC                No. Look for the next one.\n         CLI   UCBTBYT3,X'40'         Is this UCB for COMM?\n         BE    LOOPCOMM               No. Look for the next one.\n         CLI   UCBTBYT3,X'20'         Is this UCB for DASD?\n         BE    LOOPDASD               No. Look for the next one.\n         CLI   UCBTBYT3,X'10'         Is this UCB for DISP?\n         BE    LOOPDISP               No. Look for the next one.\n         CLI   UCBTBYT3,X'08'         Is this UCB for UREC?\n         BE    LOOPUREC               No. Look for the next one.\n         CLI   UCBTBYT3,X'04'         Is this UCB for CHAR?\n         BE    LOOPCHAR               No. Look for the next one.\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -   Count UCB's.\nLOOPTAPE DS    0H\n         L     R6,CNTTAPE\n         LA    R6,1(,R6)\n         ST    R6,CNTTAPE\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLTAPE\n         LA    R6,1(,R6)\n         ST    R6,ONLTAPE\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCTC  DS    0H\n         L     R6,CNTCTCA\n         LA    R6,1(,R6)\n         ST    R6,CNTCTCA\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCTCA\n         LA    R6,1(,R6)\n         ST    R6,ONLCTCA\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCOMM DS    0H\n         L     R6,CNTCOMM\n         LA    R6,1(,R6)\n         ST    R6,CNTCOMM\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCOMM\n         LA    R6,1(,R6)\n         ST    R6,ONLCOMM\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPDASD DS    0H\n         L     R6,CNTDASD\n         LA    R6,1(,R6)\n         ST    R6,CNTDASD\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLDASD\n         LA    R6,1(,R6)\n         ST    R6,ONLDASD\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPDISP DS    0H\n         L     R6,CNTDISP\n         LA    R6,1(,R6)\n         ST    R6,CNTDISP\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLDISP\n         LA    R6,1(,R6)\n         ST    R6,ONLDISP\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPUREC DS    0H\n         L     R6,CNTUREC\n         LA    R6,1(,R6)\n         ST    R6,CNTUREC\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLUREC\n         LA    R6,1(,R6)\n         ST    R6,ONLUREC\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCHAR DS    0H\n         L     R6,CNTCHAR\n         LA    R6,1(,R6)\n         ST    R6,CNTCHAR\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCHAR\n         LA    R6,1(,R6)\n         ST    R6,ONLCHAR\n         B     LOOPJUMP\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H\n         TM    OSLVLSW6,X'40'             Run time test.\n         BNO   NSAM31A\n         SAM64\nNSAM31A  DS    0H\n         LA    R3,X'C'(,R3)           Go to next ULUT entry\n         BCT   R4,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n*\n* ---- At end of ULUT, fall thru to here.\n*\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM31B                No.\n         SAM31                        For z/OS 2.2 and above, SAM31.\nNSAM31B  DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   All UCB's have now been scanned using the ULUT table entries.   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   LINE,LINE-1            Insert a few blank lines.\n         APUT  LINE,18\n         MVC   LINE,LINE-1\n         APUT  LINE,18\nCOUNDEFD DS    0H                     Display scanned values in Hex.\n         MVC   LINE,LINE-1\n         MVC   LINE(8),=C'Scanned:'\n         HEX   LINE+9,4,CNTTAPE\n         HEX   LINE+18,4,CNTCOMM\n         HEX   LINE+27,4,CNTDASD\n         HEX   LINE+36,4,CNTDISP\n         HEX   LINE+45,4,CNTUREC\n         HEX   LINE+54,4,CNTCHAR\n         HEX   LINE+63,4,CNTCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal and display.\n         MVC   LINE(8),=C'------- '\n         L     R8,CNTTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,CNTCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,CNTDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,CNTDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,CNTUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,CNTCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,CNTCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n         MVC   LINE,LINE-1\n         APUT  LINE,18\nCOUNONLN DS    0H                     Display online values in Hex.\n         MVC   LINE,LINE-1\n         MVC   LINE(7),=C'Online:'\n         HEX   LINE+9,4,ONLTAPE\n         HEX   LINE+18,4,ONLCOMM\n         HEX   LINE+27,4,ONLDASD\n         HEX   LINE+36,4,ONLDISP\n         HEX   LINE+45,4,ONLUREC\n         HEX   LINE+54,4,ONLCHAR\n         HEX   LINE+63,4,ONLCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal and display.\n         MVC   LINE(7),=C'------ '\n         L     R8,ONLTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ONLCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ONLDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ONLDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ONLUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ONLCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ONLCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    Now we're done with displaying all the totals. So exit.        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DROP  R5\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to convert hex values to decimal.                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDECCONV  DS    0H                  Convert fullword hex to decimal.\n*                                  R8 has the fullword to be converted\n         ST    R7,SAVER7D\n         CVD   R8,CVDAREA          Convert it to printable\n         MVC   DECOUT,MASK10       Move in the mask\n         ED    DECOUT,CVDAREA+3    Make it pretty\n*        APUT  NUMOUT,9\n         L     R7,SAVER7D\n         BR    R7\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display top of the report.                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPRTHEAD  DS    0H                     Display Report Header Info.\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   ULADDR0                ULUT Type 2 or less, 31-bit mode.\n         SAM31\nULADDR0  DS    0H\n         ST    R7,SAVER7E\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         MVC   LINE,LINE-1\n         MVC   LINE+20(27),=C'* Hex and Decimal Display *'\n         APUT  LINE,56\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'ULUT Ver: '\n         HEX   LINE+11,1,ULUTTYPE\n         APUT  LINE,20\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'CVT Addr: '\n         HEX   LINE+11,4,STORCVT\n         MVC   LINE+21(4),=C'J10 '\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'CVTIXAVL: '\n         HEX   LINE+11,4,STORIXAV\n         MVC   LINE+21(4),=C'J+7C'\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'IOVT Adr: '\n         HEX   LINE+11,4,STORIOVT\n         MVC   LINE+21(4),=C'J+D0'\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'ULUT Adr: '\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   ULADDR1                ULUT Type 2 or less, 31-bit mode.\n         HEX   LINE+11,4,STORULUT     Full 64-bit ULUT address\n         HEX   LINE+20,4,STORULUT+4\n         MVI   LINE+19,X'6D'          Underscore\n         B     ULADDR1E\nULADDR1  DS    0H\n         HEX   LINE+11,4,STORULUT\n         MVC   LINE+21(4),=C'J+8 '\nULADDR1E DS    0H\n         APUT  LINE,40\n         MVC   LINE,LINE-1\n         APUT  LINE,16\n         MVC   LINE,LINE-1\n         MVC   LINE(17),=C'From ULUT Header:'\n         APUT  LINE,20\n         MVC   LINE,LINE-1\n         MVC   LINE(17),=C'---- ---- ------ '\n         APUT  LINE,20\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n         L     R7,SAVER7E\n         BR    R7\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              UCBTYPE - V1.3 - DEFINED DEVICE TOTALS'\nMESSAGEU DC    C'              -------   ----   ------- ------ ------'\nMESSGSUB DC    C'Total    TAPE     COMM     DASD     DISP     UREC     X\n               CHAR     CTCA'\nMESSGSUU DC    C'-----    ----     ----     ----     ----     ----     X\n               ----     ----'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nMASK10   DC    XL10'40202020202020202120'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nUCBADDRS DS    F                      Copy UCB address here for display\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER3A  DS    D                      Save R3 doubleword\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER7D  DS    F                      Save R7\nSAVER7E  DS    F                      Save R7\nSAVER8A  DS    F                      Save R8\nSAVEDEVT DS    F                      Copy raw UCB device type value\nTOTCOUNT DS    F                      Total number of ULUT entries\nTESTCNT  DS    F                      Test this number as they decrease\nCYLCNT   DS    PL4                    Saved cyliner count (not used)\nOSLVLSW6 DS    X                      z/OS 2.2 or above?\nHBB77A0  EQU   OSLVLSW6,64            X'40'\nULUTTYPE DS    X                      Stored ULUT type\nSTORCVT  DS    F\nSTORULUT DS    D                      64-bit location\nSTORIXAV DS    F\nSTORIOVT DS    F\n         DS    C\nDECOUT   DS    0CL10\n         DS    CL2\nNUMOUT   DS    CL8\nCNTTAPE  DS    F                      UCB3TAPE EQU   X'80'\nCNTCOMM  DS    F                      UCB3COMM EQU   X'40'\nCNTDASD  DS    F                      UCB3DACC EQU   X'20'\nCNTDISP  DS    F                      UCB3DISP EQU   X'10'\nCNTUREC  DS    F                      UCB3UREC EQU   X'08'\nCNTCHAR  DS    F                      UCB3CHAR EQU   X'04'\nCNTCTCA  DS    F                      UCB3CTC  EQU   X'41'\nONLTAPE  DS    F                      UCB3TAPE EQU   X'80'\nONLCOMM  DS    F                      UCB3COMM EQU   X'40'\nONLDASD  DS    F                      UCB3DACC EQU   X'20'\nONLDISP  DS    F                      UCB3DISP EQU   X'10'\nONLUREC  DS    F                      UCB3UREC EQU   X'08'\nONLCHAR  DS    F                      UCB3CHAR EQU   X'04'\nONLCTCA  DS    F                      UCB3CTC  EQU   X'41'\nULV3UCBC DS    F\nULV3TAPE DS    F\nULV3COMM DS    F\nULV3DASD DS    F\nULV3DISP DS    F\nULV3UREC DS    F\nULV3CHAR DS    F\nULV3CTCA DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         IECDIOCM\n         IOSDIOVT\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCBTYPE$": {"ttr": 18440, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00B\\x01\\x120/\\x01\\x146/\\x08S\\x00\\x1d\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2012-10-28T00:00:00", "modifydate": "2014-12-28T08:53:42", "lines": 29, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT490.FILE731    <== IOSDULU*\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(UCBTYPE)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   UCBTYPE\n SETSS1  CB490731\n SETCODE AC(0)\n NAME    UCBTYPE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBTYPE1": {"ttr": 18442, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x08\\x01\\x12)\\x8f\\x01\\x14\\x07/\\t4\\x03\\xd5\\x00U\\x00\\x00\\xe3\\xe8\\xd7\\xc5\\xf1`\\xf2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2014-03-13T09:34:08", "lines": 981, "newlines": 85, "modlines": 0, "user": "TYPE1-2"}, "text": "UCBTYPE  TITLE 'UCBTYPE - DISPLAY DEFINED I/O DEVICES USING ULUT'\n********************************************************************\n*     'UCBTYPE - DISPLAY DEFINED DEVICES USING UCB LOOKUP TABLE    *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   March 12, 2014.\n*\n*        DATE UPDATED.\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        DESCRIPTION.\n*\n*            This TSO command is a display of\n*            the number of defined devices, by type.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            UCBTYPE        (no parameters currently supported)\n*\n*\n*        NOTE.\n*\n*            This program reports on the \"heading fields\" of the\n*            ULUT, and then it scans through the ULUT table entries\n*            to re-count the individual UCB's and also figure out\n*            which ones are online.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write a program\n*            that uses it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*            Inspiration:  Lee Conyers  CBT File 221.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    ESA 5.2.2 thru z/OS 1.13 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2014/03/13 - V1.1 - Display UCB device type counts\n*                      in hex and decimal.\n*\n*        2014/03/13 - V1.2 - Display addresses of control blocks\n*                      needed to address the ULUT and also give\n*                      an indication of how to get there, in\n*                      \"LOOK format\" from CBT File 264, LOOK\n*                      program.\n*\n*                      J10 is virtual address of CVT pointed to\n*                           by address at HEX 10.\n*                      J+7C is the CVTIXAVL pointed to at address\n*                           X'7C' off the CVT.\n*                      J+D0 is the IOVT address pointed to at X'D0'\n*                           off the CVTIXAVL.\n*                      J+8  is the ULUT address pointed to at X'08'\n*                           off the IOVT.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n         IOSDULUT\n         IOSDULU2\n* ------------------------------------------------------------------- *\nUCBTYPE  CSECT\nUCBTYPE  RMODE ANY\nUCBTYPE  AMODE 31\n         USING *,R10,R11,R12\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'UCBTYPE'\n         DC    CL6' V1.2 '\n         DC    CL16'ULUT DASD LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base registers.\n         LA    R11,4095(,R10)\n         LA    R11,1(,R11)\n         LA    R12,4095(,R11)\n         LA    R12,1(,R12)\n         LR    R2,R1                  Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area\n         XC    0(WORKLEN-200,R1),0(R1)        Clear work area\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n         SPACE\nINITCON  DS    0H                     Zero counters\n         XC    CNTTAPE,CNTTAPE\n         XC    CNTCOMM,CNTCOMM\n         XC    CNTDASD,CNTDASD\n         XC    CNTDISP,CNTDISP\n         XC    CNTUREC,CNTUREC\n         XC    CNTCHAR,CNTCHAR\n         XC    CNTCTCA,CNTCTCA\n         XC    ONLTAPE,ONLTAPE\n         XC    ONLCOMM,ONLCOMM\n         XC    ONLDASD,ONLDASD\n         XC    ONLDISP,ONLDISP\n         XC    ONLUREC,ONLUREC\n         XC    ONLCHAR,ONLCHAR\n         XC    ONLCTCA,ONLCTCA\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R3,16                  CVT\n         ST    R3,STORCVT             Store for display later.\n         L     R3,X'7C'(,R3)          CVTIXAVL - IOCOM\n         ST    R3,STORIXAV            Store for display later.\n         L     R3,X'D0'(,R3)          IOVT\n         ST    R3,STORIOVT            Store for display later.\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Point both regs to ULUT\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out. Code 12.\n         ST    R3,STORULUT            Save ULUT actual address\n* ------------------------------------------------------------------ *\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n* ----------------------------------- Insert test for future types here\n         B     EXIT                   Neither?  Get out. Code 12.\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 1.13.  So it is really quite stable, so far.     *\n* ------------------------------------------------------------------ *\nULUTTYP1 DS    0H\n         L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         ST    R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM1\nULUTTYP2 DS    0H\n         L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         ST    R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM2\n* --------------------------- Insert displacement for future types.  *\nDISPNUM1 DS    0H              Format header fields from ULUT Type 1\n         L     R3,STORULUT\n         BAL   R7,PRTHEAD      Display all the header material.\n         USING ULUT,R3\n         MVC   LINE,LINE-1     Display ULUT header fields.\n         HEX   LINE,4,ULUTUCBC\n         HEX   LINE+9,4,ULUTTAPE\n         HEX   LINE+18,4,ULUTCOMM\n         HEX   LINE+27,4,ULUTDASD\n         HEX   LINE+36,4,ULUTDISP\n         HEX   LINE+45,4,ULUTUREC\n         HEX   LINE+54,4,ULUTCHAR\n         HEX   LINE+63,4,ULUTCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULUTUCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULUTTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULUTCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULUTDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULUTDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULUTUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULUTCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULUTCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\n         DROP  R3\nDISPNUM2 DS    0H              Format header fields from ULUT Type 2\n         L     R3,STORULUT\n         BAL   R7,PRTHEAD      Display all the header material\n         USING ULU2,R3\n         MVC   LINE,LINE-1     Display ULUT header fields.\n         HEX   LINE,4,ULU2UCBC\n         HEX   LINE+9,4,ULU2TAPE\n         HEX   LINE+18,4,ULU2COMM\n         HEX   LINE+27,4,ULU2DASD\n         HEX   LINE+36,4,ULU2DISP\n         HEX   LINE+45,4,ULU2UREC\n         HEX   LINE+54,4,ULU2CHAR\n         HEX   LINE+63,4,ULU2CTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULU2UCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULU2TAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULU2COMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULU2DASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULU2DISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULU2UREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULU2CHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULU2CTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\n         DROP  R3\nLOOPSET  DS    0H              Set up loop thru all UCB's.\n         L     R3,SAVER3A      Restore R3 for UCB scanning.\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\nLOOPUCB  DS    0H            Loop thru table entries, covering\n*                             all of the defined UCBs.\n*                            Do this for the number of table entries.\n         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         L     R5,8(,R3)              Get address of this unit's UCB.\n         ST    R5,UCBADDRS            Save the address for reporting.\n         USING UCBOB,R5               Addressability to UCB.\n         CLI   UCBTBYT3,X'80'         Is this UCB for TAPE?\n         BE    LOOPTAPE               No. Look for the next one.\n         CLI   UCBTBYT3,X'41'         Is this UCB for CTCA?\n         BE    LOOPCTC                No. Look for the next one.\n         CLI   UCBTBYT3,X'40'         Is this UCB for COMM?\n         BE    LOOPCOMM               No. Look for the next one.\n         CLI   UCBTBYT3,X'20'         Is this UCB for DASD?\n         BE    LOOPDASD               No. Look for the next one.\n         CLI   UCBTBYT3,X'10'         Is this UCB for DISP?\n         BE    LOOPDISP               No. Look for the next one.\n         CLI   UCBTBYT3,X'08'         Is this UCB for UREC?\n         BE    LOOPUREC               No. Look for the next one.\n         CLI   UCBTBYT3,X'04'         Is this UCB for CHAR?\n         BE    LOOPCHAR               No. Look for the next one.\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -   Count UCB's.\nLOOPTAPE DS    0H\n         L     R6,CNTTAPE\n         LA    R6,1(,R6)\n         ST    R6,CNTTAPE\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLTAPE\n         LA    R6,1(,R6)\n         ST    R6,ONLTAPE\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCTC  DS    0H\n         L     R6,CNTCTCA\n         LA    R6,1(,R6)\n         ST    R6,CNTCTCA\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCTCA\n         LA    R6,1(,R6)\n         ST    R6,ONLCTCA\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCOMM DS    0H\n         L     R6,CNTCOMM\n         LA    R6,1(,R6)\n         ST    R6,CNTCOMM\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCOMM\n         LA    R6,1(,R6)\n         ST    R6,ONLCOMM\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPDASD DS    0H\n         L     R6,CNTDASD\n         LA    R6,1(,R6)\n         ST    R6,CNTDASD\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLDASD\n         LA    R6,1(,R6)\n         ST    R6,ONLDASD\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPDISP DS    0H\n         L     R6,CNTDISP\n         LA    R6,1(,R6)\n         ST    R6,CNTDISP\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLDISP\n         LA    R6,1(,R6)\n         ST    R6,ONLDISP\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPUREC DS    0H\n         L     R6,CNTUREC\n         LA    R6,1(,R6)\n         ST    R6,CNTUREC\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLUREC\n         LA    R6,1(,R6)\n         ST    R6,ONLUREC\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCHAR DS    0H\n         L     R6,CNTCHAR\n         LA    R6,1(,R6)\n         ST    R6,CNTCHAR\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCHAR\n         LA    R6,1(,R6)\n         ST    R6,ONLCHAR\n         B     LOOPJUMP\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H\n         LA    R3,X'C'(,R3)           Go to next ULUT entry\n         BCT   R4,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   All UCB's have now been scanned using the ULUT table entries.   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   LINE,LINE-1            Insert a few blank lines.\n         APUT  LINE,18\n         MVC   LINE,LINE-1\n         APUT  LINE,18\nCOUNDEFD DS    0H                     Display scanned values in Hex.\n         MVC   LINE,LINE-1\n         MVC   LINE(8),=C'Scanned:'\n         HEX   LINE+9,4,CNTTAPE\n         HEX   LINE+18,4,CNTCOMM\n         HEX   LINE+27,4,CNTDASD\n         HEX   LINE+36,4,CNTDISP\n         HEX   LINE+45,4,CNTUREC\n         HEX   LINE+54,4,CNTCHAR\n         HEX   LINE+63,4,CNTCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal and display.\n         MVC   LINE(8),=C'------- '\n         L     R8,CNTTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,CNTCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,CNTDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,CNTDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,CNTUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,CNTCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,CNTCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n         MVC   LINE,LINE-1\n         APUT  LINE,18\nCOUNONLN DS    0H                     Display online values in Hex.\n         MVC   LINE,LINE-1\n         MVC   LINE(7),=C'Online:'\n         HEX   LINE+9,4,ONLTAPE\n         HEX   LINE+18,4,ONLCOMM\n         HEX   LINE+27,4,ONLDASD\n         HEX   LINE+36,4,ONLDISP\n         HEX   LINE+45,4,ONLUREC\n         HEX   LINE+54,4,ONLCHAR\n         HEX   LINE+63,4,ONLCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal and display.\n         MVC   LINE(7),=C'------ '\n         L     R8,ONLTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ONLCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ONLDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ONLDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ONLUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ONLCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ONLCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    Now we're done with displaying all the totals. So exit.        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DROP  R5\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to convert hex values to decimal.                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDECCONV  DS    0H                  Convert fullword hex to decimal.\n*                                  R8 has the fullword to be converted\n         ST    R7,SAVER7D\n         CVD   R8,CVDAREA          Convert it to printable\n         MVC   DECOUT,MASK10       Move in the mask\n         ED    DECOUT,CVDAREA+3    Make it pretty\n*        APUT  NUMOUT,9\n         L     R7,SAVER7D\n         BR    R7\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display top of the report.                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPRTHEAD  DS    0H                     Display Report Header Info.\n         ST    R7,SAVER7E\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         MVC   LINE,LINE-1\n         MVC   LINE+20(27),=C'* Hex and Decimal Display *'\n         APUT  LINE,56\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'ULUT Ver: '\n         HEX   LINE+11,1,4(R3)\n         APUT  LINE,20\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'CVT Addr: '\n         HEX   LINE+11,4,STORCVT\n         MVC   LINE+21(4),=C'J10 '\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'CVTIXAVL: '\n         HEX   LINE+11,4,STORIXAV\n         MVC   LINE+21(4),=C'J+7C'\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'IOVT Adr: '\n         HEX   LINE+11,4,STORIOVT\n         MVC   LINE+21(4),=C'J+D0'\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'ULUT Adr: '\n         HEX   LINE+11,4,STORULUT\n         MVC   LINE+21(4),=C'J+8 '\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         APUT  LINE,16\n         MVC   LINE,LINE-1\n         MVC   LINE(17),=C'From ULUT Header:'\n         APUT  LINE,20\n         MVC   LINE,LINE-1\n         MVC   LINE(17),=C'---- ---- ------ '\n         APUT  LINE,20\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n         L     R7,SAVER7E\n         BR    R7\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              UCBTYPE - V1.2 - DEFINED DEVICE TOTALS'\nMESSAGEU DC    C'              -------   ----   ------- ------ ------'\nMESSGSUB DC    C'Total    TAPE     COMM     DASD     DISP     UREC     X\n               CHAR     CTCA'\nMESSGSUU DC    C'-----    ----     ----     ----     ----     ----     X\n               ----     ----'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nMASK10   DC    XL10'40202020202020202120'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nUCBADDRS DS    F                      Copy UCB address here for display\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER3A  DS    F                      Save R3\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER7D  DS    F                      Save R7\nSAVER7E  DS    F                      Save R7\nSAVER8A  DS    F                      Save R8\nSAVEDEVT DS    F                      Copy raw UCB device type value\nTOTCOUNT DS    F                      Total number of ULUT entries\nTESTCNT  DS    F                      Test this number as they decrease\nCYLCNT   DS    PL4                    Saved cyliner count (not used)\nSTORCVT  DS    F\nSTORULUT DS    F\nSTORIXAV DS    F\nSTORIOVT DS    F\n         DS    C\nDECOUT   DS    0CL10\n         DS    CL2\nNUMOUT   DS    CL8\nCNTTAPE  DS    F                      UCB3TAPE EQU   X'80'\nCNTCOMM  DS    F                      UCB3COMM EQU   X'40'\nCNTDASD  DS    F                      UCB3DACC EQU   X'20'\nCNTDISP  DS    F                      UCB3DISP EQU   X'10'\nCNTUREC  DS    F                      UCB3UREC EQU   X'08'\nCNTCHAR  DS    F                      UCB3CHAR EQU   X'04'\nCNTCTCA  DS    F                      UCB3CTC  EQU   X'41'\nONLTAPE  DS    F                      UCB3TAPE EQU   X'80'\nONLCOMM  DS    F                      UCB3COMM EQU   X'40'\nONLDASD  DS    F                      UCB3DACC EQU   X'20'\nONLDISP  DS    F                      UCB3DISP EQU   X'10'\nONLUREC  DS    F                      UCB3UREC EQU   X'08'\nONLCHAR  DS    F                      UCB3CHAR EQU   X'04'\nONLCTCA  DS    F                      UCB3CTC  EQU   X'41'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USERMAX": {"ttr": 18950, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x11\\x01\\x055O\\x01\\x19\\x19\\x7f\\x150\\x02\\xfa\\x01\\x87\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-16T15:30:11", "lines": 762, "newlines": 391, "modlines": 0, "user": "SBGOLOB"}, "text": "USERMAX  TITLE 'USERMAX - SET MAX NUMBER OF TSO USERS ALLOWED TO LOGON'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.  APF AUTHORIZED.  YOU NEED TO PUT        *\n*                   THIS COMMAND NAME IN THE ACTIVE IKJEFTE2 TABLE,   *\n*                   OR AUTHORIZE IT SOME OTHER WAY (CBT FILE 185      *\n*                   AND/OR CBT FILE 797).                             *\n*                                                                     *\n*         SYNTAX:   USERMAX nnnn (nnnn is the new value of            *\n*                           TSO maxusers in decimal)                  *\n*                        Values accepted:  0 through 32767            *\n*                                                                     *\n*                   USERMAX (no parameters) will show the current     *\n*                           maximum number of TSO logons allowed.     *\n*                                                                     *\n*                   These will only work if USERMAX is an APF-        *\n*                   authorized TSO command (in the IKJEFTE2 table).   *\n*                                                                     *\n*                   The operator command:  F TSO,USERMAX=nnnn         *\n*                   will also accomplish this, but now we have        *\n*                   another way as well, especially if you can't      *\n*                   reach an operator console.                        *\n*                                                                     *\n*         OUTPUT:   Via PUTLINE interface, using APUT and EPUTL.      *\n*                                                                     *\n*       SAMPLE OUTPUT:    (USERMAX 200)                               *\n*                                                                     *\n*            USERMAX - VER. 1.2 - 07/10/19 - 15.56                    *\n*            --------------------------------------                   *\n*             Change the MAXUSERS number in the IKTTCAST              *\n*             control block.                                          *\n*            Current number of TSO Users:  3                          *\n*            Previous value of MAXUSERS :  100                        *\n*            Value of MAXUSERS reset to :  200                        *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   TO CHANGE THE MAXIMUM NUMBER OF TSO USERS         *\n*                   ALLOWED TO LOGON.                                 *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  JUL 10, 2019                                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*         CHANGES:  1.1 - DEC 12, 09 -  (for program BDMNNOTC)        *\n*                     Fixed messages, better numeric verification.    *\n*                                                                     *\n*                   1.2 - DEC 14, 09 -                                *\n*                     Better comments, title subroutine, cut out      *\n*                     unnecessary code. Put non-numeric test in       *\n*                     the proper place, to not cause a S0C7 abend.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                  M A I N L I N E   C O D E\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSERMAX  CSECT\nUSERMAX  AMODE 31\nUSERMAX  RMODE 24\n         USING USERMAX,R12,R11,R10\n         B     BEGINN-*(,R15)\n         DC    CL17'USERMAX VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             Set up base\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)         Second base\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)         Third base\n         LR    R6,R1               PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                  Initialize constants.\n         MVC   NEWNMBIN,=F'0'\n         MVI   NUMFLAG,X'00'\n         MVI   LINEB,X'40'\n* ------------------------------------------------------------------- *\n*  Get old value for MAXUSERS. Do it early on in the program.         *\n* ------------------------------------------------------------------- *\n*  Test if we are APF-authorized - IKTTCAST is in Subpool 231 -       *\n*    which is fetch-protected.  You need APF to even see it.          *\n* ------------------------------------------------------------------- *\n         STM   R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         L     R2,16               CVT\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCAST\n         ST    R5,SAVER5A          Save R5\n         XR    R5,R5               Prepare work register\n         USING TCAST,R3\n         MODESET KEY=ZERO\n         LH    R4,TCASUMAX         Save old number MAX USERS.\n         LH    R5,TCASUSEC         Get current number of TSO users.\n         MODESET KEY=NZERO\n         ST    R5,BINUSERS\n         CVD   R5,CVDWORK          Convert to Decimal\n         MVC   DECUSRNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECUSRNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         MVC   LJUSSTOR,LJUSTWRK   Store number of users for display.\n         MVC   RJUSTWRK,BLANKS     Clear areas for reuse.\n         MVC   LJUSTWRK,BLANKS\n         CVD   R4,CVDWORK          Convert to Decimal\n         MVC   DECOLDNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECOLDNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         L     R5,SAVER5A          Restore R5\n         DROP  R2,R3\n* ------------------------------------------------------------------- *\n* --     Is it TSO?  And run another authorization check.          -- *\n* ------------------------------------------------------------------- *\n* --       You need OPER and ACCT authority to run this, if you    -- *\n* --     comment out the bypass that is after the CHEKAUTH label.  -- *\n* ------------------------------------------------------------------- *\n         L     R1,16               Point to CVT.\n         L     R1,0(,R1)           Point to TCB/ASCB words.\n         L     R9,4(,R1)           Point to TCB.\n         L     R1,X'B4'(,R9)       Point to JSCB.\n         L     R2,X'108'(,R1)      Point to PSCB.\n         LA    R2,0(,R2)           Clear high byte.\n         LTR   R2,R2               Any PSCB?\n         BZ    EOJ4                Get out. Not TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                  TSO Authorization (Oper,Acct)\n         B     CONT0               Bypass authorization check.\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes. Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No. Get out.\n         DROP  R2\n* ------------------------------------------------------------------- *\n* --         Get Parameter - Make sure it is numeric.              -- *\n* ------------------------------------------------------------------- *\nCONT0    DS    0H\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No. Not TSO.\n         L     R1,0(,R6)           Point to Command Buffer.\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out of none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of Command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,EOJ4              Zero. Message.\n         BC    5,EOJ4              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,5                Load Reg for BCT loop. 5 times.\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)                to first nonnull character\n         LA    R8,0                Initialize character count.\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the number\n*--------------------------------  Numeric Test this character - below\n         CLI   0(R7),C'0'\n         BL    FLAGON              Less than 0 ? No good.\n         CLI   0(R7),C'9'          Greater than 9 ?\n         BH    FLAGON              No good.\n         B     FLAGGO              It's numeric.\nFLAGON   OI    NUMFLAG,X'01'       It's not numeric. Flag the situation\nFLAGGO   DS    0H\n*--------------------------------  Numeric Test this character - above\n         LA    R7,1(,R7)           Go to next character\n         LA    R8,1(,R8)           Count it.\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nNOMORCUT DS    0H\n         MVC   NEWNUMB(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for Execute\n         EX    R8,MOVOUTL          Move number into display field\n         LA    R8,1(,R8)           Bump R8 back to where it was\n*\n         TM    NUMFLAG,X'01'       Did it fail the numeric test?\n         BO    NOTNUMER            It failed. No changes to be made.\n*\n         STC   R8,NUMCOUTL         Save PARM number's length (not used)\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         BCTR  R8,0                One less for Execute.\n         EX    R8,PACK             Convert to Packed.\n         CVB   R0,WORK             Convert to Binary.\n         ST    R0,NEWNMBIN         And store number in NEWNMBIN.\n         B     PASTCONV            Jump past constants.\n*\nMOVOUTL  MVC   NEWNUMB(*-*),0(R1)  Executed\nPACK     PACK  WORK,0(0,R1)        For conversion to binary.\nWORK     DC    D'0'                CVB work area.\nFULLZERO DC    F'0'                Fullword of zeros.\n*\nPASTCONV DS    0H                  Continue execution.\n* ------------------------------------------------------------------- *\n* -- >  Test again if this command is being run APF Authorized   < -- *\n* ------------------------------------------------------------------- *\nAUTHTEST DS    0H                  Don't let the system get a S047.\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* ------------------------------------------------------------------- *\n*     Replace the number here,   Get TCASUMAX field again, this time  *\n*       in Key 0.                 to replace it with the new number.  *\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT.\n         USING CVT,R2\n         L     R3,CVTTCASP         Addressability to CVTTCASP\n         USING TCAST,R3\n         MVC   NEWNTEST,NEWNMBIN        Copy binary number for testing\n         NC    NEWNTEST,=X'FFFF8000'    Are any high order bits on?\n         BNZ   TOOBIG                   Yes. Entered number is too big\n* ------------------------------------------------------------------- *\nKZ       MODESET KEY=ZERO\n         MVC   TCASUMAX,NEWNMBIN+2    Replace MAXUSERS in Key 0.\nNZ       MODESET KEY=NZERO\n* ------------------------------------------------------------------- *\n* --  Normal Completion  -                                         -- *\n* ------------------------------------------------------------------- *\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Previous value of MAXUSERS :  '\n         MVC   LINE+30(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE(30),=C'Value of MAXUSERS reset to :  '\n         MVC   LINE+30(10),NEWNUMB\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         DROP  R3\n* ------------------------------------------------------------------- *\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of MAXUSERS  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG10),MESSAG10\n         APUT  LINE,L'MESSAG10\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,4\n         B     EOJ                 CONT.\n* ------------------------------------------------------------------- *\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of MAXUSERS  :  '\n         MVC   LINE+30(10),LJUSTWRK    Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG11),MESSAG11\n         APUT  LINE,L'MESSAG11\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ                 CONT\n** ---------------------------------------------------------------- **\nTOOBIG   DS    0H                     Number entered was too big.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2F,L'MESSAG2F\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of MAXUSERS  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n*        APUT  LINE,47\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTNUMER DS    0H                     Parameter not numeric.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current number of TSO Users:  '\n         MVC   LINE+30(10),LJUSSTOR  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Current value of MAXUSERS  :  '\n         MVC   LINE+30(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,39\n         MVC   LINE,LINE-1\n         MVC   MESSPARM,NEWNUMB       Stuff entered parm into message.\n         APUT  MESSAG2B,MESSAG2L\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      S U B R O U T I N E S                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTITLSTMT DS    0H\n         APUT  MESSAGET,L'MESSAGET    Full title and messages.\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSAGEV,L'MESSAGEV\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLJUST    DS    0H                    Left-justify the display number.\n         STM   R4,R6,SAVER4T6        Save work registers.\n         LA    R4,RJUSTWRK           Point to right-justified number.\n         LA    R5,LJUSTWRK           Point to left-justification area.\n         LA    R6,10                 10 characters only.\nLJUSTLUP DS    0H                    loop.....\n         CLI   0(R4),X'F0'           Is this character smaller than 0?\n         BL    LJUSTBMP              No good. Bump past it.\n         CLI   0(R4),X'F9'           Is this character larger than 9?\n         BH    LJUSTBMP              No good. Bump past it.\n         MVC   0(1,R5),0(R4)         Significant. Move it to left-just.\n         LA    R5,1(,R5)             Bump left-just character.\nLJUSTBMP DS    0H\n         LA    R4,1(,R4)             Bump right-just char in any case.\nLJUSTCYC BCT   R6,LJUSTLUP           Loop up to BCT times. (10).\nLJUSTEND DS    0H                    end of loop.....\n         LM    R4,R6,SAVER4T6        Restore work registers.\n         BR    R9                    Return to caller.\nRJUSTWRK DC    CL10' '               Right-justified display number.\nLJUSTWRK DC    CL10' '               Left-justified display number.\nLJUSSTOR DC    CL10' '               Store current number of users.\nSAVER4T6 DS    3F                    Save area for work registers.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                '   BLANKS\nMESSAGED DC    C'--------------------------------------'\nMESSAGET DC    C'USERMAX - VER. 1.2 - &SYSDATE - &SYSTIME   '\nMESSAGEU DC    C' Change the MAXUSERS number in the IKTTCAST '\nMESSAGEV DC    C' control block.                             '\nMESSAG10 DC    C'To change MAXUSERS, enter a numeric parameter. '\nMESSAG11 DC    C'This program was not invoked as a TSO command.'\nMESSAG2B DC    C'Parameter '\nMESSPARM DC    C'          '\nMESSAG2E DC    C'had non-numeric characters.  '\nMESSAG2L EQU   *-MESSAG2B\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG2F DC    C'Number entered was greater than 32767.'\nMASK10   DC    XL10'40202020202020202120'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D                  Save Area\nCVDWORK  DS    D                   Work area for CVD instruction\nSAVE1401 DC    5F'0'               TESTAUTH save area for registers\nSAVER5A  DS    F\nBINUSERS DS    F                   Number of current users in Binary\nNEWNMBIN DS    F                   New number to put in CVTBCLMT\nNEWNTEST DS    F                   Test binary number not too large\nDECOLDNM DS    PL8                 Packed version\nDECUSRNM DS    PL8                 Packed version\nNUMFLAG  DC    X'00'               Flag, X'01' if not numeric\nNUMCOUTL DC    X'00'               Store Length of parameter here\nNEWNUMB  DC    C'          '       Store Parm number here\n         DS    0F                  Align on fullword\nLINEB    DS    C                   LINE-1 (primed with blank)\nLINE     DS    CL137               Print line for most purposes\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of Data Area\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKTTCAST\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USERMAX$": {"ttr": 19208, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x009\\x01\\x055O\\x01\\x19\\x19\\x7f\\x159\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2019-07-16T15:39:39", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT498.FILE731(USERMAX)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB498731\n SETCODE AC(1)\n ENTRY   USERMAX\n NAME    USERMAX(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YESLOGOF": {"ttr": 19210, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x008\\x01\\x17\\x18O\\x01\\x17 \\x1f#U\\x00A\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2017-07-03T00:00:00", "modifydate": "2017-07-20T23:55:38", "lines": 65, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//SYSIN    DD *\n    TITLE 'YESLOGOF - SET THE ECTLOGF BIT TO LOGOFF'\n* ------------------------------------------------------------------- *\n*      YESLOGOF -  RESET THE ECTLOGF BIT TO LOGOFF                    *\n*                                                                     *\n*   Author:   Sam Golob                                               *\n*                                                                     *\n*   Not re-entrant.                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nYESLOGOF CSECT\nYESLOGOF RMODE 24\nYESLOGOF AMODE 24\n         USING *,R15\n         B     STARTPG                   Eyecatcher\n         DC    CL10'YESLOGOF - '\n         DC    C'&SYSDATE'\n         DC    C', '\n         DC    C'&SYSTIME'\nSTARTPG  DS    0H\n         DROP  R15\n         USING YESLOGOF,R12\n         STM   R14,R12,12(R13)                Save regs\n         LR    R12,R15                   Load base\n         LR    R14,R13                   Caller save area\n         LA    R13,SAVEAREA              Save area address\n         ST    R14,SAVEAREA+4            Store old save\n         ST    R13,8(,R13)               Store new save\n         L     R7,12(,R1)                ECT from CPPL\n         OI    28(R7),X'10'              Turn on LOGOFF bit X'10'\n         SR    R15,R15                   RC = 0\nRELEXIT  DS    0H\n         L     R13,SAVEAREA+4            Old save area\n         LM    R0,R12,20(R13)            Restore regs\n         L     R14,12(,R13)\n         BR    R14                       Exit\nSAVEAREA DS    9D                        Save Area\n         YREGS\n         END\n/*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   YESLOGOF\n SETCODE AC(1)\n SETSSI  CB495731\n NAME    YESLOGOF(R)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT731/FILE731.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT731", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}